all right everybody welcome back and in this video what we're going to be doing is hopefully finishing up the back end for our shop slash eCommerce solution here and we're gonna have to build the address model order and order products model and another thing that I want to mention is I did bump up the font size I saw all those comments and also I saw in the video that it was pretty small so let me know if this is big enough if not I can just bump it up again and lastly for anyone just joining I just want to say that this series is indeed less of a tutorial and more like a codalong session so if that's what you're into then cool uh feel free to join us if not then yeah unfortunately uh that's what this is so now on that note let's go ahead and kind of just figure out what we're gonna do so it already has chat gbt for some help with these models but we're first going to be creating an address model and then we'll go with the order and order products now actually let me pull this open as well uh this is the new Boston front end but what I want to do pop open tnbos I know you can't see that but just getting the software open since I want to talk you through some things all right if it opens up there we go okay so check it out so the logic that we're gonna go with let me pop open Redux is that whenever let me pop this open so whenever the buyer places an order then what this means is that they are going to need you basically need to have two things whenever you place an order you need to have an address to say where the order is going to be shipped to and you also need a list of products and just as a kind of requirement all these products need to belong to the same seller so whenever we actually make this request on the back end we actually don't need to pass in these products and the reason for this is because these products are already going to be in the cart so whenever an order is created instead of like the user explicitly passing in anything in that request the system can just look what's in the cart do some validation make sure that they all belong to the same seller and then if so it'll just create the order using basically converting these cart products to order products with this address and you end up with something that looks like this so the first thing we need to do is just go ahead and create this address logic or else there's not going to be anywhere for the user to receive their order so shop models I'll just create the new file for the models serializers in view now all right so for the address model where yeah chat Jupiter okay so for the address model this is what we came up with and all right let's just do a little bit review so all right the first thing by the way I haven't reviewed any of this code just kind of uh put in a prompt to check gbd to um generate the stuff but okay so for the first thing that I'm seeing is the address has a user which is what we want but I actually want to call it owner since that's kind of the naming convention that I'm following so the owners of the address instead of user related name addresses so they have Street City okay and let's do this so I notice a couple things first of all instead of street I'm gonna need two addresses there since uh basically address one an address line two yeah something like this and this is in case anyone has a PO box or they live in an apartment or anything like that so I'm just going to say address one and address two and 255 should be good for those and then yeah I'll say City State I like this more I don't know why I changed up all right so the address owner address one address two city state country and zip code and then even though I want to have the country standard I don't want to install any python package or anything for like the list of countries because what I'm going to do is just keep this a character field and then on the front end that's where I'm going to download um I'll find some like country list package or something like that and then the user is going to be able to select from those and then we'll just end up with a standardized country name on the back end here but I figured it would be well there's probably no package well there might be but just to uh have two separate lists one on the front end one on the back end and to make sure they're always in sync it's it's gonna be a little bit tricky so um let me just get an updated string representation for this me give me a string for this and address one address line two just reviewing as well state all right so this is pretty cool you know what I noticed as well is that so before whenever you have something like uh auto complete it was kind of like a tool to help you code of course I know that sounds obvious but um kind of the like extension of your abilities and then whenever I first started using chat GPT it was kind of the same just like uh a separate tool but basically autocomplete where I gave it something in it like tweaked my code or improved my code now I'm kind of treating it like uh many not a mini developer almost like a developer where I'm like you write code and then I'm going to review it make some suggestions so on and so forth so uh is this fine for international shipping so I know that this is good for the us but but it can be improved model makes a few assumptions about address structure yeah my knowledge of address structures in different parts of the world and actually what did I do for tnb OS because I knew I took some time to look at that and this is something okay actually this had a city state and zip code and then for addresses whenever you're adding yeah actually this might be fine then region okay so anything for example if there's no state if there's a region or Province then I believe we can just tweak that on the front end and that should be good okay so now moving on to the address serializer um yeah I believe we only need one so the dress serializer this all right so for address and for address and here you can address and then I just want to make sure that it's registered Django admin all right so in Django admin we're going to register our address clean up our Imports have our address model address serializer and then okay so I'm missing some validation here but we can fix that in a bit and address a few sets the user should only see their own addresses all right um let me give it the updated address actually I can just do this should I have chat GPT help or not when creating an address okay when creating an address the owner should be set the request user also update the permissions be set to to ensure only the owner can edit and delete there addresses I believe it should have my uh permission class from before all Fields read only Fields owner it's good that is what I wanted to copy that okay so for the address serializer the user is going to pass in all Fields aside from owner and then the is going to validate that using model validation and then for the owner it's going to be set to the request user right here that's looking good and then in the address view set what do we got going on the address few sets is we give it an updated core actually what did we create yesterday well we can do this just want to give it a good example use this class I know for a lot of this code too what I could probably do is just type it out uh faster that I'm telling chess GPT how to type it out however the reason that I'm not doing that is because chat sheepd always has like slightly different ideas so I like to see those ideas and kind of like uh pick it apart in a way now okay good career side perform crate yeah I don't think I need to do this and actually why not use crate instead yeah I want to follow the same design patterns use the create method instead like let's ask why not use the create method why perform create um okay the benefit for phone credit is to separates validation and saving steps when you call serializer to save to create model serializer is called which creates a model instance by overriding this or yeah I actually do want to use that serializer though is the thing so all right and that's because we have that uh logic in there all right so this should be good now let me just go ahead and lint and uh let's see make lint make it again and now migrations we're gonna migrate and then I just need to run the server register my URLs and it should be good okay so from views addresses we have an address view set and addresses is going to reference this view set and now just some quick sanity checks so oops the permission class is need to be updated so the permission classes are you need to be authenticated and you need to be the owner of the address in order to make any changes to it actually okay you know what you don't even need this sure is true because the owner is already going to be set to the request owner okay so when you call serializer Save so the serializer is going to be passed in the request data which has the user along with it since we are authenticated and then it's going to check if it's valid and then save it which is going to call this create method in in the create method it's already going to pass in the request user is the owner so we don't need to do it right here and for the get query sets it's complaining that I don't have a query set like this so it needs a default query sets which we can just set to none and then whenever you're retrieving them it's just gonna get the addresses that you are the owner for which we renamed to so the owner is the requesting user and make lint again and now I believe we can test it okay so let's open our favorite tool Postman all right so first thing I'm going to do is just log in as Bucky and let me pop open Django admin as well all right so addresses registered with Django admin now let me just go ahead and create a new address I did log in right all right so this is the token so this should be empty right here just getting Bucky's addresses but I just want to test it right now because after we create one we're gonna need it and then let's see all right so when creating addresses let me just get some errors here so we have address one and I'll say Maple Lane and then we have one two three four more fields all right City uh we'll say Pittsburgh pits Pittsburgh and the state Pennsylvania hopefully I spelled that right and then country USA and then the ZIP code will go with one two three four five send that okay so owner equals one and actually let me just try to pass in a different owner just to make sure that I can't okay so I can't pass in different owner even if I do it just reverts back to one which is Bucky and now let me go ahead and okay a couple things now I think we want to have credit date and modify date but your readonly Fields as well and then let me just patch this address so patching this I will say City equals um corn all right now I also let me just go ahead and reassign address number two to someone else to make sure all right so say address number two was Amy's address now when Bucky edited something to like the state equals New York we should get a detail not found that works as well because it is not his address so that works and if we delete it same thing however should be able to delete one beautiful wait yeah yeah so one was his address okay so that is looking good and what else was I gonna do uh so read only fields yeah so read only fields I'm also going to have crazy day and modify date in there since those are fields that are kind of managed by the system so no need to like explicitly pass them in whenever a new address is created all right looking good and then anything else for a dress quicksand Indie check all right looking good now that that's out of the way let's go ahead and okay buyer creates a dress they can also delete and update now buyer places in order what do you got for this chat Jupiter all right where are you at so order is going to consist of a buyer a seller and an address okay now technically we don't need a seller here because each order is going to have order products in these order products are all going to belong to the same seller and we can kind of derive the seller that way but that's a very convoluted way to kind of um figure everything out in a way we have like I don't know I don't even want to say like two sources of the truth but uh yeah that would just be like a headache trying to do that every time on the back end and front end so we ain't gonna do that instead we're going to keep things nice and simple so in the shop I'm going to create a new order model serializer and view all right now for this orders let me kinda get my imports steal it from here okay all right so order is also gonna inherit from creating modified and every order is going to have a buyer which is a foreign key to user and the related name can just be orders bot purchased I don't like how this is orders and then this is sold orders purchased so I'll say actually maybe bought yeah buyer bought seller sold and this is how you spell bought right yeah and then I almost guess okay that works for now we'll have to fix that later and then for the address it's just going to be a foreign key to that address in the related name I don't even think we need to relate this might be useful so if we ever want to see like give me all the orders that were shipped to this address we can just say orders right here okay so and this makes sense right if you're a user and you want to see every order that you sold or if you're a user and you want to see every order that you bought okay now order ID by using sellers are username good good good next just clean up our models from order in poor order last but not least just register and Django admin before you get to anything else okay beautiful now that is looking good now in our serializer for order what do you got what do you got okay let's do this so serializer order is going to look similar to the serializer for a dress but instead of importing address we're going to import order and then the logic for it okay so you have a order read serializer and order right serializer okay so this is interesting as well because yeah okay so the order serializer whenever we are going to be returning that to the user it's going to have those order products included and this is what we want as well because even though the order only consists of a buyer seller and address what we don't want to have to do is whenever we're looking at our orders to First fetch a list of these orders which only contains that like very basic order information and then what we would have to do on the front end is make a separate request to pull down those order products when that doesn't really make sense I mean maybe from like a crud standpoint but for this it would just be nice if you just always included these and in that case we're going to need to make two models at once but either way let me just kind of think through this so the order products we didn't make this yet but we're just going to include all information including the order products which is going to be a list and it's going to be read only and then for the right serializer we are just going to be giving it the address which is a foreign key and then for the order read only Fields it's going to be buyer seller and then also those created modified Fields so the readonly fields for this equals this and then buyer and seller so I don't think that we need to pass in ID right here and this can be a tuple let me just see something see my standards all right now whenever you are creating an order yeah you really never need to edit in order right maybe you would change the address on it but I don't that's another UI ux thing should you be able to change an address on an order now of course from the buyer's perspective that would be yes property however it might get tricky if you place an order and let's say that when you do the seller goes ahead and they ship this out well then what happens when the buyer changes their address well the seller is already gonna be like hey you changed it but then the UI is going to be weird like wait a minute I didn't ship to this address I thought I shipped to another one so for now I'm just going to say that all right I'll toss this question to the uh any of the viewers watching so anyone out there do you think the user excuse me the buyer should be able to change their address after they've placed the order good question okay either way all right whenever the user is creating an order they don't need to explicitly pass in the um products in the request because what we're going to do is we're just going to get all of their products based on basically all of their cart products where the buyer is the request user let me just make sure that's what we called it so the buyer of the car is basically the owner of it so this is all of their products in their cart and then for the product sellers for each of the items in their cart we are just going to pluck off the seller for that and all of the items in their cart should belong to the same seller and so here we're just checking that if for some reason um you have products in your cart that belong to multiple sellers we're just going to throw a validation error and then we are going to get the seller by popping off the first and only item in the set and then we are going to create an order object right here which is kind of the meat and potatoes of this with the buyer of the request user the seller is the seller derived from the cart products and the validated data is just the address and we also need to validate the address belongs to user okay all right so for car product and car products okay so a couple things here so here we need to validate that the address given belongs to the request all right so basically uh you can only ship items to your address not anyone else's address and then while that is doing that thing let me think so for each of the product in your cart we're going to go ahead and create an order product and then delete it from the cart so basically convert cart products to order products and this isn't going to have a quantity maybe in the future but not now and we still need to make this model I'm also wondering okay so a new validation here if you do need that apparently get validate so validate address I believe we can just do to validate field name method yeah so all right in yeah I don't even think we need this up here okay so order create serializer what we're going to do is call validate address and then this is going to validate the address that's passed in and I don't think we need that primary key field at the top but we'll go ahead and check that as well so address does not belong to the authenticated user which we want to make sure happens and then what else am I missing order product serializer okay all right so this is going to check that and then yeah for the validated data whenever they create the order this is going to be an address and yeah I don't think we need that because we already are using model serializer with the dress okay so now before I get to anything else let's just go ahead and make that order product model since it's needed in the order serializer so models actually let me go ahead and clear a lot of this out so I'll say models new python file order actually let me check my text messages and I'm moving and uh in a week and trying to coordinate everything because uh my new building doesn't allow people to move in on the weekends but that's the only time the elevator is free for the movers on this weekend yeah yeah okay all right order product order product order product where are you at or your product okay here order product quantity we're not going to have but either way all right so here is our order just gonna copy some boilerplate from here and now for the order product model let's see what chat GPT came up with all right so for the order product what we need foreign key to an order in a foreign key to a product there's a plane flying overhead order product ID just make that more readable okay so in this case what we can do since what I'm kind of thinking is that whenever well I'll show you so from the seller's point of view they are going to go ahead and create products now from the buyer's point of view they're going to see these products and add them to their cart and at that point in time they're going to become a cart product now whenever the buyer places the order those products are referenced through an order product now the thing about this is that even though that these products are now on in order and pretty much like off the market unable to be sold what they still are going to have is this active you basically still have an active product so I am wondering in this case we got a couple options we can introduce a new status in addition to active in draft that says like on order or sold or something like that another thing that we could do is we could say that um basically we can take pretty much like the item related information and extracted out to a base class and then the order product and product can just be similar and then what we could do is we can just yeah not going to want to do this but anyways another option is just to delete a product and create an order product from it whenever it's sold however I'm thinking that that's probably not the best either so what I'm leaning towards doing is just creating a a new status on here that says like sold or on order or something and then whenever you are a buyer looking at the catalog of all the products we're just filter out by all the active ones so active product we will Define as a product that is not in draft mode and not on hasn't been sold yet and in this case everything checks out still but it's always good to think through these things so an order product is basically just this an order in a product so on that note let's go ahead and all right so from order product work a product and then register in Django admin actually is my server running right now we can stop that because we need to make a ton of migrations before this is good to go again but either way good all right so we have ordered product and now just go ahead and make this serializing review for it so actually do we even need of yeah we do all right so order product serializer and order product View all right so and also for my order serializer we can actually okay so a couple things from the order serializer we were working on earlier so whenever an order is created we said that you're basically going to take all the cart products do some validation and then for each of the products that was in your cart you are going to convert it to an order product or create an order product by saying an order product create for this order which is created up here and the product is related to the cart product product and then after you created an order product you can just remove it from your cart I believe that we can optimize this as well by using bulk crate however this is fine for now we're not we're not worried about optimization in this step just to make sure that things are working so now the only other thing that this needs fixed is order product serializer and we are about to fix that right now and in that kind of just thinking through okay so in my oh this is perfect actually so in my order product serializer the product already comes back as serialized and that is what we want because in our orders um well I guess even in this view we want to be able to view the product related information so this is good this is really really great okay order product and then okay so order product serializer doesn't need a reading or write so and I'll say from all right so the order product serializer is Going to Be A Serial or an order product with a product serialized using product read serializer pretty much the product details right here and now in my order serializer my order product is order product serializer and each order whenever we return it to the user it's going to have many order products they may only have one but it's going to be returned as a list no matter what read only equals true or to read serializer and okay so now I just need to create this View and for this wait this yeah we don't even need a view for this right because yeah okay so we don't need any view or any endpoints for order products at all let me just think through this a little bit so views order product and also while I'm at it so I can just go ahead and I don't have any views for order either so that's next on todo list but anyways the reason I'm saying that we don't need any views for order products is because to create order products what we do that gets done through the process of creating an order we never edit order products and then once we were anytime we retrieve order products those are just part of an order so that should be good Okay cool so now let me go ahead and create my order View order right serializer and then if you said okay okay all right let me take another look at my order model all right so for our order model we have the buyer the seller the dress and then for the order serializer reserializer inner right serializer and we said that okay so orders can only be created and never delete it or updated and then we said maybe the address can be editable but that's a kind of logic in the future and then when an order is created the buyers the request user so yeah I think this is going to be pretty simple all right so first let's just enforce some stuff we don't want those we're just going to use that same pattern and then for the order view set is authenticated okay so I'm going to need to change this as well okay all right so from Models we're going to import order and from the series and for the serializers these are going to come from order and we have the order reserializer holy sweet ravioli order serializer in order right serializer and just like what was it car product the only action we are going to allow is the creation of orders so the only thing that you the only thing that people are going to be able to do is create orders not delete them or edit them and then when creating we're going to use the right serializer when reading we're going to use the read serializer and for this query set this is incorrect as well so instead what we want to say is that for the query set users should be able to retrieve any orders that they are the buyer or seller for all right so I'll say update this query sets to and I've got to spell retrieve right i before e except over C I have it for a accept that for C okay uh update this queer set users should only be able to retrieve orders that they are the buyer or seller for and I just paste it in the view set and now let me just go ahead and paste in my order models as well just to give a little bit more context update the get query sets and gonna need this Q object and now this is going to require a ton of testing again I'm going to do manual QA and then uh lots and lots of unit tests okay and get query set perfect QRS okay so the orders that you have access to are the ones that you are the buyer or the seller and let me just clean this up a little bit by doing this okay okay okay so you have access to orders where you're the buyer or the seller everything else should be good now let's lint it make our migrations migrate all right so the next thing you actually need to do is just uh register this order few sets so from order we're gonna get order view sets and this is going to be under the endpoint orders let's make a lint regressions and let's run and test make server okay so for this example let's say and what are we really going to be testing the meat and potatoes of this are in the order right serializer okay so what do we got going on so far well actually here let's kind of do a clean sweep of everything I'm going to delete these addresses I'm going to delete all the cart products and we'll kind of walk through this bit by bit there's no order products there's no orders uh there are two products and I'm gonna say that Amy is selling these products because in this little example I'm just gonna pretend to be Bucky I guess I don't have to pretend I I am Bucky but okay so right now actually just make sure I got everything cleared out okay no addresses no car products no order products no orders and right now check it out I am shopping and Amy is selling bacon and a wooden spoon now even though she's selling both of those things only bacon is active right now so what I need to do if I want to buy this bacon since that's the goal right now for me to be able to buy this bacon so I first need to create an address well first I need to log into the app so I'm logged in right here and now I'm just gonna go ahead and get my addresses which hopefully I don't have any right now beautiful so I need to go ahead and create an address right off the bat so I'm gonna go ahead and I believe my body's good too so this is where I live I live at uh Maple Lane corn New York and I realize I forget to give my street number so I actually live at 123 Maple Lane corn New York so I'm gonna patch this address number four and all right looking good so now that I have my address let's go ahead and add that bacon to my cart so this bacon is product id1 and I want to create a cart product from this so I'm going to go ahead and post car products and that is product number one send that and beautiful so I now have I'm buyer number one I now have bacon in my cart now just to check I'm going to try to add that other product that I should not be able to so this wooden spoon spoon is three however it's still in draft mode so I shouldn't be able to add that so three products must be added active to be added to the cart great and also let me try to add that bacon again even though it's already in my cart and okay this product is already in your cart beautiful so now in my cart I have bacon and now that's it that's all I needed to get I am ready to create an order Now to create an order what I need to do is I need to just pass in the address so first I'm going to say for post orders create orders let me just go ahead and get my addresses now so that address of mine was one with the id4 so address with the id4 this should work however before you do I want to check one other thing and that is this validation where whenever we are creating an order and passing in the address we need to make sure that the yeah value okay so this value is going to be equal to the address that we passed in and we'll say if the address owner is not equal to the request user that address doesn't belong to you so let's just go in Django admin real quick and create another address that belongs to Amy all right so Amy has an address of 456 Amy Lane apples New York uh this this this so save and continue editing and then okay so this is address number five so I'm Bucky and I want to place an order and I want to use Amy's address so I'm going to send this in and it says address this field is required okay so it looks like I did need that primary key field oh wait a minute no that's because I spelled dresser on okay the address does not belong to the authenticated user perfect so that's Amy's address I shouldn't be able to use it my address is number four right here so now when I created this with number four okay so it looked like the order was created but our serializer got mixed up okay so we created this order which I was the buyer and Amy was a seller now I should have one order product bacon for order number one and I also should have no cart products this is beautiful so the only other thing that it looks like I need to do is in here when creating an order I need to return the data using the order read serializer and maybe you can just do this all right so when creating an order the order I said here response and Status so response and status okay so when I create an order what's going to happen is it is going to get the right serializer and then it's going to check if it's valid and then if it's valid it's going to call discrete method which is going to return in order and then for that order I want to send it back to the user using the read serializer right here so now I'm gonna go ahead and Clint and a run server okay now let me actually delete this order and follow that last bit of logic so all right I don't have any items in my cart anymore and let me just go ahead and delete this all right no order no order products and then this bacon is still for sale so the bacon was product one first let me go ahead and add it to my cart so I'm going to go ahead and add product number one to my cart just want to get cart products all right so that bacon is added to my cart and now I want to create an order with address number four and let me just go ahead and make sure they can add to my cart no word products in no Order Perfect now I want to go ahead and create an order with address number four and then once I do I'm going to be returned this serializer so the buyer which is which is me the seller the address okay so this is good I'm just thinking right now in terms of what's going to be needed on the front end so all the product information including you know the image so on and so forth um I think we also want to yeah so the buyer and seller we're probably also going to want to serialize using the user read serializer because from the buyer's point of view we're just going to want going to want to give information about the seller and for the seller's point of view just some user information about the buyer and then also the address needs serialized as well all right so to check that let's just go ahead and get orders and all right so when getting orders just serialize these three foreign keys and then I think she we should be good all right so for the order read serializer the buyer seller and address so first of all let's do the address so from so address is going to be serialized with the address serializer it's not gonna be many but it's going to be read only true and actually let me just do everything and then do it all at once so I'll say it's kind of unrelated but this is going to be read only true as well so from New Boston serializers and for user read serializer buyer for the order it has a buyer and the seller let me just elbow butt type these and went to clean up my imports all right so now whenever I get the orders okay so for each order I pull down the address is going to be serialized the buyer is going to have their info even though we don't have a profile photo yet actually let me make a ticket for that so I don't forget also user Avatar says profile photo all right so that's good I don't know what I'm gonna call it yet but just want to uh kind of make a note of that and check it out so the order is going to have the address serialize the buyer's information which is eventually gonna include an avatar as well the seller's information and yeah everything else is good to go okay and just to make sure that the addresses the cart products the order products the order and the product okay so one other thing that we need to do and let me just think through this logical one more because right now even though I ordered this bacon the bacon itself is just still has activation status of active which means that whenever users are browsing it right here that bacon is going to still be for sale now that is not what we want because our initial Marketplace is just going to be for items like this it's not going to be like for uh manufacturers and like suppliers and stuff who have like um who like anyone who actually sells bacon and you know they can have like multiple customers a day it's going to be just for like uh us selling things to each other like books and cool rocks and stuff like that and of course we don't have like quantity or anything like that so on that note think about this just a little bit more so first of all activation status is not um actually this is useful to keep active in draft because well I mean it's like working exactly as we want right now whenever you're selling something you can just decide to activate it or put it in draft mode that's I don't know it just seems super intuitive so yeah what I'm thinking now is instead of adding another status to this active status and then this is interesting so instead of adding another status to this active status and then renaming this to be like product status or something generic like that what I'm thinking of is one we can have an additional flag or status on here to pretty much say is this product sold or not and another thing that we can do to keep this even more simple is just to say that whenever you are and maybe this is the way to go we can say that whenever you are querying products for example whenever you're on this page and you just want to see all the products that are available for sale um what you can do is just fetch the products that don't have a related order product with it okay so right now we're saying that whenever you retrieve products then you can view all the active products you can also view any products that are in draft mode that you are the seller of but I'm thinking here we basically want to say hmm what is going to be the best way to do this you know what what I'm gonna do right now since we have our main logic working is I'll go ahead and upload this video and then when the videos like processing and uploading um I'm gonna go ahead and think through it and I'll I might have a chat GPT help me out as well but also if anyone else has any ideas how we can do this in the most elegant way since I know you know there are a couple different things we can do change the status on and so forth but if any had anyone else has a really elegant solution to how we can just make sure that once a product has been sold and of course it's still going to be active then it doesn't appear as an option for anyone else yeah maybe we need to add an extra field maybe we just need to uh filter out those products but um either way let me know and then yeah we'll kind of just uh brainstorm it all together and our best solution is the one that I'll update in the next video but for now let me just go ahead and make lint make tests push this up see I'll check my migrations one more time so migration's pretty sure okay no changes detected and I'll make migrate just to make sure everything is nice and clean and on this note I'll say uh I'll say uh address order and order product logic I don't want to say remaining shop logic because we still got some housekeeping items to do and another thing that I want to mention is that in addition to kind of figuring out this um like sold like don't show me okay let me take a step back in addition to figuring out the logic where we no longer show sold products to potential buyers if anyone else notices anything else in the code or anything we can improve or optimize or logic that I missed um then yeah let me know that as well and on that note I think we're good for this video so as always thank you guys for watching and I will see y'all next time