hi this is Alex from PHP academy.org back with another PHP tutorial for the New Boston in the last uh object oriented programming example we looked at we created a class called bank account with a property of balance and we've set this to 10.5 uh just as an example we've made this public for now before we talk about properties and their different types we've just created it public so it can be used by the rest of our page now we've also created a method which is called display balance and we've echoed this out here you can see it returns a value here of balance and then this this balance so returning the uh the value of the balance which we've now echoed out onto the screen but what happens if we want to start to modify this balance So within a bank account you can obviously display your balance you can withdraw and you can add funds to your account so you can uh you can add uh money so we can go ahead and we can uh create another method and we'll name this first and then we'll talk about how we're going to do it so we're going to say public function withdraw and we're going to create the skeleton so we've got our uh parentheses here and then we've got our curly brackets here as well so within withdrawal what we want to do is much like a function in normal like proed when you're programmed procedurally in PHP we want to take in a parameter so I'm going to take in um int or amount for example that makes it look a bit better so we have a function now which is called a method so we're going to be calling the methods uh called withdraw and with this withdraw method we can spe specify a specific amount of money that we want to withdraw so let's go ahead and start the calculation now what we want to do is we don't want to return a value to the user because our balance will return a value our withdraw is going to do everything in the background to withdraw the funds from the bank account so what we can now do is we can say um this remember we used the this keyword or the variable if you like to which I mean the variable this corresponds to the whole of our class so we're saying this balance so we're picking up the variable here much like we did in this part here and then we're saying equals this balance now this is equivalent and then we say minus the amount so we're taking the parameter that we fed in or the argument that we fed in uh the argument here and we're minusing so we're using the minus um the minus mathematical or uh arithmetic operator here to minus the amount that we specify so this is the same as if we were going to do balance oh sorry balance equals balance minus amount however because we're working with it in a class we need to reference it this and then we use the hyphen and the greater than sign to get the balance from this class so the current balance of uh the current balance which is a property inside this class is equal to the current balance minus amount so what we've done here is we've successfully created a method that is going to withdraw a specific amount from our bank account so let's say before we display our balance we want to withdraw a certain amount so withdraw a certain amount is obviously going to take away um an amount from our balance so let's go ahead and um do this and then we're just going to touch up this method to ensure that we can't withdraw any more than we actually have in our bank account so we simply say Alex remember we've created the new instance of the variable of the uh class up here we say Alex and then we say withdraw and then obviously in the brackets much like we did with the display data we didn't put anything in the brackets because there's no arguments in here with withdrawal we just specify an integer amount so we could say withdraw five so if we want to withdraw 5 we um withdraw it this what this will do is it will take away five from the uh Bal property balance and then it will Echo out our balance so we're displaying our balance so uh let's just go ahead and comment this um so we know what we're doing new instance of class then what we're doing is withdrawing 5 and then we're displaying balance so what we've done is we created a new instance which is fine now what we've done the difference is before we display the balance we're making a withdrawal of five so let's go back now what should happen is we should display the balance out as 5.5 as you can see here so we've displayed the balance out out now as 5.5 so we've successfully withdrawn £5 from um our bank account in fact I'm going to get rid of these comments CU I know it's going to make it look a lot Messier okay so now what we need to do is check inside withdraw um whether um whether we can withdraw this money or not so um what we need to do is we need to create an if statement we need we need to say if um this balance and we can pop that in Brackets just to make it easier to read um if this balance is um smaller than um the amount so if our balance is smaller than the amount we're trying to withdraw then uh oh no sorry we need to say Echo something otherwise we can make the deduction from our bank account okay so um in here we can just say Echo um or or we can even throw a new exception but we'll deal there's I have tutorials on throwing exception so you can take a look at that um so we've got just Echo not enough funds or money we'll say to keep things simple so let's uh go back and refresh and we can see that that's absolutely fine now let's try and withdraw uh £1 so let's go down so we're going to say withdraw 12 now what we should do is get the error message not enough money and then it's still displaying our balance because we've specified uh we specified uh displaying our balance down here so not enough money now we can create this error in many different ways um however for now I'm just going to Echo this out just to keep things simple so what we've done in this tutorial let's just briefly recap we have created a new method called withdraw and we've allowed the user to withdraw a certain amount of money from their bank account using this amount argument we're checking if the uh there's enough money in the account first of all otherwise we're deducting the balance from the balanced property or the amount withdrawn from the balanced property and we're doing this by calling the method here um which is referenced to the new instance of the bank account class that's named Alex