all righty hostes so in this video what I want to do is I want to give you guys a really brief overview of Redux and also talk to you guys about some of the challenges that it solves so let's first talk about a traditional react application now we already know that it's broken up into components which are just different parts of your website and then these components each one it comes with a bit of memory called State now the state is essentially responsible for deciding how that component is going to display for example the state of this playlist would just be a list of videos so it knew what list to put in here now maybe for this video player the state or the JavaScript object would just be like the YouTube code for the video and maybe the title of the video so it wouldn't take up that much memory now maybe this button component where you go to the next in the previous one this state would be an ID for the next in the previous videos so you pretty much had these different components with different JavaScript objects associated with them and they were all kind of separate so this is where things kind of got complicated so say that whenever you were developing this application and you wanted to go to the next video you need to click next and then you need to take this information and pass it to the playlist so it highlighted the Right video and then what this playlist need to do is somehow communicate with this video player so this video player could change to the proper video or wait a minute maybe it was the button that changed a video and that change a playlist or maybe this playlist just took care of everything and you know what it's kind of a pain in the butt when everything is separate and all these different little objects are just floating around and you need to figure out how to connect them well what if instead of having all these components different states that we could combine all of them into one so instead of a bunch of separate JavaScript objects what if we took them all all the states for your entire application and combined it into one big JavaScript object wouldn't that be a lot easier well it turns out it is and that's what we did with Redux and by we I mean someone else so I'm not trying to take the credit but that's kind of how Redux works now if you're thinking all right so you're going to take all the data from your application and stick it into one big JavaScript object pretty much just like one big Json file well yes that's what we're doing and if you think all right that's going to take up a lot of memory well not really because it doesn't take up any more than before because let's say it takes up 3 kilobytes well if this took up one and this took up one and this took up one 1 + 1+ 1 still equals 3 so it takes up the same amount of memory we're just kind of managing it in a better way so that's really cool so of course we have all of our states in one place and again that is called the store that's all the store is all of your States combined so of course we still have these components the playlist the video the buttons and they need access to that data right because the data in the store is going to tell the playlist what videos to kind of display it's going to say what the active video is so we still need to be able to get this data to the individual components so how do we do that if we kind of took all of their states and put them into one big file well we do so using first of all a provider now again this is probably going to be kind of confusing and I'm not saying you need to memorize this right now because later on I'm going to show you how to do this through code and it's going to make a lot more sense I just want to give you guys like the real quick overview right now so anyways what a provider does is it is pretty much part of the puzzle that takes your store which is all your applications data and it essentially needs to pipe them down to the components the buttons the forms the sliders the playlist so on and so forth now you don't just pump them directly into your components what you do is you actually have to pass it through a container so this container if you're wondering why you need to to do that this is actually the glue that connects your react components with your Redux store so this top right here this is kind of the Redux part and this bottom component this is kind of like what we learned before with the react and this container is kind of where you make react connect with Redux so all containers do is they go fetch your applications data and they pretty much say all right this is the part of data that I want and this is the component that I need to send it to to say how to display so again we have this big cloud of data floating in your container would say okay give me just the playlist information and I'm going to render or use it to display this playlist that's all the container is nothing confusing or anything like that now the cool thing one of the coolest things that we're going to see is anytime your store or state application changes anytime that data gets altered then your components are automatically going to be rendered or redrawn so that's awesome we just have to change this data and your display or components change to reflect that perfectly it's awesome all right so that's kind of the overview the really nontechnical overview of how we get to components so now we have all these components sitting on the screen all right so now the user has something to look at so then the user of course is going to be doing stuff clicking these buttons performing actions clicking on this playlist playing the video a bunch of different things so whenever they do one of these things like click a button it emits something called an action and by the way just the heads up an action it usually is just a user generated event but it doesn't always have to be you can have other action like when um like when a request comes back from an API call or when something finishes in the background but like 90% of the time they're just user events whenever they click a button submit a form tomato tomato so again an action is just something that happens now whenever something happens of course eventually what we need to say is how is that event going to change your application's data for example if they hit next video then you would want to change the active video if they clicked a new user button then of course you would want to add a new piece of data to the store if they hit delete my favorite movie or whatever then you would want to delete an item from the store so that is an action and it causes a change in your store but how exactly do you decide how that change occurs what you need to do well you have to go through something called a reducer so this is kind of the last confusing part but once you see encode it's really easy to understand so all the reducer does is it takes an action and they're just functions that's all they are and the parameter that you pass in is an action and then it needs to decide what part of the store to change so for example if they wanted to delete one of their movies you would make a function called a movie reducer and then it said okay I'm going to listen for the action delete movie and we'll say it's a button that got clicked and whenever that occurs I'm just going to delete uh you know a certain JavaScript object or a user reducer where whenever they added a friend or something maybe it was called a friend reducer then we just added an object to the store so again that's kind of the entire architecture now again the reason that this works so well is instead of having this tree architecture or this hierarchy that we need to figure out how to pipe data up to the top and then how do we pipe it to other components and everything kind of like spaghetti and kind of figuring out how to get from A to B we now have all of our data in one place kind of like a main brain for your application and then we have all these different components but all they do is they just emit actions they just do things that's it and then we have another section that says all right whenever something happens it doesn't really matter where it came from but I'm going to be listening for certain actions and whenever one of these things occurs then I'm going to change the store in that appropriate way and then of course your view or components get altered perfectly and everything works out beautifully so look at this girl she looks like she she's about to cry I used her in one of my other tutorials and she has like the saddest face what all right and look this this guy looks like Harry Potter nonetheless I'm getting kind of off track now but that's the basics of Redux and again if everything was kind of overwhelming and you guys are like providers and reducers oh my God tomato tomato I I'm not going to remember this trust me once we go through and we start coding this bad boy is going to make so much sense and it's going to kind of stick in your brain so thank you guys for watching don't forget to subscribe and also if you want to donate to my patreon account I am saving up for a huffy Mudslinger so uh yeah if you want to do that feel free but anyways I will see you guys next tutorial