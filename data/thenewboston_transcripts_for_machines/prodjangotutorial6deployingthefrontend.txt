alrighty y'all now that we have our back end up running looking beautiful what we can do now is go ahead and figure out how to deploy our front end and the front end for this little sample social network site is on of course the New Boston developers and it is in this repo cooking front end so go ahead and check that out and when you do you're going to have this repo you're going to have to add this file right here so go ahead and create one new file and name it dot EnV dot production right here and for this you're only going to have two environment variables that you need to set and that is the API URL in websocket url and make sure that whenever you are setting um environment variables that they're prepended by react underscore app underscore and that's create react apps kind of uh required naming convention for setting environment variables but once you do that go ahead and just replace your domain names with whatever actually let me see if I can pull it up so basically uh whatever is right here and then once you have that done then you can just run npm run build and what this is going to do this command is it's going to create a new build directory actually let me go ahead and run this while I'm talking so this is going to go ahead and build your project matching pretty much set up to uh communicate with this back end and it's going to take all the files and stick it in this new build directory right here you see it just got created now before we actually deploy this what I would recommend doing is first installing this this serve library and it just allows you to test things locally before you you know get done like deploying everything to S3 and something that isn't working then having to figure out you know what's broken so what we can do is once that's installed I already have installed so that's why I'm not going to do it but you can run the command serve hyphen s build and that's pretty much gonna serve this directory like we are going to on S3 so now let me just go ahead and pop it open in localhost and check it out so it looks like it is indeed working and what I can actually do is maybe I can shrink this a little bit so you guys can see better but actually I'm gonna log out since I already had something in my cache from last time but I can either create new account or log in let me actually create a new account and you can see the new account that I created starts with the E7 97 now on my back end once I go to accounts it should be displayed there all right so E7 97 and if I just click into that what I'm going to do is I'm just going to add some coins to my account just because I need coins to like test some things add comments add posts so on and so forth but for this actually this is another unique thing about how this is set up but it doesn't have a password yet it actually doesn't even need a password at all however in Django admin if you try to update your account model without a password then it kind of freaks out so for this you can just set anything for a password again it's just like it just needs something in there and for the panel it's let me just at 10 000 and I'll just have saving continue editing now in your react app this should update automatically you shouldn't need to hit refresh because everything's already hooked up with websockets and yeah as soon as you update your account balance on here it should always automatically Refresh on the front end and now let me just go ahead and create a recipe so I'll say actually let me see what I got actually this is one of the most delicious things that I cooked it's well I gotta admit something so I cook the chicken and yes it was delicious this pasta however even though it was delicious it was microwavable bag but it was cauliflower pasta made out of cauliflower so you know not that bad after all all right so let me see chicken and cauliflower pasta and I'll say nice and juicy there you go obviously I wrote These before now let me go ahead and submit this and hopefully if everything worked all right beautiful now let me just go ahead and copy this image address just to make sure yes indeed it is now in our penguin chess backend S3 bucket looking good I mean look how juicy that is oh baby baby okay anyway skin a little bit distracted here point is that we are just testing that everything works locally and now once we confirm that we can go ahead and what we're going to end up doing is taking this build directory and instead of serving it locally since you know we actually want users to be able to access it we're pretty much going to be taking everything in here and moving it in an S3 bucket and I'll show you how to serve your entire website from just that S3 bucket so sounds pretty cool in order to do that the first thing we're going to need to do is create an S3 bucket now remember our back end was penguinchess.net now for the front end I want to serve that from my S3 bucket and ultimately from the domain name penguinchess.io so just keep that in mind when we're creating this uh just those differences but I'm going to create a bucket and the bucket name I'm just going to name it penguinchess.io and now the region this is good hit crate bucket and now from here oh just go whoa whoa whoa let's get back in there all right where is my bucket so it was penguin chess dot IO and from here what we need to do is we need to just um kind of enable hosting so I'm going to hit properties and in static website hosting where are you might be out the way okay so in static website hosting all the way at the bottom go ahead and hit edit here and then I'm just going to enable static website hosting and now in the index document right here just type in the index document so index.html typically yours is going to be a index.html but just to uh show you what's going on with the react app so this uh this pretty much gets built along with the source code into this build file and this is kind of my entry point this index.html so this is what they're going to load in in the react app loads this one tag pretty much gets replaced so the the entire react app so that's pretty cool but anyways that's what's going on that's why it's named index.html and let's see in the error document this is another interesting thing and I'll talk to you about this in uh just a bit but in the error document we're also going to be serving index.html and this well I'll talk to you in uh later on when we set up the CDN but I'll tell you why we do that in just a bit so for now let's just go ahead and hit save and all right so this is now uh pretty much enabled to uh host a website so from here what we can do is show you where there it is upload button right there so now what we are going to do is pretty much take all the files in here all these files including this static folder right here and yeah kind of just upload them actually can I do it right from here trying to drop my butt okay add file is going to do this the hard way the hard way just gonna click like two times okay projects where are you at this is cooking front end build and I'm going to select all these files upload those and I also want to add a folder which is my static folder contains all my like images CSS so on and so forth upload those as well then once I have everything selected just going to go down here and click upload all right and now I can close out of this and in my permissions what I want to do is in my block public access settings I'm going to hit edit and then I'm going to uncheck this and then I'm going to save those changes and then you just need to write confirm right here and then after this one more thing that we need to do is yeah right here so in your bucket policy um we pretty much just need to well pretty much similar to what we did with the other S3 bucket for on our back end allowing people to read images from the bucket we just need to uh kind of edit the permissions for these so go in here and just paste in this again I'm going to have this guide in the description below however just a note make sure you replace this with whatever your bucket name is so we're pretty much saying that any anyone from the public anyone at all is allowed to read the items in this bucket and now that that's taken care of we can just hit save changes and yeah good to go so from here we have our bucket set up people can read from it however we just don't want to kind of uh quit here what we want to do is we now want to set up our cloudfront distribution so what this is going to do is it's going to allow these files to be served closer to the user even though they're in this bucket they aren't going to have to reach all the way out to Virginia to pull them so how do we do that well if we get out of here okay how do I get out of S3 over here just have to refresh sometimes and then the toolbar pops up but anyways if I go to looking for cloudfront right here which is your CDN content delivery Network and we're going to create a new distribution and for the origin domain what we can do is we can choose did I miss it right here this uh S3 bucket penguinetress.io and this is pretty much that uh S3 bucket that we just created and we're gonna have this warning uh has enabled if you plan to use this distributed website which we recommend using the S3 website yada yada you can read it yes use website endpoint now down in the where are you at all right so in this viewer protocol policy we want to redirect all HTTP requests to https make sure to compress objects automatically that's going to be yes as well and then for the for default root object default root object this is going to be set to index.html and one other thing web application all right so for web application firewall we want to hit do not enable security protections and I believe let me just check yeah I believe that's it so we can now hit to create distribution and yes successfully created a new distribution and our distribution domain name is this so this is kind of like our temporary domain name so with this we can actually go there however it's not going to work right now because it is still deploying however it shouldn't take too long but uh either way once this is done deploying I'll pause my video right now once this is done to point we can just pretty much just go here and uh if everything worked correctly our front end should be hosted right here all right and check it out it is now distributed and boom look at this a nice beautiful front end of course our domain name is in a configured yet but I mean hey this is pretty memorable I think hey have you guys checked out that site d1nxfrd vef cx060 oh yeah man I love that site it's oh so cool all right now uh here let me just log out and uh just test around make sure okay create a new account 792b let me add some coins to that account 792b again for uh this setup you just need a temporary password nice a thousand coins added to my account and of course it should work but let me just for a good measure what else oh this was another fan just fantastic dish I made again Chef Bucky coming through again what one was this this was uh no this was uh chicken right here creamy garlic mushroom chicken pasta delightful and I'll just say uh sweet right there submit it all right recipe created now I do actually want to point out this you see how this image is uh kind of taking a long time to load so a couple issues um well not really issues but things that we can improve in the future so you usually just don't want to serve the full size image like all the time since for example look on this profile well one you notice that these images are taken a long time to load again so there are a couple issues right here um one thing is we don't need to load in the full size image when we're only displaying a smaller portion of it so what we can do in the future is set up a micro service to like um resize these images so they're serving like just the size that you need on the front end and another thing that's happening if I hit refresh right here you notice is that this image well maybe you can't notice but you you see how it kind of takes a long time that's because it's loading again and again and again so we can actually cache this on the front end to say hey you just downloaded this if the user makes another request for it you don't actually need to go out and fetch it each time so a lot of different optimizations that can be made you can see the image loading is pretty apparent on that one but I mean right now we have our own social network launched name not that memorable but I mean hey it's working I can invite my friends and uh yeah we're gonna have a good time so in the future actually in the next video what we'll do is we'll connect the domain name so we can use that instead of this honk and Tonkin URL and also from there we're going to optimize the deployment process since right now we saw how manual everything was not only building the front end where you have to run all those commands manually and then I had to like upload them to S3 like who has time for that I'm gonna carpal tunnel if I have to do that all the time but also the back end where instead of you know having an ssh in and pull the latest updates and run a bunch of commands to do this and that we can move this all to a CI CD pipeline automate everything and then uh yeah lots of optimizations we probably want to restructure our layout on the back end so we have multiple ec2 instances talking to a single RDS database but anyways enough of that I'm actually going to go out and grab a quesadilla right now all this food is making me hungry if anyone actually makes it this far and they actually spun up a social and how it work first of all that would be very impressive but second of all add my account I'll put my account number below and send me a link to it and then I'll go ahead you know what I'll do I'll go ahead and upload the picture of my quesadilla that I'm about to go buy so yeah I'm hungry I'm gonna go grab that and I will see you next video