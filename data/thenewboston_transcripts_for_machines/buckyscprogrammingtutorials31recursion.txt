what's going on guys it's Bucky and welcome to your 31st tutorial and in this tutorial I'm going to be talking about something that every single computer science student on Earth just absolutely hates and that is called recursion now this is a topic that's somewhat confusing but I'm going to try to make it uh really simple for you guys so what recursion is is the idea that a function can call itself pretty weird huh so you know how like in main we could call another function called Bucky and Bucky would print something out on the screen well recursion is the idea that Bucky could call Bucky H that's interesting so let's go ahead and take a look at this right now say we had a function called Bucky and all it did was print something out on the screen like see out um let's print out something stupid OMG wtfbbq oh my God WTF barbecue and then it went ahead and it called the function again so now You' say all right well isn't this function going to go ahead and we're going to run Maine first and Main's going to say okay go ahead and run Bucky and Bucky is going to say okay print this out and then run Bucky okay Bucky print this out and then run Bucky again print this out run Bucky print it out run Bucky and whenever we go ahead and run it we can see that this is a function that basically never ends it prints out oh my God WTF barbecue until check it out watermelon exe my computer just crashed and gave up on this so I'm like all right so what's the point of using recursive functions other than don't use them because you know first of all if you build a recursive function like this your computer's going to crash just like mine ass and uh it's not the most useful way to go about things so one reason that people use recursive functions is first of all let me mention this whenever you build a a truly perfect recursive function you need to have something called a base case now a base case is pretty much an ending point for your function so one example that I'm going to be showing you guys is how to calculate factorials now if you remember from math class factorials are pretty much when you say five factorial and it's written like this five explanation point this is pretty much the same same as saying 5 * 4 * 3 * 2 * 1 um 7 factorial would be 7 * 6 * 5 * 4 * 3 * 2 * 1 whatever factorial it is it's just whatever number times all the way to one so then the value of like 5 factorial is 120 the value of 3 factorial is 3 * 2 * 1 which is 6 so let's go ahead and write a program to do that and this is one of the instances where recursion is actually a good idea so let's go ahead and make a function called we'll call it factorial finders so int first of all better spell that right int um factorial finder I think I spelled that right and it's going to take a parameter which is in X can I not spell int today int X and the parameter it takes is what value do we want to find the factorial of so if we passed it in five hopefully it would give us 120 if we passed it in three it would give us so on and so forth so the first thing we need to build is something called a base case without a base case this factorial finder would never end just like Bucky you know how it ran Forever Until My computer crashed this what this going to do if we don't give it a base case so we need to say okay if x is indeed equal to one then we want to go ahead and return one so whenever you return something remember your your function ends and that's the point that we're trying to get to so in order to do this we're going to assume that they're going to be passing in numbers other than one so we're going to go ahead and do this else if they pass in a number aside from one like five or three or 20 or something like that go ahead and return the value of x which is you know 5 3 20 and then go ahead and multiply that by factorial finder x 1 so what it's going to do is yeah it's going to call the same function again but it's going to call it with a different value it's going to call it with one less than before so if you go ahead and you pass in five to this function what it's going to do is say all right I'm going to call five times the four factorial or factorial four I don't even know how to say it I'm not a mathematician but anyways what it's going to do is it's going to say this I'm going to call five fact factorial 4 well what's the value of that I don't know the value of that is 4 factorial 3 what's the value of that I don't know 3 factorial 2 what's the value of that I don't know 2 factorial 1 what's the value of that I don't know oh wait I do know one factorial is one so now that it has that bit of information it can go ahead and solve the rest of the questions that it ask you know how I said I don't know I don't know well now it can say all right Bucky one factorial 1 so now I know that 2 factorial is 2 3 factorial is 6 4 factorial is 24 and 5 factorial is 120 so that way you can see that whenever we go ahead and run this um factorial finer there we go I didn't feel like printing out the whole thing that way when you print out factorial finer five and let me just go ahead and end that line and we run this program it says 120 yeah it was 120 but there is a lot of stuff going on behind the scenes that the user didn't have to see what it did is said all right it ran this function like five different times searching for five factorial and then it called it again searching for four factorial then did again searching for three 2 and finally when it got to one it could answer all the rest of those questions so this is how you can use recursive functions in a useful way again a recursive function is just using the function inside the function body itself and remember whenever you do this you need to have a base case you need to have an ending point that actually answers that question so in this case whenever they got to one it could solve the rest of it of its questions because if we didn't have that base case like before when we printed out OMG WTF barbecue it would just run forever and ever and ever without an end so that's why you need to give it a base case in other words a point to get to where if it solves that question then all the rest of the questions can be solved so again you guys can probably see why people hate recursive functions but why sometimes you actually need it because there's a lot of stuff going on behind the scenes that we don't get look at but we just have to you know assume in theory that this is going to work so it's a little bit different than regular programming in the fact that you don't explicitly call a function like this that a function is call a function for you however many times it needs to so there's a lot of theoretical programming that you need to think of and a lot of different things that can go wrong with recursive functions so that's why I wanted to uh you know show you guys a quick example of the bad way to use recursive functions in the useful way to use recursive functions but now that I taught you guys that tutorial we can finally you know get over recursive functions I you will be happy to know that I don't use recursive functions a lot in programming and we're probably going to be you know done dealing with him for a while but you know it was a topic that we definitely couldn't Skip and now that you watch this tutorial I'm glad I taught it to you guys so thank you guys for watching uh don't forget to subscribe and don't forget to put a base case in your recursive functions or else your guys' computer is going to crash so thank you guys don't forget to subscribe and I'll see you in the next video