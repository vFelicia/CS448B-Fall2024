what up y'all just want to make a quick video to show you what I've been working on and I know I already made a tutorial series about this but things have evolved since that plant watering idea so starting again from the top this is tnb OS yes of course it's not an actual operating system it's actually a desktop client built with electron in react and it allows your computer to communicate with any other computer running tmbos and that's it what you build from there is really up to you now so far we got five apps Built Well seven if you include these system apps but five userfacing apps I would say and we'll take a look at these in just a bit but first let's go ahead and do a quick review of the network architecture so at the heart of everything is going to be our core server and the purpose of the server is really just to allow our client devices to connect to kind of like this so that they can communicate with one another so basically acting as a router between devices now I already made a tutorial on how to set this up configure everything and I'll leave a link to that video in the description below and I also wrote up a Google doc guide if anyone would prefer that but either way once you have your core server up and running let's go ahead and connect to it using tnb OS so first things first how do we get tnb OS well if you go to this URL which is also going to be in the description below but if you go to github.com the New Boston bostonhyphen developer slash tnbos then it's going to take you here and to again you probably want to clone it and then to set it up it's a piece of cake pretty much like any other JavaScript project just run npm install npm start and then this thing right here is going to pop open you're actually going to have a welcome model that pops up you can just go ahead and dismiss that I'll talk you through everything in this video but what we're trying to do first is just connect to that core server that we have set up so how do we do that excellent question if you go ahead and click this icon on the bottom right this network icon this is going to pop open your network manager and from here we're going to click add a network basically like adding a core server and then we just put in the info for that core server the network ID this is just going to be the domain name so mine is on the new boston.network protocol https now for the port we don't need to fill out anything that's just going to default to 443 based on this protocol in the display name you can just create a shorthand version of usually I like to you know make it similar to the network ID but you know more readable version of that and for the logo URL pretty much just uh have any image that represents your network hit submit and there you go and you can tell by the green little indicator right here that we are indeed connected so just to kind of keep this diagram updated what we pretty much did right here is the equivalent of this connection just like that now whenever you first booted up tnb OS it generated an account for you and that includes an account number that you can see by clicking on this little QR icon on the bottom right now you can go ahead and copy that because we're going to need it in just a bit however one other thing I want to mention real quick is that in addition to that e each core that we connect to it's also going to maintain what's called a credit balance for your account now this represents the number of messages that this device can send using that core so on that note before we can start sending data to other devices we're going to need to go in Django admin and credit this account so again make sure that you have this account number copied and pop open Django admin and just go to accounts actually let me move this so you can see actually let me do this I'm going to go ahead and hit add account and then paste in that account number I'll do ten thousand now before I hit save and continue what I want to do is this keep an eye on this balance right here because I'm about to hit save and continue and you see whenever I do that your balance is going to update in real time pretty sweet huh all right so now that we have some credits let's go ahead and connect to my MacBook so just uh I don't know if I mentioned this but right now I'm on my iMac in sitting right to the right of me is my MacBook and throughout this video I'll just be using these two devices to kind of communicate back and forth and show you all the features of a tnb OS so on that note let's go ahead and open this app which is the account manager and I'm going to add my MacBooks account I already have the account number copied display name I'll just write MacBook and I already have the Avatar URL for this as well so boom look at that easy easy nice and cheesy we are now connected to my MacBook where's that diagram let me keep this updated so now we got this architecture going looking good and believe it or not we're all set up ready to start using apps however before we do there is one last important concept that we need to cover and that's the ability to connect to other devices through multiple cores so what am I talking about well although it isn't 100 necessary whenever you connect to devices through multiple cores it does improve fault tolerance so what am I talking about well right now we already have this structure right here I am connected to my MacBook through this tnb core now I also have another chord that I spun up that I'll connect to in just a bit it's called vitaxia.io and it's just a VTX I'm using for the shorthand but check this out because what this system allows for is for me to connect to other devices through more than one core if let's say this tnb network ever goes offline I'll still have a way to connect to or communicate with these other devices so again like I said it isn't absolutely necessary to use this since this form of communication is fine just one core however it does allow for some increased fault tolerance which I don't know I thought was a pretty cool feature so let's actually connect to it right now know no use just talking about it so the network ID is ataxia.io protocol it's https VTX and there's my logo all right looking good now I already have a balance in there because I credited this account before this tutorial so I don't need to go and Django admin do it again so now let's go ahead and finally take a look at some of these apps that we built and let's go ahead and get things started with this speed test app all right so for those who didn't follow along with the last tutorial Series this is what we built the speed test app and it's kind of like the Hello World app for this architecture because what it uses is a very simple ping pong protocol to pretty much find the fastest connection between two devices and I'll show you what I'm talking about right now so you first select a device that you want and I'm going to go ahead and select my MacBook it's the only device I'm connected to and then you can choose what network you want to connect through and so let me go ahead and test the speed through the New Boston Network and then I'll test the speed through the taxi app so I'm going to go ahead and hit this go button and whenever I do what this device is going to do is it's going to send a request a ping request to this MacBook and that MacBook is going to send back a pong request and then this timer pretty much just you know calculates the total time it took and there you go so let me do a couple to get a good average right here and all right so and let me show you in the diagram what's going on as well all right so right now I'm testing this connection connecting through the New Boston network from my iMac to my MacBook and on average well I don't know the average of this maybe like a 0.8 or something we got 1.1.4 and somewhere around a half a second so now let me go ahead and connect and see if this network is any faster so let me go ahead and time this all right that one's pretty slow all right looks like the same speed maybe VTX is just a little bit faster but like I said this is pretty much the point of the speed test app it allows you to test connections and also the speed of those connections and if you ever want to clear your history just you can click this little icon and it'll delete all of your runs and that's it pretty simple app but very useful as well now the next app we can check out is this chat app now also keep in mind that in this architecture there's no centralized databases to store any of this app data instead all this app data is stored directly on the devices themselves so just keep this in mind whenever we're chatting right here and on that note let me go ahead and create a new chat course I'm gonna be chatting with my MacBook it's the only only device I'm connected to right now and this is a pretty you know standard chat application you can send messages uh you can edit messages hey there you can delete messages and what else can you do you can send credits as well so let's say I want to send a 50 tnb like here are some credits uh send you 50 just like that and you can also another core feature that it built is if you click this little paper clip you can attach accounts and also networks so let me how can I demonstrate this actually let me go ahead and do this I'm going to go in my network manager and just delete this VTX Network and I want to show you this because what I'll do now is go on my MacBook and I'll send over this so I'm gonna send over the VTX Network I know you can't see this but uh and I'm also going to attach an account as well so now let me send over these two and all right so oh looks like my grandma is using tnb OS as well so right now the MacBook sent me an account and this network that I just deleted if I ever want to update it like let's say oh yes I want this network as well I just have to click this button in the middle and then there you go you see that is now added and of course my accounts let's see that oh my grandma's online and I want to of course add her chat with her I can just click that and look at that I now have my grandma's account she actually isn't online at the moment maybe she's taking a nap or something but there you go so again pretty simple chat application but uh I don't know I thought it was pretty cool to make uh even a simple chat app without the use of any middle man or intermediary so yeah pretty cool what else do we got here let's take a look at the University app next all right so this of course is one of our pride and joys the university app so of course this app is for creating uh organizing sharing educational content with one another and whenever I open this you saw that there were these courses right here so these are all courses that were created and are being hosted from my MacBook and you can you know pretty much just like any other uh um educational platform you can click into one of these courses and you can take the course and whenever you take a course what it does is it just moves it from this browse section to my courses pretty much just for like better organization you can also clone the course and what this does is well you'll see in just a bit let me get back to this don't want to throw too many things at once now for any of these courses you can of course just click into the lecture and you can watch it it's uh has some responsive Behavior right here although I'm seeing right now that this view is probably a little bit too small with the video so I'm gonna work on that but either way back to this cloning courses logic whenever you clone a course what it does is it pretty much copies the course over as your own course so as a teacher you can create your own or you can clone those are two ways to kind of uh create your own courses so most of the time you are going to be creating your own however I found whenever you're like working on a course with someone else that the Clone logic was uh just useful but either way once you have a course you can just go ahead and edit it it won't be live to other devices until you publish it so I'm not going to publish that because this is already being hosted for my MacBook but another thing I just want to show you is that your lectures right here if you ever want to create a new one or edit one and then there you go and also you can sort your lectures if you ever want to do that made this nice little sorting logic and uh yeah there you go now just a heads up as well whenever a course is published then any changes to that course are going to be reflected on any other devices in real time so for example say that my MacBook was editing this course to change the name of it let me just say python uh bacon or something and on my MacBook let me go ahead and submit those changes right now you see that this updated to python bacon and if I ever unpublish that course let me unpublish it for my MacBook then it's just going to disappear from my uh well any other device so just want to uh point that out because if you have a course published and then you're making changes to it then just note that on everyone else's devices then they're gonna see all those changes in real time so I would highly recommend unpublishing it making all your changes and then publish it whenever it's ready but either way that is the University app next up let's go ahead and take a look at this shop app now the shop app is a cool way that you can exchange goods with your you know friends and family without the use of any intermediary and on that note let's go ahead and see what we got available right here see some cool tshirts oh the classic one I think I might have to snag this one all right and let me see what else I got I think I got like 10 000 credits so wavelength this is actually a pretty cool game mushroom book fun fact the network architecture is largely inspired off of the mycelium Network or the uh mushroom Network and let's see if there's anything else oh Old man carving this is pretty cool but don't think I can afford that let me go ahead and uh this is tough decision okay let me go ahead and get these uh elephant figurines all right now before I can go ahead and check out I need to go ahead and add my address so let me go ahead and do that add address say Bucky Roberts United States of America and there you go address added now if I go to my checkout it's going to default to this but if you have more then it's gonna allow you to select them since I only have one it knows to use that as a default and now that everything looks good let me go ahead and place this order now whenever I do I'm going to be taken to my orders page and you can see that we already have a couple things that were well they're actually done really quickly but um what happened behind the scenes is that whenever I made that order what I did is I created this order object and I sent it over to my MacBook now my MacBook looked at everything make sure that you know all the data matched up I wasn't trying to get this shirt for like only a thousand credits or anything and then once it approved everything it sent me back that approval status and it also sent me this receiving address now why do we have another receiving address when I could just send the credits to that account directly well the reason is this let's say that the MacBook approved the order and then while it was waiting for me to send my payment that MacBook it just went offline well then I would send the payment and the MacBook would never receive it even when it came online it might have some more credits in the account but you know where did those credits come from so things can become kind of confusing this way whereas with this architecture what happens is whenever there's a separate receiving address then let's say my MacBook approved that order and then it went offline well now instead of sending it to the macbook's address I'll send it to this address now whenever that MacBook came back online all it needs to do is it needs to check this address and as long as there are the 5 000 credits in there then it knows that this payment has been made so again this really shouldn't happen because all this happens in a fraction of a second but just in the weird Edge case that the MacBook goes offline the moment right after it proves which again is very rare but this is just you know a little safety procedure in place for that but yeah as you can see I sent the 5000 tnb and now I just pretty much sit back and wait to receive my elephant figurines and tshirt looking forward to that now another cool feature that I just want to point out is that since these items have been purchased if I go back to buy you see that they are no longer available and this is just some automated behavior that my MacBook automatically like takes them out of their inventory uh whenever they've been purchased so now let's go on the flip side of this and see how to sell items so of course you can go to the cell section right here and then you can just add a product and what I am going to be adding is one of the hand carved Wooden Spoons that I created and I'll say fantastic wooden spoon and this is my image URL I want to receive tnb and how much is this going to be worth I would say about 800 credits so check it out this this is actually um a wooden spoon that I carved I saw like a Netflix show or a YouTube video I can't even remember now about uh wooding like wood carvings so I bought this wood spoon carving kit off Amazon and well this is the result of it I would not recommend actually eating with it I'm pretty sure that you'd just get a ton of splinters in your mouth but this is the first ever probably the only one spoon I'm ever gonna carve but let me go ahead and activate that bad boy right now and all right so now this one spoon is for sale by me of course if I ever want to delete it deactivate it edit it yada yada all this is uh pretty intuitive and of course in your orders you can see uh any orders that you may have so I have some in there from before and oh look at this a new one it looks like my MacBook just bought my one spoon so look at this my MacBook putting those credits to use already very cool and now since my MacBook did just buy this you can see under products right here then it pretty much removes it from the inventory and that just make sure that like uh it can't be purchased twice so there you go while I am waiting for my elephant figurines and tshirt I will be shipping this one spoon to sample buyer and I am sure they're going to be very happy with this incredibly high quality wooden spoon so that is pretty much the shop app and on that note let's go ahead and take a look at this last app which is trade so check it out now once users find the fastest connection using this speed test app what you can do is you can actually help them out by allowing them to exchange credits so how does this work well let's say that I want to allow other devices to exchange their credits for example trade tnb for VTX or VTX for DNB any other ones that were connected to so on and so forth well what I'm going to do is I'm going to go under this automated section to offers and I'm first going to make sure that I have this tnb is my Active network this is kind of like the base Network that everything is everything else is done in relation to and you'll see what I mean in just a second so I'm going to go ahead and offer terms and I'm going to select offer terms for VTX now what I'm saying is I'm going to allow you to exchange VTX for tnb now the purchase price for each VTX I'll just keep it simple and say 1tnb per one VTX now for the order minimum let me just go ahead and do 10 and as the maximum I'll do 10 000. and for the sale price is the same whether you want VTX or whether you want tnb again it's just a one for one order minimum 10 order maximum ten thousand all right looking good so now for this automation that I'm setting up let me go ahead and just review everything purchase term looking good so all that's good I'm going to enable buying and if all my sale terms look good I'm going to enable automated selling so now this is all set up where other devices can now trade either VTX for tnb or tnb for VTX now to demonstrate what this is like from the other devices perspective what I'm going to do is go to this manual section right here now I already set it up in the exact same way on my MacBook so again this is just like the uh um flip side perspective of it where let's say that I wanted to trade uh let's say that I want to trade some of my tnb and I wanted to receive VTX so I would go buy and I would just click buy VTX and how much did I want well let's say that I wanted a 260 VTS X and that was going to cost me 260 tnb well what I'm going to do now is I'm just going to hit Place purchase order and whenever I do this you see that a couple things happen right here but more or less at the end of the day I received VTX and I sent them tnb and if you're keeping an eye on my balance right here you probably noticed that that updated too now just real quick I want to talk about how this is working and it's kind of similar to the shop logic but a little a few more steps in one so more or less what I did is when I was about to purchase right here what I'm looking at right here is their offer terms now whenever I buy this what I'm doing is I'm creating an order so once I have the order created I then take that object and I send it over to my MacBook my MacBook who is the host in this example they're going to review everything basically to make sure that the terms of the order match whatever terms that they had in their offer and that you know they have enough credits to fill the order so on and so forth but either way once everything is approved then they're going to go ahead and mark the order is approved and also create that receiving address and send that both back over to me so at this point it's basically like yeah everything looked good here's my receiving address go ahead and send 260 tnb to this account now I did that in by I I mean you know this is all automated happens quickly in the background but now my iMac went ahead and it sent 260 tnb to this receiving address and then once it did I notified the MacBook again hey I sent that tnb go ahead and check it it checked it saw that there was indeed that amount in there and it went ahead and then filled my order Now by filling the order of course this means sending VTX to my receiving address and that's what this transaction is right here so actually this transaction is the final transaction where it takes it from my receiving address and moves it to my main account and that's why you see it has 258 here instead of 260 and that's because although my MacBook did indeed send 260 credits one of those credits were pretty much used as a transaction fee for sending it to this receiving address and then whenever I moved those funds from the receiving address to my main account that was another one credit transaction fee so that's why at the end of this I only end up with 258 rather than 260 but you get the point so that's the main functionality of this trade app again pretty much to allow other devices to trade whatever credits they want for faster credits usually determined by the speed test app and I also have this little wallet section right here so under this wallet section you can pretty much choose which network and then you can view the transactions for that Network you can also send and receive but most of the time this is just going to be automated based on this manual or automated trading logic but yeah there you go now before I let you guys go I do want to talk very quickly about some items that we have on our roadmap now the first one this is just a rumor just want to throw this out there nothing is confirmed but I've been hearing a rumor that we may be working on a social network pretty soon I think it's a good idea still got to talk with the subcoins team to figure out exactly uh what's going on when we can get started on this but I thought it was a very good idea pretty much a way to connect to the people that you know and trust and also give users control over their own data so really looking forward to this now in addition to this we're also going to be introducing something called services and I'm super excited about this so it's a simple concept but it's going to allow us to build some very awesome apps now all a service is is just an automated program that we can interact with remotely now we are actually finishing up a python library for this which is going to make these super easy to build and I'm guessing that should be ready in a few weeks is my estimate and I'll let you guys know whenever it's uh complete but really Services can be written in any language now the most basic example of a simple service would just be a program that consists of a single function that can be called remotely for example if this device was you know running an app or some programming they wanted a random number it can make a request to say get random number and then this device would respond with it I imagine most of these are probably going to be ran on like a Raspberry Pi or something that can be online all the time without having to keep your laptop open but really since they're like programs that you can run them on your desktop your laptop a pi whatever so this would be a very basic service but copy this but you can have more complicated ones as well so say that we were making I don't know like a chat bot service that's what this was right here let me connect it to my little whoa don't want those kind we're the straight line there we go so let's say that this is a chat bot service what functions might a chat bot have um I don't know say this chatbot is a game where you can I don't know buy corn and what else could you do in this game uh maybe you could I guess you could eat corn if you could buy it and maybe this like gives you energy or something what else could you do suppose he could buy corn you could probably sell corn you know what I can't really think of any noncorn related examples right now but I'm sure you get the point now another service just to kind of uh I don't know I like brainstorming what all these Services can do let's say that we have another service that could be like an ethereum API like this example so let me delete these and show you what I'm talking about so let's say that we wanted to have a service to connect with the ethereum network now of course this would still be connected to the New Boston Network and let me just make a like a little Bridge some somehow show it's connected to the ethereum network but let's say that this device was not only connected to the New Boston network but the ethereum network as well it could offer a service to pretty much provide any ethereum data to any of these devices as well for example like fetch um address balance you can also what's a useful thing like get a gas price since if you want to send a transaction you need to know the current gas price uh so on and so forth just really trying to demonstrate that these devices can act as a bridge to other networks as well now in addition to these let me expand my network a little bit it's kind of wonky all right let's connect these to a VTX as well all right so what other service could we have um well we could have get out of here thing well we could have a service that posts a chess game let's say that uh some of these devices wanted to play chess then this bad boy right here could host the chess game and by the way you can also run multiple Services just on a single device I just uh I don't know don't wanna I thought it was easier to explain visually this way and another cool idea that I had for a service because in a way so far these surfaces kind of act like many microservices or like many servers or apis or something but because of the nature of how everything is set up it doesn't always have to be that you request data and then it sends it back like um you request some ethereum data and then it sends you back the gas price what you can do with these Services as well is have them push out information for example let's say that you had a service that was um tied to like some MMA data server whenever someone won an MMA fight you could have it broadcast the results of that to all other devices or maybe send out notifications whenever someone scores a goal in the World Cup game so again it doesn't always have to be that you request something and it sends it back it can also push out data as well now is the creator of a service you can get to decide if you want to offer your service for free just to help out the community or if you want to charge credits for your service now charging credits might be a good idea if your service is computationally expensive and in that way the fee is going to act as a throttle and some examples of this would be like let's say that your service is going to store data for other machines or maybe you have a service that you send data to and it processes it for like machine learning or AI learning or something like that well since those are computationally expensive operations you probably don't want to offer these for free I mean that would be cool if you do just for the community but I'm guessing that you probably want to stick a fee on that just to act as a throttle just so things don't you know get out of control so yeah I know well look at this now it seems like we started out creating a plant watering device ended up creating the singularity but whatever I mean that's cool too so on that note that's probably good for this video if anyone has any suggestions on how I can improve the UI then I would love to hear it also if anyone has any ideas for apps or other services that we could build then feel free to uh let me know I would love to hear them and for those interested in app development check out my react Redux and electron tutorials they are pretty much like tnbos app development tutorials because what we do is we go through and we build this speed test app which gives you like all the fundamental knowledge to build other apps as well and yeah I think uh I think that's all we needed to cover so thank you all for watching and yeah I'll see you next time