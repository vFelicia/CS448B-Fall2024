hi this is Alex from PHP academy.org and this is a short video created for the New Boston now in this part of our operators when we're looking at operators we need to think about an operator that doesn't just deal with equating the value but um we have to look at the data type as well so let's just give an example of num one and I'm going to equal this to one um and that's in a string so we've got a string with the value one now num two and that's going to equal one but as an integer data type so now what happens if we create an if statement and we actually compare these two values so let's compare num one to num two so we're using the double equals operator which is uh is equal to essentially let's Echo equal else Echo not not equal okay so this is a basic if statement we're saying num if num one is equal to num two Echo equal otherwise Echo not equal so let's just open up our browser and refresh and preview what we get so we've got equal here so we're essentially saying that one does equal one however if you look at this from a logical point of view we've got one as a um string so we've got our single quotation marks around it and one here is an integer so this is in fact a number this is in fact a string now what PHP has done is it's dealt with this as a one in itself and it's dealt with this as a one in itself so they're essentially the same character even though this is an integer and this is a string so therefore it's saying that they are equal then what happens if we want to say is num one actually equal to number two you know in reality if I was to say the number one or a picture of the number one they are the same thing but we need to think about the difference between numbers and a and a graphical representation so a string of something so for this we use the triple equals comparison operator so instead of putting two equals remember equal is an assignment operator this is a comparison operator triple equals is also a comparison operator but what triple equals does is it will compare not just the value but it will also compare the data type so if the data type does not match in this case using the triple equals then we'll we're going to be echoing out not equal because this statement here will be validated false so let's give that a go let's come and refresh okay so you can see that now just by adding in that extra equal symbol we're now saying not equal so we now know that one as a string data type is not equal to the number one so why is this useful and when might you use it now it's useful for the obvious reason that we may want to convert um we may want to keep our um comparisons as literal as possible we want to say it must equal the number one must equal number one now for example if I was submitting form data and I was to type in a number one and we were comparing it to number one as in a one we wouldn't use the um triple equals operator we would compare it like this because this is still the number one so there's places you can use it and places you can't use it I mean a lot of people tend to use it even when they don't actually need to but it's just for added sort of uh comparison Integrity if you like so you'll find that perhaps in uh in other instances you find this um other times you may need to use the triple equals um especially in some of my tutorials as well I tend not to use it a lot but um in things like dealing with files as well we might need to to use it as a literal so this is the triple equals uh comparison operator and hopefully you will find some use for it when you are comparing exact values and you want to check data types as well