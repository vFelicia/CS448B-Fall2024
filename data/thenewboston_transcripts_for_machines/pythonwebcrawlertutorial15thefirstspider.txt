already houses welcome back in in this video we only have one more file to write for this project and this is probably going to be two more videos just because we have like three or four functions but basically we already have everything created that we need the spider the link finder all of that good stuff and all we need to do now is we need to call the spider over and over and over again so we can just make this real quick and just make a wild loop and say hey so long as you have links just keep calling it but like I said the reason this is going to take a little bit longer is because we're gonna make this program multithreaded so instead of just having one function or one program that goes and does the same thing over and over again we're gonna have multiple threads so it runs like eight or sixteen or if you have an awesome computer like 64 times as fast and all of these programs all these spiders are going to work simultaneously at the same time so if you never use the threads before in Python I'll keep it real simple for you the first thing you need to do is import threading and from cue import queue alright so before we continue I'll explain how they work and if you guys are like wow I looked at some stuff about threading before it looked really complicated trust me guys it's not it's really simple a thread well let's break it down like this you know that whenever you own a factory you have a bunch of workers and they each are doing their own job it's the most simple thing to understand whenever you have a thread each thread is like a worker and the queue is just a job so it's pretty much the exact same thing just different terminology so we're basically gonna have a bunch of workers or spiders or threads whatever you want to call them and we give them each a job and then they do it now again unlike regular program they can all work at the same time which is awesome so that's all we're doing right there so now let's just go ahead and pour all the stuff that we made so from spider import spider from domain dominate hole from domain import all and that's what we did in last video and of course from general and pour all of those all right so now I'm just gonna make a couple constants and if you were running this is a commandline tool then you can just have the user fill this in and parse the arguments but for right now I'm just gonna make simple variables so project name it's my mom texted me and I'll say uh the new Boston so again if you decide to make this a GUI or a commandline tool you're gonna want the user to fill this in but just for this little demo whenever I'm teaching it I'm just gonna tuck myself and by the way you can't really have um there is no such thing as constants in Python but you can just kind of make them yourself so since there is no like constant keyword the convention is whenever your program in Python if you ever have a variable that's not going to change throughout the entire running of your program you just write it all in caps and that way later on whenever another developer is working on a program they don't set this equal to a new value so again there are no builtin constants but that's the Playtone convention so for the home page this is also constant and that is gonna be this so that's my project that's my home page now for the domain name remember what we did is we already made a function called get domain name and we just need to pass it in the URL of the home page so that's gonna return this right here and the reason I just don't want to pop this right in here like this is because like I said later on if we ever decide to you know use this in a GUI kind of way or maybe we're making a consumer application we want the user to type in the least amount of information possible send hey just give me your homepage URL and we're gonna take care of all the hard stuff for you so it just makes it easier for the end user so the last thing I'm going to need are well not the last thing we got a couple more things we need to do is I'm gonna have a constant to that waiting list and also that crowd file because those file paths they never change and I'm also going to use those variables a few times later on so I'm gonna write cue file and again all this is equal to is the project name plus Q dot txt and I need to add that forward slash and I don't need to copy it so kraut file equals project name plus Garage dot text actually my mom is texting me because my sister's in school right now high school and she applied it a bunch of colleges and the one college that she really wants to go to it was the last letter that she got and it actually came in the mail but my sister doesn't know that it's in the mail yet she apply it like eight colleges she got into all of them but this one which is the eighth one um she doesn't know if she got in or not in so my sister doesn't even know the letter came here so later on I'll let you know if she got in or not it's pretty cool I'm pretty excited for it alright now the last thing we're going to do is make a variable called number of threads and the number you set this equal to is actually dependent on your operating system how many threads is capable of handling for this I'm just going to write eight but again I don't just want to say use eight or use this number this number it's operating systems specific and there's bunch of other factors as well but I know my operating system can handle eight so that's what I'm writing that alright so the last two things we're gonna do is I'm gonna make a variable called Q now this Q I'm talking about right here again the job of each spider is just to get a link crawl it and whatever page we gave it gather all the links on page we know that already so this Q is actually the thread Q so it's not the waiting list of links essentially they're the same thing again the thread queue or the job is what I'm going to refer to right here so what I could do is I can rename this thread queue and it may make it a little bit easier to understand but eventually in like two seconds you guys are going to see what's going on and the reason I'm not naming it thread queue is because this name is Q so that's my reasoning for that now the last line I write before you start writing any functions is this remember when our program first starts out we can't just boot right up into multithreaded because the first thing it needs to do is it needs to curl this home page and gather all of the links on this home page right here so what we're going to do is that first spider we make we don't need to stick inside any thread we just call it from a normal function now whenever you call a spider we just pass in three parameters the project name the home page and the domain name so that actually I can go ahead and run this right now if I want let me go ahead and run this and check it out so what we did with this very first spider is whenever this first booted up it created I'll show you guys it first created that project directory so that's why we see the new Boston right here and then another thing it did is it created those kraut files in queue so what's in the crowd file it already crawled the home page what's in the waiting list all of the links on my home page and this was all the links that it discovered right here and now that we had that spider taken care of this was the only special one so now what we can do is we can go ahead and make a bunch of spiders and they're each going to run simultaneously and what job do they have well each of these links is essentially what we want the spiders to curl so now that we got the core functionality in that main base spider taken care of we can go ahead and start making this program a lot faster and optimize it it's going to be sweet I'll see you guys next time