already y'all welcome back and now that we have our basic UI put together as the next step I want to go ahead and start setting up Redux however before we set up any Redux State Management tools to manage just app data what I want to do is kind of take a step back and I'll show you how all the data is organized in Redux for tnb OS so let me go ahead and open my Dev tools and I'll pop open this Redux Tab and I'll show you what we have so far and you'll probably get a a pretty good idea of how we're going to structure this so right now at the very top level our store contains two objects one is nested under system and one is nested under chat so we'll start with system right here since this system data if we expand it you'll see that all of the like tnb OS internal system data and this includes things like your accounts and your networks and also like the currently um like the active app which means the app that's currently displaying on the screen all of what you would probably imagine like the internal system data this is all going to be stored under system now for each application that we build the app also needs to maintain its own data for example this chat it needs to know well I only have one account in here right now but what is the currently active account it needs to store your messages it needs to store um like the delivery status if the message was delivered so all of this is going to be nested under an app ID in the app ID for chat is chat so if you just expand this you can see well we don't have any messages but for example the manager right here is going to keep track of the currently active chat so on and so forth so anyways we don't need to dig into this chat store too much but what I'm basically just saying is that the structure at a very high level it's going to have system and then each app is going to maintain its own data under a key which is going to be the same as its app ID So eventually we're going to have system chat and speed test and that's what we're going to be doing in this video setting up our speed test data now in addition to Redux we're also going to be using a tool called electron store and this is going to allow us to persist our app data to our hard drive and that way whenever we shut down tnb Os or just shut down our computer and open it again all of our data is going to be there we're not going to have to reselect the network and account again and all of our historical data is going to be nice and saved from last time so pretty cool and on that note I didn't want to mention one detail as well so you see how in Redux I'll use the chat app as an example you see how in Redux what we have is at a top level all this data is stored under the app ID so for example if we want to access our chat messages we would type something like chat dot messages to access these well whenever we store this data in the electron store that structure is going to be flattened out a little bit and by that I mean let me pop this open so again instead of chat dot messages we're just going to flatten it out and store it under a key called chat messages so kind of the camel case version of that dot separator notation however the reason that we do this is just because whenever we work with electron store it just makes some things easier so that's why we're doing it just to give you some background context and with that said the plan is to yeah just go ahead and get started setting up our Redux store and once we have that structure set up then we're going to go back through each of these components one by one and pretty much just start hooking them up making them work everything from the top down so before we can start actually creating our store what I want to do first is go ahead and create some new data types because we wanted to find the shape of data that's going to be stored in our Redux store so under speed test I'm going to create a new directory I'm going to call it types and the first type that I want to create is going be in a file called manager.ts and for this I'm going to create an interface and this is just going to be called manager and what I'm going to do in this manager little chunk of data right here this manager object is it's going to store the currently selected Network and the currently selected account so I thought manager was a decent name for that and I also am following the same pattern as chat in the chat manager we store things like the currently selected chat app right there so anyways there's some background info so again under manager we're going to do active account number and this is going to be equal to a string or a null because when the app is first initialized it's going to be null and then we'll never like click that pencil icon and select one then we're going to store that account number as a string Under This and we're going to do the same thing for Active network so Active network ID again we don't want to store the network object because I'll show you this the source of Truth for the network object is going to be stored on our system you can see under the New Boston Network this is the ID but we also still store other information like the display name the display image the protocol so on and so forth now if we were just to store this entire network object in um let me pop this open right here then we're almost gonna have like two sources of the truth so instead we just want to store the unique identifier and anytime we need to pull that logo or display name or anything like that then we're just going to reference the system data but either way under manager we're going to be storing the active account number at network ID and this is good go so this is good for manager again basically storing the state for these top elements right here now what I also want to do is create a separate type to store these items right here now initially I wanted to call these tests and then I wanted to call them speed test but the reason that I don't want to call them anything with test in the name even though that's kind of intuitively how I think about it is that whenever we are writing our test I was just imagining in my head well it's just like a million naming conflicts and it's probably going to be kind of messy looking so instead I am calling these things a run so again a run is based basically what you create whenever you hit this button it's going to send a request off to another device and then we're going to get a response back and all of that is going to be stored in one of these things called a run so anyways that's the uh background of that name and on that note let me go ahead and create a new type file and I'll just say run.ts and for this export interface run and all right so what info do we need here well the first thing I want to store is the network ID and this is just going to be equal to a string in other words let me pop this open it's going to be equal to this right here now the reason that I want to store this is because whenever I send a request through a specific Network for example let's say that I want to connect to my MacBook over the New Boston Network whenever my MacBook sends back a response I want to ensure that it's sending it back on the same exact Network now if it's like yeah of course it would well remember that we have that fault tolerance logic where if one network goes down the app is able to communicate through another Network however I want to kind of hard code this in because um just some validation later on I don't want to like be testing the New Boston Network and receive a response through another Network and then have my times almost stop so let me just go ahead and store that right there now another key that we're going to need is the recipient and this is just going to be the account number of for example my whatever device I send it to for example my MacBook and then the request date this is actually going to be a date time object and we're always going to have it so that's actually stored as a string and then we are also going to have our spot state so anyways just uh some context between this whenever we send a block to another device we of course have to say what network we're sending it over who is supposed to be receiving it and this request date as soon as we send it we're going to set this request today they're going to respond pretty much like a ping pong cycle and whenever we get a response back then we're going to set the response date so this response date is going to be a string however it's also going to be null sometimes so whenever we first send this request and we haven't received a response yet we're still waiting for it it's going to be equal to null and again like I said as soon as we get one back then we're going to calculate what the time is and set it as a response date and whenever we do response date pretty much the difference between a request State and response date that's going to give us how fast this request response was now another thing that I'm going to add in is just an ID for basically this object now a lot of the times whenever you're forming like entities in a database you call it the ID either like PK or ID or uuid however when I was developing tnb OS it was it got kind of confusing since so many things had ID in the name and I know this is uh not really convention but well I guess this entire operating system quote unquote is it really conventional either but anyways more of the story is I started naming everything The Entity type in then ID and it's just a lot more intuitive whenever we are um like communicating with other devices as you're going to see soon so this run ID is just going to be unique ID it's going to be a uuid so that's going to be stored as a string and aside from this we're actually going to have one more value in here but before we do that I'll go ahead and create an enum called run status so this run status is either going to be equal to pending and it's going to be pending whenever we first send it out but we haven't received the response yet it can also be equal to success and we'll set it equal to success once we get a successful response back of course now another status that I want to make is a timeout status and this is whenever we send this request pop this open again whenever we hit go and send a request if we'll say like more than 10 seconds has passed and we still haven't heard anything back from the other device then we'll just consider this run timed out and we'll set it equal to timeout that way we don't we aren't like waiting for this uh response for an infinite amount of time so on that note let me just do pending equal ending and then success in timeout all right and now for the run we're gonna store it under status and this is equal to our run status so again by default we'll set it equal to pending and then depending on how it goes either successor timeout to kind of finish it off now the way that we're actually going to structure this in Redux is even though we're going to be storing basically a collection of these I don't want to store them as an array because it makes like finding it updating the array and just kind of updating everything a little difficult so we'll follow the same structure as we do let me see what example I can show you um for accounts for example so you see under accounts right here we have this account data including the display name and display image however everything isn't stored in a list It's actually an object keyed by its unique identifier so for example this accounts unique identifier is this account number AAA yada yada so again the reason that we do this is because it's a lot easier just to say the account dot account number I'm going to update whatever info information this is it's um I don't know it's faster too than having to go through an array iterate and try to find everything so for this again we're going to be storing this under a key which is going to be its run ID and to make this a little bit easier we have I'll type this out for system.types generic I'll show you what this dict type is basically saying that um whatever we specify is the type then its key is going to be a string and the type is just going to be whatever object so export type runs is going to be equal to a dict or dictionary of runs now another thing I want to do before we hop into our store is create a new file called constants and you know how I said before that just like our chat app I'll show you chat store constants how whenever we're working with the electron store we pretty much convert that dot notation to this camel case notation just because it makes some things easier that's what we'll do right here so I'll make export const and I'll say speed test manager and this is just going to be the key for this right here and again the camel case is first the chemical case version of the app name and then whatever slice in this case it's manager and then we're going to do the same thing for run right here so speed test runs and this is just equal to speed test runs and again I just want to use constants for these so anytime we have to refer to this key we aren't like prone to typos we can use the constant and it's just a lot less error prone so closing this and closing this another thing that I like to do let me hop back in my speed test store right here or speed test typing is I like to go ahead and create a file called index and I'm pretty much just going to import all of my different types into this one index file and this just makes it easier whenever you're importing these types later on you only have to import from one file rather than kind of having a million Imports at the top of your file so the first thing I'm going to import is this manager so import manager from apps speed test types manager and then we're also going to be importing run was it runs and run status ROM runs and we'll just export everything part manager and all of this and this was actually supposed to be runs all right good to go and while I am at it let me actually go ahead and type out my electron store too so I'll make a another typescript file called electron store and again this is going to be how our data is stored using that electron store basically how our data stored on the hard drive and remember that we are going to key everything under these constants right here so um well I first need to import those so speed test manager and speed tester runs from apps speed test constants and what we well it can actually just import the data as well so types all right so the shape of this iron well couldn't call it speed so the shape of our data in the electron store in other words our hard drive first of all our manager data is going to be under the key speed test manager and what is going to be the shape of this data just manager again just this right here and then we also are going to be storing our runs in other words these right here and that is going to be stored under the key speed tester runs and what's the shape of that data it's just the dictionary of runs so basically a dictionary of these all right and by the way this is going to be the exact same as how we store it in Redux just using dot notation instead of these keys right here but now with that so let me actually go ahead and import that as well okay so again everything cleaned up into this one file and there you go so all of our types are unified under types index.ts we can now get started with our Redux store so first thing I'm going to do is create a new directory called store and also I'm going to move this constants file under store I created it in the wrong location and all right so store constants there we go okay now all right so how are we going to set up our Redux store well what we could do is we could just create one gigantic file to manage all of our state logic however if we do that it's going to be a real pain to keep all of our different data organized so instead what we're going to be doing is we're going to be creating one file for each slice and we can think of a slice just as a chunk of data and to make things a little bit more clear I'll show you how we did it in the chat app so in the chat app we have a couple different objects that we stored data under contacts the delivery status the manager messages each of these things right here are their own slice so the slice is pretty much the object that's directly nested under the main app ID so that's what we're going to be doing we'll eventually have two slices one for the manager and then one for the runs so let's go ahead and pop open our editor and we can just create those two files right now so typescript file called manager and then another one called runs and let's start with the manager so this manager slice right here is again going to maintain the data for what is the currently selected Network and what is the currently selected account so in this manager file let's go ahead and get started so the first thing that we need to do is import some stuff from Redux toolkit actually let me do this from redux.js toolkit the first thing is a function called create slice which is well you'll see in just a bit exactly what it is but a helper function that allows us to create this slice of data or a chunk of Redux data and then we'll use something called current and payload action now another thing that we need to import is from our constants this speed test manager so import speed test manager from apps and then we need to we're going to be needing to give it the type of data that we're going to store so reference that manager and that is our manager for SP test types and then some other things which we're going to be getting into these in a little bit but um another thing that we're going to need is IPC Channel and for this I'll talk more about IPC whenever we get into kind of um after the app development tutorials once we like look at the internals of tmbos see how it works um for now just know that IPC is needed whenever we use that electron store because our electron app basically needs to use node to communicate with our operating system and store data on it again not really relevant it's kind of relevant now but uh it's a little getting too deep in the woods for this app development tutorial so I'll save this for a little bit later now aside from that one other thing that we're going to need is another util related to that IPC so system utils dot IPC and that is set local and state reducer and we'll see what that does in just a bit now what we're going to be doing to set up the slice is we're going to be creating a manager variable and this is going to be equal to this crate slice object or this create slice function right here so this crate slice function which is a helper function that redox toolkit gives us it's going to require three main pieces of information it's going to require a name which is really just a unique name for our slice and it's it's not super important however I'll show you how it's used if you look at your Redux log right here you can see that whenever Redux is going to Auto generate some of these action type names in the background it's going to use whatever name we give it as a prefix so for example the chat manager all of these action types are prefixed with this name so again just know that you have to throw in a unique name in here in Redux toolkit it's going to do some stuff in the background but it's like we don't have to like reference it or really care about it at all anymore um another thing is the initial State and let me just go ahead and probably type these out it's probably going to be easier so the initial state for this manager is is first of all what type is it going to be and this is going to be of type manager and if we look at that type right now let me clean some of these up so if we look at the manager type what info does it require well it requires an active account number and a valid value for active account number is either a string which is going to be the actual account number on or null and since this is the initial State and we don't have an account number yet we're just going to set that equal to null and same thing with Active network ID so when this app is first initialized of course we don't have any data we're just going to initialize both of those values to null and then in our app it'll say something like select a network or select an account all right so now that we have the initial State created we can just pass it into this create slice and now the next argument that it takes is a name and again this is just a unique name and for this I'm just going to use this constant right here so name we can just say speed test manager and now the last thing that we need to make are reducers now in this reducers object we are going to be writing quite a few and these are just object where the keys are strings and the values of these are functions that we can call to update our state so behind the scenes what's actually going to happen and you'll see it's it's kind of unique but it's kind of cool at the same time if you have the scenes your Redux toolkit is basically going to merge these keys and functions together to generate action Creator functions and those functions are going to be what we can use in our component to basically whenever we select the network or account we're going to dispatch these generated functions and it's basically just uh well updates Redux for us so the first thing that we'll write is the functionality to set the active account number and I'll name this very creatively set active account number and again that's what you have for the key now for the value it's going to be an anonymous function and for this function the first parameter that it takes is the state itself and what state are you operating on well it's the state of type manager basically saying that this is going to be the state so this is the first parameter in pretty much all these functions that we're going to write and the second one is a payload action uh bring that out soon okay let's do this so This payload action if we take a look at it you okay so it has a payload and a type however we really don't care about this type of L uh we don't use it for anything so what we're going to do is just destructure the payload in the payload is what you can think of is the the value that you pass in whenever you are trying to set this Redux data and for this payload since we're setting the active account number we just need to pass in an account number so payload is equal to account number however I just want to kind of rename it right here so it's a little bit easier more or easier to read and the type of data for this account number is it can either be a string or null so the way that I actually want to write this is that we'll click this and then a list of accounts will pop up and then we can just select one however once we have an account number selected if we click that again then it's going to be deselected so that's why I want to be able to pass in null right here basically if you ever like want to reset your active account or just like wipe it out you can just pass in no and it's going to do that all right so now we pretty much have a function that's going to get created where we're able to pass in an account number either a string or no now how do we update Redux well this is actually pretty easy because what we're going to do is for the state which is pretty much just this slice of data right here we are going to take the active account number property and we're going to set it equal to that account number that we just passed in and uh I know if anyone's familiar with Redux you're probably uh might be pulling your hair out right now because right here we just had a what looks like a big NoNo and we're mutating State directly however the reason that we are able to do this and this is a very cool thing about not only Redux toolkit but create slice crate slice right here in the background it's using a library called immer now how this works is that immer is going to keep track of the changes that we make to this state variable right here and this state is pretty much like a copy of the real internal state so once we're done making changes to the state what Imma is going to do and again this takes place all in the background is it pretty much Compares our new placeholder state to the real internal State and then it generates all this proper immutable data for us and the end result is it allows us to write much cleaner code without having to worry about the internals of Redux or creating all these all this immutable data on our own so pretty cool and then the last line of code that I want to write is this let me type it out so window again I'm going to be getting into this in more detail a little bit later on probably in another series but for right now um actually let me type out this entire thing and then okay I'll cut through it says step set store value it's going to be equal to an object where the key to space manager and the state current state so again like I said I'm gonna be getting into the details of how this IPC communication Works a little bit later but for right now just to give you a high level overview what we're going to do is since we need to communicate with node or in other words that electron store to store data on our hard drive then we're going to be sending some information over what's called an IPC Channel basically means like communicate with the node portion of tnb OS and the first param is just saying that hey we're about to set a store value or set some data on a hard drive and we are going to be setting this value which is just the current or the updated version of our state and store this data under the key speed test manager so whenever we shut down tnb OS and pop it back open again what's going to happen is part of that initialization or boot process is it's going to look in our electron store for any data that's currently stored there and instead of populating this manager slice with this initial data right here it's going to say hey I already found something in there from before and that's what we're going to use to initialize this app and we'll be getting into that logic in just a bit but yeah there you go now aside from this we also need to create one more reducer and that is for setting the Active network ID and it's going to be super similar so I'll just say set active network ID for the key again the state we're operating on is just the same state and the payload for this we'll just call it network ID and again it's going to be the same type is valid data that we're going to be passing in either a string which is the network ID itself or null and then instead of updating the active account number we want to update the Active network ID and set it equal to whatever the payload was that we rename network ID that we passed in and then this line of code is the same as well because again this state that we want to update in the slice is just equal to this object right here so now we got our functionality to update the active account number or Active network ID and it looks like that might be all however there is one other thing that I want to create and this is just a utility function that I have in basically all my create slice functions and this is just set manager so you know how this function right here is going to be setting this and this one is setting this well the function that I'm about to write in like five seconds is gonna be a function that enables us to set both at the same time now if you're thinking well when do we really need that because one of these is going to set the account number one of them is going to set the network why would we ever need to set both at the same time well the only time we need this is for that boot process because what that boot process is going to do is it's going to look under this key and it's going to find both of these that's stored on our hard drive that way and then it's just gonna pretty much save us some time instead of like having to call each of these individually I'm just going to say that this is a function to set this entire slice at once now for this I'm just going to pass in manager is the shape and now the only other paramet takes is this key right here because that's where it's going to look in our electron store to try to find this data and all right uh that's all we actually need to write for create slice and now we're just going to export some things and all right so we want to export all of these and I'll show you something a little bit tricky in just a second so what we want to do is we want to export set active account numbers set Active network ID and set manager however what we're going to do is instead of exporting them from manager dot reducers which it looks like you should do we're actually going to import them from manager dot actions now okay a key called initial state name reducers where the heck is manager dot actions so this is part of the Hidden magic of Redux toolkit and specifically create slice because like I said behind the scenes what's going to happen after we call this function is Redux toolkit is going to create these action creators by merging this key with this function and what it's going to allow us to do is basically something like this in our component let me just comment this out so uh you know this is an actual code just demoing something in our component what we're going to do is we're going to dispatch something like this set active account number and we're going to be passing in one two three so we're going to end up with these action Creator functions that are kind of like selfgenerated by this uh create slice function all right and last but not least I want to export this reducer so export default manager dot reducer so this will be our default default export and yeah everything looks uh good to go so now that we got it taken care of our manager slice we can hop over and create that run slice so we already have that file created for us and since we're going to be using a very similar structure let me just import this and let's see so instead of speed test manager it is speed tester runs and we don't need this manager type anymore instead we are going to need this run type and runs all right everything out should be the same and okay so for the initial run States actually I'm gonna do exports const initial State again the shape of this is just going to be a dictionary of runs so runs and we'll just keep that equal to an empty dictionary at first and then after this let me just go ahead and uh actually let me save some time in a copy all of this Okay so instead of manager this slice is going to be called runs the initial state is equal to this initial state which is the empty date and the name of this is going to be speed test runs so I can delete the speed test manager and alright so instead of set manager we're going to call this set runs again the naming convention I follow is just set and then uh whatever the slice is named so set runs camel case same thing here set manager because it was named manager and again that is to set the entire slice all at once it's kind of the pattern I've been following okay initial test speed test runs and now let's go ahead and just copy these because I want to create one action Creator function and that is to set an individual run so of course the state for this is going to be equal to runs and for payload uh whenever we pass in the payload it's going to be equal to one of these individual runs so the payload action just copy that what we're going to be passing in is a run so we can rename this to run but uh the reason I don't want to do it here you're going to see in just a bit okay so whenever we pass in a run what do we want to do well the first thing I want to do is I want to pluck off this run ID so I'm going to destructure this plucking off the Run ID from payload now the reason that I want to pluck that off is because what I want to do is I want to see if this run already exists in our Redux store so I'm going to create a variable called run and it's going to be equal to state run ID so again the state refers to um this dict or this slice right here and whenever we are setting a run for the very first time then there's not going to be any object matching this in our state however once we have set it and then we're just setting it again to update it then it's going to find it so this run right here is either going to be equal to a run or it's going to be undefined so why do I care about that well from this line of code right here whenever we are setting this we need to find out if the Run already exists or not because if the Run already exists then what we can do is take that previous run or existing data and just update it with any of our new data that we pass in which is going to be from the payload otherwise if the Run does not exist in our store yet then just go ahead and set this chunk of state to our payload just like this and I'm getting an error here runs all right that was because uh this runs which is basically saying that we're going to be storing addictive runs I accidentally had runs in here rather than run right here so there we go okay so this set run is a function that we're going to use both to create a run for the very first time and then also update any existing runs and then what error am I getting here manager because the type of this is not manager it is runs all right all right so initial State let me just review this real quick this is a name reducer looking good and now what I want to do is just export everything so export set run which allows to set an individual run and then set runs which we're going to use on on boot to set this entire slice at once pretty much reading in any previous runs from our hard drive and just setting it and then by default I want to have this runs.reducer is just the default export so now that we have our two main slices created both the manager slice and the Run slice what we're going to do is create a new file and kind of combine those together so again this file is store slash index.ts and to combine slices we are going to import something from Redux toolkit and a combine reducers all right so then we can just import uh we'll call it manager reducer so we're importing the default export which is basically just this manager reducer and then we're going to do the same thing for that runs reducer so from runs import it as runs reducer and now how do we combine these well we can go ahead and create a variable we'll just call it speed test get out of here what am I doing speed test reducer and this is going to be equal to the return value of combiner reducers which is going to take a key value pair with the key being basically what you just want to name that chunk of data and the manager reducer as a value so it runs runs reducer and then we'll just export this entire thing for default speed test reducer all right and that is really all we need to do to set up the Redux portion of our state management for this app however to make tnb OS aware of this we need to go ahead and add it to our app registration file so in here let's see copy this name and that is apps store so import speed test reducer from apps speed test store now as part of our app registration there is another key called reducer and you set this equal to the root reducer for the app and in this case it is speed test reducer and now that we have it in our registration we can go into Apps registry and pretty much just let our app registry know that we now have a reducer so since we already have our registration imported all we need to do is say that we have a new app producer or a new um some more app data that we want to store and we'll Kia under speed test and we just need to give it the reducer and then we're gonna have an exclamation after this and the reason that we need this is because in this app registration type we have this reducer reducer as an optional key value pair and the reason for that is because not all apps need to have a reducer not all apps need to store data in Redux so it is optional however in this case we're saying yes there is definitely a reducer for this speed test registration the reducer that we just created so you know you don't have to guess it's definitely there that's why we do it so now with all of that as long as I didn't miss anything we should have our Redux store structure all set up and ready to go this I think should be good all right so let me minimize this the moment of truth did it appear in our Redux store Redux and check it out all right so now in addition to system in chat we now have this cool speed test slice and of course we have our manager which was initialized with this data right here and then our runs which was just initialized as an empty decked for now and there you go so this is how we set up our Redux structure however the one other thing that we have to do now is we need to say that whenever we have data in here which we don't at the time but whenever tmbos boots up for the very first time we need to tell it how to load that data from our hard drive into this Redux store so let me actually close this and we'll do that right now now for this function under speed test store I'm going to create a new typescript file called initializer and again this is just going to have one function in it and its job is to initialize our Redux store whenever we first boot up tnb OS so let me go ahead and import everything first that we're going to need so from see if I can steal this from anywhere so we're first going to need those constants because remember those constants tell us which key in the electron store or on our hard drive all this data is so speed test manager and speed test runs and now after this we're going to be importing from this we need to import first of all um the initial State because if the logic is basically going to work like this it's going to say first whenever you're booting up check on the hard drive and see if we have any data in there that we can initialize the store with if not then we're just going to initialize it to whatever the initial state is right here so we need to import both this initial State variable and also this is the function that we're going to use to actually set this data so in the initializer we're going to import initial State and we'll just import it as manager initial States and the reason that I want to rename it is because we're also going to be importing initial state from another file as well when we don't want to have like initial State One initial state two so we're going to import the initial State rename it to manager initial State and then also this set manager action creator and we're going to import that from apps.speedtests.store manager just copy this and do the same for runs so import from runs say it runs initial state so our runs initial state is going to be this which it's going to be the fallback if it can't find any runs data currently in there and then to set those runs in Redux we use set runs just like that now another thing that we're going to need is just some type and that is from shared types and that is going to be the local electron store and this is just the shape of our data on our hard drive and then one other thing from system types and that is app dispatch so that dispatch function that we call to basically set data into Redux it's going to be of this type and I just want to make sure everything is typed out properly all right so with all this being said what we can do is we can create a function that's going to be called is pretty much the initialization function for this app and I'll just call it load speed test data and this is first gonna take a the dispatch spell that correctly all right so dispatch of type app dispatch in the store local electron store and this function is going to return void again we don't need to return everything because all it's doing is taking data from our hard drive and setting it in our Redux all right and now let me just export this by default and then we'll get into writing export default all right so the logic for this is actually going to be pretty simple I'll say all right let me make a variable called store manager and again what we need to do first is we need to figure out is there any data on the hard drive or in other words the local electron store already if so then we'll use that to set is the data if not then we'll just use that initial State as default so in order to do that we're going to do store and we'll add this question mark because the very first time that tnbos gets initialized not just this app but like the entire system we have the store optional while everything's being initialized but anyways just to make typescript happy we need to add that question mark right after so from this store which like I said is basically our hard drive we're going to look for data under the key speed test manager and that's going to be any existing data that was there from the previous time whenever we have our Network interactive account selected now if you are initializing this app for the very first time then you're not going to have this data stored yet so instead as a fallback we'll just use that manager initial state which is this this right here with these two keys initialized to null all right so we're either going to have data from the hard drive or the initial State and now once we have that to actually set this we're going to call dispatch set manager set manager and we're just going to pass in whatever this data is right here so again the set manager action Creator was just to set this entire state right here and now actually what error am I getting ah yes so back in our registry in the area that this is throwing us is saying that hey you told me to look in local electron store for a key called speed test manager however if I go to local electron store right here then we basically just need to update this type right here because right now we're saying that our app data it's only equal to chat electron story and what we want to do is we want to make sure that this is equal to both chat electron store and the speed test electron store that we just created so from speed tests we actually have it from registration right here oh we don't even have it yet but anyways what we are looking for is this right here speed test electron store and then we'll just import it right into our registration so we'll say import speed test electron Store for apps test types and then we can just export it right here so speed test electron store all right so we want to have our registration kind of the central point for everything and now we can import that in the app registry and all right and I also want to change this from a type to an interface since we're basically combining a couple different things now so let me actually comment that out and we'll say instead of this app electron store is a type we're going to export it as an interface called app electron store and this is just going to extend both this chat electron store and also this speech speed test electron store and we don't need to put anything in the body of the interface basically just saying that this electron app electron store all right it's a lot of electron Source I'm trying to say kind of a tongue twister but anyways this app electron store type or interface is a combination of chat electron store and speed test electron store easy peasy so now when we pop back in our initializer this local electron store should be good to go and just like we checked if there's any manager data on our hard drive and then dispatched it to Redux during the initialation process we're going to do the exact same thing for runs data so this is speed tester runs so we'll say store runs is equal to any runs data from a hard drive if you can't find any then just use that runs initial state which is just going to be an empty dict and then once you have one of those then just go ahead and set it in Redux so now that we got our initialization function written what we need to do is the very last step is just add it to our registration so we're the store initialization import load speed test store data from same location initializer and then the function that we just imported right here the key for this is initializer and there we go so we don't need to actually explicitly call this anywhere like from our registry or anything because another part of the internal tnbos boot process is it's going to look for all of these registrations and right after the system data is loaded it's going to go through each of these one by one and it's going to check is there an initializer function that exists if there is one that exists then I'm just going to go ahead and call it so again that's why it you know we don't need to like explicitly call it or anything it's just part of the internal interworkings I guess you could say so with this being said let me just go ahead and restart this app and see if anything broke all right it is looking all right but just to kind of verify that let me do this I'll verify that everything is being initialized correctly by doing this so for dispatch so what I'll do even though we never actually want to do this but uh just for testing things out I'm going to set some manager data so I'll just set active account number to like bacon and then the Active network ID the tuna let me pretty up this all right so on a boot if everything's working correctly then it's just going to set like this dummy data for a manager so let's see if it's set that first of all all right speed test manager okay looks like our dummy data was in there so now what I'm gonna do is close this and I'm actually going to be deleting this because right now that data not only should it be set in Redux which we just confirmed but it should also be set on our hard drive now the reason that I wanted to have that is because whenever I boot this up again then instead of pulling this manager initial state it should have found that data on the hard drive even though we just removed that dispatch function and uh as long as we see some bacon and tuna then everything should be working correctly Redux speed test manager bacon and tuna all right so this means that it is correctly loading in that data from our hard drive everything is persisting properly and by the way this uh right here this is basically how we're going to be using or setting this Redux data from our components so yeah I think that's good for this video and in the next one what we'll do is we'll go through and start hooking up all these components to Redux should be pretty sweet so uh yeah see you then