00:00 - when I was planning this series iOS 
16 and xcode 14 we're still in beta  
00:05 - and I hadn't yet updated any one of 
my phones my work phone or my test  
00:09 - phone to iOS 16. so I was testing on 
iOS 16 simulator but an iOS 15 device  
00:17 - my completed project worked well and for the 
final mode of gameplay we will be requiring  
00:22 - the multi-pier connectivity framework but 
as I was planning this video iOS 16 was  
00:27 - released and I finally updated my work phone 
to iOS 16 and I soon realized I had a problem  
00:34 - when you use the multi-pure connectivity framework 
you'll need to broadcast who you are to others on  
00:40 - the network using a display name and prior to 
iOS 16 I could use the iPhone's user-defined  
00:47 - device name for that display name so that it was 
obvious who is broadcasting their availability  
00:53 - in iOS 15 and earlier this can be found 
using the UI device dot current dot name  
01:00 - and that is why for my pure case in which is 
the third mode I don't require the input of a  
01:06 - name for the owner of the phone for the player 
one I simply use the current user's device name  
01:14 - well as I started to test on my iPhone with 
iOS 16 installed that's where I found the  
01:20 - problem in iOS 16 and later to access that 
information you must meet certain criteria  
01:25 - and be assigned an entitlement and this 
is way more work than I want to go through  
01:31 - now instead of displaying the user's assigned 
device name it uses a generic device name  
01:36 - like iPhone so everyone making themselves 
available would have used the same name  
01:42 - you may think that that's not a problem why don't 
I just ask for a name to use well it's easier said  
01:49 - than done because in multi-peer connectivity 
the way I've designed this app it requires that  
01:55 - I have a name before I get to the start screen 
so that I can create an instance of my service  
02:00 - class that I'll be creating using the name as 
one of my class parameters I didn't need that  
02:06 - before because I could have just used what was 
on the phone so I could scrap the five videos  
02:11 - I already created and go back and redesign the 
app from scratch but that's a lot of work so in  
02:17 - this video I'm going to go back and refactor some 
code that we already have working so that I'll be  
02:22 - able to proceed with the multi-peer connectivity 
option in the next video so please bear with me  
02:29 - this is the life of a developer things always come 
at you and you got to be ready to make changes  
02:35 - so what I want to do is to request a username on 
first launch and then store it in user defaults  
02:42 - then move on to the start screen on the next 
launch if it finds a name that has already been  
02:48 - created it'll bypass that first screen and go 
directly to the start screen this means we'll  
02:54 - no longer need to ask for your name on any of 
the game modes because we'll already have it  
03:00 - the other thing I'm going to have to do is be able 
to provide a way for the user to change their name  
03:06 - and this is another challenge because 
once I've created my Surface class  
03:09 - that display name that we use to broadcast our 
availability is read only and can't be changed  
03:16 - this will make more sense 
once we start coding the class
03:21 - so this is what I'm going to do first 
I'm going to create a new branch  
03:27 - and I'm going to call it refactored code
03:32 - now I'm going to open the app entry file and add 
a new app storage property with the key your name  
03:41 - and I'll assign it an empty string 
to a variable of the same name
03:49 - then within the window group block I'll create an 
if Clause that will check to see if your name is  
03:54 - empty meaning there's nothing stored there yet 
else I'll display the start view if there is
04:03 - well if your name is empty we want to display a  
04:06 - view that will allow us to create a new 
string for our app storage property so  
04:11 - let's create a new Swift UI View and 
I'm going to call it your name View
04:20 - inside there I'll create the same 
app stores property for your name
04:27 - now we want to be able to update this value so 
you might think that we could use it as a bound  
04:34 - value for a text field the problem though is 
that as soon as I start typing into the text  
04:40 - field it'll no longer be empty so it'll 
force a refresh of our app entry window  
04:45 - group and we'll be back to the start view with 
only one character entered and I think we have  
04:51 - to have names that are longer than one letter 
so I'm going to create a second state property  
04:57 - and call it username that'll be a string and 
that's what we'll be binding to our text field  
05:06 - so let's enclose this text field right now in 
a v stack and I'm going to change the string  
05:12 - for the text field to be this is the name 
that will be associated with this device
05:22 - then I'll add a text field with the string 
your name and bind it to that username property
05:33 - then I'm going to set the style to rounded border
05:39 - next I'll add a button with the label set
05:45 - and the action will now be to change your 
names app storage property to username
05:56 - we'll set the button style to bordered 
prominent and will make the button  
06:02 - disabled if the username is empty we want 
to force people to actually enter something
06:08 - just to fill the screen I'm going to add 
an image using the launch screen asset
06:15 - and then add a spacer to push it up to the top
06:24 - let's add some padding around the v-stack and 
we'll do as we did in the other views as well I  
06:30 - want a navigation title so that means we're gonna 
have to add a navigation stack so as before we'll  
06:35 - first create the navigation title and I'll 
use as before x's and o's and then I'll use  
06:43 - my view modifier in navigation stack to embed 
this into one let's see I can return now to  
06:52 - my app entry point then and when your name is 
empty we'll just present this your name View
07:02 - but first let's just comment out this your name 
State Property to see where we use it in our code  
07:09 - those errors will give me that indication  
07:12 - well I'll no longer need to ask for it 
if playing against someone else because  
07:17 - it will have been stored in the app storage and 
I'll already have it so I can remove that here  
07:24 - okay similarly I'll no longer need to ask for it 
when I'm challenging a device and that's when the  
07:31 - mode is bought because we already have it in app 
storage so I'll just return an empty view here
07:39 - I will need it in this setup function still though  
07:43 - so I'll need to add the app storage property back 
to our view so that we can get access to it but  
07:49 - since we know that this property cannot be empty 
I can remove those checks from our disabled check  
07:56 - namely no check is needed 
if the game type is a bot
08:04 - and if the game type is single we only have 
to check that we have the opponent's name  
08:11 - so let's uncomment this property then 
and change it to our app storage property
08:20 - in the preview then let's test I see that if I 
choose to sharing it now only asks me for the  
08:28 - opponent name and after entering I can tap the 
start button when I do this however there's no  
08:35 - name for your name and that makes sense here 
because the your name property for this view  
08:40 - is an empty string and the preview provider 
doesn't know about the app storage value
08:47 - I can solve this problem then along with an issue  
08:51 - that I would have in our next 
video by doing the following
08:57 - let's create an initializer for this struct  
08:59 - and give it one parameter your 
name that's going to be a string
09:06 - now we'll need to go back to the app 
entry point and add that to the start View  
09:12 - so that we can pass on our app storage property
09:19 - this will create an error when we build 
so I'll need to return to start View and  
09:24 - in the preview provider put in some value 
for your name I'll just use the text sample  
09:31 - this still doesn't fix things though
09:41 - as you can see we still can't see our name 
so to solve the preview display issue I can  
09:48 - go back to our initializer and simply update 
the app storage your name property with the  
09:55 - one that gets passed in and our preview 
provider then will provide the sample
10:01 - now for the single game when 
I enter my opponent's name  
10:06 - and start the game I see my sample 
name has been entered for me
10:14 - if I choose to challenge the device I don't have 
to enter a name at all because when I start that  
10:20 - game the sample name is entered for me and the 
preview display name is used for the opponent  
10:26 - Let's test on a simulator when I launched the 
game for the first time I'm asked to enter my name
10:35 - once I do that the set button is active and 
when I tap on it I'm taken to the start screen
10:43 - if I select the two sharing device option  
10:47 - I'm asked to enter my opponent's name and 
when I start I see both of our names entered  
10:54 - if I choose to challenge the device no names 
are required for entry and I can start the game  
11:01 - both names are entered and we can play the game 
just as before this is almost perfect but what  
11:09 - if I want to change my name how can I do that 
well the problem is that I can change the name  
11:14 - but if I start a new peer game that I'll be 
creating starting in the next video that name  
11:20 - will not be used because we will have already 
used the old name to create our new service  
11:24 - class and once it's used it can't be changed so 
the solution I've come up with is to allow the  
11:30 - user to change their name but then Force an exit 
of the app so that they'll be forced to restart  
11:37 - so in start view create a new State Property 
called change name and initialize it as false
11:46 - create another one for new name 
and make it an empty string
11:53 - below the launch screen image create a text view 
that lets people know what their current name is
12:03 - then below that create a button with the 
label change my name and for the action  
12:09 - it'll be to toggle that change name property 
and I'll set the button style to bordered
12:19 - well now we can use that change name property 
to initialize an alert that will ask the user  
12:25 - if they want to change their name and then I can 
use the new ability in is16 to add a text field to  
12:32 - that alert so we'll start with an alert using the 
title key is presented actions message overload
12:45 - for the title key use change name will bind 
is presented to our change name State Property
12:55 - for the actions we create a text field 
with the placeholder string new name  
13:02 - and bind it to our new name property 
following that we'll create two buttons  
13:10 - the first will be a button with the label ok but 
I want to give it a rule of destructive to make  
13:17 - it stand out then the action will be to set the 
app storage your name property with the new name  
13:24 - and then I immediately use the 
exit minus 1 to force equipped  
13:30 - now I'd love to be able to disable this button but 
if I try that it doesn't get displayed however it  
13:37 - really doesn't matter because if they don't enter 
a name when they launch the app again it will go  
13:42 - to that name entry screen anyway because it'll be 
empty the other thing is that this ability to add  
13:48 - a text field to an alert is an iOS 16 feature only 
and we have a minimum deployment Target of iOS 15.  
13:55 - well the good news is that this doesn't cause an 
error or a crash it just leaves the text field out  
14:01 - of the alert so in our case I'm going to user Taps 
on the OK button it'll just set the app storage  
14:07 - value back to an empty string and on the next 
launch they'll be forced to enter their new name  
14:14 - we do want to give people the ability to cancel  
14:16 - however so we'll add a cancel button with 
a roll of cancel but no actions required
14:25 - and then finally for the message I can display 
a text with the string tapping the OK button  
14:33 - will quit the application so you can 
relaunch to use your changed name
14:45 - you can see what this looks like in the preview 
but let's put it to a test in the simulator  
14:52 - when I launched the app I see that my 
name Steward is pulled from App storage
15:00 - if I tap on the change my name I 
could enter a new name like Colin  
15:07 - and then when I tap on OK the app quits
15:12 - when I launch it again I see that it's 
been stored in app storage so I'm good
15:19 - let's do this once more this time however I'm 
not going to enter anything into that name field  
15:27 - when I press on OK the app exits as before 
this time however when I open the app  
15:35 - it recognizes that nothing's been 
entered and I'm asked to enter a name  
15:40 - because the one stored in app storage 
is an empty string perfect so before  
15:47 - we move on to the next video though let's 
commit our changes to our refactored branch