00:00 - in the last lesson you wrote your first Swift Code 
statements in this lesson you're going to learn  
00:04 - how to group together code statements to perform 
a task now these groupings of code statements are  
00:10 - called functions this is a very powerful concept 
because you can execute or call these functions  
00:16 - whenever you want to perform that task let's dive 
in and see how we can write our first function  
00:23 - okay so first of all how do you declare a brand 
new function now this is going to look somewhat  
00:28 - similar to declaring a new variable or constant 
it's a keyword followed by a name so in this case  
00:36 - of a function the keyword to use is f-u-n-c 
or func for short and Then followed by that  
00:43 - you put the name of the function now just like 
a variable name you are going to be referring  
00:49 - to this function name in order to execute the 
contents of the function now after the function  
00:56 - name you're going to have two rounded brackets 
we're going to ignore these for now but these  
01:01 - two brackets they are part of the name and then 
following that you have a set of curly brackets  
01:07 - and you're going to find most of the time in 
Swift when you see a pair of curly brackets  
01:13 - it's code that goes in between those two brackets 
in this case of a function that is where we are  
01:20 - going to put our grouping of code statements so 
whatever code statements you want this function  
01:26 - to run when you call it you are going to put 
those code statements in between those two curly  
01:32 - brackets okay so let's put some code in there and 
see what it looks like you probably remember these  
01:38 - two lines of code from the previous lesson if we 
put those two lines of code into our function and  
01:44 - we change the name to say hello it's going to look 
like this okay so how do we call this function so  
01:50 - that we can execute its code we simply use the 
function's name say hello followed by the two  
01:57 - rounded brackets because that is also part of the 
function's name notice that we don't need to use  
02:02 - the func keyword again because that was only 
for declaring a new function so just like that  
02:07 - you are able to execute all the code inside that 
function now why don't we try it out in an xcode  
02:13 - playground so we can see it in action so here I 
am with a brand new empty well empty aside from  
02:19 - the default code xcode playground we have our VAR 
greeting equals hello playground string and why  
02:26 - don't we put in our second line which is print 
greeting and just like you saw in the previous  
02:32 - lesson when we run this this we are going to 
get that output in the playground right there  
02:38 - now let us declare a brand new function using the 
funk keyword followed by the function name say  
02:47 - hello followed by two rounded brackets followed 
by a pair of curly brackets and oftentimes when  
02:55 - you write these brackets you'll find that xcode 
helps you complete them so let me just go back for  
03:00 - a second by holding a shift and hitting square 
bracket so on my keyboard that's how I get the  
03:08 - curly brackets shift and do that if I hit enter 
it's automatically going to create a new line and  
03:15 - it's going to create that closing bracket for me 
in here I am going to take these two lines of code  
03:24 - I'm going to press command X to cut it and the 
command V to paste it in there and let's run our  
03:31 - um our playground and see what happens so as 
expected nothing happens because all we've  
03:37 - done here is we've declared this function say 
hello and we've put in the code in between the  
03:43 - brackets it's not going to run this code unless we 
call the function so if I start typing my function  
03:54 - this menu pops up this is called an autocomplete 
menu if I didn't mention that in the previous  
03:59 - lesson and this just helps you write code 
faster you can just select it it's xcode  
04:05 - being intelligent right so you could type this out 
if you want like notice this is the function name  
04:12 - right followed by the two rounded brackets because 
that is part of the function name and you'll soon  
04:17 - find out why okay but for now let me run the code 
again and see what happens now this time I get the  
04:24 - output in the console because this line of code is 
calling the function which is executing the code  
04:30 - in there now if I call the function again it's 
going to execute those two lines of code again  
04:38 - so you can see this is really powerful because 
often times to perform a task it's multiple  
04:44 - lines of code working together to achieve a common 
result and let's say there's 10 20 lines of Code  
04:50 - by putting it in a function not only can you run 
that task whenever you want but it also saves you  
04:59 - from repeatedly writing the same code and when 
you get to writing larger pieces of software  
05:05 - not repeating code is actually pretty important 
because if you find an error in one instance of  
05:12 - that repeated code you don't have to go and fix it 
in all the other places you repeated that code by  
05:18 - putting it in a function once and calling it you 
know from wherever you need to call it you can  
05:25 - edit the code and fix it from one place now that's 
pretty handy right if you like that you'll be even  
05:30 - more impressed with this next part now to take it 
a step further functions can be even more useful  
05:36 - because they can accept input into the function 
when you call it and that is what the two rounded  
05:42 - brackets is for that comes after the function 
name in between those two rounded brackets you  
05:48 - can put a series of what looks like variable 
declarations if you take a look at this slide  
05:55 - here in between the two rounded brackets I have M 
colon string now what this is doing is declaring  
06:02 - what's called a parameter for the function this 
means that whenever I call the say hello function  
06:09 - I also need to supply the function a piece of 
string data and then inside my function within  
06:17 - the two curly brackets I can work with that piece 
of data and I can reference that piece of data  
06:23 - using the parameter name which in this case is M 
so you can imagine with this code now whenever the  
06:29 - say hello function is called it also needs to be 
supplied with a piece of string data which we can  
06:35 - reference using M and then within the function we 
have the code print M so in essence this function  
06:43 - serves the purpose of outputting or printing to 
the console whatever piece of string data you  
06:49 - pass to the function so let's try that out in the 
playground here so instead of saying VAR greeting  
06:55 - I'm gonna erase that line right there and I'm 
going to declare a parameter of my function  
07:03 - let's use m colon string this pretty much is a 
variable declaration right except without the  
07:12 - VAR keyword but the proper terminology is this 
is a parameter of the function you can only use m  
07:21 - inside these two curly brackets so we also need 
to modify our code here because there's no concept  
07:29 - of what is a greeting now because we just deleted 
that variable so let's print out M and now you can  
07:36 - see when we make these function calls say hello 
xcode recognizes that hey if you were to call this  
07:45 - function the way that you declared it you need to 
supply a piece of string data so it's saying it's  
07:50 - missing the argument for parameter m in the call 
so let's take a look at what that looks like I'm  
07:56 - going to erase those two function calls and I'm 
going to type it out again now notice this time  
08:00 - autocomplete detects that you need to supply 
string data and this is what that looks like so  
08:07 - I'm going to press enter and this is where I would 
Supply that piece of string data and notice that  
08:14 - it tells you that this is going to be the um 
the parameter name uh when you're building  
08:21 - this for real you would probably use a more 
descriptive parameter name than just m so you  
08:26 - might say message for example and uh it would 
make more sense as you're supplying the string  
08:32 - data but we'll leave it as M because to follow 
the example in the slide I'm going to say I  
08:41 - uh chemical functions okay let's 
run the code and see what happens
08:50 - so as we expect it prints out I can code 
functions because this piece of stringed  
08:54 - data is being passed into the function as a 
parameter and it can be referenced by this  
09:01 - parameter or label M and then I am printing it out 
right there I have a reference to M from within  
09:08 - the curly brackets but outside of the function 
declaration it doesn't know what m is right if  
09:15 - I if I try to print M like that cannot find 
m in this scope this is called a scope so you  
09:22 - can think of the area between these two curly 
brackets as a standalone scope or Standalone  
09:29 - area and only in that area does this parameter 
exist in there that you can reference it using m
09:39 - now going back to our diagrams for our 
section what does it look like to have  
09:43 - multiple parameters for a function because 
oftentimes we may require multiple inputs  
09:49 - all it is simply is you declare your parameters 
separated by a comma in this example we have the  
09:56 - same M parameter followed by a comma and then an N 
parameter notice that this parameter data type is  
10:03 - different it's an INT so it expects integer data 
now whenever we call say hello we need to supply  
10:10 - a piece of string data and a piece of integer 
data let's go back to the playground and try  
10:16 - this out so instead of modifying this function I 
am going to declare a new one and this one let's  
10:23 - say does addition and you haven't seen addition 
yet so this will be interesting so let's declare  
10:31 - our first parameter a is an integer followed by 
comma so that I can declare the second parameter  
10:37 - in this list and it will be also an INT and I'll 
call that b okay and then I have the opening curly  
10:44 - bracket I hit enter it fills in the closing 
curly bracket and inside here I am going to  
10:51 - put the code and I what I'm going to do in here is 
I'm going to add up A and B and then print it out  
10:57 - to the console so I'm going to say VAR sum equals 
a plus b and then I'm going to print out the sum  
11:06 - so you should be able to recognize this code 
VAR is declaring a new variable named sum  
11:13 - equal is assigning this the right hand side to the 
variable sum and this plus symbol as you can guess  
11:24 - adds two integers together so we just have a plus 
b But A and B are parameters that get passed in to  
11:33 - this function call all right so let's try this 
out I'm going to call this function do add and  
11:39 - xcode finds it on the menu so I'm just going to 
hit enter to auto complete that and all I have to  
11:44 - do now is fill in the two integers that I need 
to pass in so let's say 2 and 3. let's run the  
11:52 - code see what happens as expected it prints out 
a 5. so that is an example of providing single  
11:59 - inputs and multiple inputs into a function now 
let us go back to the slides and extend it even  
12:06 - more now functions can be made even better because 
functions have the ability to return output when  
12:12 - you call them let's take a look at how this looks 
like if you look at this syntax notice that after  
12:19 - the function name after the rounded brackets we 
have a dash followed by a greater than sign which  
12:27 - makes it look like an arrow right in fact that is 
to signify that this function returns something  
12:35 - like it produces some sort of output and Then 
followed by that makeshift Arrow we have the  
12:42 - data type of the data that this function produces 
in this case I'm going to put int because I want  
12:47 - to return or output a sum and then within 
the curly brackets of the function you have  
12:54 - have to make sure that you have the return keyword 
because if you've specified that this function is  
12:59 - going to produce some sort of output then you 
have to use that return keyword and actually  
13:03 - produce the output that this function returns 
and you also have to make sure that what you are  
13:10 - returning the output data matches the data type 
that you have set this function will return in  
13:18 - this case I've indicated that do add will return 
an INT data and inside the body of my function I'm  
13:26 - returning a piece of int data so all is well now 
before we go into exical playgrounds to try this  
13:32 - out let's combine this with input parameters and 
see what that looks like so if you take a look  
13:37 - at this slide I have two input parameters A and B 
they're both integer types they're separated by a  
13:43 - comma and this parameter list and then after 
the rounded brackets I have that arrow and I  
13:49 - am specifying that I'm going to be returning an 
INT data in the body of my function I am adding  
13:56 - up the two inputs into a variable called sum and 
then I have the return keyword and I'm returning  
14:03 - that sum as an output of the function let's take a 
look at this in action in our playground so let's  
14:10 - modify our do add function here I'm going to put 
a space after the rounded brackets I am going to  
14:17 - hit Dash greater than space and I'm going to 
say that this returns into Data now xcode is  
14:26 - going to complain here because it detects that 
I've indicated I should return in data but I'm  
14:32 - missing the return keyword for an expected int 
data so instead of printing this out I'm actually  
14:41 - going to say return sum just like in our slides 
now let's run this code and see what happens  
14:48 - notice here that I am calling that do add function 
and I'm passing in 2 and 3 as my input parameters
14:59 - now there is no output nothing pops out in the 
console why is that because we don't actually have  
15:05 - a print statement that outputs it to the console 
now you might argue but we we're returning the  
15:12 - data from here well returning the data doesn't 
mean printing it out returning the data means  
15:18 - that this function produces that output but where 
does it go well what we have to do is we have to  
15:26 - declare either a constant or variable to refer 
to that output so here's what we're going to do  
15:33 - I'm going to declare a constant this time 
I'm going to say let result equals the  
15:42 - um the output of do add right so what's going to 
happen here when I execute this function and it  
15:52 - produces that sum and it returns it that output 
is going to get assigned to my constant result  
16:01 - if I run it right now there also is no output 
well why is that because in this line of code I've  
16:09 - merely kept track of the sum so now I can refer to 
that piece of data I still at the end of the day  
16:17 - need to print it out so I'm going to write print 
result here I did this so I can illustrate to you  
16:26 - how it's different printing it inside the function 
versus returning it out of the function and then  
16:33 - capturing it capturing a reference to it with 
a constant or variable and then working with  
16:40 - it now you might say that's redundant I could 
have printed it inside the function and that's  
16:45 - true but I mean this is a really small scenario 
right this is important because sometimes you may  
16:53 - need the output to further work with it maybe 
pass you might want to pass that result into a  
17:00 - second function you might want to work with it 
in some way not just simply print it out right  
17:06 - with the ability to take input and to produce 
output functions can truly live up to their  
17:11 - name and help us group together sets of 
instructions now there are a couple more  
17:15 - things I want to show you about functions before 
we are done with them one is called a parameter  
17:20 - label so when we declared parameters here for 
our do add function what we could have also  
17:27 - done right before the parameter name you can 
put a label so you can say let's say first num  
17:38 - and before parameter B you could do the same thing 
you could put another label second num let's take  
17:45 - a look at what that does to our function call 
now I am going to erase this line of code here  
17:51 - and uh we're going to type do add and this time 
take a look at what autocomplete suggests for  
17:58 - us it is now using the parameter labels instead of 
the actual parameter names it functionally the the  
18:07 - function works exactly the same way so if I put 
3 and 8 here and then I you know run the function  
18:13 - it's going to Output 8. the only difference now 
is by putting these parameter labels in front of  
18:20 - the parameter names it is going to change how you 
call the function the reason for doing this there  
18:27 - there may be multiple reasons right one could be 
you want words that are more descriptive so that  
18:33 - when you're calling your function you remember 
what data you are supplying for it this also  
18:39 - allows you to you know notice inside your function 
you are still referencing them by the parameter  
18:46 - names itself so that's something you can use 
to make your your functions a little more more  
18:51 - intuitive as you're reading them and using them 
something else you can do is if you don't want  
18:58 - to have these at all right if you don't 
want to put labels or parameter names at all  
19:05 - you can replace your parameter labels with a 
simple underscore you can do this with one you can  
19:11 - do this with both it doesn't matter let me just 
do it for both and show you what that looks like  
19:18 - so I'm going to type do add again 
and this time take a look at what  
19:23 - that what it shows up as so you'll still 
see that parameter name here but we're now  
19:29 - adding your data notice that you don't see any 
parameter names in the function call you also  
19:36 - don't see any parameter labels in the function 
call so this might be good for a very intuitive  
19:42 - function names so do add you pass in two numbers 
very obvious what that's going to do or it could  
19:49 - be to shorten the function calls itself or things 
like that and the last thing I want to mention  
19:55 - to you is what is a function signature and just 
like a written signature a function signature is  
20:01 - used to identify a function and that consists 
of the function name as well as its parameter  
20:08 - list including argument labels and such it 
may seem pretty obvious but let me introduce  
20:15 - a scenario too so if I have another function 
called do add and this is going to be on that
20:27 - right and maybe this is I don't know maybe a 
plus a plus b plus B and then return the sum  
20:39 - so obviously the calculations are a little 
bit different like what the each function  
20:44 - does but they're both called do add 
and they both have parameters A and B  
20:49 - so what is the function signature well the 
function signature of of this one up here
20:58 - do add is that in the 
function signature of this one  
21:04 - is this right like this one 
is this and this one is this
21:12 - so they're different and it is a combination 
of function name like how you are using those  
21:18 - parameter labels plus the parameter names 
itself if that is even a factor now in terms  
21:24 - of the topics covered today I would say declaring 
functions it function inputs and outputs are the  
21:29 - most important thing parameter labels and function 
signatures are nice to know especially when you  
21:35 - get to reading Swift Code and you know you won't 
get confused about why some things look the way  
21:41 - that they do but yeah all of that combined is 
a good working knowledge of Swift functions  
21:46 - I hope that with these two lessons you're starting 
to realize that coding is completely within reach  
21:51 - for you now if you're learning a lot from these 
lessons please give this video a thumbs up and  
21:56 - don't forget to subscribe so you don't miss 
the next lesson now with functions under our  
22:00 - belt we are able to execute a batch of code to 
change the cards up top when the user Taps on  
22:06 - the deal button and you're going to learn 
that in the next lesson I'll see you there