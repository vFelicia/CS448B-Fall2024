00:04 - hey coders hope you guys are having a
00:07 - great Friday so far Chris here with
00:09 - episode 5 of how to build a shopping app
00:11 - now in the last lesson we had listed out
00:14 - our products from our Moulton store and
00:17 - right now our Xcode project is
00:19 - connecting to our moulten back-end and
00:21 - retrieving those products and listing
00:23 - them out here so I've got three products
00:26 - when we tap on any one of them though
00:28 - there is nothing in the detail view so
00:30 - that's what we're going to do in today's
00:33 - lesson so from the master view here when
00:35 - the user taps on a product we're going
00:37 - to send that object over to the detail
00:40 - view and then from there when the view
00:42 - of the detail gets loaded we're going to
00:45 - display those product properties here
00:47 - the title the price and the description
00:49 - so let's go back into our Xcode project
00:51 - right now and the first thing we're
00:53 - going to do is go into the storyboard so
00:56 - that we can add all of the labels that
00:58 - we need in the detail view so if you
01:01 - can't see what's going on in your
01:02 - storyboard remember that you can always
01:04 - double click on an empty space to zoom
01:06 - out so you can get kind of a holistic
01:09 - view of your entire storyboard so we're
01:12 - gonna be working with the detail view
01:14 - right here so let's double click to
01:17 - drill back in and then here in the lower
01:21 - right hand corner we're going to search
01:23 - for label okay and if you don't have
01:25 - this panel make sure that this button
01:28 - here shows you that panel and we want to
01:31 - be on the object library tab so when you
01:34 - search for label you're going to get a
01:35 - couple well it should be one element
01:37 - showing up we're going to drag this
01:40 - label here and this is going to be the
01:42 - title so here on the document outline
01:45 - and if you don't have this panel it's
01:46 - just this little button right here
01:49 - I'm just going to click into it so I can
01:52 - name it the title label just so when you
01:55 - have a lot of elements in your view it
01:57 - could get confusing okay and this was
02:01 - the label here that was by default and
02:03 - they called it the detail description
02:05 - label we can reuse that let's call it
02:08 - the description label it's got some
02:11 - default text already detailed view
02:13 - content
02:13 - - goes here I'm just going to change
02:15 - that text you don't have to I'm just
02:17 - gonna change it to description so it
02:20 - kind of matches what we are going to be
02:23 - using it for and let's drag one more
02:26 - label here for the price and do that and
02:30 - price I'm going to rename that to price
02:33 - label and then let's make the title
02:36 - label just a little bigger and bold so
02:39 - under font in the property inspector
02:41 - let's choose custom I'll leave it font
02:46 - family as Helvetica style is bold and
02:49 - let's make it font size 20 so an easy
02:53 - way to position these stacked vertically
02:56 - is to use something called a stack of
02:58 - you before stack views were introduced
03:00 - the way we would have done it is
03:01 - position this title label maybe Center
03:04 - it give it a offset from the top and
03:07 - then Center the price label and give it
03:10 - a offset from the title label and then
03:12 - Center the description label and give it
03:14 - a offset from the price label well with
03:17 - a stack view what we can do is put all
03:19 - these three labels into a stack view and
03:23 - with that stack view you can specify how
03:25 - they're distributed so let me show you
03:27 - what I mean on the document outline I'm
03:29 - just going to highlight all three of
03:31 - them you can hold down command and
03:33 - manually click all three and then click
03:37 - this button right here which is going to
03:39 - stack them together into a stack view
03:41 - now if you check your document outline
03:43 - you'll see that all three labels have
03:45 - now been put into a stack view so first
03:48 - of all we have to position the stack
03:50 - view so instead of positioning all three
03:52 - of these labels I only have to position
03:53 - this one element and then specify how
03:56 - these three labels are going to be
03:57 - positioned inside so I'm gonna highlight
03:59 - the stack view now it can be a little
04:02 - hard to click because you might
04:03 - accidentally click these labels so I
04:05 - would recommend that you click on the
04:06 - stack view from the document outline and
04:08 - let's give it some Auto layout
04:09 - constraints so I'm going to click
04:14 - horizontally Center it in the container
04:16 - so it's in the middle and then on the
04:20 - pin menu I'm going to give it an offset
04:23 - from the top let's say 30
04:27 - and from the bottom I'm going to say
04:29 - something like a hundred so let's add
04:33 - these two constraints now you can see
04:35 - that they're all stretched out I'm gonna
04:38 - update frames and then we're going to
04:41 - click the stack view and we're going to
04:43 - tell it how to distribute these elements
04:45 - inside of it on the inspector panel you
04:47 - can see the axis is vertical which means
04:50 - that they're gonna be vertically stacked
04:51 - a distribution we're going to say equal
04:55 - spacing so that's gonna make them
04:56 - equally spaced within the stack view now
05:00 - that I look at it it looks kind of
05:02 - strange with so much space in between
05:03 - all of them so what I'm going to do is
05:06 - just adjust the constraint of the stack
05:08 - view before I had put the bottom of the
05:11 - stack view is a hundred from the bottom
05:14 - of the view so let's change that let's
05:17 - say it's something like 400 and then we
05:21 - can adjust that a little later so let's
05:23 - save it and let's zoom out in this
05:25 - storyboard for a second here and check
05:27 - out what's happening so you know that
05:29 - when we tap on a cell in the table view
05:30 - it brings us the detail view right that
05:33 - happens because of this segue right here
05:35 - and the identifier is called a show
05:38 - detail right so when we tap on a cell on
05:40 - the table view which is one of our
05:42 - products it's going to bring us actually
05:44 - to this navigation controller and the
05:46 - route view of this navigation controller
05:48 - is actually the detail so because we
05:51 - retrieved all of the products in the
05:53 - master view controller dot Swift right
05:56 - this master view controller class this
05:58 - is where we have all the product data
06:00 - how are we going to send the product
06:03 - that the user selected to the detail
06:05 - view controller so that that data can
06:07 - get displayed well when the user taps on
06:10 - a cell in the master view controller
06:12 - this method gets fired prepare for segue
06:16 - so there's already some code written
06:18 - here so let's go over that and I'll
06:19 - explain to you what's happening so right
06:22 - here it's just the check to see if the
06:24 - segue that's happening is called show
06:26 - detail and that's the segue that leads
06:28 - us to the detail view controller and
06:30 - then here it's checking if the user has
06:33 - selected a row in the table view and if
06:35 - it has it's going to assign that index
06:38 - path object into this constant
06:40 - right here called index path and that's
06:42 - gonna tell us which row that the user
06:44 - selected now here we commented this out
06:47 - last time but what it's doing is based
06:50 - on the row that the user selected we're
06:52 - gonna go into our objects array and
06:54 - retrieve that object
06:55 - remember the objects array stores our
06:58 - product here it's casting it as an
07:00 - estate by default because when the
07:02 - project is created Xcode doesn't know
07:04 - what sort of object it is so here
07:06 - instead of an estate we're going to put
07:08 - an Asst dictionary okay and the next
07:10 - line is basically getting a reference to
07:14 - the detailviewcontroller
07:15 - which is the destinationviewcontroller
07:17 - that's the view controller that we're
07:19 - transitioning to from the segue now if
07:22 - you noticed back in the detail view
07:24 - controller dot Swift it's actually got a
07:26 - property here called detail item okay
07:30 - and it's the type of any object so if we
07:33 - go back to the master view controller we
07:35 - also commented out this line which sets
07:38 - the object that the user selected into
07:40 - that property so let's uncomment that so
07:44 - again it's retrieving the product that
07:46 - the user selected right and putting it
07:49 - into this constant object and then it's
07:52 - getting a reference to the destination
07:54 - view controller which is detail view
07:56 - controller right and we're putting that
07:58 - into a constant named controller and
07:59 - then finally because it is a detailed
08:02 - view controller we're accessing the
08:03 - detail item property and we're assigning
08:06 - into it the product that the user
08:08 - selected and then finally these two
08:10 - lines just sets the back button so what
08:13 - happens when this object gets set into
08:15 - detail item let's go into the detail
08:18 - view controller dot Swift here in this
08:20 - property when it gets set this method
08:23 - gets fired configure view so let's look
08:26 - at the configured here update the user
08:29 - interface for the detail item so first
08:31 - it checks if there is a detail item and
08:34 - we know that there is because it was
08:36 - just set and then here this line it
08:38 - checks if there's a description label
08:40 - and then it proceeds to set the text for
08:43 - that description label so we're going to
08:45 - get rid of this stuff right here first
08:48 - of all and we're going to write some
08:50 - comments as to what we're going to do so
08:53 - set the product product title set the
09:00 - description label set the price label
09:05 - based off of this detail object so how
09:08 - are we going to retrieve the title
09:09 - description and price from the product
09:12 - well let's look at the API documentation
09:14 - again so here it is the call that we
09:17 - made and this is the response and we can
09:20 - see for a particular product what sorts
09:22 - of key value pairs are in that
09:25 - dictionary so we have title right that's
09:27 - the key and that's gonna give us the
09:29 - title of the product we have the price
09:32 - which we can retrieve here there's also
09:35 - this other pricing property which gives
09:38 - us a couple more options so if we chose
09:40 - in our store settings to round it right
09:43 - we have a with tax without tax and if we
09:46 - specified a price formatting we can do
09:48 - that again we can retrieve that price
09:50 - with the formatting sorry with the tax
09:52 - or without the tax and then here's the
09:54 - raw number here and then there's also a
09:57 - description key which has the product
09:59 - description so I'm gonna go back to the
10:01 - Xcode project here and I'm going to
10:03 - create a couple of constants that
10:04 - represents those pieces of data so I'm
10:07 - gonna say create a constant called
10:09 - product title equals detail and the key
10:14 - was title string okay then I'm going to
10:18 - say let product description let's type
10:22 - it out equals detail and the key was
10:27 - description string and I'm going to say
10:32 - let product price equals detail and the
10:40 - key was price as string and finally
10:44 - we're going to assign all of these
10:46 - constants into the labels so right now
10:50 - we've only got the detail description
10:52 - label connected to the element on the
10:55 - storyboard we also gotta add one for the
10:57 - title and one for the price so we're
10:59 - gonna jump into the storyboard let's
11:02 - zoom in
11:03 - let's click the assistant editor view
11:05 - and in
11:06 - here I'm just going to open up the
11:09 - detail seen under view there's our stack
11:14 - view and here's our title label so I'm
11:16 - gonna hold down control click and drag
11:19 - it over here I'm gonna call it the
11:21 - detail title label just to stay
11:24 - consistent let's do the same thing with
11:27 - the price hold down control click and
11:29 - drag let's call this detail price label
11:35 - okay so now we're ready to jump back
11:37 - into the standard editor let's go back
11:40 - to the detail view controller and in
11:42 - here because this product title can be
11:45 - nil we have to check if it actually
11:47 - exists so let's use conditional binding
11:49 - if let product let's just call that
11:53 - title equals product title we're going
11:57 - to set self dot detail title label dot
12:01 - text equals title okay and here we're
12:05 - gonna say if let product let's just call
12:10 - it description equals product
12:13 - description self dot detail description
12:17 - label dot text equals the description
12:21 - and then finally if let price equals
12:26 - product price self thought detail price
12:32 - label dot text equals price now I just
12:36 - want to point out that there's a
12:37 - shorthand way of doing this if you
12:39 - choose to so we can say instead of first
12:43 - assigning this to product title and then
12:46 - checking of product title has a value we
12:49 - can combine this checking and get rid of
12:53 - this constant altogether so let me show
12:55 - you what that looks like so if we just
12:57 - got rid of this line for a second so
13:00 - don't use this constant we can do
13:01 - something like this and by doing that
13:06 - you're basically doing it all in one
13:07 - line you're checking you're retrieving
13:09 - the title key from the dictionary and
13:12 - you're trying to retrieve that as a
13:13 - string and if it's successful then it's
13:17 - going to go into this statement it's
13:18 - gonna get signed into title
13:20 - go into the statement but if it happens
13:22 - that there is no key called title or if
13:25 - there is a key but then it can't convert
13:27 - it to a string it's gonna be nil and so
13:30 - it won't go into the statement at all so
13:32 - I just split it into two so it's a
13:34 - little easier to understand for you guys
13:35 - but when you get more familiar with
13:37 - things you can combine it into a single
13:39 - line like that now let's run it and see
13:41 - if that works okay so we've got our
13:47 - products in the table view let's tap on
13:49 - iPad pro and we've actually got a crash
13:52 - so those of you who have worked with
13:54 - segways and passing data back and forth
13:56 - you may probably know what's going on
13:58 - but this illustrates a really good point
14:00 - I want to take a moment out to explain
14:02 - so if we look at the console it says
14:04 - unexpectedly found nil while unwrapping
14:06 - an optional value so what's happening
14:08 - here is we know title contains a value
14:11 - because this statement if let title
14:14 - equals product title checks that the
14:16 - product title has a value and in fact if
14:19 - I hover over it says iPad pro right
14:20 - there so what is nil well this
14:23 - self-taught detailed title label is now
14:26 - but you may be asking how can that be
14:28 - because we've set the title label up
14:31 - here as an iboutlet that's connected to
14:33 - the title element in our storyboard well
14:37 - the problem is that at this point the
14:39 - view hasn't been loaded yet for the
14:41 - detailed view controller so this
14:43 - configure View method is called by this
14:46 - did set block of code when the detail
14:49 - item is set and that detail item is set
14:53 - in this prepare for segue method when we
14:55 - do this C we're setting the object into
14:57 - detail item which triggers the did set
15:01 - which calls the configure view and then
15:04 - it's trying to set some data to our
15:06 - labels but the view hasn't loaded for
15:08 - the detail view controller yet and so we
15:11 - can't actually access that label element
15:13 - so that's why if you look farther down
15:15 - in the file in the viewdidload method of
15:18 - the detail view controller it calls self
15:21 - dot configure view again because at this
15:23 - point the view has loaded and we can
15:25 - work with the labels so that is actually
15:28 - when we want to set up all of our labels
15:32 - well we can
15:34 - just delete this line or commented it
15:35 - out that would be an easy fix so now
15:38 - when the detail item gets set in the
15:42 - prepare for segue method that's not
15:44 - going to trigger the configure view
15:47 - method however the reason why this
15:49 - statement is here is because we want to
15:52 - detect whenever the detail item changes
15:54 - we want to change these labels and if
15:56 - you get rid of that that's not gonna
15:58 - happen so instead what we can do is here
16:02 - in our statement when we assign the
16:04 - title into the text property we can
16:06 - actually put a question mark here to do
16:09 - something called optional chaining and
16:11 - what that's going to do for us is that
16:13 - if the title label is no it's going to
16:17 - safely ignore this part and it's not
16:19 - gonna try to set the title into the text
16:21 - property of a nil value so we're gonna
16:24 - go ahead and add the question mark here
16:26 - and here as well so now in the prepare
16:31 - for segue method when we set the detail
16:33 - item and it's gonna call configure view
16:35 - and it's gonna try to do this stuff it's
16:37 - gonna reach this point and it's gonna
16:38 - recognize that that iboutlet property
16:41 - still nil and it's not gonna try to set
16:43 - the text property of it but then when
16:45 - the view has loaded configure view is
16:48 - called once again and then this time
16:50 - because the IB outlets have a reference
16:53 - to those labels it's gonna set the text
16:56 - property for it so now let's run it
16:59 - again and you're going to see if I click
17:02 - on the iPad pro we can see the title the
17:05 - price isn't showing up so we'll look at
17:07 - that in a second and we can see the
17:10 - description is here so let's go back
17:12 - into Xcode right now and let's set a
17:15 - breakpoint and right here and let's run
17:19 - it again and then we can use the console
17:22 - so I'm going to click I pad Pro and
17:24 - we're going to use the console just to
17:26 - double check what is getting returned
17:28 - here so let's say Pio detail price and
17:35 - it looks like we are getting the price
17:39 - but it's contained in some structure so
17:42 - detail price is returning an optional
17:45 - type and option
17:47 - dictionary with a key that says data
17:50 - with another key formatted and with a
17:53 - couple of other key value pairs like
17:56 - this with tax without tax so the tax
17:58 - itself here is 200 so you know what we
18:01 - can actually drill into it and we can
18:05 - retrieve data formatted without tax
18:10 - let's say so instead okay what we can do
18:13 - here instead of just popping in a key
18:16 - there to get the value we can use a
18:18 - method of the dictionary called value
18:23 - for key path it returns the value for
18:28 - the derived property identified by a
18:30 - given key path okay so what we're going
18:33 - to specify here is price and then you
18:36 - can use the dot notation to drill down
18:39 - and specify a path so before we just
18:42 - have to keep price so this time we're
18:44 - gonna do price dot data dot formatted
18:49 - dot without tax oh there's a underscore
18:54 - there so be careful let's do that and
18:58 - let's get rid of this breakpoint and
19:01 - let's run it and I'm gonna click on iPad
19:06 - pro and sure enough we've got the price
19:09 - for this product in the next lesson
19:12 - we're going to implement an Add to Cart
19:14 - button and then in the lesson after that
19:16 - we're going to do checkout so we're near
19:18 - the finish line thanks for watching
19:20 - please share it if you enjoyed it and
19:21 - please subscribe to get notified when
19:24 - there are new videos have a great
19:25 - weekend I'll see you guys on Monday bye
19:27 - for now
19:30 - you