00:00 - [Music]
00:08 - hey guys in this episode we're going to
00:10 - learn about for loops and objective c
00:13 - which are really going to help you when
00:14 - you need to execute similar code or the
00:17 - same code over and over again for a
00:18 - number of times alright so let's see how
00:20 - you do it
00:22 - you can download this project in the
00:24 - link in the description below or you can
00:26 - click on the link
00:28 - in the annotation on the screen and in
00:30 - this video we're going to talk about the
00:32 - for loop sometimes when you're writing
00:34 - code you have a repetitive task or
00:36 - you're calling a method a couple of
00:37 - times or you're adding something up and
00:39 - in this case that's what loops are used
00:41 - for so there's something called a for
00:43 - loop which lets you specify statements
00:46 - which you can loop predetermined number
00:48 - of times let me show you
00:50 - there's three parts to it the
00:51 - initialization the condition in the
00:54 - increment in initialization what you're
00:56 - going to do is to declare a variable
00:58 - that you're going to use to keep track
01:00 - of how many times your loop is going for
01:02 - so
01:06 - i'm going to use an integer called i and
01:09 - i'm going to initialize that to zero and
01:11 - then in the condition this is where i
01:13 - specify the condition for which the loop
01:16 - will terminate so i'm going to say
01:19 - terminate my loop when i is greater than
01:23 - 10. so in other words this would read
01:25 - keep looping if i is less than 10. in
01:28 - the increment after every single loop
01:31 - how much would i increment i by
01:34 - and plus plus is kind of a shorthand
01:36 - notation of writing something like i
01:39 - equals i plus one which just increments
01:42 - i by one every single time by every
01:44 - single loop
01:46 - so let's say for example i have an
01:48 - integer up here
01:51 - called age and let me initialize that to
01:53 - zero and then in my for loop let me say
01:56 - age is well let me just go h plus plus
02:00 - so after this for loop runs what would
02:02 - you expect age to be well it would be 10
02:04 - because in the first loop i is zero and
02:07 - then in the second loop i is one and it
02:09 - goes all the way up until the ninth loop
02:11 - when i is nine and then on the tenth
02:14 - loop i would be ten and
02:17 - this condition would be false and then
02:18 - it would break out of the loop so this
02:20 - is a way for you to be able to write any
02:22 - sorts of statements in here
02:25 - to repeat so you wouldn't have to write
02:27 - it out a whole bunch of times now the
02:29 - other thing that makes for loops even
02:30 - more useful is the fact that you can
02:33 - actually use the variable i inside the
02:36 - loop to do something so let me say
02:39 - age equals age plus i and let me
02:42 - actually quickly show you another way to
02:44 - write this an equivalent way to write
02:46 - this would be
02:48 - age plus equals i
02:50 - and these two statements are equivalent
02:52 - let me just comment this one out so
02:54 - what's happening here this statement is
02:57 - saying for every loop add whatever value
03:00 - i is to the age so at the end of this
03:04 - loop well in the first loop it adds zero
03:06 - to zero and the second loop would add
03:08 - one to zero and then third loop at that
03:11 - two to one and then three two three i'm
03:13 - trying to
03:14 - do addition on the fly in my head uh but
03:16 - basically you kind of get the idea for
03:18 - loops can also be used another way and i
03:21 - know i haven't showed you guys what
03:22 - arrays are yet but an array is simply
03:25 - think of it as a container of objects so
03:28 - if i say something like um let's say
03:32 - container of names and let's assume that
03:35 - this array
03:36 - let me just write
03:38 - name it this way let's assume that this
03:40 - array contains 10 different strings and
03:43 - each string represents
03:45 - represents a name another way i can use
03:47 - for loops is something like this
03:49 - so
03:50 - again i initialize my i is equal to zero
03:54 - at the beginning and then my condition
03:56 - would be
04:02 - so what i'm doing here is i'm saying
04:05 - i begins at 0 and then i want to loop as
04:08 - many times as there are items in this
04:10 - array so that's what this count property
04:12 - means it gives me the amount of items in
04:15 - the array of names and then in here i
04:17 - can say something like
04:21 - my name
04:22 - is equal to
04:25 - the array of names
04:27 - at index i so remember i told you the
04:30 - array contains 10 different names this
04:33 - method object at index returns basically
04:36 - the name at a position that i pass in so
04:39 - in the first loop i would be passing in
04:40 - 0 which would give me the first name in
04:43 - the second loop it would give me
04:45 - the name at position the next position
04:47 - and so on and so forth now another way
04:50 - to write this
04:51 - is i can
04:52 - you know if i know that this array
04:54 - contains strings
04:57 - i can go like this
05:03 - and in this for loop this would be
05:05 - equivalent to the one up here and in
05:07 - this for loop it's basically saying for
05:09 - each name or for each ns string in this
05:13 - array assign it to a variable name and i
05:15 - can do stuff with name in here
05:19 - so now you can see how useful for loops
05:21 - are in objective c
05:23 - for your fact of the day did you know
05:24 - that apple once made its own video game
05:27 - system
05:28 - neither did i check it out in the link
05:30 - below
05:31 - [Music]
05:45 - you