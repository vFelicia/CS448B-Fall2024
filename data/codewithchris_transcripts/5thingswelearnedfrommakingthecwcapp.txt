00:00 - Creating an API is a very fulfilling
00:02 - process, and as much as we want to finish
building an API and show it to the road,
00:06 - the journey is or something
that needs to be equally recognized.
00:09 - Building apps on your own is already
a challenge in and of itself.
00:13 - So when you think about building one
00:15 - with a team, you think
that it will be a lot easier.
00:17 - Right?
Well, personally, it depends on the scale
00:20 - of the API or the project
that you want to build.
00:22 - In our case, since we were building
the code disgrace API,
00:25 - we had to pull in some help to make
this a fun and productive ride.
00:29 - So how is our team's experience
building an app from scratch?
00:32 - Let's find out.
00:33 - Hey, Code Grove.
00:35 - My name is JC, and I'm the digital
designer here at Cubit.
00:38 - Chris, the best place
to learn iOS development.
00:40 - If you're new here, this will be the first
00:42 - time you're seeing me on this channel,
much like everyone else.
00:44 - For today's topic,
we're going to take some time off actual
00:47 - developing and coding tutorials,
because in this video we'll talk about
00:50 - the top five things we've learned
from building the Cwt app.
00:53 - For those of you who didn't know we've
been building the CWC API for the past
00:57 - three to four months with the goal
of catering to a much wider audience,
01:01 - but most importantly, making our lessons
available offline and on the goal.
01:05 - So in that journey,
we learned a few things along the way,
01:07 - starting with point number one, never
bite off more than what you can chew.
01:11 - So just a little background.
01:12 - When developing this API,
we use a method called Scrum,
01:15 - which utilize the Agile framework,
meaning we'll be having sprints and stand
01:19 - up meetings during and in
between those sprints.
01:22 - So if you don't know
01:23 - thing about agile development,
this is kind of like what it looks like.
01:27 - And when we first started our work
on the CT API, we had lots of goals.
01:32 - When it came to the overall availability
and experience of the API,
01:36 - we planned on getting this out on iphones,
ipads, and even macOS until we realized
01:41 - that our team is only composed
of three developers and one designer.
01:44 - So we're leasing it to multiple platforms
01:46 - would take so much time and resources,
which we didn't have.
01:49 - And the funny thing about this is that we
01:51 - realized this at the end
of our second or third sprint.
01:54 - So during our first,
01:55 - we were really going big in terms
of our workload don't get were wrong.
01:59 - We knew that we had a small team,
02:01 - but the mistake was that we were too
ambitious when it came to what we needed
02:05 - to do that considering the limited
resources that we have.
02:08 - So by then I already finished
the design for the iphone.
02:11 - And so what's next on my list was
to scale those designs for the ipad.
02:15 - And then the team got into talking
and agreed that scaling something
02:19 - that isn't fully functional
can be super risky.
02:22 - So we decided to just focus on mobile
designs, refining them every week or every
02:27 - sprint, and adding features that would
definitely improve the experience
02:30 - of the API, and that's
like a top level scenario.
02:33 - A more specific example, I guess,
02:35 - would be that some of us would click on as
many tasks in one sprint,
02:38 - not considering that each task,
especially on the development side,
02:42 - would take up so much time than
what was initially anticipated.
02:45 - So at the end of every sprint,
we had to do a retrospective where we'll
02:49 - assess the things that we did well
in the obstacles we encountered along
02:53 - the way of those is taking big or plenty
of tasks that will just end up
02:57 - in the backlog or carried
over to the next sprint.
02:59 - And we learned that this is not practical
03:02 - because when the next sprint starts,
our focus will be on finishing the backlog
03:06 - of the previous sprint,
and a scheduled task of the current sprint
03:09 - will be pushed back
until we clear the backlog.
03:12 - So on the other hand,
if only we were conservative and realistic
03:15 - about our goals, then we'll be able
to finish all our plan tasks on time.
03:19 - So the takeaway is to never bite
off more than what you can chew.
03:23 - Set realistic goals by considering
the difficulty of every task you'll take.
03:28 - So even if you have fewer goals in a set
time period, if you complete them on time,
03:33 - then you'll still have the chance to take
on another task,
03:35 - which could lessen the amount of tasks
that you'll have to do in the next print.
03:39 - And that just creates a positive ripple
03:41 - effect on the subsequent sprints
or stages of the project.
03:44 - So learning number two is having a clear
03:47 - and definite assessment
of the deliverables.
03:49 - So this one's a little
related to number one.
03:52 - But the main difference is on the specific
tasks that each of us needed to complete.
03:56 - So in the process of building the API
03:58 - from scratch, we had to consider a very
big chunks of assignments that needed
04:02 - to be broken down into something that can
be achieved over a set period of time.
04:06 - So for example, if we were going to create
04:08 - an onboarding flow,
you can think of it as one task.
04:10 - If you just say,
create an onboarding flow.
04:12 - And I don't think that that's already
04:13 - a clear or definite list
of what we need to do.
04:16 - So when we assess or cut through that big
04:18 - chunk of task, we realize that there's
more to it than meets the eye.
04:22 - So under this general tasks like creating
04:24 - an onboarding flow, for example,
there are more specific tasks like
04:28 - implementing error States,
choosing the right illustrations as part
04:31 - of the welcome message keyboard placement,
like what would happen to the contents
04:36 - on the screen if the keyboard shows up
and so on and from there,
04:39 - it will be a lot easier for us
to decide who will take on which item.
04:43 - So for me.
04:44 - Of course, I was responsible for all
the design related work,
04:47 - but since the API will also have other
views and functionalities that we'll need
04:51 - to click on, it was important to assign
who's the developer that's going to work
04:55 - on this functionality, who will work
on another functionality, and so on.
04:58 - And so the takeaway is that by having
05:01 - a clear outline or assessment of your
deliverables, by breaking down milestones
05:06 - into smaller pieces,
we were able to plan out and focus
05:10 - on immediate task and progressively
finish goals towards that milestone.
05:15 - So learning number three is to master
05:17 - the fundamentals, but never
forget the little details.
05:20 - The fundamentals are simply the base yet
05:23 - most necessary things
that need to be worked on.
05:25 - Beat on the soft side or
technical side of things.
05:28 - So on the soft side, you have,
05:30 - for example, teamwork communication,
managing task, and so on.
05:34 - While on the technical side are
05:36 - the efforts on prioritizing basic
functionalities and making the app usable.
05:41 - However, because what we do here at code
05:43 - with Chris is primarily
focused on education.
05:46 - We felt that it's equally important
to invest in interactions,
05:51 - animations, really good visuals to make
a delightful learning experience.
05:56 - We all know that education can be pretty
monotonous, but with codes Chris,
06:00 - especially with the API that we
want to make it shouldn't be.
06:03 - So our lessons are already beginner,
friendly with good pacing,
06:07 - and we want the API to reflect or
complement that kind of value.
06:10 - We don't want it to be just another
learning API that you can use.
06:13 - We want it to be the API that you will
use if you want to learn iOS development.
06:18 - And so we really took the extra time
06:20 - to pay attention to a little bit
of interaction design, just a little
06:24 - choosing right illustration,
colors and so on.
06:27 - So we did this in order to cater to our
06:30 - goal of creating an API
that's delightful to use.
06:33 - So I just want to live this off
with a code from the legendary designer
06:36 - Charles Eames that the details are
not just the details make the design.
06:41 - So learning number four is be
transparent about your load.
06:46 - Vince, Chris and I also work on some areas
outside the CWC API,
06:50 - like there's the content creation
in the course side of things.
06:53 - That meant that our time wasn't 100%
dedicated to making the CWC API itself.
06:58 - And since we were working in a team, it
was really important that other team
07:03 - members knew what our actual workload
outside the CWC API project was,
07:08 - because that way it will also give them
an idea of how much work to expect from us
07:12 - in a day or in a week,
because if we had the same amount of CC
07:17 - app task as anyone else,
chances are they will be affected by other
07:22 - tasks outside the CWC API,
which are in higher in priority.
07:26 - And if the rest of the team were expecting
to finish these tasks in a given time
07:30 - frame, and it didn't because of other
factors that we weren't able to disclose.
07:34 - Then that could snowball into a really big
07:37 - problem that could have been avoided if we
had been transparent in the first place.
07:42 - Well, fortunately,
this was one thing that we really did
07:45 - because we were aware of our
limited at resources.
07:48 - So we had to be transparent about
expectations and other related stuff.
07:53 - And in your case,
07:54 - if ever you're going to build an API with
a team, it's not just about the workload.
07:57 - You should also be transparent about some
07:59 - personal factors that will affect
the work that you're doing.
08:02 - A good example for this is Jesse or Scrum
08:04 - master had a problem or injury with this
risk, and so we had to take into account
08:08 - that he won't be able to work as
intensively because of that injury.
08:12 - So we had to diversify the load to other
developers and adjust some deadlines
08:16 - to minimize any delay or problems
that could occur at the end of the day.
08:21 - Transparency are really important and will
08:23 - be really handy in whatever
is that you're doing.
08:25 - So last but not the least is
that perfection is the enemy of done.
08:29 - So a lot of tech and creative companies
always say that perfection is the enemy
08:33 - of done, because in a setting like this,
API development or product development
08:38 - like Striving, perfection
is really inefficient.
08:40 - So when you think about it, in my case,
08:42 - if I kept on looking for mistakes
and multiple feedback from the team
08:46 - regarding the designs, the API is
never going to see the light of day.
08:49 - It's just going to get stuck in an endless
08:52 - round of revisions until every
team member is satisfied.
08:55 - So why?
Because everyone is trying to get every
08:58 - inch of the API presuming that we don't
have to do or touch on these things again.
09:02 - And this is inefficient and ineffective
in a lot of ways, because API development
09:06 - or software development
is an Iterative process.
09:09 - It's always been and it always will be.
09:11 - So it's totally fine if it's not the best
looking API in the first release was
09:15 - important is to nail the foundations,
like making the API usable,
09:18 - establishing a clear navigation,
all these sort of things.
09:21 - It's also very counterproductive or
for planning and development to take
09:25 - months when the end result will
still require work anyway.
09:29 - You know, it's going to be really
09:31 - unfortunate if it did take us a year
to make the API perfect in its first
09:35 - release and then work
on updating it a week later.
09:38 - So it's never really about getting it
09:40 - perfect, but it's about making it good
enough finishing and releasing on time
09:44 - and making meaningful improvements
from there,
09:46 - because the journey to perfection
is going to be a really long one.
09:49 - All right.
So those are the most important things
09:51 - that we learned when building
the CC API as of filming.
09:55 - The app is still currently in the works.
09:57 - So if you want to stay updated about this
development, especially it's released
10:00 - and make sure to like this video
and subscribe to our weekly newsletter.
10:04 - Or better yet, to our YouTube channel.
10:06 - And if this video sparked your interest
10:07 - in building your own app,
then you're in luck.
10:10 - Because our free 14 Day Beginner Challenge
will be able to help you with just that.
10:13 - As always, thank you so much for watching
and we'll see you in the next video.