00:00 - hey code crew in the last lesson you
00:02 - learned how to create retrieve
00:03 - update and delete data from your core
00:05 - data database in this lesson we're going
00:07 - to learn how to filter and sort our data
00:09 - so that you can retrieve
00:10 - only the results that you want from your
00:12 - core data database
00:13 - now filtering allows you to only return
00:15 - the results that match a specified
00:17 - criteria
00:18 - while sorting allows you to return your
00:20 - results in ascending or descending order
00:22 - based on an attribute that you specify
00:25 - now if you've missed the previous few
00:26 - lessons i highly recommend that you go
00:28 - and check those out first
00:30 - one more thing before we begin i want to
00:32 - mention that these core data lessons are
00:34 - actually part of the database course in
00:36 - my cwc plus program
00:38 - inside cwc plus you'll be able to build
00:40 - this travel app that uses core data for
00:43 - the list of locations
00:44 - as well as personal notes for each
00:46 - location all right let's jump into xcode
00:49 - so here we have the xcode project that
00:51 - we worked on in the last lesson
00:53 - and just as a reminder in this fetch
00:55 - people method
00:56 - we were retrieving all of the person
00:59 - objects from our core data store
01:00 - through the managed object context if
01:03 - you remember
01:04 - we don't interact with the core data
01:06 - persistent store directly
01:07 - right we create retrieve update and
01:09 - delete data through the managed object
01:11 - context
01:12 - so that's what this variable refers to
01:15 - context dot
01:16 - fetch and that fetch method is how we
01:18 - retrieve data
01:19 - from the core data store now you have to
01:22 - pass in a fetch request
01:23 - into that fetch method and this fetch
01:26 - request
01:26 - actually indicates what you want to
01:28 - retrieve you know how it's sorted what
01:30 - sort of criteria
01:31 - you have for retrieving the data in this
01:33 - particular case
01:34 - we wanted to fetch all person objects
01:37 - and so
01:38 - we just passed in a fetch request as is
01:41 - now where did this fetch request come
01:43 - from
01:43 - if you take a look we're calling a class
01:46 - method called
01:47 - fetch request on the person class so
01:50 - let's
01:50 - go into that and take a look at what it
01:52 - is let's go into this
01:54 - person class here as you can see here
01:56 - this is the fetch request
01:58 - class method and what is returned from
02:00 - this method
02:01 - is a new ns fetch request object
02:06 - and the data type of the data returned
02:09 - is set to
02:10 - the person right and
02:14 - that is what gets returned right
02:17 - and so it's essentially going to fetch
02:19 - all person objects
02:21 - in order to filter and sort we actually
02:23 - have to set some properties
02:24 - on this fetch request before we pass it
02:26 - into this fetch method
02:28 - so why don't we instead of
02:32 - putting in the fetch request here
02:35 - let's declare variable or constant up
02:37 - here
02:40 - and move this line of code let's
02:44 - have the fetch request up here right and
02:47 - then we're going to set
02:49 - the filtering and sorting
02:52 - on the request and then we're going to
02:56 - pass the request
02:57 - into the fetch method now
03:01 - you're going to get an xcode error as
03:03 - you can see here ambiguous use of fetch
03:04 - request so you
03:05 - actually have to indicate the type that
03:09 - this is an nsfetch request
03:11 - and the data type that it's going to
03:12 - return is
03:14 - person so now that we have a reference
03:16 - to the request up here
03:18 - let's take a look at how we can do
03:20 - filtering first
03:22 - i'm going to run the project so that we
03:23 - can see what data we're working with
03:25 - and so we can decide what data we want
03:28 - to filter for
03:31 - so as you can see we have four names
03:32 - here i am going to just
03:34 - do a simple uh filtering for
03:38 - only person objects with the name ted
03:40 - all right so
03:41 - let's go ahead and stop the project
03:45 - now to filter based on some criteria we
03:47 - use this class called
03:48 - ns predicate which lets you define
03:51 - different sorts of
03:52 - conditions in a
03:55 - very easy to understand sort of text
03:57 - manner you'll see right here
03:59 - so let i'm just going to call it
04:03 - i'm just going to call it pred equals ns
04:06 - predicate
04:08 - and we can define we can use this one
04:12 - or we can define a format and pass in
04:14 - the arguments
04:15 - so because we want to define criteria
04:17 - based on the name
04:18 - property of the person class
04:21 - let's take a look here so you see it's
04:23 - got a name property
04:25 - that's where you saw the ted the joe the
04:26 - abbey the mic
04:28 - so i'm gonna specify this string
04:32 - where i'm gonna say the name property
04:35 - contains
04:38 - ted like that and you have to put this
04:42 - criteria here in single quotes
04:49 - and then we have to add this predicate
04:52 - to a property on the request
04:54 - so the fetch request actually has a
04:56 - property called predicate where you can
04:58 - pass in
05:00 - the criteria that we just defined and
05:02 - just like that if i run it now it's
05:04 - going to only return
05:06 - person objects where the name contains
05:08 - ted and i will show you a couple of
05:10 - different examples of
05:11 - sort of what you can filter on in a
05:13 - second and how you can
05:15 - combine different things and use
05:16 - different operators here
05:19 - so let's run the project to quickly see
05:21 - what we have
05:23 - so as you can see here it's only got the
05:26 - person
05:26 - ted now now you saw earlier how i was
05:29 - configuring this format
05:32 - and there was a second parameter because
05:35 - typically
05:36 - the thing that you want to filter on may
05:38 - be dynamic right
05:39 - this you might not know this beforehand
05:42 - so you can't actually code it in like i
05:44 - have now
05:45 - so in that case what you do is you put
05:47 - in a sort of wild card
05:49 - character and that is defined by
05:51 - percentage at
05:53 - and then you can do comma here and then
05:55 - you can specify whatever variable
05:57 - contains the thing that you want to
05:58 - filter on now i don't actually have a
06:00 - variable
06:01 - to indicate what i want to filter on so
06:04 - here
06:05 - i can just put an example as a string
06:08 - but if you had something that you wanted
06:10 - to filter on you can
06:12 - specify a wild card in your criteria
06:15 - and then indicate that dynamic variable
06:18 - here
06:19 - now let's take a quick look at some
06:20 - other ways you can define your criteria
06:22 - using
06:23 - ns predicate so here i have the apple
06:26 - documentation for the ns predicate class
06:29 - there are some common examples i'll go
06:31 - through with you
06:32 - in the overview but there's also a
06:34 - detailed guide
06:35 - that you can go through called the
06:37 - predicate programming guide i'll provide
06:39 - all these links below the video
06:41 - this guide if you want to really dive
06:42 - deep into how
06:44 - you can express your queries using ns
06:46 - predicate definitely take a look
06:48 - now some of the more common examples are
06:51 - contains which is the keyword we just
06:53 - used
06:53 - there's also equality with double equal
06:57 - signs and you can use
06:58 - like here's contains you can ignore
07:01 - case and diacritics which are the
07:03 - accents on top of letters
07:05 - if you want to ignore both of them you
07:06 - just put a angle bracket and
07:09 - sorry square brackets and you put cd to
07:11 - ignore both or just c
07:12 - or just d to ignore these respective
07:15 - things
07:16 - you can also combine different
07:17 - conditions together just like an if
07:19 - statement using or and
07:21 - and and there are different keywords to
07:22 - express time and you can use
07:24 - math inequalities like less than or
07:27 - greater than and
07:28 - so on and so forth so definitely give
07:30 - these things a look if you
07:32 - are trying to express some sort of query
07:34 - and you're not finding the right way to
07:36 - write it
07:37 - i'm sure a quick browse through this
07:39 - predicate programming guide
07:41 - will give you some insight on how to
07:43 - express that query
07:44 - again links to these documents below the
07:46 - video all right now let's take a look at
07:48 - sorting now similar to how the ns
07:50 - predicate class is used to define your
07:52 - criteria
07:53 - for how to filter the ns sort descriptor
07:56 - class is used to indicate how your
07:58 - results should be sorted
08:00 - let's go ahead and create an ns sort
08:02 - descriptor
08:03 - and indicate that the names should be
08:05 - sorted in alphabetical order
08:07 - now let's take a look before before we
08:10 - do that
08:11 - let's just comment out this predicate
08:16 - and we're going to run the project again
08:18 - so that we can see
08:19 - how it's sorted naturally first
08:23 - so you can see here it's joe ted mike
08:25 - and abby and it's it's not an
08:26 - alphabetical
08:27 - so i'm going to want to sort it in
08:29 - ascending order
08:30 - so let's go ahead and create a new sort
08:33 - descriptor
08:36 - ns sort descriptor
08:39 - as you can see here again you sort by a
08:42 - particular attribute or
08:43 - in this case they call it the key and
08:46 - we're going to specify
08:47 - ascending is true or false so
08:50 - i'm going to sort by name and i'm going
08:52 - to say ascending is true
08:54 - and now just like with the predicate we
08:57 - have to
08:58 - set it to the request so request
09:02 - has a property called sort descriptors
09:04 - and if you take a look at the type
09:05 - it's actually an array of sort
09:07 - descriptors the reason for this is so
09:10 - that you can specify
09:10 - multiple levels of sorting for example a
09:14 - list of names is usually sorted by
09:16 - last name but however if two people have
09:18 - the same last name
09:19 - then their first name is used to
09:21 - determine who comes first
09:23 - so in this case since we only have one
09:25 - sort descriptor we still have to
09:27 - pass in an array however it can be an
09:30 - array of just our single
09:32 - sort descriptor like that
09:35 - all right now i'm going to run the
09:37 - project and you'll see that it's going
09:38 - to be sorted by name
09:39 - in ascending order as you can see it's
09:43 - abby joe mike and ted
09:45 - now before we end this lesson i want to
09:47 - point out a few more useful properties
09:49 - of the nsfetch request class that you
09:52 - can use to customize your fetch for
09:54 - example
09:55 - you can limit the number of objects that
09:57 - you return using fetch limit
09:59 - you can also start the result set from a
10:02 - certain
10:03 - offset such as this property right here
10:06 - and you can choose to only return
10:07 - specific properties
10:09 - of the objects and much much more so
10:12 - i'll link to this
10:13 - article or documentation below the video
10:17 - right so in this lesson you learn that
10:19 - you can customize certain properties
10:21 - of the fetch request before passing it
10:23 - into the fetch method
10:24 - of the managed object context
10:26 - specifically you can specify a predicate
10:29 - using the ns predicate class
10:31 - and you can specify sort descriptors
10:33 - using the
10:34 - ns sort descriptor class now i want to
10:37 - turn it over to you
10:38 - why are you learning how to use core
10:39 - data let me know by leaving a quick
10:41 - comment below
10:42 - and on your way down there if you like
10:43 - this video please give it a thumbs up
10:45 - and subscribe so you don't miss the next
10:47 - video alright i hope that was helpful in
10:49 - specifying how your objects get returned
10:51 - from core data
10:52 - in the next lesson i'll show you how to
10:53 - specify relationships between your
10:55 - different
10:56 - entities in your data model