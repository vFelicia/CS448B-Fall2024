00:01 - [Music]
00:05 - hey guys welcome to lesson 8 of how to
00:08 - build iPhone apps with no programming
00:10 - experience and in this lesson we're
00:12 - going to build upon the last and
00:14 - continue learning a couple more concepts
00:17 - of the Swift programming language we're
00:19 - going to look at subclassing and UI kit
00:24 - so let's start with the first
00:25 - subclassing in the last lesson we
00:27 - learned about classes and how you can
00:30 - create a class to describe a component
00:32 - in your app we also said that you can
00:34 - create multiple objects from one class
00:37 - and that's really convenient because
00:39 - let's say that we have two identical
00:40 - components in our app we can write a
00:43 - single class and create two objects from
00:45 - it to represent the two identical
00:48 - components well consider this scenario
00:50 - what if you need two components in your
00:53 - app and they're not identical but
00:55 - they're very similar let's say 90%
00:58 - similar in their behavior what we want
01:00 - them to do well you could write two
01:04 - separate classes one to represent each
01:06 - of those components where 90% of the
01:08 - code in those classes are the same but
01:11 - that's a waste of effort and furthermore
01:13 - it's generally a bad programming
01:15 - practice to have duplicate code
01:17 - everywhere because it makes code
01:19 - maintenance and debugging harder than it
01:21 - needs to
01:22 - be and this is where subclassing comes
01:24 - in it allows us to handle a scenario
01:26 - like this without having to duplicate
01:28 - 90% of that code code in other
01:31 - objectoriented programming languages
01:33 - there's a concept called inheritance and
01:36 - in Objective C and Swift it's known as
01:38 - subclassing so a subass is a class that
01:41 - inherits the properties and methods of
01:43 - another class so going back to our
01:45 - scenario with the two similar components
01:48 - we can write one class to describe the
01:50 - behavior of the first
01:52 - component then we can write a second
01:54 - class and declare it as a subass of the
01:58 - initial class that we wrote well when we
02:00 - do this the second class has all of the
02:02 - properties and the methods that we
02:04 - declared in the first class and you
02:06 - don't have to rewrite or redeclare all
02:08 - of those properties and methods instead
02:11 - we can just write code to represent a
02:15 - difference in the second class in this
02:18 - relationship this is the subass and this
02:21 - is the super class although sometimes I
02:24 - refer to the super class as the parent
02:26 - class now let's go back to our
02:28 - playground and see what a subass looks
02:30 - like so I'm going to start a new
02:32 - playground I've got xcode open
02:41 - here and call it subass playground and
02:43 - just save it on the
02:46 - desktop okay so in the last lesson we
02:49 - had a class called person so I'm just
02:51 - going to declare a person class
02:56 - again so if you practice it a couple of
02:59 - times you might might start to realize
03:01 - that um even without trying to memorize
03:04 - exactly how to declare a class you may
03:07 - remember how to do it so following along
03:09 - and trying it out on your own computer
03:12 - really goes a long way to help you
03:14 - remember things without having to
03:16 - memorize things so if you remember we
03:19 - need an init
03:22 - method and this time okay let me
03:26 - declare a property here
03:35 - and we'll give it an initial value of
03:38 - initial name okay and next I'm going to
03:40 - declare a method called walk and if you
03:43 - remember how to declare methods you used
03:45 - the funk keyword followed by the method
03:47 - name and then a set of round brackets
03:51 - and then a set of curly
03:55 - brackets inside here when this method is
03:58 - called I'm just going to print
04:03 - line I'm
04:06 - walking okay so let's test that out I'm
04:09 - going to declare a variable a and assign
04:13 - a new person object to it and then I'm
04:15 - going to
04:17 - set this object's name property to
04:23 - Alice and finally let's call the walk
04:26 - method and just see it print line
04:31 - here okay now we're going to demonstrate
04:33 - subclassing so I'm going to create
04:35 - another class which will subass
04:40 - person and I'm going to call this
04:43 - one
04:46 - superhuman and the way that you declare
04:49 - uh specify a subass is you use colon and
04:52 - then you put the name of the super
04:56 - class like that
04:59 - so just like that I've declared a class
05:03 - and it inherits all of the properties
05:05 - and methods of the person class I don't
05:08 - even need to specify an init method or
05:12 - initializer watch this so I can go VAR b
05:19 - equals superum to create a new
05:22 - superhuman object and assign it to the
05:25 - variable B and now I can go B do name
05:30 - and you can see that it registers it as
05:33 - initial name and I can go say B.W
05:38 - walk and you can say now you can see now
05:40 - that it printed it two
05:42 - times so just like that even though I
05:45 - don't have any of that stuff specified
05:48 - in here because superhuman is a subass
05:52 - of person it has all of person's methods
05:55 - and properties so this can be really
05:58 - handy
06:01 - next let's give superhuman some sort of
06:04 - additional functionality because
06:06 - otherwise we wouldn't need to create a
06:08 - subass right so in superhuman I'm going
06:11 - to add an additional method
06:14 - called
06:18 - fly and inside the fly method I'm going
06:22 - to print
06:23 - line I'm
06:26 - flying okay now I can go B do
06:30 - fly is available to
06:33 - me and now you can see that that method
06:36 - is called and I'm flying as printed
06:41 - out let's also add an additional
06:43 - property for good
06:45 - measure so up
06:48 - here I can
06:50 - add alter Eagle
06:53 - name
06:57 - String can just set that to Clark as an
07:00 - initial value I can see that when I go B
07:04 - dot you can see that the two properties
07:06 - are available alter ego name and fly are
07:10 - methods and properties inside the
07:12 - Superhuman class and name and walk are
07:15 - from the person class now if I went a
07:19 - DOT you can see it only has name and
07:23 - walk because a is a person
07:27 - object in this relation ship superhuman
07:31 - is the subass and person is the super
07:34 - class
07:36 - ironically okay let's consider another
07:39 - scenario in this case we have a subass
07:45 - superhuman that provides additional
07:47 - functionality but what if I wanted my
07:49 - subclass instead to override or provide
07:53 - a different functionality than the
07:56 - parent class for example what if I
08:00 - wanted when I call b. walk for the walk
08:04 - method to do something different than
08:06 - the walk method that was uh coded in the
08:10 - person class well you can actually do
08:12 - that so the way to do that is you can go
08:19 - override and then redeclare the exact
08:22 - same method as in the parent
08:25 - class so there's walk set of brackets
08:30 - and then set of curly brackets and this
08:33 - override keyword now when you call walk
08:37 - method on superhuman instead of
08:40 - executing this code in its parent class
08:43 - it executes this code it's superhumans
08:47 - implementation of the Walk method so in
08:50 - this one I'm going to say print
08:54 - line I'm
08:57 - walking really fast
09:02 - so let me erase these and demonstrate so
09:06 - now when I go
09:08 - b.
09:10 - walk you can see that this was triggered
09:15 - I'm walking really fast now if I didn't
09:18 - have this this method call would execute
09:22 - its parent classes
09:26 - functionality there's also a mechanism
09:29 - where you can do both so in this
09:32 - overridden method you can say you know
09:35 - print line I'm walking really fast but
09:37 - if you wanted to run the parent classes
09:39 - implementation you can go
09:44 - superwalk and super stands for the
09:46 - parent
09:49 - class so I can do
09:51 - that so now when you say B.W walk what
09:56 - happens is that it calls this override
10:00 - function this overridden walk method and
10:03 - it executes this line and then it calls
10:07 - the parent classes walk method and
10:09 - executes this code in
10:12 - here so there's some flexibility there
10:15 - and some powerful tools at your disposal
10:17 - while we're on the topic of overriding I
10:20 - want to mention one thing is that if you
10:22 - want to provide a custom initializer
10:24 - method for superhuman you would also
10:27 - need to override it
10:29 - and you would do it something like
10:32 - this
10:34 - override
10:38 - init and here you could provide your own
10:41 - custom initialization for superhuman
10:44 - however if you try to access uh your
10:47 - parent classes Properties or methods in
10:50 - this initializer method you're going to
10:52 - get an error so let's say super
10:56 - dotname equals
10:59 - super
11:01 - duper and you're going to get an error
11:03 - here that says self used before
11:08 - super. init call and it's basically
11:12 - complaining that you haven't called the
11:14 - parents initializer method yet so you
11:17 - can't use any of its properties or
11:19 - methods so all you have to do is
11:21 - actually just call super. init before
11:26 - you use any of the parent classes
11:27 - Properties or methods the reason is
11:30 - because the parents initializer method
11:33 - May initialize some values in the
11:36 - properties or it may set up some of the
11:37 - methods for use so before you use any of
11:40 - it you actually have to give the parent
11:42 - class a chance to initialize or set up
11:45 - anything it needs to set up now you
11:47 - actually know quite a bit about the
11:48 - Swift programming language and how it's
11:50 - structured and you know about the tools
11:53 - available to us to create these classes
11:55 - and describe our components in the apps
11:58 - well you'll be happy happy to know that
12:00 - Apple actually provides us with a whole
12:03 - slew of classes that are available to us
12:06 - to use to build our apps it makes
12:08 - building apps a lot easier because it
12:11 - lays out a lot of the groundwork that we
12:13 - need
12:14 - already that set of classes that Apple
12:17 - provides for us to lay out the
12:18 - groundwork for our app is called UI kit
12:22 - and UI stands for user interface so
12:25 - let's take a look at the documentation
12:27 - for it so if you go to to Google and
12:29 - typee in UI kit you'll get a whole bunch
12:31 - of results but it's not this one so
12:36 - don't be fooled by that uh scroll down
12:38 - until you see something from
12:40 - developer.apple.com this UI kit
12:43 - framework reference and the page should
12:45 - look like
12:47 - this so in your own time if you read
12:50 - this little bit of introduction and what
12:52 - sort of functions and features that UI
12:54 - kit provides you'll see that I kind of
12:57 - understated it when I said that provided
13:00 - a set of classes for us to use it's
13:02 - actually quite extensive and covers a
13:04 - lot of different functionality but we're
13:07 - going to scroll down until we reach this
13:09 - heading called
13:12 - classes along the left hand side are all
13:16 - of the classes that are in UI kit and on
13:19 - the right hand side are the descriptions
13:20 - for each of those classes however you'll
13:23 - notice that they're not all spaced
13:25 - evenly uh you'll notice that NS object
13:30 - is here as a root node and then
13:34 - underneath it are a couple more and
13:37 - underneath NS paragraph style is NS
13:41 - mutable paragraph style well actually NS
13:44 - mutable paragraph style is a subclass of
13:47 - NS paragraph style class which is a
13:50 - subclass of NS object NS object is
13:53 - actually at the very very top it's the
13:54 - root class for most and it says
13:57 - Objective C here but you can substitute
14:00 - that with swift because Swift uses UI
14:02 - kit as well so NS object is the root
14:04 - class of most Swift class hierarchies
14:07 - all of these other classes are
14:10 - subclasses of NS object directly or
14:13 - indirectly because sometimes it goes
14:15 - several layers deep if you scroll
14:18 - through this list of classes yourself
14:19 - you'll see how long it actually is
14:22 - there's a huge collection of classes
14:24 - here for us to use so what usually
14:26 - happens is that before we create our
14:29 - custom class if there's something
14:32 - similar already in UI kit what we want
14:34 - to do is we want to subass the UI kit
14:38 - class and then either using overriding
14:41 - or additional methods and properties
14:43 - code up our unique Behavior but we can
14:46 - use if we can use a UI kit as a uh as a
14:50 - parent class or a super class then we
14:53 - can inherit a lot of functionality
14:55 - without coding it
14:56 - ourselves and then the next lesson and
14:59 - I'll point out which ones and what they
15:00 - do we're going to be referring to this
15:03 - page a lot so make sure you bookmark it
15:06 - or have some way of getting back here
15:08 - it's also very useful because you can
15:10 - click into each of these classes and you
15:13 - can get some documentation on how to use
15:15 - this specific class and they have Swift
15:20 - or objective c or you can view both
15:26 - [Music]