00:05 - hey guys in this video we're gonna go
00:08 - through a recap of the practice that we
00:11 - did in the last video which was the
00:12 - storyboard and the map demo so let's
00:15 - start off by going through the app flow
00:17 - of the multi-view application it was the
00:20 - first multi-view app that we did and if
00:22 - you can remember in the beginning we
00:23 - embedded the initial view into a
00:25 - navigation controller object and then
00:28 - from there we created a second view and
00:30 - attached the second view controller to
00:31 - manage that view and then we were able
00:33 - to switch back and forth between the two
00:35 - views so the app flow looks kind of like
00:37 - this the entry point is still the app
00:39 - delegate object but now the navigation
00:41 - controller is the object that manages
00:44 - the other two view controllers and then
00:46 - correspondingly the other two view
00:48 - controllers have their own views which
00:50 - are described by the storyboard and
00:51 - you're noticed in this diagram that I
00:54 - also have a location data controller
00:56 - object pointing to each view controller
00:58 - and that's because in each view
01:00 - controller we created an instance of
01:02 - that location data controller to get the
01:04 - location object from now in other
01:06 - circumstances if we wanted the changes
01:09 - made to the model from one view
01:11 - controller to be reflected when the user
01:13 - moves to the second view then we would
01:15 - actually share one location data
01:17 - controller object one model between the
01:20 - two view controllers and that way if the
01:22 - first view controller modifies some data
01:24 - in the model when the user moves to the
01:27 - second view controller that view
01:28 - controller will access the same model
01:30 - and it will access the data in that
01:32 - change the state and so you'll have the
01:33 - data persisted across views so let's
01:36 - talk about the navigation controller
01:38 - what is the navigation controller well
01:39 - it's a special UI view controller that
01:41 - manages other view controllers and
01:43 - there's a link in the description below
01:45 - to the official Apple documentation if
01:47 - you want to read more about it it's got
01:49 - a property called view controllers which
01:51 - acts kind of like a bucket for view
01:53 - controllers that you can add to or
01:55 - remove from and the navigation
01:57 - controller also provides methods to
01:59 - transition between any of the view
02:00 - controllers in the bucket so let's dive
02:03 - more into this view controller stack
02:05 - because in our app demo we essentially
02:07 - added two view controllers to that
02:10 - navigation stack actually behaves kind
02:13 - of like a stack of papers when view
02:14 - controllers are added to the stack
02:16 - they're added to the top of the stack
02:18 - the view controller at the very top of
02:20 - the stack is the view controller whose
02:22 - view is visible to the user so what's a
02:24 - push transition if you remember when we
02:26 - hooked up the button from the first view
02:28 - to transition to the second view in the
02:30 - storyboard we chose that transition as a
02:32 - push type of transition and here's
02:34 - what's happening in this first diagram
02:36 - we have a navigation controller object
02:38 - that only has one view controller in its
02:40 - stack and that is our initial view the
02:43 - one with the coffee beans image and the
02:45 - address label and then when the user
02:47 - clicks the button the second view
02:49 - controller the one with the map view
02:50 - gets added to the top of the stack so
02:52 - now the second view controller is the
02:54 - one that the user sees and then when the
02:56 - user hits the back button the topmost
02:58 - view controller gets removed which is
03:00 - the map view one and once again the user
03:02 - is looking at the first view controller
03:03 - so that's a push transition we're just
03:06 - pushing view controllers on top of the
03:08 - stack so what's a modal transition that
03:10 - was another option that you were able to
03:12 - select from when you're creating that
03:14 - connection between the first view
03:15 - controller to the second so that option
03:17 - is to present that second view
03:19 - controller as a modal of the first view
03:21 - controller
03:22 - you see view controllers have an ability
03:23 - to present other view controllers as a
03:25 - modal and it looks kind of like this in
03:27 - diagram form now in this case the first
03:30 - view controller has a reference the
03:31 - second view controller and it controls
03:33 - whether the second view camera is
03:35 - displayed or not in the push case the
03:37 - navigation controller has a reference to
03:39 - both view controllers so it's the parent
03:42 - of both of them and and it controls the
03:44 - transition between the two if you want
03:46 - to read more about using modal view
03:48 - controllers and presenting view
03:49 - controllers from other view controllers
03:51 - you can do so in a link I've provided
03:54 - below in the description to the Apple
03:56 - documentation another thing that we did
03:59 - in this last practice was to add the map
04:02 - kit framework and the reason for this I
04:04 - explained in the last video I actually
04:05 - wanted to get into the in this one
04:07 - instead but most of the time apps don't
04:09 - need access to the full feature set so
04:11 - by default Xcode projects only include
04:14 - some basic frameworks that are common to
04:16 - all apps and you'll notice that the UI
04:18 - kit framework is one of them you'll
04:20 - notice it at the top of a lot of the
04:21 - classes that you
04:23 - you use especially like viewcontroller
04:25 - class for example and you like it
04:28 - provides all of the elements that you've
04:29 - been using so far like the labels the
04:32 - image views and so on and so forth but
04:34 - if you wanted to use stuff like GPS and
04:37 - the seller ometer and like map kits and
04:40 - other even like social networking
04:41 - frameworks you have to add them into
04:43 - your Xcode project manually by only
04:46 - including what you need you save memory
04:48 - and space so that your app is lean and
04:50 - it's fast as possible okay something
04:53 - else that you did in the last demo was
04:55 - sub classing and overriding methods so
04:57 - an object-oriented program which is the
04:59 - form of programming you're learning
05:01 - right now there's a concept of class
05:03 - inheritance and this means that when we
05:05 - create a class we can make it a subclass
05:08 - of another class and you'll notice this
05:10 - because when we create new classes in up
05:12 - in Xcode and we choose Objective C class
05:14 - we are always provided with a box that
05:17 - put in the name of the class and on the
05:19 - other box to put in the subclass so the
05:21 - best way to explain how class
05:23 - inheritance works is using an example
05:25 - let's say we have a class called car
05:28 - which contains a method called Drive and
05:30 - a property called transmission type all
05:32 - cars have a transmission type so we're
05:34 - using a property to keep track of it and
05:36 - furthermore all cars should be able to
05:38 - be driven so we have a drive method of
05:40 - our core class now what if we wanted to
05:42 - create another class called BMW car we
05:45 - could create it as a standalone class
05:47 - and then declare a drive method inside
05:49 - of that class and declare transmission
05:52 - property of the BMW car class as well
05:54 - but instead of that we could actually
05:56 - make the BMW car class as a subclass of
05:59 - the car class so in this arrangement the
06:01 - car class is the parent and the BMW car
06:05 - class is the child and this allows the
06:07 - BMW car class to inherit all of the
06:10 - properties and methods of the parent car
06:12 - class so you don't have to rewrite it so
06:14 - when another object caused the drive
06:16 - method of a BMW car object it'll
06:19 - actually be calling the drive method
06:21 - defined in the parent car class and
06:23 - likewise BMW car has the transmission
06:26 - type property simply by subclass and car
06:28 - it doesn't need to read eclair it in its
06:30 - own class and later on we can actually
06:32 - have more subclasses of the car class
06:34 - all of which in
06:36 - the properties and the methods of the
06:38 - parent car class and so how do you tell
06:40 - what's the subclass of what well if you
06:42 - look in the header file of your classes
06:44 - you'll notice that let's say if we look
06:46 - at the viewcontroller class looking at
06:48 - the header file we see that the class
06:50 - name is viewcontroller but this colon
06:53 - followed by this class name that's what
06:56 - it's sub classing so uiviewcontroller
06:58 - is actually the parent class a view
07:01 - controller so view controller inherits
07:03 - all of the properties and methods of the
07:05 - UI view controller class and this is a
07:07 - class that's in UI kit and similarly if
07:10 - you look at the location data controller
07:12 - you'll notice that the class name is
07:15 - location data controller but it's
07:16 - actually a subclass of nsobject so if we
07:19 - go back to the view controller m the
07:22 - implementation file remember when you
07:24 - declare the view did appear method and
07:26 - Xcode predicted that that's what you
07:28 - wanted to type in well I told you that
07:30 - that was overriding a method so
07:32 - overriding methods is a way for a
07:34 - subclass to specify its own unique
07:37 - implementation of a method in its parent
07:39 - class so in the car example the car
07:42 - class has a drive method that the BMW
07:44 - car class inherits that means that if
07:46 - you create a BMW car object and you call
07:48 - drive on it then it's actually calling
07:51 - the implementation of the drive method
07:53 - in the parents class now what if you
07:55 - wanted your own unique BMW car drive
07:58 - method what you can do is you can
07:59 - override the drive method and the way
08:01 - you do that is you declare a drive
08:04 - method in the implementation file of BMW
08:07 - car and so now when you call drive on
08:09 - BMW car it actually uses the drive
08:12 - method of the BMW car class and not its
08:15 - parent car class now coming back to view
08:18 - controller dot M when we write view did
08:20 - appear like this
08:21 - we're actually overriding the view did
08:23 - appear method of the UI view controller
08:26 - class which is the parent a view
08:28 - controller and little did you know you
08:30 - are actually already practicing
08:32 - overriding methods the parent class the
08:34 - UI view controller it has a couple of
08:36 - methods like viewed and load as another
08:38 - over ridden method and you see the
08:40 - statement here super viewdidload well
08:42 - super is actually referring to its
08:44 - parents method so even though view
08:47 - controllers overriding the viewdidload
08:49 - method
08:50 - it's own implementation so I can type in
08:52 - something here do something unique do
08:57 - something unique to viewcontroller so
09:02 - even though I can write my own unique
09:04 - implementation below here this line says
09:07 - call the viewdidload method of the
09:09 - parent as well so not only should you do
09:11 - your own unique thing but also execute
09:14 - the code in the parents viewdidload
09:16 - method and that's this here in the view
09:19 - did appear we could actually also do
09:23 - that and then you pass in the animated
09:27 - variable that you got from right here so
09:29 - this way we preserve whatever was
09:32 - happening in the parents view did appear
09:34 - method and then we also add our own
09:36 - custom code that we want executed so
09:39 - while we're looking at these methods of
09:41 - a view controller we knock a little bit
09:43 - about the lifecycle of a view controller
09:45 - so you'll notice that when you create a
09:47 - new instance of the view controller this
09:50 - method gets triggered viewdidload let
09:52 - this point the view isn't actually
09:54 - visible to the user yet so in this
09:56 - method you can put it in code in here
09:58 - that is needed to set up the view
10:00 - controller now there's another method
10:01 - before view did appear gets called and
10:05 - that's view will appear and in this
10:09 - method it's triggered right before the
10:11 - view is visible to the user now it's a
10:13 - good place to put any code that relates
10:15 - to hiding or showing any UI elements and
10:17 - any code that needs to happen every time
10:20 - the view transitions from not being
10:22 - visible to being displayed remember that
10:24 - if your app has multiple views and
10:25 - you're switching back and forth view
10:27 - will appear in view did appear gets
10:29 - called every time this view controllers
10:32 - view gets displayed on the screen one
10:34 - thing to note that is if you put too
10:36 - much labor-intensive code in view will
10:39 - appear it might actually cause the the
10:41 - view to lag as it's being displayed to
10:43 - the user so if you did appear it gets
10:46 - called right after the view appears at
10:48 - this point the view is already visible
10:50 - to the user you can start any animations
10:52 - or any code that needs to execute after
10:54 - the user sees the view and then from
10:56 - there
10:57 - you have a couple other ones like view
10:59 - will disappear and you did disappear so
11:10 - similar to will appear and did appear
11:12 - these two methods get triggered as the
11:15 - view is going to leave and these methods
11:17 - can be used for resetting the state or
11:19 - doing animations as the user leaves the
11:20 - view or setting flags or you know doing
11:23 - any cleanup that sort of thing so in
11:25 - this video you learn about the
11:26 - navigation controller you learned about
11:28 - sub classing and overriding methods and
11:31 - if any of that seemed confusing watch
11:32 - the video again or read the notes in the
11:34 - description below or ask me any
11:36 - questions and this concludes the basics
11:39 - series and from here we're gonna move on
11:41 - to creating some functional applications
11:43 - that are more and more complex it's at
11:45 - this point you're well on your way to
11:47 - learning iOS and being able to build
11:49 - your own apps as always the notes are in
11:52 - the description below and if you found
11:53 - this lesson helpful please use the share
11:55 - buttons below the video to share this
11:57 - with any of your friends or family and
11:59 - share it on your social networks and
12:00 - just help me get the word out there
12:02 - thank you so much for watching and see
12:04 - you guys in the next video