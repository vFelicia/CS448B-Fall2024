00:00 - today we're going to talk about
00:01 - optionals this is a fairly confusing
00:04 - topic for beginners but it is so
00:05 - important because you're going to see it
00:06 - everywhere in your Xcode project to put
00:09 - it simply an optional is a variable that
00:12 - can be empty I don't know if you've
00:14 - noticed but whenever we declare any
00:16 - variable or constant we assign some data
00:19 - to it right away this is because with
00:21 - the data types that we've been using for
00:22 - our variables and constants it must be
00:25 - initialized right away and being
00:27 - initialized just means that the variable
00:29 - or constant is assigned to some sort of
00:31 - data you might think well that's perfect
00:33 - why would I want a variable or constant
00:35 - that is pointing to nothing let me give
00:38 - you a scenario let's say you're writing
00:40 - an employee name search function that
00:42 - takes an employee ID number and goes
00:44 - into your employee database and looks
00:46 - for that employee's name and returns it
00:49 - as a string that employee may or may not
00:52 - exist if it exists you return the
00:55 - employee name but if he or she does not
00:57 - exist then you need to be able to return
01:00 - nothing in Swift nothing is represented
01:04 - by the keyword nil so generally when you
01:07 - call that searching function and you get
01:09 - the result back you'll have to use an if
01:11 - statement and check of the result is nil
01:13 - before using it this will look something
01:15 - like this so let me ask you what data
01:19 - type is result in this case you might
01:22 - say string but unfortunately when you
01:25 - write your function and you declare the
01:27 - return type as string you cannot return
01:29 - nil that doesn't work because we need to
01:32 - be able to return nil which is nothing
01:35 - making the string type an optional
01:38 - string type can help us with this exact
01:40 - scenario a regular string type must
01:43 - contain a string value however an
01:45 - optional string type may contain a
01:48 - string value or it may contain nil this
01:52 - is perfect for the employee name search
01:54 - function we're writing looking back at
01:57 - our search function instead of returning
01:59 - a string data type let's see how we can
02:01 - return an optional string data type all
02:04 - you need to do is add a question mark to
02:07 - the data type like this
02:10 - it's almost like a question asking if
02:13 - this contains a string value or a nil so
02:16 - now when you get the result back from
02:18 - your employee name search function you
02:20 - can use the if statement and check the
02:22 - optional to see if it's nil or if it
02:25 - actually contains a string value
02:27 - representing the employees name let's
02:29 - say that the function did find a name
02:31 - and the result does contain a string
02:33 - representing that name you want to print
02:36 - it out to the console however you can't
02:39 - just print it out like this because it's
02:40 - an optional string it may contain nil
02:43 - and you can't print nil well how do you
02:46 - get the actual string value out of the
02:48 - optional then you have to do something
02:50 - called unwrapping the optional think of
02:53 - it this way the optional string type is
02:55 - like a Christmas gift box that may
02:58 - contain a string value or it may contain
03:01 - nil I don't know about you but I've
03:03 - never received Christmas gifts that
03:06 - contain nothing so maybe this is a bad
03:08 - example but it helps to think of that
03:11 - optional data type as a as a box that
03:14 - you have to open up to see what's inside
03:16 - when you're checking the optional to see
03:18 - if it's nil that's kind of like you're
03:20 - shaking that gift box and hearing that
03:22 - there's either something inside or
03:25 - nothing inside if you want to get to the
03:27 - actual contents inside the box you have
03:30 - to unwrap the gift box first in Swift
03:33 - you can unwrap the optional by using the
03:36 - exclamation mark so going back to our
03:38 - employee name search function if we want
03:41 - to print out the employee name then we
03:44 - have to unwrap the optional like this ok
03:47 - let's practice this in the playground so
03:50 - here I've got a brand new playground and
03:52 - by default it has this line of code here
03:55 - and far Str equals hello playground and
03:58 - this is just declaring a variable STR
04:00 - and assigning it hello playground Before
04:04 - we jump into the examples for optionals
04:07 - I want to remind you about something in
04:09 - regards to variable declarations and
04:11 - this is something we covered back in
04:13 - module 1 when I first introduced
04:15 - variables to you and that is the fact
04:17 - that variables actually have a datatype
04:19 - so when you declare STR if you want it
04:22 - to store string objects
04:23 - then you use : and you type in the data
04:26 - type after that so in this case string
04:29 - all right and then we can assign it
04:31 - string objects into that variable well
04:34 - you might ask how come it didn't have
04:36 - this part when we first created the
04:39 - playground and that is because if you
04:42 - don't explicitly declare the datatype
04:44 - for the variable it is going to look at
04:47 - the first piece of data you assign to it
04:48 - and it's going to take on that datatype
04:51 - so in this case we're assigning hello
04:53 - playground which is a string and so STR
04:57 - is going to know that it is a string
04:59 - type variable for example I cannot
05:01 - assign it an integer after that all
05:04 - right so I just wanted to remind you
05:07 - that you can explicitly declare the
05:09 - datatype when you're declaring the
05:10 - variable like that this is important
05:12 - because when we're declaring optionals
05:14 - we need to use this sort of notation
05:17 - okay so now we're going to jump into
05:19 - examples with optionals so this variable
05:23 - right holds string objects if I wanted
05:27 - it to store nil as well I can't so if I
05:30 - try to assign nil to it you know you're
05:34 - going to see an error pop up and the
05:36 - reason is because if we want if they're
05:38 - able to either store value or nil it has
05:42 - to be optional so the way we can change
05:45 - this declaration so that it is an
05:48 - optional string datatype we just add a
05:51 - question mark at the end of the data
05:53 - type like that and so now STR is an
05:56 - optional it can either store a string
05:58 - value or it could either contain nil and
06:01 - so you can see here this is now a valid
06:04 - code statement and I also want to point
06:07 - out that you can declare optionals for
06:08 - any sort of data type so I can say
06:10 - something like var my int is an optional
06:14 - integer so it may contain an integer or
06:17 - it may contain nil and furthermore if
06:20 - you had your own class let's just type
06:22 - one out really quickly that's the
06:25 - smallest class you can have
06:27 - let's say that I have a variable my car
06:30 - that stores a car object I can make that
06:33 - an optional as well so now my car this
06:37 - variable may either have a car object or
06:40 - it may actually just contain nil and so
06:44 - I just wanted to point out that you can
06:46 - have optionals of many different data
06:48 - types now we're going to move on to how
06:51 - to check an optional for nil before
06:54 - trying to use it because if you just try
06:57 - to use it straight off the bat you might
06:59 - get a crash if you're trying to perform
07:00 - an operation on a nil value so here
07:03 - we're going to check if an optional is
07:07 - nil before using it and there are two
07:10 - different ways to do it so one is just
07:15 - technique number one use if to check for
07:22 - a nil and this is just saying if STR is
07:27 - not equal to nil
07:29 - then do something with it so let's say I
07:32 - want to print it out but remember STR is
07:39 - an optional so it's kind of like a gift
07:41 - box if we want to get at the value
07:44 - inside of the gift box because we don't
07:46 - want to print a gift box out we want to
07:48 - print the actual string value inside the
07:50 - box right so we have to unwrap the box
07:53 - and to do that the syntax is using an
07:56 - exclamation mark so I go STR and then I
08:00 - put an exclamation mark at the end now
08:02 - the danger of just unwrapping that gift
08:05 - box and printing the value is that it
08:08 - could be nil inside that box and I can't
08:11 - perform an operation on nil but the safe
08:15 - thing is we've done this check write
08:17 - this if statement guarantees that that
08:20 - gift box is not nil inside that there is
08:23 - a string value alternatively if you want
08:26 - to check if it is nil you can go if STR
08:29 - is equal equals nil like that so you
08:34 - would want to do something maybe if STR
08:37 - is nil then you might want to in
08:39 - show it and error message to the user or
08:44 - something like that if if you didn't
08:46 - expect that to be new now I'm going to
08:49 - show you a second technique to check if
08:51 - optionals are no and this one is
08:54 - slightly more more advanced so if this
08:59 - technique makes sense to you then you
09:02 - can use that instead and this one is
09:04 - called optional binding and it still
09:11 - uses an if statement but it also
09:13 - combines a constant declaration into it
09:16 - at least that's what it looks like so
09:19 - you use if and then you start declaring
09:21 - a constant remember a constant uses the
09:24 - let keyword instead of the VAR keyword
09:25 - so if let let's say my string is equal
09:30 - to STR alright so what's happening here
09:35 - this if statement or optional binding
09:38 - statement is very similar to this guy up
09:41 - here
09:41 - it's basically checking if STR is nil or
09:44 - not
09:45 - so it takes STR you know this optional
09:48 - data type variable and it unwraps it and
09:51 - if it is nil then this is not true and
09:56 - it basically doesn't execute any code
09:58 - inside here however if there is a string
10:02 - value inside of that optional it's going
10:04 - to assign it into this constant my
10:06 - string and you can name this whatever
10:08 - you want so then I'll come inside this
10:11 - if statement and then when you print
10:13 - let's say you want to print it out you
10:15 - don't have to go like this you don't
10:17 - have to unwrap STR you can simply use my
10:20 - string because it already contains the
10:23 - value inside that optional so this is
10:25 - called optional binding and the benefit
10:28 - of it I guess it's just that it already
10:30 - unwraps it and puts the value into a
10:33 - constant for you to use whereas this
10:36 - technique up here you're simply checking
10:40 - that the optional is not nil so when you
10:42 - want to use the value you'll still have
10:44 - to unwrap that optional every single
10:46 - time you want to use it inside the safe
10:47 - statement so now you know how to declare
10:50 - optionals like this
10:52 - and you also know how to check for
10:54 - values inside the optional before
10:57 - actually using it now let's talk a
11:00 - little bit about why we even need
11:02 - optionals because in other programming
11:04 - languages that I've worked with before
11:07 - variables can store anything they can
11:09 - store nothing such as nil or they can
11:11 - store value and it was always up to the
11:13 - programmer to remember to check that
11:16 - there is something inside that variable
11:19 - before using it needless to say there
11:21 - were a lot of app crashes because there
11:23 - were times when you'd expect a value in
11:26 - a variable and then you just do
11:28 - something with a variable but then it
11:29 - turned out that there was nothing inside
11:31 - and so your app would crash trying to do
11:34 - perform a function or a method on a
11:36 - variable that contained nothing in Swift
11:39 - here they introduced optionals to help
11:41 - this sort of thing and it basically
11:44 - forces you as a programmer to explicitly
11:47 - declare a variable that can be nil or
11:49 - not so it forces you as a programmer to
11:52 - explicitly create variables that can
11:55 - contain nil and also Xcode can warn you
11:58 - if you're just using an optional value
12:01 - without checking it it can it can see
12:03 - that in your code that you're not being
12:04 - safe and you're not checking it
12:06 - beforehand so it can give you those
12:07 - sorts of warnings and so it's a little
12:10 - bit of I guess a safety mechanism to
12:12 - prevent unexpected behavior in crashes
12:15 - ok so having said that there actually is
12:19 - a way for you to declare a variable that
12:22 - is not an optional but it can contain
12:24 - nil as well okay and I'll tell you how
12:28 - to do that maybe down here declaring
12:33 - variables that can be nil without being
12:39 - in optional so here we can declare let's
12:46 - call it STR 2 and basically it's going
12:52 - to be a string datatype and you know how
12:55 - you would normally put a question mark
12:57 - there to declare that it's an optional
12:59 - so that it can either contain string or
13:02 - nil well instead of a question mark we
13:04 - use an exclamation mark
13:06 - so when we do that this variable you can
13:10 - assign nil to it and in fact it's nil up
13:13 - here because we haven't assign done
13:14 - anything to it actually let's assign
13:17 - hello playground right so you can see
13:22 - down here that I can assign nil to it
13:24 - and then when I want to do something
13:27 - with it I don't have to unwrap it so I
13:30 - can just simply print something like
13:33 - that I don't have to unwrap it because
13:36 - it's not an optional so when you do
13:38 - something like this it's going to be up
13:40 - to you to check if that is nil before
13:45 - trying to do something to it Xcode won't
13:47 - be able to tell you or warn you that
13:49 - you're doing something unsafe putting
13:53 - this exclamation mark next to the data
13:55 - type like this is basically telling
13:58 - Xcode that you want to declare a
14:00 - variable that can contain either value
14:02 - or nil and you don't want to have to
14:04 - unwrap it to get at the value and you
14:06 - don't want Xcode to do any safety
14:07 - checking for you declaring variables of
14:10 - this type can be useful in cases where
14:12 - you are confident that it will always
14:15 - contain a value but you want it to start
14:18 - with nil for example and also in the
14:21 - iboutlet properties that you declare I
14:23 - don't know if you've noticed but there
14:24 - is an exclamation mark in the data type
14:27 - as well and the reason for that is
14:29 - because when you actually run your
14:31 - project those elements that you put in
14:33 - your storyboard they get turned into
14:35 - objects and they get assigned to that
14:37 - iboutlet property so when they're
14:39 - declared in the view controller like
14:41 - this they're not assigned any value you
14:44 - know and they're not exactly an optional
14:48 - they contain nil initially but when
14:51 - those elements in your storyboard turn
14:53 - into objects they get assigned to those
14:54 - iboutlet properties and therefore they
14:57 - won't be nil anymore okay so just to
15:00 - recap what I've shown you in this
15:01 - playground first of all is declaring
15:04 - Dell variables by adding a question mark
15:07 - next to the data type second we showed
15:10 - you how to check and optional if it
15:13 - contains nil or not there are two
15:15 - techniques to do that one is optional
15:17 - binding and one is just using
15:19 - this if statement to check if it's nil
15:22 - or not and the third thing is that you
15:25 - can actually declare variables that are
15:27 - not optional but still can contain nil
15:30 - all right in this lesson you learned
15:32 - about what optionals are and why they're
15:34 - needed you also learned that any data
15:36 - type can be an optional and you learn
15:39 - how to declare an optional using the
15:40 - question mark you also learned that you
15:43 - can unwrap the optional to find out if
15:45 - there's data in it or if it's nil using
15:48 - the exclamation mark you learn that you
15:50 - can use an if statement to check if an
15:52 - optional contains a value before
15:54 - attempting to use it lastly you learn
15:57 - that you can you also use the
15:58 - exclamation mark to declare a variable
16:00 - that can contain nil but is not an
16:03 - optional and also the dangers associated
16:05 - with doing that I highly recommend that
16:08 - you download the worksheet below and get
16:11 - some practice in with using optionals if
16:14 - you liked this video please subscribe to
16:16 - my channel by hitting the subscribe
16:17 - button below and if you don't want to
16:18 - miss a single video make sure you tap on
16:20 - that bell icon as well thanks for
16:22 - watching and I'll see you guys in the
16:24 - next lesson