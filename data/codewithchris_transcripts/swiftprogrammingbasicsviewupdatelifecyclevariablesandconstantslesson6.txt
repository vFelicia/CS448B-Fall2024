00:04 - hello and welcome in this lesson and in the next 
three you're going to be learning the basics of  
00:09 - the swift programming language now these are the 
skills that you're going to have to have in order  
00:13 - to complete the war card game as well as to build 
the future apps that we're going to do together  
00:18 - now if you've never coded before i know this 
might seem a little bit intimidating but i  
00:22 - really want you to stick with this and really pay 
close attention in fact open up xcode on your own  
00:27 - machine and type out exactly what i'm showing 
you this is really going to help reinforce  
00:32 - the structure of the language and all of the 
keywords there's no need to memorize anything at  
00:37 - all i guarantee that by the end of this module 
you'll be writing your own swift code in case  
00:42 - you're new here my name is chris and welcome to 
code with chris the place to be if you want to  
00:46 - learn how to build an app and i have a quick 
question for you have you learned how to code  
00:50 - before or is this your first time learning how to 
code let me know by leaving a quick comment below  
00:55 - and on your way down there if you wouldn't mind 
please give this video a quick thumbs up it helps  
00:59 - me out more than you know so thank you all right 
let's dive in i want to start by looking at the  
01:05 - view update lifecycle of a simple app and show you 
where swift code plays a part in each part of the  
01:11 - life cycle let's start with what you've already 
learned in the previous lessons that the ui  
01:16 - is generated from swift code we'll call this your 
view code it generates a ui for your user to see  
01:23 - now typically with an app we have some sort 
of data that we want to retrieve and display  
01:28 - for example a news app we'd want to get that 
data from a data source and then retrieve it  
01:34 - into our app and display it in our ui you 
can use swift code for this the swift code  
01:39 - can go and fetch the data and then process 
it into a format that our app can understand  
01:44 - then using swift code we can also link this data 
to our view code so that when the ui is rendered  
01:51 - from that view code that data can be displayed to 
the user and furthermore when the user interacts  
01:57 - with the ui such as tapping a button we can use 
swift code to capture that event and respond to it  
02:03 - now based on what the user tapped on we 
might use some swift code to change our data  
02:09 - when this data change happens because we've 
linked that data to our view code that data  
02:14 - change is automatically detected and the new ui 
is re-rendered with the updated data so that the  
02:20 - user can see what has changed now this cycle is 
essentially all the app is doing over and over and  
02:26 - we'll explore this app view update lifecycle in 
more detail in future lessons but for now i just  
02:33 - want you to understand that swift code has a part 
to play in each part of this life cycle all right  
02:40 - from the last few lessons you've already seen the 
code for building ui so you sort of know what that  
02:45 - view code looks like let's shift our focus over to 
the data part where we can see what swift code is  
02:53 - used for keeping track of the data and furthermore 
what does data even look like in our app  
03:00 - in order to try out some of the swift code and 
to find the answer to our question let's use an  
03:05 - xcode playground a playground is a lightweight 
way to test some of our code without committing  
03:10 - to a full-fledged app project that we can do here 
think of an xcode playground like your doodle pad  
03:16 - but for code now to start a new one go to file 
click on new and then let's click on playground  
03:23 - we're going to choose a blank 
playground and let's give it a name  
03:27 - and let's save it somewhere we're going to close 
this navigator tab by clicking this button because  
03:32 - we don't need that now down here in the lower 
left hand corner you'll notice that we have  
03:36 - a button that called show debug area go ahead 
and click that to reveal this tray this debug  
03:43 - or console area is where we're going to output a 
lot of data so just turn that on make sure you see  
03:49 - this little area down here and then this button 
i want you to click it right now it's going to be  
03:55 - executing the playground it's going to run all 
of the lines of code in the editor area up here  
04:00 - notice however that you also have this little 
blue run button along the line numbers and this  
04:07 - lets you select which line you want to execute the 
code up to so if i hover over at line three and i  
04:14 - hit the button right here it's gonna run lines 
one two and three as opposed to this button here  
04:20 - which runs everything so the first time 
you run this playground it might take a  
04:25 - while might show the spinner for up to even a 
minute i want you to do that and just let it  
04:31 - run until it says ready to continue and 
that's going to set us up to run some code  
04:36 - in the next part for now let's just go ahead and 
delete these lines of code so we can start fresh
04:44 - all right now that you're set up let's go back to 
our original question what does data look like and  
04:48 - how do we use swift code to keep track of it let's 
look at a couple of different types of data first  
04:55 - now let's start with a common data type 
a piece of text in swift you surround  
05:00 - text with quotation marks like this and 
this is known as a piece of string data  
05:05 - let's add a note for ourselves 
up here with two forward slashes  
05:10 - when you do that it's called a comment and it's 
a way for us to leave a note or a little piece of  
05:15 - documentation for us to remind ourselves or other 
people who might be looking at our code what that  
05:20 - code does and when xcode sees these two forward 
slashes it's not going to execute this line
05:33 - now let's take a look at another data type 
integers so something that looks like this  
05:40 - in swift this is known as int short for 
integer and what about decimal numbers well yes  
05:46 - that's also a data type that swift can 
recognize and handle each of these they're  
05:54 - known as a double and swift can also handle 
boolean values so things like true and false  
06:02 - in swift this is known as bool now string int 
double and bool these are all called data types  
06:09 - and it's how swift classifies data now these 
aren't all the data types that are available  
06:14 - but these are the by far the most common ones that 
you'll be using at least in the beginning and it's  
06:20 - a great starting point for us all right now let's 
take a look at creating and keeping track of data  
06:26 - in swift there are many ways to keep track 
of data but two of the most basic ways are  
06:31 - using variables and constants let's go back 
to our xcode playground and take a look at an  
06:36 - example let's start with our hello string data 
here now this piece of data on its own is going  
06:44 - to be useless to us unless we have a way to 
reference and track it and we can do this  
06:48 - with a variable so let's see how we can declare a 
variable to keep track of this hello piece of data  
06:55 - so we use the var keyword and 
that's for declaring a new variable  
06:59 - and then we type the name of the variable this 
name is what we're going to use to reference  
07:04 - that piece of data and recall it so i'm going to 
call this myvar and then we follow it with a colon  
07:13 - and then after that we put the data type that 
this variable is going to track since the data  
07:18 - that we want to reference is a piece of string 
data i'm going to put string here and then next  
07:25 - we usually in the same line that we declare 
the variable we assign the data to the variable  
07:32 - to keep track of and we can do that using the 
assignment operator which is just an equals symbol  
07:38 - and then on the right hand side of that we put 
the data that we want to assign to this variable  
07:44 - i'm going to take that and move that right here 
so essentially what this line of code is saying  
07:50 - we're declaring a new variable called 
myvar we are saying that it keeps track of  
07:56 - string type data and then we are assigning 
this hello string data to that variable  
08:05 - it's kind of like we're attaching a label to this 
piece of data called myvar now whenever i want to  
08:11 - reference that piece of data all i need to do 
is reference it by the variable name so let's  
08:17 - give this a try we can use a special command 
that will output the data to the console area  
08:25 - below here in the playground and that command is 
just print followed by two rounded brackets and  
08:31 - in between those brackets you put the variable or 
whatever data that you want to output so i'm going  
08:37 - to do that and then down here i'm going to stop 
my playground and execute all the code in it again  
08:42 - and then as you can see down there it says hello 
that it's the contents of my var which is exactly  
08:48 - what we would expect notice that when i reference 
my variable i don't need to use the var keyword  
08:54 - anymore that was only to declare the variable 
and once i've declared my variable i can just  
09:00 - reference it by its name and i can also reassign 
new data to it i can use it over and over again  
09:06 - i don't have to redeclare it so for example after 
i declare it and assigned hello to it i can turn  
09:14 - around and assign something else to it let's 
assign this piece of string data called world  
09:22 - to my var and essentially what we've done here 
is we've told that variable instead to track  
09:28 - this piece of data so what would you expect 
if i execute the code in the playground now
09:35 - we would only output world because my var no 
longer is tracking that hello piece of data  
09:42 - now one thing i want to emphasize is the data 
type of the variable if i specify that my var  
09:50 - is a string type i can only track pieces of string 
data so for example if i had an integer like 100  
10:00 - and i tried to assign that to my var well i would 
get an error that's not allowed what i need to  
10:08 - do instead is declare a new variable of the in 
type to keep track of this piece of in data so  
10:16 - let's go ahead and use the var keyword and 
name it and then colon and then the data  
10:22 - type that i want this to track and now that 
is completely okay let's try printing that out
10:37 - xcode is not going to help you autocorrect 
any spelling errors all right so we have  
10:43 - world and 100. now as we're coding 
more together you'll start to notice  
10:48 - different sorts of naming conventions like what 
you see here where my variable names start with  
10:54 - a lowercase letter and then every subsequent word 
in my variable name starts with a capital letter  
11:00 - so that's sort of just a standard naming 
convention you really could do anything you want  
11:05 - but when you start coding more and 
working in teams it's important to have  
11:12 - a standard that everybody uses and this is a 
common one all right now one more thing i want  
11:17 - to talk about before we move on to the next topic 
is the fact that there are shorthands in xcode you  
11:22 - don't really have to type in all the information 
for example here we're declaring that this  
11:31 - variable myint is an int type and we're assigning 
integer data to it but the thing is we could  
11:38 - actually omit that data type and simply assign 100 
to it when we do that xcode can see that this is  
11:45 - a piece of in data so it's going to assume that 
myint is going to only track in types now that  
11:52 - same rule still applies i mean after xcode infers 
that this variable is in type because you've  
11:59 - assigned 100 to it i cannot go and assign you 
know a string to it that's not going to be allowed  
12:05 - because xcode has already detected that you know 
this should be an in type so same thing goes for
12:14 - up here i don't need to specify 
the data type if i'm going to  
12:18 - assign a piece of string data to it right away 
because that tells xcode that this is going to  
12:23 - be a string type variable so that's just 
a little shorthand to save you some typing  
12:30 - all right so you learned how to declare a new 
variable assign data to it and recall that data  
12:35 - by using the variable name you also learned how to 
assign new data to that variable let's talk about  
12:40 - the other way to keep track of data constants so 
constants are just like variables except that you  
12:48 - can't reassign data to it once you've assigned the 
first piece of data to it so let's take a look at  
12:54 - how to declare a constant to keep track of this 
string data instead of the var keyword you use the  
12:59 - let keyword and then the rest is just the same 
as a variable so we start with a constant name  
13:07 - my const colon and then you guess that the data 
type followed by the assignment operator and then  
13:16 - we're going to move that piece of data to the 
right hand side of that assignment operator like  
13:20 - that now let's try referencing this constant 
let's try printing out the data in my const
13:29 - as you can see it works as expected now let's try 
to do the thing that's not allowed let's try to  
13:37 - assign something else to it
13:42 - and as expected we cannot reassign 
data to it because it is a constant  
13:48 - now constants are useful it's an additional 
tool that we can use if we don't expect  
13:53 - that piece of data to change and so we 
don't need to make any changes to it ever
13:59 - so when would you use a constant over a variable 
well it really depends what you're trying to do  
14:04 - you'll probably find yourself using variables 
most of the time because of their versatility  
14:09 - and because data changes however the best 
practice is to prefer constants over variables  
14:16 - where it makes sense in fact xcode is smart enough 
to know if you use a variable and you never end  
14:21 - up changing that variable it will suggest that 
you change that var keyword to a let keyword  
14:26 - and use a constant instead all right let's do 
a quick recap before we wrap up the lesson you  
14:32 - learned about the view update lifecycle and how 
swift code plays a part in it you learned about  
14:36 - data types such as string int pool and double you 
learned about how to use variables and constants  
14:43 - to reference data now i highly recommend that you 
go through the quiz and challenges for this lesson  
14:48 - to practice what you've learned today there's 
actually some new training in those challenges  
14:53 - such as how to perform math operations 
with variables also don't forget that you  
14:58 - can print out the swift cheat sheet from the 
resources link in the top nav bar and keep it  
15:03 - handy there's no need to memorize anything to 
access these resources visit codewithchris.com  
15:09 - and click on the try for free button to create 
your account and enroll in the 14 day challenge  
15:15 - if you like this lesson please give this video a 
thumbs up and hit that subscribe button and don't  
15:20 - forget to turn on bell notifications you're making 
great progress so far and in the next lesson i'll  
15:26 - teach you how to organize your code statements 
into functions alright i'll see you there