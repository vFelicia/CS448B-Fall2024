00:00 - X's and O's is an iOS iPad OS version of a 
familiar game that goes by many names some call  
00:07 - it X's and O's as I've named this game but others 
refer to it as tic-tac-toe or nuts and Crosses  
00:14 - hi my name is Stuart Lynch and in this series 
we'll be building this application from scratch  
00:20 - the game has three different modes 
of play you can simply choose the two  
00:26 - on this device mode enter the name of the 
person you're going to be playing against  
00:31 - and start the game You Begin by choosing 
who goes first by tapping on one of the  
00:37 - buttons and after that the player is 
handed the device and makes the move  
00:42 - once a move is made the other person's name is 
highlighted in green and it's their turn after  
00:49 - each play the turn automatically switches until 
a winner is found or until we reach a stalemate
00:57 - in the second mode you can 
change to play against the device
01:04 - and then you can start and you can 
see here that I'm running an iPhone  
01:08 - 14 simulator so I can choose to start or I 
can let the simulator make the first move  
01:15 - when it's the simulator's turn to move 
the screen locks up while the simulator  
01:19 - is thinking and then a random move is 
made and the turn is passed back to you
01:26 - after I make a move it's back to the simulator 
again and so on and so forth until a winner is  
01:32 - declared or not in the final mode you get to 
play against anyone who's nearby who has the  
01:39 - app installed on their phone and has it running 
and looking for someone else to play against  
01:45 - right now it looks like there's no one to play 
against so let me bring up my test phone which  
01:51 - is an iPhone SE and it's running iOS 15. while 
the simulator as you can see is running iOS 16.  
01:58 - so even though this app is built using xcode 14 
we'll make it backwards compatible you can also  
02:05 - see that it's designed for both light and dark 
mode as soon as I choose the challenge of friend  
02:10 - mode on the real phone it starts to advertise 
its availability to all other phones close by  
02:16 - that are running the application and looking to 
challenge a friend as well as my simulator is  
02:23 - either player can choose to challenge the 
other and an imitation is sent waiting to  
02:27 - be accepted or rejected if the invitation 
is accepted both devices enter game mode  
02:34 - and the names on the start buttons reflect 
the display name chosen for that device  
02:40 - again either player can start but once 
that happens the opposing player cannot  
02:45 - make a move until their device turns 
green so here it's Colin's iPhone turn  
02:52 - when he makes his move the move gets transferred 
over the air to the simulator and it's now its  
02:57 - turn and Colin can no longer make any move and 
we can continue to play until a winner is found  
03:05 - or as we see here we reach a stalemate while a 
game is in play you no longer are advertising  
03:13 - your availability but as soon as you end the 
current game session you're back to advertising  
03:19 - your availability and looking for someone else 
to play or you can choose another game mode  
03:26 - there's a lot to learn in this series and not 
just the multi-pier connectivity there are lots  
03:32 - of value-added techniques introduced to make 
your code reliable and extensible in the future  
03:38 - well now that we know what we're going to create 
it's time to start there is no starter project for  
03:43 - this series but there are some starter resources 
that I prepared for assets that we're going to be  
03:47 - needing so be sure to download them as we'll be 
using them very shortly I'll be using xcode 14  
03:53 - for this project so let's start by creating a 
new application and let's call it x's and o's  
04:02 - and I'm just going to save it to the desktop
04:07 - as xcode 14 by default specifies a minimum 
deployment Target to iOS 16. I want to make  
04:14 - sure that users of this app who are still 
on iOS 15 can still run it so select your  
04:19 - app Target and set the minimum deployment 
to 15. and then do the same in the project
04:30 - I want this app to run on both an iPhone and 
an iPad but I want to restrict the iPhone 3  
04:36 - running in portrait mode only so uncheck the 
landscape options on the iPhone orientation  
04:43 - at this point I always like 
to clean the build folder
04:49 - and then build the app
04:53 - that way I make sure it compiles 
and I haven't made any errors
04:58 - now it's time to add those assets that I mentioned 
if you open these starter resources folder you'll  
05:04 - see all of the images that I've prepared 
one is a PNG image that we'll use for the  
05:10 - app icon and the rest are PDFs so we'll be 
able to use a single image asset type here
05:20 - the launch screen also has 
a light and dark version  
05:24 - so first open the assets folder and drag the 
single app icon PNG image onto the app icon  
05:30 - placeholder this is a fantastic new addition to 
xcode 14. we no longer have to worry about those  
05:36 - multiple images it can't be a vector image like a 
PDF or an scg and it has to be 1024 points Square
05:48 - next drag in the single light launch screen image 
and this will create a new image asset of that  
05:54 - name open the inspector and set the appearance 
to any dark then set the scale to single scale
06:06 - drag the dark version onto the dark placeholder  
06:11 - I've also created three images that I'm 
going to be using for my game pieces  
06:16 - one called none that's an empty Square want to 
represent an O placement in a square and the  
06:24 - other an X placement and all three are PDF images 
so let's drag them all into the asset folder  
06:33 - and while they're all selected I'm going to 
change that they render as a template image  
06:40 - and this means that they'll be black 
while in light mode but white in dark mode
06:48 - I'm also going to preserve the vector 
data and set the scale to single scale
06:56 - now I get tired of the blue default 
accent color that Apple uses so let's  
07:00 - set a different accent color for our app first 
I'm going to change the appearance to any dark
07:08 - and then I'm going to set the content 
to srgb and choose 8-bit hexadecimal  
07:16 - for the any appearance which is light we're 
going to choose a hex value of 461 CBD
07:27 - I'll repeat this for the dark appearance 
again setting the content type  
07:32 - and then I'm going to enter A9 
6 e f f for the 8-Bit hex value
07:43 - I've also found that the info p list launch screen 
to be unreliable so I use a UI kit version that  
07:50 - also gives me some more flexibility so create 
a new launch screen file foreign the label
08:01 - add an image which is that launch screen image  
08:06 - and then set horizontal and vertical constraints 
so that the image will be centered in The View
08:15 - next open your target and the general tab and 
set the launch screen file to that new file
08:25 - Now by default the launch 
screen background is white  
08:29 - and we want this to be black when in dark mode so 
return to the launch screen file the storyboard  
08:36 - and set the background to system background color
08:45 - let me test this now and I'm going 
to launch an iPhone 14 pro simulator  
08:51 - and I see that launch screen is in 
light mode with a nice Chris image
08:58 - on my first view I get that Globe image 
that had been sent to an accent color  
09:02 - and is displaying that new purple 
accent color that we set perfect
09:08 - if I switch to dark mode using command shift a I 
see that lighter purple accent color for my globe  
09:18 - now let me launch to test the launch screen  
09:21 - and I see that it is a white image 
on a black background perfect so far
09:31 - another thing I like to do is to rename two files 
on every one of my projects before I start to code  
09:37 - first let me return to light mode
09:41 - content view is the first view presented 
and that's where I'll be starting my  
09:46 - game so content view isn't a good name I'm 
going to rename it to Simply Be start View
09:54 - the entry point for every app is the 
one marked with the at Main designation  
10:03 - and you can see that the start view is now the 
first presented view once I change this name  
10:09 - now I often have problem finding this in my 
navigation tree so I always rename it as app entry  
10:17 - our start view is where we'll choose from 
one of the three different modes of play  
10:21 - so I'm going to create a picker for that and 
assign a value to a property that will allow  
10:26 - me to change the way the game functions there 
will be a number of small model objects that  
10:31 - we'll need to create for our projects so 
first let's create a folder called models
10:40 - inside there create a file called 
game models to hold our game models  
10:46 - and they're pretty small so I can include a number 
of them all in the one file the first one we're  
10:51 - going to create is an enum that I'm going to 
call game type and it will have four cases  
10:59 - single where we'll pass the device around 
but when we challenge the device itself  
11:05 - here when we play against someone in 
the near vicinity on a different device  
11:10 - and undetermine what we're still trying to 
figure out what kind of game we want to play  
11:15 - so I'm going to create a computed string 
property that I'm going to call description  
11:21 - and then I'm going to switch on self and let 
xcode generate the cases for me if the choice is  
11:28 - single I want to return the string share your 
iPhone slash iPad and play against a friend
11:40 - in the case of a bot I want to return the 
string play against this iPhone slash iPad  
11:50 - if we're challenging someone else's appear 
I'll return invite someone near you who has  
11:57 - this app running to play and then if it's still 
undetermined I'll just return an empty string
12:07 - well now we can code our start View when we play 
our game depending on the mode we might need to  
12:13 - know the name of who we're playing against 
as well as using our own name so we'll need  
12:18 - three State Properties to begin with first one 
for the game type and it's of type game type  
12:25 - and we'll set it as undetermined 
initially all right then I can create  
12:31 - two string properties that will be bound 
to text fields one will be for your name
12:40 - and the second for an opponent name
12:46 - now if we're entering the names in a text field 
on a device the keyboard will appear and we'll  
12:51 - want to be able to dismiss the keyboard 
when the game starts and I'm going to do  
12:55 - this using a focus State Property then I'll 
call focus and it's a Boolean and then I'll  
13:03 - set it to True basically whenever we're within 
the text views but false when we start our game
13:12 - let's replace the contents of the v-stack with 
a picker then and I can give the pickary string  
13:19 - title of Select game but the selection 
will be bound to our game type property
13:28 - for the first item in the Picker I'll use a 
text View using the string select game type  
13:36 - and then I'll tag it with the game 
type undetermined so that if it gets  
13:43 - selected our game type will get updated by 
that value that's the purpose of the tag  
13:48 - so I can copy and paste that three more times then
13:55 - for the second I'll specify to sharing device 
and I'll tag it with the single game type  
14:05 - the Third it'll be challenge your device 
and I'll tag it with the but game type
14:15 - the final picker choice will be challenge a friend 
and the tag will be bound to the peer game type
14:24 - and then I'll add some padding now 
I want this to stand out more so I'm  
14:29 - going to set a background to the 
Picker using a rounded rectangle  
14:35 - specifying a corner radius of 10 and 
I'm going to set the style to continuous  
14:43 - and then to remove the fill and just 
leave a border around the outside  
14:48 - also the stroke with a line width of 2.
14:54 - then let me set the accent color to primary
14:59 - following that I can display the 
game type description in a text View
15:06 - and then add some padding  
15:10 - foreign now each time I change the Picker a 
different description of the game mode appears
15:18 - let's follow that now with a v-stack to 
hold our text field asking for the names  
15:24 - and how many text fields we display will 
depend on the type of game we're playing  
15:29 - so we'll switch on game type 
and let xcode generate the cases
15:37 - in the first case single where we're 
playing against someone else as we pass  
15:41 - the phone around we'll want two text fields 
so inside here we'll create another v-stack  
15:48 - and we'll have one for our 
your name bound to your name
15:55 - and then the second text field 
will be for the opponent's name  
16:00 - bound to the opponent name property
16:04 - now in the case that we're playing against 
a bot which is by phone we'll be using the  
16:10 - iPhone's display name so all we need 
is a text field asking for your name
16:19 - in the case of pier where we're playing 
against someone who's got their own phone  
16:23 - and they're nearby we'll need to do 
more work on that so I'm just going  
16:27 - to put in an empty view for now and come 
back to it when we get to that section  
16:33 - similarly for undetermined we don't want 
anything here either so again another empty View
16:42 - let's add some padding set the 
text field style to rounded border
16:50 - we can bind the focus State Property here 
so that we know when the keyboard is set  
16:57 - and then set a frame with a width of 350.
17:03 - now when the game is a peer type we'll have 
to do more work but if it's not appear type  
17:08 - playing against someone on another device then 
what we can do is we can create a start button
17:18 - so we'll create that button using the label 
start game and for now the action will be just  
17:24 - to set the focus state to false that will 
dismiss any keyboard that might be shown
17:30 - and we'll set the button style 
to a bordered prominent Style
17:36 - but we don't want this button 
to be enabled all the time  
17:39 - so we'll make it disabled based on certain 
conditions if the game type is undetermined  
17:48 - we'll have it disabled or if our 
game type is equal to a bot type  
17:56 - and we've got that one text field your name we 
have to check to make sure that it's not empty  
18:02 - so it's disabled if it's empty or if the game type 
is the single passing the device around and either  
18:11 - your name or the opponent name fields are empty in 
all those cases we want that button to be disabled  
18:18 - after that just to fill the 
screen I want to display an image  
18:23 - and that image will be the launch screen image 
then let's add a spacer to push this up to the top
18:35 - now we're not going to be using a 
navigation stack here to present our  
18:38 - game view we're going to be using a full 
screen modal sheet to present our game  
18:43 - but I'd also like to have a navigation bar here 
showing our game's name in iOS 16 I can use a  
18:50 - navigation stack and Surround my v-stack 
with that navigation stack however we've  
18:56 - specified that our deployment Target is iOS 15 
and navigation stack isn't available in iOS 15.
19:06 - and that produces that error so I 
could go back to a navigation view here  
19:11 - but it's deprecated so I worry that 
in the future my app might break  
19:17 - and the other problem with the navigation 
view is that on an iPad I have to change  
19:21 - the navigation style to a stack navigation style 
so that we don't get that split view on an iPad  
19:28 - so I want to use a conditional case here depending 
on the iOS version in use and I'm going to create  
19:34 - a view modifier for that so let's create another 
folder or group and I'm going to call it utilities
19:44 - inside there create a new 
file called view modifiers
19:51 - change the import to Swift UI
19:56 - create a new struct called navstack container 
that conforms to the view modifier protocol
20:06 - this is going to require a body function and 
that body function will receive the content  
20:12 - but return a new view once 
we've modified our content  
20:17 - if we just return content then nothing 
will change if we apply this modifier  
20:23 - however I can check for which version of iOS the 
device is running so if available iOS 16 or later  
20:32 - we'll want to return this content 
view wrapped inside a navigation stack
20:39 - otherwise we can use an else statement 
and wrap it inside a navigation View  
20:47 - and then in the case we're 
using navigation view we'll  
20:51 - apply the navigation view style 
of Stack to that navigation View
20:58 - and then to make it more Swifty I'm going 
to create an extension for you inside here
21:07 - I'll create a public function called in 
navigation stack that just returns some View  
21:15 - and what I'm going to return is self 
applying the view modifier navstack container  
21:23 - now I have a full video on view 
modifiers that you may wish to check out  
21:27 - and I'll make sure a link 
is left in the description
21:33 - so let's return now to the start View  
21:36 - so we can simply apply that in navigation stack 
modifier to our v-stack and that will put it  
21:42 - within a navigation stack or navigation 
view depending on the iOS version running  
21:49 - and then before that we can assign a navigation 
title so let's just use x's and o's perfect
22:00 - so the final thing I want to do in this 
video is to set up our game view to see  
22:04 - if we can present it so create another 
new group that we'll call game screen
22:12 - inside there create a new Swift UI View and call 
it game View now this will be presented as a  
22:22 - modal full cover sheet so in order to dismiss 
it we can use the environment dismiss keypath
22:30 - and then assign it to a dismissed property
22:37 - just for now let me just embed 
this text view within a v stack  
22:42 - and then I'm going to attach 
that v-stack a toolbar
22:48 - inside there I'll create a toolbar item 
with a placement of navigation bar trailing
22:59 - in this navigation item will be a 
button with a label and the game
23:08 - and the only action will be to dismiss the view by  
23:11 - calling the dismiss function 
from our environment property
23:16 - and then I'm going to set the button style 
to bordered in order to show that toolbar  
23:23 - I'm going to have to have a navigation stack and 
that navigation stack is going to have a title  
23:27 - so let me start with the navigation title 
X's and O's just like the previous screen
23:36 - and then I can embed it within a 
navigation stack using my new view modifier
23:43 - if I return to the start view now I can create 
a Boolean State Property called start game  
23:50 - and initialize it as false
23:54 - then when the start button is 
tapped we can talk on this property
24:03 - this then can be used to be bound to 
a full cover sheet so let's create one  
24:08 - binding it to that property and the 
content bin will be our game View
24:16 - I can test this now in the preview 
selecting the two sharing device  
24:21 - option requires that I add both names 
before the start button gets active
24:30 - once it's active I can tap on 
it to display the game View
24:36 - and I can dismiss it
24:40 - if I choose the challenge in the 
device game mode I only see one  
24:46 - of my text Fields because it only requires 
my name and then again I can view the game  
24:53 - and then if I choose peer which is yet 
to be coded I don't see that start button  
25:00 - so so far so good now after coding this I 
noticed a couple of things that I want to clean  
25:05 - up first this full screen cover has a trailing 
closure so I can remove the content label here  
25:15 - and close off the parentheses here and remove it 
from the end using the trailing closure syntax now  
25:24 - and then second I added this accent 
color up here and it's not needed  
25:29 - The Pick of you gets the 
default accent color that I want
25:35 - and then finally as I do after each video I 
want to make sure that I commit my code to a  
25:40 - git Repository now I never set this up when I 
created the application but I can do this now  
25:46 - from The Source control menu and it will create a 
new git repository locally and commit our project  
25:55 - at the beginning of the next 
video we'll create a new branch