00:00 - hello welcome to this tutorial where I'm
00:02 - going to show you how to build this dice
00:04 - roll app and this app is meant to be the
00:07 - second step after going through the
00:09 - lessons in the start here section of my
00:12 - site code with Chris calm after you go
00:14 - through these lessons this dice roll app
00:17 - project would be the perfect
00:18 - reinforcement for the concepts taught
00:20 - there there's also a text version of
00:23 - this dice app tutorial which I am
00:26 - finishing up you're going to be able to
00:28 - find the link to this tutorial in the
00:30 - description below the video if you're
00:31 - watching this on YouTube
00:33 - furthermore I just like to say that this
00:36 - dice roll app was the very first
00:37 - tutorial I published on code with Chris
00:40 - calm and also on my youtube channel if
00:42 - you actually go back in my youtube
00:45 - channel history you're going to see some
00:46 - of the very first videos and it pertains
00:49 - to this dice roll app now what I've done
00:51 - I'm going through a process of just
00:53 - refreshing all my tutorials on my site
00:56 - just bringing back to life some of those
00:58 - app projects that we did because Swift
01:01 - and xcode changes so fast so this is the
01:04 - updated version of the dice roll app now
01:07 - this dice roll app tutorial is targeted
01:10 - at the beginner so I'm going to a hand
01:12 - hold you and I'm going to go through the
01:14 - different parts of Xcode and point
01:15 - things out and go deliberately at a slow
01:18 - pace if you've followed any of my other
01:21 - app tutorials before on my youtube
01:23 - channel or site or even enrolled in some
01:25 - of my courses before you'll find this
01:26 - probably too slow for you but again it's
01:29 - targeted at the beginner so if you've
01:31 - completed the War app before in this
01:35 - start here section or on the YouTube
01:37 - channel then this app is going to be a
01:39 - good reinforcement of those concepts
01:41 - okay so with that said let's get started
01:46 - [Music]
01:50 - let's start a brand new project create a
01:53 - new Xcode project and make sure that the
01:58 - tab up here says iOS and we're going to
01:59 - start with a single View application
02:00 - which is going to be our basic type of
02:03 - application I'm going to call this the
02:05 - dice roll app and let's just call it
02:08 - dice roll tutorial because I've created
02:11 - this several times I don't want to
02:13 - conflict any name here under team you
02:17 - can you'll probably have none unless you
02:19 - sign up for an account with which case
02:21 - you can put your name here I've got
02:24 - either your company name or personal
02:26 - name and the organization identifier is
02:29 - usually in this sort of format where you
02:32 - go comm dot and then your name or your
02:34 - company name and it's automatically
02:37 - going to append the project or product
02:40 - name to the end of that and this forms a
02:43 - sort of unique identifier for your
02:45 - application not so important for us just
02:47 - creating these tutorials and demo apps
02:49 - but if you were to release some apps
02:51 - into the App Store and you're planning
02:53 - to release more you probably want to
02:55 - have some sort of naming convention now
02:57 - under language choose swift instead of
03:00 - ox projective sea we want to use Swift
03:02 - devices leave it as iPhone and have all
03:05 - these guys unchecked click Next I'm just
03:09 - going to save this on my desktop and
03:10 - under source control I have that
03:13 - unchecked we're not going to work with
03:15 - that right now now this is going to
03:18 - create a brand new project for you the
03:21 - first thing I want to do is jump into
03:23 - the storyboard this left hand side is
03:25 - called your file navigator here you're
03:27 - going to find all the files for your
03:29 - Xcode project this storyboard is
03:33 - actually a visual way for you to design
03:35 - your user interface so it comprises of
03:38 - this view right here this is called
03:40 - document outline and if you actually
03:42 - expand these nodes you can see all of
03:44 - the elements in your view if you don't
03:46 - have this little pain this document
03:49 - outline there's an icon down here that
03:51 - you can click to hide or show that
03:54 - document outline pane so you're going to
03:57 - want to have that
03:58 - going on the right hand side this column
04:01 - here is called the inspector pane and
04:03 - it's kind of split into two sections you
04:06 - have this top section which basically
04:08 - shows you any sort of configurable
04:10 - properties of whatever you have selected
04:12 - so right here I have this view selected
04:14 - it's gonna show me some things that I
04:16 - can change for that view take note that
04:19 - there are a couple of tabs here as well
04:21 - in this bottom half here it also
04:25 - contains a couple of different tabs the
04:28 - the one that you will commonly use is
04:30 - this one right here called the object
04:33 - library so make sure you have this
04:34 - selected you may see these elements like
04:38 - this as these little squares you can
04:40 - click this button here to change it into
04:43 - this view which is helpful for beginners
04:45 - because you can read exactly what those
04:47 - things are so we're gonna get right into
04:50 - it by dragging some of the user
04:53 - interface elements from this object
04:55 - library onto the view here and there's a
04:59 - filter text box down here where you can
05:01 - type and kind of filter out to the
05:03 - element you want we're going to type in
05:05 - label here because that's what we want
05:07 - to add and this is going to be a label
05:10 - that basically just displays text so I
05:12 - just dragged it and I moved it on here
05:15 - and take note that when you add it on
05:17 - here
05:18 - there's all these little handles around
05:21 - the label and you can drag one of these
05:23 - handles and you can actually resize it
05:24 - or you can position it but the important
05:28 - thing I want to let you know about is
05:30 - that when you size things like this and
05:33 - you move this label around that's not
05:35 - actually how it's going to show up in
05:37 - your app the system that determines the
05:40 - position and the size of these elements
05:42 - is called Auto layout and it works by
05:45 - following a bunch of rules that dictate
05:47 - you know the size of things and how far
05:49 - away elements should be from the edge or
05:51 - from each other and it's all based
05:53 - around these auto layout rules or
05:55 - otherwise known as Auto layout
05:57 - constraints which we will be working
05:59 - with this soon but first I just wanted
06:02 - to let you know about that so what I
06:05 - want you to do now is tap on the label
06:07 - here you're going to have it selected or
06:09 - you can tap on it from here in the
06:10 - document outline
06:11 - eat - that's going to change what you
06:14 - see here in the inspector pain you're
06:16 - gonna see all of these configurable
06:18 - properties for the label for the text I
06:20 - want you to change it to the some is
06:23 - colon and just press enter you're gonna
06:25 - see the text change here again don't
06:27 - worry if your text is cut off like that
06:29 - or something like that because you know
06:33 - you can you can expand the label a
06:35 - little bit like this by dragging these
06:36 - handles but that's not really not going
06:37 - to change the size of the label but for
06:39 - visual purposes while you're designing
06:41 - it that's fine the next thing we're
06:43 - going to want to do is to add some image
06:47 - views into this view image views are
06:49 - something that we can use to display
06:51 - images so down here in the filter type
06:55 - in image view and click and drag this
06:58 - guy here you're gonna have an image view
07:02 - like that I'm going to size it just so
07:05 - that I have some more space to put a
07:06 - second one remember dragging it like
07:08 - this moving and sizing it like this
07:10 - doesn't really matter at the end of the
07:12 - day because it's the auto layout rules
07:14 - that are going to dictate how big they
07:16 - are I'm gonna sure I get another one
07:17 - there I'm just going to size it like
07:19 - that more or less the same doesn't
07:21 - really matter and lastly I'm going to
07:24 - search for a button this is going to be
07:27 - a button that the user can have to do
07:29 - something with so let's put that there
07:31 - okay now what you're going to want to do
07:33 - is to put these two image views into
07:37 - what's called a stack view and a stack
07:40 - view will help you organize and arrange
07:43 - your layout an easy way we can put these
07:47 - two elements into a stack view is if we
07:49 - just go into the document outline here
07:50 - if you hold down command on your
07:53 - keyboard and you click the two image
07:55 - views you're gonna see them both
07:56 - highlighted in blue like that so that's
07:58 - what you want you're gonna see both of
08:00 - them are highlighted then you want to go
08:02 - down here into this button embed in
08:05 - stack and when you click on that button
08:07 - it's going to put both of those elements
08:09 - into a horizontal stack view you can see
08:13 - here in the document outline that your
08:15 - two image views are gone instead it's
08:17 - replaced by the stack view but if you
08:19 - open it up you're going to see your two
08:20 - image views inside that stack view so
08:22 - the stack view is kind of like a
08:23 - container
08:24 - view that can contain other elements and
08:27 - it just helps you arrange those elements
08:29 - that are inside of it in this case it
08:31 - just stacks elements horizontally beside
08:33 - each other now if for some reason Xcode
08:36 - wasn't smart enough to put it
08:39 - side-by-side and instead its put it kind
08:42 - of on top of each other you can click on
08:44 - the stack view here in the inspector
08:46 - pane just change the axis from vertical
08:48 - to horizontal so for mine it's already
08:51 - horizontal we're gonna also want to
08:54 - change the spacing property I'm going to
08:55 - put 40 here and that just dictates how
08:58 - much space is between each element so
09:00 - you can see now I have a little space
09:02 - between the two elements now that we
09:05 - have this we're going to put all three
09:07 - of these elements the label the stack
09:09 - view containing the two image views and
09:11 - the button highlight all of them by
09:13 - holding command and clicking each one
09:15 - make sure that all of them are blue like
09:17 - this and then I'm going to click that
09:20 - embed and stack again this time it's
09:23 - smart enough to put them vertically
09:25 - again if yours is not vertical you can
09:27 - go here and change the access to
09:29 - vertical in the document outline you can
09:31 - see all of my elements are now inside
09:33 - this kind of top-level vertical stack
09:35 - view again I'm going to change the
09:37 - spacing of this guy to just some number
09:40 - 50 it doesn't really matter at this
09:42 - point and you're gonna notice this
09:44 - little red arrow up here when you click
09:47 - it it's telling you that it's missing a
09:49 - bunch of constraints and these are the
09:52 - auto layout rules I was talking about
09:54 - because Xcode is trying to determine how
09:56 - to layout your elements but it doesn't
09:58 - have enough information we have to give
10:00 - it a couple of additional rules to
10:03 - dictate how to lay things out because
10:06 - we're using stack views it makes things
10:08 - a little bit easier for instance this
10:10 - stack view contains the two image views
10:12 - and it knows to put them side-by-side
10:14 - because it's a horizontal stack view and
10:16 - then this stack view has these three
10:19 - elements inside of it and it knows that
10:21 - it needs to stack them vertically on top
10:23 - of each other with the spacing of 50 in
10:26 - between each however it doesn't know how
10:29 - to place this big stack view you know
10:31 - this outer guy right here doesn't know
10:33 - how to place that relative to the screen
10:36 - edges so that's what we have to
10:38 - we have to give it some rules Auto
10:41 - layout constrains to tell Xcode how to
10:45 - position this outer stack view so let's
10:48 - go ahead and add our first constraints
10:50 - click to this stack view here make sure
10:53 - it's highlighted you can see this you
10:55 - can see the handles here and this blue
10:58 - line around it then I want you to click
11:01 - on this add new constraints button when
11:03 - you click on this it's going to pop up
11:05 - this little menu here if you don't see
11:09 - any of these numbers in here and a lot
11:11 - of these options are greyed out for you
11:12 - make sure that you do have the stack
11:14 - view selected first okay and then if you
11:16 - go back and click this button you should
11:18 - see it pre-populated with some numbers
11:21 - basically these numbers represent how
11:23 - it's positioned right now first thing
11:26 - we're going to want to do is uncheck
11:27 - constraint to margins and that's going
11:30 - to let us specify that the edges of the
11:33 - stack view should be all the way to the
11:36 - edge of the actual view and not to the
11:39 - margin if we leave this checked on and
11:42 - even if we specified let's say zero for
11:45 - this left edge it's going to specify a
11:48 - rule where the stack view is zero points
11:52 - to the margin and not to the edge of the
11:54 - screen so if you want it to the edge of
11:56 - the screen just uncheck constrain -
11:58 - margins put 0 in there press tab on the
12:01 - keyboard zero and there you can see as
12:03 - I'm entering these numbers I'm enabling
12:05 - these margins here see these two margins
12:10 - that I've specified in left and right
12:11 - they are enabled so they're bright red
12:13 - these two on the top and bottom are
12:15 - dimmed out you can even click them to
12:17 - enable them like that but as soon as you
12:19 - enter a number in there they're going to
12:20 - be enabled anyways so I'm going to put 0
12:24 - in there and 0 in there so I just want
12:26 - to point out that this drop down you can
12:28 - also specify that the margin is relative
12:32 - to some sort of neighbor or in this case
12:36 - to the actual view so if I put 0 and you
12:40 - know if I click this drop down I can see
12:42 - that it's going to be zero relative to
12:45 - the view which is is this whole entire
12:48 - view here
12:49 - if I do it for this top guy however you
12:52 - can see I have two options right now
12:53 - it's selected that it's going to be zero
12:56 - to the top layout guide now the top
12:59 - layout guide is sort of this invisible
13:01 - line here that basically separates the
13:06 - space for the battery and you know the
13:08 - carrier and the time that goes up here
13:10 - this little status bar so I'm gonna
13:12 - leave it relative to this top layout
13:17 - guide so my stack view isn't gonna reach
13:19 - all the way to the top it's gonna reach
13:21 - it's gonna be zero from the top layout
13:24 - guide okay so four constraints go down
13:29 - here add four constraints like that and
13:31 - you can instantly see your stack view
13:33 - change like I said see it doesn't go all
13:35 - the way to the top because it's zero
13:37 - from the top layout guide which is this
13:39 - line here so on the other ones you can
13:42 - see that it's all zeros to the edges and
13:45 - also in the document outline you'll
13:48 - notice that now you have these four
13:49 - constraints these are the constraints
13:51 - that you added if you accidentally
13:54 - entered in a number other than zero and
13:56 - you want to change it you can simply
13:57 - highlight the appropriate constraint go
14:00 - on the inspector pane and change that
14:02 - constant to zero or another number if
14:05 - you'd like or you can even go ahead and
14:08 - highlight all of these and hit delete
14:09 - and that will delete all four of the
14:11 - constraints and once again you're gonna
14:13 - have to add the constraints if you made
14:15 - a mistake and you want to do it again so
14:18 - let me just quickly do it again cuz I
14:20 - just deleted them okay and if your your
14:26 - stack view isn't looking like this
14:27 - maybe it's like miss position like that
14:29 - and you get these orange lines that's
14:31 - the orange lines are basically telling
14:33 - you that what you're seeing here on the
14:35 - screen it it's not reflective of the
14:39 - rules that you've added so it's telling
14:41 - you that what you're seeing here doesn't
14:44 - really conform to the rules that you've
14:45 - specified so all you need to do is click
14:48 - this little button here to update frames
14:50 - and that's going to basically take a
14:54 - look at all your constraints and lay
14:57 - everything out according to them kind of
14:59 - refreshing the screen if you will so
15:01 - click that
15:03 - thing appears like this again now one
15:05 - more thing I want to quickly mention is
15:07 - in this stack view you see how there's
15:12 - this much space from the top all the way
15:14 - to the bottom and you can see how the
15:15 - button is sort of in the middle here in
15:17 - fact if we click the button you'll see
15:18 - the handles for the button here and here
15:21 - and then you'll see the little gap which
15:24 - we specified the stack view has you know
15:26 - that gap between each of the elements
15:27 - and then we have the horizontal stack
15:29 - view and then another gap and then the
15:31 - label so how is it that xqo chose to
15:34 - stretch out this button to fill out the
15:36 - remaining space well if you click on the
15:39 - button and you go here to this size
15:43 - inspector you scroll down and you can
15:47 - see this thing called the content
15:49 - hugging priority and this little setting
15:53 - is used when there's extra space so in
15:56 - this case for these three elements the
16:00 - label this horizontal stack view and the
16:04 - button there is a lot of extra space
16:06 - which element gets stretched in which
16:09 - element kind of maintains its size well
16:12 - that's what is dictated by this content
16:15 - hugging priority so the higher the
16:17 - priority the more the content will be
16:19 - hugged by default and maybe that all
16:22 - three of these elements have the same
16:24 - content hugging priority in that case I
16:27 - think it just randomly chooses it so
16:29 - let's check here the label has a content
16:33 - hugging priority on the vertical access
16:35 - for 251 the horizontal stack view has
16:39 - 250 and the button has 250 as well so
16:44 - the button and the stack view have the
16:47 - same vertical content hugging party but
16:50 - I think it just randomly chose the
16:52 - button or it may be that it's the last
16:54 - element in the stack view so for
16:56 - instance if I change the content hugging
16:59 - party for the label instead of 251 I'm
17:02 - gonna give it a low priority I'm gonna
17:04 - give it the lowest priority so 249 and
17:07 - because it has the lowest priority it's
17:10 - the one that's going to get stretched
17:11 - out you can see that you know that's
17:13 - changed there so if you want the button
17:15 - to be the one that's true
17:17 - that you need to make sure that its
17:19 - content hugging priority is the lowest
17:21 - so the label I'm gonna leave at 251
17:23 - stack view let's also leave it at or I
17:26 - mean up it to 251 so the button for sure
17:30 - will get stretched because it only has a
17:32 - vertical content hugging priority of 250
17:35 - which is the lowest out of those three
17:37 - okay so that's how that's why that
17:41 - button is stretched out on to the next
17:45 - step now we're going to expose these
17:48 - elements so that we can write code to
17:50 - access and reference these elements
17:53 - which we've added to the storyboard
17:54 - because otherwise we wouldn't be able to
17:57 - change any of these things and we're
17:59 - going to do that by connecting these
18:01 - elements to iboutlet properties so there
18:05 - are lots of different ways to do this
18:07 - and it's actually one of the most common
18:09 - stumbling blocks for beginners so i'm
18:11 - gonna show you one way to do it and i'm
18:13 - also gonna show you how to fix mistakes
18:16 - so we're gonna start by clicking this
18:19 - button up here it's called the assistant
18:21 - editor button and it's going to then
18:24 - change your interface into two different
18:27 - panes so on the left hand side you have
18:29 - your document outline and storyboard and
18:31 - on the right hand side you should be
18:33 - seeing viewcontroller.swift if you're
18:35 - not then what you want to do is make
18:38 - sure that up here it's switched to
18:40 - automatic and you can choose
18:42 - viewcontroller.swift
18:43 - but actually before that you want to
18:45 - make sure you are clicking this view
18:48 - controller here so you have it
18:49 - highlighted and then change this
18:51 - automatic go down here and choose view
18:54 - controller you should be seeing this
18:56 - view controller dot swift on the right
18:58 - hand side now what we're going to do is
19:00 - we're going to create it some space here
19:03 - so that because we're going to be sort
19:06 - of dragging elements into this space so
19:08 - hold down control on your keyboard and
19:10 - while you're still holding it down click
19:13 - this label here in the document outline
19:15 - and click and drag it into this area
19:17 - here you're still holding down control
19:20 - on your keyboard and then let go of your
19:21 - mouse while holding ctrl you should see
19:25 - this little dialog pop up to ask you how
19:28 - you want to name your label
19:30 - I'm just gonna call this the label I'm
19:33 - going to connect it and just like that
19:34 - we now have a an iboutlet property
19:37 - called label that is connected to this
19:40 - label here let's double check our work
19:42 - here
19:43 - we can right click this label and
19:44 - document outline or if you only have a
19:46 - one-button mouse hold down control +
19:49 - left click it and you're gonna see this
19:51 - little connections pop up you should see
19:53 - your property name here connected to
19:55 - view controller if you don't then you
19:59 - might have connected the wrong element
20:02 - to this iboutlet in that case you're
20:05 - going to right-click each of these
20:07 - elements one by one and open up this
20:09 - little menu and just see which one is
20:12 - connected to this label and when you
20:14 - finally find it you're going to want to
20:17 - click X to kind of break that connection
20:21 - then you're going to want to delete this
20:23 - line of code here and then you're going
20:25 - to want to try it again so hold down
20:27 - ctrl click and drag this label drop it
20:30 - here and then I'm gonna name this label
20:33 - and then if I right-click the label in
20:36 - my dock mount line I should see this
20:37 - connection here we're gonna do the same
20:40 - thing for the image view now you can
20:41 - either you know click and drag things
20:43 - from here the actual storyboard or you
20:46 - can do it from the document online but I
20:47 - I find that sometimes things get
20:49 - overlapped and a lot of the times that's
20:53 - how beginners accidentally connect the
20:55 - wrong element because they they think
20:57 - they're clicking the right element here
20:59 - in the storyboard and dragging the right
21:00 - element but in fact it's the wrong one
21:02 - but if you do it from the document
21:03 - outline here it's it's less ambiguous
21:06 - it's more clear as to what you're
21:08 - connecting so we're gonna connect the
21:10 - left element the left image view element
21:14 - first hold down ctrl click and drag here
21:18 - let go I'm going to call this the left
21:21 - image view let's connect that and what
21:25 - also helps is if you create a little bit
21:27 - of open space right there let's connect
21:30 - this second one hold down ctrl click and
21:33 - drag it here this is the right image
21:36 - view now there are two common beginner
21:39 - mistakes I want to highlight the first
21:40 - one I already told you about is if you
21:44 - accidentally have connected the wrong
21:46 - element what I'd like to do is after I
21:49 - connect each one you can right-click it
21:51 - and you can just that will check that
21:53 - this is connected to the left image view
21:56 - property and this one right here right
21:58 - click this is connected to the right
21:59 - image view property and if it's not then
22:03 - you know you connected the wrong element
22:05 - and you should do what I showed you
22:06 - earlier
22:07 - now other times let me just break the
22:12 - connection for the right image view and
22:13 - delete this guy let me show you another
22:15 - common beginner mistake so I'm
22:19 - connecting this right image view here
22:21 - and I might accidentally make a typo I
22:24 - might call it the right I might call it
22:28 - the right image or something like that
22:29 - and oh no I've made a typo so I go ahead
22:32 - and I delete that and then I connect it
22:36 - again this time you know I name it
22:40 - properly the way I wanted to what
22:43 - beginners fail to realize is that now
22:45 - your right image view element is
22:50 - connected to two iboutlet properties
22:53 - this correct one and also the type of
22:55 - one that you deleted so you're gonna
22:57 - want to right-click that guy you can see
23:01 - how here it's connected to two
23:02 - properties right well this right image
23:04 - one doesn't even exist anymore so go
23:06 - ahead and click the X to break that off
23:08 - and now it's only connected to the the
23:11 - proper one
23:12 - so those are two beginner mistakes that
23:15 - often occur and cause app crashes so
23:17 - you're going to want to make sure that
23:18 - your elements are connected properly
23:21 - next thing we're going to connect is
23:23 - what's called an IB action now IB action
23:26 - is kind of like an iboutlet
23:28 - but the only difference is that an IB
23:30 - action lets you respond to events that
23:34 - are raised by elements in your
23:37 - storyboard here so for instance this
23:39 - button when the user taps on it it
23:42 - generates this event called the touch up
23:45 - inside and if we want to connect some
23:48 - code to that event we can do that by
23:51 - connecting that event on the button to
23:55 - an IB
23:56 - should function so let me go ahead and
23:58 - show you how to do that we're going to
24:02 - want to drag things over on the right
24:04 - here but instead of up here this time
24:07 - we're going to want to do it as a
24:09 - function so you know a good place to do
24:12 - it would be right here above maybe not
24:15 - up there you could do it you could do it
24:18 - there or you can do it here as long as
24:20 - it's not inside another function we're
24:23 - going to do it in here which is
24:26 - basically if you scroll all the way down
24:28 - this is the last closing bracket this
24:33 - closing bracket matches the opening
24:36 - bracket for your class up here okay so
24:39 - right above that that's where we want to
24:41 - add this IB action function
24:43 - so go ahead hold down control on your
24:46 - keyboard click and drag the button down
24:48 - here and then release now you might say
24:51 - that this is what we did for adding an
24:54 - iboutlet and you wouldn't be wrong but
24:57 - the difference is that under connection
24:59 - here you want to change that drop down
25:00 - to action and you want to change the
25:04 - type here to UI button and then the name
25:07 - we can type in anything we want I'm
25:10 - gonna put button tapped and click
25:13 - connect now you can see that is it is an
25:15 - IB action function here and inside in
25:18 - between this opening bracket in this
25:21 - closing bracket we can put some code to
25:23 - execute the code inside here is going to
25:27 - be called whenever the button is tapped
25:29 - on now let's double check our work if we
25:33 - go back here and right click on this
25:34 - button you can see that under the sent
25:36 - events section touch up inside is
25:39 - connected to view controller button
25:42 - tapped the same things apply if you made
25:47 - a typo and you try and connect another
25:49 - IB action just double check this menu
25:53 - here it's probably a little harder to
25:57 - make a mistake with the IB action with
25:59 - the button because I think that I might
26:03 - be wrong but I think that this event can
26:06 - only be connected to
26:08 - let me just try that out right now okay
26:15 - yeah so it can be connected to two
26:18 - actions in this case when you tap on
26:21 - that button I'm pretty sure both of them
26:23 - will fire but you want to make sure that
26:25 - it's only connected to what we want
26:27 - which is button tapped and I'm going to
26:30 - go ahead and delete this other IB action
26:31 - function okay so now we're ready to add
26:36 - some images to our storyboard and the
26:41 - last thing we're going to do after that
26:42 - is then work on this button tapped
26:45 - function so go ahead and click this
26:48 - button which shows you the standard
26:50 - editor and we can zoom back in by
26:53 - clicking this so the images are going to
26:57 - be available in a link below the video
27:00 - so you can download them and you can use
27:03 - them in the app to follow along I've got
27:05 - it right here on my desktop after you
27:07 - download it onto your desktop you're
27:09 - going to double click it and unzip it
27:12 - you're gonna get a folder called images
27:14 - and it's gonna contain all the images
27:17 - that we're going to need for this
27:18 - application so go ahead in the file
27:22 - navigator of Xcode click on assets dot
27:25 - XC assets and this is what's called the
27:27 - asset library we're going to be able to
27:30 - add images here in here and name them
27:33 - and then we're going to be able to refer
27:35 - to them so what I want you to do is
27:38 - highlight all the images you can press
27:41 - command a in this folder to highlight
27:43 - everything but I don't want you to drag
27:46 - in the icon folder so hold down command
27:48 - click the icon folder so it's unselected
27:52 - or deselected and then you can drag in
27:56 - the rest of these images into this
27:58 - column right here in the asset library
28:01 - so you can see me dragging them in and
28:04 - I'm gonna put them right here see when I
28:09 - let go what happens is that it groups
28:12 - based on the image names it groups these
28:15 - images together so for dice one you can
28:17 - see I have the one X version the 2x and
28:19 - the 3x and these are just different
28:20 - sizes of the same
28:22 - image asset for the different
28:24 - resolutions on different iPhone devices
28:27 - if you look in the folder you can see I
28:29 - have here dice 1 PNG dice 1 app 2x dot
28:33 - PNG and dice one at 3x dot PNG they're
28:36 - all the same asset just different sizes
28:38 - and when you drag them all into Xcode
28:42 - like that it should be smart enough to
28:44 - combine them and we have this and this
28:49 - this is the felt for the table and these
28:51 - are the dice if it doesn't do this for
28:54 - you what you can do so for instance if
28:57 - it you know just does that maybe it it
29:01 - separates or something maybe you get you
29:04 - get something like this where you have
29:06 - dice 1 and then these two aren't filled
29:08 - and then you have dice 1 - 1 and only 2
29:10 - X is filled well you can do is you can
29:13 - delete this one and only have dice 1 and
29:15 - then you can manually drag the two X
29:18 - version into this slot and then drag the
29:20 - add 3 X into this slot Xcode should be
29:24 - smart enough to detect it for you though
29:26 - if you drag it together okay so now
29:29 - we're done in the asset library here for
29:32 - now and we're going to go into the
29:34 - storyboard and we're going to add at the
29:39 - background so for the background we're
29:42 - going to want to add it behind this
29:44 - stack view we're going to make a giant
29:45 - image view anchor it to all four sides
29:49 - and it's going to be behind the stack
29:52 - view we don't want to place it into the
29:53 - stack view because then it would
29:56 - basically put our background below the
29:58 - button which we don't want okay so let's
30:02 - go down here make sure you're looking at
30:04 - the object library search for image view
30:09 - and instead of dragging it into the view
30:12 - I'm going to drag it directly into the
30:14 - document outline where I want it so
30:17 - click this guy and drag it now make sure
30:20 - you don't accidentally replace the Veet
30:23 - the root view you see here how my root
30:26 - view is highlighted in blue if I let go
30:28 - now it's actually going to replace my
30:30 - root view with the UI image view and
30:32 - it's gonna break everything so I just
30:35 - did it
30:35 - and what you can do in this instance is
30:38 - press command Z or Zed if you're
30:41 - Canadian like me and undo okay so you
30:45 - want to just be careful about that
30:47 - so click and drag the image view make
30:50 - sure it's a blue line like this okay
30:51 - and you might accidentally put it inside
30:54 - the stack view like I just did here but
30:56 - it's very easy to just click and just
30:59 - drag move it right above the stack view
31:02 - there like that so in the end you want
31:04 - something like like this where you have
31:08 - the image view right below the root view
31:10 - and the stack view on top of that image
31:12 - view and the stack view obviously
31:13 - contains our label the dice image the
31:17 - dice image views in the button okay so
31:20 - now when I highlight this new image view
31:23 - that we just added let's add some
31:25 - constraints you click this add
31:27 - constraints button and we're going to
31:29 - remove the constraint of margins
31:31 - checkmark right because we want an
31:33 - edge-to-edge
31:34 - let's choose 0 for all four sides but
31:38 - this time I'm going to click this drop
31:40 - down and I want it relative to the view
31:42 - and that's going to change the number
31:45 - again so I'm going to hit 0 again and
31:47 - down here this one I want it relative to
31:51 - the view and not the bottom layout kind
31:53 - so I'm gonna choose the view there it's
31:54 - gonna change the number back to 270
31:56 - let's change it back to 0 this button
32:00 - should read add four constraints if it
32:02 - doesn't read add four constraints then
32:04 - you want to make sure all of these four
32:07 - light red lines are enabled you click
32:11 - that you might have to click the update
32:12 - frame spun you might not and you should
32:15 - have the image view it's kind of in the
32:18 - background of the stack view right now
32:19 - there is no image on it so you can't
32:22 - really tell but highlight that image
32:25 - view go over here in this inspector and
32:28 - in this attributes inspector pane change
32:32 - the image the drop down should show you
32:35 - all of the images in your asset library
32:37 - and choose table now you can see the
32:40 - felt here some of the text is hard to
32:44 - read now so click the label and let's
32:47 - change the color of it
32:49 - two white and four this button let's
32:53 - change some of the stuff as well so for
32:56 - the image drop-down let's use roll and
33:00 - let's change the the word button here to
33:05 - roll okay and you know that should be
33:10 - okay you can even you can set some of
33:12 - the images for these image views if you
33:15 - want so for instance click the Left
33:17 - image view change the image under three
33:20 - click this guy change it to five or
33:23 - something like or four okay so now we're
33:26 - ready to go back into our view
33:28 - controller dot swift press command s to
33:32 - save your project inside here in the
33:36 - button tapped we're going to want to add
33:37 - some code so first things first let's
33:40 - just try modifying the label in the
33:43 - image views because we did connect the
33:45 - label element and the to image views
33:47 - here as these properties so let's go
33:50 - ahead and type in label and that
33:52 - references the label that we added in
33:55 - the storyboard it's got a property
33:56 - called text so I write dot text and I
34:00 - can change this to any string I want
34:02 - string is just a piece of text so let's
34:05 - say I can say hello dice and for
34:10 - instance let's change some images for
34:13 - the left image view it's got a property
34:17 - so I press dot called image and it
34:20 - accepts a type of UI image okay so I'm
34:24 - gonna have to create a new UI image
34:28 - object so if these these terms
34:33 - properties and objects and classes if
34:35 - these terms are kind of fuzzy to you you
34:38 - should either watch the learn Swift for
34:40 - beginners series I'll link to that below
34:42 - or the start here you know the war app
34:46 - series the basics which I'll also link
34:49 - to below the video so you should watch
34:51 - those first because it's gonna get you
34:53 - started on the right foot with that
34:55 - terminology and with those basic
34:56 - concepts so the UI image class has a
35:01 - as an initializer function called named
35:04 - where I can pass in a string and that
35:06 - string is going to be the the image
35:10 - asset name so if we go here it's named
35:13 - dice one dice two days three days four
35:15 - days five and die six with capital D so
35:19 - let's try that out
35:21 - let's do dice six and then down here
35:25 - right image view dot image equals UI
35:28 - image named and this autocomplete is
35:33 - really handy it just tries to guess what
35:36 - you're typing and you can then choose
35:38 - and just press ENTER and I'll complete
35:39 - it for you let's make this dice one okay
35:46 - so your syntax should look something
35:48 - like this and if you're even missing one
35:50 - bracket or one quotation mark or you
35:54 - know it's on a separate new line like
35:56 - this it may not work correctly so you
35:58 - have to make sure everything looks just
36:02 - the way I have it here let's go ahead
36:04 - and run our app up here instead of the
36:08 - iPhone 7 plus I'm going to choose the
36:09 - iPhone 7 because I think iPhone 7 plus
36:11 - has a ton of extra space and our app
36:16 - isn't really designed for that it'll
36:20 - still work but you're gonna have a lot
36:21 - of empty space so I'm gonna choose the
36:23 - iPhone 7 and I'm gonna click this button
36:25 - to run the application it's gonna launch
36:28 - the iOS simulator here it just simulates
36:34 - a real device and you're gonna see your
36:35 - app on it so here we've got our label
36:38 - our to our dice here and this roll
36:42 - button and the reason it that none of
36:44 - the text changed then you know this is
36:46 - not six and this is not one like we've
36:48 - said it here is because this code only
36:51 - executes when the button is tapped
36:53 - remember this IB action only fires when
36:57 - the roll button is tapped so when I tap
36:59 - it you're going to see that label change
37:01 - and those images change the only problem
37:04 - is that each time I click roll it
37:06 - doesn't randomize right so that's kind
37:09 - of the problem here what we need to do
37:11 - is simply create two random numbers
37:14 - now I'm going to create two variables
37:16 - here we can probably even use constants
37:19 - instead var first number more equals
37:25 - we're going to use the arc for a random
37:28 - function and the upper bound is going to
37:31 - be 5 and because it starts randomizing
37:33 - from zero to whatever the upper limit is
37:35 - so if I put 6 here it's going to
37:37 - randomize from 0 to 6 so I'm gonna do 0
37:40 - to 5 and I'm going to plus 1 so then I'm
37:43 - gonna get the ranges from 1 to 6 instead
37:47 - okay next I'm going to say let's second
37:51 - number equals arc for random and I'm
37:54 - gonna do the same thing here plus 1 okay
37:58 - so now we have something to work with
38:00 - for our label I'm going to say sum or
38:04 - the sum is : and somehow I want to add
38:11 - these two numbers together right and
38:13 - then put it here we're going to use this
38:18 - little syntax here have this backslash
38:21 - and then two rounded brackets like this
38:24 - in this lets you insert a variable into
38:28 - the string so if I did something like
38:31 - this and put in first number it would
38:33 - read the sum is : and then whatever
38:36 - first number was but inside here I'm
38:40 - going to put first number plus second
38:42 - number and then it's going to add these
38:44 - two guys up and insert them into the
38:47 - string here let's just test that out to
38:50 - see if that we get the proper thing okay
38:56 - so I'm rolling you can see the sum
38:58 - changing right I assume it's correct
39:03 - another thing we can do is we can
39:05 - actually print out these numbers into
39:07 - the console using this print statement
39:11 - so we can say print first number print
39:15 - second number like that let's run it
39:18 - again I press command R on my keyboard
39:20 - to run it you can press this button here
39:23 - up here in the Xcode interface also to
39:26 - run it so when I click roll
39:28 - now because I'm printing out the numbers
39:29 - I can see if it matches see four plus
39:31 - three is seven let's click it again I've
39:36 - got two and four now and that is six
39:38 - indeed okay so that's working get rid of
39:42 - these print statements here now we need
39:44 - to change the images so as you can see
39:47 - we've conveniently named the assets dice
39:50 - one all the way to dice six so all we
39:55 - need to do it really is change this
39:56 - number here again let's use that trick
39:59 - where we can insert a variable into a
40:01 - string so let's get rid of six and do
40:05 - this backslash followed by two brackets
40:08 - like that and let's insert first number
40:11 - into that string now you have to make
40:13 - sure that there is no space between this
40:16 - e and this slash right because if you
40:18 - did that then the resulting image name
40:22 - would be dice space and then whatever
40:25 - the number was and that is not going to
40:27 - match up with these names we have here
40:30 - in in the asset library so you want to
40:34 - make sure that there's no space between
40:36 - the e and the the forward slash or
40:39 - backslash sorry for this one second
40:42 - image view I'm going to get rid of the
40:45 - one and do the same thing except I'm
40:46 - going to put in the second number here
40:48 - now I'm going to press command R or
40:52 - click this button to run the application
40:56 - and when we click roll we get these
41:01 - different images and we get the sum up
41:04 - there now one thing I want to mention is
41:06 - that if you have any missing images like
41:10 - if you click on roll and then you get
41:12 - kind of an empty space there you don't
41:15 - have the corresponding dice image I
41:18 - would double check in the asset library
41:21 - that you actually have the images and
41:25 - that they're named capital D dice with
41:29 - the number behind it because when you
41:32 - have an empty image that means that
41:35 - whatever you're setting here that name
41:37 - it can't find that image so either you
41:40 - have a typo here you might
41:42 - you might have done like lowercase dice
41:44 - right in that case you're not gonna find
41:46 - any of the images in the asset library I
41:48 - want to make sure that it's capital D
41:51 - dice there's no space between the e and
41:53 - the slash there and in that you actually
41:58 - did you know you did drag all of the
42:01 - images into the asset library here okay
42:05 - and that should be it so now you have
42:07 - this working app now if you wanted to
42:12 - launch this on your phone you can
42:14 - actually just plug in your phone to your
42:17 - computer right now and then in this menu
42:20 - you should see your device here so I
42:25 - have my phone plugged in right now but
42:27 - it looks like haven't updated my OS so
42:29 - if you have you can select your phone
42:32 - like that and you can try running it on
42:34 - your phone so I hope that was helpful I
42:37 - hope that was fun and I hope you learned
42:40 - a lot
42:40 - I'm apologized to those people who you
42:43 - know have been through a lot of this if
42:45 - I went a little slow but I feel like for
42:47 - beginners this would be perfect I made
42:50 - an extra effort to kind of explain where
42:53 - the pitfalls were as well so if you've
42:55 - enjoyed this tutorial and you want to
42:56 - see more make sure you're subscribed to
42:58 - channel and also go on my website code
43:00 - with Chris common sign up for the
43:01 - newsletter because there are times where
43:04 - I send out emails on tutorials that are
43:06 - written only and I don't have a video
43:08 - version so you want to make sure that
43:10 - you get those as well and finally if
43:13 - you've completed this dice roll app I
43:15 - want to know about it because I'm trying
43:17 - to collect some more social proof I'm
43:18 - trying to bring more awareness to code
43:22 - with Chris so I'm gonna have a section
43:23 - at the end of this this dice roll app
43:26 - written tutorial where I'm going to
43:29 - feature people who have completed the
43:31 - app so if you'd like your name
43:33 - featured in the section below this
43:36 - article where I'm going to show all the
43:37 - people who've completed the app then
43:39 - simply just go to the code with roots
43:41 - comm go to this page here I'll probably
43:44 - put a link to this page in the
43:46 - description below the video and scroll
43:48 - all the way to the bottom to the wall of
43:50 - fame and you're going to be able to send
43:52 - out a tweet that basically says you've
43:55 - completed it and
43:56 - then I'm going to immortalize you by
43:58 - saving your tweet and linking it to your
44:01 - Twitter profile in the Wall of Fame at
44:04 - the end of this blog article so if you
44:08 - do do that I thank you and I really
44:10 - really appreciate it be sure to leave a
44:12 - comment and let me know what you think
44:13 - of this tutorial and look forward to
44:16 - seeing more from me thanks for watching
44:18 - thanks for learning with me and I'll see
44:19 - you guys next time bye for now
44:23 - [Music]