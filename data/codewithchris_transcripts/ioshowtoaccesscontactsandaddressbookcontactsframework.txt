00:00 - for the chat app that we're building i 
had to learn how to access the contacts  
00:03 - on the user's phone now this turned 
out to be way easier than i thought  
00:07 - it would be so this is what i'm going 
to show you how to do in this tutorial  
00:11 - now before we dive in i just want to give a quick 
reminder that we do have a code with chris ideas  
00:15 - board the link to that is in the description 
below using this ideas board you can vote on  
00:20 - topics that you'd like to see or suggest ideas of 
your own all right with that said let's dive in  
00:26 - so here i've got a brand new Xcode project 
and the first thing we're going to do  
00:30 - is import the contacts framework now let me just 
bring up the documentation page for this framework  
00:36 - from apple and this contacts framework is  
00:40 - basically interacting with the address book and 
grabbing all of the user's contact information  
00:46 - it's actually very easy to use so i'll show you 
both how to grab all of the contacts and how to  
00:52 - then parse out the contact information 
for specific data like phone numbers or  
00:56 - email addresses and names things like that i'll 
show you all the keys that are available to get  
01:01 - and also how to fetch specific contacts based 
on maybe a specific phone number a specific name  
01:09 - or specific email first of all let's import this 
contacts framework so we can start working with it  
01:15 - so import contacts not contacts ui just 
contacts and this basic project just has  
01:22 - that hello world text label what i'm going to 
do is create another method down here called  
01:28 - fetch all contacts and we are going to call this 
method when this text label appears so on up here  
01:36 - i'm just going to perform fetch all contacts 
now uh here's what we're going to have to do so  
01:44 - let me add a reminder to ourselves first 
we're going to have to run this in the back  
01:52 - background asynchronously because we don't want it 
to block the ui so fetching contacts uh it has to  
02:01 - be done as a background task so that there is no 
telling for example how many contacts the user has  
02:08 - it could be a lengthy operation so it runs we 
need to run it in the background second of all  
02:15 - we need to get access to the contacts store 
and then we need to specify which keys  
02:26 - which data keys we want to fetch okay so let's run 
through this looks like a lot but it's actually  
02:33 - very easy so we're going to declare a new 
constant called store and we are going to  
02:38 - create a new instance of c and contact store 
and through this contact store we can call
02:48 - we can call method to fetch all contacts and 
this method is called enumerate contacts with  
02:58 - um and then you pass in what data fields that 
you want from your contacts so do you want the  
03:02 - name do you want the phone number do you want 
the email because you don't want to fetch all  
03:06 - the information so you use you can specify which 
pieces of information you want and then using  
03:12 - block this allows you to specify a block of code 
that is run for every contact that gets fetched so  
03:17 - then you can you can save that information into 
your own array you can display it on the screen  
03:22 - you can do anything you want and the last thing 
to notice is that this potentially could throw an  
03:27 - error let's say that the user hasn't given you 
permission to access their contacts that would  
03:32 - throw an error okay so we need to call this method 
and we're going to need to pass in that fetch  
03:39 - request which is where we specify the data keys 
that we want and then here is where we specify  
03:45 - that closure that block of code that we run for 
each contact first of all let's put this in a do  
03:53 - catch block for error handling purposes because 
remember this could potentially throw an error  
03:58 - so what we need to do is add the try keyword in 
front of it and also wrap this in a do catch block
04:09 - so uh if there was an error 
execution or handle it here  
04:18 - now we're sort of going to go backwards 
we're going to go up and we're going to  
04:22 - take a look at how we're going to 
create this contact fetch request
04:32 - so let fetch request equals 
it's a cn contact fetch request  
04:39 - in order to create this you just have to 
pass in the keys that you want to fetch  
04:43 - and this is an array of c and key descriptor now 
below this video you're going to find a list of  
04:50 - keys that you can fetch so i'll link to this 
page called contact keys and you could fetch  
04:56 - all of these different pieces of data associated 
with each contact so for example given name is  
05:04 - i believe it's their full name if i'm 
not mistaken it might be their first name  
05:08 - actually sorry this is the first name 
this is the last name and middle name  
05:13 - and then this is like mr mrs miss that sort of 
thing and there's also like there's addresses  
05:21 - there's phone there's you know all the data you 
see in your own iphone address book so we're  
05:27 - going to specify let's say given name for the 
first name and we're also that's that's right  
05:33 - here we're also going to specify the phone number 
uh phone number there we go phone numbers key now  
05:42 - it's going to fetch all the phone numbers so you 
potentially have maybe a mobile number a work  
05:47 - number all of that is going to be fetched so you 
can only specify that you want phone numbers you  
05:52 - can't specify like which specific phone number you 
want so we're going to create an array right here  
06:00 - for this the keys that we want to fetch so 
let keys equals a cn contact given name key  
06:11 - and also cn contact phone numbers key and notice 
that the keys that i'm specifying here these are  
06:21 - actually strings oops i just clicked that 
one these are actually strings right here  
06:27 - however what we need to pass in here 
is an array of c and key descriptor so  
06:33 - it's basically the same thing you just need 
to cast this as a cn key descriptor array  
06:40 - and then you can pass your keys right into the 
fetch request so i know we sort of went backwards  
06:47 - but let's just recap what we've done here we've 
created a contacts store which is sort of our  
06:51 - entry point into grabbing all the data we need we 
created an array of keys this is the data that we  
06:57 - want to fetch for each contact and then we pass 
that into a fetch request which this object we're  
07:05 - going to pass into this method called enumerate 
contacts and this method is called on the  
07:10 - the contact store that we created up here so 
let's go ahead and put in our fetch request  
07:16 - and let's double click this block right here to 
open up a closure so that we can write the code  
07:21 - that we want to execute for each contact that is 
fetched so let's double click that this is the  
07:27 - actual contact and this i don't know what this 
parameter is used for to be honest i tried to  
07:34 - check the documentation didn't really tell me 
much and i ended up not having to use this so  
07:40 - i i think this is success or failure i believe 
because it's a boolean so anyways i'm going to  
07:48 - call this parameter contact because that is the 
main thing we need i'm going to call this result  
07:55 - and in here i'm going to do something  
07:58 - with the contact for now let's just print 
out contact dot given name okay and then
08:12 - we'll just print error right there okay 
now before we run this however oops
08:21 - now before we run this we're going to 
need to ask permission from the user  
08:25 - in order to fetch essentially 
run this line of code  
08:29 - at the point you're trying to access the contacts 
it's going to check if you have permission  
08:34 - i'm going to run this app without asking for 
permission just so you can see what happens
08:42 - okay so you see a crash you'll see that this 
app has crafts because it's attempted to access  
08:47 - privacy sensitive data without a usage description 
the info.plist must contain an ns contacts usage  
08:54 - description key with a string value explaining 
to the user how the app uses this data so you  
08:59 - can go ahead and c copy and paste that or you can 
i'll show you how to type it out so let's go into  
09:05 - the info.plist so if you're using an older version 
of xcode you might see that here this is xcode 13  
09:12 - so i'm going to go up to the app here and if you 
switch click your target switch over to info right  
09:17 - here and you're going to see your essentially 
info.plist right here you're gonna click  
09:22 - the plus icon on the last row and you're 
gonna type in capital p and then lowercase i  
09:29 - oh you can't see it hold on let me do that 
here okay capital p r i privacy right and then  
09:38 - you can search for privacy dash contacts usage 
description that's what we need and we're going  
09:44 - to need to fill in a reason now alternatively you 
could just copy this ns contacts usage description  
09:51 - and you could simply paste that 
here and you'll see that it actually  
09:54 - knows what your what you're referring to 
now let's add let's say i don't know reason
10:03 - for accessing contacts you're gonna have 
to do better than that though for your app  
10:08 - okay so let's run it now and see what we get
10:13 - oh sorry so okay this is what 
happens when you're not running that  
10:21 - contact fetch request in the background 
so i did mention that we had to do that  
10:26 - you can see it pop up now um i don't 
really want to answer this now but  
10:31 - i've sort of okay you know what i'm gonna do i'm 
just gonna delete it and we'll try that again
10:39 - i'll show you how to do it in the background using 
a sync and a weight the new asynchronous you know  
10:46 - way to do things so what we have to do is label 
this method as a sync because we want to run it  
10:51 - in the background and then if you try to build 
this you might see something like okay it's failed  
10:59 - trying to build this async call in a function that 
does not support concurrency so when this happens  
11:05 - we're going to create a new task init like that 
and async is always matched with a weight right  
11:14 - so we're going to put the awake keyword in 
front of our async method when you do that  
11:18 - you're essentially going to be running this in 
the background okay so let's run our app again  
11:24 - and this time should work as expected all right 
so the text hello world has appeared and then um  
11:31 - we are getting this request and here's reason 
for accessing contacts i'm going to click ok  
11:36 - and then later i'll show you what happens when 
you click don't allow and how to mitigate that  
11:40 - so let's click ok you'll see here it's printed 
out all our contacts i realized i didn't show you  
11:46 - the contacts on the simulator so 
we have these people right here  
11:52 - and you can see it matches that in 
no particular order and some of these  
11:57 - people have multiple phone numbers all right so 
let's print out some some information so if i
12:05 - uh let's say let's just print a contact itself 
and remember that we fetched uh we fetched the  
12:15 - given name you see family name these data we 
didn't we didn't specify it in the keys that  
12:20 - we want to fetch so it's not fetched however we 
did fetch phone numbers all right in phone numbers  
12:28 - like i told you there's multiple 
phone numbers so this is actually an  
12:31 - array of all of the different phone 
numbers so let's print out contact  
12:37 - given name and then we are going to loop through 
the phone numbers of the contact so for number  
12:45 - in contact dot phone numbers we are going to 
print out the number and actually let's print out
12:56 - let's indent it so then we can see
13:06 - all right see what we get okay so we have kate 
and then we have dash and this is the phone number  
13:13 - now each phone number has two 
pieces of data it has a label  
13:18 - and it has a string value you can see the string 
value is the actual number whereas the label is  
13:23 - basically is that the mobile number 
the work number and whatnot but this  
13:26 - label is not really meant to be shown like 
that so for example if i said number.label
13:35 - maybe colon
13:38 - number dot string value sorry it has
13:49 - value so this is a little confusing right 
here because this is the phone number and  
13:55 - it has a label property and then a value 
property the value is a cn phone number  
14:02 - where the string value of that is the 
actual phone number so it's actually  
14:07 - value dot string value that's how 
we're gonna access the phone number
14:13 - oh i'm missing a bracket so let's give that a try 
all right so you'll see we now have like mobile  
14:22 - and then phone number main and then phone number 
but as i said this label isn't really meant to be  
14:29 - shown as is because it contains all of 
these characters and and things like that  
14:36 - so sort of what we're supposed to do instead 
is we can do a switch on the number.label  
14:44 - and then we can just compare it i mean this is 
a a bunch of extra work that we have to do but  
14:50 - that's the way it is so cn uh contact 
phone uh sorry i think it's labeled
15:01 - label phone number yeah here it is 
cn label phone number mobile so if  
15:08 - the label is equal to that 
then we are going to print
15:14 - mobile
15:20 - contact dot sorry contact number 
dot value dot string value  
15:27 - another case is cn label phone number let's say 
work phone number there is a work right work fax  
15:37 - home fax main i guess there's no work 
label so we'll do main print main
15:48 - number dot value dot string value  
15:53 - and then we always have to have a default 
with a switch statement so we just print
16:00 - other
16:03 - number down value that string value
16:07 - okay so this is how we're going to 
display that instead of what we had before  
16:12 - so now we have a switch statement 
okay so let's run this again
16:20 - all right so now you have you know the given 
name and then we're looping through the  
16:24 - the phone numbers and if the phone number 
label matches mobile then we're printing mobile  
16:30 - if it matches main then we're printing main so 
on so that's how you're going to get your nicely  
16:36 - formatted phone numbers all right so now i'm going 
to show you how to search for specific contacts  
16:42 - so let's stop this and we're 
going to create a brand new method
16:47 - a fetch specific contacts
16:54 - so we're going to this is going to be async 
again and this time we're going to call  
16:59 - specif specific contacts so again uh run this in 
the background um get access to the contacts store
17:16 - so let's store equals cn contact store but now i 
want to show you what method we call so store dot  
17:22 - unified contacts matching so you're we're going to 
be able to specify what's called a predicate here  
17:29 - where we can search by like let's say first name 
or whatnot and then it also has a keys to fetch  
17:34 - which you've already seen and lastly notice that 
it also throws so let's create the predicate and  
17:40 - let's create the keys to fetch first so let keys 
equal cn contact given name key c and contact uh
17:55 - phone numbers okay that's it and for some reason 
that that method doesn't require the the keys  
18:04 - as an array of key descriptors so we don't have 
to use this as cn key descriptor as we had here  
18:12 - so let predicate equals and we can create 
a special predicate contact.predicate
18:22 - as a type method off of the cncontact class 
so here you have a couple of different things  
18:27 - you can do right matching name matching 
email address matching like a specific  
18:32 - phone number if you have an id you 
could do here we're going to do this  
18:36 - matching i'm just going to specify oops satisfy 
kate see if we can get something from that  
18:44 - okay so let's store dot unified contacts matching 
we're gonna pass in our predicate we're gonna  
18:52 - pass in our keys oh actually we this is a cn key 
descriptor so my bad i thought i didn't need to do  
18:59 - that before we'll see if it works because i i felt 
like i didn't cast that as a cn key descriptor  
19:09 - like what we did here before and it still worked 
so we're gonna have to do this in a do catch block
19:23 - okay keys to fetch search criteria
19:34 - perform fetch okay so we are going 
to select contacts equals that
19:45 - expected okay i don't know what i was 
thinking so cn key descriptor here we go  
19:53 - okay let's build this everything looks good 
and then i'm just gonna print out contacts  
20:00 - that were fetched okay and this should be okay so 
let's give this a run okay so it's done something  
20:09 - yeah so who did it find here yeah so i 
found kate and then the phone numbers
20:18 - um you know for example we could put we could 
search by anything but that's just the basic  
20:23 - example of how to perform a specific fetch 
now i want to show you what happens if the  
20:27 - user denies you'll notice that every 
time i've launched it i haven't been  
20:31 - asked for permission again that's because it 
remembers what the user has chosen before so  
20:38 - if we delete the app right and we do this 
again yes delete it if the user denies i'll  
20:47 - show you what happens don't allow you get an error 
access contacts denied with error access denied  
20:54 - permission has not been granted to access the 
contacts the thing is if i run this app again  
21:00 - it doesn't even ask the user again it's 
just remembers that the user denied it  
21:04 - now at what point do you get this error and how 
do you handle it uh it it happens i'll just like  
21:12 - let's put a breakpoint right there so we can 
walk through it together okay so there it is  
21:17 - we can create the contact store we can create the 
keys the predicate at this point when we call this  
21:22 - method on the store that's that's when we jump 
down here all right so in your production app  
21:30 - if the user had not allowed it you catch this 
error and you notice that it's this sort of  
21:36 - access denied error then you can show the 
appropriate message to the user to say like hey  
21:41 - you know you denied it before in order to 
grant us permission go to the settings and  
21:46 - you're gonna have to they're gonna have 
to manually switch it so they're gonna  
21:49 - have to essentially go to settings uh i think 
there's a yeah privacy and then there's like um
22:00 - you should be able to access your 
specific app i can't exactly remember  
22:05 - where it is oh there it is yeah so you can see 
that i was trying i was doing this for the chat  
22:11 - app but see this is denied because the user denied 
it so they're gonna just have to toggle that on  
22:17 - and once they do that if we run the app again
22:22 - now go through the same ordeal and we were able 
to grab the contact this time it doesn't even ask  
22:29 - the user because they've allowed it in their 
settings so that's how simple it is to use the  
22:35 - apple contacts framework so i hope that was 
helpful if you have any specific questions  
22:41 - about this do feel free to post in our code 
crew forum and someone from the team or myself  
22:45 - will jump in to help thank you so much for 
watching and i'll see you in the next one