00:00 - hi welcome to lesson 7 in the previous
00:02 - lessons you learned about some basic
00:04 - Swift code and also how to organize that
00:06 - code into executable blocks called
00:08 - function well in this lesson you're
00:10 - gonna learn about how to organize and
00:12 - group those functions together into
00:14 - what's known as a class before we go on
00:16 - I just want to say something learning
00:18 - something new is hard seriously I know
00:20 - firsthand because I fail that learning
00:22 - Iowa's programming myself when I first
00:24 - tried for coming this far give yourself
00:26 - a pat on the back especially if you've
00:28 - never coded before I know you might be
00:30 - wondering variables constants functions
00:32 - classes why the heck do I need to know
00:34 - all of this stuff well by the end of
00:36 - this lesson and when you start to watch
00:38 - the next all the pieces will fall into
00:39 - place we're going to go back to the
00:41 - Xcode project I'll point out all the
00:43 - little pieces to you that we've been
00:45 - learning about in the past three lessons
00:46 - and you'll have a Eureka moment so I
00:49 - want you to pay extra attention to this
00:51 - video because it's the last lesson that
00:52 - we're gonna do on Swift before we go
00:54 - back to our Xcode project and finish
00:57 - building that war card game app all
00:59 - right here we go
01:00 - all right so we're starting with this
01:01 - playground and I've got two functions
01:03 - here you should be able to read this
01:05 - Swift code and understand what they do
01:06 - here's the thing these functions don't
01:08 - actually do anything but you can read
01:10 - the function names one function is
01:12 - supposed to initiate cruising and the
01:14 - other function is supposed to initiate
01:16 - the rocket thrusters now for instance
01:19 - inside this function we're supposed to
01:21 - write the code that will initiate the
01:23 - rocket thrusters essentially to carry
01:26 - out the task set out by this function
01:28 - and likewise in here we are supposed to
01:31 - write the lines of code that will
01:33 - initiate cruising now all of the lines
01:36 - of code that we write in here they all
01:38 - contribute and they all relate to this
01:42 - task well we can go on to say that these
01:44 - two functions have related
01:46 - responsibilities that serve a higher
01:48 - purpose for instance we can group these
01:50 - two functions together into a single
01:53 - class let's see how we can declare a new
01:55 - class I'm going to declare it up here
01:59 - create some space we start with the
02:02 - class keyword and then we are going to
02:05 - put the name of the class and I'm going
02:08 - to call the name
02:10 - spaceship and then you hit space and
02:12 - then you open up a pair of curly
02:15 - brackets and inside the pair of curly
02:17 - brackets let's create some space because
02:20 - all of the functions that are related to
02:22 - this class are gonna go in there so I'm
02:25 - going to highlight these two functions
02:28 - like this I'm going to press command X
02:31 - my keyboard to cut it and then I'm gonna
02:34 - put my cursor inside the curly brackets
02:36 - of my class and I'm going to press
02:38 - command V to paste these two functions
02:41 - inside my class when the function is
02:44 - inside of a class like this it's no
02:47 - longer called a function it's actually
02:49 - called a method of that class I know
02:51 - it's kind of confusing
02:52 - check out these diagrams first we had
02:55 - functions and then we put them inside of
02:57 - a class and now they're called methods I
02:59 - want to talk about variable scope for a
03:01 - second in the last lesson you learned
03:03 - that declaring a variable inside of a
03:05 - function it only exists within that
03:08 - scope so for instance we declared a
03:10 - variable called name in function a we
03:13 - cannot access that name variable in
03:15 - function B because function B has its
03:18 - own scope same goes for the reverse if
03:20 - we declare a variable in function B we
03:22 - can't access it within function a
03:25 - because that variable only exists within
03:27 - functions B's scope now get this the
03:30 - class actually has its own scope you can
03:33 - actually declare a variable inside the
03:35 - class that sits outside of any function
03:37 - this variable exists inside the entire
03:40 - scope of the class since function a and
03:43 - function B are also inside the scope of
03:46 - that class they can both access that
03:48 - variable when you declare a variable
03:50 - inside the class but it's outside of any
03:53 - functions it's called a property of that
03:56 - class again I know it's confusing
03:57 - because we're kind of changing the name
03:59 - on you when it's inside of the class but
04:01 - that's what it's called so let's see
04:04 - this in action I'm going to declare a
04:06 - property up here that is inside my
04:09 - spaceship class but outside of any
04:11 - functions and I'm going to declare it
04:14 - I'm going to call it fuel level and I'm
04:19 - going to go ahead and set that to 100
04:21 - for instance
04:22 - inside of
04:23 - the thrust function we will need to
04:25 - access the fuel level property to
04:27 - determine if we can perform the thrust
04:30 - so let's just check if we can access
04:32 - that guy like that and let's wait for
04:39 - Xcode to do it Oh actually it's not
04:41 - going to output this because we need to
04:44 - call the thrust function it's not going
04:46 - to run this code until this function
04:48 - gets called however we know that we can
04:50 - access the fuel level property from
04:53 - inside the thrust function now let us
04:55 - try something else here if I declared a
04:58 - variable inside Cruz let's just call it
05:01 - test equals test from within the thrust
05:05 - function I can't access that test
05:09 - variable you're gonna see that it throws
05:11 - an error here so this proves that the
05:14 - scope of the functions remain the same
05:18 - right each block of code inside of the
05:20 - function is in its own little bubble
05:22 - right it's in its own little scope but
05:25 - however when you declare something
05:27 - outside of the functions but inside the
05:29 - class that is available for the entire
05:31 - scope of the class right so even in here
05:35 - in Cruz I can access the fuel level
05:40 - property let's get rid of that print
05:43 - yeah so there are no errors with the way
05:47 - it is right now inside both functions I
05:50 - can access fuel level because fuel level
05:52 - exists for the entire scope of the class
05:55 - let's go ahead and erase these print
05:58 - statements all right now we're gonna
06:03 - take a giant leap and I'll explain to
06:05 - you how classes are used it's going to
06:08 - require a little bit of abstract
06:10 - thinking I just want to say that in my
06:12 - four years of teaching iOS programming
06:13 - this is one of the hardest concepts if
06:16 - not the hardest concept for beginners
06:18 - who have never programmed before to
06:20 - understand however once you get this
06:22 - concept you'll have passed a major hump
06:24 - that so many beginners have given up
06:26 - that I'm done talking let's do this so
06:29 - let's use our analogies here so we have
06:31 - some data and we have some variables and
06:33 - constants as sticky tabs now we have
06:35 - functions then caps
06:37 - these pieces of code let's say that
06:39 - functions are like file folders now we
06:41 - have classes that contain a bunch of
06:44 - functions and variables and let's say
06:46 - that the class is like a file box that
06:48 - contains the file folders and the pages
06:51 - well at the end of the day what we have
06:53 - is just a file box full of instructions
06:55 - it doesn't actually do anything some
06:57 - people think of the class like a recipe
07:00 - some people say to think of it like a
07:03 - blueprint what's the common thing here
07:04 - they all need someone or something to
07:07 - turn this set of instructions into
07:09 - action someone takes the recipe and
07:11 - turns it into a cake someone takes the
07:14 - blueprints and builds a spaceship this
07:16 - spaceship will work exactly like we've
07:18 - designed it to it can thrust and it can
07:20 - cruise because we gave it functions to
07:22 - do so but understand that the class
07:24 - itself doesn't thrust our crews it's the
07:27 - actual object that gets created from the
07:29 - class that will thrust their crews
07:31 - furthermore once you have a blueprint
07:33 - you can make multiple spaceships each of
07:36 - them will have its own fuel level and
07:38 - ability to thrust their crews the
07:41 - blueprint is called the class and the
07:43 - objects that are created are called
07:44 - objects or instances of the spaceship
07:47 - class all right so who is that person
07:50 - that will take that class and turn it
07:52 - into an object well that's the device in
07:54 - your hand it's like a mini computer you
07:57 - write your instructions in Xcode Xcode
07:59 - will turn it into a format that can be
08:01 - understood by your device and your
08:03 - device carries out those instructions
08:05 - here's the tricky part
08:06 - you need to write instructions to tell
08:09 - the computer to take your classes and
08:11 - turn them into objects and furthermore
08:13 - you need to write instructions to tell
08:15 - the computer how you wanted to use those
08:17 - objects for example your write
08:20 - instructions like when the user taps on
08:22 - the lift off button create an object
08:25 - from the spaceship class call the thrust
08:27 - function of that object and then call
08:30 - the cruise function of that object that
08:33 - could be an app right there let's go
08:35 - back to our playground and see how we
08:36 - can write instructions like this so here
08:39 - we have our spaceship class that's this
08:41 - whole thing right there and it's got a
08:44 - property called fuel level and it's
08:46 - called two functions right here so in
08:48 - order to take this spaceship
08:50 - and turn it into a spaceship object this
08:53 - is what you do you call the class by its
08:56 - name like that and then you put in those
08:58 - two rounded brackets and that statement
09:01 - will return a spaceship object to you
09:04 - now just like a function returns a value
09:06 - to you we need to assign this new object
09:09 - to a variable so we can keep track of it
09:12 - so let's create maybe we can use a
09:15 - constant this time let's create a
09:18 - constant called my ship and then equal
09:21 - and this line right here creates a new
09:24 - spaceship object and we're going to
09:26 - assign that object to the my ship
09:28 - constant now remember back in the first
09:31 - Swift basics lesson I told you that
09:34 - variables and constants can only be
09:36 - assigned data of a single type watch
09:39 - this I can't do something like my ship
09:42 - equals 10 now alright because 10 is an
09:46 - integer and what did I sign to it first
09:49 - I assigned to it a spaceship object your
09:53 - class is actually also a data type now
09:56 - so where I could do something like this
09:59 - no var my int is datatype of type int
10:04 - you know and assign a 10 here I am
10:07 - specifying that this variable will
10:10 - contain this datatype I can do this this
10:15 - variable will contain objects or this
10:19 - type so that's why I cannot assign my
10:23 - ship equals 10 because once I create a
10:26 - spaceship object and assign it to my
10:28 - ship it can only be assigned spaceship
10:30 - type of objects and don't forget that
10:33 - this is a constant so I can't even
10:35 - reassign anything to it but if it were a
10:37 - variable I could assign a new spaceship
10:41 - object to it I can create another one
10:43 - and then assign it to my ship but I
10:45 - cannot start assigning other data types
10:47 - to it all right now the next order of
10:49 - business is how do I take that object
10:52 - that this variable is pointing to and
10:54 - then access the fuel level property or
10:58 - call the cruise or thrust function let
11:01 - me show you how to do that so we're
11:03 - going to type in
11:04 - my ship that's the variable right and
11:06 - it's pointing to our spaceship my object
11:08 - and then I'm going to use what's called
11:10 - dot notation so I'm gonna just press dot
11:13 - on my keyboard and then it's gonna show
11:15 - me all of the available properties and
11:18 - functions that I could access and call
11:20 - so for instance if I chose thrust like
11:23 - this I would actually be calling the
11:25 - thrust function of this spaceship object
11:28 - if I did this my ship cruise I would be
11:32 - calling the cruise function of the
11:35 - spaceship object and if I did this I can
11:39 - print it I would be accessing the fuel
11:41 - level property of this spaceship object
11:44 - now I can actually also set it so I can
11:49 - do dot fuel level equals 10 and then
11:54 - when I do that the new fuel level will
11:56 - be 10 and you can see that it prints it
11:58 - out here it's gonna be 10 so using dot
12:00 - notation you can access the methods and
12:03 - properties of that object I like to
12:07 - think that coding an app is like writing
12:08 - a script for a movie the movie script is
12:11 - your app code the character roles are
12:13 - the classes you designed but the
12:16 - character roles themselves they don't do
12:17 - anything those roles need to be filled
12:20 - by physical actors and actresses just
12:23 - like we need to turn classes into
12:25 - objects then the actors and actresses
12:28 - follow the script to perform your movie
12:30 - just like how your objects work together
12:33 - to make your app function alright so all
12:36 - that was pretty abstract but in the next
12:38 - lesson we're gonna put all of it into
12:40 - practice let's recap what we've learned
12:41 - you've learned about classes and how
12:43 - they contain methods and properties you
12:46 - learned that classes don't actually do
12:47 - anything themselves they need to be
12:48 - turned into objects first these objects
12:50 - are also called instances of that class
12:52 - you learned how to create an instance of
12:55 - a class you learned about the dot
12:56 - notation and how it can be used to
12:58 - access the methods and properties of a
13:00 - class you also learned about the
13:02 - variable scope within the class itself
13:03 - if you need to re-watch this video and
13:06 - ask any questions you might have in the
13:08 - comment section below I also have a
13:10 - worksheet for you to practice what
13:12 - you've learned today in the next lesson
13:13 - you're going to start bringing your app
13:15 - to life with your newly minted Swift
13:17 - if you're excited like I am type I'm
13:19 - pumped in the comments section below
13:22 - if you'd like this video please
13:23 - subscribe to my channel by hitting the
13:25 - subscribe button below and if you don't
13:27 - want to miss a video make sure you click
13:28 - that Bell icon as well remember you can
13:30 - download this lessons worksheet from the
13:32 - URL that's on the screen or in the link
13:35 - in the description below