00:00 - hello and welcome to my Swift tutorial
00:01 - series for beginners today you're going
00:03 - to learn how to manage a collection of
00:05 - data in what's called an array if you're
00:07 - working with many pieces of data it's
00:09 - going to be hard to manage them all
00:11 - using just constants and variables so
00:14 - let's take a look at how arrays can make
00:16 - our life easier
00:17 - alright stay tuned so Swift has a couple
00:25 - of collection types that you can use to
00:26 - manage your data easily and the one
00:29 - we're going to talk about right now is
00:30 - called an array and this is a collection
00:33 - type that is ordered by indexes and that
00:36 - means that there is a specific order to
00:39 - this list of values so you can see here
00:42 - in this demonstration or this example it
00:45 - starts at 0 and then it goes 1 2 3 4 and
00:49 - so on and so forth and at each position
00:51 - there is a value or a piece of data so
00:56 - there is a defined order and that's
00:58 - really important to know let's jump into
01:00 - the playground where I can demonstrate a
01:02 - need and an example of how to use a race
01:06 - so right here I've got three variables a
01:09 - B and C and let's say that I wanted to
01:11 - change these strings to my dog my cat
01:15 - and my bird well I can go about it this
01:17 - way and say something like this I can
01:20 - just add the word my with a space to a
01:24 - alright so a is dog I'm gonna add my in
01:27 - front of it and reassign it to 8 so that
01:30 - would be my dog so I could repeat this
01:33 - with B and C but I mean this is only an
01:35 - example with 3 items let's say we had a
01:38 - hundred or 200 items then that would be
01:41 - very very tedious right what I could do
01:44 - is also I can put these values into an
01:48 - array and what that looks like is it
01:51 - starts with a pair of square brackets
01:53 - and each item in the array is separated
01:58 - by a comma so I would have dog comma cat
02:02 - comma and then bird so there's no comma
02:06 - at the end it's only in between the
02:09 - actual items so this is an array
02:12 - of three items with dog starting at
02:15 - index zero cat at index one and bird at
02:20 - index two so just like what we saw here
02:23 - yeah
02:24 - dog cat and bird that is our rate so
02:28 - having this array is great but we need
02:30 - some sort of way to reference the items
02:33 - in the array so why don't we assign this
02:39 - array to a constant called my array and
02:42 - in order to access these items all I
02:46 - have to do is say my array and then use
02:49 - my square brackets and then put in the
02:51 - index of the value that I want so if I
02:54 - want a dog I would put in index 0 so
02:57 - it's print that and we can see dog if I
03:00 - wanted bird I would put in index 2 right
03:04 - because it starts at 0 alright so in
03:07 - that case I could do something like this
03:12 - my array 0 is equal to my space my array
03:19 - 0 kind of mirrors this statement right
03:24 - and this shows you that you can use this
03:27 - sort of same syntax and there's actually
03:31 - an error here this is a really great
03:33 - example because I'm trying to assign
03:36 - something into my array at index 0 but
03:39 - this is a constant so I can modify it
03:42 - after it's a sign so I actually need to
03:45 - do variable like that let's make my
03:48 - array a variable all right so this is
03:51 - great because it shows you that this
03:53 - syntax is to retrieve the item at index
03:56 - 0 but I can also assign things into
04:00 - index 0 using this assignment operator
04:03 - like that right so the resulting value
04:08 - at index 0 is guess that my dog right
04:15 - but this isn't very efficient either I
04:17 - mean I'd have to write this line three
04:19 - times or however many times for you know
04:24 - however many pets I have
04:26 - so this is where it gets really powerful
04:28 - because you can use loops we learned way
04:31 - back then in conjunction with a race so
04:35 - let me show you how that works so for
04:37 - example let's use a for loop or a for in
04:41 - loop I mean let's say there's a counter
04:44 - in 0 to 2 right so now I can say I can
04:56 - well why don't we just print it out for
04:58 - now so we can print out my array and
05:02 - then it's access the index I can put in
05:07 - counter in there so let's see what that
05:10 - looks like if I run this code see I'll
05:13 - print out my dog cat and bird but
05:16 - actually it's because this line modified
05:18 - what was at index 0 so let me get rid of
05:20 - that line and let me print this again
05:24 - so you can see dog cat and bird it's
05:26 - merely printing out each index of that
05:30 - array but already this is really
05:31 - powerful right because we have one line
05:34 - of code and it's being looped three
05:36 - times but each time it loops it's doing
05:39 - something different what if we did
05:41 - something like this what if we did my
05:43 - array counter is equal to my right space
05:49 - plus my array counter alright now we're
05:55 - talking because what we're doing here is
05:59 - each iteration of the loop we are
06:02 - accessing that index and then we are
06:07 - adding my in front of it and then we're
06:09 - reassigning it to that same index
06:11 - basically changing the value and then
06:14 - we're printing it out here so if I had
06:17 - 200 items in my array I would just
06:20 - change this to 199 right and that's very
06:26 - little code compared to what we were
06:27 - doing up here right so you can start to
06:32 - see how powerful it is to use arrays
06:34 - with loops now what if we didn't know
06:37 - the range of
06:39 - the array right right here I'm assuming
06:42 - that I know there are three items in
06:45 - here that's why I'm doing this range
06:47 - zero to two well the array comes with
06:52 - some handy properties that we can use
06:54 - one of them is called count which
06:56 - returns how many items are in the array
06:59 - it always starts at zero so we're gonna
07:02 - start at zero if we want to access the
07:04 - first item in the array however we are
07:08 - actually we can use the count property
07:12 - of the right so we can do my array dot
07:14 - count but they're gonna run into a
07:18 - problem with this let me show you why so
07:21 - if I run this code you're gonna get my
07:24 - dog my cat my bird and then index out of
07:27 - range whenever you see this error index
07:29 - out of range you start to think this
07:33 - error message means that we're trying to
07:35 - access an index that doesn't exist in
07:38 - that array it's out of the range of the
07:40 - array well why is that because my array
07:45 - dot count returns the number of items in
07:47 - there ray right so it returns three so
07:50 - our loop actually goes from zero to
07:52 - three inclusive so it's gonna start at
07:55 - zero it's gonna do 1 and it's gonna do
07:58 - two and then it's going to do three and
08:01 - there is no fourth item in our right
08:06 - right this is 0 this is 1 this is 2 and
08:09 - when it tries to access index 3 there's
08:12 - nothing and that's why it crashes and
08:14 - gives us this error index out of range
08:17 - so what we actually have to do when
08:20 - we're working with a race like this and
08:22 - we want to basically use this count in a
08:26 - loop we have to do this minus 1 and then
08:30 - that's going to go from 0 to 2
08:34 - essentially now it's really good that
08:37 - you know about the count property now of
08:38 - the array because that's really useful
08:40 - but there's actually an even easier way
08:43 - to write this for loop we can do
08:45 - something like this for each item in my
08:49 - array do something with it
08:52 - that's really the easiest that you know
08:56 - the easiest that you can get so you can
08:59 - do you know if you need the index for
09:04 - some reason and you need to do something
09:05 - with it you need to reassign something
09:07 - then you'd have to use this method where
09:09 - you're accessing where you're getting
09:12 - the index but if you just want to let's
09:15 - say out put each item or you want to you
09:20 - know use each item without reassigning
09:22 - it into the array then this sort of
09:25 - format is great what it's going to do is
09:27 - it's basically going to loop through
09:30 - every single item in my array and put it
09:33 - into this variable for you to use so let
09:37 - me comment this part out actually let me
09:42 - let me just comment this whole thing out
09:43 - and just a quick tip if you want to
09:46 - comment out a whole block of code you
09:47 - can press a command back slash and that
09:50 - just takes care of that so when we run
09:54 - our code here so you can see this loop
09:56 - very simply it's just printing out the
09:58 - items of the array so this is a quick
10:01 - and easy way to loop through items in
10:03 - the array all right some other cool
10:05 - things I want to show you how to declare
10:08 - an empty array I think this is really
10:12 - important to know because right here we
10:14 - are initializing this variable to this
10:18 - array but what really is the datatype
10:21 - for this array if you were to explicitly
10:24 - write it well I'll tell you it is an
10:29 - array so there's square brackets and
10:31 - inside you put the data type of the
10:34 - array so string this array can only
10:38 - contain string objects all right forgot
10:43 - to mention that part that your items in
10:47 - the array will be the same data type if
10:49 - you wanted to declare an array that is
10:51 - empty to start you could do something
10:54 - like this let's say empty array
11:02 - [Applause]
11:06 - so you could just have an empty array
11:09 - like that but you have to declare the
11:11 - datatype because there is no datatype
11:13 - inside this empty array for Xcode to
11:17 - determine what data type that array
11:20 - should be that's why we have to
11:21 - explicitly specify that right here or if
11:24 - you don't do this you can do something
11:27 - like this let's do MTR a2 is equal to
11:35 - you can do that as well so this is
11:39 - basically creating a new array object
11:41 - right this is a type it's a string array
11:45 - and you're basically creating a new
11:47 - object of that string array type and
11:51 - it's not going to contain anything by
11:53 - default all right now let me show you
11:55 - some ways to work with arrays in terms
11:57 - of adding items and removing items so
12:00 - you can let's to add items first so you
12:03 - can do my array there's methods like
12:09 - append so you're gonna pend a new
12:11 - element or you can even insert so you
12:15 - can insert a new element at a particular
12:18 - index and it's not going to overwrite it
12:21 - it's just gonna push everything back so
12:24 - let's say I wanted to insert frog at
12:29 - index 0 then if I let's say I copy this
12:36 - down here and I print out the items
12:38 - again you're gonna see that it starts
12:44 - with frog this time and then it goes dog
12:47 - cat bird so it inserted for all I got 0
12:50 - and pushed everything else back now
12:54 - another way you can add things you can
12:58 - go plus equals just like that and then
13:01 - you can add a number of items to the
13:05 - back of the array so I can do frog bear
13:09 - and why don't we move this print
13:13 - statement
13:14 - down here and let's see what is in our
13:17 - array at this point so we have frog dog
13:22 - cat bird frog and bear oh and that was
13:25 - that's because I inserted frog at the
13:28 - beginning and then I appended frog and
13:30 - bear at the back so that's our resulting
13:33 - array all right so let me just write it
13:37 - here in case you download the playground
13:43 - it's another animal that I can use
13:45 - there's so many animals out there
13:47 - raccoon it's not like I saw a raccoon
13:51 - out there but it just popped into my
13:53 - mind
13:53 - all right remove items so my array you
13:58 - can remove a particular item at a
14:01 - specific index like that it's gonna
14:04 - remove that item and everything's gonna
14:05 - shift to fill its its place we can
14:11 - remove all right we can move first and
14:15 - remove last we could move the first
14:18 - number of items so there are a lot of
14:22 - options here like I said these
14:24 - collection types are meant to make your
14:25 - life easier to manage collections of
14:29 - data and that's why there are so many
14:31 - handy methods for you to use another
14:34 - thing that you might find yourself
14:35 - wanting to do is searching for a
14:38 - specific item in your array or maybe
14:40 - finding out if an item exists in your
14:43 - array or not search your array and the
14:47 - method to use for that is there are a
14:50 - couple of options there used to be one
14:52 - called index of so you can a returns the
14:56 - index of the item that you search for if
15:00 - it doesn't exist in your array it would
15:02 - return negative one otherwise it will
15:05 - return the actual index button now there
15:08 - are methods like first index of which
15:11 - returns the first index where the
15:14 - specified value appears because
15:15 - theoretically like we saw before frog
15:18 - existed at index zero and existed at
15:21 - index maybe six or something like that
15:24 - in our array and then alternatively
15:27 - there
15:28 - is also last index of so you're
15:31 - searching from the back towards the
15:33 - front and it's going to return the last
15:36 - index of that item what you're looking
15:39 - for so those are a couple of handy ways
15:42 - for you to do some searching within your
15:44 - erase what I have covered in this lesson
15:47 - is enough for you to get the main
15:48 - benefits out of using erase as we
15:51 - continue to build apps together we're
15:52 - going to learn new ways of using a race
15:54 - but for now this is more than enough if
15:57 - you liked this video please give it a
15:58 - thumbs up and please consider
15:59 - subscribing if you haven't already now
16:01 - click on over there for the next lesson
16:03 - and I'll see you there