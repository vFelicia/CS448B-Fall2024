00:00 - Hey everyone.
My name is Mikaela Caron.
00:02 - I'm a full time iOS developer and recently
I've been learning Vapor,
00:05 - so I'm excited to show you how you
can use Vapor to build your own API.
00:09 - So if you go to Vapor codes,
let's learn like what is Vapor?
00:13 - It is a web framework so you can use Swift
to build the website back end of your iOS
00:19 - app rather than using something
like NodeJS or Express JS.
00:23 - So let's get started installing it.
00:26 - First we need to install Homebrew.
00:28 - Homebrew is a package manager for macOS,
00:32 - so scroll down to Homebrew and then
00:35 - the website is Brew
sh that will be in the links below
00:39 - and just copy this
00:41 - and paste it into your terminal,
but I already have it.
00:44 - So I'm not going to put
that there right now.
00:49 - Next we need to install Vapor.
00:51 - So when you're on the main Vapor
00:53 - website here, click on Docs
00:58 - and then install macOS and then
that will bring you to this page.
01:04 - So first you need to download Xcode if you
01:06 - don't already have that
and then go down to Brew.
01:11 - Install Vapor.
01:13 - So copy this and again paste it into your
01:15 - terminal and that'll take
a second to download.
01:18 - So to double check that you
have everything installed,
01:22 - you type Vapor
01:24 - help and then you'll see this like
list of commands that you can run.
01:30 - We are also going to be using Postman, so
Postman can help you test the API side.
01:35 - So our Vapor API without needing like
the iOS app fully functioning yet.
01:40 - So go to postman dot.
01:41 - Com to their downloads page
and click on download the app.
01:46 - Lastly, we will install Azure Data Studio.
01:49 - So Azure Data Studio is basically a Gui
that we will be using
01:53 - to read from our database,
so we can read the data in our database
01:57 - without needing the API
and without needing the iOS app.
02:01 - So this is the Microsoft product,
02:03 - but scroll down to macOS, download
the Zip file and also note right here.
02:09 - It is not compatible with Arm
02:10 - architecture, meaning it's not fully
compatible with the M one MacBook.
02:15 - So you may need to use like Rosetta or
02:17 - something to open it and download
and make everything work properly.
02:23 - Otherwise you can use this
application called Dbever
02:26 - to look at the database.
02:27 - I didn't want to use this one because I
think it's uglier,
02:30 - but you can use this one to download
it or to view the database.
02:36 - And lastly
02:38 - we will be using Docker.
02:40 - So go to Docker.
02:41 - Com and go to their downloads again
and then download Docker desktop and make
02:46 - sure again you choose the right one
for the operating system that you're on.
02:49 - And after you do that
open Azure Data Studio
02:56 - so it'll look like this and you can see
02:57 - it's an open source Microsoft product,
so it looks very similar to Vs code.
03:02 - So click on this button
and this like the packages
03:05 - and extensions that you can do.
03:07 - So just search Postgres SQL
and this is the one by Microsoft
03:13 - and make sure to click Install, which Mine
says uninstall because I already have it.
03:17 - But click on install and then that'll help
03:19 - us because this is the type
of database we will be using.
03:23 - So once we have all of that,
let's go and create our new project
03:29 - so you can see the commands here.
03:30 - Tell us what we need to type.
03:32 - So we need to type paper new
to generate a new application here
03:41 - and we will call this
03:46 - Ytvaper API.
03:48 - So hit enter and it'll start
creating our new project.
03:51 - So do we want to use fluent
03:53 - fluent is what is called an Orm
which is an object relational Mapper.
03:57 - And we will be using that in this project.
03:59 - So type Y and then hit enter
04:02 - what type of database do we want to use?
04:04 - So we will be using Postgres for this.
04:08 - And then do we want to use a leaf?
We are not going to be using that for this
04:11 - project, but it's a templating language
like for making some of the website.
04:18 - So you'll see it ran.
04:19 - If we make this a little bit bigger, it
generated all the files that we needed.
04:23 - It automatically creates a Git repository
for us and creates our own commit,
04:28 - so we don't actually need to
go through those steps.
04:31 - Here's the pretty little water droplet,
04:34 - and then CD Ytvaporapi.
04:37 - So that is our
04:39 - project.
04:41 - And then we use Vapor Xcode
to open the project index code.
04:44 - So
04:45 - we CD into our project directory,
and then I do have an extension on here.
04:49 - So that's why Mine may look
a little bit different right here.
04:53 - And then we type a Vapor Xcode.
04:56 - Open the project.
04:58 - So the first time that we
opened our project here,
05:02 - I'll put that down there
05:05 - it is going and getting all
05:06 - of the different packages
so you can see right here.
05:08 - It's Loading and fetching everything.
05:11 - So we have to wait for this to finish.
05:13 - And while we're waiting for that,
so what we're going to be making is
05:18 - the back end for an iOS app
that will then talk to a database.
05:22 - So the four database operations are
create, read, update and delete.
05:27 - So what that means create is
adding new data to the database.
05:31 - Read is reading the data
from the database.
05:34 - Update is updating any data that's already
05:36 - in the database, and then
delete is deleting it.
05:38 - So when we write to the database,
we're performing these three operations.
05:42 - So we'll be doing create so that's
05:45 - creating some data on the iOS app,
sending the data to our server
05:49 - to the Vapor API and then that sends
it and saves it to the database.
05:54 - And then when we update and delete that's
05:56 - again an operation coming from the iOS app
telling the API to do something,
06:00 - the API taking that and doing
something to the database.
06:03 - And then when we go to read from the
06:05 - database, it starts with the iOS
app asking for data.
06:08 - It goes to the API or the server
06:10 - that tells it, hey,
this is what data we need,
06:13 - and then it translates it and grabs
that data from the database.
06:16 - So the database takes that data.
06:18 - It gives it back to our server
and then sends it back to the iOS app.
06:21 - So we had to download Homebrew,
06:23 - which is a package manager that we had
to use to download everything else.
06:27 - And we had to download postman
postman allows us to test the API without
06:31 - actually needing to create
the iOS app first.
06:34 - And with the database
we are going to be using Azure Data Studio
06:38 - or possibly Dbever, if that's
the one that you had to download.
06:43 - And that allows us to look at the data
06:45 - directly in the database
without having to use our API.
06:50 - So first things first.
06:52 - Let's run the project.
06:54 - So we click Command R.
06:56 - Like any other iOS project,
06:58 - it starts to build a project and make sure
the scheme that's selected is my Mac,
07:04 - and now we get to wait for it to build.
07:07 - You can see these are all the different
07:08 - packages that are inside of our Xcode
project,
07:11 - and these are all the different things
that Vapor needs to be able to run.
07:15 - Okay, after running your project,
07:17 - it may take a while to build on the very
first try, but you'll get this warning
07:21 - saying no custom working
directory set for the scheme.
07:24 - This is because by default it tries to run
07:27 - your application
from the Derive Data folder.
07:30 - Close that from Derive data,
but that's not what we want.
07:33 - We want it to run within this scope.
07:37 - So if we stop our application,
07:40 - click on this button
and then click Edit Scheme
07:47 - from here.
07:47 - Go to make sure you're selected
on Run and then go to Options.
07:51 - We want to check
use Custom working directory
07:54 - from here.
07:56 - Click on the little file folder
and then go and find your project.
08:00 - So find the project
08:02 - in Finder and then click choose.
08:05 - So make sure you select your folder
08:09 - and just click close.
08:11 - And now when we run our project again,
08:14 - it should build faster this time
because it's not the first time we're
08:17 - building the project
and we won't get that warning anymore.
08:22 - Okay, so you may get this prompt says Run
would like to access your documents folder
08:26 - or this is wherever you
ended up saving it.
08:28 - Just click on.
Okay,
08:30 - you may also get this error.
08:32 - So this is warning
08:34 - like address already in use
for some reason.
08:37 - Every so often
08:39 - it doesn't fully detach from the process
when you're running your application.
08:44 - So what we need to do here is type
08:52 - Lsofi80.
80.
08:57 - Which
08:59 - that's the part that we're trying to use
09:02 - Port 8080 and this says
it's already in use.
09:08 - So if we do this, we'll
see something like this.
09:11 - So Localhost
09:13 - is already using this.
09:14 - What we need is this number PID.
09:25 - So don't mind this.
This is part of my terminal.
09:28 - I have like extensions on mine, but type
kill nine and then that PID number.
09:35 - And when you do that, typing the first
command again, we don't get anything.
09:40 - So if we stop our application
09:43 - and run it again,
everything should run like normal.
09:47 - So here we go.
We said
09:50 - server starting on http.
09:52 - 1270, 180 80.
09:56 - So if we open postman
10:00 - right here and go to that address,
10:02 - if we click, send
10:06 - it's, sending the request and we get back,
it works, which is great.
10:09 - It's exactly what we want to see.
10:11 - And then also by default, another
10:14 - route which we'll learn about is in there.
10:16 - So if we click send on Hello,
it says Hello World.
10:21 - So that is exactly what we want to see.
10:23 - And we know our project is working.
10:27 - And then you can see
in the debug log here.
10:29 - The first thing we did was
the root directory.
10:32 - So that's where we just
went to this address
10:35 - with no extension or route on it.
10:38 - And then that's just the request ID.
10:40 - And then we went to slash Hello and we can
10:41 - just see both of those
requests that we made.
10:45 - So let's look into the file structure.
10:50 - Let's first look at package Swift.
10:53 - So Package Swift is our package manifest
10:56 - for SPM, which is Swift package manager,
and Vapor heavily uses that.
11:00 - So you can see right here.
We have a little package.
11:03 - And then if you actually look at
11:06 - the contents of
this directory for our project,
11:11 - we actually don't have
an Xcode project file.
11:14 - That's because this is like a package.
11:17 - You can see we're using Vapor right here.
We are using fluent.
11:20 - So we said that at the beginning
and we are also using Postgres.
11:26 - So if we open up sources sources is
where all of our code is going to live,
11:32 - and we look at controllers by default.
11:34 - It gives us a to do controller
11:38 - by default.
It gives us a Todo application.
11:41 - So here this is where we can group logic
11:44 - inside of controllers rather than
putting it all on a single file.
11:48 - Migrations are used with the database.
11:50 - So we'll be making what are
called database migrations.
11:53 - And this is things like
preparing our database, meaning
11:57 - creating new tables in our database.
12:00 - We have our model.
12:01 - So this is what models the data
that's in our database.
12:04 - And we can use these
within our application.
12:07 - And we have the configure function.
12:10 - So this just has one function in here and
it configures the database we'll be using.
12:17 - It adds our migration
12:18 - and it runs the routes function
and then routes function is where all
12:22 - of our routes are so different
endpoints that will be hit.
12:26 - We will be requesting
from with our iOS application.
12:29 - So we saw first the get route
12:34 - right here.
12:37 - We just hit this basic
1270 one at Port 8080.
12:43 - It returned.
It works.
12:44 - And then when we did Hello right here,
it returned Hello World.
12:49 - So these are the different
endpoints that our API has
12:52 - and then here's the to do controller
12:54 - because the controllers
have their own routes.
12:57 - Instead, the run folder.
12:59 - This contains the code that we need
to get our application up and running
13:03 - so you can see right here.
13:05 - It calls the configure
function that we defined right there.
13:09 - Instead of tests by default, Vapor
gives us a unit test that we can use.
13:15 - So the unit test right here
is starting the application.
13:18 - We are going to the route Hello.
13:20 - And then we want to assert that this is
okay and it gives us back Hello world.
13:25 - We will not be going into unit testing
13:27 - for this series,
so we have a Docker compose file.
13:30 - This is used to create
a multi Docker application.
13:33 - So this configures our API to run
and for the database to run
13:38 - in Docker file.
13:39 - This is what is used to actually create
13:41 - a Docker image, and I honestly don't know
everything that's in both of these files,
13:45 - but we will get into that
a little bit later too.
13:49 - And last is package resolved.
13:51 - These are the exact
versions of the packages that are inside
13:55 - of our project that are
defined in Package Swift.
13:58 - So if somebody were to download and clone
14:00 - your application from like GitHub,
they'll use these exact versions.
14:06 - Unless you go and ask
to update the packages.
14:10 - That is the end of this lesson.
14:12 - We installed all the tools that we'll need
14:14 - for creating our Vapor API
with our iOS app.
14:18 - We had to install Homebrew,
which is a package manager for macOS.
14:21 - We installed Vapor.
14:23 - We installed Postman
and Azure Data Studio.
14:26 - We created a project
and ran it for the first time and we used
14:29 - Postman to hit the default
route and the Hello route.
14:33 - This is the first video that I've
ever recorded on YouTube.
14:36 - So let me know how I did in the comments
and if you have any suggestions,
14:39 - questions, I will see
you in the next part.
14:41 - Bye.