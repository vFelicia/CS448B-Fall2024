00:00 - Hey, Code Crew, it's Chris here in this
00:02 - video I want to review with you how data
plays a part in your views,
00:06 - and also how data flows through
your app across multiple views.
00:10 - We'll start with the simplest scenario
00:12 - with a single view,
and then we're going to work our way
00:15 - into more complex scenarios
involving multiple views.
00:18 - If you've ever been confused about all
00:21 - these keywords, like observable object
observed object published state bindings,
00:27 - all these things we are going
to go through in this video.
00:30 - And by the end, I'll all be
straightened out in your head.
00:34 - Hey, Code Crew, I'm Chris,
and if you're new here, welcome to Code.
00:38 - Is Chris the place to be?
00:39 - If you want to learn how to code and how
to make apps, if you're just starting out,
00:42 - check out our 14 day beginner
challenge right over there.
00:45 - It's the perfect place to start,
even if you've never coded before.
00:47 - And in fact, we have a whole community
00:49 - in our Code crew form going
through the same series right now.
00:52 - All right.
00:53 - Without further Ado,
let's get on to today's topic.
00:56 - So.
00:58 - First let's start out with the simplest
unit of data, which is a state property.
01:04 - Here I have a new Xcode project.
01:06 - Let's start by declaring
a regular property.
01:09 - So.
01:12 - I'm going to declare a property called
01:14 - counter, and it has the value zero right
now and now I'm going to turn it
01:19 - into a state property
by using a property rapper.
01:22 - Now, a property wrapper is a special
keyword that you put in front
01:25 - of a property to give it special
powers or special abilities.
01:30 - So property wrappers all start
01:32 - with the app symbol, and in this case,
the state property rapper is at state,
01:38 - and what this has done has turned this
counter property into a state property.
01:43 - So what can it do now?
01:45 - Well, now the value in this property can
change and then be whenever it changes.
01:51 - It'll notify any view code that is
referencing it, which causes the view code
01:56 - to recompute itself
and show the updated view.
02:00 - So let's take a look at an example
inside our view code right here.
02:04 - It's just a static text label
with the string Hello world.
02:08 - Why don't we change it to say your age is,
02:12 - and then I'm going to reference my
state property, right?
02:17 - Typically, state properties are
used for two different reasons.
02:20 - A it's a value that your view depends
on and B that value can change over time.
02:26 - So coming back into Xcode here
in this text label,
02:31 - it now depends on that state property to
display what we wanted to.
02:37 - And whenever this value in the counter
02:41 - state property changes,
it's going to automatically cause the view
02:46 - code to recompute
updating has been positive.
02:50 - Let me resume that.
02:54 - It's just automatically pause again.
02:57 - But when you actually run your app,
02:58 - if you had some external source changing
this state property, the value of it.
03:03 - I mean, such as maybe a button when you
03:06 - tap on it, we update this counter
property, or maybe some background process
03:11 - that changes this
state property over time.
03:14 - Whenever this value changes,
03:17 - whatever view code depends on,
it will recompute itself.
03:20 - So with that said, let's do a quick recap.
03:23 - Number one state properties store
values that your view depends on.
03:26 - Number two, the value in a state property
can change, and when it does,
03:31 - the view recomputes itself using the new
value and number three state properties
03:35 - are usually declared
in the view that needs them.
03:38 - All right, now let's move on to bindings.
03:41 - What are bindings now in the code that we
03:43 - wrote for the state property,
we sort of have a one way relationship
03:47 - going on where your view code reads
the value from your state property.
03:52 - A binding simply changes that into a two
03:55 - way relationship so that your view code or
your view component can read the value
04:00 - from the state property,
but it can also write values back to it.
04:05 - So I can change the value
of the state property.
04:07 - And that is what a binding enables.
04:10 - Take, for example,
the text field component.
04:13 - To display a text field, you need to
specify a state property to go with it.
04:18 - The text field will read the value
04:20 - in the state property
and display it in the text box.
04:23 - However, since the user can put their
04:25 - cursor in the text field and then write
some text into it,
04:28 - the text field component needs to be
able to store that user input somewhere.
04:32 - That's why we need this relationship
to be a two way relationship.
04:36 - The text field needs to be able to write
04:39 - to the state property to accurately
represent the state of the text field.
04:43 - And we can do this by adding a dollar sign
04:46 - in front of the reference to the state
property in the view code.
04:50 - This now becomes a twoway relationship,
04:52 - so the text field can both read
and write to the state property.
04:55 - So now let's do a quick
example inside Xcode.
04:58 - So coming back to this view here,
let's put this into a V stack
05:05 - and let's create a text field.
05:08 - Now a text field.
05:09 - As you can see here, we can put
in some default text, which I won't.
05:14 - And we also put in a binding.
05:16 - So to specify a binding,
05:18 - you use the dollar sign followed
by the reference to the state property.
05:22 - So I'm going to reuse our counter
state property right there.
05:26 - And what this is going to do is
05:31 - it's got to be a string.
05:33 - So
05:35 - let's actually turn this
into a string instead.
05:39 - So we have a counter right there.
05:41 - Let's just run it in a simulator actually,
so that we can actually type it in.
05:45 - You can see.
05:47 - Alright.
05:48 - So we have our text field here.
05:49 - You can't really see the outline, but I
can actually type something into it.
05:56 - In this case,
05:57 - what's happening is that when I launch it
right, it's reading the value of the state
06:02 - property and it's putting
it into my text field.
06:04 - By default.
It's three.
06:06 - So it's reading three in there.
06:08 - And this text label is also reading
the counter state property.
06:12 - However, this is a one way relationship,
so it's only reading,
06:16 - whereas in my text field,
when I put in some text here like that,
06:22 - it's actually writing the value
back to the state property.
06:25 - And I can do that because of this dollar
06:28 - sign in front of that state
property reference.
06:31 - It is allowing that two way relationship.
06:34 - And you can also see when the value
of the state property changes.
06:39 - This text label automatically detects
06:41 - that and recomputes the view
code to show the new label.
06:45 - So now you see state properties
working in action as well as bindings.
06:51 - So let's do a quick recap of bindings.
06:54 - You put a dollar sign in front of a state
property reference in your view code.
06:58 - Remember not in the declaration,
07:00 - but in the reference to turn it
into a two way read write relationship.
07:04 - So the next question is what is
the app binding property wrapper?
07:09 - Let's go back into Xcode so
we can see it in action.
07:12 - So let's create a brand new view for this
07:15 - and we're going to go new file
is create a brand new Swift.
07:19 - I view a call this Control
07:23 - panel view, and you'll see why in a second
up here we are going to declare a new
07:29 - property called user input,
and this will be a string
07:35 - type, and we are going to use
the app binding property wrapper.
07:40 - Remember, the app symbol means that this
is a property wrapper,
07:46 - which is a key word you put in front of
a property to give it special abilities.
07:51 - So by declaring this user input property
and giving and making it a binding
07:59 - property, you are specifying that when
an instance of Control panel view is
08:04 - created, the creator must also pass
in a binding that binding is going to be
08:11 - from outside of this view,
and when it gets passed in,
08:13 - it's gonna be stored in this user input
property right here and you're going to be
08:18 - able to use it inside your view
code inside Control Panel view.
08:22 - Now, why would you want to do this?
08:24 - To answer this question,
08:25 - consider the fact that usually a view
will be comprised of smaller sub views.
08:31 - This is the break up larger views
into smaller components so that it's more
08:35 - manageable, but more than that,
it promotes reusability in your app.
08:38 - If a particular piece of your UI shows up
08:41 - in multiple views in your app,
break it out into a sub view.
08:45 - That way you can use that sub
view in multiple places.
08:48 - So whenever you have sub views and you
need to access a state property
08:53 - from outside of it, this binding property
rapper is going to come in handy.
08:57 - Now let's demonstrate how this works.
08:59 - So I'm going to create API.
09:02 - Didn't know this project was running.
Let's stop that.
09:04 - Let's create a brand new
view here and call it
09:09 - parent view for lack of a better name.
09:14 - And let's say inside the parent view,
09:18 - you declared a state property
called user input,
09:25 - and this was a string.
09:27 - Initially, it's not going to be anything.
09:31 - And you're going to have a rectangle.
09:35 - And the color of this rectangle is going
to depend on the user input right there.
09:41 - So we're going to say foreground color.
09:44 - We're going to say user input.
09:50 - We're going to test it is equal to blue.
09:53 - If it is equal to blue,
then use the color blue.
09:58 - Otherwise use the color black.
10:02 - Now having your view code depend
on this state property right here.
10:07 - Let's see what we get in the preview.
10:12 - Okay.
10:13 - So we're supposed to pass
a binding in here.
10:17 - I am just going to comment comment
out the whole preview for now.
10:26 - So inside the preview.
10:32 - Alright.
10:33 - So it's black right now.
Right.
10:35 - Because the user input is empty.
10:37 - But if it's blue,
10:39 - then you see blue.
10:42 - Now
10:44 - we're going to have a text field
10:47 - where the user can type in in the text
field is going to change this.
10:51 - So if the user actually types in blue
10:53 - into the text field and it's going to be
blue, but let's assume that this text
10:56 - field is part of a control panel that
appears in multiple places in your app.
11:01 - So we want to turn it into a sub view,
which is what we have here.
11:04 - Right.
So what we're going to do is we're going
11:08 - to create an instance
of control panel view,
11:11 - and you can see that it accepts a binding.
Right.
11:14 - Because in the control panel view,
11:16 - we've declare this app binding
user input property here.
11:22 - So when we declare an instance of it, it's
expecting us to pass through a binding.
11:27 - So what we're going to do is pass
through a binding to the state property.
11:31 - So
11:32 - dollar sign right to turn that into a two
11:35 - way relationship, and we're
going to pass in user input.
11:38 - That's a reference to this.
11:39 - And then what we're going to do is put
both of these views into a V stack.
11:50 - Okay.
11:51 - So that is our control panel view,
and that is the rectangle.
11:55 - And this is right.
11:57 - Now let's change that
into an empty string.
12:00 - So we're going to be black
12:01 - now going back into the control
panel view instead of a label.
12:05 - Here, let's turn this into a text field.
12:09 - And
as we demonstrated earlier with the text
12:13 - field,
you need to specify a binding so that
12:17 - whenever the user
keys in a piece of text into the text
12:22 - field, it can store the user input into
whatever state property it's Bowen to.
12:28 - And will you look at that?
12:30 - We have a binding property and a binding
gets passed into this right here.
12:35 - So you can just specify
user input just like that.
12:41 - Okay,
12:44 - there we go.
12:45 - Now, let's run this app
and see what we get.
12:53 - It's still showing Content viewer here.
12:56 - Let's change
12:58 - our app entry point to parent view.
13:04 - Alright, so we have black API.
13:08 - Want to change our text field style here?
13:12 - Text field style,
13:16 - rounded border and surrounded
border text your file
13:22 - so we can actually see
a border around it here.
13:25 - Okay, so if I type in green,
nothing happened.
13:29 - But if I type in and this is
13:32 - actually a lower case blue, I can
actually type in a lower case right now.
13:39 - So I didn't change my code here
to ignore case
13:47 - lower.
13:48 - Oh, what's wrong with my keyboard?
13:51 - Okay, so I'm going to say lower case,
13:54 - so it doesn't matter what the casing is,
and then we're going to type in blue.
14:00 - So look at what happened here.
14:02 - This rectangle is in the parent view,
and it depends on the state property right
14:09 - to determine if it
should be black or blue.
14:12 - This text field is actually inside a sub
view called Control panel view,
14:19 - and we are passing a binding through
to the state property
14:24 - and from within the sub view.
14:26 - It's actually modifying that state
14:29 - property that is in the parent view, which
is then triggering the rectangle to be
14:36 - black or blue.
14:37 - So that is what the app binding
property rapper is for.
14:42 - So to recap number one,
14:44 - you put a dollar sign in front of a state
property reference in your view code
14:48 - to turn it into a two way read
write relationship number two.
14:52 - The app binding is a property wrapper
to indicate that it expects a binding
14:57 - to be passed to the view when
an instance of the view is created.
15:00 - And this lets a sub view modify a state
property that is not in that sub view.
15:07 - That is, maybe in the parent view.
15:09 - So
15:11 - let's consider what we've learned so far.
15:13 - You learn that state properties are used
to store values that a view depends on.
15:17 - You learn that you can use a dollar sign
when referencing a state property to allow
15:21 - a view component to change
the value in a state property.
15:25 - This is called a binding
to the state property.
15:27 - Furthermore, you learn that if you have
15:29 - a sub view, you can declare
a binding property in the sub view.
15:33 - That way, when you create an instance
of the sub view,
15:35 - you can pass through a binding to a state
property, and the sub view can now change
15:40 - the value of that state property
that exists outside of that sub view.
15:44 - All right, next, let's talk
about observable objects.
15:49 - Remember when I told you that state
15:51 - properties are used to store a value
that the current view depends on?
15:54 - Well, sometimes there may be a value or
15:57 - values that multiple views depend
on like a logged in state.
16:02 - So which single view would you
declare this state property in?
16:07 - It doesn't make sense to declare the state
16:09 - property in any single view since
multiple views depend on it.
16:13 - So this is where an observable
object can come in handy.
16:17 - It can be used to store that state
16:19 - property, which then multiple
views can depend on.
16:22 - Let's see how this works.
16:25 - So first you have your class conform
to the Observable Object Protocol.
16:30 - This lets views observe or listen to
objects of this class for any changes by.
16:37 - Changes to the class aren't published.
16:39 - You must specifically Mark the properties
16:42 - that will publish changes
whenever the value changes.
16:45 - Use the app published
property rapper to do this.
16:48 - Now, if the is logged in property changes,
16:52 - it will publish the change to any
views that are observing my object.
16:56 - Lastly, in the actual view,
16:59 - use a property to store a reference
to the observable object.
17:04 - In order to listen for any published
17:06 - changes from this observable object, use
the app observed object property wrapper.
17:12 - Now in your view code you can reference
17:14 - the is logged in property and change
your view according to its value.
17:19 - And when its value actually changes,
17:21 - your view code will be notified and it
will pick up that change and it's going
17:25 - to recompute the views
to reflect the new state.
17:28 - Alright, now let's do an example in Xcode.
Alright.
17:32 - So I reorganized the files that we were
working on into folders so that if you
17:37 - download this project, it's a little
easier for you to find the sections.
17:40 - Since then we're talking
about observable objects.
17:43 - Now I've created this folder.
17:44 - Now let's create some new files on here.
17:46 - So we are going to first
declare a new view.
17:49 - So let's say this is the account view
17:56 - and then we're also going to create a
another view.
18:02 - This is going to be a sub view called
Balance view and inside the balance view.
18:11 - First of all, we're going
to create our observable objects.
18:15 - So let's go into new file
and say Swift file.
18:20 - This is not a view, right?
18:21 - Remember the observable object is a class.
18:24 - It's independent of any view.
18:25 - So we're going to call this the profile.
18:30 - So.
18:34 - Import first of all Swift UI because
18:37 - that's going to give us access
to the property wrappers and keywords
18:40 - that we need and we're going to have class
profile and to confirm to observable
18:46 - object to use colon and then
just observable object.
18:51 - Don't use observed object.
18:53 - Okay.
18:54 - And then we are going to have a
18:59 - published property called is logged
in and we'll initially set this to false.
19:07 - So then that's all we're going to do here.
19:09 - And then in account view.
19:12 - Remember what we do, right?
19:13 - We use the observed object property rapper
and we're going to call this our
19:22 - maybe profile model and we're going
to create a new instance of profile.
19:31 - Let's just call it profile
for simplicity stake.
19:34 - So
19:36 - by doing this it means that the account
19:38 - view is interested in listening for any
changes in this profile object.
19:45 - Right?
19:47 - This profile object has to be
19:49 - an observable object
in order to publish changes.
19:53 - And if nothing is marked at published,
no changes are going to be broadcasted.
20:00 - The account view is not going
to really get notified of anything.
20:04 - Right?
So it's a combination of all these
20:07 - different keywords that makes this
whole system work using this app.
20:12 - Published property wrapper means
that whenever this value changes,
20:16 - it is going to notify any views that are
observing this observable object.
20:24 - So in this case since account view is
20:28 - observing this
whenever the is logged in property is
20:34 - changing, it's going to update
any view code that depends on it.
20:39 - So now that we have this observed object
property we can use that
20:46 - is logged in property like so
in our view code can depend on it.
20:51 - So we're going to say
if logged in is true,
20:57 - we are going to display
21:00 - Hello and welcome back.
21:04 - Otherwise if it is false then
we are just going to say
21:11 - please log in.
Okay.
21:14 - And then we are going to have a button
that when tapped on it's going to just
21:21 - change that is logged
in property and flip it to true.
21:24 - So let's do stack here.
21:29 - I'm going to put a button here
21:32 - action label.
21:34 - The action is going to be
21:37 - profile dot is logged in and we're
going to just make that true.
21:42 - And then this button is
just going to say log in.
21:47 - So let's clean this up
21:56 - and then Furthermore in balance view,
we are going to do the same thing
22:02 - actually before we do the balance view,
let's just test it.
22:05 - This works.
I have to update the entry point instead
22:10 - of opening up parent feel we
want to open up account to view.
22:15 - All right.
22:16 - So please log in when I click this button.
22:19 - What's going to happen is it's
going to flip this to true?
22:24 - And because our view code depends
22:26 - on that property, this text
label is going to change.
22:29 - So it's going to say
Hello and welcome back.
22:31 - So there you have it that is
an observable object.
22:35 - Our view code inside account view is
depending on what's essentially a state
22:41 - property that is in another
object in another class.
22:46 - Now before we move on to see what happens
22:49 - in a scenario with sub views, let's do
a quick recap of observable object.
22:55 - Number one.
22:56 - The observable object pattern allows you
22:58 - to store state in an object that is
independent from any views.
23:02 - Number two, have your class conformed
23:05 - to the observable object protocol
to allow views to observe it.
23:09 - Number three in the observable object.
23:12 - Use the app publish property rapper
23:14 - to Mark any properties you
want to broadcast its changes.
23:17 - Number four in the views you need to Mark
the reference to the observable object
23:22 - with the app observed
object property wrapper.
23:27 - Alright, now let's take a look
at how this affects sub views.
23:31 - This is what I created
the balance view for.
23:34 - So in here we are going
to also put a balance view
23:39 - here.
23:44 - We're just going to declare a balance
view like that an inside balance view.
23:49 - We are also going to depend
on the is logged in.
23:54 - So if the user is not logged in,
23:56 - we're just going to show
that you cannot see the balance.
24:01 - However, if they are logged in, then
we're going to show the actual balance.
24:05 - So why don't we again
24:07 - use what we've learned and declare an
observed object or profile equals profile
24:15 - right.
24:16 - And that means in here we
can do profile is logged in.
24:19 - If you are logged in, then you are
going to and you can use equals equals.
24:28 - True.
24:29 - If you want to be
24:31 - really clear or you can just omit this
24:35 - for brevity's sake, it's up to you
how what your coding style is.
24:40 - So we're going to say in this case,
24:45 - balance is one dollars.
24:48 - If you're not logged in,
we are not going to show
24:53 - show the actual amount.
24:57 - Okay, so let's run this
and see what we got.
25:00 - Okay, so please log in.
25:02 - We can see the balance.
25:03 - I'm going to hit login and this changes.
25:07 - This detected the change, but the sub view
balance, you did not detect the change.
25:14 - And what is going on now the problem is
actually that the balance view is looking
25:21 - at a different profile object
than the account view is.
25:25 - You see here in the account view,
25:28 - we created a new instance of the profile
object, so the profile class
25:34 - and we assigned it to this
observed object profile property.
25:39 - And then when we tap on the button,
we are changing the is logged in to true
25:44 - of this object that we created up here
in the balance view,
25:49 - it is creating another profile
object and it is observing that one.
25:56 - Right.
25:57 - And that is why inside the account view.
26:00 - When we tap on this login button,
it's only changing
26:03 - the state in this profile object
and not in the one inside balance view.
26:10 - So let's look at a quick diagram so
you can visually see what I mean.
26:14 - As you can see in this diagram,
account view is looking at its own
26:19 - instance of profile and balance view is
looking at another instance of profile.
26:24 - What we actually want is the account view
26:27 - and the balance view to both be
observing the same instance of profile.
26:32 - So in order to fix this so that both views
26:35 - are referencing the same instance of our
observable object,
26:39 - we can use the environment object
modifier and property wrapper.
26:44 - So what's an environment object?
26:45 - Well, it's simply a way to create
26:48 - an instance of an object and have that
object accessible from multiple views.
26:53 - Now consider this diagram.
26:55 - We have a view and then it has a sub view
and that sub view has another sub view.
27:01 - This forms a sort of hierarchy,
and this is known as the view hierarchy.
27:06 - Now it's important to visualize this
27:08 - in your head because when we attach
the environment object,
27:12 - it is only accessible to whichever view
we attach it to and all of its sub views.
27:18 - So there are two parts
to environment objects.
27:21 - One is a way to create an environment
27:25 - object, and then the second part of it is
a way to access that environment object.
27:31 - So first of all,
to create an object and attach it as
27:35 - an environment object,
you use the environment object modifier
27:39 - like you see in the yellow text here
that makes that object accessible
27:45 - to the view and all of its sub
views in the view hierarchy.
27:49 - Now to access the environment object
in any view and its sub views,
27:54 - use the app Environment object property
wrapper, and that property will
27:59 - automatically be filled with a reference
to that environment object.
28:03 - Now let's try this out
in our Xcode project.
28:05 - So
28:07 - in our account view and balance view,
let's change this.
28:12 - Instead of creating a brand new
28:15 - profile object here we are
going to get rid of it.
28:20 - And then in Balance view,
we are also going to get rid of it.
28:24 - And then in the entry point for our app
28:27 - right here where we are creating
an instance of account view.
28:31 - We can use the environment object modifier
28:34 - and we're going to create that profile
object right here.
28:39 - And what this is going to do is make this
particular profile object accessible
28:46 - from the account view and all of its sub
views, which means the balance view.
28:52 - So let's go back to account view.
28:54 - Now.
28:55 - The way that
okay, go back to the account view.
29:03 - For some reason,
the canvas is taken up a lot of space
29:07 - inside here to access that environment
object which we created and attached.
29:13 - We are going to use the environment
object property wrapper
29:17 - and then declare the property like normal.
29:20 - We have to specify the data type of it
29:22 - though, and notice here I'm not
creating a new instance of profile.
29:27 - What's going to happen
is it's going to read
29:31 - this instance and it's going to populate
this property with that instance?
29:38 - So here I can still access the property.
29:40 - And here when the button is app, I can
still change that is logged in property.
29:45 - Now from the balance view,
I want to access that same object.
29:49 - Right again,
29:51 - because Balance view is a sub view
of the account view you see here, right.
29:57 - It can also access the environment object.
30:01 - All I need to do is use
the environment object property rapper
30:07 - like that.
30:08 - And again, I'm not
creating a new instance.
30:10 - In both these cases.
30:12 - It's acting this instance right here.
30:15 - Now if I run
30:18 - this and I hit this button,
you can see that both the account view
30:24 - and Balance view are looking
at the same profile object.
30:28 - So let's do a recap number one.
30:31 - The environment object modifier allows you
to make an object accessible to the view
30:35 - you attach it to plus
all of its sub views.
30:38 - Number two from the view that it
is attached to an any sub views.
30:42 - Access the environment object with the app
Environment object property wrapper.
30:47 - So
30:49 - what about identifiable
hash able and decodable?
30:52 - You might be confusing these keywords
for something to do with dataflow,
30:57 - but these are actually
used for different things.
31:00 - The identifiable protocol helps Swift UI
31:04 - distinguish from different items
when you're iterating through them.
31:07 - Maybe you're trying to display it
in a list or an A for each loop.
31:11 - Mashable is another keyword
31:13 - for the navigation view
and the tab view to distinguish between
31:18 - different values as well, and decodable
protocol is used for JSON parsing.
31:23 - When you're trying to turn JSON data
31:26 - into usable instances of some struct or
class, you might have declared,
31:31 - these are all topics that we can cover
in another video,
31:34 - but I didn't want to cover in this video
because they don't really have to do
31:39 - with what we're talking about today, which
is data flowing through a Swift UI app.
31:44 - There's also another topic which you may
31:46 - or may not have heard of,
which is called a Singleton class,
31:49 - and this sort of has implications
for dataflow and Swift UI.
31:55 - However, it is a topic that deserves its
31:57 - own video,
so just to give a quick overview of it,
32:01 - if you turn your class into a Singleton
class, that means you can only create one
32:06 - instance of that class in that instance is
globally accessible anywhere in your app.
32:11 - This is really handy,
32:13 - but it can be easily abused,
because if you made everything a Singleton
32:17 - class, then you wouldn't care about data
flow through your app because everything
32:22 - would be globally
accessible from anywhere.
32:25 - And the danger of that is that it
can make debugging really hard.
32:29 - It can make maintenance really hard,
32:31 - and also it's prone to a lot of logic
errors simply because it's too free.
32:37 - There are no constraints.
32:39 - So I hope that clears things up for you.
32:42 - If this lesson helps make things more
clear for you,
32:45 - please show your appreciation by giving
this video a thumbs up down below.
32:49 - I appreciate that.
32:50 - The other thing I want to mention is
that this lesson was actually taken out
32:54 - of our screencasts collection
in our CWC plus program.
32:58 - If you're interested in getting access
to all of the training courses
33:02 - and learning journeys inside our CWC plus
program, there's a special offer
33:06 - for YouTube viewers like yourself
down below in the description.
33:09 - Lastly, I just want
to say I appreciate you.
33:11 - Thank you for watching and I'll
see you in the next video.