00:00 - hello welcome to learn Swift for
00:02 - beginners lesson 10 in this video you're
00:04 - going to learn about inheritance
00:06 - otherwise known as subclassing which
00:08 - allows us to build upon previous classes
00:11 - which we've already defined and it saves
00:13 - us a lot of time and effort and work so
00:16 - that we don't have to keep defining
00:17 - classes that do similar things okay so
00:20 - let's get started and see how this
00:21 - [Music]
00:25 - works let me start by doing a small
00:28 - recap of what you've learned in this
00:30 - Series so far so you learned about
00:31 - variables and constants to store and
00:34 - keep track of data you also learned
00:36 - about some control flow and conditional
00:38 - statements so that you can express logic
00:40 - and make decisions with your code and
00:42 - then you learn about functions where you
00:44 - can Define blocks of code that perform
00:47 - specific tasks as a way of organizing
00:49 - your code into more manageable chunks
00:52 - and then you learned about classes which
00:54 - is a further way where you can organize
00:57 - related code and related functions
00:59 - together
01:00 - as well as related variables um in the
01:03 - form of properties and then today you're
01:05 - going to learn about inheritance AKA
01:07 - subclassing as a way to further organize
01:10 - your code okay so let's take a look at
01:13 - uh inheritance in a playground so I'm
01:16 - going to launch xcode here I'm going to
01:18 - get started with a brand new playground
01:21 - and let's call this um
01:25 - inheritance
01:27 - playground okay let's just save it on my
01:29 - desktop top there and get rid of this
01:31 - line of code so let's say that the app
01:34 - we're building is kind of like a car
01:36 - simulator or something like that and we
01:38 - need to define a class that represents a
01:40 - car so we're going to start by creating
01:44 - a car class just like that and some of
01:47 - the things that it may have is for
01:51 - example it needs to keep track of a top
01:54 - speed right because different cars may
01:56 - have different uh ranges for the top
01:58 - speed I'm just going to initialize that
02:01 - to 200 so there may be a whole ton of
02:04 - other attributes or properties to do
02:06 - with cars but for demo purposes I only
02:10 - need one so I'm not going to go further
02:12 - than defining top speed there and I want
02:15 - to define a function so a car by
02:18 - definition is a vehicle that can be
02:20 - driven right so I'm going to create a
02:23 - function uh called
02:25 - drive just like that it doesn't accept
02:28 - any parameters
02:30 - and inside this function it's going to
02:32 - perform all the code that we need to
02:35 - drive a car but you know for this demo
02:38 - I'm just going to print driving at and
02:43 - then I'm going to put in top
02:47 - speed like that so this um this value in
02:52 - this top speed property get substituted
02:53 - in there and then it prints out driving
02:56 - at whatever this value is 200 so when I
02:59 - call the drive function it's going to
03:01 - print the statement out into the console
03:04 - Okay so we've defined our class here uh
03:07 - that represents a car and in the
03:09 - previous lessons you've learned about
03:11 - how to create a new object right from
03:13 - the car class so why don't we declare a
03:18 - constant uh called my ride and we're
03:22 - going to create a new car object and
03:25 - assign it into the constant my ride just
03:28 - like that we've created a new car object
03:31 - now let me try
03:33 - accessing um top speed right you press
03:36 - Dot and then you can access the property
03:40 - there so you can see it's running the
03:43 - playground okay you can see 200 there
03:45 - and let's try calling the function my
03:47 - ride.
03:49 - drive that and you can see it says
03:53 - driving at 100 okay so now let's say
03:56 - that in this driving simulator app I
04:00 - also have something called a super car
04:03 - or maybe a future car so it's the car of
04:06 - the future for example and it can fly so
04:09 - it's the flying car that will probably
04:12 - come in the future so we can Define
04:14 - another class to represent that and we
04:17 - can call it future car right and again
04:21 - this Future car because it is a car
04:24 - still it's going to have a top speed and
04:26 - let's say this top speed is 250 like
04:28 - that and it's also got a function called
04:33 - Drive um because you can still drive
04:35 - this car and again it's just going to
04:38 - print you know driving
04:43 - at top
04:45 - speed and also this car can fly so let
04:50 - me Define another function that
04:53 - represents you know uh flying the car so
04:57 - flying I'm just going to call it flying
04:59 - like that
05:00 - uh so here we've defined our car class
05:03 - we've defined a future car right here if
05:07 - I want to create
05:09 - another um let's call it my new ride
05:13 - this is a constant and this time I'm
05:15 - going to create a new future car object
05:17 - like
05:19 - that and then my new ride you can see
05:22 - has fly now right and it has drive and
05:25 - it has top speed now let me ask you this
05:27 - question see you can see the similar
05:29 - arities between car and Future car right
05:32 - they both have the properties of a basic
05:35 - car like a top speed and they both have
05:38 - this drive function which is very very
05:40 - similar in fact it's actually identical
05:43 - so this is pretty redundant right
05:45 - there's a lot of redundancy between
05:47 - these two class definitions so this is
05:49 - where inheritance or subclassing comes
05:52 - into play and is very helpful so what
05:55 - inheritance allows us to do is say that
05:58 - one class class inherits from another
06:01 - class and essentially what that means is
06:05 - that if Future car inherits from car
06:08 - it's going to inherit its properties and
06:11 - functions so you don't need to redefine
06:13 - them inside future car so let me show
06:16 - you what I mean here let's in future car
06:19 - let's delete this top speed property and
06:22 - let's delete this drive function and
06:25 - what I'm going to do instead is I'm
06:26 - going to make Future car inherit from
06:29 - car and the way you do that is after the
06:33 - uh class and then class name you put
06:37 - colon like that and then you put uh the
06:41 - the class that it inherits from so in
06:44 - this case I would put car so in this
06:46 - sort of relationship we have car at the
06:49 - top um and we have Future car at the
06:51 - bottom inheriting all of the properties
06:55 - and the functions from the car class in
06:58 - this case Future car would be called a
07:00 - subass of car and car would be called
07:03 - the super class of Future car and some
07:06 - people might call it the parent class so
07:09 - car is the super class or the parent
07:13 - class or maybe simply the parent of
07:15 - Future
07:17 - car let's go back to our playground and
07:19 - take a look at what this means um for
07:22 - our code here so you can see that my
07:25 - ride is still a car object and it still
07:28 - has top speed and it's still has drive
07:31 - but take a look at my new ride right
07:34 - it's a future car object and remember
07:37 - inside future car we've just defined fly
07:40 - we haven't defined anything else in here
07:42 - but if I type in my new ride and I press
07:46 - dot here and let autocomplete do its
07:49 - thing you can see that Future car
07:51 - actually has a drive function and
07:53 - actually has a top speed so you know if
07:57 - I do top speed you can see it's 200 and
08:01 - if I do drive you can see that now
08:03 - Future car or my new ride rather is also
08:06 - driving at 200 and furthermore actually
08:10 - my new ride can also
08:13 - fly okay so there's flying now there's
08:16 - actually a problem here because right
08:19 - now my car and my future car they're
08:21 - both driving at the same speed but
08:23 - remember the future cars are faster
08:25 - right initially I wrote the top speed
08:27 - was 250 so in this case what we can do
08:30 - is to do something called
08:32 - overriding and that allows you to take a
08:35 - function or a property from the parent
08:38 - class or the super class uh and redefine
08:41 - it to essentially that's where the word
08:44 - override comes from so you're overriding
08:47 - the parent version of that function and
08:50 - you're providing your own implementation
08:53 - or your own version of it let me just do
08:55 - it here so you can see what it means so
08:59 - we use the override keyword like that
09:01 - and then we have to declare Drive
09:05 - exactly as it is in the parent class so
09:08 - uh what we're doing is we're going to
09:11 - say print driving at and we're going to
09:16 - instead say top speed plus 50 because
09:21 - this guy goes faster so now you can see
09:23 - that when I call this guy when I call
09:27 - Future car. drive it doesn't use the
09:30 - parent classes Drive function it uses
09:34 - its own overridden definition of what
09:37 - Drive is right so that this is the code
09:40 - that it's running here and you can see
09:43 - it's driving at
09:44 - 250 okay so that's an example of
09:47 - overriding to provide um your own custom
09:50 - functionality now inside this
09:52 - overwritten method there is a way that
09:56 - we can access still um the parent
10:00 - functionality and you can do that by
10:02 - using the keyword super so let me show
10:05 - you what I
10:07 - mean inside this overwritten drive
10:10 - function I can actually access the
10:13 - parent class the
10:15 - definition um all the functions and
10:18 - properties in there if I type in super
10:20 - Dot and then I can access drive so when
10:24 - I do this super refers to the parent
10:27 - class or the super class and this Drive
10:29 - function is actually calling this guy up
10:32 - here right so in this case it doesn't
10:34 - make sense you can see in the console uh
10:37 - when I type in future car. drive it you
10:39 - know it calls the original definition of
10:42 - drive and then it prints this you know
10:44 - its own definition of drive so you know
10:47 - in this example doesn't really make
10:48 - sense but sometimes when you're building
10:50 - your apps what you want to do is add
10:53 - functionality and not override the
10:56 - functionality if that makes sense so you
10:58 - don't want to Place what's uh in the the
11:02 - parent class you just want to add to it
11:04 - and so you can do that if you you know
11:06 - you can call the original definition and
11:08 - then you can add your own code before or
11:10 - after that um to provide additional
11:13 - functionality so in this case maybe I'll
11:15 - just change the statement
11:17 - here
11:19 - and
11:21 - Rockets boosting at you know 50 or
11:24 - something like that so let's see
11:30 - so now you can see that uh this is my
11:33 - original car right when I call drive it
11:35 - says driving at 200 and then my future
11:37 - car is driving at 200 and it's doing
11:41 - something extra and so that's that's how
11:44 - this over it and function works okay so
11:47 - this is a simplified example of how
11:49 - subclassing works but it's essentially
11:52 - how it works and it's very predominant
11:55 - in the Swift programming language as I'm
11:56 - going to show you in the next lesson as
11:58 - you can can see inheritance allows you
12:01 - to save a lot of work by taking what's
12:04 - already there and then improving it or
12:07 - providing you know alternate definitions
12:09 - so you don't have to redefine everything
12:10 - all over again but you can build upon
12:13 - the classes that you already have okay
12:15 - thanks for watching please help me
12:17 - continue to create more videos for you
12:18 - by giving this video a thumbs up and
12:20 - subscribing to the channel uh I'll see
12:23 - you in the next lesson bye for now
12:26 - [Music]