00:00 - this week we're showing another topic which i 
needed for the chat app which is to allow the user  
00:04 - to select a photo from their photo library now 
before we dive in just a quick reminder that we  
00:10 - do have a cwc ideas board and i'll link to that in 
the video below and that's a place where you can  
00:15 - vote for your favorite topic ideas or submit ones 
of your own all right with that said let's dive in  
00:22 - all right so before we jump into xcode i want 
to give you an introduction of the two different  
00:26 - classes that we can use to facilitate 
selecting from the photo library now  
00:32 - the good old trusty one is called ui image 
picker controller and this one provides a  
00:39 - ui for the user so you don't have to build any 
custom ui it's going to lay out all of the users  
00:44 - photo library images in a grid like fashion for 
them to select something and furthermore with this  
00:51 - class you can also choose the source whether you 
want to choose camera which is actually going to  
00:56 - launch a viewfinder so the user can take an image 
and then you'd get a reference to that image that  
01:01 - the user took so you could do something with it 
or you could choose the source for this picker  
01:06 - controller to be the photo library in which 
case it would display all the images in a grid  
01:10 - now this one has been around for a while so you 
can see ios 2.0 um you know it's it's been used  
01:17 - a lot it used to be sort of the de facto solution 
and also this is a ui kit class so just in case  
01:27 - you're new to swift's ui ui kit ui kit used to 
be the old user interface framework nowadays  
01:34 - you know we're fully at least for us teaching and 
apple's you know future looking prospects they're  
01:42 - going with swift ui so you know over time um 
things will gradually shift towards swift ui but  
01:49 - for now there are still a lot of useful classes 
in ui kit and a lot of companies are still using  
01:54 - ui kit because there's a lot of apps and you know 
things that have been created prior to swift ui  
02:00 - so that means that we are going to have to use 
this ui kit class inside a swift ui project  
02:08 - and if you've never done that before it's going 
to be a little bit confusing but i'll take you  
02:11 - through it so don't worry about it there is a 
newer class called ph picker view controller  
02:18 - and this is in the photo kit framework but 
essentially it's still sort of like a ui kit  
02:23 - thing you'll see the availability is ios 14 
and above so it's actually a lot newer and  
02:33 - you can see here some of the benefits of using 
this deferred image loading and recovery ui  
02:38 - more reliable handling of large and complex assets 
and things like that but i'll tell you why i'm  
02:45 - still using the ui image picker controller and 
that is because there are still bugs with this  
02:53 - um even here currently while we're recording 
this this is ios 15. so you know i ran into  
03:00 - some of these issues while first recording this 
demo and i found in the developer forums that  
03:07 - this i feel like this is a pretty big 
problem that the ph picker you can't select  
03:13 - png images from it um you know people are running 
into problems and this was asked a month ago  
03:21 - and this bug is still present and this was only 
two weeks ago and you know seeing that you know  
03:28 - i don't i don't want to work with this right now 
just because i it it doesn't seem production ready  
03:34 - especially if you read this thread there are some 
apps that are already in the app store they have  
03:41 - users you know paying users and the app owner 
upgraded to this new ph picker view controller  
03:48 - only to find out that these bugs exist and you 
know you're going to have a bunch of unhappy users  
03:56 - uh so for now we're going to stick with 
the ui image picker controller all right  
04:01 - with that being said let's jump into xcode 
and let's start this project all right so we  
04:07 - are now going to start a new xcode project so 
under ios select app we're going to call this  
04:13 - image picker demo interface is swift ui language 
is swift and let's let's save this in drafts okay  
04:23 - i'm not going to create a git repository i'm just 
gonna do that and for this for this basic ui let's  
04:35 - change that to iphone 13 and i'm going to put a 
button here and this button is going to say upload
04:43 - so the label is going to say not upload but 
like select a photo and the code is going to  
04:55 - show the image picker now the way we were going 
to do this is through a sheet so we are going to  
05:06 - i'm actually going to put this button inside of 
v stack because when we retrieve the photo from  
05:11 - the photo library i want to show that that image 
so i'm going to put that image above the button  
05:17 - so i'm going to just create a v stack right 
now for that and then i'm going to put the  
05:25 - sheet modifier on the v stack now this has 
a couple of different things so for example
05:35 - there is a binding to a boolean state 
property which dictates whether or not  
05:44 - this sheet is presented and if you've 
never used this modifier before  
05:48 - a sheet is basically a view think of 
it as a view that's going to slide up  
05:53 - so this state property this boolean state 
property is going to dictate whether or not  
05:58 - that view is currently showing so why don't we 
go ahead and create a state property up here
06:06 - and we're going to say show picker initially 
that's going to be false and we're going to set  
06:13 - we're going to pass that state 
property as a binding here
06:20 - yeah maybe this one is picker showing instead
06:26 - okay so binding is using the 
dollar sign dollar symbol  
06:31 - all right so this one on dismiss so when this 
this view is dismissed do we want to run some code  
06:40 - so i'm not going to run anything for 
that so i'm going to put nil and then  
06:45 - for content this is what you want to display 
when this turns true so in other words this  
06:52 - this is what you want to display and you can 
put a block of code in here so i'm going to  
06:55 - double click that to open up a new closure and 
inside here it's going to be my image figure
07:04 - so what do you think i should do when the user 
taps on this button well i'm going to toggle that  
07:09 - to true not toggle because toggle is something 
else i'm actually going to set it to true  
07:16 - and what that's going to do because this 
is a state property it's going to trigger  
07:20 - all the view code that is depending on that 
to recalculate so when i set this to true this  
07:27 - is going to be true and then it's going to 
show whatever i have in here all right so  
07:31 - that's that's simple enough the next thing we 
want to do is actually create the image picker  
07:39 - so as i mentioned before the class that we're 
going to be using is ui image picker controller  
07:44 - now remember the fact that this is a ui kit class 
and it's also a well it's a navigation controller  
07:52 - ui navigation controller and this navigation 
controller is actually just a ui view controller  
07:58 - so there are actually two different ways for us to 
work with ui kit classes and views so let me show  
08:06 - you the way in which we can work with ui view 
controllers which is what this image picker is  
08:15 - so we're going to go back here and we're going to 
create a brand new class let's call it swift file  
08:21 - create a new swift file i mean and 
let's call it image picker create  
08:28 - let's put this right here and we're going to 
import ui kit because that's where the ui image  
08:33 - picker controller class is in we're also going 
to import swift ui so what we're going to do  
08:39 - is create a new struct called image picker and 
we have to conform to this protocol called ui  
08:49 - view controller representable and this is how 
this is sort of the bridge that is going to  
08:56 - bridge that functionality between a ui kit class 
which is what this is to a swift ui project
09:09 - so that was ui view controller representable now 
don't be confused because there is also a ui view
09:18 - representable so that's not 
what we're doing here because  
09:22 - ui image picker controller is actually a ui 
view controller so the one we actually want to  
09:28 - conform to is ui view controller representable 
okay so essentially we're representing this  
09:36 - ui kit class as a swift ui view now there 
are two different functions that we need  
09:44 - to implement to conform to this protocol one of 
them is make and the other one is update so make  
09:50 - ui view controller let's put that in there 
and the other one is update uib controller  
09:57 - now if there's nothing to update we don't really 
have to add any code in here this one is the more  
10:02 - important one because this is where we're actually 
going to create an instance of the ui image picker  
10:07 - controller and return it to use in our swift 
ui view so let's make one let image picker
10:17 - equal ui image picker controller and there's 
just a couple of things we need to set here  
10:23 - uh source type equal now we're not not going to 
do camera for this demo we're going to do photo  
10:29 - library now notice that it says here photo 
library for this you know using using the ui  
10:37 - image picker controller to select from the photo 
library is going to be deprecated in a future  
10:43 - version of ios they don't tell us which version 
in the future but it will be removed in favor of  
10:48 - the ph picker which is what got me looking into 
this but since it's still really buggy uh we're  
10:56 - gonna stick with the uh ui image picker controller 
for now okay so going back here it'll still let us  
11:02 - select photo library it's just warning us okay 
image picker like that and then we are going to  
11:08 - return the image picker that's command b to 
build this make sure everything builds all  
11:15 - right built succeeded let's see if this is 
going to work coming back to content view  
11:20 - this sheet modifier we are going to create an 
instance of that class that we just created  
11:28 - and let's uh give this a 
run let's see what happens
11:35 - okay so select a photo
11:39 - all right well we get we got some ui this is great 
so by default the simulator does have some photos
11:47 - selecting one is also nice because it 
automatically dismisses it that's great cancel  
11:54 - also does the job now we don't have any code right 
now to detect which image the user has selected  
12:02 - that's what we have to add now if you've never 
worked with ui kit protocols and delegates before  
12:09 - this may be a little bit confusing but that is 
the pattern in which ui kid classes communicate to  
12:19 - other you know other components of the app 
so let's walk through how we are going to  
12:27 - detect events from the ui image picker 
controller essentially we need to detect  
12:33 - the event where the user has selected 
an image so the way this works is the  
12:40 - image picker well essentially the ui image picker 
controller class has a property called a delegate  
12:47 - and when the user selects a photo the image 
picker is going to contact the delegate  
12:54 - and call a very specific method and it's going 
to pass through the photo that got selected  
13:01 - through that method so in this property 
this delicate property we need to assign it  
13:09 - i guess you could call it a receiver someone 
like an object to receive this event right so  
13:16 - you can see here that there is a very 
specific type data type of the type of  
13:23 - object that you can assign as the receiver 
you know as the delegate in other words  
13:28 - you can't just assign any object to receive 
you know that information so we're going to  
13:36 - have to create another class down 
here that is of that specific type  
13:43 - that can receive those events so we can assign 
that as the delegate all right so hopefully that  
13:51 - makes sense right we're going to need to assign 
this to something object that can receive image
14:04 - ui image picker controller events okay so we have 
to create a class of that type right now so that  
14:14 - we can assign it as the delegate and that way when 
the user actually selects an image it's going to  
14:20 - contact our object and we can write the code to 
do something so down here we're going to create  
14:26 - a class we're going to call it um let's call it in 
the tutorials and all of the apple documentation  
14:34 - they call it coordinator so that's what i'm 
going to stick with as well so class coordinator  
14:40 - and this coordinator class has to conform to a 
couple of different things well first of all we  
14:47 - have to specify the type of this class is going 
to be ns object and this is sort of like an old  
14:52 - objective c ui kit type thing where it gives 
this class all of the functionality of being  
15:00 - an object second of all this coordinator class has 
to conform to two different protocols in order to  
15:10 - be assigned as the delegate here so first of all 
it needs to be assigned as the ui view image oops  
15:17 - or not uiview ui image picker controller delegate 
and conforming to this protocol basically gives  
15:26 - our coordinator class the ability to handle those 
methods from the ui image picker controller class  
15:34 - next of all next i mean we need to also conform 
to the ui navigation controller delegate  
15:41 - because if you look at here you'll 
notice that the ui image picker  
15:45 - controller is a ui navigation controller 
and this basically allows a couple of  
15:52 - ui view controllers to work together so you're 
able to navigate between them so you'll notice  
15:58 - in this ui image picker controller when it 
popped up on the simulator you notice that  
16:03 - there were a couple of different views like 
we could toggle to the albums view and we can  
16:08 - you know see it see a couple of different views 
and so the ui image picker controller really is  
16:15 - a ui navigation controller that probably contains 
a couple of uh views view controllers so we also  
16:22 - need to conform to the ui navigation controller 
delegate in order to handle handle those methods
16:32 - all right so this is our class and now inside of 
this coordinator class we can handle the methods  
16:39 - that this image picker would call when the 
user has selected something so let's say image  
16:48 - picker controller so there's this one did 
cancel so if you want to run some code  
16:56 - run code when the user has cancelled 
the cancel the ui you know the picker ui  
17:06 - here's your opportunity to do that but the one 
we're more interested in is this one right here  
17:13 - image picker controller did finish picking media 
with info and inside this info parameter you'll  
17:19 - see this is a dictionary and this dictionary 
is going to contain our image data so let's  
17:24 - go ahead and add this method we're going to 
implement here run the code um when the user  
17:33 - run run code when the user has selected an 
image so what's going to happen is when we  
17:43 - create an instance of coordinator and we 
set it to the delegate here so for example
17:53 - now this is not what we should do just i'm just 
showing an example let's let's say we create a new  
17:58 - coordinator object and we assign it to delegate so 
when the user either you know cancels something or  
18:06 - finishes selecting the photo it's going to contact 
the receiver here the delegate um which is our  
18:14 - current coordinator and it's going to call these 
two specific methods depending on what happens  
18:20 - so that's how that communication is going to work 
now we can't actually just create a coordinator  
18:26 - and assign it as the delegate it doesn't work that 
way um with this ui view controller representable  
18:33 - there is something called the context that 
you'll notice here right and the context
18:40 - has a coordinator property right the views 
associated coordinator all right so this  
18:50 - property what it's going to do is just it's going 
to create an instance of this class down here  
18:57 - and it's going to assign it to the delegate 
now you're going to see an error right here  
19:04 - you cannot assign what it's really saying is that 
it doesn't know how to create that coordinator it  
19:10 - doesn't know that we want this class which we've 
called coordinator to be you know to be this one  
19:17 - right here so what's going to happen when we try 
to assign context.coordinator to the delegate is  
19:23 - that it's going to try to create one it's going 
to try to create a coordinator but it doesn't  
19:27 - know what to create so we have to implement 
the method called the make coordinator and  
19:36 - when when it tries to access this it's 
going to call this and then in here we  
19:40 - can implement the code to tell it how to make 
the coordinator so we're going to say return
19:48 - a new coordinator object and so this let's change 
the return type here to coordinator like that
19:59 - all right now uh what we're going to do is set  
20:02 - a breakpoint just to make sure 
this works so let's say print
20:08 - image selected
20:15 - print cancelled so we should see these two 
statements printed in here i just want to  
20:21 - double check that the image picker is calling its 
delegate and calling these two methods all right  
20:28 - so let's run the app right now and then we're 
going to try it out so first of all let's cancel  
20:37 - out of it we'll hit cancel oh you'll see c cancel 
right there so that's awesome uh the other thing  
20:43 - is that when we select an image you'll see image 
selected so this is great because this tells us  
20:49 - that hooking up all this stuff has worked we can 
actually detect the events that that are happening  
20:56 - now notice that we've sort of lost uh because 
we're hand we're actually handling it manually now  
21:03 - we've lost the ability for this to dismiss that 
was sort of free functionality now we're actually  
21:08 - going to have to implement it alright so 
but that's not going to be too difficult  
21:14 - the question now actually is how are we going to 
get the image which we're going to have right here  
21:22 - back to the content view right because 
in this content view what i want to  
21:28 - ultimately do is have an image here and i want 
to display the selected image above the button  
21:35 - so what i'm going to do is i'm going to create a 
state property right here called selected image  
21:43 - and this is going to be a ui image and initially 
this is going to be nil and we are going to
21:53 - we are going to try to display that 
if if selected image is not nil  
22:00 - then we will display that i'm also going 
to make this resizable and i'm going to set  
22:08 - and i'm going to set it to 
200 just just so we can see it
22:16 - um yes i can force unwrap this because i 
already checked that it's not nil here so  
22:25 - i'm going to run this and 
obviously we won't see that image  
22:30 - there's nothing here but ultimately what i 
want to do is when the user selects a photo  
22:36 - i want to assign the selected photo to this 
state property so that it will immediately be  
22:42 - shown i can't even dismiss it now but it'll 
be shown right above the button so what we're  
22:47 - going to do is pass this selected image as a 
binding through to the image picker and then
22:59 - we are then going to pass a reference of the image 
picker through to the coordinator so that when  
23:10 - we get down here we can assign the image to that 
binding and it sort of travels all the way back up  
23:16 - but it's easier to show you than to explain so so 
let's try this out here i've created that state  
23:22 - property to store a reference to the selected 
image inside the actual image picker i'm going  
23:28 - to create a binding called selected image and it's 
going to be of the same type and then this changes  
23:40 - how this is initialized right so i have to 
pass through the selected the binding for  
23:46 - the selected image so i'm going to use the 
dollar sign to represent the binding i'm  
23:51 - going to pass through this state property as 
the binding so now inside of the image picker  
23:58 - if you take a look at right here i still don't 
have access to that binding the reason is because  
24:06 - this is oops this is the coordinator 
class it's completely different from  
24:11 - this image picker structure where we declared the 
binding but how we're going to get access to this  
24:18 - in order to set the selected image is inside 
the coordinator here like we're going to pass  
24:25 - it through the initializer we're going to pass 
through a reference to the image picker through  
24:30 - this initializer and then store that here so 
we're going to create a property called var parent  
24:36 - and this is going to be of type image 
picker and then in the initialization method  
24:44 - so this is going to get called when 
we create a coordinator i am going to
24:52 - i'm going to request that a reference 
to an image picker be passed through  
25:00 - and then i'm going to say self.parent 
which is referring to this  
25:05 - equals parent or maybe just maybe i'll call 
this picker just so it's a little more clear  
25:11 - okay and then when we create an instance of 
coordinator we're gonna have to pass through self  
25:19 - so what's happening here is um when the image 
picker creates a coordinator it's passing a  
25:27 - reference of itself through and then you know 
here we are saving that reference to our parent  
25:36 - property here so that when we come down 
here and the user has selected an image  
25:43 - we have access to it to self dot parent 
dot selected image equals and then we  
25:50 - can set it to the image so let's go 
ahead and do that uh we're gonna say  
25:57 - you know in order i told you that the 
image is in this info dictionary right  
26:02 - so info and there's a very specific uh key 
for the image data for the ui image that is  
26:12 - so and it's ui image picker controller dot info 
key dot original image an original uncropped image  
26:19 - selected by the user so that is the key that 
we're going to pass into this dictionary and  
26:23 - we're going to retrieve it see the data that gets 
retrieved is any because it doesn't know right but  
26:29 - we we know it's a ui image or at least we hope 
it is so just to be safe you can use optional  
26:34 - binding you can use an if statement we're going 
to use optional binding if let image equals that  
26:41 - so if it's not nil it's going to get assigned 
to image and then inside these brackets here
26:49 - we were able to get the image  
26:53 - and we can say self dot parent dot selected 
image equals image now there is a problem here  
27:02 - because as soon as we do this it is going to 
be affecting the ui and we should always be um  
27:10 - changing the ui in the main thread and not a 
background thread right so we are going to use  
27:15 - uh dispatch q main.async in order to run this code 
on the main thread i'm passing passing it back  
27:25 - and yeah so hopefully you can see how this works 
let's test it out and then we'll just recap the  
27:31 - code again there is still one more part we need to 
do which is dismissing the photo viewer okay so ah
27:40 - that's right we can't actually see because we're 
not dismissing it just yet all right we gotta  
27:47 - implement the second part which is dismissing 
it so you know how we already have the state  
27:51 - property is picker showing equals false well 
we might as well pass that through as well to  
27:57 - the image picker and then we can just set this 
to you know false if we want to dismiss it so  
28:02 - why don't we go ahead and do that in the image 
picker we're going to create another binding  
28:08 - far is picker showing uh this is this is going 
to be bool and then inside back in content view  
28:18 - here we're going to add that second parameter and 
this is a binding dollar sign to the is picker  
28:27 - showing close bracket all right 
so now back in image picker we  
28:32 - we have a reference to this boolean and that 
means that we also have that here now we can just  
28:42 - miss the picker now um you know regardless 
of whether or not i was able to retrieve  
28:48 - the image i still want to dismiss it that's why 
i'm putting it outside of that optional binding  
28:53 - if statement right there here we're going to 
say parent dot is picker showing equals false  
29:02 - all right we're going to do the same 
thing here when the user has cancelled
29:08 - okay now let's take a look at this 
this everything should be working  
29:13 - select an image ah there we go awesome 
everything is working perfectly
29:24 - so if this is your first time you know learning 
about protocols and delegates and you know how  
29:29 - the ui kid classes communicate at back out uh 
through through callings very specific functions  
29:38 - or methods i mean then i would suggest that you 
review this video again um that is if you are  
29:46 - planning to work with some ui kid classes so i 
hope that was helpful if you have any specific  
29:51 - questions about this be sure to post in our code 
crew forum where myself or someone from the team  
29:56 - will jump in to help alright thank you so much 
for watching and i'll see you in the next lesson