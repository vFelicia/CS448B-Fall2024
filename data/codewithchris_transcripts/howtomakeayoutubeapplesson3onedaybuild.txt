00:00 - hey coke crew in this lesson we're going
00:02 - to do quite a bit we're going to review
00:04 - the YouTube data API together and then
00:06 - we're going to create all of the classes
00:08 - and structures in our Xcode project that
00:10 - we're going to need in order to work
00:12 - with the API and finally we're going to
00:14 - implement the API call to the YouTube
00:16 - data API so that we can fire off the
00:18 - call from our app and see if we can get
00:20 - a response and I'm also going to show
00:22 - you a cool network debugging tool that's
00:24 - going to come in really handy for
00:25 - working with api's in the future just a
00:28 - quick note if you're jumping into the
00:29 - series at this point you kind of need to
00:31 - watch these lessons in a progression for
00:33 - it to make sense first make sure you've
00:35 - watched the 29 lesson beginner series to
00:37 - get the basic skills then make sure
00:39 - you're watching this YouTube app one day
00:41 - build lessons in order links to both of
00:44 - these playlists will be in the
00:45 - description all right let's start by
00:48 - looking at the YouTube API if you just
00:50 - Google YouTube API you'll find this
00:52 - YouTube data API result that's the one
00:55 - we want click into it and actually one
00:59 - thing I want to explain if you don't
01:00 - know what an API is I've got a video
01:02 - I'll put on the screen right now that
01:04 - describes to you what it is it's
01:06 - basically a way for you to interact with
01:08 - other platforms such as Twitter Facebook
01:11 - Spotify you can pull data from the
01:13 - platform you can write data to it but
01:16 - that API really controls what you can do
01:18 - and each platform is different so
01:20 - there's documentation for every for each
01:24 - API on each platform so this is the
01:26 - YouTube one let's go down to api's
01:29 - explorer to see what we can do with this
01:31 - API now before we dive into the
01:34 - endpoints on the left-hand side for the
01:36 - API I just want to draw to your
01:37 - attention that every time you make an
01:39 - API call to the YouTube API you need to
01:42 - specify some sort of identification now
01:45 - that comes in one of two forms either an
01:48 - API key or an OAuth token so in terms of
01:51 - the API key that's something that you
01:53 - can sign up for for free and it
01:56 - identifies you as a developer so every
01:58 - API call that your app makes to the
02:00 - YouTube API will have that API key and
02:02 - it's going to identify your app this is
02:05 - to make sure that they can identify who
02:07 - accesses the API and also to set limits
02:10 - for each key again that's something that
02:13 - you can sign up for for free however you
02:15 - with an API key you're limited in what
02:18 - you can do you can only read data if you
02:22 - want to insert update or delete data on
02:25 - the platform then you need to also use
02:27 - this second form or rather instead to
02:32 - use that form of authentication and this
02:35 - is where the user actually signs in so
02:37 - I'm sure you've used the apps before
02:39 - where you actually have to maybe like
02:41 - Instagram apps or u2 apps where you have
02:43 - to sign in with your account and that's
02:46 - what this is and the reason why this is
02:48 - needed to insert update or delete
02:51 - requests is because those actions are
02:54 - associated with a specific person right
02:57 - so if a person wants to subscribe to a
02:59 - channel that action you know write some
03:01 - data to their database but they have to
03:03 - identify you know who is subscribing so
03:06 - that's why they need to sign in and
03:08 - generate this AA token for our demo app
03:11 - right here an API key will suffice
03:13 - because we're only pulling data from the
03:16 - API we're reading the playlist data and
03:18 - the video data so we will be using this
03:21 - form of authentication all right on the
03:24 - left hand side there are various
03:26 - endpoints where you can get data from
03:29 - and write data to channels you can see
03:33 - playlists playlists items videos and so
03:36 - on and so forth the one we are actually
03:38 - interested in for this app is playlist
03:41 - items now play this endpoint right here
03:44 - this endpoint only gives you information
03:47 - about the playlist it doesn't actually
03:49 - tell you what's inside and so that's why
03:51 - we want playlist items so let's dive
03:54 - into one of these documentation pages in
03:56 - your own time you can dive into these
03:59 - individual pages if you'd like but all
04:02 - of them follow the same format in terms
04:04 - of the documentation first of all it
04:06 - explains to you what this endpoint is
04:08 - you know why you would want to use it
04:10 - and also it tells you the different
04:13 - methods you can do with this endpoint
04:17 - and so listing is just gathering info or
04:19 - reading info inserting updating and
04:22 - delete that's pretty self-explanatory
04:25 - and then in terms of the response that
04:27 - you get it's in JSON format this is an
04:30 - example of a response if you don't know
04:33 - what JSON is again I have a video for
04:35 - that it usually goes hand-in-hand with
04:37 - working with api's because API is
04:40 - usually return data in a format like
04:43 - JSON so if you haven't seen that before
04:45 - I'll put the video on the screen and you
04:48 - can learn more about JSON and how to
04:50 - read it so yes this is a an example of
04:55 - it
04:56 - the other cool thing that you can do is
04:58 - you can actually try this API so for
05:01 - example if you click list right here
05:05 - there will be this API Explorer pane on
05:09 - the right hand side you can actually
05:11 - just click this blue button to bring it
05:13 - back up
05:13 - now each API call has a set of
05:17 - parameters right that you need to
05:19 - specify some are required some are
05:20 - optional the ones in red are required so
05:22 - let's take a look at what this required
05:25 - parameter is and you know what sort of
05:28 - info you need to pass in you scroll down
05:30 - a little bit there's this table here
05:32 - called required parameters and part you
05:35 - can read what it means here but in
05:38 - general or basically it it dictates how
05:42 - much data you want to get back for each
05:44 - video playlist item so for us we're
05:48 - gonna want snippet and that's gonna give
05:50 - us the at least the video ID the
05:53 - thumbnail the title description the
05:55 - publish date those are the pieces of
05:57 - info that we want and with specifying
06:00 - snippet we're going to can it's going to
06:03 - contain all of the properties we need I
06:05 - think content details is the most
06:07 - in-depth one now the reason you wouldn't
06:10 - just want to specify the most in-depth
06:13 - one is because the more data that you
06:16 - need coming back at the longer the API
06:18 - call is going to take and plus I
06:20 - mentioned the quota it might take more
06:23 - quota points you know in each in this
06:28 - case specify snippet costs to units and
06:31 - content details also cost to units but
06:34 - again I don't need that much detail and
06:36 - I would rather have the eight
06:37 - i call come back faster all right so
06:39 - let's try it so in here I'm gonna
06:42 - specify snippet for the rest of these I
06:45 - don't need to specify except playlist ID
06:48 - you scroll down this specifies the
06:51 - unique ID of the playlist for which you
06:53 - want to retrieve the playlist items so I
06:56 - definitely want to specify that the
06:58 - playlist I want to get is actually my
07:00 - most recent uploads from my channel and
07:03 - I'll show you how to get the playlist ID
07:05 - for any channel so whenever you click on
07:07 - a playlist on YouTube so let's just go
07:09 - to mine first I'm gonna go to my channel
07:12 - click on videos and then I'm gonna click
07:16 - on play all and when you do that let me
07:20 - just pause that at the top you're going
07:23 - to see a parameter called list and that
07:24 - represents playlist so you see list
07:27 - equals and then you're going to see an
07:29 - ID this is the playlist ID so let me
07:31 - just copy that and go back here and
07:35 - specify that as my playlist ID now again
07:41 - there are those two different ways you
07:43 - need to identify yourself either o auth
07:46 - token or API key since we haven't signed
07:49 - up for an API key yet we're gonna do oo
07:52 - so when you execute this it's gonna pop
07:54 - up a little window for you to sign in
07:56 - with your YouTube account so it can
07:58 - identify you and so this action
08:01 - requesting data from this playlist is
08:04 - going to be done against your account
08:08 - right so it can identify that you're the
08:10 - person who's doing it so I'm gonna
08:12 - choose execute it's gonna pop up so I'm
08:17 - gonna go ahead and choose my account
08:22 - and I'm gonna grant permission to it to
08:26 - execute that API call and here you can
08:30 - see the response is 200 which represents
08:33 - it was a success and you can see the
08:35 - response that has come back now this is
08:38 - JSON right here with all the data you
08:40 - can see in particular this is this key
08:42 - items contains all of our video items
08:46 - it's an array if you know how to read
08:48 - JSON that square bracket is the start of
08:50 - an array and inside the array or you
08:53 - know the data for each of the videos so
08:56 - here is let's see here's the published
08:59 - date we're gonna need to change that to
09:01 - a pretty date there's the title of the
09:04 - video description of the video
09:05 - thumbnails different resolutions and
09:09 - also if you scroll down a little bit
09:11 - more there is the video ID and this is
09:15 - something we're going to need in order
09:16 - to play it the video clicking show code
09:20 - is actually very interesting because
09:21 - it's going to also show you well it's
09:25 - going to give you a bigger window which
09:26 - lets you see the data in a better way
09:31 - but it's also going to show you the
09:33 - exact API call that it made so if you
09:36 - take a look at this this is the API URL
09:39 - you know for the playlist items endpoint
09:41 - and you can see the parameters that we
09:43 - specified here snippet right here is
09:48 - playlist ID and that points to my
09:51 - playlist and the last parameter is key
09:55 - we're going to be using API key like I
09:58 - mentioned and we're going to be pasting
09:59 - that key in here so we're gonna take
10:02 - note of this URL because we're going to
10:04 - specify this inside of our Xcode project
10:06 - for the app to call alright so why don't
10:09 - we actually dive into our Xcode project
10:11 - this is the project we created from the
10:14 - last lesson and the first thing we're
10:16 - going to do is create a brand new file a
10:19 - constants file to store all of the
10:22 - configuration details so that we can
10:24 - update them from one place if we need to
10:27 - and that way we don't have these
10:28 - hard-coded strings floating around
10:30 - basically pieces of text if we need to
10:33 - specify that API key more than
10:36 - once we can use the constant instead so
10:39 - I'll show you how to do that I'll make
10:40 - more sense let's use Swift file and
10:44 - let's choose constants and then here
10:47 - we're gonna create a new struct called
10:50 - constants and we're gonna specify our
10:54 - API key here make a static far some
10:59 - people like to use all capitals to
11:01 - specify their constants and you can
11:02 - definitely do that it's really a
11:05 - stylistic preference choice just make
11:07 - sure you're consistent with it in this
11:09 - case I will do it in all caps so we have
11:12 - our API key we have our and in case
11:17 - you're wondering if you're not sure what
11:18 - this key word means it it the basic gist
11:23 - of it is that we're going to be able to
11:24 - access these variables without having to
11:27 - create a new instance of constants so
11:30 - it's perfect for for what we need here
11:33 - okay so we have also playlist ID and
11:38 - then we're gonna have the API URL okay
11:44 - so let's start filling in some of these
11:46 - details so if we go back to this I
11:49 - mentioned we're going to need this URL
11:50 - so I'm just going to copy this guy right
11:52 - here and that is our API URL but we're
11:56 - going to replace some of the data in
11:59 - here with these two other constants here
12:04 - so for example this playlist ID we can
12:06 - extract it from this URL just in case
12:08 - you know in the future we want to change
12:10 - it so I'm gonna cut that and paste it
12:14 - right there
12:15 - and instead I'm gonna replace it make
12:18 - sure you don't lose your place write
12:19 - equals and I'm gonna sort of substitute
12:23 - that variable constants dot playlist ID
12:29 - all right that's how we're able to
12:32 - access this variable right without
12:36 - creating a brand new instance of
12:37 - constants and this is how you would do
12:39 - it throughout your project
12:42 - same thing with API key instead of API
12:47 - key
12:48 - we would actually put the API key in
12:50 - there once we have it but we would do
12:57 - that right here all right so now we have
13:00 - to actually sign up for an API key right
13:03 - and then we'll be start we'll be able to
13:07 - start hitting this API okay so how do we
13:11 - do that
13:11 - if you go all the way back to overview
13:15 - where it told you how to call the API
13:18 - you'll see this link to the developer
13:20 - console by clicking this she I'm going
13:24 - to just open it in a new window it might
13:29 - ask you to sign in but creating an API
13:32 - key is free and it's pretty
13:33 - straightforward alright so this is
13:35 - taking too long to load so I'm just
13:37 - going to close it and use the window
13:38 - that I had that was open so you should
13:40 - see something that looks like this go up
13:43 - here under API project and what you want
13:46 - to do is create a brand new project that
13:49 - represents you know your app here so I'm
13:53 - going to call this YouTube API demo 2
13:55 - since I've done this twice let's click
13:59 - create and it's going to start creating
14:01 - your project so you can see here I
14:02 - created one just an hour ago preparing
14:06 - to record this video so give it a second
14:09 - all right it's done so let's you can
14:11 - either click view or here in the
14:13 - drop-down you should see it here so go
14:15 - ahead and click into your new project
14:17 - and this is where you're going to choose
14:18 - the api's you want to work with in this
14:20 - project so click enable api's and
14:23 - services and let's look for YouTube and
14:27 - we're going to choose YouTube data API
14:29 - v3 so go ahead and hit enable as soon as
14:33 - the buttons gonna show up boom and then
14:39 - alright after that you're going to click
14:41 - credentials here and you're going to
14:43 - generate a brand new API key see you
14:47 - have nothing here click create
14:48 - credentials and then choose API key
14:52 - I'm gonna copy this and then I am going
14:56 - to just change the browser window go
15:00 - back here and I'm gonna paste it alright
15:04 - at this point we are done with our
15:05 - constants file so now let's go and
15:09 - create some of the classes we'll need to
15:11 - work with this API the first one we're
15:13 - going to need is a class to represent
15:15 - each of the videos that we are going to
15:18 - get from the API so let's create a new
15:21 - struct called video so let's choose new
15:25 - swift file and we're going to name this
15:27 - video and this is going to be a struct
15:31 - called video and we're gonna put the
15:33 - properties that we need in here earlier
15:35 - I mentioned the ones that we need and we
15:37 - looked at the JSON response from the API
15:40 - and I pointed out all of the different
15:42 - places we're gonna need to pull that
15:43 - information out right if you remember it
15:46 - was video ID it was the title of the
15:50 - video it was the description of the
15:53 - video
15:54 - it was also the thumbnail URL and lastly
15:59 - it was the publish date so we'll just
16:03 - call this published so this struct is
16:06 - going to represent each instance of this
16:09 - is going to represent a video that we're
16:11 - going to display next we're going to
16:13 - create a model class which is going to
16:16 - actually make the API call and pull back
16:19 - the data and then send it over to the
16:22 - view controller so let's go ahead and
16:25 - choose new file let's choose Swift file
16:28 - again and we're gonna create the model
16:32 - this one's going to be a class
16:35 - and right now we'll just have one
16:38 - function called get videos and in here
16:42 - we're going to make that API call now if
16:45 - you watch that JSON video about parsing
16:48 - JSON we show an example of making an API
16:52 - call or it might have been the API video
16:55 - in either case you'll find the links for
16:57 - them in the description below but the
17:02 - Iowas networking classes we need are URL
17:05 - so first we need to create a URL object
17:08 - and this points to the endpoint right of
17:12 - that the YouTube data API and then we're
17:17 - going to need to get a your all session
17:21 - object and URL session is a class that
17:24 - basically does all of the networking
17:26 - stuff I'm you know I don't actually know
17:29 - the inner workings of it to be honest
17:31 - with you but it contains all of the does
17:34 - all of the networking heavy lifting and
17:38 - get a data task a data task represents a
17:41 - single call to the API
17:50 - and by air kick-off the task and this is
17:57 - very important because I always forget
17:59 - to do this I you know create the data
18:01 - task and I write the code for what
18:03 - happens when the response comes back but
18:07 - I always forget to kick off the pass so
18:08 - this is going to make sure that I hang
18:10 - remember all right so let u RL equals u
18:14 - RL a new object and there is this
18:17 - initializer where you just pass in the
18:19 - string it returns an optional Ural
18:21 - object so it may it may create it it may
18:24 - not let's go ahead and specify our API
18:29 - URL and because this may be this may be
18:35 - nil so let's guard against that guard
18:37 - URL not equals nil else for now I'm just
18:42 - going to return let the session equals
18:49 - URL session dot and shared Oh before I
18:55 - do that let me just show you what it is
18:57 - shared singleton session object and if I
19:00 - just put my cursor on this we should be
19:03 - able to see object had coordinates a
19:06 - group of related network data transfer
19:08 - tasks providing an API for downloading
19:11 - data and uploading data to endpoints
19:13 - indicated by the URLs all right now
19:18 - we're going to create a data task so did
19:21 - let data task equals and we create one
19:23 - the session the URL session and it has a
19:27 - method called data task where you pass
19:29 - in the endpoint URL you want to hit
19:32 - there's this one but this one doesn't
19:35 - give us a chance to write code for what
19:38 - happens when it comes back and so I
19:40 - actually really want to use this one
19:42 - instead with this completion handler
19:44 - parameter so let's double click that and
19:47 - for the first parameter we're gonna
19:48 - specify URL for the second parameter we
19:53 - get this specified closure or a block of
19:55 - code to handle the response so in this
19:59 - response we're gonna get three input
20:01 - parameters we're going to get the data
20:03 - contained in the response we're gonna
20:05 - get the URL response object itself which
20:09 - will give us the status code and and
20:13 - other information with the HTTP response
20:15 - that we get back and finally an error
20:18 - parameter that contains any sort of
20:21 - error if it would have happened so let's
20:24 - double click that to open up a new
20:25 - closure and I'm going to give names to
20:27 - each of these parameters so let's say
20:29 - data response and error now the first
20:34 - thing we want to do is just check if
20:37 - there were any errors so if error is not
20:45 - equal nil that means there is an error
20:47 - or maybe the data is nil there's no data
20:51 - then we are going to return we'll
20:54 - probably should log some sort of error
20:55 - but for now as we're as we're building
20:59 - I'm just going to set a breakpoint if it
21:01 - ever happens in here then it will stop
21:03 - execution and then we can peek in and
21:05 - see what's wrong and before we go on the
21:09 - parsing the data into video objects
21:14 - before we do that why don't we kick off
21:17 - the task data task resume to kick it off
21:20 - and just see if the app is able to hit
21:23 - the endpoint and come back with a
21:25 - response
21:26 - so inside view controller let's create a
21:31 - new instance of model and call that
21:32 - method so that we can actually kick off
21:35 - that Network call so far model equals
21:39 - new model object and then viewdidload
21:42 - let's go model dot and get videos that's
21:46 - a set yeah let's set a breakpoint right
21:49 - there all right and the way we're going
21:52 - to see if it was a success is to
21:56 - basically use a network what do you call
22:00 - these things a network debugging tool I
22:02 - have one called proxy man and you can
22:06 - get different ones there's Charles proxy
22:09 - man and I can't remember some other ones
22:12 - but this one has a really nice UI and
22:14 - I'm still using the free version
22:16 - perfectly okay what this will do is just
22:20 - monitor the traffic coming in and out of
22:22 - your computer or different apps and
22:24 - allow you to see what you know what was
22:27 - the cross what's the response and then
22:29 - it's really helpful when you're trying
22:30 - to debug Network calls with your apps so
22:35 - let's go ahead and run this app in the
22:39 - simulator and hopefully we're gonna see
22:42 - it show up in oops in proxy man and then
22:45 - we can take a look at the network call
22:47 - okay so first of all it's hit this
22:49 - endpoint it hasn't made the network call
22:51 - just yet I'm going to continue execution
22:54 - like that and okay so it's made the
22:58 - network call and we actually have an
23:03 - error so actually let me see what that
23:08 - error is and SSL error has occurred and
23:11 - a secure connection to the server cannot
23:14 - be made what was the URL that we had was
23:18 - it not the API URL is under HTTPS so
23:25 - okay that's a little strange but let's
23:27 - go to approximate and take a look at to
23:29 - see if we can see that so you can see
23:31 - here under apps this is the our app in
23:35 - this simulator so let's go ahead and pin
23:36 - this guy pin it so we can see it at the
23:40 - top always and before we can actually
23:44 - peek into it we have to install a
23:47 - certificate to see the HTTP response so
23:51 - let's go ahead and do that so that they
23:54 - make it really easy here install to Iowa
23:56 - simulators installed successfully reset
23:59 - simulators boom so those are the three
24:02 - steps
24:11 - all right so let's launch the simulator
24:14 - what I'm going to do is just rerun my
24:16 - project here oh that was pro max I was
24:23 - completely different simulator okay so
24:29 - let's continue execution to fire off the
24:31 - network call I'll just remove that
24:33 - breakpoint and yeah and here see this is
24:38 - the network call that just went out and
24:40 - so we can see what the request and
24:44 - response was okay so the request you can
24:48 - see here this is the request right with
24:52 - the snippet with the playlist ID and
24:54 - actually with my API key and let's take
24:57 - a look at the response so here is the
24:59 - response right we can take a look at the
25:01 - body you can see this time it didn't
25:03 - error out for some reason the first time
25:06 - we ran it you can see it was this one
25:09 - it's red and we got that error
25:11 - this one is status code 200 right it was
25:15 - completed successfully and in the body
25:17 - we can see you know this is all the data
25:20 - that we need right so now we've
25:22 - confirmed that our app can hit the
25:25 - YouTube API and make that call and the
25:28 - parameters are correct we're getting
25:30 - that the JSON response that we need so
25:33 - now what we need to do is just parse
25:35 - this JSON response into those video
25:37 - objects and then we can send it to the
25:39 - view controller to display wow we've
25:42 - done quite a bit in this lesson from
25:44 - here on out I think it's gonna be pretty
25:46 - smooth sailing to be honest if you want
25:48 - to grab my project there's a link to it
25:49 - in the description below just one note
25:51 - I've removed my YouTube API key you're
25:54 - gonna have to create your own and then
25:55 - put it in the constants file alright now
25:58 - I want to turn over to you now that
25:59 - you've gotten a taste of what the
26:01 - YouTube data API is like is it easier or
26:04 - is it harder than you imagined
26:05 - let me know by leaving a quick comment
26:06 - below now in the next lesson we're going
26:08 - to start displaying those API results in
26:10 - our UI make sure you're subscribed so
26:12 - you don't miss it
26:13 - thanks for watching all the way to the
26:15 - end and I'll see you in the next lesson