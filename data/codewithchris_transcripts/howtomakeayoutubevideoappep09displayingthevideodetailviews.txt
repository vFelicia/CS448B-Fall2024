00:03 - eight coders Chris here with episode 9
00:07 - of how to make a YouTube video app in
00:10 - the previous lesson we had created our
00:12 - custom class for the video detailed view
00:15 - controller and then we had added these
00:17 - elements onto the view so title for the
00:21 - label title for the description a web
00:23 - view to show the YouTube content and
00:25 - then we had hooked up these elements as
00:27 - IB outlets to our video
00:30 - detailviewcontroller class so in this
00:32 - lesson we are going to pass the video
00:36 - that the user selects from our main view
00:38 - controller to our detail view controller
00:41 - and then we're going to take the
00:43 - properties out of that video object and
00:45 - display them in these user elements so
00:48 - how are we going to accomplish that well
00:50 - first of all let's go into our view
00:52 - controller for our table view when the
00:55 - user selects a cell right now we're not
00:58 - really handling that scenario so why
01:01 - don't we implement another of the table
01:04 - views delegate methods to handle that
01:06 - event when someone selects a cell so
01:09 - let's say table view did select row at
01:13 - index path now make sure you don't
01:15 - choose this other one which says did
01:18 - deselect because that's not the one
01:20 - we're looking for
01:21 - we're looking for did select row okay so
01:24 - I'm going to choose that and this method
01:28 - triggers whenever someone chooses a cell
01:30 - in the table view and what we want to do
01:32 - is take note of which video the user
01:38 - selected so we're going to create a
01:41 - property up here we're gonna call it far
01:46 - selected video is type of video and
01:50 - we're gonna set it as an optional
01:52 - because it may if the user doesn't
01:55 - select a video then this is going to be
01:57 - nil but if they do select a video then
01:59 - we're gonna store it in here so we're
02:03 - gonna say in here self dot selected
02:07 - video equals all of our videos and then
02:11 - how do we know which one
02:13 - they selected well there's this index
02:15 - path parameter here so we can go index
02:18 - path row and so that keeps track of the
02:21 - video that the user selected in here
02:24 - okay so now how are we going to pass
02:26 - this video object over to the video
02:29 - detail view controller well in the video
02:32 - detail view controller we're going to
02:35 - need another property to keep track of
02:37 - that video so let's say var will also
02:41 - call it selected video here and just as
02:45 - in the view controller it's going to be
02:46 - an optional type because it could be nil
02:50 - it could be not set yet
02:51 - now we're gonna go back to the view
02:53 - controller and we're gonna implement
02:54 - another method that gets triggered when
02:58 - a segue occurs that means when we
03:01 - transition from the view controller to
03:03 - the detail one this method gets called
03:06 - and it's called prepare for segue so if
03:09 - you start typing PR e it should
03:11 - autocomplete and you should be able to
03:14 - select this method here inside this
03:15 - method we can get a reference to the
03:20 - destination view controller and then set
03:24 - the selected video property of the
03:31 - destination view controller so in our
03:33 - case that's the video detail view
03:35 - controller okay so let detail view
03:40 - controller equals and we can get a
03:43 - reference to it through this parameter
03:45 - right here this is the segue that got
03:48 - triggered dot destination view
03:50 - controller you can see that it's a type
03:52 - of UI view controller but we're actually
03:55 - going to cast it as a type of video
03:58 - detail view controller because we know
04:00 - that that's what it is and so here we're
04:02 - going to say detail view controller dot
04:04 - selective video equals selected equals
04:09 - self thought selected video and this is
04:11 - referring to this guy up here which is
04:17 - hopefully set because the user has
04:19 - selected a cell okay so this method
04:23 - happens before the transition finishes
04:27 - and we are going to be setting the
04:29 - selected video property of the
04:31 - detailviewcontroller so now in the video
04:33 - detail view controller we're going to
04:36 - want to take this selected video and
04:38 - we're going to want to set our webview
04:41 - title and description for it so I'm not
04:46 - gonna do it in the viewdidload instead
04:49 - I'm going to override another one called
04:51 - view did appear and this method is
04:54 - called after the view has come on to the
04:56 - screen and the reason for this is
04:58 - because when the view has appeared we
05:01 - know the dimensions of the view at this
05:03 - point viewdidload we don't know the size
05:06 - of the view yet or at least from inside
05:08 - this method we we can't reliably access
05:11 - the size of the view so in view did
05:13 - appear we can and we need to know the
05:16 - size of the view because we're going to
05:18 - have to dynamically set the height of
05:20 - the webview as you'll soon see so in
05:23 - here we're going to use a statement just
05:25 - to check if selected video is set so
05:28 - we're gonna use optional binding if let
05:31 - let's say video let's just call it vid
05:36 - equals self thought selective video so
05:40 - inside here that means that self dot
05:43 - selected video exists and we're going to
05:46 - say self thought title label dot text
05:49 - equals V dot video title self dot
05:57 - description label dot text equals vid
06:00 - video description and finally we need to
06:04 - set the webview so let's construct a
06:06 - string first so how we're going to
06:09 - display the YouTube video inside the
06:11 - webview is by using this HTML to embed
06:15 - the video as you can see right here it's
06:18 - using an iframe to do so it's got a
06:21 - height of 180 and a width of 320 which
06:24 - we are going to make dynamic but take a
06:26 - look at this source or the URL of the
06:30 - iframe its youtube.com embed and then
06:32 - this is going to be the video ID and
06:35 - then we're going to use this loaded up
06:38 - into the web view and it's going to
06:40 - display our video which
06:41 - we can tap on play to play the video so
06:44 - I'm going to copy this snippet of code
06:46 - I'm going to construct a string let
06:50 - video embed string equals that okay but
06:56 - I need to substitute the video ID in
07:01 - there so the way I did it before in my
07:03 - old project was to use this wild card
07:05 - and substitute the video ID in there but
07:09 - here we can use just string
07:11 - concatenation so I'm going to erase that
07:14 - go like that and then I'm just going to
07:17 - put the video ID in here so vid dot
07:21 - video ID so it's going to take this
07:25 - chunk of string plus the video ID plus
07:28 - this chunk of string and then lastly
07:31 - we're going to call self dot web view
07:33 - dot load HTML string and we're gonna
07:36 - pass in that video embed string and the
07:40 - base URL is nil okay so that's all set
07:43 - but before we run it I want to revisit
07:45 - how we are triggering that segue that
07:48 - transitions from the main view
07:51 - controller to the detail view controller
07:52 - so if we click on this one it is
07:55 - connected to the selection of a cell
07:58 - here and then that triggers the segue to
08:01 - happen to transition to the detail view
08:04 - controller but if we look at our code
08:06 - here there is a potential problem
08:09 - because in order for this to work this
08:12 - did select row index path must fire
08:15 - first so that we can set the selected
08:18 - video and then the prepare for segue
08:20 - method must happen so that we can pass
08:24 - that selected video to the detail view
08:27 - controllers selected video property if
08:29 - they're switched if this guy happens
08:32 - first before this one then what we're
08:35 - gonna be passing is nil because this one
08:37 - hasn't been set yet right so we need
08:39 - this method did select row in next path
08:42 - to happen first and then this guy to
08:44 - happen second so what I'm gonna do is
08:46 - set a breakpoint in each method I'm
08:48 - gonna run it and I'm gonna see which one
08:50 - gets hit first so you can set a
08:52 - breakpoint by clicking here on
08:54 - gutter and the breakpoint will just
08:57 - pause the execution at that point to let
09:00 - you check on variables to let you you
09:03 - know just take a look at your code so
09:07 - I'm going to choose the first cell here
09:09 - I'm gonna tap it and you can see here
09:12 - that it's coming to prepare for segue
09:14 - see it's hit this breakpoint first this
09:16 - green line is where it's paused
09:17 - currently so this is bad because we want
09:20 - this to happen first at this point you
09:23 - know if I step through line by line it's
09:26 - gonna set nil into the detail view
09:28 - controllers selected video property and
09:31 - as such we're not going to see a video
09:33 - in the next view okay let's continue
09:37 - execution you can see second method it
09:40 - hits is this guy right here at this
09:42 - point there's no there's no point in
09:44 - setting this selected video property
09:46 - because this has already happened so as
09:50 - you can see now that we go into the
09:52 - detail view controller nothing is set so
09:55 - what needs to happen here is in the main
09:59 - that storyboard we can't hook up our
10:01 - segue to happen on selection of this
10:03 - cell because the order the order that
10:06 - those things happen and just doesn't
10:07 - work out so I'm gonna click on this
10:09 - segue I'm gonna hit delete and what I'm
10:13 - gonna do is create a manual segue from
10:15 - the view controller to the detailed view
10:18 - controller so that we can
10:19 - programmatically call that segue to
10:22 - happen when we want it to so I'm gonna
10:25 - click this view controller and you can
10:27 - see this little view controller icon
10:29 - here I'm gonna hold down control drag a
10:32 - line over to this video detail view
10:35 - controller let go I'm gonna choose show
10:37 - and then I'm going to select that segue
10:41 - go over to the inspector pane and in the
10:45 - storyboard segue I'm gonna give it a go
10:48 - to detail identifier because we're gonna
10:50 - be calling this segue by its identifier
10:53 - here okay so now when we go back to our
10:56 - view controller at this point that segue
10:59 - won't happen when we select a cell
11:01 - because it's a manual segue we're gonna
11:03 - have to trigger it programmatically so
11:06 - what I'm going to do is add a line after
11:09 - we set the did select row at index path
11:12 - after this gets set I'm going to call
11:17 - the segue so self-thought perform segue
11:20 - with identifier the identifier we gave
11:24 - it was go to detail and the sender I'll
11:26 - just put self and now let's run it and
11:29 - see which of those methods get hit so
11:33 - I'm gonna choose the first cell here and
11:35 - as you can see it's hit did select row
11:38 - index path first it's paused right here
11:42 - and it has set the self thought selected
11:46 - video property and it's gonna perform
11:47 - the segue which is going to cause this
11:49 - method to happen so there we go it jumps
11:53 - to here now and this is fun because now
11:55 - we've actually set self dot selected
11:57 - video so detailviewcontroller is going
12:00 - to have that video some continued
12:02 - program execution and now you can see
12:05 - here on the detail view that our title
12:08 - and description is set however you'll
12:10 - notice that our video is not showing
12:12 - because here in the console that says
12:14 - app Transport Security has blocked a
12:16 - clear text resource load so the problem
12:19 - here is because our webview is trying to
12:22 - load a resource from youtube.com and
12:25 - Xcode just has the security measure to
12:28 - not load anything unless you give it
12:30 - permission to or you set some rules to
12:33 - allow resources to load from youtube.com
12:35 - but what we're going to do is go into
12:38 - our info.plist
12:40 - and we're just going to add an exception
12:42 - to allow arbitrary loads which is to
12:45 - allow loading any sort of resources for
12:48 - the purpose of this demo ideally you'd
12:50 - probably want to only add a rule for
12:53 - youtube.com so I'm gonna type capital a
12:56 - lowercase P and this should pop up and
12:59 - the press tab then we're gonna open it
13:01 - up click this plus so we can allow
13:03 - arbitrary loads I'm gonna say yes to
13:10 - that
13:11 - and let's run it again so now when I
13:16 - click the first cell I'm just gonna
13:18 - remove these breakpoints by dragging it
13:20 - off now you can see our video has loaded
13:26 - but it's not really taking up the whole
13:30 - view because the height and width as we
13:32 - can see in this string is 180 and 320
13:36 - there so we're going to fix that but
13:39 - let's just see if it plays okay so
13:44 - that's pretty cool that works now let's
13:47 - go back into our code and we're going to
13:53 - go to the video detail controller so
13:55 - we're going to calculate the height and
13:56 - the width that we need in here let width
14:01 - equals self dot view dot frame dot sighs
14:06 - thought width right so that's the width
14:09 - of the entire view so let's calculate
14:12 - the height off of that is equal to so
14:16 - since we know the ratio is 320 to 180
14:19 - we're going to say self we're gonna say
14:25 - width which is this guy right here
14:29 - divided by 320 times 180 so we're just
14:36 - going to get the difference in the real
14:39 - width versus the 320 so we get that
14:41 - ratio and then we're gonna multiply that
14:43 - by the original height to get the new
14:47 - height so let's see what this is saying
14:48 - right here play oh it's just saying
14:51 - that we're not using the height
14:52 - variables but we are so in here instead
14:57 - of 180 I'm going to do string
15:00 - concatenation again so I'm just gonna
15:02 - open up two quotes like that plus
15:08 - Haight oh but this is not a string right
15:12 - unless I make it a string here so let's
15:15 - just put that into a string like that so
15:22 - that's gonna be okay and then for width
15:25 - I'm also going to use string
15:28 - concatenation and add the width in there
15:33 - like that oh but then I can't do math on
15:37 - the width right because I need to do
15:40 - with divided by 320 so I can't change
15:43 - them to a string here and fortunately
15:45 - but I can change them into a string here
15:48 - I'm gonna create a new string object by
15:51 - passing in the number like that so now
15:58 - I'm gonna run it and we should be able
15:59 - to see the video take up the whole view
16:03 - like that ah so now it does take up the
16:06 - whole view except the webview is not
16:07 - large enough to accommodate the height
16:09 - of the video thumbnail so you can see
16:11 - there's this scrolling action here so
16:14 - what I want to do remember that when we
16:16 - added the webview in this storyboard we
16:19 - added a constraint to just make it 180
16:22 - with the intention of adjusting it a
16:25 - little later so I'm gonna open up the
16:28 - assistant editor and up here I'm gonna
16:31 - create an iboutlet for this height
16:33 - constraint I'm just gonna hold down
16:37 - control drag a line put it here and I'm
16:40 - gonna call it webview height constraint
16:44 - like that
16:45 - go back to single view go by through the
16:49 - video detail controller and in here
16:52 - because we have calculated the height of
16:55 - the video we can adjust that adjust that
17:00 - height adjust the height of the webview
17:05 - constraint so self-thought webview
17:08 - height constraint constant equals height
17:11 - okay now let's run
17:16 - so I'm going to click that and then now
17:19 - we can see that the video is not cropped
17:23 - and you might have noticed like a flash
17:26 - of label and ylabel we just need to
17:29 - change the default text for those two
17:31 - things and pretty much we're done
17:34 - so let's change the default text while
17:36 - we're at it go to main the storyboard if
17:40 - we go here to our label so we just have
17:43 - to erase the text there like that so you
17:48 - don't see a flash of those two words
17:51 - label before that these details load
17:54 - okay so that was the simple version of
17:56 - the YouTube video app where we
17:58 - hard-coded the videos into our project
18:00 - and if you didn't see yesterday's vlog
18:03 - we're going to be doing a shopping app
18:05 - next but I'm still working out the
18:07 - details for that so stay tuned I'll see
18:10 - you guys tomorrow at 12 p.m. talk to you
18:13 - guys later bye for now