00:01 - [Music]
00:06 - hello welcome to the final lesson of the
00:09 - iOS to MySQL demo series in this final
00:12 - lesson we are going to create the map
00:14 - view controller and we're going to add a
00:16 - map view and we're going to enable the
00:19 - user to tap on a row in the table view
00:22 - to jump over to the next screen and
00:24 - we'll plot that location on the map okay
00:27 - so first of all let us here in the
00:31 - default navigator let's create a new
00:33 - view controller class I'm going to
00:36 - choose cocoa touch class and this is
00:39 - going to be a map view controller
00:41 - subclass of UI view controller so take
00:46 - note of the UI in front of view
00:48 - controller because that's the the actual
00:52 - view controller class and now you can
00:58 - see map view controller is a subclass of
01:01 - uiviewcontroller in fact when we created
01:04 - a single view application you know we
01:07 - started off with the 2-u controller here
01:09 - this view controller is also a subclass
01:11 - of uiviewcontroller this UI view
01:14 - controller class is from UI kit now the
01:17 - next thing to do is to go into the
01:20 - storyboard and we're going to add a an
01:24 - additional view controller element to
01:27 - the storyboard so let's go ahead and add
01:29 - this guy right here now this is going to
01:32 - represent our map view controller but
01:34 - when we drag it out from this object
01:37 - library this just it's just the UI view
01:40 - controller so we need to highlight this
01:42 - guy go over here to the custom class and
01:45 - set this to map view controller now the
01:49 - storyboard knows that this guy this view
01:51 - controller represents an instance of the
01:53 - map view controller ok next thing we
01:56 - want to do is to actually add a map view
01:58 - here let's search for a map view and
02:02 - we're going to drag this over here and
02:06 - for this one you can just position
02:10 - it fullscreen like that oops okay and
02:15 - then click this constraint button and
02:17 - all of them will be set to zero as
02:19 - already then you can just enable these
02:21 - four constraints and add them and it'll
02:24 - be like that now let's open up a system
02:28 - editor because we need to connect this
02:31 - map view as an iboutlet property here so
02:35 - hold down control drag it there let's
02:39 - just call this the map view like that
02:42 - let's go back to single view editor and
02:44 - if you go over to the map view
02:46 - controller class now you're going to see
02:49 - that this line is an error here and if
02:53 - you take a look at the error it actually
02:55 - doesn't recognize this MK map view class
02:58 - what we're going to have to do is click
03:01 - on this root node here for the project
03:03 - properties you're going to scroll all
03:04 - the way down to linked frameworks and
03:07 - libraries you're going to click this
03:08 - little plus icon and you're going to
03:11 - search for map then you're going to add
03:14 - the map kit framework just like that in
03:17 - there and now when you go back to the
03:20 - map view controller class up here you
03:23 - say import mapkit so now it's going to
03:27 - recognize this map view class so now
03:31 - we're going to work on transitioning
03:33 - from our view controller to the map view
03:37 - controller when the user taps on a row
03:39 - in the table view so let's go over to
03:41 - the storyboard the first thing we have
03:43 - to do is to highlight this view
03:46 - controller here and make sure it's
03:47 - outlined in blue like that and then
03:49 - you're going to go up to editor you're
03:53 - going to choose embed in and we're going
03:55 - to choose navigation controller so what
03:58 - that's going to do is it's going to add
04:00 - this thing called a navigation
04:02 - controller to your storyboard sometimes
04:04 - you just have to reposition it let me
04:07 - zoom out a bit so that you can see okay
04:10 - so this arrow now points to the
04:11 - navigation controller so this guy is the
04:13 - starting controller or view controller
04:16 - you could say and it doesn't really have
04:19 - a view itself instead it facilitates
04:23 - transitioning the
04:24 - mean view controllers so you can see
04:26 - this line here it's pointing to this
04:29 - view controller as its root view
04:31 - controller even though this guy this
04:34 - navigation controller is thus carving
04:36 - controller it's going to display the
04:39 - view of this view controller so we're
04:42 - going to still see the table view when
04:44 - we boot up the app now the next thing we
04:46 - want to do is create what's called a
04:48 - manual segue from the view controller to
04:52 - the map view controller so there's two
04:54 - things I need to explain a segue if you
04:56 - don't know is simply a transition
04:59 - between two view controllers and a
05:01 - manual segue is just a segue or
05:03 - transition that we manually trigger
05:06 - through the code okay let's add this
05:08 - manual segue hold them control make sure
05:11 - that this view controller is highlighted
05:13 - I'm going to hold down control and click
05:14 - and drag this guy you can just drop it
05:17 - over here and the map view controller we
05:19 - look at dialog box that pops up you can
05:21 - see that the title says manual segue so
05:24 - you know you've got it right we're going
05:27 - to choose show which is just it's just
05:31 - going to change game controllers and
05:33 - transition to this map view controller
05:37 - kind of like your basic transition you
05:40 - can see here now there's an arrow you
05:42 - know there's an arrow from this view
05:43 - controllers to this guy and because it's
05:45 - a manual segue we have to manually
05:47 - trigger this arrow or this transition to
05:50 - happen so click on this arrow make sure
05:53 - it's blue we have to give it a name in
05:54 - order to identify it let's go up here
05:57 - and under storyboard segue let's give it
06:00 - an identifier let's call this go to map
06:03 - okay all right now when we go back to
06:08 - view controller in this did select row
06:11 - function we're going to call a function
06:14 - of the view controller called perform as
06:17 - you scroll down a little bit there's
06:19 - perform segue with identifier and where
06:23 - you can specify the name of the segue to
06:25 - manually trigger so select this function
06:28 - and inside here we're going to put a go
06:32 - to map now the sender is the object that
06:37 - triggered this function and we're going
06:39 - to put self here to identify that the
06:41 - viewcontroller was the one who triggered
06:43 - it now let's just take a look to see if
06:45 - this works let's run the app here when
06:48 - we select a rope it should call perform
06:51 - segue and we should zoom over to the map
06:58 - alright now you can see our two rows
07:00 - here and there's actually a gap up here
07:04 - so we can address that but you'll notice
07:07 - that the view controller has added this
07:10 - navigation bar up here so it looks to me
07:13 - that there is maybe an error down here
07:16 - let's see what's going on here okay so I
07:23 - was going to show you guys this in the
07:27 - video where we were parsing the JSON
07:28 - data but I didn't want to get ahead of
07:30 - myself and then after we implemented the
07:32 - table view I kind of forgot all about it
07:34 - so now Xcode is actually warning us
07:36 - about this and it's good because in the
07:38 - past and never it never warned people
07:40 - about this and it was something that you
07:42 - kind of have to figure out through
07:43 - experience but anyways let me show you
07:45 - what this this error is this application
07:49 - is modifying the auto layout engine from
07:51 - a background thread after the engine was
07:53 - accessed from the main thread this can
07:54 - lead to engine corruption and weird
07:56 - crashes okay so let me explain what's
07:58 - happening here so the view controller
08:01 - when it launches remember we we called
08:05 - the whole model get items and then if we
08:08 - go to this function jump to definition
08:12 - here it calls this service that we
08:16 - created it downloads this JSON it you
08:19 - know parses it does all this work I told
08:21 - you it did it in the background as
08:23 - asynchronously right mmm that is from
08:26 - here when we created session the data
08:29 - task and we pass it that URL to do all
08:33 - of this work and we started the task dot
08:36 - resume here that does all that in the
08:39 - background
08:40 - now when the data comes back you know
08:44 - parse JSON this is still the background
08:47 - thread
08:48 - and if you're confused about what I mean
08:50 - by thread think of it as different sort
08:54 - of workers there is a main thread which
08:56 - is kind of the main worker and let's say
08:59 - it delegates something or let's not use
09:01 - the word delegate because you're going
09:03 - to confuse it with the protocols
09:04 - delegation let's say this main worker
09:07 - gives a task to another worker to tell
09:10 - it to hey you know go off and download
09:13 - some data and come back to me when
09:14 - that's done so it shoots off a
09:17 - background thread or a background worker
09:19 - thread to do that work while the main
09:24 - worker or the main thread can continue
09:27 - to serve the needs of the user who's
09:29 - using the app responding to user
09:32 - interaction and all of that stuff now
09:35 - you can imagine if the main worker was
09:37 - the one to go off and download data
09:39 - there wouldn't be any worker to respond
09:42 - to the users interaction or the users
09:44 - tapping in and such and so the screen
09:46 - would look frozen so that's why it's
09:49 - important when we go download data that
09:52 - this happens in a background thread or
09:54 - another worker now a big no-no is to
09:57 - have the background worker update the
10:01 - user interface that usually is a task
10:03 - that is solely the main workers
10:06 - responsibility and when I say main
10:09 - worker
10:09 - I mean main thread so worker is just an
10:12 - analogy for a thread so you're only
10:16 - supposed to update the user interface
10:18 - via the main thread okay so right here
10:22 - we have the background worker it's
10:24 - parsing JSON it's doing all this work
10:26 - it's such the data and then it calls
10:30 - this delegate items down loaded which
10:33 - causes the view controller here to
10:36 - reload the table view thus displaying
10:40 - data to the user interface and this is
10:44 - being done by the background worker
10:46 - which is what it's warning against here
10:50 - you know can lead to engine corruption
10:52 - and weird crashes so instead what we
10:54 - want to do is we want this background
10:55 - worker once it's downloaded all that
10:57 - data it's parsed this stuff out into a
11:00 - locations array we want it
11:02 - to tell the main worker that you know
11:06 - it's finished its job and then pass that
11:08 - that work for updating the user
11:12 - interface to pass it back to the main
11:14 - worker for it to do so that's
11:16 - essentially what we need to do here
11:18 - instead of the background worker calling
11:21 - the delegates items downloaded we're
11:24 - going to relegate this work back to the
11:26 - main worker so the way we do that is by
11:29 - writing code like this
11:30 - dispatch Q dot main dot async and any
11:39 - code we put between these curly brackets
11:42 - goes back to the main worker to do so
11:45 - we're going to just take this and we're
11:46 - going to paste it in there like that and
11:50 - just like that the background worker
11:53 - once it's done all of this code here
11:56 - it's going to tell the main thread to do
11:59 - this work instead and so we end up
12:02 - reloading the table view from the main
12:04 - thread inside here though is telling us
12:07 - that we need to use self inside that
12:11 - which is fine and then let's try this
12:15 - again okay so this is good we now click
12:23 - a row remember what we were trying to
12:25 - test before was tapping on a row is
12:28 - going to bring us over to the other view
12:30 - controller okay so this is the map view
12:33 - right here all right now we actually
12:37 - need to plot the pin for that address we
12:41 - need to pass the selected location over
12:44 - to this map view for it to display while
12:49 - we're at it why don't we fix that table
12:52 - view being so far down the way we can do
12:56 - that is in that top constraint so table
13:01 - view top equals top layout guide okay
13:08 - might not be able to do this what I'm
13:10 - going to do is just to delete this table
13:13 - view
13:14 - top constraint all together so we
13:16 - highlight the table view we're going to
13:18 - add a top constraint we're going to
13:20 - remove constraint margins we're going to
13:24 - make sure that this neighbor is veal
13:26 - instead we're going to select zero for
13:28 - that
13:28 - and we're going to add that constraint
13:30 - and so let's just quickly run it again
13:38 - alright so now we have the rows at the
13:41 - top okay so I said that we need to pass
13:46 - the selected location over to the map
13:48 - view controller right let's create a
13:50 - property over here to store that
13:52 - location so far location to display
14:00 - let's make this a an optional location
14:05 - like that and the view controller is
14:08 - going to set that property with the
14:10 - location that the user tapped on now
14:13 - over here what we have when the user
14:21 - taps on a row it triggers this guide did
14:24 - select row at and then we're going to
14:26 - perform the segue what we need to do is
14:31 - there is a function that happens when a
14:35 - segue occurs and that is called prepare
14:39 - so prepare for segue we're going to put
14:44 - some code in here to call I'm going to
14:50 - move this function up above here because
14:54 - it's not a UI tableview delegate method
14:57 - so when this table view did select row
15:02 - app performs the segue go to map and
15:04 - that transition happens to the map view
15:07 - controller this function gets called and
15:10 - from here we are going to set the
15:13 - locations or location to display
15:18 - property of the map view controller and
15:23 - the way we're going to do that is
15:26 - first get a reference to the
15:28 - destinationviewcontroller through the
15:31 - segue so segue dot destination returns a
15:35 - uiviewcontroller because it doesn't know
15:37 - what that view controller is so I'm
15:40 - going to cast it as a map view
15:42 - controller I'm going to assign that to a
15:45 - constant let map controller or how about
15:51 - just call it map VC equals that and then
15:55 - we're going to say map VC dot location
15:58 - to display equals and we're going to say
16:02 - table view dot I was selected or indexed
16:09 - path for selected row index path for
16:13 - selected roads so this returns an
16:15 - optional index path because if there is
16:18 - no rows selected then this is going to
16:20 - be nil but we know for a fact that this
16:24 - segue or sorry this prepare function
16:28 - only happens when a transition happens
16:31 - right and we only have one transition in
16:33 - this app so and that one transition is
16:36 - only caused by selecting a row so we
16:39 - know that there will be an index path
16:43 - for this row but just to be sure we can
16:47 - do something like this we can first
16:49 - check if there is a selected row let
16:51 - selected row or selected index path
16:56 - equals that and then we're going to say
16:59 - because that could be nil right so we're
17:01 - going to check if it's nil first if let
17:05 - index path equals selected index path
17:09 - then we do this stuff okay so now we can
17:16 - say locations and pass in the index path
17:21 - row so this is going to return to us the
17:26 - location that the user selected so this
17:30 - is all we need to do here
17:34 - and then in this map view controller
17:37 - we're not going to do in the viewdidload
17:39 - there is another function we can
17:41 - override view did appear so this is
17:46 - after the view has appeared to the user
17:48 - then we're going to set the map view to
17:52 - the address of the of the selected
17:58 - location so the first thing we need to
18:02 - do is to create a pin to plot actually
18:07 - you know what before that because
18:09 - location to display is an optional here
18:11 - we need to check that there actually is
18:14 - a location in that property first so
18:17 - let's use optional binding if let
18:19 - location to display let's call this
18:24 - location equals location to display then
18:28 - we show the pin on the map now what we
18:34 - have to do is create a pin to plot on
18:37 - the map so let's create a pin constant
18:40 - and the class we're going to use is MK
18:42 - point a notation going to create a new
18:46 - object of the MK point annotation and
18:50 - this guy has a coordinate property that
18:53 - is a type of CL location coordinate TD
18:57 - let's create that CL location coordinate
19:04 - TD I'm not sure what the difference is
19:08 - the I think these two might be the same
19:10 - now if you open this guy up
19:12 - we have initializer to specify latitude
19:16 - and longitude it the sense that these
19:19 - are types of CL location degrees but
19:22 - it's just another type for double we can
19:24 - substitute a double data type in there
19:27 - if you notice here for our JSON data C
19:33 - these are actually representative
19:34 - strings so we need to convert that these
19:39 - strings here convert that to double and
19:42 - we're going to do that
19:45 - we can even do we can either do it in
19:47 - line here or we could do it outside here
19:50 - maybe we'll do it outside here just for
19:52 - the sake of clarity convert flat and
19:59 - long to double so let flat equals double
20:09 - we're going to pass in I'm going to pass
20:12 - in the location dot latitude in here let
20:19 - long equals double location dot
20:24 - longitude and you're going to put them
20:31 - in here
20:32 - so that and long and then the next thing
20:38 - you can do is set the tin has a title we
20:43 - can set it to location dot name and the
20:48 - last thing to do is we're going to go
20:51 - matte view dot it plot norms it show no
20:57 - is add add a notation you can add the
21:03 - annotation will pass in the pin and
21:05 - there's also another function that is
21:09 - called show and notations and this
21:13 - basically zooms the map into the area
21:17 - where the pin is
21:18 - so we pass in an array of annotations
21:23 - but we only have one so we can just
21:25 - create an an array of just that one pin
21:27 - and put that one pin inside the array I
21:29 - mean for animated let's put true and now
21:34 - let's run our run our application
21:38 - actually there's an error here value of
21:43 - optional type double knot and wrap did
21:45 - you mean to use okay so when we convert
21:48 - this string into a double there's a
21:51 - chance that the string
21:53 - can't be converted to a double like for
21:55 - example if the string is just a word
21:57 - like hello or cat or something like that
22:00 - you can't really convert that to a
22:01 - number right so that's why converting it
22:03 - to a double this way actually gives you
22:06 - an optional double so it could be new
22:07 - and when we create this CL location
22:11 - coordinate to D it doesn't like you
22:14 - putting in optionals that's not what it
22:15 - expects so what we can do is we can
22:21 - check that the lat and long are not nil
22:24 - before executing this code here so let's
22:29 - do if lat not equals no and long not
22:37 - equal no like that then we put that then
22:41 - we do this code just to make sure that
22:43 - we actually get a lot and long first and
22:45 - now you know this is still an optional
22:49 - but we can safely be confident about
22:52 - unwrapping it force and wrapping it to
22:54 - get the double okay so now we can run
22:57 - the app here and we get back our data
23:04 - let's tap on Apple and we get this so
23:12 - our pin is plotted here and it's zoomed
23:16 - in here so if we try Google this time
23:20 - you get Google right here so this kind
23:24 - of completes the journey from data being
23:27 - inside in my SQL database to going
23:30 - through a web service to finally being
23:32 - consumed by an iOS app and then being
23:35 - displayed to the user as kind of a long
23:39 - road and there's a lot of additional
23:40 - infrastructure that we need to set up
23:42 - you know in terms of the database and
23:44 - the web service if you have the freedom
23:47 - to choose what sort of database you want
23:50 - to use right now I would recommend to
23:52 - start with something like firebase or
23:54 - parse server just so you don't need to
23:57 - worry about the database or the web
23:59 - service or anything like that you just
24:01 - put in your data through an admin panel
24:03 - into your database and then you add
24:06 - a library to your Xcode project and then
24:09 - you call you can call these functions to
24:11 - retrieve your data that's going to save
24:13 - you a lot of time because what I find
24:15 - most often with with beginners
24:17 - especially is that the more you have to
24:20 - do before seeing results the more likely
24:23 - that the beginner is going to give up
24:25 - and abandon their project without even
24:28 - completing it so that's why I firmly
24:30 - believe in using something like firebase
24:34 - or parse server just to alleviate all of
24:37 - that extra work from having to setup the
24:39 - web service layer and the database and
24:41 - stuff like that and just get your app up
24:43 - and running so that you get some you get
24:46 - some sense of accomplishment out of it
24:48 - and that's going to motivate you to
24:49 - continue on working on your app and in
24:53 - the future if you want to switch out for
24:54 - a different database you you would have
24:56 - that motivation to do so and so keeping
24:58 - things simple I think is the most
25:00 - important thing here so thanks for
25:02 - watching and I'll see you guys in the
25:04 - next video oh and before I sign off I
25:07 - just want to remind you that you can
25:09 - download the finished project in a link
25:12 - in the description below the video so
25:13 - check that out thanks for watching I'll
25:15 - see you guys next time bye
25:19 - [Music]