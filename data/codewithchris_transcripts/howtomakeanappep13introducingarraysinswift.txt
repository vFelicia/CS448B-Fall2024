00:04 - hey guys welcome to lesson 13 of how to
00:07 - build iPhone apps with no programming
00:09 - experience in this lesson we're going to
00:12 - learn about a race and we're gonna start
00:14 - off in a playground and I'll show you
00:16 - what an array is and how to use it and
00:18 - then we're going to see how we can
00:20 - integrate it into our Xcode project and
00:23 - instead of constructing the string with
00:27 - a random number to dictate our card
00:30 - images we're going to use an array okay
00:34 - so the first thing I'm going to do is
00:35 - start a new playground I'm just gonna
00:45 - save it on the desktop here now before
00:50 - we dive in and start working with the
00:52 - race let's define what an array is an
00:55 - array is a collection class that helps
00:58 - you manage a collection of values it's
01:02 - not a UIKit class but it's one of the
01:05 - core classes of the Swift programming
01:08 - language just like the string class in
01:11 - order to understand what it is take a
01:14 - look at this so let's say we have a
01:17 - variable a and we're assigning into it a
01:21 - string now imagine if we had a couple of
01:24 - different strings we would have to
01:27 - declare a variable for each one so that
01:30 - we can reference it while an array could
01:33 - be very useful in this sort of scenario
01:36 - because an array is an object that will
01:38 - allow you to store all of those strings
01:40 - and you can reference them by index so
01:44 - you can imagine the array almost like a
01:46 - snake of variable values now let's go
01:49 - back to our playground and take a look
01:51 - at how to declare and use an array okay
01:55 - let's begin by declaring a variable and
01:58 - then setting an array into it so I'm
02:01 - going to type var my array equals and
02:05 - I'm going to create an array that has
02:09 - two strings inside
02:13 - so I'm gonna put let's say , cat
02:20 - okay
02:21 - and just like that we've created an
02:24 - array so how does this syntax work well
02:27 - you'll notice that these square brackets
02:29 - are encompassing two strings with a
02:32 - comma in between and this creates an
02:36 - array that contains these two objects
02:39 - now if I want to access let's say book I
02:44 - would type my array and then I would put
02:49 - in square brackets and now I put in the
02:51 - index of the item that I want to access
02:53 - and erase begin at 0 so the first item
02:57 - is actually item number 0 when I go like
03:00 - that it returns book and I can actually
03:05 - create an array with 3 items or as many
03:09 - as I wanted there are actually some
03:11 - pretty cool methods that are associated
03:14 - with the race that can help us manage a
03:17 - collection of data so for example if I
03:20 - wanted to find out how many items are in
03:22 - my array I can go my array dot and then
03:26 - call this count method and it would
03:30 - return 3 to me I can also add more items
03:33 - after the declaration so I can go my
03:36 - array dot insert and here you can see
03:42 - that this method accepts a new element
03:46 - at index whatever index I want to insert
03:49 - it into so if I want to insert it into
03:51 - the beginning of my array I would put 0
03:53 - and my new element here could be
03:59 - dinosaur so now my array actually has
04:06 - four items and if I access my array
04:12 - square bracket 0 I get dinosaur now now
04:18 - if I didn't care to insert at a certain
04:21 - index I can also add items like this
04:24 - using the append method
04:26 - and with the append method it just adds
04:33 - this item to the very end of the array
04:36 - so those are two methods I can use to
04:42 - add items into my array so appending
04:46 - also has another shorthand way you can
04:48 - do it so I can go my array plus equals
04:52 - and if you remember from an earlier
04:54 - lesson if this was an INT plus equal
04:58 - would actually add the value to whatever
05:01 - value i had on this side in this case
05:04 - with an array it's going to append the
05:06 - item so I can't to do something like
05:14 - this
05:16 - Xcode will actually complain and give
05:19 - you an error what I actually have to do
05:21 - is surround that by square brackets just
05:24 - like in the Declaration and just like
05:27 - that this line I've added elephant to
05:30 - the end of my array I can add multiple
05:34 - items to the end of my array by doing
05:37 - this so now I have one two three four
05:46 - five six seven items in my array I can
05:54 - also remove items from my array so I can
06:00 - say there are a couple of methods here
06:01 - remove the last item remove items from a
06:04 - certain range remove an item at a
06:07 - certain index or remove all of them so
06:14 - keep in mind that all the items in your
06:17 - array must be of the same type
06:18 - so before you learn that you can specify
06:21 - the type of data that the variable or
06:23 - the property will hold well let's do
06:25 - that with an array to declare that this
06:29 - array will store string objects we use
06:33 - colon and then two square brackets and
06:37 - we type string
06:39 - that make sure you don't do something
06:42 - like this because that indicates that
06:45 - this variable will store a single string
06:48 - object by adding these square brackets
06:51 - it indicates that it's going to store
06:53 - this variable or property is gonna store
06:56 - an array of string objects so that's
07:00 - what an array is it's very useful to
07:02 - help us manage a collection of values
07:04 - especially with all of the different
07:06 - methods to remove add and count the
07:09 - items so now we can take an array into
07:12 - our card game project and use that to
07:16 - display our cards instead oh one more
07:20 - thing before we move on if you wanted to
07:22 - declare a new array that was empty to
07:24 - begin with and it didn't have any
07:26 - objects you can simply do something like
07:29 - this VAR my second array let's say it's
07:35 - a type it's an array of int I can go
07:39 - like that and that indicates that it's
07:45 - an int array right well an array is an
07:47 - object as well so I do that and that
07:50 - creates a new array object of the type
07:54 - integers and it's empty to begin with it
07:57 - has zero elements as you see here and
07:59 - then all of the other methods and stuff
08:03 - like that to append things will work the
08:06 - same way so after running that line my
08:11 - array now has one element and what is it
08:16 - if I access that element at 0 it's a 3
08:23 - so that's what you do when you want to
08:25 - declare an empty array for those times
08:27 - when you don't know what you're going to
08:28 - put in it yet so here I've got our card
08:32 - game project open and I'm going to go
08:35 - into view controller dot Swift if you
08:38 - remember what we were doing here in our
08:41 - play round tapped method we were first
08:44 - randomizing a number between 1 to 13
08:47 - we're putting it in this variable and
08:49 - then we were creating a
08:52 - object that was card followed by the
08:56 - randomized number and then we would use
09:00 - this UI image initializer method and
09:03 - pass in that string to get back a UI
09:07 - image object that was initialized to
09:10 - that image asset in our image asset
09:14 - library right here and then finally we
09:19 - would set that UI image object into the
09:22 - image property of our UI image view
09:26 - object which is the UI kid class that we
09:29 - used to display images onto the view and
09:34 - then we repeated that for the second
09:37 - card view image so now that we know how
09:39 - to use a race we don't actually have to
09:43 - do things this way the drawback to doing
09:47 - it this way is that we had to name our
09:50 - cards with this sort of format so we had
09:55 - to name our ace card one we had to name
09:58 - our JAC card 11 and our queen and king
10:01 - card 12 and 13 well if we if we use the
10:05 - no Rea we actually wouldn't care what
10:08 - the card names are so let me demonstrate
10:10 - I'm gonna start by declaring any
10:14 - property here card names alright and
10:18 - it's going to be a string array and I'm
10:24 - gonna initialize it to all of our image
10:30 - asset names so when I'm done this array
10:38 - is going to have a 13 objects in it
11:06 - so now I've got a string array with 13
11:11 - string objects in it representing my 13
11:16 - carts so down here instead of creating a
11:22 - string with this string with format I
11:27 - could just access the objects in my
11:31 - array depending on what randomized
11:34 - number is selected so I would do this
11:39 - self card names array square bracket and
11:45 - I put in the index here and the index I
11:47 - want to put is first random number so
11:50 - after doing that Xcode gives us an error
11:52 - let's see what it says you int 32 is not
11:57 - convertible to int and the reason it's
12:00 - saying this is because we are trying to
12:02 - specify the index of the array using
12:05 - first random number and you have to use
12:09 - an int to specify the index of the array
12:12 - that you want to retrieve the first
12:14 - random number is au in 32 because arc
12:18 - for random uniform returns a u in 32 and
12:22 - that you int represents an unsigned
12:25 - integer so it's only in the positive
12:27 - range and 32 is just the size so in
12:31 - order to fix this we can tell Xcode to
12:35 - treat this as an int so how we can do
12:38 - that is we just write int Open bracket
12:44 - and we put this whole statement inside
12:47 - the brackets like that and now it's
12:50 - going to randomize a UN 32 it's going to
12:54 - treat it as an integer and it's going to
12:58 - assign it to this variable and let's put
13:01 - the data type of this variable as an int
13:03 - and now we can use this number as the
13:09 - index of our array there's one more
13:13 - thing we have to change though because
13:14 - remember even though we have
13:16 - 13 objects in our array the array is
13:19 - zero based so the first item is actually
13:21 - zero and the thirteenth item is actually
13:24 - at index twelve so because this right
13:27 - here gives us one to 13
13:30 - there's a possibility that it may crash
13:32 - our app if your array has 13 items and
13:36 - you try to access the index 13 it's
13:40 - going to crash your app because there is
13:42 - nothing at index 13 the thirteenth item
13:45 - is at index twelve so we can modify that
13:49 - by just removing this plus one and now
13:54 - this randomization function returns 0 to
13:58 - 12 we added the one before because we
14:01 - needed 1 to 13 but now we need 0 to 12
14:04 - so we don't need to add one so now this
14:07 - will actually work and I'm going to
14:09 - leave the second card using the old
14:12 - method and you can see that both work
14:26 - okay great now let's convert the
14:31 - switching of the second card to use the
14:33 - array as well so I'm going to get rid of
14:40 - that
14:59 - and then get rid of the plus one what
15:05 - we're doing here telling it to treat
15:07 - this UN 32 as an inn is called casting
15:10 - and casting is just a way of saying to
15:14 - treat one data type as another so by
15:18 - using an array we actually don't care
15:20 - what our image asset names are if I had
15:23 - wanted to name my asset here let's
15:27 - change it for good measure and I'll call
15:30 - this my ace I'm gonna call this Jack
15:35 - Queen and King if we go back to here we
15:43 - update the names and this will still
15:51 - work because we're merely accessing
15:54 - element 12 or element 11 and we're
15:57 - retrieving that name there and this is
15:59 - just a single use of an array there's
16:02 - other uses where we're going to
16:04 - demonstrate in our future projects in
16:11 - the next lesson we're going to learn
16:13 - about if statements which will allow us
16:16 - to control the flow of logic or the flow
16:18 - of execution and it gives our app the
16:21 - ability to make decisions based on
16:24 - conditions that we specify and we're
16:26 - going to use that to determine which of
16:27 - the two cards is the larger card and
16:30 - declare a winner on a closing note I
16:34 - want to let you know that Apple has this
16:36 - great Swift programming language guide
16:38 - and it tells you about a lot of the
16:41 - features that we're going through now I
16:43 - don't expect you to read this but it can
16:46 - be handy to have it as a reference we're
16:48 - gonna go through all of these concepts
16:50 - together in the process of building our
16:52 - projects anyways but you can see here in
16:55 - this section talks about strings which
16:57 - we went through talks about collection
16:59 - types which we introduced the array from
17:02 - and it's going to talk about control
17:04 - flow we learned about methods properties
17:06 - classes it might be a little bit
17:09 - overwhelming to read as a beginner
17:11 - but you know if you're watching anything
17:14 - in the video here and you'd like to
17:16 - learn more about it or see some more
17:18 - examples this programming language guide
17:21 - can be a good place to do that
17:23 - I'll add the link to this programming
17:26 - language guide below the video okay so
17:29 - thanks for watching and I'll see you
17:30 - guys in the next lesson