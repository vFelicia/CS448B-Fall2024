00:05 - hey coders this is Chris and I'm here
00:08 - with episode three of how to make a
00:10 - YouTube video app in the previous lesson
00:14 - we had gone into the storyboard and
00:16 - added a table view now we added a
00:19 - prototype cell and furthermore we hooked
00:21 - up that element to this IB Outlet
00:24 - property called table view in this
00:26 - lesson we are going to create the data
00:29 - that we need to power this table view
00:31 - basically what videos is this table view
00:34 - going to display so I mentioned in the
00:36 - previous video that we're going to be
00:38 - doing a basic version with hardcoded
00:41 - data simply because parsing of the feeds
00:43 - is a little bit Advanced for right now
00:46 - so what I'm going to do is in the left
00:48 - hand side in the file Navigator I'm
00:50 - going to create two new classes first
00:53 - I'm going to create a class that
00:54 - represents our video object and next I'm
00:57 - going to create another class that will
00:59 - represent present our model and this is
01:01 - going to be the class that handles all
01:03 - of the data and returns that data to the
01:06 - view controller so in the future if we
01:08 - were to let's say uh change up the data
01:11 - source to get the videos from a feed
01:13 - let's say we only have to modify code in
01:17 - the model as opposed to putting
01:19 - everything inside this view controller
01:21 - and then having a really long file
01:23 - that's really hard to maintain so what
01:26 - you're going to do on this left hand
01:28 - side is rightclick or if you got a one
01:30 - button Mouse I hold down control and
01:33 - click and you're going to get a menu
01:35 - like this and then choose new file make
01:38 - sure you're under iOS source and we're
01:41 - going to choose Coco touch
01:43 - class now for the class name I'm going
01:45 - to call this video and it's going to be
01:49 - a subass of NS object if this is not
01:51 - what you see going to want to type in NS
01:54 - object exactly as it looks here capital
01:57 - n capital S capital O lower case BJ e
02:02 - c okay and make sure the language is set
02:05 - to Swift if it's not already click next
02:08 - and then just click create and by
02:11 - default it should have that folder
02:12 - selected your project folder so it's
02:15 - going to create the file down here I'm
02:16 - just going to drag it and move it up
02:18 - here so now we have a a video class I'm
02:22 - going to start by declaring some
02:24 - properties of this video object that we
02:27 - expect to have so if you think of this
02:30 - class as representing one of our videos
02:32 - what sorts of metadata or what sorts of
02:35 - pieces of information would a video have
02:38 - so let me bring up my YouTube channel
02:40 - which is these are going to be the
02:42 - videos I'm going to be displaying so it
02:44 - has stuff like a title if I click into
02:47 - it let me just mute it there uh it has a
02:53 - description and furthermore it has an ID
02:57 - which is how YouTube identifies this
02:59 - video we're going to need this ID in
03:01 - order to display the video later on in
03:04 - uh when the user drills down and selects
03:06 - a video and we also need this ID in
03:09 - order to get the thumbnail image to
03:11 - display in our table view so right here
03:15 - I'm going to say
03:17 - VAR video ID
03:21 - colon string and let me explain this
03:24 - line here I'm declaring a new property
03:26 - for this video class called video ID
03:30 - and it's going to be of type string
03:32 - which is just a piece of text so that's
03:34 - what this colon string means and I'm
03:37 - going to assign out a value I'm going to
03:39 - say equals and I'm going to do two
03:42 - quotes and this is an empty piece of
03:45 - text it's what I am initializing this
03:48 - video ID to so this equal signs means
03:51 - I'm assigning this empty string into
03:54 - this property so whenever I create a new
03:56 - video object it's going to have a video
03:58 - ID of Mt string next I'm going to say
04:02 - video title and it's also going to be a
04:05 - string and I'm going to initialize it to
04:08 - that uh lastly we have video
04:11 - description it's going to be a string as
04:13 - well and empty string so now I have a
04:18 - video class which I can create multiple
04:21 - video objects from and each video object
04:24 - has its own set of uh video ID video
04:28 - title and video description
04:30 - okay so now we're going to create
04:31 - another class let's right click choose
04:34 - new file we're going to go make sure
04:36 - you're under iOS Source again choose
04:39 - Coco touch class in this one we're going
04:41 - to call it our video model and model
04:46 - might be an unfamiliar term for you
04:49 - unless you've seen the uh start here
04:51 - series on my channel page uh where you
04:53 - learn about the model view controller
04:55 - framework so the video model class is
04:58 - going to be responsible for supplying
05:00 - all of the video objects to the view
05:01 - controller so the view controller is
05:03 - going to be communicating with the model
05:05 - to get the data it's also going to be a
05:07 - subass of NS object make sure it's typed
05:10 - exactly this way and make sure that the
05:12 - language is Swift click next and click
05:16 - create so I'm going to move this up here
05:19 - again and then in the video model I'm
05:21 - going to create a method for the view
05:23 - controller to call for the data so I'm
05:25 - going to write fnc to declare a new
05:29 - method
05:30 - and for my method name I'm going to just
05:32 - call it get
05:33 - videos Open Bracket close bracket and
05:37 - inside these brackets is where I would
05:39 - specify some input parameters if I
05:42 - wanted to and that just means those are
05:45 - the parameters which I also must pass in
05:47 - to call get videos but because I don't
05:50 - require any additional info when view
05:52 - controller calls get videos I'm not
05:54 - going to put any input parameters in
05:56 - here now I'm going to type Dash and this
05:58 - Arrow and what I'm doing here is
06:01 - specifying a return type so that means
06:04 - that whenever get videos is called it's
06:07 - going to return some sort of data and
06:09 - here when I'm specifying the return type
06:12 - that's the type of the data that gets
06:14 - returned so I'm going to return an array
06:17 - of video objects so arrays are something
06:20 - that you should have learned in the
06:21 - start here lessons as well that's why
06:23 - I'm saying that those videos should be
06:25 - watched before this YouTube series so
06:27 - we're going to declare an array and
06:29 - we're going to type in the video class
06:31 - that we created here so this specifies
06:35 - that the get videos method is going to
06:37 - return an array of video objects and
06:41 - then we do two curly braces so if you
06:44 - type in this curly brace like the
06:45 - opening one and then you press enter it
06:47 - should fill
06:49 - in the second one for you like that if
06:53 - it doesn't you can just type it in so
06:55 - right now xcode is immediately
06:57 - complaining about something it's saying
06:59 - missing return in a function that is
07:01 - expected to return an array of video
07:03 - right so we're going to remedy that very
07:06 - quickly here let's declare a local
07:09 - variable inside this method called uh
07:12 - I'll just call it the videos and we're
07:14 - going to say it is equal
07:19 - to an empty video object array so let me
07:23 - explain the difference between this line
07:25 - here and this line up here I'm
07:27 - specifying that this method return
07:29 - returns this sort of type this class
07:32 - type whereas here I'm creating a new
07:36 - instance of this class and so this is an
07:40 - actual video array object whereas this
07:45 - simply is the type or the class type if
07:48 - you're confused about the difference
07:49 - between a class and an object uh check
07:52 - out lessons 9 and 10 of the start here
07:54 - series and that explains the basic
07:56 - objectoriented programming Concepts so
07:59 - when in other words this is telling me
08:01 - what sort of data gets returned and this
08:03 - is a piece of the actual data so right
08:06 - now this is an array that is empty and
08:09 - I'm assigning it to this videos local
08:12 - property so whenever I type videos I'm
08:15 - actually using this empty array here and
08:19 - then xcode is giving us a warning and
08:21 - saying
08:22 - that um it's never used but we we will
08:26 - use it soon so let's ignore that for now
08:28 - so here I'm going to create a comment by
08:29 - doing SL slash you can see there are
08:31 - some comments up here these don't affect
08:33 - the execution of the app but they're
08:35 - useful as documentation as we go along
08:38 - and to remind us of what we're doing in
08:40 - the future when we look at our code so
08:42 - I'm going to say um create a video
08:49 - object assign
08:54 - properties append it into the
09:00 - videos array so we're going to do this
09:03 - maybe five times once for each video so
09:06 - I'm going to use the keyword let which
09:08 - is kind of like declaring another
09:10 - variable except that with a variable I
09:13 - can assign different things to it over
09:15 - and over with the let statement you're
09:17 - declaring a variable that you can only
09:20 - assign one thing to and then you can't
09:22 - assign something else to it and that's
09:24 - called a constant so I'm I'm going to
09:26 - call this constant Video One and I'm
09:29 - going to create a new video object so
09:32 - this is a new instance of this guy this
09:35 - class that we
09:37 - created okay so I'm going to say Here
09:41 - video one dot video ID is equal to this
09:49 - first video right here so in the URL bar
09:52 - I want to select what's after the V
09:54 - equals I'm going to command C to copy
09:57 - that and Comm command V to paste it
10:00 - there but actually it's a string you
10:02 - have
10:03 - to uh surround it by
10:05 - quotes Okay so video
10:07 - one. video title now I'm going to assign
10:10 - it a
10:12 - title so I'm going to just copy this
10:15 - Title
10:18 - Here video One
10:21 - do
10:24 - description uh not description Sorry
10:27 - video description is the property that
10:29 - we
10:32 - created and I'm going to select just
10:35 - this right
10:36 - here I'm going to paste that there you
10:39 - might have to get rid of the line
10:42 - breaks like that uh and then finally
10:44 - let's append it to our videos array so
10:47 - we say videos do append and we can put
10:51 - in video
10:53 - one okay so so far we have one video in
10:57 - this array that we we declared up here
11:00 - and then at the end of this method I'm
11:02 - going to use the return keyword to
11:04 - return the data because remember this
11:05 - get videos method has to return this
11:08 - type of data an array of video objects
11:10 - so I'm going to return videos which is
11:13 - our array of video objects so let's just
11:16 - add a comment up here create an
11:20 - empty array of video objects and then in
11:25 - here return the array to the caller
11:29 - so what we've just done here is we've
11:33 - created an array of video objects we've
11:36 - created a single video object we've set
11:39 - its properties and then we've added it
11:41 - to the array and then finally we return
11:43 - that array to the caller so I'm going to
11:45 - repeat this for maybe four more videos
11:49 - so we have a total of five so since
11:51 - we're hardcoding the data all I'm going
11:53 - to do is highlight this I'm going to
11:55 - press command C to copy it create two
11:58 - lines here here maybe three lines press
12:01 - command V to paste it and then change
12:03 - this constant from video one to video
12:06 - two you're going to have to change all
12:08 - of these ones to
12:11 - twos you have to be very careful about
12:14 - doing this because if you miss even one
12:16 - of these variable names uh it's going to
12:19 - cause unexpected problems in your
12:21 - application so I'm going to change the
12:23 - properties of this and I'm going to do
12:25 - this for uh four more videos so I have a
12:27 - total of five and I'm not going to make
12:29 - you guys sit through that so I'm going
12:30 - to stop recording while I do that and
12:32 - then I'll be back hey coders I'm back so
12:36 - now I've got five video objects so we
12:39 - started with this one and then I created
12:43 - four more copying pasting that chunk of
12:46 - code changing the variables from video
12:48 - one to video two um changing the video
12:51 - ID the title the description and then
12:53 - doing it for all of these videos now I
12:56 - have five videos in my array and I'm
12:58 - going to to return these videos to the
13:00 - CER of this method now make sure you
13:02 - save it in case you lose your data now
13:05 - we're going to go into the view
13:06 - controller and from The View controller
13:09 - we're going to get that list of videos
13:12 - or array of videos from the video model
13:14 - and then it's going to pass it to the
13:16 - table view to display and actually it
13:19 - works the other way around as we're
13:21 - going to learn a couple of videos later
13:22 - it's the table view that asks the view
13:25 - controller for the data and then the
13:28 - view controller because it has that
13:30 - array of video objects it's going to be
13:31 - well equipped to supply the table view
13:34 - with that data to display okay so first
13:36 - things first up here in the view
13:38 - controller let's declare a property
13:41 - called videos and this may seem very
13:44 - familiar it's going to be an array of
13:46 - video and right here I'm going to
13:49 - immediately assign it an empty video
13:52 - array and then in the viewed load of the
13:55 - view controller this method
13:57 - automatically gets called called when
13:59 - the storyboard has
14:01 - loaded uh and that's the name view did
14:03 - load so after the view has loaded I'm
14:07 - going to say self thought
14:10 - videos which is referencing this guy
14:13 - right here is equal
14:16 - to video
14:19 - model so let's create a new video model
14:22 - object like that I got an extra m in
14:25 - there it should turn into this turquoise
14:28 - or greenish color turquoise actually if
14:31 - uh it's a correct class name so I'm
14:34 - going to create this video model object
14:37 - and I'm going to say dot get videos so
14:41 - right here you can see that it detects
14:43 - the method and this is the return type
14:46 - it returns an array of video objects
14:49 - which is the same type that this
14:52 - property is so we won't have any
14:54 - problems doing this all right so what
14:56 - we've done here is we've created a new
14:58 - new video model object and then we're
15:00 - calling the get videos method on that
15:03 - and assigning the result or that passed
15:05 - back data into self. videos so later
15:09 - when the table view asks the view
15:11 - controller uh for the data to display um
15:14 - The View controller can just access the
15:17 - stuff in self. videos to tell the table
15:19 - view what to display and if you went
15:21 - through the start here lessons and
15:22 - you're a little bit confused about this
15:24 - line where we're doing kind of two
15:26 - things at once uh we can actually split
15:28 - it up so I can do something like let
15:31 - model equals video
15:35 - model so we're going to declare a new
15:37 - video model object and assign it into
15:40 - model and then in here instead of
15:42 - writing this I can say
15:44 - model. get videos so what I did before
15:48 - was just saving a Ste I I didn't declare
15:51 - a separate variable or constant to store
15:54 - the video model object uh because I
15:57 - wouldn't need it later on all all right
15:58 - so we're one step closer to displaying
16:01 - our YouTube videos in our table view I
16:03 - hope you guys enjoyed this lesson please
16:06 - like it subscribe and share it with
16:08 - others if you did and I hope you guys
16:10 - have a happy weekend I'll see you guys
16:12 - on Monday at 12:00 p.m. Eastern bye for
16:20 - [Music]
16:24 - now