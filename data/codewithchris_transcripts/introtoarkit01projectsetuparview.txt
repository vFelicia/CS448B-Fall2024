00:00 - in this course you will get an introduction 
into making augmented reality apps  
00:04 - using arkit reality kit and swift ui hey code crew 
this is flo this is the first lesson of the ar kit  
00:13 - course in this lesson you will set up your xcode 
project for ar dabble with a custom ar view a ui  
00:21 - view representable for that ar view and then you 
will end up with an empty augmented reality screen  
00:27 - first of all when you create your project 
there are basically two options there is the  
00:31 - easy route where you select augmented reality 
app as your application or you select a simple  
00:38 - swift ui app this is what i have done in the 
example project that i already created which is  
00:43 - completely empty but just so you know i did not 
start with an augmented reality app i started  
00:48 - with a regular switchoi app and we will add all of 
these ar features ourselves okay so first of all  
00:55 - for your understanding an augmented reality app is 
basically just a single view all of the augmented  
01:01 - reality stuff happens in a so-called ar view which 
is from ar kit but it's very similar to ui kit  
01:08 - so in order to use it in swift ui we will have 
to create our own ui view representable but since  
01:13 - we want to customize that ar view with some extra 
functionality for example to play some 3d entities  
01:20 - in the scene we will actually create our custom 
ar view and that's the first thing that we will  
01:26 - do right after creating a new group here and i 
like to always create a feature targets group  
01:33 - that basically sorts the app by each features 
or for example a settings group inside of that a  
01:40 - home feed group a user profile group and so on 
now in our case i will just put everything inside  
01:46 - of the feature targets group that i just created 
so in here we will start with our custom ar view  
01:53 - next we will build our air view representable 
and then lastly we will add that into our  
01:58 - swift ui view and get it all running for a very 
basic starter application so let's hit command  
02:04 - n and let's create a new swift file 
and we will call it custom ar view  
02:13 - now in here we don't need to import foundation 
instead we can import a r kit and then for later  
02:18 - on we can already import reality kit and swift 
ui we will need all three of those later on there  
02:25 - will be a lot happening in the future lessons in 
this exact file okay so we will create a class  
02:31 - called custom ar view which inherits from ar 
view so usually you would directly use ar view  
02:40 - in your app but we will create this custom area 
view so we can add some functionality in there  
02:46 - if you subclass from a ui kit view 
there are two initializers that you  
02:51 - need to implement so the first one is in 
it from a frame and here we will just call  
02:56 - super.init with that frame that we got passed 
in so basically we call our ar view initializer  
03:05 - and then we also need to in it from a coder 
i think this is the one and i think you also  
03:12 - have to specify that it is dynamic doesn't really 
matter for our context and then in here we're not  
03:17 - implementing this this is basically decoding 
um this class which we will never have to do  
03:23 - so we will just throw a fatal error saying 
init with a coder has not been implemented
03:35 - okay and then we will also implement a 
third initializer and this is the one  
03:39 - that we will actually use so we will make it a 
convenience init and it takes in no arguments  
03:46 - it's a convenience initializer because this 
one will actually call another initializer  
03:52 - and it will call the self.init with a frame and 
we will just pass in the entire screen bounce  
04:02 - so our air view will fill out the full screen we 
will also be able to handle that in swift ui later  
04:08 - on okay so this is our custom ar view right 
now you might not understand why we need it  
04:13 - because it basically does nothing 
except for extending air view and  
04:17 - you're right right now it's totally not 
needed but in the future we will build  
04:20 - on top of this and add some more functions in here 
that will then hopefully make more sense to you  
04:26 - okay next up we will create the view representable 
so we can actually use this custom error view  
04:32 - in our swift ui code so let's right click on 
feature targets and hit new file swift file  
04:39 - and this one will have a very long name you will 
probably want to choose a different name here  
04:44 - so i will call it custom air view 
representable and then let's copy that name  
04:52 - okay in here we just need to import swift ui 
now this will not be a class since we're not  
04:58 - in ui kit land anymore now we're in swift ui 
land so it will be a struct our custom ar view  
05:04 - representable and this one of course 
needs to conform to the protocol  
05:08 - ui view representable which basically means 
that we can use this in a swift ui we use body  
05:15 - if you implement uiview representable you need to 
have two functions the first one is make ui view  
05:22 - and the second one is update ui view i think 
we will never actually use the update function  
05:29 - so we will just leave that one empty and then 
the make ui view we will basically just return  
05:35 - the view that we just created so our custom 
ar view so we can just say return custom ar  
05:42 - view and now here we can use our convenience 
initializer with no arguments this one that  
05:48 - we defined here in line 16 basically and then we 
can also copy this type name and replace the sum  
05:56 - ui view with that and this uiview type as well 
just so compiling might be a tiny bit faster  
06:02 - because xcode doesn't have to resolve this type 
by themselves okay now already the second to last  
06:08 - thing for this lesson is to move content 
view into our feature targets group as well  
06:13 - once again you can call this group whatever 
you want you could also call it ar views or  
06:17 - ar components or you could even not have a group 
at all it's just a bit better organized like this  
06:25 - so in our content view now we have already 
done all of the hard work so we can now use our  
06:30 - representable here and actually display it to the 
user so we have our custom air view representable  
06:37 - and then we did specify the ui screen main 
bounds here as the frame but in swift ui it  
06:45 - will by default ignore the save not ignore the 
safe areas but we actually want the camera part  
06:52 - of the app to basically stretch from the very 
top to the very bottom of the screen so we'll  
06:57 - add the ignores safe area modifier here in the 
end as well now i already spoiled it because  
07:05 - an air view basically is a camera stream right 
and if you want to use a camera you need to add  
07:11 - a privacy description in your info.plist file so 
that is basically the last thing that we have to  
07:16 - set up now so let's go into our project file 
select our target on the left and then click  
07:24 - info in the top navigation bar here and then for 
any of these entries it really doesn't matter  
07:30 - click any of these plus icons and in here you 
can search for privacy camera usage description  
07:39 - and in here we can just add any kind of string so 
you could for example say needed to show ar view  
07:47 - this is basically the string that's shown 
to the user when they asked for permission  
07:51 - to use the camera okay so now we have our 
basic project set up and when you run the  
07:56 - app then you will only see a camera stream 
no text elements no entities anywhere nothing  
08:03 - just a plain camera view but you will 
already know that this is not just a camera  
08:06 - this is actually our custom ar view which 
inherits from ar view so this is basically an  
08:13 - empty augmented reality app that we have now 
created with our custom view and our view  
08:19 - representable in this lesson you started to 
set up your xcode project for working with ar  
08:25 - and you created the core infrastructure 
that you will need in the next lessons