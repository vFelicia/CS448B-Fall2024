00:00 - hey code crew it's chris here last week jc 
showed you how to design this app inside figma  
00:05 - well he told me that you guys 
wanted to see this turned into code  
00:08 - and i'm here to deliver so jc has passed 
me the figma file and i will show you the  
00:14 - five-step process that i took to turn this 
design into an xcode project so that you can  
00:20 - actually build off of that design and turn 
it into an app alright let's get started
00:31 - all right so to get from this figma design to an 
xcode project that looks like this we're going to  
00:37 - have to go through several steps the first step is 
to dissect this design and see what structures we  
00:43 - can use from our swift ui toolkit to accommodate 
these different things next we are going to export  
00:50 - all of the assets we need from this design things 
such as fonts colors icons and things like that  
00:57 - then we are going to create our xcode project and 
we are going to import all of those design assets  
01:03 - in the best practices i'll show you what that 
looks like and lastly the rest of the steps are  
01:09 - just implementing the different parts of the 
view that you see here all right let's start  
01:14 - with step one where we're going to break down this 
design so first of all i see a tab bar down here  
01:19 - so that is going to be a tab view in swift ui 
these icons there's going to be four different  
01:25 - tabs now i saw that jc was using icons 8 which is 
a library of icons that we have alternatively you  
01:34 - could also use sf simples which is nice because 
you don't have to export any assets for this  
01:40 - they just come built in however that's not to say 
that exporting these icons will be hard either and  
01:46 - that's completely fine because sometimes you can't 
find what you want inside the sf symbols library  
01:52 - so again i see a tab view here and then here 
up top i see a toolbar so there's going to be  
01:59 - a bar button on the right there's going to be 
another bar button on the left and then this  
02:04 - is going to be the navigation title and then 
we have here what looks to me as a scroll view  
02:11 - because potentially this could be very long 
so we definitely want this to be scrollable  
02:15 - inside the scroll view uh we have a series of 
v stacks and h stacks to arrange this sort of  
02:22 - layout now each of these looks to me as a 
task or to-do item so we will be creating  
02:29 - a just a simple data structure to represent a 
task and we'll create four pieces of dummy data  
02:36 - representing each of the four tasks 
and then we'll loop through that  
02:40 - task array to display each of these right we're 
not gonna hard code each row right we're gonna  
02:46 - design one of these rows and loop through it 
create four of these rows one for each task  
02:52 - and then lastly we have a button down here so i 
know that in order to overlay a button on top of  
02:57 - something we're going to be using a zed stack and 
you know it seems easy for me to say these things  
03:04 - because i've done it a bunch of times but for you 
there may be some figuring out and maybe watching  
03:09 - more tutorials like this to see how we can break 
down a design into different layout components  
03:15 - inside swift ui okay so now that we have a 
plan of action let's go ahead with step two  
03:20 - and that is exporting all of the assets from 
this design now some people will do it um ad hoc  
03:27 - so as they're building out the design inside xcode 
they're going to export the things they need but  
03:32 - i find that much more organized if we take out 
everything up front and we sometimes will miss  
03:40 - something and that's fine to go back but i find 
that especially shooting a tutorial like this  
03:46 - if i do it back and forth it gets a little harder 
to follow so that's why i'm opting right now  
03:51 - to export everything i need in some companies 
this is actually the role of the designer so  
03:59 - the designer might give all the exports and a data 
sheet of all the colors and the fonts and things  
04:04 - that are needed and pass it to the developer on 
a smaller team this might be the developers task  
04:10 - in either case it's good that i can show you 
how i would do it now now we're going to start  
04:16 - with the most obvious things first and that is the 
icons that's probably one of the first things that  
04:21 - you think about when dissecting a design now i can 
see the alarm clock icon right here and i can see  
04:29 - there the tab icons i mentioned these are 
not sf symbols so we will have to export them  
04:34 - actually some of some of these do look like it 
for example that actually does look like well it  
04:42 - doesn't have the circle in the middle this one has 
a circle in the middle uh i i know for a fact that  
04:49 - i saw in the previous video that jc used 
icons eight so i'm going to export them  
04:53 - this one however this one's part of sf symbols
04:59 - it's just this circular one right here so we don't 
have to export that um and then this hamburger  
05:06 - menu icon this the three dots the ellipses there 
and this as well i am going to export as an icon  
05:15 - so okay now exporting these design assets let's 
talk about what we should export it as because  
05:22 - there are several options as you can see so 
we're going to export the alarm clock for example  
05:28 - this alarm clock you could export it as a 
png jpeg svg pdf now i learned something new  
05:35 - recently from inyaki we are actually developing 
a style guide for our team because now that our  
05:41 - development team's growing a little bigger um we 
we need to stay organized and consistent across  
05:47 - our coding and projects and so we have these 
open discussions about how we should do things  
05:53 - and one of the things was how we should name 
assets so this is pertaining to this discussion  
05:58 - is relevant we are going to prefix our image names 
with ic or image or bg or something like that  
06:06 - but one of the things that i didn't understand 
was i traditionally only used pngs with three  
06:12 - different sizes for the different screen 
resolutions but i actually noticed that inyaki was  
06:18 - suggesting pdfs for different foreground images 
and background images so i was asking him why and  
06:23 - it turns out that pngs are more memory efficient 
but if you are going to be scaling the png at  
06:30 - different sizes well using a pdf actually scales 
better without losing any fidelity in the image  
06:37 - so our decision was for fixed size things like 
icons we are going to use pngs for things that  
06:43 - may come in different sizes that might need to 
get resized on the screen we are going to use pdf  
06:49 - so for this we're going to export it as png so i'm 
going to export everything onto my desktop and i'm  
06:57 - going to organize them make sure that they're 
named properly and then once we've collected  
07:01 - all these image assets we'll import it into xcode 
so let's start with the alarm clock here now one  
07:07 - thing we're going to do png because we said it 
was icon and i'm going to click this plus icon  
07:13 - to do size three sizes i'm going to export the 
alarm clock now one of the annoying things at  
07:18 - least with the browser version of figma i 
was researching this i was told it doesn't  
07:23 - happen with the desktop so the annoying thing is 
that if it is embedded in a bunch of different  
07:28 - uh i guess layers when you export it let's say 
something like this i'll just call it alarm
07:37 - it comes as a zip file but that's not 
the most annoying thing when you unzip it  
07:42 - there's a whole bunch of layers in some cases of 
subfolders before you actually reach your assets  
07:50 - and furthermore these are not named the way you 
you want it to be named for that it's actually the  
07:57 - the group here so you've got to change 
this if you want it to be named properly  
08:00 - um with your naming convention you should 
probably name this ic alarm but that's going  
08:06 - to be fine for us because when we import it into 
the asset library in xcode we'll name it there  
08:11 - okay so i'm just going to change 
this to assets and we're going to  
08:16 - just dump all of our assets in there 
okay so let's do it with these as well
08:23 - so three sizes png we'll call this uh dots
08:33 - we're gonna call this
08:43 - hamburger we are going to call this 
don't forget this chevron right here
08:54 - call this down arrow
08:58 - i'm going to call this
09:07 - check box and then for each of these icons 
i'm also not going to be worried about the  
09:13 - different colors you can actually use a 
swift ui modifier that will allow swift  
09:20 - ui to use this in a grayed out way if it's 
like a tab that you're not on and it'll tint  
09:25 - it the accent color of your app as well so it 
doesn't really matter what color you have here
09:44 - call that the inbox i'll call this the reminders
09:51 - and call this the settings
09:55 - all right and that should be all of 
the image assets that we have here so  
09:59 - let's go back to our desktop 
and i'm going to unzip  
10:02 - each of these and then i'm going to throw them 
into our assets folder so that was the dots
10:14 - probably easier actually just to drag these into 
xcode rather than moving them all into one folder  
10:20 - so i'm just going to leave them here for now what 
we're going to do next is we're going to create  
10:24 - our brand new xcode project and we're going to 
add all these images and we're going to add the  
10:28 - colors and fonts as well because we don't need to 
export those into a folder so i'm gonna i'm gonna  
10:33 - minimize this project because that's the finished 
one and let's create a brand new pro xcode project
10:46 - uh i'll just call this figment code app and we'll 
put it in here all right so first of all let's  
10:55 - jump into the assets catalog here and what we're 
going to do is create a new folder for images  
11:02 - and we're going to create 
another folder for colors  
11:05 - so those should both be top level and we're 
going to put the accent color in two colors if  
11:11 - you didn't know this accent color is pretty cool 
you can set this to any color you want and it will  
11:17 - change like all of the default button colors and 
actionable text you know that all of the tappable  
11:25 - stuff uses this accent color so this is one easy 
way to change everything to this blue for example  
11:33 - right you can see that it's actually good 
user experience to make sure that you use  
11:37 - the same color to indicate something that can 
be actioned on or tappable so links buttons tab  
11:45 - things tab tabs tab buttons and things like that 
so we can set the accent color to this blue and  
11:53 - we don't have to set manually the colors there 
but we're getting ahead of ourselves let's do  
11:58 - the images first so and this was probably 
a lot a little easier to do it this way
12:11 - uh did i miss any there's a whole bunch here yeah 
i kind of got mixed up with the organization here  
12:18 - so we need this one yeah okay so let's 
dump these all into the images folder here
12:29 - and let's rename them so this one is going 
to be ic alarm this one is going to be i see  
12:36 - a reminders no inbox because ic 
stands for icon again task list
12:48 - hamburger
13:04 - and this one is going to be reminders
13:10 - okay i think that is it for now so in terms 
of colors let's set up that accent color  
13:16 - that we talked about so if i hold down 
command and i click on this i can get  
13:21 - into the circle and i can see that this is the 
accent color let's double check with this active  
13:26 - tab color is the same one right here so i'm just 
going to go ahead and set the color hexadecimal  
13:37 - and set it to that and we're going to add a couple 
of other colors so what colors do we have here  
13:42 - we have i'm assuming this is black right yeah 
it's just black okay so we have black which  
13:49 - we don't need to make a color for we have white we 
have this background this gray background so that  
13:56 - that's a color this one right 
here so i'm going to call this
14:04 - color set background now i'm naming these with the 
capital letter in camelcase because this is what  
14:14 - apple used as a standard here if you actually 
change accent color to like lowercase a and  
14:19 - lowercase c it's not going to recognize it as the 
accent color so for colors i'm going to name it  
14:24 - use camel casing for images like this i'm going 
to use all lowercase and the nice thing about  
14:30 - defining these colors here is that if you 
define the dark mode version of that color here  
14:37 - when the user uses dark mode there's 
very little that you have to do  
14:40 - it will automatically select the dark mode 
version and then for any anything else it'll  
14:48 - use what you have here and you can also 
define the light mode here if you want  
14:53 - okay so we have the background as gray and 
we have the black we have this blue this this  
14:59 - blue actually we don't need this blue because 
it's part of the asset that we exported already  
15:06 - and that's it yeah those two actually might 
be the only colors that we have okay then
15:16 - now in terms of font so let's talk about fonts 
if i click on this the font is inter now that's  
15:22 - not something that comes as a system default and 
i search this up and enter is a font that we can  
15:34 - get from here i just googled it so if you google 
interfont you'll come to this page i'll link it  
15:39 - below in the description as well so we can use it 
here i'm not gonna obviously before you use a font  
15:47 - that you're gonna you know put in an app that 
you're gonna sell or something look at the license  
15:52 - because that's important for this demo i am just 
going to go ahead so i'm going to download this  
15:59 - as a zip file i'm going to unzip it on my 
desktop and what we're going to need let's see  
16:08 - desktop variable web let's use the desktop 
version if i look at the figma file here  
16:17 - and i look at the design we have interweb bold 
okay so i'm going to need the bold version  
16:22 - that's this one right here um what what's 
this sem semi bold okay this is intersemi bold  
16:30 - that's basically all that 
wait there's this one here  
16:33 - this one is also semi-bold this one is 
semi-bolt okay so we only need the bolt for this  
16:40 - and we need everything else in here is 
semi-bold we only need these two bold and  
16:46 - semi-bolt these two files so we're going to add 
these to our project let's create a new group  
16:54 - the fonts unfortunately we can't import them into 
the asset library so we're going to have to drag  
17:00 - them and actually put it into our xcode project 
now i don't know why this isn't a default but make  
17:06 - sure you check this otherwise the font files won't 
actually be included in the resources for this  
17:13 - copy items if needed is good because it's going 
to copy those files into your project folders and  
17:18 - you're going to have these two now we're not done 
yet what you have to do is go into the project p  
17:24 - list it used to be a p list but now it's in here 
so if you click this node and then you click info  
17:32 - here are this basically some configurable 
properties for your project we're going to  
17:38 - have to specify that we want this project to 
use these fonts font files so make sure that  
17:46 - at the very bottom click this plus and then 
we're going to search for capital f so you just  
17:52 - do lowercase f it's not going to come up capital 
f fonts fonts provided by application okay this is  
17:59 - gonna be an array meaning you can specify multiple 
fonts so expand it and then for the first item  
18:05 - is a string we're gonna put the file name 
including the extension so it's otf right here  
18:16 - and then i'm going to click plus again making sure 
that it says item one now and add the other one
18:25 - oops if you make a typo it's not 
going to recognize the font if you  
18:28 - accidentally add extra items 
hit the minus icon right there
18:34 - okay so now we have these two font files 
uh now we're ready to go but to make it  
18:42 - easier for ourselves let us define some font 
styles that we can easily specify in our views  
18:49 - so let's go ahead and click new file here open 
a new swift file we'll call these font styles
18:59 - and this is going to be an extension to the 
font class and here we are going to define a  
19:08 - couple of new font styles so this one let's say 
the bold one here this is a navigation title so  
19:15 - i'm going to call this a nav title this is going 
to be a font and we want this font to be custom
19:28 - now you're going to need to know the name of 
the font that you want to use and that's not  
19:33 - necessarily the name here i don't think in the 
past we used to it wouldn't always be this name  
19:41 - that was imported here we needed to figure 
that out but in this case it is now i'll show  
19:50 - you how to figure that out if if it happens 
not to be but for now let me just put this  
19:55 - and then let's check out the size the size 
is 17 for this see it's inter bold and 17  
20:02 - so i have inter bold 17. so now when it comes 
time for me to configure the view for this  
20:10 - title i can easily just you know specify this font 
style so we're going to do that for a couple more  
20:18 - we're going to do it for let's see what's 
this enter semi-bold 14 enter semi bold 14  
20:26 - enter semi bold 14. this is intersemible 
12. okay so we're going to have 14 and 12  
20:33 - has two different ones 12 is for 
the um the task alarm text and
20:43 - interseminable 14 is for everything 
else so let's call this task text
20:59 - enter semi bold what an autocomplete come up
21:07 - and this one is going to be task alarm text and 
it's basically the same thing except it's 12.  
21:15 - oh we uh we need to import swift ui yes 
because font is a swift ui thing okay command b  
21:23 - to build it hopefully everything looks good okay 
succeeded um and now we've successfully imported  
21:30 - all of the design assets into our project now i 
promise that i would tell you what to put in here  
21:38 - right in case that the font names don't actually 
match up with these names here so what you can  
21:43 - do is for example you go into your initial any 
initial view either the app entry point or this  
21:50 - you can write an init method here and 
then you can literally just print it  
21:56 - out into the console so you can do 
it look like this for font family in
22:08 - is it font i haven't done this in a while 
ui font family names yeah that's right um  
22:14 - then you can print out so let's 
print out the font family names first  
22:19 - so i'm just going to run oh i didn't want 
to run it and then ipod touch let's do that
22:30 - okay so there's nothing to see in the ui because 
there's there's nothing there but however when  
22:37 - this finishes launching we should see all of the 
family names here perfect okay so make sure enter  
22:43 - is right here if you don't see enter on this 
list that means it doesn't recognize this font  
22:49 - so double check that if you click on this font 
file it has this checked so that it is included  
22:57 - in this target the other thing is make sure that 
inside the info p list that you did what we we did  
23:05 - here fonts provided by application and you put the 
file names with the extension okay so these aren't  
23:11 - just the family the font family name but not 
the actual font names so you got to go one level  
23:16 - deeper so you're going to come in here and inside 
instead of just printing the font family we are  
23:23 - also going to print out uh for font in font family 
so you're going to loop through each of those
23:32 - and you're going to print perhaps let's do that
23:40 - oops so then we get a little indent 
it's a little easier to read oh my gosh  
23:48 - i don't know what happened there
23:53 - well actually instead of doing this i 
remember now so ui font dot font names for  
24:00 - a specific family we're going 
to pass in the font family  
24:05 - all right now we're going to run it and we're 
going to see the actual font there we go  
24:09 - so for enter if we go all the way back up enter 
there we go enter semi-bold and enter bold so  
24:17 - if you did this and you're assuming that 
these are the font names and it didn't work  
24:25 - then you do this right you loop through the 
actual font family and find the actual font  
24:32 - this is what you're going to be specifying 
what you find here this is what you're going  
24:36 - to be specifying to identify the font like 
here okay so i hope that was informative  
24:43 - lucky for us the actual font name matches what we 
see here so i'm going to go back here and remove  
24:50 - i'll remove the init as well because we don't 
need that right now okay so we have dissected  
24:56 - the design so we know sort of what layout 
structures to use in swift ui we have exported  
25:01 - all of the assets from the design and we've also 
added all the assets into here the next step  
25:07 - is to construct some of our initial views now 
i said that for the initial outer structure we  
25:14 - have a tab view and that's what we have here 
so that's what i'm going to do i'm going to
25:21 - in the content view here 
instead of just a piece of text  
25:25 - we're going to have a tab view now 
inside the tab view there are going to be  
25:30 - the the different tabs right so i'm going 
to call this one that you see here the task  
25:34 - list this is going to be the inbox this is going 
to be reminders and this is going to be settings  
25:38 - so i'm going to create all of the views so 
that we can attach the tab icons to them but  
25:43 - we're actually only going to be implementing the 
task list view because that was what was designed  
25:49 - so let's go ahead and just create those other 
dummy views and use a swift drive view task list
26:00 - let me just sorry i'm going to delete it 
because i want to name it something different
26:09 - i want to name it task list view
26:17 - we have a settings view
26:25 - we have an inbox view and we have a reminders view
26:34 - okay now i am going to
26:39 - go into our content view and now we 
can have those different tabs task  
26:43 - list view all right we have what's next 
inbox view we're going to have reminders
26:53 - and finally settings view
26:57 - that matches the different views we have here 
let's attach the icons so we have a tab item  
27:05 - this is just going to be image named ic task 
list and that's why i named them this way so
27:17 - i named them according to 
not what the icon represents  
27:23 - um sorry not what the icon is but rather what 
the icon represents uh this would be reminders  
27:33 - inbox okay so now let's launch and we should 
actually be able to see something great  
27:40 - oh yes so the reason why this is the way it is 
is because this is blue you know we exported  
27:46 - this as a blue icon and these are gray so that's 
why it's showing it like this and i'm actually  
27:52 - tapping on these icons but nothing's 
happening it actually is switching the tab  
27:56 - it's just that these images what we have to do 
i i told you it wouldn't matter what color we
28:04 - we exported them as because what you can do is 
change the rendering mode to template a mode  
28:10 - that renders all non-transparent pixels as the 
foreground color right now i think by default  
28:18 - like is this one a mode that renders pixels 
of images as is that's why the first one was  
28:23 - blue because we exported it as blue so let's see 
what happens if we do we render these as template
28:34 - see it's going to allow the system to use them in 
the way that it needs to be used with the accent  
28:41 - color you see that blue if we had specified 
the accent color as green inside here then  
28:48 - that actually would be green instead okay and 
this is not changing because all of the views  
28:54 - have this hello world default text and that's 
why even though we are actually changing the view  
28:59 - between the different views we just created it all 
says hello world so we're going to modify the task  
29:04 - list view first and one of the first things we can 
do is probably just to add um the top part here  
29:14 - where's the design here by adding the 
navigation title here we're going to add  
29:21 - you know these two these two buttons as well or 
icons i'm going to leave them as icons because  
29:27 - we're not actually implementing the functionality 
we are going to use a modifier called toolbar
29:35 - and we're going to be able to specify those 
three elements up there so first of all let's  
29:40 - do toolbar item and we're going to be 
able to specify the placement as well as  
29:48 - what to put as the item so the placement is 
going to be navigation bar leading and the  
29:54 - content is going to be the image i see ham burger 
so let's see if we see what that looks like first
30:06 - okay so we don't actually see the toolbar and 
the reason is because they're actually um there  
30:13 - is no toolbar on there yet we're specifying that 
we want to put a toolbar in this task list view  
30:20 - now in order to have a toolbar area what we're 
going to want to use is a navigation view wrapping  
30:28 - our task list view so if we just create the 
navigation view for a second here we are going  
30:36 - to move the task list view inside our navigation 
view and this tab item modifier now goes  
30:43 - on the navigation view because that's sort 
of the outermost view and if i run it now  
30:49 - you'll see that there is a navigation area for 
the toolbar to reside in now the next thing  
30:56 - i'm going to do is specify a title for it for 
this so navigation title is going to be today
31:07 - all right and it's going to show like that 
because that's sort of default ios styles  
31:11 - but what you can do is you can do navigation  
31:17 - a view style and you can change it sorry 
not navigation view style navigation title
31:25 - uh i forgot exact name here display mode 
navigation bar title display mode to inline
31:35 - and that's going to put it up here okay then we're 
also going to want to add the right icon so we're  
31:42 - going to do a toolbar placement for navigation bar 
trailing and this one is going to be the ic dots
31:52 - so then we have this but notice how it doesn't 
look exactly like what we have in terms of the  
32:00 - font right we want to be able to change 
the font to be this is inter-bold 17 and  
32:09 - in fact we already have a style for that right 
font styles we have this nav title font style  
32:15 - so in order to be able to specify you know 
a style on this i'm not going to use the  
32:20 - navigation title modifier i'm going to get rid of 
that oops got rid of too much just that modifier  
32:27 - and instead i'm going to put another toolbar 
item in the middle and that's going to represent
32:34 - that title so the placement in the middle is 
called principle and this is going to be today  
32:42 - and then now i can specify the font using my 
nav title font style that we did and you can  
32:51 - actually get rid of that as a shortcut 
there so now let's see how this looks  
32:57 - so now this is looking more like that perfect um 
also i wanted to say that even though we don't  
33:05 - have a navigation bar title per se because this 
is just the text element we put in the middle  
33:12 - um it's good to have this line here because 
if we didn't have this line here it would  
33:19 - actually leave a whole bunch of white space right 
underneath for that navigation title even though  
33:26 - it's not there so you'll be able to that's going 
to be more apparent later when we customize  
33:31 - here and we see the the task list and maybe i'll 
remove this modifier at that point to show you  
33:37 - how that is going to be bumped down but by having 
this navigation bar titled display mode to inline  
33:42 - it actually gets rid of that space that was meant 
for that title and yeah it just gets rid of it  
33:50 - okay so the next step is let us specify a 
background because remember the background's gray  
33:58 - right now our background's all white so in order 
to specify the background uh i am going to do a  
34:06 - zed stack here we're going to have a color it's 
going to be background and we're going to put this  
34:15 - text element in there and this toolbar modifier 
is actually going to go on the z stack now  
34:22 - actually let me just press command a and 
then control i to indent everything properly
34:31 - okay so now does everything look 
great to you it doesn't really to me  
34:36 - let me let me just double check 
what's happening here green
34:42 - okay so it is green okay so this 
is green um however i want it to go  
34:49 - full screen right the color i 
don't want it to stop here and here  
34:53 - so that is why we are going 
to specify uh ignore safe area
35:00 - perfect now i'm going to change this 
back to the background color background  
35:08 - okay and now let's specify the next step is to
35:15 - do this area right here i mentioned that we 
are going to set up a struct to represent  
35:22 - the data here because i see that these are 
basically four tasks so we're going to create a  
35:27 - task struct with a title and perhaps that's it but 
if you were building this out for real obviously  
35:36 - you'd have like a boolean flag for maybe if it's 
done or not and a date property for when it's due  
35:45 - as well so let's go ahead and choose new file and 
we're going to choose swift file let's call this  
35:52 - task and here construct task i'm just 
going to create one property called title  
36:02 - and we'll leave it at that i will 
have a static method for this called  
36:10 - get dummy tasks which will return 
an array of tasks so far tasks
36:27 - and then here we're going 
to build up some dummy data
36:32 - just to to mirror what we have 
down there so tasks dot append
36:50 - all right so now that we have that done we are 
going to go back to the co sorry task view list  
36:57 - and let's create a property up here for  
37:02 - um well i think typically you would 
create it as a state property but because  
37:08 - we don't have that data changing in this demo 
i'll just create it as a regular property get task  
37:16 - dot get dummy tasks and then in here i can 
actually loop through those four to create these  
37:26 - um but before that there is an outer structure to 
this table of sorts right we have a scroll view  
37:32 - probably first this in inside the scroll view 
we're going to have a v stack of these elements  
37:39 - right a v stack containing an h stack which 
is horizontal so these three elements here  
37:44 - are horizontal and then we're going to have a v 
stack of these rows each row is going to be an  
37:51 - h stack with this button this title and then this 
v stack here to vertically stack these two above  
38:01 - and then to put this white background behind it 
we're going to do that last but we're probably  
38:05 - going to have to do scroll view and then zed 
stack containing the v stack table as well  
38:12 - as the white color they'll all make sense when we 
actually do it so let's start with the scroll view  
38:19 - let's get rid of this and do a scroll view and 
then here i mentioned a v-stack we're going to  
38:27 - have an h stack for that initial you know today 
and this and this and have a spacer in between
38:38 - uh font is going to be font task text we're going 
to have a spacer and then followed by account and  
38:50 - that chevron spacer and then we're going to have 
a text which is going to be this is tasks.count
39:10 - and then the chef ron is 
going to be i see down arrow
39:19 - we can probably put let's see
39:28 - oops
39:32 - probably put this font modifier on the hdac 
itself so it'll apply to all the text in there
39:40 - okay and then underneath that we have a four each
39:45 - the data is going to be the tasks 
and the content is going to be
39:54 - an h stack containing like the h stack represents 
the row so it's going to be like that the title  
40:01 - and and that um okay but before we do that h stack 
the task has to conform to identifiable so that  
40:13 - we can actually loop through 
them and uniquely identify  
40:17 - so let's conform to identifiable and we're also 
going to have an id property equal to to the uuid  
40:26 - so that's going to resolve that it's going to be 
able to distinguish all the tasks for each row  
40:31 - we're going to have an image which is going to 
be ic checkbox we're going to have the text as  
40:39 - the task.title and the font is going to be font 
dot task text and we're going to have a spacer  
40:50 - right the spacer is this space right 
here followed by a v stack with these two
40:58 - so for this v stack there's going to be 
some default spacing and we also want to  
41:04 - write a line because otherwise this alarm 
clock will be right under the text there  
41:09 - we can just do that anyways let's just check 
out how things look before we do anything else  
41:16 - because we've we've done a lot of coding
41:21 - okay so let's just run it as is and see see what 
all of this looks like huh okay all right so
41:33 - um yeah so there's that there's that 
there's that there's that this you  
41:39 - see how the alarm clock's in the middle 
we also then add the font style to that  
41:45 - um and it does look like we need that gray color 
because i don't think we we added that as an asset
41:57 - so let's call it
42:01 - alarm
42:04 - text maybe what color is 
this okay this one right here
42:13 - oh did i add an image set oops let's 
delete that and add a color set
42:24 - okay let's change that
42:30 - that okay so now we have this gray as 
alarm color go back to the task list  
42:37 - and we can change this to foreground color 
color alarm we can also change the font style  
42:48 - to font dot task alarm text and then we can 
also change the alignment here to trailing  
42:57 - and what else was wrong there might 
be oh sorry this is the the design  
43:04 - yeah there might be too much space in 
between the text and the alarm right here
43:12 - if you hold down well there's like zero basically
43:19 - because this is this is the outline of this alarm 
icon is right up against the outline of this text  
43:26 - but there is a little bit of a 
gap there so i'm going to try  
43:31 - specifying spacing as 0 and 
let's see how that looks
43:40 - okay that's too little spacing so 
maybe i'll specify three or something  
43:45 - something like that three all right 
notice how there's no padding anywhere  
43:52 - and the scroll view works right 
so let's check check the padding
44:04 - okay so
44:08 - there's there's actually two different 
sets of padding right here because  
44:12 - there's padding from the white rectangle to the 
edge of the screen um and i'm holding down control  
44:20 - i click the white rectangle i hold 
down control and i can hover my mouse  
44:24 - over here and i can see that so on the horizontal 
sides there's 16 on the vertical side there's 10.
44:33 - so actually before we add the padding let's add 
the white rectangle because then we can actually  
44:38 - do it like how we see here so the background is 
great i know it's hard to tell but we're going  
44:45 - to add a white background behind these tasks so 
let's go back to xcode and take a look at how  
44:51 - we're going to do that okay so that's the 
v stack containing all of our elements so  
44:58 - i'm going to do that put a rectangle 
foreground color is white i'm going to  
45:05 - cut this v-stack and put it into here 
um let's take a look at how that looks
45:13 - i don't see anything i don't see a difference 
is it because let me change the screen
45:21 - oh okay so the background is working but  
45:24 - it is actually this background that's 
not working it's supposed to be gray
45:30 - all right is it because our color background
45:39 - oh i set this background color wrong  
45:43 - did i not set it at all well okay that's 
an easy fix let's go back to our figma file  
45:51 - the container what is this background color right 
here this one right here that's what we need
46:06 - okay so now background shouldn't be white
46:12 - okay let me change that task 
list from green to white  
46:18 - we should see a contrast okay now perfect 
so we have a gray background we have a white  
46:23 - task list box let's add some padding to this 
the outside of the white box we said that  
46:31 - it is going to be let me highlight this box again 
16 on the horizontal side 10 on the top side
46:41 - so we are gonna actually apply that here to the 
zed stack so padding along the vertical edges 10
46:54 - and 16 on the horizontal edges all 
right so we have that now we need  
47:02 - to do the padding on the inside so this is 
a little easier so we just pad the v stack
47:12 - if we take a look at see here 16
47:20 - 18
47:24 - eight
47:27 - okay well it's 16 on the horizontal
47:31 - let's see
47:35 - padding horizontal 16
47:41 - padding top was was it eight yeah i think 
that was eight and then i just think it's 8.
47:58 - all right cool
48:04 - and obviously to make this when you're 
actually going to build this app right  
48:08 - right now this is an image right 
you'd want to change that to a button  
48:12 - and then depending on the the state of the 
to-do right for the task you would probably  
48:18 - where's our task for this you know you'd 
probably have a boolean identifying if it's  
48:25 - done or not and then depending on that boolean 
flag you would display a check mark or that box  
48:32 - the last thing we need to do is add this big icon 
so let's go ahead and do that on the task list  
48:38 - and right now it's pretty simple to do 
because we already have a zed stack with  
48:42 - the gray background the scroll view 
and all we need to do is add that
48:50 - this right here so i'm going to 
copy the name plus circle fill
48:57 - we're going to make it resizable because 
we need to set it at a certain size  
49:03 - let's hold down command and click 
this and we can see it's 64 and 64.
49:12 - so frame wise 64 and 64. i'm not going 
to specify the alignment but i am going  
49:18 - to specify the foreground color 
of it to be color or accent color
49:27 - oh actually this is not going to be placed 
where we want it to be placed so we need  
49:31 - to place it down here right and there is some 
padding 24 28 from the bottom 24 from the right
49:45 - um so i'm going to
49:49 - to push it all the way to the bottom 
i'm going to do a v-stack with a spacer
49:56 - push this all the way to 
the bottom however there is
50:04 - padding dot bottom 28. and we are then 
going to push all the way to the right  
50:16 - with an h stack spacer there may be 
a better way to do this actually but  
50:22 - off the top of my head that's 
what i'm gonna do trailing 24.
50:33 - yeah it's not a button but if you wanted to 
make a button like any of the things that  
50:38 - we we did you would add a button just put this 
as the label and this is like to do a new task
50:49 - all right so now it's actually tappable yeah so 
that's basically the general steps you would take  
50:57 - to um turn a design into a working xcode project 
now just to recap the steps the first step is to  
51:06 - take a look at the design and see if you can break 
down the design into swift ui layout containers  
51:12 - so you can see how you would lay everything out 
the second thing is to export all of the design  
51:17 - assets if the designer hasn't done that for you 
the third step is to add them all into the project  
51:24 - and it makes your life a lot easier if you have 
some sort of naming convention um and then the  
51:31 - fourth and all the steps after that is basically 
just laying out your views i didn't really specify  
51:38 - um where we were going with each of the steps 
but i guess step four would be laying out the  
51:44 - initial structure of the app so for us that 
was the tab view that was the navigation view  
51:52 - and things like that modeling the the task you 
know that's the initial stuff and then the fifth  
51:58 - step would be then going granular diving into a 
view and then creating those different layouts  
52:07 - and then also adding the modifiers 
to use those assets that you  
52:11 - added such as the fonts and the images and the 
colors and things like that because you did all  
52:15 - of that up front makes it a lot easier when you're 
actually at the point where you're implementing  
52:20 - the screen so if you found this helpful we 
do a lot more of this in our design course  
52:26 - inside cwc plus there's an introductory offer 
in the description below this youtube video if  
52:32 - you're a brand new member you can check out the 
course as well as all of our courses in our entire  
52:37 - catalog inside our cwc plus membership thanks 
for watching and i'll see you guys next time