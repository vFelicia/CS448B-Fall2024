00:00 - hey code crew in the last lesson we
00:02 - parse the JSON response from the YouTube
00:04 - data API in this video we're going to
00:06 - set up our user interface by adding a UI
00:08 - tableview element and we're also going
00:11 - to set up a custom protocol so that our
00:13 - model can send over the video objects
00:16 - for a view controller for displaying the
00:17 - videos inside the table view just a
00:20 - quick note if you're jumping into the
00:22 - series at this point you kind of need to
00:23 - watch these lessons in a progression for
00:25 - it to make sense first make sure you've
00:27 - watched the twenty-ninth lesson beginner
00:29 - series to get the basic skills then make
00:32 - sure you're watching this YouTube app
00:33 - one day build lessons in order links to
00:36 - both of these playlists will be in the
00:38 - description just in case you missed that
00:40 - little video in between lessons 3 & 4
00:42 - where I teach you how to correct a
00:45 - mistake of accidentally committing your
00:47 - API key to a public repo I think it's
00:49 - worth repeating here in the beginning of
00:51 - this lesson now if you did see that then
00:53 - feel free to skip the next two minutes
00:55 - or so so in lesson 4 I warned you about
00:58 - how not to commit your API key into the
01:02 - public repository like I did and I
01:04 - showed you how I corrected it but
01:06 - there's actually a more foolproof way to
01:08 - stop yourself from committing that API
01:11 - key so that's what I want to show you
01:12 - right here so remember when we created
01:14 - our repository we actually had this file
01:17 - called get ignore and if I just open up
01:21 - this file it specifies everything that
01:25 - should not be added to the repo when you
01:27 - commit your project so what we're going
01:29 - to do is we're gonna put constants dot
01:31 - Swift in this file list
01:38 - and I'm gonna save it and if you don't
01:42 - see this file here because it is a
01:44 - hidden file what you can do is you can
01:46 - go to terminal go into your project
01:48 - directory and say open get ignore and
01:52 - that should launch it now you can still
01:56 - see that file there now what's gonna
01:59 - happen now is that if you have done this
02:03 - right when you created the constants
02:05 - thoughts with file before you pushed
02:07 - anything then that file would get
02:09 - ignored but the fact is right now I have
02:12 - already committed it to the repo before
02:15 - and this file is being tracked so I have
02:18 - to do an additional step is to tell my
02:21 - source control to stop tracking this
02:24 - file so the way I do that is inside here
02:28 - I go get RM which that's where removed
02:31 - and I'm also gonna add this flag called
02:35 - the cache which makes sure to actually
02:37 - remove this from any cached indexes that
02:40 - keeps track of like a file list of files
02:43 - that it's tracking and then I specify
02:46 - that file name okay actually I'm not in
02:53 - the right directory so it didn't find
02:54 - that file so if I just go maybe one
02:57 - deeper so in here I actually okay now I
03:03 - see that file so I'm gonna run the same
03:05 - command just in case you didn't know you
03:07 - can actually press up and down to go
03:08 - through a list of your previous commands
03:12 - so there I'm gonna run this command
03:13 - again alright so now let's do git status
03:17 - and you can see that this was deleted
03:21 - it's going to delete this file from the
03:23 - repo and it also says here that we
03:25 - modified they get ignore file and so
03:28 - we're going to want to add that change
03:29 - but I want to point out another change
03:31 - that it's picked up here that there's a
03:35 - constants template dot Swift so what is
03:38 - this this is what I'm looking at here so
03:41 - instead of committing constant Swift
03:44 - which actually has my API key in it I
03:47 - created this
03:49 - constants template.dot Swift and this is
03:51 - the file that I am going to put onto
03:54 - github instead and as you can see it's
03:57 - commented out
03:58 - it's got my API key and sort of any
04:00 - identifying information removed and I've
04:03 - just added an instruction here to say to
04:05 - add your own keys below and uncomment
04:07 - this code so anyone downloading my code
04:10 - from my repo is not going to get
04:14 - constants not Swift which contains my
04:16 - personal information instead they're
04:18 - going to get this file constants
04:19 - template dot Swift and they're going to
04:21 - have to add their own IDs and keys and
04:23 - then uncomment this and the project will
04:25 - build so that's what this is so let's
04:29 - say get ad space dot and then if I go
04:34 - get status again you're gonna see that
04:37 - there are still some files that aren't
04:38 - being tracked I'm not sure why let me
04:42 - take a look at that again let me try to
04:45 - add everything again okay so that seems
04:51 - to have worked I am going to now commit
04:54 - everything modified get ignore to stop
05:03 - tracking constants dot Swift added
05:09 - constants template dot Swift instead and
05:15 - yeah so that's what we're going to
05:17 - commit right push that okay so now let's
05:24 - take a look at what we have
05:35 - yeah so now it doesn't have constant
05:38 - Swift instead in our repository we have
05:40 - constants template.dot swift and as you
05:43 - can see inside here you know all of this
05:45 - has commented out but when you download
05:48 - this code you're going to have to change
05:49 - the API key in the playlist ID and just
05:52 - uncomment that section okay so bit rise
05:56 - should be doing its thing sure enough
05:58 - there we go
05:59 - all right so the first thing we're going
06:00 - to do is add a table view element to our
06:03 - view controller so click on the object
06:06 - library here and search for a table view
06:08 - and we're simply going to click and drag
06:10 - this element into our view just in case
06:14 - you don't know what that is it's an
06:16 - element that displays a scrollable list
06:19 - of data like rows and rows of data kind
06:21 - of like the address book on your phone
06:23 - or yeah it's used in a lot of different
06:26 - apps on iOS so you're gonna see how
06:29 - we're gonna use it today so here's the
06:31 - table view element we're gonna have to
06:32 - add some constraints to it so let's go
06:34 - ahead and click on this menu and I'm
06:38 - going to make it fullscreen on all the
06:42 - edges so I'm adding 0 on everything but
06:44 - we want to make sure that we don't go
06:47 - under this knotch because we don't want
06:49 - any data to be blocked and we also don't
06:51 - want to have this little bar here
06:53 - blocked so I'm gonna leave everything
06:56 - relative to the safe area and I'm also
06:59 - going to leave margins checked on so
07:02 - let's add all four constraints and you
07:03 - can see that it indeed doesn't go under
07:07 - the areas where data might be obscured
07:10 - okay the second thing we want to do is
07:12 - add a prototype cell to this table view
07:16 - and a prototype cell is simply kind of
07:19 - like a road template it it represents
07:23 - how data might be displayed in this
07:27 - table view and some table views can get
07:30 - pretty complex so you can have multiple
07:31 - prototype cells each one may be showing
07:34 - a different type of data or displaying
07:37 - it in a different way and then when
07:39 - you're about to display your data in
07:41 - this table view
07:42 - you can specify for each role of data
07:44 - which prototypes sell you want to use
07:48 - for our purposes all the videos are
07:51 - going to look the same so we're going to
07:52 - have one prototype sell it's going to
07:54 - have one look and feel and every single
07:56 - video we'll use that prototype sell so
08:00 - what you have to do is click on the
08:02 - table view click on the attributes
08:05 - inspector here and you're gonna see
08:06 - prototype cells here from 0 just change
08:09 - it to 1 you're gonna get a very basic
08:11 - plain cell we're not gonna customize
08:15 - this just yet but what we are going to
08:18 - do is give this prototype cell or
08:20 - template an ID so that we can refer to
08:23 - it later on and you know specify that
08:27 - for this piece of data we want to use
08:29 - this prototype cell you have to give it
08:31 - an ID in order to be able to refer to it
08:35 - alright so click on table view cell in
08:37 - the attributes inspector there's a an
08:40 - identifier field for our identifier
08:42 - let's you can type anything you want but
08:44 - just remember what you type in so I'm
08:47 - gonna call it video cell with a capital
08:49 - V and C so later on when we have data to
08:54 - display in this table view we can then
08:57 - tell the system to grab an instance of
09:00 - video cell you know with that identifier
09:02 - so we're gonna have to pass that in but
09:05 - rather than you know typing out this ID
09:07 - all the time and potentially creating
09:10 - typos in the process I'm going to add
09:12 - this ID into our constants file in that
09:16 - way I can just refer to that constant
09:18 - whenever I want to refer to this ID so
09:21 - let's start by going into our constants
09:23 - swift and adding that I'm gonna add it
09:26 - to the bottom of our list here static
09:30 - var video Cell underscore ID and make
09:37 - sure that I don't make a typo here as
09:39 - I'm typing this and we'll save it so
09:41 - from now on we can refer to this
09:43 - constant but remember this file isn't
09:45 - going to be committed into our github
09:47 - repository right instead constants
09:50 - template is the one that's going to be
09:52 - committed so I'm going to make sure that
09:55 - constants template
09:56 - also has this constant - I'll put it
10:01 - right there all right now let's go back
10:04 - to our storyboard so at this point we're
10:07 - finished with the UI what I want to do
10:09 - now is just expose my table view as an
10:13 - iboutlet property in my view controller
10:15 - so that when I write the logic I can
10:19 - refer to this table view and manipulate
10:21 - it so in the past what I would do is I
10:25 - would open up the assistant editor and
10:27 - sometimes on the right hand side you
10:30 - wouldn't get the right file and so you
10:32 - might have to change it in the sort of
10:35 - navigation breadcrumb here and select
10:37 - new controller but my friend Chris
10:39 - Parker told me that there's actually
10:41 - another foolproof way to do to open up
10:44 - the assistant editor to the file that
10:46 - you'd like so what you do is you hold
10:48 - down option on the storyboard here and
10:53 - you click on the file you want on the
10:56 - assistant editor so for us we want to
10:59 - connect this table view as a property to
11:02 - the view controller so I'm going to hold
11:03 - down option and click view controller
11:05 - when I do that it opens up assistant
11:08 - editor or a second window a second pane
11:12 - and it puts the view controller in that
11:15 - pane so now all I have to do is create
11:17 - some space up here and where I'm gonna
11:19 - add the property I'm gonna hold down
11:21 - control and on this side in my document
11:24 - outline in interface builder I'm gonna
11:26 - hold down control click and drag and let
11:29 - go and then I am going to call this
11:31 - property table view and just like that
11:34 - I've created that or connected that
11:37 - table view element as an iboutlet
11:38 - property I just want to take a quick
11:42 - second to talk about how the table view
11:44 - element works because so many of the
11:46 - other user interface elements work the
11:48 - same way
11:48 - the table view element is just for
11:50 - displaying data it doesn't actually
11:52 - contain any data itself so what it does
11:54 - when the table view element appears on
11:56 - the screen it asks someone for the data
11:59 - to display here's how it does that the
12:01 - table view element has a datasource
12:03 - property that is initially empty if it's
12:05 - these empty then the table view has no
12:07 - one to ask for data to this
12:09 - however if someone or something sets
12:12 - itself as the data source for the table
12:14 - view then the table view is happy but
12:16 - there's a second part to this the way
12:18 - the table view asks the data source for
12:20 - data is by calling very specific methods
12:23 - on the data source and in those specific
12:26 - methods the data source needs to return
12:29 - the required data if the data source
12:32 - doesn't have those specific methods then
12:34 - ultimately this whole thing doesn't work
12:37 - so the recap two things need to happen
12:39 - number one
12:40 - someone has to set itself as the data
12:42 - source for the table view and number two
12:45 - that someone also has to have the
12:47 - specific methods that the table view is
12:50 - going to call when it needs data to
12:51 - display now the table view has a secret
12:54 - weapon to ensure that whoever is the
12:56 - data source actually has those specific
12:59 - methods the secret weapon is called a
13:01 - protocol and the protocol is like a rule
13:03 - that says you must have these methods in
13:06 - order to be the data source so the table
13:08 - view uses this protocol whoever assigns
13:11 - itself as the data source must also
13:14 - declare that they follow the protocol
13:15 - and the protocol enforces that the data
13:18 - source will have the specific methods
13:20 - that the table view requires to call
13:22 - what we're going to do is have our view
13:25 - controller declare that it conforms to
13:27 - the protocol and conforms is just the
13:29 - technical term to say that it follows
13:31 - the protocol and now that our view
13:33 - controller conforms to the protocol
13:35 - we're going to set it as the data source
13:37 - for the table view finally we're going
13:39 - to make sure that the view controller
13:40 - actually has the methods that the table
13:43 - view needs to call now I hope that all
13:46 - makes sense let's talk about how the
13:49 - table view handles user interaction when
13:51 - someone taps on the table view it
13:53 - doesn't know what to do and
13:54 - unfortunately you can't write that logic
13:57 - or in that code in the table view so the
14:00 - table view again uses the same system of
14:02 - delegation we just went over it has
14:05 - another property called delegate that is
14:07 - initially empty and if it stays empty
14:09 - then the table view will do nothing with
14:11 - the user interaction however if someone
14:14 - has set itself as the delegate then the
14:17 - table view will call specific methods on
14:19 - the delegate when the user interacts
14:21 - with the table view on
14:22 - other protocol exists to ensure that
14:25 - whoever assigns itself ask the delegate
14:27 - of the tableview will have the specific
14:29 - methods that the tableview needs to call
14:31 - okay let's go back to Xcode and let's do
14:34 - this alright so now we're back to Xcode
14:37 - let's close out this assistant editor
14:40 - let's go to View controller and the
14:43 - first thing we need to do is to specify
14:44 - that our view controller conforms to the
14:47 - protocols that I told you about let's
14:49 - start with data source now if you did
14:52 - the 29 day beginner challenge before
14:53 - attempting this YouTube app which you
14:55 - should have done I warned you guys in
14:57 - the beginning then you would know to
14:59 - conform to a protocol you simply add
15:02 - that to the list here using comma so the
15:06 - protocol that we want to conform to is
15:09 - UI tableview datasource and that is
15:13 - going to allow us to in the viewdidload
15:17 - here to say that the datasource property
15:25 - right we're gonna assign ourself to it
15:28 - which is essentially the view controller
15:30 - we're going to assign the view
15:32 - controller is saying that it's going to
15:33 - assign itself as the datasource of the
15:36 - table view which is exactly what we
15:38 - talked about before and now the third
15:42 - step is to make sure that the view
15:43 - controller actually has the specific
15:45 - methods that the table view needs to
15:48 - call to get the data to display now the
15:52 - protocol ensures that the view
15:54 - controller will have those methods and
15:56 - the way it does that is just by throwing
15:58 - errors if you don't have the right
16:00 - methods so you can see here you click
16:02 - this it says that the view controller
16:05 - you know you're you're saying that the
16:07 - view controller conforms to this
16:09 - datasource protocol but you don't
16:11 - actually have the right methods so all
16:13 - you need to do is click fix and it's
16:15 - going to add these two required methods
16:18 - to your view controller but we're going
16:21 - to move it to the place we need so I'm
16:23 - going to cut this code here and we're
16:26 - going to put it down here and one way to
16:28 - organize things a little bit
16:30 - is to use this pragma mark and in the
16:35 - can say table you know table view
16:38 - methods and that's going to give you a
16:40 - nice line and also in here you can see a
16:43 - nice separation let's add a comment here
16:46 - so conform to or set set itself as the
16:55 - datasource and the delegate the delegate
17:00 - right we also talked about that just now
17:02 - so the view controller has to conform to
17:07 - another protocol which is called the UI
17:10 - tableview delegate and this one is for
17:13 - handling the user interaction events
17:15 - right so now that the view controller
17:19 - conforms to that protocol down here we
17:22 - can say that the table view delegate is
17:25 - also going to be set to the view
17:28 - controller and there are no required
17:32 - methods for this protocol so it's not
17:34 - throwing any errors but if you do want
17:37 - to handle the situation when the user
17:40 - taps on a row or you know does something
17:42 - else then you can you know you can you
17:46 - can write the specific methods here and
17:48 - the table view will call it if it exists
17:51 - so for example if we want to detect that
17:56 - the user tapped on a row then there is a
18:00 - method called did select row act and if
18:06 - we if we have this method then the table
18:10 - view will actually call this method when
18:14 - the user actually taps on a row of the
18:17 - table view and this that's all possible
18:20 - because we've sent ourselves or the view
18:22 - controller has set itself as the
18:25 - delegate right that handles the user
18:27 - interaction okay but first of all the
18:30 - the initial thing we want to care about
18:32 - is the datasource because the table view
18:36 - doesn't have anything to display all
18:38 - right so it's gonna ask the view
18:39 - controller for a couple of different
18:41 - things let's take a look at what it
18:43 - needs it needs to
18:44 - the number of rows in the section and
18:47 - our table view by default only has one
18:49 - section so we don't have to worry about
18:51 - which section it's talking about but in
18:53 - general how many rows is it going to
18:56 - have
18:57 - so right now we don't really have that
18:59 - data what we're going to do is we're
19:03 - gonna create a property up here and
19:04 - we're gonna call it videos and let's
19:08 - initialize it to an empty video array so
19:13 - it's going to have 0 elements in there
19:15 - and the number of rows is going to be
19:19 - how many videos we have in here which
19:21 - initially is 0 so we're gonna you know
19:24 - return videos that count so if there are
19:27 - videos in there it's gonna return the
19:29 - count however many so now that the table
19:33 - view knows how many rows it's got to
19:35 - display it's gonna start asking for
19:37 - every single row that it needs to
19:39 - display what data do I display what does
19:42 - that row look like and so it's gonna
19:45 - call this method to sell for a row at if
19:48 - you tell the table view we have 0 rows
19:50 - it's not even going to call this because
19:52 - it has nothing no data to display but if
19:55 - let's say you returned 10 let's say you
19:57 - have 10 videos and the table view knows
20:01 - you have 10 rows to display it's gonna
20:04 - start calling this method for every
20:06 - single row and you're gonna have to see
20:08 - which row is asking about and then
20:11 - return the appropriate data and
20:13 - prototype cell and so this is where that
20:16 - video cell that prototype cell right
20:19 - that we configured this is where that
20:21 - comes into play this guy right here it's
20:25 - just basic and empty because we haven't
20:26 - really configured it but what we can do
20:30 - is first of all we'll get a cell so
20:33 - let's cell equals table view dot DQ
20:38 - reusable cell with identifier for index
20:41 - path so we're gonna use that method this
20:45 - is which template or prototype cell you
20:49 - want to use you know so here we would
20:52 - specify video cell and that ID that we
20:55 - had specified before but remember we
20:58 - to our constants file so we can simply
21:00 - do constants dot video cell ID and index
21:05 - path is saying which row are we looking
21:09 - at that actually comes from this
21:12 - parameter right here so you can actually
21:15 - just pass in that parameter this index
21:19 - path object contains a row property
21:22 - which specifies the actual row so it
21:25 - could be 0 for the first row 1 for the
21:27 - second row you know 2 for the third row
21:29 - and so on okay so there's our cell and
21:32 - then in here we would configure the cell
21:35 - with the data which we're not doing
21:38 - right now and then lastly you know
21:43 - return the cell give the cell back to
21:45 - the table view for displaying and here
21:48 - was just returned cell so this is how
21:51 - that whole system works if I ran the
21:54 - project right now we would see no rows
21:57 - because video start count is 0 well in
22:02 - our model right we had made that API
22:06 - call and we had gotten back the list of
22:08 - videos we just haven't passed it to the
22:11 - view controller just yet right so one of
22:15 - the ways we can get this list of videos
22:18 - to the view controller is by specifying
22:20 - a return method of this method right
22:24 - here but that's not really what we want
22:27 - to do and I'll explain why but stay with
22:31 - me here if we specify a return method
22:34 - sort a return type for this method that
22:38 - means that when the view controller up
22:40 - here in viewdidload when it calls models
22:43 - get videos it's going to expect to be
22:48 - returned a list of videos and that is a
22:50 - problem because what model is actually
22:53 - doing to get those videos is it's making
22:55 - a network call that may never come back
22:57 - or it may take a long time in and during
22:59 - that time when it's fetching those
23:01 - videos from the API the view controller
23:03 - is just hung up on this line waiting for
23:05 - the results that come back so that's why
23:07 - you know this is not the way we want to
23:10 - do it we don't want to specify every
23:12 - type and and do that instead what we
23:15 - want to do is when the viewcontroller
23:18 - calls model dog get videos we want the
23:21 - model to go off in the background and
23:23 - hit that API and grab those videos and
23:25 - when the data is ready then to contact
23:28 - and notify the view controller and pass
23:30 - that data back you know in during that
23:32 - time when the data is being fetched in
23:35 - the background the view controller can
23:36 - carry on with its normal tasks like
23:39 - handling user interaction and anything
23:42 - else that needs to do ok so now you know
23:45 - what we want to do but how do we make it
23:47 - so well we can use that delegation
23:50 - pattern that we've gone through earlier
23:51 - with the table view so let's quickly
23:54 - take a look at what that looks like so
23:55 - in this scenario the model is kind of
23:58 - like that table view element we talked
24:00 - about earlier we're going to declare a
24:02 - delegate property in the model class and
24:04 - we're also going to declare a protocol
24:06 - to say that whoever assigns itself to
24:09 - that delegate property must have a
24:11 - specific method then in the view
24:13 - controller we'll have it conform to that
24:16 - protocol that we declared and then we'll
24:18 - add that specific method that is
24:20 - required by that protocol and finally in
24:22 - the model when the data comes back from
24:24 - the API call and we parse that JSON and
24:27 - we have a list of videos ready we're
24:29 - gonna call that specific method on
24:31 - whoever is assigned as the delegate
24:33 - which would actually be our view
24:35 - controller so let's go do it
24:37 - in Xcode now all right so let's go to
24:39 - our model class now in here we're going
24:43 - to create some space and we're going to
24:46 - declare our delegate property now the
24:50 - type of the delegate property is
24:53 - actually going to be the protocol itself
24:56 - so we're going to have to declare that
24:58 - so up here above the class declaration
25:01 - we're going to declare a new protocol
25:03 - and we're going to call it let's say
25:06 - model delegate and the requirements you
25:12 - know the required function is going to
25:14 - be one that's called videos
25:19 - videos returned or how about videos
25:21 - fetched and the way we're gonna actually
25:25 - return that list of videos is through a
25:27 - parameter here now I'm gonna put the
25:31 - underscore there so we don't need to
25:32 - specify the argument label for the
25:34 - parameter and the parameter name is
25:37 - going to be videos and the data type is
25:39 - going to be an array of videos objects
25:44 - all right so now in the delegate the
25:48 - property or the data type of the
25:51 - delegate property is model delegate and
25:54 - remember initially it's empty
25:57 - no one's assigned to this delegate
25:59 - property so that's why it's going to be
26:00 - an optional so the next thing we have to
26:03 - do is have the view controller declare
26:05 - that it conforms to this protocol and
26:07 - also to implement and have this method
26:12 - so let's go over to our view controller
26:14 - and up here let's just add to our list
26:17 - we're going to conform to the model
26:21 - delegate protocol right and then down
26:26 - here we'll create another section let's
26:33 - say model delegate methods and we're
26:35 - going to specify that indeed we are
26:39 - going to have that method called videos
26:41 - fetched I and in here we're going to set
26:46 - the returned videos to our video
26:50 - property refresh the table view so we
26:57 - have this videos property up here right
26:58 - so we're going to say self thought
27:00 - videos which is going to specifically
27:02 - refer to that property and we're going
27:05 - to assign into that property the list of
27:09 - videos that the model returns videos and
27:13 - then to refresh the table view table
27:19 - view dot reload data and that's going to
27:21 - cause the table view to ask us again how
27:24 - many videos are there and for each video
27:27 - you know what am I supposed to be
27:29 - displaying so it's going to cause all
27:30 - these methods to fine
27:33 - all right so now there's one last step
27:35 - we got to go back to the model and oh
27:39 - actually I almost forgot one thing
27:42 - go back to the view controller for a
27:44 - second so the view controller has
27:48 - declared that it conforms to this
27:50 - protocol and it's also declared that
27:54 - method but don't forget we have to set
28:01 - itself as the delegate of the model
28:05 - all right so model dot delegate equals
28:10 - self and then that way when the videos
28:18 - get returned and the JSON gets parsed
28:21 - and down here you know when we dump the
28:26 - response and we saw that we actually
28:27 - parse all the videos down here we can
28:30 - call the videos returned method of the
28:36 - delegate which the view controller has
28:39 - assigned itself to right so self thought
28:42 - delegate dot videos fetched and then in
28:48 - here we just returned actually videos
28:51 - fetches instead of videos returned again
28:55 - here we actually remember our response
29:00 - class or struct it had items as a
29:05 - property and that was a list of videos
29:06 - so that's what we're going to return the
29:12 - only problem is that videos might be nil
29:16 - or sorry this might be an empty property
29:21 - so we should probably check that it
29:25 - isn't first so we can say if response
29:28 - thought items is not nil then we are
29:32 - going to
29:34 - you know call this and we can say
29:38 - response thought items and do that
29:44 - actually this one
29:49 - this one might be nil as well so let me
29:52 - press command B and let's build it
29:53 - yeah so it's failed and okay so let's
30:02 - just get rid of that placeholder press
30:03 - command B again build succeeded I guess
30:10 - it will return a response object and if
30:13 - it wasn't able to parse it then it would
30:15 - throw an error and we'd catch it down
30:17 - here so essentially after we've parsed
30:19 - the JSON and we checked that there are
30:22 - videos because this isn't nil then it's
30:27 - going to call videos fetched of the
30:29 - delegate and passed those videos through
30:31 - and since the view controller has set
30:35 - itself as the delegate this method is
30:39 - essentially just calling this right here
30:44 - so then we're going to take the videos
30:46 - we're going to assign it to our own
30:48 - videos right and then we're gonna call
30:51 - table view that reload data so now let's
30:55 - run the app we will see cells except
30:58 - that in the cells we won't see anything
31:01 - because they're all empty
31:03 - so inside the view controller what we
31:06 - can do is we can get the title or the
31:13 - video in question so let title equals
31:20 - self dog videos and this is our videos
31:24 - array and the row that we are trying to
31:28 - display remember I told you it is in
31:30 - index path dot row and we're gonna
31:33 - access the title property for that video
31:37 - and then we're going to just display
31:39 - that in the cell for now so cell dot
31:44 - text label dot text is equal to title by
31:48 - default the default even plain-jane cell
31:52 - has a label
31:58 - okay so that should we should be able to
32:02 - see something just like that
32:15 - okay so we did see something but we also
32:18 - had a crash here so let's take a look at
32:22 - what okay so the problem here is it's
32:30 - telling us that one of the things we
32:32 - want to make sure to do is to only
32:34 - update the user interface from the main
32:36 - thread because that's that's primary job
32:39 - of the main thread is to handle user
32:41 - interaction and also to update the UI
32:43 - what's happening is that in our model
32:47 - when this is off to hit the API fetch
32:51 - the data parse the JSON that's happening
32:53 - in a background thread and that's
32:55 - happening in the background so when we
32:57 - get to this point where we want to
32:59 - return those items to display in the
33:03 - table view we sort of have to throw that
33:05 - to the main thread to handle and so the
33:09 - way we do that is we can do that here
33:12 - using this class called dispatch Q dot
33:17 - main got a sink and inside there you
33:21 - then place the code you want to pass
33:24 - back to the main thread to execute so
33:27 - it's really awesome that Xcode tells you
33:30 - this now because in the past that never
33:32 - used to warn you and so you'd you'd be
33:34 - doing this without really understanding
33:36 - or knowing and that was bad and it would
33:39 - really cause a performance hit as well
33:42 - so you want to make sure you update the
33:44 - user interface through the main thread
33:46 - so let's run this project again and you
33:50 - can see how much faster it is and plus
33:52 - the app doesn't crash now so that's the
33:56 - good thing now that we've got this piece
33:59 - of functionality working let's go ahead
34:01 - and check in our code now what I'm gonna
34:03 - actually do is uncomment this and
34:07 - although if I build it now my project
34:09 - fails to run but remember when I upload
34:13 - my code or commit my code to the
34:15 - repository it's not going to add
34:17 - constants not Swift it's going to ignore
34:19 - this file and instead it's going to add
34:21 - constants template.dot Swift so we won't
34:25 - have a redecoration of constants and
34:28 - reason I'm doing this is because when we
34:30 - do commit our code to github bit rise
34:34 - goes and grabs the code and tries to run
34:38 - it if I have this commented out like I
34:41 - did then when bit rise tries to build
34:45 - and run the code it's not going to find
34:47 - the constants struct that we need
34:49 - because again constants are Swift that's
34:52 - not going to be added to the repo so
34:54 - that's why I'm uncommenting this for now
34:56 - I'm going to save it and I'm going to
35:00 - add this I'm going to add all of that
35:06 - I'm gonna commit I did table view custom
35:19 - protocol in the model displaying video
35:25 - titles in the table view and I'm going
35:32 - to push that and refresh this brush this
35:49 - page
35:52 - [Music]
35:56 - okay so the device has said it's failed
35:59 - but I want to check out why so let's go
36:01 - ahead and click into this and let's
36:05 - let's see if we can take a look at what
36:12 - the error message in here is okay so the
36:17 - problem is because the Xcode project
36:20 - actually does have a constant Swift file
36:25 - in the file list so this constant
36:29 - thoughts with file is actually part of
36:31 - the Xcode project but because we haven't
36:33 - checked it into source control because
36:36 - we added it to get ignore when bit rise
36:40 - grabs the project it it's as it's
36:43 - missing this file so it's true so I
36:47 - don't really know how to get around this
36:49 - it seems like I think what might be the
36:51 - best course of action is if in the
36:54 - future I just make my repositories
36:56 - private instead in that way I don't have
36:59 - to have a you know be trying not to
37:03 - commit my API key in to my repository
37:05 - and instead I will maybe create a public
37:09 - version of the codebase on github once
37:13 - I'm completely finished with the app
37:15 - series but at least if you know during
37:18 - the process of building it and recording
37:19 - these videos if it's private then I
37:22 - won't run into so many issues trying to
37:23 - hide my API key all right so today you
37:27 - implemented a custom protocol so that
37:29 - the model can send over the video
37:31 - objects to the view controller you also
37:33 - added a table view and got the videos
37:35 - showing I have a quick question for you
37:37 - did you understand what was happening
37:39 - when we implemented our custom protocol
37:41 - and had the model communicating with the
37:44 - view controller let me know by leaving a
37:46 - quick comment below that sort of
37:47 - delegation communication pattern happens
37:49 - a lot in iOS in the next lesson you'll
37:52 - create a custom uitableviewcell so that
37:55 - we can display the thumbnail and also
37:57 - the date for each video make sure you're
37:59 - subscribed to the channel so you don't
38:00 - miss the next lesson and on your way
38:02 - down there please give this video a
38:03 - thumbs up it really helps with getting
38:05 - exposure for the video
38:07 - itself I appreciate it so much thank you
38:09 - for watching to the end and I'll see you
38:10 - in the next lesson