00:08 - hey guys it's Chris here with another
00:10 - objective-c lesson and in this video I'm
00:14 - gonna try something a little bit
00:15 - different I'm gonna be zooming into the
00:17 - text for those of you guys who gave me
00:19 - the feedback that the text is hard to
00:21 - read so let me know what you think about
00:24 - it and if actually continue to do it
00:26 - today we're going to be talking about
00:27 - properties so I've got a starter project
00:31 - here it's just a new Xcode project you
00:33 - can download it in the description below
00:36 - or the link on the screen and all I've
00:38 - done is just create a new nsobject class
00:42 - called car so let's dive in how you know
00:47 - what is a property first of all
00:49 - essentially a property is an instance
00:51 - variable which we've talked about where
00:53 - you access and you set through getter
00:57 - and setter methods so let me show you an
01:00 - example for instance in my car class if
01:03 - I wanted to declare a named property so
01:07 - that we could keep track of the name for
01:09 - the car all I would do in my header file
01:13 - is use the keyword property and then in
01:18 - brackets I would put some attributes and
01:21 - let me show you how it works before I go
01:24 - back and explain what these attributes
01:26 - mean okay so you've got your property
01:29 - keyword you've got your attributes
01:31 - next comes the datatype basically what
01:34 - is this property what type of data is
01:36 - this property gonna store so it could be
01:38 - another class type it could be you know
01:41 - an integer or in this case I'm gonna put
01:44 - I'm gonna store a string for the class
01:46 - name and literally that's all you need
01:54 - to type so for example in
01:57 - viewcontroller.m if I wanted to use my
02:00 - new property let's import the car header
02:05 - file and then let's declare a new
02:09 - instance of a car we'll call it my car
02:16 - and if I wanted to set the name for my
02:21 - car all I would have to do using dot
02:24 - notation is do something like this and
02:31 - if I wanted to retrieve that value I
02:39 - would literally just do this
02:44 - so my instance dot property name now
02:52 - let's go back to car dot H and let me
02:54 - explain what these attributes are so the
03:00 - first one non-atomic it basically means
03:03 - that this property is not thread safe so
03:07 - if you're writing an application with
03:09 - multiple threads you could get different
03:13 - sorts of race conditions if both threads
03:15 - are trying to set the set the same
03:18 - property and you'll get all sorts of
03:20 - funky behavior now you could set this to
03:22 - atomic and what happens is that code
03:26 - gets automatically added to your
03:28 - property to prevent that from happening
03:29 - but that locking code adds extra
03:32 - overhead so if you don't even know what
03:35 - I'm talking about
03:36 - this multi-threaded stuff then you're
03:39 - probably going to just be setting it to
03:41 - non-atomic because chances are your
03:43 - you'll be writing a single threaded
03:45 - application now the second property
03:47 - second attribute sorry strong is
03:49 - basically if you remember in our
03:52 - previous video where we're talking about
03:54 - memory we're talking about how automatic
03:56 - reference counting basically the term
03:58 - ins if you have an instance of an object
04:01 - and there are no references holding a
04:03 - reference to it it's going to get D
04:06 - allocated and your memories
04:07 - automatically gonna get cleaned up if we
04:09 - use the attributes strong for our
04:11 - property and let's say that this
04:13 - property stores in instance of another
04:19 - car object so by having the strong
04:21 - attribute specified if my property held
04:25 - a reference to another object it would
04:27 - count as a
04:28 - reference now let me contrast that with
04:31 - the weak reference if there is nothing
04:34 - else referencing that object aside for
04:36 - my property that object would still get
04:39 - cleaned up in that memory get D
04:41 - allocated because I have weak if this
04:43 - were strong on the other hand even if
04:45 - there were no other references referring
04:48 - to the object aside from my property
04:50 - that would count as a plus one or the
04:52 - internal reference count for that object
04:55 - now what happens if I have weak and I'm
04:58 - holding a references a reference to
05:00 - another car object and then that car
05:02 - object gets cleaned up in that case my
05:05 - property would automatically be set to
05:08 - nil so if your property uses weak
05:10 - referencing then you have to make sure
05:13 - that you check for nil before you start
05:15 - using whatever object is assigned to
05:18 - your property so in this video you saw
05:21 - how easy it was to create properties and
05:25 - to use them now the example that we used
05:27 - was we created a name property in our
05:29 - car class now what if you wanted
05:31 - something to happen when the name
05:33 - property got set for example to call
05:35 - another method or to set another
05:37 - property in your car object well in the
05:40 - next video we're going to continue
05:42 - talking about properties and I'll show
05:44 - you how to do exactly that so instead of
05:46 - the usual fact of the day I want to
05:49 - instead ask you guys a question so right
05:51 - now I've got a video series on
05:53 - objective-c and another one on learning
05:55 - Xcode and I want to release videos a
05:59 - little more frequently so we can finish
06:01 - those series and then get to actually
06:03 - building some apps together the question
06:05 - I want to ask you guys is you know what
06:07 - sort of features or functionality or
06:10 - apps would you like to learn about so
06:12 - this gives me idea of what sort of
06:14 - content and videos that you guys want to
06:17 - see so I can release videos that you
06:19 - guys want to see okay so let me know in
06:22 - the comment section below and don't
06:23 - forget to subscribe and thumbs up this
06:25 - video all right thanks I'll see you guys
06:28 - later