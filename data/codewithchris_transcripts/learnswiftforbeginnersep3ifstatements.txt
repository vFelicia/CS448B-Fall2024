00:00 - hello welcome to learn Swift for
00:03 - beginners lesson 3 in this lesson you're
00:05 - going to learn how to express some
00:07 - simple decision making in your Swift
00:09 - code using if statements alright let's
00:12 - get started so for this one we're going
00:18 - to start a brand new playground all
00:22 - right so we've done this before let's
00:24 - just call this one D if playground and
00:29 - I'm going to store this on my desktop ok
00:33 - so we're talking about if statements
00:35 - today and this is really exciting
00:38 - because it lets us finally start to make
00:42 - decisions to code and express some sort
00:44 - of logic so for example if I have let's
00:49 - declare a constant here so let a equals
00:55 - 10 for example and I wanted to print
00:59 - this statement only if a is less than
01:07 - let's say 11 which it is right here but
01:12 - okay actually that is that is not right
01:18 - let's say 4 and this gives us a reason
01:22 - to use the if statement right ok so
01:25 - print only if a is less than 4 but a is
01:29 - 10 right so we shouldn't be outputting
01:32 - this so what we can use here is an if
01:34 - statement and what it allows us to do is
01:37 - only execute some code if a certain
01:40 - condition is true so in this case we
01:45 - want to print this only if a is less
01:47 - than 4 so we can write an if statement
01:50 - to check if that's true or not before we
01:54 - print that statement so let me show you
01:56 - what that syntax looks like and if
01:59 - you're not familiar with programming
02:01 - terms syntax is simply like the
02:04 - grammatical structure of the language so
02:07 - it's basically the key words to use and
02:10 - how we go about declaring and
02:13 - statement or writing in this statement
02:15 - so it all starts with the if keyword
02:18 - following the if keyword we have the
02:21 - condition in which we want to check and
02:23 - following the condition we have a set of
02:26 - curly brackets now inside the curly
02:29 - brackets that's where we put the code
02:31 - that we want to run if that condition is
02:34 - true so that's your very basic if
02:37 - statement now going back to our
02:39 - playground let's write it out and print
02:41 - this only if a is less than four so we
02:45 - can do something like that if a and then
02:48 - we can use this operator less than four
02:51 - and remember we need to surround the
02:54 - piece of code that we want to execute if
02:56 - the condition is true using a pair of
02:59 - curly brackets like that so you can put
03:03 - the curly bracket on the same line or
03:05 - you can put it on a second line it
03:07 - doesn't matter but what you usually want
03:11 - to do is indent the code that is inside
03:15 - it just so it's easier to read I usually
03:18 - like to put this curly bracket in the
03:21 - same line like that okay so now you can
03:24 - see that in the console there's nothing
03:26 - printed and also to the right here it
03:28 - doesn't give you a preview because this
03:31 - condition is false
03:33 - a is not less than four because a is ten
03:36 - now what if we changed a to one and let
03:41 - the playground process okay now it
03:43 - prints the statement and it previews
03:45 - this statement see it's print it down
03:46 - here so that's your very basic if
03:50 - statement now there are other cool
03:54 - things that you can do with an if
03:55 - statement there is an else if clause so
03:59 - for example using the else
04:02 - if clause you can check a second
04:04 - condition if the first condition
04:06 - evaluates to false and the syntax for
04:09 - that looks like that so you have your if
04:11 - condition and then you have your curly
04:13 - brackets and then you use the key words
04:15 - else if and then you check another
04:18 - condition and you have another set of
04:20 - curly brackets so if you write it this
04:23 - way you're basically
04:25 - checking condition number one you know
04:29 - is that true if it's false
04:30 - now you're checking condition two and if
04:33 - that actually evaluates to true then
04:35 - you're running the code inside that else
04:38 - if walk now keep in mind that it kind of
04:43 - goes from top down and if the first
04:45 - condition is actually true then it's
04:49 - going to run that piece of code inside
04:51 - the first set of curly brackets and it's
04:53 - okay just going to ignore your else if
04:55 - statement so let's take a look at that
04:58 - inside the playground so here I'm going
05:02 - to put else if a is less than let's say
05:08 - eight then now I'm going to print only
05:13 - if a is less than eight so now I'm going
05:18 - to change not this I'm going to change a
05:22 - back to ten here and you can see nothing
05:26 - gets printed because first I checks this
05:29 - condition if it's false which it is then
05:32 - it's going to check this condition and
05:34 - it's also false so nothing gets printed
05:38 - now what if I changed a to seven now if
05:43 - I changed a to seven you can see that it
05:46 - prints the second statement because
05:49 - first it checks this condition that's
05:52 - false so now I check this condition and
05:55 - that actually turned out to be true so
05:57 - it's going to run this line of code here
06:00 - however if a is 1 then it checks this
06:05 - first one and then it prints this one
06:07 - and then it totally ignores all of the
06:10 - other else if conditions now I said all
06:14 - of the other else if conditions right I
06:17 - say that because you can have as many
06:19 - else if conditions as you want so you
06:22 - can say if a LS is less than ten and
06:25 - then you can you can continue adding as
06:27 - many conditions as you want but keep in
06:28 - mind that it checks from top to bottom
06:30 - and as soon as it finds a condition that
06:33 - is true it's going to run that piece of
06:36 - code and ignore all of the other
06:37 - condition
06:39 - now finally there is a clause that you
06:42 - can run if all of the conditions are
06:45 - true kind of like as a fail-safe we're
06:48 - the last resort and that is the else
06:50 - keyword so the way you write this is
06:53 - using the else keyword it's not else if
06:57 - it's just simply else and there's no
07:00 - condition attached because if all of the
07:02 - conditions above it are false then it's
07:04 - going to run the code inside of this
07:06 - else statement here so going back to the
07:09 - playground let me show you what that
07:10 - looks like
07:12 - else print nothing was true and now let
07:20 - me change a back to ten here so you can
07:25 - see that it prints nothing was true
07:27 - because it's checking the statement
07:28 - false this statement is false and sorry
07:32 - I mean conditions and this condition is
07:35 - also false because a is not less than
07:39 - ten is actually 10 so this would
07:43 - actually evaluate to false and finally
07:45 - it just gets to this else pause and it's
07:49 - going to print what's in here okay so
07:53 - let me show you a couple of other things
07:55 - that you can do with L statements and
07:57 - let's change these print statements to
08:01 - something that is a lot more
08:02 - recognizable or easy to read let's do
08:05 - that branch one wrench two and here
08:13 - branch three okay so first of all let me
08:22 - show you how to do less than or equal to
08:26 - now you see a print branch three so
08:30 - that's how you do less than or equal to
08:31 - and likewise you can do greater than or
08:34 - equal to and you can see here it's still
08:37 - print branch three now what if you
08:39 - wanted to check if it was exactly ten
08:42 - you wouldn't do that because remember
08:44 - this equal sign is an assignment
08:48 - operator so what you need to do to come
08:51 - err if a is equal to 10 you use the
08:55 - double equal sign like that you can see
08:58 - here print branch 3 okay so why don't we
09:02 - introduce another constant up here let's
09:05 - say B and let's have that equal to 4 I
09:08 - want to show you that your conditions
09:11 - for your if statements and your
09:14 - different branches can get pretty
09:15 - complicated and you can involve multiple
09:19 - pieces of data in your condition so you
09:23 - can go if a is less than 4 if you want
09:26 - to check B as well and you want to say
09:29 - no and B is less than 4 that's how you
09:35 - would do it you would use this double
09:36 - ampersand sign and now you're checking
09:39 - two conditions you're checking is a less
09:42 - than 4 and B less than 4 and only if
09:45 - both of those are true are you going to
09:48 - get this branch here so let's try that
09:50 - out so if I set B 2 1 & a 2 1 then both
09:54 - of these conditions here are true so
09:58 - it's going to print branch 1 however if
10:01 - I set B to 10 right it's going to just
10:06 - see it hits this branch 2 now because a
10:10 - is 1 which is less than 8 and it didn't
10:14 - print branch 1 because this was false
10:17 - right even though a is 1 and this part
10:20 - is true we have to have this part to be
10:24 - true as well because where you saying is
10:25 - a less than 4 end B less than 4 and B is
10:29 - 10 right now however you can also do or
10:33 - so you can say is a less than 4 or be
10:39 - less than 4 and in this case either
10:42 - condition can be true and that would
10:45 - cause it to go into this branch so you
10:48 - can see now it is in branch 1 alright so
10:52 - let's say a is 10 and B is 1 so a is not
10:58 - less than 4 but B is right because
11:01 - you're using this or statement you're
11:03 - saying is a less than 4
11:05 - or be less than four and if that's true
11:08 - then we're coming into here now
11:12 - furthermore if you wanted to involve
11:14 - let's do a see you can combine you know
11:20 - multiple conditions like this you can
11:22 - put this into a pair of parentheses like
11:27 - this and you can say you know and C is
11:30 - equal to three so you can see now that
11:33 - you're saying okay is a less than four
11:37 - or B is less than four and also is C
11:41 - equal to three then come into branch one
11:44 - now these brackets matter a lot because
11:48 - what you're doing is you're saying that
11:51 - this has to be true and this has to be
11:55 - true but for example if I just shift the
11:58 - brackets a little bit and I say
12:01 - something like this then that changes
12:09 - the meaning completely because now I'm
12:11 - saying is a less than four or is this
12:16 - part true right so where your brackets
12:19 - are matter a lot and it changes the
12:22 - meaning of what you're checking did you
12:24 - get that in this case I am checking is
12:27 - this true or is this true but the other
12:31 - way around
12:35 - I'm checking is this true and is this
12:41 - true right
12:43 - so the brackets matter finally let me
12:46 - show you another operator that we have
12:49 - here so here we have we're checking if C
12:52 - equal to three well what if we want to
12:55 - ask is see anything but three or is C
12:59 - not equal to three if we only care about
13:02 - the case where C is not three we can say
13:06 - something like this not equal to 3 and
13:09 - this is going to say is C not equal to 3
13:15 - C
13:16 - see here that see is three so that's why
13:18 - it completely skips this branch and it
13:23 - ends up being a is equal to ten and a
13:25 - prince branch three now you can use this
13:30 - not operator with exclamation mark here
13:34 - on other things as well so for example
13:36 - here I'm asking is a equal to 10 right
13:39 - and I am it's coming in here because a
13:44 - actually is 10 so it's printing branch
13:47 - three but if I surround this like that
13:53 - let me put something else's in here is a
13:56 - equal to 10 and B equals to one right
14:01 - that is true so that's why I'm still
14:05 - getting branch three but if I put an
14:08 - exclamation mark here like that
14:12 - it basically flips it around so this
14:16 - evaluates the true right a is a 10 this
14:19 - evaluates to true both of this whole
14:24 - condition evaluates to true right eight
14:26 - is a equal to 10 and B is equal to 1 and
14:30 - then so we get true but then we're
14:33 - adding this guy here it flips that true
14:35 - to a false so that's why this whole
14:40 - condition equates to false okay so that
14:44 - does it for if statements I hope you're
14:46 - trying this out on your own computer in
14:48 - the playground because trust me it's
14:50 - pointless to try to memorize all of the
14:53 - key words and the syntax for the Swift
14:55 - it's much better if you you know only
14:57 - spend 30 minutes instead of trying to
14:59 - memorize things spend 30 minutes in the
15:01 - playground just punching in different
15:04 - numbers like that playing around with
15:05 - the different conditions and expressions
15:08 - and printing out a bunch of stuff in the
15:10 - console in 30 minutes you'll remember a
15:12 - lot more just by doing that then trying
15:14 - to memorize you know how to declare a
15:17 - variable or how to declare an if
15:18 - statement so you know if you can get a
15:21 - Mac get Xcode open in a playground and
15:25 - then type this code out for yourself and
15:27 - play around with it it's going to do
15:28 - wonders
15:29 - so thanks again for watching and if you
15:32 - like the series so far please give the
15:34 - video a thumbs up please subscribe it
15:36 - really helps get the channel out there
15:39 - YouTube's going to like to see that and
15:41 - as a result it's going to give this
15:43 - video more exposure so it's going to
15:46 - help the channel grow and it's going to
15:47 - help me continue producing these videos
15:49 - for you guys as well thanks for watching
15:51 - again I'll see you in the next lesson
15:52 - bye for now
15:53 - [Music]