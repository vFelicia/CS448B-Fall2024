00:00 - well now that we have our structure in place and 
understand how the game of x's and o's is played  
00:05 - it's time to start coding our first game mode and 
that's the two player game that i designate with  
00:10 - the game type single to represent a single 
device before we start coding however let's  
00:16 - create a new branch for our git repository i'm 
showing that the current branch is game planning  
00:23 - so i want to branch directly from here for this 
video and i'll call it a two player game branch
00:34 - now our game is going to be managed by a 
new observable object class called game  
00:38 - service so within the game screen folder let's 
create a new file and call it game service
00:46 - inside there we'll create 
that class of the same name  
00:50 - and make sure that it conforms 
to the observable object protocol
00:56 - our game needs to know a number of 
things that over time may change  
01:00 - so we'll want to observe those changes 
by adding some published properties  
01:05 - first we'll need to create properties to represent 
our players so let's create player 1 that is a  
01:12 - player where the game piece will be x and a place 
holder right now so let's use the string player 1.
01:23 - i'll duplicate that and name it player 2 with 
the placeholder using the string player 2.
01:33 - we'll also need to keep 
track of all possible moves  
01:36 - and for that we can assign the constant 
from our move enum namespace which is all  
01:43 - and let's also create an array of moves 
taken that'll be an empty array initially  
01:50 - and for a fifth published property 
i'll need a boolean value that will  
01:53 - tell me when the game is over and 
i'll set that initially to false
02:00 - we'll need to know the game type as well but 
this will not force a new update so we can simply  
02:04 - use a var here and i'll initialize 
it as a game type of single
02:13 - next we can create some computed properties 
that will allow us to make changes for our ui  
02:19 - the first is a variable that we can use to 
recognize the current player which is of type  
02:24 - player so if player 1 dot is current we can 
return player 1 else we'll return player 2.
02:37 - we'll know the game is started if 
we've made one of our players current  
02:41 - so another boolean computed 
property will be game started
02:47 - and we'll check whether or not player 
1 is current or player 2 is current
02:56 - we'll be constructing a game board 
but there will be certain conditions  
02:59 - where we don't want the players 
to be able to tap on any square  
03:02 - and that's before any player has been made 
current which is at the start of the game
03:08 - and once the game is over so let's create a  
03:11 - board disabled property that is a 
boolean that will check for that
03:21 - when we tap on that start button we want to 
update our player names and set up the game type  
03:25 - based on the pickers game type so 
let's create a function for that  
03:31 - we'll call it setup game and we'll 
have three parameters the game type  
03:38 - which is of type game type along with 
two strings representing the two players
03:49 - we can switch on the game type and 
let xcode generate the cases for us
03:57 - in the case of single where we're passing the 
phone around we'll set this class's game type  
04:02 - to single and update the player 2 dot name 
with the value that we have in our text field
04:12 - in the case of the bot we only need 
to specify that the game type is a bot
04:20 - similarly if we have a game type of peer from the 
picker we'll set the classes game type to pier and  
04:29 - in the case of undetermined we'll simply break now 
you'll notice we haven't set player 1 name well  
04:35 - that is always going to be your name that we kept 
passed in so player1.name will be player 1 name
04:46 - next we start a new game and we want to reset  
04:49 - all of our published properties and variables 
to create another function called reset
04:58 - we can set both of our player is 
current properties back to false
05:04 - we can remove all from the moves taken array  
05:07 - and we remove all moves from both of 
the arrays of moves from both players
05:14 - then we set our game over property to false
05:19 - and set the possible moves array back to 
the full set using that moves all constant
05:27 - now all of these will be affecting the ui so we 
want to make sure that it all gets executed on the  
05:32 - main queue so we can do that by specifying that 
this class is a main actor each one of our views  
05:40 - is going to need access to this class so in swift 
ui we can do that by injecting an instance of it  
05:46 - into the environment at our app entry point so 
let's create here a state object and call it game  
05:55 - and assign a new instance of game service 
to this property and then we can inject  
06:00 - it into the environment using the environment 
object on our start view and pass in that game
06:10 - so in start view we can get access to that 
using the environment object property wrapper  
06:15 - and make it of type game service
06:19 - and we'll also need to fix our preview by 
injecting a new instance into the environment here  
06:25 - in game view we repeat that same 
process for both the game view struct
06:34 - and for the preview provider
06:37 - now we can start to create our game view first 
we can replace that text view in the v-stack the  
06:44 - textview that will be displayed if we have not yet 
made a player the current player to start the game  
06:50 - so we can use an if clause here on an array 
of the two game player is current properties  
06:57 - and then check if all satisfy where the iterator 
dollar 0 is false meaning both are false
07:07 - if they are then we can 
display a text view that says  
07:11 - select a player to start below that i'm going to 
create an h stack in which i'll create two buttons  
07:21 - the first button label will be game.player1's name
07:27 - and the action will be set to 
player 1 is current property to true
07:35 - the second button will be very similar 
except it will reflect player 2.
07:42 - once we make one of the players 
current game started the computer  
07:46 - property will be set to true and we can 
use this then to disable both buttons
07:54 - let's add a spacer then to push it up to the top
08:00 - i'd like to set a style to these buttons by 
making the is current player display with a  
08:04 - green background otherwise it'll be grey so on 
our first button let's set a padding of eight
08:14 - i'll add a background using a rounded rectangle  
08:19 - the corner radius of 10 and then i can apply 
a fill where we can specify that if the  
08:27 - game dot player 1 dot is current 
we'll set the fill to be a color green
08:34 - otherwise it'll be gray
08:39 - and then i can follow that by 
setting the foreground color to white
08:45 - as you see by default the button is 
gray but when i tap on it it turns green  
08:51 - and the text view asking to select 
the player is no longer displayed
08:59 - well i could copy and use the 
same style for the second player  
09:02 - but let's create a button style instead
09:06 - i have a full video on creating button styles and 
i'll make sure that a link is in the description  
09:11 - if you care to watch it here's what we 
can do within this file create a struct  
09:17 - called player button style and make 
sure that it conforms to button style
09:25 - like the view modifier that we saw before 
it requires a make body function but this  
09:30 - time it uses a configuration and one of the 
properties of the configuration is the label
09:39 - well we can pass in a boolean property that 
signifies whether or not the player is current  
09:46 - and then we can use this for both buttons let's 
just cut out that button modifier from our button  
09:54 - and paste it to apply to our configuration label
09:59 - and then we can just set the fill 
based on the is current property
10:07 - with that in place then i can now apply a button 
style to each button and for the first we'll use  
10:15 - the player button style where the is current 
is the game.player1 dot is current property
10:25 - and then for the second button we'll use 
the same button style but for player 2.
10:35 - testing now i see that tapping 
either button will set the color  
10:39 - and then disable the buttons from tapping again 
they will only get activated once our game is over
10:51 - time to design the game board now we can 
create a square that will represent one of our  
10:57 - nine squares in a grid so we'll need a model to 
hold the information that we need for each square  
11:04 - so create a new file within the game 
screen folder and call it game square
11:13 - each game square is going to have two properties 
an index which will be from one through nine  
11:19 - to represent one of the squares and an optional 
player object associated with that square  
11:27 - and once we tap on a square that square 
will be assigned the player that was current
11:36 - now i want to display an image 
so we'll need to import swift ui
11:45 - well now then we can create a computed property 
for our square that will be an image so if the  
11:53 - player has been set then we know that the player 
type is so we can use an if let to unwrap it  
12:02 - and then we can return that player's game piece 
image which remember is a image else without a  
12:12 - player being assigned will default to the empty 
square which is the image using the none asset
12:23 - now whenever we start a new game we'll want to 
reset all of the squares back to empty squares  
12:29 - and set the player property to nil so let 
me create a static property called reset  
12:37 - and it will return an array of these game square
12:42 - so we can start with an empty array  
12:45 - and then iterate through from 1 through 9 
appending a square using that index that we  
12:54 - use for the iterator by default the player is 
nil and we'll append it to the squares array
13:04 - and then we can return it
13:09 - back in game service let's add a 
new property to the game service  
13:15 - and it'll be a published property called 
game board and we'll initialize it to that  
13:21 - empty set that we just created that 
constant for the gamesquare dot reset
13:28 - similarly when we reset our game we'll set it 
all back to that same array of empty squares
13:38 - now that we have our model we can create 
a new view to represent that single square  
13:44 - so inside the game screen folder we'll create 
a new swift ui file and call it square view
13:52 - we'll make sure that it has access to 
the game service environment object
13:59 - and inject an instance into the preview as usual
14:05 - and then we'll create an index property as an int
14:11 - of course we're going to need to provide the 
preview with one as well so let's just use a  
14:16 - value like one so we'll replace the body with 
a button we'll leave the action empty for now  
14:24 - for the label i'll use the games 
game board at that indexes image
14:32 - i'll make it resizable
14:36 - i'll set the frame to be exactly 
a width and height of 100
14:42 - and then i'll make sure that it's disabled 
whenever a player has been assigned  
14:47 - and that's when the player at that game dot 
game board index has not been set or is not nil
14:57 - and then we can set the 
foreground color to primary  
15:00 - so that it will be black in 
light mode and white in dark mode
15:10 - now back in game view before the spacer let's 
create our game board we'll start with the v  
15:16 - stack and inside there we're going to create three 
h stacks that will display three squares each  
15:24 - well i can use a for each loop and iterate 
from 0 through 2 using self as the id and  
15:31 - that will provide us with an index that we can 
use to display our square view at that index
15:40 - i can copy and paste this two more 
times and then change the range through  
15:48 - three through five on the second 
row and six through 8 in the third
15:57 - back in game service we can create a new function 
called update moves by passing in that index
16:07 - if player 1 is current we can append to player 1's 
moves array the index plus 1 to get the number of  
16:16 - the square that we use and then we can set the 
game board at that index player to player 1.
16:27 - else we'll do the same thing but for player 2.
16:36 - so once a move has been made we want 
to check to see if there is a winner  
16:41 - so i'm going to create a function 
for this and this is simple since  
16:45 - both players 1 and player 2 has an 
is winner computed property remember  
16:50 - so we can simply check to see if either one is 
true and if so set the gameover property to true
17:00 - if there is no winner we'll 
need a function that will turn  
17:04 - the move over to the next user so we can 
create a function called toggle current
17:12 - and this will simply toggle the is 
current property of both players
17:22 - now we can create a function that we 
can use for all three of our game modes  
17:26 - and it will set the game board check if there's 
a winner and if not update the array of possible  
17:34 - moves by removing the one that had just been set 
and then pass it on to the next user i want to  
17:41 - have the game board change using a standard 
animation so we'll need to import swift ui
17:49 - so for that function i'm going to create it and 
i'm going to call it make move and it's going to  
17:54 - have one parameter only and that's the index and 
that's an int now we'll only allow this move to  
18:03 - be made if the game board at that index player is 
nil otherwise the square has already been taken
18:13 - then with animation i can call the update moves 
function using that index so this is going to  
18:20 - place an x or an o in that particular square  
18:25 - now once that move's been made i need 
to check to see if there's a winner
18:32 - well if the game is not yet over meaning we've 
either got a winner or we've reached some sort  
18:37 - of an impasse we can update the possible 
moves array and we do that by seeing if  
18:43 - we have a matching index where we check each 
of the integers in the possible moves array  
18:50 - to see if it has a match using the first index 
where that item is equal to the index plus one
18:59 - if it is we'll remove it at that index
19:04 - and then we'll toggle the current users to move 
on to the next player if at this point then  
19:11 - we find that there are no more possible moves 
we've reached a stalemate and our game is over
19:22 - we can finally return to our square view then and  
19:26 - for the action in our function we can call this 
function when we physically tap on the square
19:39 - one thing i forgot to do here is to make sure that 
we'll disable our entire board if our game's board  
19:45 - disabled property has been set to true so back 
in our game view we can add that modifier here  
19:53 - the last thing we want to do is to 
display the winner when the game is over  
19:58 - so before the spacer then create a v-stack 
and then conditionally if the game dot game  
20:06 - over we can create a text view 
using the string game over
20:13 - now if the game possible moves is empty no one won  
20:19 - so we can create a text view 
to display that information
20:25 - else we can create another text view that 
will display the game dot current player  
20:32 - name and specify that that person wins
20:41 - below that we're going to want to give the user 
the ability to play a new game so we'll create  
20:46 - a new button with the label new name and all 
we have to do is call the games reset function
20:58 - let me set the button style 
here to bordered prominent  
21:03 - and i'm going to set all of the 
text to a font using large title
21:11 - return now to start view when we tap the 
button to start the game we'll need to call the  
21:17 - game's setup function and pass 
in the picker's game type and  
21:23 - the values entered in our text fields 
for our different player name arguments
21:30 - and then one final thing we need to do is to 
always make sure that our game board is reset  
21:36 - every time our game view appears because we 
could exit the screen and not clear the board so  
21:42 - all we need to do is add an 
on appear to the game view
21:49 - and make sure that we call the game reset function
21:54 - let's test and we can do this in 
preview by going to the start view
22:02 - i'm going to select the two player game 
and then enter two names and when it's done  
22:09 - i can click on the start game button and 
i'm presented with our game board i need  
22:15 - to select one of the players to start and 
once that turns green i can tap in a square  
22:24 - and once that happens the is current property 
switches and you can play as another player  
22:30 - oh something went wrong both players are 
playing an x let me return to game service  
22:39 - and here where i initialize my players i see 
that player 2 should have been an o not an x
22:47 - let's return and try again
22:52 - again we have to enter both names
22:56 - tap on the start game button  
22:59 - select the player to start then after making our 
first play switches over to the second player and  
23:07 - this time we get a different game piece and 
i can continue playing until we get a winner
23:15 - once i do i can press the new 
game button and go ahead again
23:23 - this time if we reach a stalemate we're told so
23:30 - well let's make sure we commit our changes 
to get before we move on to the next video  
23:35 - and in the next video we're going 
to add to this to enable our  
23:39 - second mode which is where we challenge our 
device and that's why we created that function  
23:45 - we're not going to be tapping on any button 
we're going to be doing that programmatically  
23:51 - by letting our device determine which square 
to in quotes tap on and then call that function