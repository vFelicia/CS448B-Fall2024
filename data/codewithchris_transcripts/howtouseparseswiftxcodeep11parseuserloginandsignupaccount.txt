00:02 - hey coders it's Chris here welcome to
00:04 - part two of parse user accounts and
00:07 - management in the last lesson we went
00:09 - through the iOS developers guide and we
00:11 - talked through the users section I
00:13 - showed you guys how to use the PF user
00:16 - class and that it has a username
00:18 - password email field we went through
00:20 - signing up logging in and a whole bunch
00:22 - of other stuff if you haven't checked it
00:23 - out I recommend that you click on the
00:26 - upper right corner right now and it's
00:28 - going to open a brand new window and go
00:30 - through that video first because in this
00:32 - video we're going to go straight into
00:34 - implementing some of those things that
00:35 - we talked about in that lesson so what
00:38 - I'm going to do in xcode is create sort
00:41 - of a signup flow it's going to have a
00:43 - field for username password and it's
00:45 - going to have a button to sign up the
00:47 - user and in the parse demo that we
00:49 - created when we started this parse
00:51 - series you're going to be able to see a
00:53 - users table with all of the signups so
00:55 - let's open up our xcode project and try
00:59 - this out
01:00 - so let's open up the XC workspace and in
01:04 - here uh what we worked on here last was
01:08 - looks like local data store that's right
01:12 - okay so I'm going to get rid of this
01:14 - right
01:15 - now let's get rid of this code here and
01:18 - this is basically what you would start
01:20 - with if you started a brand new project
01:22 - it's an Mt view controller. Swift and in
01:25 - the storyboard we also don't have
01:27 - anything here see I can double click
01:29 - this empty space zoom out to show you
01:31 - guys there's nothing here and we're
01:32 - going to be adding some stuff here so
01:35 - actually let me get rid of some of these
01:37 - tabs so okay first of all we're going to
01:40 - add a text field this is going to be for
01:42 - the username and I'm going to use this
01:45 - property here called placeholder text
01:47 - and I'm just going to put username in
01:48 - there instead of putting a label on the
01:50 - outside and drag another one there uh
01:53 - make this placeholder text password but
01:57 - we're also going to want to enable
01:59 - secure text entry down here and that's
02:02 - going to obscure the text as they type
02:05 - it so the password won't be visible
02:08 - let's also add a button right there and
02:12 - let's call this uh sign up and what I'm
02:16 - going to do is I'm going to hold down
02:18 - command click all three because I'm
02:20 - going to click this stack view button
02:23 - it's going to put them all into a neat
02:24 - little stack view like this you can see
02:27 - all of the elements are now enclosed in
02:28 - this guy and this stack view is just an
02:30 - easy way to lay them out on top of each
02:32 - other see because I can put some spacing
02:35 - I can indicate let's say 30 and it's
02:38 - going to space them all 30 apart and all
02:40 - I have to do is position this stack view
02:42 - on my view so let's horizontally uh and
02:45 - vertically Center that in our view let's
02:48 - update frames so we can see it there so
02:52 - you know I can play with this some more
02:53 - but the main point is that I want to
02:54 - show you guys this in action so I'm not
02:56 - going to uh do too much to the UI I'm
02:59 - going to go into the interface the
03:02 - assistant editor Sorry by clicking this
03:04 - button up here and I'm going to add some
03:05 - outlets for these guys so let's hold
03:08 - down
03:10 - control and drag this over here and make
03:14 - sure it says outlet and I'm going to
03:16 - make this the
03:19 - username text field like that do the
03:22 - same thing for the password hold down
03:25 - control do that password text field and
03:30 - then I'm going to create an action for
03:32 - the button so when they tap that button
03:34 - I want to execute some code I'm going to
03:36 - hold down control and drag this out down
03:39 - here but above that last curly brace
03:42 - because that last curly brace is the end
03:44 - of the class and you can't put methods
03:46 - outside of the class so let go instead
03:49 - of Outlet change this to action because
03:51 - we want to create an action method and
03:53 - for the type I'm just going to choose UI
03:55 - button down there and let's call this
03:57 - sign up tapped
04:00 - so in here we're going to execute some
04:01 - code uh to- do get the username and
04:06 - password and create a user okay so let's
04:10 - try some stuff here let's print a
04:12 - statement here called tapped and let's
04:15 - set a breakpoint so that when we run the
04:18 - app and we tap the button it's going to
04:19 - pause it here so I'm going to press
04:21 - command R to run the app right now it's
04:24 - going to launch it pretty quickly so we
04:26 - see our little basic UI here and and
04:30 - let's click sign up
04:32 - first so it's going to hit that
04:34 - breakpoint basically in the console what
04:37 - I want to check is
04:40 - PF user. current Uh current user current
04:45 - user I think it all lowercase check this
04:47 - method to see what's in there okay so
04:50 - apparently maybe I got the method wrong
04:52 - so let's go back to the documentation if
04:54 - you remember from yesterday current user
04:57 - uh yes it's capital u so when you want
04:59 - to check for the current user let's
05:02 - switch this to Swift Code uh you can use
05:04 - the class method current user on the PF
05:07 - user class and you'll be able to check
05:09 - if it's nil or not so if it's not nil
05:11 - that means you do have a user object and
05:13 - the guy's logged in but if it is nil
05:15 - then that means that you should probably
05:17 - show the sign up or login screen because
05:19 - that person isn't logged in now the
05:21 - thing is we have in our parse app if I
05:25 - go to the app settings we have Anonymous
05:28 - users enabled so current users Uh
05:32 - current user is always going to have a
05:34 - user object it's never not going to be
05:36 - nil so let's try that again here P PF
05:42 - user. currentuser with a capital u this
05:45 - time okay so it is nil I'm a little bit
05:47 - surprised about that because I thought
05:49 - in the documentation under Anonymous
05:52 - users that it said it wouldn't be nil
05:55 - okay so maybe I misunderstood that a
05:57 - little bit but essentially if we checked
06:00 - current user and it was nil so we do get
06:03 - the nil that means that the user isn't
06:06 - logged in or they don't have an account
06:08 - so if you want to allow Anonymous users
06:11 - to your app what you would do here is
06:14 - create an anonymous user once you find
06:17 - out that the guy isn't logged in you
06:19 - could create an anonymous user like this
06:22 - using this code snippet
06:23 - here uh I think I read it wrong right
06:26 - here when you enable automatic Anonymous
06:29 - user creation at application startup the
06:32 - PF user current user will never be nil
06:34 - so I guess this is something that we
06:36 - have to enable right here like this in
06:39 - the application did finish launching
06:41 - with options this is in the app
06:42 - delegate. Swift and we would basically
06:46 - enable automatic
06:49 - user we would do
06:51 - that let's go back to standard view we
06:54 - would do that right here we would say
06:55 - something like PF user. enable automatic
06:59 - user and enables automatic creation of
07:01 - anonymous users so that's what we would
07:04 - do and if you did that then the PF
07:06 - current user will never be nil because
07:08 - an anonymous user will automatically be
07:11 - created and assigned to current user but
07:13 - as it is in our current application what
07:16 - I want to do here is create a new user
07:21 - uh so I'm going to say let user equals
07:24 - PF user create a brand new user object
07:27 - and I'm going to set the user usame is
07:30 - equal to username text field. text and
07:35 - this is an optional string so we can
07:38 - actually do some checking first uh but
07:40 - let me unwrap this so right here let's
07:44 - say uh I'm not going to actually do it
07:46 - but we can say
07:49 - check that
07:51 - username text field isn't
07:55 - empty to do check that password text
08:00 - field isn't empty and that's using a
08:03 - simple if statement you can check the
08:05 - text property see if it's either an
08:08 - empty string or if it's nil uh and if it
08:10 - is then you would just use the return
08:12 - keyword but before that you would
08:14 - probably display some um error message
08:16 - to let the user know that they have to
08:17 - fill that out okay and I would say user.
08:20 - password equals password text field.
08:24 - text I'm going to unwrap that and assume
08:26 - that we did the checking up here and
08:28 - assume that that's not nil and then we
08:32 - are going to call user. sign up in
08:36 - background with block like that so I'm
08:39 - going double tap this to expand the
08:41 - block of code uh there is a result true
08:43 - or false let's just call that result and
08:47 - let's call this an
08:49 - error and then inside here when it
08:52 - returns we can check if error is
08:57 - nil then
09:00 - uh we can also
09:01 - check and
09:04 - result equals true then user was
09:11 - successfully created and then you can
09:14 - transition them onto your homepage or
09:16 - you know the first screen where a signed
09:18 - in user would see else to do check error
09:23 - message and
09:26 - display the reason to the user Maybe
09:29 - using a label or something like that so
09:31 - I'm going to set a break point right
09:33 - here so when we actually sign up a user
09:36 - we're going to see I'm going to remove
09:37 - this breako and there's one more thing
09:40 - I'm going to show you how to do is with
09:43 - text Fields so when we tap on this text
09:46 - field the keyboard kind of slides up and
09:48 - if it doesn't slide up all you need to
09:50 - do is go up here for the simulator under
09:53 - Hardware um under keyboard you might
09:55 - have this checked on so if you do have a
09:58 - checked on just check it off off uh or
10:00 - you can just press command K and toggle
10:02 - the keyboard if you need to but uh if
10:04 - you disconnect the hardware keyboard
10:07 - like I just showed you um this will
10:08 - usually be fine but tapping outside of
10:12 - the text field doesn't dismiss the
10:14 - keyboard right and that's usually the
10:15 - behavior that we want so the way we do
10:18 - that is just override another method in
10:22 - the view controller called touch us
10:24 - began right here and when that happens
10:27 - we want to dis miss the keyboard so we
10:31 - would say uh username text field. resign
10:36 - first responder okay and if the user was
10:39 - editing the username text field and then
10:41 - tapped outside then this would get rid
10:43 - of the keyboard however if the user was
10:46 - editing the password text field we also
10:48 - have to handle that case so let's also
10:50 - resign first responder on that it what
10:52 - doesn't hurt just to call both uh so
10:54 - let's try that
10:56 - out so now I'm in here if I tap outside
11:00 - it shrinks the keyboard if I go into the
11:03 - password field and I tap outside it
11:04 - retracts the keyboard as well okay so
11:06 - let's actually try to sign up so I'm
11:09 - going to say
11:10 - Chris is nam there and for this I'm just
11:14 - going to use any random password
11:18 - actually probably should be something
11:19 - that I will remember so I'm just going
11:21 - to say 1 two 3 4 and I'm going click
11:24 - sign up don't use that as a real
11:26 - password by the
11:27 - way okay so so here it has called sign
11:30 - up in background with block and it's
11:32 - come into the block of code after it has
11:36 - sent that request so let's see if it
11:38 - goes into here right if error is nil I
11:41 - can actually see down here already that
11:44 - error is nil and the result is true so
11:47 - it's going to come into here and then
11:49 - let's just let this run then if we go
11:52 - back to our pars data store let's go
11:55 - back to core let's refresh it uh you can
11:58 - already see user here so before we only
12:01 - had contact now that we're working with
12:04 - users the user store gets created and
12:06 - you can see that it's in here that user
12:09 - that just signed up you see that the
12:11 - password is hidden and the email is
12:14 - undefined you can't actually edit
12:16 - passwords like this because it's secure
12:19 - and session has also been created role
12:21 - has been created if you had some complex
12:24 - rules for how users can access different
12:27 - things you can make use of the Roll CL
12:29 - class and the session class I haven't
12:31 - read too much about this but it looks
12:33 - like it tracks for a user uh what
12:36 - they're doing and what they did in a
12:37 - particular session okay so that's a
12:39 - simple sign up flow let me quickly show
12:42 - you what login would look like it's
12:44 - actually a very very simple change so
12:48 - essentially um after the user has signed
12:51 - up that user object automatically gets
12:53 - assigned to PF user. current user and it
12:56 - gets cached on the local device so so
13:00 - what you probably should do when the app
13:02 - launches is you should check PF user.
13:05 - current user if it's not nil that means
13:07 - the user has recently logged in or
13:10 - signed up so you don't need to present
13:12 - that registration screen uh or a login
13:14 - screen you can just bring them right
13:16 - into the app but if you're checking PF
13:18 - user. current user and it's nil that
13:20 - means that the user has never used it
13:22 - before or they recently signed out so in
13:24 - that case you want to present the
13:26 - registration screen for us we're not
13:28 - going to do do that check because I just
13:30 - want to show you how login would work
13:33 - I'm going to change this text to login
13:36 - instead and then very simply inside the
13:38 - view controller I'm just going to assume
13:40 - that we did check PF user. current user
13:44 - and it was nil and so that means that
13:47 - the either the user has never signed up
13:49 - never logged in or he recently logged
13:51 - out so we we're going to show a login
13:54 - screen because I just want to show you
13:56 - how easy that that would be to do that
13:58 - so I'm just going to comment out this
14:00 - signup method and we're actually also
14:03 - going to comment this out all of this
14:06 - let me just undo that all of this is
14:08 - sign up code so if you were to sign up a
14:11 - new person sign up new user this is what
14:14 - you would do uh this bracket be careful
14:17 - this bracket is also part of this signup
14:19 - block so if you were to log in a user
14:24 - instead then all you would do let's just
14:26 - double check the uh documentation here
14:29 - logging in see very simply you call the
14:31 - class method login with username in
14:33 - background right so again I'm going to
14:35 - assume that you know you do some
14:37 - checking up here that the username text
14:38 - field isn't empty and the password text
14:40 - field isn't empty and then you would
14:42 - just go PF user. login with username and
14:48 - password in background this is the one
14:49 - we want so you have a place to specify
14:53 - the username which we would go username
14:56 - text field. text and I'm I'm going to
14:59 - unwrap that because we know it's not nil
15:01 - right because we checked it up here or
15:04 - you would have checked it up
15:06 - there new password text field. text
15:09 - unwrap that doubleclick this block of
15:12 - code that executes when it comes back so
15:15 - this returns this PF user parameter is
15:18 - an optional type so it either returns
15:21 - nil if for some reason maybe the
15:23 - password was wrong username couldn't be
15:25 - found but they couldn't log in at the
15:26 - end of the day and PF user would be nil
15:29 - so I'm just going to use user error like
15:33 - that and then inside here you would
15:35 - basically check if let well let's check
15:39 - if error uh let's check users first if
15:42 - let logged in user equals user so inside
15:49 - here user object isn't nil
15:54 - else user object is nil check
15:59 - error parameter so then in here you can
16:03 - you know
16:04 - user logged in
16:08 - successfully transition into homepage or
16:12 - something like that home screen whatever
16:14 - that experience may be so that's
16:16 - basically all there is to it in this
16:18 - lesson we looked at how to perform a
16:21 - sign up we looked at how to perform a
16:23 - login the only thing we haven't done is
16:25 - on app launch check the PF user. current
16:29 - user property or method to see what the
16:32 - status is you know if the guy was logged
16:34 - in if the guy is you know logged out or
16:37 - not registered basically to check that
16:39 - status and determine which form we
16:41 - should show whether we should show the
16:43 - sign up form and the login form uh or
16:46 - just bring them straight into the app if
16:48 - they're already logged in so now that
16:50 - you know how to do these two things in
16:52 - the future when we build some more apps
16:54 - together um I can very easily
16:55 - incorporate login sign up and user
16:58 - accounts please give the video a thumbs
17:00 - up and please share it with anyone who
17:02 - you think could use this tutorial thanks
17:04 - for watching I'll see you guys tomorrow
17:08 - [Music]
17:15 - bye