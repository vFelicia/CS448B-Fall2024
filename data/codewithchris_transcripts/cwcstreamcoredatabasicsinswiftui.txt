00:45 - at least i'd like to think that
01:22 - hey everyone how's it going can you hear
01:24 - me so my audio should be
01:27 - louder now in my last five or six
01:30 - streams i apologize i thought
01:32 - you know in this stream labs thing that
01:36 - when the mic is at the green section
01:38 - that's good
01:39 - but actually once i read up on it over
01:41 - the weekend it should kind of be in the
01:43 - yellow section
01:44 - so you'll get uh you get better audio
01:47 - because a lot of people were complaining
01:49 - that
01:49 - the audio was too soft and then half of
01:52 - everyone in here was saying the audio
01:54 - was fine
01:55 - and i think that for the people where
01:57 - the audio was fine they were wearing
01:58 - headphones
02:00 - uh but
02:03 - yeah for the people who thought the
02:05 - audio was too soft they were probably
02:06 - trying to play
02:07 - the audio through the speakers and then
02:09 - when i watched the replay
02:11 - i did notice that my audio was a too
02:14 - soft for the computer speakers so
02:16 - hopefully everything is good now
02:17 - hopefully everyone can hear me the
02:19 - background music isn't too loud
02:22 - and today we are still on the old mac
02:25 - so we are going to do some some core
02:28 - data
02:29 - demonstrations hopefully
02:32 - because i am streaming in 1080p right
02:34 - now
02:36 - when i build the project if you see a
02:38 - little bit of buffering don't leave the
02:39 - stream
02:40 - it's just going to be like three seconds
02:42 - and the new m1 mac mini
02:45 - is coming in i think it's friday
02:48 - i'm also waiting for a monitor for that
02:50 - as well and then hopefully
02:52 - next tuesday when we stream again i'll
02:55 - be able to do some build with me stuff
02:58 - and i'll be able to stream in 1080p and
03:00 - build the xcode projects with
03:02 - no buffering
03:06 - how are you guys all doing is everyone
03:16 - good
03:18 - we'll just give maybe a minute or two
03:20 - before we get started before we dive
03:22 - into the core data stuff because
03:24 - i do want to give a chance for a couple
03:27 - more people to join
03:29 - just in case anyone's running late
03:33 - did you all have a great weekend here in
03:36 - i live in a suburb of
03:40 - ontario in canada and the weather was
03:42 - really great
03:44 - and uh our covet cases are are going
03:47 - down so that's great
03:51 - hello hey andrew hey mark hey jay
03:56 - oh mark your laptop your laptop with
03:59 - beta stuff died
04:01 - oh man and we were just talking about
04:02 - before in a past stream about how sturdy
04:05 - these apple machines are
04:07 - so i guess if it's an old laptop it
04:11 - won't be under applecare unfortunately
04:16 - all right well let's get started because
04:18 - i think that's it's about enough time
04:21 - so before we dive in i don't want to be
04:23 - preaching to the choir so how many of
04:25 - you guys
04:26 - right here in the stream right now have
04:29 - worked with core data
04:30 - and you already know everything i'm
04:32 - going to talk about because i'm just
04:33 - going to be covering the basics in this
04:35 - in this stream if everyone knows core
04:38 - data i'm not going to
04:40 - go through it today but if if it's
04:42 - relatively new
04:43 - for a lot of people i'll go through it
04:47 - 2015 mark yeah
04:50 - this this imac which i'm on right now is
04:53 - 2015. so hopefully it doesn't die
05:00 - no okay seems like it seems like people
05:02 - are
05:03 - interested in this topic and the reason
05:05 - why i decided to cover
05:07 - core data today is because in my
05:10 - databases course let me just show you
05:12 - this on the screen
05:13 - i am working on the core data module
05:17 - so this stuff is you know kind of fresh
05:19 - in my head and we're just about
05:21 - finishing up this material for this
05:23 - databases course
05:24 - and so i thought i'd show you guys this
05:27 - actually this is a good slide to start
05:28 - with so let me full screen the slide
05:30 - from from this lesson right here
05:36 - yeah and you know what i'm actually
05:38 - going to
05:39 - hide the chat box on the screen just so
05:42 - you can see more of it
05:43 - and just in case i want to use this as a
05:46 - replay as a tutorial
05:48 - okay so i think the first thing to
05:52 - keep in mind when using core data is
05:55 - you know everyone talks about it being a
05:57 - database
05:58 - and it's compared to other local
06:00 - database solutions and things like that
06:03 - but at the end of the day uh
06:06 - what apple calls it is an object
06:09 - persistence
06:10 - graph or sorry object graph persistence
06:14 - framework so an object graph is nothing
06:17 - more than
06:18 - the objects that you create in memory
06:21 - when you are
06:22 - you know coding your app and you're
06:23 - making things work and you're creating
06:24 - instances of your classes and your
06:26 - structures
06:28 - uh and then oftentimes they have
06:30 - relationships to each other like
06:31 - one object might hold a reference to
06:33 - another one and so those would be your
06:36 - relationships and that's what i'm
06:37 - demonstrating here with the yellow lines
06:39 - and these cubes are your
06:40 - instances of classes and objects and
06:43 - stuff like that
06:45 - so rather than having to explicitly say
06:48 - you know save this row of data if anyone
06:51 - is used to using traditional databases
06:53 - like
06:54 - mysql uh you know where or or
06:57 - um ms sql server
07:00 - where you are you know working with
07:03 - tables
07:03 - which have columns and rows and stuff
07:06 - like that and you're used to storing
07:07 - your data in rows
07:09 - right this is not like that you're
07:12 - essentially
07:13 - taking what you have in memory at that
07:15 - moment and you can
07:16 - persist it you can save it to local
07:19 - storage
07:19 - and under the hood it's using sqlite
07:23 - however all of that is abstracted from
07:25 - you you just work with the core data api
07:28 - and it's actually
07:28 - very simple to to
07:32 - save data into it and to retrieve it
07:34 - using fetch requests
07:36 - especially with swift ui core data in a
07:39 - swift ui project
07:41 - it's just like working with an array as
07:43 - you'll soon see
07:44 - so what i wanted to point out in this
07:46 - particular diagram
07:48 - is that okay
07:51 - is that there there are a couple of
07:54 - components
07:55 - that i will be mentioning as we work
07:58 - through this core data demo and it's
08:01 - important
08:02 - to keep in mind how these things relate
08:04 - to each other
08:06 - so your core data persistent container
08:09 - down here
08:10 - is kind of like your data store think of
08:12 - this as
08:13 - your database if you want um but you
08:16 - don't
08:17 - interact directly with that and you
08:19 - don't say hey persistent container
08:21 - save my objects or load my objects
08:24 - instead you get this managed object
08:28 - context from the container and it's just
08:31 - a property as you'll see and see
08:33 - and it's through this managed object
08:36 - context that you call those methods to
08:39 - create a brand new object to save
08:43 - or to you know fetch a certain type of
08:47 - object from your core data store so it's
08:49 - this managed
08:50 - object context all right so that's all i
08:53 - wanted to show in this diagram
08:55 - so we can get rid of this for now we can
08:57 - just jump into xcode
08:59 - but let me just check quickly see if you
09:01 - guys have any questions
09:02 - before we move on
09:18 - hi nadia hi from brussels it's awesome
09:20 - to see
09:21 - people from everywhere in the world
09:23 - australia
09:24 - france awesome
09:27 - [Music]
09:30 - hey kamal akar personally teaches swift
09:34 - ui and swift including xcode well there
09:36 - are tons of resources out there you know
09:37 - what
09:38 - i was planning to do more streams in in
09:41 - sort of like teaching style like i'm
09:43 - doing now for core data
09:45 - so i will cover swift and swift ui and
09:48 - xcode as well
09:49 - for the more beginner audience who are
09:52 - just getting started and i'll schedule
09:53 - those
09:54 - so that you can join those and i think
09:56 - that's probably as close as
09:58 - you know personal coaching or tutoring
10:00 - as you're going to get from
10:02 - from code with chris right now
10:09 - uh stefan is there a difference between
10:12 - core data and combine
10:13 - yeah i think they're completely
10:15 - different things so
10:16 - mark moykins is in the chat right now he
10:18 - can talk more about combined and he has
10:21 - some great resources for it
10:23 - but combine is all about building
10:24 - pipelines from
10:27 - data sources to your views and how
10:30 - that process gets managed and
10:32 - transformed so
10:33 - whereas core data is more of like
10:36 - storing data
10:37 - or persisting data across app sessions
10:40 - so if the user is using the app and
10:42 - you know they do something in your app
10:43 - when they close the app maybe they
10:45 - restart the
10:46 - phone maybe they completely quit the app
10:49 - when they launch it for the next
10:51 - session to use your app that some of
10:53 - that data from the first session
10:55 - gets retained and you can sort of resume
10:57 - where you left off that's one scenario
10:59 - you could do
11:00 - all right so first of all let's create a
11:02 - brand new xcode project and let's dive
11:04 - right into core data
11:07 - so you guys have probably noticed when
11:09 - you create new
11:10 - ios apps that there is a
11:14 - checkbox here that says use core data
11:17 - now when you enable this and you check
11:20 - this
11:21 - it's actually going to create a lot of
11:24 - boilerplate and starter code
11:26 - for you in your project that you might
11:28 - not necessarily want
11:29 - in this case we will check it off
11:33 - because i think that's probably the most
11:34 - natural way you'll use it
11:35 - but you can also add the core data
11:38 - components or elements that you need to
11:40 - work with it
11:41 - to an existing xcode project so
11:45 - don't think that just because you didn't
11:47 - enable this when you started the project
11:49 - that you can't
11:50 - add it after the fact however in this
11:53 - case we will start it and i'll probably
11:56 - get rid of a bunch of the code that it
11:59 - starts us off with
12:07 - yeah mark user defaults is great for a
12:09 - lot of things so if
12:11 - for those of you who are unaware user
12:13 - defaults
12:14 - is a great way to just quickly write
12:17 - data and persist data across app
12:19 - sessions
12:20 - it's not meant for sensitive information
12:23 - so you won't be storing passwords or
12:25 - anything like that and not
12:26 - large amounts of data either but
12:29 - um if you want to just preserve like
12:32 - screen state
12:33 - or progress through like a quiz or
12:35 - something
12:36 - or scores user defaults as more than
12:39 - sufficient core data
12:40 - i think you would use for more heavier
12:43 - sets of data okay so let's
12:45 - let's start this project
12:49 - i'm just going to call it core data demo
12:51 - make sure the interface is swift ui
12:53 - lifecycle swift ui and language is swift
12:56 - and
12:56 - use core data is enabled
12:59 - and we'll walk through a couple of the
13:00 - components that it creates for you so
13:02 - i'm just going to create this on my
13:03 - desktop right now
13:06 - oh i already have one
13:11 - i'm gonna get rid of the one on my
13:12 - desktop i don't remember when i created
13:15 - that core data demo
13:17 - on my desktop but i must have
13:21 - must have been testing something before
13:22 - okay so let's try to create this again
13:24 - on my desktop
13:34 - all right so here we are
13:37 - okay so i'm just going to make sure i
13:40 - enlarge this a little bit
13:41 - and maybe i'll make the font a little
13:44 - bigger as well
13:46 - i just don't want to cover anything
13:50 - maybe i'll move
13:53 - [Music]
13:55 - oh you guys see all my messy desktop i'm
13:57 - hiding it behind my face
13:59 - um yeah you know what that's fine okay
14:03 - so let me just make this a little
14:07 - larger what is it themes
14:12 - okay hopefully that's easier to see for
14:13 - everyone unfortunately on the file
14:16 - navigator here
14:18 - yeah file navigator here the font is
14:20 - still a little bit small
14:24 - okay so the most important file for you
14:29 - to start working in
14:31 - is this core data demo
14:34 - dot xc data model id or ld
14:40 - not exactly sure i think it's ld but
14:42 - essentially this is where you're going
14:44 - to define
14:45 - all of your entities and attributes
14:48 - for those entities it's almost like
14:52 - you are defining your tables in a
14:54 - traditional database you're
14:56 - you're defining the things that you want
14:57 - to store inside core data
15:00 - so by default they start you off with
15:01 - one entity it's called
15:03 - item this might be a little hard to see
15:05 - because it didn't enlarge this font
15:08 - but i'm going to go ahead and delete
15:10 - this item
15:11 - and that's actually going to cause a lot
15:14 - of errors
15:14 - in this case because they have a lot of
15:17 - starter code that they started us
15:19 - off with that use items here
15:24 - so you know i'm gonna have to rip out a
15:27 - lot of this code
15:28 - that's kind of the drawback of
15:32 - um
15:35 - of starting off with the core data
15:37 - enabled
15:39 - it actually starts you off with a whole
15:40 - bunch of code that you might not
15:41 - necessarily want
15:42 - so for the i think it's more clear if i
15:46 - get rid of everything and then show you
15:48 - guys from scratch
15:49 - because that way
16:02 - okay so now that's more clean in our
16:05 - content view we just have hello world
16:09 - and then also in persistence here
16:15 - we can actually
16:24 - i'm going to comment out the preview
16:28 - and also in here this
16:31 - persistence controller this preview
16:34 - property
16:35 - and comment that out and just show you
16:37 - guys the bare essentials
16:39 - okay so let's come back to this data
16:41 - model file
16:43 - this is where you're going to define the
16:45 - objects or
16:46 - entities that you want to store inside
16:49 - core data
16:50 - so for this app let's assume that
16:53 - maybe we are a store and we have items
16:56 - to sell
16:57 - so i am going to well item
17:01 - item actually makes sense in this
17:02 - context doesn't it
17:04 - huh let's call it product because i do
17:07 - want to show you guys from the ground up
17:08 - so i'm going to delete this
17:10 - item entity completely so start with an
17:12 - empty
17:13 - model file and we're going to click on
17:15 - add entity
17:17 - and it just creates a brand new one for
17:18 - you so i'm going to call this actually
17:20 - product
17:21 - like a product in our store and let's
17:24 - define some
17:25 - attributes for the product so an easy
17:28 - one would be
17:29 - name for example so what's the data type
17:32 - for this attribute of product well name
17:35 - would probably be string
17:37 - and another one would be price so i'm
17:40 - just going to start with two simple ones
17:42 - as you can see there are different data
17:45 - types here
17:46 - so there's different forms of in in 16
17:49 - 3264.
17:51 - on most modern architectures now it
17:54 - probably should be 64.
17:56 - but i mean most of this is handled under
17:58 - the hood for you or
17:59 - anyways uh decimal double float string
18:03 - boolean date
18:04 - binary data so binary data would be good
18:06 - for storing like
18:07 - image data for example you could store
18:09 - that inside core data
18:11 - uuid that's probably a good one to have
18:14 - actually
18:16 - and transformable would be what you
18:19 - would use for a raise
18:20 - so let's say that
18:24 - we have another one called skew
18:29 - uh have a let's just call it barcodes
18:32 - and i wanted to make this an array of
18:34 - strings to represent the barcodes for
18:37 - this product
18:38 - i would choose transformable and then
18:40 - here in the attribute
18:42 - selector you can specify a custom class
18:44 - for that
18:45 - attribute and here i can specify that
18:49 - it's a custom class of a string
18:52 - array right there
18:55 - and we'll also add an id and we'll make
18:58 - this
19:00 - a uuid
19:09 - hey flo welcome yeah i'll make it
19:12 - available as a replay as well
19:15 - merrell welcome danny welcome uh
19:19 - yes danny you're gonna have to have
19:21 - xcode installed to follow along but if
19:24 - you haven't
19:24 - um if you haven't used xcode before this
19:27 - the topic of today's
19:29 - session might be a little bit uh
19:31 - advanced
19:33 - so keep an eye out for future sessions
19:36 - where i will be going more of the basics
19:39 - through the basics i mean of uh swift
19:41 - and xcode and things like that those are
19:43 - probably the sessions that will be
19:45 - of more value to you okay so continuing
19:49 - on here
19:50 - let's just start with one entity
19:53 - because that's probably the the most
19:55 - simple scenario
19:57 - the next thing we do now that we've
19:59 - defined what we want to save
20:00 - into core data we have to generate
20:04 - a class like a code definition
20:07 - from this um data model file
20:10 - to be used inside our project and there
20:13 - are several options to do that
20:15 - on the right hand side if you highlight
20:17 - your entity you'll see under code gen it
20:20 - says class definition and there's manual
20:22 - and there's also category extension
20:24 - let's go ahead and choose manual first
20:27 - meaning that we as the developer we are
20:30 - going to manually
20:31 - turn this data model file into
20:35 - a class and it sounds more complicated
20:38 - than it actually is because
20:39 - all it is is a command up here so if you
20:42 - go to editor
20:43 - and you go to create ns managed object
20:46 - subclass
20:47 - you just choose your data model
20:51 - you choose your entity which is product
20:53 - so what we've defined
20:55 - and you just choose a place to save it
20:57 - and they'll generate it for you
20:59 - so let's see what happens now at the top
21:02 - it's generated two different files
21:04 - the first one is a class
21:07 - with the same entity name and notice
21:10 - that it subclasses
21:11 - ns managed object now this provides all
21:14 - of that
21:15 - under the hood stuff to allow it to be
21:19 - serialized and deserialized to and from
21:22 - core data which
21:22 - essentially just means it provides the
21:24 - inner workings for it to
21:26 - be saved into core data and to be
21:28 - restored back into
21:30 - an object of a product or an instance of
21:33 - product
21:34 - now what's the second file that it
21:36 - generates well it's an extension
21:38 - of product which essentially means that
21:41 - it's
21:42 - additional um class definition
21:45 - for the product class and you'll see
21:48 - here by default
21:49 - it it gives you a fetch request
21:53 - which we will talk about a little later
21:55 - on but what's interesting
21:56 - is down here these are all of the
22:00 - attributes which we specified for this
22:02 - entity
22:03 - notice however it made most of this
22:06 - optional
22:07 - now by default if we go back to the data
22:11 - model and we check
22:12 - out these attributes by default
22:16 - they are optional right here
22:20 - so if you don't want them to be optional
22:22 - you can uncheck
22:23 - them for any attributes that you don't
22:25 - want to be optional
22:27 - however there is a bug where even if you
22:30 - uncheck them and you don't want them to
22:33 - be optional when you generate them
22:35 - they'll still be optional so that's not
22:38 - ideal
22:38 - however um it's just something you have
22:41 - to be aware of
22:44 - okay so last but not least there's
22:46 - another extension of product
22:48 - which uh conforms to identifiable
22:51 - protocol which
22:52 - just means that we'll be able to use
22:54 - this in
22:55 - our swift ui lists and stuff like that
22:58 - um okay so now i typically
23:03 - if we if we do want to organize this a
23:05 - little bit
23:07 - i might create different groups and i'll
23:09 - move this into our group
23:11 - like that and uh
23:15 - maybe we'll add a
23:20 - move our content view in there
23:25 - and uh maybe we'll create a new group
23:28 - for data
23:31 - oops i don't want to put that inside
23:36 - and i'll put persistence in there
23:41 - okay so let's leave it at that i'm
23:44 - actually not sure if it's going to build
23:45 - successfully right now because
23:47 - we removed a bunch of boilerplate code
23:50 - let's just give it a try oops is my
23:52 - stream gonna die
23:53 - no
23:57 - slow flow knows exactly what i'm talking
24:00 - about
24:00 - okay so
24:05 - yes i wanted to show you guys some other
24:06 - things so back
24:08 - so from here we've basically generated
24:11 - the classes that we're going to use
24:13 - from this data model using the manual
24:16 - code cogen option which i showed you was
24:19 - just the command in the menu
24:21 - there are these other options so class
24:24 - definition is where you don't have to
24:26 - generate it
24:27 - at all so it happens behind the scenes
24:30 - for you
24:31 - that sounds handy but on the flip side
24:34 - it doesn't
24:35 - give you it doesn't allow you to
24:38 - customize this
24:39 - because right now that we've manually
24:42 - generated these classes i can add
24:44 - my custom methods here
24:48 - you know i can i can customize the
24:51 - product class
24:52 - had you chosen um
24:56 - class definition this would be generated
25:00 - free behind the scenes and you wouldn't
25:01 - be able to customize it
25:03 - that might not be a problem for you if
25:06 - it's not
25:06 - then you can go with class definition
25:08 - but if you do want to customize it go
25:09 - with manual
25:10 - now category extension what is this
25:14 - this is sort of an in between the two
25:16 - options
25:17 - category extension means that it's only
25:20 - going to
25:21 - generate this one behind the scenes for
25:23 - you because this one
25:25 - you're not really supposed to modify
25:27 - although you know we do modify it
25:29 - because of that
25:30 - optional bug that i told you about so
25:32 - you probably have to remove some of
25:34 - these
25:34 - optionals right here and make them not
25:37 - optional
25:39 - it will only generate this one for you
25:41 - where you are supposed to
25:43 - customize you know any properties or
25:46 - methods or
25:46 - anything you want to do with the product
25:48 - class this this is where you would do it
25:50 - you'd
25:50 - typically leave this one alone
25:54 - so in the data model file if you chose
25:57 - category extension for your code gen
25:59 - option
26:00 - then it basically generates half of the
26:03 - definition for you behind the scenes
26:07 - i typically like to leave it as manual
26:10 - none
26:10 - so i i have i know exactly what's going
26:13 - on i don't want things happening behind
26:15 - the scenes
26:17 - that could be causing problems that i
26:19 - don't know about
26:20 - um the thing with manual none is that if
26:22 - you at any time
26:24 - you change these attributes the data
26:26 - types
26:27 - names if you add new attributes or
26:30 - anything like that
26:31 - it's up to you as a developer to
26:34 - generate
26:34 - new definitions to replace your old ones
26:38 - you'd probably just replace this one
26:40 - because
26:42 - yeah then it's not going to match up
26:44 - because this
26:46 - defines how that product
26:49 - object is going to get saved into core
26:50 - data if this right here
26:53 - doesn't match these class definitions
26:56 - that you're using then
26:57 - you're gonna get an error
27:08 - uh i'm not sure all to delete with the
27:11 - default code
27:12 - so yeah i removed a lot of default code
27:16 - from this project that it generated for
27:18 - us so
27:19 - inside the content view i commented out
27:22 - the previews
27:22 - and i removed all of the extra methods
27:25 - there were a bunch of
27:27 - methods here uh there was there was a
27:30 - fetch request here
27:32 - which i got rid of as well because i
27:33 - wanted to type it out and show you guys
27:35 - how to do that and inside here in the
27:38 - views there was a list
27:40 - um which i want to build with you guys
27:43 - on the this session so that's why i just
27:46 - replaced
27:47 - the whole view with just the text hello
27:49 - world and then inside the persistence
27:51 - container
27:53 - i basically commented out this preview
27:55 - property
27:56 - so all this does is it it generates a
28:00 - bunch of dummy objects and saves
28:02 - it into a temporary core data store
28:05 - so that it can populate your swift ui
28:08 - previews
28:12 - if we do
28:26 - i removed my preview yeah that's not
28:30 - gonna work
28:30 - and so i removed my preview that's why
28:33 - um anyways
28:34 - we can move on now so
28:37 - remember back in that slide
28:42 - we basically have everything we need now
28:44 - to start showing some stuff
28:46 - uh i know that was a long wind up but
28:48 - that's that's all core data setup
28:50 - once you know how to set it up once uh
28:53 - it won't be so confusing
28:55 - and you'll just like dive right into it
28:57 - so
28:58 - going back to this core data diagram
29:00 - remember i told you that
29:02 - the core data persistent container is
29:04 - kind of like your
29:05 - data store but you don't
29:08 - you don't use that directly to save and
29:10 - load your objects and to fetch things
29:12 - from it
29:13 - you go through a managed object context
29:15 - so you need a reference to
29:17 - the core data persistent container first
29:20 - in order to get a reference
29:22 - to the managed object context and it's
29:24 - through that
29:25 - that you save and load your data
29:28 - now in swift ui they made this really
29:32 - easy for you actually
29:37 - because this persistence controller
29:41 - this they have um
29:44 - they kind of made it like a singleton
29:46 - although you you
29:47 - kind of still can create additional
29:50 - instances
29:51 - of of this persistence controller but
29:53 - this you can access from anywhere
29:56 - and it will let you access that
29:58 - persistent container
30:00 - right that's the that's this
30:03 - bottom piece right here right so at any
30:07 - time if you want to access this core
30:08 - data persistent container
30:11 - we actually can
30:15 - right it would just be persistence
30:19 - uh let's see
30:23 - oh let me just
30:30 - persistence controller dot shared
30:33 - and this gives us the instance of
30:35 - persistence controller
30:37 - and there's the container property so
30:39 - this is that
30:40 - persistent container which gives us
30:44 - access to this bottom piece right here
30:46 - so how do we get the managed object
30:48 - context from that well if we go back
30:55 - well we don't need to go back because i
30:57 - told you it was a property of the
30:58 - container
30:59 - so if you press dot and you look for
31:02 - view context
31:03 - this is the managed object context
31:06 - this is the thing that we need to access
31:10 - uh to create objects in core data
31:13 - to um to save data
31:17 - into uh the core data store you do it
31:20 - all through this view context
31:22 - now i showed you you can access this
31:24 - from anywhere but they've actually
31:26 - exposed it a different way
31:28 - for us to access and let me show you
31:29 - what that looks like
31:31 - in the entry point of your app which is
31:33 - this core datademoapp.swift that we have
31:36 - up here
31:36 - you can see that they already created
31:39 - a constant called persistencecontroller
31:42 - so again
31:43 - it's basically what we did to get the
31:45 - instance of the persistence controller
31:48 - and then down here they attach this as
31:51 - an
31:52 - environment object or environment value
31:55 - to content view
31:57 - and you can see this this is what
32:00 - they're returning persistence controller
32:02 - which is this up here
32:04 - dot container and this is that
32:07 - core data persistent container that you
32:09 - see right here
32:15 - dot view context so that view context
32:19 - is this managed object context and this
32:22 - is what we are going to be
32:24 - creating objects on and things like that
32:28 - okay so
32:31 - yeah so it's passing this in to content
32:33 - view
32:34 - and then in content view right here
32:38 - you can just access it like that and get
32:40 - a reference to
32:42 - the managed object context and the nice
32:45 - thing about
32:46 - doing it this way is that in any
32:49 - sub-view of content view you'll be able
32:51 - to just do the same thing
32:53 - and get access to
32:56 - this managed object context which is
32:59 - what we need to work with core data
33:04 - okay so hopefully that all still makes
33:05 - sense so far and i know
33:07 - we've been doing a lot of ramp up but we
33:10 - have not yet
33:11 - actually ran the project or created
33:14 - anything in coordinated yet
33:19 - okay so what should we do first should
33:22 - we i guess we should create some objects
33:27 - into our core data store first why don't
33:30 - we do that
33:32 - so let's write a method here where we'll
33:35 - just
33:36 - be like add data
33:39 - we'll add we'll maybe add one product to
33:42 - our core data
33:44 - so first of all we need to create a
33:47 - core data object so let's say
33:51 - let p equals product
33:55 - remember this is the class that we
33:57 - generated
33:58 - from this data model file right this
34:01 - product entity
34:03 - did the code gen here are our product
34:06 - classes
34:07 - so we're going to create an instance of
34:09 - this so back in the content view let's
34:11 - go ahead and do that
34:15 - we want to create it inside of a certain
34:17 - core data context if
34:19 - we want to eventually store this
34:22 - product object into core data then you
34:25 - want to create it
34:26 - under that context so this is where this
34:29 - comes into play we can access
34:31 - the view context from here so we'll just
34:33 - create it inside
34:34 - view context like that and then let's
34:36 - just set some dummy
34:38 - data here you know my
34:42 - awesome product
34:46 - and let's just give it
34:52 - what else did we have we had barcodes
34:56 - i don't know if we're gonna end up
34:58 - actually using these barcodes but
35:01 - okay so now we is this oh
35:04 - right all right so now we've basically
35:08 - created
35:08 - a single object in memory um if we want
35:12 - to save it into
35:13 - core data
35:18 - view context right here has a save
35:21 - method
35:22 - that's what you're going to have to call
35:26 - attempts to commit any unsaved changes
35:29 - to registered
35:30 - objects in the context parent store so
35:32 - this is something that we just created
35:34 - it's brand new it's not inside core data
35:36 - yet it recognizes that
35:38 - this product you know is in that view
35:40 - context and so when you call view
35:42 - contacts.save
35:43 - it's going to try to save into the data
35:46 - store
35:47 - any changes that you've made any new
35:50 - objects you've created any new
35:51 - relationships between objects that have
35:53 - formed
35:54 - so that's what we're going to call but
35:55 - notice that it throws an error
35:57 - potentially
35:58 - it potentially could fail at saving
36:02 - so you can capture that you can either
36:06 - not care and type try
36:09 - and sort of force trying to save
36:13 - and don't care if there's an error or
36:15 - you can wrap this
36:16 - in some error handling like a do catch
36:19 - block so this is how you would do that
36:20 - you would
36:24 - do
36:27 - catch any errors that might happen so
36:30 - you wouldn't use the exclamation mark in
36:31 - that case you would
36:33 - you know here you would say
36:37 - catch any errors that
36:40 - happened or you know what respond to
36:43 - error in saving right so that's what you
36:47 - would do
36:49 - let's try this out let's call this data
36:52 - add data method by a button right here
36:55 - we're just gonna change this to a button
37:04 - okay so for action we're gonna call
37:08 - add data
37:54 - all right are you guys back
38:04 - all right please please chime in are we
38:07 - back
38:11 - you guys good can you see me can you
38:12 - hear me
38:21 - yeah so i warned you guys right my mac
38:23 - is old so that's why i've
38:26 - i've ordered a new mac it's coming in on
38:28 - friday and then we won't have these
38:30 - issues right now
38:31 - with this mac it it cannot support
38:34 - compiling code in xcode and streaming at
38:37 - the same time so
38:38 - that's why it's been kind of difficult
38:40 - to uh to code and to show you guys
38:42 - things
38:43 - i've gotten used to streaming i really
38:45 - love hanging out with you guys right
38:46 - here
38:48 - however it's just my computer is
38:50 - chugging along so
38:52 - we good again okay great glad to hear
38:54 - that
38:55 - so hopefully i'm going to try to
38:56 - minimize the code building
38:59 - but when we you know try to fetch the
39:01 - data we will run into the same issue
39:03 - hopefully it's only for about 10 seconds
39:06 - um and then we're back okay
39:10 - yeah need that m1 come in on friday
39:13 - and then hopefully the monitor comes as
39:15 - well soon and then on tuesday
39:17 - next tuesday hopefully we can do some
39:19 - building and we won't be experiencing
39:20 - any stream issues
39:22 - um all right so now the simulator has
39:26 - launched on the screen i'm going to hit
39:27 - tap me
39:28 - and someone mentioned sami you mentioned
39:32 - to explain the function part okay so
39:33 - i'll explain this again
39:35 - after i tap it we'll see what happens
39:36 - okay i'll set a break point right here
39:39 - at line 31.
39:42 - and we're just gonna click this button
39:44 - right here
39:46 - and tapping on that button calls this
39:49 - method add data so
39:50 - execution has come down here and what
39:53 - we're trying to do here is create
39:55 - a new product uh object
39:59 - and we're gonna set all of these
40:00 - properties but the important thing to
40:02 - note is that we're creating it in this
40:04 - managed object context which
40:07 - is essentially just saying that we want
40:09 - to
40:10 - work with this product object
40:14 - inside core data so i'm going to step
40:16 - through the code right here
40:18 - line by line as uh and we can sort of
40:22 - explain it
40:22 - so this is just setting the different
40:24 - properties for that
40:26 - product and then down here we're calling
40:29 - view context.save and this is going to
40:32 - save any changes
40:33 - or new objects that we've added to the
40:36 - context like we have here
40:37 - or any new relationships that have
40:39 - formed if we have multiple
40:41 - core data entities and we have
40:43 - relationships between them
40:44 - and we maybe have established the
40:46 - relationship a new one
40:48 - when you hit save it's just going to
40:50 - preserve all of that into core data so
40:52 - i'm going to step over this as well
40:57 - and nothing seems to have gone wrong
41:02 - all right so that's it so now we have a
41:04 - product
41:05 - object inside our core data store you
41:08 - can't visually see anything right now
41:09 - because we haven't shown anything
41:13 - but now that's where the second part is
41:15 - going to come in we are going to
41:17 - fetch that data back out of core data
41:23 - so this is essentially
41:26 - yeah so this is adding data while we're
41:28 - here
41:29 - let me show you um what you would do if
41:34 - you wanted to
41:36 - update something in core data so
41:40 - all you would do is change whatever you
41:42 - want to change let's say you wanted to
41:43 - change the name
41:44 - or the price or the you know whatever
41:47 - properties you want to change
41:48 - just make those changes and then just
41:49 - call view context.save again
41:52 - it's going to preserve all those changes
41:54 - back into that object
41:55 - in core data so that's creating and
41:58 - updating
41:59 - okay so now let's fetch it back from
42:01 - core data
42:02 - and inside swift ui they actually make
42:05 - this really easy
42:06 - so there is a property wrapper i mean
42:10 - this is one way to do it you don't have
42:11 - to do it this way
42:13 - but it's kind of a nice way to work with
42:16 - inside a swift ui project so
42:20 - you define this fetch request and there
42:23 - are
42:23 - multiple parameters that you can do
42:26 - so usually this is the one that i'm
42:29 - using
42:30 - sort descriptors predicate and animation
42:33 - i have to admit that the animation
42:36 - property here i don't
42:38 - usually do anything with it and this
42:40 - parameter is completely
42:42 - optional if if any of you guys use this
42:45 - animation property in a fetch request
42:46 - have some experience with that
42:48 - maybe flow you have you can talk a
42:51 - little bit about this parameter in chat
42:53 - but typically
42:55 - to me these these two parameters are
42:59 - very important so short descriptors you
43:01 - can provide
43:02 - an array of them each sort descriptor
43:05 - describes
43:07 - um how you want to sort the data coming
43:10 - back
43:10 - so you can specify an attribute to sort
43:13 - by and whether you want it to be
43:14 - ascending or descending
43:16 - and you can have multi-level sorts
43:19 - so you just specify multiple sort
43:21 - descriptors
43:22 - for this basic example i'm going to put
43:24 - in a an
43:26 - empty array like that and for predicate
43:30 - this is where you specify some criteria
43:34 - for what you want to fetch back this is
43:36 - optional for this fetch request i can
43:38 - just completely remove this
43:40 - parameter here and that will fetch
43:43 - all of a single entity type back
43:47 - for me so that's what i'm going to do
43:48 - now and then later we can take a look at
43:51 - specifying a predicate okay so now let's
43:54 - specify
43:56 - the property so var
43:59 - this can probably be private var since
44:01 - we're not using it
44:02 - outside and you can actually
44:06 - make a new line as well just so it's a
44:07 - little more neat and let's call this
44:10 - you know product list and the data type
44:14 - for this is going to be
44:16 - fetched results
44:21 - and then you have to specify the actual
44:24 - data type that you're trying to fetch
44:28 - so in our case here it's going to be
44:31 - product and so the nice thing about what
44:34 - happens here
44:36 - is this is automatically going to
44:39 - populate for you
44:40 - from core data it's just going to based
44:43 - on the sort descriptors that you have
44:45 - in this property wrapper based on the
44:47 - predicate that you specify
44:48 - here it's just going to go and make that
44:52 - um fetch request into your core data
44:54 - store
44:55 - return it and populate this property so
44:58 - that you can use it
44:59 - right away inside your inside your view
45:03 - here
45:04 - okay so let me let me show you that
45:11 - okay so let's put this inside of the
45:12 - stack and then let's add a list
45:22 - so we are going to list our
45:25 - product list
45:32 - and let's just display
45:38 - product name
45:45 - let's reindent everything okay
45:48 - so add a product
45:53 - to the data store and this one
45:56 - is display
45:59 - products in a list
46:03 - so since the name can be optional
46:07 - we'll add a nil coalescing operator
46:09 - which allows you to
46:10 - specify an alternative value if this
46:13 - happens to be nil
46:16 - so we'll just do that for now
46:20 - all right let's quickly check the chat
46:29 - uh deodoxy what mac do you have this mac
46:33 - is actually pretty old it's a
46:35 - 5k uh 27 inch imac 5k
46:38 - but it's like a quad core i5 it's like a
46:41 - 20
46:42 - mid 2015 machine which has been running
46:45 - smooth and fine it's just that now that
46:47 - i want to use xcode
46:49 - and stream at the same time it's it's
46:51 - choking
46:52 - so i can't can't but the mac minis are
46:54 - so
46:55 - you know they're kind of affordable now
47:04 - all right awesome let's come back here
47:07 - um
47:07 - so what's gonna happen now is when we
47:10 - run this app
47:11 - which i'm a little bit hesitant to do
47:13 - again because it's going to choke up the
47:15 - stream
47:17 - this fetch request is going to be
47:19 - populated automatically
47:20 - it's going to go into our core data
47:22 - store grab all the products
47:24 - and assign it into this fetched results
47:30 - array essentially it sort of works like
47:31 - an array
47:33 - so it's got the count property you can
47:36 - use
47:36 - indices to fetch specific items from
47:40 - this
47:40 - list here and then in terms of the view
47:43 - what will we see
47:44 - well we're going to see that button and
47:47 - then we're going to see a list
47:49 - of all of the products inside our core
47:51 - data store right because we are
47:53 - iterating we're looping through the
47:56 - product list
47:56 - right up here which you know is fetching
48:00 - all of our products from core data
48:02 - so okay so let's try this out
48:06 - i'm going to stop this project and i'm
48:08 - going to rebuild it
48:10 - our stream is going to die again for a
48:12 - good 10 seconds but nobody go okay
48:14 - you stay stay here and
48:19 - you'll see what happens in the simulator
48:21 - you're gonna see that there's
48:22 - one product because so far we've only uh
48:25 - tapped this ad
48:26 - data button once so we've added one
48:29 - product to our core data store
48:31 - so when we launch this app and it's
48:32 - fetching all the products it's only
48:34 - going to bring back one product so we
48:35 - should
48:36 - in theory see one product in our list
48:39 - okay here goes
49:01 - okay let's go
49:28 - work
49:37 - hey our stream is still good
49:44 - it was just the first time i was
49:46 - building it for the first time
49:48 - and i was just looking at the chat so it
49:50 - seems like the stream is still up
49:51 - everything is good
49:52 - thank you 2015 mac for holding up
49:55 - and not embarrassing me in front of a
49:57 - ton of people
49:59 - awesome so check it out we've got
50:03 - this product which was in our core data
50:05 - store and it got returned
50:07 - so it's showing up in the list now so
50:09 - let's
50:10 - tap on this button to add another
50:12 - product
50:13 - into core data and here's the cool part
50:17 - look it showed up right away that means
50:19 - when i
50:21 - when i tap this right what's happening
50:24 - is
50:24 - it's coming down here and it's creating
50:26 - a product and it's saving it into core
50:29 - data
50:31 - right that's all it it's doing it's not
50:33 - updating that list
50:35 - up there but it's adding that
50:39 - product into core data and then this
50:41 - fetch request
50:42 - is being kept up to date right it's
50:44 - fetching all of the new products that
50:46 - we've added automatically and because
50:49 - this
50:50 - changes our list
50:53 - here in the view code this is displaying
50:56 - as it's just reflecting
50:58 - all of the new products that are coming
50:59 - into core data
51:01 - so how cool is that
51:04 - so the setup you know sort of in in
51:07 - conclusion
51:08 - the setup for core data was a little bit
51:11 - um you know you have to wrap your head
51:13 - around it a little bit
51:16 - um but then after the fact it's not so
51:19 - bad
51:20 - like in terms of actually doing the
51:23 - creating retrieving updating and
51:24 - deleting
51:25 - uh we have we have time i'm going to
51:27 - show you guys the
51:29 - the predicates so you know how do you
51:31 - perform a query
51:33 - or how do you return a subset of your
51:35 - data
51:36 - first of all i think we need to add some
51:39 - different data in here
51:46 - so let's say
51:52 - my awesome plant we'll just
51:56 - make this like 29 bucks
52:00 - uh and then i will just
52:03 - rebuild this let's add some plants plant
52:06 - products and so we have something to
52:09 - something different
52:17 - okay stream still holding up awesome
52:20 - okay so we have a few plants we have
52:21 - like four plants and three products
52:23 - so now i'm gonna go back to our fetch
52:26 - request
52:27 - and let's try to fetch only the plants
52:31 - for example
52:35 - so remember how there was another
52:37 - parameter which i got rid of
52:40 - which was called predicate and here you
52:42 - specify
52:43 - a new ns predicate
52:47 - is there just the predicate i think it's
52:49 - yeah ns predicate
52:51 - okay and here you can specify
52:54 - essentially what
52:55 - is just a string
52:58 - um and you can specify that query
53:02 - now typically what i do is i just
53:06 - go up to
53:10 - google and i just type in ns predicate
53:15 - and i get some help with this so
53:18 - apple developer documentation ns
53:20 - predicate
53:24 - here are some simple examples such as
53:27 - something double equals something
53:32 - or you can do like a contains you can do
53:35 - it like
53:36 - there is a more detailed guide predicate
53:38 - programming guide right here
53:40 - that when you click into it tells you
53:43 - more about
53:44 - the types of queries you can do
53:47 - for our purposes i think
53:50 - just demonstrating something like that
53:52 - will be fine there's also
53:54 - predicate cheat sheets i don't know if
53:56 - this is still
53:57 - i mean ns predicate hasn't changed so
54:00 - this should still be
54:01 - okay all right
54:06 - so this is kind of useful
54:11 - okay for this one um let's
54:15 - we want to use contains we probably want
54:17 - to use contains
54:26 - yeah so here we would say name because
54:30 - that's the attribute
54:31 - where it contains
54:36 - right so we want to where was this
54:42 - we want to choose all the plants right
54:47 - so i can't remember i think i have to
54:51 - put this in single quotes in here if
54:52 - this doesn't work then we will
54:54 - we'll change that but just by specifying
54:57 - a single ns predicate with a single
55:01 - criteria like that
55:04 - you're gonna see that we only get those
55:08 - all right and looks like i don't need
55:18 - those
55:25 - oops
55:32 - looks like i need to take a look at
55:34 - something here
55:38 - let me take a look at these predicates
55:46 - again
55:58 - hmm you know what we can try instead
56:02 - let's try this go back for a second
56:07 - and then we are see we're going to
56:10 - put this as a wild card and then we're
56:13 - going to
56:14 - substitute plants in there i don't think
56:18 - this needs to be
56:19 - caps although i'm not sure that might
56:22 - have been the problem
56:37 - we're not getting our plants
56:44 - i'm doing something wrong here
56:51 - contains left hand contains
56:55 - the right hand expression
57:15 - no stack overflow yeah um
57:24 - well
57:26 - all right let's do it core data uh
57:29 - predicate contains
57:33 - all right let's open up these two
57:51 - uh he did okay single quotes you know
57:54 - what i did i i don't think i capitalized
57:57 - my contains
57:59 - i think that's what happened
58:07 - these predicates always get me so let's
58:09 - let's try that
58:18 - uh why are you running mojave this is
58:20 - actually big sir
58:25 - am i mistaken yeah this is actually big
58:27 - sir
58:33 - guys i'm not exactly sure why my
58:35 - contains
58:37 - isn't where oh you know is it oh
58:41 - i should be should have been looking for
58:42 - plant there is no plants it's my awesome
58:45 - plant
58:48 - guys begins with
58:51 - yeah that might have worked too but i
58:54 - was actually
58:55 - i was actually looking for the wrong
58:57 - thing plants doesn't exist in our core
58:59 - data
59:00 - store it's planned
59:04 - so there we go yeah
59:07 - terrible demo but i hope you guys got
59:10 - the
59:11 - idea i always struggle with these
59:14 - predicate expressions but uh definitely
59:18 - looking at some online resources and
59:20 - doing some
59:21 - some googling using the predicate guide
59:24 - will definitely help
59:28 - and then if we want to sort it well
59:30 - there's no point in sorting it because
59:31 - all of our
59:32 - our data is the same right now
59:36 - hopefully that gave you guys a good
59:37 - primer into using core data it looks
59:39 - like
59:40 - we have some people in the audience who
59:42 - are who are familiar with it
59:48 - yeah classic mistake you spend hours
59:52 - trying to figure out what's wrong only
59:53 - to realize that there was like
59:55 - a little typo or apostrophe missing or
59:57 - something like that
59:59 - yeah i love it and doing it live on live
60:01 - stream doesn't get any better
60:17 - all right so that's all i had for you
60:19 - guys for today
60:21 - it's about time to wrap up but let's let
60:23 - me see if you guys have any more
60:25 - questions
60:27 - and yeah this is going to be available
60:29 - as a replay i might clean it up a little
60:31 - bit
60:32 - and maybe repost it or maybe i'll just
60:34 - repost it as is
60:41 - hey call of programming nice to see you
60:43 - thanks for joining so meet scott
60:45 - mark thank thank you guys
60:50 - hey duane you just finished the ios
60:51 - foundations course that's great
60:53 - it's awesome so the next time i'll be
60:56 - streaming
60:57 - is probably on tuesday ali
61:00 - awesome ali has joined the stream thank
61:03 - you so much for your
61:04 - uh is that a sticker or a donation i'm
61:08 - not sure i'm new to all of this but
61:09 - thank you so much
61:11 - elite worked with us at code with chris
61:13 - before
61:14 - and uh he worked with core data as well
61:17 - so
61:17 - he was one of those intern co-op
61:20 - students that i told you guys about a
61:22 - couple of streams ago so every four
61:23 - months we get a new student from
61:26 - my old university just to give them some
61:28 - work experience
61:30 - so that's awesome ali i'm so happy to
61:32 - see you again hope you're doing fine
61:38 - yeah uh this fetch request really really
61:41 - makes things
61:42 - uh easier because it's like kept up to
61:45 - date if you don't do this
61:47 - fetch request property wrapper you still
61:50 - can
61:50 - manually create a fetch request and then
61:53 - execute that to grab your grab your
61:56 - items
61:57 - that's definitely still available
62:01 - oh yes i was talking about the my next
62:03 - stream so i think
62:05 - it will be tuesday next tuesday so
62:07 - hopefully the new mac has come in
62:09 - uh i
62:13 - i want to try to build something i'm
62:15 - thinking about what that
62:16 - should be either the new
62:19 - community app challenge or maybe i will
62:22 - go through some of the old ones because
62:24 - to be honest i haven't built the weather
62:27 - app or the stock tracker app
62:29 - uh that have been issued to the
62:31 - community as challenges and i know some
62:33 - of you guys
62:34 - in in the audience have actually
62:36 - attempted that challenge so
62:37 - i myself haven't done it the source code
62:40 - that we post like the solution that we
62:42 - post for those community app challenges
62:44 - are actually built by the co-op students
62:47 - that join us and that's sort of like
62:49 - their ramp up
62:50 - into swift ui um like
62:53 - ali built some i believe
62:58 - and right now our current student
63:02 - jesse he's worked on an nba like a
63:04 - sports
63:06 - uh stat statistics app
63:09 - and also another app that integrates
63:12 - with
63:13 - health kit for tracking your water
63:15 - intake
63:16 - uh and then the last one was
63:20 - a new york times news reader so those
63:23 - will eventually be
63:24 - issued as community app challenges as
63:27 - well
63:28 - so i think i'm going to try building
63:29 - those might be a good
63:31 - way to break into coding live let's see
63:40 - yeah anyways i want to thank you guys
63:43 - all for joining i'm going to call it a
63:45 - day
63:46 - and uh i'll see you guys on tuesday so
63:49 - if you want to
63:50 - just make sure you have the link to the
63:54 - streams it's always going to be at
63:56 - cwc.teo
63:58 - streams you're going to see all of the
64:00 - replay links as well so if you want to
64:02 - get the replay for this
64:04 - you're going to find it you're going to
64:06 - find it here
64:08 - all right so again thank you guys so
64:10 - much and i'll see you guys next
64:12 - time