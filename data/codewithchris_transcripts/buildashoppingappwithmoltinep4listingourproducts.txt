00:04 - hey coders how's it going hope you guys
00:06 - are doing well Chris here with episode 4
00:09 - of how to build a shopping app in the
00:12 - previous lesson we had setup cocoapods
00:15 - set up our Xcode project and initialized
00:18 - the Moulton SDK with our store ID in
00:21 - today's video we're actually going to
00:23 - make some API calls and retrieve the
00:25 - products that we have set up in our
00:27 - Moulton store so now as we're digging
00:29 - deeper into the Xcode project it's a
00:32 - good time to mention that I'm actually
00:34 - mirroring this Xcode demo from one of
00:38 - Moulton's blog posts by Dylan McKee and
00:41 - I will put the link in the description
00:43 - below so if you ever want a written
00:45 - reference for this demo you can come
00:48 - here and we're about right here listing
00:51 - products if you want to see what the
00:53 - next couple of videos are going to be
00:55 - about you can even scroll down further
00:57 - and read the rest of the document so
00:58 - going back to our Xcode project the
01:01 - first thing we're going to do is run the
01:02 - app and it looks like we've done nothing
01:07 - now it's empty but you can see that this
01:10 - master detail Xcode project already
01:13 - comes with a table view furthermore it
01:16 - comes with this edit and plus button
01:18 - which is going to allow us to edit the
01:20 - rows and add new rows but we don't
01:22 - actually need those two things so we'll
01:24 - go ahead and remove those soon by going
01:27 - back to the Xcode project in the master
01:30 - view controller dot Swift I want to
01:31 - point out a couple of things namely that
01:33 - we do have a table view already set up
01:37 - so that all we need to do is plug in the
01:39 - data and implement the table view
01:41 - delegate methods to display the table
01:43 - cells and furthermore the table data is
01:45 - going to be stored in this objects
01:48 - property and it's an array of type any
01:51 - object so that's important to note
01:53 - because when we make the API call to
01:55 - retrieve our moulton store products
01:57 - we're going to assign those products to
01:59 - the objects array and then later on when
02:02 - the table view asks us for the sell data
02:05 - we're going to be accessing this objects
02:08 - array to return that sell data as well
02:10 - okay so first of all let's review what
02:12 - we have in the
02:13 - so far the only code we added was the
02:16 - set public ID method cult which is going
02:20 - to initialize the SDK for use so what
02:22 - I'm going to do here now is remove the
02:25 - edit button which is this line of code
02:27 - that adds it and then also this add
02:30 - button so we're going to remove these
02:32 - two lines which assigns that add button
02:35 - to the upper right corner so underneath
02:39 - this split view setup code I'm going to
02:42 - create a little space but this is still
02:44 - within the viewdidload method and I'm
02:47 - going to make a call to retrieve the
02:52 - store products and what we're going to
02:56 - do is we're going to type in Moulton dot
03:00 - sharedinstance
03:01 - and this is going to give us the
03:03 - singleton instance that we initialized
03:05 - up here and we're gonna call a method
03:08 - dot product dot listing with parameters
03:13 - and this is going to return all of our
03:16 - products for the actual parameters we're
03:20 - going to put nil because we want all of
03:22 - them and for this success handler and
03:25 - the failure Handler all you need to do
03:27 - is just double click that it's going to
03:29 - expand it and you can see in the
03:31 - response there is a single parameter
03:32 - that is a dictionary of NS object where
03:36 - that's the key and the value is any
03:39 - object so we're just going to call this
03:41 - response and keep in mind that it's a
03:44 - dictionary maybe we'll just name it
03:46 - response dictionary in case in case we
03:49 - forget for failure let's double click
03:51 - that to open it again this response has
03:53 - two parameters one is a dictionary and
03:56 - another one is an error parameter so
03:59 - here we're going to call this again
04:01 - response dictionary and error like that
04:06 - if an error happens we're just going to
04:09 - print out a message to the console right
04:11 - now so something like something went
04:15 - wrong and let's set a breakpoint there
04:18 - in case it hits that point and then we
04:20 - can worry about it and we can debug the
04:22 - error for the code inside a successful
04:25 - response what we're going to do
04:26 - is grab our product data from the
04:29 - response dictionary now how do we know
04:32 - what's contained inside that dictionary
04:34 - well now would be a good time to look at
04:37 - the Moulton API guide or a reference
04:39 - document so if we go back to the home
04:43 - page and you scroll all the way down you
04:46 - can look at API reference and click
04:49 - under products and look at this call get
04:52 - products by criteria and then you can
04:55 - look at the successful response now
04:57 - first of all how do I know that this is
05:00 - the API call that this method is making
05:04 - listening with parameters well let me
05:06 - run it right now and I'm not doing
05:09 - anything with the successful response
05:12 - because we haven't written any code here
05:13 - so it's just going to make this call so
05:16 - when I launched it viewdidload gets
05:18 - called our Moulton singleton object gets
05:20 - initialized and we make this call
05:24 - listing with parameters if you look in
05:25 - the console it tells you exactly what
05:27 - call is being made so you see right
05:29 - there slash products and that
05:33 - corresponds to this one get products by
05:34 - criteria so if you take a look at the
05:36 - right side here that's an example of a
05:38 - successful response from making that
05:40 - call this response right here is
05:42 - expressed in JSON now if you're a
05:45 - student of my beginner course you're
05:47 - going to understand what JSON is and how
05:48 - to work with JSON and how to read this
05:50 - but if you're not a student of the
05:52 - course and you haven't worked with JSON
05:54 - before let me just take a quick minute
05:56 - to explain to you what it is
05:58 - so all it is is a data format when Swift
06:03 - interprets the JSON all it sees are
06:05 - dictionaries and arrays and all the
06:07 - dictionary is is a collection of key
06:10 - value pairs so let me show you an
06:11 - example by opening a set of curly
06:14 - brackets like this this would be a
06:15 - dictionary and a key value pair could be
06:18 - something like key colon and then a
06:22 - value and each pair is separated by a
06:25 - comma and here's an example of a key
06:28 - where the value is an array so here we
06:31 - use a square bracket and it would be
06:35 - something like value comma value
06:40 - value and this would be an array of
06:44 - three objects where it can be retrieved
06:47 - by this key so then we write comma to do
06:52 - another key value pair and the thing is
06:54 - things can become nested so you can have
06:56 - something like key : and then as the
06:59 - value you can have another dictionary
07:01 - and inside this dictionary would be a
07:04 - whole new set of key value pairs so
07:07 - something like a you know : value comma
07:11 - B colon value it may seem a little
07:16 - confusing at first but once you
07:17 - understand it and you get used to
07:20 - reading it you can understand how Swift
07:22 - is going to interpret it so it's going
07:24 - to see this as a dictionary it's going
07:28 - to see each of these as a key value pair
07:31 - and right now I have all the keys as the
07:33 - same type of object but in reality each
07:36 - of the keys would be different like that
07:37 - because the key is used to retrieve the
07:40 - value so if we look back at the
07:44 - successful example response you can see
07:47 - that the top level is a dictionary
07:49 - because it's a curly bracket so Swift is
07:51 - going to treat this whole response as a
07:53 - dictionary here's a key value pair
07:56 - status is the key and this boolean true
07:59 - is the value comma the second key value
08:03 - pair is the key as result and the value
08:06 - is an array because it's a square
08:08 - bracket of all of these product objects
08:12 - you can see that each value of that
08:13 - array is a dictionary in itself so
08:16 - here's one of the products right comma
08:20 - that separates each item in the array
08:23 - and then this one is another dictionary
08:26 - which represents the product and you
08:30 - know it's got all of this product data
08:31 - as key value pairs so what we really
08:34 - need out of this response dictionary is
08:37 - this stuff so we're going to be calling
08:39 - the result key to retrieve the array of
08:43 - product data and in that array of
08:46 - products each product is represented as
08:48 - a dictionary itself
08:50 - okay might be confusing for you but it's
08:53 - all going to make sense when we type it
08:55 - out in code so here this response
08:57 - dictionary we're going to say self
09:00 - thought objects because remember that's
09:02 - the array where we're going to store the
09:05 - objects for the tableview equals
09:08 - response dictionary and we're going to
09:14 - retrieve the result key the value we're
09:18 - going to cast it as a type of any object
09:22 - an array of any object because remember
09:24 - the value for the key result is an array
09:28 - of all of these objects but we're going
09:31 - to put any object here and not as a
09:33 - dictionary because that's the type that
09:34 - this is declared in okay so now we have
09:37 - the array of products in the self dot
09:39 - objects property so assign products
09:43 - array to our objects property and
09:48 - furthermore we're going to tell the
09:51 - tableview to reload its data and we do
09:55 - that by typing reload data and that's
10:00 - going to tell the tableview that we have
10:01 - new data and for it to request the data
10:04 - from us again
10:05 - so because we created this Xcode project
10:07 - as a master-detail when the project's
10:09 - created we already had a tableview
10:12 - connected to this self dot table view
10:14 - property and furthermore we already have
10:17 - the table view delegate methods if you
10:20 - scroll a little farther down this is the
10:23 - method that we're interested in right
10:24 - now cell for row at index path and right
10:27 - here it's prefilled a little bit of the
10:29 - code so it says let object equal the
10:32 - objects array index path row this
10:35 - represents the row that the table view
10:37 - is asking us for right now and it's
10:39 - casting it as an N estate which is not
10:42 - something that we want because our
10:43 - objects array contains an any object
10:47 - which we know are actually these product
10:51 - dictionaries right here okay so we're
10:54 - going to go back and we're going to cast
10:56 - this instead as a dictionary where the
10:59 - key is a string
11:03 - and the value is any object so if you're
11:08 - unfamiliar with how a tableview works
11:10 - we've been working with it in a couple
11:12 - of the demos on this YouTube channel but
11:14 - essentially when the tableview asks this
11:16 - view controller for data it's gonna call
11:19 - self or row at index path for every
11:21 - single row in the table view and this
11:24 - index path parameter is gonna tell us
11:26 - what row it's asking for so that's why
11:29 - we pass an index path row into our
11:32 - objects array to get the object that we
11:34 - should be representing for this row and
11:37 - then we're going to set the label as the
11:40 - object so if we take a look at this
11:43 - product what a single product is that's
11:46 - right here all the way down to right
11:50 - here that's a single product and we can
11:52 - see that it has a key value pair for the
11:54 - title right where the key is title and
11:57 - the value is whatever the title is from
11:59 - the store from our actual moulten store
12:02 - so we're going to say object title okay
12:07 - and we're gonna try to cast this as a
12:09 - string so we're gonna write as question
12:11 - mark string and if it fails it's going
12:14 - to turn into nil and that's gonna be
12:15 - harmless when we try to set it to the
12:17 - text property of the label okay so now
12:20 - we can run it so let's see what we get
12:23 - so it's doing its thing and there we go
12:26 - it's retrieved the three products we
12:28 - added in the previous lesson to our
12:30 - Moulton store and those are the actual
12:32 - titles of the products now if you click
12:35 - it right now it's going to crash because
12:38 - by default the master-detail template
12:41 - handles the tapping of that table view
12:43 - and it's going to try to transition us
12:46 - to a detail view controller which we're
12:48 - going to need in the next lesson however
12:51 - in this prepare for segue method it's
12:53 - trying to cast that that product object
12:56 - as a date right so for now I'm just
12:59 - going to comment out this line and
13:01 - comment out this line because that's
13:04 - going to cause a crash in the next
13:06 - lesson we're actually going to work on
13:09 - this method and we're going to
13:10 - transition to a detail view so that we
13:12 - can see the product details but for now
13:14 - let me run it again
13:16 - we have successfully retrieved the
13:18 - products from our Moulton store by
13:20 - making a simple API call like this so I
13:26 - thank you for watching please share the
13:28 - video if you found it useful and please
13:30 - subscribe to get notified of new videos
13:31 - I'll see you guys tomorrow
13:33 - where we're going to create the product
13:35 - detail page alright talk to you guys
13:37 - later bye