00:01 - hey coders what's up Chris here with
00:04 - episode 12 of how to make a youtube
00:06 - video app in the previous lesson we had
00:09 - used Alamo fire to fire off a request to
00:13 - the YouTube data API to retrieve all of
00:16 - the videos for the specified playlist
00:19 - here and this playlist is my most recent
00:21 - uploads next we took the result of that
00:24 - request and we looped through all of the
00:27 - dictionaries in the items key and each
00:30 - dictionary represents a video now in
00:33 - this lesson we're going to create all of
00:35 - the video objects and assign all of the
00:37 - properties based off of the dictionary
00:40 - data so let me run the project now first
00:43 - so that we can see what sort of data we
00:46 - have in the console because right now we
00:49 - are outputting each video dictionary
00:51 - into the console window so here we see
00:55 - all of the video data I'm just going to
00:58 - copy one of them one of these
01:01 - dictionaries because it can be kind of
01:03 - hard to see in this console window so
01:05 - starting at this curly bracket I'm going
01:08 - to copy it all the way to right here and
01:13 - that's one video dictionary next I'm
01:16 - going to just open up a text file and
01:18 - I'm going to paste that in here just so
01:20 - it's easier for us to see and
01:21 - furthermore it's got some nice indenting
01:24 - with sublime text that we can see where
01:28 - each key and value end so for example in
01:31 - this dictionary we've got this key value
01:35 - pair right this is another one this is
01:37 - another one snippet is the one that
01:39 - contains most of the data that we need
01:41 - so in this video dictionary that key is
01:44 - snippet and in the value its another
01:46 - dictionary inside that other dictionary
01:49 - I'm going to need to grab the
01:51 - description key which the value is the
01:53 - description of the video and then inside
01:56 - the snippet dictionary there's also a
01:58 - resource ID key and its value is also a
02:01 - dictionary and inside that dictionary
02:04 - there's a video ID key which contains
02:06 - the video ID so I also need that okay so
02:09 - let's go one at a time now that we have
02:11 - it in this text file
02:12 - we'll be a little easier to see so in
02:15 - here I'm gonna remove this to do and I'm
02:18 - going to create a video object so let
02:21 - let's say I'm just gonna call it video
02:25 - object like that equals new video it's
02:28 - an instance of our video class in here
02:31 - we have three properties we have the
02:33 - video ID video title and video
02:35 - description we actually don't have a
02:36 - property for the thumbnail because I
02:39 - realized we are constructing it
02:42 - dynamically from the view controller you
02:44 - look down here see when we display that
02:47 - table view cell we're just constructing
02:49 - it like that using the max res default
02:52 - it may be a little better actually to
02:54 - get the URL from the data that we have
02:58 - because we do have the URL here okay so
03:00 - we're going to add a property for that
03:02 - and we're probably going to be using the
03:04 - max res default that one right here so
03:07 - there's a thumbnails key its value is a
03:10 - dictionary and inside that dictionary
03:12 - we're going to grab the max Reza which
03:15 - contains another dictionary and inside
03:18 - there is a URL key containing the actual
03:22 - value that we need let's start by going
03:24 - into the video class and declaring a new
03:26 - property let's call it video thumbnail
03:28 - URL is a string and let's assign it to
03:31 - an empty string
03:33 - alright so video ID title and
03:35 - description and thumbnail URL are the
03:37 - strings that we need so go back to video
03:40 - model swift so in here we're going to
03:43 - set the properties of this video object
03:46 - so video object dot video ID equals and
03:52 - here we're going to have to dig into
03:54 - this video dictionary in order to get
03:57 - the video ID so remember I said that
03:59 - we're going to grab the snippet
04:00 - dictionary and then the resource ID
04:02 - dictionary and inside there is a key
04:05 - value pair called video ID so when
04:08 - you've got a ton of nested dictionaries
04:10 - like this we can use a method called
04:13 - value for key path and that's the key
04:17 - path that we specify being snippet dot
04:20 - resource ID dot video ID
04:22 - okay so snippet dog
04:26 - let's go back for a second resource ID
04:28 - capital I and video capital I the
04:31 - resource ID video ID and we're gonna
04:36 - have to cast this as a string okay so
04:39 - let's do another one
04:41 - video title equals video dot value for
04:46 - key path and let's see how we can grab
04:48 - the title so the snippet dictionary is
04:53 - from here all the way to here and inside
04:57 - there has a title so actually this is
05:00 - just going to be snippet dot title
05:03 - string video object video description
05:09 - equals video dot value for key path
05:14 - inside here the description is snippet
05:18 - dot description snip it dot description
05:24 - as string okay and finally let's grab
05:29 - the video thumbnail URL this is the
05:31 - property which we just added so video
05:34 - value for key path and the way we grab
05:37 - the URL is snippet dot thumbnails dot
05:42 - max res dot URL okay so let's move this
05:47 - to the side here snip it dot thumbnails
05:53 - dot let me just confirm that snippet
05:57 - thumbnails dot max res dot URL dot max
06:02 - res door L as string okay and we need to
06:09 - create an array to hold all of these
06:12 - video objects so outside of the for loop
06:15 - let's create a videos let's say array of
06:20 - videos equals an empty video array and
06:25 - after we create each video object we're
06:28 - actually going to add it to that array
06:30 - and then outside of the for loop when
06:33 - all the video objects have been
06:37 - constructed
06:39 - assign the array to the video model
06:44 - property and we're going to have to
06:46 - create a property up here let's call it
06:49 - var video array equals equal video an
06:56 - empty video rate and the reason I'm
06:58 - doing this is this is a temporary one
07:01 - and then after we fill it we're actually
07:03 - going to assign that to the property of
07:08 - the video model the reason why we have
07:11 - to create another property to hold the
07:14 - video array is because in our previous
07:15 - method get' videos that directly returns
07:18 - the video array to the collar of the
07:21 - method so here this method get feed
07:24 - videos doesn't return anything because
07:26 - as you learned from the last lesson we
07:28 - didn't want the main thread to download
07:31 - the videos so all the main thread is
07:33 - going to do when it executes this method
07:35 - is kick off this request to go download
07:37 - the data and then the background worker
07:40 - is going to do all the work create these
07:42 - video objects and then finally assign it
07:45 - to this video array and then once this
07:48 - property gets assigned to we're gonna
07:51 - have that notify the view controller
07:53 - that the data is ready so the view
07:55 - controller can grab all of the video
07:57 - data and display it but in this lesson
07:59 - this is all I wanted to do is to
08:01 - construct these video objects off of the
08:04 - json dictionary data now i want to run
08:07 - it and see that we actually have
08:09 - captured this data so what i'm going to
08:11 - do is right before it adds that video
08:14 - object into the temporary array i'm
08:17 - going to set a breakpoint here and we're
08:19 - going to not we're not gonna print out
08:22 - this video dictionary anymore that's
08:24 - just going to clutter up the console so
08:26 - now i'm gonna give it a run and i
08:29 - expected to hit this breakpoint when it
08:31 - does like it has now it's created one
08:34 - video object and assigned these text
08:36 - values to the properties so let's go
08:38 - p√≠o video object let's see what we get
08:42 - okay we have a video object that's good
08:45 - now let's check the video ID all right
08:50 - is that the first one
08:52 - we have yes okay now let's check the
08:56 - video title alright episode 11
09:00 - retrieving playlist videos is that this
09:03 - one right here it's all the way at the
09:05 - bottom yes it is description okay that
09:13 - looks like what it's supposed to and
09:16 - then let's check out video thumbnail URL
09:21 - so that should be the max res default
09:23 - one which is right alright so it looks
09:27 - like it's worked for the first video I
09:29 - can safely assume that it's gonna work
09:30 - for the rest of the videos in the
09:33 - playlist I'm going to remove that break
09:35 - point and I'm gonna let it run okay so
09:37 - it should in theory have processed all
09:41 - of the video objects and added it to the
09:44 - self-thought video array now it didn't
09:46 - crash so that's a good thing in the next
09:48 - lesson we're going to call back to the
09:50 - view controller after the data has been
09:52 - downloaded and the view controller then
09:54 - is going to take that and display it in
09:56 - this table view thanks for watching and
09:58 - please don't forget to give this video a
10:00 - like subscribe to the channel and share
10:02 - it with your friends alright I'll see
10:04 - you guys tomorrow bye for now