00:04 - so in this video we're going to recap
00:07 - the hello world m1 that we built in the
00:10 - previous video and what I have open
00:12 - right now is the Xcode project and all
00:14 - it is is a single view application and
00:17 - all we did was go to view controller dot
00:19 - CID and we dragged a label a UI label
00:22 - onto the view and we changed the text
00:25 - from label to hello world and then we
00:28 - ran it so I'll show you what that looks
00:30 - like again so it's just blank gray
00:32 - screen with hello world so the question
00:34 - I want to ask is how did it get to this
00:36 - point well if you take a look at this
00:38 - diagram and it's gonna look very similar
00:40 - to the previous app flow diagram a
00:43 - couple of videos ago but basically if
00:45 - you look at the files that you have here
00:47 - in Xcode the app delegate is the entry
00:50 - point so according to this diagram the
00:53 - app execution starts at the app delegate
00:55 - and then I guess to the view controller
00:56 - object which creates a view object from
01:00 - the zip file and in that view object you
01:03 - have a UI label and essentially that is
01:06 - how you end up with this iPhone app in
01:09 - this iPhone simulator so in the previous
01:12 - tutorial we talked about how objects
01:14 - that are created reside in memory
01:15 - looking at this diagram we have you know
01:17 - a whole bunch of objects here in this
01:20 - app execution so all of these objects
01:22 - reside in memory so you must be
01:24 - wondering how does the view controller
01:26 - dot zip file become an object well the
01:29 - zip file is actually a special interface
01:31 - builder file format that gets
01:33 - interpreted by Xcode and then a view
01:35 - object is created from that based on
01:37 - what you've specified through interface
01:39 - builder the view object it also resides
01:41 - a memory now going back to the view
01:44 - controller class when an instance of the
01:47 - view controller class gets created and
01:49 - if you remember the view controller is
01:53 - supposed to manage the view so in order
01:55 - for the view controller object to manage
01:57 - the view it must have some sort of way
02:00 - to find it right in memory and in fact
02:03 - there is the view controller object has
02:05 - a view property that references the view
02:09 - object so a property is is just a way
02:11 - for a class to keep
02:13 - tract of something so the view property
02:16 - points to the location of the view
02:17 - object in memory so when the view
02:19 - controller needs to do something with
02:21 - the view it needs to manage it somehow
02:22 - it can follow this property this view
02:25 - property that it has and find the view
02:27 - object in memory so now that you know
02:29 - that the view controller object can
02:31 - access the view by going through the
02:33 - view property
02:34 - let's try adding another label to the
02:37 - view but this time let's do it through
02:39 - code and let's do it through the view
02:40 - property of the view controller so I'm
02:44 - going to go to view controller dot m and
02:46 - if you don't remember there's a dot H
02:49 - and a dot M file for the view controller
02:51 - and those two files constitute the view
02:53 - controller class so the dot H file known
02:56 - as the header file is a weight where you
02:58 - describe all of the properties and the
03:00 - methods and you know everything else
03:02 - that the view controller has to offer
03:04 - and the dot M file otherwise known as
03:07 - the implementation file is where you
03:09 - actually implement those methods and you
03:11 - write the code and the logic behind the
03:13 - class another way to think about it is
03:15 - the dot H file is kind of like a table
03:18 - of contents for the view controller and
03:20 - the dot M file is actually the text or
03:23 - the contents of those chapters in the
03:26 - table of contents that's a very
03:28 - high-level analogy but that's
03:30 - essentially what we're doing so if we
03:32 - open up view controller dot M we'll
03:34 - notice that it already has two methods
03:37 - so we we haven't introduced methods yet
03:39 - so let me do that now there's this
03:41 - method called viewdidload and none other
03:43 - called did receive memory warning and
03:46 - you can see that there's a couple of
03:48 - lines of code right here surrounded by
03:51 - two curly braces so this whole chunk
03:54 - right here is a method and this whole
03:56 - chunk right here is another method and
03:58 - the method titles are a viewdidload and
04:01 - did receive memory warning so what a
04:03 - method is think of it as a niqab slated
04:06 - chunk of code or logic that can be
04:08 - referred to or access or called upon to
04:11 - execute that chunk of code so in
04:14 - viewdidload whatever code we write in
04:16 - here when the viewdidload method gets
04:20 - accessed or called upon from somewhere
04:22 - else the chunk of code in between these
04:24 - two curly based curly
04:26 - braces will be executed so in this
04:29 - particular case the viewdidload method
04:31 - gets called after the view is fully
04:34 - loaded and this is where we'd want to
04:37 - add another label to the view because
04:39 - when you try to add something to the
04:41 - view in the view hasn't loaded yet then
04:43 - it's nothing's gonna happen and so in
04:46 - the context of this view controller it's
04:48 - going to access that view controller dot
04:50 - zip file and translate it into a view
04:52 - object and then it's going to load that
04:54 - view and assign that view to its view
04:57 - property and then finally this
04:58 - viewdidload method will be accessed so
05:00 - in this method I'm going to create a new
05:03 - UI label and don't sweat about how this
05:08 - code looks about creating it
05:10 - let me type it out and I will talk to
05:13 - you about it in a second
05:47 - okay so I've written three lines of code
05:50 - and let me just run it now so I can show
05:53 - you how it looks like so you can see
05:56 - that it's actually added another label
05:59 - on here it's got a white background and
06:02 - the text is hello again
06:03 - this initial hello world label was the
06:07 - label that was translated from the
06:08 - interface builder file or the zip file
06:11 - and then once that view object was
06:13 - loaded into the view controller the view
06:15 - controller then called this method right
06:17 - here called viewdidload
06:19 - where we created a new label change the
06:21 - text to hello again and then we added
06:23 - that label to the view I just want you
06:27 - to take a look at this part this line
06:30 - right here so if self refers to this
06:32 - particular instance of the class so self
06:35 - refers to this object dot view this is
06:38 - the way to access the property we
06:40 - mentioned that there was a view property
06:41 - before that was pointing to or
06:43 - referencing the view object in memory so
06:46 - this is how the view controller knows
06:47 - where the view object is in memory and
06:50 - by saying self dot view I'm saying that
06:53 - access the object referenced by the view
06:56 - property and then add sub view and this
06:58 - add sub view is actually a method of the
07:02 - view object and I'm passing in the label
07:05 - which I created so don't worry if this
07:06 - doesn't make too much sense we'll break
07:08 - it down but what's important to note is
07:10 - that I want to introduce the concept of
07:13 - properties and how this self dot view is
07:15 - accessing the view object that was
07:17 - created by view controller that's it
07:19 - because when view controller dot zip is
07:21 - turned into a view object it gets
07:23 - assigned to this view property so now if
07:26 - this concept of properties is used to
07:28 - keep track of objects then if we go back
07:31 - to our app flow how does the app
07:33 - delegate object keep track of the view
07:35 - controller object well you guessed it
07:37 - it's by properties again so if we take a
07:39 - look at app delegate dot M
07:41 - implementation file of the app delegate
07:43 - class and if we look at this method here
07:46 - did finish launching with options
07:48 - this method is automatically called when
07:50 - the app is launched and I want you to
07:52 - ignore all of this code but take a look
07:55 - this line of code right here so self
07:57 - again refers to this app delegate object
08:00 - and dot view controller is a property so
08:02 - the app delegate class has a property
08:05 - called view controller and what's
08:07 - happening here on the right hand side of
08:09 - this equal sign is that a new view
08:11 - controller instance is being created and
08:14 - the equal sign is saying that create a
08:17 - view controller object in memory and
08:18 - then assign it to this property so now
08:21 - the app delegates view controller
08:23 - property is referencing that object that
08:26 - view controller object so this is how
08:28 - the app delegate object has a reference
08:30 - to the view controller object and then
08:32 - the view controller object has a
08:33 - reference to the view that's get that
08:36 - got created by the view controller
08:37 - that's it okay so now let's go back to
08:39 - view controller dot m and take a look at
08:42 - how to create objects we already saw an
08:45 - example of this here so I'm creating a
08:48 - new UI label object and you see this
08:51 - notation here this is the class name UI
08:53 - label and this a lock method is a method
08:56 - that will create space for this object
09:00 - in memory so it's saying allocate some
09:02 - space in memory for this object if you
09:05 - haven't noticed by now you call methods
09:07 - with these square brackets so if I
09:10 - wanted to create allocate space for this
09:15 - UI label this would be it I would be
09:18 - basically saying create a UI label
09:20 - object and this method would return an
09:23 - object for me and then I'm going to call
09:26 - another another method of that object
09:29 - that gets returned called init with
09:30 - frame and init is usually called to
09:33 - initialize the object that is returned
09:35 - from a lock so you will usually see
09:38 - objects create created like so it will
09:41 - be like class name a lock and then with
09:49 - nested frames again and then this would
09:52 - get assigned to something some variable
09:57 - you know some class name variable so
10:08 - usually this is the sort of statement
10:10 - that you will see to create an object
10:11 - and that's kind of what we have here so
10:14 - this is a variable which we haven't we
10:17 - haven't talked about but essentially a
10:18 - variable is something that I used to
10:20 - keep track of objects which I create so
10:23 - right here I've created a variable
10:24 - called label and it's going to point to
10:27 - an object of type UI label and this
10:30 - right hand side part right here is
10:32 - creating the UI label object in memory
10:35 - and I'm assigning it to a variable
10:37 - called label so now whenever I want to
10:39 - access that object which I created I can
10:41 - go through this label variable so that's
10:44 - except that's essentially what I'm doing
10:45 - down here in the next line I'm saying
10:47 - access that label object through this
10:50 - variable and access its text property
10:53 - and assign it this piece of text right
10:55 - here now the reason why this is in it
10:58 - with frame instead of an it is because I
11:00 - could very well have had just an it
11:02 - right here but in it with frame is
11:04 - another special initialization method
11:06 - which lets me pass in a set of
11:09 - coordinates and a size to create the
11:12 - label width so the very fact that I had
11:14 - this meant that I was creating a label
11:16 - at x coordinate 0 y coordinate 0 with
11:20 - 200 pixels width and 50 pixels height
11:23 - and if we go back to app delegate dot M
11:26 - we take a look at that line where view
11:28 - controller gets created see this is the
11:30 - app delegate view controller property
11:33 - and we're assigning it a new view
11:35 - controller object that gets created so
11:37 - notice the a lock statement it's
11:39 - allocating space and memory for this new
11:41 - object and then again it's using a
11:42 - special initialization method called
11:45 - init with nib name and nib was actually
11:47 - the old name for zip so you can think of
11:50 - this as zip name so it's basically
11:52 - saying initialize this view controller
11:54 - object with the zip named view
11:56 - controller and so when this view
11:58 - controller object gets initialized it's
12:01 - going to look for this view controller
12:02 - zip file and then translate it into that
12:05 - view object and then assign it to its
12:07 - own view property and that's how you get
12:10 - this diagram right here
12:11 - of the SAP flow so I hope that wasn't
12:13 - too confusing but if it was don't worry
12:16 - we're gonna do a lot of object creation
12:18 - we're gonna work a lot with variables
12:20 - and methods and stuff like that so I'm
12:22 - sure over the next two demos that we're
12:25 - going to do you'll get you're gonna get
12:27 - a better grasp of it let's do a recap
12:29 - right now of what we went through today
12:31 - so we talked about how the app flows
12:33 - from one end to the other in our hello
12:36 - world demo starting with the app
12:37 - delegate it creates a view controller
12:39 - object gets it has a reference to it and
12:42 - then the view controller object goes
12:43 - ahead and turns that view controllers
12:45 - that file into a view object and assigns
12:48 - it to itself so it has a reference to
12:50 - the view and then finally we put a label
12:52 - on the view from the view controller we
12:55 - also introduced the concept of
12:57 - properties and how one object keeps
12:59 - track of other objects using properties
13:01 - we talked about how to programmatically
13:04 - create and add additional UI elements to
13:07 - the view controllers view and we talked
13:09 - about how we can create instance of
13:11 - classes called objects so that was a
13:14 - pretty heavy tutorial in terms if you're
13:17 - new to programming these concepts of
13:19 - classes objects variables may seem
13:22 - foreign to you but we're gonna practice
13:24 - it and you're gonna have a better grasp
13:26 - of how it works and what it is what as
13:29 - soon as we do more demos so continue
13:31 - watching don't give up as always don't
13:33 - forget that there's a link to the notes
13:35 - below and also you can ask questions in
13:38 - the comments below if you have any
13:40 - questions and if you enjoyed this video
13:42 - and you feel like you learned something
13:43 - please share it with your colleagues and
13:46 - friends and it would really help me out
13:47 - and build my audience thank you so much
13:49 - and I'll see you in the next video