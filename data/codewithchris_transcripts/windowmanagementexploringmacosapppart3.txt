00:00 - hello and welcome it's chris here this is part 
three of the three-part video series where  
00:04 - my friend flo compares mac os app development 
versus ios app development i hope you enjoyed  
00:09 - this last lesson of the series if you like flo's 
teaching style make sure you check out his youtube  
00:14 - channel flow rights code as well all right enjoy a 
crucial aspect of mac os apps is window management  
00:22 - that includes opening windows closing them 
and managing which window handles which  
00:29 - events hey chord crew this is flo this lesson 
will cover everything you need to know about  
00:36 - window management for swift ui apps in 
mac os you will learn about deep linking  
00:42 - setting up different window types opening 
urls and of course also closing windows  
00:50 - first of all let's have a look at 
the example project it's very simple  
00:53 - right now there's just a single view that is 
the content view with the hello world stream  
00:59 - let's have a look at what happens right now so 
let's run the app and then a single window will  
01:04 - come up with our hello world text element in there 
which is just that content view view the window  
01:12 - has a title of our project title so mac os course 
lesson three in this case the first thing that  
01:19 - you need to know about windows is how the titles 
work so the default title is just the name of your  
01:24 - project in this case mac os course l3 if you want 
to change the title it's very simple in your app  
01:32 - struct you can just go to your window group and 
add the title as a parameter to that initializer  
01:40 - so let's just call this one our main window 
let's run the app again and then you will see  
01:47 - the window is now called main window so super 
simple it's just a single string that you can  
01:53 - add there next let's find out what happens if 
you want to set up different windows so let's  
02:01 - create a second window group here and let's 
give this a name of maybe our detail window
02:13 - and in here let's just also show the content view  
02:17 - just like that to make it easier for us to 
distinguish the two let's give the content view a  
02:22 - little title string that we can pass in so here we 
can just say that the default title is hello world  
02:33 - and then instead of that hard hardcoded 
string we can just show the title here  
02:37 - now what we can do is call the first one 
main window and the second one detail window  
02:45 - that was just easier for us to yeah find out which 
window is showing so now let's run the app again
02:56 - and you will see that only the first window group 
is open by default that means that in our case now  
03:04 - only the main window will be shown to the user now 
of course we want to also be able to show other  
03:11 - windows and to do that we have to take use of deep 
links you might have already used them for example  
03:18 - when linking into a specific page in your app or 
when opening a specific view in your app using  
03:24 - a widget now in this case we will use deep 
links to open a specific window group and  
03:29 - thus a specific window there are a few different 
step but it's actually pretty easy to do that  
03:35 - the first thing when working with deep links is 
you will need to go to your project configuration  
03:42 - select your target and go to the info.plist now 
in xcode12 that was a single file here in the  
03:49 - navigate on the left hand side now it's under the 
project target and then you go down to url types  
03:56 - expand that section hit the little plus 
icon and now here we can add a custom url  
04:03 - so let's give it an identifier of my awesome 
app and the url scheme is the important part  
04:10 - now in our case i will just call it my app you 
will see how we will use that in just a second  
04:19 - okay so now we have registered a url 
type so mac os knows that our app will be  
04:26 - or should be opened when the 
specific url scheme my app is used
04:34 - now to let mac os know which window 
should be open there is actually just  
04:38 - a single modifier that you need to add 
and that's called handles external events  
04:43 - so let's add that one to our 
detail window window group
04:48 - and then in here we can just create a set of 
strings in this case i will just want to have the  
04:58 - detail path basically to be opened in the detail 
window then we can also add that modifier to our  
05:06 - main window and say the main path should be opened 
now you will understand how this works in just a  
05:14 - second because now we will go into our content 
view and we will wrap the text in a v-stack  
05:22 - so we can also add a button below so 
we can open that deep link so let's  
05:27 - create a button here and let's call it open 
detail window and let's fill out the action  
05:35 - you might have already seen this but there is 
a closure inside of the swiftui environment  
05:40 - that we can use to open urls so let's access 
the environment at backslash dot open url  
05:50 - give that variable a name doesn't really matter 
but in this case i like to always call my  
05:55 - variables the same keypath name that they have in 
the switcher environment so it's very obvious for  
06:01 - me in the code to understand what they do now we 
have that open url action here if we option click  
06:07 - on that we see it's of type open url action and 
if we have a look at the apple documentation here  
06:14 - then there will be an example of how to use it 
i think it's very easy to use so let's just jump  
06:20 - right into it close the documentation window again 
we can just construct a url and then pass it into  
06:26 - the open url function so let's try to call this 
function and then you will see it expects a url  
06:34 - as its input parameter so let's construct our url 
like always we will construct it via a string and  
06:47 - and now the important part is to remember how you 
call your url url scheme in your target info.plist  
06:53 - so let's have a look back there again if we 
expand the url type section again the scheme was  
06:59 - my app so let's copy that go back into 
our content view and that's how the url  
07:06 - will start then there will be a colon slash 
slash and then the path or route or whatever  
07:13 - this is basically what we specified in our 
handles external events modifier we want to  
07:19 - show the detail window so we will have to use 
the detail path just like that now there is a  
07:28 - tiny issue the open url function expects a url not 
optional but our url is now optional because this  
07:37 - is a failable initializer so we will just guard 
that it worked and else we will just return out  
07:44 - of the function so now we have an unwrapped url 
here and we can pass it into the open url function  
07:53 - let's build and run the app and have a look 
at what happens okay so the window has now  
08:00 - opened our main window same as before now 
we have our open detail window button here  
08:06 - let's click on it and you can see our detail 
window has now also been opened of course we  
08:13 - can click that button again and again and 
again and more and more windows will open
08:20 - you probably also want to have a way to 
close a specific window and that is also  
08:24 - super easy let me show you how it works you might 
already know this little environment function from  
08:32 - your ios apps but it actually behaves different 
than macos on ios it undo a navigation action  
08:39 - so if you have a navigation link or a sheet or 
something like that and you call the dismiss  
08:43 - function then the cheat will be dismissed or your 
navigation link will be deactivated on mac os the  
08:49 - dismiss function will close a window so let's add 
a second button let's call it close current window
09:01 - and let's just call it this miss function 
in here okay let's run this again
09:10 - okay this is another thing that you might want to 
remember oftentimes not always mac os remembers  
09:16 - which windows of your app were open before and 
then they will get restored when the app restarts  
09:22 - now this doesn't always work as of my experience 
so if you want to open specific windows you will  
09:27 - have to do that via code which you have just 
learned how it works now let's hit the close  
09:32 - current window button and then you will see that 
detail window was closed we can open it again  
09:38 - via our open detail window button and close it 
again via our close current window button after  
09:45 - this third lesson you now know how to set up 
different windows using deep links to open new  
09:51 - windows and also how to close them again using 
the dismiss function in the swift ui environment