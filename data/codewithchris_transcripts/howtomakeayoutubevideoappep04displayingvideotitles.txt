00:05 - hey coders what's up this is Chris and
00:08 - I'm here with episode 4 of how to make a
00:11 - YouTube video app in this lesson we're
00:13 - going to display the videos in the
00:16 - scrollable list or the table view uh and
00:19 - we're just going to display the titles
00:21 - in this lesson because there's a lot to
00:23 - explain about how the table view gets
00:25 - its data from The View controller so
00:27 - just to do a quick recap before we start
00:30 - in the previous lesson we had created
00:34 - all of our video data in the video model
00:36 - so if you take a look at this method
00:38 - called get videos in the video model we
00:41 - had created Five video objects each of
00:44 - them has a video ID a title and a
00:47 - description so we're going to be
00:49 - displaying these titles right here in
00:52 - the table View and then furthermore in
00:54 - the view controller we create an
00:57 - instance of the video model class and we
01:00 - call the get videos it returns us those
01:03 - five video objects in an array and then
01:05 - we assign it to self. videos here uh
01:08 - which is a property of our view
01:09 - controller okay so how does that data
01:12 - how do how do the titles of those videos
01:14 - get shown on the table view that we
01:18 - added to our storyboard well take a look
01:21 - at this slide that I prepared right here
01:23 - it's actually the table view that asks
01:26 - the view controller for the data so for
01:28 - instance right here you can see in the
01:30 - diagram that it says table view asks the
01:33 - view controller how many rows of data
01:35 - are there but how does the table view
01:38 - object actually know about the view
01:40 - controller it's not enough that the
01:42 - table view is an element in the view
01:44 - controller's view so if we go back to
01:47 - the viewcontroller.swift here what we
01:49 - need to do is
01:52 - assign The View controller as the table
01:55 - views data source so you can read here
01:58 - the object that acts as the data source
02:00 - of the table view so I'm going to just
02:04 - assign it to self which is referring to
02:07 - the view controller there's
02:11 - another thing that I can set for the
02:13 - table view called the delegate and I'm
02:15 - also going to set that to self I'm going
02:17 - to show you what these mean in a second
02:19 - so what I've done here is I've assigned
02:21 - The View controller to the data source
02:24 - property as well as to the delegate
02:26 - property of the table view so now take a
02:28 - look at this diagram the table view
02:30 - doesn't actually know about the view
02:32 - controller and it doesn't need to all it
02:34 - cares for is it's going to ask its data
02:37 - source how many rows are there uh and
02:40 - we've set the data source to be the view
02:42 - controller okay so now that that mystery
02:44 - is solved how does the table view know
02:47 - what method to call on this data source
02:51 - as you can see right here in the view
02:52 - controller we don't have any methods so
02:54 - the next step to this puzzle is what's
02:56 - called protocol you can see here that
02:58 - xcode is complain complaining about some
03:00 - error cannot assign value of type view
03:02 - controller to type UI table view data
03:05 - source so if I'm to set the view
03:08 - controller as the data source for the
03:09 - table view the view controller needs to
03:11 - follow a specific protocol which
03:14 - dictates what sorts of methods it needs
03:17 - to have in order to be a data source for
03:19 - the table view same thing goes for the
03:21 - delegate uh in order for me to set the
03:24 - view controller as the delegate of the
03:25 - table view the view controller needs to
03:28 - follow a certain protocol so that it has
03:32 - the necessary methods that the table
03:34 - view needs um and how we're going to do
03:36 - that is up here we're going to write
03:39 - comma and then we're going to type UI
03:42 - table view data source and comma UI
03:47 - table view delegate and what this says
03:50 - is that the view controller complies
03:53 - with the UI table view data source
03:56 - protocol as well as the UI table view
03:59 - delegate protocol and now xcode is also
04:02 - complaining because we don't have the
04:04 - required methods for these protocols
04:06 - written down here so let me start by
04:09 - declaring the methods which we need in
04:11 - order to comply with these two so what
04:14 - we're going to do is start typing table
04:16 - View and autocomplete should pop up this
04:19 - menu where you can select a whole bunch
04:21 - of methods uh it's going to start you
04:24 - off at the top but keep scrolling down
04:25 - to the N section so you'll see this one
04:28 - called number of rows and double click
04:30 - that and it's going to fill in that
04:32 - method for you so in this method you can
04:35 - see that um it says number of rows in
04:39 - section and the return value of this
04:42 - method is an integer so going back to
04:45 - the slide and asking the question again
04:47 - how does the table view know what method
04:49 - to call on its data source well that's
04:51 - easy because anything that's set as the
04:53 - data source for the table view needs to
04:55 - comply with uh the UI table view data
04:58 - source protocol which means that it has
05:00 - this method written here so this method
05:03 - is what the table view is going to call
05:05 - on its data source in order to uh get
05:07 - the number of rows so in here we're
05:10 - going to return
05:14 - videos. count because videos contains
05:18 - the video objects that we want to
05:19 - display in the list remember another
05:21 - protocol method that we need to
05:24 - establish or Implement here start by
05:27 - typing table View and you're going to
05:29 - get this autocomplete menu pop up again
05:32 - and scroll down to self a row at index
05:34 - path and double click that and you
05:37 - notice that this one returns a UI table
05:40 - view cell so the table view calls this
05:43 - method when it wants to display a cell
05:45 - in the scrollable list and what it's
05:48 - asking is give me a UI table view cell
05:52 - object to display to the user so what
05:54 - I'm going to do here is say let cell
05:58 - equals
05:59 - table view
06:02 - dot DQ reusable cell with
06:06 - identifier and right here we're going to
06:08 - pass in an
06:10 - identifier uh that the table view is
06:12 - going to try to get a cell for if we go
06:15 - back to the main. storyboard and look at
06:17 - our prototype cell did we give this guy
06:20 - a uh identifier let's take a look so in
06:23 - the document outline you can highlight
06:25 - table view cell here and here we we
06:28 - didn't actually put a reuse identifier
06:30 - for this prototype cell so we can do
06:33 - that now we can just call it a basic
06:35 - cell make sure uh you have to use this
06:38 - exact capitalization here I capitalized
06:41 - the B and the C so I'm going to copy
06:43 - that pressing command C going back to
06:45 - the viewcontroller.swift and I'm going
06:47 - to paste that here so this method DQ
06:50 - reusable cell with identifier is going
06:52 - to try and get a cell with this
06:54 - identifier here and since this method
06:58 - returns let me just just press here do
07:02 - DQ it returns a UI table view cell
07:05 - question mark which means that it's an
07:08 - optional type meaning that it could
07:10 - return nothing if it can't find a cell
07:13 - but if it can't find a cell to reuse
07:16 - it's going to create a brand new cell
07:18 - with that identifier so what we're going
07:20 - to do here is add a question mark to
07:23 - unwrap that optional type to get at the
07:25 - actual cell and we're going to assign it
07:27 - to this constant called cell now we have
07:30 - this constant cell which is referencing
07:33 - a UI table view cell object and we're
07:35 - going to end up returning this cell in
07:37 - fact we can write the statement here
07:39 - return cell just to satisfy that uh this
07:43 - return type here first um but in between
07:45 - here we want to customize that cell
07:48 - customize the cell to display the video
07:52 - title so this basic prototype cell
07:55 - actually has a text label property
07:58 - that's a UI label
08:00 - so we can press enter can press
08:04 - Dot and the UI label has a text property
08:07 - and we can assign it something like
08:11 - let's just put a string in here for
08:13 - now and let's press command R to run it
08:16 - and you're going to see a scrollable
08:18 - list of video
08:20 - title like that there's five of them
08:23 - because there's five video objects in
08:25 - our videos array and you can see we can
08:27 - scroll them like this nothing happens
08:29 - right now when you click it but we want
08:31 - to display the actual title of the video
08:34 - object so let's go back and so I
08:36 - mentioned that the table view is going
08:38 - to call this method for every single
08:40 - cell that it wants to display well how
08:42 - do we know which cell it's wanting to
08:44 - display that's where the index path
08:47 - variable or parameter comes in the index
08:49 - path parameter has a a row property
08:52 - which tells us which Row the table view
08:54 - is asking for so we're going to use that
08:58 - to pick out the video object from our
09:00 - array that we want to
09:02 - display so let's say let video title
09:05 - equals videos which is our video array
09:10 - um and we want to pass in an index I'm
09:12 - going to say index path. row so that
09:17 - gives us the video object and then I
09:19 - want to go dot video
09:21 - title uh and I'm assigning that string
09:24 - or that piece of text into this constant
09:26 - called video title and now I'm going to
09:30 - assign this guy into the text label here
09:34 - so I'm going to get rid of the string
09:35 - here and I'm going to put in that
09:38 - constant so now if I run it we should
09:41 - see our video
09:42 - titles so there you go we have our video
09:45 - titles and right now the text is just
09:47 - scrolling off of the label uh but we're
09:49 - going to make it wrap and we're going to
09:51 - add the image and we're going to
09:52 - customize the cell in the following
09:55 - lesson so I hope you are able to
09:57 - understand how the table view gets its
09:59 - data from its data source and I'll see
10:02 - you guys tomorrow at 12:00 p.m. Eastern
10:05 - talk to you later bye
10:10 - [Music]