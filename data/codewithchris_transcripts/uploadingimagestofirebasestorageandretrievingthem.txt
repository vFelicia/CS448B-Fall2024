00:00 - last week i showed you guys how to
00:02 - select photos from the user's photo
00:03 - library this week i'm going to show you
00:05 - how to upload those photos to firebase
00:07 - storage and also how to retrieve them
00:08 - for display
00:10 - now before we dive in just a quick
00:11 - reminder that we do have a code with
00:12 - chris ideas board where you can vote on
00:14 - topics you'd like to see or submit ideas
00:16 - of your own with that being said let's
00:18 - dive into today's topic
00:21 - alright so this project here was the
00:23 - project from last week's cwc screencast
00:27 - number 11
00:28 - which was to allow the user to select an
00:30 - image from the photo library and just in
00:34 - case you forgot how this looked like
00:37 - let me
00:38 - just quickly build this
00:40 - and show you
00:42 - so i'm going to go ahead and select a
00:43 - photo it's going to bring up the
00:46 - photo selector or photo picker from the
00:49 - user's photo library and i select one
00:51 - and it goes like this now what we're
00:52 - going to do now is add an upload button
00:55 - which is going to upload the selected
00:57 - image to firebase storage
00:59 - and then we can also take a look at
01:01 - retrieving it the first thing we have to
01:02 - do though is actually to connect this
01:05 - xcode project to a firebase instance so
01:08 - let's jump over to firebase
01:11 - console.firebase.google.com
01:14 - is where this is
01:15 - um if you haven't signed up for firebase
01:18 - before you just log in with your google
01:19 - account and you can create some free
01:21 - projects so let's create a brand new
01:23 - project here let's call it
01:27 - firebase
01:32 - demo
01:34 - i'm going to disable google analytics
01:37 - and then we wait
01:41 - so we're going to click on ios to set
01:43 - this up here we're going to grab our
01:46 - bundle identifier
01:48 - so that's this right here
01:50 - and paste in there now i'm going a bit
01:53 - fast because we've done this many times
01:56 - using firebase
01:58 - you can check out our
02:00 - databases course
02:01 - module
02:03 - 2 i believe for firebase
02:05 - if you want to
02:07 - get some detailed instructions on what
02:09 - it is and how we use it okay so i'm
02:11 - going to download this google service
02:12 - info p list and this is
02:15 - basically where
02:18 - it contains all of the configuration
02:20 - info to point to this firebase instance
02:22 - so i'm going to save it my project
02:24 - folder and then we are going to go ahead
02:26 - and drag it into this project
02:30 - do that here
02:32 - drag this in here we'll just put it
02:34 - right there copy items if needed
02:36 - make sure this is in that target we'll
02:38 - put it right there
02:40 - and then we are going to use a swift
02:43 - package manager to install the firebase
02:45 - sdk so you can follow these instructions
02:49 - or if you've done it before it should
02:50 - already be
02:51 - saved and i'll show you that so copy
02:53 - this url right here we're gonna do it
02:56 - via xcode
02:58 - but
02:59 - we're gonna go to file add packages if
03:01 - you've done this before you should
03:03 - already have this recently used if not
03:06 - you can go ahead and paste that url in
03:08 - there but
03:09 - oh it disappeared
03:11 - i recently used there okay so i'm just
03:13 - gonna choose the one from the recently
03:15 - used menu and then we can await
03:19 - and we are going to add both the
03:22 - firestore database package as well as
03:24 - the
03:27 - firebase storage libraries because one
03:30 - of it the storage is for uploading the
03:32 - files
03:33 - the database part is
03:35 - creating a reference to that file
03:38 - because it's not enough to just you know
03:39 - upload it somewhere you have to keep
03:41 - track of it in your database so that
03:43 - when you want to retrieve it you you
03:46 - have a reference to where it's located
03:48 - in your storage
03:50 - all right so it looks like this is still
03:51 - taking a little while
03:53 - okay so here we are
03:55 - let's take a look at
03:58 - i want firestore
04:01 - and i also want
04:03 - storage so i'm going to add these two
04:06 - now
04:07 - i'm i'm going to first start with
04:10 - showing you how to upload the selected
04:12 - file to firebase storage and this is the
04:15 - documentation you'll find a link to this
04:17 - down below
04:18 - in the
04:20 - uh we haven't gone through the wizard
04:22 - yet okay so
04:23 - we've installed the packages so let's go
04:26 - ahead and click next
04:27 - and we're going to need to import
04:29 - firebase and then we're going to need to
04:32 - run this line of code firebase
04:33 - app.configure so i'll copy this one
04:36 - right here we're going to go back i'm
04:38 - going to go into the app entry point
04:39 - right here
04:40 - and we're just going to create an in
04:43 - knit method in here
04:45 - and that's we're going to run that line
04:46 - of code
04:47 - we're also going to have to import
04:50 - firebase right up there
04:52 - so
04:52 - hit command b to build this project make
04:54 - sure that it builds with all of the new
04:57 - packages that it just added we can go
04:59 - ahead and click next and continue to
05:02 - console now here we're going to have to
05:04 - set up both our firestore database and
05:06 - our storage
05:08 - let's set up storage first since i'm
05:11 - going to show you how to upload files
05:12 - first
05:13 - so get started now by default
05:16 - it has a rule that says you won't be
05:19 - able to write data
05:20 - and read data unless you are
05:22 - authenticated because typically if you
05:25 - are going to allow people to you know
05:28 - store files on your storage
05:30 - you're probably going to pair this with
05:32 - some sort of authentication so
05:35 - we typically use firebase authentication
05:37 - here and we've shown how to do that in
05:39 - our databases course as well so you can
05:41 - go ahead and learn how to do that there
05:43 - for this demo i am going to change this
05:46 - rule to just allow public reading and
05:48 - writing but that's definitely not what
05:50 - you want to do
05:52 - when you actually create an app
05:54 - so
05:55 - we are going to do that and the reason
05:57 - for making it public is just so i can
05:59 - show you the code
06:01 - for what it would take to
06:03 - to upload a file and download a file if
06:05 - you want to see
06:07 - uh an example of authentication with
06:10 - firebase storage
06:12 - with firestore database then our
06:15 - chat app swift ui chat app would be
06:18 - a good thing to take a look at because
06:20 - it has all of those elements working in
06:22 - tandem and that course is coming out if
06:24 - it hasn't already at the time of this
06:26 - recording it's coming out in this month
06:28 - so if you're watching this in the future
06:30 - it should be available
06:32 - all right so firebase storage you're
06:33 - going to go into your rules
06:35 - and you're just going to change this
06:38 - to if
06:39 - true it's saying like
06:41 - see allow reads and writes if
06:44 - the authentication is not null
06:46 - which means that the user is logged in
06:48 - so i'm going to erase this and just say
06:50 - if is true if true so that means this is
06:53 - always going to be true so anybody can
06:55 - read and write so i'm going to publish
06:56 - this
06:57 - it
06:59 - didn't give me any warnings usually
07:01 - it'll give you some warnings
07:03 - and then in here you can organize this
07:05 - is basically your storage bucket
07:07 - and you can add new folders here
07:10 - so for example since we're storing
07:12 - images i might create an images folder
07:16 - and then when you when you'll see in the
07:18 - code when we upload files you can
07:20 - specify which paths which folders you
07:23 - want to upload uh
07:25 - that data
07:26 - okay so now that we have initialized our
07:28 - storage let's go back here
07:30 - and
07:31 - we are going to go into the content view
07:34 - okay so now we can start implementing
07:36 - the code to actually upload the file so
07:39 - what i'm going to do is add an extra
07:41 - button down here
07:43 - in this v stack
07:45 - it's going to be the upload button
07:47 - and this button will only show up if
07:50 - the image has been selected
07:54 - so if selected image is not male
07:56 - then we are going to show a button
08:00 - this is going to be upload the image
08:05 - and this is going to just be a text that
08:08 - says
08:09 - upload
08:11 - photo
08:15 - what i'm going to do is not implement
08:17 - the code right here i'm going to create
08:18 - a separate function
08:21 - within this
08:22 - contentview struct and we're just going
08:23 - to call that
08:24 - call that method so we'll call that
08:28 - upload photo
08:31 - and we are going to declare that right
08:38 - here and then we are going to
08:42 - first of all let's take a look at the
08:43 - documentation see what the steps are
08:47 - okay so if we take a look at this
08:49 - documentation first you have to create a
08:52 - reference and you can do that by
08:55 - importing
08:57 - it doesn't show the import statement
08:58 - here but you have to import the storage
09:00 - firebase storage framework and then you
09:02 - can get a reference to
09:05 - this
09:06 - storage service
09:09 - um
09:10 - but ultimately it's storage dot storage
09:13 - dot reference
09:16 - and then following that
09:18 - this is where you can specify any
09:20 - folders that you want so this is in this
09:23 - example you know you
09:25 - you can specify the images folders where
09:27 - you want to upload it
09:28 - uh if you want to specify a specific
09:30 - file name which you should
09:33 - um you do slash and then whatever the
09:35 - name is dot
09:36 - the file extension
09:39 - we actually go into the section for
09:41 - uploading files
09:43 - this will be a little more complete so
09:45 - right here these are two different ways
09:48 - that you can upload your files so you
09:50 - can either upload it directly to the
09:52 - root of your storage so all your files
09:55 - are just gonna sit here in the root
09:58 - or you can
09:59 - put it into a directory like this
10:02 - while these two the file names like if
10:05 - you use the name property and you ask
10:07 - what the the file name is
10:09 - they're both mountains
10:11 - right but the full path
10:13 - these two are not equal right because
10:15 - this is going to be uploaded to the root
10:17 - this is going to be uploaded to images
10:19 - slash mountains and then to actually
10:22 - upload the file
10:24 - there are
10:25 - there's a distinction between uploading
10:27 - the data from memory which is actually
10:29 - our situation where we have the selected
10:32 - ui image so we're going to turn that
10:33 - into data and then upload it as a file
10:36 - or if you want to upload an actual file
10:38 - you know on your device or
10:42 - you know stored in the storage of your
10:43 - app or something like that so we're
10:45 - going to actually be taking a look at
10:46 - this upload from data in memory
10:48 - so here they're showing a piece of data
10:50 - for us we're going to be turning the ui
10:52 - image into data
10:53 - and then
10:54 - the this is the reference to the storage
10:58 - that i showed you earlier storage dot
11:00 - storage dot reference and then here it's
11:02 - specifying the folder and the file name
11:05 - we're probably going to generate a
11:06 - unique
11:08 - id
11:09 - to keep all the file names unique
11:11 - and then you use that reference here and
11:14 - you use put data to basically upload
11:17 - that data
11:18 - now you are going to be able to
11:20 - specify two parameters with the upload
11:22 - data so the actual data you're going to
11:24 - upload and any metadata associated with
11:27 - that file so
11:29 - in this example they use nil
11:31 - but if you scroll a little further down
11:33 - there is a section that shows you where
11:35 - you can add any metadata you want to
11:38 - associate with the file
11:40 - so for example the store the content
11:42 - type this is what they use here
11:45 - uh it is optional though so you see that
11:48 - they're specifying nil here
11:50 - and then there's also a closure
11:53 - for
11:53 - when the upload has completed and the
11:56 - response has come back and there's two
11:58 - parameters one is error that's pretty
12:00 - self-explanatory so was there an error
12:02 - during the upload but this parameter
12:04 - metadata now if it was a successful
12:07 - upload then this metadata will contain
12:10 - something it's it's not going to be nil
12:13 - however if there was a problem like
12:15 - storing the file then this would
12:16 - actually be nil and you'd probably find
12:18 - the error in this parameter so you can
12:20 - see here in this code that they are
12:22 - checking
12:23 - that the metadata is not nil otherwise
12:26 - an error has occurred
12:28 - and then here you can see that
12:30 - they can access different
12:33 - attributes of the metadata that gets
12:35 - returned so you can check the size and
12:37 - the content type and things like that
12:40 - and then here
12:41 - in order to get a download url after
12:43 - it's been uploaded you can access the
12:45 - download url property
12:47 - so let's go put this into practice
12:50 - and try this out
12:53 - we are going to implement our upload
12:55 - photo method
12:57 - in here so
12:58 - just to walk through the steps let's
13:00 - write it out first
13:02 - create storage reference
13:05 - turn
13:06 - our image into data
13:09 - and we are going to
13:12 - upload
13:13 - that data and then ultimately
13:16 - we also want to
13:18 - save a reference to that file in
13:21 - firestore database all right
13:30 - okay so
13:32 - first of all let's import firebase
13:34 - storage up here
13:38 - okay next let's go down here
13:40 - and let's create let's storage
13:44 - ref equals
13:46 - storage oops storage dot storage
13:51 - dot reference
13:53 - and then
13:55 - we are also going to want to
13:58 - i missed the step here specify the
14:00 - file path and name
14:04 - but even before we do that we should
14:06 - probably
14:07 - check if we can turn our image into data
14:09 - first because there may be an issue with
14:12 - that so let
14:13 - image data equals our
14:17 - selected image and we're going to force
14:20 - unwrap that
14:22 - dot
14:24 - jpeg data so you can either turn it into
14:26 - a png data or jpeg data but
14:29 - check this out
14:30 - this could return nil right if it's not
14:33 - successful in returning jpeg data then
14:36 - this will be nil and then in that case
14:37 - we can't upload anything
14:39 - so i'm going to get the jpeg data and
14:42 - i'm just going to set the compression
14:43 - quality to 0.8
14:45 - now in order to run this
14:48 - function we should
14:50 - you know we've tested that selected
14:51 - image is not nil
14:53 - before they can even see this button and
14:55 - tap on it that accesses this method here
14:58 - but just to be safe we could still
15:01 - uh make sure
15:03 - that the selected
15:05 - image property
15:07 - isn't nil so guard
15:10 - selected image not nil else
15:15 - return because there's nothing to upload
15:17 - in that case right
15:19 - same thing goes for this if we're not
15:21 - able to turn this image into the data
15:23 - then there's no point so
15:25 - again
15:27 - just to reduce the number of
15:30 - nested if statements i'm going to use a
15:32 - guard statement here
15:34 - if
15:35 - guard image data
15:38 - not nil else return
15:42 - uh
15:43 - and then here we're going to specify the
15:45 - file path and in the name so let
15:48 - file reference equals
15:53 - storage reference dot child
15:56 - and the path is going to be images so
16:00 - this folder currently doesn't exist here
16:02 - but it's going to automatically create
16:04 - it
16:05 - if it doesn't exist
16:07 - if we if we specify that folder here
16:10 - and then for the file name i am going to
16:12 - substitute
16:13 - um a random uuid
16:18 - dot jpeg
16:19 - so this uuid we can create like this
16:23 - get a uuid string
16:26 - and you'll see what that looks like in a
16:28 - second
16:29 - and then here we do
16:31 - let upload task equals fileref
16:35 - dot put data so there are a couple
16:37 - different ones here right
16:40 - uh we probably want one with completion
16:43 - so this one so there's the data that we
16:45 - upload there's any metadata that we want
16:48 - to store remember in the sample code
16:50 - they put nil and then the completion for
16:54 - when it's finished uploading and then we
16:55 - can check if it was actually successful
16:57 - and ultimately we do want
17:00 - the completion because we want to store
17:03 - a reference in firebase
17:05 - firestore database if it was successful
17:08 - okay so let's put the data in there
17:11 - image data and i'm going to force unwrap
17:13 - it because we've guarded that it's not
17:15 - nil
17:23 - okay and for metadata i'm going to put
17:25 - nil and for completion i'm going to
17:27 - double click this to open it up
17:29 - and these are both optional remember
17:31 - that if there's an error
17:33 - that means there will be something in
17:34 - here
17:36 - if
17:37 - it was successful that means there will
17:39 - be something in here so
17:42 - this let's give these two parameters
17:44 - some names metadata and
17:47 - error
17:48 - so what we want to check for
17:52 - so we want we want error to be nil
17:56 - right and metadata to not be nil
18:01 - and that that signifies to us that it's
18:03 - a successful download and then in that
18:05 - case
18:06 - we will save a reference to firestore
18:08 - database now i'm going to put this as a
18:10 - to do for now because this is enough for
18:12 - us to start uploading an image and
18:15 - seeing what that looks like
18:16 - so let's go ahead and try it out i'm
18:18 - going to run this
18:20 - and then
18:20 - we're just going to make sure that we
18:22 - can run this code and we can see some
18:24 - files in here
18:26 - so let's go ahead and do that
18:29 - our simulator is launching okay there we
18:31 - go so select a photo
18:34 - let's go ahead and select this one i'm
18:36 - going to choose upload photo
18:38 - and
18:40 - i should have added some breakpoints is
18:41 - there an error
18:43 - let's see
18:44 - let's go here let's refresh
18:47 - ah there we go this this folder images
18:50 - and then inside we have the uuid dot
18:53 - jpeg
18:55 - all right and it's two megabytes
18:57 - we take a look at this
18:59 - all right that's great
19:00 - so that is basically how you upload
19:04 - images to firebase storage
19:07 - let's go over to our firebase console
19:09 - again and this time we are going to
19:11 - set up our firestore database create
19:13 - database start in test mode it's going
19:15 - to let anybody
19:17 - uh write to it
19:18 - it's going to expire
19:20 - on that date
19:22 - automatically okay so i am going to just
19:25 - start a new collection i'll just call it
19:27 - images and then here i'm just going to
19:30 - set up
19:31 - a sample document with a field
19:34 - and ultimately i want
19:36 - this
19:37 - value
19:38 - to be the path of my image in storage
19:42 - okay so whatever that path may be uh
19:45 - probably images dot whatever uuid.jpg
19:48 - that that's ultimately what i want so
19:50 - um
19:52 - you know in the um
19:55 - in an actual app you'll probably
19:56 - associate an upload with a particular
19:59 - user in this case
20:01 - i am just going to store all of the
20:03 - images in a collection and fetch all of
20:05 - them so you get you know you get a sense
20:08 - of how you upload files how you
20:10 - save a reference in the database
20:12 - pointing to the file and then how you
20:15 - then retrieve that and grab the
20:17 - associated file for display
20:20 - okay so here
20:22 - we are going to implement this to do
20:24 - we're first going to have to import
20:28 - since we're using the
20:29 - the database now import firestore and
20:32 - then down here we're just gonna do a
20:34 - simple save statement
20:36 - uh let db equals firestore
20:40 - dot firestore
20:42 - db dot collection equal
20:45 - images
20:46 - and then we are going to call document
20:49 - and this is going to generate a new
20:51 - uh
20:53 - let's just
20:54 - start this images collection
20:56 - do i have to put in
20:58 - i don't want to add a first document all
21:00 - right whatever i'm gonna start this
21:02 - collection and i will delete this
21:04 - document because
21:11 - okay so
21:13 - using this
21:14 - document method will basically generate
21:17 - a new document with a random document id
21:20 - and then following this i'm going to
21:22 - call the set data method where we can
21:24 - pass in
21:26 - a dictionary
21:27 - and
21:28 - the value sorry the
21:30 - label is going to be url and the value
21:32 - for this is going to be this file path
21:35 - right because this points to that that
21:37 - image so i'm going to
21:42 - create another
21:46 - constant just put that here
21:50 - and that way i can reference this path
21:52 - in here
21:55 - okay so let's upload another image and
21:57 - take a look if this
21:59 - is doing what we want
22:01 - select a photo let's choose
22:04 - let's choose this one this time let's
22:06 - upload the photo
22:08 - actually open another tab oh do you see
22:10 - that document so it's pointing to images
22:13 - and then you know this random string
22:16 - open the storage in another tab
22:20 - and you can see that that this is the
22:22 - image that we just uploaded
22:24 - so i'm going to go ahead and delete this
22:25 - one because we didn't keep track of that
22:27 - on the database side
22:29 - right so now
22:31 - you can see what we're doing right we're
22:32 - uploading a file into storage and then
22:35 - we are writing a database entry to point
22:38 - to that file
22:39 - so the next step would be to retrieve
22:42 - this
22:43 - data from the database
22:45 - and then
22:47 - retrieve the file for display
22:49 - so let's go over back to xcode here and
22:52 - we are going to close this upload method
22:56 - and we're going to create a different
22:57 - one called
22:59 - retrieve photos
23:01 - and this is going to be
23:03 - uh let's see get the
23:06 - data from the database
23:09 - and then
23:11 - get the image data
23:13 - for each
23:17 - in storage
23:19 - for each image
23:21 - reference
23:24 - and then uh display the images
23:28 - okay so what we're going to do like
23:29 - where we're going to display it is
23:31 - actually
23:33 - right below the upload button in this v
23:36 - stack here so we are going to create a
23:38 - divider
23:40 - and then
23:42 - let's just use an h stack
23:44 - and then we are going to basically loop
23:46 - through
23:47 - a collection of retrieved images and
23:49 - display it
23:51 - so i am going to create up here
23:54 - at state bar
23:56 - let's just call the these retrieved
24:00 - images
24:01 - ui
24:02 - image uh well no this would be
24:07 - a ui image like that a collection an
24:10 - array of ui images and we are going to
24:13 - you know when we call this method
24:15 - retrieve photos we are going to oops
24:19 - we are going to retrieve the images
24:21 - uh from storage and then we are going to
24:23 - put it into this array and then
24:26 - this ui code will automatically update
24:29 - so lets say for each
24:31 - for each photo inside retrieved images
24:36 - id
24:39 - self
24:42 - image in
24:45 - and we're going to
24:47 - use an image element
24:49 - that i use you pass it in as a ui image
24:52 - and then let's make these resizable
24:56 - and set it to 200 by 200.
25:00 - get rid of the alignment and we can take
25:02 - a look at what that looks like
25:11 - okay so this is how it's going to get
25:12 - displayed in the the ui
25:15 - and then down here let's go ahead and
25:17 - retrieve it so let db
25:19 - equals
25:20 - firestore
25:23 - firestore
25:26 - db dot
25:30 - images dot
25:32 - get
25:33 - documents
25:36 - all right and sorry that i'm going a
25:37 - little bit fast here because
25:40 - the point of this isn't to show you how
25:42 - to work with firebase so if if this is
25:45 - all new to you i recommend um going
25:47 - through the fire
25:49 - sorry database course uh module two the
25:51 - firebase stuff
25:53 - so
25:54 - the two parameters we get back are
25:56 - snapshot which contains the results of
25:59 - getting all the documents in this images
26:01 - collection right it's going to grab all
26:02 - of this stuff
26:04 - and error
26:06 - tells us any potential errors so what we
26:07 - want to do is if error is nil
26:11 - and snapshot is not nil
26:14 - then we have something to work with so
26:18 - the actual documents
26:20 - that are inside sorry the actual
26:22 - documents that are retrieved
26:24 - are in snapshot
26:28 - dot documents so it contains all of
26:30 - all of the individual documents that
26:32 - have been retrieved so we're going to
26:33 - say for
26:35 - document
26:36 - in snapshot and we can force unwrap that
26:39 - because we check that it's not nil so
26:41 - for document in documents
26:44 - what we're going to do is
26:47 - uh
26:48 - extract the
26:51 - file path
26:55 - we're going to actually create an array
26:57 - here
26:58 - to keep track of all the file paths
27:00 - so var
27:05 - uh this is actually it's just a string
27:07 - array
27:09 - so in the dock we are going to fetch see
27:12 - in each document we're going to fetch
27:14 - that key right url and that's going to
27:15 - return that value for us
27:19 - we know it's a string
27:21 - right so we're going to append it to
27:24 - paths dot append
27:32 - okay next
27:37 - loop through all the
27:41 - returned docs
27:43 - and then here we are going to loop
27:46 - through
27:46 - each file path
27:49 - and fetch the data from storage
27:52 - uh that's actually this
27:54 - all right
27:56 - so let's take a look at how we do this
27:58 - let's write the for loop first so for
28:00 - path in paths
28:03 - we are going to
28:04 - fetch it if we take a look at the
28:06 - documentation we can go to the next
28:08 - section download files
28:11 - and again we create a reference which we
28:14 - we have and then so here's
28:17 - the storage reference.child and then the
28:20 - path and then you you instead of put
28:22 - data you write get data you specify the
28:25 - maximum allowed file size that you want
28:27 - to retrieve so this is actually one
28:29 - megabyte because this is expressed in
28:32 - bytes
28:33 - yeah that's right
28:34 - and then you get back the data
28:36 - and
28:37 - a parameter to specify if any errors
28:39 - occurred so if the error is
28:41 - empty
28:43 - then then you're good if it contains
28:46 - something then an error has occurred so
28:48 - then you just grab your data and you
28:50 - create a new ui image
28:52 - using the data initializer and you pass
28:54 - it the data that it retrieved from
28:56 - storage and that's that's how we're
28:58 - going to display the image that was
29:00 - retrieved so let's try this out
29:04 - we are going to say
29:06 - get a reference
29:08 - to
29:10 - storage um
29:14 - specify the path
29:16 - retrieve the data
29:19 - okay so
29:20 - let
29:22 - storage reference equals storage dot
29:25 - storage dot reference
29:28 - let
29:29 - file reference equals storage reference
29:33 - dot
29:34 - child and the path
29:37 - is
29:39 - you know is what we retrieved from
29:41 - firestore
29:42 - it's like it's that
29:46 - okay so we put all of that into this
29:49 - paths
29:50 - array all right and now we're looping
29:52 - through each of those paths
29:54 - and we're specifying that we want to
29:57 - to grab that
29:58 - and specify the path
30:01 - and then in here we're going to retrieve
30:03 - the data
30:04 - so it's going to be file ref dot get
30:07 - data
30:08 - right with max size so
30:11 - i'm going to say
30:12 - i'm just going to say
30:14 - 5 megabytes
30:16 - completion you see the two parameters
30:19 - data and error let's double click this
30:20 - to open up the closure data
30:25 - error
30:27 - and then we're going to say
30:29 - check
30:30 - for errors
30:31 - if error
30:33 - is nil that means there's no errors and
30:36 - we can then
30:38 - create
30:39 - a ui image and put it into
30:43 - our array for display
30:46 - so
30:47 - let image equals ui image
30:50 - data
30:52 - actually let's let's also check that the
30:54 - data is not no if there's no errors and
30:57 - data is
30:58 - not nil
31:00 - right then here we can just pass in and
31:02 - unwrap that and then we are going to add
31:06 - this image
31:07 - to
31:09 - retrieved images
31:11 - uh
31:12 - to display
31:15 - so we are going to say
31:20 - retrievedimages.append and we're going
31:22 - to pass in that image but
31:24 - when you do this it's going to trigger
31:26 - the view code to
31:29 - to recalculate and then it's going to
31:31 - display the images but since this is
31:33 - causing the ui to update we need to
31:36 - pass it over to the main thread to do
31:38 - because you don't want to do this from a
31:40 - background thread which is where this
31:43 - this code is happening right now so
31:46 - we're going to do that
31:48 - let's see
31:52 - oh there's a possibility that
31:56 - at this initializer
31:59 - uh returns nil
32:02 - all right so in that case if that is the
32:05 - case we wouldn't want to do it let's
32:07 - let's use optional binding here if let
32:10 - image equals that
32:11 - and if we
32:12 - we were able to create an image
32:15 - that's when we would add it in here
32:18 - all right so i mean there this is quite
32:20 - a bit of nesting so it's kind of hard to
32:22 - read
32:24 - you can to ease some of this i mean this
32:27 - is why async and await was created
32:31 - file path
32:32 - is this one here
32:35 - and
32:49 - yeah okay
32:51 - so what we're going to do now
32:53 - is test this out but first of all we
32:56 - gotta figure out where we're gonna call
32:57 - retrieve photos
32:59 - um there are two spots which i can think
33:00 - of one is when
33:03 - this view appears because we wanna take
33:06 - a look at the photos so
33:08 - when this v stack shows up we are going
33:11 - to say on appear perform
33:14 - retrieve images
33:16 - the other place we'll want to call this
33:18 - is
33:19 - after
33:21 - after
33:22 - we have just uploaded an image right and
33:25 - saved the reference
33:27 - so
33:28 - i am actually going to use a different
33:30 - set data method
33:32 - i'm going to use one with a completion
33:36 - this one right here so this one allows
33:38 - me to pass the same data to upload or to
33:43 - save but it also has a completion block
33:47 - i'm going to open up this closure
33:49 - and just do
33:50 - error here
33:53 - so
33:54 - if there were no errors
33:57 - display a new
33:59 - image
34:00 - so this is going to be
34:02 - let's see
34:04 - if error is nil
34:07 - then
34:08 - call retrieve images
34:11 - uh keep in mind though
34:14 - that
34:15 - you know i just thought of a better way
34:17 - to do this um
34:20 - you know
34:20 - if you wanted to do this
34:22 - you should throw it over to the main
34:24 - thread to do because it does update the
34:26 - ui
34:26 - but i just thought of a better way like
34:30 - there's no reason why
34:33 - we need to retrieve the images over
34:36 - again
34:38 - that doesn't really seem to make sense
34:40 - to me
34:41 - right here
34:46 - oh sorry not retrieve images uh retrieve
34:49 - images
34:50 - um the reason why
34:52 - is
34:53 - after we've uploaded this single image
34:55 - right why not just
34:57 - add that selected image because we
34:59 - already have it as a ui image right
35:01 - selected image is the ui image this is
35:03 - the photo we just uploaded to storage
35:07 - successfully because we know it's
35:08 - successful at this point why not just
35:11 - append that
35:12 - to our retrieved images and that saves
35:16 - some bandwidth that saves us having to
35:19 - you know
35:20 - run this code all over again so let's
35:22 - just say
35:24 - uh if error is nil
35:27 - that means there are no errors
35:29 - add the uploaded
35:31 - image
35:33 - to the list of images
35:35 - for display
35:37 - so self.retrievedimages.append
35:42 - self.selected image and we can force
35:44 - unwrap that because we just
35:46 - we just did that and again this is going
35:48 - to be affecting the
35:51 - uh the ui so we want to do this in the
35:55 - in the main thread because the main
35:56 - thread is responsible for updating the
35:58 - ui
36:00 - all right so let's try this out uh if i
36:03 - run this now
36:05 - supposing there are no errors oops
36:06 - something's wrong
36:09 - i cannot call
36:11 - ah
36:13 - that
36:13 - what did i call it retrieve
36:15 - photos whoops
36:20 - retrieve photos there we go
36:25 - in storage right now well in our
36:27 - database we have a reference to a single
36:29 - image and in storage we have a single
36:31 - image so
36:32 - hopefully when we launch it we'll see
36:34 - that
36:36 - okay we do perfect
36:38 - that is that's really big though let's
36:40 - make that a little smaller
36:42 - let's make that 100 and 100 and run that
36:45 - again so this time we can actually see
36:47 - it
36:48 - and then we'll upload a couple more
36:50 - and we should see it up here all right
36:52 - so there's the photo that
36:55 - we have in our database let's choose
36:57 - that
36:58 - upload it
37:02 - ah cool just to double check
37:05 - there's the second file
37:08 - and there's also another entry here
37:11 - let's select another photo
37:15 - let's upload that
37:20 - all right i hope that was helpful
37:22 - if you have any specific questions about
37:24 - this tutorial do post it in our code
37:25 - crew forum and myself or someone from
37:27 - the team will jump in to help out thanks
37:29 - for watching and i'll see you in the
37:30 - next lesson