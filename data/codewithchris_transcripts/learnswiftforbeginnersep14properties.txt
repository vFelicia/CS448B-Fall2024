00:00 - hello welcome to lesson 14 of the
00:03 - learned Swift for beginners series in
00:05 - this video you're going to learn our
00:06 - properties which is something that we
00:08 - have been using already together since
00:10 - the class's lesson but we haven't
00:13 - formally introduced them yet so this
00:16 - video is for that in addition to that
00:18 - I'm going to show you some other cool
00:20 - things you can do with properties that
00:22 - you can't do with variables okay so
00:25 - let's get started so here I have a
00:31 - playground which defines two classes
00:33 - blog post and person you might recognize
00:36 - this from previous lessons and in both
00:40 - of these classes we've defined some
00:42 - variables here well properties are
00:44 - nothing more than variables that are
00:47 - associated with a class like this so for
00:51 - example in this blog post class I have a
00:55 - title property body author and number of
00:57 - comments and if I create a brand new
01:00 - blog post object from this class so
01:03 - let's say let my post equals new blog
01:08 - post like that and then in order to
01:11 - access this title property I would use a
01:15 - dot notation I would say my post dot
01:19 - title and I'm going to assign something
01:22 - to this property and let's just call it
01:24 - title of post like that and in order to
01:28 - retreat that value from that property I
01:31 - would just use dot notation again and
01:35 - this would return the value inside that
01:39 - property so you can see that property is
01:43 - just like a variable where it stores a
01:45 - value and you can retrieve it
01:47 - but I don't know if I mentioned this
01:48 - before and that is that properties are
01:52 - independent between objects so remember
01:55 - we have defined this blog post class
01:58 - right here and from this class we can
02:01 - create many blog post objects for
02:04 - instance here I've created a blog post
02:06 - object and I've assigned it to my post
02:09 - now let me create a second blog post
02:11 - object
02:12 - I'm going to call this my post - and I'm
02:17 - going to create a brand new blog post
02:19 - object from there so I have assigned
02:22 - title of post to the title property of
02:25 - this guy right here right that doesn't
02:30 - affect my new blog post object so I can
02:34 - assign my post to title equals another
02:39 - title like that and if I display this
02:44 - title you can see that it shows another
02:48 - title so the properties are really
02:51 - variables that are attached to the blog
02:54 - post objects that I create and although
02:57 - each blog post object has a title
02:59 - property the values that they store are
03:02 - independent of one another okay so the
03:05 - second thing I wanted to point out with
03:07 - properties is that when you're working
03:09 - inside your class so let's say we're
03:12 - working on this blog post class and we
03:14 - create some functions here let's say add
03:18 - comment and we're going to create a
03:21 - function like that and we're going to
03:25 - create another function maybe called
03:27 - share share article okay these don't
03:33 - really have to do anything I'm just I
03:35 - just need to create two functions for
03:37 - the sake of creating two functions to
03:39 - demonstrate this purpose okay so just
03:42 - disregard what what I'm calling them
03:44 - because they're not really going to do
03:46 - that function okay so what I wanted to
03:49 - point out is that these properties that
03:52 - you define inside the class they can be
03:55 - accessed inside any of the functions
03:58 - inside that class so inside add comment
04:01 - you know I might be performing some code
04:04 - to add a comment and I would be able to
04:07 - access let's say you know I can print
04:12 - title or something like that right that
04:16 - would access this guy well actually
04:17 - that's an optional so using what we
04:20 - learned
04:21 - let me just force and wrap it
04:24 - but my point is is that I can access
04:28 - these properties here you know or I can
04:30 - print let's say body for example you
04:35 - know and here likewise I can also print
04:38 - body and within all the functions inside
04:42 - this class I can access any of these
04:45 - properties up here and I can set them to
04:47 - from within any of these functions
04:49 - however if you declare a variable inside
04:53 - of a function that is what's called a
04:56 - local variable and the existence of that
04:59 - variable is limited to the scope of that
05:02 - function so what that means in plain
05:04 - English is if I declare a variable here
05:07 - let's say var my comment equals you know
05:14 - some comment like that I would not be
05:19 - able to access this variable inside this
05:22 - function here so if I try to you know
05:25 - print my comment you're going to see it
05:31 - throw an error here saying that my
05:36 - comment was never used
05:38 - oh wait that's regarding this guy right
05:40 - here so this is just an optimization
05:43 - Xcode this yellow little triangle means
05:45 - that it's a warning it's not really an
05:48 - error so it's fine Xcode is just warning
05:51 - you that you declared this my comment
05:53 - variable and you'll find it something
05:54 - but you never use it
05:56 - so consider consider changing its name
05:59 - to an underscore which which is an
06:05 - optimization but we are going to use it
06:08 - so Xcode is just proactive because every
06:10 - time you're typing code it just scans
06:12 - your code and it tries to tell you about
06:14 - these optimizations that you can do okay
06:16 - so that's kind of a side note back to
06:19 - the main point I was trying to make and
06:21 - that is if you look at this error here
06:23 - on use of unresolved identifiers my
06:27 - comment that means that Xcode doesn't
06:29 - know what you're referring to when you
06:31 - try to print my comment here so even
06:33 - though we declared it here and we
06:35 - assigned it inside this
06:37 - function this variable because you
06:40 - declare the inside here is the scope of
06:43 - this variable or its existence is
06:46 - limited to whatever is inside these two
06:50 - curly brackets
06:50 - you know it's limited to the code inside
06:53 - this function if I wanted it to be
06:56 - accessible everywhere you know I would
06:58 - create a property and I would use that
07:02 - instead so that's probably something
07:04 - you're going to get used to as you're
07:06 - doing more coding is the scope of where
07:09 - you declare things so this is called the
07:11 - local variable because we're declaring
07:13 - it inside the function and these
07:15 - properties that we declare up here to
07:17 - hold values are accessible inside the
07:19 - whole class so what that means is that
07:22 - let me just delete these two functions
07:26 - for now so what that means is that if
07:28 - you have a function that let's say
07:30 - calculate the result or perform some
07:32 - sort of calculation like for example add
07:36 - up comment total or comment count or
07:42 - something like that and the point of
07:44 - this function is to maybe sum up the
07:47 - number of comments that this blog post
07:48 - has and then at the end of the whatever
07:52 - you know you're performing calculations
07:54 - here I'm do some calculations and come
08:01 - up with as a result arrive at a result
08:04 - now what do you do with that result
08:07 - right you can either when you learn this
08:12 - in the functions lesson is that you can
08:14 - specify a return value so this just
08:18 - specifies that when you call add up
08:20 - common count it's going to return a
08:23 - number for you so now you can say you
08:25 - know return whatever the result is
08:28 - whatever variable is stored in write you
08:30 - can return it to the caller another
08:33 - thing that you can do to make it
08:35 - accessible later on because remember any
08:39 - variables that you declare inside here
08:41 - are local variables and they live and
08:43 - die inside this function here so if I
08:47 - didn't do the return value route
08:50 - and I arrived at some sort of calculated
08:54 - result and I wanted to save it for use
08:56 - for later on
08:57 - I would probably assign it to a property
09:00 - so I can say number of comments equals
09:03 - whatever result that I arrived that and
09:06 - by doing this when I call this function
09:09 - it's going to do some calculations
09:10 - calculate the result the total number of
09:13 - comments right and then it's going to
09:14 - assign it into this property and now I
09:18 - can use the number of comments in other
09:20 - functions or later on if I left it as a
09:24 - local variable it would again when this
09:29 - function finishes that would be lost
09:32 - okay so that's the difference between
09:34 - the lifetime or the scope of property
09:38 - versus local variables and now for the
09:42 - third thing that I want to show you in
09:44 - this lesson is something called computed
09:46 - properties and it's one of those things
09:48 - that makes properties a little more
09:50 - special than just plain old variables
09:52 - here so let me let me get rid of these
09:55 - two here so that we can I start fresh
09:58 - and we're back to where we started in
10:01 - this lesson you can do what's called a
10:04 - computed property and what that is is it
10:07 - just returns and what that is is it lets
10:12 - you do some calculation and return a
10:15 - result when you call it property so let
10:17 - me demonstrate here so let's say that we
10:19 - have let author equals person right so
10:26 - there is our author and let's set the
10:29 - author's name - Chris change which is my
10:33 - name and now let's create a blog post my
10:37 - post equals blog post okay and now let's
10:43 - assign the author property of the post
10:49 - right let's assign author into it now
10:54 - author right here is this person this
10:58 - person object that I created
11:01 - and finally let's set the title - let's
11:09 - say learn Swift for beginners ok so what
11:17 - do we have here we have an author object
11:19 - which has the name set to Christian we
11:22 - have a blog post object with the author
11:25 - set to this person object that I created
11:28 - and I also set the title to learn Swift
11:30 - for beginners now what I wanted to show
11:34 - you is I'm going to create a computed
11:37 - property up here I'm just going to add a
11:40 - comment so that just to make it stand
11:43 - out a little bit so I can save our full
11:47 - title is a string and I'm going to open
11:52 - up a set of curly brackets right right
11:56 - after it and what I'm going to say is
12:01 - check if title and author on not nil
12:11 - check that title and author or not now
12:15 - because title is an optional write an
12:18 - author is also and optional and you
12:21 - learned about these in the previous
12:23 - lesson so you know what they mean they
12:26 - could return nil which is nothing right
12:29 - when you unwrap it so I'm going to use
12:31 - an if statement just to check
12:33 - so if title is not equal to nil and and
12:39 - that's the double ampersand which
12:42 - represents an end condition so if title
12:47 - is not nil and author is also not nil
12:51 - both of these conditions have to be true
12:53 - then I'm going to run this code inside
12:55 - then return title and remember because
13:01 - title is an optional string right that
13:05 - means I have to unwrap it to get the
13:07 - value inside and I'm going to use the
13:09 - exclamation mark to force unwrap it that
13:12 - means I'm going to tell Xcode I'm just
13:14 - going to unwrap
13:15 - that optional and use whatever is inside
13:16 - whether its value or or whether it's no
13:20 - and I know for a fact that it's not no
13:22 - because I just checked it up here right
13:25 - so I can safely and confidently do this
13:27 - so I'm going to say bye
13:30 - and then plus and I'm going to do the
13:34 - same thing with author I'm just going to
13:36 - force and wrap it and use it okay so
13:39 - let's see what it's saying here cannot
13:42 - be applied to string and person that's
13:46 - right okay so author is a person right
13:49 - so I can't I can't append a person
13:52 - object to the string what I meant to do
13:55 - actually is I meant to unwrap the author
13:59 - right to get the person object and then
14:01 - call its name property that's what I
14:04 - actually wanted to do okay so right here
14:09 - Xcode is complaining that missing
14:11 - returned in a function expected to
14:13 - return a string so this computed
14:16 - property here when it gets called full
14:18 - title it's supposed to return a string
14:21 - and if title is not nil and author is
14:24 - not no it is going to return a string
14:26 - but what is one of these things are nil
14:30 - either or in that case I'm just going to
14:35 - use the else branch here I'm just giving
14:37 - the return let's say let's do another
14:42 - check else if title is not nil so it's
14:47 - not equals nil then return just the
14:52 - title oops force and wrap that finally
14:56 - if the title is nil then I don't know
15:00 - what we can do other than return an
15:02 - empty string or let's say no title let's
15:09 - do that okay so this is awesome now this
15:12 - is a computer property and I hope you
15:15 - can see that from this demonstration
15:16 - what that means it's a property where
15:19 - basically you can perform some code you
15:22 - can do some calculation you can combine
15:24 - a bunch of things
15:26 - and return a result return something so
15:30 - if I say down here if I say my host dot
15:38 - full title what do you think it's going
15:40 - to display let me print it out because
15:46 - it's kind of truncated over here
15:49 - and used to print so it prints down in
15:52 - the consult it's learned Swift for
15:56 - beginners by Chris chain and I didn't
15:59 - have to set that right because this is a
16:01 - computed property this full title
16:04 - property is calculated by grabbing the
16:07 - title and appending by and then
16:11 - appending the author name and if we
16:13 - didn't have an author so let me just let
16:17 - me just get rid of this line here for
16:19 - setting the author if we didn't have an
16:21 - author it would just print out the title
16:23 - and if I get rid of the title and it
16:26 - doesn't have a title then it's going to
16:28 - print no title and that's all of this
16:30 - logic here in my computed property okay
16:35 - so that's computer properties there's
16:36 - also additional things which we won't
16:39 - cover in this lesson we'll probably do
16:41 - another video on properties and that is
16:44 - getters and setters and property
16:46 - observers but this is a really great
16:49 - start to taking a look at properties so
16:52 - thanks for watching please like the
16:54 - video and please subscribe if you want
16:55 - to see more of these videos and yeah
16:58 - I'll see you next time bye for now
17:02 - you
17:04 - [Music]