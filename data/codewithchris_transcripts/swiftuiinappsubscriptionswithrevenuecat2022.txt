00:00 - today i'm going to show you how to add in-app 
subscriptions to your app using revenuecat  
00:04 - one of the most loved tools in the ios community 
and in my opinion the best way to implement in-app  
00:10 - purchases we're going to do this with version 4 of 
the sdk and this swift ui demo app that i created  
00:16 - a mock meditation app shout out and thank you to 
the revenue cat team for sponsoring this tutorial  
00:22 - so here's what we're trying to do i want this 
app to be able to detect if the user has a  
00:27 - subscription if they don't then when they tap on a 
subscription i want to show a pay wall and i want  
00:34 - to be able to list the different subscription 
options i want to implement the ability for the  
00:39 - user to process i mean purchase a subscription 
and when they do i want this app to detect that  
00:46 - they do have a subscription it will no longer 
show this and they will be able to click through  
00:52 - to these cards and plus when they click on this 
tab it will show that they are a paid member  
00:58 - here's how we're gonna do this in broadly four 
steps now imagine at the top here you have your  
01:02 - app user which is using your app which is built 
from your xcode project step one is creating  
01:08 - a revenue cad account if you don't have one which 
is free number two we're going to go over to  
01:12 - apple's app store connect portal and we're going 
to configure the actual subscription products that  
01:17 - the user is going to buy step three is we're going 
back to revenue cat and we're going to specify how  
01:23 - we want to present those products to the users and 
what sort of access level those products should  
01:28 - unlock we do this by configuring entitlements and 
offerings and you'll learn more about those later  
01:35 - step number four is we're going to add the 
revenue cat sdk to our xcode project which does  
01:40 - all of the heavy lifting so we can write very 
little code in order to display our products  
01:45 - and process transactions now i know what you're 
thinking why do we use this revenue cad layer  
01:51 - why not just use the store kit framework and 
access the app store connect products directly  
01:56 - well for one store kit is notoriously hard to 
use as many developers can attest to revenue  
02:01 - cat makes implementing in-app subscriptions 
much faster and easier another thing is that  
02:06 - this revenue cat layer allows you to dynamically 
present different offerings to the user and to  
02:11 - run pricing experiments all without submitting 
a new app update and if your app is available  
02:17 - on multiple platforms you can persist the user's 
subscription status across all the platforms and  
02:22 - also get a broader view of your analytics spanning 
multiple platforms now those are just a couple of  
02:28 - benefits off the top of my head oh and by the way 
they have an awesome quick start documentation  
02:32 - guide which is what this video is based off of 
and they also have a swift ui demo app that you  
02:37 - can look at for reference link to those two things 
in the video description all right let's dive in  
02:43 - now if you don't have a free revenue cat account 
yet open your browser and type in code with  
02:48 - chris.com slash rcat and then what you're going 
to do is hit this sign up button right here  
02:54 - and create your free account now i don't 
get compensated for this in any way but  
02:58 - it will let the folks over at revenue cat know 
that we want to see more revenue cat tutorials  
03:05 - now after you create your account you're 
going to be greeted by this screen  
03:09 - now here you're going to be asked to set up your 
new project you can give it the name of your app  
03:13 - now a project doesn't represent a single app 
instead it represents your product which might  
03:19 - have an app on multiple platforms for example 
you might have an ios version an android version  
03:25 - and maybe a web app that uses stripe if a 
user buys a subscription you'd want the app to  
03:30 - recognize that no matter what platform the user is 
currently on right well revenuecat can help you do  
03:36 - that if you put them all into the same project now 
this is my revenuecat account i am going to create  
03:41 - a brand new project just so we can use it for this 
demo here so i'm going to call it cwc meditate
03:53 - and what we need to do is select what platform 
we're using and that's going to be app store for  
03:58 - us we're going to give it an app name you don't 
need to fill out anything else for now so let's  
04:03 - just call this that or save it now let's head 
on over to the apple app store connect portal  
04:13 - now for this part you're going to need an apple 
developer program membership because you need  
04:17 - to access the app store connect portal where you 
configure your app and your subscription products  
04:23 - now here's a pro tip make sure that you've signed 
the latest paid applications agreement because  
04:28 - otherwise you won't be able to use the in-app 
purchases and you won't be able to get this  
04:32 - working even for testing purposes if you see any 
warnings on your app store connect dashboard or in  
04:39 - your agreements tax and banking module then you're 
going to want to resolve those especially if it  
04:44 - pertains to your paid applications agreement and 
even if you have signed this in the past sometimes  
04:49 - apple updates it and you're going to need to agree 
to it and approve it again so this is my app store  
04:55 - connect portal let's go into my apps and we're 
going to add a brand new app to represent this  
05:01 - cwc meditate demo that we have so let's click on 
new app and let's call this meditate let's choose  
05:09 - ios we'll choose english and then the bundle 
id is going to be that one right there and
05:20 - sure let's just say that
05:25 - all right so what we're going 
to do is jump straight down to  
05:29 - features right here and subscriptions now again 
if you haven't signed your paid apps agreement you  
05:34 - might not have or see these things now first thing 
we're going to do is set up our subscription group  
05:40 - now subscription group is essentially 
a collection of subscription products  
05:44 - and the user can only be signed up to one of 
those subscriptions in the group and they can  
05:49 - change between them at any point so usually we'll 
define a subscription group as a level of access  
05:56 - let's say all access and inside we'll put 
different interval options like yearly or  
06:01 - monthly so let's create our subscription 
group and we're going to call it pro  
06:07 - that that's sufficient for now what we have 
to do now is add the subscription products to  
06:15 - be in this group we're going to add yearly and 
monthly and we also need to add some app store  
06:20 - localization for the name of this subscription 
group so i'm going to go ahead and do this first  
06:27 - because we can't get away from doing this we're 
going to have to do this at some point now it's  
06:31 - always a good idea to open up these little bubbles 
because often times it tells you whether it can be  
06:36 - public facing or maybe just internal facing for 
your reporting purposes so this one is going to  
06:43 - be shown so what we're going to do is give 
this a name i'm going to call it now down here  
06:50 - we're going to be able to specify the app name 
associated with this subscription so i'm going  
06:54 - to use custom name i'll say cwc meditate the 
reason it's a duplicate and the reason i'm not  
07:01 - just using the app name is because oftentimes in 
the metadata of the app you you might want to put  
07:06 - keywords or something in here or maybe seriously 
meditate the comments app in the app store  
07:12 - you know you don't want that to be shown in the 
subscription screen for the user so by using  
07:17 - this custom name i can specify any app name 
i want but this is what is going to be shown  
07:23 - in the subscription settings for the user so this 
image shows you where this subscription display  
07:28 - group name is going to be as well as the 
app name okay let's go ahead and hit create
07:35 - and with that being done we are 
going to hit create right here  
07:39 - to create our subscription products now these are 
the things that people are actually going to buy  
07:44 - this reference name is going to be internal 
it's going to be for your reporting and then  
07:49 - this second field is going to be an identifier for 
your product now keep in mind that this identifier  
07:55 - that you put for this product is going to be 
across your entire account so once you create a  
08:01 - subscription product with this product id you're 
not going to be able to reuse that for another  
08:05 - subscription product so revenuecat actually 
has some guidance here in their documentation  
08:11 - for you know as a best practice for what to 
put here so i'm going to quickly pull that up  
08:16 - all right so here they recommend for the reference 
name because this appears in your reporting you're  
08:20 - going to have the the duration or the name 
and you're going to have the price and then  
08:25 - you're going to have if there's any sort of free 
trial period so for this one i'm going to put um  
08:33 - annual and put that and no introduction in your 
period and for the project id they recommend this  
08:42 - sort of identifier so let's break that down 
okay so there's um the app underscore price  
08:48 - in sense uh underscore duration uh 
underscore intro duration and intro price  
08:54 - so i'm not going to have intro duration or intro 
price we're just going to have app price and  
08:58 - duration so this one is going to be i guess cwcm 
let's just say that uh price is going to be 9.99  
09:08 - and this is going to be one year for the duration 
so this just from looking at this product id i  
09:14 - can sort of tell what that product is so let's go 
ahead and hit create and then it's going to bring  
09:20 - me to configure a couple more options here so i'm 
going to have to select the duration because it  
09:26 - doesn't know just from the reference name so i'm 
going to have to select one year right there and  
09:32 - we're going to have to add pricing and we're 
also going to have to add localized names for  
09:37 - this particular product so let's add the pricing 
first so i'm just going to go ahead and choose
09:46 - that and you can price it differently  
09:50 - per region if you'd like if not i'm just 
going to go with the conversion rates  
09:56 - hit confirm and then for app store localization we 
will add the name now again they have a couple of  
10:05 - they have some guidance here as well revenue cats 
so let's bring up their documentation and they  
10:12 - recommend here let's scroll down right here um 
let's see we recommend using the same subscription  
10:21 - display name for all your products that unlock 
the same level of access so whether it is a  
10:26 - monthly subscription or a yearly subscription we 
are going to go by the level of access it unlocks
10:36 - so let's call this all access we're 
going to put that there as well
10:45 - okay and the last thing you have to do and 
i don't actually know if you have to do this  
10:51 - anymore but back then you had to submit your 
subscription products for review and in order  
10:57 - to do that you had to have a screenshot and 
put in some review notes even though your app  
11:02 - wasn't ready to be submitted nowadays they say 
that your first subscription must be submitted  
11:07 - with a new app version so you're not going to 
hit submit for review on these in-app purchases  
11:13 - until you're actually submitting the entire 
app for review so in the past you'd have to  
11:21 - um just for testing submit it for review 
anyways and you'd have to include a screenshot  
11:27 - so i'm going to include a screenshot anyways 
what i created was a placeholder it's just an  
11:35 - empty image they have recommended sizing 
here whoops i'll use the screenshot  
11:41 - it won't be displayed in the app store 
so down here the dimensions 640 by 920  
11:49 - image of whatever you want before you actually 
submit it for review obviously you're going to  
11:55 - want a picture of this against your actual 
paywall in your app but for now for testing  
12:02 - purposes we are going to put a random screenshot 
well a placeholder screenshot of nothing  
12:08 - so you could create this blank image in you know 
photoshop or canva or figma or whatever it may be  
12:15 - i'm just going to do that and we'll hit save okay 
and then now we are going to repeat the same thing  
12:21 - for uh the monthly version so i'll say monthly
12:29 - oops
12:33 - and this will be cwcm
12:39 - like that one month so we'll speed this part up  
12:44 - because it's exactly the same 
as for when we did the annual
12:55 - all right so now we've created our subscription 
group inside there are two subscription products  
13:01 - annual and monthly and they have these product ids 
we're going to want to keep track of these product  
13:06 - ids because that is how revenue cat is going to 
identify these products and pull the information  
13:12 - from app store connect but in order for 
revenue cat to have that communication  
13:18 - with app store connect there is one thing that 
we need to set up and that is going to be here  
13:24 - under subscriptions you have this app specific 
shared secret and we are going to hit manage to  
13:30 - open up the window you're going to hit generate 
and then you are going to copy this shared secret  
13:38 - done and we're going to go back to revenue 
cat and in the project settings if you click  
13:45 - on your app and you look at your project settings 
here you can paste it into this field set secret
13:55 - all right and that is what revenuecat 
needs to communicate with app store connect  
14:00 - okay back in revenue cat we are going to set 
up our entitlements now this is very easy to  
14:05 - understand just think of it like different tiers 
of your membership that you typically see in other  
14:10 - sas products by setting up these entitlements 
you will be able to check later with from with  
14:16 - an xcode what level of access the user has 
and then unlock whatever content in your app  
14:23 - so with our demo app we're just going to 
have one level of access which is either  
14:28 - free which is no access or paid which is 
sort of an all access so i'll call this pro  
14:34 - as the identifier for this entitlement 
and i will say it's all access
14:44 - you'll notice that it says zero products here 
what we need to do is draw the connection from the  
14:51 - products that we configured in app store connect 
to this specific entitlement so that when the user  
14:57 - buys those products we know that it is going to 
unlock this pro entitlement that we just set up  
15:03 - so if you click on this zero products you're 
going to be drilling into this entitlement and  
15:10 - you're going to be able to attach the products 
you want that would unlock this however you'll  
15:15 - find that you have nothing here to attach 
because what we need to do like i said before  
15:21 - is if you go back into app store connect and 
look at the subscription products that you set  
15:28 - up we need to tell revenue cat that these 
are the product ids that we have set up so  
15:35 - we have an entitlement now we need to go into 
products and we need to add the two products  
15:41 - that we added here and we reference them by id 
so let's go ahead and start with the annual one  
15:47 - let's copy that product id and under products here 
let's click new we're gonna paste that in there  
15:54 - and we're going to choose this app that we're 
adding it to let's do this with the second one  
16:02 - this is the monthly product so i'm going to hit 
new and again we're going to select this app if  
16:08 - we had multiple platforms for this project we 
would see you know app store or play store or  
16:13 - whatever but we only have app store right here so 
let's go ahead and click add now you'll see even  
16:18 - if we refresh it the products are not connected to 
any entitlements what we're going to do is go back  
16:24 - to entitlements click zero products and then 
attach those two products which we just added
16:34 - now revenue cat knows that when these products are 
purchased it's going to unlock the pro entitlement  
16:41 - and if we go back to products and we will refresh 
the screen you're going to see that these are  
16:45 - connected to a single entitlement okay now that we 
have added the products to revenue cat we need to  
16:51 - decide how we're going to offer them to the 
user and this is where offerings come in now  
16:56 - each offering is essentially a group of app store 
connect products that we want to present to the  
17:01 - user for example you might want to create an 
everyday offering which contains your monthly  
17:08 - and annual subscription and you might also want 
to create another offering which contains your  
17:13 - special black friday priced monthly and annual 
subscriptions and obviously you're going to have  
17:18 - to create those black friday products inside your 
app store connect furthermore another offering you  
17:24 - might have is maybe for returning users so that 
you can present them with a specially priced  
17:30 - product that will entice them to rejoin having 
these three different offerings set up inside your  
17:36 - app you can have logic that decides to present 
which offer to the user depending on different  
17:42 - situations furthermore inside the revenue cat 
dashboard you can change which offering is  
17:49 - going to be the current or default offering and so 
you're able to change what gets presented to the  
17:55 - user without submitting new app updates which is 
really powerful there's also another feature that  
18:00 - helps multi-platform apps inside an offering you 
have packages and inside each package it contains  
18:07 - the equivalent product across platforms this way 
no matter what platform your app is running on  
18:13 - you can access the same offerings and present the 
appropriate products to the user don't worry when  
18:19 - you present that offering revenuecat will know 
which platform the user is on and present the  
18:24 - appropriate product for that platform so let's 
go ahead and click on offerings right here and  
18:29 - we're going to click on new and we're going 
to create let's just call this default shorter
18:37 - default offering
18:41 - and there are zero packages in here right now 
so we are going to create the annual package  
18:49 - first we're going to change the identifier to 
annual and these identifiers right here these  
18:56 - are sort of like commonly used ones so um there 
are these options that you can select however if  
19:03 - it's a custom one you can set your own identifier 
we're gonna go with a custom one because these are  
19:11 - pretty custom so sorry i mean we're gonna go with 
a standard identifier because this is sort of a  
19:16 - standard uh duration and charging interval 
uh let's call this the annual subscription
19:26 - now inside this package we are going to 
add our yearly product right and if we had  
19:33 - an an android version of this app we 
would also include that annual product  
19:41 - in this package as well so so far this package 
has zero products let's go into it and attach  
19:49 - our one see this is why those reference ids matter 
right because i can tell right off the bat that  
19:55 - this is my annual product we're going to drill 
back out and we are going to add another package
20:11 - i'm going to click zero products attach this one 
1m great now we're going to go into xcode and add  
20:19 - the revenue cat sdk now back in our xcode project 
we are going to add the revenue cat sdk and we're  
20:26 - going to start by pulling up the documentation so 
again this quick start is so helpful we're going  
20:32 - to go under ios installation and there's going 
to be a couple of different ways we can do this  
20:36 - we're going to do it via swift package manager so 
let's go ahead and copy this repository url and  
20:46 - here we are going to go to the project settings 
um we are going to go to package dependencies  
20:55 - and we're going to hit this plus so always don't 
get confused with the plus down here it's this  
21:01 - one right here and we're going to paste it into 
there and then just go ahead and add the package  
21:10 - and while that happens let's take 
a look at a couple of next steps  
21:15 - so after we do that we have to 
import the revenue cat framework  
21:22 - oh i can't access that but essentially we 
need to write this import statement wherever  
21:28 - we want to use the revenue cat libraries and 
we have to enable in-app purchase capability  
21:34 - for the project so i forgot to do this when i 
first did this and it wasn't able to work so  
21:41 - make sure we do this in our xcode project 
and then after these two simple steps the sdk  
21:46 - is in our xcode project so let's check if that's 
done okay we're going to add the package great  
21:52 - now we are going to go under click targets 
signing in capabilities and we are going to add  
22:01 - in-app purchase capabilities now it's not this 
plus icon right here it's this one up here  
22:06 - let me hit plus i'm going to search for in app 
purchase there we go let's go ahead and add that  
22:14 - um that should be fine and then we're going to 
go into here our app entry point and we're going  
22:20 - to import revenue cat framework and let's 
go take a look at configuring our instance  
22:29 - so again let's start from the quick start because 
that's always the first place so we were sort of  
22:37 - lost my place here we're right here install the 
sdk so we just did that that was easy two steps  
22:43 - configuring the sdks we only need to do this once 
and essentially we just need to initialize it  
22:51 - with our api key because that's going to point 
to our dashboard or our project right here  
22:58 - so you're going to find the api key under api 
keys so we're going to grab that but first of all  
23:05 - let's grab these two lines the first line 
is setting the um the log level to debug  
23:12 - which means that we're going to see any errors 
here in our console which is going to be really  
23:16 - helpful because sometimes you're trying to 
retrieve products from app store connect  
23:20 - and reviewcad isn't able to talk to app store 
connect and you're going to wonder why well that  
23:26 - stuff is going to show up here and you're 
going to get helpful hints as well in here  
23:30 - all right so where are we going to put 
that code because in this documentation  
23:35 - we don't have this did finish launching with 
options the best place to put it for the swift  
23:42 - ui app would be in an init method so we're 
gonna just put it right there so log level  
23:49 - is set to debug and we're going to put in our 
api key right there so let's hop over to our  
23:54 - dashboard and then under public app specific 
api keys that is the one we're going to copy
24:03 - okay so i'm going to paste that right over there 
now the next thing we need to do is to display the  
24:10 - products on the paywall so let's go over to the 
paywall here and take a look at what we have so  
24:16 - right here we have a static button that currently 
does nothing and it's got a label that says text  
24:22 - join meditate plus if we go back to the dashboard 
or actually let's go back to the quick start  
24:29 - that is the next step you can easily display 
your products with this simple call purchases dot  
24:36 - shared this is getting you the shared instance of 
the purchase object and then you are going to call  
24:44 - get offerings method and that's going to return 
to all the offerings that you have configured  
24:49 - in here so just to remind ourselves we have one 
offering and inside there are two packages annual  
24:57 - and monthly so that's what we're going to try 
to grab also notice that this says current  
25:04 - this is going to allow us to very easily grab this 
offering if we had multiple offerings you are able  
25:11 - to choose which one you want to make the current 
offering you'll see that in action in a second  
25:17 - so let's go ahead and try this out what we're 
going to do first inside this paywall is import  
25:23 - revenue cat and what i'm going to do is create 
a state property here for the current offering
25:36 - and this is going to be set to no because 
initially i won't have the offering  
25:40 - and then what i'm going to do here is
25:46 - on up here of the paywall i'm going to fetch the 
offerings so this is going to purchases dot shared  
25:54 - dot get offerings so there are two parameters in 
the completion handler so there there's the actual
26:06 - offerings and there is error
26:11 - so i can say if let current offering let's say  
26:18 - offer equals offerings dot current and error is 
nil that means if there were no errors and i am  
26:30 - able to fetch the offerings i am going to look for 
the current offering so if you take a look at here  
26:37 - this quick help current offering configured in the 
revenue cat dashboard this is going to grab this  
26:44 - offering now it doesn't really matter because i 
only have one but like i said if you had multiple  
26:49 - offerings you can mark one of them as current and 
then you can easily access that specific offering  
26:56 - with this property right here it doesn't mean 
you can't access the other offerings you can  
27:02 - it's just that this is an easy way to grab the 
one that is marked current because you can always  
27:07 - grab the one via identifier like whichever one 
you want so i'm going to put i'm going to grab  
27:14 - the current offering and then in here i'm going 
to set the current offering equal to the offer  
27:22 - and then inside here i instead of having 
a static button i can do a quick check  
27:30 - if current offering is not nil like if we're able 
to grab the current offering from revenue cat  
27:37 - then i am going to dynamically generate my 
buttons one button for each package right because  
27:44 - for this offering i have two packages annual and 
monthly i want to display a button for each of  
27:49 - them so that's why i am going to probably have a 
for each right here and i am going to loop through  
27:58 - current offering dot available packages so this 
is an array of package this is another class which  
28:05 - has different properties for us to look into our 
packages and display things like prices and titles
28:16 - okay so i'm going to put this in here
28:22 - and then the text let's just try to display  
28:25 - let's see so i'm going to force and wrap it here 
because we've already checked that it's not nil  
28:32 - okay so then in here i want to change the 
label of my button to the package details  
28:39 - so inside the package details you can 
access things like let me just show you
28:49 - you can access the store product this represents 
the product that you configured in app store  
28:54 - connect and inside here you can access things like 
the price the title of the product as well as for  
29:00 - your subscription um different details about 
the subscription like uh the the numerical part  
29:08 - of it so is it like every one week or every two 
week or every three week that numerical portion  
29:15 - that's under value as an int and also the
29:21 - the unit of recurrence so is it like every 
does it recur every week every month every  
29:29 - year and that's under unit now this one is 
an enum i believe it's it's not a string so  
29:38 - you're going to have to manipulate this a little 
bit and what i'm going to do instead is look at  
29:47 - the sample project that revenue cat has provided 
again this will be linked to in the description  
29:54 - below i have a magic weather swift ui demo app 
and in this project i saw a really handy extension  
30:02 - where it forms these strings that you 
need so for example i showed you the  
30:08 - the unit right so here there's a switch 
on the unit so if it's a day if it's weak  
30:14 - then it returns this string so i don't have 
to build it myself so i'm going to actually  
30:19 - borrow this extension file and i'm going 
to put it into my own project and use it so  
30:25 - i'm going to create a new group i'm going 
to call it helpers and put it right there
30:33 - and i'm just going to drag it across and copy 
it now this project this sample project i will  
30:40 - link to in the description below but you'll find 
links to this everywhere from the documentation  
30:47 - so it shouldn't be hard to find okay so what this 
gives me is an extension on subscription period  
30:55 - where i can just access this property called 
duration title and it's going to give me it's  
31:00 - going to give me this or perhaps i should do 
period title actually because this contains  
31:05 - the value as well as the you know one day or 
one week it contains the unit title as well  
31:12 - so back in my paywall i no longer have to build it 
myself i can say period title and that's gonna be  
31:20 - fine it's gonna be great and now i'm gonna force 
unwrap that because these are all subscriptions  
31:29 - um and then i'm also going to put the price 
so the price i don't need the extension it's  
31:34 - just going to be localized price string so 
let's give this a run in the simulator and  
31:41 - see if it can actually pull down the 
products um i would keep an eye on down here  
31:48 - because there sometimes is a red exclamation mark 
telling you there's an error if you aren't able to  
31:57 - see the products so let's launch our paywall great 
so we actually see our products that we configured  
32:03 - through app store connect what's happening is 
that our app is connecting to revenue cat and  
32:09 - then revenue cat is fetching the products from 
app store connect and giving it back to us so  
32:14 - this works out great sometimes if you don't see 
anything here and it's not able to fetch the  
32:20 - products it will tell you in here what is wrong 
and it will also try to give you some suggestions  
32:25 - and hints and in many cases it will even give you 
a url to a blog post to try to troubleshoot why  
32:33 - revenuecat isn't able to fetch the products all 
right now that we have our products displayed  
32:37 - let's allow people to purchase it so we're 
going to go back to the quick start and this is  
32:43 - so simple this is a couple of lines of 
code purchases.shared just like last  
32:48 - time but this time we're calling purchase 
and we're passing in the package to buy  
32:53 - and basically that's it so i'm going to copy this 
code snippet we're going to come back in here  
32:57 - and inside by we are going to just paste that 
and uh we are going to change a little bit  
33:05 - here because we we named it pkg so if they 
click this button they are buying that package  
33:12 - right and then in here it is just 
going to check um if the entitlements  
33:20 - if a specific entitlement is active then we're 
going to unlock the pro content so if we go back  
33:26 - to our revenue cad dashboard the entitlements 
the identifier that we put is pro all right so  
33:32 - that's what i'm going to put in here now inside 
their demo app uh they have actually checked for  
33:42 - there are some good practices here to make note 
of um they're actually checking if user has not  
33:48 - cancelled it because sometimes you can bring 
up the purchase screen and then cancel it right  
33:52 - so if the user has not canceled it and there are 
no errors you know then proceed but in the quick  
33:57 - doc code it doesn't check for either of these 
things it just checks if the customer has the  
34:03 - entitlement and you can argue that whether or 
not the purchase went through all we really care  
34:08 - about is does the user have the entitlement 
are they entitled to that locked content so  
34:17 - i guess you could lean either way but something 
else i want to point out is they have this  
34:22 - state variable called is purchasing and this 
basically throws up a screen where is it here
34:35 - yeah this overlay right here so that variable uh 
flips up this overlay so that when the purchase  
34:43 - is happening the user cannot interact with the 
ui you can see here right and then only after  
34:52 - the user cancels it or finishes the transaction do 
they remove that overlay so the user can interact  
34:58 - again so that i think is probably a good idea so 
that the user can't just keep you know tapping  
35:05 - the buy button multiple times so i'm going to 
leave that as an exercise for you to implement or  
35:12 - look in their demo app for now this code here is 
all that's needed for the user to make a purchase  
35:18 - now we need to make sure that when the user has 
unlocked the pro entitlement that that immediately  
35:25 - gives the user access to um all of the content 
because right now in our app we when they tap on  
35:34 - a meditation we are just throwing up the paywall 
we're not checking their subscription status right  
35:39 - so how are we going to check that subscription 
status well let's go back to the quick doc  
35:47 - and that is really the next piece of code here 
and again it's just one single method get customer  
35:53 - info which returns a customer info and then 
you can check if they have the pro entitlement  
36:00 - and then obviously unlock everything now one thing 
to note here is that this is intended to be called  
36:07 - multiple times it doesn't make a network request 
to revenue cat all the time let me read this part  
36:13 - for you you can use this method whenever you 
need to get the latest status it's safe to call  
36:18 - repeatedly throughout the life cycle of your 
app and it updates this customer info whenever  
36:24 - there's a change to it this method actually pulls 
from cache and runs very fast and it's typical  
36:31 - to call this method when deciding which ui to 
show the user and whenever the user performs an  
36:36 - action that requires a certain entitlement level 
so don't worry about calling this as often as you  
36:43 - need because oftentimes it's just pulling it from 
cache so we are going to create a new user view  
36:50 - model as an observable object with a published 
property for the subscription status that way  
36:57 - we are going to make this ui dependent on that 
so that when that subscription status changes  
37:02 - this ui is going to update automatically so let me 
show you how we can implement that so i'm going to  
37:09 - create a new group here let's remove 
this right perhaps right there
37:28 - it's going to be an observable object with a 
published property called is subscription active  
37:40 - so we'll set it to false and i basically want when 
this is initialized i want to call this method
37:55 - and we're going to want to check once it returns 
if they have the pro entitlement so if active  
38:02 - is true then we are going to set is subscription 
status to true right i guess we could shorten this  
38:11 - let's see we can shorten this 
if we say me just do that
38:25 - okay so this is going to be set to true if pro 
is active it's not enough to just check if the  
38:34 - nil or not because this could be false right is 
active could be false so you actually do want  
38:38 - to check if it's equal to true all right so 
we're going to do that and then inside here
38:46 - we are going to create it as a we're going 
to create a new instance of that user view  
38:54 - model equals new user view model and we're 
going to pass it in as an environment object
39:04 - so that way inside content view so inside content 
view there's two things that we want to change  
39:10 - we want to change the subscription is active 
we don't want to show this signup prompt and  
39:18 - the other thing is that if the subscription 
is active when they click on this we don't  
39:25 - want to show the paywall right so one thing at 
a time here that little call to action banner is
39:37 - right here this zed stack right 
here so we are going to check
39:47 - this is subscription active and if we make 
the view code dependent on this published  
39:52 - property as soon as this changes it's going 
to you know flip this on or off so up here
40:00 - let's get access to that user view model
40:09 - all right now i can write code that is 
dependent on that published property
40:16 - um if it's not active right so if they don't have 
an active subscription then i want to show this  
40:24 - um you know this call to action to sign up 
the other thing is that for the meditations  
40:35 - each of those cards is a button when they tap on 
it i again want to make sure that if user view  
40:43 - model is subscription active so if they have an 
active subscription then show meditation i guess  
40:51 - now we're not going to actually implement 
that because that's not really the purpose  
40:55 - of this demo however if the subscription is not 
active then we are going to present the paywall  
41:02 - so let's see how this works because
41:08 - yep okay so i'm going to 
set a breakpoint right here  
41:13 - and this is going to run as soon as the app 
launches we're going to be able to check  
41:18 - that okay so right here the app launches 
it's checking it let's just step over that  
41:27 - is subscription active and it's false which is 
true because they don't have a active subscription  
41:33 - so we still see that and when they tap on this 
it still launches this okay so now when the user  
41:40 - buys something how do we you know flip this switch 
we are going to go back to the paywall at the top
41:52 - environment object again we need access to that 
user view model and then here when the user hits  
42:01 - buy and they have purchased it or they might 
have canceled it or it might have errored out  
42:06 - either way we are going to check if the user has 
this entitlement that's really all we care about  
42:12 - and if they do we are going to say userviewmodel 
dot is subscription active is is true i'm going  
42:20 - to flip that switch and immediately the 
view code that depends on this published  
42:24 - property such as right here in the content view 
that cta to sign up and this you know these  
42:32 - buttons that will immediately change so that's how 
we're going to get things to immediately change  
42:36 - the other thing we want to do as soon as this 
is successful is we want to dismiss the paywall  
42:43 - and i've already set this up so we pass through 
the boolean that controls that paywall showing  
42:50 - or not and we're going to just flip 
this to false is paywall presented
42:58 - um it's false
43:02 - all right okay so one more thing to do now that 
you know how to detect the subscription status  
43:09 - in the profile view we can 
do a couple of things here so  
43:13 - again we are just going to get 
access to that environment variable
43:22 - and then inside here instead of free we are going 
to detect the status of user view model dot is  
43:30 - subscription active if it is then we'll say pro 
if it's sorry it's not a colon here it's question  
43:37 - mark pro and here we're going to say if it's false 
then we're to say free and for restoring purchases  
43:44 - this is actually very simple as well so we go back 
to the quick help documentation see we're just  
43:51 - following this step first step in here it's just 
another single method called restore purchases  
43:58 - and uh this we should be used to this by 
now right it is essentially we get the
44:11 - right we have the customer info all right so  
44:15 - oh we can't find purchases in scope 
because i have to import revenue cat
44:22 - all right down here uh so we're just gonna set  
44:25 - user view model dot is is 
subscription active is equal to
44:33 - that that's literally a couple of lines of code 
so easy to do okay now we want to test this so  
44:42 - we have actually have to go back to app store 
connect and we have to set up some test users  
44:47 - now um you need a device so first of all you can't 
test the actual purchasing through the simulator  
44:56 - next thing you want to do is actually test 
it using a dummy sandbox user so we're going  
45:03 - to go under sandbox users here so in here 
i've already set up a sandbox tester but  
45:09 - what you can do is hit this plus icon 
so just fill in all the information here  
45:14 - choose an app store country that your 
app is actually available remember the  
45:18 - password though because you're actually gonna 
need to log in with this email and password  
45:22 - on the device when you make the purchase and then 
hit invite and you're good for this part next what  
45:28 - you want to do is plug in your phone because 
we're going to be running this on our phone  
45:35 - and but before you do that one thing is that the 
sandbox tester that you just added you want to  
45:40 - add that as a tester to your app store app in on 
your phone so go into the settings of your phone
45:54 - and then you're going to go under app store 
and then if you scroll down you're going to see  
46:01 - sandbox account so i've already signed in with 
the sandbox tester account that i created but  
46:06 - what you're going to do is just tap on that and 
then sign in with the sandbox tester that you had  
46:12 - just created okay now we are going to go into back 
to xcode we're going to run the app on our phone  
46:24 - now sometimes if you get stuck here 
just getting your phone to connect  
46:27 - and getting the app to be able to 
run on the phone make sure that  
46:32 - sometimes you need to restart your phone i've had 
to do that restart xcode restart your computer  
46:39 - make sure that you have the latest version of 
xcode or at least that the um the ios version  
46:47 - matches the um the iphone version that you 
have on your device so all those things matter  
46:54 - if you are able to run your app on the device 
great so you're going to see something like this  
47:01 - and what we're going to do is tap on a 
paywall so actually let's just flip here
47:08 - okay so i'm going to tap on the paywall and i'm 
going to buy something so let's hit one month
47:16 - so here under the details you can see for 
testing purposes only you will not be charged  
47:20 - for confirming this purchase just make sure 
that the count is your sandbox tester account  
47:25 - i'm going to go ahead and subscribe i'm 
going to type in my password and hit sign in
47:33 - all right so that's done and we'll make sure 
that this works you wait a little while okay
47:43 - so now you can see that the call to action 
is gone and now when i tap on one of these  
47:47 - meditation cards the paywall doesn't come up 
and nothing happens because we didn't actually  
47:52 - program the buttons to do anything if if 
they have a subscription and now if i go  
47:57 - to the account tab see it's pro if i 
hit restore purchases nothing goes wrong  
48:04 - i'm still still subscribed and the reason why you 
want to use a sandbox tester account is because  
48:12 - you can actually go back to app store connect 
and you can delete that purchase you can  
48:20 - you can also do other things with it such as 
play with the subscription renewal rate so it's  
48:28 - going to be simulating a month per every five 
minutes and this is going to allow you to test  
48:33 - what happens when you know the next month rolls 
around without having to actually wait 30 days  
48:39 - you can reset purchases and so on and so forth and 
also if you go back to the revenue cat dashboard  
48:46 - let's go to overview you'll see that 
if you flip the switch the sandbox data  
48:53 - you'll actually actually see that that just 
happened and then from these transactions here  
48:58 - you can see that i tested the same thing about 
nine hours ago and each of these transactions  
49:04 - they happened five minutes apart because that 
is the monthly renewal rate and it's simulated  
49:09 - for five minutes and you can see that this check 
box indicates that that is a renewal if you're  
49:14 - interested to see more revenue cat tutorials make 
sure you drop a comment below and also check out  
49:19 - the playlist above for more in-depth revenue cap 
tutorials like how to decipher the charts how to  
49:24 - do single in-app purchases and more and if you 
want to see future revenue cat tutorials make  
49:30 - sure you comment below and let us know thanks 
for watching i'll see you in the next video