00:00 - hey code crew so I'm getting pretty
00:02 - serious with swifty why now
00:03 - in fact I'm waking up at 5:00 a.m. every
00:05 - morning just to get that quiet time to
00:08 - practice in one of these practice
00:10 - sessions I decided to rebuild the war
00:13 - card game in swift UI and I couldn't
00:16 - believe how easy it was and for those of
00:18 - you who are new to my channel this war
00:20 - card game is the starter app that I take
00:23 - all beginners through in order to get
00:25 - their feet wet in my how to make an app
00:27 - video series that you can find right
00:29 - there so in this video I want to
00:31 - demonstrate for you how to build the war
00:32 - card game using Swift UI stay tuned now
00:41 - before we get started I need your
00:42 - feedback in the video series that I
00:44 - mentioned earlier that was designed for
00:46 - beginners with absolutely no coding
00:48 - experience and so I go through every
00:51 - single little thing now here's my
00:52 - dilemma I'm planning to release a new
00:54 - Swift UI
00:55 - video series here on YouTube and I need
00:59 - to decide whether I should design that
01:01 - series for people who have absolutely no
01:03 - coding background which means that I'm
01:06 - gonna explain every single little thing
01:07 - and also that beginners can use this
01:11 - Swift UI video series as their first
01:13 - foray and entry point into the iOS app
01:16 - development world or on the other hand
01:18 - should I design that video series
01:21 - instead for people who have a baseline
01:24 - foundation knowledge assuming that
01:26 - they've gone through my beginner series
01:28 - that they've gone through some of my
01:29 - other material and that will allow me to
01:32 - gloss over some of the basics and some
01:34 - of the details so we can move a little
01:36 - faster now I'm really hung up and stuck
01:39 - on this decision so I would very much
01:41 - like your feedback please let me know
01:43 - down below and on your way down there if
01:45 - you haven't already please hit the
01:47 - subscribe button it really helps the
01:49 - channel and I really really appreciate
01:51 - it now in this specific video though I'm
01:54 - going to assume that you have gone
01:56 - through my beginner series and that you
01:58 - have that knowledge of Swift and Xcode
02:01 - and that's where we're going to begin
02:03 - that's the starting point for this
02:05 - specific war card game Swift UI video if
02:08 - it does happen that you're brand new to
02:10 - iOS and you're watching this I would
02:12 - wreck
02:12 - you go through my beginner series first
02:14 - links in the description or maybe click
02:17 - the card in the upper left and with that
02:20 - said let's dive into Swift you I work
02:22 - hard game so here we're gonna start a
02:25 - brand new Xcode project now I'm using
02:27 - Xcode eleven point two with Mac OS
02:29 - Catalina if you haven't upgraded your
02:32 - Mac OS to Catalina yet don't worry it's
02:35 - just that you're gonna have to launch
02:37 - your app in this simulator to see the
02:39 - user interface that you've built whereas
02:41 - if you're on Mac OS Catalina or later
02:44 - you're going to get a nice little
02:45 - preview pane besides your code that
02:47 - gives you a preview of what your user
02:49 - interface is going to look like now if
02:51 - you want to work with so if you I you
02:52 - need to at least have Xcode eleven so
02:54 - there's that alright if you're all set
02:57 - and ready to go let's start this project
02:58 - so we're gonna choose iOS we're gonna
03:00 - choose single view app I'm gonna gloss
03:03 - over some of these details because we've
03:05 - set up so many projects before together
03:07 - if you don't know what to fill in here
03:10 - definitely check out my beginner series
03:13 - first it'll explain what all of these
03:15 - things mean now I'm just gonna type in
03:17 - war card game have a swift UI war card
03:21 - game right here and for the language
03:24 - make sure it's set to swift for the user
03:27 - interface make sure it's set to Swift UI
03:29 - the rest of it you can leave unchecked
03:31 - so let's click Next and let's save it
03:33 - anywhere you want I'm gonna save on my
03:36 - desktop now one of the first things
03:38 - you'll notice is that we have something
03:39 - called a scene delegate now and this is
03:42 - actually the app delegate
03:45 - responsibilities separated out into both
03:48 - an app delegate and the scene delegate
03:49 - the reason for this is because now with
03:52 - iOS 13 there's multi window support the
03:55 - easiest way to think about this is on
03:58 - the iPad where you can now have half
04:00 - your screen running one app and half the
04:03 - screen running another app and they
04:05 - could actually be the same app so those
04:06 - are multiple windows on you know within
04:09 - the same app instance and so that's why
04:13 - we have a scene delegate now that
04:14 - handles those windows whereas the app
04:16 - delegate really handles the app
04:18 - lifecycle events as a whole now the
04:22 - content view this is your actual screen
04:25 - you know what used to be a view
04:27 - controller with storyboard your view
04:30 - being in the storyboard is now just a
04:32 - Content view and this has your logic
04:35 - where you would have placed in the view
04:37 - controller as well as the code that
04:39 - generates or represents your user
04:42 - interface so the first thing I want you
04:45 - to notice is that I have this preview
04:47 - pane here if you don't see this it's
04:49 - just a matter of clicking this button
04:51 - and toggling it on or off
04:54 - again you have to be running at least
04:57 - Mac OS calluna or else you're gonna get
04:59 - a little error message there that says
05:00 - you need to have that Mac OS so anyways
05:04 - if you hit resume now you're gonna see
05:06 - what this code represents on the
05:09 - right-hand side and I want you to notice
05:11 - something right off the bat and that is
05:15 - that there is a content view which
05:18 - returns a view and there's also a
05:20 - content view previews so this code right
05:24 - here is the actual code that represents
05:28 - your user interface when you run your
05:30 - app this part right here is just to
05:34 - generate what you see here in the
05:36 - preview there is a distinction because
05:40 - this preview code isn't actually shipped
05:43 - in your live app this is really just for
05:45 - development and you can customize this
05:48 - in different ways for example to have to
05:52 - show your app within a different
05:53 - simulator or a different device I mean
05:57 - in a different landscape you could
06:00 - separate out pieces of your user
06:02 - interface so this preview code is really
06:05 - just to help you when you're developing
06:08 - the app and it just generates what you
06:11 - see here you can see here it's creating
06:13 - an instance of content view you know
06:16 - which is this so this line of code is
06:19 - what is putting what you see here on the
06:23 - right-hand side alright so this code
06:26 - right here represents the actual user
06:28 - interface so far we've just got a text
06:31 - element so this is your first
06:33 - introduction this is your first swift UI
06:36 - element it's text right and inside you
06:39 - pass it
06:40 - a string right and that's going to
06:41 - display a label essentially it's a UI
06:43 - label from UI kit now I'm going to show
06:45 - you another one and this one is going to
06:48 - be image and inside here we can specify
06:51 - an image asset name that we have
06:54 - unfortunately right now we have nothing
06:56 - to see because we don't have any image
06:58 - assets so why don't we do that first
07:00 - we're going to go into the asset library
07:02 - and in the description below you're
07:04 - going to see a link to download some
07:06 - images specifically the war card game
07:09 - images that we're going to need so I'm
07:11 - gonna just copy all these images you're
07:14 - gonna have these same ones if you
07:16 - download those and just drag it all into
07:18 - there now that is going to give us the
07:21 - back of the card the background cards 2
07:24 - to 14 which is essentially two Jack
07:27 - Queen King and ace we're gonna have a
07:31 - deal button and a logo for the war card
07:34 - game now if we go back to content view
07:37 - we can put in a name here such as logo
07:44 - and there is a resume button here if
07:47 - you're not seeing any changes on the
07:49 - preview all you have to do is click
07:51 - resume it's going to go ahead and
07:54 - compile that code that you have and
07:56 - generate a preview essentially it's a
07:59 - simulator it's running it in the
08:00 - background you can do a live preview
08:03 - that's this button right there so if you
08:05 - click and enable that this is going to
08:08 - make it so that as soon as you make a
08:10 - change it's going to update there all
08:14 - right so that's our image that's pretty
08:15 - exciting now how do we add more elements
08:17 - to this screen
08:18 - well you're just gonna add your elements
08:21 - here right so I just showed you that
08:22 - text alright so I'm gonna say hello
08:26 - unfortunately this error is out check
08:29 - this out like we can't actually display
08:32 - the image and the text and the reason
08:34 - for that is because if you take a look
08:36 - at this this body property here it's
08:40 - supposed to return a single view you
08:43 - know it's some view meaning that it
08:45 - could be the type is not really known
08:48 - right now but it has to be a single view
08:50 - object and right here when you got to
08:53 - so the way around this is that you have
08:55 - to use a layout container or a layout
08:58 - element and there are a couple of pretty
09:00 - familiar ones if you're coming from
09:01 - UIKit so one of them is called V stack
09:04 - now this basically combines elements and
09:07 - arranges it in a vertical manner so you
09:10 - open up a pair of curly brackets and any
09:13 - elements you place inside it's just
09:15 - going to arrange them in a vertical
09:18 - fashion like we see here now check this
09:20 - out there's no errors anymore right
09:22 - because you are returning a single V
09:24 - stack view alright so that satisfies
09:28 - this but inside are actually multiple
09:31 - elements so that's how you're going to
09:34 - have a user interface with more than one
09:37 - element you're going to nest these
09:38 - different layout elements aside from the
09:41 - V stack we also have H stack and Zed
09:44 - stack and yes I said Zed stack because
09:46 - I'm Canadian I'm gonna come right out
09:48 - and say that now I'm not gonna hide it
09:51 - any longer it's a Z stack so you guys
09:53 - are just gonna have to deal with that
09:55 - okay so let me show you guys before we
09:59 - add more layout containers and add more
10:01 - elements on here I do want to show you
10:03 - guys one more thing and that's called a
10:04 - modifier so if you take a look these two
10:08 - elements are right up against each other
10:10 - what if I wanted to add some sort of
10:12 - padding let's say I wanted to maybe add
10:17 - 20 points in between these guys and you
10:21 - know I could either say that there is 20
10:25 - points of padding below the image or I
10:27 - can say there's 20 points of padding
10:29 - above the label or the text element I'm
10:32 - gonna choose I'm going to choose this
10:33 - one for now so the way you add these
10:36 - modifiers which essentially change that
10:39 - element in in different ways is just to
10:42 - call the appropriate modifier method on
10:45 - that element so for instance there is a
10:49 - padding modifier which you can do on
10:51 - most elements and you specify which
10:55 - edges you want in a set so you could
10:57 - pass in an array of let's say you wanted
10:59 - to add that 20-point padding to the
11:01 - right and the left you would pass in a
11:04 - set and you would pass in right and left
11:06 - leading and trailing for me I just want
11:09 - to put the padding on the top right now
11:11 - so I'm not going to specify a set I'm
11:14 - just going to specify a single edge and
11:15 - for the length I'm going to put 20 right
11:20 - and you can see boom right there
11:22 - so that is modifiers and if you wanted
11:25 - to let's say change the text to a
11:26 - different color you just chain it you
11:29 - just call another method and there is a
11:30 - foreground color and let's just say I'm
11:33 - going to change it to red now you don't
11:36 - need to know all of these modifiers by
11:38 - heart because you can just put your
11:41 - cursor on the element here and there is
11:44 - this drop-down add modifier and you can
11:47 - see all of these different modifiers
11:49 - that you can add to that element and
11:52 - also once you start chaining more and
11:54 - more modifiers on an element it gets
11:56 - kind of messy and so a good way to
12:00 - organize these and make it very easy to
12:03 - read it's just the hit enter before each
12:07 - modifier and then it's going to create
12:08 - it in sort of like a list below that
12:11 - element and it makes it really easy to
12:12 - read all right so I guess we got to go
12:17 - back to live preview if we want that
12:20 - alright so now you've learned about the
12:23 - V stack you've learned about you know
12:25 - modifiers why don't we start combining
12:28 - more elements let's show the two cards
12:31 - that are going to be randomized and we
12:34 - want to show it below the logo so I'm
12:36 - going to get rid of this text element
12:38 - and I am going to add the image let's
12:41 - say card two or let's say back and if I
12:48 - wanted to add another card I would do
12:51 - that but the problem is that there one
12:53 - on top of each other right this is a V
12:55 - stack so it's just going to arrange
12:56 - everything vertically if we wanted to
12:59 - arrange these two side-by-side we would
13:01 - use what's called an H stack H stands
13:04 - for horizontal and it works exactly like
13:06 - the V stack which is open up a pair of
13:08 - curly brackets and we put these two
13:11 - image elements right inside like that
13:13 - and it's going to arrange these two
13:16 - elements inside horizontally and the
13:18 - visa
13:19 - is gonna arrange the logo and the H
13:21 - stack vertically on top of each other
13:24 - and you guessed it if we wanted a button
13:26 - here we would go ahead and add that here
13:31 - so before I show you the button element
13:35 - I just want to go through a couple more
13:37 - things so I'm just gonna I'm just gonna
13:40 - put it as a label right now because I
13:42 - don't want to get into it just now so
13:45 - we're gonna change this into an actual
13:47 - button element in a second alright so
13:50 - now you know about H stack you know
13:53 - about V stack there is another one
13:56 - called a Zed stack which I alluded to
13:58 - earlier and this one arranges elements
14:01 - in front and behind of each other like
14:04 - on top of each other I guess you could
14:06 - call it so if I wanted to put that green
14:09 - background behind everything I would
14:12 - basically create a Zed stack and I would
14:17 - put an image here and the image is going
14:20 - to be in the background and if I wanted
14:24 - to put something in front of that
14:25 - background image I would basically put
14:31 - it inside the Zed stack but I would put
14:35 - it below that image now this background
14:38 - isn't showing up I might have called it
14:42 - the wrong thing yeah so this background
14:43 - has a capital B that's why so I could
14:49 - either do that and then we're gonna see
14:52 - the green background right right there
14:57 - with this V stack on top of the image
15:02 - you see how that's happening with a Zed
15:04 - stack that's what that does but I'm
15:06 - actually going to change this to a
15:07 - lowercase B and change this element I'm
15:13 - just gonna press Enter whoops not there
15:16 - my press Enter and change it to a
15:18 - lowercase B so it's consistent with
15:19 - everything else alright so we've got
15:23 - that and we need to add some modifiers
15:27 - to the image the reason is because you
15:30 - see it's
15:31 - not reaching all the way up to the top
15:34 - so which modifiers are we going to add
15:35 - well the first one is I'm going to add
15:38 - one called resizable which is going to
15:41 - basically allow this element to change
15:44 - sizes and then I am going to add a
15:47 - second one called
15:49 - ignore safe area and this area right
15:53 - beside the notch that's considered not
15:56 - safe because if you have things go into
16:00 - that area I might get blocked by the
16:01 - knotch but I do want the background to
16:03 - go all the way up so I'm going to tell
16:04 - it to ignore safe area on all edges and
16:07 - I'm just going to choose all as the
16:09 - parameter there so then you get that now
16:12 - again to make it a little tight here I'm
16:15 - just gonna hit enter in front of these
16:17 - two and so that it's it's very easy to
16:22 - read
16:24 - okay so we've now got the background
16:27 - here now I want to show you something
16:31 - else you can see that everything is kind
16:35 - of scrunched in the middle right and
16:37 - that's with you I'm making assumptions
16:39 - on what we want we didn't have to
16:41 - specify constraints the center anything
16:44 - or do anything like that and a swift UI
16:46 - is just making safe assumptions but I
16:49 - can't want there to be some spacing in
16:53 - between these elements so there is an
16:55 - element called a spacer and the way that
16:58 - a spacer works is that it takes up all
17:00 - the available space that is left let me
17:04 - show you how this works so let's say I
17:07 - wanted to create some space in between
17:09 - the logo and the two cards here is the
17:13 - logo and here is the H stack containing
17:15 - the two cards if I put a spacer element
17:18 - here that's going to basically take up
17:22 - all the available space and push
17:23 - everything else apart the cool thing is
17:29 - that I can put a spacer also below the
17:33 - deal button and what's going to happen
17:37 - is that this spacer and this spacer are
17:40 - going to take up equal spaces they're
17:41 - going to share the the open space
17:45 - now I can put another spacer above the
17:48 - deal button below the two cards like
17:52 - that and essentially the three spacers
17:54 - that I've put are gonna share the space
17:57 - you can see how they're kind of have
17:59 - equal spacing and if I wanted to I could
18:02 - also put a spacer above the logo here
18:05 - and that's going to add a little bit of
18:07 - space there as well so that's really
18:09 - cool
18:10 - now we also have two labels we have a
18:14 - bunch of labels in the left and right
18:16 - corner if you've done the work hard game
18:18 - in my beginner lessons for uikit the
18:21 - uikit version with Auto layout
18:22 - constraints and all that you'll remember
18:25 - that we have some labels counting the
18:27 - score so how do you think that we would
18:29 - add these labels to the bottom of the
18:32 - corners of the screen here well what we
18:36 - could do is add an H stack so why don't
18:40 - we go ahead and do that
18:41 - down here below the deal button so
18:45 - there's our H stack and what we're going
18:46 - to put our two text elements for the
18:50 - player score and the CPU score so this
18:57 - player score I actually want the player
19:00 - label to be above the zero so I am going
19:03 - to wrap this up in a V stack like that
19:12 - okay so these uh you know I'm gonna get
19:18 - rid of that so there's a little more
19:20 - space there so it's easier to read okay
19:23 - so I'm just gonna copy this V stack
19:25 - because that contains my two labels and
19:28 - add another reset but change this to CPU
19:31 - and then we have that but I want them
19:35 - spread apart right they should be in the
19:37 - two corners of the screen there so I'm
19:39 - gonna add a spacer in between these two
19:43 - V stacks and that's gonna push them
19:46 - apart and I don't want them to be all
19:50 - the way down in the corner so in this V
19:53 - step we have a spacer here we have a
19:55 - spacer here we have one here we have one
19:58 - here and I'm
19:59 - also gonna add one below this H stack
20:03 - there so see the spacer spacer below
20:07 - this H stack is right there that's gonna
20:12 - split up the space evenly so we have one
20:14 - there one there one there one there and
20:17 - one up here alright
20:20 - also these labels this one is too close
20:22 - to the left edge let's add a twenty
20:24 - point picks twenty point margin to that
20:27 - so here's the V stack for that I am
20:32 - going to add padding and I'm gonna say
20:38 - leading the length is 20 this was just
20:42 - hit enter on that and also I want the
20:45 - font the text in there to be white so we
20:49 - can actually do that to foreground color
20:51 - and it's use white and notice how I
20:55 - didn't do it to the individual text
20:58 - elements I did it I applied that to the
21:00 - entire V stack and that affected both of
21:03 - the text elements inside so that's
21:05 - really cool alright so now to work on
21:07 - this V stack we're gonna do the same
21:10 - thing so I'm just gonna copy this
21:12 - actually will paste it right there
21:14 - except that this one's not leading we're
21:17 - gonna use trailing because it's the
21:19 - right edge right all right and if we
21:23 - wanted to we could just make this text a
21:26 - little bigger as well and a little
21:28 - bolder so I am going to say that I'm
21:32 - just going to bold that or you could
21:34 - change the font weight and I'm also
21:36 - going to add padding to the bottom edge
21:40 - and let's say that's going to be 20 as
21:43 - well okay so that's just putting some
21:45 - space there and do the same thing to the
21:52 - CPU
21:56 - like that's okay so if we wanted to
21:59 - change the font size we could we could
22:01 - add a modifier and change the font I
22:07 - forget I actually forget which exact one
22:11 - there is but if we looked at if we
22:14 - looked at the modifier list you can
22:17 - probably find it I'm not going to do
22:19 - this right now because exercise no font
22:23 - okay you guys figure it out you let me
22:25 - know in the comments below okay alright
22:28 - now we are going to work on the button
22:30 - now we can finally get to the button
22:32 - because our layout looks pretty good now
22:33 - this is pretty close to what we want and
22:37 - everything I hope everything's made
22:38 - sense so far pretty intuitive right you
22:41 - have your H stacks your V stacks or Zed
22:43 - stacks and you just have elements inside
22:46 - of those nested in there to kind of
22:49 - create this layout here alright so right
22:51 - here is our button element well it's
22:54 - actually a label but we're gonna change
22:56 - it to a button so let's erase this and
22:58 - let's call that a button and we're gonna
23:02 - create a new button element and for
23:05 - buttons it accepts two parameters an
23:08 - action and a label so the action is a
23:12 - block of code that you can pass in to be
23:14 - run when the button is tapped and for
23:16 - the label it's basically what you want
23:18 - to show for the button so let's go ahead
23:22 - and click that open and I'm going to
23:24 - open up a closure for the action now
23:27 - this we're gonna just get to this in a
23:29 - second as for the label when you double
23:32 - click that it actually opens up a
23:35 - trailing closure for you and in here
23:39 - you're gonna return an element which you
23:41 - want to use so check this out you know
23:44 - we can do that and you know it's gonna
23:46 - be looks like a standard iOS button but
23:51 - instead of text we can actually put an
23:54 - image in there and we're gonna use our
23:58 - image offset deal button the only
24:00 - problem is that you can see here it's
24:02 - all blue and that's because it just
24:05 - treating it like text right so the ten
24:07 - colors blue but what we can do
24:10 - is we can change we can add a modifier
24:12 - for the rendering mode and we can pass
24:15 - in original and that's actually going to
24:19 - show the the full-color graphic image
24:22 - like we want so there's our deal button
24:24 - there now what do we want to happen when
24:27 - the deal button is tapped well we want
24:29 - to randomize some parameters and
24:31 - basically show the images there but how
24:34 - are we going to affect essentially what
24:38 - you know how are we going to change this
24:41 - image you inside this h stack we needed
24:43 - to change this to like car to car 3 or
24:46 - whatever when this button is tapped on
24:48 - well there's this concept called state
24:51 - properties inside swift UI and so what
24:55 - we're gonna have happen is we're going
24:58 - to tie this image to a state property
25:02 - I'm going to tie this one to another
25:03 - state property and then when you click
25:05 - the deal button we're just going to
25:07 - randomize and change the values of those
25:09 - state properties and because these two
25:12 - images are kind of observing or looking
25:16 - at those two state properties they are
25:18 - going to update themselves automatically
25:20 - when we change those the values in those
25:23 - state properties it's kind of like magic
25:25 - you're gonna see it's really cool so up
25:27 - here let's declare a new state property
25:31 - and this is how you declare it you say
25:33 - that use the @ symbol and the right
25:35 - state and then we're gonna create a
25:37 - private variable and I'm gonna call this
25:40 - maybe random number 1 and I set that to
25:47 - maybe I'll set that the 2 because 2 is
25:51 - the lowest card that we have let's see
25:57 - what this says here oops sorry I put it
25:59 - in the wrong home place it's actually
26:02 - supposed to be here inside the content
26:05 - view struct my bad let's declare them up
26:09 - there because this is inside the body
26:14 - property here all right so we're gonna
26:16 - declare that and we're gonna declare
26:20 - another state property which we're gonna
26:22 - call random number
26:23 - and while we're at it no actually we'll
26:27 - do the score ones a little later let's
26:28 - just focus here on this first
26:30 - alright so ran one and ran two and we're
26:33 - gonna set them to two respectively so in
26:36 - here you know instead of card to or what
26:40 - we're gonna have is card and then we're
26:43 - gonna plus R and number one that's an
26:48 - integer type though so that's not going
26:51 - to really play nice it's not going to
26:54 - automatically concatenate that we're
26:56 - gonna have to cast this integer to a
26:58 - string so we're just gonna declare a
27:01 - string and pass in the integer like that
27:04 - you can see here
27:06 - let's hit resume you're gonna see the
27:10 - two there see if I change this to a
27:13 - three or let's change it to a four let's
27:18 - change this to a live preview you're
27:23 - gonna see that update to a four see cool
27:28 - alright and then for the right-hand side
27:31 - car we're going to do the same thing
27:33 - we're gonna actually remove the number
27:34 - and make it depend on the r and num2
27:38 - state property then you see four and two
27:42 - and if i change this to 5 and i hit
27:46 - resume that's going to change to a 5
27:50 - alright so now all we need to do is when
27:53 - this button is tapped we're going to
27:55 - randomize the integers randomize the
28:04 - state properties
28:11 - what is this typing if you guys have a
28:17 - good mechanical keyboard recommendation
28:19 - let me know in the comments below I'm
28:21 - looking for one okay
28:23 - so R and actually we have to use self
28:27 - because we are referring to properties
28:30 - inside of a closure here and so we're
28:33 - gonna be specific and specify which one
28:36 - we want and we're gonna use int random
28:44 - and we are going to specify to 214
28:49 - that's what we had and then we're also
28:52 - gonna randomize the second state
28:54 - property we're going to use the random
28:56 - function method again here and for the
29:00 - range we're gonna again put two 214 all
29:04 - right and let's just launch this in the
29:07 - simulator and see what we have because
29:08 - we can have some fun with it right now
29:10 - and so you can see this is essentially
29:14 - Swiss you I like it
29:15 - it's pretty intuitive in terms of
29:17 - building the user interface and in terms
29:20 - of you know some pretty simple logic
29:23 - like this it's pretty easy to hook code
29:27 - so when I'm hitting this deal button
29:29 - it's basically randomizing and changing
29:32 - the values and these two state
29:33 - properties and because the two image
29:36 - elements are depending on those state
29:37 - properties they're updating themselves
29:39 - automatically I don't have to explicitly
29:41 - tell the image to change you know it's
29:45 - just doing it so that's really really
29:47 - cool now we're gonna do the same concept
29:50 - and we're gonna apply it to the score
29:53 - the updating of the score labels down
29:55 - here so we're gonna just create two more
29:57 - state properties
30:03 - let's just call the score one in score
30:06 - two and down here instead of zero for
30:12 - the text we're going to pass in a score
30:16 - self-thought score one actually I don't
30:19 - think we need to do yourself there
30:21 - because we're not working inside of a
30:23 - closure and we are going to also those
30:26 - score to score to make sure it's score
30:30 - two otherwise you're going to get some
30:31 - weird logic errors so this is reading
30:34 - from score one state property and this
30:37 - one's reading from score two or
30:38 - observing it and we are gonna have to
30:41 - update those two numbers alright so in
30:43 - here it's a simple if statement update
30:47 - scores so we're gonna say if self dot R
30:52 - and num 1 is greater than self dot R and
30:56 - num2 then we are going to say score 1
31:01 - plus equals 1 which is just going to
31:04 - increment it by 1 also self thought
31:06 - Brandon no 2 is greater than self dot
31:10 - Brandon um 1 then we're gonna have score
31:14 - 2 plus equals 1 so that's going to
31:16 - increment the second score to oops
31:22 - stuff there and that's it let's run it
31:28 - this is the work our game guys we are
31:33 - done that's so easy I felt like it was
31:38 - really easy when I use this as a
31:40 - practice it was like wow mi are you
31:44 - serious I think teaching this to
31:46 - beginners is going to be a lot of fun
31:47 - because when we did the uikit version I
31:50 - had to explain auto layout constraints
31:52 - and then a lot of people would would
31:55 - apply them wrong and then they wouldn't
31:58 - get the same layout and was very
31:59 - frustrating I'm sure a lot of people
32:01 - just got frustrated and gave up and
32:03 - didn't even try to you know ask for help
32:05 - and figure it out the other thing is
32:08 - that in the UI conversion you had to
32:10 - connect all of these IV outlet
32:12 - properties to the elements on the
32:13 - storyboard and a lot of people would
32:16 - miss connect them and it would just
32:17 - crash their app and they would go down
32:20 - this rabbit hole try to figure that out
32:21 - and I'm sure a lot of people just gave
32:23 - up too so I think this is going to be a
32:26 - lot easier for beginners to pick up and
32:30 - that's always good right
32:33 - frustration early on is is sometimes the
32:36 - the killer of what could be a future
32:39 - amazing developer a whole new career or
32:42 - you know a very successful app but that
32:46 - early early frustration you know is is
32:49 - dangerous it can kill a lot of the hopes
32:52 - and dreams anyway so I hope you guys
32:53 - enjoyed this Swift UI demo for the war
32:56 - card game
32:56 - so what do you think when I compare the
32:59 - UI kit storyboard version that I built
33:02 - in my original video series versus this
33:04 - Swift UI version
33:05 - I think this Swift UI version actually
33:07 - has more lines of code but it is
33:09 - actually easier and faster to build
33:11 - because unlike the UI kids storyboard
33:14 - version I'm not dragging and dropping
33:16 - elements onto the storyboard configuring
33:19 - auto layout constraints and then
33:21 - connecting iboutlet properties and IB
33:24 - action methods and so we save a lot of
33:27 - time that way furthermore with doing all
33:30 - of that stuff with the UI kit storyboard
33:32 - version there's a lot of opportunities
33:34 - to make mistakes such as connecting the
33:37 - wrong element making a typo when you're
33:39 - connecting those iboutlet properties
33:41 - miss configuring auto layout constraints
33:44 - and stuff like that I feel really good
33:46 - about the future of swift UI and it
33:48 - reaffirms my belief that with Swift UI
33:51 - it's going to be even easier for
33:53 - beginners to get into the world of iOS
33:55 - app development with that said thanks so
33:57 - much for watching and don't forget to
33:58 - hit that thumbs up button thanks again
34:00 - I'll see you in the next lesson