00:00 - hello and welcome to my Swift tutorial
00:01 - for beginners in this video I want to
00:03 - tell you all about optionals which are
00:05 - probably one of the most confusing
00:06 - topics for beginners if you've ever
00:09 - looked at Swift code and come across
00:11 - exclamation marks or question marks then
00:13 - you've come across optionals so let's
00:15 - get started and find out what they're
00:17 - all about so to demonstrate what an
00:24 - optional is let's first take a look at
00:26 - how we've been declaring our variables
00:28 - and constants as you remember whenever
00:31 - we declare a variable we use var and
00:33 - then we use some sort of name let's just
00:35 - say a for this example and up until this
00:39 - point you've always seen me assign
00:41 - something into my variable declarations
00:44 - something like this for whether I
00:47 - declare you know a string I'm always
00:50 - assigning a piece of data into my
00:54 - variable declaration or constant
00:56 - declaration right away now there will be
01:00 - instances when you're building apps that
01:02 - you may not want to assign data to your
01:06 - variable right away you might just want
01:07 - to declare it but if we try to do that
01:11 - let's erase this assignment statement
01:14 - and you erase the data as well and just
01:16 - leave it at that you'll see that Xcode
01:21 - really doesn't like that and that's
01:23 - because it wants to make sure that all
01:26 - of your variables and constants actually
01:29 - are keeping track of some sort of data
01:31 - because that's the purpose of their
01:33 - variable and the constant right well
01:35 - using optionals you can create a
01:37 - situation where you declare a variable
01:40 - or a constant without assigning
01:43 - something to it first in which case it
01:46 - is empty so how do you define emptiness
01:49 - well there's actually a type for empty
01:52 - and it's called nil and it's simply a
01:55 - keyword like that ni L which stands for
01:58 - empty or nothing now if we don't want to
02:02 - assign actual data to our variable first
02:05 - we can assign it mil like that right
02:12 - that means that that variable contains
02:14 - nothing however as you can see we're
02:19 - still having some problems here remember
02:22 - I told you about data types for
02:24 - variables and how variables can only
02:27 - store data of a certain data type and
02:29 - you can explicitly state the data type
02:33 - of that variable and if you don't then
02:36 - it's going to take on the data type of
02:38 - the first piece of data that you assign
02:41 - to it so for example for a if I did that
02:45 - then it would take the data type of my
02:49 - integer and it would determine that a
02:51 - should have the data type of int in the
02:55 - case of nil however there is no data
02:58 - type for empty and so variable a really
03:02 - doesn't have a data type right now and
03:04 - we have to give our variable a data type
03:06 - so in this case if you're going to
03:09 - assign empty into your variable that
03:11 - means you don't want to put any data
03:12 - into it yet we have to explicitly put a
03:15 - data type now let's go ahead and put int
03:20 - right and for this one let's put string
03:24 - like that let's run it as you can see
03:29 - there is still a problem because the int
03:32 - data type doesn't include empty in fact
03:35 - none of the data types include nil as a
03:38 - valid value they nil is not a valid
03:41 - integer and nil is also not a valid
03:44 - string so that's why we can't assign nil
03:47 - to an integer variable and we can't
03:50 - assign nil to a string variable well
03:53 - this is where optionals come in by
03:55 - adding a question mark to the data type
03:57 - like this this becomes an optional
04:05 - integer which means that it could either
04:08 - be an integer or it could be nil same
04:11 - thing goes for this right here the data
04:14 - type is now it's not string it's an
04:17 - optional string which means that it
04:19 - could contain a string object or it
04:21 - might contain no so that's the gist of
04:24 - an optional
04:25 - in order to demonstrate how to work with
04:27 - optionals I'm going to use another
04:29 - example so let me delete this for now
04:31 - and then let me grab a piece of code
04:34 - that I prepared for you let me just run
04:37 - the project here make sure that it runs
04:39 - as you can see here I have a class
04:42 - called Christmas present and this class
04:44 - contains a function called surprise
04:47 - which returns an integer now this
04:50 - integer is going to be a random number
04:52 - from 1 to 10 so why don't we just use
04:56 - this code here let's use let present
05:03 - equals let's create a new Christmas
05:06 - present object using that remember
05:11 - initializer functions right and then we
05:14 - want to activate the surprise so sorry
05:19 - present dot surprise and then we're
05:24 - going to print the output of that
05:27 - function so let's run our code and we
05:32 - get 5 in our console right here so
05:34 - that's the surprise now this data type
05:38 - of this constant right here if I
05:42 - explicitly declare it would be the type
05:46 - of my class right next why don't we make
05:48 - this an optional type by adding the
05:50 - question mark there and then let's say
05:53 - that we put nil in there you can see
06:00 - here that there's an error Xcode says
06:03 - that the value of optional type
06:05 - Christmas present must be unwrapped to
06:08 - refer to the member think of member as
06:12 - function or property must be unwrapped
06:16 - to refer to the function surprise right
06:19 - and the reason for this is because I
06:22 - told you with an optional datatype this
06:26 - constant could contain a Christmas
06:28 - present object or it could contain nil
06:31 - and in this case we do know that it
06:33 - contains nil so what that means is that
06:35 - you have to check that optional constant
06:38 - or off
06:38 - variable to see if it actually contains
06:41 - an object or if it contains nil before
06:44 - you access any of its functions or
06:46 - properties because you can't call a
06:49 - function on empty ray you can't access a
06:53 - property of nil so what we have to do in
06:57 - this case is just double check that the
06:59 - constant present actually contains an
07:03 - object a Christmas present object to be
07:05 - specific before we call the surprise
07:08 - function on it now there are several
07:11 - ways of checking an optional type to see
07:14 - if it's nil before using it and I'll
07:16 - demonstrate some of them let me erase
07:18 - this line first so we are going to check
07:21 - the optional to see if an object exists
07:28 - or if it contains an object let's say it
07:34 - like that so the first thing we can do
07:37 - is basically compare it to nil with an
07:41 - if statement so if present is equal to
07:47 - nil if this is true then it contains no
07:54 - so don't do anything with it
07:56 - else it contains an object right now the
08:05 - reverse of this is also true you can
08:07 - check if present not equal to nil right
08:11 - and if it's not equal to no then it
08:15 - contains an object so why don't we use
08:18 - this statement here because we want to
08:21 - only call the surprised function if
08:24 - there is an object and we don't really
08:26 - need to do anything with it if it is a
08:28 - nil so why don't we erase this one here
08:32 - and let's use this one so it contains an
08:35 - object now call the surprised function
08:41 - now since I have already checked that it
08:45 - contains an object I should be able to
08:48 - just call surprise right you'll notice
08:51 - that X
08:52 - code has helped us put this question
08:55 - mark here because that's what it thinks
08:57 - you want to do but I'm going to erase it
09:00 - because I want to demonstrate something
09:01 - for you see if I try to run this there's
09:05 - an error because you see with an
09:08 - optional variable or an optional
09:10 - constant before you can actually access
09:13 - the value inside that optional data type
09:16 - whether that's a natural object or
09:18 - whether that's nil you have to unwrap
09:20 - that optional now I know that's a weird
09:22 - term but a good analogy or a good
09:25 - metaphor to think about an optional
09:27 - variable is that it's like a Christmas
09:30 - present or it's like a box and you don't
09:33 - know what's inside of it it could
09:34 - actually contain an object or it could
09:37 - be nil but you're never going to know
09:39 - unless you unwrap it first you open that
09:43 - box to see what's inside now right here
09:46 - you you might say hey we've already
09:48 - checked that it's not nil right so this
09:52 - check is kind of like taking that box
09:54 - and just shaking it and listening to it
09:57 - you know when you're a kid trying to
09:59 - find out what's inside your present
10:00 - that's what that's like and all that
10:02 - does is that it tells you if there's
10:05 - something inside I mean if it's nil
10:07 - you're shaking it this it's gonna not
10:09 - gonna sound like anything but if there's
10:11 - a natural object inside and you shake it
10:13 - you'll hear something
10:14 - so this check right here lets you know
10:17 - that there is something inside but that
10:18 - doesn't mean that you can access what's
10:20 - inside right until you unwrap it so let
10:23 - me show you how you can unwrap that
10:24 - variable and get at the object so that
10:27 - you can call the surprise function on it
10:30 - all you have to do to unwrap this
10:34 - optional variable is use the exclamation
10:37 - mark after it and what that does is it
10:40 - tears open that box and you get whatever
10:43 - is inside whether that is the actual
10:45 - Christmas present object or whether
10:47 - that's no so because we've already
10:49 - checked here that it is an object I'm
10:51 - gonna say dot surprise and I can print
10:57 - that right so let's run the statement
11:01 - here actually nothing is going to run do
11:05 - you know why
11:05 - because it's actually nil right so our
11:09 - if statement actually worked so this if
11:12 - statement said if it's not nil right
11:15 - then unwrap it and then call the
11:17 - surprise function on it but since it is
11:19 - nil didn't do anything so why don't we
11:21 - change this statement why don't we
11:24 - actually put a present inside the box so
11:27 - now when we run it we're going to get
11:30 - the random number surprise which is 6 so
11:33 - now you know how optionals work but I
11:35 - mentioned there are a couple of
11:37 - different ways of checking right to see
11:39 - if there's an object inside of your
11:41 - optional so this is one way another way
11:44 - is called optional binding and this is a
11:48 - little bit more advanced than that basic
11:51 - check there and it's kind of another way
11:54 - of writing an if statement so you say if
11:58 - let say actual present equals present
12:08 - then we will print actual present dot
12:13 - surprise so let me explain this
12:17 - statement right here it's still an if
12:20 - statement so you're checking something
12:23 - you're actually checking to see if
12:25 - present this optional variable to see if
12:30 - it's nil or not if it is nil then it's
12:34 - just going to pass through this if
12:35 - statement and not execute the stuff
12:37 - inside however if this optional variable
12:41 - does contain an actual object then it's
12:43 - going to assign it to this constant that
12:46 - you're creating right here called actual
12:48 - present so it's almost like two
12:51 - statements in one the if statement
12:54 - checks to see if it's nil if it's not
12:56 - nil then you're gonna assign the actual
12:59 - object unwrapped into actual present
13:04 - this constant and then you can inside
13:06 - that if they mean you can use actual
13:08 - present as the actual object because
13:11 - what it will do is that it's going to
13:14 - take the unwrap object and assign
13:16 - to actual present okay so you don't have
13:18 - to do any unwrapping here and then you
13:21 - can just call surprise
13:22 - so you'll see six and four four was from
13:27 - here and six was from here all right
13:30 - last thing to show you about optionals
13:33 - is another thing called optional
13:37 - chaining now this is what you saw a
13:41 - little earlier when Xcode tried to put a
13:44 - question mark there so let me show you
13:47 - what that is so you put in a question
13:50 - mark next to the optional variable and
13:54 - then you call your method like that
13:56 - so with optional chaining you can see we
13:58 - don't have any if statements or anything
14:00 - like that but basically what this does
14:03 - is it checks to see if this is going to
14:07 - be nil or if it actually is an object if
14:09 - this is nil nothing happens you're not
14:11 - going to call that function however if
14:13 - there is actually an object in there
14:16 - then it's going to call the next part on
14:20 - that object so in this case it's going
14:22 - to call the surprise function on the
14:24 - actual object because there is an object
14:26 - in that optional so that's what's known
14:29 - as optional chaining so why do we even
14:31 - have optionals and Swift well the reason
14:34 - is because Swift is a type safe language
14:36 - and what this basically means is that
14:38 - Swift forces you the programmer
14:41 - to be very specific about the types of
14:43 - data that you're working with in your
14:45 - code and in the long run this actually
14:47 - helps you because it forces you to think
14:50 - about things thoroughly such as if this
14:54 - variable will need to contain nil or if
14:56 - it's always going to have a value and
14:58 - also how we're restricted to a certain
15:01 - data type for a variable or you're not
15:04 - going to accidentally assign another
15:06 - data type to that variable because it is
15:09 - type safe so I just wanted to revisit
15:12 - some of the ways of declaring our
15:14 - variables and constants with optionals
15:17 - now because there's one thing that I
15:20 - haven't shown you yet and that's what
15:22 - I'm going to show you now so in here
15:24 - line 3 you see kind of the standard way
15:27 - where we declare a variable
15:29 - with the type and then we assigned data
15:31 - to it and you've also seen about how you
15:34 - can add the question mark after the data
15:37 - type to turn that into an optional type
15:39 - and you can assign nil into it well you
15:42 - can also just do this and that's
15:46 - absolutely fine because when you declare
15:49 - an optional data type like this for
15:52 - variable C by default it's going to be
15:55 - nil so you don't actually have to
15:56 - explicitly assign nil to it so when
15:59 - you're declaring optionals I would
16:01 - recommend that you do it this way there
16:03 - is also another type of optional that
16:06 - you can declare and that is using the
16:12 - exclamation mark now I know in this
16:14 - lesson I showed you that putting an
16:17 - exclamation mark is unwrapping that
16:20 - variable or constant to see what's
16:23 - inside the optional right well this is
16:25 - called an unwrapped optional so this
16:28 - allows you to D can store a string or
16:34 - nil but it is already unwrapped so you
16:40 - don't have to unwrap it but it can also
16:44 - store nil C can store a string or nil
16:50 - but it is wrapped so you have to unwrap
16:55 - it in order to see the contents whether
16:57 - it's nil or the actual string so when
17:00 - would you want to use this sort of
17:02 - optional vs. this one well I would say
17:05 - in general you would want to use this
17:06 - one because it provides that sort of
17:08 - type safety checking that Xcode has so
17:12 - when you try to use C in some weird way
17:14 - and you're not checking against nil
17:17 - Xcode is gonna warn you hey this is an
17:19 - optional so you you might have to check
17:22 - for nil before using it you might not be
17:25 - able to call this property or this
17:27 - method on C because it might be empty so
17:29 - it provides you all of those warnings
17:33 - which makes you a better programmer and
17:36 - it makes your code more robust than
17:39 - it'll probably crash less so if you use
17:42 - this instead you can also store nil or
17:45 - values in here so it gives you that
17:47 - flexibility but it's not gonna have any
17:49 - of that type safety checking so Xcode is
17:52 - just going to assume that you know what
17:56 - you're doing it's not gonna warn you
17:59 - that it might be nil because it's
18:00 - already unwrapped right but just know
18:03 - that deke may contain nil so it's it's
18:06 - almost like you are driving without a
18:09 - seat belt maybe that's a bad example but
18:11 - hey because there are places where you
18:12 - might want to use this you know for sure
18:14 - that only initially it may be nil but
18:18 - then after a certain point you can
18:19 - always be sure that there's a value then
18:22 - maybe it's safe to use that and then you
18:24 - can ignore all of that sort of optional
18:29 - binding optional chaining all of those
18:31 - checking for nil you can save all of
18:34 - that code however if it's a variable
18:37 - which may contain the value in the nil
18:40 - and then that value might get erased so
18:41 - it's nil again and it keeps flipping
18:43 - back and forth then maybe having it as
18:46 - this sort of optional is better because
18:48 - then it forces you to remember to do
18:51 - that checking so I just wanted to give
18:53 - one more quick example about these two
18:56 - kinds of optionals using our Christmas
18:58 - present class so why don't we declare a
19:01 - new Christmas present like so let's say
19:05 - present 1 is equal to well let's declare
19:09 - the type of this so we're going to
19:13 - declare a new Christmas present optional
19:16 - like so and we're going to assign it nil
19:18 - right and then we're going to do
19:22 - Christmas present too and we're going to
19:24 - use this and remember we don't actually
19:27 - have to assign it to no but I'm going to
19:29 - write it anyways just so it's very clear
19:32 - to you what's inside these variables
19:36 - right here so if I wanted to let's say
19:40 - do present 1 dot surprise like that
19:43 - let's remove the optional chaining you
19:48 - know we get that sort of type safety
19:50 - checking it's saying that it's an
19:53 - optional it might be nil if it's nil
19:55 - then you can't call
19:56 - surprise on it so make sure you you know
19:59 - you do some sort of checking however if
20:02 - I do present to dot surprise you can see
20:05 - that let me just show you can you type
20:08 - it out you can see when I do that
20:11 - there's no sort of there's no optional
20:14 - chaining there there's no you don't have
20:16 - to unwrap it at all or anything like
20:18 - that it just treats it as an unwrapped
20:22 - optional you can just use it as is and
20:23 - you're not going to get any sort of
20:26 - warning so I'm gonna run this but now
20:29 - you get an actual app crash so you know
20:34 - if this goes unchecked and you launch
20:36 - your app and the user is using it then
20:38 - you're actually getting gonna get an app
20:40 - crash which is really bad whereas if you
20:43 - did it with this sort of optional you
20:47 - know even as you're running it you're
20:49 - gonna get a warning from Xcode forcing
20:53 - you to fix that and address that before
20:55 - actually shipping your app or even
20:57 - allowing you to run your code so like
21:00 - all the other things we're learning
21:01 - about Swift we can go deeper there are
21:04 - additional things that you can learn
21:05 - about optionals but this is your
21:07 - introduction and I just wanted to tell
21:09 - you what they are and a little bit about
21:11 - how to use them practically speaking
21:13 - you'll be using them most of the time
21:15 - like how we covered in this lesson in
21:17 - the future we'll cover more of the
21:18 - complex aspects of optionals also you
21:22 - might be wondering why and when we would
21:23 - use optionals but let me tell you you
21:25 - will definitely come across optionals
21:28 - when you're building apps and when we
21:29 - get to building our apps together now
21:31 - you'll know what they are and how
21:32 - they're used because you've watched this
21:34 - lesson now if you like this video please
21:36 - hit the thumbs up button and hit
21:37 - subscribe if you haven't already all
21:39 - right click on over there for the next
21:41 - lesson and I'll see you there