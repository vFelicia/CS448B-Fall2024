00:00 - back in module one you learned all about
00:01 - classes you learned about why we use one
00:04 - how to declare one and finally how to
00:06 - declare methods and properties in the
00:08 - class and if you don't remember we used
00:11 - an example of a spaceship and we wrote
00:12 - out a spaceship class with the crews and
00:15 - the thrust methods well let me pose a
00:17 - question to you what if we needed a
00:19 - slightly different spaceship one that
00:21 - let's say it was round in shape instead
00:24 - of cylindrical in shape and let's say
00:26 - they both behaved the exact same way
00:27 - they can both cruise and they can both
00:29 - thrust
00:30 - now you could declare an entire new
00:32 - class for this new round spaceship but
00:35 - you would have to rewrite the cruise and
00:37 - the thrust methods and thus you're gonna
00:40 - create a lot of duplicate code and not
00:42 - to mention that it's gonna take you a
00:43 - lot of time to do work that you've
00:45 - already done this is where subclassing
00:47 - and inheritance can help you this
00:49 - feature and Swift enables you to create
00:51 - a class that is based off of another one
00:53 - when you do this your new class is
00:56 - called a subclass of the other one and
00:58 - the other one is referred to as the
01:00 - superclass of your new class when you
01:02 - subclass another class your new class
01:05 - contains all of the methods and
01:07 - properties of the superclass now keep in
01:09 - mind that the methods and properties of
01:11 - the superclass aren't copied into the
01:14 - subclass there is no duplication of code
01:16 - just by specifying that your class is a
01:19 - subclass of the superclass it will have
01:22 - the methods and properties of the
01:23 - superclass this is called inheritance
01:25 - the subclass inherited these methods and
01:28 - properties from the superclass ok that
01:31 - was a lot to soak in I know let's go
01:33 - into a playground and I'll show you
01:35 - exactly how it works so here I've got a
01:37 - playground and all that I have in this
01:40 - playground is a spaceship class now this
01:43 - might bring you back all the way to
01:44 - lesson 7 when we first introduced
01:47 - classes we used the same spaceship
01:49 - example so let me just refresh your
01:51 - memory about what we have here so we
01:54 - have a spaceship class we have a
01:56 - property on line 7 here called fuel
01:59 - level it's an integer property it's set
02:03 - to 50 and then we've got 2 functions
02:06 - we've got cruise and we've got thrust
02:08 - both of them just print something out to
02:11 - the console area so
02:13 - try to declare a new spaceship like that
02:19 - we're creating a new spaceship object
02:21 - and we are assigning it to a new
02:23 - variable that is called a ship so I can
02:26 - do something like ship maybe I can print
02:30 - the fuel level and then that will print
02:32 - out 50 down there and I can also say
02:36 - ship dot cruise that's going to output
02:40 - spaceship cruise and I can do ship dot
02:44 - thrust like that and now let's say that
02:48 - I wanted to declare a new class to
02:50 - represent a UFO now you could say that a
02:53 - UFO is still considered a spaceship and
02:55 - it's got fuel and it can cruise and
02:58 - thrust and I guess you could get
03:00 - technical with me and say that we don't
03:02 - really know if a UFO would contain fuel
03:05 - or not but for argument's sake let's say
03:08 - that it uses fuel just like our
03:10 - spaceship does and it can cruise and
03:11 - thrust so if I were to write this UFO
03:14 - class that can do everything that this
03:16 - spaceship class can do I wouldn't want
03:18 - to reinvent the wheel and read it clear
03:20 - the property and retype out those
03:23 - functions for cruise and thrust
03:25 - I would instead want to declare that my
03:28 - UFO class is a subclass of my spaceship
03:32 - class so how we do that is after the
03:36 - name of the class we use : and then you
03:38 - can put a space and then you type in the
03:41 - class that you want to subclass from and
03:44 - then just like any other class you open
03:47 - up a set of curly brackets so inside
03:51 - this opening curly bracket in this
03:53 - closing curly bracket that's the
03:54 - definition for your UFO but check this
03:56 - out I'm not going to put anything in
03:58 - here right now I'm just gonna leave it
04:01 - like that and I can declare a UFO
04:06 - variable let's create a new UFO object
04:09 - and I can access using dot notation the
04:16 - fuel level for my UFO all right I can
04:22 - Kruse and I can thrust but I did not
04:28 - have to declare any of this code right
04:30 - the fuel level the cruising and
04:32 - thrusting I did not have to declare any
04:34 - of that inside my class definition for
04:37 - UFO because I said that it is a subclass
04:42 - of spaceship so it inherits
04:44 - automatically all of the stuff inside
04:47 - spaceship alright so the console area
04:50 - down here is getting a little bit messy
04:51 - so let me actually get rid of the
04:55 - spaceship declaration and calling the
04:58 - spaceship version of the cruise and
05:00 - thrust let's get rid of that and then we
05:04 - just have the printouts from our UFO but
05:08 - you can see here that calling UFO dark
05:11 - cruise and thrust it actually outputs
05:14 - spaceship cruise and spaceship go and
05:17 - the reason for that is because it's
05:19 - taking these definitions of this
05:21 - function from the spaceship class in
05:24 - other words the UFOs superclass now
05:28 - ideally when I call you fo dot crews I
05:31 - would want to say UFO cruise right and
05:34 - if I call you fo dot thrust I want to
05:36 - call you FL go however I don't want to
05:40 - change this like that I mean this will
05:44 - definitely get me what I want right and
05:46 - now this these print outs are exactly
05:49 - what I want but I'm fundamentally
05:51 - changing the definition of spaceship
05:53 - right if I created a spaceship
06:00 - like this and then I called ship cruise
06:05 - it would still say UFO cruise and this
06:08 - doesn't make sense
06:09 - so actually what I want to do is I want
06:12 - to change the definition of the cruise
06:16 - function and the thrust function
06:19 - specific to this class right and I want
06:22 - to leave this as spaceship cruise and
06:29 - spaceship go and we can do this by using
06:34 - a special keyword called override what
06:37 - we do is for example if we wanted to
06:40 - change the definition of thrust inside
06:43 - the UFO class we would say override and
06:46 - then we would declare the exact same
06:48 - function like that but inside that
06:51 - function we put a different piece of
06:53 - code here I'm gonna put UFO go and let's
06:59 - override the cruise function as well
07:09 - that and you can see down below here
07:12 - that when I call the cruise function of
07:17 - the spaceship that's what I did right
07:19 - here the spaceship object
07:21 - it says spaceship cruise and when I call
07:24 - the cruise or thrust of the UFO object
07:27 - it uses my overridden
07:30 - definitions here now let me do some
07:33 - cleanup again and I'm going to get rid
07:36 - of these code statements here and let me
07:39 - get rid of that as well so all I have is
07:42 - a new UFO object inside my UFO variable
07:45 - now sometimes inside an overridden
07:48 - function you're going to see something
07:51 - that looks like this the super keyword
07:54 - now when I type in super inside UFO you
07:59 - can see here it actually refers to my
08:01 - super class which is spaceship so when I
08:04 - go super dot that is actually accessing
08:08 - the stuff that is in the super class
08:10 - like this so from within the cruise
08:13 - function of my UFO class sometimes
08:17 - you're going to see things like super
08:19 - cruise and the reason for this is
08:22 - because sometimes that super classes
08:25 - definition contains some crucial code
08:28 - that you also want to run in addition to
08:31 - some code that you're adding because
08:33 - sometimes you don't want to completely
08:34 - change the definition of the cruise
08:36 - function sometimes you just want to add
08:38 - some additional functionality to it so
08:41 - for example if in our spaceship class we
08:44 - didn't print these statements all it
08:48 - does is actually just decrement the fuel
08:52 - level so let's say thrust takes 20 units
08:55 - of fuel and the cruise takes 5 units of
09:02 - fuel and let's say in the UFO class we
09:05 - didn't want to repeat this code and it
09:07 - uses the same amount of fuel and all we
09:09 - wanted to add was printing out something
09:12 - to the console well in that case we can
09:14 - override that cruise function and then
09:17 - we can call super dark cruise which is
09:19 - going to execute the
09:21 - in this superclass's cruise function
09:24 - here so it's gonna execute this line of
09:26 - code and then it's going to execute the
09:29 - lines of code below that as well so when
09:31 - you do it this way you're actually
09:33 - adding to the original definition of the
09:36 - function rather than completely changing
09:38 - it if you don't call super dot whatever
09:41 - that function name is then you're
09:44 - completely altering that function and
09:46 - when you call cruise on UFO it's just
09:50 - going to execute this and it's not going
09:52 - to execute any of this code in the super
09:55 - classes definition it might be a little
09:58 - bit hazy in your head right now but I
09:59 - highly recommend that you download the
10:01 - worksheet and try out those examples and
10:03 - I'm sure that with some extra practice
10:06 - it's going to become clearer in the last
10:08 - lesson you took a look at some classes
10:10 - in your kit a lot of these classes in
10:12 - UIKit are similar to one another well
10:14 - guess what most of them are subclasses
10:17 - of other classes that are also in UIKit
10:20 - I know it sounds incestuous but let me
10:22 - show you how I know this here I'm
10:24 - looking at the documentation page for
10:26 - the uiimageview class now in these
10:29 - documentation pages if you scroll all
10:31 - the way to the bottom like this you're
10:35 - going to see under relationships that it
10:38 - says inherits from and that indicates
10:41 - what the superclass is so this tells us
10:45 - that the uiimageview class is actually a
10:48 - subclass of UI view now let's click on
10:51 - this UI view class to get to its
10:54 - definition UI view is an object that
10:57 - manages the content for a rectangular
10:59 - area on the screen you can think of it
11:02 - as kind of a generic view it's a blank
11:05 - canvas it's actually what a lot of the
11:07 - UI elements are subclasses of this UI
11:10 - view element can also be a container for
11:13 - other elements let's scroll all the way
11:15 - down from the UI view class and see what
11:18 - that inherits from so the UI view class
11:21 - is a subclass of the UI responder class
11:24 - so let's click this and this class the
11:27 - UI responder class is an abstract
11:30 - interface for responding to and handling
11:32 - events you know
11:33 - the words this class contains the
11:35 - functionality to handle events from the
11:38 - user such as taps and stuff like that
11:40 - and it can handle those events and it
11:43 - can give you a chance to respond to them
11:44 - if we scroll all the way down from this
11:48 - class you can see that the UI responder
11:51 - class is actually a subclass of nsobject
11:54 - let's click into here
11:56 - now the nsobject class is the root cause
11:59 - of most objective-c class hierarchies
12:01 - from which subclasses inherit a basic
12:04 - interface to the runtime system and the
12:06 - ability to behave as objective-c objects
12:09 - I know let's say is objective-c there
12:11 - but this is what Swift objects run off
12:14 - of - in other words this class provides
12:16 - the guts of what an object is so let's
12:19 - see if we can map this out so at the
12:22 - very top of the hierarchy we have an S
12:25 - object and this provides the guts and
12:27 - functionality for objects and then as a
12:30 - subclass of nsobject we have the UI
12:32 - responder class and this class contains
12:35 - the functionality for responding to and
12:38 - handling events and as a subclass of
12:40 - that we have the UI view class and this
12:43 - class provides the basic functionality
12:45 - for being an element in the view and
12:47 - then as a subclass of UI view you have
12:50 - the UI image view which is a combination
12:53 - of all those classes above it so as you
12:55 - can see a lot of the classes you work
12:57 - with in UI kit are actually a
12:59 - culmination of a bunch of different
13:02 - classes and it's actually really easy to
13:05 - see why this is take for example the UI
13:08 - button class and that class is basically
13:11 - at the button element that you put in
13:13 - the view a button element is something
13:15 - that needs to sit in the view so it
13:17 - probably is a subclass of UI view and it
13:20 - needs to respond to user interaction so
13:22 - it's probably got UI responder in the
13:25 - hierarchy and then you can create an
13:27 - object from that class as well so it's
13:29 - probably got NS object in that hierarchy
13:31 - as well
13:32 - so let's actually just check it right
13:33 - now you eye buttons right here let's
13:36 - scroll all the way to the bottom so it
13:39 - actually inherits from UI control and
13:41 - this is the base class for controls
13:44 - which are visual elements that convey a
13:46 - specific
13:47 - or intention in response to user
13:49 - interactions so this is actually another
13:52 - layer that the uiimageview doesn't have
13:55 - because the uiimageview is just for
13:56 - displaying something and it's not
13:58 - specifically conveying an action or
14:00 - intention in response to user
14:01 - interactions like what this UI control
14:05 - is supposed to do so you can see here
14:06 - some UI controls are the switch the
14:09 - stepper this text field those all are
14:12 - subclasses of UI control let's scroll
14:15 - all the way down and UI control inherits
14:19 - from uiviewcontroller goes back to and a
14:28 - subject so those are just two quick
14:31 - examples of two classes in UI kit but
14:34 - chances are if you take any class in UI
14:35 - kit it's going to be a subclass of many
14:38 - different classes alright so in this
14:40 - lesson you learned about what's sub
14:42 - classing and inheritances you learned
14:44 - that most of the classes in your kit are
14:46 - subclasses of other classes that are
14:48 - also in UI kit you learned the syntax
14:51 - for declaring a subclass you also
14:53 - learned about the override keyword and
14:55 - how it can be used to provide a
14:57 - different implementation for a method in
15:00 - a subclass there are two key things that
15:02 - I want you to take away from this lesson
15:04 - number one is that a class you're using
15:07 - from you I can may be a subclass of
15:09 - another class which in turn is a
15:11 - subclass of another class who is a
15:13 - subclass of another class and so on and
15:15 - so forth that means that you might call
15:17 - a method or use a property of that class
15:19 - that you can't find in its documentation
15:22 - page that probably means that that
15:23 - method or property is an inherited one
15:26 - from a superclass key thing number two
15:28 - is that when you create your own classes
15:30 - you can make it a subclass of either
15:32 - another class you wrote already or even
15:34 - make it a subclass of one of the uikit
15:36 - classes for example let's say you wanted
15:39 - to add additional functionality to a UI
15:41 - button you could subclass it and write
15:44 - extra methods and properties alright so
15:46 - that's it for this lesson
15:47 - I highly recommend that you download the
15:49 - worksheet and get in some extra practice
15:51 - it's going to make a lot more sense in
15:53 - your head when you're actually typing it
15:55 - out and trying it out for yourself if
15:57 - you like this video please subscribe to
15:59 - my channel by hitting the subscribe
16:00 - button below and if you don't want to
16:01 - miss a single video make sure you tap on
16:03 - that Bella icon as well thanks for
16:05 - watching and I'll see you guys in the
16:07 - next lesson