00:00 - hello and welcome to my Swift tutorial
00:01 - beginner series in this video we're
00:03 - going to talk about properties which
00:05 - you've been using already ever since we
00:07 - introduced them in our classes lesson
00:09 - however in this video I'm going to go
00:12 - through some additional things that you
00:14 - can do with properties all right so
00:15 - let's get started
00:21 - so before we start one thing that I
00:24 - wanted to point out to you just in case
00:26 - you didn't notice is about property
00:28 - scope so remember back when we talked
00:31 - about functions and talked about
00:33 - variable scope and how if you declare a
00:36 - variable inside of a function you're not
00:39 - going to be able to access and use that
00:41 - variable or constant outside of that
00:43 - function you can only use it within that
00:46 - the curly brackets of that function so
00:49 - each function has its own variable scope
00:51 - but when you declare a class like we
00:55 - have for example here these properties
00:58 - that we declare up here they're kind of
01:00 - just like variables that are at the
01:02 - class level so because they are declared
01:06 - up here at the class level they are
01:09 - accessible and usable by any of the
01:12 - functions inside that class so for
01:14 - example here you can see our do work
01:17 - function or method sorry if a function
01:20 - is inside of a class that's called a
01:22 - method remember so in our do work method
01:25 - of the employee class here we can access
01:28 - the salary property because as declared
01:32 - up here and if we had more methods in
01:35 - this class inside each of them we would
01:36 - be able to access the salary or the roll
01:39 - all right so that's just one thing I
01:41 - wanted to get out of the way in case
01:43 - that wasn't clear one cool thing that I
01:45 - want to talk to you about declaring
01:47 - these properties up here is that aside
01:51 - from them just being variables at the
01:54 - class level there are some unique things
01:56 - that you can do with them for example
01:59 - let's take this manager class right here
02:03 - let's say that we wanted to create a
02:06 - bonus property that would basically
02:08 - determine how much of a year-end bonus
02:13 - this manager would receive as part of
02:16 - their compensation so let's create a new
02:18 - property called bonus however and you
02:23 - know this is going to be an int type
02:26 - however the bonus is actually tied to
02:29 - how many people they manage so you could
02:33 - do something like this for example maybe
02:35 - in the initializer function of the
02:38 - manager class you could say that the
02:42 - bonus property equals let's say team
02:45 - size times a thousand so you get an
02:49 - extra thousand dollars for each team
02:51 - member that you manage right so you
02:53 - could definitely calculate that in the
02:55 - initializer function of the manager and
02:58 - set that property however there are
03:01 - something called computed properties and
03:03 - that allows you basically to make your
03:07 - property a calculation so instead of
03:10 - having to explicitly assign a thousand
03:13 - times team size to the bonus property
03:16 - you could just make this bonus property
03:18 - a computed property so to do that you
03:22 - would declare your property and you have
03:23 - to specify a data type and then you have
03:27 - your curly brackets and let me just
03:32 - write a comment here this is a computed
03:35 - property one it's accessed the code in
03:44 - here will run
03:49 - then we'll return the value so here we
03:55 - can say return team size times a
03:59 - thousand and literally as simple as that
04:02 - so the bonus property is calculated via
04:08 - this calculation here it's a problem
04:11 - right now is that the team size is zero
04:13 - so we need to be able to specify the
04:15 - team size why don't we set that as part
04:19 - of the initializer function so we could
04:24 - we don't have to over I let's create our
04:26 - own one which takes in a name but it
04:33 - also takes in a team size which will be
04:39 - an integer alright so this is our own
04:43 - custom initializer function for the
04:46 - manager class however because the
04:49 - manager class is a subclass of employee
04:52 - and it inherits all of the employee
04:54 - classes methods and properties we have
04:57 - to make sure that all of those are
05:00 - initialized properly to so the way we do
05:03 - that is we can simply call super init
05:06 - which is basically calling the init
05:08 - function of the employee class so we're
05:12 - gonna pass in the name this calls the
05:21 - init of the employee class additional
05:30 - and then work here we will set
05:35 - self-thought team size equals team and
05:39 - because you know the parameter is a
05:42 - different name from the property we
05:44 - technically don't need the self we could
05:46 - just do that and it's very clear what
05:49 - we're trying to do but you it doesn't
05:51 - hurt to add the self as well just be
05:53 - consistent in your coding all right so
05:56 - now let's try to create a new manager
05:58 - object and then try to access this bonus
06:00 - property
06:02 - so down here say let M equals manager
06:07 - we're gonna use our new fancy init
06:10 - method let's call her Kate and the team
06:14 - size is let's say 11
06:16 - all right let's print out what would her
06:20 - bonus be let's run this code and it is
06:27 - 11,000 so that's pretty cool now there
06:32 - are additional things that we haven't
06:33 - covered in this lesson such as getters
06:36 - and setters and property observers but
06:38 - we'll have to do another lesson on
06:40 - properties later on for now this is a
06:42 - great start if you liked this video
06:44 - please give it a thumbs up and please
06:45 - subscribe for more now click on over to
06:48 - the next lesson and we'll talk over
06:50 - there