00:00 - in this video we'll be adding the ability to 
challenge our phone or iPad however before we  
00:06 - do that I notice that my code from the last video 
has a published property that's not being used in  
00:15 - game service the moves taken array isn't used it's 
from some of my old nodes so you can remove it
00:23 - this will also require that you remove 
it from the reset function as well
00:29 - so let's commit those changes 
now to the two player branch
00:41 - and now we're ready for today's lesson  
00:44 - so let's create a new Branch from this 
one and we'll call it challenge device
00:53 - when we want our iPhone or iPad to make the 
next move we can do that programmatically  
00:57 - by calling the make move function not by 
tapping on a button but rather determining  
01:03 - a random index from the remaining moves and 
then pass it along to the make move function  
01:09 - this will happen very quickly so to 
write us some feedback that this is  
01:13 - happening I'm going to simulate the device 
Thinking by displaying a progress View
01:21 - in the game service class then 
add a new published property  
01:24 - and call it is thinking and initialize it as false
01:32 - next create a new function called device 
move and we're going to have it pause for  
01:37 - a short period of time before picking 
an available Square to make the move  
01:41 - so this is going to be an asynchronous function so 
mark it as async when we first call this function  
01:49 - we'll toggle the is thinking property and then 
we'll initialize an asynchronous sleep function  
01:57 - using the try await and use the task.sleep 
for let's try 100 000 nanoseconds
02:09 - now once it awakes from sleep we can select a 
random element from the possible moves array  
02:15 - and this will be optional although it never 
really will be we can use an if let to unwrap it  
02:23 - now I need to know the corresponding index of this 
move as it relates to the full move dot all array  
02:30 - so again we'll use another if let to 
assign to a matching index property  
02:35 - the move all's first index where 
the first one matches our move
02:43 - when we have that then we can make 
our move at that matching index  
02:49 - and then once our move has been made 
we can toggle that is thinking property
02:58 - so we can revisit our setup game function 
now and where we have the case where we're  
03:04 - now challenging the device which is 
bought we can create a different name  
03:08 - for our player 2 which will be the 
device so in this case when we're  
03:13 - challenging the device we can assign to the 
player2.name the UI device current dot name  
03:23 - so then we'll just pick up the device name 
from the iPhone or the iPad that it's playing
03:31 - next within the make move function we want to 
await that device move only if the game type  
03:39 - is bought and the current player name is that 
player 2 name because our device will always  
03:46 - be the second player and then we can set up 
an asynchronous unit of work which is a task  
03:54 - and await the completion of that device move
04:01 - now the other thing I want to do is to disable 
our board while that device is thinking so back  
04:06 - in the board disabled computed property 
we can add another or case for is thinking
04:14 - in game view then our devices 
always going to be player 2.  
04:18 - if we decide that we want the device to start 
playing first when we tap on that button we'll  
04:24 - have to initiate that devices move but 
only if the game is a bot and we'll do  
04:30 - that in the action for the second button and 
it has to be embedded in a task unit of work
04:39 - well now while the device is thinking we can 
display an overlay over the disabled board  
04:44 - using an overlay modifier on that v-stack 
which contains the three rows of three squares  
04:52 - So within the overlay if the game is 
thinking I'm going to create a v-stack  
05:00 - and then for the first item I'll create a 
text view just using the string thinking  
05:05 - dot dot dot but I'm going to surround it 
with spaces to push it out on the sides  
05:11 - and then I'll give it a foreground 
color of color system background
05:18 - and then I'm going to apply a background of a 
rectangle using the fill of the color primary
05:31 - and then I'll add my progress View
05:35 - the one final thing we need to do 
then is to make sure that the user  
05:41 - does not tap on a square while the game 
is thinking or about to think so just be  
05:46 - careful in square view we can surround the 
button action with a not game is thinking
05:54 - so let's see if this works I can go to the 
start view now and select our new game mode  
06:01 - I only have to enter my name and when it's 
done I can tap the start game button if I tap  
06:09 - the iPhone 14 pro in my case button to start it 
immediately starts to think and then make a move  
06:15 - whoa that was quick it's my turn now so I can 
make a move and quickly too quickly I think the  
06:22 - iPhone makes its move I don't think I'm sleeping 
long enough so let me return to the game service
06:30 - and I'm going to extend that sleep to 1 million 
from 100 000 nanoseconds so let me try this one  
06:39 - more time we'll select the Challenger device and 
I'll enter my name once more and start the game
06:48 - I'll let the iPhone start again and this 
time the thinking is much more obvious  
06:53 - and the game board's locked up until it makes 
its move and passes on to Player 1 which is me  
06:59 - so I can continue to play and the device will 
play and we'll continue on until we get a winner
07:08 - so let's play a new game this time 
I'm going to start and I'm going  
07:13 - to play Rather badly and see if the device can win
07:19 - indeed it can well that was pretty easy and this 
was a short video so let's commit our changes to  
07:26 - the git repository now next up we'll be taking 
our time to learn how we can create the third  
07:33 - mod of our game playing and that's going to be 
against someone who has the app installed and  
07:39 - who is nearby multi-peer connectivity this is 
going to require that you have an iPhone rather  
07:45 - than either iOS 15 or iOS 16 available so that 
we can play the simulator against a real device