00:00 - hello and welcome in this video I'm
00:02 - going to show you five techniques to
00:04 - find out why your app is crashing or
00:05 - behaving strangely why is this so
00:08 - important because nobody writes perfect
00:11 - code on the first try the process
00:13 - usually looks like this you write your
00:15 - code then you test it out if it doesn't
00:18 - work you go back and you tweak it some
00:20 - more however if your code does work on
00:22 - the first try then you get to do your
00:24 - happy dance but wait you're not done now
00:28 - you have to put on your hacker hat and
00:30 - you have to try and break your code you
00:32 - have to think about all of the small
00:33 - edge cases or scenarios where your code
00:36 - might not hold up if you manage to break
00:38 - your code then you go back and you fix
00:40 - it and you test it again and you keep
00:42 - doing this until your code is as
00:44 - bulletproof as possible like I said this
00:47 - doesn't happen in a single try that's
00:50 - why it's so important to know how to
00:51 - troubleshoot your code and debug it
00:53 - luckily Xcode gives us lots of tools to
00:56 - make this happen and in this video I'll
00:57 - tell you all about them so we're going
01:00 - to talk about logging first because it's
01:02 - your most basic form of debugging and in
01:05 - many cases it's also a pre-emptive
01:07 - measure we're going to be demonstrating
01:09 - logging as well as the other debugging
01:11 - techniques in the match app project
01:14 - which we've been building so far in this
01:16 - module in just in case for those people
01:18 - who are jumping into this lesson who
01:21 - hasn't been following along in this
01:23 - module so far let me just quickly
01:24 - explain how this UI gets generated with
01:28 - this collection view of cards so it's
01:31 - very very simple
01:32 - we have a view controller which asks the
01:35 - card model for a bunch of randomized
01:38 - cards and this function get cards will
01:42 - randomly generate an array of sixteen
01:45 - card objects and then return that to the
01:48 - view controller who will then display it
01:50 - in the collection view and that's how we
01:52 - see all of those sixteen cards in the
01:55 - scrollable collection view okay so you
01:58 - already actually see some logging down
02:00 - here and this is simply output which you
02:04 - can put into this console area using the
02:07 - print statement so let me show you what
02:09 - that looks like
02:10 - here in the card model in this get cards
02:13 - method what we do is we loop eight times
02:17 - and for each of the eight times we
02:19 - generate a random number and I'm simply
02:21 - using this print statement to print out
02:24 - that random number to the console quick
02:27 - note if you don't have this area down
02:29 - here there's actually this button that
02:32 - controls this little tray and this part
02:35 - also has two panes here which can be
02:39 - controlled by these two icons down here
02:42 - I know it's a little hard to see but
02:44 - you're gonna want both of them visible
02:45 - and you're gonna want this tray visible
02:47 - as well so in terms of logging if you
02:51 - are logging more information it would
02:53 - probably be useful to have some sort of
02:57 - text describing what these numbers are
03:00 - so you might say something like you know
03:03 - generating a random number and then you
03:09 - would just use variable insertion into
03:13 - your string like that let me just run it
03:16 - again to show you and then you get some
03:20 - output like this and at the end after it
03:24 - just passes back to your rate you can
03:26 - use another print statement just before
03:29 - and you can maybe print out the count
03:35 - well you probably put some sort of
03:37 - descriptive statement there so it's not
03:39 - just a number but as long as you know
03:42 - what it is and you're working alone
03:43 - that's fine so the reason logging is
03:47 - very useful is because it allows you to
03:49 - see if your code is generating the
03:51 - results that you expect so as I'm
03:54 - writing through all of this code in this
03:56 - method if I didn't print anything out my
03:59 - assumptions would be that I would
04:01 - generate 16 cards and they're going to
04:05 - be eight pairs of random numbers and I
04:08 - would return an array of sixteen objects
04:12 - that would be my assumption if I didn't
04:14 - print anything out but by writing these
04:16 - print statements when I run my app I can
04:19 - visually see that that indeed is the
04:21 - case so I've got
04:24 - bunch of random numbers for the
04:25 - interations and I've got 16 card objects
04:28 - about to be returned to the
04:29 - viewcontroller notice that I'm not
04:31 - really doing this because I think my
04:34 - code is broken but I'm doing this just
04:36 - to verify my assumptions as I'm going
04:38 - along and if something does go wrong I
04:41 - can actually just go through my console
04:44 - log here and take a look to see if my
04:48 - code is generating the results that I
04:49 - want
04:50 - now logging can also be a
04:52 - troubleshooting method so for example if
04:54 - in the simulator somehow I see that I'm
04:58 - missing a card or I am I have extra
05:02 - cards or something like that or maybe
05:04 - the cards that I do have they're not
05:07 - matching up I don't have 8 pairs of
05:10 - matching cards so at that point I might
05:14 - go back to this method here if I'm
05:17 - suspecting that this method might be
05:19 - generating some weird behavior I might
05:22 - put print statements everywhere right
05:24 - and I might run my code and then make
05:26 - sure that all of the variables are
05:29 - checking out and you know objects are
05:31 - getting added to the array properly and
05:33 - stuff like that another way that you can
05:36 - use logging statements is in response to
05:40 - user interaction so a lot of the time
05:42 - you might be trying to handle a user
05:44 - taps for example I'm tapping on this
05:46 - card I'm expecting it to detect that and
05:49 - flip over well where does this detection
05:52 - happen what if you're tapping on this
05:54 - card and it's not flipping over and
05:56 - you're wondering if your tap is being
05:59 - handled at all and if it's being
06:01 - detected and handled why isn't it
06:03 - flipping over well in this case you can
06:06 - go into the view controller and you can
06:08 - go into collection view did select item
06:12 - at because this is the delegate method
06:14 - that gets triggered when a cell in the
06:16 - collection do is tapped so you might put
06:18 - a print statement here saying that a
06:20 - cell is tapped and you might even go so
06:24 - far as to say cell is tapped and then
06:31 - maybe insert the index path row to
06:35 - indicate kind of which cell is tapped
06:38 - so if you run your project again and
06:42 - you're tapping on a cell and you see
06:46 - that print statement you see down here
06:48 - cell is top then you know at least that
06:51 - the top is being detected now the next
06:54 - step is to figure out why it's not
06:56 - flipping over you know if it wasn't
06:58 - flipping over and trying to troubleshoot
06:59 - that however if let's say you're tapping
07:02 - on this guy and it's not flipping over
07:05 - and you don't even get this print
07:07 - statement here then you know that it's
07:10 - not even detecting your tab so then that
07:12 - gives you a clue that maybe something is
07:15 - blocking that collection view or maybe
07:17 - that collection view is not handling
07:19 - user interaction so it kind of shifts
07:23 - your train of thought and
07:24 - troubleshooting to another path okay so
07:28 - now let's take a look at our second
07:30 - debugging tool and this one is really
07:32 - powerful and you will probably be using
07:33 - this one the most often and that is
07:35 - breakpoints and the reason why I say
07:38 - logging is kind of pre-emptive is
07:41 - because to do the sort of
07:43 - troubleshooting when you detect a
07:45 - problem breakpoints are actually a great
07:47 - way to do it and it's faster than having
07:49 - all of these log statements so when I'm
07:53 - coding I will use log statements in my
07:55 - code to verify my assumptions and to
07:59 - just a double check and display that the
08:02 - values and the variables are what I
08:03 - expect
08:04 - however when something goes wrong let's
08:07 - just use that example again where I'm
08:10 - tapping a cell in this collection view
08:13 - and it's not triggering the card flip so
08:16 - in this case I can actually just use a
08:19 - breakpoint to see if it's going into
08:22 - this method instead of putting a print
08:26 - statement here and then having to run
08:28 - the project again and relying on seeing
08:31 - visually this console.log so let me show
08:34 - you how the breakpoints work if I wanted
08:36 - to see if the execution went into this
08:39 - method all I would have to do is set a
08:41 - breakpoint right here because when the
08:44 - execution hits that line of code where
08:47 - you've set a breakpoint that execution
08:49 - will actually pause
08:51 - and you're going to be able to see a
08:53 - green line here so let me demonstrate
08:54 - this actually I didn't need to rerun my
08:59 - project that's the nice thing about
09:01 - breakpoints where you can actually set
09:04 - them and you can delete them without
09:08 - having to rerun your code because it's
09:10 - not a code change so you click it to
09:12 - activate a breakpoint you click it again
09:14 - to deactivate it or you can toggle it
09:17 - actually and to completely remove it you
09:19 - can just drag it off of the gutter so
09:22 - let's see it in action here if I tap on
09:26 - this guy you can see that Xcode comes to
09:30 - the foreground and it highlights this
09:32 - line where the execution has stopped at
09:35 - my breakpoint so this tells me that the
09:38 - execution is coming into the did select
09:41 - item add method so it is handling and
09:43 - detecting my taps
09:45 - however if let's say that there's a
09:51 - button here to continue program
09:53 - execution and I'll talk about those
09:55 - buttons in just a sec but let me just
09:57 - say that if I tap this cell and it
10:00 - wasn't hitting this breakpoint that
10:03 - means that this method isn't being fired
10:05 - because the execution would have stopped
10:07 - at this line of code if it did come into
10:09 - this method right so you can use
10:12 - breakpoints to see if execution goes
10:15 - into certain methods or reaches certain
10:19 - branches in your if statement and stuff
10:22 - like that the other thing that
10:24 - breakpoints are awesome at is if let's
10:27 - say let's use that example again we used
10:30 - before where let's say you're missing a
10:32 - card or you have an extra card so you
10:34 - suspect that maybe the card model isn't
10:37 - returning the number of items that it
10:39 - should be returning so that's where
10:41 - you're going to look first so you go
10:43 - into your code and then you jump to let
10:45 - me just remove this breakpoint you jump
10:48 - into the card model or maybe let's just
10:50 - say in the view controller here if we
10:52 - scroll up to the viewdidload
10:54 - you can see here in this statement where
10:57 - we call model get cards and this is
11:00 - going to basically fetch that array of
11:03 - card objects and assign
11:05 - - this card or a property that we have
11:07 - up here so I might put a breakpoint
11:10 - right after that line so I can stop the
11:13 - execution as soon as that has happened
11:16 - and then I can double check that that
11:19 - card array contains what I expect it
11:21 - does now in this case I do have to
11:25 - restart my project because the
11:27 - viewdidload method has already run so I
11:30 - just need to restart my app so that it
11:33 - hits the viewdidload method again so
11:36 - here what you can actually do is put
11:38 - your cursor into the console window and
11:40 - you can use a command to double check
11:44 - what's in different properties variables
11:47 - in objects just to verify that those
11:52 - things contain what you are expecting so
11:55 - for example I want to double check the
11:57 - number of objects in my cart array so I
12:01 - can actually type in pio which stands
12:04 - for print object and then you can put in
12:08 - the name of the object that you want to
12:10 - display so in our case we are going to
12:13 - type in card array and you also get
12:15 - autocomplete in this console window so
12:18 - that's really nice
12:19 - so pio we've got 16 elements in this
12:23 - array and you can see all of the indices
12:26 - here each one has a card object now if I
12:30 - wanted to drill down into a specific
12:32 - element let's say card number 15 or this
12:36 - would be the last card this would be
12:38 - card 16 actually I could do something
12:41 - like pio and you can actually press up
12:44 - on your keyboard to use a command that
12:46 - you previously wrote so you don't have
12:48 - to type as much
12:49 - now let's access element 15 and I can
12:53 - use dot notation and I can actually
12:55 - access one of the properties and I can
12:57 - just double check for example what card
13:00 - it is in this case the sixteenth card is
13:03 - the card image that we have in the asset
13:05 - library called card 11 now one thing I
13:10 - want to point out is that notice that my
13:12 - break point is after the variable
13:15 - getting set
13:17 - because had I set the breakpoint right
13:19 - here and it paused on this line let me
13:22 - just show you when it pauses on this
13:25 - line of code here it hasn't yet executed
13:27 - that line of code so if I go here right
13:30 - here it stopped up here on this line
13:32 - right here you can see it stopped on
13:35 - line 24 if I try to type in peel card
13:38 - array right now it's going to be zero
13:40 - elements why because we declared a card
13:43 - array as an empty array here and it
13:46 - hasn't executed this line of code yet to
13:48 - grab the cards from the card model and
13:50 - assign it to the card array so actually
13:52 - I need to set the breakpoint one line
13:56 - after the variable gets assigned it that
13:59 - I want to check so the recap you can use
14:02 - breakpoints and set them in certain
14:05 - branches of code or certain methods that
14:08 - you want to be alerted to and have that
14:10 - execution stopped when it hits to let
14:12 - you know that it is reaching that point
14:14 - in the code or you can use breakpoints
14:16 - to stop the execution of code at any
14:19 - line of code that you want and then at
14:21 - that point you can use these commands in
14:24 - the console window to double check
14:26 - what's inside your variables and objects
14:29 - and properties at that point in time
14:31 - that's one thing that I didn't stress
14:33 - actually is that when your execution
14:35 - stops at that breakpoint when you're
14:37 - checking all of the objects and the
14:39 - variables and what's in them it is that
14:41 - state of that object or variable or
14:44 - property at that point of the execution
14:46 - and that's why it's such a great tool in
14:49 - the bugging toolset because it's almost
14:51 - like you can freeze time as your app is
14:53 - executing and you can double check
14:55 - things now another way that you can
14:58 - check things is actually there's a
15:00 - little window over here on the left and
15:03 - it kind of shows you all of the active
15:05 - things in memory and you can see that I
15:08 - do have a Carter right here I'm at zero
15:12 - values at this point again it's stopped
15:14 - here let me just click this button here
15:16 - to control the execution and we're going
15:19 - to talk about these buttons in the next
15:21 - part of this video in a little while but
15:24 - I've moved the execution to the next
15:27 - line so it has executed this line of
15:30 - code
15:30 - and taking the cards from the card model
15:33 - and assigned it to card array and now in
15:35 - this little window here I can see that
15:38 - card array actually has these and I can
15:40 - just expand this tree node and it might
15:42 - actually be a little easier for you to
15:44 - read right so now that we've talked
15:48 - about breakpoints and you know how to
15:50 - stop execution at a specific line of
15:53 - code we can talk about these controls
15:56 - down here which let you step through or
15:58 - trace your code and tracing your code is
16:01 - just a fancy term for walking through
16:04 - your code line by line so why is this
16:07 - important because it basically allows
16:09 - you to go through your code line by line
16:11 - with a fine-tooth comb you know how we
16:14 - just use the example where you can set a
16:16 - breakpoint on this line and then it
16:18 - stops the execution of code at that line
16:21 - and you can kind of double check on all
16:23 - of the variables properties objects
16:26 - using these two panes down here well
16:28 - tracing allows you to move this green
16:30 - line to the next row of code and then
16:34 - you can do all of the same things so you
16:36 - can move through your code line by line
16:38 - while checking how all of these objects
16:41 - properties variables how the values
16:43 - change inside of them so you can see
16:45 - exactly where things are changing and
16:47 - trying to find out where your bug is if
16:50 - you're trying to figure out why some
16:53 - sort of weird behavior is going on so
16:55 - let me demonstrate to you what some of
16:56 - these buttons do the first one and the
16:58 - easiest one to explain is if you've
17:00 - paused the execution of your code using
17:03 - a breakpoint and you want to just
17:04 - continue the execution and in other
17:07 - words resume you can hit this button
17:09 - right here continue program execution
17:13 - okay so now let me set the breakpoint
17:17 - let's say in here did select item at and
17:22 - we are going to tap on a card like that
17:26 - and it always starts with a breakpoint
17:28 - because you need to pause the execution
17:31 - at some point and once it's paused then
17:33 - you can use these buttons to navigate so
17:35 - this one is probably the one you lose
17:37 - the most often after continue program
17:40 - execution and that is step
17:42 - / so when you hit this button it's
17:44 - basically going to move the green line
17:48 - to your next row of code right so now
17:52 - the execution is paused right here if I
17:55 - want to execute this line of code and
17:56 - move to the next one and pause I can
17:59 - click on step over again so now I'm here
18:02 - and if I wanted to let's say I'm not
18:04 - sure if the program execution is going
18:07 - to go into this if statement well let's
18:09 - step over and find out so it does it
18:12 - goes into this if statement your next
18:16 - command is step into C whereas step over
18:19 - is just going to run through the lines
18:21 - of code in this block of code or this
18:24 - method that you're looking at step into
18:26 - will actually dive into this method that
18:30 - I'm currently at if I just tapped on
18:34 - step over it would just come to this
18:36 - line of code having executed this line
18:39 - of code however if I hit step into right
18:42 - now it is actually going to dive deeper
18:45 - and go into the flip method where now I
18:49 - can navigate through the code in the
18:51 - flip method and similarly step out well
18:56 - exit the function and come back out here
19:00 - so in terms of tracing code those four
19:04 - are going to be the main ones you're
19:06 - going to be using to navigate around in
19:08 - your code and tracing is usually used in
19:11 - conjunction with breakpoints because
19:13 - like I said you need to stop the
19:15 - execution first at some point and then
19:18 - walk through your code using these
19:20 - buttons down here so the way to use this
19:22 - debugging technique is if you're
19:25 - detecting a problem in your app you
19:28 - might have some sort of inkling about
19:31 - what might be going wrong maybe what
19:33 - area so you start there you set a
19:35 - breakpoint in the area where you think
19:37 - something is going wrong with a
19:38 - breakpoint you run your app so that it
19:41 - pauses it at that point in time and then
19:44 - you check all of your objects and
19:46 - properties and variables at that point
19:48 - and then you slowly using these tracing
19:52 - buttons here
19:54 - through your code line by line and try
19:55 - to pinpoint the exact line of code which
19:58 - is causing unexpected behavior or the
20:01 - line of code which is generating values
20:04 - that you don't expect to get so now we
20:06 - come to the last de bugging tool that
20:08 - we're going to talk about in this lesson
20:09 - and that is conditional breakpoints what
20:12 - are they well in your breakpoint that
20:15 - you set here let me just stop the app
20:17 - right now you can actually double click
20:19 - it and that's going to pop up this
20:22 - dialog which will allow you to add a
20:24 - condition and basically that says that
20:27 - the breakpoint will only trigger if that
20:30 - condition is true why is this useful
20:32 - well let's take a look if we go to let's
20:36 - say the card model where there's a loop
20:39 - and this loop just runs eight times but
20:42 - let's say I had a loop that ran a
20:43 - thousand times and there was maybe only
20:46 - a very specific case that was causing an
20:49 - issue so I would set a breakpoint here
20:52 - and let me just run the app right now so
20:56 - that the breakpoint gets hit so let's
21:00 - say this loop runs a thousand times and
21:02 - there was a very specific scenario which
21:05 - I wanted to pause the execution at and I
21:09 - wanted to take a look at the variables
21:11 - and see what's going on and why my issue
21:13 - is happening well I would probably have
21:15 - to keep hitting this continue program
21:17 - execution looking for that specific
21:20 - scenario while it basically loops a
21:24 - thousand times instead I can set a
21:26 - condition on my breakpoint to let's say
21:29 - that only pause the execution when the
21:33 - random number is greater than I don't
21:37 - know seven so let's say that you can see
21:41 - your breakpoint changes a little bit it
21:43 - has this little white triangle instead
21:45 - and I actually want to move this right
21:48 - there because this is at this point this
21:51 - is when random number gets set so this
21:55 - breakpoint right here is only going to
21:57 - trigger when generated random number is
22:00 - greater than seven so I can now just
22:02 - continue program execution and it's
22:05 - paused it down here so
22:07 - why the deposit because the random
22:09 - number as you can see down here is 11
22:12 - all right let's continue program
22:15 - execution and you can see that it didn't
22:18 - pause it for the last number because it
22:20 - was 5 all right so let me just run it
22:23 - again
22:27 - so the first number is 9 so it paused it
22:30 - second number is 1 so it didn't pause it
22:34 - right now it's paused it on this line
22:36 - because random number is 11 so that is
22:39 - conditional breakpoints so the cool
22:41 - thing about conditional breakpoints
22:43 - aside from the scenario I just showed
22:45 - you is that you can also use it
22:46 - preemptively in your code so let's say
22:50 - that I was building this method here and
22:53 - I was writing out the code and I'm
22:55 - expecting to generating numbers from 1
22:58 - to 13 now that's my assumption right and
23:02 - if I wanted to get alerted if that
23:06 - assumption is incorrect all I would have
23:08 - to do is set a breakpoint let's say like
23:11 - this and only stop if random number is
23:14 - let's say greater than 14 right I want
23:18 - it to be alerted if this happens now
23:21 - this is preemptive because I'm expecting
23:23 - my code not to ever have to stop right
23:27 - but if it does happen that for some
23:30 - reason I get a random number that's
23:32 - greater than 14 then the execution would
23:35 - pause it would hit this breakpoint it
23:37 - would trigger and then I could check out
23:39 - why that is happening the last thing
23:42 - we're going to talk about is how to
23:43 - debug your visual hierarchy so let me
23:46 - just remove this breakpoint and to
23:48 - demonstrate I'm going to have to run the
23:50 - project oh there's another breakpoint
23:54 - let me get rid of that continue program
23:57 - execution let's say that you use the
23:59 - debugging tools you just learned about
24:01 - and you figured out that the card model
24:03 - is returning 16 objects so now the
24:05 - question becomes why isn't the view
24:07 - controller displaying these objects into
24:10 - the collection view well my second thing
24:14 - that I would think about is in the
24:16 - collection view for
24:19 - this method here number of items in
24:22 - section which controls us telling the
24:25 - collection view how many items there are
24:27 - to display are you returning the right
24:29 - amount of items because if you're
24:31 - returning zero here then the collection
24:33 - view is going to think that there are
24:34 - zero items to display now this checks
24:37 - out the next thing I would think about
24:39 - if the collection view thinks there
24:40 - actually are sixteen items to display
24:42 - why don't we see anything then I would
24:45 - take a look at cell for item at because
24:47 - here you're passing a cell to the
24:50 - collection view to display and if this
24:53 - all checks out then you start to wonder
24:54 - okay something is wrong here maybe my
24:58 - collection view doesn't have a width or
25:00 - it doesn't have a height or it's just
25:01 - invisible or something like that you
25:03 - start wondering about your actual user
25:06 - interface so there's actually a way to
25:08 - take a look at how things are laid out
25:10 - in your UI when your app is running and
25:14 - these objects are generated here so
25:17 - right here on the left hand side you're
25:19 - going to see a whole bunch of
25:21 - information on your app but there is
25:24 - this little button here that you can
25:26 - view the UI hierarchy and if you click
25:31 - that you're going to see that you get to
25:36 - see your UI here and how all of these
25:38 - different elements that are displayed
25:40 - here are in this what's called the
25:44 - visual hierarchy so you have your UI
25:46 - window you have your view for view
25:49 - controller and then you can start taking
25:52 - a look at all of these things you have
25:54 - the UI image view it highlights it here
25:56 - which is the background and then you
25:58 - have your collection view here and then
26:01 - inside you have individual cells right
26:04 - and then you can dive into a cell and
26:06 - you can see that the cell is a UI view
26:09 - it's got an image view of this one's
26:12 - down here you see it highlighted the
26:14 - cool thing though is you can actually
26:17 - drag it and rotate it and you there's a
26:20 - bar here where you can kind of expand
26:22 - out the layers so you can kind of see
26:25 - you know how your things are arranged
26:28 - you know this is
26:30 - see that uiview there this is the image
26:33 - view this collection view there's the
26:37 - background image and if you don't see
26:40 - your collection view then you know its
26:43 - position incorrectly or maybe if you try
26:46 - to highlight your collection view and
26:48 - it's like this little sliver of a
26:50 - rectangle then you know that it's not
26:51 - sized properly and then furthermore you
26:54 - can tap on a cell such as let's say
26:58 - something like this and you can see if
27:01 - your cell is sized properly as well and
27:03 - if it is sized properly you can see
27:05 - maybe click on this guy and maybe the
27:07 - image view is not positioned correctly
27:09 - within the cell so all of these things
27:12 - you can see visually and it's easier to
27:15 - debug if it turns out to be a user
27:19 - interface related bug after you've
27:21 - checked out the code first or you might
27:23 - decide to approach it from the opposite
27:25 - side so instead of checking your code
27:27 - first you would check the UI first and
27:30 - you would see that everything in your UI
27:32 - checks out and then you would go and set
27:34 - breakpoints and start tracing your code
27:36 - to figure out why they're on 16 cards
27:38 - being returned to the view controller so
27:40 - below the video you're going to find a
27:42 - debugging cheat sheet which you can keep
27:44 - handy the next time you run into an
27:46 - issue you can run through some steps on
27:48 - this cheat sheet and it's going also
27:49 - going to remind you about the tools at
27:51 - your disposal that we talked about in
27:53 - this lesson in addition to that though
27:55 - there are a couple of sample projects
27:58 - which you can get some practice using
28:00 - these tools they actually have some
28:03 - problems with them I'm going to write
28:06 - down exactly what you need to figure out
28:07 - and you can try using the debugging
28:09 - tools that you learned about in this
28:11 - video to try and solve the problem and
28:14 - figure out that line of code which is
28:15 - causing the issue so try your hand at
28:18 - that it's going to get you a little more
28:20 - familiar and comfortable with these
28:22 - debugging tools in Xcode alright so this
28:25 - was a pretty important lesson you
28:27 - learned about the various tracing and
28:28 - debugging tools at your disposal to
28:30 - figure out what's going on with your
28:31 - code I've got a debugging cheat sheet
28:33 - for you to download and you can refer to
28:35 - it the next time your app is crashing to
28:37 - jog your memory about
28:38 - how to fix the problem but before I tell
28:40 - you where to download that let's do a
28:42 - quick recap you learned about logging
28:43 - where you can output information to the
28:45 - console area so that you can visually
28:47 - inspect it you learned about breakpoints
28:49 - that let you pause the execution on a
28:51 - specific line of code you learned about
28:53 - tracing which lets you step through your
28:55 - code line by line so that you can see
28:56 - where your code is deviating from what
28:58 - you expect you learn about conditional
29:01 - breakpoints which lets you pause the
29:02 - execution of code if a specific scenario
29:05 - occurs and finally you learn how to look
29:07 - through your visual hierarchy so you can
29:09 - double check that the elements in your
29:11 - view are sized and positioned correctly
29:13 - the next time your project is crashing
29:16 - refer back to this video or the
29:18 - downloadable cheat sheet and try to
29:19 - figure out what's going on with your
29:21 - project
29:22 - with the Xcode debugging tools I
29:23 - guarantee you that you're gonna learn a
29:25 - lot more than me just telling you what's
29:27 - wrong with your project plus I can't
29:28 - even describe that feeling of
29:30 - satisfaction you'll get when you finally
29:32 - figure it out on your own it's something
29:34 - that you have to experience yourself and
29:35 - it's one of the best things about
29:37 - programming it's like that moment when
29:38 - you finally crack the code or you solve
29:40 - a really tough puzzle that experience is
29:42 - going to stick in your head and you'll
29:44 - remember it and you're not going to make
29:46 - the same mistake again the more of these
29:48 - experiences that you can build up the
29:50 - more of a veteran coder you will become
29:52 - now I want to turn it over to you what
29:55 - do you think about these debugging tools
29:57 - that Xcode gives us let me know in the
29:59 - comment section below and if you think I
30:01 - missed any debugging techniques let me
30:03 - know in the comment section below as
30:04 - well lastly if you liked this video and
30:07 - you want to see more please consider
30:08 - subscribing to my channel by hitting
30:10 - that red button and if you don't want to
30:11 - miss the next video when it comes out
30:13 - hit that Bell icon as well so thanks for
30:16 - watching and I'll see you guys in the
30:17 - next lesson