00:00 - hi and welcome to lesson seven so far
00:02 - you've learned some basic Swift code and
00:04 - how to organize that code into
00:05 - executable blocks called the functions
00:07 - well in this video you're going to learn
00:09 - how to organize and group your functions
00:11 - into what's known as classes now before
00:13 - we go on I just want to say one thing
00:15 - and that is that learning something new
00:17 - is hard seriously I know firsthand
00:19 - because I fail that learning iOS
00:21 - programming when I first started so give
00:24 - yourself a pat on the back for coming
00:25 - this far especially if you've never
00:27 - coded before now I know you might be
00:29 - asking yourself constants variables
00:32 - functions why the heck do I need to know
00:34 - any of this well I can guarantee you
00:36 - that after this lesson and into the next
00:38 - all the pieces are going to start to
00:40 - fall into place for you because we're
00:42 - going to move back to our Xcode project
00:44 - and I'm going to point out all the
00:45 - different pieces that you've been
00:47 - learning about in the last three lessons
00:49 - and you're going to have a Eureka moment
00:51 - you're going to see that Xcode project
00:52 - in a different light so I want you to
00:55 - pay extra careful attention in this
00:56 - lesson because it's the last one before
00:59 - we move back to our work hard game Xcode
01:01 - project all right let's do this so on
01:09 - the screen I've got two functions right
01:11 - now they don't really do anything but
01:14 - one is called cruise and one is called
01:16 - thrust so let me explain why imagine
01:18 - yourself as an engineer for NASA and
01:21 - you're writing the code to power one of
01:24 - their rockets now all of the code for
01:27 - cruising you would put inside the crease
01:29 - function and all of the code that are
01:31 - going to turn on the rocket thrusters
01:32 - you're going to put inside the thrust
01:34 - function now just like how you organize
01:36 - that code into those functions you can
01:39 - further organize these two functions
01:41 - into a class because potentially you
01:44 - could have many many functions right so
01:47 - a class you can use it to group together
01:50 - functions that kind of serve the same
01:52 - purpose or the same goal so let me show
01:55 - you how to declare a class first of all
01:57 - use the class keyword and then you would
02:00 - give the class a name so I'm gonna call
02:02 - this rocket now I'm gonna call it
02:06 - spaceship just because I like that word
02:08 - a little more now you open up a pair of
02:11 - curly brackets
02:13 - and I am going to put some space inside
02:16 - the curly brackets and I'm going to
02:18 - highlight these two functions and press
02:20 - command X to cut them and I'm going to
02:23 - press command V and they're to paste it
02:25 - so what we have now is kind of like
02:28 - three levels of organization right at
02:30 - the top level we have the spaceship
02:32 - class inside the spaceship class we have
02:34 - two functions cruising thrust and inside
02:37 - each of those functions we have the code
02:40 - to essentially carry out those abilities
02:44 - now there's one distinction I want to
02:46 - make and that is that when you move the
02:49 - function into a class those functions
02:52 - are now called a method of that class so
02:55 - I know it's a little confusing because
02:57 - nothing's changed except what you call
03:00 - them right when when there's a
03:02 - standalone thing they're called
03:04 - functions but when you put these
03:05 - functions inside a class they are now
03:08 - called
03:08 - methods of that class but it's sort of
03:11 - interchangeable if you say you know the
03:13 - crues function of the spaceship class
03:15 - people will still understand what you're
03:17 - saying but I just want you to know that
03:18 - the correct terminology is that Cruz is
03:22 - a method of spaceship all right just a
03:25 - little distinction there let's
03:27 - illustrate this in the diagram first we
03:29 - had functions and then we put them
03:31 - inside of a class and now they're called
03:32 - methods I want to talk about variable
03:35 - scope for a second in the last lesson
03:37 - you learned that declaring a variable
03:38 - inside of a function it only exists
03:41 - within that functions scope so for
03:43 - instance if we declared a variable
03:45 - called name in function a we can't
03:48 - access that named variable in function
03:51 - beat because function B has its own
03:52 - scope the same goes for the reverse if
03:55 - we declare a variable in function B we
03:58 - can't access it in function a because
04:00 - that variable would only exist in
04:02 - function B's scope now get this the
04:05 - class itself has its own class scope you
04:09 - can actually declare a variable inside
04:11 - the class but sits outside of any
04:14 - particular function now this variable
04:16 - exists inside the entire scope of this
04:19 - class since function a and function B
04:22 - are also inside the scope of this class
04:24 - they can actually access the
04:27 - variable finally here's the kicker when
04:30 - you declare a variable inside the class
04:32 - but it's outside of any functions like
04:34 - what we've done here it's actually
04:36 - called a property of that class now
04:40 - let's see this in action so let's go
04:43 - ahead and declare a property of our
04:46 - spaceship here now it's going to be
04:48 - inside of the class right that's the
04:51 - starting curly bracket but it's going to
04:54 - be outside of any of these two functions
04:55 - so I'm gonna put it up here I'm going to
04:58 - call it a fuel level and I'm going to
05:02 - assign a hundred to it now this fuel
05:05 - level property is inside the scope of
05:07 - the class just like how these two
05:09 - functions are also inside the scope of
05:11 - the class so I can actually access the
05:16 - fuel level property from here see I can
05:19 - print it out now it's not going to
05:21 - actually print anything because we need
05:24 - to execute these functions and we're
05:25 - gonna do that a little later on but just
05:27 - from the fact that actually you know let
05:30 - me run it just to show you that the
05:32 - playground isn't going to throw any sort
05:34 - of errors right so it can access this
05:37 - property however let me declare a
05:41 - variable in here let's just say bar test
05:43 - is equal to true and make it boolean
05:48 - right this variable because it's
05:50 - declared within the Cruz function it
05:52 - only exists inside the scope of that
05:55 - function you know that little bubble so
05:58 - I cannot access it from here let's say
06:01 - print test and you're going to see that
06:04 - Xcode is going to throw an error let's
06:07 - run that so it's saying that it cannot
06:10 - find test because it only exists within
06:13 - this scope so now let's go ahead and
06:17 - erase this test code here and like I
06:23 - said before if the scope thing is a
06:25 - little bit confusing it's going to come
06:26 - with time I promise you that as you're
06:28 - gonna write more code you're gonna
06:30 - understand this stuff a lot more there's
06:32 - gonna come a point where these things
06:33 - finally just like click for you all
06:36 - right now we're going to take a giant
06:37 - leap and I'll explain to you how classes
06:39 - are used
06:40 - now it's going to require a little bit
06:42 - of abstract thinking I also want to add
06:44 - that in my six years of teaching Iowa's
06:46 - app development this is the single
06:48 - hardest concept to understand for
06:50 - beginners who have never coded before
06:51 - but once you understand this then you
06:54 - will have crossed the biggest hump that
06:55 - so many people give up that all right
06:58 - I'm done talking let's do this now let's
07:00 - use the same analogy so we used before
07:02 - suppose we have some data and we have
07:04 - variables in constants as sticky caps
07:06 - now we have functions that encapsulate
07:09 - these pieces of code and let's say that
07:11 - functions are like file folders now we
07:13 - have classes that contain a bunch of
07:16 - functions and variables and let's say
07:17 - that class is a file box that contains
07:20 - file folders well at the end of the day
07:22 - what we have is just a file box full of
07:24 - instructions it doesn't actually do
07:26 - anything
07:26 - some people say let's think of the class
07:29 - like a recipe
07:30 - some people say let's think of the class
07:32 - like a blueprint though what's the
07:34 - common thing here they all need someone
07:36 - or something to turn this set of
07:38 - instructions into action someone to take
07:41 - those recipes and turn it into a cake or
07:44 - someone to take the blueprints and build
07:46 - a rocket ship
07:46 - now this rocket will work exactly like
07:49 - it was designed to it can thrust and it
07:51 - can cruise because we've given it
07:53 - functions to do so but understand that
07:55 - that class doesn't thrust or cruise it's
07:58 - the actual object that gets created from
08:01 - the class that will thrust their crews
08:03 - furthermore once you have a blueprint
08:05 - you can make multiple spaceships each of
08:08 - them will have its own fuel level and
08:09 - ability to thrust or cruise the
08:12 - blueprint is called a class and the
08:14 - object that are created are called
08:15 - objects or instances of the spaceship
08:18 - class all right so who's the person that
08:20 - will take that class and turn it into an
08:22 - object well that's the device in your
08:25 - hand it's a mini computer you write your
08:27 - instructions in Xcode Xcode will turn it
08:30 - into a format that can be understood by
08:32 - your device and your device carries out
08:34 - those instructions so here's the tricky
08:36 - part
08:37 - you need to write instructions to tell
08:39 - the computer to take your classes and to
08:42 - turn them into objects and furthermore
08:44 - you need to write instructions to tell
08:46 - the computer how you want it to use
08:48 - those objects for example you write
08:50 - instructions like when the user taps the
08:52 - lift off button
08:53 - then you create an object from the
08:55 - spaceship class then called a thrust
08:57 - function of that object then called a
08:59 - cruise function of that object you know
09:01 - that could be an app right there now
09:03 - let's go back to our playground and see
09:04 - how you can write instructions like this
09:07 - all right so you just learned that a
09:09 - class with its properties and methods
09:11 - they don't actually do anything until
09:14 - you bring it to life by turning it into
09:16 - an object or an instance of that class
09:19 - so essentially when you're writing this
09:22 - code and organizing your code into
09:24 - functions and organizing your functions
09:26 - into classes you're really designing
09:28 - something right you're programming
09:30 - something to be turned into an object to
09:33 - be used so before we create a spaceship
09:36 - object from this class I want to first
09:37 - add another property and some code to
09:40 - the cruise and thrust functions so that
09:42 - they actually do something so up here
09:44 - right below this property I'm going to
09:46 - declare another name property and I'm
09:48 - going to assign it an empty string so
09:50 - you can actually do that it's a string
09:52 - but with nothing inside but essentially
09:55 - it sets the datatype for this name
09:58 - property and inside the cruise function
10:01 - here essentially I want to print out a
10:04 - statement but I want to include the name
10:06 - so I'm gonna say cruisin is initiated
10:13 - for and then I'm going to insert the
10:16 - name remember how we do this you learn
10:18 - about this a couple lessons ago I
10:20 - believe or last lesson backslash and
10:23 - then rounded brackets and you put in the
10:25 - variable name and it's gonna insert that
10:28 - into the string so we're gonna do thrust
10:30 - as well so we're gonna say is let's say
10:36 - rocket thrusters initiated for name
10:44 - alright so now we can bring this
10:47 - spaceship class to life by creating a
10:50 - spaceship object from it or in other
10:53 - words an instance of the spaceship class
10:56 - and the way we do that is we basically
10:59 - type in the name of the class followed
11:01 - by two rounded brackets so let's start
11:04 - doing that and you'll notice that
11:05 - autocomplete
11:07 - shows us you just press ENTER and then
11:09 - you can go ahead and put two rounded
11:11 - brackets like that now that kind of
11:13 - looks like a function call right and
11:15 - just like a function call with a return
11:18 - value how it returns something - and you
11:20 - need to capture it using a variable or a
11:23 - constant the same thing is happening
11:25 - right here by writing this line of code
11:28 - you're creating a new spaceship object
11:31 - and it's being returned to you so you
11:34 - need to keep track of that data using a
11:36 - constant or a variable we're gonna use a
11:39 - variable because I want to show you how
11:42 - we're gonna try assigning something else
11:44 - to this variable alright anyways I'm
11:46 - gonna call it my ship and it's going to
11:49 - keep track of that spaceship object that
11:51 - we just created I want to show you
11:53 - something interesting why don't we try
11:55 - assigning another type of data to my
11:59 - ship for example in integer 10 well
12:02 - you'll see that we can't assign an
12:05 - integer to this variable because this
12:08 - variable is of the data type spaceship
12:10 - well what do you mean we went through
12:12 - some data types in lesson 5 remember
12:14 - string bull in float double well as it
12:18 - turns out when you create a new class
12:19 - this is now a custom data type so
12:23 - spaceship is actually a data type so
12:26 - what you've done here with this line is
12:28 - that you've said my ship is a variable
12:31 - that can only keep track of data that is
12:35 - of the spaceship data type so
12:38 - essentially that's what's really
12:41 - happening here you're declaring a my
12:42 - ship variable that is going to keep
12:44 - track of spaceship datatype and you're
12:48 - assigning a new object to this variable
12:50 - so I just wanted you to know that so
12:52 - that it doesn't get confusing otherwise
12:54 - now the next thing I want to show you is
12:57 - how do we access the properties and
13:01 - methods of the newly created spaceship
13:04 - object well we have a reference to that
13:07 - newly created spaceship object from this
13:10 - variable my ship and if you've never
13:12 - heard of that terminology before a
13:15 - reference is essentially what your
13:18 - variable or constant is
13:19 - it's keeping a reference or keeping
13:22 - track of a piece of data which in this
13:25 - case is the spaceship object so my ship
13:28 - is a reference to that spaceship object
13:32 - alright so all we do is we type in your
13:37 - variable name or your constant name or
13:39 - you know whatever has the reference to
13:41 - that object press dot and this is called
13:44 - dot notation this is how we are going to
13:47 - access the methods and properties of
13:49 - that object as you can see autocomplete
13:52 - pops at this menu and we can you know we
13:55 - can access the name the fuel level the
13:57 - cruise and the thrust functions and you
14:00 - know when you get more advanced with
14:01 - Swift there are actually ways to
14:04 - restrict what can be accessed but that's
14:08 - for the for later for the future for now
14:11 - I want to set its name so I'm gonna call
14:14 - I'm gonna access the name property and I
14:17 - can actually say that this name property
14:22 - should keep track of a new piece of data
14:24 - I'm going to call this ship Tom all
14:28 - right so I'm assigning the string Tom to
14:32 - the property name for that object my
14:36 - ship and next I'm going to call using
14:41 - dot notation the cruise function and
14:44 - when I run this code you can see
14:48 - cruising is initiated for Tom but had I
14:52 - not set this line remember I'm going to
14:54 - use a comment here we talked about
14:55 - comments in lesson 5 that essentially
14:58 - turns this line of code off and treats
15:01 - it as a note or a remark so I'm going to
15:04 - turn that line off and then I'm going to
15:06 - run the code again and you can see
15:08 - cruising is initiated for empty string
15:10 - nothing ok so that's kind of cool we
15:14 - could also call my ship dot
15:17 - thrust and we can run that and you can
15:21 - see there goes I can also just access
15:26 - the properties I don't have to be
15:27 - assigning things to it so for example
15:30 - let's erase these two lines and
15:32 - say let's print out my ship dot name and
15:39 - let's print out my ship dot fuel level
15:44 - so let's run that you can see it's Tom
15:48 - and 100 I like to think that coding an
15:52 - app is like writing a script for movie
15:54 - the movie script is your app code the
15:56 - character roles are the classes that
15:58 - you've designed
15:59 - but character roles themselves don't do
16:02 - anything these roles need to be turned
16:04 - into physical actors and actresses just
16:07 - like we need to turn classes into
16:09 - objects then the actors and actresses
16:12 - follow the script to perform your movie
16:14 - just like how your objects work together
16:17 - to make your app function so all of this
16:20 - stuff is pretty abstract but in the next
16:22 - lesson we're going to put it into
16:23 - practice
16:24 - but first let's do a quick recap of what
16:26 - we learned in this lesson because it was
16:28 - quite a bit now classes contain methods
16:31 - and properties and remember methods are
16:34 - just another name for functions you also
16:36 - learn that classes by themselves don't
16:38 - do anything they need to be turned into
16:40 - objects first these objects are also
16:43 - referred to as instances of that class
16:45 - so remember a class is kind of like a
16:47 - blueprint and the object is what's
16:49 - created from that blueprint you learn
16:52 - how to create a new instance of the
16:53 - class and you also learn about dot
16:55 - notation which is used to access the
16:57 - methods and properties of that object
16:59 - now if you need to I recommend to
17:02 - re-watch this video and ask any
17:03 - questions you have in the discussion
17:05 - area below I also have a worksheet for
17:07 - you to practice and to solidify these
17:09 - concepts in your head and if things are
17:12 - still a little fuzzy and it's completely
17:13 - normal if they are I highly recommend
17:16 - for you to download this worksheet and
17:17 - go through it now in the next lesson
17:20 - we're going to use your newly minted
17:22 - Swift skills to bring the war card game
17:24 - to life now if you're excited about that
17:26 - like I am type in ton pumped into the
17:29 - discussion area below now if you liked
17:31 - this video please hit that subscribe
17:33 - button down below and click on that
17:35 - bells notification icon if you don't
17:37 - want to miss the next lesson alright so
17:38 - click on the lesson 8 thumbnail and I'll
17:40 - see you there