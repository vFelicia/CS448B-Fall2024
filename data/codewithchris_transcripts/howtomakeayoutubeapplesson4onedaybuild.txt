00:00 - hey code crew in this lesson we're going
00:02 - to parse the json that we got from the
00:04 - youtube api
00:05 - from the previous lesson now i had
00:07 - originally
00:08 - intended to do that and more in this
00:10 - lesson but it turned out that parsing
00:12 - json required some
00:13 - careful and deliberate explanations so i
00:16 - want you to pay
00:17 - extra close attention in this lesson and
00:19 - re-watch the bits
00:20 - that you don't quite understand the
00:22 - reason is because parsing json is such
00:24 - an
00:24 - integral part to building ios apps
00:27 - especially if you're going to be working
00:28 - with apis in different platforms
00:30 - alright with that said let's dive in
00:33 - just a quick note if you're jumping into
00:34 - the series at this point you kind of
00:36 - need to watch these lessons in a
00:37 - progression for it to make sense
00:39 - first make sure you've watched the 29
00:41 - lesson beginner series to get the basic
00:43 - skills
00:44 - then make sure you're watching this
00:45 - youtube app one day build lessons
00:47 - in order links to both of these
00:49 - playlists will be in the description
00:52 - so let's start off where we last left
00:55 - off
00:55 - and that was after downloading the data
00:58 - from the youtube
00:59 - data api and we got to this point so we
01:02 - were successfully able to
01:04 - send a request with the api key and
01:07 - retrieve those playlist items but
01:09 - now we have to parse the data into video
01:11 - objects and that's what we're going to
01:12 - go through
01:13 - in this lesson now before we begin one
01:15 - quick thing i want to mention at the end
01:17 - of the previous lesson i forgot to check
01:19 - in
01:19 - our code into source control whenever
01:22 - possible if you've
01:23 - finished the segment of functionality
01:25 - and it's working
01:26 - you've tested it it's a good idea to
01:28 - check it into
01:29 - github or whatever source control you're
01:31 - using that way
01:33 - when you're moving on to the next thing
01:35 - and you
01:36 - maybe mess something up or you want to
01:38 - roll back you don't have to roll back
01:39 - all the way
01:40 - back to the beginning so that's what i
01:42 - did a couple of minutes before starting
01:44 - to record
01:45 - and so i you know i made this commit for
01:47 - our project in github here
01:50 - and also bitrise picked it up and
01:53 - automatically then ran the code to
01:54 - double check that i didn't make any
01:56 - mistakes
01:57 - so that's the great thing about having
01:59 - bitrise hooked up to github and again
02:01 - links to both github and bitrise are in
02:02 - the description below
02:04 - now one quick thing i want to mention is
02:06 - that when you are checking in your code
02:08 - into a public repository like this one
02:10 - is where everyone can access it just be
02:12 - very careful about sensitive information
02:14 - like api keys and stuff like that
02:16 - um i initially accidentally checked in
02:18 - my api key
02:20 - so then i removed it but then the thing
02:22 - is you can actually peek into your
02:24 - commit history and
02:25 - um you can see you know the code that
02:29 - um that was in previous commits and
02:31 - previous versions
02:33 - so i basically had to regenerate my api
02:35 - key so the one that
02:37 - you can see in here no longer works all
02:39 - right anyways
02:40 - let's get back to the topic on hand
02:42 - today
02:43 - and the first thing i want to do is
02:45 - really revisit that api call
02:47 - i'm going to take the json response and
02:49 - i want to indicate to you and point
02:51 - out to you which pieces of information
02:53 - from that json we want to extract
02:55 - into our video object so i'm going to go
02:58 - ahead and copy this json response
03:00 - and if you're unsure about what this is
03:02 - you should watch the previous video
03:03 - where we
03:04 - made this api call and got this json
03:06 - response containing the videos that we
03:08 - want
03:09 - so i'm going to copy all of this because
03:11 - i mean this window is kind of small to
03:13 - look at
03:14 - and i'm going to go to a website like
03:16 - jsonlint.com
03:17 - and this basically is a validator for
03:19 - json now the valid
03:21 - the json that comes back from the api
03:23 - call will definitely
03:25 - or should be valid i would assume that
03:27 - it is
03:28 - but the other nice thing is that we've
03:29 - got a nice big window to explore this
03:31 - json
03:32 - so let's take a look at what this is and
03:34 - especially if you don't know what json
03:35 - is i'll just
03:36 - quickly go over what we're looking at
03:38 - here so let me just
03:40 - sort of collapse as much as i can here
03:44 - actually let me just collapse this root
03:46 - node so you can see
03:48 - that everything is contained within
03:50 - these curly brackets here
03:51 - and these two curly brackets indicates
03:55 - uh a json object so this whole thing is
03:58 - a json
03:59 - object the thing that gets returned if
04:01 - you open up the json object
04:03 - all it is it's pairs of keys and values
04:06 - so you can see here kind is a key
04:10 - and then there's a colon and then on the
04:13 - other side of that colon
04:14 - is the value right so this is a key
04:17 - value pair
04:18 - so it's the value is sort of like the
04:20 - data the
04:21 - the key is kind of like the label
04:23 - describing what the data is
04:25 - so there's a key value pair there's a
04:27 - key value pair there's one
04:28 - we don't really care about these key
04:30 - value pairs which is why i'm skipping
04:31 - through it
04:33 - but you can see here now that
04:36 - we have a key called items and the value
04:39 - for items well it's actually an array
04:43 - or in other words a list of
04:46 - json objects of other json objects so
04:48 - you can see if i collapse these json
04:50 - objects because because remember
04:52 - i told you that curly brackets indicates
04:55 - a json object so items
04:59 - is a key and the value for items
05:02 - is actually a list of these five json
05:04 - objects
05:06 - now each of these json objects if i
05:08 - expand one of them
05:09 - you can see it contains more key value
05:12 - pairs
05:13 - and it's got kind etag id we get that to
05:16 - snippet
05:17 - that key the value for that key is
05:20 - another json object so you can see
05:23 - there's this nested effect sort of going
05:25 - on
05:25 - all right if i expand this json object
05:27 - what's inside well
05:29 - now we're starting to get to some of the
05:30 - data we're interested in
05:32 - in for the video we have this published
05:35 - date
05:36 - right the key is published and the value
05:38 - is the date the video was published on
05:40 - we have title description those are
05:42 - pretty self-explanatory
05:44 - we have a key called thumbnails where
05:46 - the value is actually
05:48 - a json object and that json object
05:52 - contains keys called
05:55 - default medium high standard and max res
05:58 - basically describing what resolution of
06:00 - the thumbnail you want
06:02 - so we're interested in the high key
06:04 - that's what we need
06:05 - if i expand this key the value for
06:08 - the high key is another json object
06:11 - containing these key value pairs
06:12 - and ultimately this is what i'm
06:15 - interested in the url key
06:17 - and this value is the url for our video
06:21 - thumbnail
06:22 - okay so that's where we would get the
06:24 - thumbnail
06:26 - url going on we have this key value pair
06:29 - this one this one not really concerned
06:31 - about those
06:32 - check out this key resource id the value
06:35 - for this key
06:36 - is a json object which contains two key
06:39 - value
06:40 - key value pairs we're interested in this
06:42 - key value pair
06:44 - the key is video id and the value is the
06:47 - actual
06:48 - id that we need to specify in the url
06:52 - so that we can actually display the
06:53 - video so we need that piece of data
06:56 - so if you take a look at what we've got
06:59 - here
07:00 - in our xcode project we have a video
07:02 - struct this is what we declared
07:04 - and we have these properties video id
07:05 - title description thumbnail published
07:09 - these are all the properties we need to
07:10 - set from
07:12 - the json data that i just pointed out to
07:15 - you right here
07:17 - so if i collapse this again
07:20 - each of these json objects under the
07:24 - items key
07:26 - each of these json objects needs to be
07:28 - converted to
07:29 - a video object so ultimately when we
07:31 - parse this json response
07:33 - or translate this json we are going to
07:37 - end up with a list of five
07:38 - video objects right we've got these five
07:40 - right here
07:42 - now this process of translating this
07:44 - json
07:45 - into uh that list of video objects
07:49 - is called parsing json or more
07:51 - specifically
07:52 - decoding json into our video objects now
07:55 - to make this process
07:56 - easier swift has something called the
07:58 - codable protocol
08:00 - which basically allows us to specify
08:03 - instructions
08:04 - on how to translate this json
08:07 - into an array of these video objects
08:11 - now the codable protocol is actually a
08:13 - combination of two protocols
08:15 - encodable and decodable it lets you
08:18 - specify
08:18 - instructions for translating both ways
08:21 - decoding the json to the video object
08:23 - and also encoding a video object to the
08:27 - json format
08:28 - since we're only interested in decoding
08:30 - the json
08:31 - to a list of video objects we're only
08:33 - going to use the decodable protocol
08:35 - instead of the two-way codable protocol
08:38 - but oftentimes when you
08:40 - look up how to parse json with swift
08:42 - they will call it the codable protocol
08:44 - but that's really a two-way street
08:45 - so just to reiterate we're only going to
08:47 - use the decodable protocol and we're
08:49 - only going to specify the decoding
08:51 - instructions on how to map the json
08:54 - to properties of our video struct
08:57 - let's first start by indicating that our
08:59 - video struct
09:00 - is going to conform to the decodable
09:03 - protocol
09:05 - and next we're going to write the
09:07 - decoding instructions on how to map
09:09 - those json key value pairs
09:10 - into the properties that we have here
09:12 - and that happens inside
09:14 - an initializer and sometimes
09:18 - autocomplete will help you and you'll
09:20 - see it on this list and sometimes it
09:22 - won't
09:23 - and you'll have to manually type it out
09:25 - so i'm going to
09:26 - type it out here and then sort of
09:28 - explain
09:29 - to you what it does
09:36 - so basically there's a class called json
09:38 - decoder and it takes the json data
09:41 - and you tell it uh what data type to try
09:44 - to decode that json
09:45 - into in this case we've indicated that
09:48 - our video object
09:50 - is decodable and what that json decoder
09:53 - is going to do is
09:54 - pass one of these json objects here
09:59 - that because there's five it's going to
10:00 - pass one of them
10:02 - into this initializat into this
10:04 - initializer method
10:06 - and in here you're going to write the
10:07 - instructions on how to
10:10 - turn this json object with all of these
10:12 - key value pairs
10:13 - and sort of map it into here so that's
10:16 - basically the gist of what we're trying
10:18 - to do now there is one step before we
10:20 - can actually get to writing the
10:22 - instructions and that is
10:23 - specifying the set of keys that we are
10:26 - interested in
10:27 - um and this set of keys has to exist in
10:30 - order for
10:32 - in order for us to be able to parse that
10:34 - json object
10:35 - into a video object so how we specify
10:37 - this
10:38 - is with a special enum that we can
10:40 - declare up here
10:42 - and this is going to be called coding
10:44 - keys
10:46 - and it's going to have a raw value type
10:49 - of string and i'll explain to you what
10:51 - this means in a second when we get to it
10:53 - and it also conforms to the coding key
10:56 - protocol
10:58 - and again i will point when we get to
11:00 - where it matters i will point out to you
11:03 - um what these why we have to specify
11:05 - these two things
11:07 - but in here you start specifying the
11:09 - keys
11:10 - or indicating the keys that we're
11:11 - interested in so
11:13 - you have a case for each key
11:16 - so you start with a case and then let's
11:18 - go and take a look at our json and see
11:21 - inside a single video json object
11:24 - which key would we be interested in well
11:27 - there is
11:28 - publish that right so what we indicate
11:32 - is uh the case name is our property name
11:37 - we're gonna do case published and we say
11:40 - that is going to be equal to
11:42 - the key that that should map to the json
11:45 - key
11:45 - and it has to be exactly matching with
11:48 - this
11:49 - json key name so i'm going to copy this
11:52 - and i'm going to paste that there
11:55 - all right and then we we just keep going
11:56 - like that um the next one
12:00 - how about title titles
12:03 - equal to
12:07 - uh and the json name for that would be
12:09 - title
12:10 - now if it matches what we have up here
12:12 - the property name we don't really have
12:14 - to specify the string value for it so we
12:16 - can just leave it like that
12:19 - case description again
12:22 - the json key name for that is just
12:25 - description so we don't have to specify
12:27 - a string
12:28 - what else do we have here case
12:31 - thumbnail and that is
12:34 - actually going to be the key for that
12:38 - we expand this and uh
12:43 - you know that is what we're ultimately
12:46 - trying to
12:47 - get to assign into our thumbnail
12:49 - property
12:51 - so here we have to just specify the key
12:55 - for that value so that is url
13:00 - now these are the keys that have to
13:02 - exist
13:03 - in order for us to be able to get the
13:04 - data right video id
13:07 - i think this matches too so video id was
13:11 - down here and again
13:14 - this video id key matches our
13:18 - property name so we don't have to
13:20 - specify this string
13:23 - okay in addition to specifying these
13:26 - keys
13:26 - the json keys that map to these
13:28 - properties there are a couple of other
13:30 - keys that we're interested in right
13:33 - so if you take a look at this json
13:36 - object
13:38 - right this represents a video object but
13:41 - all the keys that we're
13:42 - sorry all the values that we're
13:44 - interested in are actually
13:46 - inside this json object right which is
13:49 - keyed by
13:51 - the snippet key so we actually are
13:53 - interested in this snippet key as well
13:55 - we need to reference this
13:57 - this guy in order to fetch this
14:00 - json object that really contains all the
14:03 - data
14:04 - so i'm going to also specify up here
14:08 - case snippet and if you expand that json
14:13 - object
14:14 - so there's publish that inside this
14:17 - title description
14:18 - okay thumbnails right ultimately we want
14:21 - this key value pair but this is actually
14:24 - contained as
14:25 - the json object for this key
14:28 - right and this json object
14:32 - is keyed by thumbnails so we also have
14:35 - to specify this key
14:36 - and this key right ultimately to reach
14:39 - this point
14:41 - right because you need thumbnails to get
14:43 - this json object
14:45 - and then in here you need to get to this
14:48 - key
14:48 - to get to this json object and
14:50 - ultimately that's how we get
14:52 - this key value pair so thumbnails and
14:54 - high
14:55 - so i'm going to put that here
15:01 - okay and i think oh there's actually one
15:03 - more so that was thumbnails
15:06 - if you come down here you'll notice that
15:08 - we need to access resource id
15:11 - right to get to this json object which
15:13 - ultimately contains
15:14 - the key value pair here that we're
15:16 - interested in so resource id is another
15:18 - key that we
15:19 - want to specify so i'm going to put that
15:22 - there
15:23 - and again this this will match that
15:28 - all right so now this part of our work
15:30 - is done but
15:31 - i do want to mention that you know how
15:33 - here we had to specify
15:35 - uh the json key name because it didn't
15:39 - match our
15:40 - property name up here that is why we
15:42 - specified that the raw value for this
15:44 - enum
15:45 - for these cases is going to be string
15:48 - type so
15:49 - that's an explanation of why you know we
15:51 - have to specify string here
15:54 - and we will get to why this coding key
15:56 - part is necessary
15:57 - once we start writing the decoding
15:59 - instructions which is exactly what we're
16:01 - going to do now
16:02 - so what happens when this initializer is
16:06 - called
16:06 - as i mentioned this piece of
16:10 - json right here is going to get passed
16:13 - in
16:14 - to this initializer method and this
16:17 - decoder
16:18 - parameter is a reference to that json
16:20 - decoder
16:21 - so the first thing we need to do is
16:24 - get this information from the json
16:26 - decoder now in this whole decoding
16:29 - process when we're writing these
16:30 - instructions
16:31 - on how to decode the json a json object
16:34 - is known as a container
16:36 - so this is the can this is a container
16:39 - right it's
16:39 - these curly brackets right here uh this
16:42 - snippet
16:43 - key right the value is a json object
16:47 - here which is known as a container
16:52 - so this thumbnails key right here the
16:54 - value is a json object which is known as
16:56 - a container
16:57 - in the decoding process so when you see
17:00 - the word container
17:01 - you you can kind of think of it as a
17:03 - json object
17:04 - all right so first we're going to get
17:06 - this container
17:07 - right this contains all the information
17:10 - and the way we do that
17:12 - is we're going to say decoder dot
17:15 - container right and this throws
17:19 - so if it can't retrieve it if it can't
17:22 - return that data to us it's going to
17:23 - throw an
17:24 - error so that's what throws means
17:27 - and we have to pass in the coding key
17:29 - protocol which
17:31 - we've set up right up here so what we do
17:34 - is we pass in coding keys
17:37 - dot self and because this
17:40 - may throw an error we actually have to
17:43 - write try here
17:44 - so this is going to return that
17:46 - container why don't we assign it to
17:50 - a constant so
17:53 - essentially what we've done here is
17:55 - we've
17:56 - gotten this container from the decoder
18:00 - this guy right here and we've assigned
18:03 - it to a constant called container
18:06 - all right what do we need to do next
18:08 - after we have this
18:09 - data well we need to get this inner
18:11 - container
18:13 - right keyed by snippet because that's
18:15 - really where
18:16 - all of our data is uh residing in
18:19 - so we're gonna say let snippet container
18:23 - equals and we're gonna sort of do the
18:25 - same thing that we have here except
18:27 - this time we're not going to specify
18:28 - decoder we're going to specify container
18:30 - because
18:32 - container actually actually has all of
18:35 - the data
18:37 - right so we're going to say
18:41 - dot container.net container keyed by
18:45 - we're going to pass in the same set of
18:46 - coding keys
18:49 - for the specific key though
18:53 - snip it so what this is going to do
18:57 - is it's going to look for the snippet
18:58 - key and it's going to grab that
19:01 - container for the snippet key
19:06 - and it's going to assign this block
19:09 - sorry not that blood this block right
19:11 - here
19:12 - it's going to assign this block to
19:17 - sorry my mistake it was it was this it's
19:20 - going to assign this block
19:22 - to to snippet container so hopefully
19:26 - that's making sense and maybe
19:27 - what i can do is to make it a little
19:30 - easier so that we can see both sides of
19:32 - the screen
19:34 - is do something like this
19:40 - all right so now that we have this
19:42 - snippet container
19:44 - we can start grabbing some of the key
19:46 - value pairs that we need
19:47 - publish that title description those
19:49 - three are really easy to grab
19:50 - so why don't we say parse the title
19:54 - parse the description and
19:58 - parse the publish date
20:04 - okay so in here we're going to say um
20:09 - snippet container dot decode
20:12 - and so we can actually start to decode a
20:15 - key value pair
20:16 - we're going to decode these are string
20:18 - values right so we're going to decode
20:21 - the string type we're going to say that
20:24 - it's going to be a string
20:27 - and we're going to pass in the key that
20:30 - specifies that
20:31 - title so that's going to be our title
20:34 - right here
20:36 - and again we're going to specify try and
20:39 - then we're going to say
20:40 - let what what we're going to assign it
20:42 - to this property up here so we're going
20:43 - to say self.title is equal to
20:47 - right snip a container and it's going to
20:49 - try to decode
20:51 - the value which is of a string type for
20:53 - the key title
20:55 - right so it's going to try to grab this
20:57 - guy
21:00 - right for that key title
21:04 - right it's going to try to assign it to
21:05 - our title property okay next for
21:07 - description
21:10 - so self.description is equal to try
21:13 - snippetcontainer.decode
21:15 - and again it's going to be string type
21:20 - and let's go to string.self for the key
21:23 - description okay and for this last one
21:28 - self published
21:31 - equals here try
21:35 - snippet container dot decode
21:39 - we're actually going to try to decode
21:41 - this we
21:42 - we could leave it as a string you can
21:44 - see that here
21:46 - the publish state is a string but we can
21:49 - actually try converting it to a date
21:50 - object on the spot
21:52 - so we're going to say decode it into a
22:00 - okay i'm just gonna say date
22:06 - like that for the key
22:10 - published
22:14 - now the reason why we have an error here
22:16 - is because
22:17 - uh we've actually
22:21 - we've declared this published property
22:24 - as a string
22:25 - so i'm actually just going to set this
22:28 - to a date instead
22:31 - right so that we can actually assign a
22:33 - date type into it
22:34 - and it's actually better to work with
22:36 - the date than a date string
22:38 - if if you're going to have to do any
22:40 - sort of date manipulation
22:42 - all right so the next thing we want to
22:44 - do is let's say let's tackle the
22:45 - thumbnails next in here
22:47 - so let's say parse thumbnails
22:51 - so from here from this container
22:55 - how do we get into the thumbnails
22:57 - container
22:58 - well we have to get the thumbnails
23:01 - nested container
23:03 - so the way we do that is we're going to
23:06 - declare another
23:08 - constant here let's call it thumbnail
23:11 - container equals try
23:15 - and this is in the snippet container
23:18 - right
23:18 - so snippet container dot
23:22 - nested container we're going to pass in
23:25 - coding keys
23:29 - for the key thumbnails
23:34 - right because that's the key right here
23:36 - and that's going to give us
23:38 - this container or json object
23:41 - okay so we're one step closer so now we
23:44 - have this container in here
23:46 - how do we get to the url
23:50 - key well we need to actually get this
23:52 - nested container or json object first
23:55 - keyed by the high key so let's
23:59 - just drill down even further let
24:02 - hi container equals try
24:06 - thumbnail container all right so we're
24:09 - going from the thumbnail container to
24:11 - a deeper nested container then coating
24:15 - keys dot self
24:16 - for the key hi and that's going to give
24:20 - us
24:21 - this container finally we have access to
24:23 - these key value pairs
24:26 - and then here we can say
24:29 - a self dot thumbnail is equal to
24:33 - a high container dot d code
24:37 - uh string type right string type
24:41 - string dot self for the key um
24:46 - for the for the key thumbnail which is
24:49 - actually mapped to the json key url
24:56 - so that is going to grab this
25:00 - value right here right keyed by url and
25:03 - it's going to assign it to
25:05 - our thumbnail property so we also have
25:07 - to put try there
25:10 - lastly let's parse the video id
25:14 - so what do we have to do from the
25:15 - snippet container
25:18 - this is the snippet container we have to
25:20 - get
25:21 - this json object keyed by resource id
25:26 - so let's say let resource
25:30 - id container equals try
25:35 - snippetcontainer.nestedcontainer
25:37 - keyed by codingkeys.self
25:41 - for the key resource id
25:45 - all right so then that gives us this
25:47 - inside container
25:49 - containing this key value pair we want
25:52 - this piece of data
25:54 - keyed by video id so finally here we can
25:57 - say self.videoid is equal to
26:01 - a resource id container.decode
26:07 - string type so string.self for the key
26:13 - video id do we not
26:16 - have that oh there it is for video id
26:20 - all right and oh we have a try here
26:24 - so that's all the code we need to write
26:26 - for the
26:27 - decoding instructions but i did say i
26:30 - want to mention about why we have
26:32 - this coding key here and that's because
26:35 - that allows us to
26:37 - pass these cases or these these enum
26:40 - types
26:41 - into here when the parameter is asking
26:43 - for which
26:44 - key to decode and which key to grab the
26:47 - containers for
26:49 - that's why we have to specify that this
26:51 - enum conforms to the coding key
26:54 - so hopefully that makes sense it i'm
26:56 - sure it's a little bit confusing if this
26:58 - is the first time you're watching it i
26:59 - would advise you just to watch this
27:01 - little part
27:02 - where we're writing these instructions a
27:04 - couple of times until it starts to sink
27:05 - in
27:06 - or you can wait until the next app we
27:08 - build that we need to parse json because
27:10 - we're going to need to do this for a lot
27:12 - of the apps that work with apis
27:14 - right and all of them will the json
27:17 - responses will be
27:19 - a little different and so the
27:20 - instructions will be a little different
27:21 - but the technique
27:23 - is the same all right so that was much
27:25 - of the heavy lifting
27:26 - what we've done right now is we've
27:28 - described how to parse
27:30 - one of these json objects into an
27:32 - instance
27:33 - of our video object here
27:36 - but uh what we're missing still is
27:39 - that when we get the json response back
27:42 - from the youtube data api
27:43 - we actually get this whole json object
27:45 - here um so we have to
27:48 - also provide instructions on how to
27:50 - parse this guy
27:51 - but this part is very simple because the
27:53 - only key we're interested in
27:55 - is this key right here which contains
27:57 - the array of these json objects that we
27:59 - want to parse
28:00 - so let's go back into our xcode project
28:02 - right now and i'll show you how
28:04 - to we're going to wrap this up in no
28:06 - time
28:08 - so let's create a new
28:11 - swift struct we'll add a swift file
28:14 - and we're going to call this response
28:20 - and this is going to be a struct called
28:23 - the response
28:24 - and it's going to conform to the
28:26 - decodable protocol
28:29 - right and it's going to have a property
28:31 - called items
28:33 - which is an array of video
28:37 - objects okay now we're going to make
28:40 - this property
28:41 - optional so it's going to be nil at
28:45 - first
28:45 - the next thing we have to do as you
28:47 - remember is
28:48 - specify the coding keys enum and it's
28:52 - going to be
28:53 - string encoding key here and
28:56 - in here we specify a case with the key
29:00 - or keys that we are interested in so
29:03 - if we take a look at this being the
29:05 - response the only key we're interested
29:07 - in
29:08 - at this point right now is items all
29:10 - right so i'm just going
29:12 - to specify items here and it also
29:14 - matches our property name here
29:16 - so i'm not going to need to
29:19 - you know do the equals string okay
29:22 - and then we're going to do the init here
29:24 - and again autocomplete's working
29:26 - against me so i'm going to just type it
29:29 - out
29:33 - like that and
29:36 - in here we're going to specify the
29:38 - instructions on how to
29:41 - how to parse the items here now these
29:44 - instructions are very simple
29:46 - first let's get the container so let
29:48 - container
29:49 - equals decoder dot
29:52 - don't forget the try keyword
29:54 - decoder.container
29:56 - all right keyed by codingkeys.self
30:00 - and that's going to give us this
30:02 - container right here
30:04 - and we already have access to the items
30:07 - key
30:08 - and that's going to be simple
30:11 - so all we do right here is we do
30:14 - self.items
30:15 - is equal to container dot decode
30:19 - and we're not going to find the type
30:21 - that we need here because
30:23 - the type is basically an array
30:27 - of video objects and that's what we want
30:30 - to convert it to
30:32 - so when we write decode
30:36 - here um we're just gonna pick anyone
30:39 - but for the type we're gonna specify
30:42 - that it is an
30:43 - array of video objects
30:46 - right these guys right here
30:50 - all right so for the coding key dot
30:53 - items and that's basically it
30:56 - and we have to specify try up here
31:02 - oh and also specify you use this
31:05 - dot self to indicate that this is a type
31:08 - that you want this is what you want to
31:10 - try to
31:11 - decode this json right here
31:16 - into this type an array of video objects
31:21 - so that's all we have to do now we can
31:23 - go back to our model
31:24 - let's finish off our implementation here
31:28 - so here we have parsing the data into
31:30 - video objects the first thing we need to
31:32 - do is declare a new
31:34 - json decoder object or create a new
31:37 - json decoder all right the other thing
31:40 - we're going to do
31:42 - before we actually run the parser or run
31:44 - the decoder is we have to set
31:46 - the date decoding strategy and
31:50 - you're essentially specifying the date
31:52 - type
31:53 - when you convert string data as in the
31:56 - json data right here
31:58 - for example this date right here you're
32:00 - specifying the date format so it knows
32:02 - how to convert that
32:03 - string date into an actual date object
32:07 - so this date format is actually a
32:11 - standard format called
32:17 - iso 8601
32:21 - so that matches this standard right here
32:23 - so it's going to be really easy
32:25 - okay so now that we've told the decoder
32:27 - that
32:28 - if you find dates in the json it's going
32:30 - to be of that format
32:32 - we can actually run the decoding method
32:35 - now so we're going to say
32:37 - decoder dot decode
32:40 - right here you can you specify
32:45 - what type you want to try to change
32:49 - this json data into and we do have that
32:53 - it's going to be of the type response
32:56 - right
32:57 - and what the json data what is that
32:59 - that's going to be the data right here
33:03 - data and we've already checked that it's
33:05 - not nil
33:07 - so we can actually force unwrap that
33:10 - so that method is going to decode the
33:12 - json data let's assign the result to
33:14 - something
33:16 - so we're going to say let response
33:19 - equals
33:20 - and because this method throws we're
33:23 - going to have to
33:24 - just wrap it in some error handling
33:28 - so we're going to try to do this and
33:31 - we're going to catch
33:32 - any errors that may occur so
33:35 - we're going to put this inside the do
33:37 - block
33:40 - so if this method fails if something
33:42 - goes wrong with the parsing it's going
33:44 - to throw an
33:44 - error and it's going to be caught down
33:47 - here so
33:48 - this is if this is the first time you've
33:50 - seen any sort of error handling in swift
33:53 - in general how it works is if there is a
33:55 - method call
33:56 - or you know something that you're doing
33:58 - that may throw an error
34:00 - you have to put the try keyword in front
34:02 - of it and you have to
34:03 - wrap that inside a do block and then you
34:06 - have to have a corresponding
34:08 - catch block or you should and this is
34:11 - where you handle the
34:12 - error if it gets thrown all right so
34:15 - we're done
34:16 - so let's just try this out i'm going to
34:18 - use
34:19 - the dump keyword to just output
34:23 - everything inside response into the
34:25 - console so we can see if this works or
34:27 - not
34:28 - so let's put a breakpoint right here and
34:30 - let's just run the application
34:33 - this is going to hit the youtube api
34:36 - it's going to get the json response and
34:39 - it's going to try to decode it
34:41 - so let me actually just put a breakpoint
34:43 - right here going to put a break point
34:48 - right here and i'm also going to put a
34:50 - break point right here
34:54 - and i'm going to put a break point right
34:57 - here
34:57 - inside all of the decoding instructions
35:02 - so it's still launching the simulator
35:07 - and when our app finally runs we should
35:09 - basically see
35:12 - it come into here first right
35:16 - where it's trying to uh decode it into
35:19 - our response
35:20 - object and then yeah so there we go
35:24 - it's hit this breakpoint it's going to
35:26 - try to decode this entire json response
35:29 - that i've highlighted here it's going to
35:31 - try to decode it into
35:33 - an instance of the response object so
35:35 - i'm going to hit this
35:36 - to let it run and as expected it's come
35:39 - into our decoding instructions for the
35:42 - response
35:44 - so inside here we've basically given it
35:48 - instructions to decode
35:52 - the value for the items key right and
35:54 - try to decode that
35:57 - into an array of video objects so
35:59 - essentially
36:03 - try to decode
36:06 - this right into
36:09 - an array of video objects so if i hit
36:14 - continue execution now it's come into
36:18 - our first video right it's coming
36:21 - into the first json object this guy
36:24 - right here and it's going to try to
36:26 - then go through our instructions and
36:29 - output a video object so i'm going to
36:30 - continue execution
36:32 - and it's done that so now it's come back
36:35 - for the second json object this guy
36:37 - right here
36:38 - that's going to go through the decoding
36:40 - instructions and now this is the third
36:42 - one
36:43 - so now we're at this point right so it's
36:45 - going to keep it's going to go through
36:46 - these instructions for each one
36:48 - there are five okay so now we're done
36:50 - we've parsed all
36:52 - five of these json objects into video
36:54 - objects
36:55 - and when i dump the response we should
36:57 - see the results so i'm gonna execute
36:59 - that
37:00 - and there it goes let me just
37:03 - pull this up so you can see i scroll all
37:06 - the way up it's a lot of data
37:10 - but you can see that uh
37:14 - there's the response object it's got a
37:15 - property called items and
37:17 - inside you can see a list of videos
37:20 - you know it's all of our stuff
37:25 - five elements and each of these are
37:28 - videos i can't actually collapse these
37:29 - right here
37:30 - but nothing's crashed everything should
37:32 - be good
37:34 - you know another thing another way we
37:35 - can test this is
37:39 - you know just do some um debugging or
37:42 - some outputting in the console so we can
37:44 - remove some of these breakpoints
37:49 - let's just deactivate the breakpoints
37:52 - and run
37:53 - our app again and right before it dumps
37:56 - the response
37:57 - we can we can check what's in the
37:59 - response right
38:01 - items access the first
38:04 - oops
38:07 - we can access the first video so you can
38:10 - see it's got all the data
38:12 - all right this is the second video and
38:14 - we can actually access the
38:16 - title or description
38:20 - video id you know so everything seems to
38:23 - be there everything seems to be working
38:26 - and yeah that was a lot of work but
38:28 - after
38:29 - you've done it a few times parsing this
38:31 - json becomes a lot
38:32 - easier now before we end off let's go
38:35 - ahead and deactivate our breakpoints
38:37 - right here
38:38 - and let's check in our code but this
38:40 - time i'm actually going to remove my api
38:43 - key first
38:44 - so let me go into my constants file and
38:46 - let me just
38:47 - delete this key and save it uh
38:50 - and then let's bring up terminal
38:54 - and let's do git status
38:57 - and we added a new file so we actually
39:00 - have to add this file to our commit
39:02 - uh so i'm going to say git add
39:06 - let's start git status again and now we
39:08 - can see all of the files that we
39:10 - modified
39:11 - let's do git commit
39:15 - added code to parse the json response
39:20 - okay let's commit that and then now
39:24 - we only have to push it
39:27 - to our repository
39:31 - and so it's sending it we go back to
39:33 - github
39:34 - and we refresh that we have
39:37 - our latest commit and bitry should pick
39:40 - that up if i refresh the page
39:44 - you can see there and it's going to
39:48 - pull the code from github our latest
39:50 - commit and it's going to compile it and
39:52 - make sure nothing's broken
39:53 - and we should be good to go alright so
39:55 - today you successfully turned the json
39:58 - from the youtube api
39:59 - into an array of video objects that you
40:01 - can use in your app
40:03 - now i want to turn it over to you were
40:04 - you able to follow the json parsing and
40:06 - understand what was happening
40:08 - even if the syntax parts don't quite
40:11 - make sense to you
40:12 - were you able to kind of follow the
40:14 - nested structure and how we were
40:16 - reaching the different key value pairs
40:18 - that we needed
40:19 - by traversing that sort of json
40:21 - hierarchy let me know by leaving a quick
40:23 - comment below
40:24 - in the next lesson we're going to work
40:25 - on the user interface and display some
40:27 - of those video objects
40:29 - into a table view make sure you're
40:30 - subscribed to the channel so you don't
40:32 - miss it
40:33 - and also give this video a thumbs up if
40:35 - you enjoyed it and one last thing if you
40:36 - want to grab the source code for the
40:38 - project
40:38 - just visit the github page that i
40:40 - checked the code into
40:41 - the link will be in the description
40:43 - below all right thanks for watching and
40:45 - i'll see you in the next lesson