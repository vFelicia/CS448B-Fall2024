00:00 - in the last lesson we stored our API key in a 
config file and we were able to successfully  
00:04 - retrieve data from the YouTube API if you missed 
that lesson check out the playlist right over here  
00:10 - so the first step is to fill out the properties 
of our data models according to the response that  
00:15 - we get from the YouTube data API so let's take a 
look again at proxy man and this tool is really  
00:22 - helpful um especially because you can just send 
the request and look at the response and get this  
00:28 - tree View and then you can kind of go through 
like this um sometimes the documentation will  
00:33 - have the response so this is the YouTube data 
API I know the API Explorer if you use this  
00:40 - and you try out the request you're going to 
be able to see the response so here this kind  
00:45 - of gives you an idea yeah so if you don't want 
to use proxy man to look at it you can look at  
00:51 - this as well so this would be the playlist uh 
object or instance and this would be the items  
01:00 - right and each item is a video if you click on 
that you can see these are the properties of the  
01:06 - uh of the video actually let's use this because 
the text is bigger than we have here in proxy  
01:13 - man we're going to start with the video itself so 
we're going to add the decodable protocol and this  
01:22 - allows us to turn the Json data into instances of 
video uh using Json uh decoder so let's bring up  
01:33 - the API documentation so what I'm looking at right 
now is a single video so we can see that it has an  
01:41 - ID which is a string and this will be helpful for 
us because um we want to put these video instances  
01:49 - inside a swift UI list and it needs to be able 
to identify between different videos so we are  
01:58 - going to pick and choose the properties that we 
want to we want to parse essentially so there's  
02:03 - going to be a uh string ID okay and then there is 
going to be a snippet and inside is going to be a  
02:12 - title it's going to be a description both of 
these we need and those are strings and then  
02:18 - there's also going to be thumbnails let's first 
focus on title and description so again this is  
02:25 - a snippet property and the snippet itself you can 
see these curly brackets right that represents a  
02:31 - different um instance or struct or object whatever 
you want to call it all of it is representing the  
02:38 - same thing so we're going to say snippet is going 
to be it's going to be a type of snippet and I'm  
02:46 - going to make this optional in case it doesn't 
exist yeah snippet and not Snippets okay make  
02:52 - sure that the property is the same and I'm 
going to create another struct in here called  
02:56 - snippet and it too is going to be decodable so 
inside the snippet is where I would put title in
03:02 - description okay so these I mean all videos 
should have a title in description right  
03:16 - but just in case they don't you can make 
them optional for now I won't let's just  
03:21 - see what happens and then inside the snippet 
we have thumbnails what else do we need here  
03:29 - uh we need the the video ID let's deal with that 
before thumbnails because there's quite a bit in  
03:34 - here with thumbnails so let's do resource ID 
I'm going to spell it with a lowercase R like
03:40 - this um let's do that so then here I'm going 
to create another struct called resource ID  
03:56 - that is decodable and and the resource ID has 
well the only one I'm really interested in is  
04:05 - video ID and it's a string and I know that all 
videos must have a video ID okay so let's deal  
04:14 - with thumbnails was it thumbnails with an 
S this was inside the snippet so thumbnails  
04:21 - with an S yeah and then this itself is its own 
thing so we have to Define that let's call this
04:31 - thumbnails so let's create another struct called 
thumbnails and this is going to be decodable as  
04:42 - well and what do I need in here it's key let's 
take a look at proxy man here to look at a real  
04:52 - response uh we've got the snippet here and then 
we've got the snippet H thumbnails right here  
04:59 - let's open this up and then there are several 
different ones standard medium default High  
05:05 - Max res so you can try out these different ones 
these are all different uh file sizes you you  
05:11 - probably wouldn't want to get this one like this 
is the biggest one unless you're showing it on an  
05:20 - iPad maybe or you want it super clear when I was 
building my demo I was pretty happy with medium  
05:26 - so that's what I'm gonna go with actually medium 
is almost the smallest one default is is pretty  
05:32 - small so this is double almost double that size 
but uh I remember why I chose medium is because  
05:39 - the aspect ratio is different so you can see that 
um these are about yeah the aspect ratio was a  
05:53 - little different some of these look more square 
and some of them look more like a widescreen type  
05:58 - of thing so so I figured out like after trying 
them out that Medium was the one that displayed  
06:04 - nicely so that's what I chose um yeah so I'm going 
to say VAR medium and what's the type so the type  
06:15 - itself is another object so I'm going to have to 
create you know something for that just to house  
06:21 - these three properties this one is a string um 
this one is an INT and this one is an INT as well  
06:30 - so let's create a struct thumbnail 
size this is decodable to what is it
06:41 - URL is it like that height yeah okay and 
then this one will be just thumbnail size
07:01 - do I have everything I need so 
I have the thumbnail image URL I  
07:07 - have the video ID this this is for the 
video player and then I have the title  
07:12 - in the description I think this is it 
perfect and then going back out so this  
07:19 - is a single video going back one step this 
is the playlist okay and the playlist has
07:31 - and items which is an array of those video 
instances so if I go to playlist let's make  
07:43 - sure that this is also decodable and we want 
items right like that I hope you're enjoying  
07:55 - the lesson so far now just in case you want to 
launch your own app I want to tell you about  
07:59 - CW C+ this step-by-step program will help 
you launch your own app even if you don't  
08:04 - have any experience and it takes about 4 months 
if this sounds like something you're interested  
08:09 - in I have a special offer for you I'll leave 
the link in the description below this video  
08:14 - and hopefully I'll see you there if not no 
worries I really appreciate that you're here  
08:18 - watching this lesson and learning with us so 
thank you for that anyways now back to the
08:23 - lesson right and let's also we need to add 
identifiable uh which allows us to use an array  
08:36 - of this inside the Swift UI list and we have 
the ID already for the identifiable protocol  
08:45 - because that's what that requires and I think 
we're okay now let's try to parse it let's go  
08:51 - into the data service and let's continue parsing 
the data so we are going to uh first create a Json
09:00 - decoder and then we're going to say decoder 
do decode a certain type from so we're going  
09:13 - to decode the data from here and we are going 
to decode it into a uh an instance of playlist  
09:27 - so we're passing in the playl list as a type 
and so we have the add. self this is how you  
09:33 - specify a type oh I forgot to point out that 
this decode method can throw errors so it's  
09:42 - asking you to do try so we can put the try right 
here since it's already in a do block that's  
09:50 - perfect we don't have to do another one unless 
you want to specifically um handled that error  
09:57 - versus this error I'm sure you can different 
differentiate in here though when you catch  
10:01 - it okay so let's capture the result of this 
decoding so let playlist equals that and then  
10:10 - as you know our playlist instance has items 
which are the videos and this is what we are  
10:17 - going to try to return right because remember 
this method right here returns an array of
10:24 - videos all right let's see if this works works 
let us go back to our views and double check  
10:35 - what we're doing here all right so I'm going 
to set a breakpoint right here by tapping here  
10:42 - which is going to pause the execution um you 
know what let's not let's let's add a little  
10:48 - bit more before we run this okay that way we can 
visually see something in the simulator let's use  
10:55 - a swift UI list okay and we are going to pass 
in the video and because the video uh struct  
11:03 - is identifiable then that is all good that means 
we can use it in this list and then we are going
11:12 - to display for each video Let's just 
display the snippet title and if that is nil  
11:29 - just say just say title okay let me just do that 
all right let's see if we can see anything come
11:40 - up oh it was so fast but we could see 
the response sorry the request go out  
11:52 - the response comes back with five items and 
sure enough we see five items right here  
11:59 - now I expected to see more because our playlist 
actually has like eight videos or nine videos in  
12:06 - here 10 videos actually so let me take a look at 
here I think by default yeah the default value  
12:13 - for Max results is five so this is something 
that you'll want to set as well let's change  
12:20 - that in our data service what was that Max results 
capital r so I'm going to add that right here Max  
12:29 - results equals 20 let's say and this it's 
telling us that we never checked the response  
12:42 - so we can just ignore that by adding an 
underscore like we don't have to name
12:47 - that all right let's run it again happen so fast 
there we have everything so what we did here to  
12:59 - Day by parsing the Json through looking at 
the response and then mapping these key value  
13:04 - Pairs and creating these properties in our 
data model this is something that is very  
13:09 - common to do uh so it's best to get familiar 
with this process if you want to work with  
13:15 - different apis in the future all right now 
that we have the video instances showing up  
13:21 - in the feed view the hard part is done all 
we need to do is show the thumbnail images  
13:26 - if you're enjoying this build so far please 
give this video a thumbs up up and if you've  
13:30 - been following along and you are able to parse 
the Json data please comment down below saying  
13:34 - Json is no match for me all right thanks for 
watching and I'll see you in the next lesson