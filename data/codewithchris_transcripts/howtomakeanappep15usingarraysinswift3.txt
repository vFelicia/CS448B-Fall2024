00:01 - [Music]
00:06 - hello everyone and welcome to lesson 15
00:08 - of how to make iPhone apps with no
00:10 - programming experience in the previous
00:12 - lesson we randomized some numbers and
00:15 - appended that number to the word card in
00:18 - order to get card 2 card three card 4
00:21 - because those are our asset names in the
00:24 - asset Library well we learned that the
00:26 - limitation of doing it that way wouldn't
00:29 - allow us to to use the asset names Ace
00:32 - Jack queen and king so in order to make
00:35 - a randomization that includes Ace all
00:37 - the way to King and all the numbers in
00:39 - between we're going to leverage
00:41 - something called arrays and this is
00:43 - something that you're going to use quite
00:45 - often when you're programming in xcode
00:48 - so let's get started with the playground
00:50 - and I'll show you what an array is and
00:51 - how it works I'm going to choose get
00:54 - started with playground here I'm going
00:57 - to call this the array playground make
00:59 - sure the platform form is IOS I'm just
01:01 - going to save it on my desktop here all
01:04 - right so an array is a class that helps
01:06 - you manage a collection of values this
01:09 - is probably best explained with an
01:12 - example so take for instance you have
01:14 - this variable a and you're assigning the
01:18 - string hippo into it let's say you had a
01:21 - couple more strings you'd have to
01:23 - declare a variable to reference each
01:27 - string so that you can use these values
01:29 - later on but the problem with this is
01:31 - that the more strings you have the more
01:34 - variables you have to create and keep
01:35 - track of well using an array is very
01:39 - handy for this purpose so take a look at
01:42 - this syntax VAR a equals and then what
01:46 - we're assigning into a is an array and
01:50 - it's dictated by the square angle
01:52 - brackets and inside of it we're having
01:56 - multiple values with a comma in between
01:59 - each
02:01 - value so in this way we can store all of
02:04 - those strings into one variable a now
02:07 - how do I access each individual value
02:11 - well let's jump back into our playground
02:12 - and let me show
02:14 - you all right so let's declare that sort
02:17 - of array there VAR a equals I've got the
02:21 - angle brackets here and let's put some
02:23 - strings in side
02:26 - say cat dog and bird
02:30 - okay so I've got three strings inside of
02:33 - this array now in order to access cat I
02:37 - would write
02:38 - a and then a set of angle brackets or
02:42 - square brackets and inside of it I would
02:45 - specify an integer so uh if I wanted to
02:48 - access cat it would actually be zero
02:51 - because arrays start at zero okay so the
02:55 - index for cat is zero dog is one and
02:58 - bird is two so you can see here that
03:02 - a0 at zero is cat Okay so
03:07 - likewise a at the index one is dog now
03:11 - the handy thing about the array class is
03:13 - that it's got a bunch of methods in
03:15 - order to help us insert things remove
03:18 - things and count things so that can be
03:20 - very useful if you wanted to determine
03:22 - how many items were in your array you
03:24 - would do a DOT and you would call this
03:27 - property here and would tell
03:31 - you uh playground is running right now
03:33 - so give it a chance there we go so
03:36 - there's three items in this
03:38 - array now remember that it's zerob based
03:42 - right so it tells you that there's three
03:45 - but the last item in that array is
03:47 - actually at index 2 okay so just
03:49 - remember that because I know when I was
03:52 - just starting to program I would very
03:54 - often do something like this because I
03:57 - thought there were three items in the
03:58 - array and I wanted to get the last one
04:00 - but you can see that this causes an
04:02 - error if I wanted to access the last one
04:04 - it would actually be the count minus one
04:08 - gets you the last
04:09 - item okay so what if I wanted to add
04:12 - some more items well there are several
04:13 - ways to do this uh the array has a
04:16 - method called insert where I can insert
04:20 - a new element so a new string at a
04:23 - particular index if I wanted to just put
04:25 - it in the middle or in between some
04:27 - elements there's also another one called
04:29 - after and you can say it's after a
04:32 - certain index and but most often you'll
04:35 - either be using insert or there's
04:38 - another way so let's just do an example
04:41 - for insert first so I'm going to
04:47 - do rabbit at index zero so this is going
04:50 - to insert rabbit at the very beginning
04:53 - and it's actually going to be the first
04:55 - item now and Cat's going to be the
04:56 - second item so you can see here the
04:59 - array looks like this now on the right
05:00 - hand side okay let me show you some
05:03 - other ways there is also a pend which is
05:06 - going to just tack on the element at the
05:10 - very end of the
05:12 - array uh so let's do another one let's
05:16 - say mouse okay and this is just going to
05:20 - append it at the very bottom you can't
05:21 - really see it there you go Mouse is
05:24 - right there and another short form to
05:27 - doing it is just saying a
05:30 - plus equals and then putting something
05:33 - in there let's say
05:39 - snake oops actually xcode is complaining
05:43 - about
05:44 - that uh that's right so when you're
05:47 - using the plus equals you actually have
05:49 - to be appending another array like that
05:55 - so if you wanted to add snake to the
05:56 - very end make sure you surrounded by
05:58 - angle brackets when you're using this
06:00 - sort of notation and the reason for that
06:02 - is because you can append multiple items
06:05 - so I can do something like
06:07 - this and put in snake end elephant and
06:10 - it's just going to put it at the very
06:12 - end there as you can see like
06:16 - that and the array also has some handy
06:19 - methods for removing things so for
06:22 - example I can remove an element at a
06:25 - certain index I can remove all of them
06:27 - there's remove last and first
06:32 - okay so that can be handy if you want to
06:34 - remove some items so in general if you
06:37 - have a sort of list of values or list of
06:41 - items uh using an array to store them
06:44 - can be really handy also let me point
06:46 - out that in an array you have to store
06:50 - items of the same type so for example
06:53 - we're storing all strings here so that
06:55 - implies that arrays have a type a data
06:58 - type just like a variable for instance
07:00 - here that stores a string remember I I
07:03 - told you that uh you can actually do
07:06 - something like this and when you declare
07:09 - a variable and you use this colon and
07:12 - then you uh write in the data type that
07:15 - means that this variable can only store
07:17 - data of type string same thing goes with
07:21 - the array
07:23 - so something like that you don't specify
07:27 - a as a string so if I did this it would
07:30 - mean that a stores a string but what I
07:33 - really should be doing
07:35 - is writing that so that data type
07:39 - indicates that a is going to store an
07:42 - array of strings now this leads into
07:45 - declaring an empty array so for instance
07:48 - if I uh want to declare an array but I
07:52 - don't want to put anything in it right
07:53 - now I can do something like this VAR b
07:58 - equals let's say I wanted to be a string
08:00 - type an array again so I can do that so
08:05 - that's going to declare a new string
08:07 - array object right but as you can see
08:10 - it's empty so sometimes that can be
08:12 - handy if you're anticipating uh to store
08:16 - a list of values but at that certain
08:18 - point in time you don't have anything to
08:20 - store in there yet so then you can write
08:22 - something like this where you can put
08:24 - your empty array into a variable and
08:26 - then when you get your items you can
08:28 - just use one of the insertion or append
08:31 - methods to add the items into the array
08:34 - okay now we're going to jump back into
08:35 - our xcode project and you can see how
08:38 - we're going to use arrays uh to
08:40 - implement the bigger range of card
08:44 - values you can probably already
08:45 - anticipate what we're going to do here
08:48 - uh we can declare an array that stores
08:50 - all of our card asset names from Ace
08:53 - card 2 card three all the way to King
08:56 - and then when we randomize a number
08:58 - we're just going to pass it
08:59 - in as an index so we can get the full
09:02 - range of values let's actually do that
09:06 - so let me close this and let me open the
09:10 - war card
09:13 - game so here are our asset values or our
09:18 - asset names so you can see here Ace we
09:21 - got card two all the way to card 10 and
09:23 - then you got Jack queen and king okay so
09:28 - what we're going to do is in view
09:31 - controller. Swift we're going to declare
09:34 - a brand new array here so let's say call
09:38 - it actually we're going to use let
09:41 - because it's not going to change
09:43 - remember let is a
09:45 - constant and once you assign something
09:47 - into it you can change it we don't need
09:49 - to assign anything into it after we
09:51 - declare this array so that's why we're
09:53 - using
09:54 - let let's say card names
09:59 - okay open up a set of square brackets
10:01 - and I'm just going to type in the card
10:04 - value starting
10:05 - from
10:07 - Ace card
10:09 - two card
10:11 - three card
10:13 - four card five and be careful as you're
10:16 - typing them out here because it's very
10:18 - easy to repeat a card and then you're
10:22 - going to get some Behavior once we
10:25 - implement the logic in the game that um
10:28 - you're going to find is is wrong because
10:30 - we're going to be comparing these
10:32 - indexes to determine which card is
10:37 - bigger all right so I've got Ace card 2
10:40 - 3 4 5 6 7 8 9 10 Jack queen and king all
10:44 - right so let's go down here now I don't
10:47 - want to randomize a number from 2 to 10
10:50 - because back then we were only getting
10:52 - these cards from 2 to 10 now I want to
10:55 - randomize a number from zero all the way
10:58 - to
11:00 - uh let's see how many cards we got here
11:02 - 10 well would be 13 right but I don't
11:06 - want to actually go up to the number 13
11:08 - because remember even though there are
11:10 - 13 items in here King is at index 12 so
11:15 - what would be perfect if I just put 13
11:18 - like that the reason I put 13 is because
11:21 - Arc for random uniform randomizes a
11:24 - number from zero to one less than the
11:27 - number I put here so in in this case it
11:30 - would be 0 to 12 which is exactly what
11:33 - we want let's do the same thing down
11:39 - here oh and you might have noticed how
11:43 - xcode is still giving a warning on these
11:45 - lines variable left number was never
11:48 - mutated consider changing to let
11:50 - constant well if you notice we have
11:52 - changed it to a let constant but
11:54 - sometimes xcode doesn't detect this
11:56 - change yet and you know you really have
11:58 - to read the warnings and errors because
12:00 - sometimes xcode uh doesn't know you
12:04 - changed it and it's going to be
12:05 - complaining about something that's not
12:07 - an issue
12:08 - anymore okay so down here we need to
12:11 - change this as well because what we're
12:13 - doing here is we're saying card and then
12:16 - we're inserting whatever number we got
12:19 - from here the randomizer into here so
12:23 - we're going to get card at this point
12:24 - we're going to get card Z card 1 all the
12:27 - way to card 12 um um which some of those
12:31 - assets don't exist right if we randomize
12:33 - zero and we have this name called card
12:35 - zero well we don't actually have an
12:37 - asset called card zero so what we're
12:39 - going to do instead remember how to
12:41 - access values in this array we write the
12:45 - array name card names like that then we
12:48 - open up a pair of square brackets and
12:50 - now we can pass in left number as the
12:53 - index like that so here left number is
12:57 - going to be 0 to 12
13:01 - and xcode is complaining here so let's
13:03 - see what it says card name the error
13:08 - kind of went away okay um let's leave it
13:11 - at that but it could pose a problem so
13:15 - down here let's change it for right uh
13:18 - the Right image view as well so instead
13:20 - of this string
13:22 - here we're going to type in card names
13:26 - see there's the autocomplete it's a
13:28 - string array and open up a pair of
13:32 - square brackets and we're going to pass
13:34 - in oh there goes that error again but
13:36 - let's just finish this first right
13:38 - number I'm just going to put this in
13:40 - here copy and paste there we
13:43 - go okay so let's see what this error is
13:45 - about uh use of unresolved identifier
13:48 - card name so it means it cannot find
13:51 - card name to fix it did you mean card
13:53 - names okay so I just I made a typo here
13:56 - cuz our array is called card names with
13:59 - an S so I just need to add that s
14:03 - there okay and now we can press uh we
14:07 - can press command B in order to um just
14:11 - build the project and see if it runs and
14:13 - see if there are any errors so build
14:15 - failed and as you can see that tells
14:18 - xcode um updates xcode it now detects
14:21 - that it's a let statement so it's not
14:23 - going to have that yellow warning but it
14:24 - did find two new errors here
14:29 - okay so what have we got cannot
14:31 - subscript a value of type and that's a
14:34 - string array with an index of Type U
14:36 - into 32 okay so the problem here is that
14:41 - what we need to pass into card names is
14:44 - an integer as in whole number so either
14:48 - from zero all the way up the positive
14:51 - range we cannot have a negative
14:54 - number right you can't grab the value at
14:57 - netive -1 or -2 or anything like that it
14:59 - starts at zero so what it's saying is
15:02 - that left number is a type of uint 32
15:07 - whereas you have to pass a data type of
15:10 - int inside so all we need to do is just
15:15 - um in our left number constant here just
15:17 - specify that it is indeed a type of
15:21 - integer just like
15:24 - that and this Arc for random now is
15:27 - going to complain
15:29 - because if you click that error cannot
15:32 - convert value of Type U and 32 to
15:35 - specifi type int the reason is this Arc
15:38 - for random uniform generates a data type
15:42 - of u
15:43 - in32 u in32 stands for unsigned integer
15:48 - which means that it cannot be negative
15:51 - because it's unsigned Arc for random
15:53 - uncore uniform generates a data type of
15:57 - u32 which stands for an unsigned integer
16:01 - an unsigned integer is a positive number
16:04 - because it's unsigned it doesn't have
16:06 - the negative sign that's how I think of
16:08 - it and even though that's what we want
16:11 - unfortunately it's just a different data
16:14 - type and the array is expecting an
16:17 - integer that's very simple all we need
16:20 - to do is convert that U in32 into an INT
16:24 - so what we can
16:26 - do is type int
16:29 - and then surround that with a pair of um
16:33 - round brackets so let me show you that
16:35 - with this again
16:37 - int do that and then we can just put
16:40 - this piece in here and that's going to
16:44 - convert what's inside into an integer
16:47 - okay so you can see here here that the
16:50 - red errors have disappeared if I press
16:52 - command B again it should build
16:55 - perfectly so there build succeeded we
16:58 - might not actually need this anymore we
17:01 - don't have to specify that uh these
17:05 - constants are integers because it's
17:07 - going to convert this U in32 into an
17:11 - integer and then we're assigning that
17:13 - into left number and because we're
17:15 - assigning an integer into left number it
17:18 - infers the type okay so even if you
17:21 - don't explicitly write that left number
17:24 - is an integer what Swift does is it
17:26 - takes what you assigned into it looks at
17:29 - that data type and deduces that left
17:32 - number should be storing a value of
17:36 - int all right so now this should be good
17:39 - to go so let's press command R run our
17:42 - project and see what we
17:49 - get all right let's press the deal
17:52 - button here so we got 10 and five but
17:54 - what I really want to be seeing is some
17:56 - ACE Jack queen king action here oh there
17:59 - we go we've got a queen
18:02 - Jack King I saw a king do we get an
18:10 - ace where's our Ace oh there we go I
18:12 - flashed very briefly here there we go
18:16 - there's the ace so we have the complete
18:18 - range of values here and today you learn
18:22 - a very handy collection class the array
18:25 - which you're going to be using quite
18:27 - often to store collections of values and
18:29 - to manipulate them in the next lesson
18:32 - we're going to learn about how we're
18:34 - going to compare the values to see who
18:36 - won in order to add the scores okay so
18:40 - thanks for watching and I'll see you
18:41 - guys in the next lesson bye for now
18:45 - [Music]