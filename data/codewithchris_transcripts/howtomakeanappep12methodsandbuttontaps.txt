00:07 - hello welcome to Lesson 12 of how to
00:09 - make iPhone apps with no programming
00:11 - experience in this lesson we're going to
00:13 - hook up a method to the button so that
00:16 - when the user Taps on the button we can
00:18 - execute some Swift Code and before we
00:22 - jump into our war card game project I'm
00:24 - going to show you guys a couple
00:26 - different types of methods in a
00:28 - playground first and then we're going to
00:30 - jump into our war card game xcode
00:33 - project and we're going to hook up a
00:35 - method to the button that will fire when
00:38 - the button is tapped all right so let's
00:40 - get started I'm going to open a brand
00:43 - new playground I'm just going to save it
00:45 - on my desktop there and I'm just going
00:49 - to declare the person class just so we
00:52 - have something to work with in this
00:55 - person class I'm going to declare two
00:57 - properties and let's just call it age
01:01 - uh let's make it an INT well we don't
01:03 - even have to specify that let's just
01:06 - call there and name equals Tom like that
01:12 - and then down here below that class
01:15 - declaration let us create a new person
01:18 - object and assign it to a variable that
01:20 - we'll call a so we're going to do that
01:25 - to declare a new person object now let's
01:28 - go back into our person class and
01:31 - declare a method so let's say funk
01:36 - update age and name like
01:41 - that and we're going to say age
01:46 - equals 20 maybe this is 5 years later
01:49 - and the guy changed his name to
01:53 - Ted all right so as it stands right now
01:57 - if I type A do age I'm just accessing
02:02 - this property of my person object we can
02:05 - see that it's
02:06 - 15 a do
02:09 - name and the name is
02:12 - Tom okay and if I call the method
02:15 - now a. update age and name it's going to
02:20 - call this method and it's going to set
02:22 - the age and the name to
02:24 - Ted okay now if I do
02:27 - A.H we can see that it's 20
02:30 - and a. name is now Ted but it would be
02:35 - far more useful if this method were to
02:39 - accept some parameters so that I can
02:41 - specify what age I want to set it to and
02:44 - what name I want to set it to we can do
02:46 - that by adding parameters into these two
02:49 - parentheses so let me show you how to do
02:51 - that so let me type in
02:55 - uh let's see updated name okay okay so
03:00 - that let's do updated Age first okay so
03:03 - updated age and this is going to be an
03:06 - integer and updated name this is going
03:09 - to be
03:11 - string okay and now xcode or rather our
03:14 - playground is complaining that this line
03:16 - is no longer valid see missing argument
03:19 - for parameter updated H so let us just
03:23 - erase those parentheses open up a brand
03:25 - new one and autocomplete should tell you
03:28 - what is missing so just double click
03:30 - that and we can fill in the age we want
03:33 - so let's say it's another 5 years and
03:35 - again he's changed this name
03:38 - to
03:40 - um
03:43 - Tim okay so
03:46 - now uh age should be oh actually I
03:50 - forgot to update the method so inside
03:53 - here age we're still setting it to this
03:57 - uh this number here instead we want to
04:00 - set it to updated age and the name we
04:03 - want to set it to updated
04:06 - name and now the method updates the age
04:10 - and the name based on what you pass into
04:13 - it just like we've done here so when we
04:15 - call the method we passed in 25 and we
04:18 - passed in Tim and now if I access those
04:20 - two properties we can see that it's
04:23 - carried out and updated uh the age and
04:26 - the name now there's another thing that
04:28 - makes functions very useful and actually
04:31 - methods and function I'm going to use
04:33 - these two words interchangeably but the
04:36 - official name really should be function
04:39 - in some other programming languages they
04:41 - call them methods so let's use the word
04:43 - function to describe uh method and
04:46 - function being the same thing so let's
04:47 - call it function from now on just so um
04:51 - we use the same terminology and we use
04:52 - the Swift
04:54 - terminology okay so there's another
04:56 - thing that makes functions very useful
04:58 - and that's that functions can return a
05:01 - value so here we've seen that functions
05:04 - can take in values right and then it can
05:06 - do something process some code and then
05:09 - it can return a computed result uh as a
05:12 - return value so let me show you how to
05:14 - declare a function with a return
05:18 - value so you start declaring it exactly
05:21 - the same way I'm going to call this
05:24 - method increase age and I'm going to
05:27 - pass in a number uh uh age to
05:32 - increase okay or how about just actually
05:36 - let me change that to increase by okay
05:39 - so we'll pass in a number to increase
05:41 - the age by and we have to specify that
05:44 - this function actually returns a value
05:46 - and we based on um what we want to do
05:49 - with this function it's going to return
05:52 - an integer or a whole number and I want
05:54 - to return the updated age okay so I'm
05:58 - going to type a hyen like that followed
06:01 - by a greater than sign and the type of
06:04 - the data that gets returned is int so
06:07 - that's what you want to specify there
06:09 - and then open up your curly brackets
06:11 - just like you normally would so in here
06:14 - I'm going to say AG plus equals increase
06:19 - by and this plus equals if you haven't
06:22 - seen it before will just add this side
06:25 - to that side so whatever number I pass
06:27 - in is going to just add it to the age
06:31 - and then xcode is going to complain
06:33 - because it expects that this function
06:35 - should return some sort of value that is
06:39 - of type int so I'm just going to say
06:42 - return uh return the age so this is
06:44 - going to return the updated age
06:47 - okay down here I'm going to call it I'm
06:51 - going to call that method and say a do
06:53 - increase Ag and I'm just going to pass
06:56 - in
06:57 - 10 now this is going to return the
06:59 - updated age and you can see here that's
07:02 - 35 normally when you call a method that
07:05 - would return some sort of value you
07:07 - would want to store the value that gets
07:09 - returned so I'm going to say varb
07:13 - equals this method call or function call
07:17 - and uh it would return 35 and assign it
07:19 - to this new variable
07:22 - B now there's another type of function
07:24 - that I want to alert you to so far we've
07:27 - been calling these functions on these
07:29 - objects and that sort of syntax goes
07:32 - like this object Dot and then a method
07:37 - or a function of that object right well
07:41 - there are these other functions called
07:43 - class functions or class methods and
07:46 - instead of calling the function on a
07:49 - object these class functions are called
07:52 - on the class they're not associated with
07:55 - any particular object so let's let's do
07:59 - an example right now okay in the person
08:02 - class I'm going to create a class
08:04 - function and you do that by typing class
08:08 - first and then declaring the function as
08:11 - you normally would so I'm just going to
08:14 - create a function that is not associated
08:18 - with any particular object so why don't
08:22 - we say that this function would return
08:26 - let's say get Average
08:31 - age and it would return a number and
08:35 - then inside this I would just return 50
08:40 - as a quick example now it might not be
08:43 - clear from this example but the
08:45 - difference between an instance function
08:48 - or just a regular function and a class
08:50 - function is that usually regular
08:52 - functions are doing something with that
08:55 - particular person object in this case
08:58 - because it's the person class class see
09:00 - this one updates the age and the name
09:03 - for that person object this one
09:05 - increases the age of that person object
09:07 - but class functions usually don't
09:10 - pertain to any particular object and
09:13 - they're usually used more of a sort of
09:16 - like a utility or a helper function in
09:19 - UI kit there are a lot of class
09:21 - functions that we'll be using and at
09:24 - that point I'll Point them out you're
09:26 - not going to be declaring a lot of class
09:28 - functions normally we're going to be
09:30 - mostly using instance functions or these
09:33 - uh regular functions here let me show
09:35 - you how you would call a class function
09:38 - so whereas the normal functions we call
09:41 - on an instance of an object see a do
09:45 - increase age whereas where a is a person
09:49 - object class functions we simply type in
09:52 - the class name Dot and then you can call
09:56 - the class function like that as you can
09:58 - see it doesn't
09:59 - affect any particular person object uh
10:03 - usually you use it to uh return a quick
10:06 - calculation or to do some quick data
10:09 - conversion that doesn't necessarily have
10:11 - to do with a person object don't worry
10:14 - if you don't understand the purpose of
10:16 - class functions right now I just wanted
10:18 - to point it out to make you aware of it
10:20 - but as we're coding together and
10:22 - building our apps I'll point out to
10:24 - where we're using class functions in UI
10:27 - kit I don't think we're actually going
10:28 - to need to declare any class functions
10:30 - ourselves with our
10:32 - apps okay so now let's jump into our war
10:36 - card game xcode project and let's
10:39 - connect a function to the button so here
10:42 - we are in our xcode project and I'm in
10:46 - the assistant editor view on my left
10:49 - hand pane I have the storyboard and on
10:51 - my right side I have the code for uh the
10:55 - view controller for this view now I've
10:59 - hid in a couple of the panes my
11:01 - Navigators I've hidden the utilities
11:04 - pane like that and if you forget how you
11:07 - get into this assistant editor view just
11:10 - click this button here show the
11:12 - assistant editor and this button to the
11:14 - left is to go back to the standard
11:16 - editor now one thing you want to make
11:18 - sure of is um on this right hand side if
11:22 - you're having trouble uh doing any IB
11:24 - Outlet connections or if you're having
11:26 - trouble with what we're about to do uh
11:29 - connecting an IB action function um go
11:32 - here go down to automatic and choose
11:34 - view controller like that just to make
11:36 - sure that this is the appropriate view
11:39 - controller file uh for this view so how
11:43 - are we going to connect a function to
11:46 - this deal button here well there's a
11:48 - very easy way to do that similar to how
11:51 - we were able to connect IB Outlets by
11:54 - holding down control on our keyboard
11:57 - clicking the button and then dragging
11:59 - this line here like that now you want to
12:03 - drag it above this last curly bracket
12:06 - here cuz anything outside of that would
12:08 - be outside of the view controller class
12:10 - we want to make sure it's inside the
12:12 - view controller class uh but it's not
12:14 - inside a method so I don't think yeah
12:16 - you can't even put it inside of a method
12:19 - um so just put it in between the method
12:21 - but before the last closing curly
12:24 - bracket so once you let go it's going to
12:27 - ask you to create an outlet don't do
12:29 - that we're going to click the drop down
12:31 - and choose action
12:33 - instead now the name is going to be the
12:37 - name of the
12:38 - function we're going to call it uh deal
12:42 - tapped and the event we want to change
12:45 - it to well by default it should be
12:47 - touchup inside and that just means uh
12:50 - that this happens when the user Taps on
12:53 - the button and releases his or her
12:56 - finger while still inside of the button
12:58 - so it detects it as a tap and not a drag
13:02 - or anything else uh leave the other
13:04 - things as is and click
13:06 - connect so now that creates a deal
13:10 - tapped function for you whenever this
13:13 - button is tapped it's hooked up to this
13:16 - function let me show you what you would
13:19 - do if you have trouble doing that
13:21 - control uh clicking and dragging method
13:24 - I'm just going to delete this
13:27 - function be aware though when you delete
13:30 - that function if I run it now it would
13:32 - crash because the button on my
13:34 - storyboard is still connected to that
13:36 - function that does doesn't exist anymore
13:38 - it no longer exists I deleted it so
13:42 - right click on the button go down to
13:44 - touchup inside and click X to break off
13:47 - that
13:48 - connection what you're going to do as an
13:50 - alternative is just type it out first IB
13:53 - action you're going to declare your
13:55 - method as uh funk
13:59 - deal
14:01 - tapped and then you're going to put in a
14:04 - single argument that is going to
14:06 - represent the sender for the button
14:09 - right so I'm going to put in sender like
14:13 - that and the sender is
14:16 - actually the button element is going to
14:19 - be sent as the input for this method so
14:21 - if you needed uh to get a reference to
14:25 - that button object to do something with
14:27 - it it's going to be passed in as this
14:30 - parameter right here so the type of data
14:33 - that this guy is we know is of type
14:35 - button so we can specify it like that
14:38 - there okay and now I'm going to open up
14:42 - some curly brackets like that uh and
14:45 - inside here we can put some code but
14:48 - what we have to do is manually hook up
14:50 - this method to the deal button and how
14:52 - we can do that is right click the deal
14:54 - button go all the way down to touchup
14:56 - inside this little circle beside it and
15:00 - click and just drag that over to either
15:02 - this yellow circle up here or the view
15:05 - controller when you let go it's going to
15:07 - show you all of the IB actions that you
15:09 - can hook up this event to so here deal
15:12 - tapped with sender you know we'll click
15:14 - that and now it's hooked up like that so
15:17 - that's an alternative way that you can
15:19 - hook up a function to your button
15:22 - without using the control click drag
15:25 - method now I can put any sort of code I
15:27 - want in here for now let's just put
15:30 - print deal tap we're just going to print
15:33 - a message into our console window down
15:35 - here just to make sure that this method
15:37 - is
15:38 - firing okay so I'm going to press
15:40 - command R now and run our project so we
15:43 - can test it
15:46 - out okay so clicking the deal button you
15:50 - can see here down in the console that
15:52 - indeed it's hitting that method because
15:55 - it's printing out deal
15:57 - tapped let me me show you guys another
16:01 - way that you can find out whether or not
16:03 - it's reaching this point it's executing
16:05 - this code or reaching this
16:07 - point so what you can do is click this
16:11 - gutter beside the line of code you want
16:13 - to stop the execution at so for example
16:16 - if I do that this little blue line this
16:19 - blue marker will stop at this line so
16:21 - that's called a breakpoint that means
16:23 - that if I run my app at any point when
16:27 - it reaches this line it's going to pause
16:29 - the running of the app just so you can
16:32 - see and it's going to alert you uh that
16:35 - it's stopped here and then at that point
16:37 - you can check different variables you
16:39 - can check different things and this is
16:41 - very useful for debugging your app when
16:43 - you run into issues so here we're going
16:45 - to use it just to make sure that the app
16:47 - stops or the app comes into this
16:53 - method okay so now let's tap the deal
16:57 - button here and and you can see here
16:59 - that it immediately goes that line of
17:02 - code it highlights it in green and it
17:03 - stopped the execution of the app now I
17:07 - can I have some controls and we'll go
17:09 - through this more in depth in the
17:11 - debugging lesson uh but for now this
17:15 - shows us that execution indeed does
17:17 - Reach This method so what we can do is
17:20 - just click this button to continue the
17:22 - execution like that and if you wanted to
17:25 - disable the breakpoint just tap it and
17:27 - it'll be blue like or light blue to
17:30 - indicate that it's inactive and it won't
17:32 - stop execution there or you can just
17:34 - click and drag it off the bar and get
17:36 - rid of the breakpoint so I'm going to
17:39 - stop that there and that's it for this
17:42 - lesson thanks for watching and I'll see
17:44 - you guys in the next lesson bye for
17:55 - now