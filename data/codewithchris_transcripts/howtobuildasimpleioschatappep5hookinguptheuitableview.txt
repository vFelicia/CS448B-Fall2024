00:05 - hello welcome youtubers in this lesson
00:08 - we are going to hook up the tableview
00:10 - element so that it can display data just
00:14 - to give you a quick recap in the
00:16 - previous lesson we added the tableview
00:18 - element to the storyboard we created a
00:20 - prototype cell gave it the identifier
00:23 - called message cell we expose that table
00:26 - view to the view controller dot Swift
00:30 - and we call that message table view to
00:33 - reference that element that we added in
00:35 - the storyboard in order to hook up to
00:37 - table view we're going to need to
00:39 - understand the concept called delegates
00:41 - and protocols which I cover it as a
00:43 - separate lesson in the full beginner
00:45 - course that I have on the site but in
00:48 - the brief time that we have in this
00:49 - YouTube lesson I'm going to explain it
00:52 - in addition to hooking up the table view
00:54 - as well so hopefully you guys can follow
00:56 - along so the way that the table view
01:00 - displays data is that it's got two
01:03 - properties one called the delegate and
01:05 - one called the datasource and it doesn't
01:08 - care who that is but it's gonna call
01:10 - certain methods on that delegate or on
01:14 - that datasource and it's gonna ask that
01:16 - delegate for like I mentioned before
01:19 - it's gonna ask it for a cell to display
01:22 - data and it's gonna ask it's data source
01:24 - for data to display so what we want to
01:28 - do is we want to set this view
01:29 - controller as that delegate and as that
01:33 - datasource
01:34 - so that the table view ends up asking
01:36 - the view controller for that cell and
01:39 - for that data to display because inside
01:42 - the view controller we're gonna have
01:43 - that data and we're going to create
01:45 - those cells and we're gonna tell the
01:47 - table view here you go you know here's
01:49 - the data to display and here's the
01:51 - here's the cell that I created for you
01:54 - to use so right now we got to hook those
01:58 - connections up and the way we do that is
02:01 - up here we're gonna write comma UI table
02:07 - view delegate comma UI
02:13 - view datasource what this does is it
02:18 - specifies that this view controller
02:20 - class conforms to the UI tableview
02:25 - delegate protocol and the UI tableview
02:28 - datasource protocol what that means is
02:31 - that we're specifying that the view
02:34 - controller will have the methods
02:37 - associated with the delegate and with
02:39 - the datasource so the table view can
02:41 - call those methods the next thing we
02:44 - have to do is in the viewdidload method
02:47 - we're going to say self thought message
02:51 - table view delegate equals self and self
02:56 - thought message tableview datasource
02:58 - equals self what did we just do here
03:02 - well we set the view controller which is
03:06 - referred to by self as the delegate for
03:10 - the table view and we set the view
03:12 - controller and as the datasource
03:15 - of the table view and we're able to do
03:19 - that because we specified here that the
03:21 - view controller conforms to these two
03:23 - protocols now this concept of delegates
03:28 - and protocols is one of the hardest
03:31 - things for beginners to understand and
03:33 - it's one of those things where after you
03:35 - get it it becomes really simple but the
03:38 - first time you hear about it it takes a
03:40 - really long time for you to wrap your
03:42 - head around and I have a full lesson in
03:45 - the beginner course dedicated to
03:46 - explaining through diagrams and
03:49 - different examples what delegates and
03:52 - protocols are so don't worry if you're
03:54 - confused still about you know what I'm
03:58 - doing and how this is hooked up because
04:00 - this is probably the first time you've
04:02 - heard about it and I'm gonna add a link
04:04 - below the video for you to do a more
04:05 - reading on it or if you guys do join the
04:08 - full beginner course then you can you
04:11 - can watch that lesson there but just
04:14 - know that what we've done here is we've
04:18 - basically set the view controller as the
04:20 - table views delegate and the table views
04:22 - datasource
04:22 - so when the table view asks for a cell
04:26 - to display day
04:27 - and asks for the data to display it's
04:29 - gonna ask the viewcontroller and now
04:31 - we're going to add some of those methods
04:34 - associated with these two protocols up
04:37 - here these are the methods that the
04:39 - table view is going to call and that's
04:41 - where we're going to create that cell
04:43 - and return that data okay so let's say
04:47 - type table view cell for row at index
04:53 - path so in this method the table view is
04:57 - asking for a cell for a particular row
05:01 - okay next down here type table view
05:06 - scroll down to number of rows in section
05:09 - and in here it expects us to return to
05:15 - give it the information how many rows
05:17 - are there in total okay right now we
05:21 - don't have any data so up here let's
05:25 - create an array that is going to hold
05:28 - our data so let's say bar messages array
05:35 - is an array of string is gonna be an
05:41 - empty array at first and you should have
05:45 - learned about arrays in the start here
05:47 - section which you can find on my channel
05:49 - page so now in this method number of
05:52 - rows in section we can say returned
05:56 - messages array dot count this is this
05:59 - count property is the number of items
06:01 - inside this array and return is
06:03 - basically fulfilling this part of the
06:05 - method so the table view is going to
06:08 - call this method on the view controller
06:12 - and expect a return value and we're
06:15 - going to return this value to the table
06:18 - view you can see here is that is the
06:22 - data type that it expects back and count
06:26 - is the same data type specs and integer
06:31 - or a number so at this point because our
06:33 - array is empty this count is going to be
06:37 - 0 and our table view isn't really going
06:41 - to
06:41 - show anything so inside the viewdidload
06:43 - let's just add some sample data to our
06:46 - messages array so I'm gonna put add some
06:50 - sample data so that we can see something
06:55 - okay so we're going to add some sample
06:58 - data type messages array actually let's
07:05 - use self dot append test one actually
07:11 - before I move on a lot of people ask why
07:15 - I use self here or do you need it or
07:18 - when do you need to use self and when
07:19 - you don't so self just refers to the
07:23 - view controller in this case because
07:25 - you're writing code inside the view
07:27 - controller class when you use the self
07:29 - keyword it just refers to the view
07:31 - controller so because the view
07:33 - controllers got this property here
07:35 - called messages array I just I like to
07:38 - use self dot messages all right you
07:41 - don't have to because it's going to look
07:44 - for that property
07:46 - inside this class first if I can't find
07:49 - it then you'll see a squiggly red line
07:50 - and an Xcode error but I like to use
07:54 - self it's just I think it's a preference
07:58 - it is a little more verbose you're
08:02 - typing more more text but I feel like
08:05 - it's a little more clear it comes down
08:09 - to preference we had a couple of sample
08:12 - items here I've got an extra bracket
08:16 - there okay so now we can implement this
08:19 - method cell for row at index path and
08:22 - also it's got a return type of
08:25 - uitableviewcell
08:26 - so the table view is going to ask the
08:30 - view controller its gonna call this
08:31 - method and it's gonna expect the view
08:34 - controller to return a UI tableview
08:37 - object back so what we got to do is
08:41 - create a table cell
08:45 - customize the cell or turn the cell okay
08:51 - and the tableview element is actually
08:57 - very smart so if it has a reusable cell
09:00 - that it can reuse it's going to use that
09:03 - so it doesn't spend resources to create
09:06 - a brand new cell so what you can do is
09:08 - say let's sell equals the self thought
09:18 - message tableview or you can just use
09:21 - this parameter right here but I'm just
09:23 - going to refer to this property that we
09:26 - used or that we specified dot DQ
09:30 - reusable cell with identifier this one
09:33 - right here and we can pass in the
09:35 - identifier which is message cell
09:38 - remember this is the identifier we gave
09:40 - the prototype cell right so this method
09:43 - is basically going to grab a message
09:47 - cell to reuse and if there's no such
09:51 - cell to reuse it's going to create a
09:53 - brand new one for us and we got to say
09:58 - as UI tableview cell because it doesn't
10:02 - know what type of cell is going to be
10:04 - returned but that prototype cell is just
10:07 - a basic UI tableview cell customize it
10:11 - like I said the basic prototype cell has
10:14 - a label that we can use and that's the
10:17 - text label property type question mark
10:22 - dot text equals and here we can put we
10:28 - can basically look into this array and
10:30 - we can assign the text in the array to
10:35 - the label but which piece of text do we
10:37 - assign well this index path parameter
10:40 - specifies which row the tableview is
10:42 - asking for so what we're going to do is
10:45 - we're going to say self thought messages
10:48 - array and we're gonna specify an index
10:52 - in here which dictates which piece of
10:56 - text is going to be grabbed so zero
10:59 - is going to be test one the index one is
11:02 - going to access test two and the index
11:05 - two is going to access test three
11:08 - because the array starts at zero but
11:11 - we're gonna pass in index path dot row
11:15 - okay and this question mark is something
11:21 - that's called optional chaining I don't
11:23 - want to confuse you guys but the cell
11:26 - dot text label property is an optional
11:30 - type and this is something I explained
11:32 - in the beginner course as well but it's
11:34 - an optional type which means that it
11:36 - could exist and it could not exist by
11:38 - putting a question mark here and then
11:40 - accessing the text property it's a safe
11:43 - way to assign something or to access
11:45 - that property if the text label happens
11:48 - to not exist then we won't get a crash
11:51 - the last thing we want to do is use the
11:54 - return keyword and return the cell so
11:59 - that's it it may seem very very
12:01 - complicated just to get this table view
12:04 - working but trust me in every app that
12:06 - you do where you're displaying data you
12:08 - chances are you'll be using a table view
12:10 - and this is gonna become second nature
12:13 - to you just because you're doing it so
12:14 - much and once you understand the
12:16 - concepts of delegates and protocols it's
12:18 - not gonna seem confusing at all it'll
12:20 - actually make a lot of sense
12:21 - so now let's hit command + R and run it
12:25 - and see what our handiwork looks like
12:31 - okay so we've got our table view here we
12:35 - could have probably added more of a
12:37 - margin at the top but you can see our
12:39 - three items here test1 test2 and test3
12:43 - there's our little dock that we're gonna
12:46 - put our text field and button in but
12:49 - there we go we can see that our table
12:52 - view is working that's all I wanted to
12:54 - do for today it's probably a lot to
12:58 - absorb for you guys if you're if this is
13:02 - the first time that you're exposed to
13:04 - delegates and protocols and table views
13:06 - in general but just to give you guys a
13:08 - quick recap again on how this code is
13:11 - working
13:12 - we have a tableview element in our
13:15 - storyboard right here and the way that
13:18 - the tableview displays data is it calls
13:21 - the number of rows and section method
13:24 - and the self a row at index path method
13:26 - on it's delegate and data source and it
13:30 - doesn't care what is a sign there it's
13:33 - just gonna call those methods on its
13:36 - delegate and data source so what we're
13:38 - doing we're assigning the view
13:39 - controller as the table views delegate
13:42 - and datasource so that the table view
13:44 - will call those methods on the view
13:46 - controller so we can write some code to
13:48 - return that data and to return that cell
13:50 - the only way we can assign the view
13:53 - controller as the table views delegate
13:55 - and datasource is to specify that it
13:58 - conforms to this these two protocols the
14:02 - UI tableview delegate protocol in the UI
14:04 - tableview datasource protocol now by
14:07 - specifying the view controller conforms
14:10 - to these two protocols were forced to
14:13 - implement these two methods this number
14:16 - of rows and section method and the cell
14:18 - for row at index path method if we
14:20 - remove these two methods Xcode actually
14:22 - will complain that that's there's an
14:25 - error it's gonna say that
14:26 - hey you're saying that the view
14:28 - controller conforms to these protocols
14:30 - but you haven't implemented the methods
14:33 - which the table view needs to needs to
14:35 - call so the whole point of the the
14:38 - system this protocols and delegate
14:40 - system is so that two classes can
14:45 - communicate with each other without
14:47 - really knowing about each other see in
14:49 - this case the table view doesn't care
14:51 - what is assigned to its delegate or
14:54 - datasource as long as the delegate and
14:56 - datasource has the methods that it needs
14:59 - to call that's all that matters
15:01 - so that's the beauty of it let's look at
15:06 - what else we've done here in the self a
15:08 - row at index path method we are trying
15:11 - to DQ a reusable cell with the
15:14 - identifier called message cell and this
15:16 - goes back to our storyboard where we
15:19 - created this prototype cell here and we
15:21 - named it here
15:23 - message sell if we had added additional
15:26 - elements into the cell we would also be
15:28 - able to reference them and in here and
15:32 - then assign them and you know modify
15:34 - anything we need to but all we're doing
15:37 - here is we're grabbing the index of the
15:41 - message array which the table view is
15:43 - asking for this parameter index path has
15:48 - a row property which tells us which row
15:50 - the table View is asking for and we're
15:53 - just returning that piece of text and
15:56 - finally the table view will also ask for
15:59 - the number of items that it needs to
16:02 - display and we're just returning the
16:04 - messages array dot count all right so
16:07 - that's the beginnings of our little chat
16:08 - app here in the next video we're going
16:11 - to add the text field so the user can
16:14 - type stuff we're gonna add a button and
16:16 - we're going to hook up the animation so
16:19 - that it slides up along with the
16:20 - keyboard that slides up on your phone
16:23 - and then probably in a couple lessons
16:26 - down we're gonna implement the saving in
16:28 - the retrieving of the actual messages
16:30 - from parse alright I'll see you guys
16:32 - next time
16:33 - and if you want to get a firmer grasp on
16:35 - these concepts be sure to check out the
16:38 - full beginner course on my site I assure
16:40 - you it's well worth it I'll see you guys
16:42 - next time bye for now