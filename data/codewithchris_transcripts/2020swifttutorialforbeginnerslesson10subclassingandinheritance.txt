00:00 - hello and welcome to my Swift tutorial
00:01 - series for beginners in this video
00:03 - you're going to learn about inheritance
00:05 - otherwise known as sub classing which
00:07 - allows you to create a class which
00:09 - builds upon or extends from other
00:11 - classes which have already been defined
00:12 - now this saves us a lot of time and
00:15 - effort from defining classes that do
00:17 - similar things
00:18 - alright so stay tuned I don't know if
00:25 - you've noticed but now that we've talked
00:27 - about functions having the ability to
00:29 - organize your code into chunks and then
00:32 - classes being able to organize and group
00:36 - variables and functions together in the
00:40 - way that makes sense these are all
00:42 - different ways of organizing your code
00:44 - now today's topic sub classing is
00:47 - another way to further organize your
00:49 - classes so remember what I said about
00:51 - duplicated code and how it's a bad
00:53 - practice to have duplicate code all over
00:55 - your project because that makes it hard
00:57 - to maintain and hard to manage hard to
01:00 - make changes now when I introduce
01:02 - functions I told you that having
01:03 - duplicate code all over your project is
01:05 - a bad practice and it is and functions
01:08 - were a way to address that you can
01:10 - define a function and then you can call
01:11 - it from multiple places when you need to
01:13 - execute that piece of code classes are
01:16 - the same thing sometimes you might have
01:18 - to define two classes which are very
01:21 - similar so instead of having two very
01:24 - similar definitions or classes you can
01:27 - use sub classing and have one class
01:30 - extend from the other so that's what
01:32 - subclassing is all about let's take a
01:34 - look at an example using the playground
01:36 - that we had yesterday we had to find an
01:39 - employee which had a named salary and a
01:41 - role and a method called do work now
01:44 - remember these are called properties of
01:46 - the employee class and this is called a
01:49 - method of the employee class now let's
01:51 - say that I wanted to create another
01:53 - custom data type called manager right so
01:58 - I would define a manager class like so
02:01 - right now a manager also has a name
02:06 - alright so I can go ahead and define
02:09 - that managers also have salary and roles
02:12 - and they also have
02:14 - they also do work so you know I would
02:18 - just be defining the same thing very
02:20 - close to it all over again now instead
02:23 - of doing that what we can do is have the
02:27 - manager class be a subclass of the
02:29 - employee class so we can define that or
02:33 - we can do that by putting a colon after
02:37 - manager and we can specify employee and
02:41 - that is basically saying that the
02:43 - manager class inherits or is a subclass
02:47 - of the employee class and this also
02:50 - means that the manager class
02:53 - automatically inherits all of the
02:55 - properties and methods of the employee
02:58 - class so let me demonstrate for you
03:00 - so let's say let M equals let's use bar
03:04 - M equals a new manager object so I've
03:07 - just created a new manager piece of data
03:11 - in memory and assigned it to M I can say
03:14 - you can see here Maggie
03:20 - maybe she's got a bigger salary role of
03:26 - manager of IT or something like that
03:29 - right and M can do work so hi my name is
03:35 - Maggie and I'm doing work now let's say
03:37 - as a manager you also want to keep track
03:39 - of the size of the team that the manager
03:42 - and is managing so for the manager class
03:45 - we could have another property called
03:48 - team size you know and we can start that
03:52 - at zero but now for my manager object
03:55 - down here in addition to all of these
03:58 - properties and methods that it inherited
04:02 - from the employee class in addition to
04:05 - that it also has you know the properties
04:08 - that I've defined inside the manager
04:10 - class so I can say the team size is 10
04:13 - now essentially I was able to create a
04:17 - new class based off of an old class
04:19 - right and add additional functionality
04:22 - to it now you can also modify existing
04:27 - form
04:27 - so let's say that you know when a
04:30 - manager does work it's he or she is not
04:35 - just doing work he or she is managing
04:37 - people so what we can do if we wanted to
04:40 - change the definition of do work we can
04:43 - say we can redefine it here after using
04:46 - this keyword override so I'm gonna
04:48 - override the do work method and I am
04:52 - going to print I'm managing people and
04:58 - very important right and the salary
05:01 - increase Wow it's gonna increase by two
05:06 - all right so now when I run this if not
05:09 - going to say hi my name is Maggie damn
05:12 - doing work it's going to take this
05:14 - overridden function right because M is a
05:17 - manager so that's why we get down here
05:20 - I'm managing people but did you know
05:22 - that if you wanted to instead of
05:25 - replacing the functionality of that
05:28 - inherited do work method you let's say
05:31 - you just wanted to increase the
05:33 - functionality you wanted to add to it so
05:35 - what you can do inside here after
05:38 - overriding it you can call the do work
05:40 - method of the employee class from here
05:43 - all you have to do is write super dot
05:47 - and you can access these properties or
05:50 - you can call the do work method so now
05:53 - when I write M do work what it's
05:57 - actually going to do it's it's going to
05:59 - execute the do work method definition
06:02 - from the employee class and then after
06:06 - that it's going to do this additional
06:09 - code that I've written here so let's run
06:11 - our project and see what that looks like
06:14 - you see hi my name is Maggie and I'm
06:16 - doing work and I'm managing people the
06:19 - reason why this keyword is called super
06:21 - is because the class that your sub
06:24 - classing from is also known as the
06:27 - superclass or the parent class so for
06:31 - the manager class employee would be the
06:34 - superclass or the parent class and
06:36 - that's why this keyword is called super
06:39 - alright so in addition
06:41 - to being able to redefine the methods of
06:45 - the superclass I can also declare new
06:48 - methods so I can say you know fire
06:50 - people
06:56 - oops what's going on
07:01 - I'm firing people so now I can say m dot
07:08 - fire people but you know if I let's say
07:13 - declare a new employee here just to
07:16 - demonstrate using dot notation on the
07:19 - employee object you can see I only have
07:22 - those things which have been defined in
07:25 - the employee class so that's how
07:28 - powerful sub classing can be it can
07:30 - really save you a lot of work you're not
07:33 - gonna have to redefine two different
07:36 - things
07:36 - that are very similar what we've got
07:40 - right here is actually one level of sub
07:43 - classing or one level of inheritance but
07:46 - it can actually go much deeper than that
07:47 - for example an employee is also a person
07:52 - right and all people have names so I
07:56 - could for example declare another class
07:59 - up here which contains the name property
08:04 - right because all people will have a
08:06 - name and you know so then inside the
08:10 - employee class I wouldn't have to define
08:11 - that and instead I can go that the
08:15 - employee is a subclass of person right
08:19 - so you can build these hierarchies in
08:21 - these trees and it's really a way of
08:24 - organizing your data and your
08:26 - information now inside of your classes
08:29 - you're organizing your properties and
08:32 - your functions so now you can see
08:34 - holistically how all of these things are
08:37 - starting to come together variables
08:39 - functions and classes okay so this was a
08:44 - simplified example of sub classing but
08:46 - it's essentially how it works and it's
08:48 - very predominant in the Swift
08:49 - programming language as you're going to
08:50 - see in the next lesson
08:52 - as you can see sub classing helps you
08:53 - save
08:54 - a lot of time by allowing you to define
08:56 - your new classes based on what already
08:58 - exists and then improving upon that or
09:00 - customizing it a little bit without
09:02 - having to redefine everything all over
09:05 - again alright so if you learn something
09:07 - new and you like this video please hit
09:08 - that thumbs up button and hit subscribe
09:10 - to support the channel and now you know
09:13 - the drill let's click on over to the
09:14 - next lesson and I'll see you there