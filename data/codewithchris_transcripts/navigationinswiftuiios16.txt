00:00 - learn about swift ui's brand new navigation 
stack api for ios 16 and how you can adopt it  
00:05 - in your projects today hey code crew this is flo 
this lesson introduces the new navigation stack  
00:12 - navigation path and navigation destination 
apis from ios 16 to you as of the date of  
00:18 - this recording ios 16 is still in beta so you 
will have to use the xcode 14 beta version as  
00:24 - well you can download that xcode version from the 
apple developer website which is linked down below  
00:31 - first of all i have prepared an empty xcode 
project here and note that i am using the x414  
00:37 - beta beta2 in this case but it should probably 
work the same in the upcoming beta versions as  
00:43 - well so first of all let's have a look at how 
a navigation stack would have been implemented  
00:48 - before ios 16. so we would probably oops 
we will probably have a navigation view  
00:56 - navigation view like that and then in the 
content we would have a navigation link
01:06 - with a title and a destination so as a title 
let's say simple string and let's expand the  
01:12 - destination to be a training closure and 
in here we would then just have a view  
01:16 - that should be navigated to so let's just say abc 
here just to test it out so now if we click on  
01:23 - the simple string it will navigate to a new view 
that's just a text of abc so super simple stuff  
01:30 - actually now let's embed that navigation view or 
let's actually embed the navigation link in a list
01:42 - super simple like that so we just have a little 
bit of styling here as well so this is how it used  
01:48 - to be you had a navigation link with a title 
which could also be a view of course and then  
01:54 - a destination that's obviously also a swift ui 
view now in ios 16 a bunch of these things have  
02:01 - changed so first of all navigation view is getting 
deprecated instead you will use the navigation  
02:06 - stack if you want the same behavior and also the 
navigation links have actually changed quite a bit  
02:12 - so let's first of all remove the navigation 
view and replace it with a navigation stack  
02:20 - by itself this still behaves exactly the same so 
in ios or on iphones actually navigation view is  
02:28 - directly translated to navigation stack both 
of these are equivalent now of course if you  
02:33 - want a multi-column layout you will not be able 
to use navigation stack but that's for another  
02:38 - lesson later on okay so you can just replace 
the old navigation view with a navigation stack  
02:45 - and nothing will change you can still use the old 
navigation link as well next let's try out the new  
02:51 - navigation link api and we will also need a new 
view modifier to make that work so let's comment  
02:58 - out the old navigation link and let's create a new 
one and if we scroll down a bit here uh let's see
03:09 - okay it's actually not showing i here it 
is so the new navigation link takes in  
03:15 - a title once again a string this could 
also be a view of course if you want to  
03:20 - do that approach so let's say simple string 
once again so the exact same title as beforehand  
03:27 - but now instead of providing a destination 
view now you just provide a value so  
03:34 - let's try that out let's provide a value of abc 
what will happen if we click on the navigation  
03:39 - link now exactly nothing will happen because swift 
ui doesn't know where to navigate it just knows  
03:46 - the label is simple string and the value is abc 
but it has no idea about what to do with that  
03:52 - value and that's what we need to teach swift ui 
with the new navigation destination navigation  
03:59 - destination view modifier you can create multiple 
of these modifiers and we will look into that in  
04:07 - a bit but for now you will always have to specify 
a type in our case the value was a string right so  
04:15 - we will say string dot self and then we will get 
in our string here and then we can return a view  
04:23 - so for example now we can just create a text 
with that string again and then we will have  
04:28 - the exact same behavior as beforehand so now if 
we click on the simple string navigation link we  
04:33 - will go to a new view in our navigation stack 
of course which displays a text with the value  
04:39 - that we passed and the value that we passed was 
abc of course now we could style this and say  
04:46 - foreground color of red and now if we click it 
will of course be red so super simple stuff but  
04:53 - now instead of having to add the destination to 
the navigation link directly and then thus have it  
05:00 - in multiple places in one view for example now 
you just have to add one navigation destination  
05:06 - modifier to some content of your navigation 
stack so not on the navigation stack itself  
05:11 - somewhere inside of it and then that will 
let swift ui's new navigation system know  
05:16 - what to display so it is text with the foreground 
color for which type of value so in this case  
05:24 - for the string type now very notable thing here 
is that these types all need to be hashable  
05:30 - string is already hashable just as integers for 
example but if you have custom types which we  
05:36 - will look at next or in a bit actually then you 
need to pay attention your types need to conform  
05:43 - to the hashable protocol so next let's have a look 
at something that got actually way better with ios  
05:49 - 16 and that's programmatic navigation if we remove 
this comment here because we don't need it anymore  
05:57 - and we get rid of the navigation stack for 
a second and just type in navigation stack  
06:01 - you will see that there are a bunch of different 
initializers there is one with just a root view  
06:07 - which is what we previously used this trail 
enclosure here is basically the root view  
06:13 - and then there is also one where you pass in a 
path and this is where it gets very interesting  
06:19 - so for the path we can just create a array so 
let's say path and this is an empty array of type  
06:32 - string because we're just dealing with with 
strings and now we can just bind to that path  
06:38 - here in our navigation stack and now we can run 
the preview again and you will see that it works  
06:44 - exactly the same the cool thing now 
is though that we can play around with  
06:49 - this path and since it's just an array we can 
add values or remove values programmatically  
06:55 - so let's get back into our list and let's 
add a button and let's say navigate to xyz  
07:06 - and you will see we have a new button here 
and right now if we click on it obviously  
07:09 - nothing happens because the action closure is 
empty but now in this action we could just say  
07:14 - path dot append x y z so add the string x y z to 
this array of strings and if we click the button  
07:24 - we will actually navigate to our destination that 
we specified below so a red text of the value and  
07:32 - the value in this case is just x y z so this 
is how programmatic navigation works of course  
07:37 - you could factor all of this out into a view model 
and then you have a very nice architecture it also  
07:43 - works the other way around though so if we go into 
our destination and embed this text in a v stack  
07:50 - then below it we could add 
a button say pop to root
07:57 - and in here we can just set our path dot remove 
all this way we will remove all strings from our  
08:06 - array of navigation paths and consequently 
that would mean that there is nothing left  
08:11 - to navigate to so shift ui will pop to root so 
let's try it out let's click on the simple string  
08:18 - this will navigate us with the value abc and 
now if we say pop to root it will pop to root  
08:24 - this obviously also works multiple levels deep 
so now if we grab our button and also put it  
08:29 - inside of the navigation destination we can 
click on simple string we're at abc right now  
08:36 - then let's navigate to xyz so we're at xyz 
now and the array would right now be abc in  
08:43 - the first slot and xyz in the second slot so if 
we hit back we're back to abc of course because  
08:49 - that's where we came from but now if we 
say pop to root the array gets emptied  
08:56 - so this is a super simple way to programmatically 
navigate now in swift ui very nice i would say and  
09:04 - then lastly let's have a look at a more practical 
application of this where we have multiple  
09:09 - different types for our navigation path for that 
i have prepared two different structs first of all  
09:16 - the article struct with a bunch of examples and 
the person struct also with a bunch of examples  
09:24 - so let's go back to content view and let's remove 
everything basically that we already had so let's  
09:30 - get rid of the path and let's get rid of the 
navigation stack and that's basically just start  
09:35 - blank so let us create a new navigation stack with 
a path and a root view now for the path instead of  
09:45 - using an array of string for example there is a 
brand new type so let's call this variable path  
09:54 - and let's say this is a navigation path this is 
basically a generic implementation of the array  
10:03 - where we can push multiple different types into it 
and you will see what that means in just a second  
10:08 - so just create a state variable called path that 
is a navigation path and now we can bind to that  
10:16 - in our navigation stack just as we 
did before with our array of strings  
10:22 - okay now in here let's add a list back and in 
this list let's add one section called people  
10:33 - and in this section let's iterate over all of 
the person examples so let's say person dot  
10:38 - examples person in now one thing to note 
here is that both person and article  
10:47 - conform to identifiable so we can use for 
each without specifying an id property and  
10:53 - they also conform to hashable which is why we 
can then use it with the navigation path api  
11:01 - so right now there is obviously 
nothing on the screen except for  
11:05 - the section title or the section header 
people so um let's have a look at here which  
11:12 - values a person has so it has a name and an age 
so maybe let's add just a little v-stack here
11:22 - with a text of person dot name and then a text 
of person.h and let's format that as a number
11:36 - okay and let's also say the alignment  
11:41 - is leading and the age has a foreground 
color of secondary so it's great out of it  
11:49 - okay so that looks pretty good i would say 
right now this is just a v-stack though so  
11:55 - let's maybe copy that v-stack and 
instead create a navigation link  
12:03 - with a value and a label as the label let's 
paste back the v-stack the value now becomes  
12:10 - the person object because we want to navigate 
to a detailed view of that person for example
12:18 - you can see that in the list now it turned 
into a navigation link with the little chevron  
12:23 - on the trailing edge but of course clicking on the 
navigation links doesn't do anything because swift  
12:28 - gi doesn't know about the destination it only 
knows about the value which is a personal object  
12:35 - so let's teach swiftjoy about the destination 
let's select your list and add with the navigation  
12:41 - destination modifier of course we now want 
to set the destination for the person type  
12:48 - we will get a person in here and in this 
example it will just be a very simple  
12:53 - text of the person dot name and we might give it 
like a font of headline that should work i think  
13:03 - okay so now let's click on steve here 
and it will navigate to a new view  
13:08 - saying his name which is steve of course okay 
so that was simple enough then basically the  
13:14 - same thing as we had beforehand but now let's 
add a second section and let's call it articles
13:24 - and in here you guessed it we 
will add some different articles  
13:28 - so let's say for each article.examples
13:34 - article in so this is now our second section and 
of course we will add some new navigation links  
13:42 - as well as the value we will pass the article 
same as beforehand and as the label let's have  
13:49 - a look at which variables this has so it has 
a title and an author so we can probably just  
13:55 - do pretty much the same layout as beforehand so 
let's add a v-stack with an alignment of leading
14:05 - and let's add a text saying the article  
14:09 - title maybe with a font of headline and 
then another text of the article dot author  
14:20 - with the font of sub headline okay so that 
looks good i would say now that we have  
14:26 - both sections we can still click on the 
people section of course and it will navigate  
14:31 - but we can't click on the articles section yet 
because we're only taught swift ui a navigation  
14:36 - destination for the person type so let's add a 
second navigation destination for the article type
14:47 - now in here we will of course get an article 
in and once again for the sake of this lesson  
14:53 - let's just keep it simple and say article.title 
and now if we click on an article it will navigate  
15:00 - correctly and if we click on a person it will also 
navigate correctly now we can again get a little  
15:08 - bit more crazy and embed one of these destinations 
in a v stack and add a button for pop to root
15:17 - and in here we can say path dot remove last and 
we will add a like a number here and this will be  
15:27 - path dot count so basically this means remove 
all of the items from the current navigation path  
15:34 - let's try this out so if we click on steve we just 
see their name and if we click on combine mastery  
15:41 - for example we have the pop to root button which 
will pop to root let's add a second button to  
15:47 - maybe append another article or a person so let's 
add another button let's say navigate to person  
15:58 - and then we can say path dot append any hashable 
value is what we can append here now and in our  
16:05 - case let's just say person dot examples and we'll 
just use the second one i guess that should work  
16:14 - just fine so now if we click on an article then 
we can say navigate to person and now we're at  
16:21 - maria because that's the second person that we 
had and of course hop to root also still works  
16:31 - so let me briefly go over everything 
that you just learned in this lesson  
16:35 - you learned that the old navigation view on 
iphone got replaced with a navigation stack  
16:40 - and that the old navigation link got replaced 
with a new navigation link where instead of  
16:45 - specifying the destination you just specify any 
hashable value that's passed into the navigation  
16:52 - then to do something with that value and to 
actually display a destination you add the  
16:57 - navigation destination modifier to any of your 
views inside of the navigation stack for this  
17:02 - modifier you have to specify a type that you want 
this to work for then you get an instance of that  
17:09 - type and you can just add your destination view 
in here of course this could also be a custom view
17:16 - next if you want to implement programmatic 
navigation you will have to create a navigation  
17:22 - path and bind to that path in your navigation 
stack view and lastly to programmatically navigate  
17:31 - to any new value you can just say path dot append 
and then your hashable type in the brackets  
17:42 - and if you want to pop to root you can just 
remove all values from your navigation path  
17:49 - so in this lesson you learned about how 
swift ui navigation is handled in ios  
17:53 - 16 and hopefully also later on you found 
out about navigation stack navigation path  
18:00 - navigation destination and the 
new way to use the navigation link  
18:05 - you also learned about programmatic navigation 
without explicit navigation links and just buttons