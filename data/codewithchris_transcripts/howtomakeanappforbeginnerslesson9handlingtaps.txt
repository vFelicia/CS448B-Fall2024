00:00 - hi welcome to lesson 9 this is a fun
00:02 - lesson today in this video we're going
00:04 - to make the card images change as you
00:06 - tap on that deal button let's jump right
00:09 - in so here we've got our Xcode project
00:11 - the first thing we're going to do is try
00:13 - to change these images through code
00:15 - click on this UI image view and then in
00:18 - the inspector panel you can see here
00:20 - this is the image property and in the
00:22 - drop down we can simply select let's say
00:25 - card 10 alright for that one let's click
00:28 - on this guy and let's change that to
00:30 - card 13 so we've got a 10 and a king
00:35 - this one's got its image property set to
00:38 - card 13 and this one here the left one
00:42 - has got its image property set to card
00:43 - 10 now let's set them back to the back
00:47 - because we're gonna try to do what we
00:49 - just did through code let's jump into
00:52 - our view controller and let's go down
00:55 - here to the deal tapped function this
00:58 - fires when the deal button is tapped
01:00 - we're gonna erase that line that printed
01:03 - out the deal text in the console and so
01:05 - we've got an empty function and let's
01:08 - just scroll up a little bit to remind
01:09 - ourselves that the left image view is
01:12 - connected to this property and the right
01:14 - image view is connected to this property
01:17 - alright you can see that this property
01:19 - is type of UI image view and this
01:22 - property is also a type of UI image view
01:25 - so let's go down here and let's type
01:28 - left image view in order to access that
01:31 - object that we have in the storyboard
01:33 - and let us use dot notation to access
01:37 - the image property now you can see that
01:39 - on the left hand side here it says UI
01:42 - image don't mistake this for a UI image
01:45 - view which is what we have here a UI
01:48 - image represents an image ok and the UI
01:52 - image view which is what we have you
01:57 - know up here the left image view in the
02:00 - right image view these are used to
02:02 - display UI images so going back here let
02:07 - me show you that autocomplete menu again
02:08 - let's delete that and hit dot and then
02:11 - tap image
02:13 - you can see here the description for
02:16 - this property says the image displayed
02:18 - in the image view so what we have to do
02:20 - is actually we have to assign a UI image
02:24 - object to this image property because
02:26 - this left-hand side tells us what data
02:29 - type that this property expects so let's
02:32 - go ahead and choose that and we are
02:35 - going to hit equals and now we are going
02:37 - to create a new UI image object now UI
02:41 - image is also a class from the UI kit
02:44 - we're going to do this UI and make sure
02:48 - you're typing you know capital u capital
02:50 - i' and that capital i' and then all
02:53 - lower cases ma GE it's actually it makes
02:57 - a difference in matters same thing for
02:59 - here this image property is a lowercase
03:01 - I so when you're following me typing out
03:04 - this code you gotta kind of have to type
03:05 - it out a letter for letter and also
03:08 - another mistake I've seen before is make
03:10 - sure you have spaces before and after
03:12 - your equal signs something like that is
03:15 - not the same thing alright so go like
03:17 - that and then in order to create a new
03:20 - object of that class remember you use
03:23 - the rounded brackets like that so here
03:26 - we are creating a UI image object and we
03:30 - are assigning it to the image property
03:32 - of the left image view so it's going to
03:35 - display this UI image but you know what
03:37 - this UI image is empty it we haven't
03:40 - specified what image we want to show
03:43 - from the asset library right in our
03:45 - asset library we've got all of these
03:47 - great card images so back in the view
03:51 - controller here the UI image class
03:55 - actually has a way for us to when we
03:58 - create that object pass in that image
04:00 - that we want the UI image to represent
04:03 - as a data input so let me show you what
04:06 - that is I'm going to open up the left
04:10 - bracket you can see here you could just
04:12 - create a UI image object with a set of
04:15 - brackets like that or you can choose one
04:18 - of these functions that lets you pass in
04:23 - a data input and which returns a UI
04:26 - image object
04:27 - presenting that data input let's scroll
04:30 - all the way down to this one here named
04:32 - and you get to pass in a string
04:35 - representing the asset name that you
04:37 - want this UI image to represent so go
04:40 - ahead and select that and then you're
04:43 - gonna pass in a string right let's put
04:45 - card 10 now this actually also has to be
04:49 - exact if you go in to your asset library
04:52 - if this saves card 10 with a lowercase C
04:55 - with no space in between the D and the 1
04:58 - you know word for word letter for letter
05:00 - character for character you have to use
05:02 - that exact same asset name here
05:05 - otherwise it's not going to find it
05:06 - so this line basically you are accessing
05:10 - the left image view on the storyboard
05:13 - you are accessing its image property and
05:16 - then here you are creating a UI image
05:19 - object using a special function that
05:22 - lets you specify the asset name that you
05:25 - want that UI image to represent and then
05:28 - we are assigning that object to the
05:30 - image property and that's actually going
05:32 - to do the trick so if we run our project
05:34 - right now you are not going to see it
05:38 - because we haven't tapped on the deal
05:40 - button yet but as soon as we tap on this
05:43 - deal button it's going to run this deal
05:45 - tapped function and it's going to change
05:48 - see if this looks like an empty space
05:51 - for you that means you might have either
05:53 - made a typo in the asset name here or
05:55 - you might not actually even have the
05:57 - asset in your asset library here so
05:59 - double check those two things now we're
06:01 - going to also change the right card so
06:03 - go ahead and do right image view dot
06:06 - image equals UI image open that up you
06:11 - could use autocomplete go all the way
06:13 - down named like that and then we'll pass
06:16 - in card 13 and let's press command R to
06:20 - run the project or you can just tap on
06:22 - that little play icon up there and let's
06:27 - tap on the deal button and then you're
06:28 - going to see that happen if I tap on it
06:30 - again nothing's gonna change because our
06:33 - code just sets these two image views to
06:35 - these two specific images now the next
06:39 - thing we have to worry about is
06:40 - how do we randomize it when we tap on
06:42 - this deal button well in order to do
06:44 - that we're gonna have to learn how to
06:45 - generate some random numbers so let's go
06:48 - down here and let's generate a random
06:51 - number we're gonna store it into a
06:53 - constant let's say left random number
06:59 - equals and there's a special function
07:02 - that we use it's called arc for random
07:05 - and as you start typing a RC it should
07:08 - actually pop up and you're not going to
07:10 - use arc for random you're gonna scroll
07:12 - down a little bit you're gonna use arc
07:13 - for random underscore uniform it's gonna
07:15 - let you specify an upper bound for you
07:18 - to randomize on and so we have cards
07:21 - number let's go back to our asset
07:24 - library here cards number two all the
07:28 - way up to 14 however it's we can only
07:30 - specify an upper limit for that arc for
07:33 - random underscore uniform function so
07:36 - that function is actually going to
07:38 - randomize an integer from zero all the
07:40 - way up to the limit that you specify
07:42 - minus one meaning that if you pass in an
07:45 - upper limit of 15 it's gonna randomize a
07:49 - number from 0 to 14 and if we get 0 or 1
07:54 - we don't have cards 0 to 1 and we only
07:58 - have starting from 2 so I want to
08:00 - randomize from 0 to 12 and then add 2 to
08:04 - the result which is going to give us the
08:05 - same thing so in order to randomize all
08:08 - the way up to 12 we have to pass in an
08:10 - upper limit of 13 because that's how
08:12 - this function works here when you
08:16 - specify an upper bound let's say we put
08:19 - in 13 it's going to go from 0 to 12 and
08:22 - then what we're going to do is we're
08:24 - going to add 2 to that result and this
08:27 - is going to give us 2 to 14 which is
08:31 - exactly what we have in terms of the
08:34 - card names and now I think you're
08:36 - getting an idea of how we're going to do
08:38 - this randomization so what I'm going to
08:41 - do is actually randomize two numbers
08:43 - select write random number equals art
08:48 - for random uniform and we are actually
08:51 - going to do the same thing for the right
08:53 - side and we just want a different random
08:55 - number and we're going to print this out
08:57 - so let's try it out print left random
09:03 - number is and then remember we learned
09:08 - how to substitute variables into strings
09:12 - backslash pair of rounded brackets and
09:15 - then we put the variable name so left
09:17 - random number and then after we
09:21 - randomized the right one
09:23 - let's also print that out right random
09:26 - number is make sure you put right random
09:32 - number this time all right and now let's
09:35 - press command R and rerun our app all
09:39 - right and now we're going to click the
09:41 - deal button and we should see the random
09:43 - numbers printed out in the console all
09:45 - right so we've got 9 and 11 2 and 5 9
09:50 - and 14 and 13 and 11 and we can keep
09:54 - going and I just want to make sure that
09:59 - we don't see any moves ero ones or
10:02 - anything beyond 14 because we don't have
10:07 - those cards all right so we can generate
10:11 - random numbers just like that and now
10:13 - going back to the Xcode project here's a
10:16 - neat trick if you want to stop a line of
10:18 - code from running but you're not sure if
10:21 - you might need it soon you can actually
10:23 - just put two forward slashes and treat
10:26 - it as a comment just like that and that
10:29 - line of code is now treated as a note or
10:32 - a remark so it's not going to be run as
10:35 - code and then later when you need it you
10:38 - can just erase those two forward slashes
10:40 - like that and then you know you still
10:43 - have it but I want to warn you against
10:45 - doing this too much because it can get
10:49 - pretty messy if you just leave commented
10:51 - out code everywhere so only use this in
10:54 - a very temporary sense because not only
10:56 - can you comment out a line like this but
10:59 - you can actually comment out a whole
11:01 - chunk of code or a section of code if
11:03 - you do forward slash
11:05 - star you can see how everything turns
11:08 - green beneath it and where you want it
11:10 - to end you go star forward slash like
11:14 - that
11:14 - so everything in between these two
11:18 - symbols is going to be treated as a
11:20 - comment so that's how you comment out
11:23 - entire chunks of code let's delete that
11:26 - all right so now I think you can see how
11:30 - we are going to combine this random
11:33 - number with setting the image right we
11:38 - actually just did it up here we're gonna
11:41 - use variable substitution so instead of
11:44 - card 10 let's erase that slash and then
11:49 - open up a pair of brackets and then here
11:51 - put left random number and then down
11:55 - here instead of 13 let's erase that
11:57 - slash open up a pair of rounded brackets
12:00 - and put the right one all right and now
12:04 - we can actually just run our project
12:06 - press command R and you can see that the
12:15 - random numbers are being basically
12:17 - combined with card to generate our asset
12:22 - name so that's why the cards are named
12:24 - as they are here like this now if you're
12:31 - clicking through these cards and some of
12:34 - the times you see an empty card or a
12:37 - blank card that probably means that one
12:39 - of your assets might be named
12:41 - incorrectly because the reason why it
12:44 - would be blank is because I can't find
12:46 - that asset name in this lesson you learn
12:49 - how to change the image of a uiimageview
12:51 - through code he learned how to randomize
12:53 - numbers and insert variables into
12:55 - strings I can't stop tapping the deal
12:58 - button in the next lesson you're going
13:00 - to learn how to update the labels and
13:02 - count score if you liked this video
13:04 - please subscribe to my channel by
13:06 - hitting the subscribe button below and
13:07 - if you don't want to miss a single video
13:08 - make sure you tap on that Bell icon as
13:11 - well thanks for watching and I'll see
13:13 - you guys in the next lesson