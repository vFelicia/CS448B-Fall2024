00:00 - in the last lesson we set up our Xcode project 
as well as all of the views and models if you  
00:05 - missed that check that playlist out right over 
here in this lesson we're going to be connecting  
00:09 - to the YouTube data API and retrieving the data 
and because we've done this already in a demo  
00:15 - project this should be pretty straightforward the 
only difference is that this time we're going to  
00:18 - securely store the API key let's Dive Right In 
first let's review the endp point that we're going  
00:24 - to hit with our app so on the YouTube data API and 
I'll link to this document below in case you lost  
00:31 - the reference to it we're going to be hitting 
this endpoint playlist items essentially we  
00:36 - want to list out all of the videos for a certain 
playlist now this is the URL and it's going to be  
00:45 - a get type of request and the required parameters 
so this is what we must specify is going to be one  
00:53 - of these like what level of detail do you want 
for the video items that get returned in the  
01:00 - response and through my testing in building this 
demo I've come to the conclusion that snippet is  
01:07 - what you need now it doesn't exactly tell you 
what is included in each of these maybe there's  
01:13 - an additional documentation you can search up 
somewhere but what you can do is you in the  
01:19 - previous lesson when we tested out hitting the API 
you can just try out all of these parameters and  
01:24 - see what you get back and see uh what you need now 
what you should be targeting is is getting back as  
01:31 - little data as possible while still satisfying 
what you need to do because you never want to  
01:37 - return more data because that takes more bandwidth 
it takes more time and you know why would you just  
01:42 - do that so snippet is what we need it's going to 
contain the title description the video image URLs  
01:49 - and that's pretty much all we need to be honest 
now according to this documentation this is the  
01:54 - only required parameter however we still need to 
specify the playlist ID otherwise what videos are  
02:03 - we going to get back we need to tell YouTube 
this is the playlist that I want to get the  
02:08 - videos back for right and this what what sort of 
threw me off in the beginning I thought I would  
02:14 - put the playlist ID in there but no you put it in 
there okay so that is the end point we're going  
02:19 - to hit now in terms of the API key that we need to 
pass in you should have signed up for this back in  
02:25 - lesson one if you haven't just go back to lesson 
one and walk through that process and you can sign  
02:31 - up for your own API key now we're going to jump 
into xcode and see how we can securely store this  
02:38 - API key I hope you're enjoying the lesson so far 
now just in case you want to launch your own app  
02:43 - I want to tell you about cdb C+ this step-by-step 
program will help you launch your own app even if  
02:48 - you don't have any experience and it takes 
about 4 months if this sounds like something  
02:53 - you're interested in I have a special offer for 
you I'll leave the link in the description below  
02:58 - this video and hopefully I'll see you there if 
not no worries I really appreciate that you're  
03:03 - here watching this lesson and learning with us so 
thank you for that anyways now back to the lesson  
03:08 - first I want to talk about what storing your API 
key securely even means because there are so many  
03:13 - different ways to do it and there are varying 
degrees of Effectiveness so first let's talk  
03:20 - about not securing the API key which is what we 
did when we were demoing the uh API right in the  
03:27 - previous lesson so we hardcoded the API key Direct 
in the xcode project and that's bad because you  
03:32 - may accidentally share your project with someone 
or put it on Source control so if you're not  
03:39 - familiar with Source control like GitHub uh it is 
a way for a team to collaborate multiple people to  
03:44 - work on the same codebase so if it gets on Source 
control especially if it's an open- source project  
03:49 - or if it's you know who knows who has access to it 
right your key is right there and anybody can take  
03:55 - it and abuse it so that's what you do not want 
now one level of sophistication or protection is  
04:03 - by putting that API key in an external file so you 
do not include it directly in the xod project but  
04:11 - it sits in a different file and then you have your 
XO Project Read the key from that file in this way  
04:17 - when you put your project onto GitHub as you can 
see in this diagram the key doesn't go along with  
04:22 - it the key stays in that file on your computer 
and then you have to manually share that external  
04:30 - file with the key to whoever needs access right or 
that person gets their own API key and puts it in  
04:36 - the config file and combines it with the xcode 
project now the problem with these two methods  
04:43 - is that ultimately your xcode project still needs 
the API key and the reason for that is because we  
04:51 - are making the network calls to the API directly 
from our project or our app right so our project  
04:59 - needs the key in order to access and authenticate 
against that API there's no way around this right  
05:06 - your exod project needs to know about the key so 
if you think about the App Store when your app is  
05:13 - downloaded right that package that is downloaded 
has everything it needs to work right including  
05:20 - the API key because ultimately your app is going 
to be using that API key to connect to any apis  
05:27 - which your phone or sorry your app uses so it's 
still if someone tries hard enough and they know  
05:34 - what they're doing probably can extract the key 
out from that package ultimately the most secure  
05:41 - way to do this would be to not even make the API 
calls from your app you would set up your own API  
05:51 - and your app would make requests to that AP to 
your API and it's your API that has the API key  
06:00 - that then makes access to the third party API 
so in this example that would be the YouTube  
06:05 - API and then it would get the data back from the 
YouTube API and then return that data back to  
06:12 - the app right so it's almost like a middleman and 
which has access to the key so then that way the  
06:20 - client which is your app will never see the key 
and then what you can do is you can have that app  
06:29 - have an its own like user account system that 
the user needs to sign up for and authenticate  
06:36 - uh himself or herself in order to even hit your 
API so you can see how far you can take this right  
06:44 - and it really depends I think to me it depends how 
many people are using your app um and how critical  
06:52 - it is that this API key never fall into the wrong 
hands at the very least we should put the API key  
06:59 - in an external file and not inside hardcoded in 
the project this is just a good practice as you're  
07:06 - building your app now in terms of setting up your 
own software and having your app never use the API  
07:13 - key to me that is a later stage thing let's say 
your app picks up traction and there's a lots of  
07:20 - lots of users using it gets on the news and there 
you think there may be a risk that someone could  
07:26 - Target your app uh maybe competition or what 
whatever it may be to Target your app to try  
07:31 - to bring it down because your business has taken 
off I think that's a good problem to have and then  
07:37 - you would then think about how can I make my app 
more secure and then go through this process of  
07:43 - setting up your own API so I wanted to go through 
all of that so that you can get an understanding  
07:48 - of what it means to secure your API key in 
this lesson I'm going to show you how to put  
07:53 - your API key in an external file so here are the 
steps we're going to go through we're going to  
07:58 - create a config file and our xcode project and 
we're going to add the key to it we're going to  
08:02 - set the project to use this config file and we're 
going to define a special variable in our pist to  
08:07 - reference that API key and we're not going to do 
steps four and five because we're not dealing with  
08:12 - Source control in this project but steps four and 
five they are the steps you want to do if you are  
08:19 - putting this project into Source control because 
the G ignore file lists all the files that should  
08:26 - not be put on Source control like should not 
be uploaded to GitHub essentially so steps four  
08:33 - and five those are things that you definitely 
want to do if you are putting this project into  
08:37 - Source control or GitHub and you're working on a 
team if you're curious about how those are done I  
08:42 - would just Google how to use a g ignore file and 
it's literally just listing your config file like  
08:49 - the file name inside that get ignore file which is 
essentially just a text file and you include that  
08:56 - get ignore file with your excode project and then 
when you push your project onto Source control  
09:02 - it's going to read that get ignore file and take 
note of all the files which it should exclude and  
09:09 - it will not put those files into Source control 
so now let's dive into our xcode project and do  
09:14 - steps one two and three so here's our xcode 
project let's start by adding that external  
09:20 - file and this is going to be a configuration 
file so let's right click on this main folder  
09:25 - here new file and at the top right corner you'll 
see a filter box type in configuration just type  
09:32 - config this is the file that we want configuration 
settings file now the important thing to note here  
09:38 - is that you do not want to include it as part of 
the target here just make sure that's unchecked  
09:45 - and then create because you don't want to include 
it right now you type in API unor key in all caps  
09:54 - and notice we don't this is not a variable or 
constant we don't put any Swift keywords in  
09:59 - in front of it this is more of like a text file 
now equals and we are going to bring up our API
10:06 - key okay so there it is I'm going to copy it 
and I'm going to paste it in there and save  
10:16 - the file next we are going to configure our 
xcode project to use this configuration file  
10:21 - by tapping on the root node here tapping on 
project and under configurations here you can  
10:28 - see there's no config configuration set there 
are two different types of builds that we can  
10:32 - create when we are developing and we're testing 
in the simulator or on our devices it's what's  
10:37 - called a debug build a release build is when 
you create a build specifically to deploy or  
10:45 - send to the App Store and that doesn't uh 
contain all of the extra stuff that's only  
10:52 - used in the development phase of the app such as 
the bug symbols and things like that anyways for  
10:59 - both of these uh debug and release build we are 
going to set it to use config like that okay now  
11:08 - the third and final step before we can test this 
is to go under targets here we're going to go into  
11:15 - info this is our pist and we are going to create 
a key that we can use to reference that value in  
11:23 - the config file so at the bottom hit plus and 
then you're going to type in in all capitals  
11:30 - AP iore Capital ke y press enter and the type 
is going to be string I don't know why it was a  
11:41 - lowercase p because I think there was some autoc 
correct funkiness let's correct that and change  
11:46 - that to capital P and then as for the value this 
is going to be a dynamic uh variable or reference  
11:55 - and it's going to refer to the API key in the 
config file so what we're going to do inside our  
12:02 - Swift code right here is we are going to go into 
this pist and grab the value for this key and the  
12:10 - value for this key is actually pointing to this 
config file which we are not going to include as  
12:16 - part of the project when it gets put into Source 
control and all that stuff this is our external  
12:21 - file like we talked about before so let's test 
this out we are going to go into the home View  
12:29 - and we're going to say on appear we are just 
going to print out the uh API key see if we can  
12:38 - reference it and the way we reference that info. 
pist is by saying bundle. main doino dictionary  
12:47 - that's our info pist and this is optional because 
it may return nil so if it can find it then we are  
12:56 - going to search for the key um and we are going 
to try to retrieve the value because it has no  
13:04 - idea of what the value is we know it's a string 
it's a type of string so we're going to try to  
13:09 - turn it into a string and this is just try if it 
if it can't then it'll probably be um empty or
13:18 - nil uh we could provide a default value so yeah if 
there's if I can't find anything let's let's print  
13:29 - can't find it okay just for our own our own 
debugging okay so let's try this out we are  
13:36 - going to run this in the simulator and so it's 
running right now and we should see our API key  
13:43 - print out there if everything is according to 
plan all right perfect it works so this this is  
13:51 - referencing the info thep list looking for this 
key and the value for this key is referencing  
13:58 - the config file API key right here perfect now 
let's move on to implementing the data service  
14:05 - where we're going to send off the API call to 
the YouTube API and to retrieve the data so in  
14:12 - the data service file at the top let's declare 
our key as a private uh constant and we're going  
14:20 - to call this the API key and we're going to handle 
this just like I showed you before uh bundle. Main  
14:29 - doino ditionary and we're going to try to look 
for API key as string and now I'm not going to  
14:38 - give it a value like this if it can't retrieve 
it because I do want it to be nil and that way  
14:45 - we can detect if the API key is present or 
not all right next we are going to create a  
14:50 - new function called get videos and it is going to 
return an array of videos essentially I want it  
14:59 - to give back all of the videos for a given 
playlist right so we are going to make this  
15:06 - an asynchronous function and I will explain what 
that means when it comes time that we call this  
15:13 - and I'll explain what the async and await keywords 
mean all right so for now uh why don't we just  
15:20 - return an uh empty video array and here we're 
going to implement that API call so first check  
15:28 - if a API key is is there and then we are going 
to uh create the URL create the request and we're  
15:43 - going to um send the request and and then finally 
parse it so this really helps that we did this  
15:51 - inside a demo back in lesson two right so we've 
tested that this works we know it works so we're  
15:59 - going to say guard API key not equal nil else 
return um we can return an empty video list  
16:11 - okay because they can't get anything ideally 
what you'd want to do is probably show an error  
16:15 - message or something so you can return something 
as such and then capture it and display it to the  
16:20 - UI but by doing what we we're doing here you're 
returning no videos so the user doesn't know if  
16:27 - there's actually no videos in that playlist or 
if something went wrong but clearly something  
16:32 - went wrong because we can't get the API key right 
okay so coming down here we're going to create the
16:38 - URL and uh before we create the 
URL actually we're going to create  
16:45 - it off of a string right and that URL 
string is going to look something like
16:50 - this so first let's go back to the uh um the 
documentation so that is right here and as I  
17:03 - mentioned in the previous lesson we are using this 
end point right here so we're going to retrieve  
17:10 - all of the playlist items given a playlist so I'm 
just going to put that right there I'm going to  
17:16 - hard code that URL right here and we're going 
to add the parameters so one of the uh required  
17:23 - parameters is this one part I mentioned before in 
lesson three why I picked s it because contains  
17:30 - what we need and then the other thing we want to 
specify is which playlist do we want to Target to  
17:36 - retrieve all of the videos for okay so the way you 
find this is I'm going to choose my own playlist  
17:43 - you can choose whatever playlist you'd like but if 
you go to someone's Channel and you go to playlist  
17:48 - you'll see all of the playlists here I'm going to 
click on this one view full playlist and it's just  
17:55 - this ID right here if you double click it it'll 
highlight the whole thing I'm going to copy that  
17:59 - and I'm going to paste that in there and the 
last thing you have to add is the key so we're  
18:04 - going to say key is equal to and we will just 
insert that right here API key and we've already  
18:12 - checked that it's not nil so we're going to just 
force and wrap it here okay so now we can create  
18:21 - the URL instance off of that string and now 
we can create the request so let's do that UR  
18:29 - request and we're going to do it off of this one 
right here going to pass in the URL and actually  
18:35 - this one this one returns an optional this so This 
Could Be nil so we're going to say IFL URL equals  
18:43 - URL just to check that it's not nil we're going to 
put all of this code in here that only executes if  
18:50 - we're successfully able to create a URL instance 
so then we're going to do that in there and then  
18:57 - sending off the request is a matter of um using 
session so uh if we say let's create another  
19:05 - constant right here just to make things more clear 
so URL session shared this is just breaking things  
19:11 - up so it's easier for you to understand and if if 
you look at this one which is what we're going to  
19:20 - use data like retrieves the data for a given 
URL request which we have created up here and  
19:28 - it is both an asynchronous method and it also 
potentially throws errors so we have to address  
19:35 - both of those things and the third thing I want 
you to notice with this method is what it returns  
19:40 - to you it returns a tuple so it has two pieces 
of data it has data which is the actual data  
19:50 - that is returned by the API and a response object 
which you can take a look at for any errors or  
19:58 - uh the status code and things like that so that is 
the actual response and that is the data separated  
20:04 - into its own um parameter so we are going to also 
handle that but first let's do things one at a  
20:12 - time let's handle the throws part and then we're 
going to do async and then we're going to handle  
20:18 - the data that gets returned so throws okay so 
let's pass in the request if calling a method May  
20:26 - throw an error we have to C it and the mechanism 
in Swift to do that is to it looks like this so  
20:35 - you do something that may potentially throw errors 
which is this line of code you have to put a try  
20:44 - keyword in front of it so we're going to try to do 
this right and then you have to also have a catch  
20:51 - block and this uh displays or you can handle any 
errors that get thrown if it gets thrown so we're  
20:58 - just going to print it out okay and this will 
reference the error that gets uh thrown up next  
21:05 - let's handle the fact that this is an asynchronous 
method so in order to call the asynchronous method  
21:13 - which means that it gets called in a background 
thread or a background worker so imagine yourself  
21:21 - tasking someone else to do the work like you're 
giving someone else a task and have that person  
21:26 - go and do the task and come back to when it's 
done right you have to put the await keyword  
21:34 - which means that you are going to wait for that 
person that background worker to come back with  
21:42 - the completed task before you continue and execute 
the rest of the lines of code below it so that's  
21:50 - what's going to happen here now I do want to 
explain even though it waits for the background  
21:55 - worker to do that task and comes back before we 
execute the next lines of code it is still good  
22:02 - because while we're waiting for that background 
task to come back we can handle any sort of user  
22:07 - interaction and we can also do some other things 
before we execute the next lines of code it's  
22:13 - just that the await keyword tells the system uh do 
not run lines 33 and Below until that background  
22:23 - worker comes back right and for things like this 
you do want to send it off as a a background task  
22:30 - because if you have the main thread which is you 
know the the main thread that is executing this  
22:36 - code go and do that work there will be no worker 
to handle all of the user interaction and stuff  
22:45 - and so it'll look like it's frozen so that's kind 
of the gist of it uh with any sort of tasks like  
22:51 - Network requests or um database queries uh 
and you'll see when we do the uh thumbnail  
22:59 - downloading for the images we're also going to 
send that as a background worker to go and do  
23:04 - that right so that's using the async and a weight 
keywords um the fact that this is an asynchronous  
23:12 - method will also come into play when we have 
the feed view call get video you're going to  
23:17 - see how we use the await keyword okay so hopefully 
that makes sense if not I would uh recommend that  
23:26 - you dive a little deeper into async and a weit 
search for some additional tutorials on async  
23:31 - and a weight in Swift so you can understand it 
in a little more detail more than we have time to  
23:38 - cover right now so we've handled the fact that it 
throws an error we've handled the fact that is an  
23:46 - asynchronous method meaning background worker is 
going to go execute it now we have to handle the  
23:51 - data that comes back and it's a tupal right so we 
are going to declare our own tupal to track that  
23:57 - data so we're going to declare a tupal constant 
we're going to say data and response so you'll  
24:04 - notice that this format looks like what we saw 
this method returns we're going to say equals this  
24:12 - so if no errors get thrown when the background 
worker comes back it's going to assign the data  
24:18 - to this and it's going to assign the response 
to this and then from here we can parse the data
24:29 - now before we actually parse the data let's try 
sending this request off and taking a look at  
24:34 - it inside proxy man to make sure that it's 
happening uh so what we're going to do first  
24:39 - we have to actually fire off this request so 
inside the feed view right here why don't we  
24:47 - say on uh not on appear but we're going to use 
task let me explain what that is so the task  
24:57 - is a modifier that lets you execute a block of 
asynchronous code let me put that into layman's  
25:06 - terms when the feed view appears it is going 
to run this code inside this task block as a  
25:15 - background worker so we are going to say we 
going to create a property up here to store  
25:22 - the videos and this is going to be a state 
property let me explain what that means as
25:30 - well okay it's going to be an empty array in the 
beginning in case you haven't watched my 8 day  
25:38 - beginner Series where I explained what this what 
state properties are it's essentially when this  
25:43 - value changes we want the UI to refresh so this 
starts off as an empty array there are no videos  
25:51 - right but when we send off the task from the data 
service right to retrieve the videos and it comes  
25:56 - back and then it puts the video instances into 
this array we want the user interface to refresh  
26:03 - and show those videos that's why this is a state 
property all right so let's fire off this task  
26:09 - so we are going to create a new data service 
instance and I'm just going to chain it like  
26:16 - this I'm going to call get video oh that should be 
an S we'll change that this should be get videos  
26:23 - and notice that it's an asynchronous method and 
it returns a list of videos so asynchronous means  
26:31 - we're going to have to send it off as a background 
task we're going to have to wait for that to come  
26:36 - back before executing the code below it okay 
so we're going to say let videos equals that  
26:43 - you know the returned to list of videos let's call 
this let's call it returned videos right and then  
26:51 - we are going to assign the return videos to our 
State Property here self. videos equals return
27:03 - videos okay so we can shorten this definitely 
but I wanted to break this up into two lines to  
27:10 - explain to you the fact that this line of code 
will not execute until this has gone and come  
27:17 - back with the data because of this await keyword 
right and while the main worker is waiting for  
27:25 - the background worker to retrieve the data it 
can still handle user interaction and other  
27:31 - things that it needs to do so that's what's so 
great about Ayn in a weight so we can shorten  
27:37 - this by just putting this like this right and 
removing the need for this even right but I  
27:45 - thought writing it like that would explain 
um the await keyword a little bit better so  
27:51 - with the way we've set it up now if we run 
this in the simulator it should um it should  
27:56 - execute this and then send off the network 
request and if our API is correct and our  
28:03 - request is structured properly we should get 
a response so let's go ahead and open up proxy
28:08 - man and let's go ahead and take a look see 
this in action so I'm going to first run  
28:16 - this in the simulator so that it'll 
show up on our list there it is I'm  
28:22 - going to pin this one to the top 
and I am going to have to resend
28:28 - it hello world to send it all right the 
status code uh is green this should be a
28:43 - 200 y 200 and we get the data back here you 
can see the root element contains an array of  
28:54 - items so this root element we represent it with 
our playlist model we're going to model it off  
29:02 - of that and then as for the items these are the 
individual videos which we are representing with  
29:09 - instances of video obviously we haven't filled it 
out yet but that's what we're going to do so if  
29:15 - you open one of these videos you're you're going 
to see that it has the snippet which is what we  
29:20 - asked for in the API request and it contains 
the thumbnails the title um the description  
29:28 - and the the video ID is also something 
that we need so inside resource ID here's  
29:35 - the video ID and so those are all the 
details we need and inside thumbnails  
29:40 - you can see that it has different sizes of 
thumbnails each each size has a different
29:44 - URL all right we're about halfway there now that 
we have the request sending out the data coming  
29:52 - back all we need to do is parse that Json data 
into usable video instances in our apps so so  
29:58 - that we can display it and we're going to do that 
in the next lesson and if you're enjoying this  
30:01 - build so far can you give this video a thumbs 
up I greatly appreciate it and if you were able  
30:06 - to follow along to add your API key and to send 
off the network request drop a comment down below  
30:12 - and say so far so good all right thanks for 
watching and I'll see you in the next lesson