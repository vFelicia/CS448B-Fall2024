00:00 - hello and welcome to lesson four
00:01 - equipped with your new skills and Auto
00:03 - layout and staff views it's time to put
00:05 - them to the test by the end of this
00:07 - video you'll have built the user
00:08 - interface for your ware' card game app
00:10 - so let's get to it so we're going to
00:17 - start with a brand new Xcode project you
00:20 - just click on create a new Xcode project
00:22 - right here or you can go into the file
00:25 - menu and choose new project now make
00:29 - sure you're looking at io s and choose
00:30 - single View application here we're going
00:34 - to put the name of our app and this
00:37 - isn't the public facing name it's just
00:39 - something that is going to give you a
00:42 - unique identifier combined with your
00:44 - organization name and your your
00:47 - organization identifier it's gonna
00:48 - create this bundle ID and I talked about
00:50 - this back in Lesson one and how it's
00:52 - going to be really important for an app
00:54 - that you're going to publish into the
00:55 - App Store now for this app make sure you
00:58 - choose swift as the language you can
01:00 - leave these unchecked and when you save
01:03 - it you can also leave this unchecked as
01:06 - well for now so let's create our project
01:09 - on the desktop the first thing we're
01:11 - going to do is to jump into the asset
01:14 - library for our project and I want you
01:16 - to go and grab the image assets now you
01:19 - can do so in the link in the description
01:21 - below or just check the card
01:23 - just going to pop up in the right-hand
01:24 - corner when you unzip the file you can
01:29 - grab all of these images you'll notice
01:31 - how each image asset has three different
01:33 - sizes the first one X and then 2 X and
01:36 - 3x and this is what we talked about back
01:38 - in our OTO a lesson it's for the
01:41 - different devices having different
01:43 - screen pixel densities so we're gonna
01:48 - just select all of them and then drag
01:51 - them into right here xcode is going to
01:53 - be smart enough to group all of them in
01:56 - asset names like this these names just
02:00 - pay special attention to them capitals
02:03 - matter and you can rename them these are
02:05 - the asset names which you are going to
02:07 - refer to these image assets when you
02:11 - want to display them so
02:12 - just change the capital B to a lowercase
02:14 - B here to be consistent and yours might
02:18 - already be changed actually so I'm gonna
02:20 - just I'll change that later so when you
02:23 - download it should already be lowercase
02:25 - B the next thing we're gonna do is jump
02:27 - into the storyboard and we're going to
02:29 - start by adding that green background so
02:32 - go ahead and open up your object library
02:34 - you can either click this button up here
02:36 - and just in case you forget or press
02:38 - command shift and L so let's go ahead
02:40 - and search for an image view and drag it
02:44 - onto the view and this is what we're
02:46 - going to do to display images now go
02:49 - ahead and click into this inspector
02:51 - attributes inspector and from the image
02:54 - property let's choose background now
02:56 - we're going to stretch this out to all
02:58 - of the edges of the screen make sure you
03:01 - have that background highlighted and
03:03 - then click this at new constraints
03:05 - button and we're going to want to
03:06 - uncheck constraint to margins because we
03:09 - want it to reach to the edges of the
03:11 - screen ignoring margins so leave that
03:14 - unchecked or actually actively unchecked
03:17 - out because by default it is on the
03:21 - other thing you want to do is pull down
03:22 - all these little dropdowns and choose
03:24 - view instead of the safe area because we
03:27 - want to specify a margin that is
03:29 - relative to the view rather than the
03:31 - safe area and in just in case we didn't
03:33 - go through what the safe area is if you
03:36 - go into the document outline right here
03:38 - and you click on the safe area
03:40 - it's just that blue highlighted area is
03:44 - the safe area and it's a place that's
03:47 - guaranteed to not be obscured by
03:49 - anything so for example the iPhone 1010
03:54 - are 10s and those ones they have a notch
03:57 - at the top right and so the safe area is
03:59 - actually below the knotch so anything
04:02 - that you put in the safe area is
04:03 - guaranteed not to be blocked by elements
04:05 - like that and especially if you can flip
04:09 - the orientation so that notch could be
04:10 - at the bottom or it could be you know on
04:12 - any of the sides the safe area will
04:14 - guarantee that it won't get obscured by
04:17 - that knowledge anyways going back to our
04:20 - background image make sure you have it
04:22 - highlighted again click on this menu
04:25 - we're gonna have to start home
04:26 - over so uncheck constraint margins and
04:28 - then choose view for all of these guys
04:31 - before you change the numbers in here I
04:35 - would pull up down this drop-down and
04:38 - change it to view first and then go back
04:40 - and edit all the numbers to zero making
04:43 - sure that all of these red margins are
04:46 - enabled it's going to say add four
04:48 - constraints down here the reason why I
04:51 - want to toggle this to view first before
04:54 - changing the value here is because when
04:58 - you choose a new option in this
04:59 - drop-down it automatically changes that
05:02 - number in the textbox so you know if you
05:06 - did it the other way around you would
05:07 - have to basically change the numbers
05:10 - again so that was just to demonstrate
05:12 - let me just double check that all of
05:14 - them are still set to view okay let's
05:17 - set these to zero add four constraints
05:19 - and you should see your background
05:21 - stretched to all four edges now if you
05:24 - somehow didn't your background isn't
05:27 - looking like mine then you can always
05:29 - just open up this constraints you can
05:32 - delete all of them and you can try again
05:34 - no big deal the next thing we're going
05:38 - to do is add another image view so again
05:40 - open your object library drag an image
05:42 - view onto the view this time we're gonna
05:45 - choose logo and ignore the fact that
05:50 - it's big and fuzzy or whatever right now
05:52 - we're gonna add some constraints to it
05:54 - first
05:54 - so let's horizontally Center that in the
05:58 - container it's gonna look squished
05:59 - that's okay for now and we are going to
06:02 - add a top margin and we are going to
06:06 - leave it relative to the safe area and
06:08 - we're gonna leave constraint to margins
06:11 - enabled because we don't want this logo
06:12 - to be obscured so we want to just make
06:14 - sure it's in the safe area when you add
06:16 - that the image view is going to use the
06:18 - intrinsic size of the image which is
06:20 - just the size of your graphic asset and
06:23 - so it's going to look like that the next
06:27 - thing we want to do is we want to add a
06:29 - stack view so we learned about these in
06:32 - the previous lesson we're going to
06:33 - choose a horizontal stack view and this
06:35 - horizontal stack view is just going to
06:37 - contain the two
06:38 - card elements so go ahead open up the
06:41 - object library again and choose image
06:43 - view now we're gonna put this in our
06:46 - view but we can either drag it into the
06:48 - stack view on the view or we can drag it
06:52 - into the document outline and because
06:55 - the stack view is invisible like this I
06:58 - usually find it easier to put it into
07:00 - the document outline and that's what I'm
07:01 - going to do here I'm gonna drag it here
07:05 - I'm just gonna show you what a potential
07:07 - mistake is now if you drag the image
07:10 - view and you try and put it inside your
07:11 - stack view and it's at the same kind of
07:15 - hierarchy level right here as the stack
07:17 - view that's not what you want you want
07:19 - the image view to be inside the stack
07:21 - view so let me show you what that looks
07:23 - like let me move this image and let me
07:25 - just drag it into the stack view now you
07:28 - can see this little collapsible triangle
07:31 - appear beside the stack view that means
07:34 - I can close it and open it and when I
07:36 - close it the image view is inside the
07:38 - stack view so that's what you actually
07:40 - want we're gonna add a second image view
07:45 - into the stack view so we have two and
07:47 - then you're gonna click on the first
07:50 - image view and you're gonna choose a
07:52 - card so let's just say card six and
07:54 - you're gonna click on the second image
07:56 - view and you're gonna choose doesn't
07:59 - really matter let's choose 10 and now I
08:03 - like to add some space in between the
08:05 - two cards so we're gonna go on the stack
08:07 - view here and we're gonna choose spacing
08:08 - 30 just to give it some space now before
08:13 - we align the stack view on to the screen
08:16 - I want to put this horizontal stack view
08:19 - into a vertical stack view along with a
08:22 - button so we're gonna add the button
08:25 - first let's drag this button down here
08:30 - and let's configure this a little button
08:33 - a bit for the image property of the
08:35 - button why don't we choose the deal
08:38 - button and actually I want to make one
08:42 - little distinction here you can choose
08:44 - background or you can choose image
08:46 - there's a slight difference so for the
08:48 - image property it's going to put that
08:51 - beside the button text but if you choose
08:53 - background that image is going to appear
08:57 - behind the button text so that's what
09:00 - that distinction is all right so now we
09:03 - have our deal button and we have the two
09:05 - cards here I'm gonna put both of all of
09:08 - these elements into a vertical stack
09:10 - view so I want you to go into the
09:12 - document line highlight your stack view
09:15 - hold down shift on your keyboard and
09:17 - click on your button as well and that's
09:19 - going to highlight both of them and I
09:21 - want you to come down here and choose
09:23 - embed in stack view what that's going to
09:27 - do is immediately take those elements
09:28 - that you've highlighted and put them
09:30 - into a stack view now it Xcode is gonna
09:33 - be smart enough to take a look at how
09:36 - your elements are oriented and it's
09:39 - going to see that our horizontal stack
09:42 - view is above our deal button so it's
09:46 - automatically going to put these two
09:47 - things into a vertical stack view check
09:50 - this out stack view boom vertical stack
09:53 - view you can see this in the document
09:55 - outline alright the other thing it does
09:58 - is it tries to set some of the
10:01 - properties of the stack view based on
10:03 - how you laid out the elements so for
10:06 - example here it's at the alignment the
10:08 - center the distribution to fill and the
10:11 - spacing to 46 because that was the
10:13 - amount of space we had between the
10:15 - horizontal stack view containing the
10:17 - cards and the deal button now I'm gonna
10:20 - change that a little bit I'm gonna say I
10:23 - wanted 30 instead of 46 and now let me
10:29 - rename this in the document outline
10:30 - because as soon as you're gonna have
10:32 - more and more elements and you're gonna
10:33 - have a ton of stack views or a ton of
10:35 - image views things can get confusing so
10:38 - you might have noticed for these UI
10:40 - image views when we've set the image
10:42 - property of it it automatically changes
10:45 - the name of that image view in the
10:48 - document outline so that's helpful but
10:50 - for the stack views they're all just
10:52 - gonna say stack views from so for this
10:54 - one I'm going to say
10:58 - cards and you can you can name it
11:02 - anything you want let's say cards and
11:06 - the button stack view right for this one
11:11 - maybe cards stack view okay and for the
11:16 - button you can name these two okay so
11:20 - now let's collapse this and let's
11:22 - position this stack view onto the screen
11:27 - so make sure it's highlighted we're
11:29 - going to choose horizontally centered
11:31 - container as well as vertically and
11:33 - that's going to effectively Center the
11:35 - whole thing onto the screen now I'm
11:38 - going to make a slight adjustment here I
11:39 - am going to go into the size inspector
11:42 - while I have this stack view highlighted
11:45 - and I'm going to take a look at the two
11:48 - constraints we added I'm gonna double
11:50 - click the center Y constraint and that
11:53 - this constraint is basically putting it
11:56 - in the center of the screen on the y
11:58 - axis I want to move that whole stack
12:02 - view down a little bit because I want to
12:04 - make sure that when you're holding your
12:05 - phone your thumb can reach high enough
12:08 - to hit that deal button so I'm actually
12:10 - gonna change this constant and I'm going
12:12 - to add 20 points to it to bump it down
12:15 - just a little bit so just as a review I
12:21 - want to tell you this Center alignment
12:25 - constraint is basically saying that the
12:28 - center Y of that stack view should equal
12:31 - the center Y of the entire view plus 20
12:36 - points that's that what the constant is
12:39 - therefore that's why it gets bumped down
12:41 - a little bit alright so the next thing
12:43 - we want to add are the score labels so
12:48 - why don't we open up our object library
12:51 - again and choose vertical stack view I
12:54 - am going to just put that there in the
12:57 - corner and then I'm going to add a
13:01 - couple of labels I'm going to drag them
13:03 - directly into the document outline into
13:05 - that stack view
13:07 - and then you'd write two of them so make
13:11 - sure that when you close the stack view
13:13 - the labels tuck inside the stack view
13:15 - alright and now let me edit some
13:18 - properties of this first label and make
13:21 - the color white and I am going to change
13:26 - the text of player and for the second
13:28 - label I am going to change it to zero
13:33 - I'm going to change the color to white
13:35 - and click this guy right here and change
13:39 - the font size to 40 now I'm going to
13:44 - highlight the stack view because we want
13:45 - to position this in the lower left hand
13:47 - corner I'm gonna choose this one the
13:51 - margins and we're gonna make sure that
13:55 - constraint - margins is on and then it's
13:58 - relative the safe area it should be by
14:00 - default right we're going to set the
14:03 - left one to 20 and the bottom one to 20
14:06 - and this button should say add two
14:08 - constraints and that's just going to
14:10 - position it there there's one more thing
14:13 - I want to do and that is to change the
14:17 - alignment to leading so that's gonna
14:19 - make sure that those elements inside
14:21 - that stack view are left aligned let's
14:24 - change the name of this player for
14:26 - stacked view now we're going to do the
14:30 - same thing for the CPU score on the
14:32 - right hand side but this time I'm going
14:34 - to add the labels first just to show you
14:37 - again the two different ways of adding
14:40 - staff views so I'm going to dry two
14:41 - labels here and check this out you can
14:44 - do this you can select both of them
14:47 - remember you hold down shift in order to
14:50 - select click and select both of them and
14:53 - I can change the properties for both of
14:55 - them at once however at this point if I
14:58 - change the text that's going to change
14:59 - it for both of them so let me unselect
15:01 - them and just select the first one and
15:03 - I'll change this at the CPU I'll select
15:06 - the second one and change this to zero
15:08 - and then I'm going to change the font
15:10 - size as well to 40 and now I'm going to
15:14 - select both of them again by holding
15:16 - down shift and then I'm gonna click
15:18 - embed in
15:20 - and choose a stack view now remember
15:23 - when it when you do this it
15:25 - automatically determines which type of
15:28 - stack view is the best horizontal and
15:30 - vertical and obviously because the
15:32 - elements were on top of each other it
15:33 - shows vertical but it also sets some
15:36 - properties for us which we might not
15:37 - want so make sure you highlight that
15:39 - stack view let's go here see spacing at
15:41 - set three so I actually want that to be
15:43 - zero just like the other player stack
15:46 - view and alignment I actually wanted
15:47 - trailing so that it's on the right-hand
15:49 - side now let's put some margins on the
15:53 - stack view so make sure you have it
15:54 - highlighted click on this guy
15:57 - make sure constraint emerges it's on by
16:00 - default it should be relative to the
16:02 - safe area which it is let us change 20
16:05 - and 20 and then down here should say add
16:08 - to constraints and there you have it so
16:12 - you have something like this now I want
16:14 - to test this user interface to make sure
16:16 - that it looks decent on all screen sizes
16:19 - and orientations so the way you can do
16:22 - that inside Xcode is down here it says
16:24 - view as iPhone 8 and so far we've been
16:27 - designing this as iPhone 8 in portrait
16:31 - but if you click this open it's got a
16:34 - little tray and yours might actually
16:35 - show the devices if you've got enough
16:37 - space on your Xcode interface if not
16:40 - you're gonna get this sort of drop-down
16:42 - menu like I do
16:43 - so let's first flip this into portrait
16:46 - actually before we do that make sure you
16:49 - press command S and save because
16:51 - Xcode sometimes can crash you know
16:55 - that's not out of the realm of
16:57 - possibility so change orientation let's
16:59 - change it to landscape and take a look
17:08 - so what'd I tell you an internal error
17:11 - has occurred editing functionality may
17:13 - be limited there's not a problem all we
17:15 - need to do is you can come up to product
17:18 - you can clean build folder and this is
17:21 - good learning for you in case this
17:22 - happens for you and then you can just go
17:25 - ahead and quit Xcode press alt Q and you
17:28 - can quit the whole thing and then you
17:30 - can relaunch Xcode and then just reopen
17:34 - your project and that will often time
17:37 - fix things so you can see here's my
17:41 - document outline you can expand that and
17:44 - here is my user interface now sometimes
17:49 - if yours has all these blue squares with
17:52 - question marks on them all you need to
17:53 - do is just go ahead and change the
17:55 - device or change the orientation to
17:57 - force Xcode to kind of refresh things
17:59 - alright so going back to it we have
18:01 - iPhone 8 in landscape it looks pretty
18:04 - good ain't no problem there and in fact
18:07 - if we you go up in size you're just
18:09 - gonna get more space my biggest concern
18:11 - right now is just to make sure that no
18:14 - element is obscured or hidden or blocked
18:17 - or clipped or anything like that and
18:19 - that the user interface doesn't appear
18:21 - broken it's okay if you have extra space
18:24 - you know you can in the future take
18:27 - advantage of that extra space somehow
18:29 - but what you really want to avoid is to
18:31 - have your elements kind of like
18:33 - overlapping each other in the case that
18:35 - there isn't enough space so instead of
18:37 - going up I'm just gonna check the sizes
18:40 - going down because I know as it's gonna
18:43 - get to the smaller phone sizes things
18:46 - may get clipped so why don't we try
18:48 - portrait first let's just jump right
18:50 - down to the smallest screen size so
18:52 - still looks good right let's flip it
18:56 - into landscape and there immediately you
18:58 - see that our logo is hidden behind the
19:02 - cards it's probably not what you want
19:05 - even if you think it looks ok I mean you
19:07 - can leave it in my opinion I would want
19:09 - to change that and I'm gonna show you
19:11 - how to change that let's go up one size
19:14 - just to see if the problem still exists
19:16 - and it does so let's go up one more I
19:19 - phone
19:20 - and that one is okay so we need to
19:24 - somehow address the situation for these
19:27 - smaller screen sizes before we can do
19:30 - that I need to tell you about something
19:32 - called size classes size classes are
19:35 - basically categories of screen sizes
19:38 - because there are so many different
19:40 - devices and two orientations for each
19:42 - device that Apple decided to separate
19:45 - all of these into different categories
19:46 - of screen sizes so when you're adding a
19:49 - constraint you're able to say something
19:51 - like add this constraint for all screen
19:53 - sizes as in all categories of screen
19:56 - sizes or only add this constraint for a
19:59 - specific size class so this gives us
20:02 - some flexibility to change the layout
20:04 - depending on a specific size class so
20:08 - let's say your app might look different
20:10 - on the iPad size class versus like a
20:13 - smaller device like an iPhone and each
20:16 - size class is actually defined by two
20:19 - parameters a height and a width now the
20:22 - height can be compact or regular and the
20:25 - width can also be compact irregular so
20:28 - for instance one size class might be
20:31 - compact width and compact height another
20:34 - size class might be compact width but
20:37 - regular height and in the case where you
20:39 - don't care about size classes and you
20:41 - want to add your constraint for all of
20:43 - them it would just be any width and any
20:47 - height now let's dive back into our
20:49 - Xcode project now I can show you how we
20:51 - can add a constraint for a specific size
20:53 - class now the first thing I want to draw
20:56 - your attention to is down here beside
20:58 - the view as iPhone se you can see what
21:01 - size class this device falls under so
21:04 - this is the compact width and compact
21:08 - height the first step of this is just to
21:12 - identify which size classes you have to
21:15 - fix so we identified that iPhone 4s also
21:20 - has this problem and the size class is
21:23 - also compact width in compact height if
21:27 - we go up to iPhone 8 the problem doesn't
21:30 - exist but this device still falls under
21:33 - the same size class iPhone 8 plus this
21:38 - one's a different size class because
21:40 - it's regular width and compact height so
21:43 - we what we're going to do in order to
21:46 - fix this overlapping problem is add some
21:48 - specific constraints or variations of
21:51 - constraints to this specific size class
21:55 - so that if the user is using a device
21:58 - the iPhone se or the iPhone 4s in the
22:04 - landscape orientation these specific
22:07 - constraints that we add are going to
22:08 - take effect and they're going to correct
22:10 - that layout for them so let me show you
22:13 - how to add constraints to a specific
22:16 - size class so with the size class that
22:19 - you want to add your constraints into
22:22 - choose very four traits and then we want
22:26 - to introduce variations and that's just
22:29 - the specific constraints that I was
22:31 - talking about we want to vary them based
22:34 - on both the width and the height and
22:37 - that's going to target this specific
22:40 - compact width and compact height size
22:43 - class now this section turns blue and it
22:46 - tells you which devices fall under this
22:49 - size class and you can see that it's the
22:52 - iPhone 10s in landscape the iPhone 8 in
22:56 - landscape the iPhone se and landscape in
22:59 - the iPhone 4s and landscape so any
23:01 - specific constraints you add right now
23:03 - to this size class that's going to
23:04 - affect all of these devices in this
23:07 - orientation so just keep that in mind
23:10 - now let's take a look at what sort of
23:13 - constraints we can add in order to
23:15 - correct this layout let's click on the
23:17 - cards and button stat view so the first
23:19 - thing I think that we can do is just to
23:22 - shorten up the space between the button
23:24 - and the two cards so you can see here
23:27 - that by default we have a spacing of 30
23:30 - but we can click this little plus icon
23:33 - and add a variation based on a specific
23:38 - size class so based on the compact width
23:40 - and compact height size class let's add
23:42 - a variation so you can see that WC and
23:45 - the H
23:45 - see the signs for the comeback with in
23:47 - combat height we're gonna say when when
23:51 - we have this size class instead of 30 I
23:53 - want to do 20 okay so that's gonna fix
23:56 - the problem a little bit but I'm going
23:58 - to add a couple a couple more variations
24:03 - to completely solve the problem I think
24:06 - the next thing we want to do is take a
24:08 - look at this logo and we want to make it
24:13 - a little smaller for these size classes
24:16 - because the logo isn't isn't a
24:19 - functional part so I think I'm okay with
24:22 - making it a little smaller now we don't
24:24 - have any sort of height or width
24:26 - constraints for this logo but what we
24:29 - can do is add a height constraint for
24:31 - the local right now that will only take
24:34 - effect for this compact width and
24:37 - compact height size class and so we're
24:41 - gonna with the image highlighted we're
24:42 - going to open up this add constraints
24:44 - button and we're gonna add a height
24:46 - constraint and you can see right now it
24:49 - has a height of 67 I'm gonna change that
24:52 - to or add a height constraint of 55 and
24:56 - when I add a new constraint now it's
24:59 - going to be only specifically for this
25:02 - size class right here because this part
25:05 - is blue if this part wasn't blue and it
25:08 - was just great then any constraints I
25:10 - add just like we were doing earlier in
25:12 - this lesson applies to any width in any
25:15 - height so it's like all the size classes
25:17 - all right so let me add this height
25:19 - constraint of 55 to the logo and it's
25:22 - only gonna apply for this size class
25:23 - boom all right so this logo looks a
25:28 - little squashed now but we're gonna
25:29 - address that in a second the first thing
25:31 - I want to do is just show you the
25:34 - constraint we added and how you can tell
25:37 - that it's only applying to a specific
25:40 - size class so let's click on this height
25:43 - 55 constraint look on the right-hand
25:46 - side and you can see installed this
25:49 - means it's only applies to the compact
25:53 - width and compact height size class and
25:55 - up here it says there is
25:59 - nothing here this is really the any
26:01 - within any height size class so this is
26:03 - unchecked it's basically telling you
26:06 - that in normal circumstances this
26:10 - constraint is not installed it doesn't
26:12 - exist but on this specific size class
26:15 - it does take affected is installed so
26:18 - that's how you can tell alright so now
26:21 - we're going to address the situation or
26:23 - the problem that this logo is kind of
26:26 - squashed and if you click on it it all
26:28 - goes back down to the content mode and
26:30 - this would be a great chance for me to
26:33 - show you the different content modes so
26:34 - let me first change the background
26:37 - temporarily to blue so you can see kind
26:41 - of where the boundaries of that
26:42 - imageview are so by default set the
26:45 - scale to fill as you can see it pulls
26:48 - the image until it fills up that entire
26:51 - image view right let's check out aspect
26:55 - Phil now aspect Phil will maintain the
26:59 - aspect ratio so it doesn't stretch the
27:01 - image however it's going to start
27:04 - enlarging that image until that image
27:08 - view is completely filled and what that
27:10 - means is that some parts of your image
27:12 - might exist outside of the boundaries of
27:15 - the image view now that might be OK for
27:18 - you and it might not be it really
27:20 - depends on what sort of layout you have
27:23 - another option you can have if you don't
27:25 - want things that are falling out of your
27:27 - image view you can enable clip to bounce
27:29 - and you can see when I click on that
27:31 - parts of the logo just get clipped off
27:34 - right where the boundaries of the image
27:36 - view are and so that's what clip two
27:39 - bounds means but really the setting that
27:42 - I do want here instead is aspect fit
27:46 - right so this is going to maintain the
27:49 - aspect ratio but it's only going to
27:52 - stretch the image to the point where it
27:55 - fills the image view but doesn't exceed
27:58 - its bounds so that I think this is a
28:01 - good way to see the differences between
28:04 - those content modes so I'm going to
28:07 - choose aspect fit I'm going to choose
28:09 - clear color as the background again all
28:12 - right so here
28:13 - starting to look a little better you
28:14 - know things aren't overlapping but if
28:18 - you take a look at the bigger screen
28:20 - sizes let's say this one right here or
28:24 - the 10s there's there's another thing
28:29 - that I want to do I want to bump this
28:30 - down a little bit so I'm gonna choose
28:35 - I'm just gonna go back to the smaller
28:37 - screen sizes first just to make sure
28:39 - that Oh
28:41 - Xcode might be all right so I've got
28:45 - that internal error thing again but it's
28:48 - just something we're gonna have to deal
28:49 - with all right so I'm still varying four
28:54 - traits I'm still gonna move on I think
28:56 - this is fine
28:57 - now I'm gonna select my cards and button
29:01 - stack view I'm going to go into the size
29:03 - inspector and remember we added this
29:07 - vertical alignment conservatory vertical
29:11 - centering constraint and we added a
29:13 - constant of 22 bump it down a little bit
29:16 - well with this ice-class I'm gonna add a
29:19 - variation I'm gonna click this little
29:22 - plus icon for a compact width and
29:25 - compact height size huh
29:26 - classes I'm gonna add a variation and
29:28 - I'm gonna bump it up bump it down even
29:31 - more boom so to me that that looks a
29:35 - little more centered so for these size
29:38 - classes it's gonna do 30 below the
29:41 - center and for other ones it's gonna do
29:43 - 20 and then just double check that it
29:46 - looks okay on the other ones so we've
29:49 - got the four s SE the 8 the 10 so I'm
29:57 - going to click done varying and I think
30:02 - it's gonna look good now you can choose
30:04 - eight you can just double check let's
30:08 - take a look at the 4s let's see
30:16 - still looks good on the smaller screen
30:18 - sizes and when we go into this specific
30:21 - size class' compact within compact
30:23 - height our size class specific
30:27 - constraints and variations are jumping
30:29 - in to save the day now if you're having
30:32 - trouble putting together this layout
30:34 - make sure you grab my Xcode project and
30:36 - compare it with yours you can get it by
30:38 - clicking the card over there or checking
30:39 - the description below now I want to turn
30:41 - it over to you now that we've built this
30:44 - user interface was it harder than you
30:45 - thought it would be or it was it easier
30:47 - than you thought let me know by leaving
30:49 - a quick comment below and if you like
30:51 - this video please subscribe to my
30:53 - channel by hitting that red subscribe
30:54 - button below and make sure you click on
30:56 - that bell icon too if you want to get
30:58 - notified of all of the new lessons now
31:00 - in the next lesson we're going to jump
31:02 - into Swift programming so go ahead and
31:04 - click that thumbnail and I'll see you
31:05 - there