00:00 - hey code crew in this video you're going
00:02 - to continue building the ios notes app
00:04 - by implementing the ability to add
00:06 - update edit and remove notes if you
00:08 - haven't seen the earlier lessons i'll
00:10 - link to the playlist below and also
00:12 - on a card on the screen all right ali
00:14 - over to you
00:15 - all right now what we're going to do is
00:17 - we're going to add a function that
00:18 - allows us to add a note to our database
00:21 - and using lml5 is super easy so what
00:24 - we're going to do is we're going to make
00:25 - a new function after fetch notes
00:29 - and we can call it add note
00:34 - and this function will take in a date
00:37 - which is a string a title
00:41 - which is a string and a note
00:45 - which is a string
00:49 - and now what we're going to do is
00:52 - we're going to write alamo fire af dot
00:57 - to the funk we're going af dot request
01:04 - and we're going to add our url which is
01:08 - the same thing as the fetch row but
01:09 - we're just going to change the fetch
01:11 - to a create
01:16 - and then we're going to write a comma
01:17 - after the string and then we're going to
01:18 - write method
01:20 - is equal to post
01:23 - dot post so that tells it is a post
01:26 - request
01:28 - and the encoding url encoding dot
01:32 - h ttp body
01:36 - and now we can send in the headers so
01:38 - the header will be an array
01:41 - and it's going to have a title and the
01:44 - title will be the title we pass in
01:47 - and it's also going to have a date
01:51 - which is the date we pass in and it's
01:53 - going to have a note
01:56 - which is the note we pass in
02:00 - like that and then we can write dot
02:01 - response json and then we can put two
02:08 - curly brackets around that
02:11 - and just write response in
02:17 - like that so that should be enough and
02:19 - we should be able to actually
02:21 - send a note to the server and the
02:24 - headers are the exact same headers we
02:26 - used in postman
02:27 - when we added the headers for title date
02:29 - and no and we passed in these values
02:32 - now it's the same thing but we're just
02:34 - passing in the value the user writes
02:36 - so what i do now is if i go into my view
02:40 - controller
02:42 - if i go into my storyboard i see that i
02:46 - need a view controller for this screen
02:48 - because this screen the main screen has
02:50 - a view controller which is the file we
02:52 - have
02:52 - called the view controller but we need
02:54 - another view controller for this screen
02:57 - so what we're going to do is we're going
02:58 - to right click the folder
03:00 - and click new file and we're going to
03:02 - make it a coco touch
03:04 - class and we can just call it
03:07 - add note view controller
03:11 - and it's a sub class of
03:16 - if you just search right there ui view
03:18 - controller
03:20 - and make it language swift and that's
03:22 - fine
03:24 - and you can add it and make sure your
03:25 - target is your notes app
03:28 - so once that's done we've got a add note
03:29 - view controller we're gonna go to
03:31 - storyboard
03:32 - and what you do is you just click on the
03:34 - top bar of your second
03:37 - screen and in the identity
03:40 - button click that and your class is
03:42 - gonna be add
03:44 - note view controller so now we're able
03:47 - to
03:48 - interact with this screen using our new
03:50 - file which is add no view controller
03:52 - and if you want to make sure it works
03:54 - this print
04:01 - so once we restart our app it should say
04:03 - controller connected
04:04 - when we go to that screen so i see my
04:08 - data here
04:09 - i click add no and it says controller
04:10 - connected which means this view
04:12 - controller is connected
04:14 - now what we're going to do is we're
04:16 - actually going to add ib outlets
04:18 - from our main storyboard to the view
04:20 - controller
04:21 - so we need ib outlets for
04:24 - the text box the text field and the save
04:28 - button and delete button
04:30 - so let's import the text field
04:35 - and make sure it's an outlet and you can
04:37 - just name it title
04:39 - text field like that
04:43 - and you can import the text box just
04:45 - option drag it as well
04:47 - make sure it's outlet and you can call
04:48 - in note or
04:50 - body text view
04:56 - let's also import the save button and
04:58 - let's just call it save button
05:04 - like that
05:08 - and now we also want to add a function
05:11 - so
05:13 - drag the save button to your screen
05:14 - again but change it from an outlet to an
05:16 - action and you can just call this save
05:19 - click
05:21 - and if you want to make sure this works
05:23 - you're going to say print
05:25 - saved so once i restart my app and click
05:28 - the button it should say saved
05:31 - i go here and i click save and you
05:34 - see save down here so i know my button's
05:36 - connected
05:38 - now what we want to do is actually use
05:40 - the function we created over here
05:42 - add note and we want to pass in this
05:45 - data
05:45 - as the actual data so i'm going to go to
05:48 - my add note view controller
05:54 - and i am going to so when we click the
05:56 - save button
05:58 - what i want to do is api functions dot
06:02 - functions dot add note
06:06 - and what's the data we want to add well
06:09 - i want to add for the date
06:11 - i'll just put a string right now i'll
06:13 - just call it placeholder
06:15 - because we actually have to do a bit
06:17 - more work to get the actual date out
06:19 - but we can set up these two the title
06:21 - and the note
06:22 - well the title is just title text field
06:26 - dot
06:27 - text or the note is just
06:30 - body text view dot text
06:34 - and you can make these optionals
06:37 - actually it's going to tell us
06:39 - right here so you can either make it
06:40 - optional or force unwrap
06:42 - let's just force unwrap it for now
06:45 - okay now we're going to restart our app
06:50 - and we're going to click add note so now
06:54 - let's clear this out and say this
06:57 - is the first note from
07:00 - the iphone and in the title we can say
07:04 - this
07:05 - is the iphone's
07:08 - note now we click save
07:13 - so now we don't have any feedback but
07:16 - if we go back here and refresh our
07:19 - actual
07:20 - fetch route it should show a new note
07:24 - and it does right here
07:27 - it says this is the first note from the
07:28 - iphone this is the iphone's note
07:31 - and also if i restart my app
07:35 - i should also see my new data there so i
07:38 - restart the app and we see this the
07:40 - iphone's note here
07:41 - so now we have to add some feedback so
07:43 - we know if the note has saved or not
07:46 - because i can enter
07:50 - i can enter a new note and save it but i
07:52 - don't know if it's been saved or not
07:54 - but it's working in the background we
07:56 - can see right here
07:58 - so we'll start working on that we also
08:00 - need to implement the delete button
08:02 - and we also need to be able to edit a
08:04 - note as well
08:06 - all right so now that we've added the
08:08 - feature to add a note and all fetch all
08:10 - notes from the database
08:12 - i want to add the feature to update a
08:13 - note so when i open my app
08:16 - and i click on a note i want it to go
08:19 - into this add note screen
08:21 - but instead of having a blank screen or
08:24 - this data here that we're going to
08:26 - remove eventually
08:27 - i actually wanted to have the note
08:29 - itself so for example if i write this is
08:31 - the iphone's note and i click on it
08:34 - i want it to go into this screen and the
08:36 - title should already say this
08:39 - is the iphone's note
08:42 - and this body should be whatever i set
08:44 - in my database
08:46 - so then i can just edit it maybe so this
08:48 - is iphone's now
08:49 - updated and save that and it should
08:52 - update the note
08:54 - so the first thing we're going to do to
08:55 - do that is i'm going to go to my
08:58 - prototype cell
08:59 - and i'm going to option drag it into the
09:01 - next view controller
09:03 - just like that and now it's going to say
09:05 - selection segway and i'm going to choose
09:07 - show
09:10 - and it'll actually give you two lines
09:11 - now so the first line
09:13 - is the segway from the add note button
09:16 - to the next screen
09:17 - and now we've also added a segway when
09:19 - we click an actual table of yourself
09:22 - it'll also go to the add note screen
09:25 - so for example if i rebuild my app now
09:33 - now i can click any of the notes and it
09:35 - goes into the screen
09:36 - so the next part is i have to pass this
09:38 - data
09:39 - so for example the title and the actual
09:42 - note
09:42 - i have to pass it to this screen and
09:44 - pre-populate
09:46 - the text fields with that data so the
09:48 - first thing i'm going to do is
09:51 - go into my add note view controller and
09:54 - i'm going to declare
09:55 - a variable called note so i can just say
09:58 - var
09:58 - note
10:02 - bar note colon note
10:07 - question mark so that means there's a
10:10 - that means i've declared a note object
10:12 - and it can be no
10:14 - so i don't have to give it instantly i
10:16 - only have to pass the object
10:18 - when actually click on a note in the
10:19 - table view
10:21 - so i'm googling my view controller i
10:23 - have to pass whatever note the user
10:25 - clicked to the actual view controller
10:27 - so the way i'm going to do that is using
10:29 - a segway to pass the data
10:32 - so i'm going to write override func
10:36 - and i'm going to prepare and you see the
10:38 - first one prepare for segway ui
10:40 - storyboard segway
10:41 - just click that so i'm going to write
10:44 - let
10:45 - vc equal storyboard dot
10:48 - destination or sorry segway
10:54 - segway.destination as
10:57 - and then i'm going to give it the name
10:58 - of the view controller i'm going to
11:00 - so the view controller we're going to
11:02 - when we actually click something
11:04 - so for example
11:07 - i'm on the main screen which is the view
11:09 - controller called view controller
11:11 - and i click something and i go into this
11:14 - view controller
11:15 - which is called add note view controller
11:17 - so then i'm going to say
11:18 - as add no view controller
11:22 - now i'm going to give it an if steam i'm
11:24 - going to say if segway
11:26 - dot identifier equals
11:31 - something i want to pass some data
11:34 - so what is the identifier well if i go
11:36 - back to my main.storyboard
11:40 - if i click on the second segway so the
11:42 - segway from the table view to the add
11:44 - note screen
11:45 - if i click on that i see it has the
11:47 - identifier
11:48 - property so let me set this identifier
11:51 - to
11:55 - update note
11:58 - segway because that's what it is so it's
12:01 - a it's a segue to update a note
12:03 - so now since i've defined it as update
12:05 - note segue
12:07 - i can actually reference it in my view
12:09 - controller
12:10 - so if i write segway.identifier is equal
12:14 - to update
12:15 - note segway
12:20 - what i want to do is i want to write
12:22 - vc.note
12:23 - [Music]
12:26 - so and remember.note is the note
12:29 - property we defined
12:30 - in our view controller our add note view
12:32 - controller
12:33 - we gave it the property of note so
12:35 - that's what we're accessing
12:38 - and that is going to be equal to
12:41 - notes array
12:45 - to the notes table view dot
12:49 - for selected
12:53 - index path for selected row dot row
12:58 - just like that
13:04 - and now it gives me a force unwrap so we
13:06 - can just force unwrap it
13:08 - and now it works so what that does is
13:12 - is that if the identifier of the segway
13:14 - is update note segway
13:16 - so that means only if i'm clicking from
13:20 - a table view cell to the note add note
13:22 - view controller
13:24 - so that removes the other segue which is
13:27 - from the add note button to this add
13:30 - note view controller
13:31 - so i'm only i'm only specifying when you
13:34 - click
13:36 - so i'm only specifying when you click
13:38 - from the table view
13:40 - and i'm not specifying when you click
13:42 - from the add note
13:44 - because when i click the add note button
13:46 - i want to have this empty i don't want
13:48 - to have any pre-populated data
13:50 - but when i click from the table view i
13:53 - want it to say the data it already has
13:56 - right so for example when i click update
13:58 - i want the title here to be
14:00 - update so that's what this line does if
14:03 - segway.identifier
14:05 - is equal to update node segwit so that's
14:07 - what if segwit.identifier does
14:10 - it just specifies that i'm clicking the
14:12 - main table view
14:13 - and i'm not clicking the add no button
14:16 - and then i'm giving the next view
14:17 - controller add no
14:18 - view controller i'm passing our actual
14:21 - notes
14:21 - object so notes array is the array of
14:24 - notes we have
14:26 - and notes table view dot index path
14:29 - for selected row.row basically is the
14:32 - index
14:35 - is the index i click so for example when
14:37 - i click
14:38 - the first one it's going to pass in zero
14:41 - so that just means notes array to the
14:43 - zero
14:44 - so i want the first item in my notes
14:45 - array when i click the third one
14:49 - notes table view dot index for selected
14:51 - path row
14:53 - so it gives me the third item in my
14:54 - notes array that's all it does
14:56 - so now if i go to my add note view
14:58 - controller
15:02 - if i in the muted load i can just say
15:05 - print note like that
15:09 - or we can even do print no dot title so
15:12 - now if i restart my app
15:17 - and i click a note it should give me the
15:19 - notes title in the actual
15:21 - debug console down here so when i click
15:23 - update
15:24 - i see it says optional update so if i
15:27 - change that from
15:27 - optional to uh to required
15:32 - and rebuild my app i see when i click
15:34 - for example this is the iphone's note
15:37 - it prints out this is the iphone's note
15:40 - so now what we're going to do is we can
15:42 - save
15:45 - text field or title text field dot
15:48 - text is equal to
15:52 - note dot title
15:57 - and we can also say body text view dot
16:00 - text
16:01 - is equal to note dot
16:05 - note and let's make these
16:08 - required so now if i restart my app
16:13 - and i click for example update now it
16:16 - says updated and it has my note body
16:19 - for example when i click this is the
16:21 - iphone's note this is this is the iphone
16:23 - note and has the note body here so now i
16:26 - can edit it
16:28 - and i can save it but when i save it
16:31 - and i restart my app it doesn't save to
16:34 - the same note
16:36 - so if i restart my app
16:40 - you'll see that it didn't save the same
16:41 - note actually create a new note
16:44 - so if i write this the iphone update
16:47 - and save that and restart the app
16:54 - it says it adds a new entry instead of
16:56 - using the same entry
16:57 - and the reason that happens is because
16:59 - we're still
17:01 - making the save button add a new note
17:04 - so you see on the save click it says add
17:06 - note
17:07 - well when i click a note and i update it
17:10 - i want to use my update route we defined
17:12 - in the server
17:13 - so if we go back to our server we define
17:16 - this update route and i want to use this
17:18 - right so now what we're going to do is
17:21 - we're going to go into xcode and go to
17:23 - our api functions
17:25 - file and we're actually going to create
17:27 - a new route to update
17:29 - so i write func update note
17:34 - and it'll take in the same things it
17:36 - takes in a date
17:39 - which is a string it takes in a title
17:42 - which is a string
17:44 - it takes in a note which is a string but
17:46 - it also now takes in an
17:47 - id which is a string
17:52 - because remember we have to specify the
17:54 - id of the item we want to update
17:56 - and then we can update it
17:59 - so now i go into xcode
18:02 - and around that i'm going to write af
18:04 - dot request
18:09 - and i'm going to give it the url i can
18:11 - just copy the previous url
18:15 - and change it from create to update
18:19 - and the method will still be dot post
18:21 - because we're still
18:22 - it's still a post row and the encoding
18:26 - will also be the same
18:32 - and we can also copy the headers but we
18:34 - also have to add one more header and
18:36 - we'll do that right now
18:38 - so we copy the headers but we also add
18:41 - the
18:42 - underscore id header so
18:45 - underscore id
18:49 - or not the underscore id you can just
18:51 - call it id
18:53 - and we'll define that as id
18:57 - and the reason we write id is because
18:59 - our server is expecting something called
19:01 - id
19:03 - so what that means is the title of our
19:05 - updated note will be the title we pass
19:07 - in
19:08 - the date will be the date we pass in and
19:10 - the note will be the updated note we
19:11 - passed in
19:12 - and we're also going to pass in the up
19:14 - the id of the note we're updating
19:18 - and now what we can do is write response
19:22 - dot response json
19:28 - and with two curly brackets we can just
19:31 - say print
19:36 - response
19:43 - or we don't even need a print statement
19:45 - we can just say dot response json
19:48 - and the reason it's giving me an error
19:50 - is because i haven't written response
19:54 - in and then i can write print
19:58 - response like that so i'll know if i
20:02 - fail or not
20:03 - and for the add note as well we should
20:05 - also add
20:06 - print response so we know if it fails or
20:09 - not
20:10 - so now that i've got my update note
20:13 - working
20:14 - or my function working i want to go into
20:16 - my add note view controller
20:18 - and right now i'll change this
20:22 - and i'll actually write api functions
20:26 - dot functions dot
20:29 - update note
20:32 - and the date will be less let's just
20:35 - hard to code a date right now it's
20:37 - called placeholder
20:41 - the title will be and we can just copy
20:44 - what we had for the previous route which
20:46 - was adding a note
20:48 - but we also have to specify the id
20:52 - so the id will be note
20:56 - id and now that route works
21:00 - so now if i
21:03 - restart my app
21:06 - i see i see everything here so for
21:08 - example i click on title
21:11 - and i change this from title to
21:14 - updated title and when i click save it
21:17 - shouldn't add a new note but it should
21:19 - modify the note i had previously so i
21:22 - click save
21:25 - and i restart my app and i see updated
21:29 - title now
21:31 - so it clearly worked so i'll try one
21:32 - more time new item
21:34 - i can write new item updated and i click
21:37 - save
21:38 - and it's not going to add a new item to
21:40 - my array but it's just going to update
21:42 - that old item
21:42 - i previously had so i restart my app
21:49 - and you can see new item updated
21:52 - so that works so now i know that it
21:54 - works and i can update a note
21:56 - but now when i click add note my app
21:59 - crashes
22:00 - and the reason it crashes is because
22:04 - for example at the very beginning
22:06 - remember when we specified
22:08 - the titles text field to be the notes
22:10 - title
22:11 - and the body to be the notes body which
22:14 - allowed us for example when i click
22:16 - updated title and i rebuild my app
22:19 - because it crashed
22:23 - so for example when i click updated
22:24 - title it pre-populates the field with
22:27 - the title
22:28 - when i click add note i'm not sending
22:30 - any data
22:31 - of the note i want to pre-populate
22:34 - because when i go into my view
22:35 - controller
22:37 - i only sent the data of the note when
22:40 - it was update note segway but when i
22:43 - click the actual add note button that's
22:45 - not the same segue
22:46 - so this data isn't being sent to our
22:50 - add no view controller but we're trying
22:52 - to make our text field
22:54 - something that's nil which is why it
22:56 - crashes
22:58 - so what i can do now is create another
23:00 - variable called
23:03 - update and i'll set that by default to
23:06 - false
23:07 - like that so now what's going to happen
23:10 - is when i go into my view controller
23:13 - alright vc.update
23:17 - is equal to true all right so now i'll
23:21 - go back into my add note view controller
23:24 - and on view did load i'll say
23:28 - if update equal equal true
23:33 - then i only want to pre-populate it
23:35 - otherwise i want to leave it blank
23:41 - and same for the safe click so right now
23:44 - how do we know which one i want to do so
23:46 - how do i know if i want to save a note
23:48 - or if i want to update a note
23:51 - well in my safe click i can also say if
23:54 - update equal equal true
24:00 - i want to update my note so i'll put my
24:03 - update route
24:04 - or my update function inside
24:08 - the if statement and otherwise
24:11 - i'll put it in the else and otherwise so
24:13 - if i'm not updating
24:15 - i'm adding a note like that
24:19 - so now if i refresh my app
24:23 - i'll see that if i click update it works
24:25 - it pre-populates the field
24:27 - and but if i click add note it also
24:29 - works and it doesn't pre-populate the
24:31 - field but it gives me an empty feel
24:34 - and also we can just remove this block
24:37 - of text by going to our main storyboard
24:42 - and clicking on our text field and we
24:44 - can just make this empty
24:46 - like that and also in our text field on
24:50 - the top
24:52 - we can set some placeholders so we can
24:54 - say enter
24:55 - a title like that so now if i refresh my
24:59 - app
25:02 - i'll see that if i click any of these
25:04 - notes
25:05 - i'll get the note here and if i click
25:08 - add note i'm going to get a blank field
25:10 - so i can say another note
25:14 - and i'll type in this is another
25:17 - note and i'll save that so now if i
25:20 - restart my app
25:25 - i'll see i got this is another note and
25:28 - it says this is another note
25:30 - now i can write this as another note
25:31 - updated
25:33 - and when i save that and restart my app
25:36 - this time it'll update
25:37 - that note and we got this is another
25:39 - note updated
25:41 - so now that's working let's do a few
25:44 - more
25:44 - small fixes the first thing is
25:49 - when i click my save button
25:52 - when i click my save button i wanted to
25:55 - go back to the screen
25:57 - so right now when i click save nothing
25:58 - happens so to go back to the main screen
26:01 - when i click the save button
26:03 - in the save button i'm gonna write self
26:06 - dot navigation controller dot pop
26:10 - view controller animated true
26:14 - so what that'll do is when i click the
26:16 - save button
26:19 - it'll go from this screen back to this
26:22 - screen
26:23 - so let's run our app again
26:26 - and i click save and it goes back to
26:29 - that original screen
26:31 - so i'll click save and it goes back to
26:33 - the original screen i add a new note
26:36 - or a new note new note
26:39 - and i'll click save and it should go
26:41 - back to the main screen and it does
26:43 - and the next thing is when i go back to
26:45 - the main screen i want it to update my
26:47 - notes
26:48 - so right now i have to restart the app
26:50 - every time
26:52 - to see my new notes so the way i'm going
26:54 - to do that is by going into my view
26:56 - controller
26:58 - and right now we're actually
27:02 - right now we update the array in the
27:05 - view did load
27:06 - but there's another function called view
27:08 - will appear
27:13 - override func view will appear
27:18 - so fielded load only gets called when
27:20 - the app restarts for the first time
27:22 - so that's why the updated note i have to
27:24 - restart my app
27:25 - but view will appear it's called every
27:27 - time the view
27:29 - will appear so i click a new note i
27:31 - click save
27:32 - and the view is going to appear and
27:34 - that's when it updates this
27:36 - so in this i'll write the exact same
27:38 - functions i can just copy paste it
27:41 - so i'll just copy it and paste it in
27:43 - here so api functions.delegate we don't
27:46 - need that
27:47 - but what we do need is api functions of
27:50 - fetch notes
27:51 - and the fetch notes remember when we
27:52 - made a protocol
27:54 - it'll update our array and it'll refresh
27:57 - the
27:58 - table view so now if i restart my app
28:01 - i can see that if i write update
28:05 - new and i click save now it updates
28:08 - automatically without having to restart
28:10 - my app
28:11 - and also i can also add in my view will
28:14 - did appear so if i write override
28:18 - func the view did
28:22 - appear i can also copy this exact same
28:26 - code and just paste it here so now
28:30 - both it gets updated when the view will
28:32 - appear
28:33 - and when the view actually appears it
28:35 - gets updated last time
28:36 - just to make sure everything works
28:38 - properly
28:39 - so now we'll restart our app and you'll
28:42 - see if i write
28:44 - this is the ninth
28:51 - note and i click save
28:56 - it'll show this is the ninth note and i
28:58 - can see this is the ninth note updated
29:01 - and i click save and i'll see this ninth
29:03 - note updated
29:04 - so i don't have to restart my app
29:06 - anymore so that's pretty much it so
29:08 - we've got
29:09 - now we can add a note
29:12 - we can update a note and we fetch all
29:15 - the notes
29:16 - the last thing our server could handle
29:19 - was deleting a note
29:20 - so now let's get started on the next
29:22 - part which is being able to
29:25 - click the delete button so if i go to my
29:27 - simulator
29:28 - i click the delete button it should
29:30 - delete my note
29:32 - so when i click on any of these notes
29:35 - and i click the delete button
29:36 - i want to delete the note but when i
29:39 - click the add note i don't want to see
29:41 - the delete button
29:42 - because you can't delete something you
29:43 - haven't added
29:45 - so firstly let's deal with that part so
29:48 - what i'm going to do is i'm going to go
29:50 - in my add note view controller right
29:51 - here
29:53 - and firstly i'm going to import the
29:56 - delete button so you can work with it
29:58 - let's go into the main storyboard on one
30:00 - side and my view control on the other
30:04 - and i'll just option drag the button
30:07 - into
30:08 - the actual file and i'll just call this
30:11 - delete
30:12 - button and i'll also add a function
30:17 - so i'll change this from an outlet to an
30:19 - action
30:20 - and i'll call this delete click
30:25 - and just to make sure my delete works
30:27 - i'll write print
30:31 - deleted so when i restart my app
30:34 - i should see print deleted or i should
30:36 - see deleted when i
30:37 - click the button so i click the button
30:40 - and i see deleted so i know it's
30:41 - connected
30:42 - all right so the first thing i want to
30:44 - do is make sure
30:46 - that when i click the add note button i
30:48 - don't see the delete button
30:49 - so what i'm going to do is i'm going to
30:51 - make a view will appear just like how we
30:53 - did in the previous view controller
30:55 - so right override func view
30:59 - will appear and in here i'm going to say
31:02 - if
31:03 - update is equal to false
31:06 - so that means if we're not updating
31:08 - something which means we're adding
31:09 - something
31:11 - i want to self dot delete button
31:14 - dot is enabled is equal to false
31:20 - and self dot delete button dot title
31:24 - is equal to empty so the first
31:27 - part makes it that the button is not
31:29 - clickable
31:31 - and the second part makes it that the
31:33 - keyword delete is gone so it's just
31:35 - gonna be an empty button
31:36 - so if i restart my app now
31:40 - i'll see that when i click add note i
31:41 - don't see anything up here
31:43 - but when i click any one of the notes i
31:46 - can actually see the
31:47 - delete button so that's working now so
31:51 - the next thing i want to do
31:52 - is actually make the delete button work
31:55 - so the delete button is super easy to
31:57 - use just like how we made
32:00 - just like how we made one of these
32:01 - functions where it sends the id
32:04 - and it sends its note and the date and
32:06 - the title
32:07 - for the delete button we just need to
32:09 - send an id
32:10 - so what we can really do is just copy
32:12 - this whole function
32:14 - so i'll just copy this whole function
32:18 - and i'll paste it down here and i'll
32:20 - call this delete note
32:24 - but we don't have to specify a date a
32:26 - title or a note
32:27 - we just had to specify the id because if
32:30 - you go back into our server
32:32 - when we're deleting something all it
32:33 - takes in is an id
32:35 - and it just deletes that id so i'll just
32:38 - specify one id
32:39 - and i'll remove everything else
32:43 - just like that so now everything else is
32:47 - the same
32:48 - it's going to say af dot request it's
32:50 - going to have your url and you're going
32:52 - to change it from update or whatever you
32:53 - copied it
32:55 - to delete the method is still.post and
32:58 - the encoding is the exact same
33:00 - and the header is only one which is id
33:02 - and that's the id
33:04 - and now what we can do is we can go into
33:07 - our add note view controller
33:09 - and we can say api functions
33:12 - dot functions dot delete note and it
33:16 - takes in one id
33:18 - and the id will be note dot
33:22 - id just like that and we can actually
33:25 - make this
33:26 - force unwrap because we know we're not
33:28 - going to get a nil
33:29 - because when i go back to my simulator
33:34 - i've removed the functionality of the
33:36 - delete button when we're adding a note
33:38 - so the only time the user sees the
33:40 - delete button is when we have a note
33:42 - so when i click delete i'm always going
33:44 - to pass in a note id and it's never
33:46 - going to be no
33:47 - and that's why i can force unwrap it so
33:50 - now let's restart this and see what
33:51 - happens
33:54 - so when i click add note i don't see
33:56 - anything here that's good
33:59 - let's say i want to delete this is ninth
34:01 - note updated
34:02 - so i click delete i don't see anything
34:05 - happened here but if i go back
34:08 - i see it's been deleted so with the
34:11 - briefs i don't see anything happen in
34:12 - this screen
34:13 - is before because we forgot to pop the
34:15 - view controller
34:17 - so just like how we did in the safe
34:19 - click where we had self.navigation.pop
34:21 - view controller
34:23 - we'll copy that and we'll paste it in
34:25 - the delete button
34:27 - so now let's restart our app
34:31 - and if i click any one of these and i
34:34 - delete it
34:34 - it'll go back and it deleted the note
34:38 - so i can delete all the notes i want
34:42 - just like that so so far we've got the
34:45 - functionalities for adding a note
34:47 - so let me clear everything out
34:54 - alright so i can add a note i'll say
34:57 - this
34:58 - is the first note
35:01 - and you can add a body so this
35:04 - the first note and i can save it
35:08 - and it saves my note here and obviously
35:10 - if i restart my app it's saved in a
35:12 - database
35:14 - so it's always going to be here so this
35:17 - is the first note
35:18 - i can also update the note so i can
35:20 - write this is the first note
35:22 - that i updated
35:25 - and we'll see that i updated the note i
35:27 - can also delete the note
35:29 - and i won't see anything here the notes
35:31 - app is nearly done
35:33 - in the next lesson you're going to do
35:34 - some code organization and some styling
35:36 - now i have a question for you what do
35:38 - you think about full stack ios
35:40 - development
35:41 - is it better to have a hosted backend
35:43 - like firebase or to do it yourself like
35:45 - we've done
35:45 - in this app series let me know what you
35:47 - think by leaving a quick comment below
35:49 - and on your way down there please give
35:51 - this video a thumbs up if you enjoyed it
35:53 - and subscribe so you don't miss the next
35:54 - lesson and lastly if you want to see
35:56 - more app series like this
35:58 - and courses on other ios topics be sure
36:00 - to check out cwc plus
36:02 - i'll leave a link to it on the end
36:03 - screen and in the description below
36:05 - alright i'll see you in the next lesson