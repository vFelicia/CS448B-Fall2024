00:00 - in this lesson learn how to integrate
00:02 - the revenue cat sdk
00:03 - into your xcode project using cocoapods
00:06 - you'll also learn how to add the few
00:07 - snippets of code you'll need
00:09 - to display your in-app purchases in your
00:11 - app to let the user purchase them
00:13 - and to check the user's level of access
00:15 - hey code crew i'm chris and welcome to
00:17 - code with chris the place to be if you
00:19 - want to learn how to code and to build
00:20 - apps
00:21 - this is the fifth lesson in the revenue
00:23 - cat series if you missed the previous
00:25 - lessons please check out the playlist up
00:26 - there
00:27 - and here's where we are in our seven
00:29 - step process
00:34 - okay let's get started all right so
00:37 - continuing where we left off now we're
00:38 - going to integrate the
00:40 - revenue cat sdk now something handy to
00:43 - have
00:44 - is access to the documentation there are
00:46 - several ways to
00:47 - include the sdk into your xcode project
00:50 - one of the easiest ways is just to use
00:51 - cocoapods here
00:53 - and if you don't know what they are or
00:55 - you've never used cocoapods before
00:57 - i'll link to a video explaining what
00:59 - they are and how to install them
01:01 - so that you can take advantage of this
01:03 - installation method alternatively you
01:05 - can also use these
01:06 - other ways to do it but i'm going to
01:08 - show you in this video
01:10 - doing it through cocoapods so let's go
01:12 - ahead and open up terminal all right so
01:13 - i'm going to navigate to my desktop
01:15 - where my project folder is
01:22 - desktop revcat demo
01:25 - there we go and i'm going to type pod
01:28 - init to create my pod file
01:31 - and if i go ahead and open up that
01:34 - folder
01:35 - that should be created in just a second
01:38 - right there
01:39 - i'm going to open it up and text edit
01:42 - and then we will take a look at
01:46 - our documentation so this is what we
01:48 - need to include here so let's go ahead
01:51 - and include that there
01:54 - save it let's go back to terminal
01:59 - and type in pod install
02:04 - all right so let's go ahead
02:10 - and do that
02:13 - all right now that that's all done let's
02:15 - try this again
02:17 - pod install
02:25 - all right now we're good so what we're
02:26 - going to do is close our xcode project
02:31 - i had that preferences window open as
02:33 - well
02:34 - and now you'll notice that in the folder
02:36 - we have an xc workspace which is going
02:39 - to include
02:40 - the purchases pod so let's open up the
02:43 - workspace instead
02:45 - of the xcode project we're opening that
02:48 - now all right and your project
02:52 - should include the pods here and
02:55 - you can see and if you just press
02:57 - command b
02:58 - and build the project it should build
03:00 - successfully so just
03:01 - make sure of that all right now that
03:04 - your project built successfully the
03:05 - first thing we're going to do
03:06 - is we're going to add some ib outlets to
03:09 - the
03:10 - properties that uh sorry to the user
03:12 - interface elements that we're going to
03:14 - need to
03:14 - programmatically modify for example uh
03:17 - in this view controller we're going to
03:19 - check if the user has
03:20 - access to the pro membership if they do
03:23 - we don't want to show this button
03:25 - and instead we're going to want to show
03:27 - the tours we're
03:28 - also going to want to change this label
03:30 - here because this is prompting them to
03:32 - sign up for pro
03:34 - so in order to change the text here to
03:36 - hide the button and also
03:38 - to insert new labels into this stack
03:41 - view we're going to need
03:42 - a reference to those elements so let's
03:44 - go ahead and open up
03:45 - assistant editor and on the
03:50 - on this side here we're going to have
03:51 - the view controller that's right
03:54 - and we're going to have a reference to
03:56 - the
03:58 - the tour button now let's say
04:01 - let's call this the pro button because
04:03 - essentially it is
04:04 - going to our paywall there and this is
04:07 - the
04:08 - the tour label which we'll probably want
04:10 - to change
04:11 - into actual tours if they have pro
04:14 - access
04:15 - and we're also going to want a reference
04:17 - to this stack view here
04:20 - this outer stack view and i'm just going
04:22 - to call that stack view
04:23 - and that's for the for the purpose of
04:26 - inserting new elements into that stack
04:28 - view
04:29 - all right now on the the pro view
04:31 - controller side so let's go ahead and
04:33 - click that
04:34 - what we're going to want to do for this
04:36 - is after we fetch the products
04:39 - from the revenue cat side we're going to
04:40 - want to create a button for each
04:42 - purchasing option that we we get back
04:47 - so we're really only going to need a
04:48 - reference to this stack view here
04:51 - oops and i've accidentally renamed it
04:54 - that's okay after we connect it i'll
04:56 - probably rename so let's connect it i'm
04:58 - again just going to call this stack view
05:01 - all right now let's go back to the
05:03 - documentation for a quick second because
05:06 - there is another step that we're going
05:08 - to have to do in order to
05:10 - connect to the revenue cap platform and
05:12 - finish the
05:13 - installation so if you scroll all the
05:17 - way to the bottom
05:18 - first of all is called import purchases
05:22 - up here in the app delegate because
05:26 - we are going to initialize the sdk
05:30 - and connect to the platform by
05:32 - specifying our api key here
05:35 - and then we're also going to double
05:36 - check that we've enabled
05:38 - the in-app purchase capability so if you
05:40 - come here
05:41 - this is something that we did in the
05:42 - beginning but just double check for you
05:45 - that you have this if you don't
05:46 - just click on the plus icon here and you
05:49 - can search for
05:50 - in-app purchases uh if it's not there it
05:54 - yeah that's where it should be actually
05:56 - yeah add capabilities by clicking the
05:58 - plus
05:58 - button above all right so just double
06:00 - check you have that
06:02 - all right now we're ready to go to the
06:03 - next step
06:07 - okay so configuring purchases in the
06:10 - application did finish launching let's
06:13 - copy these two lines
06:16 - so this is going to enable
06:19 - debug logs which are really helpful when
06:21 - it comes to
06:23 - maybe you it can't fetch the products or
06:25 - can't connect to
06:26 - the platform then you'll see why in the
06:28 - debug console below
06:30 - for the sdk or for the api key you're
06:33 - going to log
06:33 - into your revenue cad account go on
06:37 - to your app and then under api keys
06:40 - you're going to see it right there so go
06:41 - ahead and copy that
06:44 - and just paste it in there and save it
06:47 - okay
06:47 - let's uh go to the pro view controller
06:50 - because
06:50 - we're going to start here in this view
06:53 - controller
06:54 - we are going to connect to the revenue
06:57 - cap platform fetch our offerings
06:59 - which has the packages which contain the
07:02 - products
07:03 - and we're going to create a button for
07:04 - each of those products and display them
07:06 - here
07:07 - we're also going to handle a button tap
07:10 - on one of those purchase buttons so that
07:12 - we can process the transaction for the
07:14 - user
07:16 - and then lastly we're going to come back
07:17 - to the view controller here
07:19 - and this is the home screen and in the
07:21 - view did load we're going to check
07:22 - the user's entitlements to make sure
07:24 - that they do have pro access
07:26 - if they do we're going to hide the pro
07:28 - button we're going to change some of
07:29 - these things to reflect
07:30 - the pro entitlement so let's go back to
07:35 - our documentation and just double check
07:38 - some of the code snippets that we're
07:39 - going to need so
07:41 - in the pro view controller i mentioned
07:43 - we're going to display our available
07:44 - products well
07:45 - that's just this code snippet right here
07:48 - right
07:49 - and if you scroll down a little bit when
07:50 - the user taps on one of those buttons
07:53 - that represents a product that they can
07:54 - buy we just process
07:57 - the purchase with this little snippet of
07:59 - code
08:01 - and then in the main view controller
08:04 - where we want to check if the user has
08:06 - the pro entitlement it's this little
08:09 - snippet of code
08:11 - right and we just have to insert our
08:14 - entitlement id right here
08:16 - which if you go back to your account and
08:18 - go under entitlements
08:20 - that's this id right here pro okay so
08:22 - let's go ahead and
08:24 - put some of these code snippets into our
08:26 - project so displaying products let's do
08:28 - that first
08:29 - so i'm going to copy this or you could
08:31 - just click that little button there
08:33 - and let's go to pro view controller in
08:36 - the view did load that this is what i'm
08:37 - going to do here
08:39 - fetch the offerings from revenue cat
08:43 - and
08:46 - create buttons for each
08:50 - product ah
08:55 - don't forget to import the purchases
08:57 - framework so that it can recognize
09:00 - uh these things now we don't have this
09:02 - show paywall
09:03 - method this is just you know your own
09:06 - code
09:06 - to show the current offerings so we
09:09 - don't have that we're going to remove
09:11 - that
09:11 - now the code we're left with let's just
09:13 - examine that
09:14 - we have a parameter called offerings
09:17 - which contains all of our offerings
09:19 - and an error parameter that we can check
09:21 - for errors
09:22 - now if we go back to what we configured
09:25 - on the revenue cap platform side
09:26 - we only have one offering so that makes
09:28 - it really easy for us
09:30 - in fact we can get
09:34 - we can get our offer from let's say
09:37 - let offer equals offerings
09:41 - dot current all right the current
09:43 - configure
09:45 - offering in the revenue cat dashboard if
09:47 - you have multiple
09:48 - then you'd have to you'd have to pick
09:50 - which one
09:52 - but since we only have one that's it so
09:54 - the next thing we need to do is get the
09:56 - packages
09:57 - within that offering if you notice here
10:00 - we do have two packages an annual and
10:02 - the monthly and
10:04 - inside each of those packages we have
10:05 - one product
10:07 - mainly the app store product right has
10:10 - the app store identifier here
10:12 - so we have again one offering
10:16 - two packages and one product in each of
10:19 - those packages
10:20 - right so coming back here we're going to
10:22 - say let packages equals
10:25 - offer dot available packages
10:30 - all right now what we're going to do is
10:32 - loop through the packages
10:33 - so i'm going to do it this way um for i
10:36 - in xero to packages dot
10:40 - count or
10:43 - yeah okay we can do that so
10:46 - we'll just put a we'll just put a guard
10:49 - statement here just to check
10:50 - that those packages aren't nil because
10:54 - uh it is an optional it might not have
10:57 - the offer might not have any packages
11:01 - so we'll say let packages not equal to
11:05 - nil
11:05 - else we're just going to return if
11:07 - there's no packages to go through
11:10 - so we can force unwrap it there and then
11:13 - we can loop through the packages
11:20 - so we're going to get a reference
11:23 - to the package let
11:27 - let's just like say p let p equals
11:31 - packages i
11:35 - uh actually this this is it isn't clear
11:37 - because we have
11:38 - uh products and packages so let's say
11:42 - let's say package and we're going to
11:45 - get a reference to the product
11:49 - so let product equal
11:52 - package dot product simple enough
11:56 - right now we're going to get some
11:57 - details for it
11:59 - the product
12:03 - title product price
12:07 - and as well as product duration because
12:09 - it's a subscription
12:11 - so this one's easy let title equals
12:15 - product dot localize title
12:20 - remember you set that stuff up in app
12:22 - store connect when you configured this
12:24 - subscription
12:27 - product dot price check this out the
12:30 - cost of the product in the local
12:31 - currency
12:32 - and that's important because you never
12:36 - know where your user is
12:37 - and let duration actually this one is
12:39 - going to have to be a var because we're
12:41 - going to have to do
12:42 - a little bit of logic to get the
12:43 - duration
12:46 - so let's check this out you see the
12:49 - product
12:50 - has a subscription period
12:53 - property which returns an sk
12:56 - product subscription period all right so
13:00 - let's take a look at the documentation
13:02 - uh just on what this class
13:04 - is it has a couple of properties
13:07 - mainly that it tells us how many
13:10 - uh how many units it is so if it's like
13:14 - one year it's going to be one if it's
13:17 - one month it's still going to be one
13:18 - right it's one unit if it's going to be
13:20 - 14 days
13:23 - it's going to be 14. and the unit
13:26 - is a type of sk product.period
13:30 - unit and this is going to describe it to
13:33 - us
13:33 - whether it's talking about days years
13:36 - months what is it so these two pieces of
13:39 - information is what we're going to need
13:41 - we're going to need to compare the unit
13:43 - with
13:44 - this this enum because this enum tells
13:47 - us
13:48 - you know we're going to need to compare
13:49 - it against the day month week or year
13:52 - i'm actually going to only compare it
13:53 - against month to year because i know we
13:55 - only have those two types of
13:56 - subscriptions
13:58 - so just to put it into practice i'm
14:02 - going to say
14:03 - let subscription period equal
14:07 - product dot subscription period
14:13 - and let
14:18 - here i'm gonna i'm gonna check using a
14:20 - switch statement so
14:23 - i'm gonna switch on the
14:27 - um not the number of units but i'm going
14:30 - to switch on the unit
14:36 - okay so case
14:40 - sk product dot period
14:44 - period unit dot month
14:49 - right so for this case i'm going to set
14:50 - duration to
14:53 - and i'm going to put the unit in there
14:56 - the unit is going to be
14:58 - subscription period.unit and i'm going
15:00 - to concatenate that with
15:03 - uh with month
15:06 - now if i had subscriptions for like two
15:08 - months or three months or four months
15:10 - then i would have to have some logic in
15:11 - here
15:12 - to write whether it should be months or
15:15 - month right plural or singular
15:17 - but since i know we only have one month
15:19 - and one year that's what we're going to
15:20 - put for now
15:21 - and of course if you want to make it
15:23 - more robust because you never know if
15:25 - you're going to add additional
15:27 - subscriptions with different periods and
15:29 - different times in the future
15:31 - you probably should
15:34 - handle that case right now but for this
15:36 - demo
15:38 - i'm not going to do that all right now
15:40 - we're going to do a year
15:41 - because i know we also have one for year
15:47 - all right and now we're going to have to
15:48 - handle the default case
15:51 - and for that we're just going to leave
15:53 - it as empty
15:58 - all right so i think yeah there's still
16:00 - going to be a ton of warnings until we
16:01 - actually use
16:03 - these variables that we're declaring
16:06 - okay so now let's
16:07 - create a button and we are going to
16:12 - uh we're going to add it
16:15 - to the view we're going to position and
16:20 - size it and that should be
16:23 - it let's see
16:28 - all right we're going to gonna force
16:30 - unwrap that
16:32 - because we know there's a subscription
16:33 - period for the product but if you're
16:35 - selling
16:36 - products that um are not subscriptions
16:39 - then
16:39 - you you might not want to do this all
16:42 - right for this demo we're only doing
16:43 - subscriptions
16:45 - all right so let's create the button
16:47 - here so we're going to say
16:49 - let button or var button equals ui
16:54 - button of type
16:58 - system i'm going to set some properties
17:00 - on it
17:01 - button dot tin color is
17:05 - white button dot background color is
17:09 - purple and we're gonna set the title
17:13 - so set title uh this is going to be a
17:16 - combination of
17:17 - the properties that or sorry the
17:19 - variables that we did up here so we're
17:20 - going to say
17:23 - i'm going to say title plus space
17:26 - plus duration
17:31 - plus light space
17:34 - plus the price for control state normal
17:38 - uh we also have to
17:43 - we're gonna have to add a tap handler
17:46 - to that and we can add that to the view
17:50 - so earlier we got a reference to the
17:53 - stack view so we're going to
17:55 - add arrange the sub view and we're going
17:58 - to put the button in there
18:01 - all right and then we're going to
18:02 - position and size it so let's create a
18:04 - constraint for
18:06 - the height
18:12 - oops and
18:15 - sort of relying on auto layout there
18:19 - the button height
18:23 - related by equal to nil
18:29 - height multiplier is one in constant is
18:31 - going to be 90.
18:33 - and then in terms of the width i'm going
18:36 - to relate this to the stack view i'm
18:37 - going to make it the same
18:40 - the same width so i'm going to go
18:44 - with is related to the stack
18:47 - view
18:51 - width and constant zero and then we're
18:54 - gonna
18:56 - add this to the button so button dot add
18:59 - constraint height and then because this
19:02 - one is related to the stack view we
19:04 - actually have to add it to the stack
19:08 - view
19:13 - all right autocomplete was sort of
19:14 - acting up but let me build this project
19:17 - and see if
19:18 - everything actually builds successfully
19:24 - all right so it looks like i made some
19:26 - typos
19:36 - myself
19:51 - uh okay so it's the price
19:56 - the price is a decimal number so we're
19:58 - actually have to get the string value
20:00 - for that
20:01 - let's take a look for our button
20:07 - well i think my xcode is acting up a
20:09 - little bit
20:11 - all right so that built successfully
20:14 - and now we're going to add a tap handler
20:18 - for that
20:19 - so why don't we create a
20:26 - tap handler here because we're going to
20:28 - need to set it as
20:30 - a button handler we're going to have to
20:32 - put that tag in front of it so
20:36 - let's call this purchase tapped
20:39 - and we are going to want the sender
20:43 - as a ui button so it passes the button
20:46 - through
20:46 - so we can check the tag and the tag is
20:49 - going to tell us which product
20:50 - the user tapped on because
20:54 - you know if we have three products for
20:55 - purchase we're going to create three
20:56 - buttons
20:57 - and each of the buttons is going to have
20:58 - a different tag which is going to
21:00 - correspond to the
21:01 - the product
21:04 - all right so here let's add that
21:07 - button dot add target
21:11 - target itself action we're going to use
21:14 - the
21:15 - at selector here
21:18 - or sorry it's the hashtag
21:21 - selector and we're going to
21:25 - purchase tapped for the event
21:30 - touch up inside
21:34 - and actually let's not forget to
21:38 - set the tag so we're going to set the
21:40 - tag
21:42 - to i which so you can remember up here
21:46 - this is that counter that is looping
21:49 - through the packages
21:50 - and how we're going to
21:54 - get a reference to that package later
21:56 - for purchase is we're going to keep
21:58 - track of
21:58 - the packages that we're looping through
22:00 - by declaring a variable up here
22:02 - so we're going to say packages available
22:07 - for purchase is equal to
22:10 - an empty array of type and what is a
22:13 - package
22:15 - maybe we can check this
22:21 - an rc package that doesn't seem
22:26 - quite quite right
22:30 - so okay here so it is of type
22:33 - purchases dot package
22:41 - all right so as we're looping through
22:43 - them
22:46 - store a reference to the package
22:50 - uh at the same index as
22:54 - we are going to tag the button with
22:57 - so we're going to say self.packages
23:01 - available for purchase dot
23:03 - append package
23:10 - all right so the first package we put in
23:11 - there will be at index zero and we're
23:13 - also going to tag that button with zero
23:15 - and then in the next iteration right the
23:18 - second package will be at index one and
23:19 - we're gonna tag the button
23:21 - with one at that point and that's how
23:23 - we're going to
23:24 - link it up what's it saying here
23:34 - all right then okay so this should work
23:37 - we should see some
23:38 - uh we should see a button
23:42 - why is it saying i've never used this
23:46 - that's not right did i okay let's build
23:49 - this just to make sure
23:50 - that okay it's succeeded because it
23:52 - seems like xcode is acting up a little
23:54 - bit
23:55 - all right so if you're using xcode 12
23:58 - and
23:59 - you're running the ios 14 simulator
24:02 - it's not going to be able to fetch the
24:03 - products from app store connect you're
24:05 - going to get an error if you try to do
24:07 - that here let me just
24:08 - show you that real quick so just so you
24:10 - see what it looks like
24:12 - and what you're going to need to do
24:14 - instead is plug in your actual device
24:16 - and and run it there so it can actually
24:20 - fetch the products
24:21 - and the reason for this is because they
24:24 - are working on some
24:26 - it might be available already actually a
24:29 - different way to test in-app purchases
24:33 - so you can see here you don't see any of
24:37 - the buttons
24:38 - right and in fact if you go down here
24:41 - it's going to say that it could not find
24:44 - the sk
24:45 - product for for these but
24:48 - if you check our app store connect these
24:50 - are the exact product ids that we have
24:52 - so that doesn't make sense but if you
24:55 - run it
24:55 - on an actual device and i'll try and
24:59 - show this to you
25:01 - so i'm going to run it on my device
25:05 - all right
25:09 - and shrink this a little bit okay so i'm
25:12 - going gonna tap on
25:14 - join pro for tours and
25:17 - it crashed
25:20 - oh yeah i know why
25:25 - this is a mistake i made here we should
25:27 - be going from
25:29 - zero to count minus one
25:32 - so if you were keen you probably spotted
25:34 - that like 15 minutes ago when i made
25:36 - that mistake
25:37 - let's try this again
25:41 - all right so now let's hit this button
25:44 - and
25:44 - sure enough we see it except that that
25:48 - looks really weird
25:49 - um sk product period unit year
25:52 - month the price looks right which is
25:55 - great
25:56 - uh the the name looks right let's just
25:58 - fix that
26:00 - unit up real quick there uh
26:03 - subscription period
26:06 - uh this should be number of units that's
26:09 - what i got wrong
26:10 - there this should be number of units
26:14 - right now let's run it again
26:22 - perfect that looks awesome now if i tap
26:26 - on this right now
26:27 - nothing is going to happen because we
26:29 - don't have anything
26:30 - in our button handler right here right
26:34 - but now we're going to copy that next
26:36 - snippet of code to process
26:38 - a purchase and it's actually even
26:39 - simpler than what we've done here
26:41 - all right so let's take a look at the
26:43 - documentation and see what that next
26:44 - snippet is
26:46 - all right for making a purchase what we
26:48 - have to do is
26:49 - pass the package into the purchase
26:52 - package
26:53 - method there so let's copy that
26:56 - and inside the purchase tapped
26:59 - why don't we paste that in there but
27:01 - first
27:02 - which package do we pass into there
27:04 - right we have to get
27:06 - that let package equals
27:11 - self.packages available for purchase
27:14 - and we're going to say sender.tag
27:19 - right because the tag stores the index
27:21 - for that package
27:23 - and down here we're just going to say
27:26 - if the entitlement is going to be in
27:29 - here we pass in the entitlement id
27:33 - go back to entitlement that idea is just
27:35 - pro
27:39 - so we're going to say if that is active
27:41 - then we're going to
27:45 - unlock the pro content now we're not
27:47 - going to unlock the pro content here
27:49 - in the pro view controller because
27:53 - it's actually in the other view
27:54 - controller where we show the the tours
27:56 - right
27:57 - so all we're going to do here is
28:00 - dismiss the pro view controller
28:05 - so we're just going to call dismiss
28:11 - right and then
28:16 - let me just build this again
28:30 - is it referring to here
28:35 - i might have accidentally put that in
28:39 - there or
28:40 - yeah they had they had that extra
28:42 - rounded bracket there
28:44 - okay what's going to happen is they're
28:46 - going to dismiss
28:47 - this pop-up
28:53 - oh audible we're going to it's going to
28:55 - dismiss this
28:58 - this pop up here right and then when it
29:00 - comes into back to here
29:03 - what we're going to do is
29:07 - in the view
29:12 - will appear we can check entitlements
29:18 - and show pro content so
29:21 - how how does that content get shown
29:24 - right if we scroll down it's get
29:26 - subscription status
29:28 - so let's copy that and let's paste that
29:31 - in there
29:32 - again our entitlement id is just pro
29:35 - so if the user is pro what we're going
29:38 - to do
29:39 - is we're going to remove the pro button
29:42 - so that they can't tap it anymore and
29:44 - we're just going to call remove from
29:46 - superview
29:48 - and we are also going to change the tour
29:52 - label
29:52 - so uh we're gonna say
29:55 - tour label dot text is equal to
30:00 - check out these recommended tours
30:04 - and then we're going to you know
30:07 - do however whatever that pro content is
30:11 - that's what we're going to show here
30:12 - and for the purpose of this demo i'm
30:14 - going to create a
30:15 - you know create a label
30:19 - for the tours so we're going to say
30:22 - let label equals
30:26 - uilabel label.txt
30:30 - equals great tour and
30:36 - we're going to insert it into the
30:39 - the stack view self dot stack view dot
30:42 - add arranged sub view
30:46 - label
30:49 - uh let's see do we have yes we need to
30:52 - import the purchases framework
30:55 - here let's command b and build that
31:00 - and i'm gonna have to
31:04 - use self there all right
31:09 - and that's all it took those three code
31:12 - snippets allowed us to display our
31:14 - in-app purchase
31:14 - products to process purchases and also
31:17 - to check the user's entitlements
31:20 - and then in the next lesson we're going
31:21 - to test it out
31:23 - as you saw in this video displaying our
31:25 - in-app purchases
31:26 - processing purchases from the user and
31:28 - checking the user's level of entitlement
31:31 - only takes a few lines of code with
31:32 - revenue cad now if you haven't gotten
31:34 - your free revenue cat account yet
31:36 - just visit cwc.to revcat5
31:40 - now i want to turn over to you now that
31:42 - you see how revenuecat works what do you
31:44 - think about it let me know by leaving a
31:46 - quick comment below
31:47 - lastly if you like this video and you
31:48 - want to see more don't forget to click
31:50 - that
31:50 - thumbs up button and hit subscribe so
31:52 - you don't miss the next lesson
31:54 - in the next lesson i'll teach you how to
31:55 - test your in-app purchase implementation
31:57 - on an actual device
31:59 - alright thanks for watching and i'll see
32:00 - you there