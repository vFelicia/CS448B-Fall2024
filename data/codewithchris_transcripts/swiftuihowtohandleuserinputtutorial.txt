00:00 - hey code crew it's Chris here with
00:01 - another swift UI tutorial now if you've
00:04 - built apps in the past you might be
00:05 - familiar with the MVC design pattern
00:08 - where M stands for the model and to put
00:10 - it in simple terms the model represents
00:13 - your apps data well in Swift UI you can
00:15 - use what are called bindings to connect
00:17 - certain parts of your view to properties
00:20 - in the model so that when the data gets
00:22 - updated the view changes automatically
00:24 - furthermore in Swift UI you can have
00:27 - what are called States and you can have
00:28 - your views react and respond according
00:31 - to different state changes so this video
00:33 - is all about how data flows from your
00:35 - app models to all of the views in your
00:38 - view hierarchy so if that sounds good
00:40 - let's get started so from the previous
00:47 - two lessons we've gotten to this point
00:49 - right here where we're displaying a list
00:51 - of data and tapping on one of the rows
00:53 - we'll actually go to a detail screen so
00:56 - if you haven't gotten to that point yet
00:57 - I highly recommend that you check out
00:59 - those two videos by clicking in the
01:01 - upper right hand corner there and that
01:03 - playlist will bring you to all of the
01:05 - videos that you need to watch
01:06 - now there is one correction I want to
01:08 - mention from the last lesson and that
01:09 - was me
01:10 - struggling to put a navigation bar title
01:13 - at the top of the list here and it turns
01:15 - out that I was putting it on the wrong
01:18 - element so instead of putting it on the
01:20 - navigation view I should have been
01:21 - putting it on the list itself now we
01:26 - were also using display mode of inline
01:28 - so if we want to follow the Apple sample
01:32 - so that's what that looks like we should
01:35 - be using large instead and that's going
01:38 - to look like this which looks a lot
01:41 - better now in this video lesson we are
01:44 - following this Apple tutorial right here
01:47 - so this is actually the third one
01:49 - handling user input but one word of
01:52 - warning is that it's really tough to
01:55 - start building off of the previous
01:58 - project we've we've done because there
02:00 - are some differences between the
02:03 - starting point of this third lesson
02:07 - versus where we left off here so I
02:10 - highly recommend that
02:12 - you go to the third lesson download the
02:14 - project files and use that starting
02:17 - point I'll show you two of the
02:18 - differences which really breaks things
02:20 - so in the project from the second lesson
02:26 - what we're missing
02:28 - in terms of the landmark structure is we
02:32 - don't have a favourites property and
02:34 - that's fine I mean you can add the
02:36 - favorites property because this video is
02:39 - going to be about toggling favorites and
02:41 - keeping a favorites list but the bigger
02:43 - problem actually is that the favorites
02:45 - data doesn't exist in our JSON file so
02:49 - you know that's that's basically the
02:52 - killer right there whereas if you
02:54 - download the starting-point project from
02:56 - that apple tutorial if you check in the
02:59 - landmark data JSON file you'll see that
03:02 - we have some extra pieces of data for
03:04 - each location his favorite is featured
03:07 - which I assumed is going to be used in
03:09 - the future because it wasn't used in
03:11 - this particular lesson but we do need is
03:14 - favorite and inside the landmark here we
03:20 - do have this is favorite boolean
03:23 - property so yeah definitely don't build
03:28 - off of your previous project instead
03:30 - download their fresh starting point and
03:36 - they never really mention that they
03:39 - never really tell you that that's what
03:40 - you have to do because these sort of go
03:43 - in order so the assumption is that you
03:46 - can kind of build off your old project
03:47 - but that's not really the case all right
03:54 - all right so the first thing we're going
03:56 - to want to do is to go into our landmark
03:59 - row and we are going to add a little
04:03 - star beside each landmark depending on
04:08 - whether or not it's a favorite so from
04:11 - the JSON data some of them are favorites
04:13 - some of them are not and what we're
04:16 - going to do let's just wait for this
04:18 - preview what we're going to do
04:21 - like there's missing a spacer here this
04:24 - is the starting project for the third
04:29 - tutorial we're gonna put a star at the
04:31 - end of the name depending on whether
04:33 - it's a favorite or not and actually if
04:36 - it is a favorite it's going to be a
04:37 - yellow star so since the landmark
04:42 - actually has a let me see if I can jump
04:48 - to this class name here
04:51 - sorry structure they haven't is favorite
04:55 - property we can check that see if it's
04:57 - true if it's true then we're going to
04:59 - show a star if it's not then we're gonna
05:01 - leave it so you can actually use an if
05:04 - statement here so that you can
05:05 - conditionally show views or not so we
05:09 - can say if landmark
05:12 - is favorite then we're gonna do
05:17 - something we're gonna show an extra
05:19 - image and there are now system icons so
05:24 - this one is called star dot fill and
05:33 - that's going to be a star that you see
05:36 - right there now we can change the color
05:38 - of that and we can also change the size
05:39 - because these system icons are in vector
05:42 - format scaling them up or down isn't
05:44 - going to be a problem in terms of the
05:46 - quality so we are going to say that
05:52 - foreground color is yellow and
05:58 - furthermore we are going to set the
06:01 - scale to medium all right so let's wait
06:07 - for that to update cool now what we've
06:10 - done here is merely display the star if
06:12 - it's a favorite you can't actually tap
06:14 - on it to toggle it on or off that's for
06:16 - later on in this video now what we're
06:19 - going to do is jump over to landmark
06:20 - list and we are going to add a toggle to
06:24 - toggle the list of whether to show only
06:27 - favorites or all places so let's go
06:29 - ahead and open up our file navigator and
06:32 - go into landmark list
06:34 - this is the perfect time to introduce
06:36 - state now state is either a single value
06:41 - or a set of values that can change and
06:43 - then you can have your view listen to
06:46 - that that state and if that state
06:49 - changes your view can automatically
06:51 - update and change accordingly so the
06:55 - perfect state for us to add actually is
06:57 - whether or not we should be showing
06:59 - favorites only so the way we add that
07:03 - state is by declaring a property and
07:05 - then putting a special keyword in front
07:08 - of it called state so let me show you
07:09 - what that looks like
07:11 - first I'm gonna declare a property
07:13 - called show favorites only and I'm gonna
07:16 - initially set it to false and then right
07:18 - in front of it I don't need that much
07:21 - space I am going to use this declaration
07:26 - here a persistent value of a given type
07:29 - through which a view reads and monitors
07:31 - the value so that's exactly what we need
07:34 - now I'm gonna hit this resume button on
07:38 - the preview nothing changes because
07:41 - we've merely declared the state and
07:43 - we've set it to false but we haven't
07:45 - added any conditional statements in here
07:49 - to change according to that state so
07:53 - that's what we're going to do right now
07:57 - inside right here so inside this list
08:02 - for the landmark data for every single
08:05 - landmark right now we are creating a
08:07 - navigation button and inside there is a
08:11 - landmark row and that basically means
08:13 - we're displaying every single row now
08:16 - let's say if the show favorites only
08:19 - property here is true then we wouldn't
08:25 - want to show every single row right we'd
08:26 - only want to show the rows which are
08:29 - favorites so we can add that statement
08:32 - right here check if we should display
08:37 - every single row so first of all let's
08:43 - consider the case where show favorites
08:46 - is false
08:47 - so if show favorites only so this is
08:54 - basically checking if it's false so if
08:59 - it's false right then we basically want
09:03 - to show everything so this still makes
09:06 - sense
09:07 - oops right here I'm missing something
09:11 - if you use the self keyword there all
09:14 - right so basically I have an if
09:16 - statement saying that if show favorites
09:18 - only is false then I should show the
09:21 - button however if show favorites only is
09:26 - true meaning that I only want to see
09:29 - favorites then I have to consider only
09:32 - showing the row if the landmark is a
09:36 - favorite right so I can use an or
09:38 - statement here and I can check or
09:43 - landmark is favorite let me see come on
09:50 - autocomplete landmark is favorite I
09:55 - think this was it let me see yeah now I
10:01 - want to revisit this if statement
10:02 - because I know for a beginner this sort
10:04 - of logic sometimes they get hung up on
10:07 - and so I want to show you that this is
10:10 - basically a shortened way to say
10:12 - something like this so if show favorites
10:17 - only is false or self thought show
10:27 - favorites only is equal to true and
10:31 - landmark is a favorite oops so
10:39 - that might be a little easier to
10:41 - understand if you're not used to writing
10:44 - conditions right so only show the row if
10:50 - favorites are false right meaning show
10:52 - everything or if favorites or if you
10:56 - only want to show favorites and this
10:58 - Latin mark is a favorite so that's the
11:00 - more verbose way to write it both will
11:04 - get you the same thing so let's see what
11:07 - we get over here so if we flip this to
11:11 - true let's see what we get so as
11:18 - expected when we toggle that state
11:21 - property show favorites only to true in
11:24 - our list we only see landmarks which are
11:26 - marked as favorite now we should
11:29 - probably expose some sort of toggle
11:31 - switch to let the user change that state
11:35 - from the user interface right and what
11:37 - we can do is we can make the first row
11:39 - of this list the actual toggle switch
11:42 - now the only problem is with the way
11:45 - that we've done it here by just feeding
11:47 - the collection of data into the list and
11:50 - it's just showing a row for each item in
11:54 - that data we aren't able to change up
11:59 - the first row to what we want so we are
12:02 - going to have to actually just create a
12:04 - normal list and then inside that normal
12:08 - list we're going to set the first row as
12:09 - the toggle switch and then the
12:11 - subsequent rows as all of the landmarks
12:14 - so what I'm going to do here is I'm just
12:19 - going to create some space here I'm
12:21 - gonna create a brand new list and I'm
12:25 - going to first of all create a toggle so
12:28 - this is a view which is kind of like the
12:32 - UI switch if you remember back in UI kit
12:35 - if you've ever learned the old way of
12:38 - doing things so what we have to do is
12:42 - specify a binding now this is really
12:45 - cool because we can bind the state of
12:48 - this switch to the state variable so in
12:52 - order to
12:52 - specify of binding you use this special
12:55 - character you use the dollar sign here
12:57 - and then you write show favorites only
12:59 - and just like that the state of this
13:02 - toggle is now bound to show favorites
13:06 - only and then the label is just going to
13:08 - be a text view which we can show we can
13:12 - hit enter here and then we can create a
13:15 - new text view and say show favorites
13:20 - only and this preview is still gonna be
13:25 - broken right now actually it's not so
13:27 - this is actually a combination of two
13:30 - lists see we've got these two here but
13:33 - I'm actually going to migrate I'm gonna
13:36 - delete this in just a second I'm gonna
13:37 - migrate this code into this new list
13:39 - that I'm creating
13:40 - so this first row is the toggle sub
13:48 - sequent rows are the landmarks so what
13:53 - we're going to do here is we're going to
13:54 - use a for each statement to loop through
13:56 - the landmark data collection and then
13:59 - for each of those landmarks we're going
14:02 - to run the same code here we're
14:04 - basically gonna check if its favorites
14:06 - only or if if it's not favorites only
14:08 - and is the landmark a favorite or not
14:10 - and then you know depending on these
14:11 - different conditions we're gonna show
14:13 - the landmark row or not
14:15 - so one we're not gonna change any of
14:17 - this logic we're just changing up how
14:20 - how this is rendered so let's declare a
14:23 - for each statement here and we're going
14:27 - to pass in the landmark data and for
14:33 - each of these landmarks so we're gonna
14:35 - specify a parameter here for landmark in
14:40 - we're basically gonna take this chunk of
14:45 - code and move it in here right and then
14:49 - we can just delete this list is our old
14:53 - list this navigation bar title will
14:56 - still keep but we're gonna attach it to
14:57 - this new list here so that's this tag
15:01 - right here getting a lot nested
15:05 - curly brackets now so what do we have is
15:07 - this working
15:08 - ah there we go cool so you can see that
15:12 - there are no gaps in between the
15:14 - favourites now if I toggle this off
15:16 - let's change it to a live preview so we
15:19 - can actually use this so there you can
15:24 - see all those favourites
15:26 - sorry all of the landmarks and when you
15:28 - toggle this on you only see the
15:30 - favourites now it's great that we have a
15:32 - state property to determine whether to
15:35 - show all favorites or not but we're
15:37 - missing another crucial piece of the
15:38 - puzzle which is to allow the user to
15:40 - toggle the favorite status of each
15:43 - individual landmark now even if we coded
15:46 - that functionality right now we would
15:49 - still have to keep that data somewhere
15:51 - you know that list of favorite places
15:53 - so rather than including that data in
15:57 - this view we should follow best
15:59 - practices which is to separate views and
16:03 - data just so it's easier to maintain and
16:05 - it's just a good practice to do this so
16:08 - what we're going to do is we're going to
16:09 - create a model object that is going to
16:12 - contain whether or not we should show
16:14 - favorites only we're going to move this
16:17 - state property into that model and we're
16:20 - also going to keep the list of the users
16:22 - favorites in that model objects so that
16:25 - model is going to have all of the data
16:27 - to power this landmark list and also the
16:30 - landmark detail because that details
16:33 - screen is where the user is going to be
16:35 - able to set whether that landmark is a
16:38 - favorite or not so let's take a look at
16:40 - how the data flows from the model into
16:42 - the views so we're going to create a new
16:45 - class that is going to represent the
16:47 - model for our views now in this class
16:50 - we're going to keep track of two things
16:52 - the first thing is whether or not the
16:55 - user wants to show favorites only now I
16:58 - know we had that state property inside
17:00 - the landmark list to keep track of this
17:02 - but we're going to move this property
17:04 - into this model class the second thing
17:07 - we're going to keep track of in this new
17:09 - model class is the list of the users
17:11 - favorites now this is not any old model
17:14 - class because we're going to use some
17:16 - special Swift UI
17:18 - check to make sure that these values
17:20 - flow from the model to the views
17:22 - automatically and we're gonna have to do
17:25 - a couple of different things one of them
17:26 - is that we have to make this model class
17:28 - conform to the bindable
17:30 - object protocol and this is going to
17:32 - allow us to sort of attach this model as
17:36 - the data for those views second of all
17:39 - we're going to have what's called a
17:40 - publisher in this final class and we're
17:43 - going to have our views as subscribers
17:46 - to this model so that when there are
17:48 - changes to the model inside this data
17:50 - it's going to publish those changes and
17:53 - notify all of its subscribers namely our
17:56 - landmark list and our landmark detail
17:58 - views and that's going to cause them to
18:00 - react and update their views accordingly
18:02 - now this whole publisher subscriber
18:05 - pattern is part of the new combined
18:07 - framework alright so now let's jump back
18:10 - into Xcode and let me show you how this
18:11 - all works alright so let's go ahead and
18:13 - create our model class so I'm going to
18:17 - create it in this models group right
18:18 - here and we are going to choose Swift
18:22 - file and I'm going to call this user
18:25 - data all right so we have to import
18:30 - Swift UI so we can use that bindable
18:34 - object protocol that I was telling you
18:37 - about and we also have to import the
18:39 - combined framework because that's gonna
18:41 - have that publisher subscriber stuff I
18:43 - was telling you about so we are going to
18:46 - have to create a new user data class in
18:50 - here and we are also going to make it
18:53 - conform to bindable object now let's
18:58 - take a look at this class right here so
19:02 - I'm going to just pull up the developer
19:05 - documentation I want to show you some
19:07 - stuff Oh actually I had it already open
19:09 - here so bindable object an object that
19:13 - serves as the views model that's exactly
19:16 - what we want but down here I want to
19:19 - show you something this is a required
19:21 - property here did change and what this
19:27 - property references is a publisher
19:30 - object
19:32 - now a publisher I told you before admits
19:35 - an event whenever the object changes
19:38 - right so we have to declare a property
19:43 - called did change right and then we have
19:45 - to assign that a publisher type object
19:50 - so let's do that I'm going to say equals
19:53 - and let's go back here
19:55 - so let's now jump into the what do I
20:01 - want to show you here in the combined
20:05 - framework I'm gonna show you publisher
20:08 - here specifically there are a couple of
20:13 - different types all right let's start
20:19 - with this so a publisher declares the
20:22 - type that can transmit a sequence of
20:24 - values over time right so that's kind of
20:27 - what's gonna happen here so we're gonna
20:28 - have this publisher it referenced by did
20:31 - change and then we're going to have our
20:33 - properties for the show favorites only
20:36 - and we're going to have our landmarks
20:38 - right here and if any of that data
20:40 - changes we're going to call that
20:42 - publisher and make it publish the new
20:45 - data essentially so there is a specific
20:50 - publisher type that we want to use so
20:54 - I'm trying to find it here so actually
20:57 - scrolling a bit farther down what we
20:59 - want is something called a subject and
21:01 - it's a type of publisher here a
21:04 - publisher that exposes a method for
21:06 - outside callers to publish elements and
21:09 - if you read this overview down here a
21:12 - subject is a publisher that you can use
21:14 - to inject values into a stream by
21:17 - calling its send method so this send
21:20 - method is really important because when
21:22 - some data in our model class is going to
21:24 - change we're basically going to call the
21:27 - publisher call it send method and send
21:29 - along the new data so which subject do
21:33 - we want to use because subject is just
21:35 - the protocol the one that I learned from
21:37 - the Apple tutorials is this pass-through
21:40 - subject so they were using this one here
21:43 - and
21:45 - that passes along values and completion
21:48 - so I'm going to show you how to use this
21:50 - one right here and notice that there is
21:53 - output and failure so I want to talk to
21:58 - you about what that is
22:00 - I mean digging through this
22:03 - documentation isn't always that easy and
22:07 - I don't remember where I read it but
22:09 - basically I can explain it to you
22:11 - for output you basically specify the
22:13 - type of data that is going to be sent
22:16 - through and failure is where you can
22:18 - send through errors if it cannot fail
22:22 - then you just put never in there so in
22:26 - here we are going to create a new pass
22:29 - through subject and the type of data
22:32 - that we are well that the publisher is
22:34 - going to be sending through is user data
22:37 - and we are going to say never for the
22:42 - failure because it doesn't fail and then
22:44 - we are just going to use this the
22:46 - parentheses to create a new instance of
22:49 - the pass through subject all right so we
22:51 - can actually get rid of this here as the
22:55 - type so there it is so hopefully yeah
22:59 - all right that's cool yeah so now we're
23:03 - gonna have our properties to keep track
23:05 - of is show only favorites and landmarks
23:15 - so this property is just going to be a
23:18 - boolean property show only favorites and
23:23 - we'll set it to false to begin with and
23:25 - this one we are going to call it
23:28 - landmarks and we're just going to set it
23:30 - to landmark data it's basically the
23:33 - array of landmarks parsed from the JSON
23:35 - file so now how do we detect for changes
23:38 - in these properties well that's nothing
23:40 - new we had this before we can just
23:42 - handle or actually yeah handle the
23:48 - didset case here and whenever this
23:51 - property gets changed basically the code
23:53 - in here is going to fire and what do we
23:55 - want to do in here well we want to call
23:57 - our publisher
23:58 - remember that send method I showed you
24:00 - and we basically want to send across the
24:04 - user data object itself so we're going
24:06 - to do the same thing here we're going to
24:08 - handle did set and we are going to call
24:11 - our publisher and we are going to send
24:15 - it this user data so now whoever is
24:19 - subscribed to this publisher is going to
24:21 - get notified now the next step is going
24:23 - to be binding this model object to our
24:26 - landmark ListView so let's go into the
24:28 - landmark list right now and we're
24:32 - actually going to let me just go editor
24:38 - only for now we're going to get rid of
24:40 - this show favorites only state property
24:43 - because remember we've moved this into
24:45 - the user data as a property in our model
24:50 - so we're actually going to get rid of
24:53 - this line here now what we want to do is
24:56 - we want to actually bind this model to
25:00 - this landmark list and the way we do
25:02 - that is first we need to create a
25:04 - property here that has this special
25:07 - modifier called environment object and
25:10 - this environment object property is
25:12 - going to have a reference to our user
25:14 - data or our model so we're gonna well
25:20 - let's actually let's create that
25:22 - property first so I'll call this user
25:23 - data it is a data type of user data and
25:28 - we're gonna put this special modifier on
25:33 - it we're gonna say that this property is
25:35 - going to hold the environment object or
25:37 - in other words just the model for this
25:40 - view so before I go ahead and tell you
25:42 - how we're going to set this user data
25:44 - property let's fix some of the errors
25:46 - that have appeared here because this
25:48 - toggle is still bound to that state
25:50 - property that we just deleted we need to
25:54 - change this so that it references the
25:57 - user data show favorites only property
26:00 - so what we do instead is we still use
26:05 - this dollar sign here to indicate that
26:09 - we want to bind this toggle to a
26:11 - property but it's going to
26:13 - now found to the user data show only
26:17 - favourites property and I think I worded
26:20 - that incorrectly I'm gonna change it to
26:24 - show favorites only so let's go back to
26:27 - landmark list here and in here
26:31 - user data show favorites show I guess I
26:37 - didn't save the file because I changed
26:39 - that to show favorites only so this
26:42 - would be show favorites only so now this
26:48 - is bound to the user data show favorites
26:51 - only property and same thing down here
26:53 - we have this condition where we check
26:56 - should we show that row and this is
26:59 - referencing a property that no longer
27:01 - exists so we are going to change this to
27:05 - user data dot show favorites only and
27:09 - this one to user data dot show favorites
27:14 - only alright so now we go back to the
27:17 - original question of where do we set the
27:20 - model object to this user data property
27:23 - well you don't explicitly have to assign
27:26 - it to this property instead what you do
27:29 - is you call a special modifier when you
27:34 - create a new landmark ListView you call
27:37 - the environment object modifier and then
27:39 - you pass in an instance of the model so
27:42 - let me show you what I mean we're going
27:44 - to go into the scene delegate because
27:45 - remember in here this is this specifies
27:50 - the route view right and right now we're
27:53 - creating a new landmark list so this is
27:55 - actually where we're going to set the
27:57 - environment environment object here and
28:03 - we're going to set it to a new instance
28:07 - of user data oops
28:09 - make sure that I don't mess up the
28:11 - brackets there all right so just by
28:14 - setting this special modifier on the
28:17 - landmark list that is going to assign
28:20 - this user data object
28:24 - to this environment object user data
28:27 - property next up we have to consider
28:29 - that our user data also contains the
28:33 - list of landmarks now earlier I said
28:36 - that this was the list of the users
28:38 - favorite landmarks but I was mistaken
28:41 - this list is actually the entire list of
28:44 - landmarks now the reason why we don't
28:48 - access the data directly from the viel
28:51 - is because remember that separation we
28:54 - want the model to handle all of the data
28:56 - and be because the source of that data
28:59 - and the view to just be responsible for
29:01 - views we don't want the view accessing
29:04 - the the JSON file directly so we're
29:08 - going to go to the landmark list here
29:09 - and here we're displaying the rows and
29:13 - we are passing in or rather we're
29:16 - looping through the landmark data
29:17 - collection now instead of having this
29:22 - view directly access this this
29:26 - collection of data we want to access the
29:30 - user data dot landmarks and that should
29:36 - be it for here so now the next step is
29:38 - to go into our landmark detail view and
29:41 - add a button so that users can toggle
29:43 - whether that landmark is going to be a
29:46 - favorite or not and that data is going
29:48 - to be written back to the user data
29:51 - model all right so we're always writing
29:54 - back to that user data model and we're
29:56 - always reading the data from that user
29:58 - data model so that model object is going
30:01 - to be the source of the data that powers
30:03 - all of the views here that way in the
30:05 - landmark detail view when the user taps
30:08 - on the favorites button let's say that
30:11 - they set that landmark as a favorite
30:13 - that change is going to be written to
30:15 - the model and then the model as the
30:17 - publisher is going to publish that
30:18 - change to all of its subscribers and
30:20 - those subscribers will update their
30:22 - views according to that new landmark
30:25 - that is a favorite so let's go into the
30:28 - landmark detail so it's also got to have
30:32 - a user data property because it's going
30:36 - to be writing and reading
30:37 - from that model right so same thing goes
30:40 - here we're going to declare an
30:42 - environment object called user data it's
30:47 - going to be a type of user data now let
30:50 - before you might think that hey when we
30:54 - create that landmark detail or is that
30:59 - right here right when we create this
31:02 - landmark detail do we have to specify
31:05 - that modifier and add the environment
31:08 - object modifier and then pass it in the
31:11 - user data to it we actually don't need
31:13 - to do this because what happens is that
31:17 - when we bind this model to let landmark
31:22 - list as an environment object all of the
31:27 - views inside of this view like as in all
31:30 - of the sub views so you know landmark
31:34 - detail landmark row these are all sub
31:35 - views because landmark list contains
31:39 - them all of these views automatically
31:42 - get that as their environment object as
31:45 - well so simply in the landmark details
31:48 - simply by having this property
31:50 - environment object user data here it's
31:54 - automatically going to be set and it's
31:56 - gonna be set to the same thing as what
31:59 - landmark list has up here so let's go
32:01 - into the landmark detail view now and
32:04 - add that button so since we're gonna add
32:06 - it beside the landmark name I'm going to
32:09 - create a new H stack horizontal stack
32:14 - actually I'm not going to need to
32:15 - specify any sort of alignment or
32:17 - anything like that and I am going to put
32:20 - that landmark name in there and I'm also
32:24 - going to put a tap a button beside it
32:27 - and this is going to just simply be a
32:29 - star that is they're essentially gonna
32:33 - toggle it if it's a favorite already
32:35 - it's gonna be filled and then when they
32:37 - tap on it it's gonna unfill it and
32:39 - unfavorite it and vice versa if it was
32:44 - not a favorite before so I'm going to
32:46 - create a new button and you have to
32:48 - specify two parameters the first one is
32:50 - the action
32:50 - what's gonna happen when the user taps
32:52 - on it well we basically want to toggle
32:55 - the favorite status in the user data
32:57 - model and what the label is the label is
33:00 - what the user sees is it a piece of text
33:03 - is it an image so what does the button
33:06 - look like the first thing I'm going to
33:07 - fill is the action here so lets us think
33:11 - about what we want to do for the code
33:14 - essentially we want to update the is
33:19 - favorite property of this landmark in
33:25 - the user data model landmarks array so
33:35 - we're going to need to access this array
33:40 - right here right
33:43 - find out which landmark the user is
33:46 - looking at and for that we're going to
33:49 - need to find the index of this landmark
33:52 - inside that array and then we're gonna
33:54 - toggle the is favorite of property so
33:58 - user data about landmarks and we're
34:03 - gonna have to specify some index we need
34:05 - to look for that so I'm just gonna skip
34:08 - that for now or maybe it's not gonna let
34:10 - me right maybe I have to do that the is
34:16 - favorite property and we're simply going
34:18 - to toggle it and that's just gonna flip
34:20 - it if it's true it's gonna flip it to
34:22 - false and if it's false it's gonna flip
34:24 - it to truth now right here I have 0 and
34:27 - this is literally the first landmark in
34:29 - the list of landmarks but I can't leave
34:32 - this as 0 because then I would be
34:35 - toggling the favorite status of the
34:37 - first landmark regardless of which
34:39 - landmark the user is looking at so what
34:43 - I actually need to do is look for the
34:47 - index of the landmark that the user is
34:50 - currently looking at and so we need to
34:52 - search through this array and find out
34:54 - which index this particular landmark
34:57 - that the user was looking at is now I
35:01 - could do that search inside hee
35:04 - it creates some space and I can call a
35:08 - method on the array and look for the
35:09 - first index of this landmark inside that
35:12 - array but then I'd have to also do that
35:15 - again inside the label because I need to
35:18 - access that index again so I don't want
35:21 - to write that code multiple times in
35:23 - different places instead what we can do
35:26 - to make it a little more efficient is
35:28 - just have a computed property up here
35:31 - called landmark index and mark index and
35:39 - this is going to be an integer type and
35:42 - it's going to be a computed property so
35:44 - what we're going to do here is we're
35:46 - going to access the the landmarks array
35:50 - of the user data we're going to call a
35:53 - method called
35:54 - first index and it's going to return the
35:57 - first index that matches the condition
36:00 - we're going to put in here so it's
36:01 - almost like a query we're going to query
36:04 - by matching the ID of this particular
36:06 - landmark of the landmark that the user
36:09 - is viewing against the IDS of the list
36:13 - of landmarks here and it's going to
36:14 - return the first index of where that
36:17 - condition is true so in here we're going
36:19 - to specify that by specifying a simple
36:25 - closure here and we're going to use this
36:28 - sorry this wildcard and we're just going
36:32 - to compare the ID of the elements inside
36:39 - the array versus the ID of this landmark
36:42 - right here that the user is currently
36:45 - looking at and since this returns an
36:49 - optional integer so it could be could be
36:53 - nil but we are just going to force and
36:56 - wrap it and return that it shouldn't be
37:00 - a problem because this landmark was
37:02 - originally from that list and there's
37:05 - nowhere in this demo app where we're
37:07 - removing landmarks from that list so it
37:08 - should be okay hopefully fingers crossed
37:11 - all right so now back in this button
37:15 - instead of zero
37:16 - I can say self-thought landmark index
37:20 - now as for the label of the button we're
37:23 - gonna have two options here if it is a
37:25 - favorite then we're gonna show a colored
37:28 - yellow star but if it's not a favorite
37:31 - then we're gonna show an empty star so
37:33 - let's open up this closure here and
37:35 - we're gonna use an if statement if user
37:38 - data dot landmarks we're gonna pass self
37:42 - dot landmark index and you see this is
37:44 - where we saved ourselves from having
37:46 - duplicate code because we need to have
37:50 - this index again we're gonna just check
37:53 - if it's a favorite you know if it is a
37:55 - favorite and you just make some more
37:58 - space so it's easier to read now if it
38:00 - is a favorite then we're going to return
38:02 - an image which is going to be a system
38:06 - image and we're going to use that same
38:08 - star icon we used before so start off
38:11 - fill and we're gonna color the
38:14 - foreground yellow color so that's going
38:18 - to be representing a favorite otherwise
38:22 - we're going to return an image with the
38:26 - system name just start and it's not
38:29 - filled it's gonna be an empty start and
38:31 - we're gonna make that that one grey
38:38 - alright so now let's try previewing this
38:50 - all right so it looks like I have some
38:52 - errors here okay self try again cannot
39:00 - prove it in this file landmarks may have
39:03 - crashed all right let me see what's
39:05 - wrong here all right so I'm back and it
39:08 - took me a little while to figure out
39:10 - what was going on and why my preview was
39:13 - crashing and when I click this button
39:16 - it's not really helpful it says no
39:18 - underlying error but yet there was an
39:21 - error because they can't actually
39:22 - preview my file and so I was just
39:25 - double-checking my syntax and then it
39:28 - kind of dawned on me what the problem
39:31 - was and it turned out to be actually the
39:33 - case so let me go back to the seemed
39:36 - outlet and you know how I told you about
39:40 - how inside the landmark list when we
39:43 - created here and we set the environment
39:46 - object modifier we pass in a new
39:48 - instance of user data and then that
39:51 - automatically will set this guy right
39:55 - and then it will also automatically sit
39:59 - this property in the landmark detail now
40:01 - that's all true I didn't get that wrong
40:04 - the only problem is this preview if you
40:08 - remember is being generated from this
40:11 - second structure right from here and the
40:16 - problem is that there is no environment
40:19 - object binding on the preview so in here
40:24 - in landmark list when I create a new
40:32 - landmark list there is no environment
40:35 - object binding here so what it can do is
40:40 - it doesn't look like
40:48 - I don't want to preview on all of these
40:50 - different devices
40:52 - no thank you so here I can pass on that
41:02 - all right in my preview and that's gonna
41:05 - be able to show me something however in
41:09 - my landmark detail let's see because
41:14 - this this preview controls what I'm
41:17 - seeing here right so it doesn't
41:18 - necessarily translate from that landmark
41:21 - ListView so for this and only for the
41:25 - preview I'm gonna have to set the
41:28 - environment data for my preview landmark
41:33 - detail view so then like in this case it
41:36 - works for the preview at least so I can
41:43 - toggle that on and off and let's say I
41:47 - toggle it off can I go back no you know
41:51 - what I'm gonna have to do is I'm going
41:53 - to have to preview the land like list
41:57 - instead and I'm gonna have to just make
42:06 - this a live preview and let's double
42:13 - check oh it's still going alright there
42:19 - we go so I can toggle this I can drill
42:23 - into Turtle Rock and I can turn this off
42:25 - and then go back and see it's no longer
42:29 - a favorite so when I choose show
42:32 - favorites Turtle Rock doesn't show
42:34 - anymore so let's choose Rainbow Bay and
42:37 - let's go ahead and set that as a
42:40 - favorite and there you go so just to
42:46 - just to reiterate what the error was in
42:49 - case you don't even get it is that when
42:54 - you're inside landmark detail let's say
42:56 - you're just working on this view right
42:58 - what you see on the right hand side
43:01 - right here
43:02 - is created from this structure and so
43:06 - all we're doing in terms of this piece
43:09 - of code is creating a new landmark
43:12 - detailed view and then passing in Turtle
43:15 - Rock which is the first element of the
43:17 - landmark data so because we're looking
43:21 - at this independently just this slice
43:26 - there there was no chance to set this
43:30 - environment object
43:31 - you know the scene delegate doesn't get
43:33 - run landmark lists doesn't get run
43:36 - there's nowhere where this was set so
43:38 - that's why for this preview we have to
43:40 - set it right here when we're looking at
43:45 - the landmark list for this preview right
43:49 - when we create this landmark list and
43:53 - then we set the environment object here
43:56 - this landmark list when we're playing
43:59 - around with this preview this landmark
44:01 - list creates those landmark details and
44:03 - stuff like that so that's why that
44:06 - environment object gets passed into the
44:08 - landmark details that is created from
44:11 - this preview right because this preview
44:13 - is being generated from this piece of
44:16 - code right here right and then when you
44:20 - finally run this actual app either on
44:22 - the simulator or on an actual real
44:24 - device that's when your scene delegate
44:28 - is gonna get hit because you're running
44:29 - it for real you're not working with this
44:31 - preview anymore right your app delegate
44:34 - your scene delegate you're gonna have
44:35 - your lifecycle events here of it
44:37 - launching and all of that stuff seeing
44:39 - delegate is gonna fire you're gonna have
44:41 - this fire it's gonna create a new
44:44 - landmark list and set the route view and
44:46 - then find the user data model object as
44:50 - the environment object for the landmark
44:51 - list so hopefully that makes sense if it
44:53 - doesn't just leave me a comment below
44:55 - and I'd be happy to try to explain it in
44:57 - another way all right so this Swift UI
45:00 - bindable objects stuff is pretty cool
45:03 - but at the same time it takes a little
45:05 - bit to wrap your head around I'm still
45:06 - trying to wrap my head around it I think
45:09 - that I might create a standalone video
45:11 - just explaining this concept a little
45:13 - farther down the line
45:14 - and if that's something that you want to
45:16 - see please consider thumbs up in this
45:18 - video and subscribing to my channel if
45:20 - you haven't already that's our stuff
45:22 - really helps support the channel and
45:24 - keeps it going and now I want to turn it
45:26 - over to you
45:27 - have you used ui kid before and if you
45:30 - have how do you think it compares to
45:33 - Swift UI do you like it you I get better
45:35 - or do you like swift UI better let me
45:37 - know by leaving a quick comment below
45:38 - there's more Swift UI content over there
45:41 - thanks for watching I'll see you guys
45:43 - next time