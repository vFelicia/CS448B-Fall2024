00:00 - hi and welcome to lesson six in the
00:02 - previous lesson you learned how to write
00:03 - some basic Swift code
00:05 - well let me ask you something how does a
00:07 - user usually interact with an app well
00:10 - it's usually they tap on something on
00:12 - the screen let's say a news headline and
00:14 - then the app gives a reaction such as
00:17 - showing that news article action and
00:19 - reaction well that implies that when the
00:22 - user takes an action depending on what
00:24 - that action is the app needs to react
00:27 - accordingly and run the appropriate
00:30 - block of code depending on what the user
00:32 - is doing so we need a way to organize
00:34 - our code into bite-sized chunks so that
00:37 - when the user takes this action we run
00:40 - that chunk of code and when the user
00:42 - takes that action we run that chunk of
00:45 - code
00:45 - well Swift has something called a
00:47 - function and this is basically a block
00:49 - of code where you wrap it up with a name
00:51 - and when you want to run that block of
00:53 - code you can just call it by its name so
00:56 - that's what you're going to learn how to
00:57 - do today let's roll all right so we're
01:04 - gonna create a brand new playground here
01:06 - and we're gonna try out these functions
01:07 - so let's get started with a playground
01:10 - under iOS let's choose blank and I'm
01:14 - just gonna save it on my desktop and
01:16 - call it my playground - all right so
01:19 - we're gonna just go down here create a
01:21 - new line and we're gonna type in f U and
01:24 - C space now that keyword is used to
01:27 - declare a new function next part of the
01:29 - function is the name of the function now
01:32 - this is important because whenever we
01:34 - want to run the code that is inside this
01:38 - function we're going to call it by this
01:41 - name that we're gonna give it right now
01:43 - so I'm gonna call this function say
01:45 - hello now the next part of the function
01:48 - is a pair of rounded brackets so find
01:51 - that on your keyboard
01:52 - typically it's right above the 9 and the
01:55 - 0 so you're gonna have to hold down
01:57 - shift I'm gonna type those two rounded
02:00 - brackets now inside those rounded
02:02 - brackets right now we're not going to
02:04 - put anything in there but you can have
02:07 - something called parameters which is
02:08 - something you're gonna learn a little
02:10 - later in this lesson
02:11 - all right now next we're gonna hit space
02:14 - and we're gonna open up a pair of curly
02:17 - brackets or squiggly brackets some
02:20 - people call them and you got to find
02:21 - these on your keyboard - for my keyboard
02:24 - layout it's above the square brackets so
02:27 - I'm gonna hold down shift and type in a
02:31 - pair of squiggly brackets or curly
02:33 - brackets I'm go inside it and press
02:38 - ENTER a couple of times to create a few
02:40 - lines you're going to write your code
02:42 - for your function in between these two
02:45 - curly brackets think of it as the guts
02:49 - of the function so whenever you call say
02:51 - hello the code in between these curly
02:54 - brackets it's going to get run I'm gonna
02:57 - print out in here hello right now let's
03:03 - go outside of the function and by
03:06 - outside I mean after this ending curly
03:10 - bracket we're gonna just call the
03:14 - function by its name say hello and
03:16 - notice that autocomplete already brings
03:20 - this up but let's type it out just for
03:22 - extra practice so we're gonna use the
03:24 - name of the function followed by the
03:26 - curly brackets all right now let's run
03:29 - this line of code you'll see down here
03:32 - it's going to execute this print
03:34 - statement and it's going to print out
03:36 - hello and if you don't have this tray at
03:38 - the bottom you can open it up like that
03:40 - when you write a function you're usually
03:43 - writing some code to perform a specific
03:45 - task in our example before you wrote a
03:48 - function to display the full article and
03:51 - when the user taps on a news headline in
03:54 - the app you're going to call that
03:55 - function to display the full article for
03:58 - that headline now let me present another
04:00 - scenario what if there are 10 news
04:03 - headlines in your news app are you going
04:05 - to write 10 different functions one to
04:08 - display the full article for each
04:10 - headline of course not
04:11 - furthermore the news changes every day
04:14 - so you wouldn't be able to write a
04:15 - function to show a news article that
04:18 - hasn't happened yet right instead you're
04:20 - writing a function to do the work to
04:22 - present and display a full
04:24 - article to the user that function
04:27 - doesn't care or doesn't know about what
04:30 - sort of article it's going to be
04:31 - presenting and displaying you as the
04:33 - coder basically pass that information
04:36 - into the function when you call that
04:38 - function you can do this with something
04:40 - called function parameters remember
04:43 - those rounded brackets in the function
04:45 - call well you can specify the parameters
04:47 - in between those rounded brackets that
04:50 - indicate what sort of data you're
04:52 - passing into the function when you're
04:53 - calling it in the example below we
04:55 - declared a function called say hello to
04:57 - in the rounded brackets you have a
05:00 - parameter called name and it's of the
05:02 - data type string now that kind of looks
05:04 - like a variable declaration without the
05:06 - VAR keyword whenever you call to say
05:08 - hello to function you're going to have
05:09 - to supply a piece of string data into
05:12 - that function call now let's jump back
05:14 - into our playground and see this in
05:16 - action all right before we jump into an
05:18 - example with parameters let's first add
05:21 - a comment up here in terms of call this
05:24 - a basic function remember this is
05:26 - something you should get into the habit
05:28 - of doing and I also want to show you if
05:33 - it wasn't clear how to use the
05:34 - autocomplete feature because trust me
05:37 - you're gonna be using it a lot so why
05:39 - don't I type say hello
05:40 - you're gonna notice that it pops up
05:43 - right here now you can either hit enter
05:45 - right now or you can press up and down
05:47 - on your keyboard to select a different
05:49 - one and you can even use your mouse and
05:50 - you can scroll down the list and so here
05:53 - I'm just gonna double click it alright
05:56 - so now let's do a function with
05:59 - parameters so again we're going to type
06:01 - in a few and see space for declaring a
06:06 - new function and this time I'm gonna
06:08 - call it say hello to and we're gonna
06:11 - specify the rounded brackets just like
06:13 - before except that this time I'm gonna
06:16 - move my cursor inside the rounded
06:18 - brackets and we're gonna put a single
06:20 - parameter in here let's call this
06:22 - parameter name : we're going to specify
06:25 - the data type it's just like almost like
06:28 - declaring a variable like we did in the
06:32 - previous lesson alright so now we're
06:35 - going to open up a pair of curly
06:36 - brackets and we're going to
06:37 - some space in there and here we are
06:40 - going to print out the name that gets
06:45 - passed in and the way you can do that is
06:48 - just by referencing that parameter name
06:50 - so we since we called it name we can
06:53 - just say print name so what effort data
06:57 - gets passed into this function when it
06:59 - gets called we are going to be printing
07:01 - it out into the console so right now
07:05 - even if we run the code it's not going
07:07 - to do anything we actually have to call
07:09 - the function
07:10 - so here below the function let's type in
07:14 - sa Y and you can see that now
07:16 - autocomplete shows you the second
07:18 - function that we just wrote so go ahead
07:20 - and select that and press Enter and this
07:24 - highlighted blue part is telling you
07:26 - that you need to specify a piece of
07:28 - string data along with this function
07:30 - call so why don't we go ahead and I've
07:34 - been Tom there and then let's run this
07:37 - line of code at this point so you're
07:41 - gonna see Tom there right and that's
07:43 - just a result of us passing this piece
07:47 - of data into the say hello to function
07:50 - so that's going to come in through here
07:52 - and then it's going to take that string
07:55 - data and print it out to the console and
07:57 - that's why we get this result down here
07:59 - now what if we wanted to say hello Tom
08:03 - instead well we can't do that and I'm
08:06 - going to show you a really neat way to
08:07 - do that so let's erase this name here
08:10 - and instead let's print out a string
08:13 - called hello space and we can actually
08:17 - insert that name parameter into the
08:18 - string and the way you do that is
08:20 - backslash and then type in a pair of
08:23 - rounded brackets and inside the pair of
08:26 - rounded brackets you would just put the
08:28 - name of your parameter or variable or
08:30 - whatever you want to insert into the
08:32 - string now let's run this function call
08:35 - again
08:36 - now you get hello Tom now in this
08:39 - example we've done one parameter you can
08:42 - actually include multiple parameters
08:44 - into your function all you would have to
08:46 - do is inside the rounded bracket
08:50 - after the first parameter just have been
08:53 - comma and now you can require a second
08:56 - parameter so let's make this one age and
08:58 - this datatype for the age is going to be
09:01 - an integer so immediately the playground
09:05 - is going to complain that this function
09:07 - call is no longer valid and it's right
09:10 - it's missing an argument it's missing
09:12 - this parameter called H so what I'm
09:15 - going to do is just completely get rid
09:17 - of this line I'm going to type in s a Y
09:19 - and you can see here that autocomplete
09:22 - has detected we've changed that function
09:25 - so the double click it or press ENTER
09:28 - and we're going to fill in the
09:30 - parameters that are needed now here's a
09:32 - neat trick as you're filling in the
09:34 - parameters here if you press tab on your
09:37 - keyboard it just automatically jumps to
09:39 - the next parameter that you need to fill
09:41 - in so that's a shortcut that's going to
09:44 - help you so let's type in something like
09:46 - 20 years old and let's run this code now
09:49 - again it just says hello tom because we
09:52 - haven't included the H parameter in this
09:55 - print statement so why don't we modify
09:58 - this piece of text you our backslash
10:03 - rounded brackets let's insert that H
10:07 - years old and now let's run this
10:10 - function again and now you're going to
10:14 - see down here hello Tom you're 20 years
10:16 - old now you can actually specify more
10:18 - parameters but I wouldn't go to too
10:21 - crazy with this in the future as you're
10:23 - going to get more advanced with Swift
10:25 - are going to learn ways to combine
10:27 - pieces of data together into one
10:30 - parameter and so you don't have a long
10:33 - long parameter list that you are going
10:35 - to require but for now if you wanted to
10:37 - include you know two three four or five
10:40 - parameters just to play around feel free
10:43 - to do so it's going to be good practice
10:44 - there's one thing that I want to mention
10:47 - and that is that you can actually omit
10:50 - these parameter names right here so it's
10:54 - going to I guess save you a little bit
10:57 - of typing sometimes it can be nice to
10:59 - have them so that it's really clear what
11:02 - sort of data you need to pass in but let
11:04 - me show you how you could do a function
11:07 - call where you can omit this all you
11:10 - would need to do is back in your
11:12 - function declaration here you would just
11:14 - include an underscore space in front of
11:18 - that parameter so we're gonna do the
11:20 - same thing with the age here and then
11:23 - we're going to get rid of this line in
11:26 - fact Xcode is now or a playground is now
11:30 - telling you that you don't need these
11:31 - things so let's get rid of this line and
11:34 - again use autocomplete and you can see
11:37 - there's our function visually here it
11:39 - doesn't look any different but if you
11:42 - press ENTER you can see that this whole
11:44 - thing is highlighted now and when you
11:47 - add your parameters right it's just
11:50 - gonna look like that for your function
11:53 - call so what you're actually doing here
11:57 - by adding this underscore is you're
11:59 - omitting something called the argument
12:01 - label now I'm not gonna get too much
12:03 - into it right now because I don't want
12:06 - to confuse you with a lot of knowledge
12:08 - that you don't need right now but just
12:09 - know that that's something that you can
12:11 - do I will link to some resources in the
12:14 - description if you want to read more
12:16 - into it but if even if you don't as your
12:19 - going to get a little more advanced with
12:21 - Swift and you're going to learn more
12:22 - about functions you will come across
12:25 - this knowledge anyways so it's not
12:27 - nothing to nothing that you need right
12:30 - at this moment now you know how to write
12:32 - functions which expect some sort of
12:34 - input data to work with another great
12:36 - use of functions is to take that input
12:39 - data processed it and transform it and
12:41 - then return it back to us now functions
12:44 - can do this using the return keyword in
12:46 - the function below it takes an integer
12:48 - input it adds 4 to it and then it
12:51 - returns the result back to us now notice
12:54 - that after the rounded brackets there's
12:55 - an arrow followed by the data type int
12:58 - now this describes the type of data that
13:00 - the function will return when you call
13:02 - it now let's go back to our playground
13:04 - and we'll try this out alright so now
13:06 - let's try out a function with the return
13:08 - value so why don't we just type in a new
13:12 - comment here
13:14 - with return value and I'm going to
13:17 - create a new function by typing F UNC
13:19 - space and then I'm going to call this
13:22 - function add four two and you guess that
13:28 - we're going to add a parameter in here
13:30 - I'm going to call the parameter X and
13:33 - it's going to be an into data type and
13:36 - here is where we get to the return value
13:39 - part so we're going to type in a - a
13:41 - greater than sign space and here we
13:45 - indicate the data type of the value that
13:49 - is going to get returned by this
13:50 - function so since we are simply taking
13:54 - it in an integer and we're going to add
13:56 - 4 to it it makes sense that what we're
13:58 - returning out of this function is also
14:00 - an integer so that's what we type in
14:02 - there and then we are going to hit space
14:05 - and write in our curly brackets there
14:08 - now I'm going to open up the curly
14:10 - brackets a little bit so we can type
14:11 - some code in between them and what we're
14:15 - going to do here is we're going to
14:17 - create a brand new variable here let's
14:19 - just call this sum and the sum is going
14:22 - to be equal to X which is the value that
14:26 - gets passed in that integer and we're
14:29 - going to add 4 to it now from here you
14:33 - can see that the playground is
14:35 - complaining that we're missing the
14:37 - return in a function that is expected to
14:40 - return an int datatype and it's right
14:43 - because we need to return this sum the
14:46 - keyword that we use is actually just a
14:48 - return so type in return space and we
14:52 - are going to pass back the sum so if you
14:57 - let let Xcode run or maybe you can run
15:00 - your code at this point you're gonna get
15:02 - rid of that error so let's try this out
15:04 - let's try calling this function ad d4
15:10 - and autocomplete brings it up let's hit
15:13 - enter here we're gonna pass in let's say
15:16 - 10 let's go ahead and run this function
15:19 - at this point we don't really see
15:22 - anything I mean you see some you see the
15:24 - result in the preview here but like I
15:26 - said we're gonna pay attention to the
15:28 - so nothing gets output here well where
15:30 - did that 14 go right what's actually
15:35 - happening here is it's passing intent
15:39 - into this function right through this
15:41 - parameter then it's adding four and then
15:44 - it's returning the sum and we are
15:47 - actually responsible for capturing that
15:49 - data so in fact what we have to do here
15:53 - is we have to type in var and say result
15:58 - equals the execution or the return
16:02 - result by executing this function so if
16:06 - we print result and we run this code
16:12 - we're gonna see 14 down there in the
16:14 - console so just to run it through one
16:17 - more time what's happening here is we're
16:20 - executing this function we're passing
16:23 - intent as a parameter then this code
16:26 - inside this function gets run right it's
16:29 - gonna take 10 which we passed in it's
16:31 - gonna add 4 to it it's gonna sign it to
16:34 - the variables sum and then it's going to
16:36 - return the data sum right and that's
16:40 - going to come back here and that sum
16:42 - gets assigned to result and we're
16:45 - printing the result now one question you
16:47 - might be asking yourself now is why do I
16:50 - have to use return values why do I have
16:52 - to use this return keyword here why
16:54 - can't I just access some right here why
16:57 - can't I just say print sum so why don't
17:01 - you go ahead and try that and run your
17:03 - code and you're gonna get an error that
17:05 - says use of unresolved identifier sum
17:09 - and if you scroll up here you know
17:14 - that's the same error message but it's
17:17 - basically saying that it cannot find
17:18 - anything called sum well what do you
17:21 - mean we have some declared right here
17:24 - inside this function this brings me to
17:28 - my next topic which is variable scope
17:31 - you see the code that is inside this
17:33 - function right here is inside of its own
17:36 - scope so any variables you declare in
17:40 - here
17:41 - only exists within that function and
17:44 - that's why in order to get that data out
17:47 - you have to use the return keyword what
17:49 - I find helps beginners to grasp this
17:52 - concept is by thinking of the code
17:55 - inside of the function as existing in
17:58 - its own little bubble so anything that
18:02 - you know the code that you write here
18:03 - the variables that you declare inside
18:05 - that function is in its own little
18:07 - bubble and in order to get that data out
18:09 - you're going to use the return statement
18:11 - here now another thing I might add is
18:14 - that each function has its own scope or
18:17 - its own bubble so if I let's say
18:20 - declared another function let's just
18:22 - call this C and I you know I try to
18:27 - print some in here I'm also going to get
18:31 - an error right because some exists in
18:35 - this functions scope I can't access it
18:39 - anywhere else
18:40 - each function has its own variable scope
18:43 - now I know this variable scope concept
18:46 - is a little bit abstract but what's
18:48 - going to happen is that as you're
18:49 - writing more Swift code and you're
18:51 - building your apps you're going to run
18:53 - into issues where you're trying to
18:54 - access this variable inside the scope
18:56 - and then you realize that you can't and
18:58 - it's just something over time that
19:01 - you're going to realize and it's gonna
19:03 - click if it hasn't already clicked for
19:05 - you so I guess what I'm saying is that
19:08 - give it some time and don't worry if
19:10 - it's kind of confusing to you right now
19:13 - what I'm saying is that as you're
19:15 - writing more code and you're building or
19:16 - apps you're writing more functions these
19:19 - things are gonna fall into place for you
19:21 - so let's erase that test function and
19:24 - let's address this thing it's so
19:26 - annoying
19:27 - this variable sum was never mutated
19:30 - consider changing to a let constant so
19:34 - this goes back to what we talked about
19:35 - in the previous lesson when should you
19:37 - use variables and when should you use
19:39 - constants well I told you that you
19:42 - should default to using constants and
19:43 - then if you find out that you need to
19:45 - change up that data and you get an error
19:48 - to say that you can't change it up then
19:50 - you can consider changing that led to a
19:51 - var and using a variable instead
19:54 - so here Xcode is warning you that hey
19:56 - you know you declared some as a variable
19:58 - but in fact after you've assigned some
20:01 - data to it you never ended up changing
20:03 - it so why not use a constant and so
20:06 - Xcode is being very helpful not annoying
20:09 - in fact let's change that to a let and
20:12 - we're all good now Before we jump to the
20:15 - next lesson one last thing about
20:17 - autocomplete so I want you to notice
20:20 - when we typed in ad for - this right
20:25 - here this is the return value so when
20:28 - you're looking through different
20:29 - functions to call this is very handy to
20:33 - understand what sort of data this
20:35 - function returns what happens if we try
20:40 - to now call one of these guys say hello
20:44 - - or say hello in fact these guys they
20:48 - don't have return values right so what
20:50 - happens when we try to autocomplete that
20:54 - well it says void void basically means
20:57 - no return value so that's what it means
21:01 - and why why does void say that because
21:04 - in fact let's go back to the basic
21:08 - function here in fact right here the
21:11 - return value is actually void it's just
21:13 - that we don't have to type it when it's
21:15 - void so you can actually specify a
21:18 - return value of void which is basically
21:21 - no return value and you don't need a
21:23 - return keyword so that's just a neat
21:26 - little fact all right when you don't
21:28 - need a return value you don't need to
21:31 - specify this part of the function
21:33 - declaration you can kind of omit it but
21:36 - the interesting part is when you use
21:38 - autocomplete to call this function it
21:40 - still says that the return value is void
21:42 - all right so today you learned about how
21:45 - to organize code into functions you've
21:47 - learned about input parameters which let
21:50 - you supply functions with input data
21:52 - you've also learned about return values
21:54 - which let functions return data back to
21:57 - us and finally you've learned about
21:59 - variable scope which is basically all of
22:01 - the variables and code inside of a
22:04 - function only exists within the scope of
22:06 - that
22:07 - believe it or not there's still a lot
22:10 - more to functions but what we've covered
22:12 - so far is more than sufficient for now
22:14 - now I've got a worksheet for you to
22:16 - practice and solidify what you've
22:17 - learned you can grab it by clicking the
22:19 - card over there or checking the
22:20 - description below now I want to turn it
22:22 - over to you we're two lessons into Swift
22:24 - with one more to go do you feel like
22:26 - you've got a grip on things so far let
22:28 - me know below by saying yes or no now if
22:31 - you liked this video please consider
22:32 - subscribing to my channel by hitting
22:33 - that subscribe button below and also
22:35 - click on that bell notification icon if
22:38 - you don't want to miss the next episode
22:39 - now go ahead and click on that thumbnail
22:41 - over there and I'll see you in the next
22:42 - lesson