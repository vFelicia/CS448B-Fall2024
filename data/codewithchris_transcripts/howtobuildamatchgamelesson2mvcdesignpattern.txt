00:00 - hi and welcome in this video I'm going
00:02 - to show you a very important design
00:04 - pattern that governs how iOS apps are
00:06 - architected and if you haven't heard of
00:08 - the term design pattern before think of
00:10 - it as just a best practice solution in
00:13 - iOS the most common way to architect an
00:15 - app is using the MVC design pattern MVC
00:19 - stands for a Model View controller now
00:22 - don't get me wrong there are other
00:23 - design patterns this is not the only way
00:26 - you can build an iOS app but it's the
00:28 - most common one because it's the one
00:30 - that Apple uses themselves now let me
00:32 - tell you what this MVC pattern is all
00:34 - about MVC stands for Model View
00:37 - controller and what it does is help
00:40 - separate the responsibilities in an app
00:42 - let's talk about each of these three
00:44 - pieces separately the view is the
00:46 - easiest to explain first this is what
00:48 - the user sees when they look at your app
00:50 - the responsibility of the view is to
00:53 - display the user interface and detect
00:55 - events from the user such as taps and
00:57 - swipes aside from the user interface
00:59 - elements such as buttons labels and
01:01 - scrollable lists usually some sort of
01:04 - data or information is displayed on the
01:07 - screen right well where does this
01:09 - information come from this brings us to
01:11 - the M part of the MVC which stands for
01:14 - model or data model the model represents
01:17 - the data in your app the responsibility
01:19 - of the model is to manage the data
01:21 - whether that comes from a database or
01:23 - through a feed somewhere the last piece
01:25 - of the puzzle is the controller which is
01:28 - what the C stands for in MVC the
01:31 - responsibility of the controller is to
01:32 - handle the communication between the
01:34 - model and the view that communication is
01:37 - twofold number one when the view detects
01:40 - a user interaction such as a tap the
01:42 - controller is responsible for handling
01:44 - it and deciding what to do with that
01:46 - event let's say that it's a list of data
01:48 - and the user taps a delete button next
01:51 - to a particular row the view would
01:53 - detect that event and pass it to the
01:54 - controller who then needs to tell the
01:56 - model to update its data number two
01:59 - conversely when the screen loads the
02:02 - controller might ask the model for some
02:04 - data to display in the view the model
02:06 - would gather that data and return it to
02:08 - the controller who then hands it to the
02:09 - view for display so as you can see the
02:12 - view
02:13 - controller and model all have its own
02:15 - responsibilities well you might ask why
02:18 - would we even want to separate these
02:20 - different responsibilities well there
02:23 - are a couple of reasons
02:24 - number one is to keep things simple and
02:26 - when your app architecture is clean and
02:29 - simple like this that leads to code that
02:32 - is less likely to have bugs and that is
02:36 - easier to troubleshoot when there is a
02:38 - problem because you know where to look
02:40 - number two is reusability so the idea is
02:44 - that you keep the model being the M part
02:46 - in MVC independent from the controller
02:49 - and the view as much as possible in your
02:52 - app you might have multiple screens and
02:54 - each screen will have its own view and
02:56 - controller that manages that view
02:57 - however if you're able to keep the model
03:00 - independent then multiple screens can
03:02 - leverage the same model furthermore if
03:05 - you do a really good job at keeping that
03:07 - data model independent you would be able
03:09 - to switch out the data source in the
03:11 - future let's say it's connecting to this
03:13 - database and then you swap it over to a
03:16 - different database and the controller
03:18 - and the view would be none the wiser so
03:20 - as you can see this is great for
03:22 - maintenance and reusability now in the
03:25 - Xcode apps that we've built so far you
03:27 - might have noticed that our projects
03:29 - start with a storyboard and a view
03:30 - controller class these are two parts of
03:33 - the MVC design pattern the view is
03:35 - represented visually by the storyboard
03:37 - and the view controller class in your
03:39 - project is the controller that manages
03:41 - that view the default Xcode project
03:43 - doesn't come with a model class because
03:45 - it doesn't know what sort of data your
03:47 - app will have to make all of this
03:49 - information more concrete let's take a
03:51 - look at the app we're going to build in
03:53 - this module and then I'll explain how
03:55 - we'll architect it in terms of MVC first
03:59 - let's take a look at the user interface
04:01 - what sorts of data gets displayed well
04:04 - we have 16 cards and since this app is
04:07 - about finding matching pairs that means
04:09 - we have eight pairs of matching cards so
04:11 - we'll have a model class that handles
04:14 - this data it's responsibility will be to
04:16 - randomly generate eight pairs of
04:18 - matching cards when the app starts the
04:21 - view controller will request those eight
04:23 - random pairs of cards from the model
04:26 - the model will generate them and then
04:28 - give that data to the view controller
04:29 - and the view controller will give that
04:31 - data to the view for display
04:33 - now what form will that data be in when
04:37 - the model passes it to the view
04:38 - controller we know that the data
04:40 - consists of 16 cards but for each card
04:43 - there are important details such as what
04:46 - image file to use for that card as well
04:48 - as the status of that card there are
04:50 - actually two statuses that we need for
04:52 - each card number one has this card been
04:54 - flipped and number two has this card
04:56 - been matched combined with the image
04:59 - file name that's three pieces of data
05:00 - for each of the sixteen cards this
05:03 - totals 48 different pieces of
05:05 - information that we need to keep track
05:06 - of rather than treat these pieces of
05:09 - data as independent pieces of
05:10 - information we can instead group all of
05:12 - the relevant information for a single
05:14 - card into a card class this way we can
05:18 - simply create sixteen card objects and
05:20 - each card object would have three
05:22 - properties containing the details for
05:24 - that card at the end of the day the
05:26 - model will simply pass an array
05:28 - containing sixteen card objects to the
05:30 - view controller now let's take a look at
05:33 - what happens when a user starts
05:34 - interacting with the view the view tells
05:36 - the view controller each time the user
05:38 - taps on a card and the view controller
05:40 - will determine what to do based on
05:42 - whether the two cards that were flipped
05:43 - over match or not there's also another
05:46 - class will be creating which is a
05:48 - customized cell of the collection view
05:50 - and you're going to learn about what a
05:52 - collection view is later on but for now
05:54 - it's simply a user interface element
05:56 - that lets us display things in a grid
05:59 - and we're going to create a subclass of
06:01 - its cell so that we can control how the
06:03 - cells in the grid will look now having
06:06 - gone through this you might be thinking
06:08 - in the back of your head how the hell am
06:10 - I supposed to come up with this for my
06:11 - own app see that's the thing it comes
06:14 - with experience the more apps you build
06:16 - the more you will be able to do this
06:18 - just based on what you've seen and what
06:20 - you've done before if you're new to
06:22 - programming and you're doing this
06:24 - project just for yourself I would
06:26 - recommend that you focus on getting
06:27 - things to work first
06:28 - sometimes beginners get so wrapped up
06:30 - and trying to write the perfect code or
06:32 - trying to do things the best way that it
06:34 - becomes so overwhelming they just give
06:36 - up I don't want that to happen to you
06:38 - all right so if this project is for
06:40 - yourself and you're brand new just focus
06:42 - on getting things to work if you're
06:43 - working on a team or you're working at a
06:46 - company and you're building code and
06:48 - projects for clients then that's another
06:50 - story altogether okay so in the next
06:53 - lesson we'll actually be diving into
06:55 - Xcode and starting our project but first
06:57 - I've got a question for you guys what we
06:59 - cover today the MVC design pattern is
07:02 - that something new to you or have you
07:04 - learned it somewhere before let me know
07:06 - by leaving a quick comment below yes or
07:08 - no if you like this video please
07:11 - subscribe to my channel by hitting the
07:12 - subscribe button below and if you don't
07:14 - want to miss a single video make sure
07:15 - you tap on that Bell icon as well thanks
07:18 - for watching and I'll see you guys in
07:20 - the next lesson