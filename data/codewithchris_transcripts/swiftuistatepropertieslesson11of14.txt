00:04 - hello and welcome in the last lesson you 
learned about the swift ui button and how to  
00:09 - handle user interaction well in order to change 
the data and then reflect that change in the ui  
00:16 - we have to learn about state properties and 
that's what this lesson is all about but  
00:21 - before we dive in in case you're new here my 
name is chris and welcome to code with chris  
00:25 - the place to be if you want to learn how to make 
an app here's a fun fact i discovered coding when  
00:30 - i was in grade 12 and i was about 16 years old how 
about for you when did you discover coding let me  
00:36 - know by leaving a quick comment below and if you 
wouldn't mind please give this video a thumbs up  
00:40 - really really helps out thank you so 
much with that said let's dive right in
00:46 - all right so i want to revisit that view update 
lifecycle diagram for just a second do you  
00:52 - remember when we showed a link from the data to 
the view code well let's go ahead and do that with  
00:59 - our war card game project so what sort of data do 
we have in this project well if you take a look at  
01:05 - the user interface here you can see that we need 
to keep track of which card the player has which  
01:13 - card the cpu has and then also the scores of the 
player and the cpu so that's four pieces of data  
01:21 - let's create four properties in our content view 
structure to represent those four pieces of data  
01:29 - so right underneath the opening curly bracket of 
content view i'm going to go ahead and declare var  
01:38 - cpu let's do player first player card equals and 
um i'll just mimic the cards that we have there  
01:47 - so we're gonna have card two and well actually let 
me just i'll change it we can put something else  
01:54 - to start and then cpu card equals let's say card 
nine and then let's represent the player score  
02:06 - and this is going to be an integer uh let's start 
with zero as well cpu score equals zero all right  
02:17 - so now we have these four properties representing 
the state of the game these four properties  
02:24 - are our source of truth because it represents 
how the ui should look now how do we reflect  
02:32 - these pieces of data in our user interface well 
we need to reference these properties inside our  
02:38 - view code remember that these properties being 
declared in the scope of this structure means  
02:44 - that it's available to be referenced in any of the 
methods in the same structure as well as in this  
02:51 - block of code for our computed body property 
so if we look down here for this first card  
02:59 - that is right here and we have hard coded a 
string in there saying card two instead of  
03:07 - hard-coding a string there let's put a dynamic 
value by specifying our player card property  
03:16 - so let's uh update our automatic preview just to 
make sure that that runs and everything's good  
03:23 - and you can see that that card changes to card 
5 because that is what the value of player card  
03:29 - property is let's do the same thing for the cpu 
card instead of hard coding card three here let's  
03:36 - put the cpu card property okay you see that change 
and down here for the score instead of a string  
03:46 - of zero let's put our player score property 
now you're going to notice an error here it  
03:55 - says no exact matches in call to initializer and 
that's because for initializing a text instance  
04:03 - we need to pass in a piece of string data but 
player score remember this is an int property  
04:12 - so it contains int data but how we can get around 
this is we can turn our int into a string well at  
04:20 - least the string representation of a number so 
the way we can do that is we can create a new  
04:26 - string instance and just pass in the we can pass 
in the integer so this one would be player score  
04:35 - and we're going to do the same thing for a cpu 
score we're going to create a new string and we're  
04:40 - going to pass in the cpu score and just like that 
we have our four pieces of data being represented  
04:50 - in the view code and in turn in the ui now all 
we have to do is when the user taps on the button  
04:57 - we can update this data in the properties and 
have the ui automatically change right well  
05:04 - not so fast why don't we go ahead and try and 
do that and let's take a look at what happens so  
05:10 - in the last lesson we had changed 
this deal image into an actual button  
05:17 - right now that action closure is empty let's 
put some code inside this action closure  
05:23 - for our button here we are going to update the 
cards and we're also going to update the score  
05:33 - now if you try to update the property like here 
let's try to update playercard equals card 11.  
05:43 - you'll see that you can't xcode will complain and 
say cannot assign to property self is immutable  
05:51 - now self refers to the instance of a content view 
and immutable means that it can't be changed you  
05:58 - see instances are value types and because 
of the way that they are allocated in memory  
06:04 - they can't be changed now i know that makes 
absolutely no sense to you right now but i  
06:09 - promise you in a future lesson we will talk about 
that and then it will make complete sense for now  
06:15 - just understand that we can't change the value 
of our property unless we use a property wrapper  
06:22 - a property wrapper is a keyword in front of our 
property declaration that changes its behavior  
06:29 - now specifically i'm talking about the state 
property wrapper so let's go ahead back up to our  
06:36 - property declarations and see how we can use this 
state property wrapper to change the behaviors of  
06:42 - these properties so that we can change the values 
all we have to do is in front of the var keyword  
06:50 - of our property declaration we are going to write 
at state and by adding that keyword at state  
06:59 - that is going to indicate that that player 
card property is actually a state property  
07:04 - and it's going to allow us to update the 
value in it so let's go ahead and put this  
07:10 - property wrapper in front of all four of our 
properties so that they are all state properties  
07:16 - state properties have two special characteristics 
number one is that you can change the data in  
07:21 - them we've already talked about that but 
number two is that inside the view code  
07:27 - any references to state properties they will get 
notified of the data changes and then your ui will  
07:35 - update automatically based on that new data so 
let's go ahead go down to the action closure  
07:42 - of our button and try to update some of these 
state properties and let's watch the ui change
07:50 - okay so here we are and as you can see 
now the error is gone and i can put cpu  
07:59 - card equals card 12 and let's go ahead and 
update the score as well might as well just  
08:08 - do that so i'm going to say player score plus 
equals one that means to increment it by one  
08:15 - cpu score plus equals one as well and 
we'll save this and then let's go ahead and  
08:23 - do a live preview see if we can do 
that all right so this is a live  
08:27 - preview when i tap on this button 
it's going to run the closure here
08:34 - wasn't that cool so when i tapped on that button 
we updated the data in the state properties  
08:42 - right and because in our view code it references 
those state properties they got notified and the  
08:51 - ui was re-rendered to show the new data now the 
problem is that every time we tap on the button  
08:58 - i mean it's incrementing the score which is cool 
but the player cards aren't being randomized  
09:04 - so what we can do is we can use the random 
method of the instructor generate a random number  
09:11 - and then we are going to append that random 
number to the back of the card string  
09:18 - to generate a new card so let's take a look at 
how that would work generate a random number  
09:27 - between 2 and 13 because if you look at the 
asset library we have card 2 all the way to  
09:35 - card 14 actually so i would probably want to 
generate from 2 to 14. so i'm going to say  
09:45 - let player rand equals int dot random and this 
method allows us to specify a range you specify a  
09:58 - range with the lower end of the range dot dot dot 
and then the upper end and it should be inclusive  
10:05 - if i remember correctly and we'll see in a second 
and let's declare another one cpu rand equals  
10:13 - int dot random in two dot dot dot 14. and then 
what we're going to do is instead of specifying  
10:21 - the number inside the hard-coded string i'm just 
going to specify card and then i am going to add  
10:28 - player rand right and add cpu rand now we might 
not be able to do this and as expected we can't  
10:40 - because as you know from earlier in this lesson 
what we're trying to do here is we're trying to  
10:45 - append a integer to a string and 
what we have to do instead is convert  
10:53 - that integer to a string first or get the 
string representation of that integer and  
10:59 - there this should be dynamic now so let's take 
a look at this and see if it's what we expect
11:09 - this is perfect
11:13 - the cards are randomizing what's 
not perfect is the score down here  
11:17 - we still need to determine which side wins and 
then increment the appropriate score so i am  
11:24 - going to comment out these two pieces of code 
because we don't want to just be incrementing  
11:29 - it by one each time now before we end off this 
lesson i really want to point out and stress how  
11:34 - powerful this framework is what we're doing here 
is tapping a button it's running this closure and  
11:42 - we are changing the value in this state property 
and because the state property is being referenced  
11:50 - inside of our view code here it is detecting that 
data change and then re-rendering what we see in  
11:57 - the ui and that happens automatically all we're 
doing is changing the data in the past with ui kit  
12:05 - this system didn't exist what we would have to 
do instead is update the data just like we're  
12:10 - doing here but we would also have to update 
each view element manually and tell it what  
12:17 - to display so what we'd have to do is get a 
reference to this image and then generate an  
12:24 - image from this asset name from the asset library 
and then set that image asset to this image view  
12:31 - and we would have to do that for this one as well 
and then we'd have to do it for the text here  
12:37 - and the labels so everything we had to do manually 
now all we have to do is update the data and any  
12:45 - pieces of ui tied to those state properties 
will detect the change and update automatically  
12:53 - now by definition a state property is a piece 
of data that this content view depends on  
13:00 - it's not something that other views would care 
about or depend on and so by that nature we can  
13:06 - add the keyword private and just control the 
access level to these pieces of data so that  
13:12 - they are only accessible within the context or 
the scope of this content view structure since  
13:21 - it's only this content view that 
depends on these state properties
13:28 - all right we're almost at the finishing 
line we just have to compare the card values  
13:33 - and then update the score 
state properties appropriately  
13:37 - let's do a quick recap now you learned how 
to reference properties in your view code  
13:42 - you learned about the state property wrapper we 
also learned about some new terminology including  
13:48 - hard-coded values dynamic values and immutable 
meaning that it can't be changed now remember you  
13:54 - can get access to all these quizzes and challenges 
and extra resources if you go to codewithchris.com  
14:00 - and either sign into your account or 
hit the try for free button at the top  
14:04 - and then enroll in the 14 day beginner challenge 
lastly if you like this video please give it a  
14:09 - thumbs up and don't forget to subscribe for the 
next lesson in the next lesson we're going to  
14:14 - go over conditionals and how to compare values 
using if statements alright i'll see you there