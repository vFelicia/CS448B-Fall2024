00:00 - hello and welcome to my Swift tutorial
00:02 - for beginners series now in the previous
00:04 - lesson you learned about functions what
00:06 - they are and how to call them well in
00:08 - this lesson you're going to learn how to
00:09 - use them in an even more powerful way
00:12 - and that is to have your functions
00:14 - accept data and return data back to you
00:16 - when you call them alright stay tuned so
00:24 - in the last lesson we declared this
00:26 - function here to add two numbers and
00:28 - when you call this function it prints
00:30 - something down in the console however
00:33 - most of the times or rather some times
00:35 - we declare a function to take some input
00:39 - perform a specific task and then return
00:42 - the result to us so the first part of
00:44 - being able to do that is to specify that
00:47 - your function actually returns something
00:49 - back to you when you call it and let's
00:52 - take a look at the syntax for how this
00:53 - works so here's the syntax for a
00:56 - function that returns some data you'll
00:58 - notice that we still have the func
01:00 - keyword and we still have the function
01:02 - name followed by the parenthesis but
01:04 - after that you have a - followed by a
01:07 - greater than sign which combines itself
01:11 - to look like an arrow followed by a
01:13 - space and then the data type of the data
01:16 - that you're going to return from the
01:18 - function so if in our case add two
01:21 - numbers if we wanted to return the
01:23 - result to the function caller we would
01:26 - probably put int where it says data type
01:29 - right here because that is the type of
01:30 - the data that we are returning all right
01:33 - so after the data type you have a space
01:35 - and then you have the curly brackets
01:37 - again and you would specify your code
01:39 - now if you do specify a return value
01:42 - like this inside your function you must
01:45 - have the return keyword and that return
01:48 - keyword is used to actually end the
01:51 - function and return the data back to the
01:54 - color so now let's jump back to our
01:55 - playground and modify our function to
01:58 - return the data to us all right so we've
02:01 - got our function up here so we just add
02:04 - a - greater than sign and then we
02:07 - specify space the data type that this
02:11 - function returned
02:12 - and as I've said we're working with ins
02:15 - so I'm going to return an int so right
02:17 - away you can see Xcode detects hey
02:19 - you're saying that this function returns
02:21 - data but you're not using the return
02:23 - keyword and so we've got this error here
02:26 - so let's modify our function instead of
02:28 - printing C to the console why don't we
02:31 - try returning it so we just put return
02:34 - space C just like that all right so
02:39 - let's run our function now now nothing
02:43 - gets out put into the console where
02:46 - where the C go all right well what
02:49 - happens is that when you call a function
02:51 - that returns some data like we have in
02:55 - this case you have to capture that data
02:57 - somehow so remember variables and
02:59 - constants are used to keep track of data
03:02 - right so all we need to do is say let's
03:05 - define a constant let's call it sum and
03:09 - we are going to assign to this new
03:12 - constant the result or the returned data
03:15 - from our function add two numbers so
03:19 - let's run this and see what happens
03:21 - again actually nothing will happen
03:24 - because we haven't output anything to
03:26 - the console but let me write this print
03:28 - statement here so we're gonna print some
03:31 - and as you can see there it is in the
03:33 - console so what's happening here
03:35 - well add two numbers we're calling this
03:38 - function it's declaring a B and then
03:41 - declaring C and adding a and B assigning
03:45 - it to see and then it's returning C then
03:49 - we're assigning that result into a new
03:52 - constant called sum and finally we are
03:55 - printing that into the console using
03:57 - this print statement now it's not really
03:59 - interesting that whenever we call this
04:02 - function it always just returns 3 right
04:04 - so would it be cool if we were able to
04:07 - tell the function which two numbers to
04:10 - add and we can do that by using input
04:13 - parameters so let's take a look at the
04:15 - syntax for that so like I mentioned in
04:18 - the last lesson we specify our
04:19 - parameters in between the rounded
04:21 - parentheses now if you take a look at
04:23 - the screen you're going to see how we
04:25 - specify
04:26 - one parameter for our function I know
04:29 - that's a lot of text but we're going to
04:31 - jump into the playground and I will show
04:32 - you an example so you first start with
04:35 - the datatype let's start from the right
04:37 - hand and work our way to the left we
04:40 - start with the data type of the
04:41 - parameter and this merely specifies you
04:44 - know if it's an INT if it's a bool you
04:46 - know what type of data are you asking
04:49 - for to be input into your function right
04:52 - and take note that there is a colon in
04:54 - front of that and then in front of the
04:56 - colon you have your parameter name now
04:58 - you can specify any sort of name you
05:00 - want you're going to be using this
05:02 - parameter name inside your function if
05:05 - you want to access that data and then
05:08 - you have your argument label notice that
05:10 - there is a space in between the argument
05:12 - label and parameter name now what's the
05:14 - argument label for well it's optional
05:17 - and it helps your function call read
05:18 - more like natural English I'll show you
05:21 - what that means in a second for now why
05:23 - don't we jump back into the playground
05:24 - and take a look at how we specify this
05:27 - parameter all right so let's modify our
05:29 - add two numbers function up here with
05:32 - the parameter and before I use
05:34 - descriptive labels argument names and
05:37 - prior names I am going to just put arg
05:40 - here as our argument label and I'm gonna
05:44 - put space and then I'm gonna call this
05:46 - para for our parameter remember then we
05:50 - specify colon and then the data type of
05:52 - our parameter which is going to be int
05:55 - and the reason why I'm just specifying
05:58 - the argument label and the parameter
06:00 - name as these is because I want you to
06:02 - see what the resulting function call
06:05 - looks like so down here you can see
06:08 - Xcode automatically detects that this
06:11 - function call is no longer correct in
06:13 - order to call the add two numbers
06:15 - function you're now gonna have to
06:17 - specify that parameter so an easy way to
06:20 - do that is just to delete this and then
06:23 - use an autocomplete again and you can
06:26 - see here that now the function call has
06:29 - this which tells you the return type of
06:32 - the function now if the function doesn't
06:35 - return any data then you're going to see
06:37 - void in this column instead kind of like
06:39 - this
06:39 - down here but our add two numbers
06:42 - function does return an int so you see
06:44 - int here and then you can see the
06:47 - parameter that it requires right here as
06:49 - well along with the data type all right
06:51 - so let's double click that or just press
06:54 - ENTER on that and you can see that the
06:57 - argument label is right there and then
06:59 - this int here we can put a number in
07:02 - there let's put 5 so now this is how you
07:05 - would call add two numbers with one
07:08 - parameter and you're basically passing
07:11 - in 5 into the function from inside of
07:14 - the function let's say that we wanted to
07:16 - assign that 5 into a we would use the
07:22 - parameter name we're not using the
07:24 - argument label we're using the parameter
07:26 - name inside the function here so why
07:29 - don't we go print and the sum should be
07:32 - 7 right as you can see here now what if
07:35 - we wanted to specify another parameter
07:37 - so that we can also specify what B
07:40 - should be inside of our function well
07:42 - you can specify multiple parameters you
07:45 - would just have to use comma in between
07:47 - each parameter so let's take a look at
07:49 - that syntax now as you can see you have
07:51 - a comma and then you have your second
07:53 - argument label then you have your second
07:55 - parameter name and then the data type of
07:57 - that second parameter pretty
07:59 - straightforward and you can repeat this
08:00 - for 3 4 5 6 parameters whatever you need
08:04 - alright now let's jump back to the
08:06 - playground and specify another parameter
08:08 - for our function so we're gonna go ahead
08:10 - right here and hit comma and then now
08:12 - I'm going to say Arg 2 para 2 and that's
08:16 - going to be an int and now I'm going to
08:19 - assign para 2 to be and this function
08:25 - call will no longer be correct so I'm
08:28 - just going to erase that and retype it
08:32 - like that and you can see now I have to
08:35 - specify two arguments or parameters so
08:39 - I'm going to say 5 and 5 and the cool
08:42 - thing is that let me just go back there
08:43 - for a second
08:44 - is when you let's say you're specifying
08:48 - the parameters you hit 5 you can press
08:51 - tab to jump to the next
08:53 - parameter so that's a little shortcut a
08:56 - little tip for you there all right so
08:58 - let's print the sum and we've got ten
09:02 - okay cool so let me show you some other
09:05 - cool things I did tell you that argument
09:08 - labels were optional right so why don't
09:12 - we go ahead and remove the argument
09:16 - labels here and just have the parameter
09:19 - name and the data type so incorrect
09:24 - argument labels so why don't we let's
09:26 - get rid of that and just now when you
09:30 - make your function call you have to
09:32 - specify
09:34 - still two parameters right because we
09:36 - still have two parameters but with the
09:38 - absence of the argument label now it
09:41 - writes the parameter name so let's go
09:45 - five and five like that all right
09:50 - so generally when you're specifying
09:52 - parameters into your function you kind
09:55 - of want to be descriptive with them so
09:57 - para and para two really doesn't mean
10:00 - anything so why don't we change that to
10:03 - number one and number two and remember
10:08 - changing these parameter names it means
10:10 - that we also have to change this number
10:15 - one and number two and as a result this
10:23 - also changes
10:24 - remember oops okay so we can specify
10:31 - five and five so that's all good so far
10:34 - now that you notice that initially when
10:37 - we had the argument labels the function
10:40 - call was using the argument labels right
10:43 - but now that we've removed the argument
10:46 - labels from this function definition
10:48 - this has turned into the parameter name
10:50 - so if you had a need to make this read
10:54 - like more like natural English then you
10:57 - could specify argument labels to do it
11:00 - like that so for example I would I could
11:03 - say add two numbers and my
11:05 - first argument like label could be using
11:07 - and my second argument label can be end
11:10 - and that would become the function call
11:15 - would be something like that now all
11:20 - right add two numbers using five and
11:22 - five so it reads clearly and it's really
11:25 - understandable and inside your function
11:28 - when you're working with your code you
11:30 - still reference those parameters with
11:32 - the parameter name that was specified so
11:35 - you have number one and number two now
11:37 - another trick that you could do if you
11:39 - totally want to omit parameter names and
11:41 - labels from the function call and you
11:43 - just want to specify five and five then
11:46 - what you can do is instead of using
11:48 - argument labels like this you can just
11:50 - put an underscore in front of your
11:53 - parameter name there is a space in
11:55 - between that and your parameter name
11:57 - though so if you specify the underscores
11:59 - like that then your function call would
12:02 - look like this whoops not that one
12:07 - [Applause]
12:10 - numbers there we go now you just five
12:14 - and five and that now becomes your
12:17 - function call so just to recap you
12:20 - learned about what return values are you
12:22 - learned how to use the return keyword
12:23 - you learned about what input parameters
12:26 - are and how to specify them you learn
12:28 - about parameter names and you learned
12:30 - about argument labels and how to omit
12:33 - them altogether now I know it still
12:35 - might be confusing in your head and
12:36 - that's why I highly recommend that you
12:38 - use the exercises and challenges to
12:41 - practice more find all those resources
12:43 - in the link in the description below now
12:46 - if you enjoyed this lesson please hit
12:48 - the thumbs up in the subscribe button it
12:49 - really helps the channel
12:50 - alright now click on over to the next
12:52 - lesson I'll see you there