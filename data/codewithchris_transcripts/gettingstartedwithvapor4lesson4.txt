00:00 - In this video, I'll show you how to create
00:02 - two new routes in our Vapor API to update
and delete data in our database.
00:06 - We will then call those two
routes from the Swift UI iOS app.
00:10 - Let's get started.
00:12 - We are going to make the update
and delete route routes.
00:15 - So let's first make
a new function function.
00:32 - We will have a request that throws
00:36 - like the rest of them.
00:42 - We'll make a function called update,
00:44 - and it looks similar to the rest of them,
and it will return an event loop future
00:52 - and it will return an Http status
similar to the request.
00:58 - So if it works will return.
Okay.
00:59 - Otherwise it will return
some kind of error.
01:03 - The first thing we do when we get
01:04 - an update, we are going to be sending data
over from the iOS app from postman about
01:10 - the song that we are updating.
01:12 - So we have to first
01:13 - decode the song similar to how
we do it with the post request.
01:17 - So I'll just copy this
because it's the same.
01:20 - And then I'll also add
01:23 - a comment.
01:28 - So this is what the route
is going to look like.
01:30 - It will be a put request because that is
what it looks like when we do an update,
01:35 - that's the request type
and what we do when we do an update is
01:39 - we first look to see can we find the song
that we are going to update?
01:44 - And then we will update the data itself.
01:50 - What we do here is we first
query to find the song.
01:53 - So can we find the song that we give it
from postman or from our iOS app?
02:00 - And so we look for the
song based on its ID.
02:03 - And if we cannot find it,
02:05 - we will then row abort not found,
which is a 404 error and unwrap.
02:11 - So it's unwrap or meaning.
02:13 - Can we unwrap this value because
this returns an optional.
02:16 - If we look at find.
02:19 - If we click command,
click on that and then click quick help.
02:24 - We see it returns an optional.
02:26 - So if we cannot unwrap this so unwrap or
02:30 - we can't, we will return
four or four not found.
02:33 - But if we can, we continue
and we will flat map this.
02:37 - So the first thing we do is
02:39 - take the value and basically set because
there's like a pretend value here.
02:44 - We set the value of the title
property equal to our new song title.
02:48 - So that is the song here.
02:51 - And then what we do is we return
02:53 - the instance of updating it.
02:55 - So we take this new song
and update it on the database.
02:59 - And this update function really
is kind of just like saving it.
03:02 - So if we command click on that,
03:04 - that doesn't give us
any useful information.
03:07 - But really what we're doing is updating
03:10 - the value within the database for this one
03:13 - song, and if that all works out,
okay, we transform it to okay.
03:18 - And then let's write
the delete function as well.
03:24 - So this is our delete.
03:25 - And actually I messed
up the comma up here.
03:28 - It won't be slashsongsomething.
03:31 - It'll just be
03:33 - the slashsongswell.
03:34 - And then this
03:37 - is what this route will look like.
03:39 - So for delete, it will be
a delete kind of request.
03:41 - And we'll see that in post man in a minute
03:44 - and the route will look likesongid.
03:48 - And that's that UUID that we
have for our song model.
03:51 - So what we do with the delete function is
03:54 - we first use our song model,
03:56 - and we're using fluent to do this finding
and basically querying our database.
04:00 - So we do find and then we get the request
parameters and we called it song ID.
04:06 - So that's what this part will look like.
04:08 - So it'll besongs.
04:09 - And then that long ID number
from our database.
04:13 - We find it in this database.
04:15 - And then again,
we unwrap the value if we have it.
04:18 - Otherwise we're going
to throw a four or four.
04:21 - And what we do is a flat map,
and we dot delete for this database,
04:25 - and we're deleting that song
from the database.
04:29 - And then this is again a fluent
04:31 - function because we're using
our song fluent model.
04:35 - And if everything goes well with that,
we go ahead and transform it to.
04:39 - Okay,
04:41 - so let's go ahead and run this.
04:43 - But first we have to make
sure the database is running.
04:46 - So I'll use the Docker desktop application
rather than the terminal.
04:51 - So that was my testing one.
04:53 - Here is our actual API that's running.
04:55 - And then that is the database.
04:57 - So let's go ahead and just
click run or start.
05:02 - And then this is now starting up this
container and we can click on this row
05:08 - to see the terminal information
05:10 - as if we ran it from the terminal down
here and it says it's starting
05:14 - and we can check if this is working
using Azure Data Studio.
05:18 - Let's go ahead and open that.
05:22 - So we have Azure Data Studio.
05:24 - We're on the welcome page because we've
already connected to this database.
05:28 - We can see it in the
connections over here.
05:31 - But if we go and just double click on it,
05:33 - it brings up that list as if we
were connecting to a new server.
05:36 - But we have all the information
here because it saves it.
05:38 - I didn't check remember password,
05:40 - so it doesn't have it Typed,
doesn't have it auto filled in here.
05:44 - But if I go ahead and type it
05:49 - and click on connect.
05:51 - So now we have a green dot here,
meaning we're actually connected to it,
05:56 - and we should see something.
06:00 - There we go.
Took forever to load.
06:05 - Okay, so we have a green dot.
06:06 - So we're connected and I
double clicked on this.
06:10 - Usually it shows a list down here.
06:11 - I think mine still might be Loading,
06:13 - but we can go ahead and still click on the
Songs table and click Select Top 1000,
06:19 - but we know because we can
connect to the database.
06:21 - We know it's already up
and running with Docker.
06:23 - Otherwise we wouldn't have
been able to connect at all.
06:25 - So we see our two songs
that we have in here.
06:28 - Let's go ahead and now run our API.
06:31 - So we just go ahead and click the run
06:33 - button within Xcode, and we will need to
grab Postman as well to make our request.
06:45 - This build failed because
we did not call the function
06:49 - because you have to call the function
to be able to use the function.
06:53 - So we added our two routes
update and delete down here.
06:56 - But what we didn't do up at the top is
06:59 - actually put them in our boot
function so that we can use them.
07:08 - So there's another operation called Songs
put, and this is using our routesongs.
07:14 - So it groups that route right here
and then we have get and posts.
07:18 - But we also need to add the put,
07:20 - and then lastly, with the update,
it looks a little different.
07:25 - There we go.
Okay.
07:26 - I think those probably should be syntax
07:28 - highlighted, but my computer just
doesn't know how to do that,
07:33 - but we have our songstock group,
and we are grouping anything that has this
07:38 - ID on it, and we're going
to call the delete function.
07:41 - So what that is
07:43 - it will look like
07:45 - Songid.
07:47 - And then this is what that song ID is so
that the string is the same between these
07:54 - two
and what it looks like when we actually
07:56 - use it within postman it'll look something
like this is we have our URL,
08:01 - the route songs, and then this is
the idea that's in our database.
08:08 - So that is finally calling
our two functions.
08:11 - So we are calling to use Song delete,
08:13 - and we want to use our delete
function that we have down there.
08:16 - And then when we do a put request,
we use the update function
08:21 - right here.
So we should be able to run this now
08:25 - and that should go away.
08:27 - We
08:29 - still failed.
08:30 - Oh,
08:32 - I spelled parameters wrong.
08:34 - Okay,
08:36 - now let's run it again.
08:40 - This dialog comes up, click on.
08:42 - Okay,
08:45 - and our server is starting.
08:47 - So that is good.
08:49 - So let's test our update function first.
08:52 - So I have all these tabs because I've been
adding them and trying everything out.
08:57 - But we go ahead and you can click on a new
09:00 - tab or just use the one
that you've been using.
09:03 - So we need to change our request type
09:05 - from Get or post and change it to Put
because we're doing an update.
09:10 - So we have our URL right here.
09:13 - We have our songs route,
and then we click on the body
09:17 - properties, and we want to change this
to Raw and then change the type to JSON.
09:23 - So we type out our JSON model, which is
just the title and the ID.
09:28 - So let's update one of these
values, so we will need
09:33 - the ID and we'll need the title
that we want to change it to.
09:36 - So if we click on this row
and just click command C for copy
09:41 - and we fill that in right here
for the ID property.
09:46 - And then
09:47 - right now it says year 3000,
but we can change it to anything else.
09:51 - So let's change this from year 3000
and 2021, which is almost over.
09:58 - So let's change it to your 2022.
10:00 - So that's in the future
10:02 - or if you're watching this in the future,
it's now in the past.
10:05 - So if we change this,
let's go ahead and send our request.
10:11 - Okay.
10:11 - We sent our request and it
gives us back status 200.
10:15 - Okay, so that's good.
10:16 - That means we did the right thing
and everything worked,
10:19 - because right here we tell it to transform
everything to okay, if everything else was
10:24 - good and we can confirm that this worked
by going down to Azure Data Studio.
10:29 - So we click on Run and we see
our data down here for this ID.
10:34 - We change the title to year 2022
instead of being year 3000.
10:39 - So we know our update function worked.
10:42 - So now let's test our delete function.
10:44 - So we go back to Postman
10:47 - and I have a new tab called Delete,
10:49 - but all this is doing is really
just changing the type to delete.
10:54 - But for this one,
we do not need a body property.
10:56 - So if you're using the same one,
go ahead and select none here
11:00 - or just make a new tab and it
resets sort of everything.
11:04 - So this is an old ID I was using.
11:07 - But let's go ahead
and use one of these ID.
11:09 - So let's say
11:11 - we don't want your 2022 anymore.
11:13 - So copy the ID, go back into Postman
and just paste it into this URL
11:20 - and let's hit send.
11:24 - We got back 200.
Okay, so that's good.
11:26 - And we see in Vapor, there was our
Put request, and here is our delete,
11:32 - and we know how we coded it.
11:34 - If we got back 200, that means everything
was good and it was able to delete that.
11:38 - So let's go back to our Vapor database.
11:41 - Click on Run again.
11:43 - The only song that's left in our database
11:45 - is the Money song, and the year
2022 is now completely gone.
11:50 - So that part works.
11:52 - We have our API done.
11:54 - So we have our two new requests
for update and delete.
11:57 - And then we have verified that
11:59 - using Postman and Azure Data Studio
to check everything is working.
12:04 - Now let's go and write this
functionality in the iOS app.
12:09 - Let's make the iOS app.
12:11 - So first we want to update a song.
12:14 - So to do that,
12:17 - let's first run the project
to see what it looks like.
12:20 - And we don't have anything
12:21 - because we need to start in Grok,
and that's not from our iOS app.
12:26 - That is from the API side, so we can run
12:33 - in another tab or I'll just open
it into a different window.
12:36 - Over here.
12:40 - We are running the API on the left and we
12:42 - need to run in Grok, which I
run from the downloads folder.
12:48 - So CD just goes back to our root directory
and then I want to go to downloads
12:53 - inside of here.
We have ingrock, so I do
13:00 - ingrock 80 80, which starts up in grocery,
and we need to take this URL.
13:09 - Copy that and put it
into our constants file.
13:13 - Okay, let's paste this here
13:18 - because we're still committing this.
13:19 - It looks like we're changing it,
which is fine,
13:22 - but we need that URL there,
and we need to stop this
13:26 - from running and run it again.
13:29 - We should see our two values that we saw
that we saved earlier.
13:37 - I ran the project, but I forgot
13:41 - to add a slash onto it because
you can see the URL right here.
13:46 - There's no slash before we
have the slashsongs route.
13:50 - So I need to stop this and run it again.
We ran our project.
13:55 - We can see we do one get request and it
turns back a 200 and we see it in action.
14:00 - Our terminal over here
14:03 - so we know we are reading something,
but when we want to update a song,
14:07 - we had add or update song view.
14:11 - And this is presented.
14:14 - If we look at our song list here,
14:18 - this is presented when we tap on it.
14:21 - So actually right now
it'll just say selected.
14:23 - So
14:25 - if we go and just click tap on money,
14:28 - it just says selected,
which is not what we want.
14:30 - Now we want to show this and update it,
but we want to show not the add modal.
14:37 - We want to show the update modal.
14:40 - We did a lot of that set up in the last
video, so let's change this.
14:45 - We want to change the modal
property from add
14:51 - moduleequals
14:54 - update, and this will change this property
that our sheet is viewing here.
15:01 - This was on dismiss it's right here.
We do a switch.
15:04 - If it is update,
15:06 - we present the add updatesong view
and we give it the current song.
15:11 - So let's go and run this
and see if our view pops up.
15:21 - I think that's what autocomplete
is telling me modal needs a song.
15:26 - So we see the song right here
because we have to tell the next
15:31 - modal that's going to come up
what song we want to update.
15:34 - And then that is this song
for whichever one is actually selected.
15:41 - We run this and we see in the simulator.
15:42 - If we tap on money,
15:44 - we see almost everything is working.
15:47 - It fills in the word money,
and we have updatesong here
15:50 - and we see it says update rather than
saying add because it's presenting
15:55 - the right type of modal for which like
state that we want to use.
15:59 - But we need to write our update function.
16:02 - So let's go into the view
model of add updatesong,
16:06 - and we already wrote it here
16:08 - commented out because we knew we were
going to put the updatesong function here,
16:13 - but we haven't actually
made the function yet.
16:15 - So let's go and make it.
16:18 - Let's just put it right above here.
16:21 - Technically, personally,
what I would do is
16:24 - move this one up,
16:27 - move this one up here.
16:28 - So you would have the add update action
16:30 - would be called and below it,
the two functions that are called inside
16:34 - of it would be below,
but it doesn't really matter what order.
16:38 - Let's type our function.
16:52 - Okay, this is our update
16:54 - method.
17:11 - Okay.
Our update song method looks like this.
17:15 - We are creating our URL
similar to how we did
17:20 - and the one up here.
17:21 - And then we're doing the exact same thing
17:23 - right here as we are making our
URL into a URL object,
17:28 - and then we have our songs to update.
17:30 - So this would be this song right here.
17:33 - So we give it the song ID,
which is passed over from the last view.
17:36 - When we are passing where did it go?
17:39 - Song list
17:42 - right here.
17:43 - When we pass the song over,
it has an ID and it has
17:47 - a song title.
17:48 - So here's the song ID
that gets passed over and then song title
17:53 - whatever is Typed into
that song title text box.
17:55 - And we can see that if we go to the actual
17:58 - add song view.
18:01 - It's the song title right there.
18:04 - So we take that we make it into a song
18:06 - object, and we already have
created this send data function.
18:11 - So we know if we look at our client
18:14 - send data,
18:16 - it is using whichever
method that we specify.
18:20 - So back there we saw we did the put
18:22 - method, and here we're just passing
the JSON over, which is what we want.
18:28 - So we already wrote
the function that we have.
18:30 - All we had to do is implement
this function in a different way.
18:33 - So we implemented this
18:36 - in almost the exact same way as we do
an ad right here.
18:40 - But instead of using a post
and creating a new song,
18:44 - we use a put method.
18:48 - So let's try that.
18:49 - Now
18:50 - what is this complaining about
18:53 - again,
we need to Mark this with tryaweight
18:56 - because this function uses
the async await pattern
19:02 - and that should go away.
19:04 - So it uses async await.
19:05 - So we need to tell
19:07 - this function to use it in that way.
19:11 - Let's go ahead and rerun this.
19:14 - So we have the song called Money.
19:16 - What is a different song title?
19:18 - Let's change this completely
19:20 - to let's change it to how you like that,
19:34 - because you can see I like the
was that the band?
19:38 - Yeah, Black Pink, and they've been
stuck in my head for a while.
19:41 - So we'll change it to this.
19:42 - And if we click update song,
19:45 - we see it updates and how you like that is
19:48 - now here rather than the song Money
and we can even further conform
19:55 - confirm that if we go to
19:59 - Azure Data Studio, which I closed,
so we have to open it again
20:04 - and check the database to see if it says
20:07 - how you like that instead of saying Money
as the one record that is in there.
20:12 - So I'll go and connect to it and I didn't
20:14 - click Remember password,
so I have to type it again.
20:19 - Click on Connect.
20:29 - So once we load our database,
20:31 - we see the one record and the only
thing that's here is how you like that.
20:35 - So if we go to add a new song, just click
on the add button and type in a new song.
20:41 - We'll call this one Money
and click on Add song.
20:44 - Now we see both of them here.
20:46 - So if we go back to Azure Data Studio
and click on run again
20:51 - or I might just close this and open it
again because mine is having issues.
20:56 - Now we have both of our songs
and they have two different IDs.
20:59 - So we know both of those are working
21:01 - and we know the read function works
because we see them in the list.
21:05 - So that's all we had
to do to update the song.
21:07 - We just had to add this one function
21:09 - because all of the work that we
did in that last lesson
21:13 - set everything up for this one.
21:15 - So let's go now and create
the delete function.
21:19 - So let's stop the app and I'll
just move this out of the way.
21:24 - We need to go to the song list,
21:28 - and we are going to add
a delete modifier on this for each loop.
21:32 - So first let's actually write the function
21:34 - and we will write that
within our view model.
21:38 - So let's open the song list ViewModel.
21:42 - And instead of fetch songs,
let's make a new function for deleting.
21:46 - So what we are going to do is use
the delete function where it looks like
21:52 - right here on delete and then perform
21:55 - something that takes in and index that
so ours will be ViewModel delete.
22:01 - But let's actually write that.
22:08 - Okay.
We have almost certain everything.
22:10 - So we have offset
22:13 - and that's part of an index set
or the type of it is index set.
22:18 - And if we click on the quick help here,
22:21 - it shows us that this is a range,
because really you can kind of delete
22:25 - multiple things at once
when you use index sets.
22:28 - So what we're doing here is iterating
through all of the index sets.
22:32 - And
22:34 - actually this needs to go inside of here.
22:40 - Now we are
22:43 - going to iterate through every index set
22:45 - and delete each one in case there are
multiple how we are going to code it is
22:50 - there won't be multiple at once, but this
gives you the ability to do it that way.
22:56 - And then you can see we actually need
22:57 - to make a new function
for deleting because we can't use
23:01 - let me delete those.
23:04 - We can't use the ones that we've already
written because we have written fetch
23:07 - and we have written send data,
and neither of those do a delete.
23:12 - So we do need to make that new
function within our http client
23:17 - so we can use it here.
23:19 - And then this function delete
gets used inside of song list.
23:25 - Actually it's ViewModel delete,
23:29 - and we don't actually need the app
23:31 - or the parentheses just because
we're passing this function itself and it
23:35 - has the same signature
that this was expecting.
23:38 - So we don't need to type the little extra
characters there.
23:42 - But we do still need to make
our delete function within our
23:46 - http client.
23:53 - So here is our delete function.
23:55 - We make a new URL request object,
we make a new URL request object,
24:01 - and we set the method to delete,
and we define those methods up above.
24:05 - We use the new URL session
shared data instead of data tasks.
24:09 - This is the new async one
24:11 - and we give it a request and we are
getting back data and response.
24:15 - But how we have it coded.
24:16 - We're not actually getting back data
because we don't care what we get back.
24:20 - We just want back a response.
24:21 - So we're putting an underscore here
and then this is a tuple or a tuple.
24:27 - I don't really know how it's pronounced.
24:30 - So that's the object
that we're getting back.
24:32 - So
24:33 - we care about the response.
24:34 - So we have an underscore for the data,
24:36 - and then we take the response and try
to cast it as an http URL response.
24:41 - And if that all works,
we see if the status quo is equal to 200,
24:46 - and then if that is all good,
then this function is like over.
24:49 - Otherwise it would throw
an error that says bad response.
24:54 - So if we go back to our song list
view model and try to use this,
24:58 - we should now get autocomplete.
25:01 - There we go delete at ID.
25:03 - So we have the ID
25:05 - that we defined above for the song ID,
and then the URL is
25:12 - the URL that we defined here.
25:14 - So here this is putting
everything all together.
25:17 - Otherwise we could have made
first a URL string variable
25:21 - and then added this together.
25:23 - But just in this part I
decided to put it all
25:26 - on one line.
25:29 - So we have that and that should be it.
25:31 - And we can see in our song list on delete.
25:34 - When that action happens,
25:35 - we are performing our delete
function inside of this view model.
25:39 - So it's calling here.
25:41 - So let's go ahead and run the project
and bring over Azure Data studio.
25:46 - Okay.
25:47 - We have our two songs here
and let's just add a third.
25:53 - Just so we have kind of a few.
25:57 - They have a song called Stay.
So I'll click on add song.
26:00 - And so now we have our three songs,
but say we don't like how you like that.
26:05 - So if we do the swipe action of Swiping
left, that automatically comes because we
26:11 - define this on delete action here.
26:13 - So that just works automatically.
26:15 - So we have slide here.
26:16 - It tells us delete.
26:18 - We click on delete and it's still there.
26:20 - Oh, I know why it's there,
but I believe if we check our database.
26:27 - Okay.
So it has gone from our database,
26:29 - but it's still on the app that happened
because we did go about deleting it
26:34 - from the database,
and we saw that that happens right here.
26:39 - So we know our http client is working.
26:42 - What we did not do
26:44 - is inside of this whole delete function.
26:48 - We use offsets and deleted that.
26:51 - So we did this functionality all worked.
26:54 - But what we did not do was delete
it from our array of songs.
26:58 - So our view model
has all of our songs here
27:01 - and we didn't delete it out of this.
27:04 - So we need to just call
27:08 - remove
27:10 - offsets and pass in the variable offsets.
27:15 - So let's stop this.
27:17 - So basically the array
was still in memory.
27:20 - So that's why it came back, even though
in reality it wasn't there.
27:25 - Let's try to run this
again and see if it works.
27:28 - So if we go to add a new song,
27:32 - there's a song called Kill This Love.
27:34 - So if we add this song,
so now we have our three songs here.
27:38 - But let's say we want to delete stay.
27:42 - There we go now that is deleted.
27:44 - And what we should see here is
just money and killed us last.
27:48 - So I'm going to close this tab and open it
27:49 - again because I think
mine is having an issue.
27:53 - And there we go we just
see these two songs.
27:56 - So there are the UIDs and the two songs
that we have and that we see in our app,
28:02 - and that is it.
28:04 - We are able to successfully
update these songs and delete them.
28:07 - And in total, we can do all four options
of crud of create read, update and delete.
28:15 - And there we go we have made two new
routes to update and delete data with our
28:20 - vapor API, and we use those
routes in our iOS app.
28:24 - Be sure to like and subscribe and tune
28:26 - in next week when we
deploy our API to Heroku.