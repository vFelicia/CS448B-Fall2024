00:00 - hello and welcome we are well into our
00:02 - card match app and as you can see in
00:04 - this lesson we'll be working on the
00:06 - actual collectionview cell by the end of
00:08 - this lesson you'll have the images
00:10 - displaying in the cell and you'll be
00:12 - able to tap on the cells to flip them it
00:14 - might seem simple but we actually have a
00:16 - lot to cover so let's get started
00:17 - alright so we're back in Xcode and just
00:20 - to remind you guys the last thing that
00:21 - we did was we set up the delegate and
00:24 - the datasource for the collection view
00:26 - so that we can show all of these cells
00:27 - now all of these cells are the same
00:30 - thing it's basically just showing a
00:32 - static image of the card back what we
00:35 - actually need to do is we need to set
00:38 - the card front for each of these cells
00:42 - and let me remind you in the storyboard
00:46 - here for this prototype cell that we
00:50 - have you can see the card back here we
00:51 - actually had two image views inside of
00:54 - it one of them is the back image view
00:57 - which is what you see here and then we
00:59 - also have the front image view which is
01:01 - not set to an image yet actually this
01:04 - particular one is set to card one but
01:06 - you can't see it because it's behind the
01:08 - back of the card so let me also remind
01:12 - you that this prototype cell that we
01:14 - gave this identifier called card cell we
01:17 - made this an instance of card collection
01:20 - view cell which is a custom class that
01:22 - we created over here and this is a
01:25 - subclass of the standard UI collection
01:28 - view cell the reason why we sub clausten
01:31 - and created our own customized
01:33 - collection view cell is because we want
01:35 - to add additional functionality to it
01:37 - now as you can see we've already
01:39 - established two iboutlet properties
01:42 - connecting those UI image views the
01:44 - front and the back and we're going to
01:47 - have some methods here that we're going
01:49 - to use to manipulate which one gets
01:51 - shown so there are a couple of things
01:54 - that we need to set in this card
01:55 - collection view cell for example we need
01:59 - to have another property that is going
02:01 - to keep track of which card this cell is
02:04 - supposed to display so I'm just going to
02:07 - call this property card and I'm going to
02:10 - make it an optional because initially
02:13 - it's gonna mean
02:14 - nothing is going to be set to it and
02:16 - we're going to create another method in
02:18 - here called set card and it would pass
02:23 - in a card into that method like that and
02:29 - actually let us put an underscore there
02:33 - so that when this method gets called we
02:35 - won't have to specify that label there
02:38 - and another method we're going to have
02:41 - is Flip and this method is going to flip
02:46 - from the back image view to the front
02:49 - image view so that whatever card is
02:51 - being displayed in here is going to be
02:54 - visible furthermore we're going to have
02:56 - another one called flipping back and
02:59 - this is going to flip from the front to
03:02 - the back image view all right so let's
03:06 - implement the set card first so the card
03:09 - that gets passed into this cell is the
03:11 - one that we want this cell to represent
03:15 - into display so we're going to keep
03:16 - track of it first by assigning this
03:19 - parameter that gets passed in to the
03:22 - property and since they're both named
03:24 - card we are going to need to
03:27 - differentiate between the two in order
03:29 - to do that we can use the self keyword
03:32 - to refer to this property right here
03:35 - self refers to the card collection view
03:38 - cell dot card this references this
03:42 - property right here so we're going to
03:44 - set the parameter that gets passed in to
03:48 - the card property of the card collection
03:51 - view cell keep track of the card that
03:56 - gets passed in so the next thing we're
04:01 - going to want to do is to set this front
04:04 - image view to the card image now this
04:07 - card that gets passed in is a part of
04:09 - the card class the card class has an
04:13 - image name property that is going to
04:16 - contain the image asset name so we can
04:19 - set that we can set the image view to
04:22 - that so we're going to do a front image
04:24 - view dot image
04:26 - is equal to and this property let me
04:29 - show you again this property takes in a
04:32 - UI image object so we have to create a
04:35 - UI image object and when we are creating
04:40 - this UI image object there actually is a
04:43 - initializer method that we can use where
04:47 - we can pass in a string of the image
04:50 - file that we want to use so that's
04:53 - perfect because we can just pass in card
04:55 - dot image name and sometimes this method
04:59 - that we use to create this UI image
05:01 - object may result in the nil if this
05:04 - image name doesn't exist and so in that
05:07 - case the front image view wouldn't be
05:10 - displaying an image so if you flip a
05:14 - card and you don't see the image you
05:16 - should just double check what the image
05:18 - name is and see if it matches the asset
05:21 - names in your asset library you can see
05:23 - that we have lowercase C a Rd followed
05:27 - by a number from 1 to 13 so the next
05:31 - thing we have to do is to actually call
05:33 - this set card method on each of the
05:36 - cells if we jump into the storyboard let
05:40 - me let me remind you that this prototype
05:44 - cell is a type of card collection view
05:46 - cell all right I've mentioned that a
05:48 - couple of times already well that's
05:50 - going to be to our benefit if we scroll
05:53 - down here in our view controller when
05:56 - the collection view asks the view
05:58 - controller for a cell to display a
06:01 - particular item in the grid we're using
06:04 - this DQ reusable cell method to return a
06:08 - cell with the identifier card cell well
06:12 - I just showed you in the storyboard that
06:13 - we set that prototype cell to be a type
06:16 - of card collection view cell so when
06:20 - this method gets this cell back with the
06:23 - card cell identifier it's actually a
06:25 - type of card collection view cell all we
06:29 - need to do in this case is cast it as a
06:33 - card collection view cell because that's
06:35 - what it is
06:36 - now the reason why we have to do this
06:39 - casts
06:39 - is because DQ reusable cell doesn't know
06:43 - anything about any of the custom classes
06:45 - that we create in this project this is a
06:47 - method in the UI collection view class
06:50 - inside UI kit so we have to tell it that
06:53 - the cell that you got back with this
06:56 - identifier is actually a type of card
06:59 - collection view cell so we can use the
07:01 - as keyword to to indicate that and this
07:05 - exclamation mark is just to indicate
07:06 - that it for sure we're very confident
07:10 - that it's going to be a card collection
07:12 - view cell because the other thing that
07:14 - you can put here instead of an
07:16 - exclamation mark is a question mark and
07:18 - when you do that it's kind of like
07:19 - you're trying to cast that object as a
07:23 - card collection view cell if it turns
07:25 - out that it's not that type it will
07:27 - actually just the whole thing will be
07:29 - nil and it's gonna get assigned to cell
07:32 - right here but because we are very
07:34 - confident that it is going to be that
07:36 - type and the cast will be successful we
07:38 - are going to use an exclamation mark
07:40 - like that okay so now take a look at
07:43 - this cell here is a type of card
07:49 - collection view cell because we cast it
07:51 - as a card collection view cell right
07:53 - here that means that we can access that
07:56 - method that we just created called set
07:59 - card and then we can pass in the card
08:01 - well how are we going to get the card
08:03 - well we do have the card array right
08:07 - that contains all of the card objects we
08:10 - just need to know which card in that
08:13 - array to assign to the cell remember I
08:16 - said this index path parameter tells us
08:19 - which cell the collection view is asking
08:22 - to display that's how we're going to get
08:25 - that card so here we're gonna say let
08:27 - card equal to card array right the array
08:31 - works on a set of indexes and we are
08:34 - going to pass in index path dot row
08:38 - remember I said there was a rope
08:40 - property in the next path that indicates
08:43 - which item it's trying to display well
08:46 - we're going to grab that card so if it's
08:47 - trying to display the very first card
08:50 - row is going to be 0 and that's
08:52 - perfect because card array zero is the
08:56 - first index of the array and so we're
08:59 - going to assign that to card and then
09:00 - we're simply going to pass card into the
09:02 - set card method of the card collection
09:06 - view cell and that is going to if we
09:09 - jump to that that is going to set the
09:13 - front image view dot image to that
09:16 - card's image so hopefully that's still
09:20 - making sense let me just write some
09:22 - comments here so that we're clear try or
09:26 - not try but get a card cell or get a
09:34 - card collection view cell object get the
09:44 - card that the collection view is trying
09:50 - to display and set that card for the
09:56 - cell now if I run it you're still going
10:01 - to see only the card backs even though
10:04 - we have set the front image view and the
10:06 - reason for that is because the front
10:08 - image view is hiding behind the back
10:10 - image view we now need to implement the
10:13 - flip method in the card collection view
10:16 - cells so that when we tap on the card we
10:18 - can call that flip method and we can
10:20 - flip over the cards all right so let's
10:22 - do that in the card collection view cell
10:27 - class right here for flip there's a very
10:31 - easy way to transition between two UI
10:34 - elements like we have here front image
10:36 - view and back image view and that is
10:38 - actually a type method of the UI view
10:41 - class called transition so there are a
10:44 - couple of them be careful which one you
10:46 - use we're going to use this one with the
10:49 - from parameter to parameter you can
10:51 - specify duration in some options and
10:54 - also what happens when they're completed
10:56 - so you can see here in the description
10:59 - creates a transition animation between
11:00 - the specified views using the given
11:02 - parameters so let's choose that one
11:06 - for this flip method we're flipping from
11:08 - back to front so in the from view we are
11:11 - going to put the back image view
11:14 - pressing tab to jump to the next
11:16 - parameter the to view is the front image
11:20 - view duration is going to be specified
11:24 - in seconds so I'll have zero point three
11:26 - in here and in the options there are
11:28 - actually a couple of options we want to
11:31 - set the first one is how that animation
11:34 - is going to appear or what type of
11:38 - animation want to use there's a couple
11:40 - of predefined ones I'm going to press
11:42 - dot and that is going to allow me to
11:45 - choose transition flip from the left
11:50 - okay we also want to specify another
11:55 - option in addition to how it looks there
12:00 - is another option that dictates that the
12:05 - one that you transition from should be
12:07 - hidden so let me show you how to specify
12:10 - multiple options you basically have to
12:12 - pass in an array with the options so
12:15 - let's put this particular option into an
12:18 - array by putting these square brackets
12:21 - on and then pressing comma like that to
12:25 - specify a second element in this array
12:27 - I'm going to press dot again and don't
12:32 - transition show/hide transition views so
12:37 - hide or show views during a view
12:39 - transition now that means that the view
12:42 - that it transitions from is just going
12:44 - to be hidden instead of completely
12:47 - removed from the view hierarchy okay and
12:50 - completion is we can specify a block of
12:54 - code here that we want to run when the
12:56 - animation is complete we don't really
12:58 - have any need to do this so I'm just
13:00 - going to put nil in here alright and
13:03 - that's basically it
13:04 - now in the flip back method we are going
13:07 - to do the same thing except it's going
13:09 - to be reversed the from parameter is
13:12 - going to be the front view and the two
13:13 - parameter is it going to be the back
13:15 - image view but there's also something
13:17 - special that we
13:18 - have to do for the flip back we want to
13:21 - delay it a little bit so the user has a
13:23 - chance to see what card it is before we
13:25 - flip it back so I'm not gonna implement
13:27 - this method just yet instead I want to
13:30 - go back to the view controller and
13:31 - handle the did select cell at or did
13:35 - select item at method so that we can
13:38 - actually start flipping cards over when
13:40 - you tap them so let's jump back to the
13:41 - view controller and in here collection
13:46 - view did select item at it also gives
13:50 - you the index path that was selected
13:52 - that index path is going to be key
13:55 - because it tells us which cell was
13:56 - actually selected so in order to call
13:59 - the flip method of a cell we need to get
14:02 - a reference to the cell that was
14:04 - actually selected and we're going to use
14:06 - the index path to get that luckily for
14:09 - us the collection view actually has a
14:12 - method called cell for item where you
14:16 - pass in an index path that's something
14:18 - we have already and you get back an
14:20 - optional UI collection view cell now the
14:23 - reason it's optional is because it could
14:25 - be nil and also take note that it
14:28 - returns a basic UI collection view cell
14:32 - we know that our cells are not just
14:35 - standard UI collection view cells in
14:37 - fact our cells are our customized card
14:40 - collection view cells right so we need
14:43 - to cast the result of this method to
14:45 - card collection view cell so let's do
14:50 - this first
14:51 - in next PATH we're just going to pass in
14:54 - the index path and we need to assign
14:57 - this to something so again let's create
14:59 - a constant called cell let's cell equals
15:02 - that and we again are going to use the
15:04 - as keyword to cast the result you know
15:07 - cast the cell that it gets back as a
15:09 - card collection view cell all right so
15:15 - now we can flip the cell or flip the
15:19 - card and we can call cell dot flip let's
15:24 - take a look at that to see if it's going
15:26 - to work
15:29 - there we go now nothing happens we
15:34 - haven't really implemented the code to
15:36 - do matches and kind of take it away and
15:39 - we also didn't implement any code to
15:41 - only have unique pairs so that's why you
15:43 - see some of these the pairs are the same
15:47 - alright so you at this point you should
15:49 - be able to flip all of them and see when
15:52 - I click them again or when I tap on them
15:54 - again we get the same transition the
15:58 - reason is because whenever the user taps
16:02 - on a cell or selects a cell we just call
16:05 - flip and it always just flips from back
16:07 - to front so instead what we have to do
16:09 - is determine if the card has been
16:11 - flipped already and I don't know if you
16:14 - remember but in the card class we have
16:16 - this property called
16:18 - is flipped which is true or false and
16:20 - that is going to determine whether we
16:23 - should call the flip or the flip back
16:26 - methods of the card collection view cell
16:30 - so why don't we first get a reference to
16:34 - the card that the user selected so we
16:39 - did this before in the other method but
16:43 - we are going to access the card array
16:46 - because that contains all of our cards
16:48 - and the index that we need is indicated
16:53 - inside the index path row okay so that's
16:57 - going to give us the card that the user
16:58 - selected get the card that the user
17:02 - selected oops here get the cell that the
17:08 - user selected so now that we have a
17:11 - reference to the card object we can
17:13 - check and use an if statement if the
17:15 - card is flipped is true then we probably
17:21 - wouldn't want to call the flip but if it
17:25 - is false then we do want to flip it up
17:30 - like that actually what we're going to
17:33 - check first is if it's not flipped if
17:37 - it's not flipped
17:39 - then we want to flip it up and otherwise
17:44 - if it is already flipped why don't we
17:46 - flip it back for now even though we
17:50 - probably wouldn't actually do this as
17:54 - part of the game but it's going to be
17:57 - fun to be able to flip the card front
17:59 - and back so let's implement it let's go
18:03 - back to the card collection view cell
18:05 - and you know how I said that when the
18:08 - card flips back there would be a delay
18:09 - we're going to implement that delay in a
18:12 - couple of lessons later when we actually
18:13 - have the logic of the game working at
18:16 - this point why don't we just simply flip
18:19 - it back so that you can test out your
18:22 - code to see if you can flip it from
18:24 - front to back okay so we're going to
18:28 - flip from the front image view to the
18:31 - back image view duration is 0.3 again
18:34 - and for the animation options
18:38 - let's do flip from the right this time
18:42 - comma show/hide transition views and
18:45 - when it's completed we also put in nil
18:48 - like that okay so I'm going to run the
18:52 - project so when we flip it you should be
18:58 - able to top it and actually this is
19:02 - interesting because I forgot to do one
19:04 - thing you can see I can't flip it back
19:07 - all right the reason is because I forgot
19:09 - to set this property of the card when we
19:14 - flip it up we have to set is flip to
19:17 - true so that we can remember if it was
19:22 - flipped up or not so after we determined
19:24 - that it hasn't been flipped and we do
19:27 - flip it we should probably set the card
19:31 - is flipped to true notice that we're
19:34 - using a single equal sign for assigning
19:37 - a new value whereas when you're
19:39 - comparing you use these two equal signs
19:41 - set the status of the card and likewise
19:46 - here when we flip it back
19:49 - of the card card dot is flipped is false
19:55 - okay now we run in okay there we go
20:08 - now before we end the lesson there's
20:10 - still one more thing we need to
20:11 - implement and it has to do with the
20:14 - collection view reusing its cells now I
20:17 - mentioned to you before that the
20:19 - collection view is very efficient
20:20 - because right now only about 8 cells are
20:23 - visible right so it's not going to
20:25 - display the bottom two rows but as soon
20:29 - as I start scrolling like this you see
20:31 - how that top row is scrolled out of view
20:34 - well those four cells are actually going
20:37 - to be reused the next time it needs
20:39 - cells so as I'm scrolling here and I'm
20:42 - revealing the bottom row this fourth row
20:44 - it is probably reusing cells from that
20:48 - very first row that are now completely
20:50 - out of view right so it reuses those
20:53 - cells and what that means is let me
20:56 - actually show you what the problem is
20:58 - let's say I reveal these two cards so
21:00 - for these two cells I have set it so
21:03 - that the front image view is visible in
21:06 - the back image view is invisible right
21:10 - however when I scroll these cells out of
21:13 - view these two in particular it's going
21:15 - to attempt to use those cells to display
21:18 - the rows at the bottom potentially so it
21:22 - didn't happen this time
21:22 - but let me scroll back up and so it's
21:25 - going to display in new cells so you can
21:28 - see here that the cell it was using in
21:31 - this position before now it has used
21:34 - that instead to display this cell right
21:38 - I didn't flip over this card this cell
21:40 - before was over here right so that is
21:44 - part of the problem what we need to do
21:47 - is just modify our set card method to
21:52 - reset everything so it kind of erases
21:54 - the old state of the cell because
21:56 - keeping in mind that it can be a reused
22:00 - cell and not a completely new one and so
22:03 - what we need to
22:04 - do in this case is first determine
22:07 - determine if the card is in a flipped up
22:14 - state or flipped down state and the way
22:18 - we're going to determine this is
22:20 - basically using we probably don't have
22:23 - to use self we're going to access this
22:26 - is flip property right so if is flipped
22:30 - is true then we probably want to be
22:33 - displaying the front image view else we
22:38 - want to display the back image view so
22:41 - this one is make sure the back image
22:44 - view is on top and this one is make sure
22:49 - the front image view is on top so we can
22:58 - use transition again this one is from
23:03 - the back image view to the front image
23:07 - view duration I'm going to put 0 because
23:09 - I want it to happen immediately so this
23:12 - one will be a transition flip from the
23:14 - left and the show/hide transition views
23:17 - and completion is nil and I'm moving a
23:22 - little bit fast because we we did this
23:24 - before in the flip and flip back methods
23:28 - now in this case we want to make sure
23:30 - that back image view is on top so we
23:32 - want to flip from the front image view
23:34 - to the back image view duration is 0
23:37 - options open up an array Godot show/hide
23:41 - transition views it doesn't really
23:43 - matter what order you specify these
23:44 - options we can flip from the left
23:47 - duration is 0 anyways specify nil so now
23:51 - let's run the project again now what
23:55 - happens here is that when we call set
23:57 - card it's going to make sure that even
24:01 - if it is a reused the cell it doesn't
24:03 - matter what state that cell was in
24:05 - because we are going to determine
24:08 - whether we should put the back on top or
24:11 - the front image on top so let's test
24:13 - that out
24:14 - all right and I'm gonna scroll down just
24:17 - roll up your scroll down so we are
24:20 - reusing cells right now each time these
24:24 - two cells get scrolled out of view
24:25 - they're being reused for some cells down
24:28 - here and when I scroll back up to reveal
24:32 - those cells there are some cells at the
24:35 - bottom that are out of view now being
24:37 - reused for these cells up here it looks
24:39 - like everything is good all right so now
24:42 - we have the cards flipping in this
24:44 - lesson you learn how to do some
24:45 - animations you also learned about
24:47 - closures which are basically blocks of
24:49 - code like a function except that it
24:51 - doesn't have a name associated with it
24:53 - like a function does you also learn how
24:55 - to delay the execution of code now the
24:58 - next step is to add some logic to our
25:00 - app so that when the user flips open two
25:02 - cards we can determine what's a match
25:04 - and what isn't if you're enjoying this
25:07 - series so far please let me know in the
25:09 - comment section below and if you liked
25:11 - this video please hit that red subscribe
25:13 - button and if you don't want to miss the
25:14 - next one hit that Bell icon as well
25:16 - thanks for watching I'll see you guys in
25:18 - the next lesson