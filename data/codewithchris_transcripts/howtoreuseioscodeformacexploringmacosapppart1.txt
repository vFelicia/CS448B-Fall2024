00:00 - hello and welcome it's chris here in this 
three-part video series my friend flo is  
00:04 - going to help us compare mac os app development 
versus ios app development you're going to see  
00:10 - what things you can use across the two platforms 
as well as what is specific to the mac os platform  
00:16 - now i think you're going to learn a lot and 
i think you're going to really enjoy yourself  
00:20 - so make sure you stay tuned next week for part 
two and if you like flow's teaching style make  
00:26 - sure you check out his youtube channel flow rights 
code all right enjoy learn about how you can bring  
00:32 - your existing swift ui skills to the mac hey call 
crew this is flo this is the first lesson of the  
00:41 - swift ui on mac os mini course in this lesson we 
will cover the different approaches of writing  
00:47 - macos apps with swift ui have a look at how we can 
share code between the different operating systems  
00:53 - and how certain components might behave a 
little bit different so first of all i have  
00:59 - already prepared a little example project for this 
lesson because we will not actually be writing any  
01:04 - code today i will just show you how things work 
which things behave differently which things are  
01:11 - exactly the same as you might have already known 
them from ios development so first of all the  
01:17 - general principles of swift ui and the development 
environment are exactly the same you are still  
01:22 - using views you still have v-stacks navigation 
views lists and so on everything behaves exactly  
01:30 - the same so you basically write the exact same 
style of code other things like the environment  
01:36 - user defaults and call data also behave exactly 
the same across the platforms of course there  
01:42 - are some limitations for example health kit just 
isn't available on the mac which is available on  
01:47 - ios but most of the other things are exactly the 
same now there is one major difference between ios  
01:54 - and mac os development and that's the underlying 
framework of switch ui so as you probably know  
02:00 - on ios swift ui is built on top of ui kit so if 
you have to step down into something it's usually  
02:07 - view representables that you have to 
write or ui view controller representables  
02:11 - where then inside you create some ui views for 
example for a photo picker or stuff like that  
02:18 - now on the mac there is no ui kit 
so it just simply doesn't exist  
02:22 - the native framework for the mac is called 
app kit and it's actually very similar to ui  
02:27 - kit with the main difference being the naming 
so instead of creating ui view representables  
02:33 - you will be creating ns view representables 
so where in ui kit the prefix is always ui  
02:40 - in app kit the prefix will always be ns for next 
step that company that steve jobs founded and then  
02:47 - was later bought back by apple so you have to keep 
that in mind when you use some ui kit hacks for  
02:52 - example in your swift ui app for ios they will 
not work and they won't even compile on mac os  
02:58 - just because your ik doesn't exist there so 
you can transfer all your skills with the  
03:03 - view representables just make sure that you 
use the ns version instead of the ui version  
03:10 - for this next section let's have a look at 
how you can actually create a mac os app  
03:16 - so of course you create a new project in xcode 
as always but now there are basically three  
03:21 - different options for you to choose from 
the first option is to create a standalone  
03:27 - macos app this is the standard option if you just 
want to create a mac os app that shouldn't be run  
03:33 - on any other operating system so if you want to 
create an app that only runs on the mac and not on  
03:39 - for example an ipad or an iphone then you 
should choose the mac os tab and then select app  
03:46 - another option is to create a multi-platform app 
this will basically add two targets to your app  
03:53 - first the ios target to run your app on iphones 
and ipads and then also the mac os target to run  
04:00 - your app on the mac with this approach you can 
share a lot of your code but you still have the  
04:06 - option to write some specific code or some files 
that are only inside of one of the two targets  
04:13 - so if you select multi-platform here at the top 
tab bar and then app you will have a project  
04:19 - with a shared folder this is where most of your 
logic maybe your database access your services  
04:25 - most of your views will live in this shared 
folder but then you will also have a folder for  
04:30 - ios specific code and for mac os specific 
code and then the last option is mac catalyst  
04:38 - so in this case you will just create an 
ios app so select ios in the tab bar here  
04:44 - and then app below and this will allow you 
to enable the catalyst environment what that  
04:51 - basically does is it allows you to write a regular 
ipad app so an app that runs on the iphone and or  
04:58 - the ipad but it has to run on the ipad with 
swift ui and you can also use ui kit for that  
05:03 - and then this will be translated into a 
catalyst app that can be run on the mac  
05:09 - so if you really just don't want to 
dive into all that ns and app kit stuff  
05:14 - you can just still use your swift ui and 
ui kit knowledge and build a catalyst app  
05:19 - now i will repeat here the important part is 
that a catalyst app needs to include the ipad  
05:25 - not only the iphone let's have a look inside xcode 
and see how you can select all of these things  
05:32 - so for example in this project that i prepared 
it's a multi-platform project so there is a  
05:38 - shared folder here and also a mac os folder now in 
this case there is no ios folder because there are  
05:44 - just no ios specific files right now but if you 
but if you had to create some ios specific code  
05:50 - you would then also have an ios folder let's 
get into the project file and there you can see  
05:57 - on the left hand side here in the left panel there 
is an ios target for the swift ui on mac app and a  
06:04 - mac os target i have actually done something very 
interesting for this project and i have enabled  
06:10 - catalyst and a native mac version of the app so 
the macos target here is basically the native mac  
06:19 - os target but if we switch to the ios target 
and then have a look here at the center pane  
06:25 - then you will see that i have selected the ipad as 
a deployment target and i have also activated mac  
06:32 - catalyst what this does is it gives me 
two options to compile and run this app  
06:39 - in reality you would probably never do this 
usually either you use catalyst or you create  
06:45 - your own macos target both at the same time 
really only make sense right now for this video  
06:50 - so i can show you the differences between them 
okay so since we have two targets in this project  
06:56 - if we click on the scheme manager here we can 
select either the ios target or the mac os target  
07:02 - as i said mac os target plain mac os project 
can only be run on the mac native application  
07:10 - but since i have selected catalyst in the ios 
target i can even run the ios target on my mac now  
07:17 - so if i just select my mac mac catalyst here then 
i can just run the ios app on my mac like i would  
07:25 - run any other mac app so it's important for you 
to understand the differences between the three  
07:30 - approaches either you create a standalone mac app 
or you create a multi-platform app where you share  
07:37 - code between mac os and ios but you also have 
specific files to either of those targets  
07:44 - and then the third approach via the ipad app 
and my catalyst turns on now i have already  
07:51 - created a few views for this example app 
because i want to show you the differences  
07:56 - between a catalyst app and a plain mac app so let 
me run both of them and show you the differences  
08:03 - okay so i'm starting with the native mac app and 
let's have a look at how all of the inputs behave  
08:11 - there how the navigation view behave there the 
titles and so on so you can see here the app is  
08:18 - running we have a navigation title at the top 
swift ui on mac this is just the apps title  
08:25 - then we have a default screen here you have to 
pay attention when you're developing mac apps  
08:31 - because the navigation view actually behaves 
the same as on the ipad where you always have  
08:35 - a sidebar and a main view it's not the same as 
on ios or on iphones where you have a navigation  
08:42 - stack where views get stacked on top of each other 
so on mac os we have just a simple text here a  
08:49 - navigation link and then another text here we will 
get into how this text came about in just a second  
08:56 - and then we also have our sidebar here where 
we can navigate either to this second tab  
09:04 - or to the first tab where i have just prepared 
a few of the standard switch ui input elements  
09:09 - because those are the things that actually behave 
pretty differently from case to case from ios to  
09:15 - macos so i have some buttons with button styles 
border button style or the prominent button style  
09:24 - there is a toggle there is a picker and 
you can see on mac os the standard picker  
09:29 - is like a pop over menu then i also have a date 
picker here a color picker which opens up this  
09:39 - little window all of these are default elements 
of swift ui on the mac and then i also have this  
09:45 - little slider and a stepper that's connected 
to the same value as the slider basically
09:53 - so keep in mind how all of these look 
and now we will jump into the mac  
09:56 - catalyst version of the 
app and see the differences
10:02 - okay so the catalyst version of the app is now 
running and there are some immediate differences  
10:07 - for example the sidebar now doesn't have that 
translucent background effect so with the mac os  
10:13 - native app you always have that standard sidebar 
with the translucency where you can somehow see  
10:19 - a blurred version of what's behind the window this 
is not the case in catalyst apps because that just  
10:24 - doesn't exist on the ipad basically a catalyst app 
is just an ipad app compiled to be run on the mac  
10:33 - okay so you can see already a bunch of differences 
the navigation bar looks a little bit different  
10:41 - the navigation link here looks a little bit 
different you can see that this text label  
10:45 - here also has a different content but as i 
said i will show you that in just a second  
10:50 - we also have this little toggle here on the 
left hand side to open and hide the sidebar  
10:56 - which is not there by default on the mac then we 
also have a navigation title here in the sidebar  
11:03 - and then we have both of our navigation links so 
the first one to that destination two basically  
11:10 - the same as before but the title once again 
behaves differently from the mac version  
11:16 - and then that input screen looks 
really different in my opinion  
11:20 - let me make that a bit bigger so you can see 
the button styles are similar but different  
11:27 - so here's the border button style and the border 
prominent button style they don't have that 3d  
11:33 - like effect as they had in the macos version the 
toggle also is completely different it's actually  
11:39 - a toggle whereas on mac os it was more like a 
check box the picker has a completely different  
11:46 - style compared to the mac of course you can 
set the picker style to be a menu picker style  
11:51 - but by default it will just have a different 
behavior the date picker also looks different the  
11:58 - color picker is really huge for some reason but 
it still opens the same color picker window here  
12:06 - and then the stepper also looks a bit different 
but the slider is pretty much the same  
12:13 - so what you should take away from these 
two examples is you can create a catalyst  
12:19 - version of your app and run it on the mac it will 
probably work just fine but some of the standard  
12:24 - input elements will have a different appearance 
or sometimes also different behavior the last  
12:30 - thing that i want to show to you in this lesson 
are preprocessor macros as i already told you  
12:36 - when you have a multi-platform app you can share 
your code between the ios and the mac os code base  
12:43 - now some things are just not possible to share 
because ios doesn't have app kit and mac os  
12:49 - doesn't have ui kit so things like ui color just 
don't exist on the mac there is an equivalent  
12:55 - ns color but it's not the same so you can't 
write exactly the same code for some of these  
13:00 - things what you can do however is use preprocessor 
macros to determine which part of your code is run  
13:08 - on which platform so in this example i have added 
a check for the platform so if the os is mac os  
13:17 - then the text on our first view on that content 
view screen shows i'm running on mac os and if  
13:23 - it's not os mac os then it shows i'm not running 
on my qs now let me run both of my targets again  
13:31 - and show you a very interesting difference okay 
so now i have selected the native mac os target  
13:37 - in xcode and here you can see the text table will 
say i'm running on mac os because we had that  
13:45 - preprocessor macro check here if the os is 
mac os then say i'm running on mac os this  
13:53 - makes sense it is a mac os app so let's try the 
same thing with the catalyst version of the app
14:01 - okay so now i have run the catalyst version 
and as you can see the text label says i'm  
14:07 - not running on mac os and this is the subtle 
but very important difference catalyst is an  
14:13 - ios app run on the mac so the app itself uses all 
of the ios specific code it is still using ui kit  
14:21 - in your code which then gets compiled into apkid 
probe i don't know exactly how that works but here  
14:26 - you can see the main difference between a macos 
target and a catalyst target it's just not the  
14:31 - same you can write very similar code but it will 
behave differently okay so in this lesson you  
14:38 - got an overview of what working on macos apps 
with swift ui really means he learned about  
14:44 - catalyst versus native apps and how to share code 
between supported platforms in a single code base