00:00 - hello and welcome to my Swift tutorial
00:01 - series for beginners in this video I
00:03 - want to talk to you about initializer
00:05 - methods for classes these guys exist to
00:08 - make sure that when you create a new
00:10 - object of your class that that object is
00:12 - ready to go plus you can customize these
00:15 - initializer methods to set up your
00:17 - object in any way that you want when you
00:19 - create a new object from your class
00:21 - alright so let's get started and see
00:23 - what that all means so what I've got
00:30 - here on the screen is the playground
00:32 - that we created back in the classes part
00:34 - two lesson when we're talking about sub
00:36 - classing just to remind you we have a
00:39 - person class and then we have an
00:41 - employee class which is a subclass of
00:43 - that person class and then we have a
00:46 - manager class which is a subclass of the
00:49 - employee class so now that I've jogged
00:51 - your memory about what we have here why
00:53 - don't we create a new personal object do
00:57 - you remember how to do that first of all
00:59 - you use the class name followed by two
01:01 - around in parentheses right let me show
01:03 - you let's do it here person two rounded
01:09 - parentheses and just like that we've
01:11 - created a new person object well what
01:14 - you might notice is that this kind of
01:15 - looks like a function call right
01:17 - remember to call a function you write
01:20 - the function name followed by two
01:22 - rounded parentheses and in any input
01:24 - parameters in between those parentheses
01:26 - in this case right here a person with
01:30 - these two around parentheses you
01:32 - actually are calling a function of that
01:34 - class now I know that might seem weird
01:37 - because if you scroll up to the top here
01:39 - we don't have any functions that cleared
01:41 - in the person class right well there's
01:44 - actually a initializer function that is
01:47 - default to all classes that you don't
01:49 - have to declare and let me show you what
01:52 - it looks like because you can explicitly
01:54 - declare it so if we were to explicitly
01:57 - declare the initializer function of the
02:00 - person class it would be using the
02:02 - keyword in it followed by two rounded
02:05 - brackets followed by these curly
02:07 - brackets and you can put any sort of
02:10 - initialization code in here
02:13 - let's say custom in knit code also
02:17 - notice that for this special initializer
02:20 - function you do not need the fu NC
02:24 - keyword that we normally use to declare
02:26 - functions this is an initializer
02:29 - function so let's say for example I put
02:32 - in here that I want the name property to
02:35 - be Joe right and now if I create a new
02:40 - personal object I say let my person
02:44 - equals new person object what's actually
02:46 - happening here when I call this it is
02:50 - creating a new personal objective but
02:52 - it's using this init function here right
02:56 - and it's actually setting this is
02:57 - running this custom code so to prove it
03:00 - to you
03:00 - why don't we print out the name right
03:04 - after creating that object so you can
03:06 - see here it says Joe as the name now the
03:09 - initializer function is useful for you
03:12 - to put any custom code you want in there
03:15 - to setup the object if you don't specify
03:18 - an init function at all like what we had
03:21 - before then it's still there you can
03:24 - still create new objects from that class
03:26 - and that's actually what the purpose of
03:29 - the initializer function is for it's to
03:32 - set up a new object of that class you
03:34 - know allocated memory do whatever it
03:37 - needs to do to return that object to you
03:39 - ready to use now here's the interesting
03:41 - thing about initializer functions so we
03:44 - can have our basic one but we can also
03:47 - have different ones which accept
03:49 - parameters for example let me show you
03:51 - this we can accept a parameter called
03:54 - name let's make it a string like that
03:59 - and then we can also have our basic one
04:02 - that we had before like that so we can
04:05 - have multiple initializer functions
04:07 - let's go back down here now I can create
04:11 - a person object with the basic
04:13 - initializer function which doesn't do
04:15 - anything and when I run this code it
04:17 - doesn't print anything out because I
04:20 - haven't written anything in that init
04:21 - function however don't forget that I
04:24 - created another
04:25 - which accepts a name so this time I can
04:29 - put in a name like that if I print it
04:35 - not doing anything right now did I oh I
04:38 - don't did I do it yeah my bad I didn't
04:41 - do anything in here so now what I wanted
04:44 - to do inside this initializer function
04:47 - was to set the name property to the name
04:51 - input parameter that got passed in here
04:53 - now I could write something like this
04:57 - where I'm trying to set this property
04:59 - right to the name that gets passed in
05:02 - but as you can see it's a little bit
05:04 - ambiguous Xcode is telling you that
05:07 - there's an error but it's not
05:08 - recognizing that I'm trying to set this
05:11 - property it thinks I'm trying to set
05:12 - this parameter to that parameter so what
05:16 - you can do in this case to resolve this
05:18 - ambiguity is to use the self keyword so
05:22 - you can write something like that self
05:24 - dot name and when you do this this is
05:27 - referring to that object's name so this
05:32 - is basically referring to this property
05:35 - here and now this name is from this
05:39 - parameter so it's very clear what you're
05:42 - trying to do here all right so let's run
05:46 - this code again and you can see that
05:49 - this time it prints Tom now let me ask
05:52 - you another question
05:53 - since the employee class subclasses the
05:57 - person class that means that the
06:01 - employee class also inherits all of its
06:03 - functions from the person class right do
06:06 - you think that this employee class also
06:08 - has these init functions
06:10 - why don't we give it a try go back down
06:12 - here let my employee equals employee and
06:18 - as you can see the employee class does
06:21 - have this init function that it
06:24 - inherited from the person class so I can
06:28 - use this with the employee class as well
06:30 - so that's pretty cool now I want to talk
06:33 - about overriding init function
06:35 - you know just like how we talked about
06:37 - right here where the manager class
06:40 - overrides the do work function of the
06:43 - employee class and then it calls super
06:47 - do work which is going to execute the
06:50 - employees do work function as well as
06:53 - you know any code down here the same
06:55 - thing applies for init functions so
06:59 - let's say that we have in the person
07:04 - class we have this init function right
07:05 - where you pass in the name let's say for
07:08 - the employee class I wanted to do
07:10 - something extra I wanted to override in
07:16 - it so we're gonna override the same
07:20 - function from the person class you know
07:23 - we're overriding this guy right here I
07:26 - also want to initialize the role so I'm
07:28 - gonna do self role let's default
07:31 - everyone to analyst or something like
07:34 - that all right
07:35 - everyone starts off at the analyst level
07:38 - however what I can do is call this
07:45 - person's or sorry I call the super
07:49 - classes init function and pass the name
07:52 - into there so this this is calling the
07:58 - init function of the person class this
08:08 - is additional indented code all right so
08:14 - now by calling this an it where I pass
08:20 - in the name of the employee like if I
08:24 - print my employee dot role and my
08:31 - employee name so you can see that it's
08:38 - set to analyst and then set to Joe here
08:40 - so what I wanted to demonstrate here was
08:44 - that even within it functions you can
08:46 - use the override keyword and provide
08:49 - a custom implementation of that
08:52 - initializer function and then also call
08:55 - the super classes implementation as well
08:58 - so I hope that was clear if it's not
09:00 - just leave a comment below and I'll be
09:01 - happy to clarify things for you alright
09:05 - later on we'll dive a little deeper into
09:06 - initializer methods and we'll talk about
09:09 - how there are two different types one
09:11 - called designated and one called
09:12 - convenience initializers if you enjoyed
09:15 - this video please give it a thumbs up
09:16 - and please subscribe if you haven't
09:18 - already all right now click on over to
09:20 - the next lesson and we'll talk there