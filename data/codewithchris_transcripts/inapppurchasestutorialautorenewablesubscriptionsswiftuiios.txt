00:00 - hey code crew in the last swift ui
00:02 - revenue cap video i showed you how easy
00:04 - it is to let users make purchases
00:06 - in your app well in this lesson i want
00:08 - to show you it's just as simple to offer
00:10 - in-app subscriptions
00:12 - revenuecat makes integration and
00:14 - analytics a cinch
00:15 - but before we dive into that let me ask
00:17 - you a quick question have you tried to
00:19 - integrate in-app purchases to your app
00:20 - before is this going to be your first
00:22 - time
00:22 - let me know by leaving a quick comment
00:24 - below and on your way down there please
00:25 - give this video a thumbs up it really
00:27 - helps so thank you
00:28 - all right now let's take a look at how
00:30 - we're going to do this
00:32 - because we've done some of the work
00:34 - already in the previous lesson this is
00:36 - going to be pretty simple
00:37 - it's only going to take three steps
00:38 - number one we have to create the
00:40 - subscription product
00:41 - inside app store connect number two we
00:43 - have to add this
00:44 - subscription product to our revenue cad
00:46 - account and number three we just have to
00:48 - add a couple of code snippets to our
00:50 - xcode project
00:51 - to pull down the subscription info and
00:53 - then to process the
00:54 - transaction now just in case you missed
00:57 - the last video where we
00:59 - created our app inside app store connect
01:01 - and uh signed up for our revenue cad
01:03 - account and added the
01:04 - revenuecat sdk into our xcode project
01:07 - don't worry you can still go through
01:09 - this video
01:10 - however i will provide a link on screen
01:12 - and below in the description
01:14 - if you want to check out that previous
01:15 - video and watch me do those things in
01:18 - detail
01:18 - all right with that said let's go into
01:20 - step one creating the subscription
01:22 - product inside app store connect
01:25 - all right so here i'm in my app store
01:27 - connect account and in the previous
01:29 - lesson
01:30 - we had created an app listing for our
01:33 - demo
01:34 - and we had gone down to the manage
01:36 - portion of in-app purchases and added a
01:39 - couple of
01:40 - one-time purchases this time we're going
01:42 - to add
01:43 - an in-app subscription so let's go ahead
01:45 - and click this
01:46 - little plus icon and choose auto
01:48 - renewable subscription
01:50 - this is the most common type of
01:52 - subscription i think that
01:54 - you'll find and it's the one we're used
01:56 - to you know with netflix and spotify and
01:58 - all of that
01:59 - here we're going to add a reference name
02:01 - and a product id before we do this i
02:03 - do want to mention that revenuecat has
02:05 - an amazing piece of documentation to
02:07 - guide
02:08 - you through this process with a lot of
02:09 - best practices
02:11 - now to save you some time i'll highlight
02:13 - those best practices as we do it
02:15 - together here
02:16 - but i do still think this is worth a
02:18 - read if you're going through it
02:19 - for the first time so i'll make sure i
02:21 - put this link in the description below
02:23 - the video
02:24 - alright so the reference name is just
02:26 - your internal name for
02:28 - your reports so here i'm going to put
02:30 - com mind
02:32 - this is all access
02:36 - monthly and
02:39 - for the product id now this one's pretty
02:41 - important because these product ids
02:43 - identify your in-app purchase across
02:45 - your entire account across all of your
02:47 - apps
02:48 - and even when you remove this app that
02:51 - product id that you've used before
02:53 - is now taken up and you can't repeat it
02:56 - and so
02:57 - it really helps to have an organized
03:00 - system
03:00 - for your product ids the system that
03:03 - revenuecat recommends
03:04 - is to have your app name or maybe some
03:08 - sort of
03:08 - sku or app id so i'm just gonna put cm
03:13 - followed by underscore followed by
03:17 - the the price of this
03:20 - subscription so i'm going to make this
03:24 - let's make this a 14.99
03:27 - followed by underscore followed by the
03:29 - duration
03:30 - of the subscription so this would be one
03:32 - month and following that if you had any
03:34 - sort of trial or introductory period
03:37 - you could put another underscore and
03:38 - then the duration maybe one week
03:41 - and the price of that so maybe like 99
03:44 - cents or something like that
03:46 - um but for this one i'm not going to
03:47 - have that so i'm just going to leave it
03:49 - as this product id let's click next
03:52 - next thing to do is to add it to a
03:55 - subscription group
03:56 - so as you can see here i already had
03:59 - created a subscription group
04:01 - during my testing but i'm going to
04:03 - create a new one too
04:04 - to show you what that is now a
04:07 - subscription group
04:08 - is exactly like it sounds it groups
04:10 - together different subscription products
04:12 - that unlock the same level of access so
04:15 - the best example would be
04:17 - if you had let's say a monthly and an
04:20 - a yearly subscription so two different
04:22 - durations but they unlock the same
04:25 - tier or same level of access you can put
04:27 - them into the same subscription group
04:29 - again this is a reference name so this
04:31 - is internal later on we're going to have
04:33 - to configure a public facing name
04:35 - so for this internal name i'm just going
04:37 - to call it
04:39 - command all access
04:42 - because i've already used pro access so
04:44 - let's go ahead and create that
04:46 - and then we're going to get to
04:47 - configuring our subscription
04:49 - now there are only a couple of pieces of
04:51 - information so number one
04:53 - is the duration so this this one is the
04:56 - monthly let's go ahead and choose
04:57 - one month and let's set some pricing
05:01 - actually let's hit save first because
05:04 - these are
05:04 - treated as independent steps and it's
05:06 - going to prompt you to save anyways
05:08 - so i'm going to choose my currency and
05:11 - i'm going to choose
05:11 - 14.99 does that exist yes all right
05:15 - let's click
05:15 - next and here it's going to convert that
05:19 - currency
05:20 - and tell you what the equivalent would
05:21 - be for the different countries and
05:23 - regions
05:24 - now you can adjust the pricing as you
05:25 - wish for
05:27 - each of these places i'm just going to
05:29 - go with the flow here
05:30 - just click create all right
05:34 - i have to save again otherwise it's
05:35 - going to prompt you to
05:37 - then i'm going to click back and
05:41 - we're going to add localization so here
05:44 - you can sort of set the text and what
05:46 - gets displayed
05:47 - depending on the different regions and
05:49 - countries and
05:50 - this is what the user is going to see
05:53 - this is
05:54 - what's going to show up for your
05:56 - subscription name
05:57 - and this is going to be the description
05:59 - for that now you might be tempted here
06:01 - to put something like
06:02 - you know all access monthly 14.99 and
06:06 - put all of this information in here
06:08 - but actually all of that becomes
06:10 - redundant when it gets combined
06:12 - with the app name the subscription group
06:16 - name
06:17 - and all of that so you really need to
06:19 - know the context of how this
06:20 - subscription
06:21 - name is going to be displayed we just
06:23 - checked the documentation real quick
06:25 - because i
06:26 - found this image so useful in the
06:27 - documentation
06:29 - when the user goes to modify their
06:32 - subscription or check the status of it
06:34 - this is how they're going to see the
06:35 - information so you have app name
06:38 - then you have the group name and then
06:40 - you have the subscription name
06:42 - and then you have price and duration and
06:44 - then down below
06:46 - under options and it's sort of cut off
06:48 - here you can see
06:49 - that it's going to be the subscription
06:52 - name
06:53 - followed by brackets and then the
06:55 - duration in there and then the price
06:57 - and i assume that you would be able to
07:00 - switch
07:01 - to a different subscription in the same
07:03 - group right below it
07:04 - so if you had like the yearly access you
07:07 - would see that there
07:09 - that's why you can see in the
07:12 - subscription display name it's redundant
07:14 - to
07:14 - also put the duration and the price
07:17 - definitely bad idea to put the price
07:19 - because
07:20 - that's different for every single user
07:21 - so you don't want to embed the price in
07:23 - the name
07:24 - you can see from this example that their
07:26 - group name
07:27 - is ocean journal subscription and their
07:31 - subscription name is all access there's
07:34 - no mention of duration or price
07:36 - so i'm going to follow the same practice
07:38 - here
07:40 - and i'm going to put all access and then
07:44 - i'm going to say unlocks all x unlocks
07:46 - all content
07:49 - now if i had a yearly subscription
07:51 - product i would put the same thing here
07:54 - right in fact that's one of their tips
07:55 - that they recommend here
07:57 - if you read it i'm not going to read it
07:59 - out to you but it basically says
08:01 - for for all of the subscriptions in the
08:04 - same group
08:05 - just have the same name because that way
08:08 - under options here it's going to say
08:10 - all access and then the duration
08:13 - and then underneath it's going to say
08:14 - all access and then like your yearly or
08:17 - you know another duration all right so
08:20 - let's go back here
08:21 - let's save this and then before we can
08:24 - test this
08:25 - we have to submit some or add some
08:28 - review information because we're not
08:29 - actually submitting this for review yet
08:31 - but one of the things we have to add is
08:33 - a screenshot
08:35 - and i'm going to put a placeholder image
08:37 - here i created this in the previous
08:39 - lesson so you can check that out
08:41 - if you if you missed that for some
08:43 - reason so here's the placeholder
08:45 - screenshot
08:46 - i'm going to hit save
08:50 - and it's still going to say missing
08:52 - metadata
08:54 - but it says you must add
08:58 - yeah so what we're missing is if you go
09:01 - into subscription groups
09:03 - remember how we created that all access
09:07 - subscription group this one right here
09:10 - we only specified an internal reference
09:13 - name we haven't specified yet
09:15 - a public facing name so let's go ahead
09:17 - and click this
09:18 - and add okay
09:22 - so this is the public facing
09:24 - subscription group name
09:26 - let's go back here and check out what
09:29 - that is
09:30 - so again the first piece of information
09:32 - is app name
09:33 - and then the group name and then the
09:35 - subscription name so
09:37 - for the group name they put ocean
09:39 - journal subscription
09:41 - and then uh below that for the actual
09:44 - subscription is all access
09:46 - so i am going to put here
09:50 - call mine subscription and then
09:53 - for the app name display option i'm
09:56 - going to use a custom name
09:59 - rather than specifying the app name
10:02 - because a lot of the times when you
10:04 - do app store optimization you're going
10:06 - to be cramming some keywords and things
10:08 - that you want to rank for
10:10 - in the app name so obviously that's not
10:12 - stuff that you would want
10:14 - in this screen here when the user is
10:17 - looking at the subscription
10:18 - so i'm going to use a custom name and
10:20 - just simply put
10:21 - what the app name is intended to be
10:25 - let's hit save okay now this
10:28 - subscription group
10:30 - is ready to submit i think that might
10:33 - have been the actual subscription though
10:36 - and then down here our subscription uh
10:39 - right here still says missing metadata
10:40 - but sometimes it hasn't picked up yet so
10:42 - i would
10:43 - simply refresh the page and just double
10:45 - check that
10:48 - it's ready to submit all right see
10:52 - we just have to refresh the page alright
10:53 - so this is ready to submit now
10:55 - now we can add it to our revenue cad
10:57 - account so just in case you don't have
10:59 - your revenue cat account yet you can
11:01 - visit
11:02 - codewithchris.com rcat2 that's going to
11:05 - bring you to this page
11:07 - it's just going to let the team know
11:08 - that you guys are interested in more app
11:10 - monetization content i don't get
11:12 - compensated for any account signups or
11:14 - anything like that
11:15 - if you have your account created from
11:17 - the previous lesson definitely use that
11:18 - to log in
11:19 - otherwise you can try for free and
11:21 - create an account
11:23 - you won't get charged or anything like
11:25 - that and it's free to use up to ten
11:27 - thousand dollars
11:28 - in monthly revenue so that's quite
11:29 - generous
11:31 - after you have your account in here
11:32 - you're going to want to add app and then
11:34 - add your app
11:35 - we've done this in the previous lesson
11:37 - so let's click
11:38 - on mine too and if we go into products
11:41 - you'll see that
11:42 - we have two one-time purchase products
11:46 - this time however we're adding a
11:48 - subscription
11:49 - product the process is the same but
11:52 - we're gonna have to do one more
11:53 - configuration which is to add an
11:55 - entitlement before we get there let's
11:58 - just
11:58 - add our subscription product first let's
12:00 - click new
12:02 - and then let's add that identifier so i
12:05 - kind of remember it from
12:08 - memory
12:10 - but it's going to be
12:14 - this one right here and that's going to
12:16 - be your product id and you can see i
12:17 - didn't use that for subscriptions
12:20 - but for a subscription you definitely
12:22 - want to do that
12:24 - and select store let's go app store and
12:27 - click add
12:28 - all right so now we have our product
12:30 - easy zero entitlements
12:32 - so what are entitlements well it's an
12:35 - easy way for us to check
12:37 - whether a user is entitled to
12:40 - a certain level of access so in this
12:42 - case for our meditation demo
12:45 - we unlock all access so
12:49 - let me create a new entitlement in this
12:51 - section right here
12:52 - click new and we're going to call it all
12:55 - access
12:58 - unlocks all content so that's my id
13:02 - for my entitlement this is what i'm
13:04 - going to be checking
13:05 - in my xcode project in my app so if i
13:08 - want to determine
13:10 - if a user has all access then
13:14 - i'm going to make sure that any
13:16 - subscription that
13:17 - unlocks all access has that entitlement
13:21 - configured so for this subscription
13:23 - product let's go and add the new
13:25 - entitlement to it
13:27 - okay that's not where we do it sorry
13:30 - about that
13:30 - we go into entitlements and then we're
13:33 - going to add products to it instead so
13:34 - let's go ahead and click into here
13:36 - and we're going to attach all of the
13:39 - products
13:40 - that would unlock this level of access
13:43 - so let's go to attach
13:45 - and let's go ahead and select our
13:47 - subscription
13:49 - and there we go if we had multiple
13:51 - subscriptions
13:52 - like maybe a yearly
13:56 - subscription we would also attach that
13:58 - here because all of those subscription
13:59 - products
14:00 - unlock this tier this all access
14:03 - tier now offerings is something special
14:06 - as well but we're going to talk about
14:08 - that in the next lesson
14:09 - and that's pretty much all we have to do
14:11 - here now before we jump into xcode to
14:13 - allow users to purchase it
14:15 - i do want to mention one thing just in
14:17 - case this is the first video you're
14:19 - jumping into
14:20 - and you haven't set up your app yet
14:22 - because you need to go into settings
14:24 - here
14:25 - and you need to add your app bundle id
14:29 - as well as your itunes connect shared
14:31 - secret
14:32 - this is what allows revenue cat to go
14:35 - into app store connect here and fetch
14:37 - the information it needs
14:39 - so you would go ahead and click this and
14:41 - then generate
14:42 - a secret key and then you would go back
14:44 - to your settings and you would just add
14:46 - that right here
14:47 - and this bundle id is from your xcode
14:49 - project if you want to see me
14:50 - do this step by step then definitely
14:52 - review the previous lesson in this
14:54 - series
14:55 - all right with that said let's jump into
14:57 - our xcode project and allow users to
14:58 - purchase our new subscription
15:01 - all right so here we have the xcode
15:02 - project for our meditation app demo i'm
15:05 - going to do a quick recap just so we're
15:06 - all on the same page so first of all we
15:08 - added the revenue cat
15:10 - sdk to our xcode project using cocoapods
15:13 - in the last lesson you'll see me go
15:14 - through those exact steps so feel free
15:16 - to revisit that
15:17 - if you've forgotten and then in our
15:20 - entry point here
15:21 - we have created a net method here and we
15:26 - basically imported the purchases
15:28 - framework up here
15:31 - in line 9 and then we called the
15:32 - configure method passing in our api key
15:35 - now this api key is from our
15:38 - revenue cat app in the dashboard as you
15:40 - can see right here
15:42 - okay so with that out of the way let's
15:45 - review
15:46 - how this buying process works because
15:49 - purchasing the subscription is actually
15:51 - the same way that we purchase a one-time
15:54 - purchase
15:55 - um just to remind you this is the
15:57 - details screen for
15:58 - looking at a single meditation now this
16:00 - buy button here
16:03 - uh calls our viewmodel
16:06 - dot make purchase and passes in the
16:09 - meditation that the user is looking at
16:11 - so if i go into that method you'll see
16:13 - that we call
16:14 - this other class purchase service dot
16:17 - purchase and we pass in the product id
16:20 - for the meditation
16:21 - now this purchase service is something
16:23 - that we created
16:24 - and this is the actual revenue cat code
16:28 - so what are we doing here really it
16:30 - starts right here with the revenue cap
16:32 - purchases framework
16:34 - you import that purchases framework and
16:37 - then you get the singleton instance
16:39 - and then you call dot products to fetch
16:43 - an sk product this stands for store kit
16:45 - product
16:46 - based on a product id so this is
16:49 - actually going to fetch
16:50 - that information from app store connect
16:52 - basically how you've
16:53 - configured that product and it's going
16:56 - to pull that information down it's going
16:57 - to look for that product
16:58 - so after that call is made when it
17:00 - returns first of all we check that we
17:03 - did find a product and if we did
17:05 - then we're going to get a reference to
17:07 - it from here
17:09 - and then we're going to call another
17:11 - method in the revenue cat purchases
17:13 - framework
17:14 - so this is the method we call purchase
17:17 - product and we simply
17:18 - pass in that store kit product and
17:21 - we're going to get a response back with
17:23 - a lot of info
17:24 - transaction purchase info error and if
17:26 - the user canceled or not
17:28 - and then right here we're simply running
17:30 - our
17:31 - logic to unlock that purchase
17:34 - for the user inside of our app now that
17:37 - bit is going to be different for your
17:38 - app
17:39 - simply because your logic is going to be
17:40 - different from my logic
17:42 - but really the revenue cap parts of this
17:45 - is
17:45 - first to fetch the sk product and then
17:48 - to actually process that transaction
17:50 - this is exactly the same thing for
17:53 - a subscription so we would pass in the
17:56 - product id for the subscription instead
17:58 - and then it would process that so
18:00 - processing the transaction for
18:02 - the purchase is just one side of the
18:04 - equation on the other side we also have
18:06 - the check
18:07 - access right we have to check if the
18:09 - user has a paid subscription
18:11 - is it active and does he or she have
18:13 - access to all of the content
18:15 - well remember in revenue cat we had
18:18 - created this entitlement called
18:20 - all access so when the user buys that
18:24 - subscription it's going to
18:27 - unlock that entitlement or make it
18:29 - active for them
18:31 - so inside of our app we just need to
18:34 - check
18:35 - to see if they have an active
18:38 - all-access entitlement so the way we do
18:41 - that
18:41 - is where should we do this ourselves
18:44 - so we would do this in the
18:47 - in the meditation model in this case and
18:49 - in here we can
18:51 - check if the user has access
18:54 - um to a subscription or has
18:59 - an active subscription
19:03 - so again we would use the
19:06 - purchases framework from revenue cat
19:10 - and we would say purchases
19:14 - dot shared dot
19:18 - purchaser info
19:24 - okay and if i hit enter it's going to
19:26 - open up this closure
19:28 - so we get back two parameters when we
19:30 - fetch the purchaser info for the user
19:33 - it's going to have this purchaser info
19:35 - object and it's
19:36 - also going to have error so here let's
19:39 - call this
19:40 - purchaser let's just call this info and
19:43 - call this
19:43 - error so inside here check
19:47 - the info parameter
19:51 - for active entitlements
19:58 - yeah so if info dot
20:02 - active subscriptions but what we're
20:04 - really looking for
20:05 - are entitlements here see the
20:07 - entitlements attached to this
20:09 - purchaser info because with this one
20:13 - this is searching for
20:16 - specific active subscriptions so we
20:19 - would have to check against
20:20 - okay does he does he or she have an
20:22 - active monthly subscription
20:24 - or does he or she have an active yearly
20:27 - subscription
20:28 - or do they have this description and
20:29 - that and you're checking against these
20:30 - individual product ids
20:32 - whereas if we use revenue cat and we're
20:35 - just attaching
20:36 - all of those subscriptions to this
20:38 - single entitlement
20:39 - then all we need to do is just check if
20:42 - they have an
20:42 - active all access entitlement and that
20:46 - makes it
20:46 - way easier especially when you're
20:48 - introducing different pricing options
20:50 - and
20:51 - discounted offers but you know all of
20:53 - those things
20:54 - unlock the same level of access you can
20:56 - just
20:57 - add them all to this entitlement and
20:59 - check that so
21:00 - we're going to say uh entitlements
21:04 - uh active actually this might not be
21:08 - the correct method let me just dive back
21:11 - into the documentation
21:13 - uh this is by the way this is really
21:15 - useful they have
21:16 - such good documentation under
21:19 - subscription status here
21:20 - get purchase info this was what i was
21:22 - looking at
21:23 - earlier so with this purchaser info
21:27 - object
21:27 - you can get the entitlement information
21:32 - all right so for example here
21:35 - checking if a user is subscribed the
21:38 - purchaser info.entitlements and then you
21:40 - can pass in
21:41 - the id of your entitlement so for us
21:44 - that would be all access
21:45 - so let's go ahead and do that
21:54 - let me just double check if this was a
21:56 - boolean
21:59 - is active so you gotta check the extra
22:02 - flag there
22:11 - you know to do and this would be unlock
22:13 - all access
22:15 - for the user
22:18 - so that's it this is the other side of
22:20 - the equation
22:22 - so if you're going to make a purchase
22:23 - for a specific subscription
22:25 - all we need is the product id here
22:29 - this one right here and then we can go
22:31 - ahead and use
22:33 - this method to look up the
22:36 - store kit product and once we get a
22:38 - reference to that
22:40 - we can use the purchase product method
22:42 - to actually process that transaction
22:45 - which would then unlock the entitlement
22:48 - or flip it active
22:50 - you know according to what we configure
22:51 - on the dashboard side
22:54 - and then to check access we would just
22:57 - need to
22:58 - get the purchaser info for the user and
23:01 - then check
23:01 - that they have an active entitlement
23:05 - and then we go ahead and unlock
23:07 - everything for the user
23:09 - now in terms of where you put these code
23:11 - snippets and
23:12 - what to do afterwards like how to unlock
23:14 - all the content for the user
23:16 - that's all going to be dependent on your
23:18 - own app so it's really
23:20 - hard for me to show you those specific
23:22 - details
23:23 - especially because this is just a demo
23:26 - app so for the rest of this video i will
23:28 - implement it for this demonstration app
23:31 - but just know that
23:32 - if you were building your own app that
23:34 - you were planning to put into the app
23:35 - store
23:36 - you probably wouldn't do it the way that
23:38 - i'm doing it right now because
23:39 - all i'm because there's no database
23:41 - there's no user directory i'm not saving
23:44 - uh you know what the user has unlocked
23:47 - in a database somewhere
23:49 - for them to you know retrieve later on
23:52 - this is all to demonstrate really how
23:54 - easy it is to process transactions and
23:57 - in-app purchases
23:58 - with the revenue cap framework and then
23:59 - also how to
24:01 - check if the users have active
24:02 - subscriptions so that you can
24:04 - unlock the content okay so with
24:08 - that caveat out of the way let's
24:11 - implement it
24:12 - for this demo app and unlock everything
24:14 - for the user
24:16 - once they have bought a subscription so
24:18 - to recap how this works
24:20 - so far in this demonstration app we have
24:22 - a dictionary
24:23 - that just indicates
24:27 - because we do allow users to purchase
24:29 - single meditations
24:31 - so this dictionary keeps track of which
24:33 - meditations the user has unlocked the
24:35 - string
24:36 - is the meditation id and boolean
24:39 - is just whether or not they have access
24:41 - to that so in the detail view
24:43 - let me resume this this buy button only
24:46 - shows up
24:46 - when it checks that dictionary and sees
24:49 - that the user hasn't bought this before
24:52 - with the subscription we want to unlock
24:54 - everything so
24:55 - i'm going to create an additional flag
24:58 - here
25:01 - and call it all access
25:05 - and i'm going to initially set it to
25:06 - false and basically if the user has an
25:09 - active subscription i'm just going to
25:10 - flip this true and
25:12 - we're not going to show any buy buttons
25:14 - because they have access to everything
25:16 - so when the user
25:19 - when the user has this entitlement i'm
25:21 - going to set this flag
25:23 - to true
25:29 - like that and furthermore in the detail
25:33 - view
25:34 - i am going to i'm going to say
25:38 - if the user has not purchased this
25:41 - meditation
25:43 - and they do not have
25:47 - all access you know all access equals
25:50 - false
25:51 - then show this button i'm also going to
25:55 - add
25:55 - a second button here so i'm just going
25:57 - to copy this
25:59 - actually i'm going to copy copy this
26:04 - and this button is going to be
26:08 - if the user doesn't have an
26:11 - all-access subscription i'm going to
26:13 - show a button that says buy
26:15 - subscription
26:20 - and that's
26:25 - let me see if there's something wrong
26:36 - here
26:43 - okay
26:46 - i'm not exactly sure why that's failing
26:48 - to build let me just build the project
26:50 - and
26:51 - okay build succeeded so anyways we
26:54 - should see a button as soon as that
26:56 - starts to work but um let's just process
26:59 - this subscription so what are we going
27:00 - to do when the user taps on that buy
27:02 - subscription button well
27:04 - right here we're calling model.make
27:06 - purchase and passing in that specific
27:08 - meditation right
27:09 - well i'm going to make another method
27:12 - here
27:14 - instead of make purchase i'm going to
27:16 - say
27:17 - this one's going to be make
27:20 - subscription purchase
27:25 - and seeing as how i only have one
27:28 - subscription right now
27:30 - i'm going to perform purchase
27:35 - purchase service
27:39 - and for the product id i'm
27:43 - going to put it into a constants file
27:45 - right here
27:47 - now in a production app you wouldn't
27:50 - hard code the product id like this
27:53 - you would probably come from your
27:54 - database
28:00 - but
28:03 - uh subscription how about let's call it
28:06 - sub
28:08 - subscription product id okay
28:11 - so this was
28:15 - you know this one right here
28:20 - so that's what we're going to pass in
28:22 - right we're going to pass in
28:24 - uh we're going to pass in constants dot
28:27 - subscription product id
28:29 - and upon successful purchase what do we
28:31 - want to do
28:34 - well all we need to do
28:37 - upon successful
28:40 - purchase is that the all access
28:43 - flag all right so self.all access equals
28:46 - true
28:48 - so that is going to flip the switch on
28:50 - this
28:51 - which will then notify the ui that hey
28:53 - they just bought a subscription so
28:55 - remove all the buy buttons because they
28:56 - have access to everything
28:59 - so back in the detail view
29:04 - we can call that new method model
29:08 - dot make subscription purchase
29:14 - and when they make that subscription
29:16 - purchase and that all access
29:17 - flag gets flipped to true this button is
29:20 - not going to show
29:21 - this by subscription button is not going
29:23 - to show and
29:25 - this button as well by a single
29:27 - meditation this is not going to show as
29:29 - well
29:33 - all right so i'm going to really quickly
29:35 - just run this in the simulator to make
29:37 - sure that
29:39 - my buy subscription button shows up
29:41 - because it wasn't rendering here in the
29:43 - preview canvas
29:45 - okay so indeed it's there
29:48 - but tapping on these buttons doesn't do
29:50 - anything in the simulator we have to
29:51 - plug in our
29:52 - actual device to actually test purchases
29:55 - so
29:56 - that's what i've done right here
29:59 - and you can see my my two girls there i
30:02 - really love this photo because it's
30:03 - it shows how silly they are it's a very
30:05 - dynamic pose
30:07 - so i had to load up my app on the phone
30:10 - right there
30:12 - and let's take a look oh yeah i
30:16 - downloaded tik tok recently
30:18 - uh haven't created any content and
30:20 - barely use that
30:21 - i'm thinking about using it for code
30:23 - with chris because i thought it was
30:25 - mostly you know for entertainment
30:28 - but then recently i've seen content
30:30 - creators actually teaching and
30:32 - and creating learning content on it so
30:35 - i'm interested in exploring that if you
30:37 - use ticktalk or you have some ideas on
30:39 - how i can use tiktok
30:40 - to educate and to teach people
30:44 - coding in ios let me know share with me
30:47 - what sort of content do you think would
30:49 - fit tik tok i'm thinking like
30:51 - short tips and things like that okay
30:54 - anyways here
30:54 - is the demo all right so i'm going to
30:58 - try to make a test purchase on the
31:02 - subscription so tap that button
31:04 - and it will recognize that you are
31:06 - trying to test your in-app purchases so
31:08 - you'll notice that it says
31:09 - sandbox and if this is your first time
31:12 - um trying to test your in-app purchases
31:14 - it's going to pop up a dialog asking for
31:16 - username and password and you have to
31:18 - put in a test account for this
31:20 - so you have to create a sandbox test
31:22 - user in your app store connect
31:25 - we did this in the previous lesson if
31:27 - you don't remember go into
31:29 - app store connect click on users and
31:31 - access
31:32 - along the left hand navigation there
31:34 - will be like a sandbox testers near the
31:36 - bottom
31:36 - click into that add a test account with
31:39 - an
31:40 - email and a password and that's what
31:42 - you're going to enter here on the screen
31:43 - so
31:44 - since for me i've already added my
31:46 - sandbox tester account
31:48 - i only have to enter in a password so
31:51 - here you can see i'm purchasing all
31:52 - access
31:53 - for this app and the details are there
31:57 - that's not my subscription description
32:00 - but yeah so let's go ahead and try and
32:04 - purchase this
32:05 - all right let's hit subscribe okay now
32:07 - let's enter in my password
32:10 - okay sign in
32:14 - right there we go and give it a second
32:17 - okay i'm all set and
32:20 - uh how did it just lose
32:23 - uh how to just lose a connection to that
32:28 - all right so we're back my quicktime
32:30 - recorder just cut out as soon as the
32:32 - action happened
32:34 - we processed the test transaction and
32:36 - then it popped up a little dialogue that
32:37 - said
32:38 - purchase successful you're all set and
32:40 - then i tapped on ok
32:42 - and what i saw on the screen was that
32:44 - the two buttons disappeared
32:46 - what you saw on my screen was quicktime
32:49 - crashing but
32:50 - you're gonna have to take my word for it
32:52 - but what i
32:53 - do want to show you is that now that the
32:56 - user has purchased the subscription
32:59 - if we
33:02 - hit a set a break point right here on
33:04 - the init method of our model
33:06 - let's walk through checking the users
33:09 - entitlements
33:10 - and just make sure that they have access
33:12 - right i'm just going to put breakpoints
33:14 - in a couple of these different places
33:15 - and i am going to run the app on my
33:18 - phone
33:19 - and then let's take a look at what
33:20 - happens all right so it's fetching
33:23 - the purchaser info for this user let me
33:25 - just bring up this
33:27 - and we're gonna just hit continue
33:30 - execution and it's gonna come down here
33:33 - so let's check
33:37 - the let's check the info object here
33:40 - and you can check you can see that under
33:43 - entitlements
33:44 - we do have all access expires
33:48 - date you can see it actually expires
33:50 - quite quickly because when you're
33:51 - testing
33:52 - all the time frames are shortened so
33:54 - when you have a monthly subscription
33:56 - it expires i think in like five minutes
33:58 - if you have a yearly subscription
33:59 - it expires in like half an hour or
34:01 - something like that and see is active
34:03 - yes it's sandbox yes
34:04 - and all of this other metadata
34:08 - so it's going to come into here and it's
34:10 - going to set all access flag to true
34:13 - which basically will unlock everything
34:15 - in our app
34:16 - now again i do want to mention that the
34:19 - most
34:19 - important takeaways from this video is
34:23 - how to work with the revenue cat sdk
34:25 - because the exact
34:26 - implementation of how to unlock stuff
34:28 - for the user
34:29 - is dependent largely on your own app
34:33 - and where you put this code even is
34:35 - largely dependent on your own app
34:38 - implementation but take away
34:41 - how we integrated the revenue cat sdk
34:45 - how we initialized it here with our api
34:48 - key
34:49 - how we fetch the sk product
34:52 - using the product id and then process
34:54 - the transaction
34:55 - and finally how we were able to check if
34:58 - the user
34:59 - is entitled or has that entitlement or
35:01 - not
35:02 - so those are the big takeaways from the
35:04 - video
35:06 - the last thing i want to do is jump back
35:08 - over to our revenue cat dashboard and
35:10 - just check out the purchase
35:12 - so let's go back to overview remember to
35:14 - toggle this the sandbox data
35:16 - and take a look check it out we have one
35:19 - active subscription here
35:21 - active subscriber being me and
35:24 - you can see that this was the initial
35:29 - subscription purchase 20 minutes ago
35:32 - and it expired in five minutes because
35:34 - it's a monthly
35:36 - uh subscription right so that testing
35:38 - time frame is shortened to five minutes
35:40 - and you can see it's already renewed
35:42 - like three times
35:44 - and these indicate that these are
35:45 - renewals now
35:47 - the reason why it expires in such a
35:50 - short time frame is so that you can test
35:52 - what happens
35:54 - during a renewal you don't have to wait
35:56 - a whole you know 30 days
35:58 - for you to test if your app is
36:00 - functioning as expected
36:02 - so that's why there's this
36:07 - as you can see offering in-app
36:09 - subscriptions is just as simple as
36:11 - offering one-time purchases however in
36:13 - the next lesson i want to show you an
36:14 - even better way of presenting your
36:16 - products
36:16 - using offers this feature allows you to
36:19 - configure different combinations of
36:20 - products to present to your users
36:22 - at the optimal time based on conditions
36:25 - that you specify
36:27 - this helps you maximize your revenue
36:29 - because you can be presenting offers to
36:31 - users that actually want them that are
36:33 - relevant
36:34 - versus just presenting generic offers
36:37 - for example if you notice the user is
36:39 - really heavily using your app and still
36:41 - hasn't made a purchase at the end of the
36:42 - week
36:43 - you might have your app present to them
36:44 - a limited time offer with a discount
36:46 - just to tip the scales
36:48 - in the next lesson i'll show you how to
36:49 - use this to get ready make sure you have
36:52 - your free revenue cat account and if you
36:53 - don't have one yet just go to
36:55 - codewithchris.com
36:56 - rcat2 revenuecat is free to use up until
36:59 - you're making 10 000
37:01 - a month so in my opinion it's a great
37:03 - idea to use them especially in the
37:04 - beginning when you don't know if your
37:05 - app is going to make any revenue at all
37:08 - using revenue cat really cuts down on
37:09 - your development time and helps you get
37:11 - to launch
37:12 - faster again the url is codewithkris.com
37:15 - rcat2 full transparency i don't get
37:18 - compensated for signups but
37:20 - using that link does let the team know
37:22 - that you want to see more app
37:23 - monetization content
37:25 - and they may sponsor future videos here
37:27 - at code with chris
37:28 - so thank you for that and thank you goes
37:30 - out to revenue cat as well
37:31 - for making this video possible all right
37:34 - in the next lesson we're going to take a
37:35 - look at offers
37:36 - if you don't want to miss it make sure
37:37 - you're subscribed and turn on bell
37:39 - notifications
37:40 - give this video a thumbs up too if you
37:41 - enjoyed it thank you so much i'll see
37:43 - you in the next lesson