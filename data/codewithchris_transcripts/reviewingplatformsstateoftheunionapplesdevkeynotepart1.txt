00:06 - hey everyone what's up
00:08 - can you all hear me and see me
00:19 - so first of all um is the background
00:22 - music too loud this is
00:24 - uh one of the first few times that i've
00:27 - streamed so i want to make sure that
00:28 - my voice is coming up over the
00:30 - background music
00:34 - yeah okay
00:38 - great so i want to apologize first of
00:40 - all because i don't have a second screen
00:42 - so as i'm gonna be reviewing these notes
00:44 - uh i might not see your comments i might
00:46 - not see any like super chats or
00:49 - any memberships or anything like that so
00:51 - i apologize if i miss your message but
00:54 - i think i will be uh taking a break and
00:58 - then going through the comments and
01:00 - we'll do it like that all right thanks
01:02 - flo for mentioning that i'll just
01:04 - bump it down a notch okay so
01:07 - first of all last night i went through
01:10 - the platforms
01:11 - state of the union broadcast and if you
01:14 - don't know what this is
01:16 - let's talk about that
01:21 - so you know wwdc
01:24 - is the big event that everyone knows
01:26 - about because they're announcing
01:28 - features
01:29 - of the os's that everyone would be
01:32 - excited about it's
01:33 - more for the general public and they
01:34 - keep sort of the developer stuff
01:36 - low-key there were some cool
01:38 - announcements but they didn't really
01:39 - dive very deep into it
01:41 - so there is another keynote or broadcast
01:45 - if you will
01:46 - called the platforms state of the union
01:49 - so this is where it's more developer
01:51 - oriented
01:52 - and they talk about as a developer how
01:55 - you can start
01:56 - implementing some of the cool features
01:58 - uh that they're going to release in the
01:59 - next os
02:00 - that they talked about in wwdc so
02:04 - you can watch that either on the apple
02:06 - website or this developer app if you
02:09 - have a mac
02:10 - this app is really cool because not only
02:13 - can you download
02:14 - uh the sessions to watch and any
02:16 - broadcasts to watch offline
02:18 - but you can also bookmark so you can see
02:20 - here i bookmarked a ton
02:22 - of wwdc sessions um
02:25 - all of these things seem so interesting
02:27 - uh there there's actually a lot more
02:29 - sessions than these
02:31 - and um i highly recommend here if you
02:34 - just take a look
02:38 - right there's a ton of stuff and all of
02:40 - this is happening
02:42 - like it's available right now all of
02:43 - these for tuesday at least
02:45 - so you can see oh some of them are only
02:47 - 10 minutes 15 minutes i
02:48 - i sort of assumed that they would all be
02:50 - an hour but i mean
02:52 - if they're only 20 minutes to 10 minutes
02:54 - i might be able to get through these
02:56 - but i i basically went through this
02:59 - whole list
03:00 - and bookmarked the ones i was interested
03:02 - in the cool thing
03:04 - also is that you can look at these
03:06 - sessions
03:07 - for the previous years as well and i
03:09 - think they have sessions going back all
03:11 - the way to 20
03:12 - uh 2017 if i believe maybe even later
03:16 - so you can always learn um different
03:19 - apis as they become relevant to what
03:21 - you're working on
03:22 - uh and who better to get it from aside
03:25 - from you know directly from
03:27 - the apple engineers i will say that
03:30 - some of the information is outdated if
03:33 - you are looking at really old
03:35 - wwdc sessions
03:38 - um yeah so today um
03:42 - i'll be going through my notes for the
03:44 - platform state of the union and i'll
03:46 - also
03:47 - probably bring up relevant screenshots
03:48 - i'm probably not going to play any audio
03:50 - from this because i don't want
03:52 - you know this this video to get
03:55 - copyright striked or something like that
03:57 - so i will pull up relevant slides as i
04:00 - go through these notes but as you can
04:02 - see
04:02 - there's tons of cool stuff that was
04:03 - announced in this broadcast it was about
04:06 - an hour and 15 minutes so if you do have
04:08 - the time
04:09 - you know you can hop in and watch it but
04:13 - i only have an hour unfortunately i have
04:16 - to
04:16 - i have to run after that but i will try
04:19 - to get through this i won't go through
04:20 - every single line
04:21 - i'll summarize it for you okay so let's
04:24 - get started
04:25 - let me just quickly check the chat and
04:27 - you know this is my first time using the
04:29 - streaming software
04:31 - i don't know if you see like chat
04:34 - messages coming up here
04:37 - on the screen on the right hand side do
04:39 - you guys see any
04:40 - because this is supposed to be a chat
04:41 - box but i didn't really know how to hook
04:43 - it up
04:43 - to the live uh the chat
04:48 - yeah are there messages oh cool that's
04:50 - really cool so i guess in the replay
04:52 - when i watch this
04:53 - we'll see all the messages come up here
04:54 - that's really really cool and actually
04:57 - you know i was so um confused about
05:00 - streaming and it seemed like there was
05:01 - all this setup
05:02 - and things to do but actually and now
05:04 - just looking into this it's
05:06 - it's pretty straightforward and i had a
05:07 - lot of fun yesterday
05:09 - i didn't do any voice we were just
05:11 - watching wwdc
05:13 - and we're just interacting through chat
05:16 - i had such a blast with you guys
05:17 - and if some of you were there yesterday
05:19 - thank you for supporting
05:21 - i'm going to be trying to stream every
05:23 - day this week
05:24 - i have a schedule at cwc.to livestream
05:28 - and i'm thinking of what i'm going to do
05:29 - after i do this review
05:31 - is i'm going to edit the recording
05:35 - sort of slice out all these parts where
05:37 - i'm not actually talking about
05:38 - the platform state of the union and i'll
05:40 - do like a sort of um condensed
05:42 - video that people can watch but now that
05:45 - you guys are here live
05:47 - we get to interact with us looking for
05:49 - mark sorry about that
05:50 - that was kind of loud okay
05:54 - all right so let's get started um so the
05:56 - first
05:57 - thing that they announced in this
06:00 - presentation was xcode cloud now this is
06:02 - a a really big thing for them
06:05 - but i think for developers at least
06:07 - developers who've
06:08 - worked in companies and worked on teams
06:10 - they've always had a solution
06:12 - for doing this and let me just bring up
06:15 - a relevant slide to sort of show
06:18 - what this is
06:21 - so they sort of talk about this software
06:23 - development
06:25 - process as you know you're coding it and
06:27 - then you're writing
06:28 - unit tests or you know automated
06:31 - essentially automated ways to test your
06:33 - code because imagine if you're making
06:35 - changes
06:36 - uh it'd be and you had a huge app it'd
06:38 - really be hard to manually
06:40 - test every single function and feature
06:42 - and use case
06:44 - so what happens with larger projects is
06:47 - people write
06:48 - automated tests that can perform things
06:50 - like click here
06:51 - check this assert that this is true when
06:54 - after this happens
06:56 - double check that people can create
06:58 - accounts so you have all these tests
07:00 - that
07:00 - you can automatically run every time you
07:03 - you know make a code change so that's
07:06 - what this one's about
07:08 - integrating is about uh sort of the team
07:12 - collaboration process when you do coding
07:14 - so
07:15 - i think for a lot of us when we're
07:17 - coding solo we know exactly
07:19 - where things are and what where you know
07:22 - where the functions are where the
07:23 - classes are and everything but
07:25 - in a bigger environment it has to be a
07:28 - lot more organized because people can't
07:29 - just dumb code
07:30 - into the project it's going to get out
07:32 - of hand really quickly
07:34 - so this is really talking about that
07:36 - review process
07:38 - where there are certain people who are
07:40 - in charge
07:41 - of reviewing other people's code before
07:43 - they allow it
07:44 - into the code base and there's a process
07:47 - called
07:47 - a pull request when working with source
07:50 - control
07:51 - that that happens so we'll get to that
07:53 - in a quick second
07:54 - and then deliver is you know after you
07:58 - you create a build that you want to send
08:00 - out to your testers
08:01 - to your qa team or whatnot um this is
08:05 - a step that automates that so you don't
08:07 - have to
08:08 - manually do it and then refine is the
08:10 - step
08:11 - of collecting user feedback collecting
08:14 - feedback from
08:15 - qa testers and all of that so that you
08:17 - can then
08:19 - make those changes into the code so
08:21 - that's sort of the cycle
08:24 - and uh if if you've seen in the past i
08:27 - talked about and even in the
08:28 - descriptions of
08:29 - all of my youtube videos i often talk
08:33 - about a tool called bitrise
08:35 - so that's what this tool does uh it
08:38 - connects to your github account or
08:42 - other repos whatever you're using and
08:44 - every time you
08:46 - commit a code change in there it pulls
08:48 - the code it
08:49 - does the building and runs any test
08:51 - cases and
08:52 - that workflow is very customizable so
08:55 - you can put
08:55 - in any scripts and steps here um
08:59 - so i i haven't talked with them yet
09:01 - since
09:02 - they announced xcode cloud but
09:03 - essentially that's sort of what xcode
09:06 - cloud
09:06 - is trying to replace now
09:10 - the difference i think is that
09:13 - bitrise works for multiple platforms so
09:16 - a lot of companies when they build an
09:17 - app they have like an
09:18 - android version they have maybe a web
09:20 - platform an ios version
09:22 - and whatnot so tools like bitrise and
09:25 - and other ci and cd tools
09:29 - they work for multiple platforms whereas
09:31 - xcode cloud i think they're just
09:32 - targeting ios
09:34 - but when i looked at their demo the
09:36 - really cool thing was that
09:37 - it works so well inside xcode
09:41 - um and with ios and it looks so easy to
09:44 - use at least
09:45 - from a demo perspective from what they
09:48 - showed so
09:49 - i i sort of predict that if you're only
09:51 - working with ios
09:53 - you might just end up using this and
09:55 - this is not
09:56 - i'll just say this upfront they're not
09:58 - intending this to be a free service i
10:00 - don't know how much it'll cost
10:02 - but at the end of the presentation
10:06 - um for the xcode cloud section they
10:08 - mentioned that fees will be announced
10:10 - in the fall as a solo developer this
10:13 - might not be relevant
10:14 - or you might not want to use it but i
10:17 - think if you have the intention to go
10:19 - into the industry
10:21 - it is it is a good thing to know because
10:25 - all the companies any larger projects
10:27 - they all have
10:28 - processes like this the other
10:31 - thing that i see is that um these
10:34 - companies like bitrise they do this for
10:36 - a living right this is their bread and
10:37 - butter
10:38 - so i kind of think that they
10:41 - probably have the more mature product um
10:44 - however apple has a lot of money and
10:47 - they're a really large company
10:49 - so over time you know over the years i
10:52 - feel like
10:53 - they might take over the ios space but
10:56 - if you're a company who had products on
10:58 - multiple platforms i don't think you
10:59 - would use xcode
11:00 - cloud and another tool um okay
11:03 - cool so that's what this is in in a
11:06 - summary
11:07 - uh let me see if there's any interesting
11:10 - points
11:11 - i can point out rather than go through
11:12 - line by line so
11:14 - um this part i thought was really cool
11:17 - because
11:17 - so traditionally um you can
11:21 - you know you're coding your app in xcode
11:23 - and then you hit command b
11:24 - or command r and you run your app and
11:26 - you build it
11:27 - now some large apps especially when you
11:29 - have a lot of like cocoapods and
11:31 - third-party libraries
11:32 - like firebase they can take quite a long
11:35 - time to build and even my simple demos
11:37 - that have just the firebase pod could
11:40 - take up to like four minutes to build
11:42 - and i find myself just drumming my
11:44 - fingers as i'm waiting
11:45 - for it to build because i'm recording
11:47 - right and then i have to ask my editor
11:49 - to cut out those four minutes
11:51 - now this is kind of cool because um
11:54 - they showed this slide where you you
11:57 - build it
11:58 - in the cloud so you can continue doing
11:59 - what you're doing and uh
12:02 - it just compiles not on your machine so
12:05 - it doesn't take up your resources
12:06 - but it does it on there on their servers
12:11 - yeah so these are the four steps that
12:14 - they talked about
12:15 - how you know how this build step works
12:18 - so first of all you have to select the
12:20 - product and the product is
12:22 - uh if you have an xcode project it's
12:25 - basically the output
12:26 - like uh the app and
12:29 - you confirm the workflow so you can have
12:32 - custom workflows that do different
12:33 - things i think the default workflow is
12:35 - just
12:36 - um build it whenever you commit a new
12:39 - change
12:40 - and then you grant access to the source
12:42 - code repo where you're hosting your code
12:45 - and then let's see where we are here
12:49 - yeah securely connect to the hosted repo
12:52 - and
12:53 - the cool thing as well in addition to
12:56 - just building the project
12:57 - on the cloud is that it will register
12:59 - your app in app store connect
13:01 - um and then because typically um
13:06 - if if you're used to like if you've
13:08 - submitted apps before you'll know that
13:10 - you have to jump
13:11 - from place to place app store connect is
13:13 - this portal where you
13:14 - sort of manage your uh app store
13:17 - metadata
13:18 - and where you send your builds to to
13:21 - send out to testers
13:22 - via test flight and things like that so
13:25 - this will automatically
13:26 - send it there as well and it'll help you
13:28 - register your app in app store connect
13:30 - so that used to be a process where you'd
13:32 - have to get out of xcode
13:33 - and go on the browser and and do it
13:35 - yourself
13:36 - um you know their mantra with xcode
13:39 - cloud was to
13:40 - to bring in as many of those processes
13:44 - into xcode so you don't have to leave
13:46 - the xcode
13:47 - it sort of sounds uh sort of sounds evil
13:51 - but
13:52 - um it i i think it does make things a
13:54 - lot easier
13:56 - i'm going here this was really cool
13:59 - so the testing
14:03 - now so here's the showing like it's
14:05 - sending the build and then you have a
14:07 - screen that you can visit later and see
14:09 - how those build uh those builds
14:11 - completed that they
14:12 - failed that they like build properly
14:20 - okay and then he's talking about
14:26 - he's talking about testing so um you
14:30 - know testing with your app
14:31 - if you've if you haven't done it on a
14:33 - larger scale you might just launch it on
14:35 - your app
14:35 - and then you might just you know scroll
14:37 - through it and test it a little bit and
14:38 - then
14:39 - ask if your brother or sister has a
14:41 - device or your mom
14:42 - can can you borrow their ipad and launch
14:44 - it on that and test it
14:46 - by hand but you you can imagine
14:49 - with a larger app that you're trying to
14:51 - reach a huge audience
14:53 - that sort of testing just isn't going to
14:55 - scale properly
14:56 - so with xcode cloud one cool thing is
14:59 - that
14:59 - you can run your test plan which is
15:01 - essentially just the basket of test
15:03 - cases
15:04 - or unit tests that we talked about
15:06 - earlier um
15:08 - you can run multiple test plans on
15:09 - multiple devices
15:11 - simulators multiple platforms and
15:13 - multiple old s's
15:15 - all simultaneously so you just select uh
15:18 - you know what device you want to test it
15:20 - on
15:20 - what platform what os and you can even
15:23 - run it on the beta
15:24 - os's as well without having to download
15:26 - it on your own device and install the
15:28 - beta
15:29 - on your own device to test it so that's
15:31 - really cool and then what you get
15:33 - are all these results and it takes
15:35 - screenshots along the way
15:37 - so you can sort of see if anything's
15:38 - wrong visually
15:40 - and then immediately sort of just just
15:44 - know i guess
15:46 - all right so i thought this was really
15:47 - cool because it's really a large scale
15:49 - way for you to test your app on multiple
15:52 - devices and platforms and screen sizes
15:54 - and you know the whole thing
15:56 - and integrate so this thing used to be
15:59 - um
16:01 - it depends on which source code repo you
16:04 - use
16:04 - but for example let me just quickly
16:08 - show you so for example
16:12 - we have maybe
16:16 - maybe this one right here yeah because i
16:18 - think there's
16:19 - uh there's another branch is there
16:23 - no
16:30 - i thought that one had another branch
16:37 - uh this one this one definitely has
16:39 - another branch
16:41 - okay cool so uh typically what you would
16:44 - do
16:45 - is you would branch off like if you're
16:47 - trying to do a new feature right you
16:49 - want
16:50 - well you would create a branch of your
16:51 - main branch so essentially a copy you
16:54 - would work on your feature
16:55 - and then when you're ready to integrate
16:57 - it back into sort of the main
16:59 - code base or the main branch you would
17:02 - do what's called a pull request
17:04 - so you go new pull request and you
17:06 - choose the branch that you're working on
17:08 - maybe you're working on this one
17:09 - pagination
17:10 - uh and you're you're like okay it's
17:12 - ready to go so i'm going to
17:15 - make a request to integrate this into
17:18 - the the main code base and then you
17:21 - create your pull request it
17:22 - tells you shows you sort of exactly
17:25 - what's changed and then
17:26 - you know there's that person that's
17:29 - supposed to review your code and make
17:30 - sure that
17:31 - it's up to snuff before allowing it
17:35 - into the main branch
17:38 - so this process
17:42 - used to sort of take place where you are
17:45 - hosting your code so here
17:46 - you know on github you could make
17:48 - comments and stuff like that i'm not
17:50 - going to actually create this pull
17:51 - request but then
17:52 - um the person reviewing your code can
17:55 - make comments here and
17:57 - you can have a dialogue here and then
17:58 - you can make changes and all that so
18:00 - they've pulled this process into xcode
18:05 - so that's what they show here
18:09 - yeah so you see you can see a list of
18:12 - the pull requests here you can
18:14 - actually comment and you can uh
18:17 - yeah review changes and all that so that
18:19 - that's really cool
18:20 - definitely saves a lot of time and then
18:22 - delivery
18:24 - no more need to manage your certificates
18:27 - and profiles and keep them up to date on
18:28 - your mac this is huge
18:30 - because before there used to be a
18:31 - provisioning portal
18:33 - where you would register your machine uh
18:36 - and create provisioning profiles for
18:38 - your apps
18:39 - and all this does is it's basically for
18:42 - security for code signing so
18:44 - make sure that no unauthorized parties
18:48 - you know submit your app pretending to
18:50 - be you or you know make changes
18:52 - pretending to be you because you've
18:54 - securely codesigned
18:56 - that that bundle so
18:59 - this used to be um in the early days
19:02 - quite a
19:03 - involved process but apparently with
19:05 - xcode cloud
19:06 - there's no no more need to to manage all
19:08 - of that so that's great
19:11 - uh we're going to do comments i'm going
19:12 - to check comments right after i talk
19:14 - about refine so we're fine
19:16 - um yeah basically the process is
19:19 - you you upload your app to app store
19:22 - connect
19:23 - where you can then send it off to beta
19:25 - testers through test flight
19:27 - and then they get a notification or they
19:29 - get an email to download your test app
19:31 - on their device
19:32 - so they can test it and then they can if
19:35 - they experience a crash
19:37 - or you know a bug they can send you
19:40 - feedback directly from
19:41 - that test flight app and then that sort
19:44 - of goes into your app store connect and
19:46 - your test flight
19:47 - so they've just brought that into xcode
19:49 - so you don't even have to
19:54 - so you don't even have to jump anywhere
19:55 - else so yeah
19:57 - this is just showing another person uh
19:59 - trying out someone's app
20:01 - through test flight and test flight now
20:03 - is available on the mac
20:04 - i didn't even know it wasn't before but
20:07 - you can send some feedback so
20:08 - you can see here that they're going to
20:10 - send this feedback to the developer and
20:12 - the developer now
20:13 - inside xcode can see you know that
20:17 - test flight feedback and the really cool
20:19 - thing that they showed here was that it
20:22 - um it carries the stack trace
20:26 - with them for that crash or that bug
20:29 - so typically when an app crashes
20:33 - if someone tells you oh i did this and
20:35 - this and this and the app crashed
20:38 - you have to be able to reproduce that on
20:40 - your end
20:41 - otherwise it's really hard to solve
20:44 - because you don't you have no idea what
20:45 - happened
20:46 - if you can't reliably reproduce that
20:48 - issue
20:50 - yeah it's tough so what they're saying
20:52 - here is that when you tap on this
20:54 - feedback
20:55 - it brings that crash report with the
20:58 - trace
20:59 - from that person's machine
21:02 - and tells you all the details about that
21:04 - user that machine what os they were
21:05 - using what device they were using
21:07 - all that information and you can see
21:08 - here that
21:10 - there's sort of a log of what that
21:12 - person was doing
21:13 - uh what methods were being called to the
21:15 - point where it crashes and then you can
21:17 - go and investigate it
21:19 - apparently they showed this demo where
21:20 - you double click that crash
21:22 - and it zooms exactly to the line of code
21:25 - where that happened so you know in
21:28 - theory
21:29 - that sounds really cool okay
21:32 - so let's pause for comments that was
21:33 - sort of the big announcement okay
21:35 - actually there's two more announcements
21:37 - to uh to talk about with excel cloud so
21:39 - they talk about it's
21:40 - super secure and everything it's private
21:42 - uh no one sees
21:44 - your code and then also there's a free
21:46 - limited beta so actually this i should
21:48 - mention
21:48 - if you have an apple developer account
21:51 - you can go
21:52 - and sign up for the xcode cloud beta and
21:55 - they'll they'll let you use it for free
21:57 - during this beta period
21:59 - however when you sign up for the beta
22:00 - you join a wait list
22:02 - so i've done this already i recommend
22:04 - that you do it anyways even if you don't
22:06 - think you'll use it who knows
22:08 - but they're only allowing a limited
22:10 - number of people to
22:11 - to try it out right now and then pricing
22:14 - and availability in the fall
22:16 - and because i imagine it's a new service
22:19 - they have to have
22:20 - tons of servers to to host this sort of
22:22 - stuff and to run code so they
22:24 - really need to make sure it's smooth
22:26 - before releasing it to the masses
22:28 - okay so let's take a break and look at
22:30 - comments before we talk about the swift
22:32 - stuff
22:35 - you know i am going to get a second
22:37 - monitor so i can actually
22:39 - keep an eye on the chat on the left hand
22:41 - side but right now
22:55 - hey zach yeah that's right yeah test
22:57 - flight for mac is great
22:59 - because i'm planning to build a cwc app
23:02 - where you can view
23:03 - our content through a mac app as well so
23:06 - that's really good
23:07 - and i think i saw you yesterday right
23:08 - zach i'm on the wwdc stream
23:12 - oh and mathis mathenating too uh nice to
23:15 - see you again
23:17 - yes platform state of the union is
23:19 - released you can you can watch the
23:21 - replay on
23:22 - through the developer app which is what
23:24 - i'm using here or you can go to
23:27 - developer.apple.com and there should be
23:29 - a big button
23:29 - to view all the wwdc stuff
23:35 - uh let's see alessandro yeah um
23:38 - mvvm architecture definitely covered in
23:42 - our
23:42 - course
23:47 - uh let's see
23:52 - uh gun gun topali sorry if i'm
23:54 - mispronouncing your name but
23:56 - uh i think that in terms of
23:59 - the versions of os you're gonna have to
24:02 - be forced to upgrade as they release new
24:04 - versions of xcode and
24:06 - and things like that uh even if you want
24:09 - to watch
24:10 - wwdc i think they're just forcing you to
24:12 - like upgrade your browser upgrade your
24:14 - os
24:14 - and so there's only so long you can hang
24:17 - on for before you're forced to upgrade
24:22 - uh yeah i'm using streamlabs obs
24:27 - oh let's see oh great
24:31 - awesome i think i'm caught up okay cool
24:34 - thanks everyone
24:36 - let's continue so swift concurrency
24:38 - there's this new pattern a sink awaiting
24:40 - now this is actually
24:42 - really really huge because we all
24:46 - write a synchronous code whether we know
24:48 - it or not
24:49 - i paused because i i'm repeating the
24:51 - exact same words as
24:53 - as she said and it's true it's true
24:55 - because when you
24:56 - write an app it's usually not super
25:00 - self-contained right um usually you're
25:03 - downloading an
25:03 - image from the net you're downloading a
25:06 - feed or something like that
25:08 - um and that happens asynchronously
25:11 - because imagine
25:12 - if your app just pauses
25:16 - and the user can't use the app while it
25:19 - goes
25:20 - through the network to fetch an image or
25:22 - to fetch a feed or something like that
25:25 - that would be really frustrating for the
25:26 - user so this stuff
25:28 - happens asynchronously in the background
25:31 - and just to dial it back in case you
25:32 - don't know so uh synchronous
25:34 - is the opposite of asynchronous and
25:36 - synchronous
25:37 - just means sort of uh imagine sequential
25:40 - events
25:41 - so it would be exactly like what i just
25:43 - described your app will say
25:45 - okay i'm going to launch the startup
25:47 - screen and then i'm going to
25:49 - go fetch an image and you can't do
25:52 - anything i'm not going to do anything
25:53 - until the data comes back okay the data
25:56 - has come back i'm displaying the
25:57 - image now i can do whatever it is so
26:01 - you as you can imagine network might be
26:03 - slow congested
26:05 - they might not have internet connection
26:07 - so you might be stuck forever
26:08 - so anyways that synchronous asynchronous
26:11 - is
26:11 - um it spins off another like background
26:14 - thread another
26:15 - you know threat of execution so like
26:17 - think of it as a little cpu worker
26:20 - that it tells hey go and fetch that data
26:23 - while i still
26:24 - you know man the app and and uh make
26:27 - sure that it's usable
26:29 - so that little worker is going to go
26:30 - asynchronously go fetch that data that
26:33 - feed that image whatever and maybe and
26:35 - then it comes back
26:37 - with the data and it tells i don't know
26:40 - the boss
26:40 - the main thread that uh hey here's the
26:43 - data
26:44 - okay then the main thread says okay
26:46 - thank you for the data now
26:47 - i'm gonna do something with it now i can
26:49 - display the image but there was no wait
26:51 - time right it was doing something else
26:53 - while that little
26:55 - asynchronous worker went to to fetch
26:58 - something
26:58 - asynchronously now the reason this is a
27:01 - big deal
27:02 - is um because the code to do this used
27:06 - to be kind of convoluted
27:07 - and the scenario we just talked about is
27:10 - a very basic scenario too
27:12 - um so like concurrency can
27:17 - the problem can get much larger
27:20 - especially if you have apps that sort of
27:22 - need to interact in real time
27:24 - um what would be an example
27:28 - i don't know some like like a game right
27:30 - like a
27:31 - rts like league league of legends or
27:33 - whatever like things
27:34 - are happening in real time
27:38 - so i can imagine that the code for that
27:42 - ends up looking really confusing and
27:45 - really hard to understand now
27:48 - just to show you what that simple
27:50 - scenario would be i'm just going to
27:51 - launch xcode and do a quick demo because
27:54 - i actually don't really
27:57 - uh understand how they
28:00 - like i understand what they're trying to
28:01 - solve but i'm going to show you
28:04 - the sort of the old way of doing this
28:07 - and then let's take a look at what doing
28:10 - the new way would look like and i'm just
28:12 - guessing because i don't have any xcode
28:14 - betas installed or anything like that
28:16 - okay so i'm just going to create a
28:17 - sample xcode project
28:19 - i can actually feel my computer running
28:22 - a lot slower now that i'm streaming
28:29 - wow
28:32 - there's like a huge lag i think it's
28:35 - time for me to get a new computer
28:39 - by the way this machine this machine let
28:42 - me let me just pull this up
28:43 - show you guys what i'm using here
28:48 - oh sorry that's xcode but
28:54 - hide my serial number but anyways you
28:57 - can see that it's mid-2015
28:59 - i do have a ton of ram 32 gigs of ram so
29:02 - that's pretty cool but
29:03 - um yeah mid-2015 so if i'm not streaming
29:07 - things are fine things are smooth
29:08 - i have no complaints but if i'm trying
29:10 - to demo something here
29:12 - okay so what i'm gonna do first is let's
29:15 - just assume that you have
29:17 - like a view model or something like that
29:19 - some some
29:20 - other class that you're gonna call to
29:22 - fetch some code so this will call this
29:25 - view model hey now it's no it's not bad
29:31 - oops sorry about that
29:34 - coding live okay so i'm going to create
29:38 - a
29:38 - function called get stuff okay so this
29:41 - is gonna pretend to go
29:42 - fetch you know fetch in the network
29:48 - you know send requests
29:51 - to get some network resource
29:55 - now if you're used to writing functions
29:57 - with return types
29:59 - you might do something like this and you
30:01 - know
30:02 - you want to get let's say your data is
30:05 - an array of strings or something
30:06 - and and you're used to you know using
30:08 - this return value
30:10 - so you know you you go fetch the
30:12 - resource and you return
30:17 - uh you return that and then in here
30:22 - you know
30:25 - let's just let's just create another
30:27 - function here say
30:32 - on launch i don't know this is not
30:35 - important
30:36 - but so what you would do is
30:42 - i just want to demonstrate the method
30:45 - so you would call get stuff and you
30:48 - would sort of expect that
30:50 - it'd go and fetch the network resource
30:52 - and then return this
30:53 - uh the data to you like this but
30:56 - this is sort of assuming that
30:58 - synchronous process
31:00 - right because um if this sends a request
31:03 - to the network to grab something it's
31:05 - not going to be able to return and give
31:07 - this to you right away
31:08 - and so essentially um it's just going to
31:11 - be waiting
31:12 - so the way to do this asynchronously is
31:16 - um
31:19 - you know let's say you wanted to assign
31:21 - the um
31:23 - result strings
31:26 - from that method like this right you
31:28 - want to go get stuff you want to get the
31:30 - data back
31:31 - and then you want to like print it or
31:34 - something like that you want to do
31:35 - something with it
31:37 - do something with the result
31:40 - now the way to do this asynchronously is
31:44 - you need to specify a parameter
31:47 - in this method so that it accepts
31:51 - a a function that this method can run
31:55 - after it gets the resources back and
31:57 - that's what this syntax looks like
32:00 - let me show you so you wouldn't have a
32:01 - return value anymore
32:04 - it would look like okay first of all
32:05 - you'd have a parameter name and you've
32:07 - probably seen these different
32:09 - parameters called completion and you've
32:12 - basically been
32:13 - using this without even realizing it but
32:16 - you know you open up a closure
32:18 - and that completion closure gets run
32:22 - at a certain point when the method is
32:24 - done doing its thing
32:25 - so now essentially you're just defining
32:27 - your own completion closure
32:29 - on your own custom function so here's
32:32 - what
32:33 - this looks like
32:41 - um so yeah it looked like this and this
32:44 - would allow
32:46 - the person calling this method to pass
32:48 - in a
32:49 - function that you can run
32:52 - by calling completion so
33:01 - you know and you just call it like that
33:04 - and then from here
33:06 - you know instead of expecting to get a
33:09 - result back like this
33:12 - now when you call get stuff you can see
33:14 - that there's a completion parameter
33:16 - and if you double tap this if you double
33:19 - click it
33:20 - it's going to open up a closure and here
33:22 - you know you would specify
33:25 - this however with the the closure that
33:29 - we've
33:30 - specified we haven't passed back the
33:32 - data
33:33 - so in fact we we're not getting the data
33:36 - back here
33:37 - so for you to specify that data
33:41 - that comes back through that completion
33:44 - you would just add a parameter like that
33:47 - and then
33:48 - in here you could pass that data so i
33:50 - don't really have any data
33:52 - so let's say like data one
33:55 - data two this is just some hard-coded
33:56 - data that i'm passing back
33:59 - uh to this well essentially i'm calling
34:02 - this
34:03 - so in here you would have let's say data
34:06 - in
34:07 - and then you would print the data so
34:09 - that
34:11 - this data gets
34:15 - into here and then you're doing
34:16 - something with that here so
34:18 - as you can see what happens this happens
34:20 - asynchronously right you call
34:22 - get stuff and then it
34:27 - sorry i was just checking the time but
34:29 - you call get stuff
34:31 - and then it calls this method it sends
34:33 - off the request to do something
34:35 - and you're also passing through this is
34:37 - the code that you want to run
34:38 - after the stuff has been retrieved and
34:41 - so it's going to retrieve the stuff
34:43 - and then call that function that got
34:45 - passed in so that's how it used to work
34:47 - and i think
34:49 - once you get used to it it's not that
34:50 - hard to understand but then
34:52 - for someone who's just starting with
34:53 - swift it's kind of hard to wrap your
34:55 - head around
34:57 - so the way that they said this works now
35:00 - is let me see if i can show you that
35:01 - example
35:02 - um
35:10 - yeah so they show an even uh crazier
35:13 - example but you can see it's sort of
35:15 - what we did right completion
35:17 - and then they have this this method that
35:19 - you're supposed to pass in
35:20 - and then they sort of show you what it
35:22 - would look like
35:23 - you know they show this animation where
35:25 - it's transforming into just
35:27 - this now i haven't really looked at the
35:30 - code so i don't know
35:31 - what it would change to but
35:36 - maybe we'll do a demo when i uh
35:39 - after i play around with this if i
35:42 - can get the betas and stuff like that so
35:45 - i think
35:47 - you would essentially it would look like
35:53 - you you wouldn't have this anymore and
35:55 - it would just
35:57 - be like that
36:00 - does that look like what they're doing
36:01 - here async and then you have a return
36:03 - value
36:04 - and then whenever someone calls it they
36:07 - would just use the await
36:09 - await right so i wouldn't even do this
36:12 - anymore
36:14 - i would just i would just return yeah i
36:17 - would just
36:18 - return this array like this
36:21 - obviously it's not recognizing this
36:23 - because i don't have any of the
36:24 - the beta stuff but if we go back here
36:28 - it would be like let result
36:32 - strings equal await
36:36 - and then you would be able to print yeah
36:39 - so you see
36:40 - how closely this code looks like to the
36:43 - synchronous code that we used to be
36:45 - writing like um
36:47 - it's much more natural right to read it
36:49 - this way uh
36:51 - see you're you're essentially marking
36:52 - that this is an asynchronous function
36:54 - it does something in the background and
36:57 - then you're just returning the data like
36:58 - normal
37:00 - and then here you're just calling the
37:03 - method
37:04 - you're getting the data back as a return
37:06 - value
37:08 - and so you're not like you know your
37:10 - code isn't
37:11 - jumping around or at least your
37:13 - understanding of the code you don't have
37:14 - to
37:15 - be navigating around trying to
37:16 - understand it this is sort of like top
37:18 - down
37:18 - you can read the code so that's what
37:20 - this sync await pattern does
37:23 - um a couple of other things for
37:24 - concurrency is
37:26 - structured currency uh concurrency so
37:30 - you could essentially send off multiple
37:32 - asynchronous requests
37:34 - it's just a way of structuring your
37:36 - asynchronous request in a way that
37:38 - um sort of makes sense to you so
37:43 - so it looks like that but you put the
37:46 - async up here
37:48 - and essentially these two lines of code
37:51 - will
37:52 - fire simultaneously and then you'll be
37:55 - fetching them
37:55 - asynchronously both i think i think
38:00 - and then they have this new data type
38:02 - called actors so
38:04 - instead of you know when you declare a
38:05 - class
38:07 - like class stage manager instead you can
38:09 - do you can change this class to an
38:11 - actor stage manager and what an actor
38:14 - does
38:14 - is it helps to prevent
38:18 - multiple multiple parties from accessing
38:23 - uh that thing at once so
38:26 - this is called mutual exclusive access
38:29 - and you can imagine
38:30 - concurrency the nature of it is that
38:33 - you know you have things happening
38:35 - simultaneously
38:37 - all over the place so sometimes there's
38:39 - a resource
38:40 - that cannot be accessed by multiple
38:43 - parties at once what if
38:45 - two people try to change it like at the
38:48 - same time you're gonna run into these
38:50 - scenarios called race conditions where
38:54 - um you didn't expect maybe like
38:58 - party b to access it before party a but
39:01 - depending on how fast the code is
39:03 - running depending on all these
39:04 - environmental factors
39:06 - uh you know party party a or party b
39:08 - might come
39:09 - first or second like that always changes
39:11 - and so
39:12 - concurrency concurrent code is really
39:14 - hard to debug because you can't count on
39:16 - it being the same
39:18 - every single time you run it there's so
39:21 - many factors that would affect that
39:22 - so an actor is talking about
39:26 - essentially you're defining a resource
39:28 - that only lets one party
39:30 - in at once to work with it and then they
39:33 - have to sort of release it
39:35 - uh before it becomes available for the
39:37 - next party
39:38 - to use so that's that's what that is
39:41 - and there's this main actor keyword you
39:44 - can put on a function
39:45 - of this yeah so in the past
39:49 - um we had to use dispatch
39:52 - queue.main.async
39:54 - to essentially run any ui code or
39:56 - anything we wanted to run on the main
39:58 - thread
39:59 - uh we had to use this block to
40:03 - run that code essentially to give it to
40:06 - the main thread to run
40:07 - so you know you'd have to do something
40:09 - like this
40:11 - um and then put whatever code you wanted
40:13 - here and essentially it passes
40:15 - it to the main thread to run whenever
40:17 - it's free to run it
40:19 - because you don't want to run any ui
40:21 - type code like refreshing the ui
40:23 - updating ui or anything that causes the
40:25 - ui to
40:26 - update from a background thread because
40:29 - the main thread is the
40:31 - the person who's a person but you know
40:33 - what i mean
40:34 - who is responsible for the ui
40:37 - so now we don't have to do that
40:41 - there are there is a way for you to
40:43 - specify that
40:44 - a function is always run on the main
40:47 - thread
40:48 - it will never be run in the background
40:49 - thread so it automatically knows always
40:52 - to
40:52 - um wait for the main thread to be ready
40:55 - to
40:56 - to run that um so i think that's a
40:59 - that's a cool improvement and saves us a
41:00 - ton of uh
41:01 - ton of work okay so before we jump into
41:04 - swift ui
41:05 - i'm just checking the time i might have
41:07 - to
41:09 - yeah i might have to stream
41:13 - this again tomorrow you know i do have a
41:15 - stream setup already
41:17 - for the same time tomorrow and we'll
41:19 - probably go through the other half of
41:21 - this
41:21 - on stream tomorrow because i didn't
41:24 - realize that time would fly by
41:26 - having so much fun so i think we have
41:28 - time probably to go through the swift
41:30 - section the swift ui section
41:32 - um and then we'll have to call it a day
41:35 - because i have to run unfortunately um
41:37 - and then i'll also
41:38 - you know spend a few minutes on
41:40 - questions and then
41:42 - we'll come again tomorrow if if you're
41:44 - free
41:46 - but i'll be here so swift ui i want to
41:49 - show you
41:50 - some of the cool stuff they basically
41:52 - released a whole bunch of new modifiers
41:54 - that make it a lot easier to do some of
41:56 - the
41:58 - i think i jumped too much sorry
42:06 - ah right before him he's talking about
42:09 - swift playgrounds
42:14 - okay
42:20 - all right so this is this is where we're
42:22 - at so you guys know the swift ui list
42:24 - right that's this guy right here and
42:27 - it's
42:28 - an easy way for you to show a list of
42:30 - items
42:31 - so they've added a couple of new
42:32 - modifiers one
42:34 - of them is called swipe actions and it
42:37 - allows you easily to specify
42:39 - you know when you swipe a row for
42:41 - something to happen
42:42 - so in this case they have a button when
42:45 - you swipe it
42:46 - it it favorites and it adds a heart
42:47 - there so that's a cool
42:49 - thing another one is refreshable this
42:51 - refreshable modifier essentially
42:54 - gives you pull to refresh just with a
42:57 - single modifier
42:58 - so that's that's really cool
43:01 - uh they also have this ability here
43:04 - to limit a specific modifier
43:07 - depending on the platform maybe even the
43:11 - os version
43:13 - it should be it should be os version as
43:15 - well
43:16 - um so you can selectively only
43:20 - have these modifiers for specific
43:22 - platforms and i think they needed to do
43:23 - this
43:24 - um searchable is another modifier that
43:27 - instantly adds
43:29 - a search field at the top so
43:33 - that that's pretty cool you still have
43:34 - to write the logic for how the search
43:36 - happens right
43:37 - but you don't have to build any of this
43:40 - ui yourself you just add this searchable
43:42 - modifier to a list
43:44 - and you instantly get a text field up
43:46 - there
43:47 - and then as you can see here you can
43:50 - also specify search suggestions
43:54 - let me see if i can yeah so there these
43:56 - suggestions
43:57 - uh essentially
44:01 - they're listing these search suggestions
44:04 - based off of
44:05 - like a field on your view model but
44:07 - again you're going to have to come up
44:08 - with these suggestions as long as you
44:10 - have that data somewhere
44:11 - in a property or or somewhere that can
44:13 - be accessed you can specify
44:14 - them here and just with a couple of
44:17 - lines of code you can get
44:18 - sort of a filtering or search
44:20 - functionality there
44:23 - so that's really cool for the list
44:24 - there's also a bunch of accessibility
44:27 - modifiers now
44:28 - so there is one
44:32 - which is called the accessibility rotor
44:34 - and i'll be honest i haven't
44:36 - really explored accessibility myself
44:40 - but this is a huge huge thing as
44:43 - and i love the way apple is going with
44:45 - being more inclusive
44:46 - because you know my whole thing with
44:48 - code with chris is being inclusive and
44:51 - and being a very friendly environment to
44:53 - learn coding
44:54 - and you know no judgements and no
44:57 - putting people down or anything like
44:58 - that
44:59 - um so i i'm really i really feel
45:02 - positive about apple
45:05 - being very inclusive at least
45:08 - um at least to the public i don't know
45:10 - what's happening behind the scenes
45:12 - but um they they always come up with
45:15 - these new features to
45:16 - make it so that everyone can code so the
45:20 - accessibility router
45:21 - essentially helps you
45:25 - it allows people to select
45:29 - different parts of your app
45:33 - so it looks like this i guess they don't
45:35 - have to actually be able to scroll or
45:37 - anything like that
45:39 - it lists all the options like that so
45:41 - you can
45:42 - maybe use voice to text to select
45:44 - something or maybe you can
45:47 - you know whatever sort of selection
45:48 - device they're using but this is
45:50 - definitely
45:50 - easier to navigate and select something
45:54 - than it is with a list like that
45:56 - the other thing to help us implement
45:59 - accessibility better in our apps
46:01 - is this other modifier called
46:03 - accessibility representation
46:06 - and this modifier allows you to inherit
46:08 - the
46:09 - full accessibility implementation of
46:11 - another control
46:12 - so let's say you're building a custom
46:14 - stepper control
46:15 - well if you're building like a custom
46:17 - separate control from the ground up
46:18 - you're going to have to
46:19 - make sure it's accessible and you might
46:22 - not want to go through the effort of
46:24 - doing that but this modifier allows you
46:26 - to essentially
46:27 - inherit all of the the full
46:29 - accessibility implementation
46:31 - of the apple stepper so you don't have
46:34 - to do any additional work
46:38 - the other thing that you might have seen
46:39 - here is this
46:41 - component right here this is a new swift
46:43 - ui component called a table
46:45 - i haven't played with it but it
46:48 - apparently can do multi-column
46:50 - uh and yeah i think it's much needed
46:53 - where a lot of apps have this sort of
46:55 - sort of data
46:57 - grid type view and that was something
46:59 - that we were missing before so
47:00 - new table component very cool
47:04 - and then the other thing is they're
47:06 - showing
47:08 - that they're showing this little thing
47:11 - where
47:12 - uh it'll be intelligent enough to
47:15 - recognize that you have a background
47:17 - here and instead of
47:18 - you know gray subtext it's gonna make it
47:21 - look
47:22 - really cool like that and just kind of
47:24 - show through the background
47:26 - uh so they called it material support i
47:28 - don't exactly know what that means until
47:30 - you know i dig in and play with it but
47:33 - there's other new things that they
47:34 - didn't cover there's a
47:35 - location button which i i've there was a
47:38 - wwdc session that i saw that i
47:41 - bookmarked
47:41 - and essentially it's a button that
47:42 - someone can tap to give your app
47:44 - permission to geolocate them so
47:46 - the traditional ways like pop up this
47:48 - little dialogue and then um
47:52 - people would have to opt in and say okay
47:54 - allow this app to track me
47:56 - but with this location button that makes
47:57 - things easier
47:59 - a whole bunch of other stuff that they
48:00 - did didn't really show they just listed
48:04 - okay so i think i'm going to stop there
48:06 - for the rest of this
48:07 - uh we are going to do this tomorrow
48:11 - but let's let's field some questions
48:22 - you know what my greatest fear is in
48:24 - doing these streams is
48:25 - um somehow my mic cuts out something
48:29 - happens and i'm talking for like half an
48:31 - hour and everyone's like we can't hear
48:34 - you
48:35 - and i won't know i'll just keep talking
48:39 - so i really need that second screen but
48:41 - now that they announced that cool thing
48:43 - where
48:44 - what did they call it universal control
48:47 - where you can put like
48:48 - an ipad right beside your device and it
48:50 - just becomes a second screen
48:52 - so i think i you know i'm definitely
48:54 - getting a new ipad just to play with the
48:57 - um
48:57 - building apps on the ipad thing and i
49:00 - want to show people that so i'm getting
49:02 - a new ipad
49:04 - uh oh shoot sound is low i hope
49:09 - i hope you guys were able to hear me
49:11 - over the music uh
49:13 - otherwise i would have just done the
49:14 - whole stream like that
49:28 - okay
49:40 - well it looks like we're pretty good for
49:42 - questions
49:46 - uh tutor we have a ton of playlists on
49:49 - our channel just go to
49:50 - youtube.com code with chris and you'll
49:52 - see the um
49:53 - the beginner playlist
49:57 - sure you know what uh ready crafty i'm
49:59 - gonna try talking a little bit louder
50:02 - or i'm gonna try turning down
50:06 - let's see i don't want to blow if i talk
50:09 - too loud it gets into the yellow section
50:11 - and it's gonna
50:12 - hurt your ears
50:19 - um ayan i'm not really sure what you
50:22 - mean
50:22 - for 12.5 like ios
50:26 - 12.5 no xcode profile you're saying
50:30 - right what am i using am i using xcode
50:35 - yeah 12.5 but i don't know exactly
50:38 - what's if there were
50:40 - really big changes from 12.4 to 12.5 i
50:43 - think one of the
50:44 - the things that i have to balance is
50:46 - seeing what they've changed
50:48 - um and then seeing if i have to change
50:51 - all the materials so
50:53 - as you can imagine we have so many
50:55 - videos and lessons and courses and all
50:57 - of that
50:58 - uh if they completely change the way
51:01 - things look and people can't follow i
51:03 - have to
51:03 - redo everything and um sometimes that
51:06 - that's a real nightmare
51:08 - so if the changes aren't too big what i
51:11 - usually do
51:12 - is just write a note tell you okay this
51:15 - button's moved there
51:16 - um and hopefully that's enough
51:19 - if you can't follow that we always have
51:22 - a forum there's always people you can
51:24 - ask
51:25 - you know what i am going to tell you
51:27 - guys about this in case you don't know
51:30 - so we have a code crew community here
51:33 - um again inclusive that's that's the
51:36 - whole
51:37 - thing with code with chris right no
51:40 - judgments
51:41 - um everyone's there to learn there are
51:42 - no dumb questions
51:44 - and uh we try to help everyone whether
51:46 - you are
51:47 - you know a paying subscriber for our
51:50 - courses or not
51:51 - we'll still point you in the right
51:52 - direction even if it's not with our
51:54 - resources
51:56 - uh so that is that is that and this
51:59 - actually has become a huge part of
52:02 - of code with chris and before some of
52:04 - you actually might be from our old
52:06 - facebook community and we still have
52:07 - that up and running actually
52:10 - so uh what is it here this one
52:13 - we have a facebook community um that we
52:15 - had before but i had sort of a scare
52:19 - one day it just it just closed because
52:22 - it said that
52:23 - we had broken some rule on facebook
52:26 - um but then after i sort of appealed it
52:29 - um and said you know what did we
52:32 - what did we break in terms of rules and
52:36 - guidelines
52:36 - and they reinstated us and that was a
52:38 - wake-up call that
52:40 - you have to you know as much as possible
52:42 - own the platforms that you really care
52:44 - about otherwise
52:45 - it can be just be taken away from you
52:47 - and so we started
52:49 - our own forum which you know is hosted
52:52 - on our own
52:53 - hosted servers and nobody can take this
52:56 - away
52:57 - because it's not only for me it's for
52:59 - the people who
53:00 - who use the community too right imagine
53:02 - something that you've been relying on
53:04 - that you've been making friends on that
53:06 - you've been learning on
53:07 - suddenly just vanishes and i think that
53:10 - would be horrible
53:12 - so this is sort of just still developing
53:15 - um
53:16 - in the future i definitely want to run
53:18 - more community app challenges because
53:20 - right now
53:21 - uh we're the one issuing the community
53:23 - app challenges like the stock tracker
53:25 - app
53:26 - is is one current one that we've got
53:28 - going
53:29 - uh where we challenge you guys to build
53:32 - something like this and by the way that
53:35 - ends in seven days you should still have
53:36 - time to do that and then we're gonna do
53:38 - a showcase
53:39 - video of all the apps that have been
53:40 - submitted so we have been getting more
53:42 - submissions thanks to extending the
53:45 - deadlines that's really awesome
53:46 - but i went off on intention in the
53:49 - future i want
53:50 - you guys to create the app challenges so
53:53 - i want
53:54 - you guys to issue your own app
53:55 - challenges to the community and that way
53:58 - um i think it opens up a lot more
54:01 - variety
54:02 - and also a lot more fun there's just
54:06 - gonna be
54:06 - um anyone can issue a community app
54:09 - challenge
54:10 - i think that would be really cool that's
54:12 - where i want to get to with that
54:15 - okay cool let's see if we have more
54:18 - questions
54:18 - before i have to hop off in a couple of
54:22 - minutes
54:24 - the stock app is too hard um yeah you
54:27 - know what it is
54:28 - it is a little harder than the weather
54:30 - app and we had a lot more participation
54:32 - on the weather app but
54:33 - this is what i'm trying to gauge right
54:35 - because the weather app was the first
54:36 - one
54:37 - stock tracker app is the second one i
54:40 - it's really hard to nail the right
54:41 - difficulty
54:42 - and so i need that feedback from you
54:44 - guys um if it's too difficult you know
54:46 - what for the next one we'll try to
54:48 - um have it like an easy level medium
54:51 - level
54:52 - and whatnot but still still tuning
54:55 - still tuning awesome i'm glad you found
54:59 - that tutorial
55:06 - thank you lorenzo thank you for watching
55:11 - ah pegasi
55:15 - we were talking yesterday on the wwd
55:19 - series i didn't
55:20 - realize that i was talking to you i
55:21 - didn't see your last name or
55:23 - i didn't make that connection maybe
55:25 - because i was just so nervous from
55:26 - streaming for the first time but i
55:27 - wasn't even talking
55:28 - um awesome awesome so glad to see you so
55:31 - glad to see you
55:39 - all right um well time is getting to the
55:42 - end
55:43 - so thank you everyone for joining i
55:45 - really really appreciate the support
55:47 - i'm going to be trying to stream every
55:49 - single day
55:51 - this week at the same time tomorrow
55:54 - we'll be going through the rest of this
55:56 - list right here
55:58 - if i have nothing to talk about on
56:00 - thursday and friday
56:01 - then i'll just turn off the mic and
56:03 - we'll
56:04 - i'm gonna spend it coding you can code
56:06 - too you can study ah
56:08 - you know what i have a lot of sessions
56:09 - to watch so that's what i'll probably be
56:11 - doing if we have nothing to talk about
56:13 - um but otherwise maybe it could be like
56:15 - a hangout chat or anything like that
56:17 - but i just want to get used to just used
56:21 - to being in front of a live camera it's
56:22 - very different
56:23 - from uh recording myself
56:26 - for a lesson where i can do as many
56:28 - takes as i want and then
56:30 - pick the best take but at the same time
56:33 - i feel like live streaming like this
56:34 - and having a live camera i'm more easily
56:38 - able to show you guys
56:41 - um you know i guess i guess
56:44 - be more myself because that doesn't
56:46 - really come through on edited videos
56:48 - so i look forward to doing more live
56:50 - streams uh hopefully i get to the point
56:52 - where
56:52 - i'm doing presentations and teaching
56:55 - more that i do intend to do that
56:57 - and also member q and a's or q a's for
57:01 - the public as well as
57:02 - q and a's for our cwc plus members as
57:05 - well
57:06 - so anyways um thank you guys all for
57:09 - joining i'm gonna end this stream now
57:11 - and i'll see you guys tomorrow if you
57:13 - are free
57:15 - alright bye