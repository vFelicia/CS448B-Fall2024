00:00 - today we're announcing that new framework 
it's called swift UI pay code crew it's Chris  
00:11 - here let's just dive into it shall we yesterday 
Apple announced Swift UI a new way to build user  
00:16 - interfaces using code and this is huge because 
the developer community has always been divided  
00:22 - between using storyboards or using programmatic UI 
now Swift UI looks easy enough for a beginner to  
00:28 - grasp and yet offers the maintainability of 
a coded UI so the best of both worlds right  
00:33 - well this question plagued me and I couldn't fall 
asleep last night so I ended up staying up until 3  
00:39 - a.m. to figure out if Swift UI really is the Holy 
Grail so in this Swift UI tutorial I'm going to  
00:45 - show you what I've learned and I'm going to give 
you my verdict stay tuned I need to give Apple  
00:55 - props because they've created a really nice set 
of Swift UI tutorials that walks you through the  
01:00 - basics and all of the aspects of the framework I 
highly recommend that you check it out or you know  
01:05 - you could just watch me demo it for you right now 
I gotta be honest I'm pretty tired right now from  
01:09 - staying up but I'm gonna push through it because 
if it weren't for you yes you watching my videos  
01:15 - and supporting my channel we wouldn't be here to a 
hundred case strong so if you're brand new to the  
01:20 - channel and this is the first time you're watching 
I want to welcome you to the code crew and thank  
01:24 - you oh yeah and hit that like button and subscribe 
button because that stuff really helps the channel  
01:29 - and it lets me know that you want to see more 
tutorials like these alright with that said let's  
01:34 - look at some code so by the end of this tutorial 
you'll have something that looks like this right  
01:39 - here on the screen now don't be deceived this 
might look kind of simple but it actually touches  
01:44 - upon a lot of the different aspects of Swift UI 
kind of core principles that you're going to need  
01:49 - to be able to work with it I found it to be a 
really good tutorial and it was actually one of  
01:54 - those tutorials I mentioned that Apple has that's 
this one right here all the links will be below in  
01:59 - the description so this particular one starts at 
the very very basics where you're going to create  
02:05 - some text views you're going to explore the new 
canvas aspect of Xcode 11 you're going to be able  
02:11 - to combine some views and modify them to create 
that composite view there that this view right  
02:17 - here is actually made up of a couple of different 
programmatic views so that's really really cool  
02:23 - and you're going to see how we're going to do that 
let me first show you kind of like the high-level  
02:27 - steps we're going to go through in this tutorial 
so we're gonna create a new Xcode project I'm  
02:32 - gonna show you a little bit about the interface 
and how it's changed we're gonna create some text  
02:36 - views and we're gonna modify it from the canvas 
and then through code and we're going to start  
02:41 - using some stacks which allows you to combine 
elements together and arrange them horizontally  
02:46 - or vertically we're going to create some custom 
image views and then we're going to also look at  
02:52 - how we can use some UI kit elements and bring them 
into use with Swift UI then we're going to combine  
02:59 - these views together to form this detail view 
here and a cool thing that apple also has with  
03:07 - their tutorials is this little quiz at the end so 
I highly recommend that you come here and check  
03:11 - your understanding after you watch this so I'm 
going to be walking through all of these steps  
03:15 - and it's gonna take a lot less time than the 40 
minutes that they've got estimated here so don't  
03:22 - worry about that all right so let's jump right 
in I'm gonna close this Xcode project and we're  
03:27 - gonna start fresh so first we're going to create 
a brand new Xcode 11 project and we're gonna want  
03:34 - to choose a single view app under iOS I'm gonna 
call this a swift UI demo - I've done a couple  
03:44 - of these at this point but the important thing 
you want to do is make sure that you've got use  
03:49 - swift UI checked then you're going to go next and 
I'm going to create it in my sample apps folder
04:00 - all right so now we've got a brand new project 
so I know there's a lot to take in and it looks  
04:05 - a little different from what we're used to seeing 
in Xcode 10 namely there is this kind of preview  
04:12 - pane here and this is called the canvas with 
Swift UI what you're gonna write in code you're  
04:18 - actually going to get a preview of it here so as 
you're changing your code to modify your UI it's  
04:25 - updating in the canvas but let's not jump to far 
let's take a step back and let's take a look at  
04:30 - what's changed here in terms of the files that 
you get for your new project so I'm gonna go up  
04:35 - to editor and we're going to choose editor only 
and just hide that little preview pane for now  
04:40 - and let's take a look here so we've got the app 
delegate and if you've worked with iOS before and  
04:47 - Swift projects you're used to this this file here 
it contains a lot of the lifecycle events for your  
04:53 - application but what you'll notice that is that 
we also have the scene delegate now now what's  
04:59 - important to note here is this part down here 
where it sets the route view and this part is  
05:07 - where you specify the initial view for your app 
when it launches now what is this content view  
05:13 - it seems to be creating a new instance of content 
view well that's what you have right here so this  
05:20 - content view describes a single view in your app 
you'll notice that we don't have a storyboard file  
05:26 - here we still have our asset library and we have 
a launch screen storyboard and then the AP list  
05:31 - which we've always had so let's wait until my 
xcode responds the end all right so you can see  
05:41 - storyboards are just as slow as ever okay which 
is a very common complaint from people so Swift  
05:49 - UI might be a lot better you'll see so let's go 
into content view here and before I talk about  
05:57 - what's in the file here let's just try to run this 
and preview it in the canvas and see what we get  
06:02 - so let's open up the canvas again and you're not 
gonna see anything at first until you hit resume  
06:08 - and you're gonna have to wait a while while it 
starts up to simulate and then in the background  
06:13 - now for me when I first installed Xcode 11 and 
I tried to preview it it actually took a while  
06:19 - and then it crashed and I couldn't get it to run 
I just kept getting some error here up here and  
06:25 - then even when I tried to run in the project and 
I tried to run in a simulator it was still failing  
06:30 - to launch and it wasn't until I closed Xcode and 
just did the good-old restart the computer trick  
06:37 - that everything start working again so that's just 
a tiny tip for you if you encounter not being able  
06:44 - to run the simulator or seeing the preview just 
restart that's gonna fix things at least it did  
06:49 - for me all right so let's let me just get rid of 
some of the clutter here so we can focus on the  
06:55 - Swift UI part all right that looks good so you 
notice you have some zooming controls in here  
07:01 - and you also have some controls in here which 
I'll get to in a second but first let's take a  
07:09 - look at this so we have pretty much an empty view 
and we have hello world let's take a look at how  
07:16 - we generate that through the code right here in 
our content view thoughts Swift file we have two  
07:21 - different structures the first one conforms to the 
view protocol and it describes all of the content  
07:28 - and the layout for our view the second structure 
conforms to the preview provider protocol and  
07:36 - this is merely code to generate the preview that 
we see on the right-hand side now the reason why  
07:43 - this is separate is to give us flexibility on 
what we want to see on the right-hand side for  
07:50 - example if we have some sort of really complex 
view some really complex view hierarchies and  
07:56 - then we don't want to see the whole thing because 
it'd be hard to just work on maybe a small aspect  
08:02 - of it we can modify the code in here to preview on 
the right-hand side exactly just the part that we  
08:09 - want to see that we're working on that is why 
we have this structure here now you'll notice  
08:14 - that we have these tags here and these are called 
directives and this particular one is just saying  
08:22 - that only run this code in between here if you're 
in debug mode and when you're building your app by  
08:29 - default you're running it you're debugging 
you're like building it you're fixing bugs  
08:34 - you are in debug mode at the time when you're 
ready to publish your app and you package it up  
08:40 - for deployment to upload to the App Store it's 
gonna go from debug to production so this code  
08:47 - right here that generates the previews this code 
won't ever be in your final build it's not going  
08:52 - to be run this these previews are mainly for when 
you're building your app to make it easier for you  
08:58 - to control what you want to see on the right-hand 
side because as you're about to see these previews  
09:05 - are pretty cool so for example this is the text 
element that is describing that hello world label  
09:11 - there it's called a text view and we can let's 
say change it and as you can see it's updating  
09:20 - live now the cool thing about this preview here 
is that you can modify what you see here directly  
09:29 - from the preview so if you hold down command and 
you click on this text view you're gonna be able  
09:34 - to do things like embed it in a different stack 
view or group or put it in a button or you can  
09:41 - inspect it and then you can change some of its 
properties so I can change this back to let's  
09:48 - say hello Swift UI when I do that take a look at 
what happens to your code right there right let's  
09:57 - let's do that again let's inspect this time we're 
going to change the font we're going to choose a  
10:03 - system font type of title to describe this size 
and then you can see that it adds this piece of  
10:13 - code right here to your text view now they've put 
it on a separate line to make it easier to read  
10:18 - but essentially what's happening is that it's 
just calling a method on your text view object  
10:26 - right here so in Swift UI you're going to see kind 
of different rows of modifiers they're basically  
10:35 - calling these methods modifiers and they kind of 
chain them together so for example if I wanted to  
10:40 - take this textview green I can use another method 
and just chain it on here and there is a color  
10:48 - method right there and I'm gonna choose green so 
you can see that it updates it there and I'm just  
10:58 - gonna press enter like that and put it on a new 
line so it looks kind of funny but essentially  
11:02 - you're just creating an element and calling a 
method on it and then that returns the revised  
11:10 - element and then you're calling a method on that 
and you're just chaining methods like that alright  
11:16 - so let's put them on their individual lines again 
now one last time let's go into the preview here  
11:20 - and hold down command and click our text view 
there go inspect and let's change that text to  
11:28 - turtle rock and let's whoops where did that go 
let's go inspect and let's change the green the  
11:39 - color back to inherited so that's going to turn 
it black now you can see that you know it changes  
11:45 - the code there and you might say that things might 
get confusing if you can change things like that  
11:52 - from the code side and from the previous side 
if there's ever any discrepancy between the two  
11:58 - the code is always the source of truth at least 
that's what the documentation says so if you're  
12:04 - not liking what you're seeing in the preview it's 
always the code that is always right because this  
12:09 - preview is just being generated from the code 
if you think about it now I want to add a couple  
12:14 - more text views under Turtle Rock now the way to 
do this is using a element called the vertical  
12:21 - stack and if you've worked with uikit before 
this is called the stack view and it's just the  
12:26 - alignment vertical well here in the swift UI they 
call it AV stack and there's a couple of ways that  
12:32 - you can declare this so you can just type the 
code or you can then this is kind of cool you  
12:40 - can hold down command on your keyboard click text 
and then you can embed in V stack or because we're  
12:50 - gonna put multiple text views into this vertical 
stack so there's stacked one on top each other or  
12:54 - you can click on the preview like this and you can 
embed in V stock or you can actually open up the  
13:02 - object library here it's opening up on my external 
monitor and you can choose vertical stock and you  
13:10 - can literally drag this into your code like that 
to create some code so there are so many different  
13:16 - ways to do this I personally feel like it might 
might be a little confusing for people but you  
13:22 - know I guess having different ways allows people 
to choose which way they like okay so we have a V  
13:29 - stack here it has a pair of curly brackets like 
that and you can put your text views into there  
13:37 - like so and you're gonna have two labels one 
on top of each other so this one what did they  
13:46 - call it Joshua Tree National Park I believe 
and let's make this one aunt a sub-headline  
14:00 - and we're gonna go ahead and put that down there 
now we're also going to align these two labels by  
14:09 - I'm still calling them labels but they're text 
views you know line these text views on to the  
14:14 - left so when you create the vertical stack you 
can actually specify some parameters and one of  
14:21 - them C you can specify selling them here you can 
specify the alignment that's what we want so for  
14:28 - the alignment let's go leading and then the others 
are actually optional so we can leave that out for  
14:34 - now so we've got them aligned on the leading edge 
now now we also want to put a label beside Joshua  
14:42 - Tree National Park to say which state it's in so 
what we can do is now I'm going to do a different  
14:50 - way hold down command and click that guy and 
embed it in a horizontal stack so we're going  
14:57 - to put another text viewing here and call this 
California and there it is so this one will be  
15:09 - also a font sub-headline there we go alright so 
that's how we've structured something so far this  
15:22 - is too close together so what we can do is place 
a spacer in between Joshua Tree National Park in  
15:30 - California and to do that we're just going to add 
an element in between our two text views in our H  
15:36 - stack and this is just a space service Packer 
spacer object when you do that it basically  
15:44 - expands and pushes everything out it this spacer 
takes up all the available space that it can so it  
15:53 - basically pushed everything out to the edges now 
we can add some padding to the vertical stack or  
16:00 - V stack I'm still using UI kit terminology it's 
hard to shake alright so this is our V stack I'm  
16:06 - home to thought notation and this is padding 
so by default it looks like there is a default  
16:14 - sort of padding so just by calling the padding 
method it's gonna add some padding there alright  
16:20 - now we're going to see how we can add an image 
to our view so first of all we're going to have  
16:25 - to add that image to our asset library and this 
image actually came from the project files from  
16:32 - the Apple tutorial so I'm going to go ahead and 
grab this image and drag it into my asset library  
16:40 - now if you need this image the links are in the 
description that will link you to the tutorial  
16:44 - page and one of the links at the very top you 
can grab the project assets alright so we've got  
16:51 - this asset called Turtle Rock and instead of just 
adding it to our content view here we're going to  
16:58 - create a different view and then what we're going 
to end up doing is just combining these different  
17:04 - views into a bigger one so it's gonna give you 
an idea of what's possible so I'm gonna create  
17:10 - a new file here I create a new file my project and 
we're under i OS we're gonna choose swift UI view  
17:21 - down here notice you can still add storyboards so 
those aren't completely gone alright so this one  
17:26 - is going to be called circle image make sure that 
this should be checked on right if it this is not  
17:34 - on make sure it's checked alright so we're going 
to create it in our project here and you'll notice  
17:40 - let's just move this up here and let's close that 
file navigator so you'll notice that again we have  
17:48 - this structure that conforms to the view protocol 
for this new view that we've created called circle  
17:54 - image and we also have this preview right we're 
just going to show us what we see here now I'm  
18:02 - going to go ahead and hit resume just so we can 
see something but we're not gonna want to show  
18:10 - a text view all right so I'm gonna get rid of that 
and I'm going to use an image view instead now the  
18:18 - image view actually has an initializer where I can 
just pass in the asset name so I think this this  
18:24 - is turtle rock so let's see there we go so that's 
really cool the image view also has a method  
18:34 - called clip shape so then I can pass in a shape 
I'm going to pass in a circle and it's just as  
18:44 - easy as that so this new circle object you can use 
it you can actually use it as a shape that you can  
18:51 - display on the view and now I want to add a border 
to this circular image view so the way we do that  
18:56 - is we call this overlay method and we can pass 
in a view but instead of creating it directly in  
19:04 - there I'm gonna create it out here so what we're 
going to want to do is create a new circle and the  
19:11 - circle we are basically going to give it a stroke 
and we are going to choose the one with content  
19:21 - and line width so for this guy we can choose say 
krei and then for the linewidth we're gonna choose  
19:35 - two and then I'm going to take the circle that 
has this stroke here and I'm going to use it as  
19:41 - my overlay so you can see that I don't know if you 
can see right there but we do have a slight border  
19:48 - around our circle now and then lastly well we can 
actually before we do that let's add these guys  
19:55 - on new lines so it's a little easier to see we're 
gonna add a shadow of 10 points and lastly we're  
20:07 - gonna change this gray color to a white and we get 
this sort of resulting image which is very Apple  
20:14 - like wouldn't you agree okay so we're actually 
done with the circle image now and we're gonna  
20:20 - work on a third view before we combine everything 
together so let's go back into our file navigator  
20:26 - and let's go add a new file and once again we're 
going to choose swift u IV and we're gonna call  
20:36 - this one map view again make sure that target is 
checked under your project right there so we've  
20:43 - got this new map view all right let's put it right 
there so in this one we actually want to use a map  
20:50 - view from the mat kipp framework so in order to 
use that we have to import mat okay and here's  
21:04 - the part of the Apple tutorial that I still don't 
fully understand just yet but if you want to use  
21:10 - UIKit views with swift UI instead of conforming 
to the view protocol you're going to conform to  
21:19 - the UI view representable protocol and what you 
do is you actually get rid of this part and you  
21:29 - have two different other functions instead one 
is make UI view and this is where you generate  
21:35 - an instance of that UI kid view so in our case it 
would simply be in k-map view that's we've created  
21:45 - a new instance of it and then the other one is 
a update UI view and this is where we would put  
21:54 - the code to update the UI view the UI kit to view 
all right so let's see what says here UI view type  
22:10 - yeah so this one it should be returning a MK map 
view and this parameter yeah this is actually fine  
22:23 - so actually let's see if we can see anything let's 
hit resume all right so we do you see that kind of  
22:37 - a brown beige that little legal thing so this is 
kind of like the beginnings of a map I wonder if  
22:45 - it's loading so in order to view the maps we 
actually have to hit this button and go into  
22:50 - live preview did that work there we go so this 
is running it's running it's going it's trying  
23:00 - to generate the view so I think we're just going 
to get a basic map and then in here we're going  
23:07 - to want to set the exact region that we want to 
see around a set of coordinates according to the  
23:15 - tutorial oh I guess that would be Turtle Rock so 
for this part of the demo I'm just going to grab  
23:22 - the map kit code to Center the map around that 
set of coordinates because what we're focused  
23:28 - on here is showing Swift UI and learning about 
Swift UI and so I mean I can describe what the  
23:36 - lines of code do though all right so let's see 
if since this is a live preview it should be  
23:44 - just generating there's an error here so let's 
just describe what the code is doing first so  
23:50 - we're creating a set of coordinates with a 
latitude and a longitude right here and then  
23:56 - we're creating sort of like a region well this 
is the region so this is basically saying from  
24:04 - that set of coordinates how how much do you want 
to span out and then this MK coordinate region is  
24:11 - going to Center it around this coordinate with 
this sort of span and then basically what you  
24:18 - do is you call the set region method you pass 
in the region and that's it so our map view is  
24:26 - actually called UI view so I need to change this 
and we're going to call the set region on it and
24:34 - generating it's going it's going it's going
24:46 - boom I think I'm not sure I'm really bad at 
geography I'm gonna assume that it's good I know  
24:56 - there is I'm so dumb there's Joshua Tree National 
Park now that's a really fun part so we've gotten  
25:03 - our three views we're gonna combine them into an 
overall detailed view for our app so we're gonna  
25:10 - save this we're going to go back to the content 
view and what we've got here is basically it's  
25:18 - just the text so what we're gonna do is we're 
gonna embed this entire stack view yeah V stock  
25:27 - V stock V stack we're gonna embed this V Star in 
another V stack so that we can add our map view  
25:35 - element and our circle image element and then 
combine it all together alright so and a hold  
25:42 - down command click the sky embed and V stack we've 
got that this is the closing oh that's the closing  
25:50 - bracket for that guy it's not completely lined 
up so here we're just gonna put a matte view so  
26:02 - let's see that get put on the preview right here 
I might just have to go into live preview as well  
26:11 - yeah let's go into live preview so we can see the 
map cool there's Joshua Tree National Park what we  
26:19 - can also do is modify the frame of the map view 
just so it doesn't take up all of that space so  
26:25 - if we call frame you can actually set the width 
and the height you can set a couple of different  
26:30 - things I'm you just see that's not it come on 
autocomplete there we go set the width height  
26:41 - alignment but if we just set the height to 300 
let's say it's going to set the height to 300 but  
26:52 - it's going to still take up the entire width like 
that so that's really cool and then we're going to  
26:58 - add our Circle image in between that so we got the 
map view at the top and then the circle image and  
27:06 - then we've got our V stack of labels text views 
on labels text views pitch no alright so we're  
27:19 - going to add some offsets to bring that circle 
image into the map a little bit using the offset  
27:25 - method and yet most of these methods are kind 
of new to me actually so you know I think over  
27:35 - time when we're working with you I get a lot more 
they're gonna become second nature oh I think it  
27:41 - did something wrong so offset let's try that again 
first all right let's take a look oh it's just a  
27:50 - spacing if it is spacing all right well it looks 
like Xcode 11 is still a little buggy all right  
27:58 - so what I'm going to do is just try to quit and 
every start alright let's try and generate this  
28:06 - preview again looks like we've got an error 
here so that I wonder if that's gonna cause  
28:13 - an issue here so let's change that this inside 
the map view inside the update UI view function  
28:24 - the type of the UI view should probably be MK 
in that view all right so let's go back there
28:40 - succeeded all right all right so our offset did 
work let's go a live preview again I mean Xcode  
28:56 - 11 is still in beta right so keep that in mind 
okay so in order to bring up the label we're  
29:05 - going to call a different method called 
padding and we can specify the edges so  
29:16 - for the bottom edge we want to do length of 
minus 130 so that's gonna pull the label up  
29:26 - and then we're almost there guys and then in 
order to move this whole thing up to the top  
29:37 - we're gonna add a spacer as the last element of 
this root V stack and remember the spacer kind  
29:44 - of tries to take up all the space that it can so 
it's gonna push all of the elements above it to  
29:50 - the top so that's the ending bracket for this 
guy right so this is my fourth element spacer
30:04 - all right and then in order to get the map 
view under the knotch so that it ignores the  
30:12 - safe area there we are going to add another 
method called ignore the safe area and we're  
30:22 - going to specify the top now I want to turn 
it over to you leave a quick comment below  
30:34 - and tell me if you're optimistic about 
swift UI or you still have your doubts  
30:38 - about it I really want to hear what you think 
and if you don't want to miss the next so fui  
30:42 - tutorial make sure you're subscribed to the 
channel for now there's more WWDC and swift  
30:47 - UI content right over there alright thanks for 
watching and I'll see you in the next lesson