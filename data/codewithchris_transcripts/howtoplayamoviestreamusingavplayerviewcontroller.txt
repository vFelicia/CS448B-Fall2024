00:04 - hey coders how's it going I hope you
00:06 - guys are having a great day so far
00:08 - so yesterday we finished this simple
00:10 - version of the YouTube video app where
00:12 - we hard-coded the video data next week I
00:15 - plan to start the shopping app but I'm
00:17 - still finishing up a couple of things
00:19 - for that and in-between for these two
00:21 - days I didn't want to start and do the
00:23 - parsing for the dynamic version of the
00:26 - YouTube video app so instead I'm going
00:28 - to take a couple of outdated videos that
00:30 - I have on my youtube channel and update
00:32 - them for Swift one of those videos is
00:35 - how to play a movie stream on your app
00:38 - so I'm going to show you what we're
00:39 - going to build first so for this demo I
00:43 - just have a simple play button that when
00:45 - tapped is going to launch another view
00:47 - controller with a video that's on the
00:50 - net and that's going to play so
00:52 - something like this so I'll show you the
00:56 - code right now and you can see that the
00:58 - URL is something like this it's sitting
01:01 - on the net it's not in our Xcode project
01:04 - alright so let's start a new Xcode
01:06 - project and build this and you'll see
01:08 - that it's actually not that hard to do
01:10 - we're going to go up here to my Xcode
01:13 - menu and start a new project just going
01:16 - to start a single View application for
01:18 - this demo and call it AV player demo and
01:23 - make sure that the language is Swift and
01:26 - the device is iPhone and you have none
01:28 - of these checked I'm going to click Next
01:30 - and I'm just going to save this on my
01:32 - desktop I'm not going to create a git
01:35 - repository okay so I'm going to first
01:40 - start by scrolling down in my project
01:43 - properties and under linked frameworks
01:45 - and libraries we're going to click this
01:47 - little plus icon here to add a couple of
01:49 - frameworks that we need actually you
01:51 - don't even need to search for it but if
01:53 - you type in a V you're going to see a V
01:55 - Foundation and a V kit I'm going to
01:58 - highlight both of them and just click
01:59 - Add and you're going to add both of them
02:01 - like that or you can add them
02:02 - individually so next we're going to go
02:04 - into our main storyboard and we're going
02:09 - to search for button and that's just
02:12 - going to be the play button that you
02:13 - in the demo earlier I'm going to drag
02:16 - that here in the inspector I'm going to
02:18 - change it to play and then let's make
02:21 - sure you have that selected and let's
02:23 - horizontally and vertically Center it in
02:25 - the container
02:26 - okay so update the frames for that guy
02:28 - now we're going to attach an IB action
02:32 - handler to the top method of this play
02:35 - button so I'm going to open up the
02:36 - assistant editor and hold down control
02:40 - from the document outline I'm going to
02:42 - drag click and drag under here where we
02:47 - can declare a new method now let go I'm
02:49 - going to call this play button tapped
02:52 - and this is where we're going to add the
02:55 - code to trigger the video and actually I
02:58 - just made a mistake here so this is
03:00 - something to watch out for I by default
03:03 - when you do that it adds an iboutlet but
03:05 - what I actually wanted was an IB action
03:07 - handler so a lot of people who
03:09 - accidentally do this
03:10 - they just delete this IB outlet and
03:13 - think that all is fine but that's
03:15 - actually not the case because in this
03:17 - storyboard that element is still
03:19 - connected to that IB outlet which you
03:21 - just deleted so you want to go into your
03:24 - document outline in your storyboard and
03:25 - right click or ctrl and left click and
03:28 - scroll down you can see referencing
03:31 - outlets the button is still attached to
03:34 - this play button tapped IB outlet which
03:37 - doesn't exist anymore so that's going to
03:39 - cause a crash and we want to click this
03:40 - X to delete that so let's try this again
03:43 - hold down control click and drag it drop
03:46 - it here and this time for the connection
03:49 - type we want to choose IB action so this
03:51 - time I'm going to say play play button
03:55 - tapped and the type is UI button touch
03:59 - up inside is the event that we want
04:01 - Connect and now we actually have an IB
04:04 - action method so in here trigger the
04:07 - video to play now we're going to go back
04:10 - to the view controller
04:12 - let's go like the single view up here we
04:15 - want to import those frameworks which we
04:17 - added a V Foundation and a V kit because
04:21 - we're going to be using classes from
04:22 - those frameworks and up here let's
04:25 - declare two properties which we're going
04:27 - to
04:27 - use so let the AV player viewcontroller
04:36 - equals AV player view controller and
04:41 - secondly let AV movie player or actually
04:48 - it's just let's just call it AV player
04:50 - be an optional AV player and the class
04:56 - is just this one that's plain AV player
04:58 - and make that an optional because we're
05:01 - not going to create the ad player object
05:03 - up here we're going to do it in the
05:05 - viewdidload right here
05:07 - okay so let's declare our movie URL so
05:11 - I've got it right here this is the URL
05:13 - which the demo played so I'm just going
05:16 - to copy and paste this here for now
05:18 - we're going to put this into a string so
05:22 - we're going to declare an nsurl because
05:24 - that's what the movie player accepts
05:26 - we're going to say let you let's say
05:29 - movie URL equals nsurl and the
05:35 - initializer we want to use is this one
05:37 - here where you can pass in a string and
05:39 - then returns an optional type nsurl okay
05:42 - so we're just going to copy the string
05:45 - and paste it in there okay so remember
05:48 - that this returns an optional nsurl so
05:50 - let's label it like that so we don't
05:52 - forget next we're going to create a new
05:55 - AV player object and we're going to put
05:57 - it into this property here so we're
05:59 - going to say AV player let's say
06:03 - self-thought AV player equals AV player
06:07 - open it up and we're going to use this
06:09 - initializer which takes in an nsurl
06:13 - object because this movie URL may be nil
06:18 - if it couldn't create the object this
06:21 - would be nil we got a check if this URL
06:24 - actually exists first so let's use
06:26 - optional binding if let URL equals movie
06:32 - URL inside here
06:38 - passing the URL inside this statement we
06:41 - can be certain that movie URL actually
06:44 - contains an nsurl object so we're going
06:47 - to pass that into the creation of our AV
06:49 - player and then finally we're going to
06:51 - set the AV player view controller it has
06:56 - a property called player so this is the
07:00 - player which is going to source the
07:01 - media content for the view controller
07:03 - we're going to assign our AV player to
07:07 - that property
07:08 - okay so Xcode is complaining about
07:10 - something here let's see what it says
07:11 - change to let I cannot assign property
07:14 - because it's a let constant so up here
07:17 - we're not going to be able to use a
07:18 - constant we got to change this into a
07:20 - variable so that we can assign it right
07:23 - here into that property so now we're
07:27 - pretty much ready to play it we've got
07:29 - our AV player view controller setup
07:32 - we've got our AV player setup and
07:34 - pointed to this URL and the last thing
07:36 - we have to do is when the play button is
07:39 - tapped we're going to say self dot
07:41 - present view controller and the one
07:44 - we're going to present is the self dot a
07:46 - V player view controller for animated
07:50 - let's say true and for completion when
07:53 - it's presented we want to trigger we
07:56 - want to start the movie playback so
07:58 - let's just double click this completion
08:00 - Handler and add some code in here
08:02 - self-thought AV player view controller
08:05 - dot player dot play the reason we have
08:11 - this question mark here it's called
08:13 - optional chaining because in case this
08:16 - player property doesn't actually have an
08:18 - object this question mark here won't
08:20 - cause a crash because we're trying to
08:22 - call the play method on the player
08:24 - object so if there is actually a player
08:27 - object in there then it will call the
08:30 - play method on that but if not if it's
08:32 - nil then it won't cause a crash because
08:34 - we have this question mark here ok so
08:36 - now let's run it and let's see it in
08:38 - action
08:42 - okay so let's hit play and you'll notice
08:45 - that we can't play the video here if we
08:48 - look in the console for Xcode it says
08:51 - app transport security has blocked the
08:53 - clear text HTTP resource load and that's
08:56 - just Xcode making sure that we
08:58 - understand we're loading things through
09:00 - an unencrypted channel so to acknowledge
09:03 - that fact what we can do is add an
09:05 - exception for text slides comm or we can
09:07 - just tell the project that we can allow
09:09 - resource loads through any unsecure
09:12 - channel even and that's what we're going
09:14 - to do for the purpose of this demo I'm
09:17 - just going to go to the info.plist
09:19 - click plus and then you're going to be
09:21 - able to add a new key so app transport
09:24 - security setting make sure you type in
09:26 - capital a P and then this will show up
09:29 - so inside here I want to add allow
09:34 - arbitrary loads and change that to yes
09:38 - and now when we run it we won't run into
09:41 - that problem now because we've told
09:43 - Xcode that we understand and we we're
09:46 - going to allow resource loads through an
09:47 - unencrypted channel so when I hit play
09:50 - you're going to see that AV player view
09:53 - controller pop-up and you're going to
09:56 - see the AV player object play the movie
09:58 - stream so I hope that was helpful for
10:00 - you guys and I'll see you guys in the
10:02 - next lesson talk to you guys later
10:04 - bye for now
10:08 - you