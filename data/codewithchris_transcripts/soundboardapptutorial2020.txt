00:00 - hey cuckoo today I'm going to show you
00:01 - how to build a simple soundboard app a/b
00:05 - c/d
00:09 - a C B now this is a great practice out
00:13 - for beginners and we're going to do it
00:14 - in four simple steps all right let's
00:17 - roll hi and welcome to : Chris the place
00:24 - to be if you want to learn how to make
00:25 - an app I'm Chris and I'm so glad you're
00:27 - here here's the plan
00:29 - we're gonna start by building the user
00:30 - interface and then handle the user
00:32 - tapping we're gonna add the sounds and
00:34 - then finally play the sounds and at the
00:36 - very end I have a challenge for you if
00:39 - you're up for it to modify the project
00:40 - so let's dive in with setting up the UI
00:43 - we're going to start by creating a new
00:45 - single view app I'm just going to call
00:48 - this the sound board and I'm gonna save
00:50 - it in my apps folder on my desktop then
00:54 - we're going to jump into the storyboard
00:56 - and we're gonna add a stack view a
01:01 - vertical stack view to be specific and
01:04 - we're just going to put it right there
01:05 - now
01:06 - I hit the shortcut-keys command shift +
01:08 - L to bring up that object library but
01:10 - you can also click this button as well
01:12 - and then just search for stack view what
01:15 - we're going to do is have this stack
01:17 - view highlighted and we're going to come
01:19 - into here and then uncheck constraint
01:22 - margins and enable all four constraints
01:25 - and for all these choose the view hit
01:28 - this little drop-down and choose the
01:29 - view this is going to ensure that this
01:32 - stack view is going to reach all the way
01:34 - to the edge of the screen because the
01:38 - safe area is a margin type of area where
01:41 - we want it to reach all the way to the
01:43 - edge of the screen we're gonna add these
01:46 - four constraints so you can see that it
01:48 - touches all four sides and then we're
01:50 - gonna go ahead and add a horizontal
01:52 - stack view this time and just put it in
01:55 - there you can see that this horizontal
01:58 - stack U is inside the vertical one
02:00 - so that's correct I'm going to hit
02:02 - command shift L to bring up this menu
02:03 - again and this time I'm going to drag
02:06 - this guy directly into this document
02:08 - outline the reason is because I don't
02:11 - want to accidentally put this horizontal
02:13 - stack view inside of the other
02:15 - horizontal stack view and it's going to
02:16 - look like this if you do this don't
02:19 - worry about it all you need to do is
02:21 - get back out so that the vertical stack
02:24 - view contains the two horizontal ones
02:28 - now in order to get four quadrants
02:30 - equally we're going to set some
02:33 - attributes on this vertical stack view
02:35 - go into this inspector here and for
02:37 - distribution we're gonna say fill
02:39 - equally and I'm gonna highlight these
02:41 - two horizontal ones and again change the
02:44 - distribution to fill equally finally
02:47 - we're gonna add some buttons so hit
02:49 - command shift L now search for button
02:52 - this time and let's put it in there and
02:56 - add another one to that horizontal stack
02:59 - deal all right and we're gonna add a
03:01 - third and a fourth the third and fourth
03:05 - are going to the second horizontal stack
03:07 - view so now you can see that we've got
03:09 - four buttons like that and just this
03:10 - check if you've got the right layout
03:15 - going on you can run your project and
03:17 - you should see your four buttons and
03:21 - even if you press command left and right
03:24 - to rotate the phone you should be able
03:27 - to still have four quadrants and that's
03:29 - when you know you've set things up
03:30 - properly now we're just gonna configure
03:32 - some text and some colors so I'm going
03:35 - to go ahead a highlight well we're gonna
03:39 - do this one by one because we're going
03:40 - to be setting the colors so let's select
03:44 - any button go down to the background and
03:46 - we're going to choose a color so I've
03:49 - recently used these ones so it's here
03:51 - but if you wanted to set a custom color
03:53 - you just select custom it's going to pop
03:55 - up this little menu for you to select
03:56 - your own color alright here's my second
03:59 - button I've got maybe this red or pink
04:02 - this third button blue and then this
04:05 - last one oops
04:10 - all right so now let's change the text
04:12 - and we can do all of them together let's
04:15 - change the font I mean so we're gonna
04:17 - hit this little T right here and change
04:20 - it to custom and I'm going to change it
04:23 - to bold
04:23 - and I'm just gonna up that font size
04:25 - that looks something like that and now
04:28 - I'm going to change the text for the
04:30 - individual buttons actually you know
04:33 - what I wanted to change the text color
04:34 - too so I'm gonna highlight all of them
04:36 - change the text color to white right now
04:40 - I'm going to change the text of each
04:41 - button I'm gonna call this a B C and D
04:50 - the next thing to do is to handle the
04:53 - user interaction now we're going to
04:55 - handle the tapping of these buttons and
04:56 - the way we can do that is by hooking up
04:59 - IB action functions to each of these
05:02 - buttons when they are tapped so go ahead
05:05 - open up assistant editor on the right
05:07 - hand side you see automatic view
05:10 - controller and we basically want to find
05:14 - the last closing tag of this class and
05:16 - right above there we're going to be
05:18 - adding these IB action methods so if it
05:22 - makes it easier you can drag you can
05:25 - create these IB action methods from the
05:27 - document outline which is what I'm going
05:29 - to do here hold down control click and
05:32 - drag and by default the connection type
05:35 - should be action if it's not just change
05:37 - it to action and the name I'm gonna call
05:39 - it a tapped and that creates an IB
05:42 - action now I'm going to hook up an IB
05:43 - action function for every single one of
05:46 - the 4 buttons but at the end I'm going
05:49 - to issue a challenge to you to do it
05:50 - with one single IB action but for now
05:53 - we're going to hook up an IB action for
05:55 - each one just so you can see how this
05:57 - works
05:59 - before we get more complicated so we've
06:05 - got C tapped it's definitely a lot of
06:08 - code replication here but you know
06:10 - that's alright when you're just starting
06:12 - out and you're not trying to do
06:14 - everything you know the best way all
06:17 - right so if you go back into your view
06:19 - controller you should have all of these
06:21 - for IB actions these
06:22 - guys should be filled in and if you
06:25 - click them they'll tell you kind of what
06:27 - button they're hooked up to now let's
06:30 - add the sounds I created a couple of
06:32 - sound files and we're going to add them
06:35 - to our project right now so I'm gonna go
06:37 - here and create a new group just to keep
06:40 - things organized I'm gonna call them
06:42 - sounds and then I'm just gonna drag my
06:44 - mp3 files into the sounds group and it's
06:50 - gonna pop up this guy select copy items
06:52 - have needed that's going to include the
06:55 - sound files into your project folders
06:56 - keep it all in one place and make sure
06:59 - add to targets is checked on because
07:02 - this is very important if this is
07:04 - unchecked like that when you package up
07:07 - your app into the bundle which is just
07:10 - kind of the app package if you will
07:12 - those sound files won't get included so
07:14 - you want to make sure that this is
07:16 - enabled
07:17 - alright click finish and you should have
07:19 - your sound files right there in just a
07:21 - double check if you select each one of
07:23 - these files you should be able to see
07:25 - Target membership this is enabled
07:29 - because if they're not enabled then
07:33 - you're not going to be able to reference
07:35 - those sound files finally we're going to
07:38 - play the sounds now we're going to play
07:40 - the sound files using the a/v audio
07:42 - player class the first thing you want to
07:44 - do up here is import AV foundation
07:49 - because that's going to contain the
07:51 - class that we need I'm going to save our
07:53 - audio player is equal to AV audio player
07:57 - and we're going to make it an optional
08:00 - this means that we're not creating the
08:03 - audio player object right then in there
08:06 - we're only creating this property that
08:08 - is going to store a reference to that
08:10 - audio player object once we do create it
08:13 - so instead we are going to do that
08:15 - inside each of these ib actions so let's
08:19 - take a look at how we're going to create
08:22 - one of these guys so AV audio player and
08:25 - you can see here a couple of things i
08:28 - want to point out that you have to pass
08:29 - in a URL object this URL object points
08:33 - to the sound file
08:34 - which actually is inside of our bundle
08:37 - we've added it right here that's why I
08:39 - said it was so important to make sure
08:42 - that these mp3 files are included in
08:45 - that target membership the second thing
08:48 - I want to point out is that creating
08:50 - this av audio player object has this
08:53 - throws keyword and that basically means
08:55 - that it may throw an error if the audio
08:58 - player object isn't able to be created
09:00 - so we have to do some error handling
09:04 - just to be prepared to handle that error
09:06 - so let's go ahead and see how this is
09:08 - done we're going to need to pass in a
09:13 - URL object let's create one up here so
09:15 - that we can do that I'm going to say let
09:18 - URL equals and the way we get a path to
09:23 - that mp3 file is we can say bundle dot
09:30 - main dot URL for resource with extension
09:35 - and this is basically going to look
09:37 - inside the app bundle for this project
09:39 - and we're going to be able to specify
09:43 - that the resource we're looking for is a
09:45 - and the extension is mp3 you don't need
09:48 - the dot and we're going to pass the URL
09:51 - into right here and because this
09:57 - creating this AV audio player object can
10:01 - potentially throw an error we have to
10:03 - put the keyword tri right in front of it
10:05 - and we have to wrap this in a do catch
10:11 - block so what happens is if you're
10:14 - reading it like plain English it's
10:16 - saying do whatever is inside this code
10:20 - block right here starting from this to
10:22 - here do that and inside that code block
10:26 - you're going to try to run some code and
10:28 - then if it errors if it throws that
10:31 - error it's going to jump in here and
10:34 - catch it and you're going to be able to
10:36 - handle that error so we're just gonna
10:38 - say error and that's going to print an
10:42 - error out into the console and right
10:44 - here we have an error because this
10:48 - URL object could potentially be nil
10:52 - meaning that it can't find that file
10:54 - like for example if I put F and we don't
10:57 - have F dot mp3 then it's not going to be
11:00 - a valid URL right so we can write a line
11:03 - of code here we can use something like a
11:05 - guard statement which we can basically
11:09 - ensure that it has found that URL we can
11:13 - say guard URL is not equal to nil else
11:16 - return so this is make sure that we've
11:22 - got the URL otherwise for here we can
11:29 - say getting the URL and then here we can
11:32 - say create the audio player and play the
11:38 - sound and so when we come down here we
11:42 - know that for sure that URL contains the
11:45 - path otherwise it would have hit this
11:47 - line of code and exited the function so
11:50 - we can go ahead and use an exclamation
11:52 - mark to basically tell Xcode don't worry
11:55 - we know there's an object in there you
11:57 - don't have to check or complain now
12:00 - before we run the project we're gonna
12:01 - actually have to play the sound file so
12:06 - go ahead and call the play method so now
12:09 - let's run the project and see if we can
12:11 - get the sound playing and if we can then
12:14 - we are going to basically duplicate this
12:16 - code it's gonna want to use my
12:19 - microphone for some reason ay-ay-ay all
12:23 - right cool so now let's stop the project
12:26 - and basically going to replicate this
12:31 - code for each of the other functions
12:34 - changing the file name now if you're a
12:38 - little more experienced then you'll know
12:40 - that this is you know not the best way
12:42 - to do it because we've got all of this
12:44 - code duplicated but when you're just
12:47 - starting out I don't personally think
12:50 - it's a problem because I know that as
12:53 - you're going to get further and further
12:55 - into your iOS journey you are going to
12:58 - get better and better
13:00 - and plus we're not doing this for an
13:04 - enterprising client or anything like
13:07 - that alright see you all so now that
13:16 - you've got this working with all of this
13:18 - replicated code and for IB actions I
13:21 - want to challenge you to get this done
13:23 - with one IB action method and not having
13:27 - to duplicate any of this code I'm going
13:30 - to give you a hint though in the button
13:34 - that you've got right here there is a
13:37 - tag property right here that you can set
13:40 - and then in the view controller in the
13:44 - function you'll going to be able to read
13:46 - that tag you can access that property
13:49 - this sender is actually the UI button if
13:52 - you feel off for the challenge
13:54 - simply use the link in the description
13:55 - below or click right up here to download
13:58 - the source code and if you have an app
14:00 - idea but you're not sure where to start
14:01 - definitely check out my 7 date app
14:03 - action plan it's a free course that's
14:06 - going to set you off in the right
14:07 - direction I'll see you in the next video