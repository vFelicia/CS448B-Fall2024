00:00 - hi and welcome to lesson 5 you're
00:01 - halfway there now in this lesson and the
00:04 - next two you're going to be learning the
00:06 - basics of the Swift programming language
00:08 - this is the stuff that you're going to
00:10 - need in order to complete the work hard
00:12 - game now I know that this coding part
00:14 - can be intimidating for some people but
00:17 - I really want you to stick with it for
00:18 - at least these three lessons really pay
00:21 - attention and I highly recommend that
00:22 - you open up Xcode on your own computer
00:24 - to type out exactly what I'm showing you
00:26 - on the screen it's really going to help
00:29 - you learn that language structure and
00:31 - those keywords by actually typing it out
00:34 - yourself
00:34 - there's no need to memorize anything and
00:36 - by the end of lesson 10 I guarantee you
00:39 - that you'll be able to write your own
00:40 - Swift code
00:41 - alright so let's get started so go ahead
00:49 - and start Xcode but we're not going to
00:51 - create a brand new Xcode project instead
00:53 - we're going to create a playground so
00:56 - click it get started with a playground
00:58 - or you can go to file new and choose the
01:00 - new playground as well now you're going
01:02 - to get a screen like this go ahead under
01:04 - iOS choose blank and we're going to save
01:07 - this I'm just gonna save it on my
01:09 - desktop now first let me tell you about
01:12 - what a playground is it's not a
01:14 - full-fledged Xcode app project instead
01:16 - it's just a lightweight file where we
01:18 - can try and test out some things and
01:19 - this is perfect for us because we are
01:22 - going to just be running and testing
01:23 - some Swift code now let me give you a
01:26 - quick tour of the playground and the
01:28 - bare essentials that you need so this
01:30 - big part right here where you're writing
01:32 - the code that's the code editor that's
01:34 - where we're going to be testing out all
01:35 - our code across the top we have the
01:38 - status bar now mine says ready it's
01:40 - ready to run and test some code for you
01:42 - it might be spinning and it might be
01:43 - doing something in the background but
01:45 - when it finally says ready then you're
01:47 - able to run your code now on the right
01:51 - hand side right here we don't see
01:53 - anything what I want you to do is just
01:55 - move your cursor to this line of code at
01:58 - Lane 3 oh that's actually one thing I
02:00 - want to mention first if you don't have
02:02 - line numbers go to Xcode preferences go
02:05 - to text editing and enable line numbers
02:08 - so that's one of the common questions
02:11 - that I get I don't know if in this
02:13 - version of Xcode they've turned it on by
02:15 - default but if they haven't now you know
02:17 - so yeah move your cursor down to the
02:19 - line three and you see lines one two and
02:23 - three highlighted in blue with this big
02:25 - blue play icon go ahead and click that
02:27 - what that's going to do is basically run
02:30 - the lines of code up to that point where
02:32 - you click that button so it's going to
02:34 - write run the code lines one two and
02:37 - three you're going to get some sort of
02:39 - output here on this right-hand side this
02:41 - is the preview column and yours might
02:44 - look a little different so I don't want
02:46 - you to focus too much on the output on
02:48 - this preview pane depending on what
02:50 - version of Xcode you have it could look
02:52 - different Oh instead what I want you to
02:55 - do is click in this upper right hand
02:57 - corner and hide or show debug area or
03:00 - the console area and in this lesson
03:03 - we're going to be writing Swift code to
03:06 - put things into the console area so I
03:08 - want to focus on the output in the
03:10 - console area here at the bottom rather
03:13 - than the output on the right-hand side
03:15 - here in the preview because that could
03:17 - look different for you all right now
03:20 - let's take a look at the code in here
03:21 - before I explain to you what these
03:23 - import VAR keywords are I want to talk
03:26 - about comments now if you've programmed
03:29 - before in another programming language
03:31 - then you'll know what these are but if
03:32 - you're completely brand-new to coding
03:34 - then I think this is a very important
03:36 - part to start off with so let me show
03:38 - you what a comment looks like I'm going
03:40 - to hit enter to start a new line and I'm
03:43 - going to add it to forward slashes like
03:45 - that and then I can type a note for
03:48 - myself this is a comment now mine looks
03:53 - like this grayed out text right here
03:55 - depending on what sort of color scheme
03:57 - you have going on this could be green
04:00 - and could be another color that's not
04:01 - the important part the important part is
04:04 - that anything after these two forward
04:06 - slashes this is not going to be run as
04:09 - code instead it's going to be treated
04:11 - like a note or a remark for yourself too
04:15 - and you can write anything in your
04:17 - comment to remind yourself maybe why you
04:20 - wrote that piece of code or what that
04:22 - piece of code does when you're working
04:24 - with a team of people it's crucial that
04:26 - you
04:26 - comments in your code so that when your
04:28 - teammates see your code they understand
04:30 - your reasoning behind it and they
04:32 - understand why you wrote it now if
04:34 - you're working by yourself that's also
04:36 - important to leave yourself comments
04:37 - because if you leave your project and
04:39 - you come back months later you won't
04:41 - remember why you wrote that code unless
04:43 - you leave yourself comments to remind
04:45 - yourself all right so let's talk about
04:47 - this first line of code where it says
04:49 - import uikit now we're going to talk a
04:52 - lot more about uikit in the future but
04:54 - for now just understand that uikit is a
04:56 - library of code that apple provides for
04:58 - us to build apps with it it contains
05:00 - useful elements like buttons and labels
05:02 - and templates of code that we can use to
05:04 - speed up our app development import is a
05:07 - special keyword to say that we want to
05:09 - use the uikit library in this file now
05:11 - let's talk about line for this VAR s TR
05:14 - equals hello playground in order to
05:16 - understand this we need to first talk
05:18 - about variables in an app there's a lot
05:20 - of data being passed around and you need
05:22 - a way to keep track of it well that's
05:24 - what a variable is for you can think of
05:27 - a variable as kind of like a sticky tab
05:29 - you know those ones where you can write
05:30 - something on it and stick it to a piece
05:32 - of paper to keep track of it well let's
05:34 - take a look at the line of code below
05:36 - which is declaring a new Swift variable
05:38 - and assigning some data to it and see
05:40 - how that compares to using a sticky tab
05:43 - and sticking it on a sheet of paper so
05:45 - var is a special Swift key word that is
05:49 - declaring a new variable using our
05:51 - analogy you can think of this as
05:53 - creating a new sticky tab STR is the
05:57 - name of that Swift variable in the case
06:00 - of our analogy STR is what you write on
06:02 - that sticky tab now hello playground is
06:07 - the piece of data that we want our
06:08 - variable to keep track of in our analogy
06:11 - that would be the sheet of paper that
06:13 - we're intending to stick the sticky tab
06:15 - on
06:15 - and finally the equal sign is us
06:18 - actually assigning that piece of data to
06:21 - that variable in our analogy that would
06:24 - be like sticking the actual sticky tab
06:25 - on the piece of paper now let's go back
06:28 - to our playground and take a look at
06:29 - that line of code again now this line of
06:32 - code makes a lot of sense right we are
06:34 - declaring a new variable STR and we are
06:37 - assigning the piece of data
06:39 - hello playground
06:40 - to that variable now let's consider
06:42 - another scenario using it the same
06:44 - analogy of the sticky tab what if we
06:47 - decide to peel off that sticky tab and
06:49 - stick it on another sheet of paper well
06:52 - we can do the same thing with our
06:53 - variable except that there's just one
06:55 - catch imagine that when you were writing
06:57 - the name on that sticky tab STR you
07:00 - wrote it with a permanent marker and so
07:03 - when you peel off that C tab and stick
07:06 - it on another sheet of paper it's still
07:08 - saying STR on that sheet of paper well
07:11 - we can do the same thing with our
07:13 - variable here we can take our variable
07:15 - STR and we can assign another piece of
07:18 - data to it so let's say another some
07:25 - data and what you can do is use this
07:29 - blue icon here and let's just run our
07:32 - code and you should get some sort of
07:34 - preview there now notice that on line 6
07:38 - I don't have to write var again because
07:40 - var was just to create that variable in
07:43 - the first place when I use it again I
07:45 - can just refer to it by the name and you
07:49 - might notice that sometimes I say create
07:51 - that's just so that you can understand
07:53 - it a little easier the proper
07:54 - terminology is declaring a variable so
07:57 - now let's write some code to output some
07:59 - of this data into the console area below
08:02 - on line 5 here let's write the keyword
08:05 - print and you might notice that Xcode
08:08 - pops up this little autocomplete menu
08:11 - and that's just X code trying to guess
08:13 - what you're trying to type and
08:14 - presenting you a bunch of options to
08:17 - make your life easier
08:18 - now while you can select some of these
08:20 - options that's not what we're going to
08:22 - do right now I'm going to open up a
08:24 - round bracket and we are going to type
08:26 - STR and if you don't have a closing
08:30 - round bracket you should just type it
08:31 - what we're gonna do now is just bring
08:34 - your cursor down here to line 7 or at
08:36 - the end of your code file and click run
08:38 - and you should see
08:40 - hello playground down there below now
08:42 - notice that it doesn't say some data and
08:45 - that's because we are printing out the
08:48 - contents of STR at line 5 we're going to
08:52 - right after we assigned hello
08:54 - playground so it's showing you the data
08:56 - that STR is pointing to at that point
08:58 - now if we ran another print statement
09:02 - here let's click run you'll see this
09:07 - print out again but this time it says
09:10 - some data which is what we assigned it
09:13 - to it on line six now the next thing
09:15 - we're going to talk about are constants
09:17 - constants are like variables except that
09:19 - once you assign some data to a constant
09:21 - that's it you're not going to be able to
09:23 - assign anything else to the constant now
09:26 - using our analogy that is like super
09:28 - gluing that tab to that sheet of paper
09:31 - there's no way you're gonna get that tab
09:32 - off its bookmark to that sheet of paper
09:35 - and that's the piece of paper it's going
09:37 - to reference forever
09:37 - the syntax for declaring a new constant
09:40 - kind of looks like what we did with a
09:42 - variable except that we use the let
09:44 - keyword instead of the VAR keyword now
09:46 - let's go back to our playground and
09:48 - we'll try it out now let's try declaring
09:50 - a constant at the bottom of our
09:52 - playground let's say let STR equals more
09:56 - data and give it a sec or you might have
10:00 - to run your playground but when you do
10:01 - you're going to get an error and it's
10:04 - basically saying that you cannot use STR
10:07 - again because your variables and
10:09 - constants must have unique names even
10:12 - between two variables or between two
10:14 - constants you have to have unique names
10:16 - so why don't we change Esther to Khan
10:19 - and it has to have unique names just out
10:23 - on a side note because otherwise it
10:25 - would be very very confusing so we have
10:28 - Khan here and let's try modifying
10:32 - metadata for that constant and give it a
10:38 - sec and Xcode is going to tell you that
10:41 - you cannot assign another value to
10:43 - constant or Khan because let is a
10:47 - constant so you can't actually do this
10:49 - but with variables we can write this
10:51 - goes back to us saying that constants
10:53 - once you assign a piece of data to it
10:55 - that's it so now you might be wondering
10:58 - when would you use a constant versus a
11:00 - variable well the general rule of thumb
11:02 - is that you should be using constants
11:05 - whenever you can but how
11:07 - or if you're keeping track of a piece of
11:09 - data that you expect might change then
11:12 - you would use a variable because a
11:14 - constant is a lot safer right once you
11:16 - assign a piece of data you can be
11:18 - guaranteed that that's not going to
11:20 - change on you so in fact even inside of
11:23 - Xcode when you're programming if Xcode
11:25 - notices that you use a variable and you
11:28 - assign a piece of data to it and you
11:30 - never reassign anything else to it and
11:32 - it doesn't change it's going to say hey
11:35 - why don't you change this into a
11:36 - constant you're gonna get that reminder
11:39 - so the general rule of thumb again is to
11:41 - use constants and if you realize that
11:45 - that piece of data needs to change then
11:48 - you can change that constant to a
11:50 - variable by just changing that let
11:53 - keyword to a var keyword all right so
11:55 - let's erase this line here now one other
11:57 - thing I want to point out and you might
11:59 - have noticed this is that all the data
12:02 - that we've been assigning to our
12:03 - constants and variables thus far have
12:06 - just been this text data well there are
12:08 - actually other types of data as well and
12:11 - that brings us to our next topic which
12:13 - is data types the pieces of text that
12:16 - we've been assigning to our variables
12:18 - and constants or called strings now I
12:21 - know that's kind of a strange name but
12:23 - you can think of it as a string of
12:25 - characters right well they're just
12:28 - basically pieces of text next up we have
12:31 - boolean or bool for short and these
12:34 - represent true or false
12:36 - great for pieces of data that can only
12:38 - be one of two values now don't worry
12:41 - we're gonna try all of this out in the
12:42 - playground in just a second but next up
12:44 - we have integers or int for short just
12:48 - like back in math class
12:49 - integers represent the whole numbers in
12:51 - the positive to the negative range
12:54 - including 0 now you might ask where are
12:56 - our decimal numbers don't worry I've got
12:58 - you covered
12:59 - float is what you're looking for and
13:01 - these represent our floating point data
13:03 - in other words our decimals I've just
13:06 - showed you for data types but there are
13:07 - actually more but these four are great
13:10 - to start with I have a swift cheat sheet
13:12 - at the end which are going to show you
13:13 - the rest and also a worksheet for you to
13:15 - practice what we've learned in this
13:17 - lesson now let's go back to our
13:19 - playground and try
13:20 - stuff out alright so now let's try some
13:22 - of those data types that we just talked
13:24 - about let's type the new VAR b equals
13:27 - true and let's print B now let's try
13:31 - running this line of code here and
13:33 - you're going to see true appear down
13:35 - into console below now true is a special
13:38 - keyword that you can use to specify the
13:40 - boolean value we can also change this to
13:43 - false let's run this again and you can
13:45 - see false appears on the console now
13:47 - that we're running more code I want to
13:49 - point your attention to a special
13:51 - feature of the playground and down here
13:54 - in this stop playground button you can
13:56 - actually hold it and choose
13:58 - automatically run when you do that your
14:01 - playground is automatically going to
14:03 - execute the code in your playground
14:05 - automatically as you're typing so you
14:07 - never have to click on that Run button
14:09 - again the only problem is that sometimes
14:12 - playgrounds can be buggy so if you're
14:14 - experiencing a lot of crashing or it's
14:16 - not running your code then you're gonna
14:18 - want to switch back to manually run and
14:21 - you're gonna want to click on that run
14:24 - code button manually so we're gonna
14:27 - leave it automatic for now and see how
14:29 - how it goes if we are experiencing
14:31 - problems that our playground then we're
14:33 - going to set it to manually run instead
14:35 - all right so now let's try out integers
14:37 - let's do var I equals 32 that is going
14:41 - to declare a new integer and assign it
14:45 - 32 we're gonna assign a 0 that's also an
14:48 - integer we're gonna try a signing let's
14:51 - say negative 10 it's also an integer now
14:54 - let's try the last data that we talked
14:57 - about which is float and it's gonna be
15:00 - some sort of decimal number like that
15:02 - now there's one important thing I want
15:03 - to talk to you about and that is that
15:06 - there are actually two types of decimal
15:08 - numbers so the first decimal number data
15:11 - type is float like we talked about but
15:14 - there's also something called double and
15:16 - it's another data type that represents
15:18 - decimals and in fact double is a lot
15:21 - more precise than float that means that
15:23 - a double data type can store a lot more
15:26 - decimal points than a float data type
15:29 - can and when you're working with the
15:31 - Swift programming
15:32 - language double is actually the default
15:35 - of datatype now the thing is it's
15:37 - important to know both float and double
15:39 - because sometimes when you're working
15:40 - with third-party code libraries or even
15:43 - some of the libraries inside UIKit some
15:45 - of them expect float data types and some
15:48 - of them expect double datatypes and so
15:51 - it's important to know both and now you
15:53 - know now the next thing i want to talk
15:55 - to you about is the fact that variables
15:58 - and constants can only store one data
16:02 - type now what do I mean by that I'm
16:04 - gonna demonstrate so here we've declared
16:07 - a variable called I and we've assigned
16:10 - it an integer and then we've reassigned
16:13 - it zero and negative ten which are also
16:15 - integers but what if suddenly I decide
16:19 - to assign it some sort of decimal number
16:21 - right we know that decimal numbers is
16:24 - that's not considered an integer so in
16:26 - fact right here the playground is
16:28 - telling us it's erroring out and it's
16:31 - saying that you cannot assign a type of
16:34 - double to your integer variable you just
16:38 - can't do that because the variable I
16:40 - only accepts integers now here's the
16:43 - thing where did we say that variable I
16:46 - can only accept integer data types
16:49 - well the funny thing is that we didn't
16:51 - explicitly say that what happens is that
16:54 - when you declare a variable or constant
16:56 - and you assign a piece of data to it
16:59 - that first piece of data is it's going
17:02 - to take that data type and infer that
17:06 - that's the data type that variable can
17:08 - store and that's the only thing it can
17:11 - store so the very fact that we assigned
17:14 - 32 being an integer to variable I from
17:18 - that point on variable I can only store
17:21 - integer types that is why we cannot we
17:25 - cannot assign this double data type
17:27 - value to I same thing goes for this up
17:32 - here because we assigned the boolean
17:34 - value false to be now the variable B can
17:37 - only store boolean types so I can I can
17:41 - assign true to it but I cannot assign
17:45 - piece of string to it I cannot assign a
17:48 - number to B and so we're gonna get these
17:51 - errors right here alright so we've just
17:54 - experienced a crash on the playground
17:57 - okay let's just go back to manually run
18:01 - and or run our code right here and that
18:08 - should be okay all right so we're back
18:12 - to being good now there is a way to
18:15 - explicitly say that a variable can store
18:18 - a certain data type this is how we would
18:22 - do it so after your variable name you
18:25 - would write a colon and then you would
18:27 - write in the data type that you want
18:29 - that variable to store so you can write
18:33 - like that you could do that up here you
18:40 - could do that and then for this one you
18:43 - can either type float or use the Swift
18:47 - default double so I would recommend
18:50 - using double what you can unless you're
18:52 - using some sort of library that requires
18:54 - you to use some float data so here's the
18:58 - funny thing
19:00 - even if this is the first piece of data
19:03 - you have sign being float simply because
19:07 - you declared your variable as an integer
19:10 - you know you've explicitly said that
19:12 - variable I is an integer data type you
19:16 - cannot assign a double data type to it
19:21 - so those are the things that I wanted to
19:24 - point out to you I know it's a lot to
19:25 - absorb I would recommend getting the
19:26 - recap notes and just reviewing it and
19:28 - also doing the exercises it's going to
19:31 - help you solidify these things in your
19:32 - head so far you've learned about
19:34 - variables constants and how they can be
19:37 - used to store data you've also learned
19:39 - about different data types such as in
19:41 - string boolean and float now all that is
19:44 - gonna be in my Swift cheat sheet as well
19:46 - as the stuff for the next two lessons
19:48 - and I also have a worksheet for you
19:50 - where you can practice using swift
19:52 - variables and performing math operations
19:54 - in Swift you can grab these two things
19:57 - in the card over
19:58 - or check in the description below now I
20:00 - want to turn over to you
20:01 - are you a beginner to programming or
20:03 - have you coded before either in Swift or
20:05 - another programming language let me know
20:07 - by leaving a quick comment below and on
20:10 - your way down there hit on that
20:11 - subscribe button if you haven't already
20:12 - and click on that Bell icon as well if
20:14 - you don't want to miss the next lesson
20:16 - alright so click on the thumbnail for
20:19 - lesson 6 and I'll see you over there