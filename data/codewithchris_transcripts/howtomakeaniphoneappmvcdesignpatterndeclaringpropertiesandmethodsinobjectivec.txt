00:04 - hey guys welcome to the recap of the
00:06 - user interaction demo that we did in the
00:08 - last video now seeing as how this video
00:10 - is a little long I'm going to break it
00:12 - up into three distinct sections and the
00:14 - first part is we're going to talk about
00:16 - the model view controller pattern which
00:17 - is a software design pattern that we use
00:19 - for all of our iPhone apps second we're
00:22 - going to look at how to write our own
00:23 - properties instead of just creating them
00:25 - through interface Builder like we have
00:27 - been in the last few demos and in the
00:29 - third section we're also going to do the
00:31 - same with methods how to write our own
00:33 - methods rather than just creating them
00:35 - through interface Builder okay let's get
00:36 - started now if you don't have this xcode
00:38 - project you can download it from the
00:40 - link below or from the link on The
00:42 - annotation on the screen now just to jog
00:44 - your memory in the previous video what
00:46 - we did is just create a brand new uh
00:49 - single View application we added a label
00:51 - a text field and a button onto the view
00:55 - and we hooked up the interaction Handler
00:58 - so that when you click the button it
00:59 - changes es the label based on what text
01:02 - the user typed in now the app flow for
01:05 - this application is the same as your
01:07 - hello world one that we built in the
01:08 - first practice because we didn't
01:10 - actually add any files and we've still
01:13 - got the app delegate class we've got the
01:14 - view controller class and the zib file
01:17 - so here's a diagram of the Hello World
01:19 - app flow that we saw in the first
01:21 - practice and so this user interaction
01:23 - demo is the same app flow now one thing
01:26 - I want to point out is the model view
01:28 - controller design pattern now now this
01:30 - is a software design pattern that iOS
01:32 - follows we have been using these in our
01:34 - apps without even knowing it so here's a
01:37 - diagram of how it looks like so as you
01:39 - can see there are three responsibilities
01:41 - there's the view the controller and the
01:43 - model and the zip file that we see back
01:46 - in our project represents the view roll
01:49 - and we've also got the view controller
01:51 - class which is representing the
01:53 - controller what we don't have in this
01:55 - application is the model and the model
01:57 - is responsible for the data so in
02:00 - regards to the three distinct roles or
02:02 - responsibilities the view is responsible
02:04 - for displaying the data on the screen
02:05 - from the controller and receiving user
02:08 - gestures and interaction and relaying
02:10 - that data back to the controller now the
02:12 - controller is responsible for updating
02:14 - and retrieving information from the
02:16 - model and handles the user interaction
02:18 - from the view now because in this
02:20 - application we didn't have any data so
02:22 - we didn't have a model we didn't need to
02:24 - create a model class but in the next
02:26 - practice we will have a model and we
02:28 - will demonstrate the full MVC pattern
02:31 - and lastly the model is responsible for
02:34 - retrieving the data from whatever data
02:35 - sources that powers the app whether it
02:37 - be databases or feeds and it feeds
02:40 - information to the controller now all
02:42 - the xcode projects that we've created so
02:44 - far are single view applications and by
02:46 - default xcode creates a zip file for us
02:49 - which is the view and a view controller
02:50 - which is the controller to manage that
02:52 - view but it doesn't create any sort of
02:54 - model class for us because it doesn't
02:55 - know what we're going to need it doesn't
02:57 - know what the data is going to be so it
02:59 - doesn't generate any sort of model class
03:02 - now let's talk about the communication
03:03 - flow between these three distinct
03:05 - responsibilities now this diagram
03:07 - illustrates The View never directly
03:09 - sends or receives information to or from
03:12 - the model so the view never talks to the
03:14 - model and vice versa the controller
03:16 - serves as the middleman between the view
03:18 - and the model and the model never
03:20 - communicates with the view so those are
03:21 - the three rules that we follow now why
03:24 - do we do this why do we have to
03:26 - implement our apps in a MVC design p
03:29 - pattern style and the idea is that we're
03:31 - decoupling the different components or
03:34 - responsibilities as much as possible and
03:36 - what this promotes is that it lets us
03:38 - easily swap components in and out as
03:40 - needed because there's less intertwining
03:42 - relationships and dependencies between
03:44 - all these components and the second
03:46 - thing is it's easier to read and
03:48 - understand and thus solve any bugs that
03:50 - may crop up right now I know that the
03:52 - MVC design pattern may seem very
03:54 - abstract to you but in the next lesson
03:56 - when we're going to build our next demo
03:58 - we're going to fully implement this
04:00 - design pattern and you'll hopefully
04:01 - begin to understand it a little better
04:04 - and if you'd like to read more about MVC
04:06 - for iOS I've included a link below in
04:08 - the description and you can read Apple's
04:10 - reference on the model view controller
04:14 - pattern the next thing I want to bring
04:16 - up if we go back to the code is if you
04:19 - remember from the last demo when we
04:21 - added the UI elements on The View we
04:24 - also opened up assistant editor and on
04:27 - the right hand side we had the header
04:29 - file for for the view controller and
04:30 - then following that we control click
04:32 - drag to create these properties in the
04:35 - header file of the view controller uh
04:37 - one property for each element now we
04:40 - talked about properties in the recap
04:42 - lesson for the hello world demo and we
04:45 - said that properties hold references to
04:47 - to objects and these properties have a
04:50 - special keyword here called IB outlet
04:53 - and I want to just to mention quickly
04:54 - what they are now an IB Outlet simply
04:57 - denotes that the property can be exposed
04:58 - to interface Builder and connect with UI
05:01 - elements created from interface Builder
05:03 - the way in which we draged the UI
05:05 - element to the view controller header
05:07 - file it's one of the ways that we can
05:09 - connect the UI element with a property
05:11 - but we could very well have just gone to
05:13 - the header file of the view controller
05:15 - you could have manually typed these
05:16 - three things out and then go back to the
05:19 - interface Builder and then you could
05:20 - have done something like this you could
05:22 - have right clicked the UI element let's
05:24 - say the label right here and you can see
05:26 - from this menu that the label is already
05:28 - hooked up to the hello label IB Outlet
05:31 - property that we created so let me go
05:33 - back to assistant editor view just so
05:35 - you can see so remember we control click
05:37 - dragged this element over here and we
05:39 - created this hello label and as a result
05:41 - if you rightclick this you can see in
05:43 - the menu that the referencing outlet for
05:45 - this element is this hello label and
05:47 - files owner is basically referring to
05:49 - the view controller that's managing this
05:51 - view so let me kill this connection by
05:54 - clicking this X and now this UI element
05:56 - is no longer hooked up to this property
05:59 - now to manually hook it up I could
06:01 - rightclick the element and then right
06:02 - now it says new referencing Outlet so
06:05 - I'm going to bring my mouse over to the
06:07 - circle and then click and drag I don't
06:09 - need to hold control this time and I'm
06:10 - just dragging this blue all the way here
06:12 - to files owner which is referring to the
06:15 - view controller so I'm going to let go
06:16 - and I'm going to be able to select from
06:18 - any Outlets that I've manually typed out
06:20 - and created here so I'm going to choose
06:22 - hello label and just like that see I've
06:24 - hooked it up again we could do the same
06:26 - thing for this as well and and the
06:28 - button as well now now if we look at uh
06:31 - viewcontroller.m you remember from the
06:33 - demo we control clicked the button and
06:36 - we dragged it over to the m file to
06:38 - create this button Handler method change
06:40 - text click and you'll notice that it
06:42 - says IB action right here I just wanted
06:45 - to talk about that so IB action is
06:47 - similar to IB Outlet basically what it's
06:50 - saying is that this method should be
06:51 - visible from interface Builder so that
06:53 - when you're in interface Builder and
06:55 - looking for a method to hook up for the
06:56 - button click event that you should be
06:58 - able to see it and hook it up from there
07:00 - and let me show you how to do that you
07:02 - know we could have manually typed out
07:03 - this method instead of using the click
07:05 - and drag method so we could have
07:06 - manually typed this out and then we
07:08 - could have gone to interface Builder
07:10 - right click and you'll see all of these
07:12 - different events and the button click
07:14 - event is actually touchup inside there
07:16 - are all these other ones like touch up
07:17 - outside that is an event if you touch
07:19 - the button and then let's say you drag
07:21 - your finger out of the button and you
07:23 - let go and that's touchup outside but a
07:25 - normal button tap would have your finger
07:27 - still inside when you release your
07:29 - finger finger so that's why we use
07:30 - touchup inside and if you notice here it
07:33 - says this event touchup inside is
07:35 - connected to files owner change text
07:37 - click so that's referring to this method
07:39 - right here of the view controller now
07:40 - I'm going to kill that connection so now
07:42 - the touch-up inside event is no longer
07:44 - hooked up to the change text click
07:46 - method so if I wanted to hook up this
07:48 - button to this method again I could just
07:50 - right click go up to particular event I
07:52 - wanted to hook up we'll just touch up
07:55 - inside I'm going to reach to this circle
07:57 - right here grab it and drag this blue
07:59 - line to files owner and it's going to
08:01 - show me whichever IB actions I've
08:03 - declared in there so I can do that and
08:06 - once again the touchup inside method
08:08 - which is your basic button tab is hooked
08:10 - up to the change text method let me show
08:12 - you guys the Syntax for a property so
08:15 - that if you're not using interface
08:16 - Builder that you could still use
08:18 - properties and and know how to declare
08:19 - them so I'm going to go into the header
08:21 - file of the view controller I'm just
08:23 - going to get out of assistant editor
08:24 - view so we don't get distracted and
08:27 - normally when you declare a property
08:28 - it's going to follow follow something
08:30 - like this it's going to be like property
08:32 - and then following in these brackets
08:34 - you'll have a bunch of attributes and
08:37 - then following that you'll have a class
08:39 - type so what what sort of class or what
08:42 - sort of VAR or sorry what sort of data
08:44 - type is this property going to reference
08:47 - and then finally a property
08:51 - name now for what's in attributes I'm
08:54 - going to include a link in the
08:55 - description below for you to read what
08:57 - strong and non-atomic is if you're going
09:00 - to be referencing objects you're going
09:02 - to be using strong and if you're not
09:04 - doing multi-threaded programming which
09:06 - probably won't be for Building these
09:07 - basic types of apps you're going
09:10 - to you're going to just want to use
09:12 - nonatomic and if you're not hooking the
09:14 - property up to interface Builder UI
09:16 - elements you wouldn't need the IB outlet
09:18 - and the class type is going to be any
09:20 - sort of object whether it's a UI element
09:22 - type object or whether it's your own
09:24 - class that you create that's what you
09:26 - would put here and then for property
09:27 - name you might have noticed that I keep
09:29 - the first letter lowercase um this is a
09:31 - standard convention that a lot of people
09:33 - use so you can follow this where the
09:35 - first letter and this goes for methods
09:37 - as well the first letter is lowercase
09:39 - and each other word starts with an
09:40 - uppercase now another thing I want to
09:42 - point out is that this star here
09:44 - represents a pointer it's saying that
09:46 - this variable is going to point to a
09:48 - address location of an object remember
09:51 - how I told you when you create objects
09:52 - they live in memory space well when you
09:54 - have a star there it's basically saying
09:57 - that it's pointing to a specific address
10:00 - in memory for that object and that's how
10:02 - the property references the
10:07 - object okay so the way you created this
10:09 - change text method was to basically
10:12 - click and drag from the button and drag
10:15 - it over to the implementation file and
10:16 - let go and you know it generated this
10:19 - for you but I wanted to explain a little
10:22 - more about how you would type out your
10:24 - own methods when you declare methods
10:26 - first consider if it only needs to be
10:28 - exposed to that object if so we're going
10:31 - to be declaring it as a private method
10:33 - and this means that it can only be
10:35 - accessed by that instance using the self
10:37 - keyword if that method preforms duties
10:40 - that may need to be triggered by other
10:42 - objects or instances then we need to
10:44 - make it a public method so there's
10:46 - private and there's public and there's
10:47 - another one called the class method or
10:49 - static method which we'll get to in the
10:51 - future but for now think about private
10:53 - and public and whether that method needs
10:56 - to be exposed to other instances or
10:58 - other objects or whether it only needs
11:00 - to be used within this implementation
11:03 - file so if you're not sure you'll want
11:05 - to leave it as private and then later on
11:07 - when you discover that you need to
11:08 - expose it externally you could always
11:10 - make it a public method later so how you
11:12 - declare a private
11:18 - method so here's a sample method and
11:21 - this method can only be accessed by this
11:24 - object now for example if I created that
11:26 - sample method down there I would call it
11:28 - like so
11:31 - so self refers to this instance or this
11:35 - object and Sample method is is the name
11:37 - of the method and that's how I'd call it
11:39 - now if I wanted to make it a public
11:41 - method all I would need to do is add the
11:44 - method signature which is this part
11:46 - right here all I need to do is add that
11:48 - method signature to the header file
11:50 - because if you remember the header file
11:52 - is kind of like a table of contents and
11:54 - if it's not in the table of contents
11:56 - then other classes and other objects
11:58 - won't be able to find it so they
12:00 - wouldn't even know about it now if I
12:01 - added that method signature
12:05 - here like this now other classes would
12:08 - know that any view controller object
12:11 - would have a method called sample method
12:13 - and I don't implement the method here
12:15 - because this is the header file I merely
12:16 - declare it here and the implementation
12:19 - file I actually can
12:22 - Implement and if you haven't noticed
12:24 - already this is a comment whatever I
12:26 - type here with these leading slashes
12:29 - they won't get compiled and they're not
12:30 - code it's just for reference and for you
12:32 - to kind of remind yourself what these
12:35 - methods do and you know what this
12:36 - variable is for it's like leaving
12:38 - yourself little reminders and also
12:39 - leaving other people reminders because
12:41 - if you're working in a team environment
12:43 - at work let's say other people will rely
12:45 - on this sort of documentation to
12:48 - understand what's happening it's very
12:49 - good practice to document and comment as
12:52 - you're coding and trust me even if you
12:55 - totally understand what you're writing
12:56 - now if you come back to it a month later
12:59 - you'll have no idea you have to read
13:01 - everything and understand everything
13:02 - again to kind of get back into that
13:04 - mindset that you were at that point in
13:06 - time so leaving comments is a good thing
13:08 - okay so we talked about differences
13:10 - between a private and a public method
13:11 - now let's talk about um the Syntax for
13:13 - the method so if I go back to looking at
13:16 - the sample method right here you see
13:17 - this Dash here so this Dash represents
13:20 - that it's an instance method so this
13:22 - means that every view controller object
13:24 - will have a sample method and these are
13:26 - the types of methods that we've been
13:28 - talking about and looking at and using
13:30 - so far there's another type called class
13:32 - or static method which I alluded to a
13:34 - couple minutes ago that we'll get to in
13:36 - the future and that's the noted by a
13:37 - plus but you know for now for our
13:39 - purposes we're going to use instance
13:41 - methods now the next part is the return
13:43 - type in these brackets void means that
13:46 - this method doesn't return anything
13:47 - because there are some methods we're
13:49 - going to want to pass some input in the
13:51 - method and we're going to want to do
13:52 - some number crunching or or do some you
13:54 - know manipulation of that thing that
13:56 - gets passed in and then we're going to
13:58 - want to return the result and that's
13:59 - when we would put the data type or the
14:01 - class type of of The Returned object or
14:04 - The Returned data and then finally
14:06 - sample method is the name of the method
14:08 - now let's look at a method where I would
14:11 - have to pass in some data and then
14:13 - return some data so I'm going to make it
14:14 - an instance method I'm going to return
14:16 - let's say I'm going to return a number
14:18 - uh let's call this method add five so
14:21 - this method is going to take whatever
14:22 - number you pass in it's going to add
14:24 - five to it and it's going to return the
14:26 - result so in order to uh declare
14:29 - a parameter so that it's expecting some
14:32 - input this is the
14:35 - syntax so this method expects one
14:38 - parameter and it's going to be an
14:40 - integer type parameter and we're going
14:42 - to be able to reference what's passed in
14:44 - with this is the name so what I would do
14:46 - here is say return and that's the
14:49 - keyword to specify the data that will
14:51 - get returned so I'm going to return what
14:54 - is passed in+ 5 and if we were to pass
14:57 - back let's say a a um an object you
15:00 - would pass in okay let's start a new
15:02 - method here so let's say that I'm going
15:06 - to create a method that will take in a
15:08 - string and return the string all in
15:10 - uppercase letters take a look at this
15:12 - there's a star here and this represents
15:15 - that we're passing back an object but
15:16 - we're really what we're really passing
15:18 - back is a pointer to that object a
15:21 - pointer that references the address in
15:23 - memory where that object is located and
15:25 - that's how the variables will find the
15:27 - objects in memory
15:33 - okay I'm going to name it uppercase
15:34 - string so now I'm going to declare the
15:36 - parameter so it's going to expect an NS
15:39 - string pointer I'll call it input again
15:42 - and then this time I'm going to return
15:44 - now let me break it down into two steps
15:46 - first I'm going to declare a string
15:48 - variable and say temp variable and what
15:51 - I'm going to do is take the string input
15:54 - and call a method on this string object
15:56 - called uppercase string and that
15:58 - automatically converts the string to all
16:00 - uppercase and returns it so now temp is
16:03 - going to hold the uppercase string and
16:06 - I'm going to say return temp so that's
16:08 - as far as I want to go for methods I'm
16:10 - going to show you guys how to declare
16:12 - methods which accept multiple parameters
16:14 - and do more complex things but we're
16:16 - going to practice it rather than just
16:17 - talk about it and I think it'll be a
16:19 - little more concrete that way so in the
16:21 - next lesson when we're actually going to
16:23 - build another demo we are going to look
16:25 - at how we can implement the MVC so model
16:28 - view controller pattern with a model
16:30 - we're going to write out our own
16:31 - properties we're going to write out our
16:32 - own methods and so it'll solidify this
16:35 - stuff a little more okay thanks for
16:36 - following along and remember if you
16:39 - didn't understand all of that feel free
16:41 - to watch it again you can always ask me
16:43 - questions you can always ask me
16:44 - questions below or look at also read the
16:47 - notes in the description there's a link
16:49 - there for the the text version of this
16:50 - video and remember if you found this
16:52 - helpful to your learning please share it
16:54 - with your colleagues or your friends who
16:56 - also want to learn iPhone development
16:58 - and it really helped me get my name out
17:00 - there so thank you so much for watching
17:02 - and I look forward to seeing you guys in
17:03 - the next video