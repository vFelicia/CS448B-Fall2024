00:00 - welcome to how to make an app for
00:01 - beginners now it doesn't matter if
00:03 - you've never coded before by the end of
00:05 - this video you will have built this app
00:06 - now I know it looks simple but it's so
00:08 - powerful because you will have proven to
00:10 - yourself that you can make a nap and
00:12 - oftentimes that singular belief is all
00:14 - it takes for you to continue growing
00:15 - your skills building bigger and better
00:17 - apps and potentially even starting a
00:19 - career in app development now maybe
00:21 - you've been doubting yourself or maybe
00:22 - you've been wanting to build that app in
00:24 - your head for the longest time or maybe
00:26 - you've even tried coding and failed
00:28 - we're going to turn that all around my
00:30 - singular purpose for this lesson is to
00:32 - help you believe that you can build an
00:34 - app and I think that once you realize
00:35 - that it's not as hard as people make it
00:37 - out to be you'll be excited to continue
00:39 - to grow your skills and build bigger and
00:41 - better apps so I really hope that you
00:43 - watch till the end and you see what
00:44 - happens quick note in case there's any
00:46 - doubt in your mind why I'm the right
00:48 - person to teach you this stuff my name
00:50 - is Chris and I've been teaching app
00:51 - development foundation since 2013. code
00:54 - with Chris is also the largest iOS
00:56 - Channel on YouTube and the last time we
00:58 - did this training series it was viewed
01:00 - by over 5.4 million people this lesson
01:03 - series that you're about to watch has
01:05 - even been used inside School classrooms
01:07 - and Apple retail stores now all that is
01:09 - just to say that you're in good hands
01:11 - I'm so excited you're here let's roll up
01:13 - our sleeves and get started
01:16 - I'm going to walk through this diagram
01:18 - and then after I'll tell you where to
01:20 - get all of the pieces it all starts with
01:22 - the xcode IDE now IDE stands for
01:26 - integrated development environment which
01:28 - is a term for the application and all of
01:31 - the tools a developer uses to build
01:33 - something
01:34 - for the rest of this course we'll simply
01:36 - call it xcode
01:38 - this is where we build our app by
01:39 - writing Swift Code building the user
01:41 - interface or UI for short and connecting
01:44 - it with all of our data Swift is the
01:47 - programming language we use to express
01:48 - our logic and to tell the system what we
01:51 - want to do we can even build the UI
01:53 - through Swift Code as you'll soon see
01:55 - now Swift UI is a UI framework that
01:59 - makes it easy for us to rapidly build
02:01 - apps for all of Apple's platforms
02:04 - a nice benefit of learning xcode Swift
02:07 - and Swift UI is that they're the same
02:09 - skills and tools used to build all apps
02:12 - for all of Apple's platforms including
02:14 - iOS iPad OS TV OS watch OS and Mac OS
02:19 - and in some cases your app will be able
02:22 - to work on multiple platforms without
02:24 - much changes at all
02:26 - now once your app is built you could
02:28 - distribute it with Apple's App Store
02:31 - this is done by joining the Apple
02:32 - developer program which requires an
02:35 - annual enrollment fee once you're
02:37 - enrolled you get access to multiple
02:39 - benefits including the App Store connect
02:41 - portal test flight and the provisioning
02:43 - portal
02:44 - there are some more benefits including
02:46 - access to Beta software and support from
02:48 - Apple engineers and I'll provide a link
02:50 - to the full list below
02:52 - the provisioning portal gives you access
02:55 - to tools for identifying and code
02:57 - signing your app it's like putting your
02:59 - signature on the app so that Apple can
03:00 - identify who built it and this is
03:03 - important for the safety of the end
03:04 - users downloading your app and it's also
03:06 - important for you because it stops
03:08 - malicious coders from pretending to be
03:10 - you
03:11 - once your app is in a testable state
03:13 - test flight allows you to invite people
03:15 - to download and beta tester app they'll
03:18 - be able to send feedback and Bug reports
03:20 - directly to you through the test flight
03:22 - program
03:23 - use test flight to ensure that your app
03:25 - is as polished as it can be before
03:27 - launch and finally App Store connect is
03:30 - where you'll create the app listing for
03:31 - your app including all of the metadata
03:33 - and screenshots
03:35 - if your app has in-app purchases this is
03:38 - also where you would configure them once
03:40 - your app is tested and the listing is
03:42 - ready you can upload the app from xcode
03:44 - to App Store connect from there the
03:47 - certification team at Apple will review
03:49 - your app to ensure that it meets the App
03:51 - Store quality guidelines
03:53 - this takes a couple of days and don't
03:55 - worry if you fail because you can fix
03:57 - whatever they point out and resubmit it
03:59 - for review if everything looks good
04:01 - they'll approve the app and your app
04:02 - will be live congratulations
04:05 - alright so where can you get these
04:07 - different pieces of the Apple developer
04:09 - ecosystem you can download xco for free
04:12 - from the Mac App Store I'll provide a
04:14 - link below you don't need to get Swift
04:16 - or Swift UI those just come with xcode
04:20 - as for the Apple developer program I'll
04:22 - provide a link to the enrollment page
04:24 - below I want to mention that joining the
04:26 - Apple developer program is completely
04:28 - optional if your goal isn't to
04:30 - distribute apps into the App Store don't
04:33 - join it you'll still be able to learn
04:34 - how to build apps for yourself
04:37 - now that you have a general idea of the
04:40 - app ecosystem let's start by downloading
04:42 - xcode and I'll show you how easy it is
04:44 - to use it to build an app there are a
04:46 - couple of ways to download xcode if you
04:48 - already have it installed you can go
04:49 - ahead and skip this section however if
04:52 - you don't the easiest way to do it this
04:54 - is to hold command press spacebar to
04:57 - launch Spotlight on your computer and
04:58 - type in app store and let's open the Mac
05:01 - App Store on your computer and search
05:03 - for xcode and then you're going to click
05:05 - on the listing and then download it like
05:07 - that a couple of things to note here
05:09 - though don't be turned off by the
05:12 - ratings this is the official tool issued
05:14 - by Apple for us to build apps with also
05:16 - take note of the large file size in my
05:18 - experience it does take more free hard
05:21 - drive space than this in order to have
05:23 - it installed successfully and during the
05:25 - installation process there may be times
05:27 - where you don't think it's doing
05:29 - anything it seems stuck it's going to
05:31 - take a while now if for whatever reason
05:33 - you can't download it from the Mac App
05:35 - Store you can also Google Apple X code
05:37 - and click on the listing here and you
05:40 - can download it from the website this
05:42 - will just lead you back to where we just
05:44 - were on the Mac App Store however if you
05:46 - download it from the website do note
05:48 - that you have to sign up for a free
05:49 - Apple developer account or to sign in
05:51 - with an existing one okay so once you
05:53 - have an xcode downloaded and installed
05:55 - let's launch it and let's start a new
05:57 - project
05:58 - this is going to be the welcome dialog
06:00 - for xcode and we're going to start a new
06:02 - xcode project by clicking here you can
06:05 - also go if you don't see this you can go
06:06 - file new and you can choose project same
06:09 - thing
06:10 - both will bring you to a screen like
06:12 - this where you can choose what sort of
06:14 - project template you want to start with
06:16 - so we are working with iOS make sure
06:18 - you're on this tab and then go ahead and
06:20 - click app
06:22 - and for here I'm going to gloss over
06:24 - some of these project details because
06:26 - our goal is for you to get that result
06:28 - and make that discovery that you can
06:31 - build an app so I am going to save all
06:34 - the explanations for lesson two right
06:36 - now I would recommend that you just
06:37 - follow along exactly what I do and get
06:40 - that result and have that app in your
06:42 - hand alright so let's go ahead and call
06:44 - this L1 demo
06:46 - I think you probably have nothing for
06:48 - under the team organization identifier
06:50 - you can put in com Dot and then your
06:52 - name no spaces and interface make sure
06:56 - this says Swift UI it should be like
06:58 - that by default anyways and language
07:00 - should be Swift now uncheck all of those
07:03 - if they are checked go ahead click next
07:05 - and choose a place to save it
07:07 - um Source control this should be
07:09 - unchecked I'm just going to save it on
07:11 - my desktop for now since this is a
07:13 - temporary project now you're going to
07:14 - give it some time it's going to boot up
07:16 - your new app project I'm going to open
07:18 - this window up a little bit you see how
07:21 - fast I was able to see something here on
07:23 - the right hand side for you if it's a
07:25 - first launch it will take a little bit
07:27 - longer give it a couple of minutes even
07:29 - but while that is going we are actually
07:31 - going to go ahead on this left hand side
07:34 - here and click Assets Now this is the
07:37 - asset Library this is where you're going
07:38 - to store all of the image and color
07:40 - assets for your app project I've
07:43 - prepared a an image file that we're
07:46 - going to for this demo you can go ahead
07:48 - and pause the video and grab any image
07:51 - you want save it somewhere where you
07:53 - know where it is and what you're going
07:55 - to do is click and drag it into this
07:58 - panel right here or this panel doesn't
08:00 - really matter this is a big panel so
08:02 - let's drag it there what you're going to
08:04 - see is this image asset that you've
08:06 - added to your xcode project now take
08:08 - note of this name here because we're
08:10 - going to be referring to that image with
08:13 - that name you can rename it by tapping
08:16 - and clicking it like that and just
08:17 - typing in whatever you want or you can
08:21 - hit enter and you can also rename it
08:23 - like that so mine's gonna be named
08:25 - Niagara Falls that's perfectly fine for
08:27 - me so now that you've got that done
08:29 - let's go ahead and click on content view
08:31 - so by this time you should be seeing
08:33 - something on here and what you see here
08:36 - is a preview of your user interface so
08:41 - you can see what this screen looks like
08:42 - and this this screen right here on the
08:45 - right hand side is defined by the code
08:48 - that is written on the left hand side
08:50 - I'm going to make this really easy for
08:52 - you to understand we are going to delete
08:55 - all of this user interface and we're
08:57 - going to build it from scratch
08:59 - and you'll see how easy this is right
09:02 - now it looks like a whole bunch of code
09:03 - that you it's really hard to understand
09:05 - we're going to change that so let's
09:07 - highlight this code starting at v-stack
09:10 - and then going all the way to the end of
09:13 - this line 18 padding and I'm just going
09:16 - to highlight it all just hit delete
09:19 - and then we're going to press enter
09:20 - twice so I can make some space in here
09:22 - now xcode is going to throw a whole
09:24 - bunch of Errors because it can't detect
09:27 - anything to display but we are just
09:30 - about to add some new elements on there
09:33 - so in the upper right hand corner you
09:34 - see this plus icon if you put your mouse
09:37 - over it it's going to say library so
09:39 - we're gonna tap on that and then by
09:41 - default it should be on this first tab
09:43 - actually so I was using it before so it
09:45 - was on the second tab but I want you to
09:46 - go ahead and click on this first tab
09:48 - this one is all of the views that you
09:51 - can add to your screen and I want you to
09:53 - in here type in image and you're going
09:57 - to click on the second one called image
09:58 - and you're just going to drag and drop
10:01 - it right where all of that code was that
10:04 - was just deleted so this is an image
10:07 - view it's going to allow you to display
10:10 - an image you're going to click this
10:12 - middle part you're going to hit enter
10:14 - and you're going to change the text
10:17 - inside the quotes so I'm going to get
10:19 - rid of that notice that I still have the
10:22 - two quotes here in between those two
10:25 - quotes we're going to type in the asset
10:27 - name so just to remind ourselves let's
10:29 - go back to the asset Library
10:31 - mine is called Niagara Falls like that
10:33 - you're going to type in exactly Verbatim
10:36 - what you have here including any spaces
10:39 - dashes capital letters anything and type
10:42 - it exactly in between here
10:47 - because if it doesn't match it's not
10:48 - going to display and you can also at
10:51 - this point rename it to something that's
10:53 - easier to type if you want you could do
10:56 - that and what you're going to see is the
10:58 - image this is previewing what we have
11:01 - here now this doesn't look quite right
11:03 - to me so I am going to modify this image
11:06 - view I'm going to customize it we're
11:08 - going to open up the library Again by
11:11 - tapping that and this time we are going
11:12 - to switch over to the second Tab and
11:15 - these are where all the modifiers are so
11:17 - modifiers are things that we add to the
11:19 - view to change its properties and
11:22 - attributes first of all let's add
11:25 - something called resizable so you only
11:27 - have to type in the first couple of
11:28 - letters and you'll find this so this
11:30 - allows you to it tells the system that
11:34 - this image can be resized so I'm going
11:37 - to click and drag once again and put it
11:40 - you can either put it at the end or you
11:43 - can put it right underneath
11:46 - and right away give it a little bit of
11:48 - time you'll notice that it changes the
11:51 - other thing you'll notice though is that
11:53 - the image now looks a little bit
11:54 - squished right it looks squished and the
11:57 - aspect ratio is not correct we're going
12:00 - to also add a modifier to change that
12:02 - but first I want to round the corners
12:04 - that something nice and easy and it
12:06 - looks Pleasant so let's go ahead and do
12:08 - that let's add another modifier by
12:10 - opening up the library we are going to
12:12 - this time make sure you're on the second
12:15 - tab modifiers and search for Corner
12:17 - radius
12:18 - click drag and drop again and this is
12:22 - the nice thing we're going to put it
12:23 - underneath resizable you see that it
12:25 - it's automatically going to put a space
12:27 - for you make sure you don't accidentally
12:29 - put it down here or like after this
12:32 - bracket or anything like that you want
12:34 - to put it after the resizable so that's
12:37 - going to look
12:38 - neat and tidy like that
12:40 - and you're going to notice a slight
12:43 - Corner rounding but we can't really see
12:45 - it right so we are going to change this
12:48 - number let's change it to 10 and see if
12:51 - we see anything I can see slightly more
12:53 - rounding now but take a look at this as
12:56 - well I'm going to leave my Mouse
12:58 - anywhere on image resizable or Corner
13:01 - radius my cursor I mean and on the right
13:03 - most side here you can see a whole bunch
13:05 - of things you can configure after we
13:07 - added that corner radius modifier you
13:10 - see right here this reflects what we
13:12 - typed in right here and in fact if I
13:14 - press Plus
13:16 - you can see it's changing the number
13:17 - right so this is a very easy way for us
13:21 - to modify the code visually through
13:24 - through an interface here
13:26 - okay so I promised that we would
13:28 - unsquish this image right let's go ahead
13:31 - and open up the library and we are going
13:33 - to search for aspect ratio and we're
13:37 - going to drag and drop this one right
13:38 - under Corner radius so again make sure
13:41 - you put it right there
13:43 - and if you accidentally put it right
13:45 - here for example you can go ahead and
13:47 - delete it and try it again now I'm going
13:48 - to put my cursor on aspect ratio because
13:50 - I want to change the type of aspect
13:53 - ratio we can Define how we want this to
13:57 - behave
13:59 - let's make a little more space you can
14:01 - drag this and make the preview a little
14:03 - smaller so the code will fit on one line
14:06 - so you can see here it says fill which
14:09 - is exactly what we have here I'm going
14:11 - to pull down this drop down I want to
14:13 - find one that's called fit because
14:16 - um that will actually shrink the image
14:19 - down keeping the aspect ratio until it
14:21 - fits the screen which is what the the
14:23 - behavior that I want to see
14:25 - unfortunately it's not in this drop down
14:28 - maybe uh xcode can't detect it however
14:31 - don't forget we can modify it through
14:33 - the code as well so I am going to get
14:36 - rid of this fill by just
14:38 - I'm going to delete it like that and
14:41 - then I'm going to hit dot on my keyboard
14:44 - and out pops this menu this is called
14:46 - the autocomplete menu and it's going to
14:48 - allow you to select from different
14:50 - options without having to type too much
14:51 - so just by hitting dot it opens up this
14:54 - menu and it gives me different options
14:56 - now there we have fit right an option
14:59 - that resizes the content so that it's
15:01 - all within the available space both
15:03 - vertically and horizontally let's choose
15:05 - that and see how that looks
15:08 - perfect that's what I wanted now one
15:10 - thing to note if you press Dot and that
15:12 - menu doesn't pop up that's perfectly
15:14 - fine just type this out Dot f-i-t and
15:18 - you're going to get the same result
15:20 - next I don't really like how it's
15:22 - touching the edges so let's go ahead and
15:24 - add another modifier this time it's
15:27 - called padding so we're gonna drag and
15:29 - drop that
15:31 - so you can see how easy this is right
15:33 - you don't even have to write all of this
15:35 - code you can do this visually
15:37 - I like the way the picture looks now
15:38 - let's put a piece of text underneath so
15:41 - we're going to open up the library again
15:43 - and you see a common theme here this
15:45 - time we're going to switch over back to
15:47 - the Views tab
15:49 - and we're going to search for text I'm
15:51 - going to drag and drop that this
15:53 - displays
15:54 - a piece of text
15:56 - right and you want to make sure that you
15:59 - never you want to respect the brackets
16:01 - right so you never want to put anything
16:04 - outside of these two brackets because
16:06 - you see when I click it right when I
16:09 - click this it shows the opening bracket
16:11 - we have to put all of the components
16:14 - after this opening bracket and before
16:17 - this closing bracket so think of it as a
16:20 - sandwich
16:22 - so there's my text let's go ahead and
16:24 - double click placeholder and once again
16:27 - I can get rid of that text in between
16:29 - the quotes and I can type in whatever I
16:32 - want
16:35 - but you might get some errors in xcode
16:37 - now or worse yet xcode might not tell
16:40 - you what's wrong and it might just not
16:42 - show you anything as in what's happening
16:45 - right now so the problem is that it
16:48 - doesn't know how to lay out these two
16:50 - elements how do you want them arranged
16:53 - on top of each other beside each other
16:54 - it doesn't know luckily we have some
16:58 - thing called a layout container to tell
17:00 - the system how to lay out multiple
17:02 - elements on the screen so again let's
17:05 - open up the library under views let's
17:08 - search for vertical stack
17:10 - you can type in v-stack or vertical
17:12 - stack we're going to choose this one not
17:13 - not the lazy ones so vertical stack has
17:17 - drag and drop that I'm going to put this
17:19 - above the image this time
17:21 - you'll see that this one let's add some
17:23 - space in between it this one comes with
17:26 - an opening bracket and a closing bracket
17:29 - and in between it says content so what a
17:32 - v-stack does is whatever content is in
17:36 - between the opening bracket and closing
17:37 - bracket it will lay it out on top of
17:40 - each other so what we want to do is
17:42 - we're going to delete that content and
17:44 - we are going to move this image along
17:48 - with all of its modifiers as well as the
17:50 - text element inside the v-stack right in
17:54 - between these two brackets so I'm going
17:57 - to press command X to cut that code and
18:00 - put my cursor in between those two
18:02 - brackets and press command V to paste it
18:04 - what you're going to see on the right
18:06 - hand side is now it knows how you want
18:08 - to arrange those elements I want to
18:11 - change the text let's go ahead and add
18:13 - some modifiers right okay let's open up
18:17 - the library change to the modifiers Tab
18:19 - and we're going to choose one called
18:21 - font and you might not see it right away
18:23 - because I mean the search I guess the
18:25 - word font is in the descriptions of all
18:28 - of this but we're specifically going to
18:30 - look for one called font there we go
18:33 - put that at the end and then I'm going
18:36 - to hit enter to organize it a little bit
18:38 - and with this font one you can change
18:41 - already this is a title font so you can
18:45 - see that it made it bigger
18:48 - um on the right hand side if you put
18:49 - your cursor on the text you can see the
18:53 - font here it refers to title I can go
18:56 - ahead and choose that and choose a large
18:57 - title for example makes it a little
18:59 - bigger and let's say I wanted it to be
19:02 - bold let's change the weight
19:04 - to semi bold you see when I did that it
19:07 - added a font weight modifier and set it
19:10 - to semi-bold so I could have done this
19:13 - another way I could have actually
19:15 - you know I could delete that and then we
19:17 - could have gone via our trusty Library
19:22 - method you know and I could add the font
19:25 - weight modifier like that and change
19:27 - this to semi-bold so we would get the
19:30 - same result okay now let's put the
19:32 - finishing touches on this app so what I
19:34 - want to do is add a black background and
19:37 - then
19:38 - um
19:39 - we're done essentially okay so how do we
19:42 - add a background here so this is kind of
19:44 - not intuitive but you're going to get
19:46 - used to it is if you want to add a
19:48 - colored background you add a color
19:50 - element to the screen so let's open up
19:53 - our library it's under views
19:55 - and we're going to search for color and
19:57 - that's the one right there so we are
20:00 - going to drag and drop it once again I'm
20:02 - going to put it above the v stack
20:05 - like that and you can see you can
20:07 - specify different percentages of green
20:10 - and blue so if I wanted a black
20:12 - background this would be like they would
20:14 - be all zeros and that would be black
20:16 - however there's also a different way to
20:18 - specify black
20:20 - I can get rid of all of that like this
20:23 - is good if you want a really custom
20:25 - color but there are some presets that
20:27 - you can use as well so I'm going to put
20:29 - color and leave the two brackets like
20:31 - that and in between those two brackets
20:33 - I'm going to put dot it's going to open
20:36 - this up if it doesn't open for you
20:38 - that's fine just type out dot black but
20:40 - I'm going to choose it from here
20:42 - that's preset now notice how this color
20:45 - first of all it covers everything second
20:48 - of all it doesn't reach the edges okay
20:50 - and the reason why it doesn't reach the
20:52 - edges is because this is what's known as
20:55 - the safe area
20:56 - this is where things like the battery
20:59 - percentage and like the time displays
21:02 - and down here you have that little
21:05 - handle that you can grab and you can you
21:08 - know
21:08 - um
21:09 - change between apps or minimize an app
21:12 - so if you want your elements or your
21:15 - colors or whatever it may be to go into
21:17 - those zones the safe area you have to
21:21 - add a modifier to tell it to do so so
21:23 - let's go ahead and add that modifier hit
21:25 - open the library
21:27 - and then switch the modifiers and let's
21:30 - type in ignore and there's this one
21:32 - ignores a safe area so you're basically
21:35 - saying that you don't care about the
21:38 - safe area and you want this element to
21:40 - go into that danger zone or that safe
21:44 - area now you can see our color covers
21:46 - everything
21:47 - the problem is we don't see anything
21:49 - else so why don't we try making some
21:52 - space in our v-stack right here and
21:55 - highlighting our color with the modifier
21:57 - command X to cut it put it in here
21:59 - command V to paste it
22:01 - what do you know RV stack puts it
22:05 - arranges it on top of each other but
22:07 - it's probably not what we're expecting
22:09 - right
22:10 - and you can see that it did it in a way
22:13 - it's pretty smart where it gave each
22:16 - element enough space so this is as much
22:19 - space that like the text needs and then
22:21 - the image and then the black color takes
22:23 - up the rest whatever else is available
22:24 - that's not really what we're after we
22:27 - want the image and the text to sit on
22:30 - top of the color element right so
22:33 - there's another layout container we can
22:35 - use let's check it out let's go to views
22:37 - it's called a depth stack or in other
22:40 - words
22:42 - a z stack or Zed stack if you're
22:44 - Canadian like me
22:45 - so this one is going to be special
22:48 - things can actually sit on top of each
22:51 - other on the z-axis in sort of like a
22:55 - depth you can have uh yeah depth would
22:59 - be the best way to describe it right so
23:01 - let's try this out let's erase content
23:04 - and let's first of all move the color in
23:06 - there command X command V
23:10 - and next we are going to add our entire
23:14 - v stack in there okay so let me just
23:17 - remove some of the space make sure this
23:19 - is very
23:20 - um you got to be very careful because
23:22 - we're moving things around if you
23:24 - misalign one of the brackets here uh it
23:28 - it won't be able to read your code
23:31 - properly and it won't know what sort of
23:33 - layout to make so
23:35 - tap on this bracket and make sure that
23:38 - when you do this that it's highlighting
23:41 - the bracket that you expect it to so you
23:43 - want to grab the v-stack along with its
23:45 - opening bracket along with all the
23:47 - contents along with the closing bracket
23:49 - so I'm just highlight all of that
23:51 - command X
23:53 - and in here inside the Z stack before
23:57 - the closing bracket I'm going to put
23:59 - that in there
24:01 - so what it's going to do is it's going
24:04 - to put the color at the bottom and then
24:07 - it's good to put the v-stack along with
24:09 - all of its contents on top of that
24:11 - uh and and so we have this unfortunately
24:14 - our text is not visible so let's go
24:17 - ahead and add a modifier so I could just
24:22 - do this and choose white or
24:25 - we could
24:27 - add a modifier and the one that we're
24:30 - looking for is foreground color that's
24:32 - what we would add to change the color of
24:34 - the text however let's modify it here
24:37 - and see what happens
24:39 - see when I chose white it added the
24:42 - foreground color modifier for us and set
24:45 - it to color white
24:46 - pretty simple stuff right now comes the
24:48 - fun part let's launch our app now later
24:50 - in this video series I'll definitely
24:52 - show you how to launch this app or any
24:55 - app on your phone or your device for
24:58 - right now we are going to run this in
25:00 - the iOS simulator so up here you're
25:03 - going to notice it says iPhone whatever
25:05 - well it depends what version of xcode
25:08 - you have but I want you to tap on that
25:10 - and you can choose a bunch of different
25:12 - simulators choose choose the latest
25:15 - iPhone that you want I'm just going to
25:17 - choose iPhone 14 and I want to hit this
25:19 - run button
25:21 - now give it a couple of minutes and then
25:24 - you're going to see a virtual iPhone on
25:26 - your screen I have to warn you though if
25:28 - this is the first time you're running
25:30 - the iOS simulator it's going to take a
25:32 - few minutes to boot up but subsequent
25:35 - times it's going to be a lot faster now
25:37 - here it is this is the simulator
25:40 - now the cool thing about the simulator
25:41 - is that you there are some quick buttons
25:43 - here where you can rotate it to a
25:46 - different orientation so you can see
25:48 - what it looks like uh you can take a
25:50 - screenshot you can even take a video
25:51 - from the menus up here you can hit this
25:54 - to go back to the home screen this is a
25:58 - virtual iPhone for you to test your app
26:01 - now what is the difference between this
26:04 - simulator and the preview that we had
26:06 - inside xcode well this similar is great
26:09 - for testing your app because it has
26:12 - features to look you can simulate a
26:16 - shake you can
26:19 - you can test out face ID you can
26:22 - simulate locations like a custom
26:24 - location you can simulate a driving car
26:26 - or bicycle ride so there are lots of
26:30 - things or tools for you to test your app
26:33 - whereas the preview is good as exactly
26:36 - that a preview while you are building
26:39 - your user interface if you want to
26:41 - download this project just check in the
26:43 - video description below now I hope this
26:45 - lesson has showed you that building apps
26:46 - is not some mystical Dark Art granted
26:49 - this app was simple but every lesson
26:51 - that you complete after this one you're
26:52 - going to gain a new skill now just in
26:54 - case you get stuck we also have a free
26:56 - community where you can go and get help
26:58 - just visit code crew dot
27:00 - codewithchris.com so between this lesson
27:02 - series and the community I think you're
27:04 - gonna make pretty good progress while
27:06 - having fun and learning a lot I mean
27:08 - these people did did you think I made
27:09 - those app icons up in the next lesson we
27:12 - are going to dive a little deeper into
27:13 - xcode and I'll explain what the rest of
27:15 - the files in your app project do in the
27:17 - last lesson you use the xcode to build
27:19 - this now in this xcode tutorial I want
27:21 - to take a little more time and show you
27:23 - around so that you can understand what
27:25 - you did and begin to master this tool
27:27 - now you're going to want to pay close
27:28 - attention because over the course of
27:30 - your journey you're going to be spending
27:32 - a lot of time inside xcode turning your
27:34 - app ideas into reality oh and at the end
27:37 - of the video I'll be sharing my xcode
27:38 - tips and tricks with you that I use
27:40 - everyday okay so make sure you watch
27:41 - till the end okay quick note before we
27:43 - begin back in lesson one I showed you
27:45 - how to download and install xcode so if
27:46 - you haven't done that yet go ahead and
27:48 - do that first once you have xcode
27:50 - launched let's get into it all right
27:52 - let's create our new project click
27:54 - create a New Mexico project right here
27:56 - or go to file new and project now there
27:59 - are several options here actually
28:01 - they're templates and you can create
28:03 - apps for different platforms Mac OS
28:05 - watch OS TV OS for cars even
28:08 - multi-platform if you want to launch
28:10 - your app on multiple platforms however
28:12 - we are going to choose IOS app and
28:14 - actually look there's game AR apps
28:17 - there's iMessage sticker packs a ton of
28:19 - stuff we're going to stick with the
28:20 - basics for now this is a good starting
28:22 - Place let's click next and here let me
28:25 - explain some of these options for you so
28:27 - they don't look so cryptic first of all
28:29 - product name is easy right
28:31 - we're just going to put whatever we want
28:33 - to name this app now team is something
28:35 - that I want to explain remember packing
28:37 - less one when we talked about the
28:38 - process to launch your app into the
28:39 - store well the code from xcode that gets
28:42 - turned into a code package and then you
28:44 - have to code sign it as in put your
28:46 - digital signature on it so that people
28:48 - can't impersonate you and then that's
28:50 - the thing that gets put into the App
28:52 - Store well this here is how you're going
28:55 - to code sign it and to get a team on the
28:59 - drop down here you actually have to sign
29:01 - up for the Apple developer program which
29:04 - is that yearly paid program to allow you
29:06 - to submit apps it will give you access
29:09 - to a portal where you can upload your
29:11 - digital signature and that's how you're
29:13 - going to be able to create a team in
29:15 - here but for the purpose of these demos
29:17 - we can leave it as none now what's more
29:21 - important though is this bundle
29:22 - identifier because this is the unique ID
29:25 - for your app and this has to be unique
29:26 - for all apps on the App Store It's a
29:28 - combination of your product name as you
29:30 - can see as well as your organization
29:32 - identifier and here you can put anything
29:34 - typically people do com dot your company
29:37 - name or your personal name and together
29:39 - that is your bundle identifier
29:42 - now the next two pieces interface and
29:44 - language I want to draw your attention
29:45 - back to that diagram in lesson one where
29:48 - we said Swift UI is how you're going to
29:50 - build your user interfaces Swift is the
29:52 - coding language you're going to use to
29:53 - express your logic and together you're
29:55 - going to use those two tools to build
29:57 - your app and that's essentially what
29:59 - these two things are there are some
30:01 - options however in particular for
30:03 - interface if you pull this down you can
30:04 - select storyboard or Swift UI Swift UI
30:07 - is definitely a lot easier to learn and
30:09 - it is the UI framework moving forward
30:12 - because Swift UI is sort of the
30:14 - replacement for storyboards
30:17 - um right now as of today there are still
30:19 - companies out there using storyboards
30:21 - but Apple's full intention is to
30:23 - discontinue that and move forward with
30:25 - swift UI so I would definitely recommend
30:27 - learning Swift UI and if you do choose
30:29 - Swift UI you have to choose Swift if you
30:32 - choose storyboard you can still learn
30:33 - Objective C but again I wouldn't start
30:36 - with Objective C unless you had a very
30:38 - very good reason specifically to do so
30:41 - maybe you are trying to Target a job
30:43 - that only uses Objective C and that's
30:45 - what you would pick but Swift UI and
30:47 - Swift is where we want to be now these
30:50 - two options here core data and include
30:52 - tests these are options that you can
30:54 - always add to your app after the fact so
30:56 - you don't feel pressured that you have
30:58 - to check them here but even for the
31:00 - purposes of what we're learning these
31:02 - are unnecessary so core data is a way to
31:05 - have a local database on your device and
31:10 - test is used in software development
31:13 - where your project gets really big and
31:15 - you need to write automated test cases
31:17 - because once your software gets really
31:20 - large if you make a change it's not
31:23 - feasible for you to manually test all
31:26 - the features all over again for every
31:28 - single change that you make so you need
31:30 - to include automated testing that you
31:32 - can just click a button and run and
31:33 - it'll say pass fail pass fail and you
31:35 - can see what breaks after you make a
31:37 - change so again not for us leave these
31:39 - unchecked let's go ahead and click next
31:41 - and now now you can choose a place to
31:43 - save it I would recommend if you are
31:45 - taking this seriously and you are going
31:47 - to continue on learning create a space
31:49 - in your hard drive a folder perhaps for
31:52 - all of your apps and projects so they
31:54 - can stay organized for myself I'll admit
31:57 - I'm a bit of a messy person and this is
31:58 - a demo so I'm just going to create out
32:01 - my desktop Source control now this if
32:04 - you don't know what this is it's kind of
32:06 - like versioning so imagine being able to
32:08 - take snapshots of your project and code
32:10 - so that later on if you accidentally
32:13 - break your project and it's not working
32:15 - anymore you can always roll back to one
32:17 - of your snapshots this is kind of like
32:19 - time machine on the Mac if you've ever
32:21 - used that so definitely a very good
32:24 - practice in software development in fact
32:26 - kind of mandatory if you're working
32:29 - professionally for us right now we are
32:31 - going to leave this unchecked because I
32:33 - will introduce this to you later on okay
32:36 - let's go ahead and create it and let's
32:39 - check out our brand new project
32:41 - so here's our branding project before we
32:43 - dive into each of these files and tell
32:46 - you what they're for let us talk about
32:48 - the major big areas of xcode so you can
32:51 - get acquainted so there are five main
32:54 - areas of xcode firstly on the left hand
32:56 - side here you have your Navigator area
32:58 - in the middle the biggest area you have
33:01 - your editor area on the right hand side
33:03 - this is known as the inspectors or
33:05 - utility area across the top at the top
33:08 - here you have your toolbar area and at
33:11 - the bottom tucked away is this debug
33:14 - area which you really only need when you
33:17 - start working with code so we're going
33:19 - to hide that again
33:20 - so those are the five major areas of
33:23 - xcode let's dive into each one and I'll
33:25 - show you in the context of your project
33:27 - what these areas are for let's start
33:29 - with the file Navigator so here you have
33:32 - your xcode project and all of the files
33:35 - in your project so you can see these are
33:37 - collapsible folders these are the files
33:39 - these are the asset libraries that you
33:42 - learned about in lesson one but notice
33:45 - across the top here there are tabs to
33:47 - The Navigators this first tab is the
33:50 - file Navigator or project Navigator but
33:53 - there are different types of Navigator
33:56 - so you will encounter these when we get
33:59 - Farther Along right now there's not too
34:01 - much to see I would leave it on this
34:03 - first tab under a file Navigator project
34:06 - Navigator so you can take a look at all
34:08 - of your files next let's move on to the
34:11 - editor area the biggest area this is
34:13 - where you're going to be spending most
34:14 - of your time editing your files notice
34:17 - that this area changes depending on what
34:19 - you're looking at this file is a pure
34:21 - code file so it's all code this one is a
34:24 - view so you're going to get half code
34:25 - you're going to get the preview and
34:27 - asset Library again it changes so the
34:30 - editor area is very versatile it changes
34:33 - depending on what file you want to edit
34:35 - now inside the editor area there's also
34:38 - a lot of cool little tucked away things
34:41 - to make editing easier such as across
34:44 - the top here you can have tabs there's
34:46 - breadcrumb you can even jump within the
34:49 - file and you can open up you can split
34:52 - up this editor area into multiple panes
34:54 - window panes as well which I'll show you
34:57 - closer to the end of this lesson for now
34:59 - let's move on to the right most side
35:01 - this is the inspector area sometimes
35:03 - people call it the utility area which
35:06 - will work as well however what this is
35:10 - for is it allows you to configure
35:14 - whatever you are working on or looking
35:16 - at inside the editor area so for example
35:20 - if we um you know you've seen this if I
35:24 - put my cursor on one of the view
35:26 - elements
35:27 - here I would be able to configure it
35:30 - right if I put my cursor on this thing
35:34 - called view there's nothing I can
35:36 - configure with this keyword view however
35:38 - if I click across the tabs here there is
35:42 - a quick help tab now this is useful
35:44 - because it tells me what this view
35:47 - keyword means and what it does
35:49 - here this tab is the identity tab it
35:53 - tells me where this file exists where
35:55 - this content view exists on my hard
35:58 - drive right and what app membership does
36:01 - it belong to and things like that so
36:04 - that's what the inspector area is good
36:05 - for now I don't know if you've noticed
36:07 - but there is a cascading effect going on
36:10 - right if I select this it changes this
36:13 - if I select something in the editor area
36:16 - it changes what happens in the
36:19 - inspectors area so think left to right
36:21 - waterfall next up let's look at the top
36:24 - toolbar now first of all this leftmost
36:27 - button hides your Navigators if you need
36:30 - more space on your laptop maybe your
36:32 - screen is kind of small you can make
36:33 - more space on the right hand side
36:35 - there's a similar button to hide the
36:37 - inspectors area so now you get a full
36:40 - editor area for editing
36:43 - there is this run button to run your app
36:47 - inside a simulator like we did in lesson
36:49 - one and here you can click on the
36:52 - simulator select a different one you can
36:55 - test your app on all sorts of different
36:57 - simulators also if you plug in your
37:00 - device into your computer you are going
37:04 - to see that device here and you can
37:06 - choose it and you can actually launch
37:08 - your app on that device so that's
37:10 - something we're going to do in this
37:11 - video series so don't worry about that
37:13 - we'll get to that there when you first
37:16 - plug in your phone you're going to get a
37:18 - pop-up on your phone saying do you trust
37:19 - this computer and you're going to have
37:21 - to say trust before you can actually see
37:23 - it on this menu just in case you're
37:26 - doing it right now here it tells you
37:29 - what's happening behind the scenes
37:30 - sometimes you know if you're saying
37:32 - thinking xcode is slow it might be
37:34 - because it's doing something behind the
37:35 - scenes and this is the status bar that
37:37 - tells you what's going on
37:39 - now this Expo cloud is something that
37:41 - you don't have to worry about yet but
37:43 - it's a it's a way for you to be able to
37:46 - run your projects and test you know run
37:49 - those test cases that I told you about
37:51 - when we created the project it's a way
37:53 - to run those test cases on the cloud on
37:56 - Apple's servers the reason is because
37:58 - sometimes these take quite a while to
38:01 - run and also
38:03 - um you might want to run those tests on
38:06 - multiple different devices and so you
38:11 - can deploy those things to the cloud and
38:13 - run them there
38:14 - this icon we've used before it's the
38:17 - library right so if we go back to the
38:18 - content View and you click this plus
38:20 - icon there's our library that's so
38:22 - useful and then yeah we talked about
38:25 - this icon so that's the toolbar
38:27 - now that you know your way around xcode
38:29 - let's take a look at your project files
38:31 - so let's start at the very root of your
38:33 - xcode project which is inside your file
38:36 - Navigator this node right here now this
38:39 - is where you can configure different
38:41 - things for your project these are things
38:44 - like what is the version number what is
38:46 - the display name should it be able to
38:48 - display in various orientations and all
38:51 - the things like that actually this is
38:53 - probably pretty important what iOS
38:55 - version should it be able to install on
38:58 - you might set 16 and nothing lower than
39:01 - that we'll be able to install your app
39:03 - and this is for the reason that
39:05 - sometimes you're using features which
39:07 - are only available on let's say iOS 16.
39:11 - uh so that is the root project node here
39:14 - is also where you would configure
39:16 - different things like uh you might have
39:19 - to add different capabilities to your
39:21 - app such as Game Center or being able to
39:25 - do uh in-app purchases or notifications
39:27 - or things like that you have to add
39:29 - different things and just in general
39:31 - there's a whole ton of settings this is
39:33 - your project settings now after that
39:36 - there is a folder inside contains a
39:39 - couple more files you've got this entry
39:42 - point this is where your app starts okay
39:46 - this is the first thing that gets
39:47 - executed before it launches the first
39:50 - screen of your app and that is what this
39:52 - is content view if we click onto the
39:55 - next file that is content view you can
39:58 - see here this is what it looks like
40:01 - and uh the entry point if you click back
40:03 - here you can see that it creates a
40:05 - Content view so that makes sense right
40:07 - this is the entry point for your app
40:09 - when the app launches it creates this
40:11 - screen content view which is what you
40:13 - see here and in fact when you launch it
40:15 - in the simulator this is the first
40:17 - screen that you see so hopefully that
40:19 - makes a lot of sense and next you have
40:21 - your asset Library which stores all of
40:24 - your colors your image assets and even
40:27 - this is where you'd specify your app
40:29 - icon you just place an image into here
40:32 - to have that be your app icon
40:34 - and then inside preview content is
40:37 - another asset library but this is just
40:39 - only specifically for the previews here
40:43 - that you see so if you perhaps you know
40:47 - sometimes previewing doesn't make sense
40:49 - if there's no data to preview right like
40:51 - for example if you've got a scrollable
40:53 - list of photos but you don't have any
40:56 - actual photos there's nothing really to
40:58 - see right so this is where you would put
41:00 - those test or preview assets to be used
41:03 - and that in a nutshell are all of your
41:06 - files in your xcode project next up
41:08 - let's see how we can test our app now in
41:11 - terms of testing your app we mentioned
41:13 - the simulator in lesson one so just as a
41:16 - recap you can select a simulator of your
41:18 - choice here and then you can hit this
41:20 - run button and it's going to launch an
41:23 - on-screen virtual device if this is the
41:25 - first time you're doing it expect a
41:27 - couple of minutes for this to boot up
41:28 - but here this is a great way to test
41:30 - your app you can click through all the
41:32 - screens and interact with it you can
41:34 - simulate different device features such
41:36 - as low memory situations or low Network
41:38 - situations to see how your app would
41:40 - behave and in general just test your app
41:42 - this preview here in the editor area is
41:45 - actually great for seeing how your
41:47 - screen looks like as you build it and
41:49 - there are a couple of tools for that for
41:51 - example there are zooming capabilities
41:54 - here you can zoom in zoom out and zoom
41:56 - to fit and zoom to 100 that's what these
41:58 - different buttons do you can also look
42:01 - at variations for example I can look at
42:04 - what dark mode would look like on my
42:06 - phone or I could look at landscape
42:09 - orientation if this is too tedious you
42:11 - can look at multiple variations At Once
42:13 - by clicking this button right here and
42:16 - for example I can click color scheme and
42:18 - that's going to show me light and dark I
42:20 - can click on orientation for example or
42:24 - maybe Dynamic type and see how different
42:26 - font sizes look on the UI and then
42:30 - finally we have these two different
42:31 - modes by default it's on this live mode
42:34 - which lets you interact with the
42:37 - elements on your preview for example I
42:40 - may add a button let's open up the
42:42 - library under views search for button
42:45 - you'll see it there
42:46 - and click and drag it you'll see a
42:48 - button you can see by default I'm on
42:50 - live mode down here and I can interact
42:52 - with this there is another Mode called
42:55 - selectable mode or select mode and it
42:58 - allows you just simply to select your
43:00 - elements perhaps you want to see the
43:02 - corresponding code for that element so
43:04 - that's a great way to learn another
43:06 - functionality is selecting an element so
43:08 - that you can
43:10 - configure it in the inspector area
43:12 - that's pretty helpful as well
43:14 - and now I want to leave you with some
43:16 - xcode tips that I use every single day
43:18 - inside xcode these are so useful and it
43:21 - may not be apparent right now but as you
43:23 - start well as we start building the app
43:25 - in this video series you're going to see
43:26 - us using these so the first one probably
43:29 - the most basic one is this one here
43:31 - these go back and go forward arrows
43:34 - these work just like your web browser
43:36 - arrows and sometimes let's say you're
43:39 - moving from this file to this file to
43:41 - another file here and there these
43:43 - buttons just let you jump back to the
43:45 - place you were in so when you're working
43:47 - with code sometimes it the the code file
43:51 - gets really long and this breadcrumb
43:54 - right here allows you to jump between
43:57 - different sections in your file which is
44:00 - really handy here you can actually jump
44:02 - to different files as well clicking the
44:04 - spread Chrome right here
44:06 - on the upper right hand corner here
44:10 - there are a few useful things as well so
44:12 - this middle icon allows you to customize
44:15 - how the editor looks so if you choose
44:18 - show editor only you're you don't need
44:20 - to preview perhaps you can click that
44:24 - right you can also there's this mini map
44:27 - which is quite useful as well which lets
44:30 - you
44:32 - scrub your file so if your file was very
44:36 - very long this would be an easy way to
44:38 - just sort of navigate and you can see at
44:40 - a glance what your file is looking like
44:44 - uh if you want to let's say look at two
44:47 - files side by side you could do that by
44:49 - clicking this upper right hand corner
44:50 - button and opening two editors side by
44:54 - side and obviously the more screen real
44:56 - estate that you have the more useful
44:58 - this becomes
45:00 - um as for now it is probably not very
45:03 - useful for me with the size of this
45:05 - xcode window and with the size of the
45:07 - font that I have right here but
45:09 - nonetheless you know that this is
45:11 - available to you and there are different
45:13 - tabs right here as you can see here now
45:16 - as you code more you'll undoubtedly run
45:18 - into a situation where you're wondering
45:19 - what else can the v-stack do or can the
45:21 - v stack do this or that so I'm happy to
45:24 - say that documentation is embedded right
45:27 - into xcode now you can just Google
45:30 - vstack and find it or there are a couple
45:33 - of fast ways to do that with an xcode so
45:35 - one way is go into Windows developer
45:37 - documentation and you can just search up
45:39 - vstack in here I've already found it but
45:42 - yeah you can do that you can look look
45:44 - at what it can do how to use it and
45:46 - things like that an easier way even
45:49 - faster it's just put putting your cursor
45:51 - over it and using the inspector panel
45:54 - and going over to this quick help
45:55 - section and then you can even click on
45:57 - the link here to open it to that page
46:01 - even faster if you want to hold down the
46:03 - option or Alt key on your keyboard hover
46:06 - over v-stack and you can get a pop-up
46:08 - dialog for that again there's a link to
46:10 - open the developer documentation really
46:12 - handy stuff
46:14 - all right so now you know all about the
46:16 - file Navigator the editor area the
46:18 - inspector area the toolbar and the debug
46:21 - area and you know how to start your own
46:22 - xcode project and what each of the files
46:25 - in your project is for in the next
46:26 - lesson we're going to get Hands-On again
46:28 - and you're going to learn even more
46:29 - skills for building user interfaces aka
46:32 - the screens of our app in this lesson
46:33 - you're going to learn multiple ways of
46:35 - how to build a screen of your app now I
46:37 - know you're itching to build user
46:38 - interfaces like these these were done by
46:40 - our designer JC in a piece of software
46:43 - called figma as you improve your skills
46:45 - you'll be able to translate designs like
46:47 - these into your own app inside xcode by
46:50 - the end of the lesson you'll have built
46:52 - this using only these few basic elements
46:54 - a few layout containers a few views and
46:57 - a few modifiers considering that we're
46:59 - only three lessons in this is amazing
47:02 - progress okay buckle up let's get
47:04 - started
47:05 - oh and just a quick note in the last
47:07 - lesson you learned how to use xcode so
47:10 - if you need a refresher check it out
47:11 - right over there also if you're enjoying
47:13 - the series so far don't forget to give
47:15 - this video a thumbs up and subscribe so
47:17 - you don't miss the next lesson let's
47:19 - quickly review how these building blocks
47:21 - come together to form the user interface
47:23 - or UI for short so views are the
47:26 - elements that the user sees on the
47:28 - screen modifiers are applied to the
47:31 - Views to change its Behavior or look and
47:34 - feel finally layout containers organize
47:37 - and arrange views in various ways now
47:40 - fun fact layout containers are also
47:42 - considered as a view just think of them
47:45 - as container views alright let's start
47:47 - by creating our xcode project so go
47:49 - ahead and start a new project under iOS
47:51 - let's choose app I'm going to name mine
47:54 - L3 demo 2 actually because I've built
47:57 - this once before team you can leave as
47:59 - none organizational identifier should be
48:01 - the same as before
48:02 - and then make sure it says Swift UI and
48:05 - Swift
48:06 - core data and tests are unchecked then
48:09 - let's go ahead and click on next and I'm
48:11 - going to save it on my desktop you can
48:13 - leave create get repository unchecked as
48:15 - well
48:17 - okay so here is our brand new project
48:20 - let let's expand the window a little bit
48:23 - so we have some space
48:25 - and the first thing we are going to do
48:27 - is just add the image asset for that
48:30 - card into our asset library now again
48:33 - just like last time you can put whatever
48:35 - asset you want I'm going to reuse the
48:38 - Niagara Falls image asset that I used
48:40 - back in the lesson one demo so go ahead
48:44 - and do that okay now in order to build
48:47 - this card I first need some idea of what
48:51 - I'm going to be building now whether
48:52 - that's just in my imagination or maybe a
48:55 - rough sketch on a piece of paper or
48:57 - perhaps it's a design by a designer in
49:00 - this case I had this in my head and I
49:02 - wanted to lay out the biggest elements
49:04 - first and that would be the image and
49:06 - the two pieces of text in addition to
49:08 - that I also have in mind the basic
49:11 - layout container that I'm going to use
49:13 - First in this case that would be the
49:15 - vertical stack which arranges the views
49:17 - on top of each other so let's go into
49:19 - our content view first which is sort of
49:21 - the default view that gets created for
49:23 - you and I'm going to remove the v-stack
49:27 - along with its padding modifier so we
49:31 - should be left with body opening bracket
49:34 - ending bracket and then this content
49:36 - view here opening bracket ending bracket
49:39 - what we're going to type in so at this
49:42 - point actually the way we've been doing
49:44 - it is by using the library if you feel
49:46 - confident you can just type out the code
49:48 - if you don't feel that confident yet you
49:51 - can go ahead click this plus icon open
49:53 - up the library make sure you're on this
49:55 - views tab
49:57 - and just type in image
49:59 - and drag and drop it that's perfectly
50:01 - fine this is a perfectly safe way to
50:04 - build up to the point where you're
50:06 - comfortable just writing the code and
50:08 - then sooner or later you won't even be
50:10 - using this Library
50:12 - for the image name we are going to
50:13 - follow what we have in the asset Library
50:15 - whatever your asset is named right there
50:19 - so
50:20 - remember to use the quotation marks
50:24 - and we should see an image perfect now
50:27 - obviously it's too big I want it to fit
50:30 - on the screen so we are going to add the
50:34 - resizable modifier so what you do is
50:37 - press dot in the autocomplete menu will
50:40 - pop up and I'm just going to choose
50:42 - resizable
50:43 - again you can do that from the library
50:45 - but make sure you go to the second tab
50:48 - right which is the list of modifiers
50:50 - you're going to search for resizable
50:52 - you're going to just drag it and drop it
50:54 - there
50:55 - another one we're going to add is aspect
50:58 - ratio because this looks kind of
50:59 - squished right and this is all review
51:02 - right now from lesson one we've done
51:04 - this together before it's going to be
51:05 - exactly the same way so there's aspect
51:08 - ratio I'm going to hit dot to open up
51:10 - autocomplete again and choose I'm going
51:12 - to type in fit or just choose it from
51:14 - menu again if you don't see it from the
51:17 - menu you can just type dot fit and it'll
51:20 - still you'll still get the same result
51:21 - as what what I'm seeing here
51:24 - hit enter I'm going to do dot again this
51:26 - time I'm going to add Corner radius
51:29 - and this is going to round the corners
51:30 - nicely I'm going to put 15 as the amount
51:33 - of rounding that I want
51:34 - and remember in the inspector view here
51:37 - you can choose this tab to configure the
51:41 - modifiers and the view itself so you can
51:44 - see here this is the image on this
51:46 - Niagara Falls I can you know change the
51:49 - aspect ratio change the color I can
51:50 - change add some padding here's the
51:52 - corner radius I can increase or decrease
51:54 - it because my cursor is right now is on
51:57 - image if it's on body you know I won't
51:59 - see that there
52:01 - okay so that does it for the image now I
52:04 - said that we would use the vertical
52:06 - stack to arrange it right so let's go
52:08 - ahead and do that
52:09 - again I'm just going to type it out but
52:11 - feel free to use the image library and
52:14 - the vertical stack whatever is inside of
52:17 - this pair of brackets right here those
52:21 - are the views that get arranged on top
52:22 - of each other so we're going to have to
52:25 - move this image I'm going to press
52:27 - command X to cut it and put my cursor
52:30 - inside the brackets press Comm command V
52:33 - to paste it in there and then I'm going
52:35 - to add the text elements so let's go
52:38 - ahead and type in text quotation marks
52:42 - Niagara Falls next let's add the
52:45 - description so I'm going to put another
52:47 - text element here and then you can type
52:51 - whatever you want
52:58 - all right that's speaking pretty highly
53:00 - of the false now what we're going to do
53:03 - is I want everything to be left aligned
53:05 - and also to add some spacing between
53:07 - these elements so if I put my cursor on
53:09 - the v stack we can come over here and
53:12 - into the inspector panel and we can
53:14 - actually configure those things so let's
53:16 - see how that changes the code so that
53:19 - next time we can just type in the code
53:21 - straight away without having to use the
53:23 - user interface so I'm going to click
53:25 - this alignment and and that adds this
53:27 - alignment parameter here and changes it
53:30 - to Leading let's change the spacing I'm
53:33 - going to put 20 in there
53:35 - and you see that adds another parameter
53:38 - spacing equals 20. and then in the
53:41 - preview you can see those things have
53:42 - taken effect here now let's make the
53:45 - title a little bigger here
53:47 - Niagara Falls so I'm going to put my
53:49 - cursor on the text and we're going to
53:51 - change the font
53:53 - to perhaps a title font
53:56 - and let's make it bold let's change the
53:58 - weight bold next I want to create the
54:01 - ratings to the right of the Niagara
54:03 - Falls Title now when I see things side
54:06 - by side I think horizontal stack this is
54:09 - the same as a vertical stack but instead
54:11 - of arranging things on top of each other
54:13 - the horizontal stack arranges things
54:15 - side by side so let's go check it out so
54:17 - back inside the xcode here since this is
54:20 - the first time we're using it let's go
54:22 - ahead and bring it out from the library
54:24 - so we can see the code let's go into the
54:27 - views tab right here and type horizontal
54:30 - stack that's the one right here and
54:32 - let's drag it let's drag it right before
54:35 - the Niagara Falls text as you can see it
54:39 - looks exactly like the v-stack except
54:41 - it's an H stack so we're going to move
54:43 - this Niagara Falls Title into the
54:46 - brackets in between there
54:47 - command X to cut it
54:50 - command V to paste it now visually
54:54 - nothing changes because I don't have
54:56 - anything aside from that text inside the
54:59 - H stack but one thing I want you to
55:01 - notice right now is that we have an H
55:03 - stack inside of a v-stack so this is how
55:07 - you can begin to build a layout from the
55:10 - combination of layout containers to
55:12 - arrange the views as you want them you
55:15 - can Nest these layout containers now
55:18 - let's go ahead and add an image beside
55:20 - the Niagara Falls and use the image
55:22 - element just like how we displayed the
55:24 - waterfalls and we can search and find an
55:27 - image of four stars or 4.5 Stars
55:30 - whatever we want to display then we can
55:32 - add that to the our asset Library just
55:34 - like we've done here and then we can put
55:37 - the image name here to display it but
55:39 - I want to show you a different and
55:42 - arguably better way to do this using
55:44 - something called SF symbols let's remove
55:47 - this image view for now and let me bring
55:51 - up this browser window now SF symbols
55:54 - they are a set of 4400 symbols or icons
55:59 - on the iOS system that you can use for
56:02 - free because they're already installed
56:04 - on iOS all you have to do is you know
56:07 - the appropriate name for these icons and
56:10 - you can display them you don't need to
56:12 - search for any images or anything the
56:14 - best thing is that they behave like text
56:17 - so that you can change the foreground
56:19 - color of them you can change the size of
56:21 - them and things like that very very
56:23 - easily let's go back into xcode and see
56:26 - how we can use an SF symbol to display
56:29 - the Stars so just like displaying an
56:32 - image we use the image view but instead
56:36 - of specifying the the asset Library name
56:39 - like we have up here we're going to
56:41 - specify the system name of the SF symbol
56:44 - so we type in system name that should
56:47 - come up and notice that it's lowercase s
56:50 - uppercase n with a colon and then we're
56:52 - going to put a name the name of the SF
56:54 - symbol and this has got to be in
56:56 - quotations as well so I'm going to put
56:58 - star and you can see it instantly shows
57:01 - up I did not have to add this star image
57:03 - into our asset library or anything like
57:05 - that another really cool thing is that
57:07 - often these symbols come with an outline
57:11 - version as well as a filled version and
57:13 - typically the filled version you just
57:15 - have the add dot fill to the end of the
57:17 - name and that's what you get now you
57:20 - might be wondering how would I know this
57:22 - system name well that's where this comes
57:25 - in handy so SF symbols is a free
57:28 - download for an app that looks like this
57:31 - and it allows you to either browse
57:33 - through the symbols or search for it so
57:35 - if I search for Star I can see these are
57:38 - all of the system some names that I can
57:40 - use like they're star star.fill which is
57:43 - what we just used and there's even this
57:46 - one it's a half star now if you don't
57:49 - want to download this official app by
57:51 - Apple I'm sure I think in the past there
57:54 - were other websites which listed out all
57:58 - the SF symbols you can search SF symbol
58:00 - browser or something like that in Google
58:02 - but seeing as how this is the official
58:04 - Apple app and I'm sure this will get
58:07 - updated first before
58:09 - those third-party websites do I would
58:12 - recommend that you use this so what I'm
58:14 - going to do now is I'm going to give
58:16 - Niagara Falls 4.5 Stars so I'm going to
58:18 - put four of these in one of these so I'm
58:20 - going to actually copy this name
58:22 - and that's going to copy this part down
58:24 - here
58:25 - let's go back to xcode
58:27 - and I am going to
58:30 - image system name and paste oops I need
58:34 - quotations right and now I have one and
58:37 - a half so all I'm going to do is copy
58:40 - this paste it a couple of times
58:44 - so that we have there 4.5 Stars
58:50 - now this doesn't look quite right as
58:53 - well right I want to push the stars all
58:56 - the way to the right and they're also a
58:58 - little big and they're not the color
58:59 - that I want so how do we address this
59:01 - well first of all Let Me Explain how
59:03 - these elements are arranged inside an H
59:06 - stack so let's go into selection mode
59:09 - for now so that I can select these
59:11 - elements and and show you this outline
59:13 - you'll notice that inside this H stack
59:17 - this H stack only goes up to here what's
59:20 - happening is that this H stack is only
59:23 - as wide as it needs to be to fit all of
59:27 - the elements inside of it furthermore
59:29 - these elements inside of it you can see
59:31 - the outline is right up against the text
59:33 - element same thing with the images right
59:37 - that blue outline that's the surrounding
59:39 - frame that's how much space it takes up
59:41 - it is only as big as that view needs to
59:45 - be now this is typical of views they
59:49 - only have a frame as big as it needs to
59:52 - be but there are some views that
59:55 - actually take up as much space as it can
59:59 - so that is actually what we want to put
60:02 - one of these elements is called a spacer
60:04 - now the spacer view will basically take
60:07 - up as much space as it can so let me
60:09 - demonstrate again since it's the first
60:12 - time we've used this let's open up the
60:14 - library under views let's search for
60:16 - spacer there we go a flexible space that
60:19 - expands along the major axis of its
60:21 - containing stack layout or both axes if
60:24 - it's not contained in the stack
60:25 - essentially it's just saying that it's
60:27 - going to take up as much space as
60:28 - possible look at what happens here by
60:30 - putting a spacer in between the text and
60:33 - the Stars right here first of all it
60:35 - pushes the H stack right as wide as it
60:38 - can be because remember the H stack
60:40 - expands to as much space
60:43 - as the elements inside of it requires
60:46 - the text still requires just that bare
60:49 - minimum the Stars again requires the
60:51 - bare minimum but the spacer on the other
60:53 - hand is taking up all this empty space
60:56 - right here you don't see the outline but
60:58 - it's right there in the middle so the
60:59 - spacer is a great way to space elements
61:02 - apart as its name suggests now one handy
61:05 - tip before we move on if you have
61:07 - multiple spacers in the same container
61:09 - it divides up all of the available space
61:12 - by the number of spacers you have so if
61:15 - I put a spacer
61:17 - before the text and after the image is
61:20 - here
61:21 - you can see that this space and this
61:23 - space and this space are all equal so
61:26 - the spacers take up all the available
61:28 - space and divvies them up between each
61:31 - other evenly
61:33 - right but I'm gonna remove those two
61:35 - just gonna leave the spacer element in
61:38 - the middle it's going to take everything
61:39 - up here we're going to add some padding
61:41 - to the left and right later anyways
61:45 - okay so let's finish up this ratings by
61:48 - adding some text right below the stars
61:51 - in our initial design we had you know in
61:54 - Brackets a couple of reviews like or the
61:56 - number of reviews there so how would we
61:59 - do that so I could put a piece of text
62:02 - right here that said text
62:07 - um let's put some brackets
62:08 - reviews
62:11 - like that but you can see here it does
62:14 - that not the effect that we wanted why
62:16 - not Nest another layout container so
62:19 - what we're going to do here so this is
62:21 - an H stack right
62:23 - I'm going to put these five stars in a
62:29 - v-stack so that we can put the text
62:32 - right under it
62:35 - so let's create a v-stack right here
62:39 - and we are going to put the images
62:43 - in there
62:45 - as you can see it lays it out on top of
62:48 - each other as expected and I'm going to
62:50 - put the review text down there as well
62:54 - now this is sort of what I want but I
62:57 - need to lay these out horizontally right
63:00 - so I'm going to Nest an H stack
63:04 - in there
63:07 - and so that actually gives me what I
63:09 - want now the stars and the reviews text
63:13 - is a little large for my liking so and
63:16 - plus it's not the right color too so I
63:18 - am going to add some modifiers to it so
63:21 - what we're going to do is
63:23 - I'm going to type this out I encourage
63:25 - you to do so as well if you don't
63:26 - remember
63:27 - um following along and typing it out is
63:29 - a great way to remember so to change the
63:32 - color we use foreground color
63:34 - and I'm going to hit dot so we can bring
63:38 - up autocomplete I'm going to choose
63:40 - orange press enter that's there it is
63:43 - it's orange I am going to go to the end
63:46 - and hit dot again and this time I'm
63:49 - going to change the font
63:51 - and red dot again I'm going to choose
63:53 - caption to make it smaller so that's
63:56 - about the size that I would want it now
63:58 - I would have to apply
64:00 - let me just make some more space so it's
64:02 - easier to see
64:04 - yeah perfect
64:05 - now I could apply these two things to
64:09 - each star like that
64:12 - right and that would essentially get me
64:14 - what I want but there is a better way to
64:17 - do this and that is to put these two
64:19 - modifiers instead on the H stack right
64:23 - here
64:25 - okay Watch What Happens I'm going to
64:27 - take off these modifiers
64:32 - you can see that each of them
64:34 - have the orange color and the caption
64:36 - size the reason for this is because
64:39 - modifiers on a container view get
64:42 - applied to all the views inside of it
64:44 - that's awesome right so I actually want
64:47 - the same thing to happen to this so
64:49 - instead of applying it on the HVAC why
64:51 - don't we put it on the v-stack so that
64:54 - it includes this text element so
64:57 - command X
64:59 - command V
65:00 - now you can see
65:02 - um the orange color in the caption gets
65:04 - applied to the whole thing
65:09 - and now for the final piece of content
65:10 - on the card itself and those are the
65:13 - icons on the lower right corner
65:15 - so for this
65:17 - it is pretty simple because we have this
65:21 - description text already in a v-stack so
65:23 - under here we're going to add the icons
65:26 - we're going to use SF symbols we're
65:28 - going to use system name and let's bring
65:30 - up our trusty app here this is going to
65:33 - be let's use binoculars and we're going
65:37 - to choose the the filled one let's copy
65:40 - name and paste it in there whoops we
65:42 - need quotations like that those
65:44 - binoculars right there uh let's add
65:47 - another one
65:50 - this one is going to be uh I'm going to
65:53 - use a fork fork and knife
65:57 - copy that
66:01 - we're gonna put that we're gonna put the
66:04 - fork and knife first now I'm going to
66:06 - put these two into an H stack
66:11 - like that
66:12 - and I am going to space them so that it
66:16 - is on the right hand side so all I'm
66:19 - going to do is add a spacer element
66:20 - before the two images which pushes it
66:23 - all the way to the right and finally we
66:26 - are going to change the color and the
66:28 - size we're going to add a foreground of
66:30 - gray and the font of caption
66:33 - foreground color
66:35 - Gray
66:37 - font caption now you can see how typing
66:40 - it together with autocomplete is way
66:43 - faster than opening up the library each
66:45 - time to choose the modifiers and again
66:47 - if you're still more comfortable with
66:49 - doing it this way that's completely fine
66:52 - um I love this new version of xcode and
66:55 - Swift UI where you can have multiple
66:57 - ways of doing things you can configure
66:59 - things through the inspector because it
67:00 - makes it The Learning Experience much
67:03 - better and easier as you progress you'll
67:06 - probably be not even touching the
67:08 - library or an inspector panel just be
67:10 - typing and you'll be moving really
67:11 - really fast so don't worry if you're not
67:13 - there yet you will get there if you
67:15 - continue to progress along this journey
67:17 - okay so next up we have the background
67:20 - for this card now let's go ahead this is
67:24 - the vertical stack right you can see
67:26 - when I select this this blue outline
67:30 - highlights the boundaries or the frame
67:33 - of this v-stack so like the H stack the
67:36 - v-stack only takes up as as much space
67:40 - as it needs to so you can see that it's
67:42 - right up against the edge right there
67:45 - so
67:46 - uh if we go down this is the ending
67:49 - bracket for the v stack right here if
67:51 - you're not sure what you can do is
67:52 - collapse the code in between the opening
67:55 - bracket and the closing bracket just so
67:57 - it's easier to read so how you can do
67:59 - that is you press your uh click your
68:02 - cursor here inside the v-stack and you
68:05 - can go into
68:07 - um right here code folding and you can
68:10 - fold and unfold just take note of those
68:14 - shortcut keys inside xcode so you don't
68:17 - need to come into this menu all the time
68:18 - but I'm going to choose fold and Watch
68:21 - What Happens see it folds all of that
68:23 - stuff into these two brackets so that
68:26 - you know it's easier to work with and
68:30 - then
68:30 - it's just it's a visual thing that's all
68:32 - it is and if you want to open it back up
68:34 - you can double click it to open it back
68:37 - up and again once you get familiar with
68:39 - xcode you don't even need to bring out
68:42 - that menu you can use your keyboard and
68:44 - just do that and you can move really
68:47 - fast so the reason I wanted to do that
68:50 - is because I want to add a modifier to
68:52 - the v-stack and in particular the one I
68:54 - want to add is
68:56 - let's go under modifiers and choose
68:58 - background this one right here layers
69:01 - the given view behind this view so
69:04 - essentially it allows me to specify a
69:08 - view
69:09 - as a background to the v-stack so let's
69:12 - see how we can use this to our advantage
69:14 - so this is the background for the
69:16 - v-stack and I wonder why it changes it
69:19 - to Blue I haven't even specified any
69:21 - view but that was what I was going to do
69:23 - so I was going to put a rectangle to be
69:27 - specific so
69:29 - rectangle is a view you can find it
69:32 - actually inside The View Library here
69:36 - it's a simple shape
69:38 - that you can specify
69:40 - a foreground color Corner radius and
69:44 - things like that so I'm going to drag
69:45 - and put that in between the brackets of
69:48 - the modifier
69:50 - by default I guess it's black so this is
69:53 - where things start to get interesting
69:55 - I'm going to add modifiers to the
69:58 - rectangle to change its look and feel
70:00 - and that essentially is the background
70:03 - for the v-stack
70:05 - so let's go ahead and add a foreground
70:08 - color
70:09 - to my rectangle so I can say you know
70:13 - dark blue for example and that would be
70:15 - blue you can say green that would be
70:18 - green
70:19 - right
70:20 - um so let's leave it as green for now
70:22 - we're going to change it later uh
70:23 - because if I change it to White right
70:25 - now we won't be able to see it now the
70:28 - thing is we probably want some spacing
70:30 - right you can see this is right up
70:32 - against the edge so what we're going to
70:35 - do is add
70:38 - some padding we're just going to use the
70:40 - padding modifier like we've done before
70:41 - and great we have some padding between
70:45 - the edges of the screen and the card but
70:48 - what about padding inside of the card
70:50 - right
70:51 - you can see the green background we'd
70:53 - want some padding there so what I'm
70:56 - going to do is add the another padding
70:58 - modifier right here before the
71:00 - background modifier and you can see that
71:03 - that's this padding right here whereas
71:06 - this padding is this now I know that
71:09 - might be a little bit confusing but the
71:12 - way to think about this is that you have
71:15 - your v stack this is your original View
71:18 - and then these modifiers get applied in
71:21 - sequence that means in order so if you
71:24 - look at the code that we have right now
71:26 - first we have padding so that adds
71:30 - actually let me just
71:33 - remove this code for now I'm going to
71:36 - press command X so that you can see what
71:38 - we have so without this padding modifier
71:42 - you can see that the blue frame
71:47 - right is right there
71:50 - if I add the padding element
71:54 - essentially adds padding to all four
71:57 - sides
71:58 - and now I put the background modifier on
72:01 - there let me just remove that last
72:03 - padding bit
72:06 - right the background gets applied to the
72:09 - padding as well
72:12 - and then when I put another padding
72:15 - modifier it gets applied to the outside
72:17 - of the background
72:22 - like that
72:24 - what happens if let's say I move this
72:27 - padding modifier here
72:30 - right then we get padding and then
72:33 - another set of padding so that's why
72:34 - it's so thick and then the background
72:36 - gets applied if I take these two padding
72:39 - elements and I put it after the
72:41 - background
72:42 - then we get something like this where
72:43 - there's no padding right the background
72:45 - gets applied to the v-stack and then you
72:48 - have a set of outer padding and another
72:49 - set of outer padding so the order
72:51 - matters sequence matters here
72:54 - okay so now that you've understand that
72:56 - let's change this foreground color to
72:59 - white and we're going to add another
73:01 - modifier to the rectangle and let's
73:04 - create some space here
73:09 - dot Shadow now I'm just going to specify
73:13 - 15 for the radius and you can see that
73:15 - you have a nice shadow effect that's how
73:17 - easy it is to apply that now the last
73:19 - thing to do is to apply a corner radius
73:21 - to our card now I don't want to apply it
73:24 - after the shadow I actually want to
73:25 - apply it before the shadow because I
73:27 - want the shadow to apply to the rounded
73:30 - card and not round the corners of the
73:33 - Shadow because remember order matters
73:35 - right so if I do corner radius 15 you
73:40 - can see that let's choose this
73:43 - you can see that I have the rounded
73:46 - corners and then the shadow gets applied
73:47 - but let's see say we do it the other way
73:49 - around
73:52 - right and I put
73:54 - a corner radius on the shadow you can
73:56 - see it it completely breaks things
73:58 - so
73:59 - I want to round the card first
74:02 - and then apply the shadow to the rounded
74:05 - card
74:06 - essentially is the rectangle we're using
74:08 - it as a background for that v-stack
74:10 - okay so finally the last step is to put
74:14 - that mint green background on everything
74:15 - and just like in lesson one we've done
74:17 - this before so we are going to use a
74:20 - depth of Stack right and we're going to
74:22 - put a base color at the bottom and then
74:25 - this V this whole v-stack card this
74:28 - whole thing on top of that color
74:30 - so
74:32 - let's do that if you remember what is a
74:36 - depth stack
74:38 - right it is a set stack like that
74:41 - I'm going to put a color
74:44 - I'm going to choose mint
74:46 - system mint okay
74:49 - and again this is the safe area right so
74:52 - we have to apply another modifier to it
74:54 - so ignores safe area so it goes all the
74:58 - way and then what we're going to do is
75:00 - we're going to put the v-stack on top of
75:01 - it so this whole thing right here and
75:03 - keep in mind this is still collapsed
75:05 - which also makes it easy to select
75:07 - command X
75:09 - command V to paste it inside does that
75:13 - stack so there you have it
75:15 - so how was that as you build more user
75:18 - interfaces inside xcode you're just
75:20 - going to get faster and better remember
75:22 - that you can get the associated xcode
75:24 - project with this lesson as well as any
75:26 - challenges and quizzes by creating a
75:28 - free code with Chris account and taking
75:30 - this course on our learning platform we
75:33 - also have a free community where you can
75:34 - get help if you are stuck on something
75:36 - just visit
75:37 - codecrew.codewithchris.com in the next
75:39 - lesson we are going to build an app that
75:41 - is not just the user interface but also
75:43 - includes applogic and user interaction
75:46 - so it's going to be a good one I'll see
75:48 - you there today you're starting a brand
75:50 - new app that will teach you all of the
75:52 - basic skills for IOS app development in
75:55 - this lesson you're going to be building
75:56 - the user interface for that app and then
75:59 - in the following lessons I'm going to
76:00 - take you through the coding part so that
76:02 - you can add the logic and user
76:04 - interactivity to the app now hopefully
76:07 - you've been following since lesson one
76:08 - and if you've been learning a lot please
76:11 - show your appreciation by giving this
76:12 - video a thumbs up and consider
76:14 - subscribing so that you don't miss the
76:16 - next lesson alright buckle up let's go
76:20 - okay let's go ahead and start a new
76:22 - xcode project go to file new and let's
76:25 - choose project and then under iOS we are
76:28 - going to select app
76:30 - Now by this time this should start
76:32 - feeling pretty familiar to you I'm going
76:35 - to call this the war card game now this
76:38 - time we are going to come back to this
76:40 - project over several lessons so make
76:42 - sure you name it something that you like
76:45 - and also save it in a location that you
76:47 - can remember because you're going to
76:49 - need to launch this project again so you
76:51 - don't need to change anything with Team
76:53 - organization identifier interface should
76:56 - still be swift UI and language should
76:58 - still be swift you don't need to check
77:00 - any of the other options
77:02 - let's click next I'm going to save it on
77:04 - my desktop so it's easy to find you
77:07 - don't need to create a git repository
77:08 - for this let's just hit create and if
77:11 - you don't know what any of those options
77:12 - are I would suggest you review lesson
77:15 - two because that's where we went through
77:16 - all of those options let me adjust this
77:19 - window just a little bit so we can see
77:21 - what's going on and I'll shrink that a
77:24 - little bit and we will actually get rid
77:26 - of that inspector tab next we're going
77:29 - to add the image assets that we're going
77:30 - to need for this war card game so I've
77:33 - got the assets ready to go here in this
77:36 - folder in the video description below
77:38 - you'll find a link to a war card game
77:41 - image assets dot zip file if you unzip
77:44 - it you'll see the same image Assets Now
77:45 - if you're on desktop you might need to
77:48 - expand the video description that's
77:50 - underneath the title in order to see the
77:53 - link and if you're on mobile watching
77:55 - this on YouTube you might need to tap on
77:57 - the title of the video to open up the
78:00 - video description and then you can find
78:02 - the link link once you have that zip
78:04 - file unzipped and you have all these
78:06 - assets staring back at you I want you to
78:08 - highlight all of them notice that
78:10 - they're organized by folder and those
78:12 - folders are going to be preserved when
78:14 - we bring them into our asset Library so
78:16 - in xcode let's go ahead and click on
78:19 - assets and then back here we're going to
78:22 - drag this and just drop it in there
78:23 - you're going to see that this is
78:25 - preserved and so it's really nicely
78:28 - organized and if you've worked with IOS
78:31 - app development before you might have a
78:34 - scene that we did three different file
78:35 - sizes however these images if you notice
78:39 - they are SVG format this is a special
78:41 - vector format where you can scale up and
78:45 - down these image assets without any loss
78:48 - of quality so that's really neat and we
78:50 - only need to have this one size here
78:53 - okay after you've done that let's take a
78:55 - look at the UI that we're trying to
78:57 - build now based on what you've learned
78:59 - in the previous lesson how would you
79:00 - break this user interface up in terms of
79:03 - what view containers or layout
79:05 - containers if you want to call them that
79:07 - which one of those are you going to use
79:09 - to lay out these elements and second of
79:12 - all which view elements are you going to
79:14 - use to represent each of these things
79:16 - that you see now as an exercise I want
79:18 - you to pause this video and try building
79:20 - this UI yourself inside xcode trust me
79:23 - by doing this exercise you are going to
79:26 - cement your skills and you're going to
79:28 - identify what you need to review now
79:30 - before you start this challenge if you
79:32 - haven't watched the previous lesson you
79:34 - can do so right over there it's going to
79:35 - show you all the skills and techniques
79:38 - you need to accomplish this right now
79:39 - now for each of the elements that you
79:42 - see in the UI right here I want you to
79:44 - just use a swift UI view element to
79:47 - display the images that you've just
79:49 - added to the project now in terms of
79:51 - which view containers you want to use in
79:54 - order to lay out these different views
79:56 - it's all stuff that you've used in
79:58 - lesson three so there are no surprises
80:01 - and here are also some viewer modifiers
80:03 - that might come in handy so pause the
80:05 - video now and try it out and then resume
80:07 - it when you're ready to build it
80:08 - together
80:18 - all right how was it now if you got it
80:21 - to look relatively the same that's a win
80:23 - in my books but if you struggle that's
80:25 - also a good thing because as you follow
80:28 - along and we're going to walk through it
80:30 - together you're going to have context
80:31 - and that makes a huge big difference all
80:34 - right let's do it
80:35 - okay here's what I see we have a depth
80:38 - stack as the root element also known as
80:41 - a zed stack or Z stack and then we have
80:44 - an image which represents the background
80:47 - and then on top of the background we
80:49 - have a v-stack which is going to contain
80:52 - everything all of the elements that you
80:54 - see on the screen
80:55 - inside that v-stack first we're going to
80:58 - have the logo centered and then below
81:01 - the logo we're going to have an H stack
81:03 - containing two cards
81:06 - and then below the H stack we are going
81:09 - to have the button and then below that
81:11 - we're going to have another H stack
81:13 - inside that H stack will contain two
81:16 - v-stacks each of the V Stacks will
81:19 - contain two text elements representing
81:22 - the player label as well as the score
81:25 - and then it's just a matter of adding
81:27 - spacers and padding to make sure
81:29 - everything looks nice and spaced out now
81:32 - if you did it another way that's
81:33 - perfectly fine too okay let's implement
81:35 - this in xcode okay so here back in xcode
81:38 - make sure you have all these image
81:40 - assets added to the project if you
81:42 - haven't already and let's go into the
81:44 - content view here we see the preview
81:47 - this is all the default stuff let's get
81:49 - rid of that make sure you don't
81:50 - accidentally delete that bracket or else
81:54 - xcode will be complaining
81:56 - so you should have two opening brackets
81:58 - and two closing brackets right here
82:01 - so I'm going to type out my view
82:04 - containers and Views you can feel free
82:06 - to use the library just like I have
82:10 - shown you back there if you haven't
82:12 - gotten familiar with just typing it out
82:14 - nothing wrong with that so here we have
82:17 - our Zed stack I'm going to add an image
82:19 - and this is going to represent our
82:21 - background so I'm going to put
82:22 - background plane that's the one you
82:25 - could try different ones you could try
82:26 - out texture for example
82:30 - now what isn't that oh it's called cloth
82:33 - sorry
82:34 - no wonder cloth
82:37 - wood cartoon I think this one was called
82:41 - yeah now notice though before I said
82:44 - that the image doesn't reach over here
82:47 - and over here those are you know the
82:50 - safe area right unless we put the
82:51 - modifier ignore safe area so why is the
82:54 - image reaching all the way there uh now
82:57 - and that is because it's displaying the
82:59 - image at its full size all right because
83:02 - we haven't added the resizable modifier
83:05 - to it if we did it would actually resize
83:07 - the image to fit the screen so that's
83:11 - why the image is going full screen
83:13 - because the image is actually larger the
83:16 - native size of that image is larger than
83:18 - the screen size
83:20 - so I first of all I'm going to go back
83:22 - to
83:22 - plane and then I'm going to do resizable
83:26 - and you can see as soon as we do that
83:28 - we're allowing Swift UI to resize that
83:31 - image to fit the screen and you can see
83:34 - that it doesn't go past the safe area so
83:36 - we're going to have to add ignore safe
83:39 - area now for this type of background it
83:41 - doesn't really matter even if it's you
83:44 - know way too large for the screen
83:46 - because you can't really tell but if
83:48 - it's a landscape image like we had for
83:51 - the the Niagara Falls image in lesson
83:54 - one two
83:56 - three and lesson three uh you would see
84:00 - that it's like super zoomed in right so
84:02 - that's why we would have to add the
84:03 - resizable and then if you wanted to
84:05 - cover the whole screen you would do
84:07 - ignore safe area
84:09 - okay so that's that this v-stack next is
84:12 - going to contain all of our elements
84:15 - like I said first up is the logo
84:19 - there it is beautiful logo and then we
84:22 - have an H stack containing the two cards
84:25 - so uh H stack remember lays things out
84:29 - side by side so inside the H stack we're
84:31 - going to have two cards so I'm going to
84:33 - use card two
84:36 - foreign car 3 and there's a strategic
84:39 - reason why we named these the way we
84:41 - have card two three four five all the
84:44 - way up to card 14 for the ace uh you
84:47 - will see when we get to the later
84:49 - lessons uh where I show you some of the
84:52 - code and some of the logic and you're
84:53 - going to learn how to apply that don't
84:55 - worry if you've never coded before it's
84:57 - going to be really simple I promise you
84:59 - but naming the cards this way is going
85:02 - to make it easier for us as well next up
85:05 - we have I'm just going to use images for
85:08 - now for all of these elements we have
85:10 - the button
85:11 - right and then we have the the scores
85:15 - now a single score looks like this
85:20 - player
85:23 - and then the score right but there were
85:26 - two of them right so
85:29 - um what I'm going to do is create an H
85:33 - stack
85:35 - all right I'm going to put the player
85:37 - label and player score inside that H sac
85:40 - and then I'm going to copy this and
85:43 - paste it command C command V to copy and
85:47 - paste and then this is CPU and there you
85:50 - have it these are all of the elements
85:52 - that are on the UI now we just have to
85:55 - space them out one of the easiest ways
85:58 - to space things out proportionately is
86:00 - to use spacers remember a spacer takes
86:04 - up all available space
86:06 - if there are multiple spacers it divides
86:10 - the space up between them evenly so
86:14 - for example if we wanted to space these
86:19 - items out vertically
86:21 - to have an equal amount of space between
86:24 - all of these vertical items in this v
86:28 - stack here we could put a spacer
86:32 - just in between everything right here
86:34 - here right between the logo between the
86:37 - card H stack between the button between
86:40 - the scores H stack so let's try that
86:45 - I'm just going to copy
86:47 - that and we're going to paste it a bunch
86:49 - of times so you see just adding a single
86:51 - spacer it pushes everything down because
86:53 - it tries to get as much space as
86:55 - possible so that's a great thing to do
86:58 - if you want things to be bottom aligned
87:00 - for example
87:02 - I'm going to add a second spacer under
87:03 - the logo so now you can see it splits up
87:06 - the space between the two spacers I'm
87:09 - going to add a spacer below the card H
87:12 - stack now it's divided by the three
87:14 - spacers I'm gonna put another spacer
87:16 - below the button
87:18 - there you go and finally another spacer
87:20 - below the scores so now everything is
87:23 - spaced out vertically evenly for these
87:27 - cards I want to do the same thing for
87:29 - the h stack I'm going to put a spacer in
87:31 - between the two cards which pushes them
87:33 - off to the side but guess what we're
87:35 - going to add a spacer to the left of
87:37 - that card and to the right of that card
87:41 - and now they are spaced out evenly
87:43 - horizontally
87:45 - now we're going to do the same thing for
87:47 - the scores we're going to add in this H
87:50 - stack a spacer like that which pushes
87:53 - out to the side again we're going to add
87:55 - a spacer to the left and to the right so
87:57 - it divides the space up evenly
88:00 - there we go now we're going to change
88:03 - some of the font colors and sizes so why
88:08 - don't we first make everything white in
88:10 - the fun white now I could apply them to
88:13 - each text element but remember if you
88:15 - apply the modifier to a view container
88:19 - it gets it affects all of the views
88:22 - inside of it so I'm going to take a look
88:24 - at which outer parent view container
88:28 - contains all of those hex Elements which
88:30 - happens to be this H stack
88:32 - right I could you know I could put on
88:35 - this vsac and this vsac but by if I put
88:37 - it on the H stack then it applies to
88:39 - everything inside and I only have to do
88:41 - it once
88:42 - so let's do foreground color dot White
88:45 - you can see that all that turns white it
88:47 - gets applied to that that that and that
88:49 - all four text elements now this time for
88:52 - sizing I have to apply it to the
88:55 - individual text elements because I want
88:57 - them to they're going to look a little
88:58 - different for each one for the player I
89:02 - am going to do font
89:04 - and I'm going to say dot headline
89:07 - it's going to bold it a little bit
89:09 - same thing for the CPU label font
89:12 - headline
89:14 - it's going to make it a little bigger
89:16 - for the score I'm going to do font dot
89:19 - large title
89:21 - same thing for here font dot large title
89:26 - and then lastly I want to add a little
89:28 - bit of space underneath the player label
89:31 - so I'm going to add a second modifier
89:33 - under there and this time instead of
89:36 - just adding padding which does padding
89:39 - on all four sides
89:40 - what you can do here instead of just
89:43 - writing out the code sometimes if you
89:45 - don't know the code representation of
89:47 - something that you want to do you can
89:49 - always open up the inspector panel
89:52 - and you can take a look at what's
89:54 - happening so for for this player label
89:57 - padding is being applied on all four
89:59 - sides you can see here padding is all
90:02 - four sides I can hit X to get rid of the
90:04 - padding actually that deleted it and I
90:07 - can check just the bottom padding so and
90:10 - I can increase it to 10.
90:14 - so that's just going to pad the the CPU
90:18 - no it didn't apply it
90:21 - ah
90:25 - what did I apply that to okay so you got
90:27 - to be a little careful doing that let me
90:29 - just hit X on that uh I think I applied
90:32 - it sorry I applied it to this
90:35 - I'm gonna put my cursor over the player
90:37 - label I'm going to hit bottom now you
90:40 - can actually see the code it added
90:42 - padding bottom and I'm going to increase
90:44 - that to 10.
90:47 - by default it's 20.
90:50 - let's refresh it there we go so you see
90:53 - 10 right there and you can see the
90:55 - equivalent code modifier being applied
90:57 - to the player label now I can simply
91:00 - copy that and I can paste it for this
91:02 - CPU
91:04 - there you go
91:06 - awesome that is our UI now in order to
91:09 - apply some user interactivity to this
91:12 - button so that we can handle the user
91:15 - topic on it we're going to have to learn
91:16 - a little bit of basic Swift Code
91:19 - that's why we're going to take a few
91:21 - lessons to get some basic coding skills
91:23 - and then we're going to come back to the
91:25 - war card game apply what we've learned
91:27 - and bring this app to life now if this
91:29 - is going to be your first time coding
91:31 - don't be intimidated I'm going to make
91:33 - this so simple for you to understand and
91:35 - we are going to erase any fears that you
91:38 - might have if you're excited please give
91:40 - this video a thumbs up if you haven't
91:41 - already I really really appreciate it
91:43 - and I'll see you in the next lesson in
91:45 - the last lesson you built this user
91:47 - interface but in order to handle Taps on
91:49 - this button to change the cards up top
91:51 - we're going to need a little bit of
91:53 - Swift Code by the end of this lesson
91:55 - you'll be writing your own Swift Code
91:57 - statements and you'll realize that it's
91:59 - not so hard to read or write so please
92:01 - watch Until the End alright let's buckle
92:03 - up and let's go
92:06 - first of all let's make sure we're all
92:08 - on the same page what is coding well to
92:10 - me it is just the act of writing out
92:12 - code statements which represent
92:14 - instructions that we want the computer
92:16 - to do and then the computer reads the
92:19 - code statements and carries out our
92:21 - instructions well what is Swift then
92:24 - well Swift is the coding language that
92:26 - we use to write those code statements
92:28 - just like a language for instance
92:29 - English or Spanish has a structure and
92:32 - it has rules to follow and it allows us
92:34 - to express ourselves the Swift coding
92:36 - language is the same it has a structure
92:39 - and a grammar which we follow in order
92:42 - to write Swift Code statements these
92:45 - Swift Code statements are then converted
92:47 - into machine code which the computer can
92:50 - understand and carry out now you might
92:52 - ask why not just write machine code and
92:54 - skip this extra step well Swift code is
92:57 - easy to read write and to manage for us
92:59 - human beings but machine code is not so
93:03 - that's why we need this step now the
93:05 - thing that converts the high level code
93:06 - like Swift code to machine code is
93:09 - called a compiler in this case with
93:12 - building iOS apps xcode performs this
93:14 - compilation step
93:16 - now that you understand what it is let's
93:18 - try writing some Swift Code statements
93:20 - of our own and I know the perfect place
93:22 - to do this
93:24 - we're going to experiment with some
93:25 - Swift Code in something called xcode
93:27 - playgrounds now if you're brand new to
93:29 - this video series we downloaded and
93:31 - installed xcode back in lesson one so if
93:34 - you don't have xcode ready yet just go
93:36 - ahead and watch lesson one right over
93:37 - there and come back to this lesson when
93:40 - you have xcode ready to go now a
93:42 - playground is a lightweight way for us
93:45 - to practice with and experiment with
93:47 - swift code without creating a brand new
93:50 - app project which has a ton of views
93:53 - already set up for you and things that
93:54 - we don't need so here's how we can
93:56 - create our playground make sure that
93:59 - xcode is in Focus you can click on xcode
94:01 - the dialog window right here go up to
94:03 - file and then go new and choose
94:05 - playground you're going to get something
94:07 - like this now we are going to go under
94:10 - iOS and we're going to choose blank and
94:12 - that's going to be the most basic of
94:15 - basic playgrounds for us to test our
94:17 - code with click on next and we are going
94:19 - to save this somewhere I'm just going to
94:21 - call this
94:23 - uh
94:25 - code
94:26 - playground you can call it whatever
94:28 - you'd like is we're just going to use it
94:31 - to test some code okay so now first of
94:35 - all I'm going to close this left hand
94:37 - Navigator because we don't need that by
94:39 - clicking that button and then I'm going
94:41 - to make this window a little larger so
94:44 - we can see what we're working with okay
94:46 - so if you're following along you should
94:47 - have something that looks like this now
94:50 - in this brand new playground we have
94:52 - this single Swift statement you can
94:55 - ignore the import statement for now
94:56 - let's focus on this line of Swift Code
95:00 - and let's see what that does VAR
95:02 - greeting equals hello playground let's
95:04 - dissect this Swift statement first of
95:07 - all we're going to talk about this hello
95:09 - playground part on the right hand side
95:11 - of the statement now this is a piece of
95:13 - Text data and you've seen this before in
95:15 - the user interface that you've
95:17 - previously built I've highlighted the
95:19 - pieces of text Data here now I shouldn't
95:21 - really surprise you apps are all about
95:24 - manipulating data pulling data from
95:26 - various sources manipulating that data
95:29 - showing that data to users through the
95:32 - app user interface
95:34 - interacting capturing user interaction
95:36 - as data and then processing that storing
95:40 - data and retrieving data to and from
95:42 - databases and so on and so forth later
95:45 - on in this lesson we're going to talk
95:47 - about different types of data that you
95:49 - can work with but for now let's go back
95:51 - to the code statement this is a piece of
95:53 - text Data I want to ask you a question
95:56 - where does this piece of text Data live
95:59 - or in other words where does it exist
96:02 - well it exists in the computer's memory
96:05 - this is memory space that is allocated
96:08 - for our app to function okay great now
96:11 - how do we refer to this piece of data in
96:14 - the memory so that we can work with it
96:16 - and manipulate it so walk with me
96:18 - through this scenario imagine you have
96:20 - your first Swift Code statement that
96:23 - creates this piece of data in the
96:25 - computer's memory in your second Swift
96:28 - Code statement let's say you want to
96:30 - work with this piece of data perhaps you
96:33 - want to manipulate that text Data change
96:35 - it to all capitals or maybe you want to
96:37 - take it to display it on the user
96:39 - interface or something like that but how
96:41 - do you retrieve it and access it from
96:44 - the computer's memory we need some way
96:46 - to be able to access and reference that
96:49 - piece of data in memory and this is
96:51 - where the rest of that Swift Code
96:54 - statement comes in let's go back to it
96:56 - this is a variable and it is something
96:58 - that allows us to keep a reference to
97:00 - something else think about it like a
97:03 - sticky label that you can stick on a
97:05 - piece of data in this case our variable
97:07 - or label if you want to think about it
97:09 - that way is called greeting and the
97:12 - equal sign is what is called an
97:14 - assignment operator now its job is to
97:17 - assign the data on the right hand side
97:19 - to the variable on the left hand side
97:22 - it's like the process of sticking that
97:24 - label onto that piece of data
97:27 - right here VAR is a special Swift
97:30 - keyword and what it does is create a new
97:34 - variable so if you read this entire
97:36 - Swift Code statement from left to right
97:38 - these are the instructions it would be
97:41 - giving to the computer when the computer
97:43 - executes it so starting from the left
97:45 - first of all create a variable named
97:48 - greeting next assign to this variable
97:50 - the piece of text Data hello Playground
97:53 - now after this code statement is run we
97:56 - now have a way to refer to that piece of
97:58 - Text data in memory anytime we want to
98:01 - get access to it we just have to use the
98:04 - variable name in this case that is
98:06 - greeting in fact take a look at this
98:08 - second line this code statement prints
98:10 - out the text Data let's see how we can
98:13 - try this out on the playground the xcode
98:15 - playground has a way for us to run or
98:18 - execute the code to see what the results
98:21 - are or the output so here in the lower
98:24 - left hand corner you'll find this small
98:26 - play button and if you
98:28 - tap on that it's going to execute the
98:31 - playground now the first time you tap on
98:32 - it you can check the status bar it'll
98:34 - tell you it's running and uh when after
98:37 - you click it you're going to see the
98:38 - output now right here you won't see
98:41 - anything aside from something appearing
98:43 - over there because we haven't printed
98:46 - anything out but in the lower right hand
98:48 - corner you see this other button this
98:51 - brings up this little window down here
98:52 - and this is called the console area this
98:55 - is where output will happen so let's go
98:58 - ahead and write that second print
99:00 - statement and try out printing out our
99:03 - variable so I'm going to type in print
99:05 - Open Bracket greeting
99:08 - remember this variable is going to
99:12 - reference hello playground
99:15 - so let me hit stop here and hit execute
99:19 - again and this time it's going to run
99:22 - both lines of code starting from line
99:23 - three and then line four and you're
99:25 - going to see the result of line four
99:28 - printing out the text Data into the
99:31 - console here now I want you to notice
99:33 - something in line three we had the VAR
99:36 - keyword but then in line four when we
99:38 - wanted to use that variable we did not
99:41 - have to use the VAR keyword again
99:43 - because remember this VAR keyword is a
99:45 - special Swift keyword to create a new
99:48 - variable in line four we're not creating
99:50 - a new variable we are simply calling it
99:53 - and using the data that it references
99:56 - that's why we don't use the VAR keyword
99:59 - there now if you want to use proper
100:01 - terminology this process of using the
100:03 - VAR keyword to create a new variable is
100:05 - actually called declaring a new variable
100:08 - now I only use the word creating because
100:10 - in my experience teaching this
100:13 - creating makes more sense to beginners
100:15 - but now that I've explained this to you
100:17 - I'm going to start using the word
100:18 - declaring just so that in the future if
100:21 - you learn from different other training
100:24 - materials you won't get confused when
100:26 - you see them saying declaring now I want
100:29 - to show you something cool about
100:30 - variables
100:31 - remember that analogy about the variable
100:34 - being like a label that you can stick on
100:36 - data well just like labels how you can
100:38 - peel it off something and stick it on
100:40 - something else you can do the same thing
100:42 - with variables so in fact I can
100:47 - assign something else to my variable
100:52 - so let me
100:53 - reference the variable like that notice
100:56 - I don't have to use VAR again because I
100:59 - only need to create it once at the very
101:00 - beginning so greeting I'm going to use
101:03 - the assignment operator
101:05 - and I am going to assign another piece
101:07 - of data a different piece of data to it
101:12 - like that
101:13 - now if I moved my print statement so let
101:17 - me command X to cut it paste it here
101:20 - command V now if I do that
101:23 - what do you think this is going to print
101:25 - out let's go ahead and try it out so I'm
101:28 - going to hit stop and then hit run
101:31 - and it prints out I can write Swift
101:34 - because this has now assigned to my
101:38 - greeting variable the piece of text Data
101:41 - I can write Swift
101:42 - now what happens to the first piece of
101:45 - text Data hello playground while the
101:47 - computer will detect if nothing else
101:48 - needs to use that piece of data it's
101:50 - going to clear it out from memory now I
101:52 - mentioned before that there are
101:54 - different types of data that you can
101:55 - work with so here is a list now it's not
101:57 - exhaustive but these are the most common
102:00 - and basic data types that you will begin
102:02 - working with so first of all let's talk
102:04 - about the string data type this is what
102:07 - we've been working with so far it's text
102:09 - Data I know that's a little bit of a
102:11 - weird term but think of it as a string
102:14 - of characters and in fact this is the
102:16 - terminology for text Data across most
102:20 - programming languages so when you hear
102:22 - string think of text next up we have int
102:26 - and double so int represents integer
102:29 - data so those are like whole numbers
102:31 - including negatives and doubles are
102:35 - decimal numbers or fractional numbers
102:38 - Boolean or bull for short stands for
102:41 - true false that type thing this data
102:44 - type is useful when there are only two
102:45 - options like a light switch on or off
102:48 - now let's go into our playground and
102:50 - let's try out some of these data types
102:52 - alright so first of all let's try out
102:55 - the numbers because we already did
102:57 - strings like this is a string right here
102:59 - so that's Text data so let's try out an
103:03 - INT
103:06 - Pi we'll print out my int notice I'm
103:10 - using the VAR keyword to create a brand
103:12 - new variable called my int and I'm
103:14 - assigning to it the integer five and
103:17 - then I'm printing that let's see
103:21 - what we get in the console window so we
103:23 - get that five
103:24 - all right let's try to look at my double
103:35 - I'm just going to create the Boolean too
103:44 - now you'll notice as I'm typing
103:47 - autocomplete pops up and this is
103:49 - something in xcode that helps you xcode
103:52 - again to detect what sort of variables
103:54 - you have and as you're typing as I'm
103:56 - typing m y I can narrow down it Narrows
104:00 - out down the list to some possible
104:02 - selections and I I don't have to type
104:05 - out the rest of it I can just move down
104:07 - press enter and there we go so let's go
104:10 - ahead and execute this run this and see
104:13 - what we get all right so there's our
104:15 - string data there's our integer data
104:17 - there's our double data and there is our
104:19 - Boolean data so the just in case you
104:22 - didn't know
104:23 - that is going to be the flip side of
104:27 - false it's just going to be true all
104:29 - right next up now that you know about
104:31 - data types I need to mention that when
104:33 - you declare a new variable you also need
104:36 - to specify what data type it is going to
104:39 - be referencing now you might be saying
104:41 - that's not true here's the thing we've
104:43 - been using a short form to declare these
104:47 - variables right here here is the actual
104:50 - way after the variable name you put a
104:52 - colon followed by the data type that is
104:55 - to be expected that this variable will
104:58 - be referencing whether that's string int
105:01 - double Bool or something else now here's
105:03 - the kicker variables can only store data
105:06 - of the same type that you declared for
105:09 - that variable now you might be thinking
105:11 - looking at this playground where have I
105:14 - declared any data types in these
105:16 - variable declarations and none of them
105:18 - have that colon data type well what's
105:20 - Happening Here is a shorthand I don't
105:23 - have to say what type of data it'll hold
105:26 - but the system will look at what type of
105:29 - data I'm assigning to it and then it's
105:31 - going to know oh okay so this greeting
105:34 - variable is actually a string data type
105:37 - variable this my int it looks at this
105:41 - data that I'm assigning to it for the
105:43 - very first time and it's going to know
105:47 - oh this is an INT data type variable so
105:50 - the same thing goes for the other
105:52 - variables this is going to be a double
105:54 - this is going to be
105:56 - school now why is this important to know
105:59 - well let me show you an example for this
106:03 - variable greeting it is of the string
106:05 - data type so I can assign these two
106:08 - pieces of string to it in fact I can
106:10 - reassign another piece of Text data to
106:13 - it however let's say I try to assign an
106:17 - integer to it we're going to if we try
106:20 - to run this we're going to get an error
106:22 - cannot assign value of type int which is
106:25 - this to type string which is the
106:28 - greeting now even if we do not declare
106:31 - the data type up here so let me just get
106:35 - rid of that and let me run it again
106:37 - it will still end up with the same error
106:40 - because the first time you assign data
106:43 - to that variable you're locking in the
106:46 - type it's going to look at this and it's
106:48 - going to say this is string data type
106:50 - this is going to be a string data type
106:53 - variable and that's what it is from that
106:55 - point on okay so that's just something
106:58 - that is important to know now one last
107:01 - thing I want to show you before we move
107:03 - on from this lesson is something called
107:05 - a constant now constants are a special
107:08 - type of variable instead of using the
107:11 - VAR keyword to declare a new variable we
107:14 - use the let keyword to declare a new
107:17 - constant now everything about a constant
107:19 - is the same as a variable
107:21 - from how it's used to how it's declared
107:25 - and how it can only store data of the
107:28 - same data type as what you declare it
107:31 - with now the only difference there's one
107:33 - single difference and that is that with
107:36 - a constant you cannot reassign data to
107:39 - it once you assign data to it it is
107:41 - constant all right you guaranteed that
107:44 - that is the piece of data that it's
107:48 - affixed to think of it as like a label
107:50 - but instead of just sticking it on the
107:53 - piece of data you are super gluing it on
107:55 - with some industrial grade stuff and you
107:57 - cannot rip it off okay that is like a
108:00 - constant so let's go back to the
108:01 - playground and let's try this out so for
108:03 - example uh if I change this VAR for the
108:07 - greeting variable to a let that changes
108:10 - it to a constant we're going to get an
108:12 - error here because we cannot assign a
108:15 - value greeting is a let constant we've
108:17 - already assigned it this value so we
108:20 - cannot reassign it
108:22 - however if I change my int to a let
108:27 - constant this is going to be perfectly
108:30 - fine I can run this and it's going to
108:33 - produce output
108:34 - however if I try to reassign something
108:38 - to that label let's say 40 we are going
108:41 - to get an error now you might wonder why
108:44 - would we ever want to use a let instead
108:48 - of a VAR well the reason is that
108:51 - variables have special allowances in
108:53 - memory some stuff under the hood that
108:57 - gives us this flexibility but it comes
108:59 - at the cost of not being as efficient or
109:01 - optimized as a constant so if you know
109:05 - something is not going to change
109:07 - or you want the assurance that it will
109:10 - never change as you are using your
109:12 - constant then you should use the let
109:14 - keyword and in fact xcode will help you
109:17 - optimize this if you use VAR keywords
109:20 - and xcode detects that hey you've never
109:23 - reassigned anything into this variable
109:26 - why not use a let and it's going to
109:28 - prompt you as you're coding in in an
109:30 - actual app project it's going to prompt
109:32 - you why don't you change this VAR to a
109:34 - let instead because it's not going to
109:36 - impact anything and in fact under the
109:38 - hood there's going to be a Teensy bit of
109:40 - optimization
109:42 - congrats on writing your first Swift
109:44 - Code statements if you're learning a lot
109:46 - from this video series please support me
109:48 - by giving this video a thumbs up and if
109:49 - you're not shy please drop a comment
109:51 - below and let me know whether or not you
109:53 - are able to follow along this diagram
109:55 - sums up what you've learned today you
109:56 - learned about what variables are how to
109:59 - declare them and how to use them you
110:01 - learned about data types and finally you
110:03 - also learned about constants great
110:05 - progress today we are going to continue
110:07 - learning Swift and we're getting closer
110:09 - and closer to going back to that war
110:11 - card game and adding user interaction in
110:14 - this lesson you learned about code
110:15 - statements in the next lesson we're
110:17 - going to learn how to batch these code
110:19 - statements up so that we can execute
110:21 - them as a group so that we can assign
110:24 - that group to the button tab on the war
110:28 - card game and that is how we are making
110:31 - our way towards adding interactivity to
110:34 - that work our game I'll see you there in
110:36 - the last lesson you wrote your first
110:37 - Swift Code statements in this lesson
110:40 - you're going to learn how to group
110:41 - together code state is to perform a task
110:43 - now these groupings of code statements
110:45 - are called functions this is a very
110:48 - powerful concept because you can execute
110:50 - or call these functions whenever you
110:52 - want to perform that task let's dive in
110:56 - and see how we can write our first
110:57 - function
110:58 - okay so first of all how do you declare
111:01 - a brand new function now this is going
111:03 - to look somewhat similar to declaring a
111:05 - new variable or constant it's a keyword
111:09 - followed by a name so in this case of a
111:12 - function the keyword to use is f-u-n-c
111:15 - or func for short and Then followed by
111:19 - that you put the name of the function
111:21 - now just like a variable name you are
111:24 - going to be referring to this function
111:26 - name in order to execute the contents of
111:30 - the function now after the function name
111:32 - you're going to have two rounded
111:34 - brackets we're going to ignore these for
111:36 - now but these two brackets they are part
111:38 - of the name and then following that you
111:41 - have a set of curly brackets and you're
111:43 - going to find most of the time in Swift
111:45 - when you see a pair of curly brackets
111:48 - it's code that goes in between those two
111:51 - brackets in this case of a function that
111:55 - is where we are going to put our
111:56 - grouping of code statements so whatever
111:59 - code statements you want this function
112:01 - to run when you call it you are going to
112:05 - put those code statements in between
112:07 - those two curly brackets okay so let's
112:10 - put some code in there and see what it
112:11 - looks like you probably remember these
112:14 - two lines of code from the previous
112:15 - lesson if we put those two lines of code
112:18 - into our function and we change the name
112:21 - to say hello it's going to look like
112:23 - this okay so how do we call this
112:25 - function so that we can execute its code
112:28 - we simply use the function's name say
112:31 - hello followed by the two rounded
112:33 - brackets because that is also part of
112:35 - the function's name notice that we don't
112:37 - need to use the funk keyword again
112:38 - because that was only for declaring a
112:41 - new function so just like that you are
112:43 - able to execute all of the code inside
112:45 - that function now why don't we try it
112:48 - out in an xcode playground so we can see
112:49 - it in action so here I am with a brand
112:52 - new empty well empty aside from the
112:55 - default code xcode playground we have
112:58 - our VAR greeting equals hello playground
113:00 - string and why don't we put in our
113:02 - second line which is print greeting and
113:06 - just like you saw in the previous lesson
113:08 - when we run this we are going to get
113:10 - that output in the playground right
113:13 - there
113:13 - now let us declare a brand new function
113:17 - using the funk keyword followed by the
113:21 - function name
113:22 - say hello followed by two rounded
113:25 - brackets followed by a pair of curly
113:29 - brackets and oftentimes when you write
113:31 - these brackets you'll find that xcode
113:33 - helps you complete them so let me just
113:36 - go back for a second by holding a shift
113:40 - and hitting square bracket so on my
113:43 - keyboard that's how I get the curly
113:44 - brackets shift and do that if I hit
113:48 - enter it's automatically going to create
113:50 - a new line and it's going to create that
113:54 - closing bracket for me in here
113:57 - I am going to take these two lines of
114:00 - code I'm going to press command X to cut
114:02 - it and the command V to paste it in
114:04 - there and let's run our
114:06 - um our playground and see what happens
114:09 - so as expected nothing happens because
114:12 - all we've done here is we've declared
114:15 - this function say hello and we've put in
114:18 - the code in between the brackets it's
114:20 - not going to run this code unless we
114:23 - call the function
114:24 - so if I
114:27 - start typing my function
114:30 - this menu pops up this is called an
114:32 - autocomplete menu if I didn't mention
114:34 - that in the previous lesson and this
114:35 - just helps you write code faster you can
114:39 - just select it it's xcode being
114:41 - intelligent right so you could type this
114:44 - out if you want but notice this is the
114:47 - function name right followed by the two
114:49 - rounded brackets because that is part of
114:51 - the function name and you'll soon find
114:53 - out why
114:54 - okay but for now let me run the code
114:56 - again and see what happens now this time
114:59 - I get the output in the console because
115:00 - this line of code is calling the
115:04 - function which is executing the code in
115:06 - there now if I call the function again
115:11 - it's going to execute those two lines of
115:13 - code again
115:14 - so you can see this is really powerful
115:16 - because often times to perform a task
115:19 - it's multiple lines of code working
115:21 - together to achieve a common result and
115:24 - let's say there's 10 20 lines of Code by
115:27 - putting it in a function not only can
115:29 - you run that task whenever you want but
115:33 - it also saves you from repeatedly
115:36 - writing the same code and when you get
115:38 - to writing larger pieces of software not
115:42 - repeating code is actually pretty
115:43 - important because if you find an error
115:46 - in one instance of that repeated code
115:49 - you don't have to go and fix it in all
115:51 - the other places you repeated that code
115:53 - by putting it in a function once and
115:56 - calling it you know from wherever you
115:59 - need to call it you can edit the code
116:02 - and fix it from one place now that's
116:04 - pretty handy right if you like that
116:06 - you'll be even more impressed with this
116:07 - next part now to take it a step further
116:09 - functions can be even more useful
116:11 - because they can accept input into the
116:15 - function when you call it and that is
116:17 - what the two rounded brackets is for
116:19 - that comes after the function name in
116:22 - between those two rounded brackets you
116:24 - can put a series of what looks like
116:27 - variable declarations if you take a look
116:30 - at this slide here in between the two
116:32 - rounded brackets I have M colon string
116:35 - now what this is doing is declaring
116:37 - what's called a parameter for the
116:40 - function this means that whenever I call
116:43 - the say hello function I also need to
116:46 - supply the function a piece of string
116:49 - data and then inside my function within
116:53 - the two curly brackets I can work with
116:55 - that piece of data and I can reference
116:57 - that piece of data using the parameter
117:00 - name which in this case is M so you can
117:02 - imagine with this code now whenever the
117:05 - say hello function is called it also
117:07 - needs to be supplied with a piece of
117:09 - string data which we can reference using
117:12 - M and then within the function we have
117:15 - the code print M so in essence this
117:18 - function serves the purpose of
117:20 - outputting or printing to the console
117:22 - whatever piece of string data you pass
117:25 - to the function so let's try that out in
117:28 - the playground here so instead of saying
117:30 - VAR greeting I'm gonna
117:33 - erase that line right there
117:35 - and I'm going to declare a parameter of
117:38 - my function let's use m
117:41 - colon string
117:42 - this pretty much is a variable
117:45 - declaration right except without the VAR
117:48 - keyword but
117:51 - the proper terminology is this is a
117:53 - parameter of the function you can only
117:56 - use m
117:57 - inside these two curly brackets so we
118:02 - also need to modify our code here
118:03 - because there's no concept of what is a
118:05 - greeting now because we just deleted
118:07 - that variable so let's print out M and
118:11 - now you can see when we make these
118:14 - function calls say hello
118:17 - xcode recognizes that hey if you were to
118:20 - call this function the way that you
118:22 - declared it you need to supply a piece
118:24 - of string data so it's saying it's
118:26 - missing the argument for parameter m in
118:29 - the call so let's take a look at what
118:31 - that looks like I'm going to erase those
118:33 - two function calls and I'm going to type
118:34 - it out again now notice this time
118:36 - autocomplete detects that you need to
118:40 - supply string data and this is what that
118:41 - looks like so I'm going to press enter
118:45 - and this is where I would Supply that
118:47 - piece of string data and notice that
118:50 - it tells you that this is going to be
118:52 - the um the parameter name uh when you're
118:56 - building this for real you would
118:58 - probably use a more descriptive
118:59 - parameter name than just m so you might
119:02 - say message for example and uh it would
119:05 - make more sense as you're supplying the
119:07 - string data but we'll leave it as M
119:09 - because to follow the example in the
119:11 - slide
119:13 - I'm going to say
119:15 - I
119:17 - can be cool
119:19 - functions
119:21 - okay let's run the code and see what
119:22 - happens
119:25 - so as we expected prints out I can code
119:28 - functions because this piece of string
119:29 - data is being passed into the function
119:33 - as a parameter and it can be referenced
119:36 - by this parameter label M and then I am
119:39 - printing it out right there I have a
119:41 - reference to M from within
119:44 - the curly brackets but outside of the
119:47 - function declaration it doesn't know
119:49 - what m is right if I if I try to print M
119:52 - like that
119:54 - cannot find m in this scope this is
119:57 - called a scope so you can think of the
119:59 - area between these two curly brackets as
120:02 - a standalone scope or Standalone area
120:05 - and only in that area does this
120:08 - parameter exist in there that you can
120:11 - reference it using m
120:15 - now going back to our diagrams for a
120:17 - section what does it look like to have
120:19 - multiple parameters for a function
120:21 - because oftentimes we may require
120:23 - multiple inputs
120:25 - all it is simply is you declare your
120:28 - parameters separated by a comma in this
120:31 - example we have the same M parameter
120:33 - followed by a comma and then an N
120:36 - parameter notice that this parameter
120:38 - data type is different it's an INT so it
120:41 - expects integer data now whenever we
120:44 - call say hello we need to supply a piece
120:47 - of string data and a piece of integer
120:50 - data let's go back to the playground and
120:51 - try this out so instead of modifying
120:53 - this function I am going to declare a
120:57 - new one and this one let's say does
120:59 - addition and you haven't seen addition
121:02 - yet so this will be interesting so let's
121:04 - declare
121:07 - our first parameter a is an integer
121:09 - followed by comma so that I can declare
121:11 - the second parameter in this list and it
121:14 - will be also an INT and I'll call that b
121:18 - okay and then I have the opening curly
121:20 - bracket I hit enter it fills in the
121:23 - closing curly bracket and inside here I
121:26 - am going to put the code and I what I'm
121:29 - going to do in here is I'm going to add
121:31 - up A and B and then print it out to the
121:33 - console so I'm going to say VAR sum
121:36 - equals a plus b
121:39 - and then I'm going to print out the sum
121:42 - so you should be able to recognize this
121:45 - code VAR is declaring a new variable
121:48 - named sum
121:49 - equal is assigning this the right hand
121:53 - side to the variable sum
121:57 - and this plus symbol as you can guess
122:00 - adds to integers together so we just
122:03 - have a plus b But A and B are parameters
122:08 - that get passed in to this function call
122:10 - all right so let's try this out I'm
122:12 - going to call this function do add and
122:15 - xcode finds it on the menu so I'm just
122:17 - going to hit enter to auto complete that
122:19 - and all I have to do now is fill in the
122:21 - two integers that I need to pass in
122:24 - so let's say 2 and 3. let's run the code
122:28 - see what happens
122:30 - as expected it prints out a five so that
122:33 - is an example of providing single inputs
122:35 - and multiple inputs into a function now
122:38 - let us go back to the slides and extend
122:41 - it even more now functions can be made
122:43 - even better because functions have the
122:46 - ability to return output when you call
122:48 - them let's take a look at how this looks
122:50 - like if you look at this syntax notice
122:54 - that after the function name after the
122:57 - rounded brackets we have a dash followed
123:00 - by a greater than sign which makes it
123:03 - look like an arrow right in fact that is
123:07 - to signify that this function returns
123:10 - something like it produces some sort of
123:12 - output and Then followed by that
123:15 - makeshift Arrow we have the data type of
123:19 - the data that this function produces in
123:21 - this case I'm going to put int because I
123:23 - want to return or output a sum and then
123:27 - within the curly brackets of the
123:29 - function you have have to make sure that
123:31 - you have the return keyword because if
123:33 - you've specified that this function is
123:35 - going to produce some sort of output
123:36 - then you have to use that return keyword
123:38 - and actually produce the output that
123:42 - this function returns and you also have
123:44 - to make sure that what you are returning
123:46 - the output data matches the data type
123:50 - that you have said this function will
123:52 - return in this case I've indicated that
123:55 - do add will return an INT data and
123:59 - inside the body of my function I'm
124:02 - returning a piece of int data so all is
124:05 - well now before we go into xco
124:07 - playgrounds to try this out let's
124:09 - combine this with input parameters and
124:11 - see what that looks like so if you take
124:12 - a look at this slide I have two input
124:15 - parameters A and B they're both integer
124:18 - types they're separated by a comma in
124:19 - this parameter list and then after the
124:22 - rounded brackets I have that arrow and I
124:25 - am specifying that I'm going to be
124:27 - returning an INT data in the body of my
124:30 - function I am adding up the two inputs
124:33 - into a variable called sum and then I
124:36 - have the return keyword and I'm
124:38 - returning that sum as an output of the
124:41 - function let's take a look at this in
124:43 - action in our playground so let's modify
124:46 - our do add function here I'm going to
124:49 - put a space after the rounded brackets I
124:52 - am going to hit Dash greater than space
124:55 - and then I'm going to say that this
124:57 - returns into Data
125:00 - now actual is going to complain here
125:03 - because it detects that I've indicated I
125:06 - should return in data but I'm missing
125:08 - the return keyword for an expected int
125:13 - data so instead of printing this out I'm
125:16 - actually going to say return sum just
125:20 - like in our slides now let's run this
125:23 - code and see what happens notice here
125:25 - that I am calling that do add function
125:28 - and I'm passing in 2 and 3 as my input
125:32 - parameters
125:35 - now there is no output nothing pops out
125:38 - in the console why is that because we
125:40 - don't actually have a print statement
125:41 - that outputs it to the console now you
125:44 - might argue but we we're returning the
125:47 - data from here well returning the data
125:50 - doesn't mean printing it out returning
125:53 - the data means that this function
125:55 - produces that output but where does it
125:59 - go well what we have to do is we have to
126:02 - declare either a constant or variable to
126:05 - refer to that output so here's what
126:08 - we're going to do
126:09 - I'm going to declare a constant this
126:11 - time I'm going to say let
126:13 - result equals the
126:18 - um the output of do add right so what's
126:22 - going to happen here
126:23 - when I execute this function
126:27 - and it produces that sum and it returns
126:30 - it that output is going to get assigned
126:34 - to my constant result
126:37 - if I run it right now
126:40 - there also is no output well why is that
126:43 - because in this line of code I've merely
126:46 - kept track of the sum so now I can refer
126:49 - to that piece of data I still at the end
126:52 - of the day
126:53 - need to print it out
126:56 - so I'm going to right print result here
126:59 - I did this so I can illustrate to you
127:02 - how it's different printing it inside
127:05 - the function versus returning it out of
127:08 - the function and then capturing it uh
127:11 - capturing a reference to it with a
127:13 - constant or variable and then working
127:15 - with it now you might say that's
127:18 - redundant I could have printed it inside
127:20 - the function and that's true but I mean
127:22 - this is a really small scenario right
127:26 - this is important because sometimes you
127:28 - may need the output to further work with
127:32 - it maybe pass you might want to pass
127:34 - that result into a second function you
127:37 - might want to work with it in some way
127:39 - not just simply print it out right with
127:42 - the ability to take input and to produce
127:44 - output functions can truly live up to
127:47 - their name and help us group together
127:48 - sets of instructions now there are a
127:51 - couple more things I want to show you
127:52 - about functions before we are done with
127:54 - them one is called a parameter label so
127:57 - when we declared parameters here for our
128:00 - do add function what we could have also
128:02 - done right before the parameter name you
128:06 - can put a label so you can say let's say
128:11 - first num
128:14 - and before parameter B you could do the
128:17 - same thing you could put another label
128:18 - second num let's take a look at what
128:22 - that does to our function call now I am
128:24 - going to erase this line of code here
128:27 - and uh we're going to type do add and
128:31 - this time take a look at what
128:32 - autocomplete suggests for us it is now
128:35 - using the parameter labels instead of
128:38 - the actual parameter names it
128:41 - functionally the the function works
128:43 - exactly the same way so if I put 3 and 8
128:46 - here and then I you know run the
128:48 - function it's going to Output 8. the
128:51 - only difference now is by putting these
128:54 - parameter labels in front of the
128:56 - parameter names it is going to change
128:58 - how you call the function the reason for
129:02 - doing this there there may be multiple
129:04 - reasons right one could be you want
129:07 - words that are more descriptive so that
129:09 - when you're calling your function you
129:11 - remember what data you are supplying for
129:14 - it this also allows you to you know
129:16 - notice inside your function you are
129:18 - still referencing them by the parameter
129:21 - names itself so that's something you can
129:24 - use to make your your functions a little
129:26 - more more intuitive as you're reading
129:29 - them and using them something else you
129:31 - can do is if you don't want
129:34 - to have these at all
129:36 - right if you don't want to put labels or
129:39 - parameter names at all you can replace
129:42 - your parameter labels with a simple
129:44 - underscore you can do this with one you
129:47 - can do this with both it doesn't matter
129:50 - let me just do it for both and show you
129:52 - what that looks like
129:54 - so I'm going to type do add again and
129:56 - this time take a look at what that what
129:59 - it shows up as so you'll still see that
130:01 - parameter name here but when you're now
130:05 - adding your data notice that you don't
130:08 - see any parameter names in the function
130:10 - call you also don't see any parameter
130:12 - labels in the function call so this
130:15 - might be good for a very intuitive
130:18 - function names so do add you pass in two
130:21 - numbers very obvious what that's going
130:24 - to do or it could be to shorten the
130:27 - function calls itself or things like
130:29 - that and the last thing I want to
130:31 - mention to you is what is a function
130:33 - signature and just like a written
130:35 - signature a function signature is used
130:37 - to identify a function and that consists
130:41 - of the function name as well as its
130:43 - parameter list including argument labels
130:46 - and such it may seem pretty obvious but
130:50 - let me introduce the scenario too so if
130:53 - I have another function called
130:56 - do add and this is going to be
130:59 - that
131:03 - right and maybe this is
131:06 - um I don't know maybe a plus a plus b
131:09 - plus
131:11 - B
131:12 - and then return the sum
131:14 - so obviously the calculations are a
131:18 - little bit different like what the each
131:19 - function does but they're both called do
131:22 - add and they both have parameters A and
131:25 - B so what is the function signature well
131:29 - the function signature of of this one up
131:31 - here
131:34 - do add is that
131:37 - and the function signature of this one
131:40 - is this
131:42 - right like this one is this and this one
131:45 - is this
131:47 - so they're different and it is a
131:50 - combination of function name like how
131:53 - you are using those parameter labels
131:55 - plus the parameter names itself if that
131:57 - is even a factor now in terms of the
132:00 - topics covered today I would say
132:01 - declaring functions it function inputs
132:04 - and outputs are the most important thing
132:06 - parameter labels and function signatures
132:09 - are nice to know especially when you get
132:11 - to reading Swift Code and you know you
132:13 - won't get confused about why some things
132:15 - look the way that they do but yeah all
132:18 - of that combined is a good working
132:19 - knowledge of Swift functions
132:22 - I hope that with these two lessons
132:24 - you're starting to realize that coding
132:26 - is completely within reach for you now
132:28 - if you're learning a lot from these
132:29 - lessons please give this video a thumbs
132:31 - up and don't forget to subscribe so you
132:33 - don't miss the next lesson now with
132:35 - functions under our belt we are able to
132:37 - execute a batch of code to change the
132:39 - cards up top when the user Taps on the
132:42 - deal button and you're going to learn
132:44 - that in the next lesson I'll see you
132:46 - there alright we're back in the war card
132:48 - game and now we're going to add
132:49 - functionality to the deal button so that
132:51 - the user can tap on it now if you're
132:53 - brand new to this series click over here
132:55 - to start from lesson one all right let's
132:57 - Dive In
132:58 - all right so here we are in xcode
133:01 - looking at our war card game just to
133:03 - give you a reminder let's just run it
133:05 - quickly and see what we can do with it
133:07 - alright so here it is it launches in the
133:10 - simulator we can see the cards this
133:12 - button is not interactive because it is
133:15 - actually just an image right now and
133:18 - these are the score labels so going into
133:21 - the code that represents that user
133:23 - interface if we scroll down we're going
133:26 - to see
133:27 - our image element that represents that
133:30 - button right there what we want to do is
133:32 - change that into an actual button not
133:35 - just an image right so what I'm going to
133:38 - do is create some space here so we can
133:40 - work and you can clearly see what we're
133:42 - doing I'm going to get rid of that image
133:44 - element and that's going to disappear as
133:47 - soon as we
133:48 - make this preview live there we go what
133:52 - we're going to do is First add a button
133:54 - from the library so if you remember that
133:57 - is this plus icon up here
134:00 - if you click that and you go under this
134:02 - first tab which is a library of all the
134:04 - views and buttons should be at the Top
134:07 - If it's not you can always type in
134:09 - button so we're going to drag and drop
134:11 - that right there now this is a basic
134:14 - text button and I know it's a little bit
134:16 - hard to see there in the UI but we're
134:19 - going to start with just a simple text
134:21 - button to demonstrate how it works and
134:24 - then we are going to customize that with
134:27 - the image the deal image let's change
134:30 - this string remember it's a string data
134:34 - type it's a piece of text we are going
134:36 - to customize that into deal
134:39 - and now notice that there are a pair of
134:42 - curly brackets here and in between those
134:45 - brackets you put the code that you want
134:47 - to be executed when the user Taps on
134:49 - that button
134:50 - so why don't we go ahead and just put up
134:54 - a simple print statement and we are
134:57 - going to just print out deal cards now
135:00 - when we tap on the button when it prints
135:03 - this out it will print it out into the
135:05 - console area that is down here in xcode
135:07 - so let me just drag this window up here
135:09 - it's called all sorts of information now
135:12 - if you don't see this part right here
135:14 - here's the button that you would click
135:17 - on in the lower right hand corner you
135:20 - would see this little button here
135:22 - you click it to bring up this debug area
135:26 - and if you don't see two different sides
135:28 - to it there are two buttons again in the
135:32 - lower right
135:34 - that you can turn on and off so make
135:37 - sure that this side with all the text
135:39 - that's the right hand side that is
135:41 - toggled on because that's where this is
135:44 - going to print out to so why don't we
135:47 - again run this in the simulator actually
135:49 - before we do that let me just add a
135:52 - simple modifier so that this text button
135:56 - is more visible because right now this
135:58 - blue text is really hard to see against
136:00 - the green background now do you remember
136:01 - how to add a modifier so you could very
136:05 - simply
136:07 - hit Dot and then foreground color
136:10 - and you can type in
136:13 - dot White
136:15 - to change that to white or if you didn't
136:17 - want to do that you could always go
136:19 - through the library by hitting this plus
136:21 - icon choosing the modifiers
136:25 - and selecting foreground color clicking
136:28 - and dragging right there changing that
136:30 - default blue text
136:32 - to White all right let's go ahead and
136:35 - rerun this in the simulator
136:38 - all right so here's the simulator I'm
136:39 - going to tap on this button and it's
136:41 - going to run this code right here print
136:45 - deal cards
136:46 - as you can see it is starting each time
136:49 - I press it it executes the code within
136:52 - those curly brackets so great our button
136:56 - works now the next thing I want to do is
137:00 - to incorporate what you learned about
137:02 - functions so instead of Simply writing
137:06 - the code here inside of these two curly
137:09 - brackets why don't we call a function
137:13 - from here so this function is going to
137:16 - perform the uh all the code related to
137:20 - dealing cards so why don't we find a
137:24 - space to put this function so this part
137:26 - you have to be kind of careful like
137:28 - about where to put this function because
137:30 - I haven't really explained yet what
137:34 - these structs are and you know where you
137:37 - would put your functions so I'm going to
137:40 - tell you where to do that now but it's
137:43 - very easy to make a mistake so here's
137:44 - what I want you to do so put your cursor
137:47 - let's say right under body right there
137:50 - and you're going to go to editor
137:54 - and you're going to go to code folding
137:57 - and you're going to hit fold you can
138:00 - also take note of these shortcut keys if
138:03 - you'd like so we're just going to choose
138:05 - fold and that's going to fold it all up
138:07 - neatly
138:08 - if you want to unfold it again you just
138:10 - go to you can either double click this
138:12 - actually you can double click that to
138:14 - open up that's probably the easiest way
138:15 - so again put your cursor under body if
138:18 - you don't have a blank space here and
138:20 - you know you can do it there all you
138:23 - need to do is actually make sure that
138:24 - your cursor is after that opening curly
138:27 - bracket of the body and we're going to
138:29 - go to editor we're going to go to code
138:32 - folding and hit fold and the reason I
138:34 - want you to do that is because we are
138:36 - going to create a new line
138:39 - right before this closing bracket but
138:42 - after
138:43 - the closing bracket of the body right
138:46 - there and we are going to declare a new
138:48 - function now I'm going to explain to you
138:50 - in future lessons why why we are putting
138:53 - this where it is and
138:56 - um you know what is a struct uh how do
138:58 - you know where to put your functions and
139:00 - things like that but for now I just want
139:02 - you to follow what I'm doing
139:03 - so type in func to declare a new
139:07 - function we're going to call this
139:08 - function deal
139:09 - if you remember the Syntax for it
139:12 - pair parentheses
139:14 - which
139:16 - in between there you would put in any
139:18 - input parameters right that you this
139:21 - function expects
139:23 - for the purpose of this code we don't
139:27 - need any input parameters so it's just
139:29 - going to be an empty pair of parentheses
139:31 - like that now let's open up a pair of
139:33 - curly brackets like that so that we can
139:35 - actually put the code in there now in
139:37 - here I'm going to put print deal up to
139:42 - declare a string
139:44 - we got to use the quotation marks right
139:47 - okay so this function all it does is
139:51 - print deal cards just like what the
139:55 - button did before and it'll execute this
139:58 - anytime you call deal so now let's open
140:01 - up the body again scroll down to our
140:04 - button and instead of calling print
140:06 - right here we are going to call our new
140:10 - function and look at that autocomplete
140:13 - recognizes it and all we need to do is
140:15 - that now let's run it into similar and
140:18 - just test that it still works because we
140:20 - don't want to make a mistake at this
140:21 - point so tap on that button as you can
140:24 - see it still works right what's
140:26 - happening is that when you're tapping on
140:27 - the button it's executing this function
140:29 - if you scroll lower this is what that
140:32 - function does all right so now in the
140:35 - future when we want to add functionality
140:36 - to the button right here
140:40 - all we need to do is add the code in
140:43 - here so that's a basic text button but
140:45 - what if we wanted to use an image for
140:47 - the button instead let's take a look at
140:49 - how we do that
140:50 - let's scroll back up to our button
140:52 - element
140:54 - as you can see here the button that you
140:56 - add through the library in this way it
141:00 - only allows you to specify a piece of
141:03 - text so this is a text button if you
141:07 - want to create a button which can be
141:10 - visually represented by anything you'd
141:13 - like
141:14 - um what you would have to do is type out
141:17 - button
141:19 - type out the first opening parentheses
141:22 - and you can see a couple of different
141:24 - options for buttons that you can create
141:26 - and what we were looking for is this one
141:29 - right here action and label so action is
141:33 - what happens when you tap on it and
141:36 - label allows you to put any sort of UI
141:40 - code in there any sort of UI visual
141:43 - elements so let's go ahead and double
141:45 - click this and you're going to see this
141:48 - these input parameters look a little bit
141:50 - different from this one right this one
141:52 - only had the one text parameter that you
141:55 - had to supply and that was for the text
141:57 - for the button this one has two
142:00 - different ones has action and it has
142:02 - labels so you can double click on any of
142:05 - these so go ahead double click on action
142:07 - this this part right here and what's
142:09 - going to happen is it's going to change
142:12 - in this this sort of format right here
142:14 - this first set of opening bracket this
142:18 - is the action for your button so let's
142:21 - stay organized here so I'm going to
142:23 - actually get rid of this text button
142:25 - first
142:27 - okay
142:28 - and in here uh under label this is
142:32 - actually where we're going to put the
142:34 - visual representation right label
142:38 - this set of curly brackets let's put in
142:41 - an image element
142:44 - and
142:45 - our image name was button right if we go
142:48 - back to assets
142:50 - that's what this is right here
142:52 - let's go back to content View and let's
142:54 - refresh this preview right here oh okay
142:57 - so we can't yet view the preview because
143:00 - we haven't filled in the code part yet
143:02 - so you can actually just delete that
143:05 - code part and that will be valid
143:08 - okay so as you can see here we've got
143:12 - now a visual image of our button and you
143:16 - see this is the visual representation of
143:18 - the button now in here this is supposed
143:20 - to be the action uh good thing that we
143:23 - created a function right we can simply
143:25 - call that deal function like that let's
143:29 - now run the app in the simulator again
143:32 - and take a look at what happens when we
143:35 - tap on our new button
143:38 - so you can see it is an image element
143:40 - but it is actually a button and when we
143:43 - tap on it it runs the deal function
143:46 - which prints out this statement in the
143:49 - console area all right now that we have
143:51 - the button looking the way we want let's
143:52 - add some more functionality to it so we
143:55 - want our deal button to do more than
143:57 - just print out deal cards we want it to
144:00 - actually deal cards right so how is
144:03 - tapping on this deal button and running
144:06 - this deal function right what sort of
144:09 - code can we put in here to actually
144:12 - change the images
144:15 - for this image element and this image
144:17 - element
144:18 - right and then how are we going to
144:20 - update the score labels here as well
144:22 - well let's first take a look at what
144:25 - represents these things and see what we
144:28 - can work with we scroll up
144:31 - we can see that we have an image element
144:35 - that represents card two
144:38 - and this is referencing the image asset
144:42 - in our asset library card two in fact we
144:45 - have card two all the way up to 14.
144:48 - so you'll notice that when I change this
144:52 - in here
144:54 - and I update the preview
144:57 - it's actually going to change the card
144:59 - right
145:02 - continue to 13 right change this to 14.
145:07 - and if I accidentally change it to a
145:09 - name that doesn't exist then it actually
145:12 - doesn't show anything
145:15 - right so what we need to do is when the
145:18 - user Taps on the deal button we need to
145:21 - run some code statements that would
145:24 - change what is being passed into this
145:27 - image element in this image element as
145:30 - well well if you think back at the Swift
145:32 - code that you have learned so far this
145:34 - is variables constants functions there
145:38 - is something that can help us here right
145:40 - what I'm referring to are variables so
145:43 - why don't we go at the top here and
145:47 - declare some variables to represent
145:50 - the cards for the player and the cards
145:53 - for the computer
145:55 - and that way when we hit the deal button
145:57 - we can change the value in those
145:59 - variables let me show you what I mean so
146:02 - put your cursor in front of VAR and just
146:07 - create a couple of lines right there
146:08 - like that and we are going to declare a
146:11 - brand new variable to store these two
146:15 - values right here instead of this is
146:18 - called hard coding a string meaning that
146:21 - when we just put a text a piece of text
146:25 - here there is nothing that can refer to
146:27 - that piece of text to change it so this
146:29 - is what's called a hard-coded value
146:32 - we are now going to change that so that
146:35 - can be dynamic
146:37 - so we declare a new variable using VAR
146:39 - right and I'm going to name this
146:41 - variable player card and I'm going to
146:44 - assign to It Card let's say seven
146:48 - and then I'm going to declare another
146:50 - variable let's call this one CPU card
146:52 - and I am going to assign to it card 13.
146:56 - that string right there
146:58 - and now you can probably see where this
147:01 - is going
147:02 - in the image element instead of passing
147:05 - this hard-coded string into here I can
147:08 - pass in the variable
147:11 - and because the variable is referencing
147:14 - this string card seven you can see that
147:17 - that is what this image element displays
147:20 - right and I'm going to do the same thing
147:22 - with this CPU card by putting in that
147:26 - variable referencing that variable and
147:29 - then passing it to the image element so
147:31 - now you can see where we're going when I
147:35 - tap on the deal button and it runs the
147:37 - deal function inside the deal function I
147:40 - can
147:42 - change the value
147:44 - that player card is pointing to I can
147:46 - change CPU card to another string value
147:49 - as well and that is going to cause the
147:52 - card images to change now I don't want
147:54 - you to do that just yet because there
147:56 - are a couple of details that we need to
147:58 - go through first but I'm just running
148:00 - through at high level what our thought
148:03 - process is
148:04 - okay so let's do the same thing for the
148:08 - scores down here because if you remember
148:10 - when we built this user interface the
148:13 - scores we also use it used some
148:15 - hard-coded values so down here under
148:18 - player we hard coded zero and under CPU
148:21 - we hard-coded another zero let's go up
148:25 - here and declare two more variables to
148:28 - store those scores
148:30 - however this time
148:34 - so I'm going to use an integer because
148:36 - that's going to make it really easy for
148:39 - us to add right we can add one add to we
148:42 - can perform these math operations on an
148:44 - integer
148:47 - let's do the same thing to represent the
148:49 - other score right there
148:51 - and let's go down and change these text
148:56 - elements to refer to these variables
149:00 - that we just created
149:03 - okay so here under player instead of
149:06 - passing in this hard-coded zero string
149:09 - we are going to put player score
149:13 - now you're going to see an error and
149:16 - I'll tell you why
149:18 - so let's change this window a little bit
149:20 - it says no exact matches in Call to
149:24 - initializer so that that doesn't really
149:28 - explain very much to be honest but I'll
149:31 - explain to you what the issue is so this
149:34 - text element expects a text piece of
149:38 - data as input as what to display
149:43 - you know for this label it displays text
149:45 - but what we are passing into it is an
149:49 - integer right it's a number so it
149:51 - doesn't know how to display that because
149:54 - it's only programmed it's only Built to
149:56 - display pieces of string data so what we
149:59 - can do is we can actually convert this
150:03 - number this integer data into string
150:06 - data and then
150:08 - um or rather the string representation
150:11 - of this number
150:13 - right so what this is how we would do
150:16 - that
150:18 - we would here let me get rid of this for
150:20 - for now we are going to create a new
150:23 - piece of string data type in capital S
150:26 - string and then open a pair of
150:28 - parentheses and then in the center in
150:30 - between it you are going to put a player
150:34 - score
150:35 - so let's break this down so first of all
150:38 - notice that the error goes away we're
150:40 - good
150:41 - what we're doing is we're taking this
150:44 - integer and we are
150:47 - turning it into the string
150:49 - representation of that integer so if
150:52 - it's you know the number 10 it's going
150:55 - to be turned into the string 10 and then
150:59 - that is now passed into the text element
151:01 - so everyone's happy
151:03 - let's do the same thing with this one
151:05 - so we're gonna type in string
151:08 - pair of parentheses in in between that
151:10 - we're going to put CPU score and this is
151:13 - called casting I know it's kind of a
151:15 - weird name but essentially we are
151:17 - converting the int data to string data
151:21 - and we're changing the data types it's
151:22 - called casting we're casting into a
151:25 - string that's what's happening
151:27 - all right so now we are all set up to
151:31 - modify these variables
151:34 - right player card CPU card player score
151:36 - CB score we're all set to modify these
151:39 - variables whenever the user Taps on the
151:44 - deal button right here
151:47 - inside this deal function here's
151:49 - something cool if you right click on any
151:52 - function you can jump to the definition
151:55 - that's basically saying that I want to
151:58 - see what is inside this function so jump
152:01 - it's just going to zoom you straight
152:03 - down it could be in another file even
152:05 - it'll jump you directly there to see
152:08 - what is this deal function
152:10 - right and all we have to do is modify
152:13 - the code here to change those variables
152:17 - that we just created
152:19 - okay this is the home stretch one more
152:21 - lesson to add to app logic and then
152:23 - we're done now if you've been learning a
152:24 - lot from this series don't forget to hit
152:26 - thumbs up to support this video and
152:28 - don't forget to subscribe so you don't
152:30 - miss that last lesson I'll see you in
152:32 - that video
152:33 - this is the final lesson we're going to
152:35 - implement the app logic to randomize the
152:37 - cards whenever we tap on the deal button
152:39 - and we're going to update the scores as
152:40 - well by the end of this lesson you're
152:42 - going to have a working war card game
152:44 - all right let's dive in let's do a quick
152:46 - recap of what we have so far when we tap
152:49 - on the deal button it prints out this
152:51 - deal card statement down here but what
152:53 - we actually want to happen is to
152:55 - randomize and display two new cards
152:57 - right here right let's dive into the
152:59 - code for the button and let's go from
153:01 - there
153:02 - so we're going to scroll down and this
153:03 - is our view code right here you can see
153:05 - this is our button element and when you
153:07 - tap on it it calls this function deal we
153:10 - scroll down a little further you'll see
153:12 - this is where we've defined it and it
153:14 - prints out the cards now what we're
153:16 - going to do is delete this statement and
153:19 - I'm going to add something that's called
153:21 - a comment or some people will call it
153:22 - documentation but essentially it is a
153:25 - little reminder that you can leave
153:27 - yourself that is not treated as code so
153:30 - xcode as you can see when I type this
153:35 - will treat it as this grayed out text
153:38 - and it's not going to be treated as code
153:40 - you can just leave yourself as many
153:41 - notes as you want and it's a good way to
153:44 - also uh write out the things that you're
153:47 - going to code so we can say randomize
153:49 - the players card randomize CPUs card and
153:54 - we are going to let's say
153:57 - update the score
154:00 - right
154:01 - that's essentially what we want to
154:03 - happen we when we tap on this we want to
154:05 - change the cards depending on who wins
154:07 - we are going to update the scores down
154:09 - here let's take a look at how we are
154:11 - going to change the cards up here we
154:14 - scroll up a little bit and we take a
154:16 - look at our view code we can see that we
154:19 - have an image element representing the
154:21 - player's card right here and another
154:23 - image element representing the CPU card
154:26 - you can see uh the card that is shown is
154:30 - driven by these two variables up here
154:32 - player card and CPU card scroll up here
154:35 - that is exactly where these things are
154:38 - this string card seven
154:40 - represents that this card 13 represents
154:43 - that and these are two variables now one
154:46 - thing I haven't taught you yet is
154:48 - something that's called the struct this
154:50 - is sort of an aside so you don't really
154:53 - need to know this yet but in the next
154:54 - module we'll talk about what a struct is
154:56 - and these are actually
155:00 - um what you know as variables when they
155:02 - are declared inside a struct like this
155:04 - this is actually also called a property
155:06 - but we will we will get there later so
155:09 - for now you can think of them still as
155:11 - variables
155:12 - now I want to point out one thing if you
155:14 - notice the the way that we've named
155:17 - these card assets here
155:19 - we go into our asset Library they all
155:21 - have the word lowercase card followed by
155:24 - a number from 2 to 14. and the reason
155:28 - why I named it this way is because it's
155:31 - going to make us really easy to
155:33 - randomize and choose new cards when we
155:35 - tap on the deal button because all we
155:37 - have to do is let's say we wanted to
155:40 - change the player card right is
155:42 - represented by this variable right here
155:43 - all we have to do is change this to card
155:46 - and then a random number from 2 to 14.
155:50 - and there is a function a built-in
155:52 - function that we can use that would
155:54 - randomly pick a number from whatever
155:56 - range we want so I'll show you how to do
155:58 - that but essentially when we tap on the
156:00 - deal button all we're going to do is
156:02 - assign
156:04 - card the string
156:06 - followed by a random number from 2 to
156:09 - 14. and we're going to do that for
156:10 - player card and CPU card and when we
156:12 - change the strings in these two
156:14 - variables it is automatically going to
156:16 - be picked up by this image element here
156:19 - these two image elements and then you'll
156:21 - see new cards all right so let's go
156:24 - ahead and do that so we're going to go
156:26 - back down to the deal button here
156:29 - and let me show you what we want to do
156:31 - so first of all player card right so
156:33 - player card equals remember this is
156:36 - referencing the variable up at the top
156:39 - equal is we're going to assign something
156:42 - new into it
156:43 - we're going to type in this word uh the
156:46 - string card and then we are going to
156:49 - attach to it a random number from 2 to
156:53 - 14. now we can use the plus symbol to
156:57 - join together two strings so I can do
157:00 - something like this right and that would
157:03 - essentially be one string card seven
157:05 - this is called string concatenation and
157:09 - ignore the air for now now I don't
157:11 - really want to put seven right I want
157:14 - this to be a random number so instead of
157:18 - attaching the string seven I am going to
157:21 - type in int Dot
157:24 - random
157:25 - right when you do that capital i
157:28 - Dot and then R you get gonna get this
157:31 - and we're gonna use this first one right
157:33 - here this first function and this is
157:36 - going to allow us to specify a range and
157:39 - how we specify our range is uh we put in
157:42 - the lower range followed by three dots
157:44 - and then the upper range and this will
157:46 - be inclusive of the lower and upper
157:49 - ranges so essentially this this function
157:52 - this random function
157:55 - of int gives us 2 to 14. now you won't
157:58 - understand exactly what this code means
158:02 - for now but in the next module after I
158:05 - teach you about structs and classes and
158:07 - things like that and Dot notation this
158:10 - will completely make sense to you for
158:12 - now just type in in capital I int dot
158:15 - random uh and then type in this range
158:17 - now you're going to get an error here
158:20 - and the reason why this error is
158:23 - occurring is for one there's two errors
158:25 - here actually the first error is because
158:26 - when you're trying to join
158:29 - do that string concatenation I was
158:31 - telling you about it has to be two
158:33 - strings right here we have the card
158:35 - string but here we have an integer data
158:39 - type they're different data types
158:40 - remember way back then you learned about
158:42 - data types how we have string into Bool
158:44 - double and things like that well this
158:47 - random number is actually an INT so what
158:50 - we can do is get the string
158:52 - representation of the int essentially we
158:56 - are converting
158:58 - or the proper term in app development
159:01 - and programming is called casting we're
159:03 - going to cast the int data to a piece of
159:07 - string data so then it becomes the right
159:10 - type and
159:12 - we do that by typing in string and then
159:15 - wrapping the INT in a pair of
159:18 - parentheses right there so now this
159:22 - would actually be proper and
159:25 - this now is actually another error so
159:29 - now you can see that the error that
159:31 - little red underline is on the variable
159:34 - player card
159:35 - so remember if I scroll all the way back
159:38 - up to the top remember how I said that
159:41 - when these variables are declared under
159:43 - the struct like this this is called a
159:46 - property well we're going to learn more
159:48 - about structs and properties in the next
159:50 - module but what we need to do here is
159:53 - essentially add a special keyword to
159:57 - this property or variable to Define it
160:00 - as something that powers the user
160:04 - interface like it's a piece of data that
160:07 - the user interface depends on and that
160:09 - totally makes sense right if you look
160:12 - down here
160:13 - this image element right here depends on
160:18 - player card
160:20 - same thing with this one this image
160:22 - element which is you know visually
160:24 - represented here it depends on the state
160:27 - of this variable or property right here
160:30 - so depending on the state of these two
160:33 - variables it changes how the user
160:37 - interface looks so what we have to do is
160:41 - add a special keyword in front of both
160:42 - of these called state right and the way
160:46 - we specify this is using the at keyword
160:49 - capital s
160:51 - State space so you can see xcode
160:54 - recognizes it as a special keyword and
160:57 - this is called a property wrapper so
161:01 - this is your property
161:03 - and this is the property wrapper and it
161:07 - essentially changes the behavior in
161:10 - attributes kind of like a modifier it
161:13 - modifies this property to
161:16 - um
161:18 - just indicate that it is a special
161:21 - property right it is one that powers the
161:24 - visual state so we're going to add the
161:26 - same keyword or property wrapper
161:30 - to the to the CPU card down here
161:33 - and then if we scroll down back to the
161:36 - deal button
161:38 - you can see that all the errors are gone
161:42 - and we're gonna now we're going to
161:44 - randomize the CPU card as well
161:47 - card plus and then we are going to say
161:51 - int random
161:55 - 2 to 14. all right and then we're going
161:58 - to have to
161:59 - I'll show you this error because last
162:01 - time I don't think we
162:03 - took a look at it so here
162:05 - cannot convert value of int to expected
162:08 - type string saying that this should be a
162:11 - string
162:12 - so we're going to turn it into a string
162:14 - all right no errors perfect so let's
162:17 - take a look at this we'll run it and
162:20 - we'll try it out because we should be
162:21 - able to visually see these cards change
162:24 - as we tap on this deal button it's going
162:27 - to run this function it's going to
162:29 - assign a random card number two player
162:33 - card and then CPU card as well
162:37 - you see that's that's really cool right
162:39 - it's actually working now if you
162:41 - accidentally specified a number that
162:44 - doesn't exist like these actually have
162:47 - to represent an image asset so if you
162:49 - put 15 and you hit deal and it
162:52 - randomizes the 15 it either will show a
162:55 - blank
162:57 - let's randomize from one to one and you
162:59 - can see what I mean because we don't
163:00 - actually have card one here so it's
163:03 - gonna be an error it's not going to be
163:05 - valid we have to stop the project and
163:06 - run it again
163:08 - and uh
163:10 - yeah there you go it can't find that
163:12 - image because randomizing one to one
163:15 - you're only going to get card one and
163:17 - there is no image asset named card one
163:18 - so just a little warning for that
163:21 - okay so let's change that command R to
163:24 - run it again
163:25 - now we get this
163:27 - okay now we need to add some conditional
163:29 - logic to the app this means code that
163:32 - can decide if this condition is true
163:34 - then do this otherwise if that condition
163:36 - is true do that and in Swift this is
163:39 - called an if statement let me show you
163:41 - how
163:42 - so here I have an empty playground to
163:43 - show you how simple it is to express
163:45 - conditional logic in Swift and all you
163:48 - have to do is use the keyword if
163:51 - just like that and next you're going to
163:54 - put up space and then you're going to
163:55 - put the condition that you want to test
163:57 - now
163:59 - with an if statement it is if the
164:02 - condition is true then execute this code
164:04 - and if it's not true then don't do
164:07 - anything so why don't we say if a is
164:10 - greater than b
164:12 - that's my condition so if that is true
164:15 - then execute the following code and
164:18 - you put that code inside a pair of curly
164:22 - brackets like that so I'm going to write
164:24 - a comment some code here like it's
164:28 - whatever you want as many lines of code
164:30 - as you want you can even call a function
164:33 - here or do anything like that so we are
164:36 - simply going to print let's say
164:40 - thing
164:41 - now what is a and what is B in this
164:44 - condition we haven't declared them so
164:46 - let's declare two variables
164:49 - so VAR a equals four VAR b equals uh
164:53 - five
164:55 - so actually why don't we make
164:58 - B
165:00 - um shorter or smaller so this condition
165:03 - becomes true right a is4 it's greater
165:07 - than b is 2 right that is true so this
165:10 - will get executed it will go into this
165:13 - code block let's run the playground and
165:17 - see if that actually is true
165:20 - let's click this button to open up the
165:22 - console
165:24 - and you can see that it gets printed out
165:26 - right here now what if I change the B to
165:29 - 20 and let's stop the playground let's
165:31 - run it again
165:33 - and you'll see that this time nothing
165:34 - gets this displayed because it comes
165:37 - down here and it tests this condition it
165:40 - finds out this condition is false then
165:42 - it's not going to run this code now the
165:44 - powerful thing with if statements is
165:46 - that you can specify multiple paths or
165:49 - multiple branches so if you think about
165:51 - this
165:53 - condition and this block of code being
165:56 - One path that it could go down you could
165:59 - also specify another you could say uh
166:03 - else if and again
166:07 - you specify the condition here and then
166:10 - another block of code so let's say if
166:14 - um or you know if B is
166:18 - yeah let's let's use another variable so
166:21 - it let's say if B is greater than C then
166:25 - do this
166:26 - so we'll print
166:29 - shoot
166:31 - we don't have a c yet let's
166:34 - go see there
166:36 - let's put
166:39 - C is equal to 10.
166:42 - so in this case what's going to happen
166:44 - it's going to first execute this
166:47 - right and is it going to be true or
166:49 - false
166:51 - a is four B is 20. this is false then if
166:55 - this is false it's going to skip this
166:58 - and it's going to test this else right
167:01 - else means like okay if that's not true
167:04 - then what about this right else
167:08 - if this is true B 20 C is 10 it is true
167:11 - so it's going to then come in here
167:16 - so it does this instead
167:19 - now what if C was
167:22 - 30
167:24 - . let's run it can you guess what
167:26 - happens you pause the video and take a
167:27 - guess if you want
167:30 - nothing happens why because it comes in
167:32 - here this is false okay well let's test
167:35 - this one this is also false so it
167:37 - doesn't go into either path
167:39 - now what happens if I did this
167:42 - what if C is 10
167:45 - right so it's gonna this is false and
167:48 - this is true right it's going to come in
167:50 - here but then I change a to 40. right so
167:54 - this becomes true do you think it's
167:56 - gonna
167:57 - type out bang and then type out shoot
168:02 - nope it's only going to take the path
168:05 - that is true the first path that is true
168:08 - and it goes it checks the conditions
168:10 - from top to bottom so test this one oh
168:13 - that is true 40 is greater than 20 so
168:15 - it's going to come into this path and
168:17 - it's going to ignore everything else
168:18 - it's just gonna not gonna even check the
168:20 - other paths so that's why you have that
168:23 - even though both of these conditions are
168:25 - true so the thing is you can specify
168:27 - more branches if you'd like you can see
168:30 - else if
168:31 - as many different paths as you want
168:35 - and then there is also a catch all or
168:38 - sort of like a last resort path if you
168:41 - want to do that and that is just simply
168:44 - else so if this is not true and this is
168:48 - not true then it's just going to execute
168:50 - this whatever's in here
168:55 - so if I run this
168:58 - it's gonna
168:59 - come in here because this is true so
169:01 - let's change a back to four so this is
169:04 - going to be false right 4 is not greater
169:07 - than 20 and then let's change C to
169:11 - um
169:12 - 40. so again this will be also false 20
169:15 - is not greater than 40.
169:18 - and so it's going to come down here and
169:20 - it's going to execute this
169:22 - and this is sort of like a last resort
169:24 - you could have something like this
169:27 - the else if and else these two Clauses
169:30 - are completely optional you can only
169:32 - have one else catch all path but you can
169:36 - have as many else if paths or branches
169:39 - that you'd like
169:41 - so in this case it would execute hello
169:44 - because this is false then it just comes
169:47 - down here so hopefully that makes a lot
169:49 - of sense pretty simple to understand and
169:51 - in terms of testing for uh equality
169:54 - here's greater than there's less than
169:56 - and then you can do less than an equal
169:59 - to or greater than and equal to you can
170:02 - do not equals that's that's exclamation
170:05 - mark equals and if you want to test for
170:07 - equality it's not equals because
170:09 - remember the equal symbol is for
170:12 - assigning something to something so here
170:14 - we're assigning four to eight we're
170:16 - signing 20 to B
170:18 - so here we're not trying to assign B to
170:21 - a we're just trying to test it they're
170:23 - equal if you're trying to test if two
170:24 - things are equal you use equals equals
170:29 - like that and so if we make a equal to B
170:33 - so that will be true
170:36 - we'll see Bang
170:37 - all right now let's apply our Newfound
170:39 - knowledge to the war card game let's do
170:42 - it
170:42 - so back in our work hard game in the
170:45 - deal function here we want to update the
170:47 - scores so we can use if statements we
170:50 - want to say if the player score or card
170:53 - value is higher than the CPU card value
170:56 - then we want to increase the player
170:58 - score else if
171:01 - the CPU card or card value is greater
171:04 - than the player card value then we want
171:05 - to update the CPU score and if you
171:09 - scroll all the way back up here you'll
171:11 - see that we have two properties
171:13 - variables keeping track of the player
171:16 - score and CPU score so we're just going
171:19 - to increment this by one depending on
171:22 - Whose card value is higher so going back
171:25 - down here we're going to use the if
171:27 - statement if and then we're going to
171:30 - compare player card value
171:34 - with CPU card value and how do we get
171:37 - the card value because if you take a
171:40 - look at this we're randomizing the
171:42 - number here I've strategically chosen
171:45 - the numbers so that they represent the
171:48 - card image asset but they also represent
171:51 - the card value so down here card two two
171:55 - is smaller than any of these numbers
171:58 - right so Ace that's why I made it 14
172:00 - because Ace should be the biggest so if
172:03 - someone randomizes an ace that would be
172:05 - 14 and that would beat 13 which is king
172:08 - So what we need to do is be to be able
172:10 - to compare this random number with this
172:14 - random number so we need a reference to
172:17 - it
172:17 - right but how do we get a reference to
172:21 - that number because I've specified it
172:23 - here and it's going to get joined
172:25 - together with this card so I can't
172:27 - actually refer to it so the strategy
172:29 - we're going to use is to instead of
172:32 - randomizing it here let's randomize a
172:35 - number from 2 to 14 and assign it to a
172:37 - variable and that way we have a
172:39 - reference to it right it goes back to
172:41 - that first Swift coding lesson you did a
172:45 - couple lessons back about using
172:46 - variables to keep track of values so
172:48 - here we are going to declare a new value
172:51 - let's call it player card value and we
172:56 - are going to assign to it
172:58 - this
173:01 - all right so we're going to randomize
173:02 - that number from 2 to 14 and we're going
173:04 - to assign it into this variable and then
173:07 - in here we can specify that variable
173:11 - right there right and turn it into a
173:13 - string because this is an integer right
173:15 - that's going to get assigned to this
173:17 - uh and then we're going to do the same
173:18 - thing with this CPU VAR CPU card value
173:22 - is equal to
173:30 - CPU card value
173:33 - and then we're going to now be able to
173:35 - write our if statement so if player card
173:38 - value
173:39 - is greater than
173:42 - CPU card value then we're going to add
173:46 - one to player score and to do that we
173:50 - can say player score
173:53 - and that's the the variable that we have
173:55 - way up at the top of this file we can do
173:57 - this we can say
173:59 - um
174:01 - Plus or sorry equals
174:05 - player score plus one
174:08 - but there's a short form where you can
174:10 - write this which is this
174:13 - plus equals one and that is just going
174:16 - to increment whatever score it is with
174:19 - one
174:21 - okay
174:22 - so we're going to do it the shorthand
174:24 - way
174:25 - and just like before we have an error
174:28 - because remember player score is a piece
174:31 - of data that the user interface is
174:34 - dependent on right it gets displayed in
174:36 - this text label right here you can see
174:39 - right here this text and this this text
174:43 - right here so what we have to do is add
174:45 - that State Property wrapper to it just
174:47 - like we did with the player card in the
174:49 - CPU card
174:54 - all right now we're going to come back
174:56 - down
174:57 - and no error
175:00 - so down here would I add an else or an
175:05 - else if if I want to now compare right
175:08 - if the CPU card value is greater than
175:10 - the player card value
175:12 - now I could use if
175:15 - and I can say you know in that case CPU
175:19 - score
175:20 - with plus equals one but there's a
175:23 - problem with this because this is
175:25 - comparing player card is greater than
175:28 - CPU card what if player card value
175:31 - equals CPU card value what if they
175:33 - rolled exactly the same value in this
175:36 - logic
175:37 - the CPU would win even if the values
175:40 - were tied up
175:42 - right so I I would not use else here I
175:45 - would use else if CPU card value is
175:50 - greater than player card value
175:52 - and then you can say else this is a tie
175:57 - right and then you can handle this how
175:59 - you want
176:01 - so in this case this would be like add
176:03 - one two CPU score you see how handy
176:06 - adding these comments are it really
176:08 - makes it a lot easier to understand your
176:12 - code especially for someone who is new
176:14 - and learning how to code
176:16 - um yeah so for this Thai scenario you
176:20 - can you can add one to each score you
176:22 - can minus one from each score or you can
176:25 - do nothing so I'm gonna choose to do
176:27 - nothing
176:27 - but you can do that differently so let's
176:30 - see if this works let's run our project
176:36 - oh what happened there
176:39 - I rolled the card
176:42 - ah
176:44 - take a look I made a mistake this is a
176:46 - perfect learning opportunity
176:49 - so
176:51 - um
176:52 - right here
176:54 - player card
176:56 - is equal to card
176:59 - Plus
177:00 - player card
177:02 - but that doesn't make sense right it
177:04 - should be equal to player card value
177:06 - right because this is the random number
177:08 - so I don't know if you caught that
177:10 - earlier on when I was writing that but
177:13 - if you did kudos to you props
177:17 - um but if you didn't then you're in the
177:19 - same boat as me I totally didn't see
177:21 - that either
177:24 - so you can see it works now well I'm
177:26 - going a little fast but
177:28 - uh Ace so player gets that oh there's a
177:31 - tie see there's a time so nothing
177:32 - happens
177:35 - all right looks like it's working and
177:37 - there's actually more ties than I
177:39 - thought there would be there was another
177:40 - one
177:41 - and there you have it you've built your
177:43 - very first app now before I tell you
177:45 - what you'll be building next let's do a
177:47 - quick recap of how far you've come
177:49 - you've learned how apps go from code to
177:51 - App Store you've learned your way around
177:53 - xcode you've learned how to read and
177:56 - write Swift at a basic level and you've
177:58 - learned how to build the simple user
177:59 - interfaces but more importantly you've
178:02 - stopped doubting yourself about whether
178:04 - or not this is for you now I want to
178:06 - introduce you to what comes after this
178:09 - war card game the menu app this series
178:11 - continues from where the war card game
178:13 - left off and prepares you for the next
178:15 - step in your iOS journey and Beyond now
178:18 - don't be fooled by this simple
178:19 - scrollable list this is something that
178:21 - you could learn from tons of tutorials
178:23 - out there but we're going to take it a
178:24 - step further not only will you learn the
178:26 - skills needed to build this app but
178:28 - we're going to modify the code
178:30 - afterwards to mimic that of a more
178:32 - complex app now let me explain many
178:34 - tutorials teach you how to build a
178:36 - simple single screen app and with good
178:39 - reason it's a great starting point and
178:41 - you need to learn to walk before you can
178:43 - Sprint the problem is that there's a
178:45 - conceptual leap from a single screen app
178:48 - with self-contained data to a
178:50 - multi-screen app that fetches data from
178:52 - a variety of external sources
178:54 - and not only is the code more
178:56 - complicated but you'll have to
178:57 - understand aspects of networking
178:59 - concurrency proper app architecture and
179:02 - coding for reusability just to name a
179:04 - few so in the second half of this menu
179:07 - app video series that's what we focus on
179:09 - explaining these Concepts in preparation
179:11 - for the next larger more complex app so
179:14 - that's all fine and good but when is
179:16 - this menu app video series going to be
179:18 - released and where can you watch it well
179:20 - I'm happy to announce that it is free to
179:23 - watch on the code with Chris learning
179:25 - platform the reason it's not currently
179:27 - on YouTube is because the menu app
179:29 - series is a step up from the war card
179:31 - game in terms of skill level so I wanted
179:33 - to enhance the learning experience with
179:35 - practical exercises quizzes and human
179:38 - support now these things are all
179:40 - available for free through the code with
179:42 - Chris learning platform now I want to be
179:44 - fully transparent aside from the quizzes
179:46 - the challenges and the human support
179:48 - that you're going to receive in our
179:50 - Forum you're also going to get a special
179:52 - offer to join CWC Plus where you can get
179:55 - access to all of our available courses
179:58 - you see code with Chris has grown into a
180:00 - business with a team of people behind
180:01 - the scenes making it all happen and I
180:04 - thank you for your support over the
180:05 - years and I hope you continue to find
180:07 - our iOS teaching valuable obviously
180:09 - you're free to ignore the offer if
180:10 - you're not interested either way you're
180:12 - still going to get access to the menu
180:14 - app video series the exercises the
180:16 - quizzes and our team will support you in
180:18 - your learning whether you are a paying
180:20 - customer or not so to get access to the
180:22 - free menu app series simply visit
180:24 - codewithchris.com in the upper right
180:27 - corner click on sign in and then click
180:29 - on the register link right below the
180:31 - form and create a free account right
180:33 - away you'll be redirected to the student
180:35 - dashboard where you'll find the menu app
180:38 - course card simply click Start course to
180:41 - begin learning thanks and I hope you
180:43 - enjoy this menu app video series which
180:46 - I've created I'll see you in the next
180:48 - lesson