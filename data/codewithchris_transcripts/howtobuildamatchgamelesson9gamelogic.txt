00:00 - hello and welcome we're almost there in
00:02 - this lesson you'll add logic to the
00:04 - project so that once we flipped two
00:06 - cards if it's a match we'll remove them
00:08 - and if it's not a match we'll flip them
00:10 - back down you're also going to learn
00:12 - about something called optional chaining
00:14 - which is simply a way to safely call a
00:16 - method or access a property of an
00:18 - optional type that may be nil all right
00:20 - so let's do this alright so we're going
00:23 - to implement the logic for the game and
00:25 - just to remind you how it works the
00:28 - first time you flip a card nothing
00:30 - happens it just flips and you're going
00:33 - to have to flip a second card to
00:36 - determine if the two cards match now if
00:39 - it's like that and they don't match then
00:42 - there's going to be a little bit of a
00:44 - delay so the user can see that they in
00:46 - fact did not match and then you have to
00:48 - flip over another two cards to see if
00:50 - they match if you do find a match the
00:53 - two cards of that match disappear
00:54 - leaving empty spaces where the cards
00:57 - were so let's go into our code and
01:02 - implement this sort of logic if we
01:04 - scroll back down to the did select item
01:07 - if you think about it we need to
01:10 - determine if the user has flipped over a
01:13 - card already when they tap on a cell we
01:17 - need to know is this the first card they
01:19 - flipped over or is it the second card
01:21 - that they flipped over so we need a
01:23 - property up here to keep track of the
01:27 - first card that was flipped over so why
01:29 - don't we create one here and we just
01:32 - call it first
01:34 - first flipped card and we'll make this a
01:38 - type of index path because that is what
01:42 - the collection view gives us when the
01:44 - user selects a cell and we're going to
01:46 - make it optional so if it's nil that
01:48 - means it's the first card that was
01:50 - flipped and then we'll just set this
01:52 - property when you're flipping over
01:54 - another card we're gonna check this
01:57 - property if it's nil that means it's the
01:59 - first card if it's not nil and it does
02:03 - contain an index map that means it's the
02:05 - second card that was flipped over so
02:06 - let's scroll down to here
02:12 - and in the did select item at method
02:15 - we're going to have to change some of
02:17 - our logic if the card has not been
02:21 - flipped over yet before we flip the card
02:24 - or actually we we would flip the card in
02:27 - either case but we need to determine if
02:32 - it's the first card or second card that
02:40 - is flipped over so we can say if first
02:47 - flipped card is nil meaning that this is
02:52 - the first card being flipped we are
02:56 - going to set first card or first flipped
02:59 - card equal to the index path that was
03:03 - passed in else this is the second card
03:08 - being flipped we need to put a to do
03:12 - here to perform the matching logic so
03:18 - let me just add some white space here so
03:20 - that we can more easily read these
03:22 - comments so you know how before we had
03:25 - Oh knock capital I index path I want to
03:30 - return the index path parameter so it's
03:33 - lowercase annex path you know how before
03:36 - we had this if statement to determine if
03:39 - the card was flipped over first and if
03:41 - it wasn't flipped over we would flip it
03:43 - however if it was already flipped over
03:46 - we'd flip it back well this part was
03:47 - just for fun
03:48 - because in a true match game you're not
03:51 - allowed to flip cards back over by
03:53 - yourself you have to reveal two cards
03:55 - and if they don't match then both of
03:59 - them get flipped back you don't get to
04:01 - tap on a card to flip it back so we're
04:03 - just going to erase this chunk of code
04:04 - right here so the user can only flip
04:08 - cards over to reveal them and at this
04:11 - point the logic that we have is if the
04:15 - card hasn't been flipped yet we will
04:18 - flip it and then we'll set the status of
04:20 - the card and then we will determine if
04:22 - it's the first or the second card
04:24 - has been flipped over if it's the first
04:26 - one then we are simply going to keep
04:28 - track of the index path and if it is the
04:32 - second card we are going to do some
04:34 - matching here so instead of performing
04:36 - the matching logic right here I am
04:39 - actually going to create a separate
04:41 - method to do the matching logic because
04:43 - it's going to end up being quite long
04:45 - and we want to add the method after this
04:50 - did select item method but you have to
04:53 - be careful where the brackets lie
04:57 - because you don't want to accidentally
04:59 - declare a method inside of another
05:00 - method so this last bracket we know that
05:03 - this is for ending of the viewcontroller
05:07 - class and this next one is going to be
05:13 - and the did select item at method so we
05:19 - actually want to declare it right here
05:23 - we can create a different section so if
05:31 - we pull this down we're going to see see
05:33 - even this keyword right here to do it
05:38 - actually puts it in this short list so
05:41 - you can see if you leave yourself a
05:43 - little to-do messages you'll see them
05:45 - here so we have the UI collection view
05:47 - protocol methods which are these three
05:49 - and then we just create a new section
05:50 - for the game logic methods so right here
05:53 - is going to be check for matches and
05:56 - what we're going to pass in is actually
05:58 - the second flipped card index or just
06:08 - call it yeah
06:10 - index and this is going to be a top of
06:13 - index path now just to stay consistent
06:18 - let me just open up these brackets first
06:21 - now just to stay consistent with my
06:24 - naming you see how this property is
06:26 - called first to flip the card and then I
06:29 - named this parameter second flipped card
06:31 - index I want to change this property
06:35 - name to also contain the word index so
06:37 - I'm
06:37 - scroll all the way up here and change
06:41 - that property to contain index and a
06:43 - press command B I know things will break
06:45 - because I just changed the property name
06:49 - so I need to go back here and update
06:53 - these to also add the word index all
06:59 - right so we should be good now check for
07:02 - matches what we're going to do is get
07:05 - the cells for the two cards that were
07:10 - revealed get the cards for the two cards
07:17 - that were revealed kay sounds a little
07:21 - off but you'll see what I mean in a
07:23 - second
07:25 - let card one sell equal to and we did
07:30 - this before using the cell for item at
07:33 - and we pass in the index path right so
07:36 - the first card we are going to use the
07:39 - property first flipped card index right
07:42 - and we're going to try to cast it as a
07:45 - card collection view cell and I'm going
07:47 - to use this question mark one because as
07:49 - I was building this there were some
07:52 - cases where it could not find the cell
07:56 - for this index path and I will reveal
08:00 - why later on in the lesson
08:02 - so this first flipped card index is an
08:06 - optional so that's what this is
08:08 - complaining about because it's an
08:10 - optional we need to unwrap the optional
08:13 - to get at the value inside now this
08:16 - could contain nil or could actually
08:18 - contain the index path for the first
08:20 - flipped card I'm pretty confident that
08:23 - it does I'm going to put an exclamation
08:25 - mark there if it does become a problem
08:28 - where sometimes this might be nil then
08:32 - we will check it before trying to use it
08:35 - but the idea is when I'm coding this app
08:38 - I would only call check for matches if
08:41 - it's the second card that has been
08:43 - flipped over so in that case there
08:46 - should be something set for this
08:48 - property right here first
08:50 - card-index all right so let card to cell
08:55 - equals collectionview sell for item at
09:00 - and this one is going to be second
09:03 - flipped card index again I'm going to
09:05 - optionally cast it as a card collection
09:09 - view cell okay and now we're going to
09:13 - get the actual cards that those two
09:17 - flipped over cells represent so card 1
09:20 - equals card array first flipped card
09:27 - index I'm going to unwrap it like that
09:30 - again and I'm going to let card to equal
09:37 - the second flipped card index actually I
09:40 - need to do dot row sorry this would be
09:43 - dot row as well because the row property
09:45 - of the index path contains the actual
09:48 - index of the cell so all of these
09:51 - warnings are basically just saying that
09:54 - we declared all of these constants but
09:56 - we're not really using the constants
09:58 - anywhere
09:58 - little does exco know we are just about
10:01 - to use it compare the two cards so what
10:07 - we're going to do in order to determine
10:09 - a match is we are going to take the
10:12 - image names of the two cards and we are
10:16 - going to compare them if they're the
10:19 - same it's a match and if it is a match
10:24 - then we want to set the status of the
10:30 - cards set the statuses of the cards and
10:34 - also to remove the cards from the grid
10:41 - else if they don't match it's not a
10:45 - match we are going to set the statuses
10:51 - of the cards and we're going to flip
10:54 - both cards back
10:56 - and then at the end of the day whether
11:00 - they are a match or not we need to reset
11:04 - the first flipped card index back to nil
11:07 - so that we can repeat the process and
11:10 - start all over basically let the user
11:13 - flip two cards over again so we need to
11:17 - reset this little property here okay so
11:21 - it's a match we're going to set the
11:24 - let's see what that says there cannot
11:27 - call value of non function type string
11:33 - let's take a look at the cards image
11:39 - name oh I forgot the if statement here
11:46 - there we go we're doing a comparison and
11:50 - we need this if here that's what the
11:53 - issue is so we're going to set the
11:56 - statuses of the card if it's a match so
11:57 - if card one is a match we're just going
12:00 - to say that is match that's true car two
12:03 - is matched is also true remove the cards
12:08 - from the grid we actually don't have a
12:11 - method for removing the cell so we're
12:17 - going to go to card collection view cell
12:19 - here we have a flip we have a flip back
12:22 - we're going to create a new method here
12:25 - called remove and this one removes both
12:31 - image views from being visible so I'm
12:37 - going to put it to do animate it but for
12:40 - now I am simply going to set the Alpha
12:43 - to zero and setting the Alpha to zero is
12:47 - just going to make them invisible so
12:49 - alpha is kind of like opacity it
12:51 - basically goes from zero to one so I'm
12:54 - setting the opacity for both the back
12:56 - and the front image views to zero so
12:58 - that's going to make them both invisible
13:00 - so back here in the view controller if
13:03 - it is a match we're going to set the
13:04 - status of the card objects and we are
13:07 - also going to set
13:08 - card one cell and I am going to put a
13:13 - question mark here dot remove and just
13:17 - to remind you about what that is this is
13:25 - called optional chaining so if card one
13:28 - cell turns out to be nil it is not going
13:31 - to call this method however if there is
13:34 - an actual object in this optional then
13:37 - it will call a remove card to sell in
13:42 - the capital C and that's just a way to
13:46 - protect ourselves from crashes because
13:48 - as you can see up here in card one cell
13:52 - this constant I am assigning into it I'm
13:54 - trying to get the cell for this index
13:56 - path from the collection view and then
13:59 - I'm trying to cast it as a card
14:01 - collection view cell if something goes
14:03 - wrong in this statement it's going to
14:06 - assign nil to card one cell same thing
14:09 - goes for this statement we're here if it
14:11 - can't find the cell for this index path
14:13 - or it can't cast it as this type then
14:17 - it's going to set nil into car to sell
14:19 - and if I don't do this if if I don't use
14:24 - the question mark and you know I just
14:26 - unwrapped it and try to call remove if
14:28 - it's nil it's going to crash so by using
14:32 - optional chaining like this it's a safe
14:35 - way to try to call this method if it
14:39 - happens that card one cell is nil then
14:41 - it just will stop there it won't call
14:43 - remove and it things won't crash okay so
14:48 - now let's set the the other possibility
14:52 - if the cards are not a match then we are
14:56 - going to set the status of the card
14:59 - we're going to say card one dot is
15:02 - flipped is false because we're going to
15:05 - flip them both back card two is flipped
15:08 - is also false and we are going to call
15:11 - flip back on card one cell and car to
15:17 - sell the thing is again it might be nil
15:19 - and actually Xcode automatically
15:21 - inserted this
15:22 - question mark for me let's try that
15:24 - again don't flip back oh that's pretty
15:27 - cool so yeah it understands that card
15:30 - one selling car to sell maybe nil so it
15:33 - just automatically put this question
15:35 - mark here I'm doing optional chaining
15:38 - just in case
15:39 - flip back may be called on a nil and
15:46 - this flip back there's no delay so in
15:48 - fact this is going to happen SuperDuper
15:50 - fast and we might not even see that it's
15:52 - not a match so let us address that if
15:56 - you I don't know if you knew this but if
15:58 - you right-click on a method you can jump
16:02 - to definition and jump directly to that
16:05 - method so here we have the transition
16:08 - from front going to back it's just
16:11 - basically flipping it back over and if
16:16 - we want to put a delay on that there is
16:18 - a very easy way to do that it's called
16:20 - dispatch queue and this dispatch queue
16:26 - it manages the execution of work items
16:28 - each work items submitted to a queue is
16:31 - processed on a pool of threads managed
16:33 - by the system in short think of it as
16:36 - almost like a conveyor belt of tasks so
16:40 - what we're going to do is we can
16:42 - actually and there is a particular
16:47 - method called async after which we're
16:50 - going to use so this one has a deadline
16:53 - which is a dispatch time we're just
16:55 - basically going to take the current time
16:57 - plus half a second to create half a
17:02 - second of a delay and inside the second
17:05 - parameter we can put the block of code
17:07 - to execute after that delay so for this
17:10 - deadline parameter we have to specify a
17:12 - dispatch time which is another class the
17:15 - handy thing about this class is that it
17:17 - has a a type method called now and that
17:22 - basically returns the current time or
17:24 - current system time and then we can
17:26 - basically take that and add half a
17:28 - second to it
17:29 - now in this execute parameter we can
17:32 - just double click it to open up a block
17:35 - of code
17:37 - and we can just take this whole chunk
17:41 - basically our animation and we can paste
17:43 - it in there and that should be okay okay
17:53 - so inside a block of code that you pass
17:55 - in as a parameter we have to be more
17:57 - explicit about what these are referring
18:01 - to and so you need to put self in front
18:04 - of these properties to indicate that
18:06 - they are properties of the card
18:09 - collection view cell and Xcode is going
18:13 - to remind you of that anyways if you
18:15 - forget so I think at this point we are
18:18 - ready to run our project all right let's
18:23 - try it out oh we are not ready yet
18:26 - because in the view controller when the
18:29 - user selects the cell right here if it's
18:33 - the second card being flipped we forgot
18:35 - to call our check for matches function
18:42 - and we're going to pass in the index
18:44 - path all right let us run the project
18:47 - now so first card and I'm going to
18:53 - select the second card I know this one
18:55 - is not a match because we haven't really
18:56 - randomized the cards yet this is great
18:58 - for testing so did you see that if that
19:02 - was too fast you can we can make the
19:04 - delay for the flip back method a little
19:07 - longer but however if it's a match let's
19:12 - see if they get removed okay there we go
19:15 - they get removed so fast that we can
19:17 - also add a little animation to that you
19:21 - see that however if you flip over a card
19:24 - that doesn't match both of them get
19:26 - flipped back over all right so let's
19:29 - work on in the card collection view cell
19:32 - let's work on the remove method right we
19:35 - want to animate it and actually it's
19:39 - going to be pretty easy to do that
19:42 - so this is we actually don't have to
19:48 - animate the back image view because
19:49 - that's behind the front one anyways so
19:52 - let's just set that alpha to zero right
19:54 - away and we simply want to animate it
19:58 - using a type method of the UI view
20:01 - called animate we want to use this
20:04 - particular one that has a delay
20:06 - parameter so the time interval let's
20:11 - just say that it's going to be 0.3 delay
20:15 - is 0.5
20:17 - same-same delay as we have for the flip
20:19 - back here the options we can press dot
20:25 - here and we can choose an option curve
20:27 - ease out causes the animation to begin
20:32 - quickly and then slow down as it
20:34 - completes so we're gonna choose that one
20:36 - animations we are going to double click
20:40 - that it's going to open up a code block
20:42 - for us inside this code block inside
20:46 - these curly brackets we were just going
20:47 - to cut and paste that piece of code in
20:50 - there which is basically setting the
20:51 - front image view to alpha 0 and for this
20:55 - completion parameter basically code to
20:58 - run when the animation is complete we're
21:00 - gonna put nil because we don't have any
21:02 - code to run when the animation is done
21:05 - so here Xcode is telling us again
21:08 - because this code ins is inside a block
21:11 - or it's actually called a closure and
21:15 - you'll learn more about that and it's
21:18 - being passed in as a parameter we have
21:20 - to be more explicit about what front
21:22 - image view is pertaining to
21:25 - and by adding self here you're telling
21:28 - it that it's a property of this card
21:32 - collection view cell alright so I think
21:34 - that will give us the desired effect so
21:38 - let's run it again and test it out right
21:42 - tap on that tap on that that's cool you
21:45 - can see it both fade out you have a
21:47 - little bit of time to see that they are
21:49 - a match if they are not a match they're
21:52 - gonna flip back over
21:54 - so before we end the lesson there are
21:56 - still actually a couple of things we
21:58 - still need to do so for example if I
22:00 - flip over to cards and they're matched I
22:02 - need to make it so that I can't tap on
22:05 - these cards anymore and it looks like I
22:06 - can't but actually I probably am
22:11 - flipping them over because in this did
22:14 - select item function right when the user
22:16 - taps on a cell we are only checking the
22:20 - is flipped property we also need to
22:24 - check that the card hasn't been matched
22:26 - yet because if it's already matched then
22:28 - we shouldn't be doing anything with that
22:30 - card right even if they're trying to tap
22:32 - on it so we're gonna add an end
22:34 - parameter here and we're also going to
22:37 - say if is matched is also false only
22:41 - then do we want to allow the card to be
22:43 - flipped over and remember how I told you
22:47 - that the cells get reused well there is
22:50 - also some weird behavior here so you can
22:54 - see how these two cells are matched
22:56 - right when I scroll them out of view
22:58 - they're going to be reused for something
23:00 - down here now when I scroll up again and
23:05 - these cells at the bottom row are not
23:08 - now out of view and they may be reused
23:10 - scroll all the way up and it needs to
23:12 - display oops these two cells up here you
23:15 - can see that there's a card here I
23:17 - thought we matched this right the reason
23:19 - for this is because in our card
23:22 - collection view cell in the set card
23:26 - method we are not considering if the
23:29 - card has been matched already or not we
23:31 - are only determining if the card is
23:34 - flipped up or flipped down right so we
23:36 - also need to determine if the card has
23:37 - been matched already so let's add an if
23:40 - statement here so if the card is matched
23:48 - is true then what we can say is simply
23:57 - back image view dot alpha should be 0
24:02 - and front image alpha should also be 0
24:07 - and then we can just use the return
24:08 - keyword right here and it's going to
24:10 - exit the method and it's not going to
24:12 - run any of this code down here however
24:16 - if the if the card isn't matched yet
24:20 - then it's not going to run this code and
24:22 - it's going to run it's going to continue
24:24 - on running the rest of this stuff so
24:28 - let's give that a try so if we match
24:32 - these two and we scroll all the way down
24:34 - scroll all the way up they will stay
24:37 - like the hunt on that card actually
24:41 - disappeared we actually need to do the
24:47 - reverse here because what happened is
24:51 - that it in displaying the cell it reused
24:55 - one of the cells that was matched before
24:59 - so we actually have to copy that paste
25:02 - it there and set that alpha to be one
25:09 - like that so if the card is matched
25:12 - already then we want to make both those
25:15 - image views invisible and then we exit
25:18 - out of the method otherwise we want to
25:21 - make them visible so we should comment
25:24 - that but let's just test this out first
25:33 - okay so let's add some code here if the
25:37 - card has been matched then make the
25:42 - image views invisible if the card hasn't
25:48 - been matched then make the image views
25:52 - visible okay now there's one more issue
25:57 - that we need to address let us go to the
26:01 - card model because it's easier to
26:03 - demonstrate if there are not so many
26:05 - different types of cards I'm actually
26:08 - going to change this arc for random from
26:12 - 13 plus 1 to just 0 plus 1 and just to
26:20 - get all of the cards to be the same all
26:26 - right so all of them should be the same
26:29 - okay cool so the problem is if I let's
26:33 - say top on this card right here and then
26:37 - go down and I tap on this card and I go
26:41 - up you see that this was still visible
26:43 - even though I matched it with this card
26:46 - down here right and I scroll back up and
26:49 - it's gone so what is happening there see
26:52 - if I can repeat it this what this one is
26:54 - a little harder to catch because it
26:56 - doesn't always happen and it has to do
26:59 - with how the collection viewer uses
27:00 - cells again so I just matched it with
27:03 - this one right this happened again so
27:06 - this one should have disappeared but it
27:08 - didn't so what's going on with this so
27:12 - what's happening is when the user taps
27:15 - on the first card we keep track of the
27:17 - index path with the first card flipped
27:20 - index property and this is something
27:23 - that we declared at the top of the view
27:24 - controller class if you remember it
27:26 - basically keeps track of the first card
27:28 - we flipped now when the user Scrolls all
27:30 - the way to the bottom of the collection
27:32 - view and they flip over the second card
27:35 - there may be a possibility that the
27:37 - collection view recycled that cell of
27:40 - the first flipped over card and it
27:43 - basically used it it took it and it used
27:45 - it for another cell
27:46 - that we are looking at now on the screen
27:49 - so when the user flips over that second
27:51 - card and we determine that it's match we
27:54 - call the remove method on both of the
27:58 - flipped over cells except the problem is
28:00 - the cell that represented that first
28:02 - card has been recycled and and is no
28:04 - longer there well you might ask why does
28:07 - an Arab crash then well the reason is
28:10 - because we used optional chaining when
28:12 - we called the remove method if you
28:14 - remember we called card one cell
28:16 - question mark dot remove and card to
28:20 - cell question mark dot remove so it
28:23 - removed the second card because that was
28:25 - a valid cell but we were never able to
28:28 - get the cell that represented card one
28:30 - so we couldn't call the remove method on
28:33 - that cell so when we scroll all the way
28:36 - up and it displays that cell it hasn't
28:38 - been removed and how we're going to
28:40 - solve this problem is we're going to
28:42 - force the collectionview to reload this
28:44 - particular cell and it's actually got a
28:47 - function or a method to do that let's go
28:49 - back to the view controller inside the
28:52 - check for matches method at the end
28:57 - right here we are going to tell the
29:04 - collection view to reload the cell of
29:10 - the first card if if if it if it is nil
29:19 - okay so we're going to say if card one
29:23 - cell is nil then we're going to call
29:26 - collection view dot reload items at and
29:30 - this one reloads just the items at the
29:33 - specified index paths and you have to
29:35 - put the index paths into an array even
29:39 - though we only have one that we want to
29:41 - reload we're going to reload the first
29:43 - flipped card index and I'm going to
29:46 - unwrap it with an exclamation mark
29:48 - because when we call check for matches
29:50 - we only call it after this has been set
29:55 - anyways because we only call this one
29:57 - the second card is flipped
30:01 - and while we're here let's write a
30:02 - comment here reset the property that
30:07 - tracks the first card flipped all right
30:13 - so this should solve the problem that we
30:15 - are experiencing let's refresh the app
30:19 - or run the project again I mean okay so
30:23 - we're gonna tap on that scroll down tap
30:26 - on this it's a match
30:27 - we're gonna scroll back up it's gone you
30:30 - can do the same and I can safely say
30:38 - that I think the problem is solved as
30:41 - you can see before we implemented that
30:44 - line of code we were seeing it happen
30:45 - two for two but I am you know this is
30:48 - like the fifth match and it's not
30:51 - happening so it's good now the last
30:58 - thing to do is just to change the card
31:01 - model back so it randomizes between all
31:04 - of the different cards okay so let's run
31:07 - the app again just to make sure that
31:09 - we're getting different cards all right
31:18 - okay so that's where we're gonna end off
31:21 - in this lesson it's looking pretty good
31:23 - isn't it in this lesson you got more
31:26 - practice with functions if statements
31:28 - and a lot more you also learned about
31:30 - how to delay the execution of code I
31:32 - just want to remind you that if you're
31:34 - serious about learning how to build apps
31:36 - you should be trying to build this on
31:38 - your own computer if possible don't
31:40 - worry if you're making typos if you keep
31:42 - having to refer back to the video or the
31:44 - cheat sheet for syntax or keywords or
31:47 - things like that this is completely
31:49 - natural over time if you continue typing
31:53 - this stuff out you'll automatically
31:54 - remember all of the key words in the
31:56 - syntax
31:57 - I must have typed out thousands of if
31:59 - statements by now it's just the best way
32:01 - to learn in the comment section below
32:03 - let me know if you're typing this out
32:05 - and trying this out on your own computer
32:07 - or not and finally if you like this
32:09 - video please subscribe to my channel and
32:11 - if you don't want to miss the next video
32:13 - hit that Bell icon as well so thanks for
32:16 - watching and I'll see you guys in the
32:17 - next lesson