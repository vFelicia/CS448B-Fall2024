00:00 - hey code crew last week we talked about
00:01 - what api's were if you missed that video
00:04 - check it out right over there this week
00:06 - let's talk about what JSON is and why
00:08 - it's so important especially for mobile
00:11 - app development by the end of this video
00:13 - you'll understand how to read the JSON
00:15 - as well as how to parse JSON in Swift
00:18 - okay so what is JSON JSON is a standard
00:21 - data format and it's often used for the
00:24 - response data that you get back from an
00:26 - API for example if you wanted to pull
00:29 - some information from Facebook
00:30 - you'd make a request to the Facebook API
00:33 - endpoint for that information and then
00:35 - the API would return the information to
00:37 - you in the JSON data format that's why
00:40 - it's really important to understand how
00:42 - to read the JSON data format and how to
00:45 - parse it which is just the technical
00:47 - term for processing the JSON data into a
00:49 - usable format for your app in this video
00:52 - I'll break down the JSON formatting so
00:54 - that you can understand it and then I'll
00:56 - take you through a practical example of
00:58 - parsing JSON in Swift there are only
01:01 - three things you need to know in order
01:03 - to understand the JSON data format the
01:05 - first thing is what a key value pair is
01:08 - the value part of the pair is the actual
01:11 - data and the key part is usually a piece
01:14 - of text that describes what the data
01:16 - represents together the key and the
01:18 - value represents one piece of data to
01:20 - group together relevant key value pairs
01:23 - use a comma to separate each key value
01:26 - pair and then put a pair of curly
01:28 - brackets around the entire group when
01:31 - you organize a group of key value pairs
01:33 - together like this it's called a JSON
01:35 - object and furthermore to create a list
01:39 - of JSON objects use a comma to separate
01:42 - each JSON object and then put a pair of
01:44 - square brackets around the entire list
01:47 - when you organize a list of JSON objects
01:50 - together this way it's called a JSON
01:52 - array and basically that's how data is
01:55 - organized in JSON format key value pairs
01:59 - JSON objects and JSON arrays the only
02:02 - tricky part to keep in mind is that in a
02:05 - key value pair the value isn't limited
02:07 - to being just a piece of text or just a
02:10 - number
02:11 - the value part of a key value pair can
02:13 - also be a whole JSON object or a JSON
02:16 - array in more complex JSON data files or
02:20 - data feeds you'll see JSON data nested
02:23 - several hierarchies deep ok now let's do
02:27 - a practical example of parsing JSON in
02:30 - Swift but before we dive in I just want
02:32 - to mention that support for this video
02:34 - comes from atlanticnet a hosting
02:36 - solution provider for healthcare HIPAA
02:38 - and PCI compliance whether you're
02:41 - starting fresh or need a new provider
02:42 - atlantic dotnet can help you succeed
02:45 - with fully audited solutions and 25
02:48 - years of experience try atlanticnet to
02:51 - develop test or launch your next project
02:53 - these guys won't let you down right now
02:56 - they're offering a free one gig virtual
02:58 - server with SSDs and block storage for
03:00 - free for a year and free snapshots for
03:03 - one year two plus twenty five dollars in
03:05 - free credits to use on any other
03:07 - services they offer ease of use of
03:10 - something that I like as it frees up my
03:12 - mind to focus on coding I also like that
03:14 - they have round-the-clock phone support
03:16 - so if I happen to get stuck I can
03:17 - contact them easily so visit Atlantic
03:21 - dotnet slash code with Chris and enter
03:23 - the code Chris they get your $25 free
03:26 - credit all right now let's look at
03:28 - parsing JSON with Swift so last week
03:31 - when we talked about api's I used this
03:34 - news API as a demo so this time with
03:38 - parsing JSON in Swift we're gonna use
03:41 - the same API because when you make an
03:43 - API call to the news API such as this
03:46 - one here you get back a really nice JSON
03:49 - result now before we dive into Xcode and
03:52 - take a look at how JSON is parsed and
03:54 - Swift I first want to examine this JSON
03:57 - feed that the API returns and I want to
04:00 - break down some of those things that I
04:01 - mentioned earlier on in this video such
04:03 - as
04:04 - key value pairs JSON objects and JSON
04:06 - arrays so if I collapse this feed you
04:10 - can see that basically this is a JSON
04:13 - object that's what this API call returns
04:16 - and you know this because of these curly
04:19 - brackets containing a group of key value
04:22 - pairs
04:23 - can see here there are three key value
04:25 - pairs all separated by commas exactly
04:27 - like how we described earlier and each
04:30 - key value pair has a key such as status
04:33 - and the value such as okay total results
04:36 - is a key this number is a value and
04:39 - remember when I said key value pairs the
04:42 - value could also be another JSON object
04:45 - or a JSON all right it doesn't just have
04:48 - to be like a piece of text or a number
04:50 - well this is a perfect example articles
04:53 - is a key and the value is actually a
04:55 - JSON array take a look at this there are
04:58 - square brackets here and if you remember
05:00 - earlier on in this video I said that to
05:04 - create a list of JSON objects you
05:07 - surround it by square brackets like this
05:10 - and then inside you have all of your
05:12 - JSON objects separated by commas so
05:15 - let's expand this node and see what we
05:18 - get so if I collapse these JSON objects
05:21 - just so we can have a good idea of
05:23 - what's in here you can see that's
05:25 - exactly what it is that's a JSON object
05:29 - surrounded by curly brackets and then a
05:31 - comma and then the second JSON object
05:34 - and so on and so forth now if you
05:37 - examine actually the data inside these
05:40 - JSON objects you'll see that all of them
05:42 - follow the same format like they have
05:45 - the same collection of key value pairs
05:48 - and that's because each of these JSON
05:50 - objects inside this article's key is an
05:54 - article check this out
05:56 - you have author you have title you have
05:58 - description all of these key value pairs
06:01 - make up the data for a single article
06:03 - and the articles key basically the value
06:09 - for that is a list of articles right
06:12 - it's a list of JSON objects which
06:15 - represent the articles so this is very
06:18 - good information for us when we parse
06:21 - this JSON because when you're parsing
06:23 - JSON you want to think about what it
06:25 - actually is the information that you
06:27 - need to display in your app so in this
06:29 - instance if we were building a news app
06:32 - and we wanted to get a list
06:34 - the articles to display we would really
06:37 - be interested in extracting this
06:40 - information here in this array of JSON
06:43 - objects so how does parsing JSON and
06:46 - Swift actually work well there's
06:47 - something called the codable protocol
06:49 - and it makes it very easy for us to
06:51 - parse this JSON out into useable
06:54 - instances of a structure or a class that
06:57 - we create basically how it works is we
07:00 - map the JSON objects in this JSON feed
07:04 - to structures or classes that we create
07:08 - inside Swift and for each of those
07:11 - classes it's going to represent a
07:12 - different JSON object so take this for
07:15 - instance we have the overall JSON object
07:18 - representing the feed so we're gonna
07:20 - create a structure in our in our project
07:23 - to represent the news feed and that
07:26 - structure is going to have the same
07:28 - properties mapping to these keys right
07:32 - here and then inside here we have these
07:35 - article JSON objects right so we're
07:38 - gonna create an article structure inside
07:41 - our app to map to this data so when we
07:45 - extract this JSON feed we basically use
07:48 - the JSON decoder class and it's gonna
07:51 - try to basically create instances of the
07:55 - articles and instances of the news feed
07:59 - that's basically how it works but it's
08:02 - going to make a lot more sense when we
08:03 - jump into Xcode and I'll show you
08:04 - exactly how easy it is because
08:06 - explaining it like this it's probably a
08:08 - little more abstract so why don't we go
08:10 - ahead and jump into Xcode so right here
08:14 - I've got a brand new Xcode project I
08:16 - don't have anything now let's start by
08:19 - creating those structures that we
08:20 - mentioned to represent the JSON objects
08:22 - in this feed so here this is kind of
08:25 - like the route JSON object which
08:29 - represents the newsfeed so I'm gonna
08:31 - create a new file and as you Swift file
08:36 - I'm going to call this the news feed and
08:41 - I'm going to declare a structure I'm
08:44 - going to call it a news feed
08:46 - it's going to conform to the codable
08:48 - protocol and that's gonna allow the json
08:52 - decoder to attempt to convert this JSON
08:55 - into an instance of this newsfeed
08:58 - structure so I'm gonna create the
09:00 - properties to mount to these keys right
09:03 - here now if there there's a key value
09:07 - pair that you're not really interested
09:08 - in you don't have to create a property
09:11 - mapping to it but I'm going to just do
09:13 - it anyways now when you're working when
09:18 - you're mapping like this and you know
09:20 - that the value for a certain key won't
09:24 - be nil like it won't be empty then I
09:27 - would suggest that you default it to
09:29 - some value like that and the reason I
09:32 - say that is because for example this key
09:37 - right here the value can be null if that
09:39 - is the case if it could be null then you
09:41 - would want to create an optional instead
09:43 - just so when you try to parse that out
09:46 - you're not gonna be trying to insert you
09:51 - know if you default it to a value right
09:52 - here then status can never be nil and if
09:55 - status actually happened to be nil when
09:57 - JSON decoder tries to turn that JSON
09:59 - into an instance of this it's going to
10:02 - not really like that and the way you can
10:05 - find out depending on what API you're
10:07 - working on is just check the
10:08 - documentation so let's take a look at
10:10 - this end point here all right that's the
10:12 - end point the rest are just parameters
10:14 - so this is the everything end point if
10:17 - you go to the documentation and you
10:20 - check out endpoints let's check out the
10:23 - everything endpoint you scroll down here
10:26 - here's some reference about what sort of
10:29 - parameters you can supply into the API
10:31 - call but if you take a look at the
10:33 - response
10:33 - here's status right that's the key and
10:36 - the value can be okay or error so that's
10:39 - good I know it's never going to be nil
10:41 - right so I can safely make this not an
10:45 - optional string same thing with total
10:48 - results I don't think that this would be
10:49 - nil it at least be zero although it
10:51 - doesn't explicitly say that here and as
10:56 - for the keys in the news
10:59 - unfortunately it doesn't tell you if
11:03 - author can be nil or not entitled can be
11:06 - nil or not like is there always going to
11:08 - be a title I'm not sure based on this
11:10 - documentation and we saw from this
11:13 - example out here that under source ID
11:16 - can be known right or nil but here it
11:19 - doesn't it doesn't mention that it could
11:22 - be nil so if I want to be extra safe and
11:25 - I want to prevent crashes during the
11:28 - JSON parsing then you know I could I
11:31 - could just make everything an optional
11:33 - but for the status I'm not going to make
11:36 - it an optional because at least in the
11:38 - documentation it tells me that potential
11:40 - values is only okay or error so that's a
11:44 - little tip for for your JSON parsing
11:46 - okay so let's go back to this so we're
11:49 - building out our newsfeed structure so
11:51 - I've got total results as well and this
11:55 - is going to be an int I'll just default
11:57 - at the zero and then we've got articles
12:00 - now articles is an array of JSON objects
12:05 - representing an article however I
12:10 - haven't created that structure to
12:12 - represent that JSON object yet so I'm
12:17 - gonna leave this as an error unfinished
12:20 - and I'm gonna jump to creating a
12:23 - structure to represent these JSON
12:25 - objects inside which is essentially a
12:28 - single article so let's go ahead and
12:32 - create a second structure and then we'll
12:34 - come back to the newsfeed to finish it
12:36 - off
12:40 - so I'm gonna call this article and this
12:44 - is going to be article and remember it's
12:48 - still gotta follow the codable protocol
12:50 - and then we're going to map these
12:53 - properties to the keys here now I don't
12:55 - really care about the source so I'm just
12:57 - gonna admit that but I do care about
12:59 - author title description URL URL to
13:02 - image published at content all of these
13:05 - are strings so and all of them I'm not
13:09 - sure if they're going to be nil or not
13:11 - based on the documentation like we just
13:13 - checked so all of these are going to be
13:16 - optional strings and I have to make sure
13:20 - that the property names match the keys
13:26 - they don't have to but if you but this
13:29 - is the easier way to do it by just
13:32 - making sure that they match so JSON
13:34 - decoder is gonna just do it
13:36 - automatically and knows which key value
13:40 - pair amounts to which property and it's
13:41 - gonna put the data in the right place
13:43 - otherwise you're gonna have to write a
13:45 - little bit of extra code to tell the
13:49 - JSON decoder what key value pairs match
13:55 - to what properties if that if the names
13:57 - still managed okay so we've got content
14:00 - published that URL to image URL
14:04 - description title and author and I don't
14:07 - care about the source so okay so now we
14:09 - have an article structure that maps to
14:13 - this JSON object right so now I can go
14:16 - back and say that in the news feed that
14:22 - the articles key right isn't a right of
14:26 - our article structure okay so it kind of
14:30 - Maps there and I'm gonna make this like
14:36 - I don't know if this can ever be nil or
14:39 - not the value for articles so to be safe
14:42 - I'm just going to make it optional okay
14:45 - all right so that's basically it so
14:48 - we've created structures to match
14:51 - and map to the JSON objects in the feed
14:53 - now all we have to do is write the Iowas
14:56 - networking code to do the API call get
15:01 - the response back and then we're going
15:03 - to use JSON decoder to parse that JSON
15:07 - data into instances of these two things
15:10 - that we just created so I'm gonna go
15:12 - into view controller and I'm just gonna
15:14 - put it in viewdidload for the purpose of
15:16 - this demo to be quick and easy and as
15:19 - for the Iowa's networking code I'm not
15:22 - gonna go through it in too much detail
15:23 - since the point of this video really is
15:25 - to take a look at JSON parsing so here
15:29 - I'm going to say the API endpoint and
15:35 - I'm going to declare a URL string which
15:40 - is just our API call here now keep in
15:44 - mind that this is not the best practice
15:47 - thing to do to have your endpoint and
15:50 - all the parameters and your API key
15:52 - hard-coded in a string like this but
15:53 - again for the purpose of this demo I am
15:57 - just gonna breeze through this
15:59 - networking code and try explain a little
16:01 - on the way so I'm turning this string
16:04 - into a URL object and using this
16:07 - initializer for the URL object may
16:09 - return a nil-nil URL so I'm gonna write
16:14 - a guard's theme and URL is not know else
16:18 - we're just gonna return and we probably
16:20 - want to log something there to say what
16:25 - happened but at this point we've created
16:29 - a URL object so the next thing to do is
16:31 - to get a URL session and from the
16:36 - session we're able to create a data task
16:40 - we're going to use this method right
16:43 - here by passing in the URL we want to
16:46 - hit and we can also specify a closure or
16:48 - a block of code to run when we get the
16:50 - response back alright so this is gonna
16:53 - actually hit that make that API call and
16:56 - then run this code block when we get the
16:59 - response back and inside that code block
17:01 - is where we're gonna do our JSON parsing
17:03 - notice in this
17:04 - response sorry in this block of code we
17:07 - have a couple of input parameters that
17:09 - come back to us we have the actual JSON
17:11 - data we have their response from the
17:13 - server and we also have a parameter
17:14 - representing any error that might happen
17:16 - so let's go ahead and do that and now
17:21 - here I'm gonna pass in the URL I'm gonna
17:23 - force unwrap it because we checked that
17:24 - it's not nil already and for this
17:26 - closure I'm gonna double click it to
17:28 - open up a closure and I'm going to name
17:30 - these parameters so data is our JSON
17:32 - data that comes back response is going
17:34 - to be response object and this is just
17:37 - going to be an error inside here we're
17:39 - going to just check for errors now I'm
17:43 - gonna check if if the error is nil I'm
17:49 - meaning that there is no error because
17:51 - if some something happened and there is
17:53 - an error then this wouldn't be nil this
17:55 - would contain the error object and we
17:57 - could take a look at what there is so I
17:59 - just want to check that it is nil
18:00 - meaning there's no errors and I want to
18:03 - check that the data is not nil meaning
18:06 - that there is some JSON data that comes
18:08 - back because now I would parse the JSON
18:12 - there's no errors and there is JSON data
18:15 - to parse before I jump into there I
18:18 - always forget this part if I don't do it
18:20 - immediately so in order to actually fire
18:23 - off the data task loops
18:24 - you're gonna call theta toss stop resume
18:30 - okay so for parsing JSON this is the fun
18:33 - part this is the part where we are all
18:35 - waiting for so let decoder equals JSON
18:39 - decoder I'm going to create a new
18:41 - instance of that and then for decoder
18:45 - I'm going to use the method right here
18:48 - decode now there are a couple of things
18:50 - I want to point out here we're
18:52 - specifying the the type that we're
18:54 - trying to parse the JSON data into and
18:57 - so for us that would be an instance of
19:00 - newsfeed right because we created this
19:03 - just to map to this right so it's going
19:07 - to attempt to convert this JSON into an
19:12 - instance of newsfeed so that's why we're
19:14 - passing news feed in there
19:17 - let me just open up that again from the
19:20 - here's where we pass in the JSON data
19:22 - and notice that it throws that means
19:24 - that potentially it can throw an error
19:26 - in the process of parsing then and then
19:29 - we're gonna have to wrap that in a do
19:32 - catch block just because it throws and
19:34 - we're gonna have to use the try keyword
19:36 - to try to run this method and that's
19:40 - kind of like our error handling if
19:41 - there's an error that gets thrown we're
19:43 - gonna capture it gracefully show a
19:45 - message or something or log it and
19:46 - that's what that throws keyword means so
19:50 - let's go ahead and now implement it so
19:53 - by passing in the type you're gonna have
19:56 - to write the class name or the structure
20:01 - named itself and then here we're gonna
20:02 - pass in the data I'm gonna force unwrap
20:05 - it yeah and we're gonna have to try to
20:09 - do that and I'm going to set the result
20:18 - of the parsing in to a constant called
20:22 - newsfeed all right so let's wrap this in
20:26 - a do catch block and in here you know
20:31 - error in JSON parsing so we'll just set
20:36 - a breakpoint there and here we'll just
20:40 - print the news feed you know set a
20:43 - breakpoint there and I'll set a
20:44 - breakpoint right there for when the
20:46 - response comes back and we'll run this
20:47 - and take a look at what happens at night
20:49 - just let me double check we've got
20:53 - everything here we'll just indent that
20:57 - yeah I think so so let's go ahead and
21:00 - run this project again you in your app
21:03 - you wouldn't do this in the new and the
21:05 - view didn't load and you would probably
21:06 - be a little more descriptive in you know
21:09 - your error handling these are not very
21:12 - descriptive but let's see what we get
21:15 - alright so basically it's sent off the
21:21 - API call it's come back and here we're
21:24 - running that closure
21:26 - after the responses come back so here
21:29 - we're going to check if there are any
21:29 - errors and you can even see down here
21:32 - that there is data and there are no
21:33 - errors so it's gonna go through that and
21:38 - then this is going to create the decoder
21:39 - and this is actually going to do the
21:41 - parsing all right so this is the moment
21:43 - of truth a step over that and let's take
21:46 - a look at what's a news feed now as
21:48 - we're at this point right here so I'm
21:51 - gonna say P own news feed cool so it
21:55 - looks like we do we have gotten our our
21:58 - stuff so the status is okay did I
22:02 - capture the status yeah so we do have
22:06 - stats okay so we have statuses okay
22:08 - total results it's 4622 and the articles
22:12 - array contains 20 articles now let's go
22:15 - inside and check all you see author can
22:17 - be nil I wonder if that's true there I
22:21 - messed that up okay the title is Genesis
22:23 - announces record-breaking quarter let's
22:26 - take a look at what's here let me just
22:28 - refresh this ya see the author can be
22:32 - nil and they never mentioned this in in
22:39 - the documentation see an author here
22:42 - they should have I think they should
22:44 - have mentioned that it's just so good
22:45 - thing that in the article we made this
22:48 - an optional okay anyway so let's go back
22:50 - to this so it looks like our parsing
22:54 - worked and it was so simple right we
22:56 - have the description we have the URL the
23:00 - URL to the image and published at so we
23:05 - could convert that to a real date and we
23:07 - have the content yeah so that's that's
23:10 - exactly how easy it is to parse JSON in
23:14 - Swift and just to remind you guys what
23:16 - happened here we basically created
23:19 - structures to map to the JSON objects in
23:23 - the JSON feed and then we used JSON
23:27 - decoder and we passed in the type we
23:30 - wanted to try to convert the JSON data
23:33 - into and we just let it do its magic
23:37 - thank you for commenting on last week
23:40 - letting me know which api's you wanted
23:42 - me to see a demo of integrating with in
23:45 - today's video I want to ask you guys to
23:46 - do the same let me know below in the
23:48 - comment section if there's a specific
23:50 - API you'd like to see a demo of me
23:53 - integrating with because next week I'm
23:55 - going to start looking through those
23:56 - comments and choosing some api's to work
23:59 - with and do tutorials off of if you want
24:02 - to support this channel please don't
24:03 - forget to give this video a thumbs up
24:05 - and hit that subscribe button if you
24:06 - haven't already tap on that Bell
24:08 - notification icon so you don't miss the
24:10 - next video thanks for watching and I'll
24:12 - see you in the next lesson