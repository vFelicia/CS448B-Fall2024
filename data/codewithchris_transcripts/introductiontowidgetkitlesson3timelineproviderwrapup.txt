00:00 - learn how to provide data to a widget by
00:02 - reusing a service class from the main
00:05 - app and how to schedule that data in the
00:08 - timeline
00:10 - hey codecrew this is floor in this
00:12 - lesson we will finally fill up the
00:13 - widgets with some live as we use the
00:16 - existing to-do service from the main app
00:19 - we will also fill out the timeline
00:20 - provider and talk about different ways
00:22 - to schedule content for your widget so
00:24 - let's get right into it
00:26 - before we can start filling out the
00:27 - timeline provider we need to do a few
00:29 - setup things
00:30 - as i already mentioned we will want to
00:33 - reuse the to do service in order for us
00:35 - to be able to reuse the to do service in
00:37 - our widget extension it needs to
00:39 - actually be a member of the widget
00:40 - target
00:41 - right now let's open up the file
00:43 - inspector on the right hand side and
00:45 - then under target membership you can see
00:48 - that the to do service is only a member
00:50 - of the main app target so let's also add
00:52 - it to the widget extension
00:55 - this is one of the two files that we
00:56 - need to add the second one is to do
00:59 - itself
01:00 - as you can see we will return arrays of
01:02 - to-do's and signal to-do's in our to-do
01:05 - server so we definitely also need to
01:06 - have the to-do struct inside of our
01:09 - widget extension so let's go over to
01:12 - that file and make sure that it's also a
01:14 - member of the widget extension
01:17 - next up we need to do one more setup
01:19 - step before we can implement the
01:21 - timeline provider and that is adding the
01:23 - data to our timeline entry you already
01:26 - learned about the
01:28 - importance of the timeline entry this is
01:29 - basically what is carried throughout the
01:32 - timeline and provided to your widget by
01:34 - the system at the correct date with the
01:36 - correct information
01:39 - the date is already specified here which
01:41 - is a requirement from the timeline entry
01:43 - protocol
01:45 - now let's also add the information and
01:47 - that's the to do's that should be shown
01:49 - at a specific date in our widget so
01:52 - let's just add a
01:54 - to-do
01:56 - array here to our simple entry
01:59 - now we can actually use this entry to
02:01 - schedule updates in our widget using our
02:04 - timeline provider
02:06 - so we can close the simple entry here
02:09 - you can also close the to-do over here
02:13 - as you can see now it doesn't compile
02:15 - anymore because we changed the
02:17 - requirements for our simple entry it now
02:19 - needs a date but it also needs a to do
02:23 - so let's try to fix all of these issues
02:25 - and at the same time i will explain you
02:27 - how each of these functions work
02:30 - briefly let me explain to you the
02:32 - placeholder function and actually let's
02:34 - not make me explain it to you let's just
02:37 - have a look at the definition
02:40 - oops the definition of the timeline
02:42 - provider
02:43 - and then you can see there are very very
02:45 - long descriptions of each of the
02:47 - functions for the placeholder function
02:50 - the get snapshot function and the get
02:51 - timeline function
02:53 - the placeholder function provides a
02:55 - timeline entry representing a
02:57 - placeholder version of the widget
02:59 - this is for example used when you
03:01 - display when your widget renders for the
03:04 - first time it can also be used in a
03:06 - widget gallery but i think there they
03:08 - actually used to get snapchat function
03:10 - now
03:11 - so basically we don't really need to
03:14 - care about what we return in the
03:15 - placeholder function as it's just a
03:17 - placeholder while the actual widget is
03:19 - loading
03:20 - so
03:21 - let's add the to-do's here to our simple
03:24 - entry
03:26 - and to make life easy for us let's
03:28 - create an extension on to do to create
03:31 - some preview or some placeholder to do's
03:34 - with a given id
03:35 - so let's go back into the
03:38 - to-do definition
03:39 - let's create an extension of to do
03:43 - and in here let's create a function
03:47 - called
03:48 - placeholder that takes in
03:51 - an id which is an integer and returns a
03:54 - to do for us and now we can use this in
03:57 - our
03:58 - get place or in our placeholder function
04:00 - and also in other places later on for
04:02 - example for previews
04:04 - the function is really easy just
04:06 - construct a to do here
04:09 - using any user id it's just a place how
04:11 - that really doesn't matter what's
04:13 - important is that the id is unique
04:15 - because the to do is identifiable we
04:17 - have a list iterating or for each
04:20 - iterating of all of the to do's in our
04:23 - large size widget
04:25 - so it is important that the ids are
04:26 - unique and that's why we're passing in a
04:29 - id here in the placeholder function
04:31 - let's just pass that right into the to
04:33 - do
04:33 - for the title let's just say
04:35 - placeholder and for completed let's just
04:38 - say a random boolean so either one or
04:42 - two either true or false
04:45 - okay now that we have this placeholder
04:47 - function back in our provider we can now
04:50 - use that placeholder function here to
04:52 - fill out our list of to-do's let's make
04:54 - one with the id 0 and one with the id 1
04:58 - and then that should be good in our
05:00 - placeholder function here
05:02 - next up is the get snapshot function
05:05 - here we also have to create a simple
05:08 - entry or one single entry
05:11 - but instead of returning it like we're
05:13 - doing in the placeholder function we
05:15 - need to call the completion handler with
05:17 - this entry
05:19 - so very similar but now this can
05:21 - actually be called on your actual widget
05:24 - so we cannot use placeholder data here
05:26 - anymore instead we will use our to-do
05:29 - service to get all to-do's
05:32 - for that
05:34 - let's remove everything that is
05:36 - auto-generated here and since our to-do
05:39 - service uses the new async await pattern
05:41 - let's directly start off by constructing
05:44 - a task so we can use asynchronous stuff
05:47 - and i can already spoiler it to you we
05:49 - will also need to catch some errors
05:52 - so we can also directly
05:54 - add a new catch block here now inside of
05:57 - the do block let's fetch the to-do's
05:59 - from our to-do service so let's say let
06:02 - to do's equal
06:04 - try to await
06:07 - to do service
06:09 - dot shared dot get all to do's you
06:12 - already know this we already use this
06:14 - or i already explained to you how this
06:16 - works
06:18 - next up let's construct a simple entry
06:21 - so let's say let entry equals a simple
06:25 - entry
06:27 - with the date of
06:28 - now
06:29 - and to do's of
06:32 - the to do's that we just fetched here
06:35 - and then let's call the completion
06:37 - handler with that timeline entry
06:39 - so let's just say completion
06:42 - with the entry
06:46 - in the catch case however we also want
06:48 - to call the completion block
06:50 - this case this time let's also
06:54 - return some placeholder
06:56 - so let's just say
06:57 - completion
07:00 - simple entry with the date of
07:03 - now
07:04 - and to do's we will just use
07:06 - placeholder
07:09 - zero
07:10 - now you can see here that the instance
07:13 - member placeholder cannot be used and
07:14 - that's because we forgot to say that
07:16 - this is a
07:18 - static function so we can directly call
07:21 - it on the type to do instead of a
07:22 - specific instantiated to do
07:26 - now these errors should also go away
07:29 - okay awesome
07:31 - now the last part which is also the most
07:33 - interesting and most important is the
07:36 - get timeline function
07:38 - let me remove everything and then let's
07:40 - go through the function step by step so
07:43 - you understand how it works
07:45 - similar to before we also have a
07:47 - completion handler but this time the
07:48 - completion handler doesn't accept one
07:51 - entry it actually accepts a timeline of
07:53 - entries
07:55 - that timeline is a collection of entries
07:57 - like an array but it also has a refresh
08:00 - policy that's the last thing that we
08:02 - will
08:03 - handle when setting up this get timeline
08:05 - function first of all let's do the same
08:07 - setup as before we know we're going to
08:10 - use the to do service so we will need a
08:12 - task we also need a do
08:15 - catch block
08:17 - inside of the do block let's fetch all
08:19 - to do's once again so let's say let all
08:22 - to do's equal
08:24 - try await our to do service
08:27 - dot shared dot get all to do's this is
08:30 - the exact same stuff as before
08:34 - then let's actually
08:36 - do a little trick here if you remember
08:38 - in our widget ui we will show a bunch of
08:41 - different to-do's in our large size view
08:45 - this ui
08:46 - is meant for small amounts of data not
08:49 - for large amounts of data the ui will
08:51 - break if you pass in let's say 50 to
08:54 - do's because then the top bar will get
08:57 - pushed out of the screen so we will just
09:01 - use the first five to do's that we get
09:03 - from the service
09:05 - so let's say
09:07 - let
09:09 - five
09:10 - to do's equal an array
09:13 - oops
09:14 - an array of our all to do's dot prefix
09:18 - of the length
09:20 - five this will give us the first five
09:22 - entries of the all to do's array
09:26 - that is
09:27 - not actually returning an array it's
09:29 - returning an array slice but we need an
09:32 - array so we will construct a new one
09:34 - here next let's also create a timeline
09:39 - entry
09:40 - so we will just create a new simple
09:43 - entry for the date of now
09:46 - with our
09:47 - five to-do's in it up until now this is
09:50 - very similar to the get snapshot
09:52 - function and actually we should probably
09:54 - use this prefix five approach in the get
09:56 - snapshot function as well so let me copy
09:58 - it over
10:00 - and
10:01 - do it like this
10:04 - okay to make sure that the guest network
10:06 - function also doesn't break the ui
10:09 - okay so now we have our to-do's we have
10:11 - our simple entry now what we need is a
10:14 - timeline and there are a couple of
10:15 - different ways to do this now one way is
10:18 - to create a bunch of different entries
10:21 - for example for right now in one hour in
10:24 - two hours and five hours and so on and
10:26 - pass all of them into a timeline and
10:28 - tell the timeline timeline to refresh
10:31 - once nothing is left in it anymore so in
10:34 - our case in five hours
10:36 - or what we are going to do
10:38 - construct a timeline with a single entry
10:40 - and tell it to refresh after some
10:43 - specific date has passed
10:46 - the idea is basically if you have
10:47 - content that you can already schedule
10:49 - right now throughout the day for example
10:51 - if you already have the user's calendar
10:53 - you can schedule the whole calendar
10:55 - widget for the
10:56 - whole day
10:57 - but if you rely on live data that you
10:59 - download from the server which is what
11:01 - we're doing in our to-do servers then it
11:03 - is always
11:05 - um a good idea to only schedule one or
11:08 - two maybe three timeline entries and
11:10 - then force the timeline to refresh
11:12 - that way you will always have the most
11:14 - up-to-date information
11:17 - so we will do the later we will create a
11:20 - timeline
11:24 - and this will accept an array of entries
11:27 - so we will just create an array with our
11:29 - single simple entry in it
11:31 - and then for the policy you can just hit
11:33 - dot as this is an enum very handy
11:36 - you can see there are three different
11:38 - reload policies the first one is at end
11:41 - so the timeline would reload when no
11:44 - more entry is left
11:46 - the second one is never i think this is
11:48 - very self-explanatory
11:50 - this means that the app itself will
11:52 - never reload the timeline but however it
11:55 - will get reloaded sometimes for example
11:57 - if the user restarts the phone
11:59 - adds or removes the widget things like
12:01 - that the system decides when the
12:03 - timeline is really reloaded you only
12:05 - tell the system your preferences
12:08 - basically as the developer and then the
12:10 - last one is after a specific date which
12:13 - is what we will use and the date that we
12:14 - will use is now
12:16 - advanced by
12:19 - basically
12:20 - 60 seconds
12:22 - times 60
12:25 - times 30 so basically every 30 minutes
12:29 - this timeline should get refreshed
12:32 - in practice this will probably not
12:34 - happen every 30 minutes since timelines
12:36 - only get refreshed when the user is
12:37 - actually on their home screen so if the
12:39 - user has their device in standby for a
12:42 - few hours then the widget will never get
12:43 - refreshed and will only get refreshed
12:45 - once they view the home screen again
12:50 - okay and now the last thing let's call
12:52 - the completion handler with our timeline
12:54 - again
12:56 - okay and now in the catch block we will
12:58 - just have our placeholder data once
13:00 - again for that let's create some
13:03 - timeline entries
13:05 - this is just an array of
13:07 - simple entry just uh one for now
13:11 - so let's say the date is now
13:15 - and the to do's is dot placeholder with
13:18 - the id 0 just one for now doesn't really
13:21 - matter hopefully this catch block will
13:24 - never take place
13:26 - then let's also create the timeline
13:30 - which is just a timeline
13:32 - with the entries array and with the
13:35 - reload policy we will just copy over the
13:38 - one from up here basically what this
13:40 - would mean is that after 30 minutes try
13:42 - again to build a timeline
13:46 - okay and then let's pass the timeline
13:48 - to the completion handler as well and
13:50 - with that our timeline provider is
13:52 - already done
13:55 - now let's use all of these pieces of
13:57 - data that we pass into the simple
13:59 - entries inside of our actual widget
14:02 - views
14:03 - to do that let's go to the medium size
14:05 - view okay in our views previously we
14:08 - hired coded all of the data like the to
14:11 - do title and whether it was completed
14:14 - but also the to-do id down here in our
14:17 - deep link url in the medium size view we
14:20 - only want to show one to do so to do
14:23 - that
14:24 - let's grab the v-stack let's cut it out
14:28 - and in here let's say if let
14:30 - to do equal our entry dot to do's dot
14:34 - first we will just access the first to
14:37 - do let's paste back in our v stack
14:40 - now in here instead of this hard coded
14:42 - string let's say to do dot title
14:46 - and instead of the completed let's say
14:49 - to do dot
14:50 - completed let's use the ternary operator
14:53 - here so let's say if the to do is
14:54 - completed we want to say
14:57 - completed and else we want to say that
15:00 - it's open
15:01 - as this is a unwrapping of the first
15:04 - object it might be nil so there might
15:06 - not be any to-do's in the simple entry
15:08 - for example because we couldn't fetch
15:10 - any from the server because we succeeded
15:12 - to fetch from the server but the server
15:14 - just returned an empty array in this
15:16 - case with the json placeholder api this
15:18 - should never happen but in your main app
15:21 - you might want to
15:23 - put an
15:24 - else block here as well and then display
15:26 - some error state you could for example
15:28 - say couldn't load to do try again later
15:31 - or something like that
15:32 - okay now let's also replace the
15:35 - hard-coded
15:36 - id here in our widget url for that let's
15:40 - say entry dot to do's
15:43 - dot first dot id
15:46 - this is optional but we can't have an
15:48 - option in here so we will have to
15:51 - provide an alternative basically and we
15:53 - will just null coalesce it with zero
15:56 - okay that's it for the medium size view
15:59 - let's jump into the large size view as
16:01 - well
16:02 - okay
16:03 - in the large size view now
16:05 - if you remember we had this hard coded
16:08 - zero through six range let's get rid of
16:11 - that and instead let's say entry
16:13 - dot
16:14 - to do's we don't need to provide an
16:16 - identifier because
16:18 - we did mark our to-do as identifiable
16:21 - itself and it does have
16:22 - the id property
16:26 - okay
16:27 - let's go top to bottom here so the first
16:29 - thing that we need to replace is the id
16:31 - in our deep link for that we can just
16:33 - say
16:34 - to do dot id and we actually need to
16:38 - grab the to-do in in our for each for
16:40 - that to work
16:43 - then we had our if true here this of
16:45 - course should mean if to do that
16:47 - completed only then we want to show that
16:49 - little check mark on top of the circle
16:52 - and then i want to do the title also
16:55 - let's grab that one from the actual to
16:57 - do
16:58 - okay that should be it let me spin up
17:01 - the simulator and let's have a look at
17:03 - if everything works if we can see all of
17:05 - the to-do's and if the deep links still
17:07 - correctly link into the app
17:10 - okay so as you can see it doesn't quite
17:12 - compile yet and that's because we still
17:14 - have our preview down here which doesn't
17:17 - have the updated simple entry
17:19 - initializer so we also have to pass in
17:22 - some to do's into our little swift ui
17:24 - preview here
17:25 - and let's also just use the placeholder
17:27 - function for zero and then also another
17:30 - one for one
17:32 - and i think this should be it now
17:36 - yeah looks good let's compile now and
17:38 - see if it runs
17:45 - okay so the simulator just launched and
17:47 - i added all of the widgets
17:50 - first of all here you can see the medium
17:51 - size view
17:52 - it fetched one of our to-do's and if we
17:55 - tap on it then the app will open up and
17:57 - the little cheat will come up with some
17:59 - more detailed information about that to
18:01 - do
18:02 - and if we go back to the home screen and
18:05 - move over then we can see our large size
18:07 - widget which also fetched the last
18:10 - five to do's as we specified using a
18:13 - prefix operator
18:14 - and if we tap on any of these to do's
18:17 - then
18:18 - the fitting section will also open up
18:21 - and show up in the sheet because we
18:23 - passed down the correct id in the deep
18:25 - link
18:26 - this was the final lesson of the
18:28 - three-part widget kit course
18:30 - in this series you learned all the
18:32 - basics about widget kit
18:34 - how it works the way updates are
18:36 - scheduled multiple size classes
18:39 - reusing existing code and deep linking
18:42 - into your app