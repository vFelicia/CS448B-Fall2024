00:00 - For this video, I'll show you how to use
Vapor to create tables, use migrations,
00:05 - and how to read and write
data to the database.
00:07 - For this example, we are going to make
a list of songs to read and write.
00:11 - Hey, everybody, my name is Mikayla Karen.
00:13 - I am a full time Iowa West developer,
and recently I've started learning Vapor.
00:17 - So I'm excited to show you how you
can use Vapor to build your own API.
00:20 - Okay, so here we are
in our project directory.
00:23 - When I type LS for list,
you can see all the different files
00:25 - that we have, so we can open
this by typing Vapor Xcode,
00:32 - and then you see it says
Opening project in Xcode.
00:36 - Okay, you can see when we open
00:38 - our project, you have all
of the packages starting to load.
00:41 - So all of the packages,
these are all the ones that we need
00:44 - for our project, and Xcode is going
and fetching everything for us.
00:49 - The first thing we'll learn
about are what our routes.
00:51 - So we looked at that briefly
00:53 - through the last project,
or when we built the project for the first
00:56 - time, we open up this routes file
and we see app get and it returns.
01:02 - It works, and then app get Hello returns.
01:05 - Hello world.
01:07 - So if we open postman
01:10 - and you may not see these,
01:11 - I just added these because
we will be using them later.
01:14 - But if you just click on the little plus
here, it might be over there.
01:18 - You can create a new request.
01:20 - So we will request from
01:25 - this after we run it, which
we'll have to wait for mine to finish
01:29 - building for the first time, so you can
see it's still fetching everything.
01:34 - But what we're going to do is we'll see
01:35 - that when we just hit the base route,
it returns, it works.
01:39 - But then if we hit the base route,
01:41 - Helloworld or Hello,
it gives us Hello world.
01:44 - And so this is our route.
01:46 - Really.
01:49 - But when we open the project for the first
01:51 - time, we actually have
a bunch of files here.
01:54 - And this is a Todo controller create to do
a model called to do,
01:58 - because by default, Xcode gives you
a Todo project to start everything.
02:05 - Let's type this.
02:09 - Let's go to this.
So we'll end up using songs, but right now
02:13 - we just hit the base route
so that's the root route
02:17 - and wait for my project
to finish building.
02:21 - Okay.
Both succeeded.
02:24 - Okay, let's go ahead and build
our project for the first time.
02:27 - So we click command R
02:30 - and make sure the scheme
that's selected says my Mac.
02:36 - Okay, here we go.
Okay.
02:38 - So when you run the project,
02:39 - sometimes you'll get this
run would like to access your documents
02:43 - folder, or this might be wherever you
ended up saving it, just click on.
02:46 - Okay,
02:49 - then we see notice starting
server on 1270 one at Port 80 80.
02:55 - So right here I type in that exact URL,
and when we hit send
03:00 - on the root directory.
03:03 - We have our request
sending and we get back.
03:05 - It works and we can see right here.
03:08 - That's exactly what we wanted back.
03:10 - Then we do Hello.
03:12 - So the slash helloroot
03:15 - and we click send
03:17 - and we get back Hello world because
that's what we Typed right here.
03:22 - So we can see that down here.
03:23 - So we went to the root directory
first and then slash Hello.
03:28 - Net directory.
But root next
03:31 - and then we have this controller.
03:33 - So let's go ahead and delete all of the
controllers and everything that comes
03:40 - default with the project
because we don't need that.
03:43 - So we just click on stop
and then we'll see down here
03:47 - eventually.
03:48 - Once my computer gets there,
it says it stopped it.
03:51 - And then
03:52 - this is a message that will
sometimes come up.
03:54 - So when we try to start this again,
it might give us that weird error
03:58 - where we have to do like Lsofi
80 80 and kill that one process.
04:04 - We'll get to that though.
04:05 - But let's go ahead and delete
this to do controller.
04:08 - So just click on it.
04:10 - Click delete, move to trash
04:13 - and let's go ahead
and delete everything else.
04:15 - So create the to do delete that one
04:18 - move to trash.
04:24 - Delete the to do model.
04:26 - We don't need that.
04:28 - And we can take out
04:32 - that line and it says can't
find it because it's not there.
04:36 - And then inside of Configure,
we can take out this migration
04:41 - thing here, which we're going to add
it back with our own information
04:46 - so we can keep these routes here because
it doesn't hurt anything to have them.
04:50 - But we are going to make
our own controller.
04:53 - So we all write our own routes inside
04:55 - of the controller rather than writing them
right here, because if you have a big
04:59 - application,
it'll start to get very crowded.
05:02 - Let's go ahead and click on this
and then do command in or file new.
05:06 - To create a new Swift file,
05:08 - we'll add a Swift file, so we click next.
05:13 - Xcode kind of does this rather than what
05:15 - it does with an iOS project, you can
immediately type the file name here.
05:18 - So we will call this the Song controller,
05:24 - because this project will be
about adding songs to a database
05:27 - you can see with vapor.
05:29 - It sometimes does this incorrectly.
05:31 - So we have the song controller,
but it didn't rename this part
05:36 - of the file by default like it
does when we do iOS projects.
05:41 - So we will just change it right there.
05:44 - And before we get into this part,
05:47 - actually, let's go ahead and create our
migration, and I'll explain what that is.
05:53 - So let's name the migration
05:55 - createsongs
05:57 - So file new Swift file,
06:01 - and we will call this
06:07 - Crete Songs and rename this part again.
06:13 - Okay.
06:14 - So first, what are migrations migrations
are used when creating our database.
06:18 - So when you think we have version control
06:20 - within our Xcode project,
when we type new lines and change
06:23 - the Xcode, we use Git to tell us
what have we changed?
06:27 - And we can revert back to certain
points in time for migrations.
06:31 - With the database.
06:32 - For a database, we use migrations
to do that, as opposed to using Git.
06:39 - So we need to first import fluent.
06:43 - And Fluent is a framework that's actually
06:45 - an Orm so that's an object relational
Mapper or object relational mapping.
06:49 - And we will use that for the migration.
06:52 - So the migration will then track
the differences between our database
06:57 - for things that we add.
06:58 - So first let's create a struct
07:02 - called Createsongs,
07:06 - and it will inherit from migration.
07:08 - So you can see it says fluent.
07:09 - Migration can handle database migrations,
07:12 - which include adding new tables
or changing existing tables.
07:15 - So this is pretty much like get
it's tracking all of our changes.
07:18 - But instead of for our Xcode,
it's for our database,
07:22 - it will try to build,
and I think it'll tell us
07:26 - there is an error.
07:29 - Okay.
So when we build our project,
07:31 - it will give us this error that we do
not conform to the protocol migration.
07:36 - So if we add the protocol stub,
it gives us these two functions.
07:40 - So we said migration subtract changes.
So prepare.
07:43 - These are the changes we want
to make and then revert.
07:46 - This is what do we do
if we wanted to revert those changes?
07:51 - Let's get rid of the Xcode completion.
07:52 - And the first thing that we're going to do
is we will use this to create our table.
07:56 - So our table is going to be called songs.
07:58 - So we want to return from this
08:02 - and we want to use
the database that we're using.
08:04 - So database
08:07 - schema.
08:09 - And we want to call this song.
08:11 - So this is the name of our table.
08:14 - And what does our table have?
08:16 - So tables have columns,
and they have rows.
08:18 - So rows are all of our data.
08:20 - And then columns are
08:22 - the different properties of our data.
08:25 - So we want an ID property
08:28 - and we want a field.
08:30 - So the field we want to actually,
that's not the right initializer.
08:38 - Yeah, we'll use this one,
but we're only going to use part of it.
08:41 - So we want to
give it a column name of title.
08:48 - Then what type it is?
08:50 - It is a string.
08:54 - We want to create a new field.
08:56 - We want to give it the name of title,
and it will be of type string.
08:59 - And then we want to make
this field required.
09:05 - And then here we want to create this.
09:07 - So this means we have
a table called Songs.
09:11 - It has a column called ID
and a column called title.
09:14 - And then we want to go ahead
and create this table.
09:17 - And that's what all of this means.
09:19 - Now on the other side of reverting,
09:21 - if we want to revert all of the changes
that we made and prepare,
09:25 - we have to do
09:39 - reverting
09:41 - here.
So we create the table with these kinds
09:44 - of fields, and then to revert that change,
we just delete the table completely.
09:50 - So this is our migration that we
will make for our songs table.
09:54 - Now how do we represent
the data that's in this table?
09:58 - We have to create a model for that.
09:59 - So if we go to the Models folder
10:02 - command n for a new file
want to make a new Swift file,
10:09 - we will name the song.
10:26 - We need to import two things.
10:28 - We will need fluent
10:32 - and vapor.
10:36 - It's going to conform to model
10:41 - and content.
10:42 - So think of it like a normal class
that we'd make within an iOS project.
10:46 - This is how we want to represent our data.
10:49 - But because we are using fluent,
10:50 - this is how you're going to query
the data from the database.
10:54 - First, say static
11:01 - static schema equals songs.
11:03 - So this is what schema
are we talking about?
11:06 - Meaning what table are we talking about?
11:08 - So this
11:10 - class will represent the Songs table.
11:12 - And then what is in this table?
11:14 - We have
11:17 - an ID property
11:22 - and a title property,
but we can't have only this.
11:25 - We need to add a couple
11:27 - things on this to help with fluent and
recognize everything that's in the table.
11:44 - When we add these on top of it, it's
11:46 - telling fluent that this property of ID
matches the ID property within our table,
11:54 - and then the field that we were talking
11:56 - about when we look
at the migrations matches.
11:58 - Now our property called title,
12:02 - and then we need to make our initializers.
12:05 - So we'll first have an empty initializer
12:09 - and then one with all of our properties.
12:34 - Okay, so here we have
our two initializers.
12:36 - One will just be empty,
12:37 - meaning it doesn't accept anything
meaning it'll have both of these.
12:40 - But then one that will set the ID
property to Nil and then title.
12:45 - And then here we are setting
those two properties.
12:47 - So our song class represents our
data inside of our database,
12:52 - which here is our table,
12:55 - our table called songs,
and it has the ID and title properties.
12:59 - And then we can see our
model that we have song.
13:02 - It uses the table songs,
and we have our ID and title properties.
13:09 - So let's go ahead and add
data to our database.
13:13 - So we will do that with the song
controller, as opposed to using
13:18 - routes in this file and making
the route file get very long.
13:21 - We'll separate our logic
into this controller.
13:25 - So this will be a struct
called song controller,
13:35 - and you can see it automatically added
13:37 - vapor, because that's what we
need for this route collection.
13:41 - We'll also need fluent
13:43 - instead of foundation.
13:45 - So our route collection.
13:48 - This is what is used because
a controller is really just kind
13:51 - of a collection of different routes
and different functionality.
13:55 - So when we try to build this,
13:57 - we will see that it again fails and tells
13:59 - us we need to conform to route collection,
and we currently don't.
14:04 - Okay, so after it builds,
we can see that it fails.
14:07 - And we want to add the protocol stubs.
14:09 - Let's go ahead and click fix and we just
need this one function called boot.
14:13 - So kind of think of it
like an init function.
14:16 - This is the first function that runs.
14:18 - So what we want to put in here.
14:35 - Okay.
So first let's type letsongswoopedsongs.
14:40 - So what this is saying is when we go to
14:43 - the root route,
so 1270 one and then dosongs everything
14:52 - that is then grouped under this
will go to that.
14:55 - So to make that more clear
to make a new function.
15:01 - Okay.
So to make this more clear
15:03 - when we go to the routesongs, we then use
thissongs get and then use index.
15:11 - Meaning when we go to songs,
we want to use this function.
15:16 - So you can see that similar
to when we do app get.
15:18 - Hello.
15:19 - It has the functionality right here.
15:21 - But because we are grouping it
within the songs controller.
15:25 - When we go to Slashsongs,
we want to group everything.
15:28 - Then instead of app yet we havesongs yet
and we are using the index
15:34 - so that will look like
15:37 - this one.
15:43 - So we will go to the root
route, then do theroutsongs
15:48 - and that's what we are making right here.
15:51 - So that's what this one means.
15:53 - So let's write the Xcode for what
happens when we do this.
15:57 - So this is all we need.
15:58 - So we return songs query, which this
means this is referring to our song
16:05 - right here our model.
16:08 - So because we are using fluent
fluent is what is actually
16:11 - doing all of the functionality
to go and talk to our database.
16:16 - So we do songs query meaning we want to go
get data we want to do on the request DB.
16:22 - So this is our request,
which is what it's called.
16:24 - When you say hit the database or hit
an API, it usually means make a request.
16:29 - So this is called a request DB.
16:31 - So we want to use the database
that we have, like within our project,
16:35 - and then we dot all because we
want to get everything back.
16:38 - What this means when we dot all,
we want to return everything that comes
16:42 - back from this query, and that will
come back as an array of song items.
16:47 - But before we can do this,
we haven't actually created the database.
16:51 - So when we can see in this configure file
16:55 - here, this is creating our database.
16:57 - It's a Postgres database.
16:59 - And then this is trying to get
an environment variable for our host,
17:03 - the Port username password,
and then the database name.
17:06 - But instead of making an environment file
17:08 - right now, if it can't find that,
it'll just use uses this
17:12 - nil coalescing and we'll use whatever
is given here by default.
17:16 - So by default our database host is
localhost the vapor password and then
17:21 - the username, and then the password is
right here, which these are generic.
17:26 - So this is not what you actually
17:28 - you don't want to hard Xcode any
of these values in your Xcode.
17:31 - That's why right here
it goes to an environment file,
17:34 - which will end up creating glider
and then right here, you can see that we
17:38 - did delete the
migration for creating that to do because
17:43 - we don't want to create to dos in our
project, we want to create songs,
17:46 - but we do need this migration
similar to this for creating songs.
17:53 - We want to create our song table.
17:56 - So if we go into configure,
17:59 - we type apps migrations
18:04 - so we have Typed app migrations add
createsongs because we want to add our
18:09 - createsonguration
18:12 - to all of the migrations like lists.
Of them.
18:14 - And then right here we
do tryapp auto migrate.
18:18 - Wait.
18:18 - So this means all the migrations that we
have, we want to actually run them,
18:23 - and that will go and create
a database for us.
18:26 - And then
18:28 - it will wait for the auto to complete
before doing everything else.
18:32 - Okay.
18:32 - And before we can run the project,
we created our song controller,
18:36 - but we haven't actually added
that to the routes file.
18:39 - So our only routes in the project
right now are this root one and slash.
18:43 - Hello.
18:46 - Let's go and add our song controller.
18:51 - So we type, try app registercollection,
18:55 - and then we want to pass in our
song collection or song controller.
18:58 - Sorry.
18:59 - And we can see
it conforms to route collection.
19:03 - So that's saying right here
19:05 - we are adding the song controller,
which conforms to collection.
19:08 - So this is the type of collection.
19:10 - And so now when we run our project,
it will first go back to configure
19:16 - it'll.
First create our database for us, and then
19:19 - right here it'll create
the songs table that we have
19:23 - using the migrations.
19:25 - And then lastly, it'll try
to run this function routes.
19:28 - If we go here that function,
19:30 - it will register these two routes,
which we won't really use.
19:32 - But then here it'll register
our song controller
19:37 - inside of song controller.
19:38 - We have a route called slashsongs.
19:42 - And then here we have the ability
to read all of the different songs.
19:52 - So this is thesongsroute
19:55 - so if we go ahead and run this,
19:58 - nothing will really happen because
20:00 - we don't have anything in our database,
but we can still run it anyways.
20:09 - I missed that.
So we'll stop this
20:13 - and now run it.
20:20 - Okay.
So in mind, we can see that we got
20:22 - the same error that the connection
needs reset and connection refused.
20:27 - Okay.
So what this actually means
20:31 - eventually show me like
it can't do something.
20:34 - What this meant was that our database.
20:37 - So it says connection refused.
20:39 - So what are we connecting to?
20:41 - It cannot connect to the database because
the database is actually not running yet
20:47 - what we need to do.
So if you click command tab
20:51 - on our terminal here, it opens
a new terminal window, basically,
20:56 - but within the same directory.
21:00 - So we're still in the same place.
21:03 - So let's go ahead and stop that.
21:07 - Eventually it'll stop.
21:09 - What we need to do is run our database
because it's actually not running.
21:13 - What Vapor does iswith an Xcode.
21:16 - It kind of just only runs the application,
the API sort of side.
21:19 - It doesn't really run the database.
21:22 - When we look at our Docker
compose file, we can see here
21:26 - we can start the app and we can
start the database separately.
21:31 - So let's do that.
We need to start the database with Docker.
21:37 - So if I close
21:39 - this
21:41 - and you try to start the database.
21:42 - So if we do
21:46 - dockercomposeupdb,
which this does have a hyphen,
21:49 - but I've Typed it without a hyphen,
and it works just fine too.
21:53 - So if we type Docker
compose FDB hit enter.
21:58 - It's trying to start the database,
but if you get back this error of
22:03 - error response from Daemon,
that just means that Docker is not
22:07 - running, and that's
what I had just closed.
22:09 - So you need to type in Docker.
22:11 - So it'll try to open the Docker app.
22:14 - If you hit enter,
22:15 - you'll see up here the little Docker
whale is trying to get up and running.
22:20 - So it says Docker desktop is starting.
22:23 - Let's wait for it to boot up.
22:27 - So this is the desktop application.
22:29 - It'll say Docker engine is starting.
22:31 - Once Docker started up,
you may see this that says
22:35 - nothing is running or you don't have
anything here or you'll have, like,
22:38 - one of those tip kind of prompts, but this
one was actually from me testing the API,
22:43 - but we can close this or
you can leave it open.
22:46 - It doesn't really matter.
22:50 - Let's go back here
and type the same thing.
22:53 - Docker compose up DB.
22:56 - We hit enter.
22:57 - Now you can see it's
starting to do something.
23:00 - So what it's doing is creating our
database for us within a Docker container,
23:06 - and it's doing this by using our
Docker file here in Docker compose.
23:13 - So now if you still had the Docker
desktop application open, you can see
23:18 - Vapor API that is right here.
23:21 - That is the name of our project,
23:23 - and we are actually running it
from the command line here,
23:25 - as opposed to running it just
through the GUI application.
23:29 - You can expand this and see here is our
23:31 - database, and it's just called
DB One, and it is of type.
23:34 - It's a Postgres database.
23:37 - So now that everything is running
now, let's see if we run our API.
23:42 - We should not get a connection.
23:43 - Refused
23:45 - because our API was trying to connect
23:48 - to our database, but the database
was not actually up and running yet.
23:52 - Okay, on mine, we saw this address
23:54 - already in use,
so that's a different error
23:57 - that goes back to
that weird command that we have to type
24:00 - in the command line because sometimes
Xcode doesn't fully detach the process.
24:06 - So if we go back to our first
terminal tab here and type LSO,
24:15 - it shows us all of these
things that are running.
24:19 - So to know which one to actually close,
it's usually the one that says local host.
24:26 - So I'm not sure why that actually
24:29 - appeared in mine,
24:31 - but typically what we'll do
is delete the one that says
24:36 - something about localhost and
we can delete this one.
24:39 - This is postman because
I think this is the one
24:43 - that the database is running on,
24:46 - but apparently like froze mine.
24:50 - So if we click Command T
to try to open a new tab,
24:56 - let's close that type
25:00 - lsof I 80 80 and don't have any spaces.
25:06 - It comes up with the same things
25:16 - we'll do kill nine
and then the PID number.
25:29 - Okay, so if we look at this,
it still says something is running.
25:33 - Let's try to kill that one as well.
25:41 - And if we type LSS, okay,
now we don't have anything going.
25:46 - So now let's try to run our project again.
Okay, here we go.
25:49 - Now we have server starting
on our root computer,
25:56 - but we can't really see anything.
25:58 - Let's open postman.
26:02 - Okay.
We have open postman.
26:03 - And if we try to hit the new route that we
just created for getting all the songs.
26:08 - So this was me.
I saved
26:12 - this request within postman.
26:14 - You can do this all without
signing up for an account.
26:16 - If we try to click send,
26:19 - we get back an empty
array and it says 200.
26:22 - Okay.
And that's exactly what we want.
26:24 - A 200 response is a good response.
26:27 - And then we can see we
hit the slashsongs route,
26:32 - but it says empty array because we
haven't added anything to our database.
26:36 - If we want to look further into this,
let's open up Azure Data Studio.
26:41 - So this was another one of the
applications that we had to download.
26:45 - And with Azure Data Studio,
26:47 - we can then look at our data in the
database directly without using the API.
26:51 - So to do that first,
we need to add a connection
26:57 - and we are not using Microsoft SQL Server.
26:59 - We are using Postgres SQL
and we have that option because
27:05 - cancel when we downloaded the extensions.
27:08 - We downloaded the extension Postgres
27:12 - so we can go to add connection
27:15 - Postgres SQL.
27:17 - So the server name
27:19 - is
27:23 - localhost
27:26 - because in configure
27:28 - right here the database
host is called localhost.
27:31 - So database host and server
name are like the same thing.
27:35 - We want to use password.
27:36 - We don't have Azure active directory,
27:38 - and then the username here we are using
Vapor Username and Vapor password.
27:49 - You can click Remember password
if you want.
27:51 - It doesn't really matter.
27:56 - We want to use Vapor database
27:59 - because that is the one
that our configuration uses.
28:04 - We can give us a name.
28:05 - It doesn't really matter.
28:09 - It database and we click connect.
28:13 - Okay, so here we can see
28:14 - that the connection is live
because it has a little green dot.
28:18 - If we click on Songs and just right
click and then do Select Top 1000.
28:23 - This runs this query of select
ID and select title from songs.
28:27 - And we have nothing here because there's
28:29 - nothing in our database,
but we can see fluent migrations if we
28:33 - right click this one
and click Select Top 1000.
28:38 - This shows us that the migration that we
28:40 - ran is called Createsongs,
and then this is the first one that ran
28:44 - and this is the day
and time that we ran this.
28:46 - So this is like our get commits.
28:48 - It has a record of all the different
28:50 - things that have happened,
all the different migrations.
28:53 - And we can see here we don't have any
data in our database at the moment.
28:57 - So let's create a new route that allows us
28:59 - to add data, because what we have so
far is just allowing us to get data.
29:04 - Okay.
So we stopped the project and we want
29:06 - to make a new route,
so we need to make a new function.
29:10 - So we are going to make
a function called Create.
29:29 - So our function takes in a request.
29:31 - All of them will take in a request because
29:33 - that is the request coming from Postman
and the request coming from the iOS app.
29:39 - And then I haven't really
talked about this.
29:41 - It's called Eventloop future.
29:43 - So this has to do with what is
called futures and promises.
29:47 - So it's all about Asynchronous Xcode.
29:49 - And note, these tutorials are before Vapor
has integrated Asynch awaits,
29:53 - which is the brand new Swift I
believe, 5.5 functionality
29:58 - that is in iOS,
and we will be using that with the iOS
30:01 - app, but it has not been merged
into Vapor's framework just yet.
30:06 - And then right here we
will return http status.
30:10 - So the status is like
when we looked at postman
30:13 - just moved.
30:17 - This is the status.
30:18 - So 200 okay means something good happened.
30:21 - So we will return a status whether
or not we were able to successfully
30:26 - create
30:27 - a song.
30:29 - So let's write the Xcode for this.
30:36 - Okay.
What we wrote here is
30:39 - letsongals tryrequest content decode.
30:43 - So when we have this request,
30:45 - we are going to be decoding the content
into a type of song self.
30:50 - So that's like when we do JSON decoding
30:52 - in iOS,
this is pretty much the exact same thing,
30:55 - and we will decode our song type and we
save it into a variable called song.
31:00 - And then we will save
that to our database.
31:03 - So that is using song save.
31:05 - And we can use this because our modelsong
31:09 - is a part of fluent.
31:11 - So it has these functions inherently
that it can use to talk to the database.
31:16 - So we save
31:17 - our song to our database.
31:19 - And then if that goes well,
we transform it to okay.
31:23 - Meaning everything went well
in the response from this
31:28 - entire request is going to be
okay if it worked.
31:32 - So let's go ahead and run this.
31:36 - But actually before we run it,
we have to add this
31:39 - to this boot function
31:40 - because we have added the get for the
index, but we need to add the create.
31:53 - So instead of Get, we are using Post
and these are different http methods.
31:58 - Get is usually for getting data,
and post is usually for sending data.
32:02 - So we do songs post and that allows us
32:04 - to make a post request
rather than a get request.
32:09 - Let's go ahead and run this
and bring postman back up.
32:14 - We have a lot of windows so you could
see when we did the get request.
32:18 - The request type is get when we
hit the songs API or the route.
32:24 - But if we use a post
32:28 - request, we change this from get to post
and then you can see the request.
32:33 - The URL is the exact same.
32:37 - So that was me testing one.
32:39 - But here what we need to do first is
32:43 - so you won't see this initially.
32:45 - It might be on like params.
32:47 - Go to the Body tab here
32:50 - and make sure you click on Raw and then
select JSON for the type of this body.
32:57 - And we will use a title because that is
one of the properties of our song model.
33:02 - We have an idea and a title, but we
don't need to create the ID ourselves.
33:06 - The database will do that for us.
Okay.
33:08 - This is the vapor pop up that comes up.
Just click.
33:11 - Ok.
33:13 - And then our Vapor API
is now up and running
33:16 - and postman.
Let's add a new song.
33:20 - Let's add a song called Money,
33:23 - and if we click send,
33:28 - we get back a status of 200.
33:30 - Okay.
33:31 - And you can see we made a post
request to the routethsongs,
33:35 - but we can actually see the data,
33:38 - but we can if we now use our other route
that we had for getting all of the songs
33:43 - so you can see it says
it's a get request, not a post request,
33:47 - and we don't have anything in the body
33:49 - because we're not sending
anything over to the API.
33:51 - We're just sending
33:53 - our request to get back data.
33:55 - So if we click send
33:58 - now we have data coming back
34:01 - so you can see the ID that was
created, which was that UUID.
34:05 - And then the title is Money.
34:06 - So
34:09 - that is the song that we just added.
34:11 - We used our API right here
34:13 - for a get and a post request
to the route songs,
34:16 - and now we have created new data
and we have read that data.
34:20 - We can also look at our Azure Data studio,
34:25 - and we can query our database directly.
34:27 - So if we click Run
34:29 - after we run our query,
we can see the same ID number,
34:35 - and then the title is Money
34:37 - because that's the one item
that we have in our database.
34:40 - So this allows us to look at our database
34:42 - directly rather than using our API here
to query the data itself.
34:50 - Okay.
And then that's pretty much it.
34:52 - We have created two different routes
34:54 - that allow us to read data
and create new data.
34:59 - So here I will actually add
35:03 - this is the Get request to the Songs
route, and this one
35:12 - and this one is the post request
35:14 - to the Songs route, and we can see
that here we use Get and post.
35:20 - So let's stop the project from running.
35:26 - And then down here where we had our
35:29 - we can see everything
35:31 - where we had Docker running.
35:33 - If we click Control C
35:36 - that will stop the container completely,
you shouldn't just close this window.
35:40 - You should just cancel this,
cancels it gracefully
35:43 - to stop it.
35:45 - And then if we look in Docker desktop,
we can see that it's not running anymore.
35:52 - Let's exit out of that.
35:55 - And then that's all we have to do.
35:57 - On the API side.
35:59 - We have created our table using
36:01 - migrations, and we learned that migrations
are like Git, but for our database
36:05 - we created two routes,
one to read data and one to write data
36:09 - and we are writing and reading
a list of song titles.
36:12 - Lastly, we used Postman
and Azure Data Studio so we can
36:17 - look at the data in our database and test
our API without needing to write the iOS
36:21 - at first, if you enjoyed this video, give
it a like below and write any comments.
36:26 - If you have any suggestions on future
Vapor videos, we'd could do.