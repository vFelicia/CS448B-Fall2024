00:04 - hello welcome to lesson 5 of the
00:07 - firebase tutorials video series in this
00:09 - lesson we're going to go over how data
00:12 - is stored in the firebase real time
00:14 - database so right now I'm looking at the
00:17 - firebase app that we created back in
00:19 - lesson 2 and I simply clicked on
00:22 - database right here on the left hand
00:24 - side and what it presents to me is this
00:26 - empty database here so this is the URL
00:29 - or path to our database that we don't
00:32 - really have to worry about because it's
00:34 - in the config file which we put into the
00:37 - the Xcode project and this line here
00:40 - says that the default security rules
00:44 - users need to be authenticated before
00:46 - they can read or write and we're just
00:48 - going to dismiss this now because we're
00:50 - going to change those rules in the next
00:52 - lesson when we actually read or write
00:54 - data for now I want to talk about this
00:56 - this empty database right here and if
00:59 - you're coming from traditional database
01:01 - background with SQL you're used to
01:04 - tables and rows but you don't see any of
01:08 - that here all of the data in our
01:10 - firebase database is stored as a JSON
01:13 - tree and if you're unfamiliar with JSON
01:16 - it's a notation used to describe objects
01:19 - using key value pairs and they're
01:21 - organized in collections like
01:23 - dictionaries and arrays forming a tree
01:26 - like structure when you're working with
01:28 - third-party api's and feeds oftentimes
01:30 - the data is transmitted as JSON because
01:34 - it's lightweight and fast so right here
01:36 - we're going to put in some data into our
01:39 - JSON tree you're not really going to get
01:41 - to see the JSON syntax because this is
01:44 - sort of a visual way but what's
01:47 - important for this right now is that you
01:50 - understand how the data is stored as key
01:52 - value pairs or name value pairs as
01:55 - firebase calls it
01:56 - ok so let's create a simple piece of
01:59 - data here I'm going to click this plus
02:01 - icon and this messaging - app - see 3680
02:05 - this is kind of our root node right here
02:07 - and what I'm creating underneath is a
02:10 - key value pair or a name
02:12 - value pair you can think of this name or
02:14 - key as an ID for this value right here
02:17 - I'm going to put customer 1 as Harry
02:24 - that's a simple key value pair where the
02:28 - key is customer 1 and the value is Harry
02:31 - and if I wanted this piece of data Harry
02:34 - I would simply go down this path pass in
02:37 - customer one and get Harry back
02:39 - let's do another one let's say I have
02:42 - another customer and it's Tom so in
02:46 - order for me to fetch Tom I would need
02:49 - customer two now things start to get
02:52 - interesting because we can nest data so
02:57 - let me show you what that means if I add
03:00 - a note here let's make the key customers
03:04 - and for the value instead of specifying
03:08 - a value I'm going to hit plus again and
03:11 - the value of customers is another key
03:15 - value pair so now I have customers and
03:23 - the value what would I get back if I
03:26 - pass in customers is I get back this key
03:29 - value pair instead so now I can start to
03:35 - build out my data like this if I
03:37 - retrieve all the data at this node
03:39 - customers I would get back customer 1
03:43 - Harry
03:43 - customer 2 Tom now let's build upon this
03:46 - let's say that we have more data per
03:51 - customer we don't just have a certain
03:54 - name like that so oops I think I deleted
03:57 - all of my data here customers and let's
04:01 - say I have customer 1 but instead of the
04:04 - value just being Harry what if we had
04:06 - even more data on him and we had his
04:09 - name was Harry so let's add that but in
04:13 - addition we also have let's say Harry's
04:16 - age so let's say he's 20 so that's you
04:20 - know one customer and we have another ID
04:23 - customer two
04:25 - and the value instead of being Tom you
04:29 - know is another set of key value pairs
04:32 - like that and I have Tom's age as well
04:36 - so now you can start to see why it looks
04:40 - like a tree or why it's called the JSON
04:41 - tree because we have our root node here
04:43 - and then we have this branch customers
04:47 - and then inside there we have a bunch of
04:49 - other key value pairs if I you know go
04:52 - down this path customer one that's the
04:54 - ID I get back another two key value
04:59 - pairs like that so even though you can
05:02 - start to nest things like this you don't
05:05 - want to go too far you can actually go
05:08 - down 32 levels deep in terms of nesting
05:11 - right now I think we're at two or three
05:13 - levels but you don't want to get much
05:15 - further than that because when it comes
05:17 - time to retrieving your data and you
05:20 - retrieve this node here it actually
05:22 - retrieves all of the nested data below
05:25 - it even if you're only looking for one
05:27 - little piece of data you're going to
05:30 - retrieve everything under it so it
05:32 - doesn't it's not efficient to have giant
05:35 - nested trees instead you want to flatten
05:37 - your data so that's something that you
05:39 - want to keep in mind when you're
05:40 - designing your data there is a good
05:44 - article here in the documentation I'm
05:47 - just going to put this link in the
05:48 - description and you can read this little
05:51 - article here it tells you how the data
05:53 - is structured like we've covered a JSON
05:55 - tree here but there's also some best
05:58 - practices for structuring your data and
06:00 - it gives you a couple of examples which
06:02 - you can follow okay going back to the
06:05 - database here so an example of keeping
06:09 - our structure flat would be let's say
06:11 - that I also have purchased data so
06:14 - customer one here Harry
06:16 - he bought let's say he bought two
06:18 - products I could create some more data
06:20 - underneath this tree right here but I
06:23 - can also do it this way where let's say
06:26 - we have another node here orders and the
06:29 - value for that would be let's say
06:33 - you know customer one and the value for
06:37 - that would be let's say order one
06:48 - something like that and it's just that
06:52 - in order to something like that so now
07:03 - I've separated the order data from the
07:06 - customer data so if I just wanted a
07:08 - little detail on customer one I could
07:11 - come through this customers path and
07:13 - grab that data without also downloading
07:16 - all of the order data and if I wanted
07:18 - order data on customer one I could come
07:20 - down this node or this branch of the
07:22 - tree and go down orders and grab
07:25 - customer one and kind of get his orders
07:27 - that way so it requires a little bit of
07:29 - foresight on how you're going to use
07:31 - your data in your app but what you want
07:33 - to think about is how to efficiently
07:36 - download only the data you need for the
07:39 - screen that you're presented to the user
07:41 - essentially so in our messages app the
07:45 - structure is actually going to be pretty
07:47 - simple we're just going to have one node
07:49 - called posts and then each post is going
07:52 - to have an automatic ID I'll show you
07:56 - how to create that and then the message
07:59 - body or the text for that post so now
08:02 - that you know how the data is structured
08:03 - we can start to save data and write data
08:07 - into this database in the next lesson so
08:10 - thanks for watching and I'll see you in
08:12 - the next one bye for now
08:16 - you