00:00 - now that we have our mp connection manager class 
created we can start to use it we're going to use  
00:06 - this in our start view where we have to take 
care of our last game type remember we hit  
00:12 - that start button because what we want to do is 
to display all of our peers who have advertised  
00:17 - their willingness to play and select one of them 
so i'm going to break this out into its own view  
00:23 - that i can embed in the start view this will need 
access to our connection manager as well our game  
00:28 - so it's best to inject this into the environment 
but remember we'll need to pass the name of a  
00:33 - player when we instantiate it so we can't do 
this in our app entry point but we can do that  
00:39 - in our start view since we pass in that value 
in our initializer so in start view create a  
00:47 - state object for this connection manager 
that is of type mp connection manager
00:55 - then since this object has not 
been initialized we can do that  
00:58 - in our init function and since it's a 
property wrapper we'll need to use an  
01:03 - underscore to address it then we can create 
a state object type using the wrapped value  
01:11 - argument where we create a new instance of 
our mp connection manager passing in your name
01:20 - when we inject this new object into the 
environment our other views and their  
01:24 - subviews will have access to it and remember in 
our mp connection manager class i have that setup  
01:31 - function that will have to be called from our 
game view that means whenever we present our game  
01:36 - view from here at the full screen cover we should 
inject our connection manager into the environment
01:44 - let's go to game view then and create the  
01:46 - environment object there and also make 
sure that our preview gets an instance
01:58 - then on the on appear function where we reset 
our game we can if our game type is peer call  
02:04 - the connection manager setup function 
passing in the game services game object  
02:10 - so that our connection manager 
can use any of those functions
02:19 - now we need a view that will present all who are 
going to advertise their availability to play  
02:25 - so inside that multipure connectivity group let's  
02:28 - create a new swift ui file 
and call it mp peers view
02:36 - it will require access to 
both our game service and  
02:40 - our connection manager environment objects so 
we'll create two environment objects for them
02:50 - again we'll need to fix the preview
02:55 - and for the connection manager object 
we'll have to use a string for your name  
03:00 - so again we'll just use sample
03:07 - next we'll be using this view to invite 
someone to play or accept an invitation  
03:12 - so if accepted by either we'll want to trigger 
the presentation of the game and that's handled  
03:18 - by the start game property in our start view 
so we'll need to pass in that as a binding
03:30 - then we'll need to add a constant binding 
to false for that property in our preview
03:39 - now in the body let's embed 
the text view inside a v-stack
03:46 - and i'm going to change the string 
to just say available players
03:53 - i'll follow that with a list that iterates over 
all of the connection managers available peers  
03:58 - where the id is self and we can 
do that because each mcpeer id  
04:05 - is unique and we made sure that we 
only add new users to that array  
04:09 - if they don't already exist so this will 
provide us with a peer that we can iterate over
04:17 - within the h stack
04:21 - we'll create a text view using the peers 
display name and follow that with a spacer
04:31 - then we'll have a button that will allow us to 
select them so that the label will be select  
04:39 - and then in the action we'll set 
the game's game type to appear
04:45 - we'll use the connection manager's nearby service 
browser to invite the peer passing in our peer  
04:53 - to our connection manager session and 
then the contacts will be nil because  
04:58 - we're not sending any additional 
data and we'll set a timeout of 30.
05:06 - then we can set the game's player one's name to 
the connection manager's my peer id dot display  
05:13 - name which is the display name for my peer 
id which is my name or the your name property  
05:21 - and then the game two player's 
name will be the display name  
05:25 - of the selected peer that we'll be inviting
05:31 - and let's set that button to 
a bordered prominent style
05:37 - while in start view which will be displaying 
this view if we receive an invitation before  
05:42 - we get a chance to send one out we'll 
have the option to accept or reject it  
05:47 - and this comes by way of the connection manager's 
invitation handler but remember we also created  
05:53 - a boolean property in connection manager that 
is received invite that is set to true when it  
05:58 - gets one so we can use this to present an alert 
so let's attach that to our h stack and for the  
06:07 - title we can use the string received invitation 
from and then use string interpolation to use the  
06:15 - connection managers received from property that is 
a mcpier and we'll use the display name from there  
06:26 - now this is optional so if it 
doesn't exist it actually will  
06:30 - but instead of force unwrapping 
let's just enter unknown as the name
06:38 - is presented is bound to the connection 
managers received invite property
06:48 - won't be needing a message closure so let's 
remove that and stick with just actions  
06:52 - for this alert for our actions we'll have two 
buttons one for accept invite and one for reject
07:04 - for the accept action we can unwrap the 
closure which is the invitation handler  
07:09 - from our connection manager if it exists  
07:13 - then we can use that function passing in 
true and the connection manager session
07:22 - this now establishes a new session we can 
set our game player1 name to the display  
07:29 - name that received from the invite which 
is the same string we used in the alert
07:38 - player two name then will be my device 
so we can use the connection manager's  
07:43 - my peer ids display name
07:48 - and then we can set our game type to pier
07:55 - for the rejection we can again unwrap 
the invitation handler function  
08:00 - but this time pass in false instead 
of true and nil for the session
08:13 - when we tap on this button then we'll be sending 
information to our connected user which will be  
08:18 - received by our delegate function as a start of 
the game this then gives us enough information  
08:25 - to complete that function that we left incomplete 
in the last section of our mp connection manager  
08:30 - class so let's return to it and scroll down to 
the did receive delegate function of the mcsession  
08:38 - delegate extension so here's the case where we 
broke so first we'll do a guard check to unwrap  
08:47 - the player name from our game move object to make 
sure that we got one otherwise we'll just return
08:55 - then we can check to see if 
that name matches the name  
08:58 - already established for player 1 of our game 
object and if so we can make that player current
09:08 - if not we'll make the other player current
09:15 - back in mp piers view let me find 
the closing bracket on that h stack  
09:22 - now when our view appears we want to 
advertise our availability to play  
09:26 - and start browsing for others so let me 
add that on a peer modifier to our v stack
09:35 - then we can set the connection managers 
is available to play property to true
09:44 - and then we can call the connection 
manager start browsing function
09:50 - now when we accept an invite 
or have an invitation accepted  
09:54 - this view will disappear and 
the game view will be presented  
09:58 - so let's add an on disappear block after the on 
appear one and within there we can stop browsing  
10:08 - and we can stop advertising and we can set 
our is available to play option to false
10:21 - then we can watch for changes on the 
paired property which initially is false
10:28 - but when it changes we'll get a new value and 
we'll set our start game to that new value
10:38 - now in start view we can replace the empty view 
for the game type switch statement in the v stack  
10:45 - for our peercase which will present the mcpeerview 
passing in our startgamestate boolean property  
10:53 - that triggers the gameview's full screen cover 
and we can inject our connection manager state  
10:59 - object into the environment so our mppeerview will 
have access to those game functions and properties
11:07 - now i don't know if you notice but i have my 
test iphone connected to xcode and it's running  
11:12 - ios 15. so let me run it on this device i'm using 
quicktime to display to my screen so let me bring  
11:19 - it into view now because it's a first launch i'm 
required to enter my name as expected so let's  
11:26 - enter collin which is actually my first name now 
i'm going to select the challenge a friend mode  
11:35 - now the first time i use this app i'm presented 
with a request to find and connect to devices  
11:40 - on the local network and that string here is the 
one that we entered in the p list so let me just  
11:46 - tap ok i see that there is no one yet who wants to 
play but i am advertising my availability as call  
11:54 - it so let me now run on my iphone 14 pro simulator 
at the same time i'm going to minimize xcode so  
12:02 - that we can see both of our devices clearly 
i'm not asked to enter my name here because  
12:06 - i entered it already and this device is stuart 
so let me challenge a friend on the simulator  
12:13 - when this screen appears i see that colin is 
available to play on the simulator and on the  
12:19 - phone i see that stewart is available to play 
and the game can be initiated by either player  
12:26 - so let me tap on the select button on my 
real phone to invite stuart on the simulator  
12:32 - the request is made and stewart on the simulator 
gets that alert where he can accept or reject  
12:39 - well let's accept and when that's done  
12:43 - the items are paired and start gain gets 
set to true on both devices and the game  
12:50 - view appears all we have to do now is to fix 
our code that will send our next actions over
13:04 - so we'll need to add code in our actions 
to send our paired player if the game type  
13:09 - is peer so within game view for 
our first start button for player 1  
13:16 - if the game type is equal to pier we can 
create a gamemove object that will be an  
13:24 - mpgamemove object where the action is start and 
the player name will be the game.player1.name
13:33 - and since we're not making any 
moves the index will be nil
13:39 - having that then we can use the 
connection manager's send function  
13:43 - to send this game move over 
to the other paired device
13:50 - well the second button for the second 
player is going to be pretty much identical  
13:57 - the only difference is that our 
player name will be the player 2 name
14:05 - in the new game button we 
do a similar check for the  
14:09 - game move and this time though for 
our game move the action will be reset  
14:16 - and there'll be no need to pass in a 
player name or an index so both will be nil
14:23 - and once we do that we can send it on using 
that send function from our connection manager
14:32 - for the end game once more we'll 
do a check on the game type
14:38 - and we'll create the same kind of mp game move 
as we did for our new game but the action is end
14:50 - and then pass that on
14:55 - i do want to add some more conditions to 
our game board's disabled check though  
14:59 - so add an or operator and we'll 
check if the game type is a peer  
15:07 - and the connection manager's my peer display name 
is not equal to the game dot current player name  
15:14 - and this will prevent me from 
making a move while it's not my turn
15:24 - switching now over to square 
view i'll need access to the  
15:27 - connection manager object from the environment
15:33 - and as always we'll have to inject 
an instance in the preview provider
15:43 - now when a button is tapped then 
if the game game type is pure
15:50 - we can create our mp game move 
with an action of move this time  
15:55 - and pass along the my peer ids display 
name from our connection manager property  
16:01 - and this time we'll have to pass in the 
index of the object that's being moved
16:09 - and send that over
16:13 - i think we're done so let's test
16:17 - first let me run on my simulator
16:24 - then let me run on the test iphone se
16:33 - as i see when i select challenge a friend on both 
devices we see the opposing player is available
16:41 - i'll have the simulator 
challenge collin on the iphone se  
16:47 - and i'll accept on the phone on the simulator 
i'm going to tell the iphone to start and that  
16:56 - action is sent over and the game is started 
with collins player button showing in green
17:06 - and now when on the iphone i tap on a square 
the move is sent over and stuart is now active  
17:15 - i can continue on back and forth now until a 
winner is declared or we've reached a stalemate
17:25 - on the simulator after we have ended a game  
17:29 - i decide that i no longer want to play against 
holland i can choose a different game mode  
17:34 - and when i do that colin on the iphone no longer 
sees me as being available because i've stopped  
17:42 - advertising now there's one thing 
i don't like though and that's  
17:47 - that not displaying while on the iphone 
se and that's because i added that extra  
17:52 - button to change the name and originally 
i had not counted on that so let's go back  
17:57 - and adjust the frame of the image so 
that it will fit on the smallest device
18:05 - so back in start view then i can find that image 
of the launch screen and make it first resizable
18:15 - scale to fit
18:19 - and i'll set a frame of a width 200.
18:26 - let's test then once more on the iphone se
18:33 - that's much better
18:36 - so just for completeness sake then let's commit 
our finished project to the git repository
18:45 - well i hope you've learned some 
things from this video series  
18:48 - and i would really like to thank chris 
ching for allowing me to share my passion  
18:52 - on his channel thanks so much for sharing 
your time with me i hope you enjoyed it