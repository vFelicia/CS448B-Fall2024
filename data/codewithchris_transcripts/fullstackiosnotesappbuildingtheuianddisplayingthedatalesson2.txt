00:00 - hey code crew in this lesson you're
00:02 - going to start building the ios notes
00:04 - app that is going to connect to the web
00:05 - server and database that you set up in
00:07 - the previous lesson
00:08 - if you haven't seen that lesson yet i'll
00:10 - link to it in the description below and
00:12 - on a card on the screen by the end of
00:14 - this lesson you'll have set up the user
00:16 - interface for the app
00:18 - the data fetching through your api and
00:20 - being displayed
00:21 - in that user interface and just like in
00:23 - lesson one ali will be your teacher
00:25 - ali take it away all right now that
00:28 - we've got our actual server done
00:30 - and we can create read update and
00:32 - destroy various notes
00:33 - the next thing we'll start working on is
00:35 - our actual iphone app
00:37 - so let's just get right into it so the
00:39 - first thing you're going to do is open
00:40 - up xcode and create a new project
00:43 - and it's going to be a single view app
00:45 - and you can name it anything you want
00:46 - it's called node app
00:48 - and we're going to be using swift and
00:50 - storyboard and you don't need to check
00:52 - anything else
00:54 - so you can save that wherever you want
00:58 - and then let's make that full screen and
01:00 - jump into
01:01 - storyboard so in our storyboard file
01:05 - the first thing we're going to do is add
01:07 - a navigation controller
01:09 - and what the navigation controller
01:10 - allows us to do is handle navigations
01:13 - so for example on the main screen i'm
01:15 - just going to have my list of notes
01:17 - and then like when i click add note i
01:18 - want to go to a different screen where i
01:20 - can add the notes
01:21 - and once i added the note i can go back
01:23 - to the main screen
01:25 - and the way you do that is by using a
01:26 - navigation controller
01:28 - so on your main view controller click it
01:31 - and go to editor
01:33 - and you can see embed in and when you
01:35 - see the embedded button click navigation
01:37 - controller
01:39 - and this will make a navigation
01:40 - controller so when so now what you want
01:42 - to do is make sure when you click on the
01:44 - navigation controller
01:46 - that it's set to is initial view
01:47 - controller now we've got that we're
01:49 - going to add one more view controller
01:51 - and this is going to be the adding the
01:53 - note view controller
01:54 - so just type in view controller and
01:57 - it'll come up
01:58 - and just drag that view controller onto
02:00 - your screen
02:02 - now what we want to do is get both of
02:03 - these views set up
02:06 - so on the first one we're going to add a
02:08 - bar button item
02:10 - so just search bar button item and drag
02:12 - it onto the top
02:13 - of the view controller on the top right
02:16 - and this is going to be our add new note
02:18 - button
02:19 - so if you go into the
02:23 - if you go into the attributes inspector
02:25 - and change the title
02:26 - you can just call this add note like
02:29 - that
02:30 - now if we also click on the actual blank
02:32 - space we see the title button
02:34 - the title label we can just set that to
02:36 - notes
02:37 - so now we have notes and add note now
02:40 - what we want to do is
02:41 - option hold option and drag the add no
02:43 - button
02:44 - onto the view controller the second one
02:47 - and once it asks you for actions i
02:48 - segway click show
02:51 - this will actually make another
02:53 - navigation bar on the second view
02:55 - controller
02:56 - and allow us to navigate between the two
02:57 - different pages
02:59 - now we're going to do is add a table
03:01 - view
03:02 - let's trade for table view and drop it
03:04 - on and set the constraints to zero on
03:07 - all sides
03:08 - zero zero zero zero and what this is
03:11 - going to do is actually stretch the
03:12 - table view across the screen
03:15 - and now what you want to do is add a
03:16 - table view cell
03:18 - like that we're gonna start customizing
03:20 - the cell later but just have it
03:22 - just drop it in here for now the next
03:24 - thing you want to do
03:25 - is focus on customizing the adding note
03:28 - screen
03:29 - so on the top we can change the title to
03:31 - add note
03:33 - like that we also want buttons to save
03:37 - so if you search for a bar button item
03:39 - again
03:40 - you can drop in two this time so we can
03:44 - add a button to save
03:45 - so just double click the button or set
03:48 - the title
03:48 - by clicking on it to save and the other
03:52 - button will be delete you can also
03:55 - change the
03:56 - text color by clicking on it and
03:59 - changing the tint
04:00 - to red for delete so now you got the
04:04 - delete and save button
04:05 - now we're gonna do is add a text field
04:10 - and you can just drag it onto the screen
04:12 - and you're gonna click the little
04:14 - constraint again
04:15 - button on the bottom you're gonna set
04:17 - the top to 15
04:18 - that'll give a little bit of padding
04:20 - between the actual text field
04:22 - and the navigation bar and we're also
04:24 - going to set the size to 10 and 10.
04:28 - again we want to stretch all the way but
04:30 - we want to leave a little padding
04:32 - we're not going to mess with the bottom
04:33 - constraint for now
04:36 - so we can see there's a little bit
04:37 - padding on top and left and right
04:39 - now we're going to add something called
04:40 - a text view and it's the same thing as a
04:43 - text field but you can add multiple
04:45 - lines
04:46 - because in a text field there's only one
04:47 - line you can enter
04:49 - in textview you can enter paragraphs so
04:51 - now we're going to set the constraints
04:53 - on the
04:53 - text view we're going to set the top to
04:56 - 15
04:57 - and the sides to 15 as well
05:01 - so that'll stretch it across the screen
05:03 - but leave a little bit of padding
05:05 - like that so now if i run my app so if i
05:08 - click the play button and run it
05:10 - i should see the two screens and i
05:12 - should be able to navigate between them
05:14 - so my app launches on this table view
05:18 - and when i click the add note button it
05:19 - goes into this screen
05:21 - so in this screen i can write stuff
05:25 - i can write stuff and also up here i can
05:28 - write a new note
05:31 - and these button don't work right now
05:32 - but eventually they're going to save and
05:34 - delete
05:35 - and when i click the notes button back
05:36 - here i should go back to the main screen
05:39 - all right now that that works let's
05:41 - actually start writing some code
05:42 - so now what i want to do is actually be
05:44 - able to
05:46 - interact with the table view
05:47 - programmatically so i'm going to click
05:49 - the little plus button on the top right
05:52 - and it's gonna give me two screens on
05:54 - the first screen i'm gonna open the view
05:55 - controller and on second screen i'm
05:57 - gonna open my
05:58 - storyboard so what i'm gonna do is
06:01 - click the storyboard hold option and
06:03 - drag it onto the view controller
06:06 - and it's going to say insert outlet so
06:08 - i'm going to choose outline i'm going to
06:10 - call this main
06:11 - table or also call this notes
06:14 - table view like that
06:18 - so now i'm able to programmatically
06:20 - interact with the notes table view
06:22 - i also have to conform to something
06:24 - called a protocol
06:27 - i'm going to add a comma after ui view
06:29 - ui view controller
06:31 - and i'm going to type in table view
06:36 - delegate ui table view delegate and i'm
06:39 - going to click on that
06:41 - so the next thing i'm going to write is
06:43 - notes table view
06:46 - dot delegate is equal to self
06:49 - and notes table view dot
06:53 - data source is equal to self and what
06:56 - that means is i'm telling the story
06:57 - board that
06:58 - this view controller will be providing
07:00 - the data
07:01 - for this table view so now it gives me
07:04 - an error says cannot assign
07:06 - and it says add missing conformance so
07:08 - click fix on that
07:10 - and it's going to add also the data
07:12 - source protocol right there
07:14 - data source delegate and now what
07:16 - happens is
07:17 - it says the view controller does not
07:19 - conform to the protocol
07:21 - so we're going to click is fix and what
07:23 - the fix will do is give you
07:25 - a couple of functions and these
07:27 - functions are functions you have to
07:29 - answer
07:30 - so the table view knows what to display
07:34 - the first one is number of rows so if i
07:36 - just write return
07:39 - 5 and on next function
07:42 - where it says cell for row at it's
07:45 - asking me to customize the cell and what
07:47 - to display for the cell
07:49 - let's sell equal to table view dot
07:52 - dq reusable cell with identifier
07:56 - dq reels will sell with identifier for
07:59 - index path
08:01 - so we have to give our table view cell
08:04 - an identifier
08:05 - so if you go back into your
08:06 - main.storyboard
08:09 - you click on the prototype cell you'll
08:12 - see it says identifier so we can just
08:14 - call this prototype
08:17 - we can just call it prototype cell
08:20 - and what that allows us to do is
08:21 - actually reference the cell so we can
08:23 - customize it
08:25 - so now we're just going to type
08:29 - the name we named it so we named it
08:30 - proto
08:32 - type cell
08:36 - and then for index path we just give it
08:38 - index path
08:39 - which means the cell we're clicking on
08:42 - so this could be the first cell in the
08:43 - row the second cell in the row
08:45 - the third cell in the row and the
08:46 - breathing screaming error because index
08:48 - path
08:49 - should be lower case like that now what
08:52 - we're going to do is say cell
08:55 - dot label and we're going to say
09:01 - note and we want to return the cell
09:04 - so what we've done here firstly is
09:06 - created five cells the next thing we've
09:08 - done is we've created a prototype cell
09:11 - using this keyword table view dq
09:13 - reusable cell
09:14 - and we're customizing that cell and
09:16 - returning it
09:18 - so once we actually start getting our
09:20 - notes array
09:21 - we'll actually customize each cell with
09:23 - a certain note
09:24 - but for now we're just hard coding each
09:26 - cell with the string note
09:28 - and the reason is giving me an error
09:30 - when i write cell dot text label
09:32 - is because i write cell dot text label
09:34 - dot
09:35 - and that allowed to set so now if i run
09:38 - this app
09:39 - it should give me five rows and each row
09:41 - should say note on it
09:43 - like that okay now our app is getting
09:45 - there so now instead of hard coding the
09:47 - word note onto each
09:49 - cell i want to actually pass in an array
09:52 - and i want it to render each element of
09:54 - the array as a row
09:56 - so let's create an array first i'll call
09:58 - this notes array
10:00 - and for now let's just make it an array
10:02 - of strings
10:04 - so we can write note one
10:11 - so that'll be note 5
10:15 - note 4 note 3
10:19 - and note 2. so now what we're gonna do
10:22 - so instead of writing cell label cell
10:25 - dot text label dot text equal to note
10:28 - we're gonna set this to notes array
10:33 - to the index path dot row
10:37 - now when i refresh this and i build it
10:40 - onto my iphone
10:41 - i see i have the array of notes now so
10:44 - if i add a new note into the array
10:50 - and i refresh it i don't actually see
10:53 - the new note when i click that and the
10:54 - reason that happens
10:56 - is because i'm returning five i told it
10:58 - i just want five rows
11:00 - but now we want to have an as many rows
11:03 - as there are elements in our array
11:05 - so i'm just going to write notes
11:07 - array.count
11:09 - and this means it's going to return as
11:10 - many rows as there are things in my
11:12 - array
11:13 - so if i just build this now
11:17 - i'm gonna see i have six notes and if i
11:19 - just double this array now
11:21 - so if i just copy this array
11:26 - and paste it i'll have more notes now
11:28 - like that
11:30 - all right now you can see how instead of
11:32 - having an array of strings
11:33 - we would actually have an array of
11:35 - actual notes
11:36 - and every time the user adds a note we
11:39 - add it to the
11:40 - cert we add it to the database and then
11:42 - every time the user wants to see a note
11:45 - we just ask the database to give all the
11:46 - notes back and we put it back in the
11:48 - array
11:49 - and then the table view refreshes itself
11:52 - and displays all the notes that are in
11:54 - the array
11:55 - all right now that we're done the
11:56 - storyboard part and we have our table
11:57 - view
11:58 - and it can display an array the next
12:01 - thing we want to do is actually get our
12:02 - data from the server
12:04 - so remember when i type my url and go to
12:06 - fetch row and i click enter
12:08 - i get this data back well i want this
12:10 - data to show in the iphone now
12:12 - so the first thing i'm going to do is
12:14 - i'm going to install something called
12:16 - alamo fire
12:17 - so if you just type lmo fire github
12:22 - you'll get the link to that so you just
12:24 - have to copy this and what lml fire does
12:26 - it makes it really easy
12:28 - for us to contact the server and send
12:30 - and receive data
12:32 - so just copy that go into your xcode
12:34 - project go into files
12:36 - swift packages and click add package
12:39 - dependency
12:41 - and then just paste the link and click
12:43 - next
12:45 - and next and finish so that installed
12:47 - elmo fire so we can use in our project
12:50 - so the next thing i'm going to do is
12:51 - make a new file so i'm going to right
12:53 - click on my folder
12:54 - click on new file and i'm just going to
12:58 - make it a swift file and i'm just going
13:01 - to name it
13:01 - api functions
13:06 - and this file will actually be the file
13:08 - that contacts the server and receives
13:10 - and sends data
13:13 - so i'm just going to make a class and
13:15 - call it api functions
13:19 - all right so now what's going to happen
13:21 - is the iphone needs to ask the server to
13:25 - send back
13:26 - this data but we need to define an
13:29 - object so the iphone knows what a note
13:31 - looks like
13:32 - so we know a note has a note a title and
13:34 - a date and id
13:35 - we have to tell the iphone that a note
13:37 - holds these things
13:39 - so what we're going to do is we're going
13:41 - to define a struct so just type instruct
13:44 - and call a note
13:48 - the note has a var title which is a
13:51 - string
13:53 - of our date which is a string
13:58 - of our id which is a string
14:02 - end of our note which is also a string
14:06 - all right so now that we've defined a
14:09 - notes object
14:10 - we can get the data from our server and
14:13 - we can turn it into a notes object
14:15 - so the iphone knows what a note looks
14:17 - like and then we can just say
14:19 - give me the date title of this note or
14:21 - give me the date of this note
14:22 - and it'll give us that information
14:26 - and we probe var id is a string but in
14:29 - our actual data object we know that var
14:31 - id
14:32 - is actually called underscore id so it
14:34 - doesn't matter too much
14:36 - but just to be consistent we can change
14:38 - this to underscore id
14:41 - so now what we're going to do is we're
14:42 - going to type import
14:45 - alamo fire and that allows that to use
14:47 - alamo fire in our project
14:49 - so i'm going to make one function so and
14:51 - i'm going to call it
14:52 - fetch data or fetch notes
14:58 - it returns nothing so in our fetch notes
15:01 - we're going to write
15:03 - af dot request
15:08 - and we're going to pass in the string we
15:11 - want it to go
15:12 - to so the string was what we typed in
15:15 - our browser right here
15:16 - so just copy that and go into xcode and
15:20 - paste it and we're going to write dot
15:21 - response
15:24 - and then we're going to put two curly
15:25 - brackets and type in
15:28 - response in so what this means
15:33 - is we're gonna make a request to the
15:35 - server and we want the response
15:38 - and then once we got the response the
15:40 - response in
15:41 - keywords allow us to actually access
15:43 - that data
15:45 - so i could do something like print
15:48 - response and it would print the whole
15:50 - response the service sends me back
15:52 - but we only want the data the server
15:54 - sends back like the note the title and
15:55 - the date
15:56 - but the response object also holds
15:59 - things like
16:00 - print statements it holds times and it
16:03 - tells us if
16:04 - it failed or not but we don't need that
16:05 - information so we can just type
16:07 - response.data instead
16:09 - so that'll only give us back the
16:11 - server's actual data and we don't need
16:13 - the under
16:13 - other information but now what we're
16:16 - going to do is go right
16:18 - let data is equal to the string
16:21 - and the data will be response.data
16:27 - and the encoding will be utf-8
16:31 - and what that allows us to do is turn
16:33 - the data
16:35 - and you can just force unwrap it with
16:37 - exclamation mark
16:38 - what that allows us to do is turn the
16:40 - data the server sends us
16:42 - into a string we can actually parse and
16:44 - the encoding of that is utf-8
16:47 - so that basically allows us to convert
16:50 - this data the server sends us into this
16:53 - object we defined here and we have to
16:55 - make one more change to this object
16:58 - we have to make it a decodable and that
17:00 - basically means we can decode
17:02 - what the server is sending us into this
17:04 - object so we can access it and use it
17:07 - and now what i'm going to do is
17:08 - create a delegate and protocol method
17:10 - which will allow us to send this data
17:12 - over to the view controller once the
17:14 - server sends back the data
17:17 - so we're going to call this function to
17:18 - fetch nodes it's going to go to the
17:20 - server and it's going to receive the
17:22 - data
17:22 - and once it receives the data we want it
17:25 - to send this data
17:26 - that it took back to the view controller
17:29 - so we can update the array
17:30 - so the way i'm going to do that is
17:32 - create a custom protocol on delegate
17:34 - so the way we do that is go back into
17:36 - our functions our api function class
17:39 - and write self dot delegate
17:45 - dot and i'll just name it update array
17:50 - and it'll take in a new array and the
17:53 - array will be data
17:55 - we haven't defined this yet so it's
17:57 - actually giving me an error but in the
17:59 - view controller we're actually going to
18:00 - define what this
18:01 - update array method does and it's giving
18:03 - me an error because that it doesn't know
18:05 - what delegate is
18:06 - so we can just write var delegate
18:11 - colon data delegate
18:14 - and
18:20 - did delegate question mark like that so
18:23 - that'll remove this error but still
18:25 - doesn't know what the update array
18:26 - method is and that's what we're going to
18:28 - work on next
18:33 - and the reason is giving me the error
18:35 - saying unuse of undeclared type data
18:37 - delegate
18:38 - is that doesn't know what a data
18:39 - delegate is so what we're going to do is
18:41 - we're going to go to the view controller
18:45 - and right here i'm going to outside of
18:47 - the class
18:48 - i'm going to define what a delegate is
18:50 - and what it does
18:51 - summary protocol and the protocol's name
18:55 - is going to be data delegate
19:00 - so it calls a function called update
19:02 - array
19:04 - and that function takes in a new array
19:09 - which is a string so now if i go back to
19:13 - my actual
19:14 - functions file over here this error if i
19:17 - go to product and click on clean build
19:20 - folder
19:20 - it should remove that error so now it
19:22 - knows what data delegate is
19:26 - so now what happens is this function
19:29 - fires off
19:31 - it goes to our fetch route and it gets
19:33 - all the data
19:34 - it turns the data into a utf-8 encoding
19:37 - which will allow us to
19:39 - easily parse it into this note structure
19:42 - we made
19:43 - and then it calls this delegate and what
19:46 - this delegate does
19:47 - is it tells the view controller to fire
19:50 - off this function called update array
19:52 - now we haven't defined this function
19:54 - right yet that's what that's what we're
19:56 - going to do right now
19:58 - so outside of the view controller class
19:59 - i can write extension
20:04 - view controller and then i'm going to
20:06 - write a colon data delegate
20:12 - if you don't want this you could also
20:13 - write a function inside your actual
20:15 - class but this makes it a bit cleaner
20:17 - it just means that this block of code is
20:19 - a part of the view controller
20:20 - and what it's doing is it's conforming
20:22 - to the data delegate protocol
20:24 - just like how we had the ui table view
20:26 - delegate and the ui data source delegate
20:29 - and because of that we had to answer
20:31 - these two questions right
20:32 - how many rows we want in our table and
20:35 - what we want in each cell
20:37 - this time we're conforming to the data
20:39 - delegate protocol
20:40 - so we're going to have to answer this
20:42 - question and the question will be update
20:44 - array
20:45 - so all we have to do is update the array
20:48 - so now what we're going to do
20:50 - is we're going to define this function
20:51 - called updatearray
20:53 - so i'm just going to type func
20:57 - updatearray and it autocompletes it
21:01 - takes a new array which is a string
21:03 - and now in here what i'm going to do is
21:05 - i'm going to make a do
21:06 - try block so you have your do here
21:10 - and it's going to try something and if
21:12 - it fails
21:14 - you can catch it and then you can print
21:16 - out the error
21:17 - so usually if we do something without
21:20 - the do catch block what's going to
21:21 - happen
21:22 - is if it fails the app is going to crash
21:26 - but due to this if it fails it'll just
21:28 - go in the
21:29 - catch block and it'll print out the
21:30 - error without crashing the app
21:34 - and we're going to type is notes array
21:39 - notes array is equal to json decoder
21:43 - decode
21:46 - and self is going to be
21:51 - the array of notes
21:54 - so now where we're going to write is
21:56 - notes array is equal
21:58 - to try json decoder dot decode
22:03 - and we're going to try the array of
22:05 - notes dot self
22:09 - and what you're going to type is from
22:12 - new
22:13 - array dot data
22:16 - and then you're gonna get the you're
22:19 - gonna get the auto complete so just
22:20 - click on the first one
22:22 - and using the encoding we're gonna use
22:25 - is dot utf-8
22:28 - like that and what we're going to do is
22:30 - we're going to add exclamation mark at
22:31 - the end of that
22:33 - and then in the catch block we can just
22:34 - print
22:37 - failed to decode
22:41 - now the next thing is this array that
22:43 - we've defined here called notes array
22:45 - is an array of strings but we want to
22:47 - make it an array of notes right
22:50 - so what we're going to do is we're going
22:51 - to clear out the text
22:54 - inside here and we're going to write
22:57 - note
22:58 - and we're going to add two round
23:00 - brackets and what this means
23:02 - is that's an array of these note objects
23:05 - we defined over here
23:07 - so the note object has titled date and
23:09 - id and a note
23:10 - so now we have a whole array full of
23:12 - them
23:14 - and we're also going to add two round
23:16 - brackets after json decoder
23:18 - like that me one error says use of
23:21 - unresolved identifier notes
23:23 - well because i defined it as a note not
23:26 - a notes
23:27 - so i'll just remove the s over here like
23:30 - that
23:30 - and the next thing we're going to do is
23:33 - that it says cannot assign value of type
23:35 - nope to string
23:36 - so we have to customize ourselves
23:38 - correctly after this
23:40 - so we're just going to hash this out
23:41 - right now and we're actually going to go
23:43 - back to our api functions file over here
23:47 - so first of all we have to force unwrap
23:49 - it so just click on the error and click
23:51 - the exclamation mark also going to write
23:53 - one more thing in our api function file
23:55 - so write static let functions
24:00 - equal api functions with two round
24:03 - brackets
24:04 - and what that does is actually creates
24:06 - an instance of the api function
24:08 - class so now we can access these
24:11 - functions
24:12 - from outside of the class so now the
24:14 - view controller can actually call these
24:16 - functions
24:17 - to get and receive the data now the last
24:20 - thing we're going to do is go into the
24:21 - view controller
24:22 - and on the view to load we're going to
24:24 - write just like how we had to tell the
24:26 - notes table view that the delegate was
24:27 - the view controller
24:29 - we're going to write api functions dot
24:32 - functions dot datadelegate
24:36 - or delegate is equal to self
24:41 - so now the api functions class
24:44 - knows that this function update array is
24:47 - being handled by the view controller
24:49 - it knows who to send the data we got
24:51 - from the server to
24:52 - it's going to call the update array
24:54 - function which is located in our view
24:56 - controller
24:57 - so now that's done we can actually try
24:59 - seeing if it works
25:01 - so now if i in my view did load if i
25:04 - write api
25:05 - functions dot functions the fetch date
25:08 - fetch notes
25:10 - and then i print the notes array
25:14 - i shouldn't see anything on my screen
25:16 - but i should see an array of
25:18 - notes and those notes should be the same
25:20 - notes
25:21 - that we get in our browser here so if i
25:24 - just run that let's see what happens
25:27 - i'm gonna see that it prints out update
25:30 - updated
25:31 - and it has the id and the note and also
25:33 - has title
25:34 - date and note so if i go back here i see
25:37 - updated update and update i see title
25:40 - date and note
25:41 - so we know the iphone is actually
25:43 - contacting our server and getting the
25:45 - data
25:46 - and it's attaching that data to a notes
25:50 - array
25:51 - so now i can use this notes array to
25:54 - show the data
25:55 - in the actual table view just like just
25:58 - like how we did before
25:59 - with the array of strings but now we
26:01 - have actual notes we can display
26:04 - so now if i go back into my actual
26:06 - protocol
26:07 - functions over here remember when we
26:09 - asked told it how many
26:11 - remember when we told the how many rows
26:13 - we want and what the title
26:14 - each row should be now the function is
26:18 - still the same over here knows the radar
26:20 - count
26:20 - so it's going to print as many rows as
26:23 - we have objects in our array so we have
26:25 - two in this case
26:26 - but in the actual cell when we're
26:28 - customizing it we can now do
26:31 - cell label.text is equal to nose array
26:34 - index path dot row
26:36 - dot title let's say we should see the
26:39 - title of each note on our actual table
26:41 - view
26:41 - so when we run our app we don't actually
26:44 - see the data
26:45 - but we know it's being printed here and
26:48 - the reason that is
26:49 - is because notes array at the very
26:50 - beginning is empty
26:52 - so then we say return the amount of
26:55 - items in notes array
26:56 - and when the app runs at the very
26:58 - beginning the amount of items and notes
26:59 - array is zero
27:01 - and there's also nothing in the array so
27:03 - that's why it gives us
27:05 - the empty table view and after that
27:08 - these functions are called
27:10 - which fetches the notes and once it
27:12 - fetches the note
27:13 - it updates our notes array which is what
27:15 - we get here
27:16 - but the table view is still using the
27:18 - old array instead of the new one
27:20 - so at the end of this function
27:24 - we can just write a line of code which
27:26 - says self
27:27 - dot nodes table view
27:30 - dot reload data and what that'll make it
27:34 - do
27:34 - is that whenever we get a new notes
27:36 - array we're actually going to reload the
27:38 - data on the table view so always be
27:40 - updated
27:42 - so now if i build my app again we'll see
27:45 - that we see our update and title
27:48 - so now what's gonna happen is if i go to
27:50 - postman
27:55 - and i actually add a new item in and i
27:58 - restart my app i should see the new item
28:00 - in my array
28:04 - so let's go to slash create
28:09 - and we'll pass in
28:12 - new item new item
28:16 - new item like that and i'm gonna send
28:20 - that to the server and it says save data
28:23 - so what happens now is if i go to my app
28:27 - and i close it and i restart my app i
28:31 - just see my new data
28:33 - and there it is new item so now we're
28:35 - sending data using postman
28:38 - but we're fetching the data using our
28:39 - iphone app so now the next step
28:42 - is to be able to send our data using our
28:44 - no add note button here
28:46 - so whenever the user type something over
28:48 - here and click
28:49 - save we want to send that data to our
28:51 - actual
28:52 - server now but the first part is done
28:55 - where we're actually receiving data from
28:56 - our server
28:59 - so now you have your app connecting to
29:01 - the api fetching the data
29:02 - and displaying it in the user interface
29:05 - in the next lesson you're going to
29:06 - implement
29:07 - adding editing updating and removing
29:10 - notes
29:10 - now i want to turn it over to you have
29:12 - you done any web development before
29:14 - do you happen to be a web developer
29:16 - learning ios let me know by leaving a
29:18 - quick comment below
29:19 - and if you like this video please give
29:21 - it a thumbs up and don't forget to
29:22 - subscribe to the channel for the next
29:24 - lesson
29:24 - oh yeah and if you want to see more app
29:26 - series like this and courses on other
29:28 - ios topics
29:29 - then definitely check out cwc plus i'll
29:32 - leave a link to it in the end screen
29:34 - and in the comments below alright i'll
29:35 - see you in the next lesson