00:00 - all right so this is the solution for
00:02 - the challenge and just to recap I asked
00:04 - you guys if you could do nine cards with
00:07 - two buttons the first button spinning
00:09 - only the middle row and the other button
00:13 - spins all of the cards and matches all
00:16 - three rows plus diagonals so that's what
00:18 - we're going to do today so the first
00:20 - thing we're going to do is actually to
00:23 - increase the number of cards that we
00:25 - have and this is actually relatively
00:28 - simple so we're gonna go into we're
00:35 - gonna go down to where the card view is
00:37 - I gave you guys a tip last time where
00:41 - you know you're not going to be able to
00:43 - just create three rows like this because
00:47 - you're gonna get an error which is not
00:50 - very helpful it tells you that there's
00:53 - an error with this corner radius
00:55 - modifier but that really isn't the case
00:57 - the problem is that in the stack view
01:00 - that we have that contains everything
01:02 - it's got more than ten elements and
01:04 - right now stack views can only have a
01:06 - max of ten in fact any sort of container
01:08 - layout element can only have up to ten
01:11 - and so what we're gonna do is in case
01:14 - these three H stacks you know these are
01:19 - our nine cards here inside its own V
01:22 - stack so I'm gonna cut all of that I'm
01:25 - gonna declare a new or write a new V
01:29 - stack there and just paste all three
01:30 - rows and we should see all the cards
01:35 - alright so that's really cool the next
01:38 - thing to do then since we have so many
01:41 - cards is to expand expand our numbers
01:47 - and backgrounds because these two arrays
01:49 - represents the different slots or
01:53 - indexes for these cards and now we have
01:56 - more than three so we need you know we
01:58 - need nine so one easy way to to do it is
02:05 - like you could you could just create
02:08 - more elements in your array literal like
02:11 - that
02:12 - but there actually is a method for
02:14 - creating a race if you want to fill it
02:18 - all with the same value and I'm gonna
02:20 - show you that in a second but let me
02:21 - just show you this way right now so
02:23 - there are six and there's nine so you
02:25 - could do it like that and you can have
02:26 - each of these indexes represent a
02:28 - different card so we're gonna erase this
02:31 - literal here and we're gonna declare a
02:35 - new array object and we're gonna use
02:38 - this initializer here it creates a new
02:41 - collection containing the specified
02:43 - number of single repeated value so the
02:45 - value is going to be we're just gonna
02:48 - put zero and the count is going to be
02:50 - nine for that and then for this one for
02:54 - backgrounds we're going to do the same
02:55 - thing alright and we're gonna use this
02:59 - repeating one and it's gonna be color
03:03 - white and again nine then we can erase
03:08 - this literal here all right so that's
03:13 - what we have and the next step is to
03:16 - update all of these card views we're
03:19 - going to pass the appropriate bindings
03:21 - in so this one is going to be at index
03:24 - zero one two three four five six seven
03:27 - eight right I almost counted nine you
03:31 - guys probably caught that and he so
03:33 - there's three this one's for since five
03:39 - this one six seven and eight and if we
03:47 - just update this where we should see all
03:50 - of them as apples right okay so now the
03:56 - next step is to take a look at our spin
03:58 - button here so what it does right here
04:03 - is it sets all the backgrounds to white
04:05 - and then it randomizes a number for the
04:09 - three cards and then it it checks for
04:14 - the winnings like if zero matches one in
04:18 - one matches two then you know that all
04:20 - three match and then it updates the
04:23 - credits and then it's
04:25 - the background to green so in the last
04:28 - lesson when I finish the slots app I
04:33 - taught you guys about the map method for
04:37 - a race and we're actually going to use
04:40 - it now because setting nine different
04:43 - backgrounds and like you know
04:46 - randomizing nine different cards and
04:48 - setting nine different records to green
04:50 - is just is too much so we're gonna make
04:54 - use of that map function here but before
04:58 - that we're gonna abstract this code out
05:00 - into its own method the reason being
05:03 - right now we've written this code
05:05 - directly in the closure for the action
05:08 - for this button but we remember it we're
05:11 - gonna have a second button that is gonna
05:13 - have very similar code because that
05:15 - button is gonna set all the backgrounds
05:17 - white as well but it's gonna randomized
05:19 - all nine cards and it's gonna set the
05:21 - backgrounds to the matches to green and
05:23 - it's gonna calculate the winnings as
05:25 - well
05:26 - so rather than repeating this code right
05:29 - for nine different cards we're gonna
05:31 - kind of abstract it out and write it
05:35 - more elegantly so what I'm gonna do is
05:39 - I'm gonna create a method right here
05:42 - right before the closing bracket of this
05:45 - body property we're gonna call it
05:48 - process results alright and we're gonna
05:53 - need to know if we're processing the
05:55 - results for one spin or like the maximum
05:58 - number of spins which is like all three
06:00 - so I'm gonna have a boolean to say is
06:04 - max and this is going to be a bull all
06:07 - right let's default it to false so by
06:10 - default it's going to be a single spin
06:11 - and I'm just going to take all of this
06:17 - code
06:19 - in fact all of the code for this button
06:22 - closure
06:22 - for this action and we're gonna put it
06:25 - into here and the first thing we're
06:31 - gonna do is set all of the backgrounds
06:33 - for all of the cards to white so instead
06:35 - of going you know zero to eight we're
06:38 - gonna do self thought backgrounds equals
06:42 - self thought backgrounds dot map and I'm
06:49 - going to open up that closure and we
06:52 - don't need this parameter part and we're
06:56 - just gonna return color dot white and
07:00 - just like that we've set all the
07:02 - backgrounds to white maybe I can just
07:05 - get rid of this pain right there and
07:07 - that's gonna be a little easier to see
07:13 - alright now we're going to randomize the
07:16 - images but this depends on whether we
07:18 - are doing a maxis pin or a single spin
07:21 - right so we're gonna have to we're gonna
07:24 - have to do an if statement if is max
07:28 - then spin all the cards else spin the
07:36 - middle row
07:36 - alright so spinning the middle row we're
07:41 - gonna have to do it in three statements
07:43 - and the middle row is 0 1 2 3 4 and 5 so
07:47 - 3 4 & 5 that's the middle row right so
07:49 - we're gonna do 3 4 & 5
07:53 - but for spending all the cards again we
07:55 - can use the map function here so self
07:59 - dot numbers equals self dot numbers dot
08:02 - map and we're gonna open up that closure
08:05 - remove this part because we don't need
08:07 - it and we're gonna say we're gonna
08:10 - return int on random actually I'm just
08:11 - gonna copy this because it's the same
08:14 - thing for every single element
08:19 - all right so that's spinning all the
08:21 - cards or randomizing a number for every
08:23 - single index and this is just
08:26 - randomizing four three four and five
08:29 - all right here's checking for the
08:33 - winnings now this is also more
08:35 - complicated now because if we're
08:37 - spinning a single spin then we only
08:39 - checked the middle row but if we're
08:41 - spinning max then we got to check one
08:43 - two three and in the X right four five
08:46 - let's check five different things so
08:48 - rather than have it here I'm gonna write
08:52 - a different different method down here
08:57 - called process process win and again
09:05 - this is going to accept the parameter is
09:07 - max we're just gonna default it to false
09:12 - okay so I'm gonna I'm gonna take this
09:16 - chunk of code right here and I'm gonna
09:18 - cut this and I'm gonna paste it in here
09:21 - right and then simply I'm going to call
09:24 - process win from here and then pass in
09:26 - is max this is from a peer right so this
09:34 - method is for processing the results but
09:37 - in actuality it's like just to spinning
09:40 - all of the indexes or randomizing all
09:42 - the indexes this is for processing the
09:45 - win which is to we're going to check
09:51 - basically all of the matches so let's
09:55 - declare so with a single row that was
10:01 - easy right if it matches then you win if
10:04 - it doesn't match this then you lose but
10:06 - for a max spin because there are so many
10:09 - different matches that can happen you
10:11 - can match it you know you can match one
10:12 - you can match two you can match all five
10:13 - so we need to keep track of how many
10:16 - matches you've made and so I'm going to
10:18 - create a variable here and then call it
10:22 - matches equals zero we'll initialize it
10:25 - to zero and then what kind of keep count
10:26 - so we're going to first
10:29 - check the case where is max equals false
10:33 - so let's say this is a single spin right
10:36 - I put this inequality here this means
10:38 - that if it's not is max then we are
10:42 - processing for a single spin so we've
10:50 - already got we've already got this here
10:53 - right except we're not checking 0 1 & 2
11:02 - were checking 3 4 & 5
11:05 - so if 3 equals 4 and 4 also equals 5
11:09 - then that means there's a single match
11:12 - and we update the backgrounds 3 4 & 5 to
11:17 - green right and one I would I would
11:22 - instead of doing this we're gonna update
11:25 - the number of credits at the very end
11:27 - based on how many matches there were so
11:29 - in here instead of updating this the
11:32 - credits balance here we're just going to
11:34 - say matches plus equals 1 ok so that is
11:39 - if the cases if the case is not is max
11:44 - if that's a single spin else
11:50 - processing for max the spin I'm gonna
11:55 - remove this code so we don't kind of
11:56 - confuse ourselves this was the code from
11:59 - before and then you know after we
12:02 - process for max spin this is going to
12:06 - require a couple of different if
12:08 - statements right so I'm gonna I'm gonna
12:13 - shorten it after I write it this way
12:15 - just so you guys are aware but right now
12:19 - we're gonna check row by row so we're
12:21 - gonna say top row and this would be 0
12:27 - does 0 equal to 1 does 1 equals to 2 if
12:31 - so matches plus 1 and turn turn these
12:35 - cards green okay now we check middle row
12:41 - so middle row is when you know we've
12:44 - already got the code from up here so I
12:46 - literally just pasted it here if the
12:49 - middle row matches then matches plus
12:51 - equal 1 this is bottom row bottom row is
12:56 - 7 6 7 8 so 6 equals the 7 and 7 equals
13:02 - to 8 then we're gonna update 6 7 & 8 to
13:08 - green we've got two more to do so
13:11 - diagonal diagonal top left to bottom
13:16 - right so that this would be 0 with 4
13:22 - right 0 1 2 3 4 with 4 and this would be
13:27 - 8 so 0 4 & 8
13:36 - okay and then we've also got a diagonal
13:41 - top right to bottom left and this would
13:45 - be 0 1 2 2 4 & 6 okay and finally that's
14:01 - good
14:01 - finally check matches and distribute
14:07 - credits so if matches is greater than 0
14:12 - then that means that there is there is a
14:16 - win right if else if that means if it
14:22 - comes to me here that means matches is 0
14:25 - or less than 0 which it can't be less
14:28 - than 0 so it's just 0 else if not is max
14:34 - so this is at least 1 win this is 0 wins
14:42 - single spin and then lastly its 0 wins
14:47 - max spin so if it's you know if it's
14:53 - zero wins single spin then we're going
14:56 - to do self dot credits is minus equals
15:01 - that amount so we had a bettin amount up
15:04 - here which represents how many credits
15:08 - gets spent for a single spin and I'm
15:13 - gonna do it so that for the max spin I'm
15:18 - gonna do it five times the amount of a
15:20 - single spin so it's gonna deduct 25
15:23 - credits instead
15:26 - right but if you win then you're gonna
15:29 - get you're gonna get more credits back
15:31 - based on the number of matches you have
15:33 - so matches times that amount but you
15:37 - usually have to win more than you bet
15:39 - more than the amount that you just bet
15:41 - so I'm gonna say you you're gonna get
15:45 - two times back if you if you make a
15:47 - match you're gonna get two times back in
15:49 - you know multiplied by the number of
15:50 - matches you made so that's that's gonna
15:54 - be the math there and now let's add
15:57 - before we optimize this and kind of long
15:59 - chunk of code here I want to add a
16:02 - second button here just so we can start
16:04 - testing it and just making sure that
16:05 - this code is right before we all go and
16:08 - shorten it so let's go back up here for
16:12 - our single spin button remember I had
16:14 - removed the action but now I can call
16:17 - process results right and is maxed by
16:22 - default is equal to false so I'm just
16:23 - gonna you know say that a process a
16:29 - single spin right and furthermore I
16:34 - actually want to put some text down here
16:36 - to say how many credits it costs so I'm
16:38 - gonna say V stack and I'm gonna put a
16:42 - text element here I'm gonna say five
16:47 - credits and I'm gonna take this button
16:52 - I'm gonna put it into this V stack like
16:55 - that and so we should see a little label
16:58 - down there that says five credits
17:00 - that's a resume
17:06 - all right so I spelled credits wrong
17:08 - okay I'm gonna optimize it a little bit
17:12 - and so I'm gonna add some padding to the
17:16 - top let's say ten and I'm also gonna
17:20 - change the font to a like a caption
17:25 - style so it's a little smaller that's
17:28 - really small
17:31 - let's try footnote that's a little less
17:36 - slightly better if that's fine and
17:39 - instead of five I'm actually gonna sub
17:42 - in the bet amount in case we change that
17:45 - variable at the top so that's still
17:47 - going to be five all right now we are
17:50 - going to put this in an H stack because
17:53 - we have a second button remember so an H
17:56 - stack we're gonna take this button here
18:02 - we're gonna pop it in there and we're
18:05 - gonna add a second button so I'm going
18:07 - to I just pasted it twice so now we have
18:09 - a second one this one's going to be
18:11 - called max spin the mountain of credits
18:14 - is going to be but amount times five so
18:18 - that's 25 and instead of just processing
18:21 - results we're gonna pass in true to
18:24 - indicate that this is a max spin and I'm
18:29 - going to add some spacing in between
18:30 - those two buttons so this H stack has an
18:34 - initializer this one so alignment we we
18:39 - don't need to specify that the default
18:41 - alignment is fine it's spacing right
18:43 - about 20 and this content closure is
18:45 - like I mean we already have this right
18:49 - there
18:50 - like this all this stuff is that
18:53 - parameter that content parameter okay so
18:56 - let's save this let's run this and see
18:58 - see how this actually works
19:09 - all right so single spin I'll match
19:12 - right away that's a win all right max
19:16 - spin cool wait that was a weird I think
19:24 - I saw a weird green pattern we might
19:27 - yeah this oh wait this is a match yeah
19:30 - okay so row row diagonal well I still
19:36 - end up making money or losing money
19:39 - these are credits these aren't this is
19:41 - not money
19:42 - we are not gambling here I think we're
19:47 - going down here she is dying a slow
19:51 - death here at this point I'm borrowing
19:56 - money to gamble I mean the loan sharks
19:59 - all right this is cool
20:02 - so it's working let's optimize this code
20:04 - here because if you take a look at all
20:08 - of these parts that we have here the
20:11 - code is exactly the same but the only
20:13 - difference is that the indexes are
20:16 - different right see this code is
20:19 - checking these three indexes zero one
20:21 - and two and then setting it to green if
20:24 - it's a match that this section is
20:25 - checking three four and five so we can
20:29 - create a different a different method
20:33 - here
20:34 - and we're gonna call this is match and
20:39 - you're gonna have to pass into three
20:40 - indexes so we're gonna have index one as
20:42 - an int index two as an int index three
20:49 - as an int and it's gonna return a bool
20:54 - so it's gonna return false by it you
20:57 - know if it reaches there but first it's
21:00 - gonna well it's basically gonna check
21:04 - this if self-thought numbers index 1 is
21:09 - equal to self dot numbers index 2 and
21:17 - self thought numbers and X 2 is equal to
21:22 - self numbers next 3 then this is
21:26 - considered a match and we return true
21:29 - and what we can also do is just also set
21:33 - the backgrounds to green as well but
21:38 - instead of hard-coding those indexes we
21:40 - would have index 2 and X 3 and this is
21:47 - basically a repeat of this code I don't
21:48 - know why I typed it out I see it see I
21:52 - typed something wrong oh there should be
21:56 - a space right there all right
21:58 - so now we can call this is match method
22:01 - instead of all of this code here so for
22:04 - example for this one we're gonna call
22:07 - you know we can do if is match and pass
22:12 - in 3 4 & 5
22:15 - and if this is true then we can do
22:19 - matches + equals 1 right because our
22:22 - method didn't it doesn't increase the
22:24 - matches number I mean we keep track of
22:26 - this and here in the process win and
22:28 - then we can delete this whole chunk of
22:31 - code and if you want to short it if you
22:34 - want to shorten even more you can
22:40 - you know you can put it in one line like
22:42 - that so then this becomes you just
22:51 - change these numbers zero one and two
22:55 - you get rid of that middle row becomes
23:03 - three four and five
23:09 - this becomes 6 7 & 8
23:18 - this becomes 0 4 & 8 I accidentally keep
23:28 - pressing command B that's 2 4 & 6 4 & 6
23:41 - so that actually saves a lot of code and
23:46 - you know it's gonna make updating this a
23:48 - lot easier maintaining it I mean and it
23:51 - also looks a lot better so let's just
23:54 - run it again to make sure nothing's
23:56 - broken you know what would be cool is if
24:10 - we did a jackpot type thing like if you
24:12 - get I don't know you can you can do you
24:17 - know those slot machines as you know
24:20 - different configurations kind of give
24:21 - you like different amounts right now we
24:24 - have a standard amount just for three
24:25 - matches but if you had a couple more
24:28 - symbols in here you could do some maybe
24:31 - if you get like all cherries or
24:32 - something you just get an explosion of
24:34 - credits but anyways that does it for
24:36 - this one that's the challenge that I
24:38 - wanted to do
24:38 - I'll leave the jackpot thing to you if
24:40 - you want to implement that if you do end
24:43 - up doing that definitely shoot me a
24:45 - screenshot on Twitter Instagram
24:47 - tag me and um I'll show it off okay
24:50 - thanks a lot thanks for watching I'll
24:52 - see you in the next lesson