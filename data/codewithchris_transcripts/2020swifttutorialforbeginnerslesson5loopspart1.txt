00:00 - hello and welcome to lesson 5 of my
00:02 - Swift tutorial for beginners video
00:03 - series now in the last two lessons you
00:06 - learned how to write code that can be
00:07 - executed based on some conditions now
00:10 - let me introduce you to something called
00:12 - loops loops allow you to repeat a block
00:14 - of code multiple times and while this
00:17 - might sound a little bit boring and
00:19 - repetitive it's actually quite useful
00:24 - let me show you how they work so now I'm
00:31 - going to demonstrate for you the for in
00:33 - loop and this is going to allow you to
00:35 - loop a block of code for a set number of
00:37 - times let's jump into the playground
00:39 - that I have prepared well I haven't
00:41 - actually prepared anything cuz it's a
00:43 - blank playground but let me present to
00:46 - you this dilemma so if we were to print
00:50 - hello in the console and let's say I
00:52 - wanted to print this five times now I
00:55 - could just write five lines of code like
00:57 - this you know you get the picture
01:00 - but we can use a foreign loop to
01:04 - condense this code into just a couple of
01:07 - lines and let's take a look at the
01:09 - syntax for a foreign loop so true to its
01:12 - name the key words to use are four and
01:15 - in you start with the keyword four
01:17 - followed by some sort of variable name
01:19 - now you don't have to use the VAR
01:21 - keyword here you just give it a name and
01:23 - then you write in and then you specify a
01:26 - range so there's a lower range followed
01:30 - by three dots and then an upper range
01:32 - and I just want to mention that it's an
01:34 - inclusive range so if your range is one
01:37 - to five it's going to loop from one to
01:40 - five and that would be a total of five
01:41 - times and then you follow that by a set
01:44 - of braces inside the braces is where you
01:47 - put your code and that code is going to
01:50 - be looped for whatever range that you've
01:53 - specified so I know that this is yet
01:55 - another set of keywords and another sort
01:57 - of syntactical structure that you have
01:59 - to remember but remember what I said
02:02 - don't try to memorize anything as long
02:04 - as you do the exercises and worksheets
02:07 - after each of these lessons and you just
02:08 - spent 15 minutes even just trying it out
02:12 - and playing out
02:13 - with it you will remember the keywords
02:16 - to use and the structure of a foreign
02:19 - loop you don't have to memorize anything
02:21 - so that is really the way to go and
02:23 - don't forget I do have a cheat sheet for
02:25 - you to download on the resources page
02:27 - for this video series which you can find
02:30 - the link to in the description below the
02:32 - video so have that cheat sheet besides
02:36 - you and if you ever forget you just
02:38 - refer to it alright now let's jump back
02:39 - to our playground and let's take a look
02:42 - at doing this for in loop so I'm going
02:47 - to just create my loop right up here so
02:51 - for and then I'm going to use the
02:54 - variable name counter in right and then
02:58 - I specify a lower to upper range and I'm
03:01 - going to do one dot dot dot five and I'm
03:05 - going to put my braces so inside these
03:08 - braces we're going to put our print
03:10 - hello so let me erase four of them cut
03:14 - that one and then let's paste it inside
03:16 - there and we're gonna run our code boom
03:22 - so now we have hello five times how easy
03:25 - was that
03:26 - sure enough it's run our code from one
03:29 - to five now the question is what is this
03:33 - counter for what is this variable name
03:35 - for well the thing is for each iteration
03:39 - of the for in loop the counter refers to
03:43 - that number so in the first iteration of
03:46 - the loop counter actually contains one
03:49 - in the second iteration counter contains
03:52 - two and so on and so forth so let's say
03:54 - I wanted to print out the counter maybe
03:56 - I wanted to print out numbers one two
03:59 - five I could print counter and then I
04:03 - can run that and then you're going to
04:05 - see one two three four five output
04:08 - instead now one cool thing is that you
04:11 - see that there was this yellow warning
04:14 - here and that was Xcode just telling us
04:17 - that hey if you if you don't need to use
04:19 - that variable then you don't have to
04:22 - specify it but since we started using it
04:25 - in this print
04:25 - they meant that warnings gone away so
04:28 - let me tell you what that warning was
04:29 - all about why don't we go back to hello
04:32 - and then that little warning is gonna
04:35 - come back and it's telling us that this
04:38 - counter was never used consider and this
04:42 - is kind of cut off let me see if I can
04:47 - show you consider replacing it with an
04:50 - underscore or removing it so what what
04:54 - happens is that if you actually don't
04:56 - need to use that sort of counter you can
05:00 - replace it with an underscore like that
05:02 - and that's gonna be fine that's
05:04 - perfectly valid for in Lupus syntax
05:08 - now I want to show you one more thing
05:09 - that might get you tripped up when
05:11 - you're working with loops why don't we
05:13 - add this to counter variable back
05:15 - because we're going to need it so let's
05:18 - say I want to display or let's say I
05:21 - want to add up all the numbers from 1
05:22 - all the way up to 5 and I want to get
05:25 - the sum of all of those numbers you know
05:28 - you might do something like this you
05:30 - might say you might declare var sum
05:32 - equals 0 and then remember that this
05:36 - counter contains these numbers for each
05:40 - iteration right so I might want to do
05:43 - something like this plus equals counter
05:46 - and I think this is the first time
05:49 - you've ever seen the plus equal operator
05:52 - right like this this is just an
05:55 - increment operator so what we're
05:58 - actually saying is basically add
06:00 - whatever a counter is added to some so
06:04 - if sum is 10 encounters 5 well
06:07 - sum is now going to be equal to 15 so
06:10 - another way to think about it is that
06:12 - it's equivalent to writing some equals
06:14 - sum plus counter okay it's kind of just
06:19 - like a shorthand all right so in every
06:21 - iteration we're basically adding 1 and
06:24 - then adding 2 and then adding 3 and
06:26 - we're collecting it inside this variable
06:28 - sum so what I want to do now is just
06:30 - print sum and now let me run it what
06:34 - would you expect to happen
06:37 - let's take a look and get one two three
06:41 - four and five well that's not what we
06:43 - expected right why is that well let's
06:46 - take a look
06:46 - so in iteration number one we declare a
06:50 - variable called sum we've set it to zero
06:52 - and then we're adding one to zero and
06:57 - then we're printing that and so we get
07:00 - one well in iteration number two counter
07:04 - is now two and then we are declaring
07:08 - some and setting it to zero so we're
07:11 - essentially adding two to zero was just
07:15 - two and so it prints sum and we get two
07:17 - and so on and so forth so the problem is
07:20 - that in every iteration of the loop we
07:23 - are declaring some and we're setting it
07:24 - to zero so we're not really getting that
07:27 - addition of the counter through the
07:29 - iterations like we want and if you
07:32 - notice you might say why am i able to
07:35 - declare some so many times right because
07:38 - in the very first lesson I told you that
07:41 - when you declare a variable up here like
07:44 - this and like STR you don't need to read
07:47 - Eclair it in order to assign it
07:50 - something else right so I can assign Tom
07:52 - to STR up here and that would be
07:55 - perfectly fine
07:55 - however if I try to declare STR again
08:00 - you know like this I'm gonna get an
08:03 - error 'invalid read Declaration of St
08:07 - art where you can't do that so why is it
08:10 - that I can do that here right in every
08:15 - single iteration we're declaring a
08:18 - variable called sum and setting it to
08:20 - zero well the reason is because every
08:22 - iteration it's almost like a clean slate
08:25 - there's no recollection of what happened
08:26 - in the previous iteration so that's why
08:29 - that's happening essentially we're
08:30 - resetting some every single iteration
08:32 - what we want to do instead to get the
08:35 - desired effect is that we should move
08:37 - this declaration out here and set it to
08:41 - zero and then inside each iteration we
08:47 - are essentially just adding the counter
08:51 - to some and we are going to get the
08:56 - desired effect if we do it this way so
08:58 - outside here I'm gonna print some let's
09:02 - stop it and run it again and so we get
09:05 - 15 and that's the numbers from 1 to 5
09:09 - all added up now as you can see up here
09:11 - we've declared some we've set it to 0
09:14 - and then down here in the for loop in
09:15 - the first iteration counter is 1 so
09:18 - we're adding that to 0 and so sum now is
09:21 - 1 and in the second iteration we're not
09:24 - resetting in some counters 2 this time
09:26 - and we are adding 2 to 1 so we get 3 and
09:30 - then so on and so forth and then the
09:32 - loop ends after 5 iterations and then we
09:35 - print sum so that's why we get a single
09:37 - number here so I just wanted to go
09:39 - through that quick example to illustrate
09:41 - kind of how loops behave because I know
09:43 - a lot of beginners who get tripped up
09:45 - with something like that all right recap
09:47 - time so use a 4 in loop to execute a
09:50 - block of code for a set number of times
09:52 - and each time your code runs is called
09:55 - an iteration of the loop now be sure to
09:57 - practice with the worksheet for this
09:59 - lesson because loops are powerful stuff
10:01 - in the next lesson I'll show you some
10:02 - other kinds of loops just click on over
10:04 - there for the next lesson and I'll see
10:06 - you there