00:00 - in the last video I showed you how to
00:01 - add interactivity to your app widget in
00:04 - this video I want to show you how I
00:05 - built that streaks app and widget
00:07 - however before we begin I want you to
00:09 - understand that my main goal was to try
00:11 - out the interactive widget part and so I
00:14 - really rushed building the app and
00:15 - widget and I favorites the speed over
00:18 - everything else I did this app and
00:20 - widget really quick and dirty so all of
00:22 - that to say don't use this code for
00:24 - production however you would still be
00:27 - able to get an idea of what you have to
00:29 - do by watching this tutorial alright
00:31 - with that said let's Dive In
00:34 - so before we start just want to mention
00:36 - that we are using xcode 15 beta in this
00:39 - video just in case in the future your
00:42 - xcode 15 looks different or there are
00:44 - some bugs because beta software is
00:47 - constantly changing but we have to use
00:49 - this for our widget interactivity
00:51 - features that we want to show now
00:53 - so first we're going to create
00:56 - the new xcode project under iOS let's
00:59 - choose app and I'm going to call this a
01:02 - widget demo interfaces Swift UI language
01:04 - is Swift the rest is like that pretty
01:07 - much you can leave it untouched I'm
01:09 - going to save it on my desktop
01:11 - which is already cluttered and full of
01:13 - stuff
01:14 - and what we're going to do first is add
01:18 - the counter and the button because this
01:20 - is a streaks app so first of all let's
01:22 - declare a variable at the top
01:26 - um this let's call it streak
01:28 - and this is going to be initialized to
01:30 - zero and then we are going to add the
01:33 - button so actually before we do that if
01:35 - any of this is unfamiliar to you if this
01:38 - is the first video you're ever watching
01:39 - on code with Chris please watch the how
01:43 - to make an app in eight days series
01:44 - first I'll link it in the video right
01:47 - now a little card will pop up but that
01:50 - will show you the basics of building uis
01:52 - and you know using buttons and text
01:54 - labels and things like that if you are
01:56 - brand new
01:57 - so for the text I want to show the
02:01 - street counter
02:05 - okay and below that I want to put a
02:07 - button
02:09 - and we're going to use this one right
02:11 - here
02:13 - Okay so
02:15 - for the action I'm going to increase the
02:17 - streak but
02:19 - um so we're going to do streak plus
02:21 - equal one we're gonna get an error for
02:23 - that
02:24 - foreign
02:29 - and when they tap it it will add one to
02:32 - the streak now this cannot be
02:36 - um modified because it is immutable
02:38 - which means that it can't be modified
02:40 - but what we can do is we can use the app
02:45 - storage property wrapper to make sure
02:48 - that this value gets saved over multiple
02:52 - app sessions so essentially it stores
02:54 - that value onto disk on your device and
02:58 - it'll also let us change that value
02:59 - which is what we want as well so let's
03:01 - go ahead and use this app storage
03:04 - property wrapper
03:06 - okay and then we'll be able to try this
03:09 - out
03:13 - all right it didn't start at zero
03:15 - because I actually
03:17 - did this before and I used the same
03:19 - thing so it's reading from
03:22 - um from disk so anyways it was
03:25 - it is there okay the next part we're
03:27 - going to do is to be adding the progress
03:30 - ring and for that I learned how to do it
03:33 - from calf soft shout out to him and his
03:36 - channel he does some amazing work with
03:38 - animations user interaction building uis
03:40 - so definitely go there if you want to
03:42 - learn about how to build these beautiful
03:44 - experiences and that's where I learned
03:47 - how to build this progress ring so the
03:49 - way that he's done it is to use that
03:52 - stack in Layer Two circles on top of
03:54 - each other the bottom one is for the
03:56 - track the top one is for the progress so
03:58 - let me show you what he's done and what
04:00 - I've learned
04:02 - um actually before we do that let's
04:04 - change the background to Black because I
04:07 - want to make yeah that'll that'll allow
04:10 - my ring to show up better
04:17 - so all I'm doing is adding a black color
04:20 - as the background and I'm going to put
04:23 - my v stack
04:26 - inside or on top sorry of the black
04:31 - all right and
04:33 - I also have to
04:35 - change my foreground color to actually
04:39 - what did that say right there
04:42 - foreground style that's what we're
04:44 - supposed to use now
04:45 - in iOS 17.
04:49 - I don't want to change that I want to
04:51 - change my button color
04:54 - all right we'll do that okay as for the
04:57 - ring
04:58 - we are going to do this
05:03 - and then we're going to Layer Two
05:05 - circles on top of another so there's the
05:07 - first Circle it's actually black so you
05:09 - can't see it but a black circle has
05:11 - appeared but what we're going to do is
05:13 - add a stroke to it and that is
05:17 - um The Stroke is the path so we're going
05:19 - to color the path so the the outer ring
05:24 - of the circle
05:25 - are you familiar with those terms
05:27 - they're used in a lot of design programs
05:29 - Phil is like a shape is is a line right
05:32 - so a circle is like that the stroke is
05:35 - the line itself and Phil is like the
05:38 - area inside
05:41 - the the space so I'll show you what I
05:45 - mean there that's stroke the blue circle
05:47 - and if I did you know in in uh Adobe
05:52 - Photoshop or another program fill would
05:54 - be the area inside so you can choose the
05:56 - fill color you can choose a stroke color
05:58 - and they can be different in here in
06:00 - Swift UI this is the stroke color
06:03 - um if you want to fill it that would be
06:04 - that would be foreground
06:06 - foreground style I guess now they use so
06:09 - for color I want to use white but I want
06:12 - to change the opacity to
06:14 - semi-transparent so you can actually
06:16 - barely see it but we're actually going
06:18 - to
06:19 - use LINE width instead and make it 20 so
06:21 - you can see it and I'm going to add a
06:24 - little bit of padding to this
06:29 - yeah maybe maybe 50.
06:32 - all right so now we're going to add the
06:35 - circle on top of it
06:37 - so we're just going to do it again
06:44 - right so for example I can even copy
06:47 - that
06:48 - and I can change this to Blue
06:52 - all right so you don't see the track
06:54 - anymore because it's completely filled
06:56 - but here's another modifier that you can
06:59 - use trim from and two so you can trim
07:02 - from let's say zero to halfway
07:08 - let's see what happens and that's what
07:10 - you get now if you want to start your
07:12 - ring at the top right here like right
07:15 - now it's starting from I don't know from
07:16 - here or here I actually don't know but
07:19 - if you want to start from here all you
07:21 - need to do is rotate your circle by if
07:24 - you're going to rotate counterclockwise
07:26 - that's actually minus 90 degrees
07:30 - so you're going to do a rotation effect
07:33 - and the angle the degrees sorry is going
07:37 - to be
07:38 - minus 90 degrees so then it actually
07:41 - starts from the top so you can see if
07:44 - you do like 34 and it's going to start
07:46 - from the top and sort of go
07:49 - um the other thing is that you can see
07:51 - how these Corners are sharp if you
07:53 - wanted to make them round
07:55 - which I think looks better instead of
07:58 - putting the line with here you should
08:00 - use the other one there was another
08:02 - another one where you can specify a
08:04 - style and here you're going to specify a
08:07 - stroke style instead oops
08:10 - because I'm not that familiar let's use
08:12 - autocomplete ah where'd it go
08:15 - okay so anyways there's line width which
08:17 - we want to be 20 there's line cap and
08:19 - there's line join those are the the ones
08:22 - we want to specify
08:24 - so line width is 20. line cap is going
08:29 - to be round
08:31 - so you could see that already makes a
08:33 - huge difference and line showing is also
08:36 - round
08:37 - so this is what calves off did
08:40 - I'm gonna listen to them
08:43 - okay so there's essentially a ring I
08:45 - want to put the count in the center and
08:49 - I also want to put a streak text there
08:53 - okay so let's inside this circle here
08:59 - we're going to
09:03 - put that text right here
09:05 - but we're also going to put another
09:08 - piece of text
09:11 - this is a zed stack so we're going to
09:14 - put a v stack in here
09:18 - let's put the a foreground style white
09:21 - in on the v-stack itself so it modifies
09:24 - all of the text elements inside
09:30 - all right
09:33 - so let's make that a little bigger
09:36 - font
09:40 - system size of 70.
09:44 - okay
09:45 - maybe we'll bolt it
09:48 - and then furthermore we are going to say
09:51 - uh font design
09:54 - rounded
09:56 - and that gives everything a rounded look
09:57 - okay now as for this button I think this
10:00 - needs a little bit of work and perhaps
10:02 - there should be some padding between the
10:04 - ring
10:06 - and the button so we can add
10:09 - a little bit of spacing there
10:11 - for this why don't we
10:15 - add a rounded rectangle
10:21 - uh foreground oh we gotta use foreground
10:24 - style now
10:28 - foreground Style
10:31 - Dot blue
10:34 - and let's give this a height
10:42 - what happened
10:44 - around directing oh we're missing the
10:46 - corner radius part of it
11:13 - uh my text
11:19 - there we go okay so let's increase that
11:22 - spacing a little bit more
11:26 - uh actually you know what
11:28 - I think what we can do instead
11:31 - is add some spacers
11:34 - spacers okay yeah let's let's get rid of
11:37 - the spacing
11:41 - so there's a spacer right there let's
11:44 - add one between the button
11:46 - so we could keep that button at the
11:48 - bottom so it gets easier to press or you
11:51 - can space everything out like that if
11:53 - you'd like
11:55 - kind of like the button at the bottom so
11:58 - we'll do that so it makes it really easy
11:59 - to tap and it keeps this in the center
12:01 - as well now it's time to add a widget
12:04 - extension to our project before we do
12:06 - that let's actually run our project in
12:09 - the simulator to make sure that sort of
12:12 - what we expect we've only done it inside
12:14 - the canvas here
12:16 - all right so here we have it we are
12:18 - going to yep okay so let's try to
12:22 - I can't delete it but what I can do is
12:25 - try to kill the app
12:27 - and launch it again and you can see app
12:29 - storage is working as expected
12:32 - all right cool so that actually killed
12:35 - the project when I killed the app
12:37 - now we're going to add our widget
12:38 - extension so where we do this is we go
12:41 - to file new and we're going to add a new
12:45 - Target
12:48 - to this project and you're going to
12:50 - search for widget and we're going to add
12:52 - this widget extension
12:54 - so here you can call it whatever you
12:57 - want let's just call it
12:59 - widget demo and I don't know widget
13:02 - extension
13:04 - um we are not going to include any of
13:06 - these things
13:07 - okay and this stuff should be pretty
13:11 - much set to to that
13:13 - like your own project
13:15 - let's click finish
13:17 - and then when it asks you if you want to
13:19 - add a widget extension scheme say yes or
13:22 - activate and what that's going to do up
13:25 - here is it's going to allow you to
13:26 - select whether you want to run the
13:30 - the app or the widget if you
13:32 - accidentally clicked no or cancel you
13:35 - can always add it yourself by going to
13:37 - manage schemes like I just did and then
13:39 - click plus and then you can you can
13:41 - choose that and you can add that scheme
13:44 - but for now I mean because I clicked
13:46 - activate or yes now I have that
13:49 - okay so let's take a look at the code of
13:52 - the widget
13:53 - so at first this was really confusing
13:55 - for me too because there's actually
13:57 - quite a bit of code that it that it
13:59 - generates for you
14:01 - so what I'm going to do is try to
14:03 - collapse some of it here so that it's
14:06 - it's easier for you to see and
14:09 - then try to explain it in a way that
14:11 - makes it easy to understand
14:14 - okay so this is the preview this is just
14:16 - what you're seeing here
14:18 - this widget extension which
14:22 - adheres to this protocol
14:24 - this is the actual widget itself
14:28 - okay so let's see what is inside here so
14:31 - first of all there is a string a kind
14:33 - this is sort of like the identifier for
14:37 - your widget you think of it that way
14:39 - this body property this is uh the actual
14:42 - guts of your widget
14:44 - a static configuration is a type of
14:48 - widget that you can have there are
14:49 - actually multiple types as far as I know
14:52 - there are three so let me pull up this
14:55 - piece of documentation from Apple and
14:57 - again these all of these links will be
14:59 - below
15:00 - so
15:02 - um okay static widgets use a static
15:05 - configuration
15:06 - other widgets
15:09 - our app intent configuration widgets
15:12 - they use user customization such as
15:14 - weather widget that needs a zip or
15:16 - postal code or package tracking widget
15:18 - which needs a tracking number there's
15:20 - activity configuration which is used for
15:22 - live data like sports games or food
15:26 - delivery estimate or things like that so
15:28 - static configuration is sort of like
15:30 - your general basic one these ones app in
15:32 - 10 inactivity are more for specific use
15:35 - cases I would say now for static
15:38 - configuration here's how it works you
15:40 - have to pass in the kind which is sort
15:43 - of the identifier that's what we
15:44 - specified up here and this is important
15:46 - because
15:47 - inside the app we are able to issue a
15:50 - command to say like update this widget
15:53 - and that's where we'd have to specify
15:55 - the kind so we do have to take note of
15:57 - that the provider is the supplier of the
16:01 - data think of it like that to the widget
16:04 - and we'll get we'll dive into that in a
16:06 - second and then this part this closure
16:08 - this is the actual view of your widget
16:11 - so that's what you see right here and
16:14 - you can see in this boilerplate code
16:16 - this refers to this view right here
16:19 - right this boilerplate code is what
16:23 - you're seeing up here
16:24 - okay and then this is just some metadata
16:27 - for your widget another thing you can
16:29 - add is supported families because
16:31 - there's different sizes of widgets
16:34 - um there's like small and medium is
16:36 - there a large yeah there's a large so
16:38 - you can see I'm new to widgets but I am
16:41 - going to constrict this widget to small
16:44 - because I haven't designed for the other
16:46 - sizes
16:48 - uh yeah okay so that's this is your
16:50 - actual widget now the next thing to
16:53 - explore let's explore the provider
16:56 - this is up here timeline provider this
16:59 - supplies the data in order to understand
17:02 - this Behemoth why don't we also pull up
17:06 - some documentation
17:09 - so this was this took me a little bit to
17:11 - understand when I first got into
17:13 - building a widget is that your widget
17:16 - isn't always live because if that were
17:18 - the case if the user has a ton of
17:20 - widgets on the home screen it would just
17:22 - like eat up all the resources of the
17:23 - device
17:24 - so widgets are actually
17:28 - um very lightweight and the way it works
17:30 - is via a timeline so what the timeline
17:34 - provider
17:36 - provides is a snapshot of what the
17:40 - widget should show
17:42 - at certain times of the day
17:45 - so let's say that
17:46 - at this this timeline right here is
17:48 - right now
17:50 - right you have a snapshot this is what
17:52 - your widget should show when the widget
17:55 - asks the timeline provider for data it
17:58 - actually doesn't just request the data
18:00 - like the snapshot for right now but it
18:02 - asks for a snapshot
18:04 - from now into the foreseeable future
18:08 - so your provider might specify snapshots
18:12 - for right now an hour later two hours
18:14 - later three hours later so four
18:15 - snapshots in total and it gives it all
18:17 - to the widget right away and then what
18:19 - the system does is it takes all of those
18:21 - snapshots and creates what the view
18:24 - should look like based on that data like
18:26 - right there ahead of time
18:29 - and then so when an hour passes it just
18:32 - takes that view and plops it on your
18:34 - widget
18:35 - two hours later it will take that
18:37 - pre-rendered view it it made before and
18:39 - then plop it on that widget and so on
18:41 - and so forth so it only asks the
18:43 - timeline provider for data at certain
18:46 - times not all the time there are manual
18:49 - ways for you to trigger your widget to
18:52 - ask the provider for a fresh set of data
18:54 - fresh set of snapshots a new timeline
18:56 - and everything
18:57 - but you are only allowed a certain
19:00 - budget to do that your app is I should
19:03 - say so that way no app could
19:07 - you know constantly
19:09 - try to be refreshing the widget and and
19:11 - just hogging all the resources right now
19:14 - the first question in my head when I
19:16 - learned about this how widgets work is
19:18 - like how how can I provide data into the
19:22 - Future How will I know what my widget
19:24 - should show three hours in the future
19:27 - right because I don't have that data
19:30 - right now that you're asking me for it
19:32 - well there are certain I guess types of
19:35 - use cases where you you might have an
19:38 - idea of what that widget should look
19:39 - like three hours later for example your
19:42 - widget is a countdown to something right
19:45 - so that that makes sense
19:47 - when your widget asks the timeline
19:49 - provider for a snapshot in the timeline
19:52 - you're able to supply the countdown
19:54 - timer status right now but you're also
19:57 - able to predict what that countdown
20:00 - timer should look like one hour later
20:01 - two hours later three hours later four
20:03 - hours later right until all the way
20:05 - until the countdown is zero
20:08 - so you know in that scenario it's really
20:10 - easy for the timeline provider to
20:13 - provide all of these snapshots far into
20:15 - the future until the countdown to zero
20:17 - another example let's say it's a widget
20:19 - to remind you about when you should
20:21 - drink your next glass of water maybe you
20:23 - want to space it out throughout the day
20:24 - and you know make sure you get enough
20:26 - hydration
20:28 - so your widget gives you you know
20:31 - reminds you it shows right there in the
20:33 - widget like you should drink water right
20:35 - now
20:36 - well if there's a schedule of when you
20:39 - should drink water then
20:42 - your timeline provider would be able to
20:44 - predict in the future three hours later
20:45 - I should you know show
20:48 - drink water message on the widget or
20:51 - something like that so you'd be able to
20:53 - supply that data ahead of time so all
20:56 - this stuff that we just talked about
20:57 - actually is covered pretty well in this
21:00 - documentation called keeping a widget up
21:04 - to date and various strategies and ways
21:06 - to do that
21:07 - um so there's some really good charts
21:09 - here that you can see
21:11 - um and this talks about planned reloads
21:13 - with the budget what we talked about how
21:15 - the widget stays up to date
21:18 - there are a couple of instances where
21:21 - you can tell your widget to update and
21:24 - it doesn't count against the quota so
21:26 - one of those scenarios is when your app
21:29 - is launched and is in the foreground so
21:32 - when our streaks app is in the
21:35 - foreground
21:36 - we're going to be able to issue commands
21:39 - to update the widget for free the other
21:41 - time is when the user interacts with the
21:46 - widget now that there's a widget
21:47 - interactivity right so when we add a
21:49 - button here if they tap the button
21:51 - we get to update the widget for free so
21:53 - that's awesome so we can use those two
21:55 - scenarios really to our advantage
21:59 - okay so let's take a look at this code
22:01 - right here and let's see what they've
22:04 - written for us
22:05 - so inside this timeline provider you can
22:08 - see this provider adheres to the
22:10 - timeline provider protocol and it needs
22:12 - to have a couple of methods so let's go
22:14 - through placeholder and get snapshot
22:16 - first what do these two things do let's
22:19 - take a look at some documentation
22:22 - and this is the timeline provider
22:25 - documentation if we scroll down it's
22:26 - going to show us what those methods are
22:28 - for get snapshot provide the timeline
22:31 - entry that represents the current time
22:33 - and state of a widget is required
22:36 - placeholder provides a timeline entry
22:39 - representing a placeholder version of
22:41 - the widget so this placeholder is in a
22:45 - couple of cases for example when the
22:47 - when the user is about to add your
22:49 - widget to his or her home screen they
22:52 - launch the widget Gallery they see a
22:54 - placeholder like this is this is what
22:57 - generates that placeholder widget that
23:00 - they see
23:01 - okay and get snapshot as we just saw
23:04 - provides an instance in time of what
23:07 - that widget should look like
23:10 - okay and finally get timeline let's take
23:13 - a look at that provides an array of
23:15 - timeline entries for the current time
23:17 - and optionally future times to update
23:20 - the widget so if you know beforehand
23:22 - what that widget should look like three
23:24 - hours four hours five hours later that's
23:26 - when you provide it okay so now let's
23:28 - take a look at the code inside here
23:30 - actually
23:31 - so it's you know you see this other
23:34 - thing called Simple entry right simple
23:36 - entry if you go down right here that's
23:38 - it here's the timeline entry this is the
23:41 - data for a single snapshot and as for
23:44 - this placeholder
23:45 - uh this placeholder example the data
23:49 - that they use for the widget is an emoji
23:51 - and a date so that is the data for a
23:54 - snapshot
23:55 - so in the placeholder that is supposed
23:58 - to provide you know placeholder version
24:00 - of the widget
24:01 - they're creating a snapshot with the
24:04 - current date and a smiley emoji
24:06 - okay forget snapshot they're providing
24:12 - um some data with the current date and
24:14 - Emoji in get timeline they you have to
24:17 - provide an array right of snapshots
24:20 - going forward so what they're doing here
24:22 - is they're taking the current date and
24:24 - time and they are adding from zero to
24:27 - five hours or zero to four hours
24:30 - into the future and each each iteration
24:34 - they are just taking the date and adding
24:37 - that that offset right there and the
24:41 - Emoji Remains the Same
24:43 - and so what they're passing back as a
24:45 - timeline is essentially
24:47 - four or five snapshots
24:50 - where the time is an hour ahead
24:52 - two hours ahead three hours ahead four
24:54 - hours ahead with the same smiley emoji
24:56 - so that's the boilerplate code
24:59 - the last thing we haven't talked about
25:05 - is the widget extension entry view so
25:08 - this provides the view as you can see
25:12 - um there's there's body property and
25:14 - this contains the view code and this is
25:16 - a v-stack with the time
25:18 - right here and the Emoji right here
25:20 - so hopefully that gives you an
25:22 - understanding about the boilerplate code
25:25 - for the widget now let's customize this
25:27 - so that actually shows what we want to
25:29 - show and gets the data the streak data
25:32 - that we want So speaking about the data
25:35 - how are we supposed to get this app
25:40 - storage data
25:42 - the streak counter how are you supposed
25:45 - to get a hold of this streak
25:48 - from here
25:50 - right because they're two different
25:51 - targets and if you try to do it your
25:55 - chances are I don't think I actually
25:57 - tried this
25:59 - but I don't believe that they are
26:01 - actually reading from the same store
26:03 - so what you have to do is use something
26:06 - called an app Group
26:07 - and it is think of it as a way for
26:11 - multiple targets to share resources
26:13 - including data so what we're going to do
26:16 - is create an app group we are going to
26:18 - put the widget demo which is the app and
26:21 - we're going to put the widget extension
26:22 - in the same app Group and that way they
26:25 - can be reading from the same app storage
26:28 - uh and they can be then both reading
26:31 - this streak value
26:34 - let's go into the project properties
26:37 - here
26:38 - and then we're going to go into the
26:41 - widget demo Target and then we are going
26:43 - to go into signing and capabilities and
26:46 - hit this little plus icon here and we're
26:48 - going to search for app groups which
26:50 - actually is just here so go ahead double
26:52 - click that and then it's going to add
26:54 - this section app groups here I already
26:57 - have one here because I created one for
26:59 - a previous demo but I'm going to create
27:00 - a new app Group just to show you how it
27:02 - would work click this plus icon and
27:05 - you're going to name it the same thing
27:07 - so let me just so here is com.code with
27:10 - chris.widgetdemo with no space in
27:12 - between our Dash or anything like that
27:15 - so this would be you can name it
27:17 - whatever you want but I think
27:19 - generally this is what people recommend
27:22 - for you to do
27:24 - so it would be your identifier with
27:27 - group in front of it
27:31 - okay so that's
27:32 - right there group.com
27:34 - widgetdemo and what we're going to do is
27:36 - go into the widget extension and we're
27:39 - going to do the same thing under signing
27:40 - in capabilities
27:42 - so go to app groups we're going to add
27:44 - it
27:45 - you're going to hit the plus icon here
27:48 - and then you're either going to see the
27:50 - the one that you just added if not we're
27:52 - going to type it in exactly the same as
27:56 - what we typed in last time widget demo
28:00 - right so they should both be sharing and
28:03 - using the same
28:05 - app Group
28:07 - okay so I'm going to press command B to
28:10 - build the project
28:12 - right build succeeded
28:15 - right you see it's not red anymore
28:17 - and both targets under app groups they
28:22 - are using the exact same one group.com
28:25 - widgetdemo with no spaces or dashes in
28:28 - between widget demo
28:30 - okay so now that they're in the same app
28:33 - Group
28:34 - they can share
28:36 - some resources so for example
28:39 - in this streak that I am storing in app
28:43 - storage I am going to explicitly specify
28:47 - for to store this data in the app Group
28:49 - and this is how we can do that
28:53 - we can say the store
28:56 - all right and specifically use user
29:00 - defaults with this app group name so
29:05 - group.com dot code with Chris Dot
29:09 - widgetdemo
29:11 - all right so it's going to store this
29:13 - streak in that
29:16 - um in that app storage container so let
29:21 - me run it now run the app version
29:24 - we're going to update the counter so
29:26 - that
29:27 - we know it's actually working
29:31 - okay so it's zero because it's reading
29:34 - from a new storage container
29:37 - and hit plus one and so it's gonna have
29:40 - stored it in here okay and then now on
29:43 - the widget side we just access the same
29:46 - storage and then we can get the value so
29:50 - in the widget extension let's add a new
29:54 - struck to help us manage the data
29:58 - and let's just call this data service
30:00 - now this is where you get tricky when
30:02 - you have multiple uh targets I'm
30:04 - actually going to include this in the
30:06 - widget extension
30:08 - right that's what you should do
30:11 - okay so it's going to be added here
30:13 - and then in here
30:15 - we got to import uh
30:18 - Swift UI
30:21 - struct
30:23 - data service
30:26 - and then we're essentially going to have
30:28 - the same thing right
30:30 - app storage
30:50 - so we're actually going to make this
30:55 - private variable streak
30:59 - so it can't be accessed directly and
31:01 - instead they're going to need to access
31:04 - it through these functions right here so
31:06 - we're going to say streak plus equal one
31:09 - uh we're gonna do another one where this
31:13 - one returns an INT and we're just going
31:16 - to return streak
31:19 - so let's just uh break this up a little
31:21 - bit so it gets a little easier to read
31:27 - okay so that's going to be our data
31:30 - service then what we're going to do
31:31 - inside our widget extension is read that
31:34 - data so inside the widget here the
31:37 - timeline provider why don't we
31:40 - actually the first thing I'll do is
31:43 - change the simple entry so we can keep
31:45 - the date but no emoji
31:48 - instead I'm gonna
31:51 - have this be an integer representing the
31:53 - streak that's going to break a whole ton
31:55 - of stuff in here
31:56 - so we'll let it break for now
32:00 - we're going to create a new data service
32:01 - here
32:03 - and then for this simple entry we're
32:05 - just going to put
32:08 - streak
32:09 - data dot progress
32:12 - and then in the get snapshot you can do
32:15 - the same thing here
32:21 - that's going to return to us the current
32:23 - streak
32:24 - and then inside get timeline
32:34 - I'm gonna do that
32:36 - this doesn't really matter because we're
32:38 - going to be updating the widget when the
32:40 - user interacts with it by tapping the
32:42 - button or when the user launches the app
32:44 - and logs an entry we're going to update
32:46 - the widget
32:48 - okay now we're going to update the UI
32:50 - here
32:51 - so let's run the preview
32:54 - and then let's change this
32:58 - so
33:00 - and then the text here let's actually go
33:03 - ahead and declare
33:07 - um
33:09 - the data service here
33:11 - and then in here
33:13 - we're going to say data dot progress
33:20 - let's see if we can see anything
33:24 - okay so there's an oh down here yeah
33:26 - these are
33:28 - these are for the preview so
33:31 - let's just do that
33:33 - for the preview now I'm going to run the
33:35 - app
33:37 - okay so that's the streak in terms of
33:40 - the widget let's run the widget so we're
33:44 - gonna
33:45 - choose widget extension and then run it
33:48 - and it should install the widget for us
33:57 - running widget extension on iPhone
34:01 - it may come if we give it a little bit
34:03 - of time
34:04 - if not we can add it manually just tap
34:07 - and hold the home screen click on this
34:09 - plus and we'll search for it right here
34:13 - there it is
34:15 - Street 2 add widget okay so that's
34:18 - essentially what our streak looks like
34:19 - if our preview would load you'd see that
34:22 - it looks like the same thing so when I
34:23 - tap on this it launches in here and then
34:27 - yeah you can see there it is
34:30 - when I add plus one and I go back to the
34:32 - widget
34:33 - it doesn't update because what we have
34:37 - to do inside the app
34:39 - inside here is when plus one is tapped
34:42 - on we can issue that command to update
34:44 - the the widget manually and it will be
34:46 - free because our app is in the
34:48 - foreground so let's do that right now
34:49 - actually before we do that we have to
34:52 - finish building the UI just realized
34:54 - that yeah we didn't we didn't finish
34:55 - building that UI so let's go ahead
34:59 - um like I said this was quick and dirty
35:00 - so what I did here is essentially copy
35:04 - and paste my UI
35:07 - so all I really wanted was the ring
35:11 - here
35:13 - that's what I copied this that's that
35:14 - containing the two circles and the
35:16 - streak text
35:18 - so I'm literally going to copy that
35:22 - and this is the view for the widget
35:24 - right right now it's a v-stack
35:27 - all right so I'm actually going to just
35:29 - paste that in there
35:31 - I'm going to remove
35:33 - that text
35:35 - and this would be data.progress and
35:39 - we're going to obviously change the font
35:41 - size
35:42 - so it's not so big
35:46 - and
35:48 - yeah it kind of looks like that
35:52 - okay
35:58 - all right well perhaps we could add
36:01 - a little bit of padding
36:05 - all right and if you wanted to make that
36:10 - font a different size you could
36:13 - try that
36:15 - all right okay so now if we run it
36:22 - give it a couple of seconds and it
36:24 - should yeah it'll update okay so now
36:26 - it's actually looking like
36:31 - more like what it's supposed to look oh
36:34 - one thing we didn't change actually is
36:36 - the progress right it that doesn't
36:40 - actually change
36:41 - here so what we have to do
36:46 - is let percentage equals so essentially
36:49 - the current progress divided by
36:53 - whatever you want this to be out of
36:55 - let's say they need to do it 50 times
36:57 - then you're gonna write 50 and we've got
37:00 - to make sure if you want a decimal make
37:02 - sure these are both doubles
37:06 - okay so that is going to be for the app
37:10 - right this is content view this is the
37:12 - app we're going to do the same thing for
37:14 - the widget extension
37:16 - so here
37:23 - because that's an inch right so we are
37:25 - going to cast it as a double
37:27 - casting just means that you're going to
37:29 - treat it as a double and we're trying to
37:32 - convert it to a double
37:33 - and then here you're going to instead of
37:36 - that I'm going to put
37:38 - the actual percentage that they've got
37:40 - complete out of 50. so let's give that a
37:42 - try
37:48 - all right so yeah
37:51 - so now the bar actually moves it has a
37:53 - big oversight but when I'm I'm tapping
37:56 - this it's actually not telling the
37:57 - widget to update
38:00 - so
38:02 - yeah that has an update so let's issue a
38:05 - command to manually update the widget
38:07 - from within the app so first inside the
38:10 - widget extension
38:12 - take note of this kind this is sort of
38:14 - like the ID for your widget
38:17 - and then inside the the app when the
38:20 - button is tapped we're going to
38:24 - manually reload the widget so this is
38:27 - done through widget Center shared reload
38:32 - timelines of kind and then this is where
38:35 - you would put
38:37 - you know that widget of kind widget
38:39 - extension
38:41 - so now if we run this cannot find widget
38:44 - Center
38:46 - um
38:47 - yeah
38:50 - there we go should be it
38:56 - what did I run
38:58 - oh I ran uh I ran the widget extension
39:01 - instead of the widget app
39:05 - okay there we go here's the app
39:07 - so now when I increase the widget
39:12 - I mean increase the streak in the app
39:15 - and I go to the widget
39:17 - you see it's updated right away
39:23 - all right
39:26 - because when I'm tapping that button
39:28 - it's telling widget Center to reload
39:31 - this widget and then this widget is
39:33 - calling the timeline provider to get a
39:36 - new snapshot so now the last part before
39:38 - we end this video is I want to show you
39:40 - how I set the project up to add
39:42 - interactivity to the widget because I
39:45 - told you in the interactivity video now
39:49 - there is a button that accepts an app
39:51 - intent so when you tap on that button in
39:53 - the widget it's going to run the app
39:54 - intent but I never showed you how to
39:56 - build that app intent so it's actually
39:58 - pretty simple let's go ahead and do that
40:00 - inside the widget extension so we're
40:02 - going to add a new file a swift file
40:05 - and Yep this is part of the widget
40:08 - extension Target I'm going to call this
40:10 - log entry at intent
40:16 - so this is going to get fired when the
40:21 - button is going to be tapped on and this
40:24 - is based off of this documentation which
40:27 - I'll link to in the description below as
40:28 - well so providing your app's
40:30 - capabilities to system services this is
40:32 - how you create an app intent essentially
40:34 - you have to adhere to or conform to the
40:37 - app intent protocol we have these two
40:40 - title in description and then the other
40:43 - part which you need is
40:46 - here perform the action for your intent
40:48 - this this method right here okay so
40:51 - those are the parts we are going to take
40:52 - from the documentation
41:06 - app intense there we go
41:09 - and we need this part to perform
41:13 - part and so what I did before was I
41:17 - added the protocol stubs but I wasn't
41:20 - exactly sure about what it's what it
41:24 - provided me so I followed the
41:26 - documentation instead by taking that
41:29 - piece you know the actual thing that it
41:33 - was going to do
41:34 - and these two pieces which are metadata
41:37 - for this app intent that I I guess shows
41:40 - up when you you know when you want to
41:42 - use this app 10 with Siri shortcuts or
41:44 - anything like that
41:46 - uh log and entry to your streak
41:51 - or
41:53 - yeah
42:03 - something like that it's basically title
42:05 - and description but this is the most
42:07 - important part what do you want to
42:09 - actually do
42:11 - right so we want to
42:18 - log right so this increases the The
42:22 - Streak by one and then we are going to
42:24 - return the latest value that's it if it
42:28 - can't find data service in the scope
42:31 - you might want to double check that the
42:34 - the target membership for this app
42:37 - intent is the widget extension as well
42:39 - as the data service as
42:42 - is also same you know it's in the same
42:45 - Target and then sometimes that still
42:48 - won't do it clean build folder
42:54 - yeah just clean
42:56 - clean build folder
42:58 - and then just rebuild it command B
43:01 - should be good so now that we have the
43:04 - app and the widget and the app intent
43:06 - you're perfectly set up to add an
43:08 - interactive button to your widget and
43:09 - you can see how to do that in the video
43:11 - right over there now if you want to
43:13 - learn how to build apps and how to
43:15 - publish into the App Store consider
43:16 - joining CWC plus our training program
43:18 - designs specifically to help you do that
43:21 - links below alright thanks for watching
43:23 - and I'll see you in the next video