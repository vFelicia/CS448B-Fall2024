00:00 - in this lesson we're going to create a custom 
tab bar for our app and it's not as hard as you  
00:05 - might think here's what it's going to look 
like when it's done all right let's dive in  
00:10 - and see how it's done all right so let's take 
a look at the design here and we have this tab  
00:16 - bar that we're going to try and build now one 
thing is I am not going to use these icons here  
00:25 - um I've talked to JC about this I'm 
actually going to use the SF symbols  
00:32 - and if you're working on a team let's say you know 
at a company you you probably can you can suggest  
00:40 - it to the designer but being a developer on the 
team you have sort of limited say as to um what  
00:46 - to do if that really is the designer's vision to 
use you know custom icons and custom designed uh  
00:53 - icons for the tab bar then that's what you go with 
but uh for me being so the owner of this app I am  
01:00 - going to decide that I want to use SF icons and 
there are some pretty close ones as you'll see  
01:08 - um to these all right so let's jump into Xcode 
here and let's start implementing this tab bar  
01:14 - now this content view we renamed it to root 
view we actually renamed everything to root  
01:21 - view except for the actual file name so let me 
go ahead and do that as well and finally we're  
01:28 - actually going to put the tab bar in a separate 
View and then just include it in this root view  
01:35 - so I'm going to go ahead and start creating some 
different folders in here for our different views  
01:41 - so I'm just going to call this our custom tab 
bar put that up there and inside this folder  
01:50 - we're going to create a new Swift UI View 
and I'm just going to call it custom tab bar
01:59 - and in terms of the root view how we're going 
to include it is we're going to use a v-stack
02:09 - and we're going to put the tab bar down here 
in order to push the tab bar all the way to  
02:14 - the bottom to put a spacer here and I'm going to 
create an instance of our custom tab bar and after  
02:21 - we designed how this tab bar looks like after we 
make it look like what it's supposed to then I'll  
02:27 - talk to you about how we can track which tab is 
tapped on and things like that if you went through  
02:33 - the Swift UI design course that's part of this CWC 
plus program you'll also you'll know how to build  
02:40 - these custom tab bars already okay so inside our 
custom tab bar view let's start with an H stack  
02:48 - and we're going to put the three buttons in here 
right because there are these three buttons and  
02:55 - also this tab bar is a specific height it's 82 
and it's always going to be 82. so I'm going to  
03:02 - code that height right here frame height D2 
inside here we're going to put the buttons  
03:10 - now we are going to want to make these button this 
button reusable so we are going to end up putting  
03:19 - this into its own reusable view probably called 
custom tab bar button or something like that and  
03:24 - then just have three instances of that however 
in this like for now I am going to hard code  
03:32 - the three buttons here just so we can design 
it and make sure that we get it to the point  
03:37 - where it is functioning and it is looking like 
what we want and then I'll refactor that code  
03:43 - into its own reusable tab bar button all right so 
we're going to start with just a plain old button
03:52 - uh so here switch to
03:57 - and for the label if you take a look at 
this it looks like a v-stack to me right  
04:02 - so there's an image there is a piece of 
text and there's also like an accent here  
04:08 - which we will do probably do that last 
let's do the icon and the text first  
04:14 - also notice that it's all centered and by default 
this v stack is centered anyways so we're going to  
04:20 - have an image system name and this is where we are 
going to bring up this and it's called Bubble yeah  
04:29 - bubble so I'm going to use bubble left Okay I lied 
it's not exactly the same as what we have here but  
04:38 - that's what we're going to use uh if you did want 
to use these images right what you would do is  
04:46 - you would export these images exactly 
like how we exported all of the other  
04:51 - design Assets in lesson two and then you 
would include those design Assets in your  
04:58 - asset library right in here you probably 
like have another one called tab bar icon  
05:02 - images or something and then in instead of 
putting the SF symbol name you would just  
05:10 - you just put whatever name you you put in your 
asset Library here because that's how you specify  
05:15 - an image from your asset library but since we're 
using SF images this is what we're going to do  
05:22 - um okay so v-stack we also have text for that this 
is going to be just chats now this text is using  
05:32 - you know you see we have all the fonts right if we 
go into the inspect panel it is using Lex and deca  
05:39 - regular size 12. and we have specified that here 
Tap bar as a font right so now I can very easily  
05:50 - just go font font dot tab bar and let us turn 
on this preview you can see what that looks like  
06:03 - okay so we have chats there now let's double 
check the spacing between the text and the icon  
06:09 - so we've got four we've got four this one looks a 
little oh it's still four okay so we have four so  
06:18 - I am going to specify you know rather than 
specifying I could do padding top is four  
06:26 - but I think I'm going to specify 
it here so alignment is Center
06:32 - and spacing is four so that's going 
to put four right there also I'm gonna  
06:39 - constrain this image this SF symbol 
to whatever size it's supposed to be  
06:46 - so this is 18 and 18. this one's a 
little bigger 32 by 32 and this person
06:56 - select the whole person here is  
07:01 - wait I'm not selecting the right thing okay 
this this person this contacts icon is 24 by 24.  
07:09 - this is actually smaller this icon oh wait nope 
I selected the wrong thing before 24x24 okay so  
07:15 - these two icon images are 24x24 this one is 32 
by 32. so I'm going to restrict this I don't  
07:25 - want it to uh warp so I'm going to set it to 
resizable uh scale scale to fit and also frame
07:37 - with 24 height 20 24. all 
right perfect and also the  
07:49 - uh the color for the tab is going to be we 
have a color for this uh let's see icons
08:05 - what color is this see here
08:12 - did we include that here
08:19 - I think it's this one icons secondary
08:26 - go back to the UI design
08:31 - yeah all right icons secondary so what we can do 
is for this button we can say that the tint color  
08:40 - is icons secondary right so that's our gray right 
there and we are just going to copy and paste this  
08:51 - for the second button and the second button 
is going to be let's work on contacts
09:02 - and the SF symbol is going to be person
09:07 - person said profile Maybe
09:13 - so we are going to copy that put that right there 
okay and then now let's work on this middle button  
09:24 - uh this one's going to be a little different 
so that's why I'm going to code this one out
09:35 - now this is a v-stock again but this icon actually 
we do have an SF symbol for this this is slightly  
09:42 - bigger though so I guess I can take that paste 
that there and this SF symbol is going to be add
09:55 - or is it plus oh yes here we go plus 
Circle fill that's what we're going to want
10:04 - and remember this is 32 by 
32 this is me chat and um
10:15 - The Tint color The Tint color 
for this is going to be color
10:25 - icons primary if I remember correctly okay 
so now we have this notice how it doesn't  
10:32 - seem very aligned right you see chats 
and contacts are aligned on the same  
10:37 - y-axis but new chat is slightly below if 
you take a look at this it's sort of the  
10:44 - same thing although it's less obvious or you 
could see these two lines you can see these  
10:49 - two red lines connect shots and contacts but 
new chat is sitting below that um here it's it  
10:56 - seems like it's a little bit too much so we can 
change the alignment for the h stack to Center
11:07 - um I think that was actually by default I think 
maybe it's just it looks so off because they're  
11:12 - so close together and then when we finally 
space them out it might uh it might look  
11:18 - more like this so that that's the next thing 
we need to do is to spread these guys out  
11:26 - and uh what I'm going to do is I am going to 
put the button inside a geometry reader and  
11:35 - then have the button take up the entire 
space of the geometre and you'll see why  
11:39 - in a second because it's going to help us 
actually uh put that blue rectangle over the  
11:45 - tab the problem with putting the blue rectangle 
let's say I just create a rectangle right here  
11:53 - I'll show you why first so you can 
understand how we're going about this
12:04 - let's just put in some arbitrary numbers
12:09 - okay so let's say I have a blue line here marking 
that this is the current tab it's really hard to  
12:16 - tell right here but because this is a v-stack 
this tab having that blue line is going to be  
12:25 - like it's going to shift this icon and shift this 
text slightly below this tab right see this tab  
12:31 - doesn't have that blue line now you could say 
I can put maybe an invisible rectangle there  
12:37 - and then just turn that like white and turn that 
blue so that they maintain sort of the same height  
12:42 - whether they have a blue marker or not however if 
we use a geometry reader or we use a z stack this  
12:51 - blue line doesn't um it doesn't push everything 
down because with geometry readers and Z Stacks  
12:59 - it put thing it it layers them on top whereas 
v-stack it distributes it one below the other  
13:08 - so here let me demonstrate what I'm trying to 
say here and it's more obvious if I let's say  
13:15 - do that right if I do that now you can see like 
this icon is is really out of place vertically  
13:21 - as opposed to this icon here okay so we're gonna 
I'll say take take that and then we're going to  
13:31 - create a geometry reader we're gonna wrap 
this v-stack inside this geometry reader
13:42 - right and then now inside this v-stack you 
can um do frame width is geo.size.width  
13:52 - height is Geo dot size dot height 
and let's zoom out a little bit  
14:01 - you can see the geometry reader tries to take 
up as much space as possible so that's another  
14:05 - reason why I'm using this instead of the um 
the zest stock and now if you see if I put  
14:13 - um I put this rectangle in here you'll see that 
it doesn't take up even if I make it a five  
14:22 - more like a 10. you'll see that this icon is still 
in line it's going to be in line with that one  
14:29 - let's put the geometry reader 
on the contacts one as well
14:39 - and then for this v stack I can do frame 
width so you've got size.width and height  
14:47 - to that size that height and let's just 
command a and Ctrl I to just re-indent  
14:56 - everything now you can see that even 
I have this thick blue accent here  
15:02 - the chats and the content contacts 
icons are still in line with each other
15:10 - so now the the other question is you know we we're 
going to have to position that actually over the  
15:17 - um the icon okay so let's go back into the figma 
file and double check and notice that this isn't  
15:24 - a perfect rectangle the bottom left and bottom 
right Corners are rounded and we will address that  
15:31 - um later on but for now we're just going to use 
a straight rectangle because this is going to  
15:37 - require some special treatment with the default 
Swift UI Corner radius modifier you're not able  
15:44 - to specify specific Corners you want around so 
we're going to have to address that later on but  
15:48 - for now let's take a look at the height and the 
width 64 by 4. so we can I'm going to change the  
15:58 - height to four for the width rather than I think 
rather than hard coding it as 64. what I'm going  
16:05 - to do is I'm going to make it relative to the 
geometry reader width the reason for that is  
16:11 - because this geometry reader width gives us the 
width of the entire button right so I'm going to  
16:16 - make this blue rectangle um half the width of it 
and then I'm going to add left padding equal to a  
16:26 - quarter of this width and that's going to position 
that directly in the middle so let's go ahead and  
16:32 - try to do that so the frame instead of 64 it's 
going to be Geo dot size dot width divided by 2.  
16:40 - right so it's going to be half that looks like 
quite a bit but let's finish this off and see what  
16:46 - it looks like so padding dot leading so that's 
padding from the left uh to the to the size of  
16:53 - to the amount I mean of divided by four and 
that's going to put that right in the middle
17:03 - okay um let's stick with that
17:09 - Okay so we've got our so we're gonna 
have to actually put the same thing  
17:15 - on the contacts as well
17:20 - right here so you'll see it both like that now 
this new chat button is not actually a tab it's a  
17:28 - button and that's why it looks a little different 
when you tap on this new chat we're not going to  
17:33 - put a blue accent over it because it's literally 
going to pop up a new screen an overlay pop-up  
17:41 - that looks like this this new chat where 
you're going to be able to specify you  
17:45 - know add some recipients and start a new chat 
whereas the other two tabs this chat tab has  
17:52 - a blue indicator because this is the chats Tab 
and then the contacts button brings you to the  
18:00 - contact contacts tab so that's a separate screen 
as well that's why those two have blue markers  
18:07 - now we have to make all of this functional right 
because this is not actually functional just yet  
18:13 - and we also have to turn at least this button 
the chats button and the contacts button into  
18:21 - a reusable component because there's no 
point in having mostly the same code in  
18:26 - two different places but first of all let's make 
this tab bar work because for now these are just  
18:33 - um these are just buttons so we need to keep 
some State as to what tab it's currently on now  
18:42 - um typically if there are a static number 
of states like a known number of states you  
18:50 - can create an enum type so I'll call this tab 
or let's call it let's do tabs actually we'll  
19:00 - this is going to be an INT and there's going 
to be a couple of different cases so it can  
19:04 - either be you know chats and we'll call this 
zero there's going to be contacts wait case  
19:15 - and then this will be one and because new chat 
is a button and not a state uh I don't know if  
19:23 - I'm gonna put this case here let's leave it 
out for now but the next thing we have to do  
19:28 - is decide where are we going to keep track of the 
current tab that you know the currently selected  
19:35 - tab should we do it in this tab bar or should 
we do it higher up in the viewer hierarchy and  
19:42 - I would say that we should do it higher up in the 
view hierarchy the reason is because if you take  
19:48 - a look at this preview here we need to know like 
the root view needs to know what is the currently  
19:55 - selected tab so that it can change what's here 
in in this top section right so therefore I would  
20:04 - say that we need a state property here call this 
the selected Tab and this is a type of tabs and  
20:13 - we are going to default this to contacts because 
I think that that is after the onboarding screen  
20:21 - um we are going to throw the user into the 
contacts tab so I'm going to set that as  
20:27 - the initial one and then the tab bar however you 
know when the user Taps on these buttons we need  
20:34 - to somehow communicate back up to here for the 
root view to change the state to to whatever tab  
20:41 - the user selects right so inside the custom tab 
bar here there should be a binding right bound  
20:49 - to this property here so here you know if you're 
unfamiliar with State properties and bindings I  
20:57 - would say review the foundations course in the CWC 
plus screencasts course there's also a lesson on  
21:05 - Swift UI data flow so I'll link to that in the 
description as well so you can that talks all  
21:10 - about State Properties bindings and and that sort 
of stuff okay so selected tab easy tabs so now  
21:19 - we have access to this select a tab now we 
also have to now pass this through as a binding
21:31 - tab and so this property gets passed through 
when we create the custom tab bar it's going  
21:37 - to be bound to this property right here 
and then now when the user Taps on this  
21:42 - one switch the chats we are going to be able 
to say selected tab equals chats okay and then  
21:49 - down here this is switched to contacts we're 
going to be able to say selected tab equal  
21:57 - equals contacts the next thing is that we only 
want to show this blue Mark if it is currently  
22:06 - you know contacts so we can definitely add an 
if statement here so if selected tab is equal  
22:13 - to contacts then we are going to show this 
blue mark and then same thing for up here  
22:22 - if selected tab is chats then we are going to 
show this blue mark here like that let's reindent  
22:32 - everything and our preview is broken but however 
we can dot constant and we can just pass in  
22:41 - contacts for our preview okay so now 
let's try to run this and see what happens
22:48 - all right so contacts is the first tab so that 
works and this is just the button all right so  
22:56 - our tab bar is working the next thing to do is 
to refactor this button out of this tab bar and  
23:04 - make it a reusable view so let's add a new file 
Swift UI View and call it custom tab bar button  
23:13 - let's just call it tab bar button 
oh that actually might be a reserved
23:21 - maybe not okay so we are going to basically grab
23:28 - and I want to keep the buttons here because I 
don't want to introduce another layer like I  
23:32 - don't want to have to pass the selected tab down 
to the tab bar button itself so I'm actually just  
23:37 - going to make this part reusable you know the 
visual which is the majority of the duplicated  
23:44 - code anyways so taking a look at this highlighted 
code the things that are Dynamic is the text  
23:52 - the SF icon name and also whether it is 
active or not whether or not we should  
23:59 - show this blue rectangle so I am going to 
create three properties here VAR image name
24:10 - and also a Boolean for whether or not 
we should display that blue rectangle  
24:16 - okay so I'm going to go here I'm going to copy 
this I'm going to actually I'm going to cut it  
24:22 - no I'm going to copy it okay copy go here 
replace this text label with our visuals  
24:29 - and then for the button text I'm just 
going to replace it with our property  
24:35 - button text for this I'm going to replace it with 
image name and then for this I'm going to say if  
24:44 - is active all right this Boolean 
is true then display this  
24:51 - and I think we're good okay missing 
Arguments for the preview uh let's say chats
25:03 - bubble dot left true let's see if we can get a 
preview all right it looks off because it's not  
25:11 - in the context of this H stack okay so here we 
are essentially going to get rid of all of this  
25:19 - I'm sorry comment it um but I can replace 
this with tab bar button and I can put  
25:28 - chats bubble dot left and is active is 
basically selected tab is equal to chats
25:40 - we can space it out so it looks better easier 
to read alright so now let's do the same thing  
25:47 - here and uh for this for this contacts one  
25:54 - all right so instead this is going to be 
contact this is going to be contacts and  
25:59 - this is just going to be a percent and I can get 
rid of all of these all of this duplicated code
26:09 - all right now let's run it again just to 
make sure that everything still looks okay  
26:14 - and we're going to be done with our 
custom tab bar that looks pretty good