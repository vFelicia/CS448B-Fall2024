00:00 - all right we're back in the war card game and 
now we're going to add functionality to the  
00:04 - deal button so that the user can tap on it now if 
you're brand new to this series click over here  
00:09 - to start from lesson one all right let's Dive In 
all right so here we are in xcode looking at our  
00:15 - war card game just to give you a reminder let's 
just run it quickly and see what we can do with  
00:21 - it alright so here it is it launches in the 
simulator we can see the cards this button is  
00:27 - not interactive because it is actually just an 
image right now and these are the score labels  
00:32 - so going into the code that represents that user 
interface if we scroll down we're going to see  
00:41 - our image element that represents that button 
right there what we want to do is change that  
00:46 - into an actual button not just an image right so 
what I'm going to do is create some space here  
00:53 - so we can work and you can clearly see what we're 
doing I'm going to get rid of that image element  
00:59 - and that's going to disappear as soon as we make 
this preview live there we go what we're going  
01:06 - to do is First add a button from the library so 
if you remember that is this plus icon up here  
01:13 - if you click that and you go under this first 
tab which is a library of all the views and  
01:19 - buttons should be at the Top If it's not you can 
always type in button so we're going to drag and  
01:24 - drop that right there now this is a basic text 
button and I know it's a little bit hard to see  
01:31 - there in the UI but we're going to start with 
just a simple text button to demonstrate how it  
01:37 - works and then we are going to customize that with 
the image the deal image let's change this string  
01:45 - remember it's a string data type it's a piece 
of text we are going to customize that into deal  
01:52 - and now notice that there are a pair of curly 
brackets here and in between those brackets you  
01:59 - put the code that you want to be executed when the 
user Taps on that button so why don't we go ahead  
02:06 - and just put up a simple print statement and we 
are going to just print out deal cards now when  
02:14 - we tap on the button when it prints this out it 
will print it out into the console area that is  
02:20 - down here in xcode so let me just drag this window 
up here it's called all sorts of information now  
02:25 - if you don't see this part right here here's the 
button that you would click on in the lower right  
02:32 - hand corner you would see this little button 
here you click it to bring up this debug area  
02:39 - and if you don't see two different sides to it 
there are two buttons again in the lower right  
02:48 - that you can turn on and off so make sure that 
this side with all the text that's the right hand  
02:54 - side that is toggled on because that's where this 
is going to print out too so why don't we again  
03:01 - run this in the simulator actually before we do 
that let me just add a simple modifier so that  
03:08 - this text button is more visible because right now 
this blue text is really hard to see against the  
03:13 - green background now do you remember how to add a 
modifier so you could very simply hit Dot and then  
03:22 - foreground color and you can type in dot White to 
change that to white or if you didn't want to do  
03:31 - that you could always go through the library by 
hitting this plus icon choosing the modifiers and  
03:39 - selecting foreground color clicking and dragging 
right there changing that default blue text  
03:46 - to White all right let's go ahead and rerun this 
in the simulator all right so here's the simulator  
03:53 - I'm going to tap on this button and it's going 
to run this code right here print deal cards  
04:00 - as you can see it is starting each time I press it 
it executes the code within those curly brackets  
04:07 - so great our button works now the next thing I 
want to do is to incorporate what you learned  
04:16 - about functions so instead of Simply writing the 
code here inside of these two curly brackets why  
04:24 - don't we call a function from here so this 
function is going to perform the uh all the  
04:32 - code related to dealing cards so why don't we 
find a space to put this function so this part  
04:40 - you have to be kind of careful like about where 
to put this function because I haven't really  
04:45 - explained yet what these structs are and you know 
where you would put your functions so I'm going to  
04:54 - tell you where to do that now but it's very easy 
to make a mistake so here's what I want you to do  
04:59 - so put your cursor let's say right under body 
right there and you're going to go to editor  
05:07 - and you're going to go to code folding and you're 
going to hit fold you can also take note of these  
05:15 - shortcut keys if you'd like so we're just going 
to choose fold and that's going to fold it all up  
05:20 - neatly if you want to unfold it again you just go 
to you can either double click this actually you  
05:27 - can double click that to open up that's probably 
the easiest way so again put your cursor under  
05:30 - body if you don't have a blank space here and 
you know you can do it there all you need to do  
05:37 - is actually make sure that your cursor is after 
that opening curly bracket of the body and we're  
05:42 - going to go to editor we're going to go to code 
folding and hit fold and the reason I want you to  
05:48 - do that is because we are going to create a new 
line right before this closing bracket but after  
05:57 - the closing bracket of the body right there and 
we are going to declare a new function now I'm  
06:03 - going to explain to you in future lessons 
why why we are putting this where it is and  
06:09 - um you know what is a struct uh how do you know 
where to put your functions and things like that  
06:14 - but for now I just want you to follow what I'm 
doing so type in func to declare a new function  
06:21 - we're going to call this function deal if you 
remember the Syntax for it pair of parentheses  
06:28 - which in between there you would put in any input 
parameters right that you this function expects  
06:37 - for the purpose of this code we don't need any 
input parameters so it's just going to be an empty  
06:44 - pair of parentheses like that now let's open up 
a pair of curly brackets like that so that we can  
06:49 - actually put the code in there now in here I'm 
going to put print deal up to declare a string  
06:58 - we got to use the quotation marks right okay so 
this function all it does is print deal cards  
07:06 - just like what the button did before and it'll 
execute this anytime you call deal so now let's  
07:14 - open up the body again scroll down to our button 
and instead of calling print right here we are  
07:22 - going to call our new function and look at that 
autocomplete recognizes it and all we need to  
07:29 - do is that now let's run it into similar and 
just test that it still works because we don't  
07:34 - want to make a mistake at this point so tap on 
that button as you can see it still works right  
07:39 - what's happening is that when you're tapping 
on the button it's executing this function if  
07:43 - you scroll a lower this is what that function 
does all right so now in the future when we  
07:49 - want to add functionality to the button right 
here all we need to do is add the code in here  
07:57 - so that's a basic text button but what if 
we wanted to use an image for the button  
08:01 - instead let's take a look at how we do that 
let's scroll back up to our button element  
08:07 - as you can see here the button that you add 
through the library in this way it only allows  
08:14 - you to specify a piece of text so this is a text 
button if you want to create a button which can  
08:23 - be visually represented by anything you'd like 
um what you would have to do is type out button  
08:32 - type out the first opening parentheses and you 
can see a couple of different options for buttons  
08:39 - that you can create and what we are looking for is 
this one right here action and label so action is  
08:47 - what happens when you tap on it and label allows 
you to put any sort of UI code in there any sort  
08:55 - of UI visual elements so let's go ahead and 
double click this and you're going to see  
09:01 - this these input parameters look a little bit 
different from this one right this one only had  
09:06 - the one text parameter that you had to supply and 
that was for the text for the button this one has  
09:13 - two different ones has action and it has labels so 
you can double click on any of these so go ahead  
09:20 - double click on action this this part right here 
and what's going to happen is it's going to change  
09:25 - in this this sort of format right here this first 
set of opening bracket this is the action for your  
09:33 - button so let's stay organized here so I'm going 
to actually get rid of this text button first  
09:40 - okay and in here uh under label this is actually 
where we're going to put the visual representation  
09:49 - right label this set of curly brackets let's put 
in an image element and our image name was button  
10:01 - right if we go back to assets that's what this 
is right here let's go back to content View and  
10:07 - let's refresh this preview right here oh okay so 
we can't yet view the preview because we haven't  
10:15 - filled in the code part yet so you can actually 
just delete that code part and that will be valid  
10:22 - okay so as you can see here we've got now a 
visual image of our button and you see this is  
10:30 - the visual representation of the button now in 
here this is supposed to be the action uh good  
10:36 - thing that we created a function right we can 
simply call that deal function like that let's  
10:43 - now run the app in the simulator again and take a 
look at what happens when we tap on our new button  
10:51 - so you can see it is an image element but it is 
actually a button and when we tap on it it runs  
10:58 - the deal function which prints out this statement 
in the console area all right now that we have  
11:05 - the button looking the way we want let's add 
some more functionality to it so we want our  
11:09 - deal button to do more than just print out deal 
cards we want it to actually deal cards right so  
11:16 - how is tapping on this deal button and running 
this deal function right what sort of code can  
11:24 - we put in here to actually change the images 
for this image element and this image element  
11:32 - right and then how are we going to update the 
score labels here as well well let's first  
11:37 - take a look at what represents these things 
and see what we can work with we scroll up  
11:45 - we can see that we have an image 
element that represents card two  
11:51 - and this is referencing the image asset 
in our asset library card two in fact we  
11:58 - have card two all the way up to 14. so 
you'll notice that when I change this  
12:06 - in here and I update the preview it's 
actually going to change the card right
12:16 - continue to 13 right change this to 
14. and if I accidentally change it  
12:22 - to a name that doesn't exist then 
it actually doesn't show anything
12:28 - right so what we need to do is when the user 
Taps on the deal button we need to run some  
12:36 - code statements that would change what is being 
passed into this image element and this image  
12:42 - element as well well if you think back at the 
Swift code that you have learned so far this is  
12:48 - variables constants functions there is something 
that can help us here right what I'm referring  
12:55 - to are variables so why don't we go at the top 
here and declare some variables to represent  
13:04 - the cards for the player and the cards 
for the computer and that way when we hit  
13:10 - the deal button we can change the value in those 
variables let me show you what I mean so put your  
13:16 - cursor in front of VAR and just create a couple 
of lines right there like that and we are going  
13:24 - to declare a brand new variable to store these 
two values right here instead of this is called  
13:32 - hard coding a string meaning that when we just 
put a text a piece of text here there is nothing  
13:40 - that can refer to that piece of text to change 
it so this is what's called a hard-coded value  
13:46 - uh we are now going to change 
that so that it can be dynamic  
13:50 - so we declare a new variable using VAR right and 
I'm going to name this variable player card and  
13:57 - I'm going to assign to It Card let's say seven 
and then I'm going to declare another variable  
14:04 - let's call this one CPU card and I am going to 
assign to it card 13. that string right there  
14:12 - and now you can probably see where this 
is going in the image element instead of  
14:18 - passing this hard-coded string into here I can 
pass in the variable and because the variable  
14:26 - is referencing this string card 7 you can see 
that that is what this image element displays  
14:34 - right and I'm going to do the same thing with this 
CPU card by putting in that variable referencing  
14:42 - that variable and then passing it to the image 
element so now you can see where we're going  
14:47 - when I tap on the deal button and it runs the 
deal function inside the deal function I can  
14:55 - change the value that player card is pointing to 
I can change CPU card to another string value as  
15:03 - well and that is going to cause the card images 
to change now I don't want you to do that just yet  
15:09 - because there are a couple of details that we need 
to go through first but I'm just running through  
15:14 - at a high level what our thought process is okay 
so let's do the same thing for the scores down  
15:22 - here because if you remember when we built this 
user interface the scores we also you did used  
15:28 - some hard-coded values so down here under player 
we hard coded zero and under CPU we hard-coded  
15:36 - another zero let's go up here and declare two more 
variables to store those scores however this time  
15:47 - so I'm going to use an integer because 
that's going to make it really easy for  
15:52 - us to add right we can add one add to we can 
perform these math operations on an integer
16:01 - let's do the same thing to represent 
the other score right there  
16:05 - and let's go down and change these text elements 
to refer to these variables that we just created  
16:16 - okay so here uh under player instead of 
passing in this hard-coded zero string  
16:22 - we are going to put player score now you're 
going to see an error and I'll tell you why  
16:31 - so let's change this window a little bit it 
says no exact matches in call to initializer  
16:39 - so that that doesn't really explain very much 
to be honest but um I'll explain to you what  
16:46 - the issue is so this text element expects a 
text piece of data as input as what to display  
16:56 - you know for this label it displays text but what 
we are passing into it is an integer right it's a  
17:04 - number so it doesn't know how to display that 
because it's only programmed it's only Built  
17:09 - to display pieces of string data so what we 
can do is we can actually convert this number  
17:17 - this integer data into string data and then um or 
rather the string representation of this number  
17:26 - right so what this is how we would do that uh 
we would here let me get rid of this for uh for  
17:35 - now we are going to create a new piece of string 
data uh type in capital S string and then open a  
17:41 - pair of parentheses and then in the center in 
between it you are going to put a player score  
17:49 - so let's break this down so first of all 
notice that the error goes away we're good  
17:55 - what we're doing is we're taking this integer and 
we are turning it into the string representation  
18:03 - of that integer so if it's you know the number 
10 it's going to be turned into the string 10  
18:11 - and then that is now passed into the text element 
so everyone's happy let's do the same thing with  
18:18 - this one so we're going to type in string pair 
of parentheses in in between that we're going to  
18:24 - put CPU score and this is called casting I know 
it's kind of a weird name but essentially we are  
18:31 - converting the int data to string data and we're 
changing the data types it's called casting we're  
18:38 - casting into a string that's what's happening all 
right so now we are all set up to modify these  
18:46 - variables right player card CPU card player score 
CB score we're all set to modify these variables  
18:53 - whenever the user Taps on the deal button right 
here inside this deal function here's something  
19:03 - cool if you right click on any function you can 
jump to the definition that's basically saying  
19:10 - that I want to see what is inside this function so 
jump it's just going to zoom you straight down it  
19:17 - could be an in another file even it'll jump you 
directly there to see what is this deal function  
19:24 - right and all we have to do is modify the code 
here to change those variables that we just  
19:31 - created okay this is the home stretch one more 
lesson to add the app logic and then we're done  
19:37 - now if you've been learning a lot from this series 
don't forget to hit thumbs up to support this  
19:42 - video and don't forget to subscribe so you don't 
miss that last lesson I'll see you in that video