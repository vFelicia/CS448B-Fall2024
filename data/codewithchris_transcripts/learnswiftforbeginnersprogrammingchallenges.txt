00:00 - hi it's Chris here so you've just gone
00:02 - through all of those in the learn Swift
00:04 - for beginners series now there's 17 in
00:06 - total so far and although there's a lot
00:09 - more to learn with Swift programming you
00:12 - do know a lot already to be dangerous
00:15 - and to do quite a bit with it so in this
00:17 - video I'm going to introduce to you
00:19 - three programming challenges that you
00:21 - can do today just using what you've
00:24 - learned so far and they're very very
00:27 - doable so don't shy away from them and
00:29 - they're going to help you reinforce what
00:31 - you already know help you identify
00:34 - things that you might not have grasped
00:36 - and furthermore it helps you memorize
00:39 - all of the syntax and the structure of
00:42 - the programming language all the key
00:43 - words and things like that I tell you
00:46 - this from first-hand knowledge because
00:47 - when I learned iOS programming I just
00:49 - read a book front to back and when I try
00:52 - to build something I realized that I
00:54 - couldn't remember a lot of what I read
00:56 - so it wasn't until I started typing
00:58 - things out hitting roadblocks and you
01:01 - know actually physically typing it out
01:03 - did everything start to glue and meld
01:06 - together in my mind so these exercises
01:08 - are going to help you do that and
01:10 - furthermore once you complete these
01:12 - three challenges you can get your name
01:15 - and a link to your Twitter profile
01:17 - listed right here below this section in
01:20 - our wall of same now right now there's
01:23 - nobody because I'm just launching this
01:24 - page today and all you have to do is
01:28 - complete the three challenges up here
01:30 - and then you're going to click this blue
01:33 - button to tweet this out and proclaim
01:34 - your victory and also to notify me so
01:37 - I'm going to add your name manually down
01:39 - here and you will be immortalized on
01:42 - this learn Swiss two page so the URL for
01:46 - this page is in this description below
01:48 - if you're watching this on YouTube or if
01:50 - you're already on this page then you
01:51 - just need to scroll down the URL as code
01:53 - with Chris calm slash learn - Swift
01:56 - okay now I'm also going to quickly go
02:00 - through the three challenges with you
02:02 - just to introduce them and to tell you
02:04 - what you have to do or you can just go
02:06 - ahead jump to the page right now and
02:08 - download these files because there are
02:09 - instructions in each of these files okay
02:13 - so let's just hop
02:14 - into the first playground here you're
02:16 - going to need Xcode in order to complete
02:19 - these challenges so for challenge one
02:22 - you've got two arrays with a bunch of
02:24 - strings in each array and what I want
02:27 - you to do is to write a function that
02:29 - accepts a single string parameter and
02:32 - this function is going to output true or
02:34 - false if the input string is in either
02:38 - of the two arrays then return true if
02:42 - the input is not in any of the arrays is
02:46 - not in both of the arrays at all then
02:48 - returns false so here are two examples
02:50 - if it's cat then you would return true
02:52 - because it's here if it's cow cow is in
02:55 - neither of these arrays so you're going
02:57 - to return false okay so you might have
03:00 - to go back and review the syntax to
03:02 - write a function and to write parameters
03:04 - and such but it's going to be good
03:06 - practice for you okay so here's the
03:10 - second one it's going to get a little
03:11 - bit harder with each one so this one I'm
03:15 - giving you a class called string
03:17 - caterpillar and I want you to implement
03:19 - the add function and the goal function
03:22 - so the add function takes in a piece of
03:25 - text and what you're going to do is
03:28 - you're going to store that piece of text
03:30 - every time add is called and this piece
03:33 - of text gets passed and you're going to
03:35 - store that piece of text somehow and
03:37 - then when someone calls the goal
03:39 - function you're going to output all of
03:42 - the pieces of text that have been added
03:45 - by this add function you're going to
03:48 - output them all in one line using a
03:49 - print statement so this is the code
03:54 - statements that are going to get
03:58 - executed you don't have to edit any of
04:00 - this all you have to do is you know
04:03 - you're going to be completing this part
04:05 - right here this class definition
04:07 - so given this code declaring a new
04:10 - string caterpillar object and then
04:12 - adding H adding e ll oh and then call
04:15 - and go the expected output down here in
04:19 - the console would be hello and then
04:22 - there's some bonus credit if you want to
04:24 - create a custom initializer that where
04:27 - you can pass in
04:27 - a string so you can read about that okay
04:31 - so the third one is right here and this
04:37 - one's a little more complicated so what
04:40 - we have here we have a person class you
04:43 - don't need to do anything with this it's
04:45 - got a name property and you've got a
04:48 - book class it's got title and author you
04:51 - don't have to do anything with this
04:52 - class either but what you do have to do
04:55 - is you have to implement this class
04:57 - called library so this library has got
05:00 - two dictionaries okay so one dictionary
05:04 - here is the library catalog so it's got
05:06 - this book ID and then adds a key and
05:09 - then the value is an actual book right
05:12 - and the book object obviously has a
05:14 - title and an author so here's another
05:17 - book that's the book ID and that's the
05:20 - book object with the title and the
05:23 - author and then we've got another
05:25 - dictionary that so far is empty the key
05:28 - is a string it's going to be the book ID
05:30 - and the value is a person object which
05:33 - represents the person who has checked
05:35 - out that book and I want you to
05:37 - implement a couple of functions here a
05:39 - few the first one is search by title
05:42 - you're going to pass in a title of a
05:46 - book now that's not the book ID okay
05:48 - that's the actual title and you have to
05:53 - implement this code which checks for
05:55 - several things so first of all if the
05:58 - book ID is not or sorry the book title
06:01 - is not in the catalog at all if it
06:05 - doesn't exist in this catalog dictionary
06:07 - then you return the string not in
06:09 - catalog now if it is in the catalog and
06:14 - it's available then you return the
06:16 - string available and if it is checked
06:19 - out by someone then you put checked out
06:22 - by and then the name so this you're not
06:26 - going to put n AME here you're going to
06:28 - put the actual name of the person that
06:33 - exists in this property right here
06:36 - remember you do have this dictionary
06:38 - which contains you know the person
06:40 - object that's checked out
06:41 - so you're going to have to check both
06:42 - dictionaries that's a little hint for
06:44 - you and next you're going to implement
06:47 - two other functions check out and check
06:50 - in okay so pretty self-explanatory here
06:53 - again if the book doesn't exist in the
06:55 - catalog you shouldn't be able to check
06:57 - it out so you're going to return the
06:58 - string book doesn't exist if the book is
07:02 - currently already checked out and it it
07:05 - does exist in the catalog then you're
07:06 - going to return error : book already
07:08 - checked out and finally if the book is
07:13 - in the catalog and it is available as in
07:17 - it's not checked out by anybody yet then
07:19 - you're going to return successfully
07:20 - checked out you're going to actually add
07:23 - the person to the dictionary and well I
07:26 - don't want to give too much away but
07:27 - that this is essentially what you want
07:30 - to output given this case and check in
07:35 - similar I'm not going to go through it
07:37 - pretty much the opposite of check out
07:39 - you're going to be returning the book
07:40 - and again that's all all your editing is
07:44 - this stuff in the library class
07:48 - definition you don't have to modify
07:50 - anything below here this is just the the
07:54 - sample statements and the expected
07:56 - output so here we're going to declare a
07:58 - new library we're going to declare to
08:00 - borrowers Curious George and Mark Twain
08:03 - and then there's going to be a bunch of
08:05 - statements and it's going to do the
08:09 - printing of the result that comes back
08:11 - from the functions you're going to
08:13 - implement and this is the expected
08:15 - output that you should see from that
08:17 - print statement then it's going to
08:19 - execute this one and print it out and
08:21 - you're going to you know look in the
08:23 - console down here to see this message so
08:27 - what you want to do is implement the
08:30 - functions up here in the library class
08:33 - and if you've done it correctly
08:35 - you know returning the correct output
08:38 - here depending on the scenarios then
08:41 - running this series of statements your
08:45 - it's going to yield the expected output
08:48 - in the console so you can check that now
08:50 - once you've successfully completed all
08:52 - of the challenges what I want you to do
08:55 - is going back down to the wall of fame
08:57 - here and click this button it's going to
09:00 - launch a little window and you can tweet
09:02 - it's going to notify me I'm going to see
09:05 - it I'm going to add your name and your
09:07 - profile below here in the wall of fame
09:09 - and it's also going to help me get the
09:11 - word out for this page a little bit more
09:14 - so I can grow the code with crisp brand
09:16 - so I do thank you for that and I thank
09:19 - you for learning with me so go ahead and
09:22 - give it a try if you get stuck comment
09:25 - here in this page below I'll help you
09:27 - out thanks for watching and I'll see you
09:29 - next time bye for now