00:00 - hey code crew in the last lesson you
00:02 - learned how to filter and sort your data
00:04 - using the predicate and sort descriptors
00:06 - properties of the fetch request
00:08 - in this lesson you'll learn how to
00:09 - specify relationships between your core
00:11 - data entities
00:12 - now if you've missed the previous few
00:14 - lessons i highly recommend that you go
00:16 - and check those out first
00:18 - one more thing before we begin i want to
00:20 - mention that these coordinator lessons
00:22 - are actually part of the database course
00:23 - in my cwc plus program
00:26 - inside cwc plus you'll be able to build
00:28 - this travel app that uses
00:30 - core data for the list of locations as
00:32 - well as personal notes for each location
00:34 - alright let's get started if you
00:37 - remember in lesson one of this core data
00:38 - series
00:39 - i showed you a diagram that illustrated
00:41 - what an object graph is
00:43 - we had the person objects and a family
00:45 - object
00:46 - and the family object held an array of
00:48 - person objects
00:49 - we're going to recreate this
00:50 - relationship in our data model
00:52 - let's go into xcode so here's the data
00:55 - model for our core data entities
00:57 - and the first thing we're going to do is
00:59 - to add a family entity so go ahead
01:02 - click add entity and let's change this
01:05 - entity name
01:08 - to family uh the other thing we're going
01:12 - to do
01:12 - is let's just add an attribute
01:16 - called name and change it to string
01:20 - and finally here's the part where we
01:23 - define the relationships between our
01:25 - different entities
01:26 - so we're looking at the family entity
01:28 - right now we're going to hit plus
01:30 - under relationship and we're going to
01:32 - name
01:33 - this relationship and what ends up
01:36 - happening
01:36 - is it's going to be a property just like
01:38 - these attributes are
01:40 - so i'm going to call this people
01:43 - and it's going to essentially store
01:47 - all of the person objects that's part of
01:50 - this family
01:51 - so the destination is basically the data
01:54 - type
01:55 - i'm going to choose person and
01:58 - inverse here there's nothing to select
02:01 - for now but we're going to talk about
02:02 - that in just a second
02:04 - so first of all let's go over to the
02:07 - attributes
02:08 - section of this relationship and specify
02:10 - the type
02:11 - and change it from to one to many and
02:14 - that means that
02:15 - this people property can
02:18 - store multiple person objects
02:20 - essentially it's going to be an array
02:22 - of person objects now let's go over
02:25 - to the person and we're also going to
02:28 - specify a relationship here
02:30 - but in the inverse so it's going to
02:33 - define
02:34 - that a person belongs to a family
02:38 - so under relationship hit plus again
02:42 - and for this property
02:45 - i'm going to call it family and the
02:47 - destination is essentially the type of
02:49 - this property
02:50 - it's going to be family and for the
02:53 - inverse
02:54 - if you pull this down now you're going
02:56 - to see that there is an inverse and this
02:58 - is that relationship that we defined
03:01 - here
03:02 - right in the family entity so that's
03:04 - what we're going to want to select
03:08 - and then if you go back to the family
03:10 - entity under this relationship you're
03:12 - going to see that this
03:13 - inverse has automatically been set for
03:16 - you
03:17 - and you can specify that the inverse of
03:19 - this relationship
03:20 - is the family property of the person
03:23 - object
03:24 - and the reason we specify this inverse
03:26 - is so that core data
03:27 - can maintain the data integrity of our
03:31 - object graph even if you're not going to
03:34 - use the inverse
03:35 - for example you know you want a family
03:38 - object to hold
03:39 - multiple references to different person
03:42 - objects but you don't really
03:43 - care that a person object has a
03:45 - reference back to the family object
03:47 - you should still specify this inverse
03:49 - relationship
03:50 - in your data model again this is
03:52 - something that apple recommends that we
03:54 - always specify this inverse relationship
03:57 - so that it lets core data
03:59 - maintain the integrity of the data
04:02 - all right now that we've specified this
04:04 - simple relationship between our family
04:06 - and person entities
04:07 - let's go ahead and regenerate our
04:10 - our classes actually i forgot for this
04:13 - family entity
04:14 - i'm going to set it to manual code
04:15 - generation as well
04:17 - just like i have for the person and
04:19 - since
04:20 - it's set to manual that means we have to
04:22 - regenerate these classes every time we
04:24 - make a change
04:25 - now first of all i'm going to go ahead
04:27 - and delete my existing
04:29 - person class because as you can see
04:33 - it doesn't account for that relationship
04:36 - that i just added
04:38 - so let's go ahead select both of these
04:40 - and choose delete
04:42 - and move it to trash now i'm going to
04:45 - choose
04:46 - editor and i'm going to choose create
04:50 - ns managed object subclass select the
04:53 - data model
04:55 - make sure that my entities are selected
04:57 - the ones that i want to
04:58 - generate the classes for hit next
05:01 - and let's just save it right there now
05:04 - i'm going to drag all of these into my
05:06 - model group
05:07 - so one of the first things i like to do
05:09 - after generating these classes is press
05:11 - command b just to make sure that
05:13 - everything builds successfully
05:15 - and if you get a failure sometimes it's
05:18 - just because
05:19 - xcode's detecting some artifacts that
05:21 - should be gone in the build folder
05:23 - so what you do is go to product and hit
05:26 - clean build folder and that will usually
05:29 - do the trick and you can press command b
05:30 - and build it again just to make sure
05:33 - that everything is fine
05:34 - and also sometimes xcode won't detect
05:38 - your new classes and you'll get some
05:39 - weird autocomplete errors
05:41 - and you'll see some xcode errors even
05:43 - though you can run the app
05:45 - successfully if that happens to you
05:46 - usually quitting xcode and restarting it
05:49 - will
05:49 - do the trick and that's what happened to
05:50 - me the first time i was working with
05:52 - this
05:53 - so i just thought i'd mention it now
05:55 - what i'd like to do is just to review
05:57 - the classes that were
05:58 - generated and point out some of the
05:59 - differences to you
06:01 - based on what we edited in the data
06:03 - model so taking a look at this
06:05 - person class now we have a family
06:08 - property
06:08 - you can see that the data type is family
06:10 - so this is a reference from the person
06:12 - to the family the inverse
06:16 - if we go to the family class you can see
06:19 - that
06:20 - here's the name attribute that we
06:21 - specified and here's also the people
06:23 - relationship that we specified the data
06:25 - type is actually an
06:27 - ns set it contains a set of people
06:30 - but take a look at this down here there
06:32 - are a couple of
06:33 - methods so there's two methods it's
06:36 - called the same thing add to people but
06:38 - this is allowed because the
06:39 - the signature is different all right the
06:41 - the parameter that you pass in is
06:43 - different
06:44 - one is for adding a single person object
06:47 - to that
06:48 - set here and this one is
06:51 - if you want to add you know multiple
06:53 - person objects
06:54 - to this set same thing goes for remove
06:59 - remove a single person or remove a set
07:01 - of people
07:03 - now i think you can guess that it's
07:04 - pretty straightforward to specify this
07:06 - relationship
07:07 - and that's why i didn't really modify
07:10 - the user interface
07:11 - of our existing demo app to accommodate
07:14 - families and to specify relationships
07:16 - between people and families because the
07:18 - work that
07:19 - it would have taken me just to create
07:22 - that
07:22 - all of that new user interface it's much
07:25 - faster for me just to demonstrate to you
07:27 - and show you the code
07:29 - for you to create a couple of these
07:31 - entities specify the relationships and
07:33 - save it to our core data
07:35 - database so let's go ahead and do that
07:37 - i'm going to go into
07:38 - our view controller and
07:41 - maybe i will i'll just do it in in a
07:45 - random method here because
07:48 - i don't want to i don't want to confuse
07:50 - you
07:51 - by writing it in some other method so
07:55 - i'm just going to say relationship
07:59 - demo and just create this new function
08:02 - here
08:03 - or a new method here for us to write
08:04 - this code so
08:06 - let's create a family
08:13 - create a person and then lastly
08:17 - we have to remain remember to save uh
08:20 - save the context okay so uh
08:23 - let family equals so we're going to
08:26 - create a new family object
08:28 - in our managed object context
08:32 - so that's the context we want to create
08:34 - it in
08:36 - and why don't we go ahead
08:40 - let's set that to var actually because i
08:42 - want to change the name
08:48 - let's call this the abc family and let's
08:51 - create a new person
08:56 - in this context as well and
08:59 - oops let's set the person's name
09:04 - to maggie
09:08 - okay so how do we specify a relationship
09:11 - between
09:12 - the family and the person well there are
09:14 - actually two ways you can do it
09:16 - because we actually have uh
09:18 - relationships or properties
09:19 - pointing both ways so very simply
09:23 - you can set the family property of the
09:26 - person
09:29 - to this family up here and just like
09:32 - that you've specified that relationship
09:34 - um after you do that when you
09:38 - try to access family dot
09:41 - people you'll find that maggie is
09:44 - actually in that set
09:46 - right and you're gonna have to save it
09:48 - so context
09:50 - dot save
09:53 - so that's the first way you can specify
09:55 - the relationship and as you can see
09:57 - super easy the second way you can do it
10:00 - is
10:00 - by using those methods that i showed you
10:03 - see
10:04 - add to people and obviously you probably
10:07 - have to do this down here
10:17 - and you pass in the person and actually
10:22 - we can use let for this
10:26 - and so that's the second way using any
10:28 - of these two ways to specify
10:30 - relationships between your objects and
10:32 - building your object graph like that
10:33 - after you save it to core data and you
10:36 - bring it back
10:36 - those relationships will get maintained
10:38 - right so if you bring back this family
10:40 - you'll be able to
10:43 - look through the people and find maggie
10:44 - and likewise if you only bring back
10:46 - maggie from a core data fetch
10:50 - you're going to be able to access this
10:51 - family object through the person.family
10:54 - property
10:55 - like that
10:59 - all right so that's the end of the core
11:00 - data series for now you know just enough
11:02 - to start applying this knowledge
11:04 - and using core data in an app now having
11:07 - this core data knowledge is already
11:08 - going to open up a lot of
11:10 - app possibilities and ideas that we can
11:12 - build together on this channel
11:13 - if you don't want to miss it please make
11:15 - sure you're subscribed to the channel by
11:16 - hitting that red subscribe button below
11:18 - and lastly if you enjoyed this series
11:19 - and you learned something new please
11:21 - give this video a thumbs up it really
11:22 - helps with the youtube algorithm and
11:24 - getting
11:24 - exposure for this series finally i'll
11:27 - leave you with this
11:28 - what kind of app are you going to build
11:30 - with these newly found core data skills
11:32 - let me know by leaving a quick comment
11:33 - below alright i'll see you in the next
11:35 - lesson