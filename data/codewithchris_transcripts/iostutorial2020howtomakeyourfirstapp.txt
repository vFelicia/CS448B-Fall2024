00:00 - hello and welcome to how to make an app for 
beginners in this video I'm going to show you how  
00:12 - to make an app even if you've never programmed 
a single line of code before now by the end of  
00:17 - these next 10 lessons you'll have built these apps 
and user interfaces and I'll also show you how to  
00:22 - put them on your phone so that you can show your 
friends and family but more importantly I'm going  
00:26 - to teach you the fundamental skills that you'll 
need to build any sort of app so by taking these  
00:31 - beginner lessons you're going to get a really nice 
and solid foundation in iOS app development from  
00:37 - there you'll want to grab my free seven-day app 
action plan where you can create a customized app  
00:42 - roadmap just to build your app you also want to 
join our active Facebook community where you can  
00:46 - get help and support from myself and the team and 
tons of other people learning iOS just like you so  
00:51 - that you're never stuck or alone on your journey 
to create apps now the last time I taught this it  
00:57 - was viewed by over 1.2 million people and tons 
of success stories came out of it ton of people  
01:03 - created their own mobile apps as you can see 
some of them on the wall behind me now I know  
01:08 - that's all going to come for you too but it all 
starts right here right now are you ready let's  
01:14 - do it welcome to code with Kris the place to be if 
you want to learn how to make an app I'm Chris and  
01:19 - I'm so glad you're here first things first how do 
you create an app from scratch well it all starts  
01:25 - with a program called Xcode where you design the 
user interface for your app and write your code  
01:30 - that gets turned into an iPhone app which you 
can publish to the App Store where millions of  
01:35 - people can download and use it before that let's 
backtrack a bit though Xcode is a program you can  
01:41 - download for free and the code I'll be teaching 
you how to write is called the Swift programming  
01:45 - language don't be intimidated if you've never 
coded before because I guarantee you'll get the  
01:50 - hang of it next Xcode can only be installed on 
Mac computers but if you don't have access to  
01:55 - one you do not need to spend thousands of dollars 
to buy one instead check out my video on Xcode for  
02:01 - Windows using Mac Stadium first alright so with 
that out of the way let's dive in and let me show  
02:06 - you around Xcode so the first thing you're going 
to want to do is to download Xcode if you haven't  
02:11 - already and all you have to do is hit command 
spacebar on your keyboard to launch spotlight type  
02:17 - in App Store to launch it and then in the search 
bar type in Xcode and that's going to find it now  
02:25 - I've already got it installed so if you don't you 
want to go ahead and do that I'm gonna warn you  
02:30 - though it's a pretty big application so it does 
take a little while to install and if you can't  
02:35 - if it gives you an error message or something like 
that scroll down check on the compatibility if you  
02:42 - click it it tells you what version of Mac OS it 
needs for this one it needs ten point thirteen  
02:48 - point six but whenever they upgrade Xcode this 
number gets higher and higher so your you might  
02:55 - have to update your version of Mac OS in order 
to install Xcode also keep in mind the size here  
03:02 - even though it says 6.1 gigs it sometimes needs a 
little extra space in order to do the installation  
03:09 - so once you have it installed go ahead and open 
it you're gonna be greeted with a dialog like this  
03:17 - what we're going to do in this video is create a 
brand new Xcode project so click on create a new  
03:22 - Xcode project if you don't see that dialog for 
some reason maybe you've launched Xcode before  
03:27 - you can always go up to file go to Neal and choose 
project and that's gonna get you to the same place  
03:34 - now there's a bunch of different templates that 
you can start with to help you just be a little  
03:40 - quicker in terms of what you want to create 
what we're going to want in this lesson is to  
03:45 - be under this iOS tab because there are different 
platforms you can build for using Xcode and Swift  
03:51 - which is the great thing about learning these two 
things but we're going to do i OS today and we're  
03:56 - going to choose single view app and that's going 
to give us our basic one-page app or one screen  
04:01 - app next we're going to want to configure some 
of the options for our new projects such as what  
04:07 - the name is what the unique ID of it is and for 
the product name you can name it something I'm  
04:13 - going to choose hello world like that the team 
drop-down you might not have a team here and  
04:18 - that's not going to matter right now but you will 
want to create a team when it gets to the point  
04:24 - where you want to put the app your actual device 
and I'll show you how to do that later on in the  
04:30 - series organization name I would either put your 
company name or your personal name and then what's  
04:36 - common under organization identifier is comm 
dot and then your name or your company name so  
04:42 - combined with the product name that's going to be 
the bundle identifier you're gonna see this term  
04:48 - used quite a bit it's basically like the unique ID 
for the app that you're creating when you publish  
04:54 - your app when you upload it to the app store 
in that sort of stuff you're going to need that  
04:59 - bundle ID okay so next very important is to make 
sure your language is set to Swift because that's  
05:05 - what we're learning here you can leave these guys 
unchecked and then click on next and you can also  
05:12 - leave source control unchecked as well we're not 
going to go through that right now go ahead and  
05:17 - click create and you're gonna have your brand-new 
Xcode project now it kind of looks intimidating  
05:22 - because there's all these checkboxes and dropdowns 
and you know this interface to someone who hasn't  
05:27 - seen it before is pretty confusing but I'm gonna 
walk through it with you right now and I also have  
05:32 - a reference sheet for you with a diagram and all 
the keyboard shortcuts for Xcode so make sure you  
05:39 - grab that in the description below so we're going 
to start on the left hand side of the interface  
05:43 - and this is the Navigator area you'll notice 
across the top that there are different tabs  
05:48 - that you can click it might not be so clear in the 
beginning but these are different navigators that  
05:53 - you can choose by far the most common one you'll 
be using is this project navigator where you can  
05:58 - see all of the files in your Xcode project now 
clicking on any of these files will change what's  
06:04 - in the middle that's called the editor area so 
for instance right now we have this first project  
06:10 - file clicked on and that's why we see all of the 
project properties in the editor area if we click  
06:18 - on View controller the Swift you're going to see 
that this turns into the code editor so that you  
06:23 - can write Swift code go ahead and click on main 
dot storyboard and this is going to change into  
06:31 - an editor where you can customize the screen for 
your app we're going to be doing this shortly this  
06:36 - is actually called interface builder so you can 
kind of get what why that name is the way it is  
06:41 - next let's go to assets the XE assets this is 
where you're going to put all of the images for  
06:48 - your project that you're going to use and then 
launch screen dot storyboard is another sort of  
06:55 - interface builder file where you can customize the 
launch screen and then the plist has some further  
07:02 - properties for your project at a high level those 
are the files that by default are included inside  
07:09 - your Xcode project now moving along to the right 
side of the screen we've got the utilities pane  
07:16 - and what you see here depends on what you're 
clicking on inside of the editor area so it's  
07:22 - like a further drill down so for instance if we go 
into the main dot storyboard and I click on this  
07:29 - white area which is my view or my screen it's 
going to show me further details about that and  
07:36 - in the viewcontroller.swift if I click on let's 
say some piece of code then it's gonna tell me  
07:42 - something related with that but keep in mind 
that again there are some different tabs with  
07:49 - this utilities pane as you can see up here so 
if we're going into the main thought storyboard  
07:54 - you can see that there are a couple more tabs and 
that's because I can configure properties for this  
08:02 - element so it looks like Xcode has experienced an 
internal error but usually these are fine you can  
08:08 - just close the project and we launch it I'm not 
going to do that right now it's fine across the  
08:13 - top of the interface you have your Xcode toolbar 
now on the left side of the toolbar you have some  
08:19 - buttons to run your project and stop your project 
and then to the right of that this is actually a  
08:23 - drop-down where you can select the destination on 
which to run your project now if you plug in your  
08:30 - phone you can actually select your phone from 
that drop-down but if you don't have a phone  
08:35 - plug then don't worry because Xcode has a bunch of 
simulators where you can run your project on and  
08:41 - it's going to show it on the screen we're gonna 
do that in just a second in the middle here you  
08:46 - have your status bar it's gonna show you what's 
going on with your project what it's doing right  
08:51 - now and then on the right hand side there are a 
couple of more controls here which we're going  
08:56 - to get to in a second but in the rightmost part of 
that toolbar you're gonna see these buttons which  
09:02 - are really helpful to you right now it's just to 
hide and show these different areas that we're  
09:07 - talking about if you click this middle one you'll 
notice that it brings up this little tray down  
09:12 - here that we really haven't talked about yet and 
this pane down here is called the debug console  
09:18 - and when you're running your project and let's 
say an error happens you're going to get some  
09:23 - details about that error in this debug console so 
by default it's hidden if you want to show it all  
09:29 - you have to do is click this button to bring it 
up so these are the major sections of the Xcode  
09:35 - user interface it's not that complicated once you 
know right what we're going to do now is go ahead  
09:40 - and run our project on a simulator so in that 
drop-down that I showed you by default right now  
09:47 - it's iPhone 10 arm you can select any one you want 
to try out and just click this big play button  
09:53 - right here it's going to launch that the Iowas 
similar now the first time you do this it might  
09:59 - take a couple of minutes but then subsequent times 
is going to be a lot faster after the simulator  
10:04 - has launched so you actually don't really need a 
physical iPhone device if you don't have one you  
10:11 - can still build and test your app now there's 
one quick thing I want to mention and that is  
10:19 - if your simulator is way too big for your screen 
and you can't see all of it you can actually scale  
10:24 - it down so you can either go up to the menu of 
the similar and choose you know physical size or  
10:31 - point accurate or pixel accurate you can use these 
shortcuts command one command two or command three  
10:37 - to change the size of the simulator that you see 
so just a handy tip for you in case the simulator  
10:44 - is way too large for your screen so when your 
app has launched you're going to see this white  
10:48 - screen and that's because we haven't really added 
anything to our app yet but before we do that  
10:54 - let's talk about how that Xcode project turned 
into this app that I'm seeing in the simulator  
10:59 - this top layer is the view it's the screen that 
the user sees now you can configure this V from  
11:06 - the main storyboard file in your Xcode project 
the second layer under that is called the view  
11:11 - controller now this code file is responsible for 
managing the view for instance when the user taps  
11:18 - on the view it's going to let the view controller 
know and then you can write code inside that view  
11:23 - controller to handle that tap to either run some 
process in the background or maybe display some  
11:28 - new information on the screen you get the idea now 
this view controller is represented by the view  
11:34 - controller dot Swift file in your Xcode project 
and as we said before if you click on that file  
11:39 - the editor area turns into the code editor where 
you can write Swift code to manage the view now if  
11:45 - your app has multiple screens in most cases each 
screen is just going to have its own view and view  
11:50 - controller now let's go back into Xcode and we're 
going to stop our project and we're going to add  
11:55 - something to the view so that there's something 
to see let's hit on the stop icon right here and  
12:00 - then click on main storyboard so you're seeing the 
interface builder and now I'm going to introduce  
12:08 - you to this button here called the library button 
so if you click this it's going to bring up a list  
12:13 - of objects or UI elements that you can add to your 
view type in the label to search for this guy and  
12:22 - all you have to do is click and drag it onto your 
view like this now you're going to see that label  
12:30 - on your view right here now you can drag it 
around and you can position it but that's not  
12:37 - really going to do anything because Xcode actually 
has its own way of positioning and sizing layout  
12:43 - items Xcode uses a system called auto layout to 
position and size the elements on the screen this  
12:50 - system makes it easier for you to design a single 
interface that looks good on iPhone iPad and all  
12:55 - the other screen sizes of future iOS devices now 
basically all you have to do is specify a list of  
13:01 - rules for each element that dictates how it should 
be positioned and how it should be sized relative  
13:08 - to other elements on the screen for example this 
element should be the same height as this other  
13:12 - element or maybe this element should be centered 
on the screen these rules are called constraints  
13:18 - and in lesson two you're going to learn a lot more 
about Auto layout and Auto layout constraints but  
13:23 - for now let's jump back into Xcode and take a look 
at how we can position and center our label on the  
13:29 - screen all right so back in interface builder I 
want you to select your label just to make sure  
13:34 - that it's highlighted and then down here there are 
a couple of buttons where you can add Auto layout  
13:40 - constraints so click on not add new constraints 
but this button called a line because we want  
13:47 - to basically align this label in the center of 
the screen so we're gonna check horizontally  
13:53 - and vertically in container and then click Add to 
constraints and you can instantly see these lines  
14:00 - here that represent the constraints you just added 
as well as the label being centered on the screen  
14:05 - if you've made an error don't worry check it out 
right here this is called the document outline and  
14:13 - it basically shows you all of the elements and all 
of the constraints that are in your view right now  
14:19 - so just open up constraints you can highlight your 
constraints that you've added maybe you've made  
14:25 - an error or something like that you can either 
delete them right now I can hit delete and get rid  
14:31 - of them or if you highlight them in the utilities 
pane on the right hand side in this size inspector  
14:37 - or they there's different inspectors that you can 
select make sure that you're looking at either  
14:42 - the attributes inspector or the size inspector 
and then you can edit some of the properties  
14:47 - for your constraint I'm going to show you just 
the leading them right now off of the document  
14:53 - outline so they're gone I'm going to do it again 
so you can hit your label now and you can go into  
14:58 - a line and select horizontally and vertically in 
container and then add two constraints like that  
15:05 - the next thing we're going to do is we're going 
to edit that word inside the label so make sure  
15:12 - your label is highlighted and then on the right 
hand side again make sure you're looking at the  
15:17 - attributes inspector right here under text you're 
going to be able to just type in whatever you want  
15:23 - I'm gonna type in hello world and voila so click 
on the Run button on your Xcode project and it's  
15:31 - going to launch simulator once again and you 
should be seeing something that looks like this  
15:36 - congratulations you built your first step to get a 
copy of the recap notes of what we went over today  
15:43 - as well as some practice exercises just click 
right over here or find it in the description  
15:47 - below in the next lesson you're going to be 
building this in Xcode hello in this video I'm  
15:57 - going to teach you how to build user interfaces 
for your apps using Xcode Auto layout system now  
16:03 - if you want to know how to build cool you eyes 
like these then the Auto layout basics I'm going  
16:08 - to teach you in this lesson or absolutely critical 
to know and if you watch all the way to the end  
16:13 - you're going to have a really good idea of how 
to build your own user interface for your own  
16:17 - apps does that sound good let's do it alright so 
let's pretend that we have to build a login screen  
16:23 - for our app we're first going to start by doing 
it the old way and then we're going to jump into  
16:28 - Xcode and use auto layout and do it for real now 
our first task is to place the logo on the screen  
16:34 - Xcode uses an XY coordinate system where 0 X and 0 
Y is in the upper left corner so this point would  
16:42 - be 0 X and 0 Y or just 0 0 next take a look at 
this red dot this represents a location on the  
16:50 - grid at 10 10 so you kind of get the idea if you 
specify a logo to be placed at this point at 10  
16:57 - 10 then it's going to take the upper left corner 
of that logo and put it at that point now next you  
17:04 - can specify a height and a width for that logo and 
that's going to adjust the size of it now together  
17:10 - with the X the Y the width and the height that is 
called the frame of that logo element now you can  
17:18 - continue to use this approach and place the rest 
of your labels text fields buttons whatever you  
17:23 - need however when the login screen is shown on a 
much larger screen if not going to look the way  
17:29 - that we expect and this is where Auto layout comes 
in so instead of specifying exact XY coordinates  
17:36 - widths and Heights we specify rules to describe 
the location and sizes of all of the elements  
17:43 - relative to other el and these rules are called 
constraints now why don't we try redesigning this  
17:50 - login screen using auto layout constraints instead 
so here's our first login button I'm going to add  
17:57 - a constraint to say that the horizontal center of 
this button should be the same as the centre of  
18:03 - the view in terms of the x-axis so that is going 
to Center it on the screen on that x-axis now I'm  
18:12 - going to add another constraint to say that the 
button should have the same vertical Center as the  
18:17 - view and that's going to Center it vertically on 
that y-axis now this effectively puts the button  
18:23 - right in the center of the screen next I'm going 
to add the logo and I'm going to add a constraint  
18:30 - to make its horizontal center the same as the 
horizontal center of the button so that's going to  
18:35 - be aligned the two elements like this I'm going to 
add another constraint to that image and this time  
18:42 - we're going to say that the bottom of that image 
should be 20 points above the top of the button  
18:48 - now notice I said points and not pixels and that's 
because in iOS we have devices with different  
18:53 - pixel densities so for example on the original 
iPhone one point is one pixel they're one and  
18:59 - the same but then Apple introduced Retina screens 
where they managed to squeeze four pixels in the  
19:05 - same amount of space that used to be one pixel 
so on these screens one point is equal to four  
19:11 - pixels and then Apple introduced the super Retina 
screens and these are for the plus sized iPhones  
19:16 - where they managed to squeeze at nine pixels in 
this space that was once one pixel and so one  
19:23 - point on these screens equals to nine pixels so 
that's why when we're designing our user interface  
19:28 - we always speak in terms of points it allows us 
to have a consistent user interface regardless of  
19:35 - the pixel density of the screen that it's being 
presented on so when you say 20 points from the  
19:40 - left side it's going to look consistent on the 
original iPhone on a Retina screen or a super  
19:45 - Retina screen now if this is kind of confusing 
to you don't worry because you're never really  
19:50 - gonna have to worry about how many pixels things 
are you're always working in terms of points but  
19:56 - I think that it's important that at least you 
know about this distinction now another thing  
20:02 - I want to point out is that if I don't specify a 
specific height and width constraint for this logo  
20:07 - then it's going to just be set at its intrinsic 
size which is just whatever size the image is  
20:14 - if you wanted to you could add constraints for 
the logo to make its height in width relative  
20:21 - to other elements or even relative to the screen 
size but I'm just going to leave it as is now I'm  
20:28 - going to do something similar with the second 
button that we're going to add I'm going to  
20:31 - add two constraints want to say that it has the 
same horizontal center as the first button we're  
20:36 - just going to align the buttons together and then 
I'm going to add a second constraint to say that  
20:41 - the top of the second button should be ten points 
below the bottom of the first button just so that  
20:49 - they have a ten point gap now we're going to add 
the last button to constraints again one for the  
20:54 - horizontal center and the second constraint to 
position it ten points below that middle button  
21:00 - since all these elements have constraints that are 
relative to that first button if I move that first  
21:07 - button around then all of the other elements will 
follow because the auto layout system is going to  
21:13 - find a way to satisfy all of the constraints that 
you have added now there's a much easier way to  
21:19 - achieve the same thing that we have here without 
having to specify so many constraints and I'll  
21:24 - show you how to do that in lesson 3 for now though 
I think it's important for you to understand how  
21:30 - Auto layout constraints work which is why we are 
doing it this way now let me ask you do you feel  
21:36 - like being a bully today because we're going to 
be really mean to this logo right now why don't  
21:40 - we add another constraint that contradicts an 
earlier constraint we added so let's say that  
21:45 - we add another constraint to this logo to say that 
the bottom of the logo should be ten points from  
21:51 - the top of the first button now notice that this 
contradicts the earlier constraint that we added  
21:56 - that said that it should be 20 points above that 
first button so there's no way that it can satisfy  
22:02 - both of these constraints that we've added this 
is called conflicting constraints and the system  
22:08 - will actually choose constraint to break and 
this can lead to unintended layout glitches  
22:14 - so the tough part of working with Auto layout is 
just to make sure that you don't have conflicting  
22:19 - constraints because sometimes as you're adding 
these constraints in inside Xcode you might lose  
22:27 - track of what you've already added and when you 
finally run your application you might get a bunch  
22:32 - of conflicting constraints and the auto layout 
system will choose which ones to brake and the  
22:37 - layouts not gonna look like anything you intended 
it to now Xcode does give you tools to help you  
22:42 - manage and resolve these conflicting constraints 
as you're soon going to see because the next thing  
22:47 - we're going to do is we're gonna jump into Xcode 
right now and construct this login screen for real  
22:52 - now there's one thing that I want to quickly point 
out and that's when you start your Xcode project  
22:56 - you don't have to turn on Auto layout or anything 
like that to use it in fact it's just the standard  
23:01 - when you start a new Xcode project you're gonna be 
able to just start using it right away so I've got  
23:06 - a brand new Xcode project here using the single 
View application project template if you're not  
23:11 - sure how to start a new Xcode project and I would 
say watch lesson 1 as we go through that in that  
23:16 - lesson what we're going to do is jump into the 
main dot storyboard and we're going to get started  
23:22 - we're gonna hit command shift + L and that's going 
to pop up the object library menu or you can just  
23:28 - click on this guy up here and you can search for 
button here click and drag it right there and to  
23:36 - add a button on the screen and I want you to click 
on this align menu and choose horizontally Center  
23:43 - in container and add that one constraint that's 
going to Center that button but you'll notice that  
23:51 - there are some red lines above and below that 
button and also in the document outline here  
23:57 - you'll see this red arrow if you don't see this 
document outline just click on this little icon  
24:02 - here to open and close it so anyways I want you to 
click on this red icon and it tells you that the  
24:09 - system doesn't know how to position that button on 
the vertical axis because there's no constraints  
24:15 - to dictate how to position it so I want to do 
and you can see here the category for the error  
24:21 - is missing constraints they'll go ahead and click 
back but just before we add that constraint there  
24:28 - I want you to notice another thing and that is 
to click the button click on this align menu  
24:34 - and don't be alarmed that this horizontally and 
container item is not checked but you might ask we  
24:43 - just added that why is that not checked well the 
reason is because these menus down here are purely  
24:48 - for adding new constraints it doesn't consider 
what constraints are already been added to that  
24:54 - element in order to see what constraints you have 
added to that guy you can either click the button  
25:00 - and go into the size inspector and you can scroll 
down a little bit under constraints you can see  
25:07 - that we have this align center X constraint or you 
can open this part up in the document outline and  
25:15 - you can see that we have this constraint in fact 
if you highlight that constraint right now I want  
25:20 - you to go over to the attributes inspector and we 
can take a look at the anatomy of a constraint the  
25:26 - main things that you need to notice is that 
an all-out constraint relates to one element  
25:34 - which is the first item and how it is going to be 
related to the second item in which case here it  
25:41 - says super view dot Center X so what the super 
view means is it's just the view that contains  
25:48 - that particular element in this case that is going 
to be our overall screen or our view and so the  
25:57 - buttons the super view or another way to think of 
it is parent view is the view the screen itself  
26:04 - and the properties it is relating is the center X 
all right so the button Center X is equal to the  
26:13 - super view Center X and effectively that centers 
the button on this screen right here and then  
26:19 - you can also play with things like the constant 
priority and multiplier and these just gives you  
26:25 - a couple of different ways to manipulate how it 
is related to that second item in that constraint  
26:32 - but we won't go through those right now so go 
ahead and highlight your button let's add that  
26:37 - positioning on the vertical axis click on a line 
right here click on vertically in container and  
26:44 - boom right there you wanna notice that we have two 
constraints now for that button and if you click  
26:50 - on this button and go back to the size inspector 
you're gonna see that second constraint there so  
26:55 - this is a handy way to see all of the constraints 
that are related to that element because in here  
27:01 - this menu this can get quite long once you 
have many items on the screen all right so  
27:07 - that's going to represent our first button we're 
gonna add a couple more now so go either use the  
27:13 - shortcut key to open the object library or click 
on the button up there they add our second button  
27:18 - click on a line horizontally in container and 
we're going to have this second button relative  
27:26 - to this first one by 10 points right we're gonna 
leave a 10-point gap there so click on this button  
27:32 - and then click on this add new constraints menu 
and it's going to have a couple of margins that  
27:39 - you can set for to be exact you can enable or 
disable any of them just take note that if you  
27:46 - edit one of these margins that's automatically 
going to turn on that constraint and then you  
27:55 - can see it says add one constraint here so I 
want you to pull down the menu and you can see  
28:02 - for this button that you're adding the constraint 
to what do you want that second element you know  
28:10 - the one that it's going to be relative to what 
do you want that second element to be since we  
28:15 - want this button to be ten points below this 
first button we're going to make it relative to  
28:22 - that first button right so that's why you got 
to pop open this menu to make sure that this  
28:27 - is selected so when you select that it's going 
to change the value to what it currently is so  
28:35 - currently it's thirty three point five points away 
so just take note of that right for example if we  
28:42 - did view and we did you know ten points away that 
would actually make this button go all the way up  
28:49 - here and be ten points to the ten points from the 
top of the view right which is not what we want so  
28:57 - make sure you have the right element selected 
and click add one constraint and you can see  
29:04 - there that constraint that we added right there 
this button is top is equal to the first buttons  
29:12 - bottom and the constant is 10 so that's where the 
constant comes into play now this is starting to  
29:18 - get confusing because they're both named button 
what we should have done to make it a little more  
29:22 - clear as we could have renamed things like that 
let's say first button in the second button and  
29:28 - now you can see the auto layout constraints they 
change the names too so that's really handy to  
29:33 - see now if you click on this constraint that we 
just added the second buttons top is equal to  
29:41 - first buttons bottom by 10 points so that makes 
a lot more sense now let's add our last button
29:47 - right here again we're gonna align it first 
horizontally in container and we're going to  
29:57 - add a new constraint and we are going to click 
enable that top one and we're going to make it  
30:03 - relative to the second button by a factor of 10 
points again boom that lines it up right there  
30:10 - let's not forget to name this guy our third 
button so we've got our bunch of buttons there  
30:16 - now we're gonna put a logo but the local is just 
going to be a text label in this case and we're  
30:23 - also going to add a little little prompt a little 
instruction label above these buttons actually so  
30:30 - let's do that press a pop it open again I like I 
instinctively know what the keys are but my hands  
30:40 - know right but then if you ask me to tell you I 
have to look down at the keys first so command  
30:44 - shift and L and that's actually one thing that now 
that we're on this topic I want to tell you about  
30:50 - is is just muscle memory right so you know at 
first when you're learning this stuff you're going  
30:56 - to be slow and especially when you start learning 
Swift and you're you're gonna start learning the  
31:02 - syntax you're gonna try to memorize keywords and 
you're gonna try to memorize things but you don't  
31:06 - really need to do that all you need to do is just 
build more apps go through more demos go through  
31:12 - more tutorials and your fingers almost they have 
a mind of their own so your mind thinks you know  
31:16 - I want to open up that object library and your 
fingers they just kind of like know what to do  
31:21 - your hey you don't have to think I need to press 
command shift and L initially it will be like  
31:26 - that but as you do it more it's just going to be 
very instinctive so I just want to I just want to  
31:33 - point that out don't get discouraged if it doesn't 
come easy in the beginning now I added this right  
31:39 - here and you'll notice that there's a yellow error 
now it's not red like before red man error yellow  
31:46 - instead means this this element doesn't have any 
auto layout constraints so why don't we position  
31:56 - this also we're going to position it horizontally 
in container and we're going to specify the bottom  
32:03 - margin this time and we're going to say that 
it's going to be relative to the first button  
32:08 - by 20 points right actually I want to show you 
one cool thing and it's gonna save you a lot of  
32:18 - time hopefully so let's say that I when I dragged 
my label it was over here it was like almost on  
32:24 - top of that first button and you know I want to 
position it relative to that first button by 10  
32:31 - so I go go ahead and enable that constraint I hit 
10 pull down this drop-down but the first button  
32:39 - isn't there I can't choose the first button 
in this drop-down why is that well the reason  
32:45 - is because your label is overlapping that first 
button so it doesn't come up as a neighbor here  
32:51 - so you need to make sure if you want to make you 
know an element relative to another element you  
32:58 - have to make sure that they're not overlapping 
and sometimes they could still be overlapping  
33:03 - even though they don't look like that in the 
view because we mentioned the frame earlier in  
33:09 - this lesson if you check this button out you can 
see that the frame actually then and beyond just  
33:17 - the word button you can see these these white dots 
here that's so that's part of the frame so even if  
33:23 - the frame of the label is kind of touching the 
frame of the button and you know it's not like  
33:28 - the text isn't overlapping but at this point they 
could still be overlapping in fact yeah they are  
33:35 - and so I won't be able to see that first button 
but if I just drag it out a little bit more I  
33:42 - can then choose the first button so hopefully 
that saves you a lot of time because you might  
33:52 - not realize that in the beginning so let's add 
that one constraint boom that's right there  
33:56 - another cool thing is that let's say i drag this 
away you can see these lines they kind of turn  
34:03 - orange right now and that's basically saying that 
the auto layout constraints for that label they  
34:10 - aren't taking effect right now because you're like 
dragged it away so what you're seeing on the view  
34:14 - is not reflective of the constraints that you've 
added to fix that all you have to do is click  
34:20 - this little update frames button that's going to 
just run all the auto layout constraint rules and  
34:27 - that's gonna put everything where they're supposed 
to be according to the constraints that you have  
34:31 - added all right so this this label we want it just 
to say log in or create an account that's kind of  
34:43 - what I wanted to say at least okay we're going to 
add another label I'm gonna drag it like that I'm  
34:49 - going to put it in the center and we're gonna 
position this guy bottom constraint relative to  
34:58 - this label right here and I'm gonna say something 
like 30 and this is just just me making up stuff  
35:07 - right now so I'm gonna call this social squid 
and in order to put this in two lines what you  
35:15 - can do is actually change the number of lines 
from one change it to zero and that actually  
35:21 - means multiple lines now inside here in this label 
you can actually do line break if you just press  
35:26 - control enter you're gonna be able to put a line 
break and we're gonna Center this and we're just  
35:34 - going to change the font now you might not have a 
veneer next and that's completely fine next let's  
35:48 - add some text of these buttons so this one is 
going to be sign in with Facebook sign in with  
35:58 - the rule with email now I want you to notice that 
you can add an image to these buttons and that is  
36:09 - going to add a little icon beside the button 
or you could also add a background image which  
36:15 - is what we're going to be using and you can set 
background colors and stuff so you can really go  
36:20 - in depth with customizing your buttons but because 
this is an auto layout lesson I want to focus on  
36:25 - auto layout constraints and that sort of stuff and 
not customizing buttons so I've actually prepared  
36:31 - some graphic assets just to get the look in the 
feel of the button that we want without going  
36:36 - too deep off the deep-end on customizing buttons 
so what I want you to do is grab these images and  
36:46 - these images I've made available either in the 
link in the description below or you can click  
36:52 - on the upper right corner and you can download 
these resources so that you can follow along so  
36:58 - after you unzip the file and you grab these asset 
images to strike the mintu here and just the quick  
37:03 - note if you don't understand why there are like 
three sizes of each image one X is the original  
37:09 - size 2 X is 2 times as large and 3 X's you know 
3 times bigger the reason is because there's  
37:15 - different resolutions of the iOS screen so all 
the retina screens will use the 2 X and the super  
37:20 - retina ones would use the 3 X that's why there are 
3 different sizes and the right size will be used  
37:27 - depending on what screen the device the user is 
using so like I said these button graphic button  
37:36 - graphics I added this rectangular background 
solid color to it you you know technically  
37:44 - could have just customized that and in fact if 
it were like a production app I would wouldn't  
37:50 - recommend exporting your graphics like that but 
like I said this is for the sake of because we  
37:57 - want to focus on Auto layout sort of losing my 
words here so what I want you to do is highlight  
38:03 - the 3 buttons by holding shift on your keyboard 
and clicking all three and then choose alignment  
38:08 - left and that it's not gonna do it oh actually no 
that's fine that's fine all right that did do it  
38:18 - it's just that they didn't align left because the 
size the width of the buttons are variable right  
38:23 - now so I want you to click on that first sign in 
with Facebook button and change the background  
38:28 - to Facebook and you can see it's gonna balloon 
up we're gonna change that text color to white  
38:35 - so you can actually see it and you can actually 
adjust the the text inside that button by going  
38:42 - into the size of inspector and just setting the 
content insight to something like 20 for example  
38:48 - so let's do the same thing for the Google button 
but let's just change the background image first  
38:54 - and then in here we'll just change the content 
inset and then we will change the font color to  
39:04 - black and so sign up with the email the email 
image change the text color to black and change  
39:15 - the content in set to 20 and then we are going to 
add a background to this so search for image view  
39:27 - and all I want you to do is just plop it anywhere 
it's just going to cover something and I want you  
39:34 - to choose background and then I want you to 
hit this adding constraints and we are going  
39:43 - to enable all four constraints and we are going to 
change we're going to unconstrained to margins now  
39:51 - I'll explain to you what that means in a second 
and we're change these all to zero so by default  
39:58 - there are margins for text for example and because 
we want the image to go like edge to edge ignoring  
40:07 - all the margins you know to all four sides of 
the screen we are going to uncheck constrain  
40:13 - to margins another thing to note is that there is 
something called a safe area and because you know  
40:19 - with the new eyePHONE tens there's like a notch 
so the safe area is just an area where nothing  
40:29 - will get obscured no matter what device you're 
using so if you want like let's say you're laying  
40:36 - out text then you definitely want to stay within 
the safe safe area so how do you stay within the  
40:42 - safe area well by default all the constraints you 
add will be relative to being in the safe area if  
40:48 - you don't want to be in the safe area so for this 
image we want it to go edge to edge we don't want  
40:55 - to go under the not like we don't want to leave 
any gaps on the to the left and the right of the  
41:02 - knotch and so we want to go all the way to the 
top of the screen we would pull this drop down  
41:07 - and then we would say relative to the view you 
can and notice that changes the number back to  
41:13 - 72 so just click all of these dropdowns here and 
choose view instead of safe area so we want to  
41:22 - choose view okay and change these all back to 
zero okay and now add four constraints and that  
41:29 - is going to stretch it all to all four sides 
now if you accidentally made a mistake that's  
41:35 - not a problem just go into the size inspector for 
this background and here are the four constraints  
41:42 - you've just added double-click any of them and 
that's going to highlight the constraint and  
41:47 - then in here you can pull down the drop-down and 
you can say you can choose super view instead of  
41:58 - safe area so that's how you would fix it or you 
can just delete the constraint andrey add them  
42:04 - now the problem here is that our image who 
is covering everything and that brings me  
42:09 - to another important point which is layer order 
now if you look at this document outline this is  
42:16 - also called a view hierarchy and the reason it's 
a hierarchy is because some of these elements they  
42:23 - allow you to put other elements inside of them 
like they're a container element just like this  
42:29 - view is this view this what represents our screen 
here contains all these buttons the labels and  
42:37 - this background image well you can have other 
container views and you can have like multiple  
42:41 - layers so it becomes a hierarchy and anything 
that is closer to the bottom of the hierarchy  
42:48 - in the same level is closer to the users so for 
example this background image right it's all the  
42:58 - way at the bottom of this hierarchy at this 
level and that's why it's the closest to the  
43:05 - user and it's covering everything else we want 
this background to be at the back right we want  
43:11 - everything else to be on top of this background 
so all we need to do is click and drag this guy  
43:16 - and reorganize it to the back so now you can see 
we've just pushed it as the back element you can  
43:23 - ignore the safer area here actually actually 
if you click this you can see where the safe  
43:28 - area is but anyways that background now is that 
backmost element and so all these elements are  
43:34 - above it now that we have our layout looking kind 
of like what we want I want to quickly talk about  
43:40 - conflicting constraints so why don't we do that 
example that we did earlier by making this logo  
43:47 - adding a second constraint so that it is relative 
to this guy but 10 points away from that guy in  
43:59 - you keep in mind there's already a constraint that 
says it should be 30 points above this label I'm  
44:04 - going to add a second conflicting constraint to 
say that it should be 10 points and instantly  
44:10 - you can see that there's an error illustrating 
that there are two constraints one says 30 and  
44:15 - one says 10 and if you click down here you can 
you click this little error icon here you can  
44:24 - see there's conflicting constraints so what you 
can do you can just delete one one of them right  
44:30 - so you can't actually delete it from here but 
you can highlight one of them and just delete it
44:37 - that's gonna fix the problem so also when you run 
your app and if there are conflicting constraints  
44:45 - it's gonna tell you in the debug console in this 
area down here okay so how do you check if your  
44:53 - layout looks good on multiple devices well there 
is this little option here it says view as iPhone  
45:02 - eight you can actually click this guy open and 
change the device you're viewing it on so let's  
45:07 - say 10 R you can change the orientation and see 
that it is a little squished although you can  
45:17 - see everything and there are certain things that 
we can fix up pretty easily and some things where  
45:23 - we're gonna have to add constraints to fix a 
specific device so in order to give you finer  
45:32 - grained control of how your UI looks on different 
screen sizes and devices there is something called  
45:38 - size classes and they're kind of like categories 
of devices so because Apple has created so many  
45:46 - different sizes of iPads and iPhones while you 
can't configure them specifically for a device  
45:55 - you can configure your UI specifically for a 
size class or a category of devices and Apple has  
46:03 - organized all of their different iOS devices into 
different categories so we're not going to get  
46:09 - into size classes right now because this lesson is 
already running kind of long but I do have a bonus  
46:15 - video for you that we will go into size classes 
and I'll tell you what they're all about and how  
46:21 - you can set Auto layout constraints for specific 
size classes but not other ones so that you can  
46:28 - change the look of your UI depending on whether 
or not you have more space or less space so you  
46:34 - can do that it's not it's not a requirement right 
now we don't really need to do that but if that is  
46:41 - something that you're interested in right now you 
can go grab that bonus training now autolayout is  
46:47 - just one of those things that gets a lot easier 
the more you do it so I've got three practice  
46:52 - exercises for you to do and also another bonus 
auto-layout training video that you can watch you  
46:57 - can grab all of these resources right there in 
the next video I'm going to show you a specific  
47:01 - UI element that's going to allow you to reduce 
the number of auto layout constraints you need  
47:06 - to add it's going to speed up your design and 
construction considerably hello today I'm going  
47:16 - to show you how to use an element called the 
stack view which is going to save you a lot of  
47:20 - time when it comes to building your user interface 
now in the previous lesson I showed you how to use  
47:25 - auto layout constraints to lay out all of the 
elements in your user interface however using  
47:31 - a stack view is going to dramatically reduce the 
number of constraints that you need to specify if  
47:36 - that sounds good then stay tuned alright so we're 
going to redo that social login page except this  
47:42 - time we're going to use stack views and you'll see 
how easy they are to use this time we're going to  
47:47 - create a single view app I'll take you through 
this process I'm just going to call this the  
47:52 - stack view exercise and these settings are kind 
of the ones that we've been using throughout here  
47:59 - so I won't go through them again right now but 
if you're a little confused about them go ahead  
48:05 - and check out lesson one alright so we've got 
a brand new single view application we're gonna  
48:11 - jump right into this storyboard and I want to show 
you what the stack view element is all about so go  
48:19 - ahead open up the object library either clicking 
this button here or hitting command shift and L  
48:24 - and let's take a look at actually first what the 
stack views are so we have a horizontal stack view  
48:33 - and a vertical stack view and just as the name 
implies the stack view is a container element  
48:39 - that allows you to put elements inside of it 
and it's going to arrange in the stack either  
48:46 - vertically or horizontally so you don't have 
to you know if you already you want to arrange  
48:52 - elements let's say vertically one on top of each 
other you don't need to specify a whole bunch of  
48:57 - Auto layout constraints to arrange them nicely and 
align them together and all of that stuff you can  
49:02 - just use a vertical stack view throw all of those 
elements inside configure the stack view a little  
49:07 - bit in the stack view will handle everything 
else so let's take a look at that I'm gonna drag  
49:12 - a vertical stack view right there and you can't 
really see it aside from this outline in fact if  
49:19 - you click out of it it's invisible because like I 
said it's a container element so it by itself is  
49:25 - not really a visible element however you will see 
it here in the document outline and this is a very  
49:31 - important point because since it's invisible on 
the screen as you're adding labels or buttons or  
49:38 - things into your stack view it's kind of hard to 
drag them into the stack view when you can't see  
49:43 - it in the view right and so usually if I'm adding 
elements into the stack view I'll drag it directly  
49:49 - into the document outline so let me show you what 
that looks like we're gonna go grab a button and  
49:55 - we're gonna just drag it directly into the stack 
you and as you can see with a little movement of  
50:02 - my mouse that little blue line either indents into 
the stack view or if I move it out a little it  
50:08 - will become an element that is at the same level 
as the stack view and if this is the case then  
50:16 - this button is not inside the stack view it's in 
fact on top of the stack view so in order to make  
50:22 - sure that this button is inside the stack view you 
need to just drag it and make sure that it looks  
50:29 - like this so that you can collapse and expand 
the stack view and you can see the button element  
50:35 - inside of it let's add another element just so we 
can see some stacking going on like that so I've  
50:43 - got two buttons I'm just gonna add a third one 
right here so now this stacking has three buttons  
50:49 - and you can see I didn't put any auto layout 
constraints on these buttons all I did was add  
50:54 - them into our vertical stack view and it's stacked 
them one on top of each other very nicely now some  
51:01 - of the properties that you could configure just to 
go over them quickly with your stack view is you  
51:07 - can change the axis so changing them to horizontal 
puts them side-by-side and changing them vertical  
51:14 - just puts them one on top of each other now 
this means that when you're adding your stack  
51:20 - view and you're choosing it from the object 
library it really doesn't matter whether you  
51:25 - choose horizontal or vertical because they're both 
configurable to be either one and so you know this  
51:32 - vertical stack view here all you need to do is 
change the axis if you wanted horizontal now here  
51:37 - are a couple of more fine-grained controls for how 
to position your elements inside for example I can  
51:45 - just say spacing of 10 points that's going to put 
10 points in between each element I can say 20 as  
51:52 - you can see it's just going to do that really 
simple really easily now if our stack view was  
51:59 - a little bit of wider for example if we stretched 
out the stack view to the edges of the screen then  
52:06 - I can show you what these are in fact why don't we 
do that so we're going to grab our stack view here  
52:13 - and we are going to we want to vertically align it 
in the container and then we are going to stretch  
52:22 - out the stack view 0 0 on the left and the right 
so if I click on the stack view you're gonna see  
52:32 - that well that's the button right there but the 
stack view yeah I can't really see the frame here  
52:37 - but I've stretched that out 0 0 to the side and 
you can tell because if you click on a button you  
52:43 - see that button with its all the way from the left 
to the right edges so the reason why this button  
52:50 - is stretched out all the way to the left and right 
sides is because of the alignment property that by  
52:57 - default in the stack view is set to fill so let's 
talk a little bit about alignment and distribution  
53:02 - inside stack views these two properties do take 
a little bit to wrap your head around because  
53:09 - what they mean changes depending on whether you're 
looking at a vertical stack view or a horizontal  
53:15 - stack view so let's talk about distribution first 
in terms of this vertical stack view we've got  
53:21 - this much space you can see the white segment here 
and we've got three elements inside stacked one on  
53:27 - top of each other well distribution is basically 
it basically means how do you want to distribute  
53:34 - the space to these three elements right in terms 
of how they are stacked vertically on one hand we  
53:42 - could give each of these elements an equal amount 
of vertical space on the other hand you know in  
53:50 - the case that each of these buttons is a different 
size let's say they're a different height we could  
53:57 - use fill which means that you're gonna give the 
first element whatever amount of space it needs  
54:04 - and then you're gonna give the second element 
whatever amount of space it needs and then the  
54:09 - third and fourth and so on and so forth so each 
element kind of gets the amount of space that they  
54:14 - need in our case all three buttons are uniform so 
whether we choose fill or to fill equally it looks  
54:25 - the same fill proportionally equal spacing 
an equal centering are also other options  
54:30 - they're just different ways of distributing the 
space and it's kind of hard to explain so you I  
54:36 - recommend that when you do the exercise for this 
lesson just play around with these options take  
54:40 - a look at what's different about them but the 
best way I think to think about distribution  
54:45 - is how do you want to distribute the space for 
the elements inside your staff you now in terms  
54:52 - of alignment I always think of that like a word 
processor so let's say you're you're writing a  
54:59 - word and you're writing a paragraph and you can 
either left justify it you can Center it or you  
55:06 - can write justify it well alignment is the same 
so right here by default it's set to fill which  
55:13 - is why it stretches out that button to fill up the 
entire space of the stack view so that's what fill  
55:18 - means if you chose leading center or trailing 
it wouldn't stretch out the element instead it  
55:25 - would either left justify it center or or right 
justify it so I can show you that lets see leading  
55:32 - makes it go there this is centering and this is 
trailing okay so let me set this back to fill  
55:41 - now the tricky part of this is when you set the 
axis to horizontal then this meaning changes a  
55:49 - little bit right so distribution on a horizontal 
stack view is still how do you want to divvy up  
55:56 - that space for each of the elements in this case 
fill looks a little differently you can see it  
56:03 - it still means that it's going to give the first 
element all of space it needs second element all  
56:08 - the space it needs and then whatever space is 
remaining for the third element if I chose fill  
56:13 - equally it's gonna give an equal amount of space 
horizontal space that is to each of those elements  
56:21 - and alignment now becomes do you want to fill out 
the vertical space for each of these buttons or  
56:29 - do you want to top align it center align it or 
bottom align it so when you're using stack views  
56:35 - you have alignment and distribution that you can 
play around with to basically get it looking the  
56:42 - way that you want so now what I'm going to do is 
try to recreate that social login screen I'll show  
56:49 - you how to do it without having to specify so 
many auto layout constraints like we did in the  
56:56 - previous lesson we're going to use a stat view 
to make it a lot easier so let me first remove  
57:02 - the constraints that we added to the stack view 
so we're going to delete those three constraints  
57:06 - and we still have three buttons inside the stack 
view and what we're going to do is we're going to  
57:12 - add the image assets and you can download these 
in the link in the description so these are the  
57:22 - same assets we used in lesson two so let's use 
these buttons and let's set the background image  
57:31 - for them so this one was Google and this one was 
email and this said sign in with Facebook and text  
57:47 - was wiped so in order to align these buttons 
one on top of each other I just have to change  
58:13 - the spacing to ten which is what we had in the 
previous lesson and to align all of them together  
58:18 - well all I need to do is just I can Center this 
stack view on the screen just like that so all  
58:27 - I've added are two auto layout constraints to 
the stack view but other than that the stack  
58:32 - view is taking care of all of the arrangement of 
these buttons inside and so I think what we also  
58:38 - had was a label here and yeah so this label is 
going to give this equal space here I might not  
58:48 - necessarily want that choose a sign in below I 
forgot the exact wording that we used but that's  
58:57 - okay so if I didn't want to give so much space 
vertical space to this label then maybe instead we  
59:06 - can try using fill right instead of fill equally 
so you can see clearly the difference in that  
59:14 - distribution setting right there now for us for 
the logo and because I want the Loco to have a  
59:22 - lot more space between the label this label here 
and the logo above I don't want to necessarily  
59:30 - place the logo into the stack view because in 
this stack of you I can just choose a blanket  
59:36 - spacing and that's going to give a spacing 
of 10 everywhere so instead what I'm going  
59:41 - to choose to do is I'm gonna put the label above 
the stack for you right there oops let's undo that
59:49 - let me drag this label up here so I want to put 
this I call this social squid change the number  
60:06 - of lines to zero right and I'll Center I like 
this and just change the I'll change the font to  
60:15 - custom and change it to like a bold type of font 
and this one I will just horizontally align it  
60:32 - and I will make it like maybe 40 from there so 
it's gonna look like that because I want there  
60:45 - to be a spacing of 40 instead of 10 that's why I 
don't want to put this label inside of the stack  
60:51 - view because otherwise you know I wouldn't be 
able to I wouldn't be able to have this bigger  
60:56 - spacing here and lastly we need to at the image 
view and you notice that I'm dragging things into  
61:05 - the document outline now and sometimes that's 
just a lot easier to do so I'm going to set the  
61:13 - background image view to the background image 
asset that we have and I am going to uncheck  
61:19 - constraint margins and I'm going to choose view 
I explained why we do this in the previous lesson  
61:27 - it's because we want it edge to edge regardless 
of margins or anything like that and then let me  
61:32 - set all of these to 0 let me add the 4 constraints 
so we have this image now and furthermore because  
61:39 - it's stretched like this I'm going to change the 
content mode to aspect fill and that is going to  
61:46 - maintain the aspect ratio of the image while 
filling up the entire image view and so we've  
61:55 - got something like this so now that you know how 
to use stack views and auto layout constraints  
62:01 - we're ready to build the UI of our next app the 
war card game as always I have recap notes and  
62:07 - an exercise for you just download it right there 
below hello and welcome to lesson 4 equipped with  
62:17 - your new skills in Auto layout and stack views 
it's time to put them to the test by the end of  
62:22 - this video you'll have built the user interface 
for your war card game app so let's get to it  
62:27 - so we're going to start with a brand new Xcode 
project just click on create new Xcode project  
62:32 - right here or you can go into the file menu and 
choose new project now make sure you're looking  
62:39 - at io s and choose single View application here 
we're going to put the name of our app and this  
62:47 - isn't the public facing name it's just something 
that is going to give you a unique identifier  
62:53 - combined with your organization name and your your 
organization identifier it's gonna create this  
62:59 - bundle ID and I talked about this back in Lesson 
one and how it's going to be really important for  
63:03 - an app that you're going to publish it in the App 
Store now for this app make sure you choose swift  
63:09 - as the language you can leave these unchecked and 
when you save it you can also leave this unchecked  
63:16 - as well for now so let's create our project on 
the desktop the first thing we're going to do is  
63:22 - to jump into the asset library for our project 
and I want you to go and grab the image assets  
63:28 - now you can do so in the link in the description 
below or just check the card just going to pop up  
63:34 - in the right-hand corner when you unzip the file 
you can grab all of these images you'll notice  
63:41 - how each image asset has three different sizes 
the first one X and then 2x and 3x and this is  
63:47 - what we talked about back in our OTO a lesson it's 
for the different devices having different screen  
63:54 - pixel densities so we're gonna just select all of 
them and then drag them into right here Xcode is  
64:03 - going to be smart enough to group all of them in 
asset names like this these names just pay special  
64:10 - attention to them and capitals matter and you can 
rename them these are the asset names which you  
64:17 - are going to refer to these image assets when 
you want to display them so I just changed the  
64:23 - capital B to a lowercase B here to be consistent 
and yours might already be changed actually so  
64:30 - I'm gonna just I'll change that later so when 
you download it should already be lowercase B  
64:35 - the next thing we're gonna do is jump into the 
storyboard and we're going to start by adding  
64:40 - that green background so go ahead and open up your 
object library you can either click this button up  
64:45 - here and just in case you forget or press command 
shift an L so let's go ahead and search for an  
64:53 - image view and drag it onto the view and this 
is what we're going to do to display images now  
64:58 - go ahead and click into this inspector attributes 
inspector and from the image property let's choose  
65:05 - background now we're going to stretch this out to 
all of the edges of the screen make sure you have  
65:12 - that background highlighted and then click this 
at new constraints button and we're going to want  
65:17 - to uncheck constraint to margins because we want 
it to reach to the edges of the screen ignoring  
65:22 - margins so leave that unchecked or actually 
actively unchecked out because by default it  
65:29 - is on the other thing you want to do is pull down 
all these little dropdowns and choose view instead  
65:36 - of the safe area because we want to specify a 
margin that is relative to the view rather than  
65:41 - the safe area and in just in case we didn't go 
through what the safe area is if you go into the  
65:47 - document outline right here and you click on the 
safe area it's just that blue highlighted area is  
65:54 - the safe area and it's a place that's guaranteed 
to not be obscured by anything so for example the  
66:02 - iPhone 1010 are 10s and those ones they have a 
notch at the top right and so the safe area is  
66:10 - actually below the notch so anything that you 
put in the safe area is guaranteed not to be  
66:15 - blocked by elements like that and especially 
if you can flip the orientation so that notch  
66:20 - could be at the bottom or it could be you know 
on besides the safe area will guarantee that  
66:25 - it won't get obscured by that knowledge anyways 
going back to our background image make sure you  
66:31 - have it highlighted again click on this menu we're 
gonna have to start over so uncheck it constraint  
66:38 - margins and then choose view for all of these guys 
before you change the numbers in here I would pull  
66:47 - up down this drop-down and change it to view first 
and then go back and edit all the numbers to zero  
66:53 - making sure that all of these red margins are 
enabled it's going to say add four constraints  
66:59 - down here the reason why I want to toggle this 
to view first before changing the value here  
67:06 - is because when you choose a new option in this 
drop-down it automatically changes that number in  
67:13 - the text box so you know if you did it the other 
way around you would have to basically change the  
67:19 - numbers again so that was just to demonstrate let 
me just double check that all of them are still  
67:25 - set to view okay let's set these to zero add four 
constraints and you should see your background  
67:31 - stretched to all four edges now if you somehow 
didn't your background isn't looking like mine  
67:38 - then you can always just open up this constraints 
you can delete all of them and you can try again  
67:44 - no big deal next thing we're going to do is add 
another image view so again open your object  
67:51 - library drag an image view onto the view this time 
we're gonna choose logo and ignore the fact that  
68:00 - it's big and fuzzy or whatever right now we're 
gonna add some constraints to it first so let's  
68:06 - horizontally center that in the container it's 
gonna look squished that's okay for now and we  
68:12 - are going to add a top margin and we are going to 
leave it relative to the safe area and we're gonna  
68:20 - leave constraint to margins enabled because we 
don't want this logo to be obscured so we want to  
68:24 - just make sure it's in the safe area when you add 
that the image view is going to use the intrinsic  
68:29 - size of the image which is just the size of your 
graphic asset and so it's going to look like that  
68:36 - the next thing we want to do is we want to add 
a stack view so we learned about these in the  
68:42 - previous lesson we're gonna choose a horizontal 
stack view and this horizontal stack view it's  
68:47 - just going to contain the two card elements so go 
ahead open up the object library again and choose  
68:53 - image view now we're gonna put this in our view 
but we can either drag it into the stack view  
69:00 - on the view or we can drag it into the document 
outline and because the stack view is invisible  
69:07 - like this I usually find it easier to put it into 
the document outline and that's what I'm going to  
69:12 - do here I'm gonna drag it here I'm just gonna show 
you what a potential mistake is now if you drag  
69:20 - the image view and you try and put it inside your 
stack view and it's at the same kind of hierarchy  
69:25 - level right here as the stack view that's not what 
you want you want the image view to be inside the  
69:31 - stack view so let me show you what that looks 
like let me move this image and let me just drag  
69:36 - it into the stack view now you can see this little 
collapsible triangle appear beside the stack view  
69:43 - that means I can close it and open it and when I 
close it the image view is inside the stack view  
69:49 - so that's what you actually want we're going to 
add a second image view into the stack view so  
69:56 - we have two and then you're gonna click on the 
first image view and you're gonna choose a card  
70:02 - so let's just say card six and you're gonna click 
on the second image view and you're gonna choose  
70:08 - doesn't really matter let's choose 10 and now 
let's add some space in between the two cards  
70:15 - so we're gonna go on the stack view here and we're 
gonna choose spacing 30 just to give it some space  
70:22 - now before we align the stack view onto the 
screen I want to put this horizontal stack view  
70:29 - into a vertical stack view along with a button 
so we're gonna add the button first let's drag  
70:39 - this button down here and let's configure this 
a little button a bit for the image property of  
70:45 - the button why don't we choose deal button and 
actually I want to make one little distinction  
70:53 - here you can choose background or you can choose 
image there's a slight difference so for the image  
70:59 - property it's going to put that image beside 
the button text but if you choose background  
71:04 - that image is going to appear behind the button 
text so that's what that distinction is alright  
71:13 - so now we have our deal button and we have the two 
cards here I'm going to put both of all of these  
71:18 - elements into a vertical stack view so I want you 
to go into the document line highlight your stack  
71:25 - view hold down shift on your keyboard and click on 
your button as well and that's going to highlight  
71:30 - both of them and I want you to come down here and 
choose embed in stack view what that's going to do  
71:37 - is immediately take those elements that you've 
highlighted and put them into a stack view now  
71:42 - it's Xcode is gonna be smart enough to take a look 
at how your elements are oriented and it's going  
71:49 - to see that our horizontal stack view is above 
our deal button so it's automatically going to  
71:57 - put these two things into a vertical stack view 
check this out stack view boom vertical stack view  
72:03 - you can see this in the document outline alright 
the other thing it does is it tries to set some of  
72:11 - the properties of the stack view based on how you 
laid out the elements so for example here it's at  
72:18 - the alignment the center the distribution to fill 
and the spacing to 46 because that was the amount  
72:23 - of space we had between the horizontal stack view 
containing the cards and the deal button now I'm  
72:30 - gonna change that a little bit I'm gonna say I 
wanted 30 instead of 46 and now let me rename this  
72:39 - in the document outline because as soon as you're 
gonna have more and more elements and you're gonna  
72:43 - have a ton of stack views or a ton of image views 
things can get confusing so you might have noticed  
72:50 - for these UI image views when we've set the image 
property of it it automatically changes the name  
72:56 - of that image view in the document outline so 
that's helpful but for the stack views they're  
73:02 - all just gonna say stack views so for this one 
I'm going to say cards yeah you can you can  
73:12 - name it anything you want let's say cards and the 
button stack view right for this one maybe cards  
73:23 - stack view okay and for the button you can name 
these two okay so now let's collapse this and  
73:32 - let's position this stack view onto the screen 
so make sure it's highlighted we're going to  
73:39 - choose horizontally centered container as well as 
vertically and that's going to effectively Center  
73:45 - the whole thing onto the screen now I'm going 
to make a slight adjustment here I am going to  
73:51 - go into the size inspector while I have this 
stack view highlighted and I'm going to take  
73:57 - a look at the two constraints we added I'm gonna 
double click the center Y constraint and that this  
74:04 - constraint is basically putting it in the center 
of the screen on the y axis I want to move that  
74:10 - whole stack view down a little bit because I want 
to make sure that when you're holding your phone  
74:16 - your thumb can reach high enough to hit that deal 
button so I'm actually gonna change this constant  
74:21 - and I'm going to add 20 points to it to bump it 
down just a little bit so just as a review I want  
74:32 - to tell you this Center alignment constraint 
is basically saying that the center Y of that  
74:40 - stack view should equal the center Y of the entire 
view plus 20 points that's the what the constant  
74:49 - is therefore that's why it gets bumped down a 
little bit alright so the next thing we want  
74:54 - to add are the score labels so why don't we open 
up our object library again and choose vertical  
75:03 - stack view I am going to just put that there in 
the corner and then I'm going to add a couple of  
75:12 - labels I'm going to drag them directly into the 
document outline into that stack view then it is  
75:18 - write two of them so make sure that when you close 
the stack view the labels tuck inside the stack  
75:25 - view all right and now let me edit some properties 
of this first label and make the color white and I  
75:34 - am going to change the text of player and for the 
second label I am going to change it to zero I'm  
75:44 - going to change the color to white and click this 
guy right here and change the font size to 40 now  
75:53 - I'm going to highlight the stack view because 
we want to position this in the lower left hand  
75:57 - corner I'm gonna choose this one the margins and 
we're gonna make sure that constraint - margins is  
76:07 - on and then it's relatively safe area it should be 
by default right we're going to set the left one  
76:14 - to 20 and the bottom one to 20 and this button 
should say add to constraints and that's just  
76:20 - going to position it there there's one more thing 
I want to do and that is to change the alignment  
76:27 - to leading so that's gonna make sure that those 
elements inside that stack view are left aligned  
76:33 - let's change the name of this player for stack 
view now we're going to do the same thing for  
76:41 - the CPU score on the right hand side but this 
time I'm going to add the labels first just to  
76:46 - show you again the two different ways of adding 
staff views so I'm going to dry two labels here  
76:52 - and check this out you can do this you can select 
both of them remember you hold down shift in order  
77:00 - to select click and select both of them and I 
can change the properties for both of them at  
77:06 - once however at this point if I change the text 
that's going to change it for both of them so let  
77:10 - me unselect them and just select the first one 
and I'll change this at the CPU I'll select the  
77:16 - second one and change this to zero and then I'm 
gonna change the font size as well to 40 and now  
77:24 - I'm going to select both of them again by holding 
down shift and then I'm gonna click embed in and  
77:30 - choose a stack view now remember when it when you 
do this it automatically determines which type of  
77:39 - stack view is the best horizontal and vertical 
and obviously because the elements were on top  
77:42 - of each other it shows vertical but it also sets 
some properties for us which we might not want  
77:48 - so make sure you highlight that stack view let's 
go here see spacing at set 3 so I actually want  
77:53 - that to be 0 just like the other player stack view 
and alignment I actually want it trailing so that  
77:59 - it's on the right hand side now let's put some 
margins on the stack view so make sure you have it  
78:04 - highlighted click on this guy make sure constraint 
amardas it's on by default it should be relative  
78:11 - to the safe area which it is let us change 20 and 
20 and then down here should say add 2 constraints  
78:19 - and there you have it so you have something like 
this now I want to test this user interface to  
78:26 - make sure that it looks decent on all screen sizes 
and orientations so the way you can do that inside  
78:32 - Xcode is down here it says view as iPhone 8 and 
so far we've been designing this as iPhone 8 in  
78:40 - portrait but if you click this open it's got a 
little tray and yours might actually show the  
78:46 - devices if you've got enough space on your Xcode 
interface if not you're gonna get this sort of  
78:52 - drop-down menu like I do so let's first flip this 
into portrait actually before we do that make  
78:59 - sure you press command S and save because Xcode 
sometimes can crash you know that's not out of  
79:06 - the realm of possibility so change orientation 
let's change it to landscape and take a look
79:17 - so what'd I tell you an internal error has 
occurred editing functionality may be limited  
79:23 - there's not a problem all we need to do is you 
can come up to product you can clean build folder  
79:29 - and this is good learning for you in case this 
happens for you and then you can just go ahead  
79:35 - and quit Xcode press alt Q and you can quit the 
whole thing and then you can relaunch Xcode and  
79:42 - then just reopen your project and that will often 
time fix things so you can see here's my document  
79:51 - outline you can expand that and here is my user 
interface now sometimes if yours has all these  
80:01 - blue squares with question marks on them all 
you need to do is just go ahead and change the  
80:06 - device or change the orientation to force Xcode 
to kind of refresh things alright so going back  
80:11 - to it we have iPhone 8 in landscape it looks 
pretty good right no problem there and in fact  
80:17 - if we go up in size you're just gonna get more 
space my biggest concern right now is just to  
80:23 - make sure that no element is obscured or hidden or 
blocked or clipped or anything like that and that  
80:30 - the user interface doesn't appear broken it's 
okay if you have extra space you know you can  
80:36 - in the future take advantage of that extra space 
somehow but what you really want to avoid is to  
80:41 - have your elements kind of like overlapping each 
other in the case that there isn't enough space so  
80:47 - instead of going up I'm just gonna check the sizes 
going down because I know as it's gonna get to the  
80:54 - smaller phone sizes things may get clipped so why 
don't we try portrait first let's just jump right  
81:00 - down to the smallest screen size so still looks 
good right let's flip it into landscape and there  
81:08 - immediately you see that our logo is hidden behind 
the cards it's probably not what you want even if  
81:16 - you think it looks ok I mean you can leave it 
in my opinion I would want to change that and  
81:20 - I'm gonna show you how to change that let's go up 
one size just to see if the problem still exists  
81:26 - and it does so let's go up one more I phone and 
that one is okay so we need to somehow address the  
81:36 - situation for these smaller screen sizes before 
we can do that I need to tell you about something  
81:42 - called size classes size classes are basically 
categories of screen sizes because there are so  
81:50 - many different devices and two orientations for 
each device that Apple decided to separate all of  
81:55 - these into different categories of screen sizes so 
when you're adding a constraint you're able to say  
82:01 - something like add this constraint for all screen 
sizes as in all categories of screen sizes or only  
82:08 - add this constraint for a specific size class 
so this gives us some flexibility to change the  
82:14 - layout depending on a specific size class so let's 
say your app might look different on the iPad size  
82:21 - class versus like a smaller device like an iPhone 
and each size class is actually defined by two  
82:29 - parameters a height and a width now the height can 
be compact or regular and the width can also be  
82:37 - compact irregular so for instance one size class 
might be compact width and compact height another  
82:44 - size class might be compact width but regular 
height and in the case where you don't care about  
82:50 - size classes and you want to add your constraint 
for all of them it would just be any width and any  
82:57 - height now let's dive back into our Xcode project 
now I can show you how we can add a constraint for  
83:02 - a specific size class now the first thing I want 
to draw your attention to is down here beside the  
83:08 - view as iPhone se you can see what size class 
this device falls under so this is the compact  
83:16 - width and compact height the first step of this 
is just to identify which size classes you have to  
83:25 - fix so we identified that iPhone 4s also has this 
problem and the size class is also compact width  
83:34 - in compact height if we go up to iPhone eight the 
problem doesn't exist but this device still falls  
83:43 - under the same size class iPhone 8 plus this one's 
a different size class because it's regular width  
83:51 - and compact height so we what we're going to do in 
order to fix this overlapping problem is add some  
83:58 - specific constraints or variations of constraints 
to this specific size class so that if the user is  
84:07 - using a device the iphone SE or the iphone 4s in 
the landscape orientation the specific constraints  
84:17 - that we add are going to take effect and they're 
going to correct that layout for them so let me  
84:23 - show you how to add constraints to a specific size 
class so with the size class that you want to add  
84:30 - your constraints into choose very four traits and 
then we want to introduce variations and that's  
84:38 - just the specific constraints that I was talking 
about we want to vary them based on both the width  
84:45 - and the height and that's going to target this 
specific compact width and compact height size  
84:53 - class now this section turns blue and it tells you 
which devices fall under this size class and you  
85:01 - can see that it's the iPhone 10s in landscape the 
iPhone 8 in landscape the iPhone se and landscape  
85:09 - in the iPhone 4s and landscape so any specific 
constraints you add right now to this size class  
85:14 - that's going to affect all of these devices in 
this orientation so just keep that in mind now  
85:21 - let's take a look at what sort of constraints 
we can add in order to correct this layout let's  
85:26 - click on the cards and button stat view so the 
first thing I think that we can do is just to  
85:32 - shorten up the space between the button and the 
two cards so you can see here that by default we  
85:39 - have a spacing of 30 but we can click this little 
plus icon and add a variation based on a specific  
85:48 - size class so based on the compact then compact 
height size class let's add a variation so you can  
85:54 - see the WC and the HC sense for the compact width 
and compact height we're going to say when when  
86:01 - we have this size class instead of 30 I want to do 
20 and so that's going to fix the problem a little  
86:07 - bit but I'm going to add a couple a couple more 
variations to completely solve the problem I think  
86:16 - the next thing we want to do is take a look at 
this logo and we want to make it a little smaller  
86:24 - for these size classes because the logo isn't 
isn't a functional part so I think I'm okay with  
86:32 - making it a little smaller now we don't have any 
sort of height or width constraints for this logo  
86:38 - but what we can do is add a height constraint for 
the local right now that will only take effect for  
86:45 - this compact width and compact height size class 
and so we're gonna with the image highlighted  
86:52 - we're going to open up this add constraints button 
and we're gonna add a height constraint and you  
86:58 - can see right now it has a height of 67 I'm gonna 
change that to or add a height constraint of 55  
87:06 - and when I add a new constraint now it's going 
to be only specifically for this size class right  
87:13 - here because this part is blue if this part wasn't 
blue and it was just great then any constraints I  
87:20 - add just like we were doing earlier in this lesson 
applies to any width in any height so it's like  
87:26 - all the size classes all right so let me add this 
height constraint of 55 to the logo and it's only  
87:32 - gonna apply for this size class boom all right so 
this logo looks a little squashed now but we're  
87:39 - gonna address that in a second the first thing 
I want to do is just show you the constraint we  
87:44 - added and how you can tell that it's only applying 
to a specific size class so let's click on this  
87:53 - height 55 constraint look on the right-hand side 
and you can see installed this means it's only  
88:01 - applies to the compact width compact height size 
class and up here it says there is nothing here  
88:09 - this is really the any width in any height size 
class so this is unchecked it's basically telling  
88:16 - you that in normal circumstances this constraint 
is not installed it doesn't exist but on this  
88:24 - specific size class it does take affected is 
installed so that's how you can tell alright  
88:31 - so now we're going to address the situation or 
the problem that this logo is kind of squashed  
88:36 - and if you click on it it all goes back down to 
the content mode and this would be a great chance  
88:42 - for me to show you the different content modes so 
let me first change the background temporarily to  
88:49 - blue so you can see kind of where the boundaries 
of that image view are so by default set the scale  
88:55 - to fill as you can see it pulls the image until it 
fills up that entire image view right let's check  
89:04 - out aspect fill now aspect fill will maintain 
the aspect ratio so it doesn't stretch the image  
89:12 - however it's going to start enlarging that image 
until that image view is completely filled and  
89:19 - what that means is that some parts of your image 
might exist outside of the boundaries of the image  
89:26 - view now that might be OK for you and it might 
not be it really depends on what sort of layout  
89:32 - you have another option you can have if you don't 
want things that are falling out of your image  
89:37 - view you can enable clip to bounce and you can 
see when I click on that parts of the logo just  
89:43 - get clipped off right where the boundaries of the 
image view are and so that's what clip two bounds  
89:49 - means but really the setting that I do want here 
instead is aspect fit right so this is going to  
89:58 - maintain the aspect ratio but it's only going to 
stretch the image to the point where it fills the  
90:06 - image view but doesn't exceed its bounds so that 
I think this is a good way to see the differences  
90:14 - between those content modes so I'm choose a SPECT 
fit I'm gonna choose clear color as the background  
90:20 - again alright so here it's starting to look a 
little better you know things aren't overlapping  
90:26 - but if you take a look at the bigger screen sizes 
let's say this one right here or the 10s there's  
90:35 - there's another thing that I want to do I want to 
bump this down a little bit so I'm gonna choose  
90:45 - I'm just gonna go back to the smaller screen sizes 
first just to make sure that Oh Xcode might be all  
90:54 - right so I've got that internal error thing again 
but it's just something we're gonna have to deal  
90:59 - with alright so I'm still varying four traits I'm 
still gonna move on I think this is fine now I'm  
91:10 - gonna select my cards and button stack view I'm 
going to go into the size inspector and remember  
91:15 - we added this the vertical alignment consorted 
vertical centering constraint and we added a  
91:23 - constant of 22 bump it down a little bit well with 
this ice-class I'm gonna add a variation I'm gonna  
91:31 - click this little plus icon for a compact width 
and compact height size hat classes I'm gonna  
91:37 - add a variation and I'm gonna bump it up bump 
it down even more boom so to me that that looks  
91:45 - a little more centered so for these size classes 
it's gonna do 30 below the center and for other  
91:52 - ones it's going to do 20 and then just double 
check that it looks okay on the other ones so  
91:59 - we've got the four s SE the 8 and the 10 so I'm 
going to click done varying and I think it's gonna  
92:12 - look good now you can choose eight you can just 
double check let's take a look at the 4s let's see
92:24 - still looks good on the smaller screen sizes 
and when we go into this specific size class'  
92:31 - compact within compact height our size class 
specific constraints and variations are jumping  
92:39 - in to save the day now if you're having trouble 
putting this layout together make sure you grab  
92:45 - my Xcode project below and compare it with yours 
see if you can find any differences and if you're  
92:49 - still stuck just leave us a comment and we'll jump 
right in to help you now in the next lesson we're  
92:54 - going to dive right into Swift programming hi and 
welcome to lesson 5 in this lesson and the next  
93:03 - two you're going to be learning the basics of the 
Swift programming language this is the stuff that  
93:08 - you're going to need to know in order to complete 
the work heart game app as well as our future apps  
93:13 - that we're building together now I know that this 
coding part can seem intimidating at first but I  
93:18 - really want you to stick with this really pay 
attention and I highly recommend that you open  
93:23 - up Xcode on your own computer and type out exactly 
what I'm showing you on the screen by doing that  
93:29 - it's really going to reinforce the language 
structure and the key words that I'm showing  
93:33 - you there's really no need to memorize anything 
at all and I guarantee you by the end of lesson  
93:39 - 10 you'll be writing your own Swift code so let's 
get started so go ahead and start Xcode but we're  
93:46 - not going to create a brand new Xcode project 
instead we're going to create a playground so  
93:51 - click it get started with a playground or you can 
go to file new and choose the new playground as  
93:56 - well now you're going to get a screen like this 
go ahead under iOS choose blank and we're going  
94:02 - to save this I'm just gonna save it on my desktop 
now first let me tell you about what a playground  
94:08 - is it's not a full-fledged Xcode app project 
instead it's just a lightweight file where we  
94:13 - can try and test out some things and this is 
perfect for us because we are going to just be  
94:18 - running and testing some Swift code now let me 
give you a quick tour of the playground and the  
94:23 - bare essentials that you need so this big part 
right here where you're writing the code that's  
94:28 - the code editor that's where we're going to be 
testing out all our code across the top we have  
94:33 - the status bar now mine says ready it's ready 
to run and test some code for you it might be  
94:37 - spinning and it might be doing something in the 
background but when it finally says ready then  
94:42 - you're able to run your code now on the right 
hand side right here we don't see anything what  
94:49 - I want you to do is just move your cursor to 
this line of code at Lane 3 oh that's actually  
94:55 - one thing I want to mention first if you don't 
have line numbers go to Xcode preferences go to  
95:01 - text editing and enable line numbers so that's 
one of the common questions that I get I don't  
95:07 - know if in this version of Xcode they've turned it 
on by default but if they haven't now you know so  
95:13 - yeah move your cursor down to the line 3 and you 
see lines 1 2 & 3 highlighted in blue with this  
95:19 - big blue Play icon go ahead and click that what 
that's going to do is basically run the lines of  
95:26 - code up to that point where you click that button 
so it's going to write run the code lines 1 2 & 3  
95:32 - you're gonna get some sort of output here on this 
right-hand side this is the preview column and  
95:38 - yours might look a little different so I don't 
want you to focus too much on the output on this  
95:44 - preview pane depending on what version of Xcode 
you have it could look different Oh instead what  
95:49 - I want you to do is click in this upper right hand 
corner and hide or show debug area or the console  
95:56 - area and in this lesson we're going to be writing 
Swift code to put things into the console area so  
96:03 - I want to focus on the output in the console area 
here at the bottom rather than the output on the  
96:10 - right-hand side here in the preview because that 
could look different for you all right now let's  
96:15 - take a look at the code in here before I explain 
to you what these import VAR keywords are I want  
96:21 - to talk about comments now if you've programmed 
before in another programming language then you'll  
96:27 - know what these are but if you're completely 
brand-new to coding then I think this is a very  
96:31 - important part to start off with so let me show 
you what a comment looks like I'm going to hit  
96:36 - enter to start a new line and I'm going to add it 
to forward slashes like that and then I can type  
96:43 - a note for myself this is a comment now mine looks 
like this grayed out text right here depending on  
96:51 - what sort of color scheme you have going on this 
could be green and can be another color that's not  
96:57 - the important part the important part is that 
anything after these two forward slashes this  
97:03 - is not going to be run as code instead it's going 
to be treated like a note or a remark for yourself  
97:09 - too and you can write anything in your comment to 
remind yourself maybe why you wrote that piece of  
97:16 - code or what that piece of code does when you're 
working with a team of people it's crucial that  
97:21 - you leave comments in your code so that when 
your teammates see your code they understand  
97:25 - your reasoning behind it and they understand why 
you wrote it now if you're working by yourself  
97:30 - that's also important to leave yourself comments 
because if you leave your project and you come  
97:35 - back months later you won't remember why you wrote 
that code unless you leave yourself comments to  
97:40 - remind yourself all right so let's talk about this 
first line of code where it says import UIKit now  
97:46 - we're going to talk a lot more about UIKit in the 
future but for now just understand that uikit is  
97:51 - a library of code that apple provides for us to 
build apps with it it contains useful elements  
97:56 - like buttons and labels and templates of code 
that we can use to speed up our app development  
98:01 - import is a special keyword to say that we want 
to use the uikit library in this file now let's  
98:07 - talk about line for this VAR str equals hello 
playground in order to understand this we need  
98:13 - to first talk about variables in an app there's a 
lot of data being passed around and you need a way  
98:18 - to keep track of it well that's what a variable is 
for you can think of a variable as kind of like a  
98:23 - sticky tab you know those ones where you can write 
something on it and stick it to a piece of paper  
98:27 - to keep track of it well let's take a look at the 
line of code below which is declaring a new Swift  
98:33 - variable and assigning some data to it and see how 
that compares to using a sticky tab and sticking  
98:39 - it on a sheet of paper so var is a special Swift 
key word that is declaring a new variable using  
98:46 - our analogy you can think of this as creating 
a new sticky tab STR is the name of that Swift  
98:53 - variable in the case of our analogy STR is what 
you write on that sticky now hello playground is  
99:02 - the piece of data that we want our variable to 
keep track of in our analogy that would be the  
99:07 - sheet of paper that were intending to stick 
the sticky tab on and finally the equal sign  
99:13 - is us actually assigning that piece of data to 
that variable in our analogy that would be like  
99:19 - sticking the actual sticky tab on the piece of 
paper now let's go back to our playground and take  
99:24 - a look at that line of code again now this line of 
code makes a lot of sense right we are declaring a  
99:30 - new variable STR and we are assigning the piece 
of data hello playground to that variable now  
99:37 - let's consider another scenario using the same 
analogy of the sticky tab what if we decide to  
99:43 - peel off that sticky tab and stick it on another 
sheet of paper well we can do the same thing with  
99:48 - our variable except that there's just one catch 
imagine that when you were writing the name on  
99:54 - that sticky tab STR you wrote it with a permanent 
marker and so when you peel off that steep tab and  
100:01 - stick it on another sheet of paper it's still 
saying STR on that sheet of paper well we can  
100:07 - do the same thing with our variable here we can 
take our variable STR and we can assign another  
100:12 - piece of data to it so let's say another some data 
and what you can do is use this blue icon here and  
100:26 - let's just run our code and you should get some 
sort of preview there now notice that on line 6  
100:33 - I don't have to write var again because var was 
just to create that variable in the first place  
100:39 - when I use it again I can just refer to it by the 
name and you might notice that sometimes I say  
100:45 - create that's just so that you can understand it a 
little easier the proper terminology is declaring  
100:51 - a variable so now let's write some code to output 
some of this data into the console area below on  
100:58 - line 5 here let's write the keyword print and 
you might notice that Xcode pops up this little  
101:05 - autocomplete menu and that's just X code trying to 
guess what you're trying to tie and presenting you  
101:11 - a bunch of options to make your life easier now 
while you can select some of these options that's  
101:16 - not what we're going to do right now I'm going to 
open up a round bracket and we are going to type  
101:22 - STR and if you don't have a closing round bracket 
you should just type it what we're gonna do now is  
101:28 - just bring your cursor down here to line seven or 
at the end of your code file and click run and you  
101:34 - should see hello playground down there below now 
notice that it doesn't say some data and that's  
101:41 - because we are printing out the contents of STR at 
line five we're going to write after we assigned  
101:49 - hello playground so it's showing you the data 
that STR is pointing to at that point now if we  
101:54 - ran another print statement here let's click run 
you'll see this print out again but this time it  
102:05 - says some data which is what we assigned it to 
it on line six now the next thing we're going  
102:10 - to talk about are constants constants are like 
variables except that once you assign some data  
102:15 - to a constant that's it you're not going to be 
able to assign anything else to that constant  
102:20 - now using our analogy that is like super gluing 
that tab to that sheet of paper there's no way  
102:27 - you're going to get that tab off its bookmark 
to that sheet of paper and that's the piece of  
102:31 - paper it's going to reference forever the syntax 
for declaring a new constant kind of looks like  
102:36 - what we did with a variable except that we use the 
let keyword instead of the VAR keyword now let's  
102:42 - go back to our playground and we'll try it out 
now let's try declaring a constant at the bottom  
102:47 - of our playground let's say let STR equals more 
data and give it a sec or you might have to run  
102:55 - your playground but when you do you're going to 
get an error and it's basically saying that you  
103:00 - cannot use STR again because your variables and 
constants must have unique names even between two  
103:08 - variables or between two constants you have to 
have unique names so why don't we change Esther  
103:14 - to Khan and it has to have unique names just out 
on a side note because otherwise it would be very  
103:20 - very good using so we have gone here and let's 
try modifying metadata for that constant and
103:29 - give it a sec and Xcode is going to tell you that 
you cannot assign another value to constant or  
103:39 - con because let is a constant so you can actually 
do this but with variables we can write this goes  
103:47 - back to us saying that constants once you assign 
a piece of data to it that's it so now you might  
103:52 - be wondering when would you use a constant versus 
a variable well the general rule of thumb is that  
103:58 - you should be using constants whenever you can 
but however if you're keeping track of a piece  
104:04 - of data that you expect might change then you 
would use a variable because a constant is a  
104:10 - lot safer right once you assign a piece of data 
you can be guaranteed that that's not going to  
104:15 - change on you so in fact even inside of Xcode when 
you're programming if Xcode notices that you use  
104:22 - a variable and you assign a piece of data to it 
and you never reassign anything else to it and  
104:28 - it doesn't change it's going to say hey why don't 
you change this into a constant you're gonna get  
104:32 - that reminder so the general rule of thumb again 
is to use constants and if you realize that that  
104:41 - piece of data needs to change then you can change 
that constant to a variable by just changing that  
104:48 - let keyword to a bar keyword alright so let's 
see erase this line here now one other thing I  
104:53 - want to point out and you might have noticed this 
is that all of the data that we've been assigning  
104:58 - to our constants and variables thus far have just 
been this text data well there are actually other  
105:04 - types of data as well and that brings us to our 
next topic which is data types the pieces of text  
105:12 - that we've been assigning to our variables and 
constants are called strings now I know that's  
105:16 - kind of a strange name but you can think of it 
as a string of characters right well they're  
105:23 - just basically pieces of text next up we have 
boolean or bool for short and these represent  
105:30 - true or false great for pieces of data that can 
only be one of values now don't worry we're gonna  
105:36 - try all of this out in the playground in just 
a second but next up we have integers or int  
105:42 - for short just like back in math class integers 
represent the whole numbers in the positive to  
105:48 - the negative range including 0 now you might ask 
where are our decimal numbers don't worry I've got  
105:54 - you covered float is what you're looking for and 
these represent our floating-point data in other  
105:59 - words our decimals I've just showed you for data 
types but there are actually more but these four  
106:04 - are great to start with I have a swift cheat sheet 
at the end which are going to show you the rest  
106:09 - and also a worksheet for you to practice what 
we've learned in this lesson now let's go back  
106:14 - to our playground and try this stuff out all right 
so now let's try some of those data types that we  
106:19 - just talked about let's type in bar b equals true 
and let's print B now let's try running this line  
106:28 - of code here and you're gonna see true appear down 
into console below now true is a special keyword  
106:33 - that you can use to specify a boolean value we 
can also change this to false let's run this again  
106:40 - and you can see false appears on the console now 
that we're running more code I want to point your  
106:45 - attention to a special feature of the playground 
and down here in this stop playground button you  
106:51 - can actually hold it and choose automatically run 
when you do that your playground is automatically  
106:58 - going to execute the code in your playground 
automatically as you're typing so you never have  
107:03 - to click on that Run button again the only problem 
is that sometimes the playgrounds can be buggy so  
107:09 - if you're experiencing a lot of crashing or it's 
not running your code then you're gonna want to  
107:13 - switch back to manually run and you're going to 
want to click on that run code button manually  
107:21 - so we're gonna leave it automatic for now and see 
how how it goes if we are experiencing problems  
107:26 - with our playground then we're going to set it 
to manually run instead all right so now let's  
107:31 - try out integers let's do var I equals 32 that 
is going to declare a new integer and assign it  
107:40 - 32 we're gonna assign a 0 that's also an integer 
I'm gonna try assigning let's say negative 10 it's  
107:48 - also an integer now let's try the last data 
that we talked about which is flow and it's  
107:55 - gonna be some sort of decimal number like that 
now there's one important thing I want to talk  
107:59 - to you about and that is that there are actually 
two types of decimal numbers so the first decimal  
108:05 - number data type is float like we talked about 
but there's also something called double and it's  
108:11 - another data type that represents decimals and 
in fact double is a lot more precise than float  
108:17 - that means that a double data type can store a lot 
more decimal points than a float data type can and  
108:25 - when you're working with the Swift programming 
language double is actually the default a data  
108:31 - type now the thing is it's important to know both 
float and double because sometimes when you're  
108:36 - working with third-party code libraries or even 
some of the libraries inside UIKit some of them  
108:41 - expect float data types and some of them expect 
double data types and so it's important to know  
108:47 - both and how you know now the next thing I want 
to talk to you about is the fact that variables  
108:53 - and constants can only store one data type now 
what do I mean by that I'm gonna demonstrate so  
109:01 - here we've declared a variable called I and we've 
assigned it an integer and then we've reassigned  
109:08 - it 0 and negative 10 which are also integers but 
what if suddenly I decide to assign it some sort  
109:15 - of decimal number right we know that decimal 
numbers is that's not considered an integer so  
109:21 - in fact right here the playground is telling us 
it's erroring out and it's saying that you cannot  
109:28 - assign a type of double to your integer variable 
you just can't do that because the variable I only  
109:36 - accepts integers now here's the thing we're did 
we say that variable I can only accept integer  
109:43 - data types well the funny thing is that we didn't 
explicitly say that what happens is that when you  
109:50 - declare a variable or constant and you assign a 
piece of data to it that first piece of data is  
109:57 - it's going to take that data type and infer that 
that's the data type that variable can store and  
110:05 - that's the only thing it can store so the very 
fact that we assigned 32 being an integer to  
110:12 - variable I from that point on variable I can 
only store integer types that is why we cannot  
110:19 - we cannot assign this double data type value to 
I same thing goes for this up here because we  
110:28 - assigned the boolean value false to be now the 
variable B can only store boolean types so I  
110:35 - can I can assign true to it but I cannot assign 
piece of string to it I cannot assign a number  
110:43 - to B and so we're gonna get these errors right 
here all right so we've just the experience at  
110:50 - crash on the playground okay let's just go back 
to manually run and we run our code right here  
110:59 - and that should be okay all right so we're back 
to being good now there is a way to explicitly  
111:11 - say that a variable can store a certain data 
type this is how we would do it so after your  
111:19 - variable name you would write a colon and then you 
would write in the data type that you want that  
111:24 - variable to store so you can write like that you 
could do that up here you could do that and then  
111:36 - for this one you can either type float or use 
the swift default double so I would recommend  
111:45 - using double when you can unless you're using 
some sort of library that requires you to use  
111:50 - some float data so here's the funny thing even 
if this is the first piece of data you have  
111:59 - sign being float simply because you declared your 
variable as an integer you know you've explicitly  
112:07 - said that variable I is an integer data type 
you cannot assign a double data type to it
112:15 - so those are the things that I wanted to point 
out to you I know it's a lot to absorb I would  
112:21 - recommend getting the recap notes and just 
reviewing it and also doing the exercises it's  
112:25 - going to help you solidify these things in your 
head so far you've learned about variables and  
112:31 - constants and how they can be used to store data 
you've also learned about data types such as in  
112:36 - string boolean and float now all of this is going 
to be in the Swift cheat sheet which you can grab  
112:41 - below as well as the stuff for the next two Swift 
lessons I also have a worksheet for you to try to  
112:48 - practice using swift variables and how to perform 
math operations on them so make sure you try that  
112:53 - and get some extra practice in hi and welcome to 
lesson six in the previous lesson you'll learn how  
113:03 - to write some basic Swift code well let me ask you 
something how does a user usually interact with  
113:09 - an app well it's usually they tap on something on 
the screen let's say a news headline and then the  
113:15 - app gives a reaction such as showing that news 
article action and reaction well that implies  
113:21 - that when the user takes an action depending 
on what that action is the app needs to react  
113:27 - accordingly and run the appropriate block of code 
depending on what the user is doing so we need a  
113:33 - way to organize our code into bite-sized chunks 
so that when the user takes this action we run  
113:40 - that chunk of code and when the user takes that 
action we run that chunk of code well Swift has  
113:46 - something called a function and this is basically 
a block of code where you wrap it up with a name  
113:51 - and when you want to run that block of code you 
can just call it by its name so let's open up a  
113:57 - new Xcode playground and see how we can declare 
some functions all right so we're gonna create  
114:01 - a brand new playground here and we're gonna try 
out these functions so let's get started with a  
114:06 - playground under iOS let's choose blank and I'm 
just gonna save it on my desktop and call it my  
114:13 - playground - all right so we're gonna just go down 
here create a new line and we're gonna type in f U  
114:20 - and C space now that keyword is used to declare 
a new function next part of the function is the  
114:28 - name of the function now this is important because 
whenever we want to run the code that is inside  
114:35 - this function we're going to call it by this name 
that we're gonna give it right now so I'm gonna  
114:40 - call this function say hello now the next part of 
the function is a pair of rounded brackets so find  
114:48 - that on your keyboard typically it's right above 
the nine and the zero so you're gonna have to hold  
114:53 - down shift and you know type those two rounded 
brackets now inside those rounded brackets right  
115:00 - now we're not going to put anything in there but 
you can have something called parameters which  
115:05 - is something you're gonna learn a little later in 
this lesson alright now next we're gonna hit space  
115:11 - and we're gonna open up a pair of curly brackets 
or squiggly brackets some people call them and  
115:17 - you got to find these on your keyboard - for my 
keyboard layout it's above the square brackets  
115:23 - so I'm gonna hold down shift and type in a pair of 
squiggly brackets or curly brackets I'm go inside  
115:31 - it and press ENTER a couple of times to create a 
few lines you're going to write your code for your  
115:40 - function in between these two curly brackets think 
of it as the guts of the function so whenever you  
115:47 - call say hello the code in between these curly 
brackets it's going to get run I'm gonna print  
115:55 - out in here hello all right now let's go outside 
of the function and by outside I mean after this  
116:05 - ending curly bracket we're gonna just call the 
function by its name say hello and notice that  
116:14 - autocomplete already brings this up but let's 
type it out just for extra practice so we're  
116:20 - gonna use the name of the function followed by 
the curly brackets all right now let's run this  
116:26 - line of code you'll see down here it's going to 
execute this print statement and it's going to  
116:32 - print out hello and if you don't have this tray 
at the bottom you can open it up like that when  
116:38 - you write a function you're usually writing 
some code to perform a specific task in our  
116:43 - example before you wrote a function to display 
the full article and when the user taps on a  
116:49 - news headline in the app you're going to call 
that function to display the full article for  
116:54 - that headline now let me present another scenario 
what if there are 10 news headlines in your news  
117:01 - app are you going to write 10 different functions 
one to display the full article for each headline  
117:07 - of course not furthermore the news changes every 
day so you wouldn't be able to write a function  
117:12 - to show a news article that hasn't happened yet 
right instead you're writing a function to do the  
117:18 - work to present and display a full article to 
the user that function doesn't care or doesn't  
117:25 - know about what sort of article it's going to 
be presenting and displaying you as the coder  
117:30 - basically pass that information into the function 
when you call that function you can do this with  
117:37 - something called function parameters remember 
those rounded brackets in the function call well  
117:42 - you can specify the parameters in between those 
rounded brackets that indicate what sort of data  
117:48 - you're passing into the function when you're 
calling it in the example below we declared  
117:52 - a function called say hello to in the rounded 
brackets you have a parameter called name and  
117:57 - it's of the data type string now that kind of 
looks like a variable declaration without the  
118:02 - VAR keyword whenever you call to say hello 
to function you're going to have to supply a  
118:07 - piece of string data into that function call now 
let's jump back into our playground and see this  
118:12 - in action alright before we jump into an example 
with parameters let's first add a comment up here  
118:19 - and call this a basic function remember this is 
something you should get into the habit of doing  
118:25 - and I also want to show you if it wasn't clear how 
to use the autocomplete feature because trust me  
118:33 - you're going to be using it a lot so why don't I 
type say hello you're gonna notice that it pops up  
118:40 - right here now you can either hit enter right now 
or you can press up and down on your keyboard to  
118:45 - select a different one and you can even use your 
mouse and you can scroll down the list and so  
118:50 - here I'm just gonna double click it alright so now 
let's do a function with parameters so again we're  
118:57 - going to type in a few and see space for declaring 
a new function and this time I'm gonna call it say  
119:06 - hello to and we're going to specify the rounded 
brackets just like before except that this time  
119:12 - I'm going to move my cursor inside the rounded 
brackets and we're gonna put a single parameter  
119:16 - in here let's call this parameter name : we're 
going to specify the data type it's just like  
119:23 - almost the like declaring a variable like we did 
in the previous lesson alright so now we're gonna  
119:31 - open up a pair of curly brackets and we're gonna 
add some space in there and here we are going to  
119:38 - print out the name that gets passed in and the 
way you can do that is just by referencing that  
119:46 - parameter name so we since we called it name we 
can just say print name so what ever data gets  
119:54 - passed into this function when it gets called we 
are going to be printing it out into the console  
119:59 - so right now even if we run the code it's not 
going to do anything we actually have to call the  
120:05 - function so here below the function let's type in 
sa Y and you can see that now autocomplete shows  
120:14 - you the second function that we just wrote so go 
ahead and select that and press Enter and this  
120:20 - highlighted blue part is telling you that you need 
to specify a piece of string data along with this  
120:26 - function call so why don't we go ahead and I've 
been Tom there and then let's run this line of  
120:34 - code at this point so you're gonna see Tom there 
right and that's just a result of us passing this  
120:43 - piece of data into the say hello to function so 
that's going to come in through here and then it's  
120:50 - going to take that string data and print it out 
to the console and that's why we get this result  
120:55 - down here now what if we wanted to say hello Tom 
instead well we can't do that and I'm going to  
121:03 - show you a really neat way to do that so let's 
erase this name here and instead let's print out  
121:09 - a string called hello space and we can actually 
insert that name parameter into the string and  
121:15 - the way you do that is backslash and then type in 
a pair of rounded brackets and inside the pair of  
121:22 - rounded brackets you would just put the name of 
your parameter or variable or whatever you want  
121:27 - to insert into the string now let's run this 
function call again now you get hello Tong now  
121:36 - in this example we've done one parameter you can 
actually include multiple parameters into your  
121:42 - function all you would have to do is inside the 
rounded bracket after the first parameter just  
121:48 - I've been comma and now you can require a second 
parameter so let's make this one age and this  
121:55 - datatype for the age is going to be an integer so 
immediately the playground is going to complain  
122:03 - that this function call is no longer valid and 
it's right it's missing an argument it's missing  
122:09 - this parameter called H so what I'm going to 
do is just completely get rid of this line  
122:14 - and going to type in s a Y and you can see here 
that autocomplete has detected we've changed that  
122:21 - function so the double click it or press Enter 
and we're going to fill in the parameters that  
122:28 - are needed now here's the neat trick as you're 
filling in the parameters here if you press tab  
122:33 - on your keyboard it just automatically jumps to 
the next parameter that you need to fill in so  
122:38 - that's a shortcut that's going to help you so 
let's type in something like 20 years old and  
122:44 - let's run this code now again it just says hello 
Tom because we haven't included the H parameter in  
122:52 - this print statement so why don't we modify this 
piece of text you are backslash rounded brackets  
123:01 - let's insert that age years old and now let's 
run this function again and now you're going to  
123:10 - see down here hello Tom you're 20 years old now 
you can actually specify more parameters but I  
123:16 - wouldn't go to too crazy with this in the future 
as going to get more advanced with Swift are gonna  
123:22 - learn ways to combine pieces of data together 
into one parameter and so you don't have a long  
123:29 - long parameter list that you're gonna require 
but for now if you wanted to include you know  
123:35 - two three four five parameters just to play around 
feel free to do so it's going to be good practice  
123:41 - there's one thing that I want to mention and that 
is that you can actually omit these parameter  
123:49 - names right here so it's going to I guess save 
you a little bit of typing sometimes it can be  
123:55 - nice to have them so that it's really clear what 
sort of data you need to pass in but let me show  
124:01 - you how you could do a function call where you can 
omit this all you would need to do is back in your  
124:08 - function declaration here you would just include 
an underscore space in front of that parameter so  
124:16 - we're gonna do the same thing with the age here 
and then we're going to get rid of this line in  
124:23 - fact Xcode is now or a playground is now telling 
you that you don't need these things so let's get  
124:29 - rid of this line and again use autocomplete and 
you can see there's our function visually here it  
124:36 - doesn't look any different but if you press ENTER 
you can see that this whole thing is highlighted  
124:42 - now and when you add your parameters right it's 
just gonna look like that for your function call  
124:49 - so when you're actually doing here by adding this 
underscore is you're omitting something called  
124:57 - the argument label now I'm not gonna get too much 
into it right now because I don't want to confuse  
125:03 - you with a lot of knowledge that you don't need 
right now but just know that that's something  
125:07 - that you can do I will link to some resources in 
the description if you want to read more into it  
125:13 - but if even if you don't as you're going to get a 
little more advanced with Swift and you're gonna  
125:18 - learn more about functions you will come across 
this knowledge anyways so it's not nothing to  
125:24 - nothing that you need right at this moment now you 
know how to write functions which expect some sort  
125:31 - of input data to work with another great use of 
functions is to take that input data process it  
125:36 - and transform it and then return it back to us now 
functions can do this using the return keyword in  
125:43 - the function below it takes an integer input it 
adds 4 to it and then it returns the result back  
125:49 - to us now notice that after the rounded brackets 
there's an arrow followed by the data type int now  
125:55 - this describes the type of data that the function 
will return when you call it now let's go back to  
126:00 - our playground and we'll try this out all right 
so now let's try out a function with the return  
126:05 - value so why don't we just type in a new comment 
here with return value and I'm going to create a  
126:14 - new function by typing f UNC space and then I'm 
going to call this function add four two and you  
126:24 - guess that we're going to add a parameter in here 
I'm going to call the parameter X and it's going  
126:30 - to be an int data type and here is where we get 
to the return value part so we're gonna type in  
126:37 - a - a greater than sign space and here we indicate 
the data type of the value that is going to get  
126:46 - returned by this function so since we are simply 
taking it in an integer and we're going to add 4  
126:53 - to it it makes sense that what we're returning out 
of this function is also an integer so that's what  
126:58 - we type in there and then we are going to hit 
space and write in our curly brackets there now  
127:05 - I'm gonna open up the curly brackets a little bit 
so we can type some code in between them and what  
127:11 - we're going to do here is we're gonna create a 
brand new variable here let's just call this sum  
127:17 - and the sum is going to be equal to X which is 
the value that gets passed in that integer and  
127:25 - we're going to add 4 to it now from here you can 
see that the playground is complaining that we're  
127:33 - missing the return in a function that is expected 
to return in in data type and it's right because  
127:40 - we need to return this sum the keyword that we 
use is actually just to return so type in return  
127:47 - space and we are going to pass back the sum so if 
you let let Xcode run or maybe you can run your  
127:57 - code at this point you're gonna get rid of that 
error so let's try this out let's try calling this  
128:02 - function ad d4 and autocomplete brings it up let's 
hit enter here we're gonna pass in let's say 10  
128:13 - let's go ahead and run this function at this point 
we don't really see anything I mean you see some  
128:19 - you see the result in the preview here but like 
I said we're gonna pay attention to the console  
128:25 - nothing gets output here well where did that 14 
go right what's actually happening here is it's  
128:35 - passing in 10 into this function right through 
this parameter then it's adding 4 and then it's  
128:41 - returning the sum and we are actually responsible 
for capturing that data so in fact what we have to  
128:48 - do here is we have to type in var let's say result 
equals the execution or the return result by  
129:00 - executing this function so if we print the result 
and we run this code we're gonna see 14 down there  
129:11 - in the console so just to run it through one more 
time what's happening here is we're executing this  
129:18 - function we're passing in 10th as a parameter then 
this code inside this function gets run right it's  
129:25 - gonna take 10 which we passed in it's gonna add 
4 to it it's gonna assign it to the variable sum  
129:31 - and then it's going to return the the data sum 
right and that's going to come back here and that  
129:38 - sum gets assigned to result and we're printing 
the result now one question you might be asking  
129:44 - yourself now is why do I have to use return values 
why do I have to use this return keyword here why  
129:50 - can't I just access some right here why can't I 
just say print sum so why don't you go ahead and  
129:58 - try and run your code and you're gonna get an 
error that says use of unresolved identifiers  
130:05 - some and if you scroll up here that's the same 
error message but it's basically saying that  
130:14 - it cannot find anything called some well what do 
you mean we have some declared right here inside  
130:21 - this function this brings me to my next topic 
which is variable scope you see the code that  
130:29 - is inside this function right here is inside of 
its own scope so any variables you declare in  
130:36 - here only exist within that function and that's 
why in order to get that data out you have to  
130:44 - use the return keyword what I find helps beginners 
to grasp this concept is by thinking of the code  
130:52 - inside of the function as existing in its own 
little bubble so anything that you know the code  
130:59 - that you write here the variables that you declare 
inside that function is in its own little bubble  
131:04 - and in order to get that data out you're going 
to use the return statement here now another  
131:09 - thing I might add is that each function has its 
own scope or its own bubble so if I let's say  
131:16 - declared another function let's just call this 
C and I you know I try to print some in here  
131:25 - I'm also going to get an error right because some 
exists in this functions scope I can't access it  
131:36 - anywhere else each function has its own variable 
scope now I know this variable scope concept is a  
131:42 - little bit abstract but what's going to happen is 
that as you're writing more Swift code and you're  
131:47 - building your apps you're gonna run into issues 
where you're trying to access this variable inside  
131:52 - this scope and then you realize that you can't 
and it's just something over time that you're  
131:58 - going to realize and it's gonna click if it hasn't 
already clicked for you so I guess what I'm saying  
132:04 - is that give it some time and don't worry if it's 
kind of confusing to you right now what I'm saying  
132:10 - is that as you writing more code and you're 
building raps you're writing more functions  
132:14 - these things are gonna fall into place for you so 
let's erase that test function and let's address  
132:21 - this thing it's so annoying this variable sum was 
never mutated consider changing to a let constant  
132:30 - so this goes back to what we talked about in the 
previous lesson when should you use variables and  
132:35 - when should you use constants well I told you that 
you should default to using constants and then if  
132:41 - you find out that you need to change up that data 
and you get an error to say that you can't change  
132:46 - it up then you can consider changing that led to a 
var and using a variable instead so here Xcode is  
132:52 - warning you that hey you know you declared some 
as a variable but in fact after you've assigned  
132:57 - some data to it you never ended up changing it so 
why not use a constant and so Xcode is being very  
133:04 - helpful not annoying in fact let's change that to 
a let and we're all good now Before we jump to the  
133:12 - next lesson one last thing about autocomplete so 
I want you to notice when we typed in add four to  
133:19 - this right here this is the return value so when 
you're looking through different functions to call  
133:28 - this is very handy to understand what sort of 
data this function returns what happens if we  
133:36 - try to now call one of these guys say hello to 
or say hello in fact these guys they don't have  
133:45 - return values right so what happens when we try 
to autocomplete that well it says void well void  
133:53 - basically means no return value so that's what it 
means and why why does void say that because in  
134:01 - fact let's go back to the basic function here in 
fact right here the return value is actually void  
134:09 - it's just that we don't have to type it when it's 
void so you can actually specify a return value  
134:16 - of void which is basically no return value and 
you don't need a return keyword so that's just  
134:22 - a neat little fat when you don't need a return 
value you don't need to specify this part of the  
134:29 - function declaration you can kind of omit it but 
the interesting part is when you use autocomplete  
134:35 - to call this function it still says that the 
return value is void all right so today you  
134:41 - learned about how to organize code into functions 
you've learned about input parameters which let  
134:46 - you supply functions with input data you've also 
learned about return values which let functions  
134:52 - return data back to us and finally you've learned 
about variable scope which is basically all of  
134:58 - the variables and code inside of a function only 
exists within the scope of that function believe  
135:05 - it or not there's still a lot more to functions 
but what we've covered so far is more than  
135:10 - sufficient for now I've got two worksheet for you 
to practice it and solidify what you have learned  
135:14 - so make sure you grab that and I highly recommend 
that you go through it hi and welcome to lesson 7  
135:23 - so far you've learned some basic Swift code and 
how to organize that code into executable blocks  
135:28 - called the functions well in this video you're 
going to learn how to organize and group your  
135:32 - functions into what's known as classes now before 
we go on I just want to say one thing and that is  
135:38 - that learning something new is hard seriously I 
know firsthand because I fail that learning iOS  
135:43 - programming when I first started so give yourself 
a pat on the back for coming this far especially  
135:48 - if you've never coded before now I know you might 
be asking yourself constants variables functions  
135:54 - why the heck do I need to know any of this well I 
can guarantee you that after this lesson and into  
136:00 - the next all the pieces are going to start to 
fall into place for you because we're going to  
136:05 - move back to our Xcode project and I'm going to 
point out all the different pieces that you've  
136:09 - been learning about in the last three lessons and 
you're going to have a Eureka moment you're going  
136:14 - to see that Xcode project in a different light 
so I want you to pay extra careful attention in  
136:19 - this lesson because it's the last one before we 
move back to our work hard game Xcode project all  
136:24 - right let's do this so on the screen I've got two 
functions right now they don't really do anything  
136:31 - but one is called cruise and one is called thrust 
so let me explain why imagine yourself as an  
136:37 - engineer for NASA and you're writing the code to 
power one of their rockets now all of the code for  
136:44 - cruising you would put inside the crease function 
and all of the code that are going to turn on the  
136:49 - rocket thrusters you're going to put it inside the 
thrust function now just like how you organized  
136:54 - that code into those functions you can further 
organize these two functions into a class because  
137:01 - potentially you could have many many functions 
right so a class you can use it to group together  
137:07 - functions that kind of serve the same purpose or 
the same goal so let me show you how to declare a  
137:13 - class first of all use the class keyword and then 
you would give the class a name so I'm gonna call  
137:20 - this rocket now I'm gonna call it spaceship 
just because I like that word a little more  
137:26 - now you open up a pair of curly brackets and I am 
going to put some space inside the curly brackets  
137:34 - and I'm going to highlight these two functions 
and press command X to cut them and I'm going  
137:40 - to press command V and they're to paste it so 
what we have now is kind of like three levels  
137:46 - of organization right at the top level we have 
this spaceship class inside the spaceship class  
137:51 - we have two functions cruise and thrust and 
inside each of those functions we have the  
137:57 - code to essentially carry out those abilities now 
there's one distinction I want to make and that  
138:05 - is that when you move the function into a class 
those functions are now called a method of that  
138:12 - class so I know it's a little confusing because 
nothing's changed except what you call them all  
138:18 - right when when there's a standalone thing they're 
called functions but when you put these functions  
138:23 - inside a class they are now called methods of that 
class but it's sort of interchangeable if you say  
138:30 - you know the crues function of the spaceship 
class people will still understand what you're  
138:34 - saying but I just want you to know that the 
correct terminology is that Cruise is a method  
138:40 - of spaceship all right just a little distinction 
there let's illustrate this in the diagram first  
138:46 - we had functions and then we put them inside of 
a class and now they're called methods I want  
138:51 - to talk about variable scope for a second in the 
last lesson you learned that declaring a variable  
138:56 - inside of a function it only exists within that 
functions scope so for instance if we declared a  
139:02 - variable called name in function a we can't access 
that named variable in function beat because  
139:09 - function B has its own scope the same goes for 
the reverse if we declare a variable in function  
139:14 - B we can't access it in function a because that 
variable would only exist in function B's scope  
139:21 - now get this the class itself has its own class 
scope you can actually declare a variable inside  
139:29 - class but sits outside of any particular function 
now this variable exists inside the entire scope  
139:36 - of this class since function a and function B 
are also inside the scope of this class they  
139:42 - can actually access that variable finally here's 
the kicker when you declare a variable inside the  
139:49 - class but it's outside of any functions like what 
we've done here it's actually called a property  
139:54 - of that class now let's see this in action 
so let's go ahead and declare a property of  
140:02 - our spaceship here now it's going to be inside of 
the class right that's the starting curly bracket  
140:10 - but it's going to be outside of any of these two 
functions so I'm gonna put it up here I'm going  
140:15 - to call it a fuel level and I'm going to assign 
a hundred to it now this fuel level property is  
140:23 - inside the scope of the class just like how these 
two functions are also inside the scope of the  
140:29 - class so I can actually access the fuel level 
property from here see I can print it out now  
140:37 - it's not going to actually print anything because 
we need to execute these functions and we're going  
140:43 - to do that a little later on but just from the 
fact that actually you know let me run it just  
140:48 - to show you that the playground isn't going to 
throw any sort of errors right so it can access  
140:54 - this property however let me declare a variable 
in here let's just say bar tests is equal to true  
141:03 - and make it boolean right this variable because 
it's declared within the cruise function it only  
141:10 - exists inside the scope of that function you know 
that little bubble so I cannot access it from here  
141:18 - let's say print test and you're going to see that 
Xcode is going to throw an error let's run that  
141:25 - so it's saying that it cannot find test because 
it only exists within this scope so now let's go  
141:33 - ahead and erase this test code here and like I 
said before if this scope thing is a little bit  
141:42 - confusing it's going to come with time I promise 
you that as you're gonna write more code you're  
141:47 - gonna understand this stuff a lot more there's 
gonna come a point where these things finally just  
141:51 - like click for you all right now we're going 
to take a giant leap and I'll explain to you  
141:56 - how classes are used now it's going to require a 
little bit of abstract thinking I also want to add  
142:02 - that in my 6 years of teaching iOS app development 
this is the single hardest concept to understand  
142:07 - for beginners who have never coded before but once 
you understand this then you will have crossed the  
142:12 - biggest hump that so many people give up at all 
right I'm done talking let's do this now let's use  
142:18 - the same analogy so we used before suppose we have 
some data and we have variables and constants as  
142:23 - sticky tabs now we have functions that encapsulate 
these pieces of code and let's say that functions  
142:29 - are like file folders now we have classes that 
contain a bunch of functions and variables and  
142:34 - let's say that class is a file box that contains 
file folders well at the end of the day what we  
142:40 - have is just a file box full of instructions it 
doesn't actually do anything some people say let's  
142:46 - think of the class like a recipe some people say 
let's think of the class like a blueprint what's  
142:52 - the common thing here they all need someone or 
something to turn this set of instructions into  
142:57 - action someone to take those recipes and turn 
it into a cake or someone to take the blueprints  
143:03 - and build a rocket ship now this rocket will work 
exactly like it was designed to it can thrust and  
143:08 - it can cruise because we've given it functions to 
do so but understand that class doesn't thruster  
143:15 - cruise it's the actual object that gets created 
from the class that will thrust their crews  
143:20 - furthermore once you have a blueprint you can make 
multiple spaceships each of them will have its own  
143:26 - fuel level and ability to thrust their crews 
the blueprint is called a class and the object  
143:31 - that are created are called objects or instances 
of the spaceship class all right so who is the  
143:37 - person that will take that class and turn it into 
an object well that's the device in your hand it's  
143:43 - a mini computer you write your instructions in 
Xcode Xcode will turn it into a format that can  
143:49 - be understood by your device and your device 
carries out those instructions so here's the  
143:54 - tricky part you need to write instructions to 
tell the computer to take your classes and to  
143:59 - turn them into objects and furthermore you need 
to write instructions to tell the computer how  
144:04 - you want it to use those objects for example you 
write instructions like when the user taps the  
144:09 - lift off button then you create an object from the 
spaceship class then call the thrust function of  
144:15 - that object then called a cruise function of that 
object you know that could be an app right there  
144:19 - now let's go back to our playground and see how 
you can write instructions like this all right so  
144:25 - you just learned that a class with its properties 
and methods they don't actually do anything until  
144:31 - you bring it to life by turning it into an object 
or an instance of that class so essentially when  
144:39 - you're writing this code and organizing your code 
into functions and organizing your functions into  
144:44 - classes you're really designing something right 
you're programming something to be turned into an  
144:50 - object to be used so before we create a spaceship 
object from this class I want to first add another  
144:55 - property and some code to the cruise and thrust 
functions so that they actually do something so  
145:01 - up here right below this property I'm going to 
declare another name property and I'm going to  
145:06 - assign it an empty string so you can actually 
do that it's a string but with nothing inside  
145:11 - but essentially it sets the datatype for this 
name property and inside the cruise function  
145:19 - here essentially I want to print out a statement 
but I want to include the name so I'm gonna say
145:27 - cruising is initiated for and then I'm going to 
insert the name remember how we do this you learn  
145:36 - about this a couple lessons ago I believe or last 
lesson backslash and then rounded brackets and you  
145:42 - put in the variable name and it's gonna insert 
that into the string so we're gonna do thrust  
145:48 - this well so we're gonna say is let's say rocket 
thrusters initiated for name alright so now we can  
146:04 - bring this spaceship class to life by creating 
a spaceship object from it or in other words an  
146:11 - instance of the spaceship class and the way we do 
that is we basically type in the name of the class  
146:18 - followed by two rounded brackets so let's start 
doing that and you'll notice that autocomplete  
146:23 - shows us you just press ENTER and then you can go 
ahead and put two rounded brackets like that now  
146:30 - that kind of looks like a function call right and 
just like a function call with a return value how  
146:36 - it returns something too and you need to capture 
it using a variable or a constant the same thing  
146:42 - is happening right here by writing this line of 
code you're creating a new spaceship object and  
146:48 - it's being returned to you so you need to keep 
track of that data using a constant or a variable  
146:55 - you know use a variable because I want to show 
you how we're gonna try assigning something else  
147:01 - to this variable all right anyways I'm gonna call 
it my ship and it's going to keep track of that  
147:07 - spaceship object that we just created I want to 
show you something interesting why don't we try  
147:13 - assigning another type of data to my ship for 
example in integer 10 well you'll see that we  
147:21 - can't assign an integer to this variable because 
this variable is of the data type spaceship well  
147:28 - what do you mean we went through some data types 
in lesson 5 remember string bull in float double  
147:34 - well as it turns out when you create a new class 
this is now a custom data type so spaceship is  
147:42 - actually a data type so what you've done here 
with this line is that you've said my ship is a  
147:48 - variable that can only keep track of data that is 
of the spaceship data type so essentially that's  
147:57 - what's really happening here you're declaring a 
my ship variable that is going to keep track of  
148:02 - spaceship datatype and you're assigning a new 
object to this variable so I just wanted you  
148:08 - to know that so that it doesn't get confusing 
otherwise now the next thing I want to show you  
148:14 - is how do we access the properties and methods of 
the newly created spaceship object well we have a  
148:23 - reference to that newly created spaceship object 
from this variable my ship and if you've never  
148:29 - heard of that terminology before a reference is 
essentially what your variable or constant is it's  
148:37 - keeping a reference or keeping track of a piece 
of data which in this case is the spaceship object  
148:44 - so my ship is a reference to that spaceship object 
all right so all we do is we type in your variable  
148:54 - name or your constant name or you know whatever 
has the reference to that object press dot and  
149:01 - this is called dot notation this is how we are 
going to access the methods and properties of that  
149:07 - object as you can see autocomplete pops at this 
menu and we can you know we can access the name  
149:13 - the fuel level the cruise and the thrust functions 
and you know when you get more advanced with Swift  
149:19 - there are actually ways to restrict what can 
be accessed but that's for the for later for  
149:27 - the future for now I want to set its name so I'm 
gonna call I'm gonna access the name property and  
149:34 - I can actually say that this name property should 
keep track of a new piece of data I'm going to  
149:42 - call this ship Tom all right so I'm assigning the 
string Tom to the property name for that object my  
149:54 - ship and next I'm going to call using dot notation 
the cruise function and when I run this code you  
150:04 - can see cruising is initiated for Tom but had 
I not set this line remember I'm going to use  
150:11 - a comment here we talked about comments in lesson 
5 that essentially turns this line of code off and  
150:18 - treats it as a note or a remark so I'm going to 
turn that line off and then I'm going to run the  
150:24 - code again and you can see cruising is initiated 
for empty string nothing ok so that's kind of cool  
150:30 - we could also call my ship daunt thrust and we 
could run that and you can see there it goes I  
150:40 - can also just access the properties I don't have 
to be assigning things to it so for example let's  
150:48 - erase these two lines and let's say let's print 
out my ship dot name and let's print out my ship  
150:59 - dot fuel level so let's run that you can see it's 
Tom and 100 I like to think that coding an app is  
151:10 - like writing a script for a movie the movie script 
is your app code the character roles are the  
151:15 - classes that you've designed but character roles 
themselves don't do anything these roles need to  
151:21 - be turned into physical actors and actresses 
just like we need to turn classes into objects  
151:27 - then the actors and actresses follow the script to 
perform your movie just like how your objects work  
151:34 - together to make your app function so all of this 
stuff is pretty abstract but in the next lesson  
151:40 - we're going to put it into practice but first 
let's do a quick recap of what we learned in this  
151:45 - lesson because it was quite a bit now classes 
contain methods and properties and remember  
151:50 - methods are just another name for functions you 
also learn that classes by themselves don't do  
151:55 - anything they need to be turned into objects first 
these objects are also referred to as instances of  
152:02 - that class so remember a classes kind of like a 
blueprint and the object is what's created from  
152:08 - that blueprint you learn how to create a new 
instance of a class and you also learn about  
152:12 - dot notation which is used to access the methods 
and properties of that object now if you need to  
152:18 - I recommend to re-watch this video and ask any 
questions you have in the discussion area below  
152:23 - I also have a worksheet for you to practice and to 
solidify these concepts in your head and if things  
152:29 - are still a little fuzzy and it's completely 
normal if they are I highly recommend for you  
152:33 - to download this worksheet and go through it now 
in the next lesson we're going to use your newly  
152:39 - minted Swift skills to bring the war card game to 
life now if you're excited about that like I am  
152:44 - I've been done pumped into the discussion area 
below hi and welcome to lesson 8 you're almost  
152:54 - there only two more lessons after this one and in 
this video we're going to return back to our card  
153:00 - game Xcode project and I'll explain to you how 
those Swift Basics you've learned apply to this  
153:05 - project by the end of this lesson you'll know how 
to write code inside the view controller to access  
153:10 - and manage those elements that we've created 
in the storyboard I'll also show you what to  
153:14 - do when your app crashes which is something that 
actually happens quite often into all of us so if  
153:20 - you're ready let's do this so here I have our war 
card game Xcode project and we're going to jump  
153:26 - right into the view controller dot Swift file now 
that you've gone through the Swift basics we can  
153:32 - talk about some of the code in this file so in 
this first line import you arcade you know what  
153:37 - that means we're basically saying that in this 
code file we want to use the uikit library that  
153:43 - apple provides to make our life easier you go 
down to this line we have class view controller  
153:49 - so right here we're declaring a class called view 
controller and you can see that it has an opening  
153:55 - curly bracket and a closing curly bracket and 
this inside is a function you can see the F UNC  
154:03 - there it's a function called viewdidload now 
there are some details that we are going to  
154:08 - gloss over right now because it's not relevant 
for what we need right now you don't want to  
154:14 - burden you with that information but pieces of 
information like this here : uiviewcontroller  
154:20 - essentially this is something that's called sub 
classing which is a way for classes to build  
154:26 - off of each other so you're not always declaring 
classes from scratch this is essentially saying  
154:33 - that the viewcontroller is building off of another 
class called UI view controller and this UI view  
154:40 - controller class is actually one from UI kit and 
for this function here you can see that there's  
154:46 - an override keyword so you don't need to know 
about that for now and also this super keyword  
154:52 - which again is something that we don't need to 
know right now but essentially you know at a  
154:59 - high level what you're looking at here is a new 
controller class with a function inside called  
155:04 - viewdidload so isn't that really really cool 
because everything you learned in the last three  
155:09 - Swift lessons it you know directly translates to 
what you're seeing here but as you learned in the  
155:15 - last lesson the view controller class by itself 
is just a blueprint it doesn't do anything right  
155:20 - you need to turn it into an object first so now 
we're going to jump into the main dot storyboard  
155:25 - and take a look at the work that we've done here 
so all of these elements that we've added into  
155:31 - the view here and that we've configured what are 
they are the objects are they classes well believe  
155:36 - it or not what we've been doing here we've been 
creating objects and you might say that hey Chris  
155:43 - from what I've learned objects are created from 
classes right but what sort of classes are these  
155:51 - guys objects of well let's take a look at this 
object library here you see all of these things  
155:57 - these are classes inside the uikit library yes 
that library that we import all of these useful  
156:05 - classes like buttons text fields and sliders and 
stuff like that when we drag one of these elements  
156:11 - on to the view we are actually creating an object 
of that slider class or that button class or that  
156:19 - uiimageview class and take a load of this when 
you click on one of those elements or objects  
156:27 - now that you know what they actually are and 
you go here on the right hand side into this  
156:32 - inspector you can see all of these things that 
we can configure well what you're actually doing  
156:36 - is you're setting the properties for that object 
so you see everything maps to exactly what we've  
156:43 - been talking about in the last three lessons this 
whole storyboard is merely a visual way for us  
156:49 - to create these objects and set its properties in 
fact we could just completely omit the storyboard  
156:56 - and we can decide to create all of these image 
objects these button objects through code and  
157:02 - then set its properties through code and then put 
them into the view through code so you completely  
157:08 - don't have to touch the storyboard but this is 
more of an intermediate to advanced technique and  
157:14 - I wouldn't recommend that for you right now for 
beginners I would definitely recommend to start  
157:19 - with the storyboard so now that you know that 
these storyboard elements are actually objects  
157:24 - how do we get references to these objects so 
that we can call their methods and configure  
157:30 - their properties through code through the view 
controller well that's where IBL at properties  
157:36 - come in let me show you how we can expose these 
objects as iboutlet properties so that the view  
157:42 - controller can access them now there are several 
ways to do this but the easiest way is just to go  
157:47 - ahead and select view controller here in your 
document outline and remember that this is the  
157:54 - visual representation of the view controller 
object click this this button here that looks  
158:01 - like to Konya circles this is actually called the 
assistant editor and what that's going to do is  
158:07 - split your code editor into two different panes 
a left side and the right side now I want to make  
158:12 - sure on your right side you're looking at the view 
controller furthermore up here in this breadcrumb  
158:18 - sort of navigation I want to make sure that your 
say automatic here if it doesn't go ahead click  
158:24 - it and bring it down from manual or whatever it 
was set to go under automatic and select view  
158:30 - controller and then find this spot here right 
after the opening curly bracket of the class  
158:37 - press enter a couple of times to create some space 
and on the left hand side we're going to expose  
158:47 - this left card this first card as an iboutlet 
property now you could do it through here the  
158:55 - storyboard but what I would actually recommend is 
to do it through the document outline so go ahead  
158:59 - and open up your document outline until you see 
the card here you know you can select the element  
159:06 - it's gonna highlight the different parts make 
sure you've got that left card highlighted hold  
159:12 - down ctrl on your keyboard and then while still 
holding down ctrl click and drag this blue line  
159:18 - should follow your mouse cursor as long as you're 
holding down the ctrl key now drag it over here  
159:24 - you should see this little text that says insert 
outlet and then you can let go of your mouse  
159:29 - button and then ctrl key you're gonna get this 
little menu here and then you're gonna be able to  
159:34 - name this iboutlet property so I'm going to call 
this the left image view like that and if you've  
159:42 - done this with the right element the type should 
say uiimageview if this doesn't say that for  
159:50 - you just click cancel and then try it again the 
connection type should be outlet and you can go  
159:56 - ahead and hit connect and what that's going to do 
is generate this property for you because you see  
160:01 - there's the VAR keyword here is the name of the 
property here is the data type that this property  
160:09 - references which is UI image view and this is 
special because it's got this iboutlet keyword  
160:18 - here which just indicates that this property 
reference is an object in the storyboard now  
160:24 - I'm going to gloss over a couple of things here 
such as the weak keyword and this exclamation mark  
160:30 - here so that's not something that we need to talk 
about right now but the important thing to note is  
160:36 - what you've done here is essentially hooked up 
that object in the storyboard to this property  
160:43 - here inside your view controller so now that you 
have a reference to that uiimageview object you  
160:51 - can call methods on it you can configure its 
properties inside the view controller here now  
160:57 - because often times beginners make mistakes 
when connecting their first IB outlets I'm  
161:02 - gonna go through some troubleshooting steps and 
also some steps for you to confirm that you've  
161:06 - done this properly so go ahead in the document 
outline for this image that you just connected  
161:13 - right click it and it should pop up this little 
menu and you can see under referencing outlets  
161:18 - it says left image view with this view controller 
here now if yours doesn't say this then you might  
161:26 - have connected the wrong element so what I would 
do is maybe check the stack view you could have  
161:32 - accidentally connected this guy right-click it and 
you know there should be no referencing outlets  
161:38 - there you know same thing with the right card view 
if you click this there should be no referencing  
161:43 - outlets if you've by chance accidentally connected 
another element here's how to fix it go ahead you  
161:52 - know when you see that menu here you have to click 
this little X to break the connection and then go  
161:58 - ahead and delete the property and then you just 
start all over and this time you make sure you  
162:04 - have the right element selected hold down control 
drag that blue line over here let go and then you  
162:12 - can say left image view now let's say when I'm 
typing this out I accidentally make a typo and  
162:20 - I connect it a lot of the times beginners will 
just correct this typo like this and leave it  
162:25 - at that but essentially that will cause a problem 
down the road when you run your app because what  
162:31 - happens take a look this right click this and you 
can see that this image object is connected to a  
162:40 - property called left image view with two w's but 
what we've done here is that we've corrected it so  
162:46 - it's gonna look for a property with two WS but it 
doesn't exist so your app is actually gonna crash  
162:52 - that's not the way you want to fix your typos when 
it comes to connecting Ivy outlets you want to go  
162:59 - ahead and break that connection and then just 
delete the property and you just all over now  
163:05 - should show you another way to correct this so 
the most important part is that you break that  
163:10 - connection you can potentially just leave that 
iboutlet property that was created and then you  
163:18 - can right-click your image that you want to 
connect to that property under referencing  
163:23 - outlets click this little circle drag to the view 
controller let go and it's going to pop up some  
163:31 - properties that you can connect this image object 
to now it's important you don't connect it to the  
163:36 - wrong one choose left image view and you can see 
that this this image right here an image view is  
163:45 - connected to the left image view property of 
our view controller so that's what you want  
163:49 - now let's call it connect the right image view 
hold down control click and drag that blue line  
163:56 - I want to make sure that you don't drag it into 
that same property because if you do that you'll  
164:02 - be connecting two elements onto the same iboutlet 
property and that could cause potential problems  
164:09 - so you need to drag it into an empty space where 
it says insert outlet or outlet kind of collection  
164:15 - let go I'm gonna call this the right image of view 
and we're gonna connect it all right so we've got  
164:22 - two we're going to connect a few more let's say 
we're going to connect the score labels because  
164:30 - we're going to need to update them through the 
code so let's connect this left a player score  
164:36 - one and you can see what I did I created a little 
more space there hold down ctrl click and drag  
164:43 - call this the left score label you can see the 
type now is different it's a different class UI  
164:51 - label connect that and then here is the right 
one right score label all right now I want to  
165:10 - show you what an app crash looks like so I'm gonna 
go ahead and just change the name of my iboutlet  
165:17 - property with without breaking the connection and 
fixing it here in the storyboard and as I told you  
165:24 - this is going to cause a crash so let's go ahead 
and run the project and we'll see what happens
165:40 - all right so right here you see this red 
highlighted line that's gonna be a crash and  
165:46 - we basically see the same thing on the left and 
right side because we have the assistant editor  
165:52 - open but the main thing is that you need to look 
down here in the console area if you don't have  
165:57 - this section just go ahead up here this will show 
or hide it and on this right-hand side sometimes  
166:04 - if you don't have this there are two small little 
buttons here in the lower right hand corner that  
166:09 - let you control the left and right sides so 
make sure you've got this side here where it  
166:15 - shows you all of this text and down here you see 
terminating with uncaught exception and that's  
166:20 - just a generic message for an app crash what you 
want to do instead is scroll all the way up and  
166:26 - that's where you're gonna find an error message 
which makes a little more sense so here you see  
166:32 - at the very top terminating app due to uncaught 
exception the reason this class is not key value  
166:43 - coding compliant for the key rights core label 
now the line I've highlighted here may not make  
166:50 - a lot of sense but what happens is that once you 
know how to solve this error and the next time  
166:57 - you see an error message that looks kind of like 
this you have an idea about what's wrong and how  
167:03 - to fix it in this particular case it's telling 
you that something is looking for a right score  
167:10 - label but it can't find it and we know exactly 
what the problem is right if we go back into the  
167:17 - storyboard write this write the score label 
you can see if you right click that it says  
167:23 - this element is connected to an iboutlet property 
called write score label spelled correctly but if  
167:31 - you look inside our view controller we don't have 
a property like that we only have this one write  
167:38 - score laid without the L at the end and so that's 
why the app is crashing because it's looking to  
167:44 - make that connection that we've told it to make 
but it can't find you know that corresponding  
167:51 - on the outlet so the next time you experience 
an app crash and maybe you're looking for help  
167:57 - online or maybe you're in our support forum and 
you're asking for help make sure that you scroll  
168:03 - all the way up into this console and look for 
that error message which gives you a hint as to  
168:09 - what's wrong if you if you just look at this it's 
not really gonna tell you any sort of information  
168:15 - okay so let's go ahead and fix this by adding 
that L that was missing and let's take a look  
168:22 - that what we've done here so far so essentially 
let me go back to the single editor view just  
168:29 - so you can see a little more clearly essentially 
what we've done is we've connected the two image  
168:36 - view objects from the storyboard and the two 
labels from the storyboard as well as iboutlet  
168:43 - properties here so from this view controller 
code file we can reference those objects using  
168:50 - dot notation we can access the methods of those 
objects and those properties of those objects as  
168:56 - well let me just demonstrate for you so inside 
the viewdidload method and it create some space  
169:03 - and let's access the left image view now hold on a 
minute why can we access the left image view from  
169:13 - within the viewdidload method well this left image 
view is outside of a function but inside the class  
169:22 - so it's inside the scope of the class remember 
this function is also in the scope of the class  
169:29 - so that's why from inside this function we're able 
to access that left image view property now using  
169:38 - dot notation let's click dot and here I can see 
all of these methods and all of these properties  
169:45 - of the uiimageview class let me show you one 
particular property here called image now this  
169:53 - image is you can read the description down here in 
the autocomplete dialogue the image displayed in  
169:58 - the image view that means that I can actually 
set this image property to change the image  
170:06 - that image view is showing now I'm not going to 
actually do it but why I wanted to point this  
170:11 - property out is because I want to jump back 
into the storyboard and show you if I click  
170:19 - this left image view go over to the attributes 
inspector here you see this image attribute it's  
170:27 - basically the image property that I just showed 
you see if I change the card here right that's  
170:33 - just a visual quick way to do the same thing as 
if I were to do it here by using code all right  
170:43 - the next order of business is how do we execute 
some code when this button is tapped on this deal  
170:50 - button right here well that brings us to I be 
action functions and it's connected in the same  
170:57 - sort of way as IB outlet properties let's go ahead 
and open up assistant editor and let's create some  
171:06 - space here in the view controller side now let me 
just hide this panel so we can see a little bit  
171:11 - more now before here when we were establishing 
these IB outlet properties we did we did it up  
171:19 - here but now that we are connecting a function 
we're going to do it down here still inside of  
171:28 - the view controller class so we have to do it 
you know before this closing curly bracket but  
171:36 - we also don't want to accidentally do it inside of 
another function so this is you know the opening  
171:43 - bracket of the viewdidload function and this is 
the closing bracket of that viewdidload function  
171:48 - we want to do it right here this is where we can 
declare a new function so we can create some space  
171:53 - here like that go ahead hold down control click 
on this deal button element drag it here and it  
172:02 - says insert action outlet or outlet collection 
go ahead and let go and you can see that action  
172:09 - sorry the connection type should be action if it's 
not just click on that drop-down and choose action  
172:15 - and down here I want you to know it says touch up 
inside there are different events that this button  
172:24 - can trigger touch up inside is just a button tap 
it essentially means that the user has tapped on  
172:30 - the button and then let go of the button while 
still within the boundaries of the button if you  
172:36 - open this up you can see there are different 
events for example touch up outside which is  
172:42 - actually tapping on the button and the letting 
go with the finger outside the boundaries of the  
172:47 - button so that doesn't really count as a tap so 
we're gonna leave it as touch up inside and we're  
172:53 - going to call this Matt we're gonna call this 
method deal tapped and we're gonna hit connect  
172:58 - and you're gonna see that this is essentially 
a function with this special IB action keyword  
173:04 - which essentially just says that this function is 
connected to an event of triggered by an object in  
173:10 - the storyboard it's got one parameter called 
sender which is basically the button it's a  
173:18 - reference to the button that triggered this event 
and here is the opening curly bracket and here's  
173:24 - the ending curly bracket and we're going to create 
some space in the middle and we're gonna add some  
173:29 - code to execute when this button is tapped on so 
I'm gonna print a deal tapped like that and now  
173:40 - we're going to run our project and we're going to 
tap on that button and just check the console to  
173:45 - make sure that this is connected properly oh one 
thing before we do that if you've accidentally  
173:50 - connected the wrong element to fix it would you'd 
go through the same exact steps as the iboutlet  
173:57 - property so you can go ahead and right click the 
deal button kill that connection you can see all  
174:04 - these different events you kill that connection 
under touch up inside delete the IV action and  
174:09 - then just try it again just like before if you've 
accidentally made a typo here don't just don't  
174:18 - just change the function name like that because 
it's going to break things right this is still  
174:23 - connected to deal tapped right and if you don't 
have that corresponding function in your view view  
174:30 - controller file it's going to break so just be 
aware of that all right so let's run the project
174:42 - all right so we're gonna click let's move this 
over here so here you can see in the console  
174:52 - that this triggers alright so in this lesson you 
learned about how you can use iboutlet properties  
175:00 - to allow your view controller to access and manage 
those elements in your storyboard you also learned  
175:05 - about IB action functions and how they can be 
hooked up to events in this storyboard you learned  
175:11 - about common mistakes that people make when they 
hook up their IB outlets and IB actions and how to  
175:16 - correct those mistakes and finally you learned 
about app crashes and how to find a detailed  
175:21 - error message when your app crashes now I highly 
recommend that you try replicating what we did in  
175:26 - this video inside your own Xcode project and if 
you get stuck or your app crashes walk through  
175:31 - those troubleshooting steps that we went through 
in this video and you should be fine hi welcome  
175:40 - to lesson 9 this is a fun lesson we're going to 
make the card images change when we click on the  
175:45 - deal button so if you're ready let's jump right in 
so here I've got our war card game Xcode project  
175:52 - I'm looking at the storyboard and I'm going to 
go ahead and select that left image view now in  
175:57 - the attributes inspector on the right hand side 
I'm gonna go to this image property and I'm just  
176:03 - going to change it to a different graphic asset 
by choosing something different in this drop down  
176:08 - remember that what we're doing here is just an 
easy visual way to do the same thing that we could  
176:16 - do through code so essentially what I'm changing 
up this image asset I am really just assigning a  
176:23 - different graphic asset to the image property 
of this image view object now let's jump into  
176:31 - our view controller and see how we can do that 
through code just as a reminder we have references  
176:38 - to those image view objects right we have the 
left image view in the right image view I want  
176:44 - you to also note that the type you know the class 
is uiimageview okay that is for displaying images  
176:53 - let's jump down to the deal method here let's 
erase this line and let's access our left image  
177:01 - view using dot notation we're going to access the 
image property so hit dot type image and this is  
177:10 - the same image property we were just flipping 
around in the storyboard you know changing that  
177:15 - graphic asset so to do the same thing through code 
we would just assign you know a different graphic  
177:22 - asset to this image property of the image view I 
want to draw your attention to one thing here on  
177:28 - the left hand the column right here we can see 
the datatype that this property expects so this  
177:37 - image property expects you to assign to it a UI 
image object this is different from UI image view  
177:46 - UI image view is a element that displays UI image 
data and UI image is the data that represents the  
177:56 - actual graphic assets so essentially what we 
have to do here is we have to create a new UI  
178:01 - image object and assign it to this image property 
so let's just do it and you will probably make  
178:11 - a lot more sense than me just explaining it like 
this alright so go ahead hit equals and then we're  
178:17 - going to create a brand new UI image object now 
keep in mind that you have to type it exactly how  
178:24 - I have it right here cuz class names lower case 
and upper case do matter so it needs to be capital  
178:30 - u capital i capital i and then lower case m a GE 
same thing goes for these property names it has  
178:38 - to be lowercase i image so when you're watching 
me type this stuff out and you're getting errors  
178:43 - on your own laptop or a computer make sure that 
you're typing the right casing for your property  
178:50 - names and your class names also another mistake 
I've seen is that you have to have spaces like  
178:58 - proper spacing so make sure that you have a space 
before and after equal signs because you know this  
179:04 - is not the same thing alright so what we've done 
here is we've created a brand new UI image object  
179:13 - and we're assigning it to the image property of 
the image view however if we do this we're really  
179:20 - not going to see anything because this is just an 
empty UI image object it doesn't actually have any  
179:27 - image data to show so the cool thing about this 
UI image class is that it's got a method where you  
179:35 - can create a new UI image object while passing in 
some input parameter to tell what sort of graphic  
179:44 - asset you want it to represent so let me show you 
let me show you what that is so I'm going to open  
179:51 - up a pair I'm going to open up the first rounded 
bracket and you can see all of these different  
179:55 - functions and I scroll down or this one find this 
one called named right here and we are going to  
180:05 - simply use that one here as enter and we're going 
to be able to specify a graphic asset name now  
180:17 - we're going to choose one of the ones in here take 
a note how you're spelling this if you've just  
180:23 - dragged my graphic assets in here then they should 
be lowercase C with no space in between the D and  
180:31 - the number so let's say card five lowercase C a 
Rd with the number five it has to be exactly like  
180:38 - that otherwise it's not going to find that graphic 
asset we're going to type card five like that so  
180:45 - why don't we run our project right now just to see 
that appear all right so right now it's a three in  
180:54 - a tenth when I click deal it's going to execute 
this function here and it's going to set it's  
181:03 - going to create a new UI image object grabbing the 
graphic asset here and then it's going to assign  
181:08 - that to the image property of the left image view 
object which is this guy right here so clicking  
181:13 - deal there that turns into a five which is really 
really cool because that's the first time I think  
181:18 - where you wrote code to influence what how in the 
user interface so awesome now we're gonna do the  
181:26 - same thing for the right image view right image 
view dot image is equal to a UI image right and  
181:34 - we're gonna just you can actually start typing 
and it's going to narrow it down for you so you  
181:40 - can choose that this time going to choose card I 
think our upper limit is 14 if I'm not mistaken  
181:48 - yeah so we've got up to card 14 alright so I'm 
gonna run that and this time let me just put the  
181:59 - code on the screen here this time when I click on 
deal we have the ACE on the right-hand side and  
182:05 - number 5 now if I click on deal again nothing's 
gonna change because it's always just running the  
182:12 - same code right we need to basically randomize 
these numbers so that every time we click deal  
182:18 - we get a different set of cards so let me tell 
you about how to generate random numbers it's  
182:23 - actually quite easy so we're gonna declare a 
new constant let's call this like left number  
182:31 - and you know the int datatype it's actually got a 
method called random that we can use right and we  
182:42 - can specify a range and we can say the lower range 
that we have let's see is 2 and the upper range is  
182:51 - 14 so we want to specify a range between 2 to 14 
inclusive we're gonna go here and we're gonna type  
182:58 - 2 dot dot dot 14 right no spaces like that and we 
are going to then print the left number all right  
183:09 - now let's do the same thing with right number 
we're going to randomize another one same thing  
183:17 - 2 to 14 and then we're going to print the right 
number so after you've typed that in let's run our  
183:26 - project it's not going to change the images just 
yet but it is going to print the random numbers to  
183:31 - the console just so we can see that we're doing 
this properly and move this over here so we see  
183:36 - and it clicked a deal button oops that's still 
covering it up oh don't oh right here I've got  
183:44 - that little panel hidden so click on this if it's 
hidden for you there we go you can see different  
183:53 - pairs of random numbers generated now the next 
step is how do we get these numbers into here well  
184:04 - all we have to do actually first thing is let's 
comment these lines out so we're not printing  
184:10 - them out into the console and I would also want 
to point out that when you're calming taking out  
184:17 - lines of code like this make sure that you clean 
it up after when you don't need it anymore so you  
184:22 - don't want to leave too much commented code lying 
around because it can look messy and it's not a  
184:29 - good practice to keep okay so remember what we 
what we learned about inserting variables into  
184:37 - strings so it goes back to that instead of five 
here we want to put left number so I'm going to  
184:44 - erase five and raise five put back slash open 
up a pair of rounded brackets and insert left  
184:52 - number as a variable right so the string is going 
to read card and then whatever left number is now  
185:00 - I'm gonna do the same thing here you raise 14 
backslash put into round the brackets and I'm  
185:06 - gonna put right number all right so let's erase 
these print statements oh I don't think we need  
185:13 - that anymore okay so let's run our project here 
see if we get the desired result let's go ahead  
185:27 - and click on deal so yeah this is really cool now 
one thing I want to point out is that if you're  
185:33 - clicking this you're randomizing the cards and 
you're seeing some blank space like you're seeing  
185:38 - a card that's just completely not there what 
that means is that it's looking for a graphic  
185:45 - asset that doesn't exist in your asset library so 
maybe your double-check your range make sure that  
185:52 - you know you have cards to 214 and make sure that 
they're named properly and maybe you might be even  
186:00 - be missing that graphic asset completely so Chuck 
you have two three four five six let's check that  
186:05 - you have all of them because if you're randomizing 
and you see an empty card you don't see the image  
186:10 - it either means that you don't have the graphic 
asset here or you've spelled it wrong so that you  
186:20 - know when you're trying to create this UI image 
object it's not finding that graphic asset in  
186:24 - your asset library oh hey I can't stop hitting 
this deal button now in this lesson you learned  
186:32 - about how to change the image of a UI image view 
using Swift code you also learned about how to  
186:38 - randomize numbers and how to insert variables 
into a string alright so remember that you can  
186:43 - download the project and the recap notes below hi 
and welcome to lesson 10 by the end of this lesson  
186:52 - you will have finished the war card game project 
all that's left to do is to count the score and  
186:57 - to update the label elements on the storyboard now 
doing this is going to involve writing Swift code  
187:03 - that can take two numbers compare them and then 
execute different branches of code depending on  
187:09 - what the result is in other words you're going 
to be writing Swift code that can make its own  
187:13 - decisions so before we dive into our Xcode project 
I want to first start in a playground and I want  
187:20 - to show you what's called an if statement which is 
going to allow you to evaluate a piece of data and  
187:26 - decide what to do so the if statement starts with 
the if keyword and then you're going to test some  
187:34 - sort of condition whether it's gonna be true 
or false and so I've got a constant integer X  
187:41 - it's set to ten right now so I'm just gonna do 
a simple check and say if X is less than eleven  
187:50 - okay so that's my condition it's going to make 
that test if that is true then it's going to  
187:57 - run the code in between my curly brackets so 
let's create some space in the middle and I'm  
188:03 - going print hello let's run this code here and 
it's gonna take off okay so we see hello in the  
188:14 - console the reason this executes is because this 
condition is true right however if let's say X  
188:23 - is 12 and I run the code again nothing's gonna be 
output down there it doesn't run this code because  
188:31 - it checks and it fails the check so here's the 
cool thing about if statements and that is that  
188:38 - you can provide alternatives so you can say if 
X is less than 11 then print hello otherwise and  
188:45 - you would use this else keyword and you would 
specify another block of code to execute print
188:54 - goodbye all right so if we ran this code right 
now what would you expect to be output all right  
189:05 - goodbye because it does this check and it fails 
it so it doesn't go in there and instead it comes  
189:12 - into this else part so let me just set this 
to 10 and show you so X is less than 11 and  
189:21 - that's true so it comes in here and prints hello 
but it doesn't print goodbye it just chooses one  
189:26 - path or the other now here's some other cool 
stuff that we can do with an if statement and  
189:31 - that is to test multiple conditions so we can 
say else space if and open up another block so  
189:42 - let's say good afternoon oh I forgot to put the 
condition here if X is let's say greater than  
189:56 - 12 that would print good afternoon let's make 
this number a little bigger so let's say 15 if  
190:06 - X is greater than 15 then print good afternoon so 
what if we made the sky 20 so it would basically  
190:17 - start at the top it would check if X is less 
than 11 and it's not so then it checks the next  
190:22 - one is X greater than 15 yes it is so it prints 
it executes that code in there and it skips the  
190:30 - else clause now what if none of it is true so what 
if I said X is equal to 13 all right so let's give  
190:39 - that a run it falls down to this else clause 
because this wasn't true this wasn't true so  
190:48 - all that's left is this sort of catch-all bucket 
now here's the cool part you can omit different  
190:55 - pieces of your if statement depending on what 
you want to do for example you can remove the  
190:59 - catch-all bucket you erase that and you execute it 
nothing happens in this scenario because none of  
191:06 - these conditions are true and there's no catch-all 
bucket so essentially no code gets run now so far  
191:12 - I've just done less-than and greater-than but 
you can also do a couple of different things  
191:17 - you can do you can do less than or equal to or 
you can put the equals sign you could do greater  
191:23 - than or equal to you can also do not equal to 
so not equal to is actually exclamation mark  
191:31 - equals and that is testing if X is not 11 so 
let's take a look at this and we get hello now  
191:42 - here's a very very important point and that is 
that only one branch of your if statement ever  
191:48 - gets executed so if I had this statement where 
I was saying let's say something like that and  
191:57 - I ran the code both of these conditions are true 
right but it starts at the top and as soon as it  
192:04 - reaches a true condition it will execute that 
block of code and that's the that's it right  
192:10 - your if statement is done so it ever only picks 
one path to go down even if you know this would  
192:17 - have evaluated to true now this is very different 
if you write this because if you did it this way  
192:25 - these are two different if statements so it would 
for to run this if statement right and tested the  
192:33 - condition to see if it should run this block of 
code and then it treats this as a separate if  
192:38 - statement and it's going to test this condition 
to see if it should run that block of code so  
192:44 - that is one clear distinction to make doing it 
like this if and then else if combines these  
192:52 - two conditions into a single if statement so it's 
it's going to be like two different paths and it's  
192:58 - going to choose one path now instead of having two 
different branches like we have here you can also  
193:03 - do three branches or four branches you can just 
keep changing these else if things if you want  
193:09 - you know something like that know that this really 
makes sense but so you could chain as many of them  
193:22 - as you want but just keep in mind that it's going 
to start at the top work its way down and as soon  
193:26 - as it hits a condition that's true that's the 
branch it's going to take and it's not going to  
193:31 - execute all your other branches now I want to 
go too crazy with having a whole ton of elseis  
193:37 - because there's actually another stuff it's called 
a switch statement that is more suited if you have  
193:43 - a lot of different options but an if statement is 
good if you want to just test a couple of branches  
193:48 - and what else can I show you here so let's talk 
about the different types of comparisons that we  
193:56 - can do we can do as you've seen it greater than 
you've seen less than you can do greater than or  
194:02 - equal to you could do less than or equal to and 
you can test equality now notice that equality  
194:10 - is double equal sign okay so this is testing if X 
is equal to two we don't use a single equal sign  
194:19 - because remember from your basic Swift lessons 
a single equal sign is assignment if you write  
194:27 - this you are trying to assign the integer two to 
the constant X and this is an error because X is  
194:36 - a constant so we can't change it after anyways so 
if you want to compare to see if as X is equal to  
194:42 - two you would use a double equal sign and if you 
wanted to compare if you wanted to test that X is  
194:48 - not equal to two you would say exclamation equal 
and this is testing if X is not equal to two now  
194:58 - this stuff can get pretty crazy because let's 
say you had another constant here and we're not  
195:05 - gonna need to do this with our card game but I 
still want to show you just it's good to know  
195:10 - so if you wanted to test a condition with two 
different variables you can either say and or  
195:18 - or so edie is double ampersand like that so for 
me that would be shift and the seven I would get  
195:28 - the ampersand so your keyboard layout might be 
a little different so I can say you know if Y  
195:35 - is equal to five and X is greater than or equal 
to eleven then that would be true now when you  
195:44 - use an end operator like we have here both sides 
of this must be true only then will it come into  
195:53 - this branch so if we had something like y equals 
the six like that we ran this code then it would  
196:00 - jump down to here right because this is not true 
and that kind of like cancels the whole thing  
196:05 - the whole thing evaluates to false on the flip 
side let's say we had something like or which is  
196:12 - we're actually represented by these two double 
pipes for my keyboard that would be shift and  
196:18 - backslash I get this sort of symbol so for your 
keyboard it might be a little different but this  
196:23 - represents or and when you have an or operator 
either this value it's true or this evaluates to  
196:32 - true and that would be sufficient for it to go 
down this path here so as you can see if I run  
196:38 - this code right here we're going to get hello and 
that is because even though this is not true this  
196:46 - is true and that's enough because we're using 
or you know here's the crazy part and that's  
196:52 - that you can use brackets to chain these things 
together so you can do something like this you
196:58 - know so you can say like if X plus y is equal 
to 10 and you know either this one or either  
197:18 - this one is true then come down here so you can 
express some pretty complex logic depending on  
197:23 - where you place these brackets so let's try to run 
this code here and we get good afternoon but how  
197:30 - would we make this work so x and y have to equal 
to 10 y has to equal to 6 so if we just did that  
197:37 - and we change this to 4 that would actually 
bring us into hello so why does this evaluate  
197:44 - to this branch well because x plus y is equal 
to 10 right is it 6 plus 4 is 10 and because  
197:52 - we're using the end operator this side must also 
evaluate to true now what does this side say well  
198:00 - since it's using an or either this must be true 
or this must be true so X is not greater than 11  
198:08 - right it's four that fails but Y is equal to 6 
so that's true so essentially this side is true  
198:17 - and this side is true and so that's why we're 
going down this path here so now we're going  
198:24 - to implement an if statement inside of our Xcode 
project now let's look inside the view controller  
198:29 - that Swift inside the deal tapped we so far have 
been changing the image but we have all the data  
198:35 - we need to determine if the left side is the 
winner or the right side is the winner see we  
198:40 - have left number and right number right and based 
on what you've just learned on the playground we  
198:46 - can just compare these two numbers so we can say 
if the left number is greater than right number  
198:51 - then right then left side wins or player wins 
right else if right number let's actually keep  
199:05 - it consistent so the left number is less than 
right number then we have right side wins and  
199:14 - then we do have another scenario right we're 
left number equals right number so we can just  
199:20 - use an else and we can say tie now I'm not going 
to address this particular scenario because not  
199:30 - exactly sure what to do but if either left side 
wins over the right side wins we can increase  
199:36 - the score and then we can update the labels so 
if you remember all the way up here we actually  
199:42 - haven't declared any properties to keep score so 
why don't we go ahead and do that vark left score  
199:49 - is equal to zero and bar right score is equal to 
zero so they both start at zero you scroll down  
199:56 - here and we're going to say left score and we're 
going to use plus equals 1 essentially that takes  
200:06 - whatever number is currently inside left score 
and we're going to add 1 to it and we're gonna  
200:13 - then assign or rather update the label so we do 
have a reference to the label because we have  
200:22 - an iboutlet property called left score label 
you can see it's a type of UI label and if we  
200:29 - use dot notation we can access the properties 
and methods of that score label object in the  
200:35 - storyboard and it actually has a text property 
that expects a string so we're going to assign  
200:42 - a string to it the problem is that left score is 
an integer so if I try to put left score see it's  
200:52 - an int if I try to assign left score to update 
the text of the label we're gonna get an error  
200:58 - because it says it cannot assign a value type of 
int to a type of string because remember that text  
201:05 - properties expecting a string data so what we can 
do is we can actually create a new string object  
201:13 - like that and it just has a special way where you 
can pass in an integer and you can represent that  
201:24 - integer as a string so that's essentially what's 
happening here we are creating a new string object  
201:31 - and we're passing in this integer and it's going 
to essentially treat that integer as a string or  
201:41 - change or convert that data type now let's do 
the same thing with this side so we're gonna  
201:46 - say write the score is plus equal one increasing 
that score and then we're going to say write score  
201:54 - label dot text is equal to a new string object 
and we're gonna pass in right score all right so  
202:02 - let's run our project now and just take a look 
at what we've got we've got our card game here  
202:11 - and King is bigger than three so we have that 
increased score nine is bigger than seven so we  
202:17 - have two now yeah gets one on the scoreboard ace 
is bigger than queen so you know cool works now  
202:26 - don't forget to go back and write yourself some 
comments get into the habit of doing this so we've  
202:33 - got randomized some numbers update the image views 
compare random numbers and you know you can get as  
202:48 - granular as you want with this yeah now the last 
part I want to show you is about running this app  
202:57 - on your own phone so in order to do that you would 
just plug in your phone with a cable plug it into  
203:05 - your computer and if it's the first time you've 
ever done this you'll probably get a pop-up like  
203:10 - if you have Xcode open asking do you want to use 
this phone for development and you have to click  
203:14 - yes when you do that it's going to set up your 
phone for iOS development so that you can run  
203:20 - this project on it and also if it's the first time 
you've ever plugged in your phone or your iPad  
203:26 - to your computer it's gonna ask it's gonna ask on 
your phone do you want to trust this computer and  
203:32 - you have to click yes or trust whatever shows up 
your phone so those are the two things that have  
203:38 - to happen and then once you do have your phone 
connected and it's got the proper permissions  
203:44 - and everything if you pull this drop down down 
you're gonna see here I don't have a device  
203:52 - connected right now but you're going to see your 
device here it's gonna be like your name whatever  
203:57 - you've named your device essentially you're gonna 
see it here you're gonna want to choose that okay  
204:03 - so this pops up for me because I don't have a 
device connected but you're going to want to  
204:07 - choose that and then you're going to want to just 
click run and essentially instead of launching  
204:12 - the simulator it's going to launch this app on 
your phone and then after that you can stop your  
204:18 - project disconnect your phone and you'll still 
have that app on your phone now the thing is when  
204:24 - you do it this way Apple intends for you to do it 
only for testing purposes so I think it gives you  
204:30 - about seven days before you before I won't launch 
anymore and you're gonna have to connect your  
204:34 - phone again and kind of like run your project on 
your phone too to give you another seven days if  
204:40 - you do have an Apple Developer account though and 
this is like a paid account at Apple charges you  
204:46 - a fee every year for you to publish apps into the 
App Store then you'll be able to keep your app on  
204:53 - your phone for a lot longer you'll also be able to 
send that out for other people to other people's  
204:59 - phones for testing purposes and also the publish 
apps into the App Store not bad right look at how  
205:07 - far you've come seriously give yourself a pat 
on the back you've just gone through four hours  
205:11 - of iOS training not including the exercises and 
you've built their first app that you can show  
205:16 - people to celebrate this huge milestone I want to 
give you a certificate of completion just visit  
205:22 - the link below or check out the description and 
get your certificate and get your name up there  
205:27 - on the wall of success stories now in terms of 
what to learn next I have several options for you  
205:32 - number one you can visit youtube.com slash code 
with Chris to see all of the other free content  
205:37 - and tutorial series that I have that you can watch 
number two if you have an app idea make sure you  
205:43 - go and get my free seven-day app action plan which 
is going to help you put two an actionable list of  
205:49 - learning objectives to build your app you can 
get that by going to code with Chris comm slash  
205:54 - action plan and number three if you have some 
budget to spend you can check out my paid courses  
206:00 - which actually continue from the ten lessons that 
you've just watched and continue building your  
206:05 - skills and building apps and to check those out 
visit code with Chris comm / beginner course and  
206:11 - lastly I just really want to thank you for 
learning with me you know I never imagined  
206:15 - myself teaching iOS but I'm having so much fun 
every day and I feel so fulfilled hearing your  
206:21 - success stories so if this training has helped 
you out in any way please reach out and message  
206:26 - me and let me know if it weren't for people like 
you I wouldn't be here today so thank you again