00:00 - hi my name is Chris and I'll teach you
00:01 - how to build an IOS app that displays
00:03 - YouTube videos of you're choosing in
00:05 - this example I've configured this app to
00:08 - fetch videos from my how to build an app
00:10 - in 8 Days playlist and display all the
00:12 - videos from there the great thing is
00:14 - that this app actually connects to the
00:16 - YouTube data API so if you remove or add
00:19 - videos to the playlist on YouTube it'll
00:21 - automatically get reflected in the app
00:23 - without you having to revise any sort of
00:26 - code oh and you'll also be able to tap
00:28 - into the videos and watch the videos in
00:30 - the app or to read the video description
00:33 - okay so let's take a look now at what
00:34 - skills you'll gain after completing this
00:36 - app all right so by completing this app
00:39 - you're going to learn how to work with
00:40 - the YouTube data API you're going to
00:43 - learn how to send and receive Network
00:44 - requests to and from your app and in
00:47 - doing so you're going to learn a little
00:48 - bit about iOS concurrency especially
00:51 - using async weight and through the
00:54 - process of doing this we're going to
00:55 - need to be able to debug and
00:57 - troubleshoot our network issues and
00:59 - we're going to learn how to do that
01:01 - using proxy man a free thirdparty tool
01:04 - when we get the data back from the
01:05 - YouTube API we're going to need to turn
01:07 - that Json and parse it into usable
01:11 - structures and instances inside our app
01:13 - so you're going to learn about Json
01:14 - parsing and how to do that and we're
01:17 - also going to need to store our API key
01:19 - securely in our xcode project so that it
01:22 - doesn't accidentally get leaked out now
01:24 - most of this networking stuff we covered
01:26 - in the iOS networking course so although
01:30 - we are going to go over that again in
01:32 - this video series it won't be as
01:34 - in-depth so if you really want to learn
01:37 - that material well and you want to dive
01:39 - a little deeper check out the networking
01:42 - course all right now on the IOS app side
01:45 - we are going to use YouTube player kit
01:47 - which is a thirdparty library to be
01:49 - playing the YouTube videos in the app
01:52 - and we're going to import that into our
01:54 - xcode project using Swift package
01:56 - manager now on the UI side you're going
01:59 - to learn how to use Swift UI lists
02:01 - geometry reader async image progress
02:04 - view scroll views just to name a few but
02:06 - there's a lot more that goes into
02:07 - building the user interface and you're
02:10 - going to get extra practice just working
02:12 - with
02:13 - uis Okay so let's do a quick little
02:15 - overview of how this all works in case
02:17 - you're new to working with apis and if
02:19 - you have used apis before then this will
02:22 - just be a little review for you now an
02:24 - API is an interface that you can connect
02:26 - to to send and receive data to put it in
02:29 - simply terms you can think of an API as
02:32 - a collection of URLs that your app can
02:35 - access to retrieve data or to send data
02:37 - now there are many apis out there some
02:39 - are free and some are paid but most of
02:41 - the large platforms like Facebook X
02:43 - Spotify Google they all have apis for
02:46 - you to work with that platform or to
02:48 - retrieve data from it and there are some
02:50 - apis that are just data focused such as
02:53 - retrieving uh recipes or stock prices or
02:57 - weather data things like that so being
03:00 - able to use apis in your app is very
03:02 - very
03:04 - powerful so what actually happens and
03:06 - how do you use an API from your app well
03:09 - from your IOS app you send a network
03:11 - request to an API endpoint which
03:14 - remember is just a URL in your network
03:17 - request you specify what data you want
03:19 - to get back and in some apis you also
03:21 - have to identify yourself in the request
03:24 - this identification part is called
03:27 - authentication the API receives your
03:29 - request and it will authenticate you and
03:32 - also make sure that your request is
03:33 - valid note that not all apis require
03:37 - authentication but most do now if your
03:40 - authentication checks out and your
03:42 - request is valid then the API will go
03:44 - ahead and gather the data and send a
03:46 - response to your app the response
03:49 - contains the data that you requested and
03:51 - it's typically in a format called Json
03:55 - when your app receives the response it
03:57 - can read the Json formatted data and and
03:59 - then convert it into Data that can be
04:02 - displayed on the screen for the user to
04:04 - see this process of converting the Json
04:07 - data into usable data in your app this
04:09 - is called Json parsing all right so this
04:12 - is the process that you're going to
04:13 - learn how to do with the YouTube API now
04:16 - let's take a look at the YouTube
04:18 - API I hope you're enjoying the lesson so
04:21 - far now just in case you want to launch
04:23 - your own app I want to tell you about
04:24 - cdb C+ this step-by-step program will
04:27 - help you launch your own app even if you
04:29 - don't have any experience and it takes
04:31 - about 4 months if this sounds like
04:33 - something you're interested in I have a
04:35 - special offer for you I'll leave the
04:37 - link in the description below this video
04:39 - and hopefully I'll see you there if not
04:41 - no worries I really appreciate that
04:43 - you're here watching this lesson and
04:44 - learning with us so thank you for that
04:47 - anyways now back to the lesson all right
04:49 - so here we are the YouTube data API you
04:52 - can visit this page at
04:56 - developers.google.com youout I want you
04:58 - to go under this section that says add
05:00 - YouTube data and click
05:02 - references and here you can see all of
05:04 - the endpoints that are available in this
05:07 - API for our app to send a request to now
05:10 - remember these endpoints they're just
05:13 - URLs so let's take for instance search
05:17 - so let's look at overview first this
05:20 - describes to you what this endpoint does
05:24 - how you interact with it and it lists
05:27 - different methods different ways you can
05:29 - use this end point so let's take a look
05:32 - at
05:33 - list okay when you click into that you
05:36 - can see that changed uh to this section
05:39 - here and the common use cases okay so
05:43 - this is essentially searching YouTube
05:45 - for something you can search by here are
05:48 - some use cases by keyword which is
05:50 - probably the typical example right
05:52 - location Live Events or your videos for
05:54 - instance if you scroll a little lower
05:57 - this is the important part here this is
05:59 - telling you the exact URL that you need
06:02 - to hit so this is the
06:04 - endpoint and this is the request type so
06:08 - when you send a network request it can
06:10 - be one of a couple a few different types
06:14 - and get is the one that's typically used
06:17 - for when you want to retrieve data from
06:19 - the
06:20 - API okay so not only do you need to send
06:23 - a request to this URL but you need to
06:26 - specify parameters of your request
06:29 - remember remember if you're searching
06:31 - for something on YouTube what are you
06:33 - searching for you can't just say search
06:35 - right so here these parameters they
06:38 - describe what you can specify along with
06:41 - your request in order to tell the API
06:44 - what you want to retrieve or what you're
06:46 - searching for in this case so let's take
06:49 - a look
06:52 - here uh one thing I should mention here
06:56 - is in the parameter section there's
06:58 - always they're not not always but there
07:01 - may be required parameters so remember
07:04 - in that overview I said that the API
07:06 - checks a request to see if it's valid
07:09 - well if it is a required parameter then
07:11 - you have to specify this information the
07:14 - optional ones you can leave out but the
07:16 - required ones you have to include as
07:18 - part of your request so what is this
07:20 - required parameter okay so this part
07:23 - it's called part this parameter
07:25 - specifies a comma separated list of one
07:27 - or more search Resource Property
07:30 - that the API response will include set
07:33 - the parameter value to snip it okay
07:37 - so it's a little hard to determine what
07:40 - these things mean but what I'll
07:43 - typically say is to try it out you know
07:46 - the next step is to try this API let's
07:48 - set this parameter to snip it as it says
07:51 - and then let's see what gets returned
07:53 - and if it's not what we're looking for
07:56 - we can probably look at what else we can
07:59 - spe specify for this parameter now what
08:02 - I'm looking for is if we want to search
08:04 - for something specific like a
08:07 - keyword what where would we do that or
08:09 - what would we do so this is searching by
08:11 - location this is searching by event this
08:14 - is searching for uh types of Channel a
08:17 - specific Channel you can look for um how
08:20 - many results you
08:22 - want uh this is the one the CU parameter
08:25 - specifies the query term to search for
08:28 - so if you wanted to search for uh videos
08:31 - regarding let's say uh gardening right
08:34 - you would put the gardening keyword in
08:37 - this parameter and I'll show you a
08:38 - little later how you assign that data to
08:41 - these parameters but we're not going to
08:43 - dive that deep just wanted to give you
08:45 - an overview of the YouTube API and all
08:48 - the endpoints that are available and
08:51 - also how these endpoints work right so
08:53 - you learned about the URL this is the
08:56 - URL that you're going to send the
08:58 - request to this this is your request
09:00 - type and there are required parameters
09:03 - that you have to specify and then there
09:04 - are optional ones that would give more
09:07 - context for your request now the Endo
09:10 - that we are going to use in this video
09:12 - series um remember so this app it can
09:15 - display any YouTube video uh and it can
09:19 - play it in the app so for my use case I
09:24 - want to display a list of videos from a
09:27 - specific playlist because I have a
09:29 - YouTube channel and uh I have some
09:32 - playlists that I want to display the
09:34 - videos for so the Endo that I'm going to
09:37 - use is playlists right here and I'm
09:40 - going to
09:42 - use um actually I I believe it was I
09:46 - can't remember if it was playlists or
09:48 - videos at this point okay so let's take
09:51 - a look at this endpoint so here is the
09:53 - playlist endpoint get and if we take a
09:58 - look at the use case let's see it
10:00 - retrieves all playlists or yeah all
10:03 - playlists for a channel that's not what
10:05 - I
10:06 - want um this one is let's see the
10:11 - request that I use retrieves a specific
10:15 - playlist and I believe it was this
10:16 - endpoint because there is let's see the
10:19 - ID
10:20 - specifies being
10:23 - retrieved yeah this is what I used okay
10:27 - so instead of retrieving all all
10:29 - playlists from the channel I wanted a
10:32 - specific one so I had to include this
10:36 - parameter here which was called ID and
10:38 - this is the ID of the specific playlist
10:41 - that I want and then within that
10:43 - playlist I also got the
10:46 - videos after you complete this video
10:48 - series and you follow along and you
10:49 - learn how to use this YouTube data API
10:52 - feel free to change the way that the app
10:55 - works right you can Implement search in
10:59 - your app if you'd want just put a text
11:01 - field right when the user types
11:03 - something in call this um call this uh
11:08 - endpoint pass in the keyword that the
11:10 - user searched for and return a list of
11:13 - video results and the user can play it
11:15 - right in the the app right the what I'm
11:18 - going to show you in the video series is
11:20 - using this endpoint showing a specific
11:23 - list of videos um or you can create your
11:27 - own playlist or maybe create uh specific
11:29 - videos that you want to show and you
11:32 - might use another endpoint so feel free
11:34 - to customize the app but I would
11:36 - recommend especially if you're new to
11:38 - working with apis and networking to
11:40 - follow along in this video series wait
11:42 - till the end get comfortable after
11:44 - you've achieved the result and then
11:46 - customize it all right now let's take a
11:48 - look at authentication because this
11:50 - YouTube data API needs to identify who
11:53 - you are before it's going to give up its
11:55 - data now before I show you the YouTube
11:57 - authentication Part I I want to point
11:59 - out this line right here these endpoints
12:02 - they all have a quota impact and it
12:03 - tells you how much it costs to send a
12:05 - request and to get a response from this
12:07 - endpoint and that has everything to do
12:09 - with the authentication stuff so now
12:12 - let's move on to there now we're going
12:14 - to click on guides typically with API
12:17 - documentation all the authentication
12:19 - stuff is all the way at the beginning so
12:22 - here it tells you how to do that let's
12:23 - go into overview uh actually let's go
12:27 - into get off CR itial here and you'll
12:31 - see that there are two different types
12:33 - that you can two different techniques
12:35 - that you can go about this so one is
12:37 - ooth and one is API Keys now most apis
12:41 - will use one or the other sometimes both
12:45 - but uh if I were to throw out a number
12:49 - out there I would say 90% of apis you
12:51 - can use API keys let me explain briefly
12:55 - the difference between the two so API
12:57 - key Authentication is where you sign up
13:00 - for an account and they give you a long
13:02 - string of letters and numbers that is
13:04 - your key and when you're making Network
13:07 - requests to the API you're going to
13:09 - specify that key with your request and
13:11 - that way they can associate that request
13:14 - with your
13:15 - account and then they can also rate
13:19 - limit you they can see how much you're
13:21 - using the API if you're abusive if you
13:25 - are yeah mostly rate limiting giving you
13:29 - uh quota and things like that
13:33 - because you can imagine if it's
13:35 - unlimited and as fast as possible and
13:38 - everyone is hitting their API it could
13:41 - take it down or the server load could be
13:43 - too high so this allows them to control
13:46 - access to their API and if they find you
13:49 - to be abusive they could ban your key
13:51 - and you won't be able to make requests
13:53 - anymore so that that's how API key
13:57 - authentication works now o off is a
13:59 - little bit different this is where you
14:02 - typically see um a username and password
14:05 - box in your app and the user has to sign
14:07 - into their Google account and by doing
14:09 - that they are obtaining a token from the
14:14 - API and then you attach that token to
14:18 - the requests that you send so there's a
14:21 - distinction because now they're
14:23 - associating those requests with the
14:26 - user's Google account so no longer are
14:30 - you being rate limited it's not counting
14:32 - towards your quota it's counting towards
14:34 - their quota and also what you can do is
14:37 - different because now that Google can
14:40 - identify their Google
14:43 - account that user can perform things
14:46 - like liking a video or subscribing to a
14:49 - video you can call those types of
14:50 - endpoints right or perhaps following a
14:53 - user whereas API key access right all of
14:58 - your users they're using the same API
15:01 - key the one that's that you signed up
15:04 - for that's associated to your account so
15:07 - that's why with API Keys you can't
15:09 - really do things like liking a video or
15:11 - subscribing to a channel because the API
15:14 - has no idea who the user is they all
15:17 - they can see is that they can associate
15:19 - this API key to your account that you
15:22 - created now ooth is a little bit more
15:25 - involved so we're not going to use that
15:26 - in this video series we're going to go
15:29 - through the API key route and learning
15:31 - how to do that is going to cover the
15:34 - vast majority of apis that you'll
15:36 - encounter all right so now let's go on
15:38 - to the next step which is actually
15:40 - creating an account and getting our API
15:42 - key so all you have to do is follow this
15:45 - credentials page link and I'm going to
15:46 - open it in a new tab it's going to ask
15:49 - you to sign into to your Google account
15:51 - because I'm already signed in it's
15:53 - brought me into this credentials page of
15:55 - my project you probably won't have a
15:58 - project either so let me try to go back
16:00 - out onto the the
16:02 - dashboard and you might have to go
16:04 - through some onboarding questions or
16:05 - something like that but eventually
16:08 - you'll arrive at a page that looks like
16:10 - something like this because right here
16:12 - it's saying I have a project but you
16:14 - won't have a project so it might prompt
16:16 - you to create a new project you can go
16:17 - ahead and do that or you can click on
16:19 - this drop down up here um and then we
16:22 - can choose new project and we create a
16:24 - project together oh it looks like I
16:27 - cannot create a new project but this is
16:29 - what you would do so you would type in a
16:31 - project name you would uh I don't think
16:36 - this one matters too much so you can
16:37 - choose whatever and just hit create and
16:39 - then once you've created a project right
16:42 - go ahead and navigate to that project so
16:44 - for me that' be this one right here and
16:47 - you're going to click on credentials or
16:49 - sorry API and
16:51 - services and then you're going to go
16:53 - down to
16:54 - credentials and then once you get here
16:57 - this is where you can create the API key
16:59 - so you're going to say create
17:01 - credentials create API key it's going to
17:04 - generate one for
17:06 - you and then you're going to have to
17:09 - restrict it to the YouTube data API that
17:11 - would be good Let me refresh the screen
17:14 - did it do it for me there it is okay so
17:16 - this is the new API key that was just
17:18 - created I'm going to click into
17:22 - it and then I am going to set uh the
17:26 - restrict right here I'm going to
17:28 - restrict it to a specific API and the
17:30 - reason this is a good idea is just so
17:32 - that if the API key gets into the wrong
17:34 - hands I mean it limits what they can do
17:38 - to just using the YouTube data API and
17:41 - it's I think it's a good um it's a good
17:44 - practice to not just give free reign to
17:49 - everything restricting things and um
17:52 - removing options is always good
17:54 - especially if you don't need those
17:55 - options because it limits what can um
17:59 - it limits any unexpected Behavior same
18:02 - thing goes for programming
18:04 - right and uh I wouldn't set restrictions
18:07 - on that you I mean you could do this but
18:11 - it's going to get it might interfere
18:14 - with your testing especially if this is
18:15 - your first time so let's just choose
18:16 - none restrict the key to the YouTube
18:19 - data API there's your API key right
18:21 - there you shouldn't be showing this
18:22 - anyone uh I won't be using this key so
18:26 - don't try to copy it and use this key
18:28 - I'll probably delete this after but go
18:29 - ahead and save it and there you go you
18:32 - have a valid key that you can use and
18:35 - you're going to be using this key inside
18:37 - your iOS project all right now we're
18:40 - set all right now we're ready to start
18:43 - using the YouTube data API in the next
18:45 - lesson we're going to build a test
18:46 - project to connect to the API and
18:48 - retrieve data from it if you like this
18:50 - video please give it a thumbs up and
18:52 - also comment down below what you're most
18:54 - excited about learning in this app
18:56 - series thanks for watching and I'll see
18:58 - you in the next slide lesson in the last
19:00 - lesson we went through how to connect to
19:02 - apis and we reviewed the YouTube data
19:04 - API we also created our API key if you
19:08 - missed all of that check out the
19:09 - playlist right over here now we're ready
19:11 - to start retrieving data from the API
19:13 - let's Dive Right
19:15 - In All right so let's test out getting
19:17 - data from this API now before we get
19:20 - into xcode to try this out there's an
19:22 - even easier way that we can test out
19:24 - this API right from within the
19:26 - documentation they have this thing
19:27 - called an API Explorer and you can test
19:30 - out the endpoints right from this panel
19:33 - now all you have to do is make sure that
19:35 - you're logged in to your Google account
19:36 - in the upper right corner and this is
19:39 - the same account that you created your
19:41 - API key uh with in the lesson one
19:46 - remember how we had to log in to our
19:49 - Google account and come here create a
19:51 - project and then create an API key
19:54 - what's going to happen as long as you're
19:55 - logged into the same Google account is
19:57 - when you use the API Explorer it's going
20:00 - to grab that API key from there and use
20:03 - that so let's test out the endpoint now
20:06 - we're actually going to use this one
20:07 - playlist items endpoint because in the
20:10 - previous lesson I talked about using the
20:12 - playlist endpoint but this one actually
20:15 - just gives you information about the
20:16 - playlist itself so playlist items this
20:19 - is the one we want to use so as you can
20:22 - see this one this is the URL that we
20:25 - have to send the request to this is the
20:27 - request type
20:29 - and this is the only required parameter
20:32 - and you can specify different levels of
20:35 - detail that you want to retrieve now the
20:38 - reason they do this is because for your
20:41 - purposes you might not need all the
20:44 - information and in that case you can
20:46 - specify uh perhaps a lower level of
20:49 - detail and that would save bandwidth
20:52 - right why retrieve more information than
20:54 - you need you're just it's going to take
20:55 - longer it's going to take more bandwidth
20:57 - and so on and so forth so I've figured
21:00 - out that for this app I need the
21:03 - thumbnail the video ID to display the
21:05 - video obviously thumbnail to show the
21:07 - image I need the title in the
21:10 - description and that's about it and
21:12 - snippet is the level of detail that I
21:15 - need it contains all of what I just
21:18 - mentioned now the other parameter I have
21:20 - to specify is the playlist ID because I
21:24 - want to retrieve all the videos from a
21:26 - specific playlist now when when I first
21:29 - used this endpoint I made the mistake of
21:32 - putting the playlist ID into this
21:34 - parameter but it didn't return anything
21:36 - and I realized that oh I'm supposed to
21:38 - put it into this one so they'll make the
21:39 - same mistake now let me show you how you
21:41 - can get the ID of the playlist that you
21:44 - want so I've got a playlist right here
21:46 - that I want to use and keep in mind you
21:48 - can use any playlist that you want so
21:51 - everything after this equal sign right
21:57 - here and before any
22:01 - Ampersand that is the playlist ID so
22:03 - your url might have something like this
22:08 - let's say NT equals one uh two and
22:12 - whatever so between
22:16 - the equal sign and the and
22:21 - sign uh after list equals that is your
22:24 - playlist ID don't worry if you you'll
22:27 - find out really quickly if we're if it
22:30 - is the playlist ID or not because if you
22:32 - don't get any data back from this API
22:34 - call then you'll know that that actually
22:36 - wasn't the playlist
22:37 - ID okay so that's my playlist ID I'm
22:39 - going to copy that and then in my API
22:42 - Explorer let me full screen
22:45 - this and maybe I'll just make the text a
22:47 - little bigger so it's easier to see
22:50 - under playlist ID I'm going to paste
22:53 - that okay and I have to specify a part
22:56 - here remember this could be content
22:58 - detail ID status or snippet so snippet
23:01 - is what I
23:02 - need put it there and you can also see
23:06 - how it changes the URL that you're going
23:09 - to have to uh send a network request to
23:12 - if you take a look this might be
23:15 - interesting for you this is the end
23:17 - point right that we're sending to um hit
23:21 - the
23:21 - API sending a request to and then the
23:26 - data that I specified here in the
23:27 - parameters is it's all here look part
23:30 - equals snippet playlist ID equals that
23:33 - ID and then key equals your API key now
23:38 - there's no text box to put in my API key
23:40 - here so this is pulling
23:44 - from your key that you created here
23:46 - that's why you have to make sure that
23:47 - you're logged in to the same account and
23:50 - uh because it's going to go grab it from
23:52 - there okay I'm going to uncheck Google
23:54 - oo I'm going to hit execute if
23:57 - everything goes well you should get a
23:59 - 200 response which means that it was
24:01 - successful and then you get all this
24:03 - data back now this is the Json formatted
24:05 - data that was telling you about that
24:07 - comes back from the response from the
24:10 - YouTube
24:11 - API and it's up to us to turn this data
24:14 - remember that process is called Json
24:16 - parsing right to turn this Json data
24:19 - into usable data within our app you're
24:21 - going to see how to do that in few
24:24 - lessons in the series for sure but for
24:27 - now I just want to take a look very
24:29 - quickly at the data that gets returned
24:30 - and make sure that I have the
24:32 - information that I need so here I can
24:35 - see that I have the title of the lesson
24:37 - the description of the lesson the
24:39 - thumbnails um image
24:42 - URLs I have the video ID there perfect
24:46 - and then this is for lesson two and you
24:48 - know so on and so forth so I have
24:50 - everything now if you didn't get this
24:52 - response maybe you got an error or
24:54 - something like that I would double check
24:56 - that part equals a snippet spelled
24:59 - correctly I would make sure your
25:01 - playlist IDE is correct maybe perhaps
25:04 - you grabbed the wrong segment of the URL
25:07 - there um and then I would also make sure
25:11 - that I'm logged into the right Google
25:13 - account that has access to the API key
25:17 - and then try it again hit execute now if
25:19 - this doesn't work for some reason you
25:21 - can't get it working don't worry
25:22 - remember this was just a quick test the
25:25 - the real test is to be able to do this
25:27 - inside inside xcode right inside an IOS
25:30 - app so that's what we're going to do
25:32 - next don't worry if you didn't get this
25:34 - part this was a quick test uh of the API
25:38 - we are going to now start our xcode
25:40 - project we're going to start a test
25:42 - project okay so this is not going to be
25:43 - our real app what I like to do when I'm
25:46 - trying new things is to just open up a
25:49 - new xcode project try something out make
25:51 - sure I can get it working before I
25:53 - integrate it into my main project right
25:55 - so that's what we're going to do here
25:56 - we're going to create a test code
25:58 - project and we're going to try this out
26:00 - all right so let's do it I hope you're
26:02 - enjoying the lesson so far now just in
26:04 - case you want to launch your own app I
26:06 - want to tell you about cc+ this
26:08 - step-by-step program will help you
26:10 - launch your own app even if you don't
26:11 - have any experience and it takes about 4
26:14 - months if this sounds like something
26:15 - you're interested in I have a special
26:17 - offer for you I'll leave the link in the
26:20 - description below this video and
26:22 - hopefully I'll see you there if not no
26:24 - worries I really appreciate that you're
26:26 - here watching this lesson and learning
26:27 - with us so thank you for that anyways
26:30 - now back to the lesson all right so
26:31 - let's create our xcode project so I am
26:33 - going
26:34 - to do this and launch a new xcode
26:38 - project okay under iOS let's choose
26:42 - app uh let's go next okay I'm going to
26:45 - call it test YT
26:49 - API this is not our official app it's
26:51 - just going to be a test interface is
26:54 - Swift UI language is Swift storage is
26:56 - none all of this is unchecked let's
26:58 - click next I don't need to create a get
27:01 - repository I'm just going to create this
27:03 - in my desktop because it'll be a
27:04 - throwaway
27:06 - project okay let us do this
27:11 - now just make it a little bigger so we
27:13 - can see and
27:15 - then what we're going to do is send that
27:19 - API call right when this launches from
27:23 - here so I want
27:25 - to add a task here task and open up a
27:30 - pair of curly brackets and in here we're
27:33 - going to
27:34 - make the network call and print the
27:39 - results remember I'm not going to do
27:41 - things the best way I just want to make
27:43 - sure that I can connect to the API from
27:47 - xcode um receive the right data back
27:50 - right we're we're testing out the
27:53 - API and this is not necessarily where we
27:56 - would do things as well in our real
27:59 - project again this is a test I'll
28:01 - explain to you what the task is a little
28:03 - later I'll connect all the dots for you
28:06 - but for now we're going to do it in this
28:08 - little task block so I want you to type
28:10 - that out and then let me type out some
28:15 - uh code statements and walk you through
28:17 - not code statements but some comments
28:20 - and walk you through the steps that
28:21 - we're going to take all right so first
28:23 - we're going
28:25 - to
28:26 - um Define the the endpoint URL with
28:30 - parameters all right so that's the URL
28:33 - that we're going to send the request to
28:35 - we're going to create a URL instance we
28:40 - are going to create a uh URL
28:47 - request
28:49 - instance that's the thing that we're
28:51 - actually going to send and then we are
28:52 - going to uh send the
28:55 - request with URL
28:58 - session that's a mechanism for us to do
29:01 - networking
29:02 - with and then we are going to um print
29:08 - out the
29:09 - response okay we're also going to H have
29:13 - to handle handle
29:17 - errors okay so so let's try this out now
29:20 - first let's define the endpoint URL with
29:23 - parameters so if you take a look back at
29:27 - the API
29:29 - Explorer here you'll see that
29:32 - this right
29:34 - here contains everything we need except
29:37 - we have to insert our API key right
29:40 - there so this is essentially the URL
29:42 - that we have to hit it's already written
29:44 - out for us okay so that's what I'm going
29:47 - to take now if one thing I want to point
29:50 - out which I'm not exactly sure why if
29:53 - you take a look at this endpoint uh
29:55 - domain it says youtube. googleapis.com
30:00 - but if you take a look at this it's
30:02 - googleapis.com
30:03 - youout I've used both they both
30:06 - work I mean this would probably be a
30:09 - little safer to use because this is in
30:10 - the official documentation whereas this
30:13 - is in this API Explorer maybe it's just
30:15 - not
30:16 - updated so actually let's just use this
30:19 - and then we can build it together we can
30:21 - build up that URL just so you also know
30:24 - um you have an idea of how it gets built
30:26 - up so I'm going to declare a
30:29 - constant I'm going call it URL string
30:31 - now keep in mind this is not how we are
30:34 - going to do it in our real project I'm
30:36 - just going
30:37 - to write out the whole string
30:40 - here including the API key um and all
30:44 - the
30:45 - parameters so to include parameters you
30:48 - put a question mark and then from that
30:51 - point on it's parameters and then the
30:55 - format to specify parameters is going to
30:58 - to be parameter name equals parameter
31:00 - value okay so what is the first one we
31:04 - should specify how about part since part
31:07 - is required anyways so we're going to
31:09 - type part equals and remember you can
31:13 - specify one or more of these and it
31:16 - tells you to specify more you would put
31:18 - a comma in between them but we only need
31:20 - snippet so I'm just going to put
31:23 - snippet now to specify a second
31:26 - parameter you put Ampersand and then the
31:30 - same parameter name equals parameter
31:33 - value format okay so what's the second
31:36 - parameter that we want to specify that's
31:37 - playlist ID you have to follow it uh
31:40 - based off the capitals as well so
31:42 - lowercase p playlist followed by uh big
31:46 - I ID now equals what is the playlist ID
31:50 - and pull this screen up again and I'm
31:52 - going to grab my ID from
31:54 - here oh now this actually makes sense if
31:57 - you can see the URL you can see playlist
32:01 - and then there's a question mark right
32:03 - which means parameters from now on list
32:06 - is the parameter name equals and the
32:09 - parameter
32:10 - value and then the end of the parameter
32:12 - value is Amper sand and then second
32:15 - parameter and so on and so forth that's
32:16 - why I say grab everything after the
32:19 - equal sign but before the Amper sand
32:23 - because that is just the connector for
32:26 - the next parameter all right so that's
32:28 - my playlist
32:29 - ID so let's put it right there I also
32:33 - need one more parameter let's put the
32:35 - ampers sign and this is key equals my
32:39 - API key now I keep saying this because I
32:42 - don't want someone to watch this and say
32:44 - Hey you know you shouldn't just put your
32:46 - API key there I know again this is a
32:49 - test so this is how we're going to do it
32:51 - right now when we work on the real
32:53 - project we will secure the key so let's
32:57 - go back and into our key here I'm going
32:59 - to just show my key and this is our test
33:04 - key right we're going to put it right
33:06 - there so that is the URL that we're
33:08 - going to send our request to and uh this
33:12 - URL contains all of the request
33:14 - parameters and the API key has
33:16 - everything we need so here let's create
33:18 - the URL instance let URL equals
33:22 - URL and then we are going to use this
33:25 - one here where you can just pass in the
33:26 - URL string
33:28 - but keep in mind that this creation of
33:31 - this URL instance it may return like it
33:35 - may not successfully be able to create
33:38 - this so we have to check if you are
33:41 - familiar at all with swift if you Tak in
33:44 - some courses before you'll know what
33:46 - optionals are and creating this returns
33:49 - an optional URL instance which means it
33:52 - may not be successful so we have to we
33:55 - have to check for that first so one way
33:57 - we can do that is we can say if let URL
34:00 - equals
34:01 - URL right and what this does is it
34:05 - checks if that is not nil meaning that
34:08 - it was able to successfully create it
34:11 - then assign it to this constant and
34:14 - then we'll move that stuff in there and
34:17 - then we can use it but if it is nil it's
34:22 - just going to skip and come down here
34:23 - and it's not going to run any of this
34:25 - code if it's nil that means it wasn't
34:28 - able to successfully create the URL
34:30 - string and we can't go on
34:33 - anyways okay so now let's create the
34:36 - request let request equals URL request
34:40 - and we're going to pass
34:42 - in this URL instance that we created
34:46 - this one right so this is what we
34:48 - created this checks that that isn't nil
34:52 - and then if it's not nil if it's not
34:55 - empty it assigns it to this and then we
34:59 - are passing that into the creation of
35:02 - our request right now that we have our
35:06 - request in this constant we are going to
35:09 - send the request with URL session okay
35:13 - this is URL session is what we use for
35:15 - networking so URL session shared there's
35:19 - a shared uh session object that we can
35:23 - we can use we don't have to create our
35:25 - own and there is a method called called
35:28 - data for right so this is going to fetch
35:31 - the data for a given request look it all
35:35 - connects we can pass in this request now
35:37 - into this method but take a look there
35:40 - are two keywords there is async and
35:42 - there's throws those are two different
35:45 - things that we have to U deal with and
35:47 - we have to observe so let's talk about
35:50 - throws first this keyword indicates that
35:54 - running this method you know or
35:56 - executing this task
35:58 - May potentially create an error it's
36:01 - going to throw an error that's where
36:03 - that word comes from and you have to
36:06 - handle the error because you want to
36:09 - respond to it right if something bad
36:11 - happens you want to take note of what
36:14 - happened and then if it's something that
36:15 - you can recover from recover from it if
36:18 - it's something you cannot recover from
36:20 - then maybe you display a message to the
36:22 - user and say sorry something bad
36:23 - happened or like this happened we cannot
36:26 - continue please try again type of thing
36:29 - uh or you can choose not to handle the
36:30 - error and just ignore it that's
36:32 - perfectly reasonable for some
36:34 - errors okay so that is what throws mean
36:39 - and I'll show you in a second how we can
36:40 - handle that now async is another keyword
36:43 - that indicates that this method is
36:47 - asynchronous now we have to take a
36:49 - little moment if you haven't done any
36:51 - networking before let me just quickly
36:54 - describe it to you with this scenario
36:57 - okay
36:58 - so asynchronous is something like
37:02 - this let's say
37:05 - that you are waiting for a package at
37:08 - home it's a very very important package
37:11 - they're not going to leave it at your
37:13 - door let's say it's a new Macbook you
37:15 - bought a new Macbook you're waiting for
37:17 - it to come and so you're waiting at home
37:20 - it's going to be sometime today but you
37:22 - don't know exactly when it's going to
37:24 - get delivered but you really need to go
37:27 - buy buy some milk right or maybe buy
37:30 - lunch let's say you have to go buy lunch
37:32 - and you have no food at home you're
37:34 - starving so what do you do you can you
37:37 - can leave and go buy lunch yourself but
37:40 - there's a chance that that MacBook may
37:42 - get delivered and you're not home you're
37:44 - going to miss it and that would be bad
37:47 - well what do you do well turns out you
37:49 - have someone at home could be a mom
37:51 - could be a dad could be a brother could
37:52 - be a sister could be your spouse you ask
37:55 - them hey can you go pick up lunch
37:57 - because I need to stay home and wait for
37:59 - this
38:00 - MacBook right so you send that person to
38:03 - go bring lunch and that person goes and
38:07 - gets lunch while you can stay home and
38:08 - wait for the package that is exactly
38:11 - what's happening here so asynchronous
38:13 - means
38:15 - that just like you're sending someone to
38:17 - go pick up lunch you are sending a
38:20 - background task or background um helper
38:24 - in in computer terms they call it a
38:26 - background thread
38:28 - you're sending that to go perform this
38:31 - network operation go fetch that data
38:34 - from the YouTube API while I remain here
38:39 - responding to user interaction and just
38:42 - like keeping the lights running just you
38:44 - know keeping everything operational and
38:46 - when you get the response from the
38:47 - YouTube API then come back to me and let
38:50 - me know what that data is and I'll deal
38:52 - with it now why is this
38:54 - important just like how you had to stay
38:56 - home and wait for that
38:58 - MacBook if we get the main
39:01 - thread to go and fetch the data and send
39:05 - off the request and wait for the data to
39:06 - come back then there will be no one to
39:09 - keep the lights running and things
39:11 - operational it won't be your app won't
39:14 - be able to respond to user interaction
39:16 - or do anything like that okay so that's
39:18 - why with these sorts of network tasks or
39:22 - some data tasks you want to send a
39:25 - background thread to do just like how
39:27 - you sent a helper to go pick up lunch
39:29 - that's what as synchronous means okay
39:32 - now that you know what these two
39:33 - keywords means let's handle the throws
39:36 - one first because there's a special
39:38 - syntax that you have to write in order
39:40 - to capture the error or potential error
39:43 - that can happen Okay so let's finish
39:45 - typing this out and then we're going to
39:47 - deal with these two keywords one at a
39:48 - time okay so data for and we're going to
39:52 - pass in
39:53 - request okay so when something May
39:57 - potentially throw an error like this one
40:00 - what we do is we have to put it inside a
40:03 - do catch block so you do something right
40:07 - this is you do the thing that can throw
40:09 - the error in between these brackets
40:11 - right here so that's what you're going
40:13 - to
40:14 - do and then you're going to catch any
40:17 - potential errors right below it and then
40:21 - you can print out any error that may
40:23 - happen it's going to just put in there
40:25 - now one more thing you have to do just
40:27 - to indicate that something uh that you
40:31 - understand that something can throw an
40:32 - error is you put a try keyword in front
40:34 - of it right so you're going to do this
40:38 - you're going to try this and then you're
40:40 - going to catch any potential error and
40:42 - you're going to printed
40:44 - out all right so that handles the throws
40:47 - keyword for running this uh method now
40:51 - let's talk about the async keyword that
40:54 - we talked about we want to send this
40:56 - task off off in the background to grab
40:58 - the data and come back when it does so
41:02 - what we have to do is put the a wait
41:06 - keyword so what this does is it
41:11 - basically says before we execute any of
41:15 - the code below this line of code it is
41:18 - going to wait for this to return Why do
41:22 - we want to do that because let's say
41:24 - down here we are going to print out the
41:27 - print out the response okay actually
41:29 - here so we're going to put handle error
41:31 - right here and print out response I'm
41:35 - going to put that right
41:36 - here
41:39 - right right we wouldn't want to print
41:41 - out the response before this comes back
41:44 - with the data right because then there'd
41:46 - be nothing to print out so by putting
41:49 - the await keyword in front of an
41:52 - asynchronous method it is going to wait
41:55 - for this to happen in the
41:58 - background finish doing its thing come
42:01 - back and then we are going to print out
42:03 - the response what are we going to print
42:05 - out we have to assign the data that gets
42:08 - returned into something first just like
42:11 - how we did here like let URL equals that
42:14 - let request equal that so we're going to
42:16 - say
42:17 - let data comma
42:21 - response equals that now why did I do
42:25 - this and what is this this is called the
42:27 - tupal and it's basically a collection
42:30 - of variables so the reason I did this is
42:34 - because this um what gets returned is
42:39 - two things one is the actual data right
42:41 - the Json data and the other is the
42:45 - response they're two different things
42:47 - and they will get assigned accordingly
42:49 - to this to data and response so now when
42:52 - I print it out I can print out the
42:55 - data and I can print out the
43:01 - response and it's not going to run this
43:04 - code until this comes back because of
43:08 - this await statement right here okay and
43:11 - now I can explain to you what this task
43:15 - uh keyword is so the task keyword is for
43:18 - running asynchronous methods or
43:21 - asynchronous code which is what this is
43:24 - right so it's just a special
43:27 - construct to be able to run code in the
43:30 - background you can think of it like that
43:33 - so now we're all set up after writing
43:35 - all of that code what we're going to do
43:37 - is run this project it is going to
43:40 - execute this code as soon as the
43:41 - simulator
43:43 - launches and then we're going to see
43:44 - some output whether it caught an error
43:47 - or we actually see the data in the
43:49 - response so let's take a look at what's
43:51 - happened here if I open up this console
43:54 - area and if you don't have this console
43:56 - area it's actually just it might be
43:57 - minimized you just hit that button right
43:59 - there and you might not have these tabs
44:02 - so you just just click these buttons in
44:04 - the lower right corner and uh open these
44:06 - tabs okay so there are two things to to
44:09 - notice here this this is the data and we
44:12 - can't see the data it's just telling
44:15 - telling us the size of the data that's
44:16 - what happens when you try to print out
44:18 - data but we're going to have to parse
44:20 - that Json or convert that into usable
44:22 - data in our app we're going to do that a
44:24 - few lessons later but let's take a look
44:26 - at the response because this can tell us
44:28 - a lot as
44:29 - well okay so if you look for a status
44:33 - code status code 2 200 that's good
44:36 - remember back uh back here in the API
44:43 - Explorer ah I just I think I oh here it
44:46 - is okay see code 200 that means that
44:50 - this is a server code for successful
44:52 - server code 200 you can Google it server
44:55 - codes 200
44:58 - okay it means
44:59 - okay um there are there are more codes
45:03 - let's take a look at what we get here
45:05 - now you can't actually see the Json data
45:08 - but you can see some details about the
45:10 - response but status code 200 that is a
45:13 - good sign that means that the API
45:16 - accepted our API key it accepted our
45:19 - request as being valid and it returned
45:22 - an okay response let's take a look at
45:24 - what happens if we just change some of
45:27 - the data so let's say I mess up my API
45:31 - key where's the key right here I'm just
45:34 - going to delete a couple of letters from
45:36 - it and run it again and see what the
45:38 - status code is this
45:42 - time it's 400 that's bad 400 is is not
45:48 - good okay so it probably detected that a
45:51 - API key is not valid right so bad
45:54 - request perfect that's awesome this
45:57 - exactly what we expected let me
46:00 - undo so the API key should be valid let
46:02 - me just mess up my playlist ID a little
46:08 - bit see how that changes
46:13 - things okay it's a 404 well what's a
46:17 - 404 not found it couldn't find my
46:20 - playlist because I messed up the
46:22 - playlist ID right so this is really good
46:26 - that means everything is working as we
46:28 - expected to but wouldn't it be great if
46:31 - you could actually see the response
46:33 - right here we're just looking at status
46:35 - code of the response well sometimes when
46:38 - you're programming uh and you're working
46:41 - with networking calls like we are doing
46:43 - now it'd be super helpful to take a peek
46:46 - into what the actual contents of the
46:49 - response and the requests are and that's
46:52 - where you use a
46:53 - third-party uh Network debugging tool so
46:56 - I'm going to show you how to use proxy
46:57 - man which you can use for free with your
46:59 - IOS app development and then we can take
47:02 - a peek at the actual response and we can
47:04 - see the data so let's go ahead and
47:06 - download and install proxy man go ahead
47:08 - and visit proxy man. and you can
47:11 - download the Mac App keep in mind you
47:13 - can use this for free and there are paid
47:15 - features so you can look into that but I
47:17 - recommend just start for free for now
47:19 - okay so I'm going to launch my proxy
47:23 - man now yours might not look like this
47:27 - um because they'll probably be
47:28 - onboarding for you you probably have to
47:31 - walk through a few steps first but one
47:34 - important thing for you to do is to go
47:36 - down to a certificate and you're going
47:38 - to have to install a few things so
47:39 - install certificate on this Mac first
47:42 - and then install certificate on iOS and
47:45 - you're going to choose simulators but it
47:47 - helps if you actually have the simulator
47:49 - up and running so in your xcode project
47:51 - just run your project so you have the
47:53 - simulator open and take note of what it
47:55 - is iPhone 15 Pro because it's going to
47:58 - be installed on this
48:01 - simulator so
48:03 - um yeah this is what you do choose okay
48:07 - here choose simulators and then it is
48:10 - going to first of all this was
48:13 - installing it on your Mac if if you
48:15 - haven't done that you have to click this
48:17 - button and then it should say found the
48:21 - simulator because you have it launched
48:24 - so it's looking for it it should say
48:25 - it's found and and then you are going to
48:28 - choose just prepare simulators and then
48:31 - it's going to ask you to reboot it so
48:33 - you click this button and it reboots the
48:35 - simulator with the new certificate and
48:37 - this will allow proxy man to stand in
48:40 - between the requests that your simulator
48:44 - makes and receives and that's how you're
48:46 - going to be able to see the data right
48:48 - so what you're going to do sometimes you
48:51 - have to restart xcode it's it's a little
48:53 - finicky if you don't see what I'm
48:56 - showing you then try restarting xcode as
48:58 - well as the simulators but if everything
49:01 - is set up
49:03 - correctly then what you should be able
49:05 - to do is um if you run the app now and
49:12 - you open up this apps tab you should see
49:14 - it appear here so there it is that's my
49:16 - project right
49:19 - and let's see
49:24 - here um
49:28 - that's not this one okay so what I can
49:29 - do is right click and pin and it'll show
49:32 - up up here and you can see that it sent
49:37 - a request to this domain it was okay but
49:41 - I need to resend the request to see the
49:44 - content okay so let me run this project
49:47 - again and you'll see a second request
49:49 - being made and this time you can see
49:51 - everything take a look at
49:52 - that so the this side on the left is
49:56 - request this side on the right is
49:58 - response so for the requests you can see
50:01 - um see for the query you can see all of
50:04 - the parameters you specified so there's
50:06 - key there's playlist ID and there's part
50:08 - and that was all from the URL but the
50:10 - response is the interesting part
50:13 - right you can see the uh Response Code
50:17 - here it's right here 200 but if you take
50:20 - a look
50:21 - at the body right here this is the data
50:26 - that was returned in the response
50:29 - remember when we ran it in the xcode
50:31 - project this data right here we we
50:34 - printed the data right and it show just
50:36 - showed the data size well with proxy man
50:39 - we can actually take a peek into what
50:41 - the data is here here's all the
50:43 - data so this is a very helpful tool to
50:47 - use when you are working with network
50:51 - calls now if you are having trouble
50:53 - seeing what I'm seeing I would recommend
50:56 - that that you go through the
50:57 - troubleshooting steps um let's see here
51:02 - when we chose this there was some
51:03 - troubleshooting steps you could
51:06 - try and uh launches some documentation
51:09 - for you to um try things out so this is
51:12 - what it looks
51:15 - like yeah so just go through this and
51:18 - try these troubleshooting
51:21 - steps
51:23 - okay um not the end of the world if you
51:26 - can't get this working because as you
51:28 - can see even without proxy man we're
51:30 - able to send the response or sorry send
51:32 - the request and get the response and the
51:34 - status code 200 and all that all right
51:36 - so again this was a test project this is
51:39 - not the way we're going to do things
51:40 - like this we definitely want to secure
51:42 - the key um and do things a little more
51:45 - elegantly not just everything in this
51:47 - content view so we're going to create a
51:49 - separate component to handle the network
51:51 - stuff uh and we'll do all that all right
51:54 - but this was a huge success going
51:56 - through through this part and I hope you
51:57 - learned a few
51:59 - things all right now that we know we can
52:01 - connect to the API and retrieve data
52:03 - from it we're ready to start our actual
52:05 - xcode project for the app in the next
52:08 - lesson we're going to start a new xcode
52:09 - project we're going to store the API key
52:11 - securely we're going to start roughing
52:12 - out some of the screens as well as some
52:15 - of the components that we'll need for
52:17 - the app if you're enjoying the build so
52:19 - far please give this video a thumbs up
52:21 - and if you were successfully able to
52:23 - connect to the YouTube API please
52:25 - comment down below and say I I did it
52:27 - all right thanks for watching and I'll
52:29 - see you in the next lesson in the last
52:31 - lesson we were able to connect to the
52:33 - YouTube data API and retrieve data from
52:35 - it if you missed it check out the entire
52:37 - playlist right over there in this lesson
52:39 - we're going to set up our xcode project
52:41 - and all of the views and the models all
52:43 - right let's Dive Right
52:44 - In first let's start with a little bit
52:47 - of an overview of how our views will be
52:49 - laid out I also want to explain how our
52:52 - data model is going to look like
52:54 - especially as we're going to interact
52:55 - with the YouTube dat so first off we're
52:57 - going to start with the home View and
53:00 - this is going to contain a tab view with
53:03 - additional views now I know in this demo
53:05 - we only have one tab but this is set up
53:09 - with the intention that you can add
53:10 - additional tabs okay so the home view
53:14 - will house the tab view itself and then
53:17 - the tab view will contain instances well
53:20 - one instance of the feed View and this
53:22 - is that scrollable list of thumbnails
53:25 - that you see now talk about how the feed
53:27 - view is going to get the data we're
53:30 - going to create a separate component
53:31 - let's call that the data service that is
53:33 - going to be responsible for all of the
53:35 - code that interacts with the uh YouTube
53:38 - data API and the reason for this is so
53:41 - that we can keep it all in one place and
53:43 - it'll be easier to maintain and also to
53:46 - troubleshoot and debug so when the feed
53:49 - view loads it's going to ask the data
53:51 - service for the list of videos to
53:54 - display and then the data service Serv
53:56 - itself is going to be sending that
53:58 - Network request to the YouTube data
54:01 - API so in the previous lesson when we
54:05 - looked at what got returned it was two
54:08 - things really there was an overall
54:10 - playlist structure and then within that
54:13 - there were individual video
54:15 - objects like dictionaries that contained
54:18 - the video data so we're going to be
54:20 - parsing that Json into a single playlist
54:24 - instance containing multi multiple video
54:27 - instances each one representing the
54:30 - video data if you don't remember or
54:32 - you're a little bit confused don't worry
54:33 - when we get to that part of sending the
54:36 - network requests getting the data back
54:38 - and parsing into Json I'll dive into
54:40 - more detail about how each piece or part
54:43 - of the Json translates to different
54:46 - properties of the video and playlist
54:48 - instance so once the data comes back we
54:51 - are going to see a list of data in the
54:53 - feed view so next we have to f
54:56 - the video thumbnail image data because
54:59 - that image data doesn't get returned
55:01 - from the API instead we just get URLs to
55:05 - the video thumbnail so we are going to
55:08 - use async image to asynchronously that
55:11 - means in the background download that
55:13 - image data for display and we're going
55:15 - to create a separate video row view as a
55:18 - reusable View and the feed view which
55:21 - has a list component is just going to
55:23 - create as many instances of the video r
55:26 - r view as it needs for as many videos as
55:29 - there are and each video row view will
55:31 - have the async image which will download
55:35 - the thumbnail all right and so now we're
55:37 - going to have a feed view that looks
55:38 - pretty good but we have to let the user
55:40 - tap on a video to view the video itself
55:43 - right so that's why we're going to
55:45 - create a video detail view that will
55:47 - slide up as a sheet from the feed view
55:50 - when the user Taps on one of those video
55:52 - row
55:53 - views inside the video detail View we're
55:56 - going to show at the top the uh video
55:59 - player and then below it we're going to
56:00 - show the description for the video and
56:03 - that data will have already so at a high
56:05 - level that's how the app is going to
56:07 - look like there is a lot to learn here
56:09 - let's dive in I hope you're enjoying the
56:11 - lesson so far now just in case you want
56:13 - to launch your own app I want to tell
56:15 - you about cc+ this step-by-step program
56:18 - will help you launch your own app even
56:19 - if you don't have any experience and it
56:22 - takes about 4 months if this sounds like
56:24 - something you're interested in I have a
56:25 - special offer for you I'll leave the
56:27 - link in the description below this video
56:30 - and hopefully I'll see you there if not
56:32 - no worries I really appreciate that
56:34 - you're here watching this lesson and
56:35 - learning with us so thank you for that
56:38 - anyways now back to the lesson all right
56:40 - let's create our xcode project so I'm
56:42 - going to choose app under
56:44 - iOS and I'm going to name this YT API
56:48 - app and make sure interface is Swift UI
56:51 - language is Swift we don't need any
56:53 - storage options we don't need any tests
56:55 - right now
56:57 - and I'm going to just create this on my
57:00 - desktop uh and Source control I did not
57:02 - check
57:03 - on okay I'm going to change this to the
57:07 - simulator so that we can launch it in
57:09 - the simulator and not on my
57:12 - device all right and now we can get
57:14 - started so the first thing I want to do
57:16 - let's bring up the diagram again we have
57:19 - a couple of distinct things I like to
57:20 - separate things into folders here so we
57:23 - have our views which is home view feed
57:25 - view video detail View and video row
57:27 - View and then we have the data service
57:29 - which is a separate helper if you will
57:31 - and then we have these representing our
57:33 - data so this would be our data model or
57:36 - just model okay so let's go ahead and
57:39 - create those folders in our exod project
57:41 - so I'm just going to oh so one thing
57:44 - that I like to do is to rename this so
57:48 - you know when we name the project YT API
57:51 - app that translates to this bundle
57:54 - identifier YT API app but the entry
57:57 - point they always add app at the end so
58:01 - one easy way you can do is to right
58:04 - click and refactor and you can change it
58:06 - all in the same
58:08 - place so you
58:10 - might you might want to do something
58:12 - like
58:15 - that maybe we'll just call it YouTube
58:17 - API
58:19 - app okay so that renamed it in a bunch
58:22 - of different places you can press
58:24 - command B to just make sure sure that it
58:26 - still builds so let's create the folder
58:29 - now so I'm going to right click going to
58:31 - say new group and let's call this
58:35 - services and then we are going to create
58:38 - another group called
58:41 - views and then we're going to create
58:43 - another group
58:45 - called
58:47 - Models All right so
58:53 - let's just do that all right so so I'm
58:56 - just going to stub out all of the files
58:59 - that we need and stubbing out just means
59:01 - creating them perhaps uh adding some
59:04 - initial code but we're not even going to
59:06 - do that let's just create the files and
59:08 - then we'll focus on um just creating all
59:12 - of the scaffolding so let's call uh this
59:15 - is the data service right so we'll
59:17 - create that
59:19 - there and let's
59:22 - just create that initial struct and then
59:25 - for for the views we're going to say new
59:27 - file going to choose Swift UI view so
59:29 - first of all there's the home view right
59:31 - but the home view is essentially like
59:34 - we've got a view here so why don't we
59:36 - use this one as the home view so I'm
59:38 - going to drag this into the views folder
59:40 - and I'm just going to rename this again
59:42 - so refactor rename and we're going to
59:45 - call this
59:47 - the home
59:51 - view I didn't rename this
59:54 - one okay and then we also have the feed
59:57 - view remember this one contains the tab
59:59 - view right so we can oops Yeah new file
60:05 - Swift UI view we're going do feed
60:09 - View and then we're also going to
60:14 - have video row
60:17 - View and we're also going to have video
60:20 - detail
60:24 - View and then the home
60:27 - view we're going to change this to a tab
60:29 - view right and the tab view is going to
60:33 - contain an instance of the feed view so
60:36 - that's the basic structure of our
60:39 - project and we've got let's just create
60:42 - the two models now so these are going to
60:44 - be swift file because they're not views
60:47 - so one is
60:49 - video just going to create this
60:54 - struct and then we are going to to
60:56 - create another one for the
61:03 - playlist so let's bring up the diagram
61:05 - for a second and double check that we
61:07 - have everything so we have the home view
61:09 - which contains the tab view contains the
61:12 - instance of the feed view the detail
61:14 - view is going to be coming up as a sheet
61:17 - in the feed view we've created the video
61:19 - r view which is going to be um inside of
61:23 - a list component or List view sorry in
61:25 - the feed view we have the data service
61:27 - we created and then the video and the
61:29 - playlist models okay so we're ready to
61:31 - start implementing some of these things
61:33 - in the next lesson so one thing I would
61:35 - recommend is if you're really trying to
61:37 - learn some of this stuff it's best to
61:39 - follow along and try this out on your
61:41 - own computer or laptop just open X code
61:45 - start the project and follow along best
61:46 - you can you can always download the
61:48 - project if you get stuck I'll leave the
61:51 - link in the description below to
61:52 - download the
61:53 - project all right now that we have our X
61:56 - Cod project and our views and models
61:57 - roughed in we can start on the data
61:59 - service in the next lesson if you're
62:01 - enjoying the build so far can you give
62:03 - this video a thumbs up now I always
62:05 - preach to follow along and that's the
62:08 - best way to learn so if you are
62:10 - following along building this app on
62:12 - your own computer or laptop please
62:14 - comment down below and say I'm doing it
62:16 - all right thanks for watching and I'll
62:18 - see you in the next lesson in the last
62:20 - lesson we set up our exco project as
62:22 - well as all of the views and models if
62:24 - you missed that check that playlist out
62:26 - right over here in this lesson we're
62:28 - going to be connecting to the YouTube
62:29 - data API and retrieving the data and
62:32 - because we've done this already in a
62:34 - demo project this should be pretty
62:35 - straightforward the only difference is
62:37 - that this time we're going to securely
62:38 - store the API key let's Dive Right In
62:42 - first let's review the endpoint that
62:43 - we're going to hit with our app so on
62:47 - the YouTube data API and I'll link to
62:48 - this document Below in case you lost the
62:50 - reference to it we're going to be
62:52 - hitting this endpoint playlist items
62:54 - essentially we want want to list out all
62:57 - of the videos for a certain playlist now
63:01 - this is the URL and it's going to be a
63:04 - get type of request and the required
63:08 - parameters so this is what we must
63:11 - specify is going to be one of these like
63:14 - what level of detail do you want for the
63:17 - video items that get returned in the
63:19 - response and through my testing in
63:23 - building this demo I've come to the
63:25 - conclusion that snippet is what you need
63:28 - now it doesn't exactly tell you what is
63:31 - included in each of these maybe there's
63:32 - an additional documentation you can
63:34 - search up somewhere but what you can do
63:37 - is you in the previous lesson when we
63:39 - tested out hitting the API you can just
63:42 - try out all of these parameters and see
63:44 - what you get back and see uh what you
63:46 - need now what you should be targeting is
63:49 - getting back as little data as possible
63:52 - while still satisfying what you need to
63:55 - do
63:56 - because you never want to return more
63:57 - data because that takes more bandwidth
63:59 - it takes more time and you know why
64:01 - would you just do that so snippet is
64:04 - what we need it's going to contain the
64:05 - title description the video image URLs
64:08 - and that's pretty much all we need to be
64:10 - honest now according to this
64:12 - documentation this is the only required
64:15 - parameter however we still need to
64:18 - specify the playlist ID otherwise what
64:22 - videos are we going to get back we need
64:24 - to tell YouTube this is the playlist
64:27 - that I want to get the videos back for
64:29 - right and this what's what sort of threw
64:32 - me off in the beginning I thought I
64:33 - would put the playlist ID in there but
64:35 - no you put it in there okay so that is
64:38 - the Endo we're going to hit now in terms
64:39 - of the API key that we need to pass in
64:42 - you should have signed up for this back
64:44 - in lesson one if you haven't just go
64:46 - back to lesson one and walk through that
64:48 - process and you can sign up for your own
64:51 - API key now we're going to jump into
64:53 - xcode and see how we can secure ly store
64:57 - this API key I hope you're enjoying the
65:00 - lesson so far now just in case you want
65:02 - to launch your own app I want to tell
65:03 - you about cc+ this step-by-step program
65:06 - will help you launch your own app even
65:08 - if you don't have any experience and it
65:10 - takes about 4 months if this sounds like
65:12 - something you're interested in I have a
65:14 - special offer for you I'll leave the
65:16 - link in the description below this video
65:19 - and hopefully I'll see you there if not
65:21 - no worries I really appreciate that
65:22 - you're here watching this lesson and
65:24 - learning with us so thank you for that
65:26 - anyways now back to the lesson first I
65:28 - want to talk about what storing your API
65:30 - key securely even means because there
65:32 - are so many different ways to do it and
65:35 - there are varying degrees of
65:37 - Effectiveness so first let's talk about
65:40 - not securing the API key which is what
65:42 - we did when we were demoing the uh API
65:46 - right in the previous lesson so we
65:47 - hardcoded the API key directly in the
65:49 - xcode project and that's bad because you
65:52 - may accidentally share your project with
65:55 - someone or put it on Source control so
65:58 - if you're not familiar with Source
66:00 - control like GitHub uh it is a way for a
66:02 - team to collaborate multiple people to
66:04 - work on the same code base so if it gets
66:06 - on Source control especially if it's an
66:08 - open- source project or if it's you know
66:10 - who knows who has access to it right
66:12 - your key is right there and anybody can
66:14 - take it and abuse it so that's what you
66:16 - do not want now one level of
66:19 - sophistication or
66:21 - protection is by putting that API key in
66:25 - an external file so you do not include
66:28 - it directly in the xod project but it
66:31 - sits in a different file and then you
66:32 - have your xod project read the key from
66:35 - that file in this way when you put your
66:37 - project onto GitHub as you can see in
66:40 - this diagram the key doesn't go along
66:42 - with it the key stays in that file on
66:45 - your computer and then you have to
66:47 - manually share that external file with
66:50 - the key to whoever needs access right or
66:53 - that person gets their own API key and
66:55 - puts it in the config file and combines
66:58 - it with the excode project now the
67:00 - problem with these two methods is that
67:03 - ultimately your xcode project still
67:06 - needs the API key and the reason for
67:09 - that is because we are making the
67:11 - network calls to the API directly from
67:14 - our project or our app right so our
67:18 - project needs the key in order to access
67:22 - and authenticate against that API
67:24 - there's no way around around this right
67:26 - your xod project needs to know about the
67:27 - key so if you think about the App Store
67:30 - when your app is downloaded right that
67:35 - package that is downloaded has
67:37 - everything it needs to work right
67:39 - including the API key because ultimately
67:42 - your app is going to be using that API
67:44 - key to connect to any apis which your
67:47 - phone or sorry your app
67:49 - uses so it's still if someone tries hard
67:53 - enough and they know what they're doing
67:55 - probably can extract the key out from
67:58 - that package ultimately the most secure
68:01 - way to do this would be to not even make
68:04 - the API calls from your app you would
68:07 - set up your own
68:09 - API and your app would make requests to
68:13 - that AP to your API and it's your API
68:17 - that has the API key that then makes
68:20 - access to the third party API so in this
68:23 - example that would be the YouTube API
68:25 - and then it would get the data back from
68:28 - the YouTube API and then return that
68:30 - data back to the app right so it's
68:34 - almost like a
68:35 - middleman and which has access to the
68:38 - key so then that way the client which is
68:42 - your app will never see the key and then
68:46 - what you can do is you can have that app
68:49 - have an its own like user account system
68:52 - that the user needs to sign up for and
68:55 - authentic at himself or herself in order
68:58 - to even hit your API so you can see how
69:02 - far you can take this right and it
69:04 - really depends I think to me it depends
69:06 - how many people are using your app um
69:10 - and how critical it is that this API key
69:14 - never fall into the wrong hands at the
69:16 - very least we should put the API key in
69:18 - an external file and not inside
69:22 - hardcoded in the project this is just a
69:24 - good practice ice as you're building
69:27 - your app now in terms of setting up your
69:30 - own software and having your app never
69:31 - use the API key to me that is a later
69:34 - stage thing let's say your app picks up
69:37 - traction and there's a lots of lots of
69:40 - users using it it gets on the news and
69:42 - there you think there may be a risk that
69:45 - someone could Target your app uh maybe
69:48 - competition or whatever it may be to
69:50 - Target your app to try to bring it down
69:52 - because your business has taken off I
69:54 - think that's a good problem to have and
69:56 - then you would then think about how can
69:58 - I make my app more secure and then go
70:01 - through this process of setting up your
70:04 - own API so I wanted to go through all of
70:06 - that so that you can get an
70:08 - understanding of what it means to secure
70:09 - your API key in this lesson I'm going to
70:12 - show you how to put your API key in an
70:14 - external file so here are the steps
70:16 - we're going to go through we're going to
70:17 - create a config file in our xcode
70:19 - project and we're going to add the key
70:20 - to it we're going to set the project to
70:22 - use this config file and we're going to
70:24 - define a special variable in our pist to
70:27 - reference that API key and we're not
70:29 - going to do steps four and five because
70:31 - we're not dealing with Source control in
70:33 - this project but steps four and
70:35 - five they are the steps you want to do
70:38 - if you are putting this project into
70:40 - Source control because the G ignore file
70:44 - lists all the files that should not be
70:46 - put on Source control like should not be
70:49 - uploaded to GitHub essentially so steps
70:52 - four and five those are things that you
70:53 - definitely want to do if you are putting
70:55 - this project into Source control or
70:58 - GitHub and you're working on a team if
71:00 - you're curious about how those are done
71:02 - I would just Google how to use a get
71:04 - ignore file and it's literally just
71:07 - listing your config file like the file
71:09 - name inside that get ignore file which
71:13 - is essentially just the text file and
71:15 - you include that get ignore file with
71:17 - your exode project and then when you
71:20 - push your project onto Source control
71:22 - it's going to read that get ignore file
71:24 - and take note of all the files which it
71:27 - should exclude and it will not put those
71:29 - files into Source control so now let's
71:32 - dive into our xcode project and do steps
71:34 - one two and three so here's our xcode
71:37 - project let's start by adding that
71:39 - external file and this is going to be a
71:41 - configuration file so let's right click
71:43 - on this main folder here new file and at
71:47 - the top right corner you'll see a filter
71:49 - box type in configuration just type
71:52 - config this is the file that we want
71:54 - config configuration settings file now
71:57 - the important thing to note here is that
71:59 - you do not want to include it as part of
72:01 - the target here it's just make sure
72:03 - that's unchecked and then
72:05 - create because you don't want to include
72:08 - it right now you type in API underscore
72:12 - key in all caps and notice we don't this
72:15 - is not a variable or constant we don't
72:17 - put any Swift keywords in front of it
72:19 - this is more of like a text
72:22 - file now equals and we are going to
72:24 - break up our API
72:30 - key okay so there it is I'm going to
72:32 - copy
72:33 - it and I'm going to paste it in there
72:35 - and save the file next we are going to
72:37 - configure our xcode project to use this
72:39 - configuration file by tapping on the
72:42 - root node here tapping on project and
72:45 - under configurations here you can see
72:48 - there's no configuration set there are
72:50 - two different types of builds that we
72:51 - can create when we are developing and
72:53 - we're testing in the simulator or on our
72:56 - devices it's what's called a debug build
72:59 - a release build is when you create a
73:02 - build specifically to deploy or send to
73:05 - the App Store and that doesn't uh
73:08 - contain all of the extra stuff that's
73:11 - only used in the development phase of
73:14 - the app such as the bug symbols and
73:16 - things like that anyways for both of
73:19 - these uh debug and release build we are
73:22 - going to
73:23 - set it to use config like
73:26 - that okay now the third and final step
73:29 - before we can test this is to go under
73:33 - targets here we're going to go into info
73:36 - this is our pist and we are going to
73:38 - create a key that we can use to
73:40 - reference that value in the config file
73:44 - so at the
73:46 - bottom hit plus and then you're going to
73:49 - type in in all capitals AP
73:52 - iore Capital ke y
73:56 - press enter and the type is going to be
73:58 - string I don't know why it was a
74:00 - lowercase p because I think there was
74:02 - some autocorrect funkiness let's correct
74:04 - that and change that to capital P and
74:08 - then as for the value this is going to
74:11 - be a dynamic uh variable or reference
74:15 - and it's going to refer to the API key
74:18 - in the config file so what we're going
74:20 - to do inside our Swift code right here
74:23 - is we are going to go into this pist and
74:26 - grab the value for this
74:28 - key and the value for this key is
74:31 - actually pointing to this config file
74:33 - which we are not going to include as
74:35 - part of the project when it gets put
74:37 - into Source control and all that stuff
74:39 - this is our external file like we talked
74:42 - about
74:43 - before so let's test this out we are
74:45 - going to go into the home
74:48 - View and we're going to say on
74:51 - appear we are just going to print out
74:54 - the the uh API key see if we can
74:57 - reference it and the way we reference
74:59 - that info. pist is by saying bundle.
75:04 - main. info ditionary that's our info
75:08 - list and this is optional because it may
75:12 - return nil so if it can find it then we
75:16 - are going to search for the
75:18 - key um and we are going
75:21 - to try to retrieve the value because it
75:24 - has no idea of what the value is we know
75:27 - it's a string it's a type of string so
75:28 - we're going to try to turn it into a
75:30 - string and this is just try if it if it
75:34 - can't then it'll probably be um empty or
75:40 - nil uh we could provide a default value
75:43 - so yeah if there's if I can't find
75:45 - anything let's let's
75:48 - print can't find it okay just for our
75:52 - own our own debugging okay so let's try
75:55 - this out we are going to run this in the
75:58 - simulator and so it's running right now
76:01 - and we should see our API key print out
76:04 - there if everything is according to plan
76:07 - all right perfect it works so this this
76:10 - is referencing the info. P list looking
76:14 - for this key and the value for this key
76:17 - is referencing the config file API key
76:20 - right here perfect now let's move on to
76:22 - implementing the data service where
76:24 - where we're going to send off the API
76:26 - call to the YouTube API and to retrieve
76:30 - the data so in the data service file at
76:33 - the top let's declare our key as a
76:37 - private uh constant and we're going to
76:40 - call this the API key and we're going to
76:43 - handle this just like I showed you
76:46 - before uh bundle. main. info dictionary
76:50 - and we're going to try to look for API
76:53 - key
76:55 - as string and now I'm not going to give
76:58 - it a value like this if it can't
77:02 - retrieve it because I do want it to be
77:04 - nil and that way we can detect if the
77:06 - API key is present or not all right next
77:09 - we are going to create a new function
77:11 - called get
77:12 - videos and it is going to return an
77:16 - array of videos essentially I wanted to
77:19 - give back all of the videos for a given
77:22 - playlist right so we are going to make
77:26 - this an asynchronous function and I will
77:29 - explain what that means when it comes
77:31 - time that we call this and I'll explain
77:34 - what the async and await keywords mean
77:37 - all right so for now uh why don't we
77:39 - just return
77:41 - in uh empty video array and here we're
77:44 - going to implement that API call so
77:46 - first check if
77:49 - API key
77:51 - is is there and then we are going to uh
77:56 - create the
77:58 - URL create the request and we're going
78:02 - to um send the request and and then
78:07 - finally parse it so this really helps
78:10 - that we did this inside a demo back in
78:12 - lesson two right so we've tested that
78:15 - this works we know it
78:17 - works so we're going to say guard API
78:21 - key not equal nil else
78:25 - return
78:27 - um we can return an empty video list
78:30 - because I can't get anything ideally
78:32 - what you'd want to do is probably show
78:34 - an error message or something so you can
78:36 - return something as such and then
78:38 - capture it and display it to the UI but
78:41 - by doing what we we doing here you're
78:43 - returning no videos so the user doesn't
78:46 - know if there's actually no videos in
78:49 - that playlist or if something went wrong
78:51 - but clearly something went wrong because
78:53 - we can't get the API key right
78:55 - okay so coming down here we're going to
78:57 - create the
79:00 - URL and uh before we create the URL
79:03 - actually we're going to create it off of
79:05 - a string right and that URL string is
79:08 - going to look something like
79:13 - this so first let's go back to
79:17 - the um the
79:20 - documentation so that is right here and
79:22 - as I mentioned in the previous lesson we
79:25 - are using
79:27 - this Endo right here so we're going to
79:29 - retrieve all of the playlist items given
79:31 - a
79:32 - playlist so I'm just going to put that
79:34 - right there going to hard code that URL
79:37 - right here and we're going to add the
79:38 - parameters so one of
79:41 - the uh required parameters is this one
79:44 - part I mentioned before in lesson three
79:46 - why I picked s it because it contains
79:49 - what we need and then the other thing we
79:52 - want to specify is which playlist do we
79:54 - want a Target to retrieve all of the
79:56 - videos
79:58 - for okay so the way you find this is I'm
80:01 - going to choose my own playlist you can
80:03 - choose whatever playlist you'd like but
80:05 - if you go to someone's Channel and you
80:07 - go to playlist you'll see all of the
80:09 - playlists here I'm going to click on
80:11 - this one view full playlist and it's
80:14 - just this ID right here if you double
80:16 - click it it'll highlight the whole thing
80:17 - I'm going to copy that and I'm going to
80:19 - paste that in there and the last thing
80:21 - you have to add is the key so we're
80:23 - going to say key is equal to and we will
80:26 - just insert that right here API key and
80:31 - we've already checked that it's not nil
80:33 - so we're going to just force and wrap it
80:36 - here okay so now we can
80:39 - create the URL instance off of that
80:43 - string and now we can create the request
80:46 - so let's do that URL request and we're
80:49 - going to do it off of this one right
80:51 - here going to pass in the
80:53 - URL and and actually this one this one
80:57 - returns an optional this so This Could
80:59 - Be nil so we're going to say IFL URL
81:02 - equals URL just to check that it's not
81:06 - nil we're going to put all of this code
81:08 - in here that only executes if we're
81:10 - successfully able to create a URL
81:13 - instance so then we're going to do that
81:15 - in there and then sending off the
81:17 - request is a matter of um using session
81:22 - so uh if we say let let's create another
81:25 - constant right here just to make things
81:27 - more clear so URL session shared this is
81:30 - just breaking things up so it's easier
81:32 - for you to understand and
81:36 - if if you look at this one which is what
81:39 - we're going to use data like retrieves
81:41 - the data for a given URL request which
81:45 - we have created up here and it is both
81:48 - an asynchronous method and it also
81:52 - potentially throws errors so we have to
81:54 - address both of those things and the
81:56 - third thing I want you to notice with
81:57 - this method is what it returns to you it
82:01 - returns a tuple so it has two pieces of
82:05 - data it has data which is the actual
82:09 - data that is returned by the API and a
82:13 - response object which you can take a
82:16 - look at for any errors or uh the status
82:19 - code and things like that so that is the
82:21 - actual response and that is the data
82:23 - separated into its own um
82:27 - parameter so we are going to also handle
82:30 - that but first let's do things one at a
82:32 - time let's handle the throws part and
82:36 - then we're going to do async and then
82:37 - we're going to handle the data that gets
82:39 - returned so throws okay so let's pass in
82:43 - the request if calling a method May
82:46 - throw an error we have to catch it and
82:49 - the mechanism in Swift to do that is
82:52 - to it looks like this so you do
82:57 - something that may potentially throw
82:59 - errors which is this line of code you
83:02 - have to put a try keyword in front of it
83:04 - so we're going to try to do this right
83:08 - and then you have to also have a catch
83:11 - block and this uh displays or you can
83:14 - handle any errors that get thrown if it
83:17 - gets thrown so we're just going to print
83:19 - it out okay and this will reference the
83:21 - error that gets uh thrown up next let's
83:25 - handle the fact that this is an
83:28 - asynchronous method so in order to call
83:31 - the asynchronous method which means that
83:34 - it gets called in a background thread or
83:36 - a background worker so imagine yourself
83:40 - tasking someone else to do the work like
83:43 - you're giving someone else a task and
83:45 - have that person go and do the task and
83:47 - come back to you when it's
83:49 - done right you have to put the await
83:53 - keyword which which means that you are
83:56 - going to wait for that person that
83:59 - background worker to come back with the
84:02 - completed task before you continue and
84:05 - execute the rest of the lines of code
84:07 - below
84:08 - it so that's what's going to happen here
84:11 - now I do want to explain even though it
84:14 - waits for the background worker to do
84:16 - that task and comes back before we
84:19 - execute the next lines of code it is
84:21 - still good because while we're waiting
84:22 - for that background task to come back we
84:25 - can handle any sort of user interaction
84:28 - and we can also do some other things
84:30 - before we execute the next lines of code
84:32 - it's just that the await keyword tells
84:36 - the system uh do not run lines 33 and
84:40 - Below until that background worker comes
84:43 - back right and for things like this you
84:46 - do want to send it off as a background
84:48 - task because if you have the main thread
84:52 - which is you know the the main thread
84:55 - that is executing this code go and do
84:57 - that work there will be no worker to
85:02 - handle all of the user interaction and
85:04 - stuff and so it'll look like it's frozen
85:06 - so that's kind of the gist of it uh with
85:09 - any sort of tasks like Network requests
85:12 - or U database queries uh and you'll see
85:16 - when we do the uh thumbnail downloading
85:19 - for the images we're also going to send
85:22 - that as a background worker to go and do
85:23 - that right so that's using the async and
85:26 - a weight
85:28 - keywords um the fact that this is in
85:31 - asynchronous method will also come into
85:33 - play when we have the feed view call get
85:36 - video you're going to see how we use the
85:39 - await
85:41 - keyword okay so hopefully that makes
85:43 - sense if not I would uh recommend that
85:46 - you dive a little deeper into async and
85:47 - a wait search for some additional
85:49 - tutorials on async and a weight in Swift
85:52 - so you can understand it in a little
85:54 - more detail more than we have time to
85:57 - cover right now so we've handled the
86:02 - fact that it throws an error we've
86:03 - handled the fact that is an asynchronous
86:06 - method meaning background worker is
86:08 - going to go execute it now we have to
86:10 - handle the data that comes back and it's
86:12 - a tupal right so we are going to declare
86:15 - our own tupal to track that data so
86:17 - we're going to declare a tupal constant
86:20 - we're going to say data and
86:22 - response so you'll notice that this
86:24 - format looks like what we saw this
86:27 - method returns we're going to say equals
86:30 - this so if no errors get thrown when the
86:35 - background worker comes back it's going
86:37 - to assign the data to this and it's
86:39 - going to assign the response to this and
86:41 - then from here we can parse the
86:47 - data now before we actually parse the
86:50 - data let's try sending this request off
86:52 - and taking a look at it inside proxy man
86:54 - to make sure that it's happening uh so
86:57 - what we're going to do first we have to
86:59 - actually fire off this request so inside
87:02 - the feed
87:03 - view right
87:05 - here why don't we say on uh not on up
87:10 - but we're going to use task let me
87:11 - explain what that
87:14 - is so the task is a
87:18 - modifier that lets you execute a block
87:22 - of asynchronous code
87:25 - let me put that into layman's terms when
87:28 - the feed view appears it is going to run
87:31 - this code inside this task block as a
87:34 - background
87:35 - worker so we are going to say we're
87:39 - going to create a property up here to
87:41 - store the videos and this is going to be
87:44 - a state
87:47 - property let me explain what that means
87:49 - as
87:52 - well okay it's going to be an empty
87:54 - array in the beginning in case you
87:56 - haven't watched my 8-day beginner Series
87:58 - where I explained what this what state
88:01 - properties are it's essentially when
88:03 - this value changes we want the UI to
88:07 - refresh so this starts off as an empty
88:09 - array there no videos right but when we
88:11 - send off the task from the data service
88:14 - right to retrieve the videos and it
88:15 - comes back and then it puts the video
88:18 - instances into this array we want the
88:21 - user interface to refresh and show those
88:23 - videos that's why this is a state
88:26 - property all right so let's fire off
88:28 - this task so we are going to create a
88:31 - new data service instance and I'm just
88:34 - going to chain it like this I'm going to
88:36 - call get video oh that should be an S
88:40 - we'll change that this should be get
88:42 - videos and notice that it's an
88:44 - asynchronous method and it returns a
88:47 - list of videos so asynchronous means
88:50 - we're going to have to send it off as a
88:53 - background task
88:54 - we're going to have to wait for that to
88:56 - come back before executing the code
88:57 - below it okay so we're going to say let
89:01 - videos equals that you know the return
89:04 - to list of videos let's call this let's
89:07 - call it returned videos right and then
89:11 - we are going to assign the return videos
89:16 - to our state property here self. videoos
89:21 - equals return videos
89:25 - okay so we can shorten this definitely
89:27 - but I wanted to break this up into two
89:29 - lines to explain to you the fact that
89:31 - this line of code will not execute until
89:35 - this has gone and come back with the
89:37 - data because of this await
89:40 - keyword right and while the main worker
89:44 - is waiting for the background worker to
89:46 - retrieve the data it can still handle
89:48 - user interaction and other things that
89:51 - it needs to do so that's what's so great
89:54 - about Ayn and await so we can shorten
89:56 - this by just putting this like this
90:01 - right and removing the need for this
90:03 - even right but I thought writing it like
90:06 - that would explain um the await keyword
90:08 - a little bit better so with the way
90:11 - we've set it up now if we run this in
90:13 - the simulator it should um it should
90:16 - execute this and then send off the
90:18 - network request and if our API is
90:21 - correct and our request is structured
90:24 - properly we should get a response so
90:26 - let's go ahead and open up proxy
90:30 - man and let's go ahead and take a look
90:33 - see this in action so I'm going to first
90:36 - run this in the simulator so that it'll
90:38 - show up on our
90:40 - list there it is I'm going to pin this
90:43 - one to the
90:44 - top and I am going to have to resend
90:51 - it hello world send
90:56 - it all right the status
90:59 - code uh is green this should be a
91:05 - 200 y 200 and we get the data back here
91:10 - you can see the root element contains an
91:13 - array of items so this root element we
91:15 - represent it with our playlist
91:20 - model we're going to model it off of
91:22 - that and then as for the items these are
91:25 - the individual videos which we are
91:28 - representing with instances of video
91:30 - obviously we haven't filled it out yet
91:33 - but that's what we're going to do so if
91:34 - you open one of these videos you're
91:37 - you're going to see that it has the
91:38 - snippet which is what we asked for in
91:41 - the API request and it contains the
91:43 - thumbnails the title um the
91:46 - description and the the video ID is also
91:51 - something that we need so inside
91:54 - resource ID here's the video ID and so
91:56 - those are all the details we need and
91:58 - inside thumbnails you can see that it
92:00 - has different sizes of thumbnails each
92:02 - each size has a different
92:06 - URL all right we're about halfway there
92:09 - now that we have the request sending out
92:11 - the data coming back all we need to do
92:12 - is parse that Json data into usable
92:15 - video instances in our app so that we
92:17 - can display it and we're going to do
92:19 - that in the next lesson and if you're
92:20 - enjoying this build so far can you give
92:22 - this video a thumbs up I greatly
92:24 - appreciated and if you were able to
92:26 - follow along to add your API key and to
92:29 - send off the network request drop a
92:31 - comment down below and say so far so
92:33 - good all right thanks for watching and
92:35 - I'll see you in the next lesson in the
92:37 - last lesson we stored our API key in a
92:39 - config file and we were able to
92:41 - successfully retrieve data from the
92:43 - YouTube API if you missed that lesson
92:45 - check out the playlist right over here
92:47 - so the first step is to fill out the
92:49 - properties of our data models according
92:51 - to the response that we get from the the
92:54 - YouTube data API so let's take a look
92:57 - again at proxy man and this tool is
92:59 - really helpful um especially because you
93:02 - can just send the request and look at
93:04 - the response and get this treeview and
93:06 - then you can kind of go through it like
93:07 - this um sometimes the documentation will
93:11 - have the response so this is the YouTube
93:13 - data API I know the API Explorer if you
93:17 - use this and you try out the request
93:19 - you're going to be able to see the
93:21 - response so here this kind of gives you
93:23 - an idea yeah so if you don't want to use
93:26 - proxy man to look at it you can look at
93:28 - this as well so this would be the
93:31 - playlist uh object or instance and this
93:35 - would be the items right and each item
93:38 - is a video if you click on that you can
93:40 - see these are the properties of the uh
93:43 - of the video actually let's use this
93:46 - because the text is bigger than we have
93:49 - here in proxy man we're going to start
93:52 - with the video itself so we're going to
93:55 - add the
93:57 - decodable protocol and this allows us to
94:00 - turn the Json data into instances of
94:04 - video uh using Json decoder so let's
94:09 - bring up
94:11 - the API documentation so what I'm
94:14 - looking at right now is a single video
94:17 - so we can see that it has an ID which is
94:19 - a string and this will be helpful for us
94:22 - because um we want to put these video
94:25 - instances inside a swift UI list and it
94:29 - needs to be able to identify between
94:31 - different videos
94:34 - so we are going to pick and choose the
94:36 - properties that we want to we want to
94:39 - parse essentially so there's going to be
94:41 - a a string
94:43 - ID okay and then there is going to be a
94:47 - snippet and inside is going to be a
94:50 - title it's going to be a description
94:52 - both of these we need and those are
94:54 - strings and then there's also going to
94:57 - be thumbnails let's first focus on title
95:00 - and description so again this is a
95:02 - snippet property and the snippet itself
95:05 - you can see these curly brackets right
95:07 - that represents a different um instance
95:10 - or struct or object whatever you want to
95:13 - call it all of it is representing the
95:15 - same thing so we're going to say snippet
95:19 - is going to be it's going to be a type
95:22 - of snippet and I'm going to make this
95:24 - optional in case it doesn't exist right
95:26 - yeah snippet and not Snippets okay make
95:29 - sure that the property is the same and
95:31 - I'm going to create another struct in
95:32 - here called snippet and it too is going
95:34 - to be
95:35 - decodable so inside the snippet is where
95:38 - I would put title in the
95:48 - description okay so these I mean all
95:51 - videos should have a title and
95:52 - description right but just in case they
95:54 - don't you can make them optional for now
95:57 - I won't let's just see what
95:59 - happens and then inside the snippet we
96:02 - have
96:04 - thumbnails what else do we need here uh
96:07 - we need the the video ID let's deal with
96:09 - that before thumbnails because there's
96:11 - quite a bit in here with thumbnails so
96:12 - let's do resource ID I'm going to spell
96:15 - it with a lowercase R like this
96:26 - um let's do that so then here I'm going
96:29 - to create another struct called resource
96:33 - ID that is
96:36 - decodable and the resource ID has well
96:40 - the only one I'm really interested in is
96:42 - video ID and it's a
96:45 - string and I know that all videos must
96:48 - have a video
96:50 - ID okay so let's deal with thumbnails
96:54 - was it thumbnails with an S this was
96:56 - inside the snippet so thumbnails with an
96:58 - S yeah and then this itself is its own
97:02 - thing so we have to Define
97:05 - that let's call
97:07 - this
97:10 - thumbnails so let's create another
97:13 - struct called
97:15 - thumbnails and this is going to be
97:18 - decodable as
97:20 - well and what do I need in here
97:25 - let's key let's take a look at proxy man
97:28 - here to look at a real
97:30 - response uh we've got the snippet here
97:33 - and then we've got the snippet
97:35 - thumbnails right here let's open this
97:37 - up and then there are several different
97:40 - ones standard medium default High Max
97:43 - res so you can try out these different
97:45 - ones these are all different uh file
97:47 - sizes you you probably wouldn't want to
97:50 - get this one like this is the biggest
97:53 - one
97:55 - unless you're showing it on an iPad
97:58 - maybe or you want it super clear when I
98:00 - was building my demo I was pretty happy
98:02 - with medium so that's what I'm going to
98:04 - go with actually medium is almost the
98:07 - smallest one default is is pretty small
98:10 - so this is double almost double that
98:12 - size but h i remember why I chose medium
98:16 - is because the aspect ratio is different
98:20 - so you can see that
98:24 - um these are
98:27 - about yeah the aspect ratio was a little
98:30 - different some of these look more square
98:32 - and some of them look more like a
98:34 - widescreen type of thing so I figured
98:37 - out like after trying them out that
98:39 - Medium was the one that displayed nicely
98:42 - so that's what I chose um yeah so I'm
98:46 - going to say
98:48 - far medium and what's the type so the
98:52 - type itself is another object so I'm
98:54 - going to have to create you know
98:56 - something for that just to house these
98:59 - three properties this one is a string um
99:02 - this one is an INT and this one is an
99:04 - INT as
99:07 - well so let's create a struct thumbnail
99:12 - size this is
99:15 - decodable
99:17 - to what is it URL
99:26 - is it like that hey yeah okay and then
99:30 - this one will be just thumbnail
99:37 - size do I have everything I need so I
99:41 - have the
99:42 - thumbnail image URL I have the video ID
99:46 - this this is for the video player and
99:48 - then I have the title in the description
99:50 - I think this is it perfect and then
99:54 - going back out so this is a single video
99:58 - going back one step this is the
100:03 - playlist okay and the
100:05 - playlist
100:08 - has an items which is an array of those
100:14 - video
100:16 - instances so if I go to
100:19 - playlist let's make sure that this is
100:21 - also decodable
100:24 - and we want items
100:28 - right like
100:31 - that I hope you're enjoying the lesson
100:33 - so far now just in case you want to
100:35 - launch your own app I want to tell you
100:36 - about cc+ this step-by-step program will
100:39 - help you launch your own app even if you
100:41 - don't have any experience and it takes
100:43 - about 4 months if this sounds like
100:45 - something you're interested in I have a
100:47 - special offer for you I'll leave the
100:49 - link in the description below this video
100:52 - and hopefully I'll see you there if not
100:54 - no worries I really appreciate that
100:55 - you're here watching this lesson and
100:57 - learning with us so thank you for that
100:59 - anyways now back to the
101:04 - lesson right and let's also we need to
101:08 - add
101:10 - identifiable um which allows us to use
101:13 - an array of this inside the Swift UI
101:16 - list and we have the ID already for the
101:20 - identifiable
101:22 - protocol because that's what that
101:25 - requires and I think we're okay now
101:27 - let's try to parse it let's go into the
101:29 - data service and let's continue parsing
101:33 - the data so we are going to uh first
101:36 - create a Json
101:42 - decoder and then we're going to say
101:44 - decoder do
101:47 - decode a certain type from so we're
101:50 - going to
101:52 - decode the data from
101:56 - here and we are going to decode it
102:00 - into a an instance of playlist so we're
102:05 - passing in the playlist as a type and so
102:09 - we have to add. self this is how you
102:11 - specify a type oh I forgot to point out
102:15 - that this decode method can throw errors
102:19 - so it's asking you to do
102:21 - try so we can put the try right here
102:24 - since it's already in a do block that's
102:27 - perfect we don't have to do another one
102:29 - unless you want to
102:31 - specifically um handle that error versus
102:35 - this error I'm sure you can
102:36 - differentiate in here though when you
102:38 - catch it okay so let's capture the
102:39 - result of this decoding so let playlist
102:43 - equals that and
102:46 - then as you know our playlist instance
102:50 - has items which are the videos
102:53 - and this is what we are going to try to
102:57 - return right because remember this
103:00 - method right here returns an array of
103:04 - videos all right let's see if this works
103:07 - let us go back to our views and double
103:12 - check what we're doing
103:14 - here all right so I'm going to set a
103:17 - breakpoint right here by tapping here
103:19 - which is going to pause the
103:21 - execution um
103:23 - you know what let's not let's let's add
103:25 - a little bit more before we run this
103:28 - okay that way we can visually see
103:29 - something in the simulator let's use a
103:32 - swift UI list okay and we are going to
103:35 - pass in the
103:37 - videos and because the video uh struct
103:41 - is
103:41 - identifiable then that is all good that
103:46 - means we can use it in this list and
103:48 - then we are going to
103:54 - display for each video Let's just
103:57 - display
103:59 - the
104:01 - snippit
104:03 - title and if that is nil just say just
104:08 - say
104:09 - title okay let
104:12 - me just do that all right let's see if
104:15 - we can see anything come up
104:23 - oh it was so
104:25 - fast but we can see the response sorry
104:28 - the request go out the response comes
104:30 - back with five items and sure enough we
104:33 - see five items right here now I expected
104:37 - to see more because our playlist
104:39 - actually has like eight videos or nine
104:43 - videos in here 10 videos actually so let
104:46 - me take a look at here I think by
104:49 - default yeah the default value for Max
104:51 - results is five so this is something
104:54 - that you'll want to set as
104:55 - well let's change that in our data
104:58 - service what was that Max
105:00 - results capital
105:03 - r so I'm going to add that right here
105:05 - Max results
105:08 - equals 20 let's
105:12 - say and this it's telling us that we
105:16 - never checked the
105:18 - response so we can just ignore that by
105:22 - adding an under score like we don't have
105:24 - to name
105:27 - that all right let's run it again happen
105:32 - so fast there we have everything so what
105:35 - we did here today by parsing the Json
105:38 - through looking at the response and then
105:40 - mapping these key value Pairs and
105:42 - creating these properties in a data
105:44 - model this is something that is very
105:46 - common to do uh so it's best to get
105:49 - familiar with this process if you want
105:51 - to work with different apis in the
105:54 - future all right now that we have the
105:56 - video instances showing up in the feed
105:58 - view the hard part is done all we need
106:01 - to do is show the thumbnail images if
106:03 - you're enjoying this build so far please
106:05 - give this video a thumbs up and if
106:07 - you've been following along and you are
106:08 - able to parse the Json data please
106:10 - comment down below saying Json is no
106:13 - match for me all right thanks for
106:15 - watching and I'll see you in the next
106:16 - lesson in the last lesson we parsed the
106:19 - Json data returned by the YouTube API
106:21 - into video instance that we're
106:23 - displaying in our feed view if you
106:25 - missed that lesson check out the
106:26 - playlist right over there now the
106:28 - problem is we don't have any video
106:29 - thumbnails to show and we're going to
106:31 - fix that in this lesson let's do it so
106:35 - here's what we have so far with our feed
106:37 - view let's clean this up a bit so we're
106:39 - going to go into feed View and the first
106:41 - thing I'm going to do is change the
106:43 - style of the list uh list style to plane
106:49 - and then we're also going to remove the
106:51 - scroll indicator
106:53 - so let's do that scroll indicators we're
106:59 - going to hide that and it should already
107:02 - look a little
107:04 - better perfect and then we are going to
107:07 - remove these separators between each
107:10 - item because these are going to be um
107:12 - images right thumbnails so in in the
107:16 - text here I'm going to say row separator
107:20 - visibility is hidden
107:24 - and the other thing is remember how we
107:26 - have a tab view in the home view so
107:29 - let's add that tab icon right
107:33 - there so in home view uh we can remove
107:37 - this on up here display our API key and
107:41 - add a tab item and in here we are going
107:45 - to put an image and this is going to be
107:48 - an S SF uh icon SF symbol
107:53 - sorry and we are going to use stack this
107:58 - one play Square stack let's just see if
108:01 - I can put it right there oh it just did
108:04 - the whole thing for me and then the text
108:07 - is going to be
108:11 - feed that already is going to look a lot
108:14 - better I hope you're enjoying the lesson
108:17 - so far now just in case you want to
108:18 - launch your own app I want to tell you
108:20 - about C C+ this step-by-step program
108:23 - will help you launch your own app even
108:24 - if you don't have any experience and it
108:27 - takes about 4 months if this sounds like
108:29 - something you're interested in I have a
108:30 - special offer for you I'll leave the
108:32 - link in the description below this video
108:35 - and hopefully I'll see you there if not
108:37 - no worries I really appreciate that
108:39 - you're here watching this lesson and
108:40 - learning with us so thank you for that
108:43 - anyways now back to the lesson now let's
108:45 - take a look at displaying those images
108:47 - using our video row
108:50 - view so instead of the displaying a text
108:54 - with the title we are going to want to
108:56 - create instances of video r view but we
108:59 - need to pass the video into the video
109:02 - row view otherwise this view won't have
109:05 - anything to work with so why don't we
109:08 - create
109:10 - a property here that will need to get
109:13 - passed in and for this purpose maybe
109:17 - we'll just do
109:19 - that um
109:26 - from yeah I don't want to create all of
109:29 - that I'm just going to a the preview
109:32 - itself okay and let's go back to feed
109:36 - View and we are going to pass it in here
109:40 - see now it requires that we're going to
109:42 - just pass in the video that it's trying
109:44 - to
109:46 - display now in the R Video row view
109:50 - let's display the image
109:53 - now remember we do have the URL to
109:56 - thumbnail image it is inside video.
109:59 - snippet do
110:01 - thumbnails medium. URL this is a
110:05 - string so we need to
110:09 - essentially hit this URL to download the
110:11 - image data and then display that image
110:15 - data inside a Swift image luckily for us
110:19 - Swift UI makes this really easy using
110:21 - async image where you just pass in a URL
110:24 - and it's going to do that asynchronously
110:27 - it's going to send a background worker
110:29 - to go to that URL fetch the image data
110:31 - come back and then display it inside an
110:33 - image we're going to use this one
110:35 - because it gives us a reference to the
110:39 - Swift UI image view which allows us to
110:42 - add some additional modifiers to it if
110:44 - we want to like tweak the corners we
110:46 - want to tweak the aspect ratio we can do
110:48 - that and placeholder allows you to
110:51 - specify what to show
110:53 - while that background worker is grabbing
110:55 - the image data so we're going to show a
110:56 - spinner and obviously URL is where the
111:00 - uh where should it go retrieve that now
111:03 - because all of these are optional we may
111:05 - not have an image URL so we have to
111:09 - check for that first so we're going to
111:11 - say if let URL equals and we're going to
111:14 - try to create a URL instance off of that
111:19 - string okay and if it is able to create
111:24 - this then we are going to pass this into
111:28 - the async image call or sorry view as a
111:33 - parameter that's where we're going to
111:34 - pass that okay so what is the String
111:37 - again well it is
111:39 - video. snippet do
111:43 - thumbnails medium. URL and if it doesn't
111:48 - exist um then it doesn't exist then we
111:51 - can't show in image so what do we have
111:55 - to do here to provide
111:59 - optional default when the optional
112:01 - contains
112:02 - nil oh okay because it must be a string
112:05 - so yes if any of this
112:10 - part isn't a URL if it cannot create
112:14 - this string then we're just going to put
112:17 - an empty string and try to create a URL
112:19 - and it's going to fail and it's going to
112:21 - not do any of this stuff in here okay so
112:24 - now let's set our async image we're
112:27 - going to use this one right here as I
112:29 - said and we're going to pass in the URL
112:32 - that was created and then we are going
112:34 - to double click here and this is the
112:37 - image this is the reference to the image
112:40 - that will get displayed once the data
112:42 - comes back so this is the image that is
112:47 - displayed and this
112:49 - placeholder we have another handy Swift
112:51 - uiv we can use is progress view which is
112:54 - just going to be a
112:56 - spinner okay so regarding this image
112:59 - right here we definitely want to add a
113:02 - couple of modifiers to it for example
113:06 - resizable um so that it can scale up or
113:08 - down and we want to maintain the aspect
113:11 - ratio so the one that I like to use is
113:15 - well it depends on the circumstances why
113:17 - don't we just try fill for
113:21 - now and we'll see what happens and let's
113:25 - also um give it a little bit of a
113:28 - rounded corner so we're going to do clip
113:30 - shape we're going to say rounded
113:32 - rectangle Corner radius is 10 all right
113:36 - now let's see if this works we're going
113:37 - to go back to feed just double check
113:39 - okay it's going to create instances of
113:41 - video row View and pass in the video and
113:44 - then this should download the
113:47 - images we are not showing the titles
113:49 - here
113:51 - actually all right well that was pretty
113:54 - easy you have to
113:56 - admit just like that we have
113:58 - this if you wanted to display the titles
114:02 - you would um you can either display it
114:07 - well the titles don't depend on the
114:08 - image right so you could put all of this
114:12 - inside a vstack and then put the title
114:14 - underneath for example so we could try
114:18 - to do that here
114:23 - and this would be the title right
114:26 - video.
114:28 - tile and then we can even make it
114:32 - bold is it not title oh sorry snippet do
114:37 - tile and if it doesn't exist we'll show
114:41 - empty
114:45 - string yeah so we can left align it we
114:48 - can add some padding for example
114:55 - leading and then you could add just some
114:59 - padding overall or just maybe just to
115:03 - the
115:12 - vertical okay the corners are a little
115:15 - bit to rounded for my
115:18 - liking so we'll just do
115:21 - five all right and that's how easy it is
115:24 - to do
115:26 - that all right our feed view looks
115:28 - pretty good all we need to do is allow
115:30 - users to tap on the thumbnails to watch
115:32 - the video now you do know what I'm going
115:34 - to ask you right if you've been enjoying
115:36 - this build please give this video a
115:37 - thumbs up and if you've been following
115:39 - along and you are able to get your
115:41 - thumbnail images to show up please
115:43 - comment down below piece of cake all
115:45 - right thanks for watching and I'll see
115:47 - you in the next lesson in the last
115:49 - lesson we finished the feed view if you
115:51 - missed that lesson check out the entire
115:53 - playlist right over here in this lesson
115:56 - we're going to allow the user to tap on
115:57 - the thumbnail to show up the detail View
115:59 - and to watch the video Let's Dive Right
116:02 - In so we already stubbed out the video
116:05 - detail view let's start by triggering
116:07 - this and showing this as a sheet when
116:10 - the user Taps on a video how are we
116:12 - going to do this so there is
116:15 - a sheet that you can bind to a property
116:22 - up here that you can Define which we are
116:25 - going to Define as selected video so
116:27 - when the user Taps on a video row we're
116:30 - going to capture that gesture and set
116:32 - that selected video property which is
116:35 - then going to trigger this
116:37 - sheet and then content is what you want
116:39 - to show on that sheet so let's choose
116:42 - that let's create this state property up
116:46 - here and call it selected video this is
116:50 - going to be nil at first and we're going
116:54 - to bind to the selected video and as for
116:59 - the
117:00 - content um the content so this parameter
117:04 - stores the value of
117:08 - that which is the selected video and
117:11 - here we're going to show the video
117:12 - detail
117:14 - view okay let's capture the tap gesture
117:17 - on this
117:18 - so on tap gesture we are going to set
117:22 - the selected video equals
117:27 - V and let's see if this
117:33 - works all right perfect now the next
117:36 - step let us pass the video details into
117:40 - the
117:41 - sheet so we're going to do that by in
117:44 - the video detail view here let's accept
117:48 - a
117:50 - video again I'm going to blow away the
117:52 - preview and then in the feed view we are
117:55 - going to
117:56 - now pass in V which is the selected
118:00 - video all right so now let's configure
118:02 - this a little bit so we're going to have
118:05 - a sheet to where the top bit is the
118:07 - video player in the bottom bit is the
118:10 - title and description so we're going to
118:13 - need a vstack sort of setup here and
118:18 - let's set the alignment to Leading
118:21 - because that makes sense for the text
118:23 - we're going to have our video player
118:25 - here which we're going to get to and
118:27 - we're going to have the
118:29 - uh title and description here so I want
118:35 - this scrollable in case the content is a
118:38 - lot and inside the scroll view I'm going
118:41 - to create another
118:43 - vstack this one should be alignment left
118:47 - as
118:48 - well I don't know if I need the first
118:50 - one then and in here I want to put the
118:52 - title in the description so this is
118:55 - going to have a piece of text and it's
118:56 - going to be video. snippet do tile and
119:00 - if that doesn't exist I'll put empty
119:02 - string and I'm going to want to make
119:05 - this
119:06 - one a headline font and I'll bold it as
119:10 - well and I'll add some padding to the
119:13 - bottom just to give it a little bit of
119:18 - space you know instead of this I can
119:20 - actually add the spacing here cuz
119:21 - there's only two elements in here so I'm
119:23 - going to add the spacing of 30 right
119:25 - there and so I don't have to put the
119:26 - padding there and then I'm going to put
119:28 - the description so this is going to be
119:31 - video. snippet do description
119:36 - instead um let's see how this
119:45 - looks okay so I've got the title I've
119:48 - got the description but I need to add
119:51 - some some
119:52 - padding I'm going to add the padding to
119:55 - the scroll view um should I do only
120:00 - horizontal no probably I'll add it in
120:02 - all
120:07 - directions all right so that looks a
120:10 - little better oh scroll indicator let's
120:12 - get rid of that
120:14 - too scroll indicator
120:18 - hidden okay
120:23 - all right no scroll indicators this
120:25 - looks
120:26 - good I hope you're enjoying the lesson
120:28 - so far now just in case you want to
120:30 - launch your own app I want to tell you
120:31 - about cdub C+ this step-by-step program
120:34 - will help you launch your own app even
120:36 - if you don't have any experience and it
120:38 - takes about 4 months if this sounds like
120:40 - something you're interested in I have a
120:42 - special offer for you I'll leave the
120:44 - link in the description below this video
120:47 - and hopefully I'll see you there if not
120:49 - no worries I really appreciate that
120:50 - you're here watching this lesson and
120:52 - learning with us so thank you for that
120:54 - anyways now back to the lesson now I do
120:56 - want to spend a moment and talk about
120:58 - what options we have when it comes to
120:59 - displaying YouTube videos in our app now
121:02 - we could use a web View and display an
121:05 - embedded um YouTube
121:08 - video but they also have a client
121:11 - library for us to use um how to embed
121:15 - YouTube videos in iOS applications with
121:17 - the YouTube helper Library essentially
121:19 - they're doing the same thing but they're
121:21 - making it because they're using an
121:22 - iframe player they're making it a little
121:24 - easy for you but this uses Objective C
121:27 - so this is an option as well which is a
121:31 - little easier than showing your own web
121:33 - View and trying to put the player like
121:36 - the actual web embed code in
121:39 - there um the third option which I
121:42 - explored was to use YouTube player kit
121:46 - and this Library worked really well with
121:50 - swiftui it was really easy to use and
121:52 - honestly saved a lot of time so I didn't
121:54 - even consider the other options and this
121:57 - is what we're going to be using with
121:59 - this demo so this library from Sven
122:02 - seems pretty active as you can see here
122:04 - last issue was closed two days ago and
122:06 - the last poll request was merged about a
122:08 - month ago as with any thirdparty
122:11 - libraries when you use them you're
122:13 - creating a dependency for from your
122:15 - project to depend on third party code
122:18 - and the risk is that that thirdparty
122:21 - code
122:22 - becomes out ofd it's not maintained and
122:25 - it becomes buggy and then that affects
122:27 - your app so there is a sort of risk
122:31 - reward consideration here on one hand
122:35 - you could roll your own and even
122:37 - depending on this Library itself is
122:40 - third party code I mean rolling your own
122:42 - would be the best thing but that would
122:44 - take the most effort and take the most
122:46 - time versus using a third party Library
122:49 - saves you a ton of time and you you have
122:52 - to gauge whether or not it's worth the
122:54 - risk in this case um this was really
122:57 - easy to use and it worked beautifully in
122:59 - Swift UI seems active I think the risk
123:01 - is low so that's why I decided to use
123:04 - this all right so let's dive in and
123:06 - integrate this YouTube player kit into
123:08 - our project let's hit this blue button
123:11 - saying use this package and we can use
123:14 - Swift package manager to directly import
123:18 - it into our project now you know how in
123:21 - lesson two we created a demo project to
123:24 - test out sending Network requests and
123:27 - receiving responses from the YouTube
123:28 - data API this would be a perfect
123:31 - opportunity to do the same whenever I'm
123:34 - trying something new start a new exco
123:36 - project test it out if it works put it
123:39 - into your main project I've done that so
123:42 - I'm not going to go through that again
123:44 - with you and then spend an extra lesson
123:46 - doing that what I'm going to do is just
123:48 - directly put it into my main project but
123:51 - in the future when you're working on
123:53 - your own stuff I'm just letting you know
123:55 - you might want to consider not uh
123:57 - especially because we're not using
123:59 - Source control here if you are playing
124:01 - around with your code you're importing
124:03 - things and you mess something up it's
124:04 - hard to roll back right so definitely
124:07 - test things out in a different project
124:09 - first with that said let's import this
124:12 - directly into our um our thing so go to
124:16 - file add package dependencies and I
124:19 - copied that URL we're going to just
124:21 - enter it right there and there it is
124:23 - YouTube player kit you can go ahead and
124:26 - hit add package and while that's going
124:28 - on let's come back here and scroll down
124:30 - and take a look at how we use this thing
124:33 - so looking at this code snippet you
124:35 - import YouTube player kit first and then
124:38 - you create the YouTube player View and
124:41 - it looks like you just pass in the URL
124:44 - just like that so as an initial test why
124:47 - don't we just do exactly this so we're
124:49 - going to copy that going to go back here
124:53 - oh okay let's add package there it is so
124:57 - in the uh video detail view we're going
124:59 - to import YouTube player kit and then
125:03 - under video player we're just going to
125:05 - plop it in right
125:08 - there and we are going to run this now
125:11 - and see what
125:17 - happens all right so it's good it's
125:20 - showing a video but notice that the
125:22 - frame is much larger larger than the
125:25 - space that we
125:26 - have it plays that's
125:31 - great okay so the the controls are there
125:35 - the video itself is
125:38 - uh it doesn't look wider than the space
125:41 - that we have it looks like it's fitting
125:44 - the width
125:46 - however it does look like there's a lot
125:49 - of black space at the top and the bottom
125:52 - because when you load this
125:55 - up it takes up so much height so we
125:58 - might have to set the width um just set
126:01 - the frame for this so that it fits in
126:02 - the space that we have and also we don't
126:06 - want to be displaying this video so why
126:08 - don't we try inserting our own ID into
126:11 - here
126:14 - dynamically so this would be video
126:19 - dot snippet
126:22 - but as you can see there's something
126:23 - wrong here because as I'm trying to do
126:25 - this it is not working right the
126:28 - autocomplete is not showing
126:32 - up so we actually cannot do it this way
126:35 - we can't just insert a wild card into a
126:38 - parameter like
126:40 - this why don't we take a look at some
126:43 - other methods that we can use this and
126:45 - perhaps that would work for us
127:02 - okay so this is ultimately what I ended
127:05 - up using right here so you can configure
127:09 - the YouTube player like this first where
127:12 - you can actually pass in a dynamic video
127:16 - ID and then you would um then you could
127:20 - use that video player View
127:22 - so let's copy
127:26 - this and instead of well let's configure
127:30 - it
127:34 - here okay and then we are going to add
127:38 - our ID there so this would be video.
127:42 - snippet
127:44 - dot uh resource id. video ID and if that
127:49 - happens to be nil we'll pass an empty
127:51 - string and I don't want it to autoplay
127:53 - so I'm going to set that to
127:55 - false and then with this
127:59 - configuration if you go back to this
128:01 - page you can see that you can just pass
128:06 - in this configuration into
128:11 - the the YouTube uh player
128:19 - view yeah so it looks something like
128:21 - this this is what we did we we
128:23 - configured something and then we we can
128:25 - pass it into the YouTube player view
128:27 - like that I forgot exactly the snippet
128:30 - of code when I was
128:32 - looking through
128:37 - this but yeah if you take the time to
128:40 - read through that there's a lot more
128:42 - cool stuff that I can do but I'll just
128:44 - show you how to do it here so when you
128:47 - create the configuration like that this
128:49 - is YouTube player you can even call it
128:51 - like
128:52 - okay so instead of specifying the URL
128:55 - right
128:56 - here we can actually pass
129:00 - in the YouTube player the thing that we
129:05 - created up
129:07 - here so I'm going to run it and this
129:09 - allows us to specify that Dynamic ID so
129:13 - there's my video it's still the frame
129:15 - isn't working properly
129:18 - right okay but it is is displaying the
129:22 - correct video and it is
129:25 - working right and so perfect now we need
129:28 - to figure out how we can set
129:31 - this frame for this video player so that
129:34 - it fits in the
129:35 - space so you would just go frame and you
129:39 - would set set a width and height the
129:41 - problem is that we need to know what
129:44 - that is so using geometry reader we can
129:48 - take a look at how much width we have
129:53 - and we are essentially going to create
129:55 - the geometry reader up
130:01 - here and we are going
130:06 - to cut the whole vstack and we're going
130:09 - to paste it inside the geometry reader
130:12 - and now because this vstack is inside
130:15 - the geometry reader here we have access
130:18 - to proxy so the width is going to be
130:22 - proxy do size. width and that gives us
130:26 - the width of the screen because geometry
130:28 - reader the purpose of this is to um is
130:32 - to read the size
130:33 - information and so this parameter gives
130:38 - us the you a reference to the sizes now
130:42 - that we have the
130:44 - width we can make sure that it is the
130:46 - proper width but we have to set a proper
130:49 - height as well
130:51 - and so only setting the width is not
130:53 - going to work the question is what
130:56 - should we set the height to and how do
130:58 - we figure that
130:59 - out well we can express the height as a
131:04 - ratio of the width we need to figure out
131:07 - for these YouTube videos that get
131:09 - displayed what is the aspect ratio and
131:12 - one clue that we have is if we go back
131:16 - to uh I can open up proxy man again but
131:19 - essentially I want to figure
131:22 - out let's just comment this out for a
131:25 - second what is that ratio between the
131:28 - width and the height there are various
131:30 - ways to get
131:31 - this
131:33 - but all right let's take a look at this
131:36 - I'm going to get the clue
131:37 - from the thumbnail
131:40 - sizes so we take a look at the items and
131:43 - we take a look
131:46 - at the thumbnails we did the medium one
131:49 - right so 320 by 180 so if the width is
131:54 - 320 then what is the
131:57 - height
132:00 - um 320 /
132:04 - 180 the ratio is the width is
132:09 - 1.78 sorry 7 yeah 78 times larger than
132:14 - the height so we would reverse that in
132:17 - order to get the height because we have
132:19 - the width so we would divide
132:23 - 320 by that in order to get 180 let's
132:28 - see if the math works out so 320 /
132:34 - 17778 gives us
132:37 - 180 so that's how we're going to get the
132:39 - height so coming back here if proxy um
132:44 - geometry reader is going to give us the
132:46 - width then we can calculate the height
132:49 - by taking proxy do size. width divided
132:55 - by
132:56 - um sure what yeah
132:59 - eight um let's take a
133:04 - look so this should
133:07 - work and sure enough we have the
133:10 - appropriate width and
133:14 - height the cool thing was that this was
133:17 - this would
133:18 - also work like this if we um especially
133:22 - if we ignore safe area
133:24 - so
133:28 - let's that's why you see this part
133:31 - here so if we go back to the home view
133:35 - we can
133:36 - say
133:39 - um
133:41 - ignore safe
133:44 - area this might get it to
133:47 - go you
133:49 - know there that padding there though so
133:52 - I don't want to add that padding
133:55 - there I do want the tab view to be full
133:59 - perfect but now we need to add a padding
134:01 - to the um the feed
134:04 - view we'll probably put it in
134:11 - here uh let's put the padding
134:24 - oh probably just padding
134:32 - horizontal okay all right our YouTube
134:35 - player app looks and feels pretty good
134:38 - if you enjoyed this build please give it
134:39 - a thumbs up and if you were able to
134:41 - complete it please comment down below I
134:43 - did it now check out our other app
134:45 - builds and series here on YouTube or if
134:47 - you want a structured learning path
134:49 - proven by thousands of students check
134:51 - out our CWC plus program down in the
134:53 - description below all right thanks for
134:55 - watching and I'll see you in the next
134:57 - video series hello I just want to say
134:59 - thank you for following Along on this
135:01 - YouTube API app series I hope you got
135:04 - the project working and if not you can
135:05 - download my project in the description
135:08 - below there will be a link to it more
135:10 - importantly though I hope you are able
135:12 - to learn something and to gain
135:14 - confidence in your own skills now I want
135:16 - to let you know about a few more
135:18 - features that I've added to this app
135:20 - I've added an onboarding sequence where
135:22 - you can add as many slides to it as you
135:24 - want a newsletter signup tab that
135:26 - connects to your external email list
135:28 - management software an about Tab and
135:31 - lastly a reusable settings tab with
135:34 - functionalities such as write the app
135:36 - share the app submit feedback and
135:38 - privacy policy these extra lessons for
135:40 - these features are available in my CWC
135:43 - plus membership and in addition to these
135:45 - extra lessons you're also going to get
135:47 - access to all of the training and
135:49 - one-on-one personalized help if you're
135:51 - interested in getting more information
135:53 - about CWC Plus or potentially enrolling
135:56 - I've got a special offer for you in the
135:58 - description below the video you're going
136:00 - to find a link about that now whether or
136:02 - not you enroll inside CWC plus I really
136:05 - appreciate you learning with me and
136:08 - thank you so much for putting your trust
136:09 - in me I look forward to seeing you again
136:12 - in my next app series