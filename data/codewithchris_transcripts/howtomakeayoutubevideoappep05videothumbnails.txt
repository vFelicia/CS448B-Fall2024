00:03 - hey coders what's up Chris here and this
00:07 - is episode five of how to build a
00:09 - YouTube video app in the previous lesson
00:12 - we had displayed the video titles in our
00:14 - scrollable list otherwise known as a
00:16 - table view and in this lesson what we're
00:20 - going to do is display the image
00:22 - thumbnails in this table view so
00:26 - remember in the video model how our
00:29 - video objects have a video ID well we're
00:32 - going to need to use this ID to get the
00:34 - thumbnail image I want you to take a
00:36 - look at this URL I've gotten in this
00:38 - browser window so notice that the video
00:42 - ID is in this URL here if I put a
00:46 - different video ID in here it's gonna
00:48 - give me another thumbnail for that video
00:50 - so this is what we're going to use so
00:53 - I'm just going to copy that but actually
00:55 - before we need to use that let's jump
00:57 - into the storyboard and we're gonna have
01:00 - to add an image view into this prototype
01:03 - cell well how tall should the cell be if
01:07 - we take a look at that browser window
01:08 - again we notice that this thumbnail is
01:10 - 320 by 180 so we can use that as a
01:14 - starting point let's say 180 is the
01:16 - height so we go to the table view right
01:19 - here click it in your document outline
01:21 - and then on the right hand side you see
01:23 - this row height we can change that to
01:25 - 180 and that's going to make it a little
01:28 - taller but we're gonna find out later
01:30 - that depending on the screen size of the
01:32 - device this app is being run on it's not
01:35 - going to work out but let's just put it
01:37 - at 180 now just so we can see the
01:40 - thumbnail itself and down here in the
01:43 - object library remember to be in this
01:45 - tab right here I'm gonna search for the
01:47 - image view and I'm just going to drag it
01:50 - into our prototype cell and then now
01:52 - we're going to have to add some
01:54 - constraints to it to make it hug all of
01:56 - the edges of the cell so make sure you
01:58 - have your image view clicked click this
02:01 - guy right here
02:02 - uncheck constrain - margins and then
02:05 - let's add all four edges
02:07 - let's go 0 0 0 and 0
02:11 - and then add these four constraints
02:12 - click this guy to update frames and then
02:15 - we're gonna see it huh get there and
02:17 - then you're gonna click the image view
02:19 - and go over to this tab here in the
02:22 - inspector because we want to change the
02:25 - tag number for this element its default
02:28 - to zero but we're gonna change it to one
02:30 - and you're gonna see why a little later
02:31 - on okay so now let's go to the view
02:34 - controller we're ready to download that
02:36 - image and display it on to the cell I'm
02:40 - scrolling down to here cell for row at
02:42 - index path right now we grab a reusable
02:46 - cell we get the video title right from
02:49 - the video object that it's trying to
02:50 - display that's this guy right here
02:52 - videos array and then we pass an index
02:55 - path dot row and we get back to video
02:57 - object that we want to display and then
02:59 - we access the video title property and
03:01 - then lastly we assign that into the
03:04 - label the default text label of the
03:06 - prototype cell okay so now what we want
03:10 - to do as well is construct the video
03:17 - thumbnail URL okay and that's going to
03:21 - be a string like this we're gonna
03:23 - construct this string with the video ID
03:26 - for the video we want to show and then
03:28 - we're going to create an nsurl object
03:33 - and in iOS when we work with downloading
03:35 - data and URLs we do it with this nsurl
03:39 - class which represents a URL to a
03:41 - resource and then we're going to pass in
03:44 - that URL object into an nsurl
03:49 - request object and then finally we
03:54 - create an nsurl session and then we
03:59 - create a data task and pass in the
04:04 - request so at a high level those are
04:07 - kind of the steps that we're going to
04:08 - take just simply to download the image
04:12 - from this URL so try not to get lost
04:15 - I'm I'll go slow and I hope you can
04:17 - follow along so first of all let's
04:19 - construct the video thumbnail URL so let
04:22 - video URL string equals let's copy this
04:30 - again and I'm going to break it up
04:33 - though that plus I want to pass in the
04:39 - video ID here
04:40 - I'm just constructing the string because
04:43 - the video ID is kind of in the middle so
04:45 - I'm taking this part plus the video ID
04:48 - plus this part to create the full string
04:51 - so the video ID is let's go videos array
04:55 - and then we pass in index path dot Rho
04:58 - dot video ID plus this last part here
05:08 - like that make sure you've got the slash
05:10 - and the slash here okay now we're gonna
05:15 - create an nsurl object let video
05:19 - actually this should be video URL this
05:21 - free video lets a video thumbnail URL
05:25 - string video thumbnail URL equals nsurl
05:32 - create a new nsurl object and it has an
05:36 - initializer with string here where we
05:39 - can pass in this guy like that now let's
05:44 - create an nsurl object now so let
05:47 - request equals NS URL request and it's
05:53 - got an initializer where you pass in an
05:55 - nsurl
05:57 - so we're going to use that so we're
06:00 - gonna pass in this guy right here
06:03 - however the nsurl constructor here it
06:07 - creates a optional NS URL so that means
06:12 - if it's not successful in creating this
06:14 - object it's gonna be a nil value whereas
06:17 - this expects an actual nsurl object so
06:21 - I'm just going to put an exclamation
06:24 - mark there that unwraps
06:25 - this guy so if it turns out that it
06:28 - cannot create this nsurl
06:30 - object and video thumbnail URL is nil
06:33 - this probably is won't be a
06:35 - thing but if you wanted to you could add
06:38 - a check just before you do this part
06:40 - you're gonna add a check that the nsurl
06:44 - object actually does exists there you
06:46 - know what we can actually do it really
06:48 - quickly here so let's just use a simple
06:50 - if check if video thumbnail URL is not
06:54 - equals to nil then we do all of this
06:58 - stuff otherwise we we don't even try to
07:02 - download the image okay so let's create
07:05 - an nsurl session let's session equals
07:08 - nsurl session dot shared session and
07:13 - it's going to return a shared session
07:14 - object that we're going to use
07:16 - throughout the whole app and here we're
07:19 - going to say let data task equals
07:23 - session dot data task with request
07:27 - there's a couple of them make sure you
07:29 - choose this one because this one allows
07:31 - you to pass in an nsurl request which we
07:34 - have and also specify a completion
07:38 - handler which means it lets us execute
07:40 - some sort of code when the image data
07:43 - has been downloaded which is exactly
07:45 - what we want so for the request let's
07:48 - pass in this guy right here and for the
07:51 - completion handler all you need to do is
07:54 - just double click it and it's going to
07:56 - create that block for you so it added
08:00 - some code you can see here code is what
08:03 - we would write what we want to happen
08:05 - after the data has been downloaded and
08:07 - here you see three parameters that where
08:10 - we can access the data so this is the
08:13 - data that's been downloaded this is the
08:16 - response that the server returned and
08:18 - and here would be an error if there was
08:21 - an error so I'm gonna double click each
08:22 - of these like that and I'm just gonna
08:27 - give them all a name so I'm gonna call
08:29 - this data I'm just gonna call this
08:32 - parameter response I'm gonna call this
08:34 - one error
08:38 - okay so here within this completion
08:42 - block we do have the image data in here
08:47 - okay so here we want to get a reference
08:53 - to the image view element of the cell
08:59 - create an image object from the data and
09:03 - assign it into the image view alright so
09:09 - how we do that is remember back here in
09:12 - the storyboard we gave this image view a
09:14 - tag of one that's gonna come into play
09:17 - here
09:17 - so we're going to say let image view
09:20 - equals cell remember this is the cell
09:24 - that we got up here cell dot view with
09:29 - tag and we're gonna pass them one so
09:32 - this method retrieves the element with
09:35 - that tag but it doesn't know what sort
09:37 - of element it is so we have to assign it
09:40 - we have to tell it essentially using
09:42 - this as exclamation mark UI image view
09:46 - so that's what we're we're telling Xcode
09:49 - it is so now that we have the image view
09:52 - element here let's assign image view dot
09:57 - image equals UI image we're gonna create
10:00 - a new UI image object and we're gonna
10:03 - say use this one initializes it returns
10:06 - the image object with the specified data
10:08 - so you can see data up here is an
10:10 - optional type meaning that data could be
10:13 - nil we're actually going to just unwrap
10:16 - it like that and pass it in so this kind
10:19 - of completes everything just to recap we
10:24 - are constructing the video thumbnail URL
10:27 - we are creating an nsurl with that
10:30 - string well here we're checking to see
10:33 - if there is an nsurl object that has
10:35 - been created with this and if there is
10:38 - we're creating a request with it and
10:40 - then we're creating we're getting the
10:42 - shared session and then from the session
10:45 - we're creating a data task and passing
10:47 - in the request and finally we're
10:49 - specifying some code to happen
10:51 - when the image data has been downloaded
10:53 - now one thing I want to mention is that
10:55 - this data task with request method is
10:59 - going to fire off this request and it's
11:01 - gonna download the image data in the
11:03 - background so it's a background worker
11:05 - or a background thread that is doing
11:07 - that sort of work when it's done we
11:11 - don't actually want to be updating the
11:13 - user interface from the background
11:16 - thread because that causes all sorts of
11:18 - issues as a best practice you always
11:21 - want to be updating the UI from the main
11:24 - thread so what we can do is kick this
11:27 - code back to the main thread to execute
11:29 - so you can think of it as the main
11:31 - thread is firing off this request and
11:35 - this work to the background thread to
11:37 - download the image data in the
11:39 - background and then when the background
11:40 - thread is done downloading that data
11:42 - it's going to kick back this work to
11:45 - update the UI it's gonna kick that work
11:47 - back to the main thread so here's how we
11:49 - do it we write this patch underscore
11:54 - async and we're going to use this
11:57 - submits a block of a synchronous
11:59 - execution on a dispatch queue and
12:01 - returns immediately so in here queue
12:04 - we're going to specify the main thread
12:06 - as the one we want to dispatch this work
12:09 - to so we're gonna write dispatch oops
12:14 - dispatch get main queue okay so it
12:19 - returns the default queue that is bound
12:20 - to the main thread so it's going to put
12:23 - that work in the queue for the main
12:25 - threat to execute and for this block
12:27 - this is where we're gonna specify the
12:29 - code we want to kick back to the main
12:30 - thread so click this to open up a block
12:33 - and we're just going to cut this code
12:36 - command X and then paste it inside the
12:39 - block command D so now it's going to
12:43 - take this and then dispatch it for the
12:46 - main threat to execute okay and last but
12:48 - not least we need to kick off the data
12:51 - task right here we've just merely set up
12:54 - the data task but to kick it off all we
12:57 - need to do is go data task dot resume
13:01 - okay so now we should be ready to go so
13:05 - command-r I'm gonna run the app okay so
13:11 - you do see the image data behind this
13:13 - label you see these white squares that's
13:16 - just the label that's blocking it here
13:19 - we set the the default text label and we
13:22 - set the video title to it so the label
13:25 - has a white background so we can either
13:27 - set that background to clear but you
13:29 - know what we're not going to be using
13:31 - this default label anyways so what I'm
13:33 - going to do is just I'm gonna delete
13:35 - this line for now and we're not gonna
13:39 - have a label for now so I'm gonna save
13:41 - it and rerun it okay so now we actually
13:46 - see our video thumbnails so I'm gonna
13:49 - stop the app I'll show you like it looks
13:51 - stretched right if we go back to the
13:54 - storyboard and we click the image view
13:55 - and then in the mode it says scale to
13:58 - fill so that's why it's stretching we're
13:59 - going to change that to aspect to fit so
14:02 - it's gonna maintain the aspect ratio and
14:05 - it's going to try to fit it so now you
14:07 - see these these borders here for the
14:11 - iPhone 6s if we go a smaller screen and
14:15 - we just do iPhone 6s and I run it you're
14:19 - gonna see that the margins on the left
14:21 - and right are a little slimmer and then
14:25 - if I show you the 5s oops
14:32 - that's similar is hiding behind okay so
14:36 - I'll show you the 5s you can see that
14:38 - the thumbnails fit exactly so that means
14:41 - that we can't specify a row height like
14:45 - this time statically like if we put 180
14:48 - here it's not gonna work for all screens
14:50 - instead what we want to do is calculate
14:52 - the width of the view to see how much of
14:56 - a height we should set for it okay so
14:59 - I'm gonna go into the view controller
15:01 - there's actually a table view delegate
15:04 - method that we can set the height for in
15:06 - code so maybe up here above number of
15:12 - rows in section I'm going to write table
15:14 - view
15:16 - and and there's a delegate method called
15:19 - height for row at index path so kind of
15:22 - like cell for row at index path except
15:24 - this is the height for row at index path
15:26 - so you return the height for the cell
15:29 - that it's asking for or for the row that
15:30 - it's asking for so here we want to
15:32 - calculate the width of the screen to
15:38 - let's say get the width of the screen to
15:41 - calculate the height of the row so here
15:46 - we want to say self dot view dot frame
15:50 - thoughts size dot width and that's going
15:53 - to give us the width of the view next we
15:57 - want to divide this by 320 so I'm just
16:01 - going to use this aspect ratio 320 by
16:03 - 180 right so the width divided by 320 to
16:10 - see what's the multiplier you know we're
16:12 - comparing the two widths and then using
16:15 - that multiplier we're gonna multiply
16:17 - that by 180 which is the height to give
16:20 - us the new height and I'm gonna return
16:23 - this so now if I run the app again you
16:28 - can see that it still looks fine on the
16:29 - 5s but let's show you what it looks like
16:32 - on the 6s
16:39 - so it's still see it calculates the
16:41 - height dynamically and let's show you
16:44 - what it looks on the 6s plus so
16:52 - everything looks good
16:53 - although these thumbnails I wish they
16:56 - were in a higher resolution so it
16:57 - wouldn't be so blurry on a bigger screen
16:59 - in the next lesson we're going to add
17:01 - the label for each of the cells thanks
17:04 - for watching everyone and I'll see you
17:06 - guys tomorrow at 12 p.m. Eastern bye for
17:08 - now