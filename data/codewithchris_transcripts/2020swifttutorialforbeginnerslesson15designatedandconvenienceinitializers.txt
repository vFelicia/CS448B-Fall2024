00:00 - hello and welcome to my Swift tutorial
00:01 - series for beginners in this video we're
00:03 - going to revisit initializer methods and
00:06 - I'm going to tell you about designated
00:07 - versus convenience initializers so let's
00:10 - get started so here I've got a person
00:17 - class and all it has is one property
00:20 - called name which is initialized to the
00:24 - string none remember when we talked
00:26 - about classes and default initializers
00:29 - all classes will have a default init
00:33 - initializer that's why I can create a
00:37 - new personal object like this it's
00:39 - actually calling the default initializer
00:42 - now I told you that the purpose of the
00:45 - initializer method was to make sure that
00:47 - that object is set up and ready to go
00:50 - now in addition to allocating memory and
00:53 - doing all of the other things that it
00:55 - needs to do to create that object and
00:57 - return it to us another job of the
01:00 - initializer method is to make sure that
01:01 - all the properties of that object are
01:04 - initialized and let me show you what
01:07 - that means right now so for example in
01:10 - this person class I have a name property
01:13 - it's initialized with this piece of data
01:17 - none now let's say I create an optional
01:21 - let's say not salary let's say net worth
01:26 - or something like that and let's make
01:30 - this an optional integer and that is
01:35 - also already initialized to nil because
01:38 - remember I told you that by default the
01:41 - value is nil 4 optionals now I can also
01:45 - say gender let's make this an optional
01:51 - string that is already unwrapped now
01:54 - this is also initialized to nil so right
01:59 - now by default all of the properties of
02:02 - the person class are already initialized
02:04 - so that's why I can create a person
02:08 - object like that without a problem
02:12 - but let's say that one of the properties
02:14 - is not initialized now let me show you
02:16 - what that looks like for example for
02:18 - name I can say that it's gonna be a
02:21 - string type but I can not assign it any
02:25 - value right then it's gonna start to
02:28 - complain and say that hey your person
02:31 - class needs to have an initializer
02:34 - explicitly where you initialize the name
02:37 - property so in this case what we do is
02:41 - we do an it and then we assign a value
02:47 - to that property right because this is
02:51 - not an optional right if it isn't
02:54 - optional then that's a different story
02:55 - it it is initialized to nil but when you
02:59 - just say that it's a name property and
03:01 - it should contain a value right this is
03:04 - the string datatype it should contain a
03:06 - string value and you're not assigning a
03:09 - value to it then it falls on the
03:12 - initializer method to give it a value
03:15 - before that object gets passed back to
03:19 - you when you create a new person object
03:20 - so I can show you let's say let a equals
03:25 - new person object and then I can print a
03:27 - dot name I can show you what that is
03:32 - alright it's not because when we create
03:35 - this new person object it's calling this
03:39 - initializer and it's initializing this
03:42 - name property to none you can also try
03:45 - to print net worth for you and you'll
03:50 - see that it's going to be nil now these
03:54 - initializer methods which ensure that
03:57 - all of the properties are initialized
04:00 - you know we're just calling them
04:02 - initializer methods but the proper name
04:03 - is designated initializer and these
04:07 - designated initializer methods can be
04:10 - guaranteed to return that object to you
04:14 - ready to use all of its properties
04:16 - initialized so on and so forth now
04:19 - there's another type of initializer
04:21 - method called a
04:23 - initializer so these convenience and
04:26 - initializer methods are for you to kind
04:29 - of preset some of the properties of that
04:31 - object based on what you need and then
04:33 - that convenience initializer should call
04:36 - a designated initializer just to make
04:38 - sure that all of its properties are set
04:40 - so let me give you an example of what
04:42 - that what that looks like so let's say
04:45 - that this is our designated initializer
04:50 - right because because it makes sure that
04:57 - all properties are initialized and it's
05:02 - ready to go now I can create a
05:04 - convenience initializer by using the
05:09 - convenience keyword like that and let's
05:12 - say I want to create an initializer to
05:15 - create a rich female so let's say that
05:21 - you need to toss in the gender and you
05:24 - need to pass in the net worth or it
05:28 - should be a rich person in general right
05:32 - then I would first of all I would need
05:35 - to call V and it write called the
05:40 - designated initializer to ensure that
05:45 - the object is ready to go set any other
05:52 - properties or custom code to initialize
05:57 - for this scenario so I can say you know
06:03 - self dot gender is equal to whatever
06:06 - gender was passed in and self thought
06:09 - net worth is equal to I forgot to put a
06:13 - type here so let's say that's int all
06:20 - right this myself all right all right so
06:26 - this is creating a
06:31 - person object creating a new rich person
06:37 - object that B equals person and I can
06:43 - use my mail let's change that to mail
06:48 - that right so this convenience
06:55 - initializer just gives me an easy way to
06:59 - create a specific type of person object
07:03 - initialized through some sort of
07:04 - whatever values that I need but it calls
07:08 - the designated one because this is kind
07:11 - of like the steadfast anchor initializer
07:14 - that makes sure that all of its
07:17 - properties are initialized so you can
07:19 - count on it as sort of like the go-to
07:20 - initializer
07:22 - so just to recap designated initializers
07:24 - are those that guarantee all of its
07:27 - properties are going to be initialized
07:28 - and that that object is ready to go for
07:30 - you whereas convenience initializers are
07:33 - optional and they basically give you an
07:35 - opportunity to create an object but
07:37 - preset it to the values that you need
07:40 - like what we did in this case
07:41 - but convenience initializers must call a
07:44 - designated initializer as well just to
07:47 - make sure that everything is set up and
07:49 - ready to go so you can see that we did
07:51 - it here in line 16 so that's the
07:55 - difference between a designated versus a
07:57 - convenience initializer method if you
08:00 - enjoyed this video please give it a
08:01 - thumbs up and please subscribe if you
08:03 - haven't already all right click on over
08:05 - there for the next video and I'll see
08:07 - you there