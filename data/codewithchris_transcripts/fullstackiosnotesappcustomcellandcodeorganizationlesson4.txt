00:00 - hey code crew the ios notes app is
00:03 - pretty much done but there are just some
00:05 - finer details to take care of
00:06 - if you haven't seen the earlier lessons
00:08 - i highly recommend you do that first
00:10 - i'll link to it in the card on the
00:12 - screen or in the description below
00:14 - all right ali over to you right now that
00:16 - we've added all the features like
00:18 - updating deleting adding and reading the
00:20 - notes
00:21 - let's do some cosmetic changes in our
00:23 - actual app
00:25 - so the first thing we want to do is
00:28 - so when i add a note
00:34 - i only see the notes title i also want
00:37 - to see a snippet of the actual
00:39 - note body and i want to see the date so
00:42 - what i'm going to do is i'm going to
00:43 - open the main storyboard
00:46 - and
00:50 - in my prototype cell i'll make it a bit
00:52 - bigger
00:53 - and i'm going to add first a label
00:57 - actually before i add a label i'm going
00:58 - to add in
01:00 - a horizontal stack view or sorry a
01:03 - vertical stack view
01:06 - and i'll drop in my prototype cell and
01:09 - then i'm going to make it
01:10 - fit in my cell and what i'm gonna do is
01:14 - i'm gonna constrain it to all sides
01:16 - so the zero zero zero zero and this will
01:19 - stretch it across my actual
01:22 - cell now the next thing i want to do is
01:25 - i'm going to drop
01:26 - in three labels so i'll drop in
01:29 - a label and i'll drop in another label
01:34 - and i'll drop in one more label
01:38 - now i'm going to go to my stack view and
01:41 - in the identities
01:42 - i'm going to make the alignment or sorry
01:45 - the distribution fill equally
01:48 - so now it all my items are equally
01:50 - filled so the top one is going to be my
01:52 - title
01:53 - the middle one will be the note and the
01:55 - bottom one will be the date
01:57 - so now what i can also do is go to my
02:00 - labels
02:01 - and i'll just center them
02:05 - and then for the title i'll make
02:08 - the size a bit bigger i'll make it maybe
02:10 - 20
02:11 - or 22 and i'll make it bold
02:17 - and then for the note i'll make it 20
02:21 - and regular
02:24 - and then for the date i'll make it 17
02:27 - and thin
02:28 - so we can just use them like that
02:34 - also where it says truncate we can
02:36 - truncate the tail which is fine
02:38 - but you can also truncate the middle and
02:40 - head and i can show you what those do
02:42 - when you actually start seeing the notes
02:44 - up here so if we run our app right now
02:46 - it's actually not going to work
02:50 - so i ran my app and you see that it says
02:53 - here
02:54 - label label label and it says new note
02:56 - so we actually want to put this new note
02:58 - over here
02:59 - where it says label and the way we're
03:01 - going to do that is actually we're going
03:02 - to make a new file
03:04 - so click your folder and click new file
03:07 - and we're going to make a coco touch
03:08 - class this time
03:11 - and we can just call it proto
03:16 - prototype cell
03:21 - or we can call it note prototype cell
03:26 - and this is actually a subclass of
03:30 - and then if you see here ui table view
03:34 - cell so then
03:40 - we'll just call it note prototype cell
03:41 - and it's a sub class of ui table view
03:43 - cell
03:44 - so let's save that and let's save it in
03:47 - our project
03:49 - so now what i'm going to do is split the
03:51 - screen and go to my main storyboard file
03:53 - again
03:55 - and what i'm going to do is i'm going to
03:56 - drag all three of them
03:59 - but before i do that i'm going to click
04:00 - my prototype cell in the
04:03 - hierarchy i'm going to go to the
04:05 - identities
04:07 - and i'm going to make the class note
04:10 - prototype cell
04:12 - so now that it's note prototype cell i
04:14 - can drag these items
04:16 - into my class right here
04:19 - so i'll drag the first item and i'll
04:21 - just call it title
04:24 - i'll drag the second item and i'll call
04:27 - that note
04:29 - and i'll drag the third item and i'll
04:32 - call that date
04:34 - so now go back to my view controller
04:38 - and if i scroll down to where we
04:39 - customize the cell over here instead of
04:42 - writing cell dot text label
04:45 - now i can write cell but before i can
04:48 - write that i have to write
04:49 - as so where it says let cell equal dq
04:52 - reusable cell
04:54 - i'm going to write as and then i'm gonna
04:57 - write note
04:59 - prototype cell so now what that does it
05:02 - tells
05:02 - the swift file or my view controller
05:05 - that the cell
05:06 - is actually a note prototype cell
05:09 - and a noteprototype cell has the title a
05:11 - note and a date
05:12 - and that allows me to customize that now
05:16 - so i'll go back into my view controller
05:19 - and i'll say
05:19 - cell dot in fact you scroll down you
05:23 - should be able
05:24 - to see the there's too many but you
05:26 - should be able to see
05:28 - the actual property so we can say title
05:33 - dot text
05:37 - is equal to let's just say note 1 for
05:41 - now
05:43 - and let's see if that works so we're
05:44 - going to refresh our app
05:47 - and once it builds you'll see that it
05:50 - says note 1.
05:51 - so now we can actually handle the
05:52 - properties of our actual note prototype
05:55 - cell
05:56 - like the title the note and the date
05:58 - through our view controller
05:59 - since we casted ourselves as a no
06:01 - prototype cell
06:03 - so let's just copy this
06:07 - and i'll paste it down here but i'm
06:09 - going to change it from title to
06:12 - note and i'm going to change it to date
06:17 - and now i'm gonna make instead of note
06:20 - one i'll say
06:22 - notes array to the index path
06:26 - dot row dot title
06:30 - and i'll do the same for the rest and
06:32 - i'll just change the title to
06:34 - their respective property
06:39 - so the next one isn't titles actually
06:41 - note
06:43 - and the final one is the date
06:46 - so now if i refresh my app
06:50 - it should actually show all the
06:51 - properties
06:53 - so refresh my app and there i see it
06:57 - i see new note noted and placeholder
07:00 - so i can add another note there's a new
07:04 - note
07:06 - this is a new note
07:09 - once i save this i'll see here this is a
07:12 - new note and
07:13 - placeholder so now we want to change
07:15 - placeholder to the actual date it was
07:17 - created on
07:19 - so we're going to go into our add note
07:21 - view controller right here
07:23 - so in my safe click function i'm going
07:25 - to write let
07:27 - date formatter is equal to capital d
07:31 - date formatter and two round brackets
07:34 - so this will actually create an instance
07:37 - of it'll actually create a date
07:38 - formatter object
07:40 - and date formatters a built-in function
07:42 - in swift
07:43 - that allows us to create dates
07:47 - so now we're going to write date
07:48 - formatter lowercase d
07:51 - day formatter.date format
07:58 - and that equals is the string and the
08:01 - string will be y y
08:03 - y capital m capital m
08:07 - d d and this actually gives me an error
08:10 - because
08:11 - i'm writing date formatter with a
08:13 - capital d
08:14 - so i should use date formatter with a
08:17 - lowercase d
08:19 - because that refers to the object we
08:20 - created here
08:22 - now last thing we can write is let date
08:25 - is equal to date formatter
08:29 - dot string from
08:33 - date with two round brackets so now what
08:35 - this does
08:36 - is first it creates a date formatter
08:38 - object
08:40 - and then it tells that date formatter
08:42 - object that we want our date
08:43 - in the format of year month and day
08:47 - and after that i create a string from
08:50 - that date formatter object which i can
08:52 - then pass in
08:53 - as the arguments to my api function
08:56 - calls
08:57 - so now where we see we were sending
08:59 - placeholder
09:00 - we can just send in date
09:04 - so both of these where i was sending
09:06 - placeholder in my api functions
09:08 - i'll just send in date now just like
09:11 - that
09:13 - so now if this doesn't give me any
09:14 - errors i'll actually refresh my app and
09:16 - see what happens
09:18 - okay so i'm going to create a new note
09:21 - i'll type this is a new
09:25 - note new note
09:29 - and once i save it it should tell me the
09:31 - date i created this on
09:33 - and there we go it says 20 20 0 7 29
09:36 - which means july 29 this note was
09:38 - created
09:40 - now another thing we have to make sure
09:42 - is
09:43 - that the user can enter empty strings
09:46 - and it'll save
09:47 - we don't want to save empty strength
09:49 - because it doesn't make sense
09:50 - so that's pretty easy so instead of
09:53 - using an else statement right here
09:55 - when we're checking that if we're
09:56 - updating or we're creating
09:58 - we'll write else if and we're going to
10:00 - write else if
10:03 - we're going to reference the title text
10:05 - field and the body text view
10:07 - title text field dot text
10:11 - does not equal empty and and
10:16 - body textview.text
10:19 - does not equal empty so that means
10:23 - that if the title text field is not
10:25 - empty and the body text field is not
10:27 - empty
10:28 - only then are we going to save it to the
10:29 - server i'll refresh my app now and i
10:32 - shouldn't be allowed to save empty notes
10:35 - i'll click add note and if i try to save
10:37 - empty note
10:39 - it'll go back but it didn't save
10:42 - so there we are and now let's clear
10:46 - these out
10:48 - because our delete button works
10:51 - and one more thing we can do just to
10:53 - make a bit more responsive
10:54 - is that when i click save it shouldn't
10:56 - go back to the
10:58 - original screen if i haven't
10:59 - successfully saved a note
11:01 - so for example i have an empty i have
11:04 - empty string here an empty string here
11:05 - when i click save
11:06 - it shouldn't go back to the screen so
11:09 - what i'll do is i'll just move this
11:12 - into the actual else if function or the
11:15 - else of body
11:17 - and also copy it and put it in the if
11:19 - statement
11:22 - like that so now if we successfully save
11:25 - only then is it going to go back to the
11:27 - original screen
11:28 - before it went back to the original
11:30 - screen whenever we click the button
11:32 - so now if i run it again
11:36 - i'll see that if i have an empty string
11:38 - and i click the button nothing happens
11:41 - okay so now that our app works there's
11:42 - one last thing we have to do and that's
11:44 - just cleaning up our code to make it
11:46 - more readable and adding some comments
11:48 - so what we're going to do firstly is
11:50 - we're going to review controller file
11:52 - and actually just organize this code
11:54 - so it's more readable and we know what e
11:55 - function does
11:57 - the first thing i'm going to do is move
11:58 - our protocol from the top to the bottom
12:00 - so i'm just going to copy it
12:02 - and erase it and i'll move it to the
12:04 - bottom over the actual extension
12:07 - like that so it just makes more sense
12:09 - and what we can do now
12:11 - is if i write a comment with slash slash
12:13 - i can write
12:14 - mark colon or semicolon dash
12:20 - and i can just say custom delegates
12:24 - so now that actually adds a section to
12:26 - our file called custom delegates
12:28 - so now i can see right here this little
12:31 - section where the custom delegate part
12:33 - starts
12:33 - so if anyone's reading our code or if
12:35 - we're reading our code we know that this
12:37 - is the part where
12:38 - we make our custom delegates so we're
12:41 - gonna do the same for our actual table
12:42 - view delegates
12:44 - so i'm just gonna copy these functions
12:45 - i'm gonna move them underneath
12:47 - so i'm gonna copy and i'm gonna move it
12:49 - to the end of our view controller class
12:52 - so at the bottom of it i'll just paste
12:54 - in that
12:56 - and i'll just clean it up and also write
12:59 - on this slash mark colon
13:03 - dash and i'll say table
13:08 - view delegate
13:11 - table view delegate so now we know these
13:13 - are the functions
13:14 - which actually manipulate our table view
13:18 - and in this we can just say in the
13:21 - actual cell part
13:22 - we can just write instead of in the
13:25 - actual cell bar we can just add a
13:26 - comment saying
13:29 - customizes cell
13:33 - to set date note and
13:37 - title just so we know what these do but
13:39 - it's kind of
13:40 - self-explanatory but it's never it
13:42 - doesn't hurt to add a comment on that
13:45 - the next thing we do is we're going to
13:46 - go to our view will appear and view did
13:48 - appear and view did load
13:49 - and over these i'm just going to add a
13:51 - comment again
13:53 - mark colon dash and i'm going to call
13:55 - these life cycle hooks
13:58 - life cycle hooks because these are
14:01 - different functions that are fired on
14:03 - different parts of the life cycle
14:05 - so for example the view will appear is
14:06 - fired when the view will appear
14:09 - view did appear as fired when the view
14:10 - did appear and viewed load is fired the
14:13 - first time the app
14:14 - runs so since these are different
14:16 - lifecycle hook we can categorize them as
14:18 - life cycle hawks
14:20 - and inside the view will appear we can
14:22 - say we can add a comment saying
14:25 - update the
14:28 - notes array just so we know what's
14:31 - happening
14:32 - and we can do the same for the view did
14:35 - appear
14:36 - and inside the view did load all this is
14:40 - self-explanatory where
14:42 - setting our delegate and we're setting
14:44 - the notes table of your delegates so
14:45 - that you don't need really a comment for
14:47 - that
14:48 - and for ib actions we're actually going
14:50 - to move them at the very top
14:52 - so anything we're importing we want or
14:55 - anything we're importing or initializing
14:56 - we want at the very top of our file
14:58 - and again you can write slash mark
15:02 - colon and we can just call dash
15:07 - initializations
15:10 - so that's our ib outlet and our notes
15:12 - array
15:14 - just like that and we can paste it there
15:16 - to make it cleaner
15:18 - and the last thing we have left is our
15:20 - actual
15:21 - segway so our segway we can again mark
15:25 - it
15:26 - mark cole and dash and i'll just say
15:29 - segway data so it just tells us this is
15:33 - the data we're passing in with our
15:34 - segway
15:36 - and in our actual segway data file i can
15:38 - just write
15:40 - intersect we did a function i can just
15:41 - write passes
15:43 - the note and tells the
15:46 - view controller to
15:50 - update instead
15:54 - of add just so we know
15:57 - what the vc.updatepart does and what the
15:59 - vc.note is equal to notes
16:01 - arraytableviewnote
16:02 - index for selectedrow.rowdus just like
16:06 - that
16:07 - so now we can see that our code is
16:09 - pretty organized
16:10 - so if i wanna if i have a problem for
16:12 - example my table view
16:14 - i'll just scroll down to the table view
16:15 - parts and i can set it over here fix it
16:17 - over here
16:18 - or if my data isn't rendering properly i
16:20 - would go to my custom delegate
16:22 - and see am i getting the right data
16:25 - so now another thing you can do is you
16:28 - can click command
16:29 - a and that'll highlight your whole file
16:31 - and you can click ctrl i
16:33 - and that'll just add some spacing and
16:35 - make sure your indentation is correct
16:37 - so now our actual view controller looks
16:39 - good let's move on to the next file
16:41 - which is our add no view controller
16:44 - so in this again we want to move all the
16:46 - imports and the initializations to the
16:47 - top
16:48 - so i'll just copy the ib outlets and
16:51 - i'll move them to the very top of the
16:52 - file
16:54 - just like that and i'll remove all the
16:58 - spacing between them
17:00 - and also move my var note and update to
17:02 - the top
17:04 - and again we can do slash slash mark
17:07 - colon in dash
17:11 - initialization like that
17:14 - and now after that i'm going to write
17:17 - slash
17:18 - mark colon dash
17:22 - ui buttons so these are all the buttons
17:25 - that fire when
17:26 - left you click something like we have
17:28 - the delete click or we have to save
17:30 - click
17:31 - so again i'm going to remove all the
17:33 - spacing this was a bit more compact
17:37 - and in my actual delete click i don't
17:40 - think we need to add any sort of
17:42 - comments other than this self navigation
17:44 - controller pop view controller
17:46 - so in that one i can just write slash
17:49 - returns
17:50 - the screen back to the
17:54 - main screen
17:57 - and for this one for the safe click we
17:59 - can also write
18:01 - about the date formatter we can write
18:03 - creates
18:04 - a date string that
18:08 - we can pass in to
18:11 - the database
18:15 - and if update is true we can say if
18:19 - the user is updating
18:23 - update denote rather than
18:29 - than saving just so we understand what
18:32 - it does and if we forget
18:33 - or if we open our code after a long time
18:35 - and we forget what these do
18:37 - we'll know that when update is true we
18:39 - want to update something and
18:40 - set our actual safe click to update
18:42 - instead of to add
18:44 - and now after those parts are done our
18:46 - ib outlets are done
18:48 - i'm going to write slash mark
18:51 - and i'll write dash lifecycle hook
18:57 - again these are same life cycle hooks in
18:59 - our view or
19:00 - our view controller our previous one so
19:03 - we have one for
19:05 - view will appear and we have one view
19:08 - did load
19:09 - and again i'm just removing any extra
19:11 - spacing just to make it more compact
19:13 - and then our view will appear in the if
19:15 - update is equal to false part i'll add a
19:17 - comment saying
19:18 - disables the delete
19:22 - button if the user
19:25 - is adding a note
19:29 - and then i can just write in in comments
19:31 - or in brackets i can just write
19:33 - can't delete something
19:37 - that doesn't exist
19:40 - and in my view to load if
19:43 - update is true i can add another comment
19:46 - saying pre
19:48 - populates the text
19:51 - field if the user is updating
19:55 - a note like that and then i'll just
19:58 - remove this comment they added when we
20:00 - created the file
20:01 - and our add note view control is also
20:04 - good and it's very structured
20:06 - so again i'll write i'll click command a
20:08 - control i
20:09 - and then i'll just fix any of our
20:11 - margins or any of our actual spacing
20:13 - problems
20:15 - and the last file we want to actually
20:16 - fix is our api functions
20:20 - and in this we just want to add some
20:21 - comments and again structure it a bit
20:24 - so i can write a buffer struct i can
20:27 - write
20:27 - slash mark
20:32 - dash custom notes
20:35 - struct like that and in our api
20:38 - functions class we can write
20:40 - mark colon dash
20:45 - functions that interact
20:49 - with api it's kind of self-explanatory
20:52 - but doesn't hurt to
20:53 - add the mark keyword just so we can see
20:55 - them clearly because the mark
20:57 - actually adds a dash or a line between
21:00 - the different sections
21:01 - so it's just a bit more visible
21:04 - and now we're gonna write is sets our
21:09 - custom data delegate
21:12 - and over here over static let functions
21:14 - we can just say
21:16 - creates an instance
21:19 - of the class so the
21:22 - other files can interact
21:26 - with it like that in our fetch notes we
21:30 - can write
21:31 - a comment above saying fetches
21:36 - notes from database
21:42 - and here let data is equal to string say
21:45 - converts
21:47 - converts the json
21:51 - converts the response
21:54 - into utf-8 string format
21:58 - in our self delegate update array
22:02 - we can say fires off
22:05 - the custom delegate
22:09 - in the view controller
22:12 - and our add notes we can just say
22:16 - add a note to the server
22:19 - passing the arguments
22:22 - as headers
22:26 - and we can just copy that and we can
22:28 - paste it for our update
22:30 - update and updates a note to the server
22:34 - passing the arguments as headers
22:35 - and finally we can say deletes
22:40 - a note from the server
22:44 - passing the argument
22:48 - passing the notes id as
22:53 - a header again now i'm all i'm going to
22:56 - do is click command
22:57 - a and ctrl i and that'll fix any of
23:00 - spacing issues i have
23:03 - and all three of our files are now very
23:04 - readable and clear
23:06 - now that your app is done and it does
23:07 - what we want to i just want to take a
23:09 - quick second to look at the different
23:10 - technologies and tools we worked with
23:12 - and any notable things we've done during
23:14 - our production of this app
23:16 - so the first thing we did was install
23:18 - node.js mongodb
23:19 - mongoose and express and that allowed us
23:22 - to
23:24 - actually create a server and before we
23:26 - did anything we created a note schema
23:28 - file
23:29 - which defined our actual data object or
23:31 - note data object
23:33 - which held the title a date and a note
23:35 - then we imported this file into our
23:36 - server
23:37 - and then we told our mongodb or to
23:40 - connect with our server
23:42 - using mongoose and then we created four
23:44 - routes a route to create
23:45 - fetch delete and update our notes and
23:48 - the create route
23:49 - just take in the data and it would
23:51 - create a new note object based on our
23:52 - schema
23:54 - our fetchra would just fetch everything
23:56 - from the database and return it
23:58 - our delete route would take in an id and
24:00 - it would delete the item
24:01 - and our updater would take in an id and
24:03 - also takes in the new data which it
24:05 - would update
24:06 - and then we ran our server on our
24:08 - network
24:09 - using our ipv4 address so any device
24:12 - like a physical iphone
24:14 - can also interact with our server and it
24:16 - would work as well
24:17 - and then we go into the x code where
24:20 - firstly we created multiple screens
24:22 - using a navigation controller
24:24 - which actually allowed us to go between
24:25 - different notes so for example when i
24:27 - click add no
24:28 - it shows me the screen and i can go back
24:30 - to my main screen
24:32 - and that was facilitated by the actual
24:33 - navigation controller
24:35 - and then we defined the different
24:37 - properties we needed for our table view
24:39 - so we told how many rows we want and the
24:41 - different data we want inside of our
24:43 - actual table view
24:44 - and we also added a custom note
24:46 - prototype cell
24:47 - so that we could have custom information
24:50 - like our title note and date
24:52 - and then we told our view controller to
24:54 - set those as well
24:56 - the next thing we did was that we
24:57 - created the api functions class
24:59 - and this functions clash would actually
25:01 - interact with our database
25:03 - to fetch add update and delete the notes
25:06 - and notably the fetch row actually had a
25:09 - custom delegate just like how we had a
25:11 - delegate
25:12 - and protocol for our actual table view
25:15 - we had one for our custom class
25:18 - we had one for actual api classic we had
25:20 - one for actual fetchnose function as
25:22 - well
25:23 - so when the server got the data from the
25:24 - fetchnotes what it would do is it would
25:27 - call this update array function which is
25:29 - a delegate
25:30 - and then the update array would actually
25:32 - fire off this function which would just
25:34 - update our notes array
25:36 - and it would decode whatever data the
25:38 - server sent us
25:40 - using the actual note struct we defined
25:42 - as well
25:43 - so we'll take whatever data the server
25:45 - gave to us and it would turn it into a
25:47 - title a date
25:48 - an id and a note object so xcode could
25:51 - actually work with it
25:53 - another notable thing we did was
25:54 - actually send data through segways using
25:57 - our
25:58 - prepare for function so we told that
26:00 - when we click on an actual
26:02 - item in our table view we wanted to
26:06 - send the note so we can pre-populate the
26:08 - data so when i click it i want the data
26:10 - to be pre-populated
26:12 - and i told it that when we save we don't
26:15 - want to add something instead we want to
26:17 - update something
26:18 - and if we go into our add note view
26:20 - controller we also work with the date
26:22 - formatter to create a date based on when
26:24 - the note was created
26:25 - and we converted that to a string so
26:28 - those are the main notable things we've
26:29 - done
26:30 - so this app was actually a good look
26:32 - into server development
26:33 - because we defined a server and we
26:35 - defined a database and we actually
26:36 - interacted with it
26:38 - and on our front end we actually made an
26:40 - xcode app that would actually interact
26:42 - with our server
26:43 - to do certain tasks but you could see
26:45 - how instead of using our xcode app we
26:47 - could actually make a website
26:48 - that would interact with our server
26:50 - because the only thing that was
26:52 - happening which
26:53 - was specific to the iphone was the
26:55 - actual table view
26:56 - everything else was done to the api
26:58 - functions class
27:00 - and these aren't specific to iphone so
27:02 - for example you can make an android app
27:04 - which would be exactly the same
27:06 - and which would interact with our server
27:07 - in the exact same way to update delete
27:10 - add
27:10 - and fetch or you could also create
27:12 - something like a website
27:13 - which would do the same things like
27:15 - fetch add update and delete using the
27:17 - same routes
27:19 - congratulations on finishing the full
27:20 - stack ios notes app
27:22 - i hope it was a fun experience to not
27:24 - only build the ios
27:25 - front-end app but also the back-end api
27:28 - and database
27:29 - now i want to turn over to you do you
27:30 - want to see more full-stack ios app
27:32 - development
27:33 - let me know by leaving a quick comment
27:34 - below and on your way down there if you
27:36 - enjoyed this series please give it a
27:38 - thumbs up
27:38 - and stay tuned make sure you're
27:40 - subscribed oh yeah
27:41 - definitely check out cwc plus if you
27:43 - enjoy this app series
27:45 - for more one day builds and courses on
27:47 - other ios topics
27:49 - i'll leave a link to it on the end
27:50 - screen of this video alright i'll see
27:52 - you in the next one day build