00:04 - hello and welcome in the previous few lessons 
you learned the basics of swift programming  
00:09 - and i showed you how those concepts apply 
to your xcode project now let's get back to  
00:15 - swift ui and views specifically today 
i want to talk about the button view  
00:19 - now before we dive in just in case you're new 
around here hi my name is chris and welcome to  
00:24 - code with chris the place to be if you want 
to learn how to make an app now i have a fun  
00:28 - question for you when did you discover code with 
chris and how long have you been learning with me  
00:34 - i've been doing this for eight years 
and yet it doesn't feel that long  
00:38 - let me know by leaving a quick comment below and 
on your way down there please give this video  
00:42 - a thumbs up it really helps me out thank you so 
much all right with that said let's dive right in  
00:49 - all right so i've got a brand new swift ui 
project here i thought we would take a look at  
00:54 - creating some button instances in a fresh project 
together before we go back to the war card game  
01:00 - to use the button instance there so let's go ahead 
and delete this text view right here and create  
01:09 - some button instances a button is a structure just 
like that text was and we need to create a button  
01:16 - instance in other words we need to instantiate 
a button that's just another way of saying it  
01:22 - so let's go ahead and type button followed by 
opening a left rounded bracket and that's going  
01:28 - to bring up our autocomplete menu there are a 
couple of different initializer methods we can use  
01:34 - to create a button instance and these initializer 
methods remember are just different ways of  
01:42 - creating an instance while passing in some 
data two of the most common ones that you're  
01:47 - going to be using is this one right here where 
you pass in a string and this data type string  
01:54 - protocol just means anything that conforms to 
that string protocol and a piece of text does  
02:00 - this one will allow you to just pass in a 
piece of text to use as the button label  
02:06 - and it will also allow you to pass in a block of 
code to run when that button is tapped on so let's  
02:13 - take a look at these parameters in more detail so 
this first parameter for the label of the button  
02:19 - is pretty straightforward here you just pass in 
a piece of text i am going to call this button  
02:25 - click me and if we update actually our preview 
won't do anything yet before we specify the second  
02:32 - parameter the data type for this action parameter 
is something that you haven't seen yet but it kind  
02:39 - of looks like a function signature without the 
function name right this is called a closure  
02:47 - and simply put you can think of it as a block of 
code or like a function without the function name  
02:55 - you pass in a block of code as a parameter and 
when the button is tapped on it's going to run  
03:01 - that block of code again this is called a closure 
so let's take a look at how we can specify  
03:09 - the closure as a parameter now one of the 
easiest things you can do is you can highlight  
03:15 - this parameter and just hit enter and xcode is 
going to automatically open up a closure for you  
03:21 - to type your block of code in but i'm not going 
to do that right now because i want to go through  
03:26 - the steps and really break it down to you and show 
you what exactly you're specifying and then at the  
03:32 - end i'll show you what happens when you do hit 
enter and just let xcode open the closure for you  
03:38 - let's specify that closure manually for now all 
right so the type of closure that this expects  
03:45 - is the simplest type that you can see it accepts 
no parameters these two brackets right here these  
03:52 - two rounded brackets that is a parameter list 
just like you would have when you're declaring a  
03:58 - function but it's empty so there are no parameters 
and then next you see a dash followed by a greater  
04:04 - than symbol and you know that that means return 
type right and it returns void void means nothing  
04:11 - so it doesn't return anything and it doesn't 
accept anything it's very simply a block of  
04:16 - code all right so now that you know the type 
of function that it's expecting let's go ahead  
04:21 - and specify it so i'm going to delete that and 
i'm going to open up a pair of curly brackets  
04:28 - now i don't need to return anything i don't 
need to specify any parameters it's very simply  
04:33 - just a block of code so you can specify that with 
just a set of curly brackets and in between those  
04:39 - curly brackets you put any code statements 
you want so i'm going to just print out  
04:45 - hello world and that is your completed button 
let's run this project and see what happens
04:55 - okay so we have a button in the middle that says 
click me when i tap on it it runs the closure it  
05:01 - runs the code in the closure and you can see that 
in down there in the console it does print out  
05:07 - hello world every time i click this button alright 
now let's go back to our xcode project because  
05:13 - that's only one way to instantiate a button 
i'm going to add a comment here and call this  
05:20 - button instance with closure okay and then 
i'm also going to put this inside of a v stack  
05:30 - actually i'm going to show you a shorthand a 
cool way to do it i'm going to put in inside  
05:35 - of v stack because i want to show you a couple 
of other ways to create buttons so we're going  
05:39 - to create a couple of buttons together go ahead 
and command click on this button and you can  
05:44 - just simply choose embed in v-stack when you do 
that it puts the element into a v-stack for you  
05:50 - although it it failed to move my comment 
there so let's put that right there all right  
05:57 - so we've got one button and i want to show 
you the same button but with the shorthand  
06:02 - there's something called the trailing closure 
let me show you what that means so button  
06:06 - instance with trailing closure i am going to 
copy and paste the button we just declared and  
06:17 - create another copy of it so if in a parameter 
list the last parameter expects a closure  
06:24 - there is a shorthand and how it works is you take 
that last parameter out of the parameter list  
06:31 - and you simply put the closure after the 
method call let me show you what i mean so  
06:38 - in this parameter list the closure is that last 
parameter right so this is a prime candidate for  
06:45 - a trailing closure shortcut i take 
the closure itself so i'm going to  
06:52 - cut this out of the parameter list and i am simply 
going to add a space after the ending rounded  
07:00 - bracket and then just paste the closure like that 
and then i can go ahead and remove the parameter  
07:08 - label or the argument label out of that parameter 
list like that and these two button declarations  
07:15 - are exactly the same thing it's just that they 
are written differently one is specifying the  
07:20 - closure inside the parameter list and the other 
one is specifying it using a trailing closure  
07:27 - and this is why i wanted to show you this manually 
instead of just letting xcode open a closure for  
07:34 - you because when you let xcode do it it's going 
to recognize that that closure parameter is the  
07:40 - last one and it's going to turn it into a trailing 
closure for you automatically so let me show you  
07:45 - that if i declare another button let's use the 
same one click me and then i tap on that action  
07:53 - parameter and i either double click it or i 
hit enter and let xcode open up the closure  
07:59 - it automatically changes it into a 
trailing closure so i thought that  
08:03 - would be really confusing for you if you'd 
never seen that before and so at least now  
08:08 - you know what a trail enclosure is and why 
you know xcode does this for you okay so that  
08:16 - is just creating one type of button both of these 
ways are to create buttons where you just have  
08:22 - a piece of text as the label but what if you 
wanted your button to be an image or you know  
08:29 - an icon or something like that not just a simple 
piece of text well there is another initializer  
08:35 - method for the button that we can use for that 
so let's take a look at that button instance
08:42 - with um with label view so let's go ahead type 
button open up a bracket and now let's take a look  
08:50 - at this other initializer method with an action 
and label parameter creates a button that displays  
08:56 - a custom label and you can see from the parameter 
list that the first oh let me let me go back to  
09:05 - that autocomplete menu taking a look at this 
parameter list now you can see that this action  
09:11 - closure parameter is the first parameter and then 
the second parameter is a label now for this label  
09:18 - parameter you can return any view that you want to 
represent your button so let's go ahead and choose  
09:25 - this initializer method you can see for the action 
closure right here if i double click it it's not  
09:30 - going to change into a trail enclosure and the 
reason for that is because it's not the last  
09:35 - parameter in the parameter list so that doesn't 
qualify to be turned into a trail enclosure  
09:41 - okay so when this button is tapped again i am just 
going to print out hello world into the console  
09:48 - but for the label you'll notice that i have some 
freedom to specify what sort of view i want to  
09:56 - return so here it's just returning a text view 
with a simple piece of text here called button  
10:03 - but i can i can return an image view for example 
i could return a stack of different views you  
10:11 - can return anything you want let me just resume 
the preview here so you can see the different  
10:15 - buttons we've declared okay so what i'm going 
to return here is maybe let's return an h stack
10:28 - and i'm going to return a text that says edit and 
i'm also going to return an image in front of that  
10:39 - and for this image i'm going to specify i 
haven't added any images to our asset library  
10:46 - but i'm going to use something called an sf symbol 
now we haven't gone through sf symbols yet we will  
10:52 - do so in a future lesson however sf symbols are 
great because they're basically an icon set that  
10:58 - comes with xcode that you can just use in your 
apps and these there are very special features  
11:05 - of these sf symbols that we will go through in 
a future lesson in this course there is a free  
11:11 - mac app called sf symbols that you can download 
where you can browse all of the different symbols  
11:17 - that are available to you for free so for example 
i'm just going to use this pencil one each of  
11:23 - these has a name which you can simply specify 
and you'll be able to use it so for the image  
11:31 - the initializer to use if 
you want to use sf symbols  
11:35 - is called system name and then you specify the 
name which you saw underneath the icon the pencil  
11:43 - i'm just going to put pencil right there 
and you can see that that icon appears  
11:47 - all right so now let's run this app in the 
simulator and take a look at what happens  
11:51 - okay so i can tap this one it says hello 
world tap that one it says hello world  
11:56 - tap this one also says hello world those are 
the the closures that i specified for all of  
12:02 - the buttons all right now you know how to specify 
a simple button with just the text for its label  
12:08 - you know how to specify a button which you 
can use any view as the button we're going  
12:13 - to go back to our war card game now and turn 
that deal button image into an actual button
12:21 - all right so now i have the war card game that we 
were working on all the way back in was it lesson  
12:27 - four or five but this is where we got to and if 
you remember we had used an image for the steel  
12:35 - button and this is the view code for that you 
can see that it's just an image now you know how  
12:41 - to turn this into a button so i want you to just 
pause the video right now and try it on your own  
12:46 - in your own project just as a little exercise 
after you've tried it out for yourself or if  
12:52 - you just got stuck continue playing this video 
and we'll do it together okay let's try it out  
13:08 - together so i am going to just create a little bit 
of space here and we are going to declare a button  
13:15 - using a button let's open up brackets and let's 
choose this action label initializer method  
13:24 - now inside the action we're just going to open up 
that block of code but we're not really going to  
13:29 - do anything yet we will do that in the next lesson 
but for the label instead of a text button label  
13:37 - and delete that view and i'm simply going to move 
our image with the deal button into the label for  
13:45 - our button and just like that you you can't really 
see any visual change but however if you run this  
13:55 - in the simulator then you will notice that you 
can tap it it's an actual button another way if  
14:04 - you don't want to launch your simulator is you can 
hit this button right here for the live preview  
14:09 - and after it gets started yeah then you can 
go ahead and i have to hit resume on that
14:20 - okay you can see now in the canvas because i have 
live preview turned on i can test out the button  
14:30 - that was your first introduction to 
handling user interaction in a swift ui  
14:35 - app the pieces are really coming 
together let's do a quick recap  
14:39 - you learned how to instantiate buttons and 
that's just a fancy way of saying creating  
14:44 - button instances you learned about closures and 
how they're just blocks of code like functions  
14:49 - without a function name and then you learned 
about trailing closures which are just a shorthand  
14:55 - and just to remind you a trailing closure is when 
you have a closure as a parameter in a method call  
15:01 - and then it gets taken out of that parameter list 
and instead is put at the end of that method call  
15:08 - now to make sure you really understand all of 
these things make sure you do the quiz and attempt  
15:13 - the challenge you can get all of these resources 
at codewithchris.com and just hit the try for  
15:19 - free button or sign in to your account and then 
enroll in the 14 day beginner challenge now if you  
15:25 - enjoyed this lesson please give it a thumbs up and 
make sure you're subscribed and that you've got  
15:29 - bell notifications turned on so you don't miss the 
next lesson in the next lesson i'm going to show  
15:34 - you a key swift ui concept that is going to allow 
you to change data and have the ui automatically  
15:40 - detect the change and then update the ui by 
itself alright i'll see you in the next lesson