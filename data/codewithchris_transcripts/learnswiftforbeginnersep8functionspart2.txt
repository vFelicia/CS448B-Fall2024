00:00 - hello welcome to learn Swift for
00:03 - beginners lesson 8 in the previous
00:05 - lesson you learned about functions how
00:07 - to declare them and how to call them in
00:09 - this lesson you're going to learn how to
00:12 - use them in a even more powerful way by
00:15 - having your functions accept data and
00:17 - also return data to you when you call
00:18 - them all right let's see how that's done
00:21 - [Music]
00:25 - so here I have a fresh playground if you
00:28 - forget how to open up the new playground
00:30 - just go back to lesson 1 of this series
00:32 - and you can see how now there's one
00:34 - thing I want to mention before we move
00:35 - on and I forgot to mention the previous
00:37 - video and that is that sometimes I may
00:40 - accidentally say method and when I say
00:43 - method I actually mean function now I
00:47 - noticed that a lot of other Swift
00:48 - teachers also do this and the reason for
00:52 - this is because for many Swift educators
00:55 - like myself Swift isn't our first
00:57 - programming language and in many of the
01:00 - programming languages out there there is
01:02 - some concept of a function and sometimes
01:05 - they're called functions sometimes
01:06 - they're called methods and sometimes
01:08 - even other things so a lot of the
01:10 - educators out there when they're
01:12 - teaching sometimes they're going to slip
01:14 - up and they're going to say method
01:15 - instead so I just want to put it out
01:17 - there if you hear me say method just
01:20 - know that sometimes I use function and
01:22 - Method interchangeably ok so we're going
01:25 - to start by just read Eclair that
01:28 - function that we had in the previous
01:30 - lesson and I want to read Eclair it just
01:32 - for extra practice for you guys so I
01:34 - think it was something like add two
01:38 - numbers like this and it was let a
01:42 - equals 1 let B equals 1 and let's see
01:47 - equals a plus B and then we're going to
01:51 - print C just like that now in the
01:55 - previous lesson I mentioned that
01:57 - functions are great for kind of
01:59 - organizing your little bits of code into
02:01 - pieces of code Det perform one task so
02:05 - in this case this function would add the
02:08 - two numbers together and then it would
02:09 - print out that sum in the console but
02:12 - what if I wanted the function
02:14 - just add the two numbers but don't print
02:16 - it out I just want the result
02:19 - so in fact functions have something
02:22 - called a return value and it's exactly
02:26 - how it sounds when you execute the
02:29 - function it returns a value to you so
02:32 - let's take a look at what the syntax is
02:34 - for specifying that a function returns a
02:36 - value so everything remains the same as
02:39 - our basic function definition but after
02:43 - the two rounded brackets you have an
02:45 - arrow that arrow is just comprised of a
02:48 - hyphen and a greater than sign and
02:50 - followed by that you have the data type
02:53 - of the value that this function should
02:55 - return so now that you specified that
02:58 - this function returns value you have to
03:01 - use the return keyword inside of that
03:03 - function to actually return a value of
03:06 - that same data type that you specified
03:08 - so now let's go back to our playground
03:11 - and see how this applies to the function
03:13 - that we have there so let's say that for
03:16 - this function I don't want to print out
03:18 - the sum instead I wanted to return the
03:21 - sum to me I would then erase this print
03:24 - statement first of all after the rounded
03:26 - brackets i would put - greater than sign
03:30 - and then I would put int so that's fine
03:32 - that this function should return an int
03:35 - data type
03:36 - now Xcode immediately throws an error
03:39 - here because it notices that I don't
03:42 - have the return keyword I'm not
03:44 - returning an integer value like I said I
03:47 - would so what I would have to do
03:49 - actually to fix this is use the return
03:51 - keyword and I'm going to return C
03:53 - because that's the sum of a and B so now
03:57 - when I call add two numbers like that it
04:01 - actually returns C I'm going to show you
04:05 - something here so when I type that
04:07 - autocomplete it shows you the return
04:09 - value right there it tells me that add
04:11 - two numbers actually returns an integer
04:14 - like that so what I would do essentially
04:17 - is I would probably declare a constant
04:21 - and let's call it sum and I would say
04:24 - equals add two numbers what
04:26 - happening here is that I'm calling this
04:29 - function add two numbers and this
04:32 - function is returning C as in the sum of
04:36 - 1 plus 1 and I'm assigning that value
04:39 - into this constant called sum so now if
04:43 - I print sum like that I would get 2 so
04:50 - this constant sum it stores the returned
04:53 - value from my function here so one more
04:57 - thing I can do up here instead of
04:59 - declaring this constant C equals a plus
05:02 - B and then returning C I could actually
05:04 - get rid of this constant and I could
05:07 - just return a plus B like that and that
05:10 - would actually take a and B add them
05:13 - together and then return it so that's
05:17 - return values for functions and this is
05:20 - really powerful because now you can
05:21 - write a function that does something and
05:24 - returns the result to you so your
05:28 - function is kind of like a little worker
05:30 - or a piece of code that does a specific
05:33 - task and then returns you back the
05:34 - result now there's another cool thing
05:38 - that you can do with functions and
05:40 - that's called parameters C this function
05:43 - by itself add two numbers it's always
05:46 - just going to add one and one together
05:47 - and return to to me but what if I wanted
05:51 - this piece of code to be reusable for
05:54 - any type of numbers I want to specify
05:56 - which two numbers I want to add together
05:59 - so essentially what it is is when I
06:03 - declare this function I can specify in
06:06 - between these two rounded brackets C I
06:08 - mentioned in the previous video that we
06:10 - would use this in between these two
06:12 - rounded brackets we can specify that
06:15 - this function needs some input
06:17 - parameters in order to execute so let's
06:20 - say that I'm going to declare this
06:22 - function and say that when you call this
06:24 - function you need to give me two numbers
06:26 - as inputs now when I call the function
06:30 - here I would have to specify two numbers
06:33 - in between these rounded brackets okay
06:37 - so before we actually do it let's go
06:39 - take a look at what the send
06:40 - looks like for declaring these input
06:43 - parameters so this syntax right here
06:45 - shows you what the function definition
06:47 - would look like for a single parameter
06:50 - now we're going to get to multiple
06:51 - parameters but this is an example of a
06:54 - single parameter function declaration so
06:58 - in between the two rounded brackets you
07:00 - have an argument label okay
07:03 - I'll explain to you in a second what
07:05 - that is and then you have a parameter
07:07 - name followed by a colon and then
07:11 - followed by the data type of the
07:13 - parameter you're accepting now let's
07:17 - talk about the parameter name : data
07:20 - type part first
07:22 - so obviously the colon data type part of
07:25 - that specifies what sort of parameter
07:28 - you're going to be passing into the
07:30 - function and the parameter name is going
07:33 - to be the name of that parameter you use
07:36 - within the function so if I wanted to
07:39 - take that input and I wanted to add it
07:41 - to something and I want to reference
07:43 - that value that was passed in I would
07:45 - use the parameter name okay
07:47 - inside the function now the argument
07:51 - label for that parameter is what is
07:55 - going to be shown when you call that
07:57 - function I know it's a little bit
07:59 - confusing right now but let's jump into
08:01 - an example so it makes more sense all
08:05 - right so back to the playground here
08:06 - let's implement one parameter inside our
08:10 - add two numbers function here so I'm not
08:12 - going to use any descriptive names right
08:14 - now because I want to show you how the
08:17 - argument label and the parameter name
08:19 - plays out so I'm going to say add two
08:23 - numbers argument label is let's just say
08:27 - Arg
08:27 - and then the parameter I'm just going to
08:31 - say para okay and then : int so this
08:36 - function now accepts a parameter that is
08:40 - type of int and then Xcode detects that
08:43 - now this function call is incorrect
08:46 - because we have no function that doesn't
08:49 - accept parameters so one cool thing you
08:52 - can do is just array
08:53 - that and go add two numbers you can see
08:58 - that autocomplete now recognizes that we
09:00 - have a parameter so let's double click
09:03 - that and you can see here is the
09:05 - argument label let's pass in the number
09:08 - here pasen pasen
09:10 - - oh my god so by specifying arg there
09:15 - as the argument label for the parameter
09:17 - when I call the function I'm going to
09:20 - have this label here if I wanted to use
09:24 - this number that I tossed in remember
09:28 - you have to use the parameter name
09:29 - that's four inside the function so I
09:33 - would reference the value that's passed
09:35 - in using the parameter name like that so
09:39 - essentially what I would get here is
09:41 - because I'm passing in two and I'm
09:45 - referencing I'm setting a as two right
09:49 - that's our parameter that just got
09:51 - passed in it would be two plus one so
09:54 - that's what is stored into some and when
09:57 - I'm printing some that's what I expect
09:59 - to get three okay that is helpful but
10:03 - it's not complete we want to be able to
10:05 - pass in both numbers so that we can
10:09 - specify which two numbers to add
10:10 - together let's take a look at the syntax
10:12 - for multiple parameters so the syntax
10:15 - for multiple parameters is very easy in
10:18 - the parameter list that is that stuff
10:21 - between the rounded brackets you would
10:23 - just put a comma after the first
10:24 - parameter and then essentially repeat
10:27 - the same thing for the second parameter
10:28 - you have an argument label followed by
10:31 - space followed by a parameter name colon
10:34 - and then the data type now you want to
10:37 - use different argument labels and
10:39 - different parameter names obviously so
10:40 - that you'd be able to tell it apart now
10:43 - let's jump back to the playground and
10:45 - add our second parameter so what I would
10:48 - do in between these rounded brackets in
10:50 - this parameter list is I would just put
10:52 - comma and then I would put my second
10:54 - argument label my second parameter name
10:57 - followed by the data type which is
10:59 - another int now again Xcode is going to
11:02 - throw this error here let's use
11:04 - autocomplete again add
11:07 - numbers you can see here it's been
11:08 - updated to accept two arguments
11:11 - so argument just aargh
11:14 - and r2 so let's pass in two and two now
11:19 - we have to modify our code a bit right
11:22 - now I'm still getting three and that's
11:24 - because inside this function code I'm
11:27 - not using the parameter two yet we can
11:31 - change that like that so now a gets set
11:34 - to parameter
11:35 - I mean para and B get set to para two
11:38 - and then I'm returning a plus B so now I
11:43 - actually get four in here so one thing
11:47 - we can do with this function is actually
11:48 - we don't need to declare a equals para
11:51 - and B equals para 2 that doesn't really
11:53 - do anything so we can get rid of these
11:55 - two constants here and we can simply
11:58 - return pair up plus para to like that
12:02 - straight off the bat now our function is
12:04 - pretty simple so at this point you might
12:09 - be wondering why is it so confusing that
12:11 - I'm using argument labels here in the
12:14 - function call and then we're using
12:16 - parameter names inside the function code
12:19 - well what you can do is you can actually
12:22 - not specify argument labels like that
12:26 - and just have the parameter name and
12:28 - what LLL do is it's going to use the
12:31 - parameter name both as the argument
12:34 - label and the parameter name so now this
12:37 - is wrong you can see xcode here has an
12:41 - error let's use autocomplete to see what
12:43 - the new function looks like the new
12:45 - function call and you can see here that
12:47 - now the argument labels are the
12:51 - parameter names
12:59 - so we can also change our parameter
13:02 - names at this point you probably don't
13:03 - want to use pair around Terra - for your
13:05 - own function so we can say you know
13:08 - number one number two if we have these
13:12 - as our parameter names then you know
13:14 - this changes as well number one number
13:18 - two and then our function call would
13:21 - also change like that okay
13:28 - now you might be wondering why why use
13:31 - argument labels at all like what are
13:33 - they for
13:34 - well we'll use an argument labels you
13:36 - can make your function calls a little
13:39 - more like natural English so let me show
13:42 - you an example you can do something like
13:44 - this add two numbers so there's my first
13:47 - argument label and number two like that
13:54 - so let's take a look at what our new
13:57 - function call would look like so when
14:00 - I'm calling a function add two numbers
14:04 - using two and two all right you can see
14:09 - how that reads more like natural English
14:12 - and it makes intuitive sense what the
14:14 - parameters are going to be used for
14:16 - meanwhile inside our our function here
14:22 - if my parameter names were using right
14:26 - or end it doesn't make much sense right
14:31 - you know if I didn't use if I use these
14:35 - as the parameter names like that these
14:39 - would be terrible parameter names
14:41 - because if my function is really long
14:43 - this doesn't tell me anything this
14:46 - doesn't tell me anything doesn't mean
14:47 - anything to me while this function call
14:50 - still makes a lot of sense when you call
14:53 - it in terms of natural English but in in
14:56 - the actual code in here and add two
14:58 - numbers you know adding using an N
15:00 - doesn't really make sense so if you use
15:03 - the combination of argument labels and
15:06 - parameter names that make sense you have
15:11 - this function call that is like natural
15:13 - English and make sense and you also have
15:15 - meaningful parameter names that you can
15:17 - use inside of your function okay so I
15:21 - want to show you one more thing if you
15:24 - don't want to use these argument labels
15:27 - at all what you can do is replace your
15:30 - argument labels with an underscore like
15:33 - that or you can replace one or you can
15:36 - replace both so let me show you what
15:39 - that looks like so I'm going to replace
15:42 - both the argument labels with just
15:44 - underscore take a look at what that
15:47 - looks like now so you can see now that I
15:50 - just pass in two and two like that no
15:56 - parameter names no labels no arguments
15:58 - no nothing it's just you pass in the
16:00 - input parameters like this and you these
16:06 - are your parameter names so that's what
16:07 - you're going to be using inside of your
16:09 - function okay so just to recap in this
16:13 - lesson you learned about return values
16:15 - you learned about the return keyword and
16:17 - you learn about input parameters and how
16:21 - to specify them what argument labels are
16:24 - what parameter names are and also how to
16:26 - omit argument labels altogether I hope
16:31 - you enjoyed this lesson if you did
16:33 - please give the video a thumbs up it
16:35 - really helps the video get some exposure
16:36 - and please subscribe for more and
16:39 - finally I'll see you in the next lesson
16:41 - bye for now
16:45 - you
16:47 - [Music]