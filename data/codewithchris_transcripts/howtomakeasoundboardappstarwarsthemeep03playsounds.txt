00:00 - a coders what's up Chris here with the
00:04 - next lesson in the star wars soundboard
00:06 - app in the previous lesson we had laid
00:09 - out this user interface we had and
00:12 - included the sound files into our
00:14 - project
00:14 - these wav files that you see here and
00:16 - today we're going to go into the
00:18 - viewcontroller.swift
00:19 - and we're going to hook up the sound
00:22 - players and hook up the button tap so
00:24 - that when they choose a sound from the
00:26 - UI we are going to be playing the sound
00:28 - that they chose so first of all we're
00:31 - going to need to add an additional
00:33 - framework in order to use the av audio
00:36 - player class so click this root node
00:38 - here in your file navigator scroll all
00:40 - the way down to linked frameworks in
00:42 - library click this little plus icon and
00:45 - search for AV and that should be enough
00:48 - to bring up AV foundation framework so
00:50 - you're going to want to highlight that
00:51 - and click Add or just double click it ok
00:54 - so then you're gonna see it appear right
00:55 - here in your file navigator go back to
00:58 - view controller and at the top
01:00 - underneath import UIKit type in import
01:03 - AV foundation so now we're going to be
01:06 - able to use the AV audio player class
01:08 - between here and let's create some
01:10 - properties we're going to say let sound
01:13 - file names equals and this is going to
01:17 - be a ray of all of the sound file names
01:21 - that we have so we have 4 so I'm just
01:23 - gonna create four empty strings like
01:25 - that and inside there I'm gonna fill in
01:28 - the file name of the actual sound file
01:31 - but without the extension and you're
01:33 - gonna see why in a second so there's
01:37 - truly roar there's light saver so some
01:41 - of the file names have a dash and some
01:43 - of them have an underscore if your
01:45 - sounds aren't playing just double check
01:46 - that you've got the file names correct
01:49 - on and the last one I have is SW of 800
01:54 - 2 you can also rename these files before
01:57 - you add them into your project ok so now
02:00 - we've got an array of sounds next let's
02:03 - create an array of audio players because
02:06 - we need an audio player for each sound
02:08 - so we want to say let
02:10 - audio players equals and this is going
02:17 - to be an array of av audio player here
02:23 - we're creating an MT array that is going
02:26 - to store av audio player objects right
02:28 - now it doesn't have any objects inside
02:30 - if you're confused about what arrays are
02:32 - I would advise you to check out the
02:34 - start here beginner series first and go
02:36 - through those lessons and you're gonna
02:38 - learn all about kind of the basics that
02:40 - you need in order to complete this demo
02:43 - so what's our strategy here what I'm
02:45 - going to do is I'm going to create an AV
02:47 - audio player for each of these sounds
02:49 - here and I'm going to add them into this
02:51 - audio players array so blaster firing is
02:54 - going to be at index zero of the array
02:57 - chili roar is going to be at index one
03:01 - light saber is gonna be at index two and
03:03 - Vader is gonna be at index 3 so we're
03:06 - gonna go back to the storyboard for a
03:08 - second I just want to double check the
03:10 - ordering I've got so the first button
03:12 - I've got is light saber
03:13 - blaster firing truly roar and Darth
03:16 - Vader I'm gonna want to make sure that
03:17 - in my view controller the string fought
03:20 - the sound file names are in the same
03:21 - order so here I kind of have a different
03:23 - order all I have to do is move this
03:27 - lightsaber sound to the front and then
03:32 - I've got the same order light saber
03:33 - blaster Chewie and Vader lightsaber
03:37 - blaster Julian Vader and the reason we
03:40 - want it in the same order is because
03:42 - when they click the button I'm going to
03:44 - take a look at which order it's in so
03:48 - light saber is the first button that
03:50 - they tap I'm going to be grabbing the
03:52 - first element or the first audio player
03:54 - in the array and if they click say the
03:56 - third button I'm going to grab the third
03:58 - file the third sound which is going to
04:00 - correspond right here so I'm going to
04:02 - want to make sure it's in the same order
04:04 - so now let's set up the audio players
04:08 - so let's set up a for-loop first for
04:11 - sound in sound file names and this is
04:17 - going to go through each of the sound
04:19 - file names in this array and we're going
04:22 - to want to do that because we need to
04:23 - create an audio player for each sound so
04:26 - let audio player equals AV audio player
04:31 - and we're going to use this initializer
04:33 - method called contents of URL so we're
04:36 - going to need to create a URL that
04:38 - points to that file within our app and
04:40 - also note that this keyword throws we're
04:43 - gonna get to that in a second so let's
04:46 - create our URL up here first let you our
04:49 - l equals n s URL and there's an
04:52 - initializer for that called a file URL
04:56 - with path that's this one right here and
04:58 - we're gonna need to get a path to that
05:01 - sound file and we can do that by typing
05:04 - NS bundle dot main bundle dot file dot
05:10 - path sorry
05:12 - for resource and we're gonna use this
05:15 - one right here path for resource we pass
05:17 - in the name of the resource the type of
05:19 - the resource and it's gonna give us an
05:21 - optional string back now what is this
05:24 - bundle thing well the bundle describes
05:26 - the app package once you compile your
05:28 - app you build it it turns into an app
05:30 - package that includes the sounds inside
05:33 - so that's what that bundle is and we're
05:35 - gonna need to get the path to that sound
05:37 - file inside that bundle so here let's
05:40 - pass in the name well the name is just
05:42 - going to be sound right because it's
05:44 - looping through each of the sound file
05:46 - names in the array so we can just pass
05:48 - in whatever sound we're currently
05:50 - looking at and the type is going to be
05:54 - WAV you don't need the dot and we're
05:57 - going to add an exclamation mark because
05:58 - this returns to an optional string now
06:00 - remember before in lesson two
06:03 - I said download all of the sound files
06:05 - of the same format and this is the
06:06 - reason why because it's gonna let us
06:08 - easily loop through all of the sound
06:10 - file names because they're all wave
06:12 - files and so we don't need to worry
06:14 - about whether one of them is an mp3 or
06:16 - something like that okay so now we
06:18 - should be okay with this URL here we're
06:20 - going to
06:20 - that URL into here into this AV audio
06:24 - player remember when I showed you this
06:26 - contents of URL initializer it there was
06:29 - that keyword throws well what that means
06:31 - is that it's gonna try to create the AV
06:34 - audio player with this URL and if it
06:36 - can't it's gonna throw an error so what
06:38 - we need to do is catch that error in
06:40 - case it happens in case it can't create
06:43 - that AV audio player so the way we do
06:45 - that is we use something called the do
06:49 - catch block so inside this do part we
06:55 - try to do something so let's put that
06:58 - code in here we're gonna try to do
06:59 - something and then if it throws an error
07:02 - it's gonna go into this catch block so
07:05 - catch the error that is thrown and up
07:10 - here try to do something and this only
07:15 - applies if a method throws like it has
07:18 - that keyword and when it does you have
07:21 - to add this try keyword here so it's
07:24 - going to try to create that AV audio
07:26 - player with that URL if it's successful
07:28 - then that's fine if it's not successful
07:31 - it's gonna throw an error and that's
07:32 - gonna come down into here so let's say
07:35 - it's successful what we're going to do
07:37 - is go audio players thought append audio
07:42 - player right we're gonna add this audio
07:45 - player into our audio players array so
07:48 - here it's saying that there's a problem
07:49 - let's see what that is cannot use
07:51 - mutating member is a let constant okay
07:55 - so we're gonna want to change this to
07:56 - var because let is a constant so var is
08:00 - gonna allow us to append things into
08:03 - that alright now if it wasn't able to
08:05 - create the audio player we still want to
08:07 - add an empty audio player into the array
08:11 - and the reason for that is because we
08:15 - don't want to mess up the ordering so
08:17 - let's say it fails to create the audio
08:19 - player for blaster firing we're gonna
08:21 - add an empty audio player in its place
08:24 - so that when the user clicks blaster
08:27 - firing it's not gonna play truly roar
08:29 - it's gonna try to play an empty av audio
08:32 - player and nothing is going to have
08:34 - but okay so that's basically it for
08:36 - creating the audio players and now all
08:37 - we have to do is hook up the button here
08:41 - all of these buttons to a button tap
08:44 - handler so I just opened up assistant
08:47 - editor by clicking this button here the
08:49 - view is kind of small here so what I'm
08:51 - going to do is just do it from this
08:53 - document outline so make sure on the
08:56 - right-hand side you're looking at the
08:59 - viewcontroller.swift if you're not you
09:01 - can click this right here and scroll
09:03 - down to automatic and then choose view
09:05 - controller so first I'm gonna highlight
09:08 - lightsaber hold down control I'm gonna
09:11 - drag this over here just underneath here
09:15 - but before this last curly braket okay
09:18 - because I'm going to create a method and
09:19 - I'm gonna choose action instead of
09:22 - outlet make sure you do that so let's
09:25 - call this button tapped type is going to
09:28 - be UI button and touch up inside is the
09:31 - correct event we want to handle so
09:33 - connect so what happened now is that
09:35 - whenever the user taps on lightsaber
09:38 - this button tapped method is going to
09:41 - fire but I also want all of the rest of
09:45 - the buttons to also fire the same method
09:48 - when it's tapped so what I'm going to do
09:49 - is click the blaster firing button I'm
09:52 - gonna right-click or you can hold down
09:54 - ctrl and left click and then go to touch
09:57 - up inside not touch drag inside make
10:01 - sure you got touch up inside and go over
10:04 - to the circle just you can single click
10:07 - left click it I mean and just drag a
10:09 - blue line up to the view controller it's
10:11 - gonna show you the method which you can
10:13 - hook it up to so there I've hooked up
10:16 - the blaster fire button to this method
10:19 - that we created now let's do the same
10:20 - thing for these guys truly Rohrer touch
10:23 - up inside sure I get there choose this
10:26 - method sometimes you have it's a little
10:28 - finicky because that menus a little
10:30 - small see I didn't do it so make sure
10:33 - that
10:37 - this is really finicky okay so make sure
10:44 - it's connected like that do the same
10:46 - thing with this last one here okay
10:51 - so now all four buttons are hooked up to
10:54 - this same method let's go back to the
10:56 - single view let's go to the view
10:58 - controller and in here let's get the tag
11:05 - or rather get the audio player that
11:11 - corresponds to the button that they
11:15 - tapped and what we're going to do is let
11:18 - audio player equals so our array of
11:22 - audio players and what index do we want
11:25 - well we want the sender dot tag remember
11:28 - the tag we customized in the main
11:31 - storyboard this has a tag of zero tag of
11:33 - one type of two tag of three so
11:36 - depending on which button they tapped
11:38 - we're going to be able to get that tag
11:40 - here and we're passing that tag value
11:43 - into the array of audio players so it's
11:46 - gonna return us the corresponding audio
11:48 - players and then all we have to do down
11:49 - here is type in audio player dot play
11:54 - like that okay so now let's run it and
11:58 - let's try to play the sounds oh so
12:07 - that's an error these two are the same
12:10 - well actually all of them are the same I
12:12 - must not have modified the tags I
12:15 - thought I did so let's go back go back
12:18 - to the storyboard under blaster firing
12:21 - so lightsaber if we check the tag value
12:25 - it's zero blaster firing the tag value
12:28 - we should change that to 1 Chewie roar
12:31 - that too to Darth Vader change detective
12:35 - 3 so sorry about that I thought we had
12:38 - done that and now whenever I tap any of
12:42 - these buttons the corresponding tag will
12:45 - be sent to that tap method and it will
12:47 - grab the correct audio player
12:54 - okay so that's pretty cool so that was
12:58 - easy right in the next lesson we're
13:00 - going to theme this app a little bit so
13:02 - thanks for watching and please subscribe
13:03 - and like the video and please share it
13:06 - with any Star Wars fans that you know of
13:07 - thanks again and I'll see you guys
13:09 - tomorrow bye