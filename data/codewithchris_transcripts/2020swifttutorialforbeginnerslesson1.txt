00:00 - hello and welcome to my Swift tutorial
00:02 - for beginners if you want to learn Swift
00:03 - programming even if you've never coded
00:05 - before then you're in the right place
00:07 - I'll take it step by step and by the end
00:09 - of this video series you're going to
00:11 - have a solid foundation in Swift
00:13 - programming alright stay tuned my name
00:20 - is Chris and I'll be your guide and
00:22 - teacher on your swift journey now before
00:24 - we dive in I need to tell you about two
00:25 - things that are going to be critical for
00:27 - your success number one you have to keep
00:29 - in mind that this is a journey and I'll
00:31 - elaborate on this in a second number two
00:33 - is that you're going to have to get your
00:36 - hands dirty now these two lessons I've
00:38 - had to learn the hard way through my own
00:39 - failures when I first started learning
00:41 - Swift programming I failed and that was
00:44 - because I just kept learning and
00:45 - learning and as I was learning
00:47 - everything made sense in my head but
00:49 - when I finally got to coding I realized
00:51 - that I didn't retain a lot of what I've
00:53 - learned and I don't want that to happen
00:55 - to you so it's really critical that you
00:57 - practice and I'll help you along with
00:59 - that and the second thing is that as
01:01 - with any journey worth completing there
01:03 - will be ups and downs you probably will
01:05 - be pretty confused in the beginning but
01:07 - I guarantee you stick with it and you'll
01:10 - come out the other side a swift
01:11 - developer all right now I know you're
01:13 - itching to get started but just one last
01:15 - thing for your success if you ever get
01:17 - confused or get stuck you could simply
01:20 - leave a comment below and we're going to
01:22 - jump in and help you out or you can join
01:24 - our free code with Chris Facebook
01:26 - community where the team and I hang out
01:29 - as well as other iOS learners all right
01:32 - now that you have the right frame of
01:33 - mind let's take a look at what your
01:34 - Swift journey is going to look like in
01:37 - this lesson we're going to get you set
01:38 - up and oriented with the tools and we're
01:41 - going to dive into our first Swift topic
01:43 - which are variables in the next five or
01:45 - six lessons after that you'll learn more
01:47 - Swift you'll do more hands-on coding and
01:49 - with each lesson you progress through
01:51 - you'll be layering and building up your
01:53 - skills becoming a stronger and Swift
01:56 - e're programmer then from lesson seven
01:59 - to eleven you'll be learning more about
02:00 - how swift code is structured and
02:02 - organized and how it's actually used now
02:04 - even if you just get up to this point
02:06 - you'll have a pretty solid foundational
02:08 - understanding of how the Swift
02:11 - programming
02:11 - language works and how to use it but
02:13 - we're going to take it even further from
02:16 - that point on you're going to continue
02:17 - learning new Swift concepts and goodies
02:19 - that will enable you to do more and more
02:22 - with this wonderful programming language
02:24 - oh and I forgot to mention in between
02:26 - these lessons I'll sprinkle some
02:27 - challenges and exercises that I highly
02:30 - recommend you do because it's gonna help
02:31 - you discover your hidden knowledge gaps
02:33 - okay so with that said let's jump right
02:35 - in
02:36 - alright so first things first where do
02:38 - you write your Swift code
02:39 - well ideally you want to be using a
02:41 - swift code editor because that way you
02:42 - can compile your Swift code execute it
02:45 - and take a look at the results well
02:46 - Apple has released a tool called Xcode
02:48 - just for this purpose
02:50 - now using this tool you can write your
02:52 - Swift code build your user interfaces
02:54 - and build apps across all of Apple's
02:56 - different platforms and what's more this
02:58 - app is completely free the only drawback
03:00 - is that it's made for Mac computers and
03:02 - there is no PC or Windows alternative
03:05 - but if you're on a PC it's not the end
03:07 - of the road for you because there are
03:09 - other alternatives such as browser-based
03:12 - solutions you can type your Swift code
03:14 - directly into the browser and execute it
03:17 - and then take a look at the results
03:18 - you're not going to be able to build out
03:21 - this way but you're still going to be
03:23 - able to use it as a learning tool to
03:25 - learn Swift programming language I wrote
03:27 - an article explaining all of the
03:29 - different options that code with Chris
03:31 - calm slash Xcode for Windows now if you
03:34 - are on a Mac all you have to do in order
03:36 - to get xcode is go to the mac app store
03:37 - and then search for xcode here and
03:42 - you're gonna see this listing here now
03:44 - don't be fooled by the low ratings this
03:46 - is the tool that all of the
03:47 - professionals use to build apps on all
03:49 - of the Apple platforms it can be a
03:51 - little bit confusing at first when you
03:53 - launch it and from time to time it is
03:56 - buggy however it is the official Apple
03:58 - tool so it works and placed nicely with
04:01 - the rest of the Apple ecosystem
04:03 - including submitting apps into the app
04:06 - stores so what you're going to want to
04:08 - do is download and install Xcode
04:11 - and you have to also make sure that
04:13 - you're running the latest version of Mac
04:15 - OS because if you scroll all the way
04:17 - down here take a look at this
04:19 - compatibility section if this doesn't
04:22 - say works on this Mac you can you can
04:24 - actually click
04:25 - and they'll tell you which version of
04:27 - Mac OS it requires you want to go up
04:30 - here and check your version of Mac OS on
04:34 - your machine and if you have a lower
04:37 - version you can just search for Mac OS
04:39 - in the App Store right here and it's
04:41 - going to be a free upgrade for you the
04:42 - only question is does your machine
04:44 - support this latest version of Mac OS
04:47 - even if it doesn't and you can't get the
04:50 - latest version of Xcode I wouldn't let
04:53 - that stop you use one of the
04:54 - browser-based solutions because you're
04:57 - still going to be able to learn Swift
04:59 - and practice with even without Xcode all
05:03 - right so after you've installed Xcode go
05:05 - ahead and click on open and that's going
05:07 - to launch Xcode for you now you're gonna
05:09 - get this sort of welcome dialog and
05:11 - we're not going to create a brand new
05:14 - Xcode project instead we are going to
05:16 - get started with a playground and that's
05:19 - just a lightweight little window where
05:21 - we can type in our Swift code and
05:23 - execute it to take a look at the results
05:25 - that's perfect for learning Swift if you
05:27 - don't get this Welcome dialog you can
05:30 - always go up to the file menu go under
05:32 - new and then choose playground so if you
05:35 - have this welcome dialog just click on
05:37 - get started with the playground we're
05:39 - always going to end up in this place
05:42 - where we're going to choose what type of
05:43 - playground we want to create so under
05:45 - iOS choose blank playground and you can
05:49 - save it anywhere you want
05:50 - make sure you remember where you save it
05:52 - so you can access it I'm just going to
05:54 - save it on the desktop right here now
05:58 - before we dive in here let's do a quick
06:01 - tour and let me show you all of the
06:02 - different elements of the playground so
06:04 - obviously this big main section here is
06:07 - the code editor this is where you're
06:09 - gonna be typing in your swift code and
06:11 - there is some sample Swift code here
06:13 - we're not gonna worry about that just
06:15 - yet I also have some line numbers which
06:18 - makes it very easy for me to refer to
06:20 - the different lines of code if you don't
06:22 - have line numbers and you want to enable
06:24 - them just go to Xcode preferences under
06:27 - a text editing and you can turn those
06:30 - line numbers on or off now you'll also
06:32 - notice that your when you hover your
06:35 - mouse under the different lines this
06:37 - sort of
06:37 - blue play icon follows you and when you
06:40 - drag it down and highlights all of those
06:42 - line numbers and blue well when you
06:44 - click this run icon it basically just
06:47 - runs the code up to that point so if I
06:51 - drag it to line number 2 and I click
06:54 - this blue button it's just going to run
06:56 - that first line but if I drag it all the
06:58 - way to the bottom here at line 4 and I
07:01 - run this it's going to run all the code
07:03 - of that point up to line 4 and you can
07:07 - see here at the top there is a status
07:10 - bar which tells you the current status
07:11 - of the playground it should say ready
07:13 - for you and that means it's gonna be
07:16 - ready to accept your code and run it
07:18 - there are some options up here for some
07:21 - different views the one I want you to
07:24 - click right now is this debug area hide
07:27 - or show the debug area and this is also
07:29 - referred to as the console area when
07:32 - we're going to be testing our Swift code
07:34 - we're going to be outputting information
07:37 - into this debug or console area so I
07:40 - want you to make sure that you have this
07:42 - tray enabled and that you can see the
07:45 - output that's going to be shown there
07:47 - this right hand side here is a preview
07:51 - of your lines of code I wouldn't pay too
07:53 - much attention to this because from
07:55 - version to version of Xcode it may look
07:57 - a little bit different where I want you
07:59 - to focus is in this debug area down here
08:02 - because that should be consistent with
08:04 - what you're seeing in the video now
08:07 - there's one more thing I want to draw
08:08 - your attention to and it's this button
08:10 - down here now this will stop executing
08:12 - the playground so if I hit stop you can
08:15 - see that it enables this guy again and
08:18 - you can also click this button it's
08:21 - turned into a play button when you click
08:23 - on this icon it's going to execute your
08:26 - entire playground if you hover your
08:29 - mouse here and you choose you know a
08:31 - certain line of code to run the code up
08:33 - till that just gives you greater control
08:35 - if you want to run like a segment of
08:37 - your playground rather than the entire
08:39 - playground which is what you would click
08:41 - here now another thing is that if you
08:44 - click and hold this play button you can
08:46 - see that there are two options it's set
08:49 - to manually run
08:50 - which means that every time you want to
08:53 - run your playground you're going to have
08:55 - to either click on this play icon or
08:57 - choose a line and hit this blue play
09:00 - icon but if you click and hold it and
09:02 - change it to automatically run every
09:06 - time you edit the code it's just going
09:09 - to automatically execute your playground
09:10 - and update the results now sometimes
09:13 - this can be a little buggy and as you
09:16 - can see here it's running my playground
09:18 - sometimes this takes a long long time
09:20 - for it to be ready again and sometimes
09:23 - you know when it's constantly running
09:26 - your playground like this you're not
09:27 - going to see the updated results it
09:30 - doesn't work as perfectly as we would
09:34 - want so if you're having some trouble
09:36 - with you know you not seeing output on
09:38 - your playground and seeing that this is
09:40 - continually running then what you might
09:43 - want to do is just click stop and click
09:47 - and hold it and change it to manually
09:48 - run and when it says ready you're going
09:52 - to be able to click and run your code
09:54 - all right so now that you're a little
09:55 - more familiar with the playground and
09:57 - all of its controls and different
09:59 - windows now we can actually dive into
10:01 - Swift code so when you're coding you
10:03 - want to have the mindset that you are
10:05 - giving the computer instructions on how
10:08 - to process data now take for instance a
10:10 - stock portfolio app if you are building
10:12 - an app like that you'd have to write
10:14 - code to tell the computer where to grab
10:16 - the stock prices and then tell the
10:20 - computer how to manipulate that it maybe
10:22 - come up with the percentage lost or
10:25 - percentage gained and then you're gonna
10:26 - have to write code to tell the computer
10:28 - instructions on how to display that to
10:31 - the user in a table format another
10:34 - example take for instance a photo app
10:37 - kind of like Instagram you're gonna have
10:39 - to write code to tell the computer where
10:42 - to grab the images right and how to
10:44 - display them to user and if the user is
10:47 - taking a photo and trying to upload it
10:49 - to their account you're gonna have to
10:50 - make sure that you have code containing
10:53 - instructions on how to take that image
10:56 - data from the user's phone and then
10:59 - where to upload it to some sort of file
11:01 - server and make an entry in a database
11:02 - so when you're cool
11:04 - you're always writing instructions for
11:07 - the computer on how to process different
11:09 - types of data and in the next lesson
11:12 - we're going to talk more about different
11:13 - data types but in this lesson we are
11:17 - going to I'm going to demonstrate some
11:19 - simple pieces of data for you so let's
11:22 - take a look at the playground right now
11:23 - and we're going to ignore what's on the
11:26 - screen right right up here these couple
11:28 - lines and I'm just gonna show you some
11:30 - data so here some number data right
11:33 - that's 123 or we could have like a
11:36 - decimal number that's another piece of
11:37 - data is zero point seven or we're gonna
11:39 - have some piece of text and text this
11:42 - surrounded by two quotes like that and
11:45 - that's a piece of text that's another
11:47 - type of data now the data is stored in
11:49 - the computer's memory which is how the
11:51 - computer keeps track of where the data
11:53 - is and what it is
11:54 - in order for us to work with it we're
11:57 - going to need a way to reference that
12:00 - specific piece of data and that brings
12:02 - us to our topic for today's lesson which
12:05 - are variables and variables are a way
12:08 - for us to keep track of a certain piece
12:10 - of data so now let me show you how to
12:12 - write swift code to create a new
12:15 - variable in order to keep track of a
12:18 - piece of data in memory so in order to
12:21 - create a new variable you type in the
12:23 - keyword var or var followed by a space
12:27 - and then you can type in a variable name
12:30 - now you can name your variable anything
12:32 - you want but it should be descriptive
12:34 - for the data that that variable is going
12:37 - to keep track of so for example if I had
12:41 - a piece of data that was someone's first
12:44 - name I might name my variable first name
12:47 - and nearing the end of the lesson
12:49 - I'll tell you some more best practices
12:51 - about naming variables for now let's
12:53 - write first-name and that's going to be
12:55 - our variable name so just like that
12:57 - we've declared a new variable called
12:59 - first name now at the same time you can
13:03 - also give a piece of data for this
13:04 - variable to keep track of and we do that
13:06 - using the equals sign so you're going to
13:09 - write a space and then an equal sign and
13:11 - then you're going to write another space
13:13 - followed by the data that you want this
13:15 - variable to keep track
13:16 - so since we named this variable first
13:19 - name why don't we give it a piece of
13:21 - text containing the word Tom so let's
13:25 - recap what this line of code does so
13:28 - we've got a piece of text data Tom and
13:30 - we need a variable to keep track of it
13:32 - so we're declaring a new variable using
13:34 - the VAR keyword and we're calling this
13:37 - variable first name and then we're using
13:39 - the equal sign to assign that piece of
13:42 - text data to this first name variable
13:45 - now let's jump back into the playground
13:47 - and let's try this out so I'm going to
13:50 - erase this sample pieces of data that we
13:53 - had here and you can see this line of
13:56 - code actually this line of code which
13:59 - came with our playground is exactly what
14:01 - we just showed in our slides except that
14:04 - this time the piece of data is hello
14:06 - playground and the variable name is STR
14:10 - so here we're going to write in the line
14:14 - of code that I just showed you so you
14:16 - want to write V a our space and our
14:19 - variable name is first name followed by
14:22 - space and then the equal sign and then
14:24 - space followed by our piece of text data
14:27 - which is Tom now what we've accomplished
14:30 - here is that we've declared a new
14:33 - variable called first name and we've
14:35 - assigned the piece of data tom to it now
14:37 - whenever we want to work with that piece
14:39 - of data tom we can just refer to our
14:42 - variable first name so now let's try
14:45 - working with our variable what we're
14:48 - going to try to do is output Tom down
14:50 - here in the console area and there's a
14:53 - command called print followed by two
14:57 - parentheses like this and in the middle
14:59 - you can give that command something to
15:02 - output into the console area below so
15:05 - why don't we try typing in first name in
15:09 - there and what we're going to do is you
15:12 - can either hit the execute button here
15:15 - or you can hit this blue button right
15:18 - there so let's go ahead hit execute and
15:20 - you can see here that we've successfully
15:24 - output that piece of data tom so isn't
15:27 - that pretty cool your print command
15:29 - is saying that you want to print the
15:32 - data that is referenced by the variable
15:34 - first name now let's try working with
15:37 - another piece of data let's say var
15:41 - stuff price equals 100
15:48 - hey and now why don't we try printing
15:52 - stock price and let's go ahead and click
15:57 - that line and we output a hundred down
16:00 - there now just as an aside if you're
16:03 - taking a look at the preview here and
16:05 - you might notice this slash end now this
16:08 - backslash end is just a line break or a
16:10 - carriage return that's what puts that
16:12 - output in a separate line down here in
16:14 - the console now what I want to show you
16:17 - is that you can actually reuse your
16:19 - variable so you don't have to declare it
16:22 - again and you can just write stock price
16:26 - you can change the stock price let's say
16:28 - 50 right you don't have to read eclair
16:33 - it because you've already created that
16:34 - variable or declared it so now down here
16:38 - if I print out stock price and I hit the
16:42 - run icon you can see that it's 50 well
16:46 - where that the 100 go well it's
16:48 - basically you've lost track of it
16:50 - because this line of code you're saying
16:53 - that now the variable stock price should
16:55 - keep track of the piece of data 50 so go
16:58 - ahead and give this a try if you're
16:59 - playing around you might notice
17:01 - something like you cannot assign a piece
17:05 - of text data to stock price let's say
17:09 - I'll just use Tom again you can assign
17:12 - Tom to the variable stock price and this
17:15 - is because the variable stock price is
17:17 - expecting number data only in the next
17:20 - lesson when we talk about data types I'm
17:22 - going to explain to you a little bit
17:24 - more about why this is but for now just
17:26 - know that when you declare a new
17:27 - variable as in line 5 or line 8 here
17:32 - using the VAR keyword and you assign a
17:34 - piece of data to it from that point on
17:36 - when you try to reassign data to that
17:39 - variable it can only be of the same type
17:41 - so numbers or 10
17:43 - so stock price can only accept number
17:45 - data and first name can only accept text
17:48 - data so let's go ahead and erase this
17:52 - line here so now you know how to declare
17:55 - new variables and how to assign pieces
17:57 - of data to the variable now there's
17:59 - something else you can use to keep track
18:01 - of data and they're kind of like
18:03 - variables these are called constants now
18:06 - the only difference is that when you
18:08 - declare a constant instead of using the
18:10 - VAR keyword you use the let keyword so
18:13 - let's try to clearing a constant here
18:15 - instead of using var I use let followed
18:17 - by space and then I write my constant
18:20 - name so this time let's say it's the
18:23 - last name and then I'm going to use the
18:25 - equal sign and I'm going to assign a
18:27 - piece of data to my constant and I'm
18:31 - just gonna write Smith now what's the
18:33 - difference between a constant and a
18:35 - variable well as you saw up here with a
18:38 - variable you declare it once like in
18:41 - line 8 here and then later on you can
18:43 - reassign a different piece of data to
18:46 - that same variable with a constant you
18:49 - can't do that once you've assigned data
18:52 - to a constant you can't assign anything
18:55 - else to it in fact if you try it's going
18:57 - to give you an error so let me
18:59 - demonstrate if I did something like that
19:05 - Xcode would immediately tell you that
19:08 - you can't assign something else to the
19:11 - constant last name because that's how
19:13 - constants work so at this point it might
19:15 - seem that variables are more flexible
19:17 - because you can do more with them and
19:20 - constants seemed a little more
19:21 - restrictive and that's true but there
19:24 - are instances where you would want to
19:26 - use constants instead of variables in
19:28 - fact if you want to keep track of a
19:31 - piece of data and you don't intend to
19:34 - change that piece of data then using a
19:36 - constant would be preferable I wouldn't
19:39 - worry about it too much for now as you
19:40 - get farther into your Swift journey
19:42 - you're going to understand when to use
19:44 - variables versus constants and
19:45 - furthermore when you're coding an app
19:48 - and Xcode has detected that you haven't
19:51 - changed the data in your variable it
19:53 - would suggest for you to change that
19:55 - variable
19:56 - into a constant and then at that point
19:58 - it's just a matter of changing the VAR
19:59 - keyword to the let keyword but for now I
20:02 - just want you to know that there are
20:03 - something called constants which work
20:06 - like variables all right and the last
20:08 - thing I want to talk to you about is
20:09 - best practices for naming variables and
20:12 - constants now I mentioned before that
20:13 - you do want to be descriptive with your
20:16 - variable and constant names so that you
20:18 - know what kind of data they hold but
20:20 - there's a balance that because you don't
20:21 - want your variable and constant names to
20:23 - be too long because then it can also be
20:26 - really hard to read and you don't want
20:28 - them to be so short
20:29 - like STR or even maybe just s because
20:32 - then you don't know what kind of data it
20:35 - holds right so I would say one to four
20:37 - words is ideal and furthermore if you
20:40 - had something like three words like very
20:44 - first name or something like that it can
20:45 - still be hard to read so a best practice
20:48 - is to use camel casing and camel casing
20:50 - is just where you have the first word
20:53 - having a lowercase letter and then every
20:55 - subsequent word starting with a capital
20:58 - letter and you can see now that it is a
21:00 - lot more easy to read versus all lower
21:03 - caps okay so before moving on to the
21:06 - next lesson let's do a quick recap you
21:08 - learn that variables are used to keep
21:10 - track of information you learned how to
21:12 - declare a new variable you learn how to
21:14 - assign data to a variable you learned
21:16 - about naming variables and camel casing
21:18 - finally you learned about constants and
21:20 - how they're like variables except that
21:22 - you can't reassign data to them after
21:24 - the first assignment now I know that's a
21:26 - lot to absorb but that's why I have a
21:28 - practice video for you where we're going
21:30 - to go through a couple of exercises for
21:32 - you to get hands-on and dirty with I
21:33 - also have a set of recap notes that you
21:35 - can download now the links to both of
21:37 - these resources are down below in the
21:40 - description below the video now if you
21:42 - like this video please hit thumbs up and
21:44 - please subscribe by hitting the red
21:45 - subscribe button below alright great job
21:48 - with lesson one I'll see you in lesson
21:50 - two just click on that thumbnail right
21:51 - over there