00:04 - hey everyone welcome to lesson 10 of how
00:08 - to make iphone apps with no programming
00:09 - experience and in this lesson we're
00:12 - going to build upon the last and
00:14 - continue learning a couple more concepts
00:16 - of the Swift programming language we're
00:19 - going to look at sub classing and uikit
00:23 - so let's start with the first sub
00:25 - classing in the last lesson we learned
00:27 - about classes and how you can create a
00:30 - class to describe a component in your
00:32 - app we also said that you can create
00:34 - multiple objects from one class and
00:37 - that's really convenient because let's
00:39 - say that we have two identical
00:40 - components in our app we can write a
00:43 - single class and create two objects from
00:45 - it to represent the two identical
00:47 - components well consider this scenario
00:50 - what if you need two components in your
00:53 - app and they're not identical but
00:55 - they're very similar let's say 90%
00:57 - similar in their behavior and what we
01:00 - want them to do well you could write two
01:03 - separate classes one to represent each
01:06 - of those components where 90% of the
01:08 - code in those classes are the same but
01:11 - that's a waste of effort and furthermore
01:13 - it's generally a bad programming
01:15 - practice to have duplicate code
01:17 - everywhere because it makes code
01:19 - maintenance and debugging harder than it
01:21 - needs to be and this is where sub
01:24 - classing comes in it allows us to handle
01:26 - a scenario like this without having to
01:28 - duplicate 90% of that code in other
01:31 - object-oriented programming languages
01:33 - there's a concept called inheritance and
01:35 - an object of C and Swift it's known as
01:38 - sub classing so a subclass is a class
01:41 - that inherits the properties and methods
01:43 - of another class so going back to our
01:45 - scenario with the two similar components
01:48 - we can write one class to describe the
01:50 - behavior of the first component then we
01:54 - can write a second class and declare it
01:56 - as a subclass of the initial class that
01:58 - we wrote when we do this the second
02:01 - class has all of the properties and the
02:03 - methods that we declared in the first
02:05 - class and you don't have to rewrite or
02:08 - read Eclair all of those properties and
02:09 - methods instead we can just
02:13 - write code to represent the difference
02:15 - in the second class in this relationship
02:18 - this is the subclass and this is the
02:22 - superclass although sometimes I refer to
02:24 - the superclass as the parent class okay
02:27 - so in the last lesson we had a class
02:30 - called person so I'm just going to
02:32 - declare a person class again so if you
02:37 - practice it a couple of times you might
02:39 - start to realize that even without
02:42 - trying to memorize exactly how to
02:45 - declare a class you may remember how to
02:47 - do it so following along and trying it
02:49 - out on your own computer really goes a
02:52 - long way to help you remember things
02:54 - without having to memorize things so if
02:58 - you remember we need an init method and
03:02 - this time okay let me declare a property
03:07 - here
03:15 - and we'll give it an initial value of
03:17 - initial name okay and next I'm going to
03:20 - declare a method called walk if you
03:22 - remember how to declare methods you used
03:24 - the func keyword followed by the method
03:27 - name and then a set of round brackets
03:30 - and then a set of curly brackets inside
03:36 - here when this method is called
03:38 - I'm just going to print I'm walking
03:42 - okay so let's test that out I'm going to
03:45 - declare a variable a and assign a new
03:49 - person object to it and then I'm going
03:52 - to set this object's name property to
03:57 - Alice and finally let's call the walk
04:02 - method to see it print line here okay
04:09 - now we're going to demonstrate
04:09 - subclassing so I'm going to create
04:11 - another class which will subclass person
04:15 - and I'm going to call this one
04:21 - superhuman and the way that you declare
04:25 - specify a subclass is you use colon and
04:29 - then you put the name of the superclass
04:33 - like that so just like that I've
04:37 - declared a class and it inherits all of
04:41 - the properties and methods of the person
04:43 - class I don't even need to specify an
04:46 - init method or initializer watch this so
04:50 - I can go VAR b equals superhuman to
04:57 - create a new superhuman object and
05:00 - assign it to the variable B and now I
05:03 - can go b dot name and you can see that
05:08 - it registers it has initial name and I
05:11 - can go say B dot walk and you can say
05:16 - now you can see now that it printed it
05:18 - two times so just like that even though
05:22 - I don't have any of that stuff specified
05:24 - in here because superhuman is a sub
05:28 - a person it has all of person's methods
05:32 - and properties so this can be really
05:35 - handy next let's give superhuman some
05:40 - sort of additional functionality because
05:42 - otherwise we won't need to create a
05:44 - subclass right
05:45 - so in super human I'm going to add an
05:48 - additional method called
05:51 - fly and inside the fly method I'm going
05:57 - to print line I'm flying
06:02 - okay now I can go B dot fly is available
06:08 - to me and now you can see that that
06:13 - method is called and I'm flying is
06:14 - printed out let's also add an additional
06:20 - property for good measure so up here I
06:24 - can add alter eagle name string you can
06:35 - just set that to Clark as an initial
06:37 - value now you can see that when I go B
06:40 - dot you can see that the two properties
06:43 - are available alter-ego name and fly are
06:46 - methods and properties inside the
06:48 - superhuman class and name and walk are
06:51 - from the person class now if I went a
06:55 - dot you can see it only has name and
06:59 - walk because a is a person object in
07:04 - this relationship super human is the
07:08 - subclass and person is the superclass
07:11 - ironically okay let's consider another
07:15 - scenario in this case we have a subclass
07:20 - super human that provides additional
07:23 - functionality but what if I wanted my
07:26 - subclass instead to override or provide
07:30 - a different functionality than the
07:33 - parent class for example what if I
07:36 - wanted when I call be walk for the walk
07:40 - method to
07:41 - something different than the walk method
07:44 - that was coded in the person class well
07:48 - you can actually do that so the way to
07:50 - do that is you can go over ID and then
07:56 - read eclair the exact same method as in
08:00 - the parent class so there's walk set of
08:06 - brackets and instead of curly brackets
08:08 - and this override keyword now when you
08:12 - call walk method on superhuman instead
08:15 - of executing this code in its parent
08:19 - class it execute this code it's
08:22 - superhumans implementation of the walk
08:25 - method so in this one I'm going to say
08:29 - print I'm walking really fast so let me
08:38 - erase these and demonstrate so now when
08:41 - I go be dot walk you can see that this
08:48 - was triggered I'm walking really fast if
08:52 - I didn't have this this method call
08:55 - would execute its parent classes
08:59 - functionality there's also a mechanism
09:03 - where you can do both
09:06 - so in this overridden method you can say
09:09 - you know print I'm walking really fast
09:11 - but if you wanted to run the parent
09:13 - classes implementation you can go super
09:16 - dot walk and super stands for the parent
09:21 - class so I can do that so now when you
09:28 - say B dot walk what happens is that it
09:32 - calls this override function this
09:36 - overridden wok method and it executes
09:38 - this line and then it calls the parent
09:42 - classes walk method and execute this
09:45 - code in here so there's some flexibility
09:49 - there and some powerful tools at your
09:51 - disposal while we're on the topic of
09:53 - overriding I want to
09:55 - one thing is that if you want to provide
09:57 - a custom initializer method for super
10:00 - human you would also need to override it
10:03 - and you would do it something like this
10:07 - override in it and here you could
10:15 - provide your own custom initialization
10:18 - for superhuman however if you try to
10:20 - access your parent classes properties or
10:24 - methods in this initializer method
10:26 - you're going to get an error so let's
10:28 - say super dot name equals super duper
10:36 - and you're going to get an error here
10:38 - that says self used before super dot
10:43 - init call and it's basically complaining
10:47 - that you haven't called the parents
10:49 - initializer method yet so you can't use
10:52 - any of its properties or methods so all
10:55 - you have to do is actually just call
10:57 - super dot in it before you use any of
11:01 - the parent classes properties or methods
11:03 - the reason is because the parents
11:06 - initializer method may initialize some
11:09 - values in the properties or it may set
11:12 - up some of the methods for use so before
11:14 - you use any of it you actually have to
11:16 - give the parent class a chance to
11:18 - initialize or set up anything it needs
11:20 - to set up now you actually know quite a
11:22 - bit about the Swift programming language
11:24 - and how its structured and you know
11:27 - about the tools available to us to
11:29 - create these classes and describe our
11:31 - components in the apps well you'll be
11:33 - happy to know that Apple actually
11:35 - provides us with a whole slew of classes
11:39 - that are available to us to use to build
11:42 - our apps it makes building apps a lot
11:44 - easier because it lays out a lot of the
11:47 - groundwork that we need already that set
11:50 - of classes that apple provides for us to
11:53 - lay out the groundwork for app is called
11:55 - UI kit and UI stands for user interface
11:59 - so let's take a look at the
12:01 - documentation for it so if you go to
12:04 - google and type in UI kit you'll get a
12:05 - whole bunch of results but it's not
12:09 - this one so don't be fooled by that
12:11 - scroll down until you see something from
12:15 - developer.apple.com this UIKit framework
12:19 - reference and the page should look like
12:20 - this so in your own time if you read
12:25 - this little bit of introduction and what
12:27 - sort of functions and features that you
12:29 - are kit provides you'll see that I kind
12:31 - of understated it when I said that I
12:33 - provided a set of classes for us to use
12:36 - it's actually quite expensive and covers
12:38 - a lot of different functionality but
12:41 - we're going to scroll down until we
12:43 - reach this heading called classes along
12:48 - the left hand side are all of the
12:51 - classes that are in uikit and on the
12:54 - right hand side are the descriptions for
12:55 - each of those classes however you'll
12:57 - notice that there are not all spaced
13:00 - evenly you'll notice that NS object is
13:05 - here as a root node and then underneath
13:09 - it are a couple more and underneath and
13:13 - it's paragraph style is NS mutable
13:16 - paragraph style well actually NS mutable
13:19 - paragraph style is a subclass of NS
13:22 - paragraph style class which is a
13:24 - subclass of nsobject and it's object is
13:27 - actually at the very very top it's the
13:29 - root class for most and I says Objective
13:32 - C here but you can substitute that with
13:35 - Swift because Swift uses UIKit as well
13:37 - so and it's object is the root class of
13:39 - most Swift class hierarchies all of
13:42 - these other classes are subclasses of NS
13:46 - object directly or indirectly because
13:49 - sometimes they go several layers deep if
13:51 - you scroll through this list of classes
13:54 - yourself you'll see how long it actually
13:56 - is there's a huge collection of classes
13:58 - here for us to use so what usually
14:01 - happens is that before we create our
14:04 - custom class if there's something
14:06 - similar already in UIKit what we want to
14:09 - do is we want to subclass the uikit
14:12 - class and then either using overriding
14:15 - or additional methods and properties
14:17 - code up our unique behavior but we can
14:21 - use if we can
14:22 - use a UI kit as a as a parent class or a
14:26 - superclass then we can inherit a lot of
14:29 - functionality without coding it
14:31 - ourselves and then the next lesson I'll
14:33 - point out which ones and what they do
14:35 - we're going to be referring to this page
14:38 - a lot so make sure you book market or
14:40 - have some way of getting back here it's
14:43 - also very useful because you can click
14:45 - into each of these classes and you can
14:48 - get some documentation on how to use
14:50 - this specific class and they have swift
14:54 - or Objective C or you can view both