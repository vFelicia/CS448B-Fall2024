00:00 - in this video we will add a unit test target to a 
project that didn't have unit tests to begin with  
00:05 - and then we are going to mock our network request 
so that our unit test will be getting data from  
00:10 - a local json file as opposed to going to the 
network going to the internet and getting data  
00:15 - this will isolate our unit tests to only test our 
personal code as opposed to testing the internet  
00:21 - hello my name is michaela caron i am a 
full-time ios developer and freelancer  
00:26 - let's get started with unit testing the first 
thing we want to do is download the project that  
00:32 - we're going to be unit testing so open terminal 
so you can hit command space and then in spotlight  
00:38 - start typing terminal and it'll open or just you 
know use the spotlight search which will give you  
00:45 - the same thing or if you really want to open it 
via finder so first thing we are going to do is  
00:51 - go to our desktop so we want to type cd and then 
desktop and this autocomplete is part of one of  
00:58 - the things that i have added onto my terminal 
so we do cd desktop and then hit enter and then  
01:04 - yours will probably say like michaela carrera 
macbook pro or you know whatever your name is  
01:09 - and then it'll say desktop so that's how you 
know you're on your desktop and if you type ls  
01:13 - and hit enter i have a bunch of screenshots and a 
folder called testing but you should see whatever  
01:19 - files are like sitting on your desktop and that's 
how you know you are in the right spot then i hit  
01:24 - command k and that's how you clear the terminal 
and what we want to do is clone this project  
01:30 - so the url will be in the description and or you 
can search it on github with code with chris and  
01:35 - then yt vapor ios app so we are going to be unit 
testing the ios app that i created during the  
01:42 - vapor series so if you want to see how this app is 
built go ahead and check out that series that'll  
01:47 - be in the link in the description so we want to 
clone this so to do that click the drop down for  
01:52 - code and select one of these you have to select 
the right one so typically almost everybody will  
01:58 - use this https and you just copy that but to 
do that and actually use it you have to set up  
02:05 - your personal access token with github for it to 
all kind of work if you don't want to do that you  
02:12 - can use ssh which again you can see you have to 
set up a public ssh key which i haven't done but  
02:19 - the one i personally use is github cli which this 
is just if you click on this learn more button  
02:26 - um it allows you to like use github from the 
command line and i think that's super cool  
02:30 - so i use this one and my github in terminal 
like on my computer is authenticated through  
02:35 - that as opposed to https so pick whichever one 
you want and which one works if you don't know  
02:42 - i would say they're both kind of easy i 
was sort of easy i would say pick https  
02:49 - the github cli is actually not too bad it 
takes you through how to use everything  
02:54 - this is kind of off topic real quick but if 
you download the command line tool right here  
03:00 - it literally tells you how to authenticate which 
is not too bad but that's the one i'm going to  
03:06 - use so we will copy this and then all i have to 
do is paste that if you did use one of the other  
03:13 - two you'll see it's just a url so you need to type 
git clone and then paste this because if you just  
03:19 - paste that into the terminal it won't work you 
would have to do git clone and then paste that
03:30 - so it would be like this but i'm going to use the 
github cli version so i just type exactly what was  
03:37 - in there for mine because it has a gh repo clone 
and hit enter and then you can see it cloned it to  
03:43 - our computer but we're still in the desktop 
directory so we type hello ls and hit enter  
03:50 - and then you can see the project is yt vapor ios 
apps so we want to change directory into that one  
03:57 - yt hit enter and see this is why i have this 
uh what is it plugin thing on my terminal  
04:04 - because it like auto completes for me and i think 
that's super cool so if you want to use the same  
04:11 - uh what is called plug-in thing that i use on 
mine it's called fig it's called fig.io so you  
04:17 - can download that if you want to okay so now that 
we have downloaded it you can see that we're in  
04:24 - lesson three because there's multiple different 
lessons that's how i split up the project is  
04:29 - lesson three goes into like building part of the 
app lesson four i don't think we even do anything  
04:33 - and then lesson five is where we finish the rest 
of the app so we want to check out the lesson  
04:38 - five branch because that's the one that has the 
finished code in it so to do that we can save git  
04:44 - checkout and then we want to check out lesson five
04:52 - and then you can see it says branch lesson 
five set up to track remote branch from origin  
04:57 - and then we switch to lesson five so the first 
part just means we're tracking the lesson five  
05:02 - branch like in github and then it's called origin 
that's the name of the remote and then we switch  
05:08 - to it which is what we want and you can see it 
in my terminal because of the plug-in stuff that  
05:11 - i have but also um if you type get branch and 
hit enter you should see we have lesson three  
05:18 - and then five and we know we're on lesson 
five because that's where the little star  
05:22 - is okay we have cloned the project but we need 
to open it so we could type open space and then  
05:29 - a period and this will open it in finder for 
us like at this uh directory that we're in and  
05:35 - then we just double click on this or you can 
type open and start typing the xcode project  
05:42 - so it says open ytvaperiosapp.xcodeproject 
when you do this and hit enter
05:50 - it automatically opens the project for us  
05:53 - now that we've opened the project let's see 
what it looks like so we are not going to  
05:57 - use my iphone we're going to use the simulator 
i like the iphone 13 even though i don't have  
06:01 - it as you can tell right there so let's 
run the project so if we click command r
06:12 - we have run the project and this is what we see 
it is just your basic crowd application meaning  
06:17 - create read update delete so all it can do is 
fetch a list of songs so here's a list of songs  
06:24 - that i've been listening to lately 
if we click the plus button here  
06:28 - because this was very minimal 
there's literally like no  
06:32 - title or anything telling you what to do but all 
you do is type in a song name so let's type in  
06:37 - stay is another one they're songs if you click add 
a song we see that we added the song to the list
06:45 - and then we can click on the song and modify 
it so that's the update so update song
06:57 - okay rearranged that's okay we do that and then 
we can also delete so let's say kill this love  
07:04 - delete and that's about it that's all the 
app does is those four different things  
07:09 - but now we want to unit test it so this project 
was not written with unit tests so we want to  
07:14 - go and add that add them manually so we can do 
that in a couple of ways we can go up to file
07:22 - and click add i think
07:30 - oh yeah i don't remember okay we click file and 
then click and then hover over a new and then go  
07:37 - down to add target so we click on that and then 
this big list of things come up of pretty much a  
07:44 - bunch of different stuff you can do in ios so make 
sure you have ios selected and let's filter this  
07:51 - and type unit and what we want to add is a unit 
testing bundle so if we click on next we can do  
07:57 - it this way another way to add unit test is to go 
over to the third well sixth little icon here if  
08:04 - you hover over it it says this the test navigator 
so under here you can click the plus button in the  
08:10 - bottom left and then just directly go to new unit 
test target which this would be the easiest way so  
08:17 - if we would have clicked next on that other screen 
this is where we would have ended up at so this is  
08:22 - our project name which it has a lot of hyphens 
in it and then it just tacks on tests at the end  
08:28 - so that is fine with me or you can just call 
it like unit tests but i would just keep the  
08:32 - default name it's easier we are under my team 
organization identifier we are writing swift  
08:39 - then that's the project that we're in and then 
the target we are testing so target to be tested  
08:44 - is this project so go ahead and click finish 
and then you'll see two things appear right here  
08:53 - but let's go back to the project navigator 
in the project navigator we can click we can  
08:59 - see a new folder called yt vapor ios test and 
you can see these are both at the same level  
09:05 - but they're complete they're separate from 
each other now even though they're in the  
09:08 - same xcode project so that's the name that we 
gave our test which was that really long name  
09:14 - and then by default it creates a unit 
test class for us like we saw last time  
09:19 - so let's just keep this one i do want to 
delete the test perform performance performance  
09:27 - example we can leave those ones and then 
over in the test navigator that we saw  
09:34 - this is the class name that we have right here so 
if we were to change this it would change right  
09:38 - there which we're going to change it and then test 
example this is our one unit test that we have so  
09:45 - if we want to run our unit test we click command 
u and that'll go ahead and run everything and you  
09:51 - can see the project ran really quickly so it opens 
but then over here our unit tests pass because  
09:57 - we're not doing anything so the first thing 
we're going to do we are going to be testing our  
10:04 - view model so we can open all of these most of 
them actually we don't need the views we are going  
10:11 - to test the song list view model and test fetching 
songs so this will go and perform a network  
10:18 - request using async await so if we 
click on fetch and see what this does
10:26 - we can see right here that it uses url 
session to perform a network network request  
10:33 - we make sure that we get a 200 back we decode 
the data into some kind of json object and you  
10:38 - can see this is pretty this is generic i was 
going to say pretty generic but it is generic  
10:43 - and then we return some kind of object but in 
the songlist view model you can see what we're  
10:49 - actually decoding is uh of type song and then 
we set it to songs the song response is equal to  
10:56 - our variable songs which is used in the song 
list which this won't show anything i don't think  
11:04 - so this is just the view but you know right here 
there is a list but it's a network request so you  
11:10 - don't see it on the swift ui preview so that's 
what we're going to be testing the first thing  
11:16 - we have to do though is take out the singleton 
we want to make this we want to make this class  
11:23 - so it is not a singleton anymore so to 
do that we can delete this private init  
11:28 - because we will have an initializer and then we 
can delete this static variable called shared  
11:36 - okay once we do that we will immediately have some 
issues so if we click command b and try to build  
11:42 - it it doesn't build and then if we switch over to 
the issue navigator so you can click command five  
11:49 - like command one is the first one command five 
yeah it just goes through command two three 234  
11:56 - but here we can see in our songless view model 
it says no member shared that's because we just  
12:05 - deleted this variable called shared so now we have 
to find a different way to access this function  
12:10 - so to access this variable what we are going 
to do is actually create an initializer  
12:18 - and we are going to take 
in an object of http client
12:28 - and so we need a variable for this let's 
say bar http client is of type http client  
12:38 - oops exclamation point and then inside 
the initializer set the value so
12:45 - self.http client so we're setting this 
one equal to this one and so when we are  
12:52 - here instead of calling dot shared the 
variable we just deleted we want to use this  
12:57 - object http client and then we'll call fetch 
so if we build this we still have three errors  
13:06 - but that's okay so let's fix this one 
down here for this is the delete function
13:14 - use http client and now we have four errors we 
have four errors um because we are using the  
13:24 - song list view model and we're sorry we're using 
the http client in the song list view model and  
13:30 - in the ad update song view model okay so we've 
changed that one let's go click the top error  
13:38 - so if we go to the add update song view model 
we don't want to use the shared instance anymore  
13:43 - and now here we also need to use the initializer
13:50 - and we can initialize it with nothing or we have 
two initializers here because when we are on  
13:57 - the song list which i'm going to get rid of the 
preview because we don't really need it you can  
14:05 - see we call the song list the add update song view 
model with an empty initializer and with a song  
14:12 - so inside inside the view model we have 
two initializers and we want to change  
14:18 - it to use our http client but we need the 
client in both of the for both of them so  
14:26 - we create our variable http client and both 
of them will then take in an http http client
14:40 - and we need to then open 
that and do the same thing
14:47 - and we are going to copy that and we will paste 
it down here we'll do the same thing and have  
14:55 - this also taken one as well just like that so 
it's taking it in in two different ways when it  
15:02 - was an empty initializer now it has this value and 
this one where it has a song and the http client  
15:08 - you can see this blue over here because this 
project is under source control so in the  
15:13 - project if we were to type git status we can see 
all of the different files that we have edited  
15:21 - and the new file that we added as well 
but we won't be going into any of this  
15:25 - and even if you try to push to this project 
you can't so it'll be fine if i did this it  
15:30 - would work because i have the like developer 
access but you guys no none of you guys can't  
15:36 - so it's okay okay what we want to do next is 
let's build it and we now we have six errors  
15:44 - it just keeps growing this is refactoring 
um that's what that's what this is actually  
15:50 - called is we are refactoring the application to 
we are changing what the code looks like but not  
15:56 - really the functionality of the code so in 
the end it'll end up doing the same thing  
16:01 - so let's go back here we need to use our http 
client and that messes up this indentation  
16:10 - so if you highlight over this and hold ctrl and 
then click the letter i that fixes the indentation  
16:17 - so we have six errors if we build it okay we 
have five we are getting closer and now here  
16:25 - we are missing the argument for the 
http http client in the song list  
16:31 - view so if we click fix because we added that 
initializer of needing this client we now have  
16:37 - to initialize one so we create a new one at 
this point here and what are the other errors  
16:46 - okay we go back to the song list so we're 
actually at the bottom that was the top of  
16:50 - the file for the song list and we go to the bottom 
we have two different ones so if we click insert  
16:57 - so what we are going to do is we are 
going to copy this one and initialize  
17:03 - a new one for each of these so a better way 
possibly would to actually make the song list  
17:10 - um have its own http client and then 
pass it into here and use the same one  
17:16 - for that instance and both of those instances for 
this it kind of doesn't matter but that may be  
17:24 - a better way to do it but this is the way 
that i'm going to do it for this example  
17:28 - so if we click command b and build it we're 
almost there we only have one more error and  
17:33 - this is in the ad update song view model and it's 
the update song part so let's take away the shared  
17:42 - andrew http client and we build it and we 
still have one error oh it's the preview
17:53 - that's okay okay i still had that my 
clipboard so do http client to fix that one  
18:01 - now if we build it we have build succeeded so if 
we go and run the application we can see it run  
18:07 - and the same thing happens as we 
it still looks the exact same so  
18:11 - we know personally we didn't break anything 
because we can see it still all working and we  
18:17 - can test that by adding a new song so let's add 
i'm trying to think of one of their other songs
18:26 - and they have a song with 
four d's i can't pronounce it  
18:31 - so we're just gonna add a bunch of these and then 
click add song and we see the song be added to  
18:37 - this list and this was able to properly fetch 
it so we know everything's still works okay we  
18:43 - have built the project we don't have any errors so 
the next thing we actually are going to be doing  
18:48 - is we are going to actually mock the http client 
so if we want to close all the files and we're  
18:55 - at this one http client so we want to mock this 
one because for it to be a unit test it cannot  
19:01 - go out to the network because going out into 
the network to the internet means our app is  
19:07 - relying on something else and what we want to 
do with you or what we want to accomplish with  
19:11 - unit testing is testing our own code and our code 
doesn't test the internet so we need to isolate  
19:18 - it away from the internet so to do that we want 
to start by making a protocol called http client  
19:28 - protocol so a protocol is like a contract so what 
we want is we want our http client to conform  
19:39 - to this protocol and by conforming that means 
that it has to follow whatever rules the protocol  
19:44 - sets so right now if we built it it conforms 
because the protocol doesn't have anything in it  
19:50 - but we want is we want it to have all of these 
functions in our protocol so we can literally  
19:57 - copy like the function signature here and put it 
up in our protocol and when we build it it still  
20:04 - conforms because our class is using or does have 
a function that the protocol says it must have  
20:12 - and the reason we're doing this is so when we 
mock the client we will mock this functionality  
20:18 - and make sure that it won't go and do this network 
request we will have it go and do something else  
20:26 - so we want that one we want to add the send 
data function and scroll down we want to add  
20:35 - the delete function so copy this one and put it 
up in our protocol so there we go we have these  
20:44 - three functions and everything will still work 
when we click command b and build it because  
20:49 - this does conform to this but if we were to 
add like another function called do something
20:57 - and then we build it we get an error 
because it says our client meaning our  
21:03 - class does not conform to the protocol that we 
specified add protocol stubs if we click fix  
21:10 - this is what happens is it literally says 
like your you must have a function that says  
21:14 - do something otherwise like you don't conform but 
we don't need that so let's just erase that part  
21:22 - okay so we did that but in order to actually 
use this is we are going to this is the real  
21:28 - http client and we'll make a mock client which 
is a mock class that also conforms to this same  
21:35 - protocol so let's go ahead and do that right 
now so let's add a new file so click on our  
21:44 - yt vapor ios app tests and we want to make 
a swift file so click on next and http
21:56 - client
21:59 - let's call it mock http client like that and 
then make sure we are in the tests like folder  
22:06 - and the target that's selected is the test 
so not our actual app target and click create  
22:13 - let's create our class so let's type 
final class or we call it mock http client  
22:23 - and we want it to conform to http client protocol
22:30 - so i add this final keyword because 
we're not inheriting from this  
22:34 - our other stuff probably should have that 
but that's okay i'll just add it right there  
22:39 - and so we get this error saying cannot 
find http client protocol in scope  
22:44 - that's because our test target is 
completely separate from our app target code  
22:49 - so we created this in the app target so 
our test target doesn't have access to it  
22:55 - does our other yeah our other test doesn't have 
it either so what we actually have to do is import  
23:00 - our code from the the app target so we do that 
with app testable import and we want to import yt  
23:10 - vapor ios app so this is just whatever 
typically your project is named  
23:16 - so if we do that we can see 
we have a different error of  
23:20 - our mock client doesn't conform to that client 
protocol which makes sense because there's nothing  
23:25 - here so if we go ahead and click fix on that we 
can see what shows up are the three functions  
23:32 - right here that our protocol says your 
class must conform to or must have these  
23:36 - three functions for it to work so let's go 
ahead and click code completion on all of  
23:42 - those and we'll do something with that in 
a second and that needs a return oh well  
23:51 - so what we actually want to do is what we want to 
have our code do right here is instead of using  
24:00 - the real http client like this we 
want to use our mock client when we  
24:07 - perform the unit test so the way that we do 
that is using what's called dependency injection  
24:12 - so if we copy the name of our protocol we go to 
the song list view model we want to use that type  
24:20 - instead so we are changing the type instead of 
using the http client we are using its protocol  
24:26 - so this allows us to pass anything that conforms 
to our protocol so we know the real http client  
24:33 - conforms and our mach 1 conforms so when we 
build this it's still not going to build because  
24:40 - the mach 1 i know it does build oh when you type 
command b that's telling the app target to build  
24:49 - by default you can change that but by default 
our app target does build technically over here  
24:54 - our unit test target would fail but if we 
try to run unit tests if we click command u  
25:02 - yeah we then see build failed because we haven't 
written any code here but if we click command b to  
25:07 - build the project you can see build succeeded but 
here it's we want our protocol to conform or we  
25:15 - want to use our sorry we want to use our protocol 
here as opposed to using the real instance of http  
25:22 - client so we want to do that here and we also 
want to do that in add update view model so if  
25:29 - we switch this from client to http client protocol 
switch all three of those we build it we are good
25:40 - okay everything's building we need to yeah we need 
to make our mock now so we are going to for focus  
25:47 - on the fetching so we aren't going to do anything 
with these it looks like i think it should be fine  
25:54 - if we don't write anything here but if we get 
an error we may have to write something but we  
25:59 - do have an error on the fetch because the fetch 
returns an object called t and you can see as well  
26:06 - the protocol stubs this is what they 
looked like for the protocol of like  
26:13 - t codable blah blah blah but then 
over here you can see it just says t  
26:18 - and then at the end they tack on this and 
encodable decodable you can write it either  
26:23 - way i like the other way because it's kind of 
a little bit shorter you can do it like that  
26:29 - so it says t is of type codeable so that's why 
it had the where t is encodable and decodable  
26:35 - right here so i'm just going to do that to 
the others because i like it that way instead
26:44 - there and what we want to do is we want to mock 
our http client so that means instead of here  
26:54 - doing the network request we want to 
do something else and the something  
26:58 - else that we want to do is we want to load 
like a canned response of json that's in  
27:04 - our test target so let's click command n on 
here to create a new file within our test target  
27:12 - and unfortunately if we search json there's not 
really a g like there's geojson but there's not  
27:17 - like a json file we just have to search not 
blank playground we just have to go down to
27:28 - empty no that's a documentation here 
other another empty file and click next  
27:37 - and we want to make let's call it song response
27:43 - dot json and we want it again in our 
test target and make sure down here  
27:48 - in targets it's our test target 
here not our actual app target  
27:53 - and we click create so what we want to do is add 
a fake song response we are going to pretend like  
28:02 - we'll give a json response back like what it would 
see from the server so here we are going to use
28:11 - this one so this is what the json looks like from 
our server it's literally just a title and a uid  
28:18 - you could copy this exact one or type something 
else but it does have to look like this  
28:23 - because if we look at our model it's a 
u it's a of type uid so it will have to  
28:31 - whatever string this is it will 
have to parse to you uyd you  
28:35 - i don't think would just be able to type like one 
two three but you can try it at c and let me know  
28:43 - or i might test that later but that's what 
it's going to look like right now so that's  
28:46 - our song response that we have so now we need 
to make this function go and get that response  
28:52 - but to do that we are actually going to add a new 
type as well so if we click command and again we  
28:58 - this one will be a swift file and let's call this 
mockable so again make sure it's test target and  
29:06 - we're good so if we click enter or create we 
create a new file called mockable and what we  
29:12 - are going to do is make a protocol and i got a 
spell right protocol called mockable and it'll  
29:22 - conform to any object and what we want it to have 
is a reference to the bundle so that'll be var
29:32 - bundle and this is a get only property so 
when you make protocols you have to say are  
29:36 - they getters or can you get the value or can you 
set the value so can you read or can you write  
29:41 - you can do both or you can do not one or the other 
you can only have a get but if you have a set that  
29:48 - means you also have to get it have a get if that 
made sense and then we'll have a function called  
29:56 - load json and again we'll make 
it generic so this can conform  
30:01 - to just decodable because all 
it's doing is decoding the data
30:15 - oops t so this means load json and we will load 
with a file name and then a type and the type  
30:24 - has to be decodable so now we are going to make 
an extension to our protocol called mockable  
30:31 - so an extension for protocols this means that 
like by default we're going to make default  
30:38 - functionality for these two different things so 
when we have some object that conforms to mockable  
30:44 - it can choose to use the default implementation 
or overwrite it and create its own implementation  
30:49 - so we are going to use the default one so 
for this we need a variable called bundle
30:56 - and it's of type bundle and we are going to return
31:04 - for
31:08 - type of self and then
31:14 - and actually i don't feel like typing the whole 
thing out again so we are going to copy that
31:20 - paste it and then actually write something here 
so we're what we are going to do is we are going  
31:28 - we are going to decode data from this json 
file so to do that we have to get the path  
31:36 - so not get guard let path equal bundle dot url
31:43 - we are going to use for resource with 
extension so the first one and this is
31:52 - oh sorry not song response that's 
the one that we will be using  
31:55 - but this is generic so that's file name 
and then with extension json so this could  
32:01 - load any json file so you could really in the 
end copy this and use it in like any project
32:10 - and then we could have let's 
throw a fatal error with a message  
32:14 - which is more descriptive than 
just like a print statement
32:21 - and just say fail to load json 
file but if all that works  
32:25 - let's go ahead and have a do catch block
32:31 - and what this is going to do 
is let data is equal to try
32:37 - oh whoa not that one
32:43 - that's contents of that's what i want
32:48 - so let data equal try data contents of 
path and what this is doing is turning  
32:53 - that that just says it by from data but it's 
taking this making a data object out of it  
33:00 - and then what we want to do is decode 
that so let's do let decoded object  
33:07 - equal to the jsondecoder.decode 
and we want to decode into of type
33:20 - t.self so it's an array of objects that 
are of type t so for us it'll be song  
33:27 - and then from the data so that's that 
variable so we want to decode this data  
33:32 - into that type and then lastly 
we will return the decoded object  
33:39 - and then we have to write something 
in our catch statement so for this
33:46 - i like to put some print statements and use a 
emojis for everything because i think you can  
33:53 - tell what's happening when you have emojis because 
like your console will look like something like  
33:58 - this and it's confusing to find where things are 
so i use emojis for everything and again that was  
34:04 - a shortcut thing i have on my computer if i type 
a colon and start typing like the emojis come up  
34:10 - which is nice or you can type control 
command space and that's the default whoops  
34:17 - emoji picker thing and you can also find that 
from edit and then go to emoji symbols you'll  
34:25 - find that on under edit for like any application 
that has a text field so we want to do that  
34:31 - and use string interpolation and print the 
error but we can also throw a fatal error
34:40 - that says failed to decode the json so there we go 
we have written mockable which is a protocol with  
34:47 - the bundle and a load json function and what that 
does by default is returns the bundle for this  
34:56 - target and then it gets the it gets some kind 
of file name that you pat that you pass into it  
35:03 - that some file or json file specifically 
and we will decode that file using data  
35:10 - we decode it into some kind of object and then 
we pass back the decoded object to return from  
35:15 - this function and if that fails we print 
it and then actually throw a fatal error
35:23 - okay we have done that part 
now we need to actually use it  
35:28 - so if we go into our mock implementation when 
we fetch the data we want to fetch it from our  
35:36 - um want to fetch it from this 
whole mockable object as opposed to  
35:42 - its default implementation of using a network 
request to the network so this helps us write  
35:48 - the unit test because we're isolating our code 
so if we actually not type that we need to first  
35:54 - make this conform to mockable and so it 
has mockable and now we can write return
36:04 - load json not straw song and this is of type  
36:14 - and we're actually not going to write song 
here we are going to use the t the generic  
36:19 - t um closure unused what is all this saying oh 
this needs to not be that that needs to be a comma
36:31 - and we should almost have everything 
oh yeah and this needs to be t dot self  
36:39 - okay if we build that that 
builds but that's saying our  
36:42 - what is this our app target builds but if we 
click command u it ran our unit test in our unit  
36:49 - test pass because if we go back to them the only 
thing there is this test example and that doesn't  
36:55 - do anything but we know our unit testing code that 
we have everything we've written down here passes
37:04 - okay that was a lot of code and we haven't even 
written our unit test yet so what we did was we  
37:10 - added a unit test target to a project that did not 
have unit tests to begin with we have fully mocked  
37:17 - out our http client so that instead of performing 
a network request to the internet we will perform  
37:24 - a network and network request and actually go 
and get data from a local json file and we will  
37:31 - go and get data from a local json file and in 
doing that we will isolate the unit test that  
37:37 - we're going to be writing so stay tuned for the 
next lesson where we actually write our unit test