00:01 - hey coders how's it going it's Chris
00:04 - here hope you guys are having a great
00:06 - day over the past couple of weeks we've
00:08 - gone through a lot of the features of
00:09 - the parse platform but when we were
00:11 - talking about saving data we've always
00:13 - just been working with the contact'
00:15 - class and that was something that we
00:17 - created to represent a person or contact
00:20 - well chances are in your own app you may
00:23 - have more than one class and furthermore
00:25 - the data may be related so for example
00:27 - if this was an application for a
00:30 - salesperson and they wanted to keep
00:31 - track of their contacts and what sort of
00:34 - communication that they've had with
00:36 - these contacts I might have another
00:38 - class called a call for example to
00:40 - represent a phone call so a phone call
00:42 - may be associated with one of these
00:44 - contacts so today I'm gonna show you how
00:47 - to create another class we're gonna use
00:50 - phone call and how we're going to relate
00:52 - that data to the contacts class back in
00:56 - the Parsa documentation or the parson
00:58 - guide we're going to be looking at the
01:00 - information under objects relational
01:03 - data let's go into our Xcode project now
01:05 - and this is just a blank single view
01:08 - application Xcode project with the parse
01:11 - library integrated if you missed that
01:13 - video check out this lesson too in the
01:16 - upper right hand corner it's gonna open
01:18 - up in a new window and you can see how
01:19 - you can integrate the parse library into
01:22 - your own Xcode project and so the main
01:24 - storyboard is empty and we're looking at
01:27 - the view controller a lot Swift which we
01:29 - have written import parse up here so in
01:32 - the viewdidload what I'm going to do is
01:34 - create a new phone call object I'm going
01:40 - to set its properties and then save it
01:45 - actually not called properties its
01:48 - called D key value pairs so I'm going to
01:53 - create a brand new phone call object so
01:55 - let call equals P F object and with the
02:00 - class name this is gonna be a brand new
02:02 - one because in our parse back end right
02:04 - now we only have the contact class so
02:07 - when I write phone call here and I try
02:09 - to save it it's going to actually create
02:11 - a brand new
02:12 - so let call equal that let's set its
02:15 - properties so call let's say duration
02:18 - it's 50 and then let's also say that the
02:24 - topic or the point of the conversation
02:27 - was follow-up and finally let's have a
02:33 - contact key where the value is the
02:37 - contact person so let's say that I just
02:40 - had a call with Tommy and I want my
02:43 - phone call object to have Tommy set as
02:46 - the contact well first I have to
02:48 - actually get Tommy as a PF object from
02:51 - my parse back-end so I'm going to just
02:54 - comment this guy out for a second and
02:57 - let's retrieve Tommy so let query equals
03:03 - PF query class name is contact and I'm
03:08 - gonna add a constraint where key to
03:13 - scroll equal to so key is going to be
03:16 - object ID I'm gonna search for him
03:19 - directly by the object ID okay and I'm
03:28 - going to say query dot get first object
03:33 - so I'm going to use this one get first
03:36 - object and it's gonna actually return
03:38 - the PF object to me and it's gonna throw
03:41 - so if it do if something goes wrong it's
03:44 - gonna throw an error and say let contact
03:47 - equals query get first object and
03:50 - because it throws I have to wrap it in a
03:53 - do statement so do this stuff
04:00 - and you have to use the tri keyword in
04:04 - front of the throwing statement so it's
04:07 - gonna try this statement and if it's
04:10 - successful that's great but if not it's
04:12 - gonna throw an error and underneath this
04:15 - do block you need a catch block to catch
04:19 - the error so couldn't get the contact so
04:25 - there's error that happened there okay
04:27 - so let contact equals try query get
04:30 - first object if everything goes right
04:32 - Tommy will be stored in this constant
04:35 - right here and what I'm going to do is
04:38 - I'm going to assign contact into the
04:43 - contact key of my call object okay and
04:46 - the last thing to do is save in
04:49 - background okay so let's give this a run
04:51 - now pressing command R it's going to
04:54 - retrieve Tommy it's going to create a
04:57 - new phone call object set these key
04:59 - value pairs into it it's gonna set Tommy
05:01 - as the contact and it's gonna save it in
05:05 - the background so we've got a warning
05:07 - here a long-running operation is being
05:09 - executed on the main thread and what
05:11 - it's referring to is this right here
05:13 - this statement normally we would
05:15 - probably want to get this in the
05:16 - background but I wanted to make sure
05:18 - that I have the contact before I
05:20 - continue here in a real app you would
05:22 - probably get Tommy in the background or
05:25 - you would have Tommy as an object
05:27 - already from some other query so this is
05:29 - just a warning telling you that if
05:31 - you're executing this like we're doing
05:33 - here it's going to not respond to the
05:36 - user interface while it retrieves this
05:38 - object so let's look in the backend
05:40 - right now I'm going to refresh and now
05:43 - we have a new phone call class and here
05:47 - we have one call right we have the
05:49 - duration we have the topic and we have
05:52 - the contact so this is the contact
05:54 - column and you can see here it's a
05:56 - pointer and it points to this object
05:58 - which is Tommy if I click this it's
06:01 - gonna jump to the contact table and it's
06:04 - going to filter by that object ID giving
06:06 - me Tommy tells me exactly where that
06:09 - links to so that's pretty cool let's go
06:12 - back to here
06:14 - and I'm going to stop the execution of
06:16 - this I'm just going to comment this out
06:19 - that's how easy it is to relate to
06:22 - classes of data or relate to PF objects
06:24 - together now I want to show you a query
06:27 - if we want to let's say retrieve all of
06:29 - the phone calls where we talk to Tommy
06:32 - let's take a look at how we would do
06:34 - that so let's go back to the parse
06:35 - documentation under queries let's look
06:38 - under relational queries so it says here
06:42 - that if you want to retrieve objects
06:44 - where a field matches a particular PF
06:47 - object in our case Tommy you can use the
06:49 - where key equal to just like for other
06:51 - data types so it's saying that we can do
06:53 - something like this
06:54 - let the query equals PF query let's call
06:59 - this let's call this call query actually
07:03 - PF query class name were looking for
07:06 - phone calls and call query where key
07:11 - contact equals two and then we would
07:14 - pass in Tommy as an object so if we
07:17 - didn't comment this out if we actually
07:19 - have access to Tommy as a PF object then
07:23 - we would pass that into here and then we
07:25 - would run this query and it would search
07:27 - for under the phone call class it would
07:31 - search under the contact field for all
07:33 - objects that equal to Tommy another way
07:36 - that the documentation says that we can
07:39 - do it we can query by object ID so
07:43 - here's how we would do that where key
07:46 - and then we would pass in our field is
07:48 - contact write equal two and then you
07:51 - create a PF object with this initializer
07:53 - without data with class name post and
07:57 - then you pass in the object ID so let me
07:59 - show you how that would work we would do
08:01 - where contact equals to PF object
08:07 - without data with class name so it's
08:10 - we're just creating a PF object that has
08:13 - no data the class name is contact and
08:15 - the object ID is basically this guy
08:19 - right here like that and then we would
08:21 - just run this query find objects in
08:24 - background with block
08:27 - right this is the list of objects and
08:30 - here is the error and in here all the
08:35 - phone calls we had with Tommy so at this
08:40 - point if we're looking for all of the
08:41 - calls where we talked with Tommy you
08:44 - might be wondering how do we have
08:45 - Tommy's object ID or how do we have
08:48 - Tommy as an actual pf' object because
08:51 - you need either one of those pieces of
08:53 - data to perform a query like this well
08:55 - if you think about what we're looking
08:57 - for we're looking for all phone calls
08:58 - where we talked with Tommy chances are
09:01 - in your application to get to a query
09:03 - like this your first screen of your app
09:06 - would probably be a list of contacts
09:08 - right and then you would select Tommy
09:10 - from that list and then you get to
09:12 - Tommy's contact details or maybe like
09:15 - profile card or something like that at
09:17 - that point you would have Tommy as APF
09:19 - object or at least his ID and then there
09:23 - may be a button on that Tommy profile
09:25 - screen then to search for all of the
09:28 - phone calls which you had with him so if
09:30 - you think about that sort of app
09:31 - navigation structure where you're
09:33 - drilling down from contact as the first
09:36 - level and then into calls you've had
09:38 - with that contact then you would have
09:40 - either the object ID of the contact in
09:42 - question or an actual reference to the
09:44 - contact as a PF object okay now one
09:47 - thing I want to point out to you guys is
09:49 - if we go back to the phone call class
09:51 - and you look under contact it's a
09:53 - pointer to a contact object right here
09:56 - let's say that we performed a query to
09:59 - retrieve all of the phone call data so
10:01 - right now we only have one phone call
10:03 - object right but what's important to
10:05 - note is that when you pull the phone
10:07 - call objects down with a query it's not
10:10 - gonna automatically pull the data for
10:12 - the contact as well let me show you what
10:13 - I mean in Xcode here so let me comment
10:17 - this out again let me actually add a
10:20 - couple of comments here just show you
10:22 - what we're doing here a query to
10:25 - retrieve all phone calls with Tommy
10:31 - okay and up here we were creating and
10:37 - saving a phone call with Tommy and
10:41 - lastly here we are retrieving all phone
10:47 - calls so let all calls query equals PF
10:54 - query and we're gonna do phone call and
10:57 - we're not going to put any constraints
10:59 - on it
10:59 - we're just going to find objects in
11:03 - background with block so this is an
11:06 - array of PF objects which may be nil and
11:09 - this is an error so in here we're going
11:12 - to check if let calls equal objects so
11:18 - if it's not nil then we're going to say
11:20 - let's just grab the first one we know
11:22 - there's a at least one call so we're
11:24 - gonna say let first call equals calls
11:28 - zero okay so that's our first phone call
11:33 - and this is a PF object now we know with
11:36 - our phone call object we have a contact
11:39 - key value pair right so let's say let
11:43 - contact equals first call contact right
11:49 - we're accessing the contact field of our
11:51 - phone call and we're putting it into
11:53 - this constant thinking that we have a PF
11:56 - object that is populated with this guy
12:00 - right here this contacts info the thing
12:03 - is in order to save bandwidth and be
12:05 - more efficient when you find objects in
12:08 - background you're looking for phone
12:10 - calls it's not going to retrieve the
12:12 - data of other classes even though this
12:15 - phone call has a relationship with the
12:18 - contact class so meaning that when you
12:22 - pull down this phone call data it's not
12:25 - going to go and also fetch the contact
12:28 - data that it's pointing to here from
12:30 - this field if we look in the
12:31 - documentation for a quick moment and we
12:33 - go back up to objects relational data by
12:39 - default when fetching an object related
12:41 - pf' objects are not fetched these
12:44 - objects value
12:45 - cannot be retrieved until they have been
12:46 - fetched like so mainly this fetch if
12:49 - needed in background with block so let
12:51 - me show you what that means if we go
12:54 - here so contact is not populated but we
12:58 - can do something like fetch in
13:01 - background fetch if needed sorry fetch
13:04 - if needed in background with block so
13:08 - just to sum it up when you retrieve a
13:10 - phone call object it's not gonna
13:12 - retrieve the contact as well you're
13:14 - gonna have to separately go fetch the
13:16 - contact if needed
13:17 - like this however there's an exception
13:20 - to this if you want to fetch the contact
13:22 - with the phone call you can modify your
13:24 - query a little bit all you would need to
13:26 - do is in your all calls query you can
13:29 - type include key and we would put the
13:33 - contact here and if you do this it's
13:36 - telling parse that fetch all the phone
13:38 - calls but also fetch the related contact
13:41 - object as well and in that case when you
13:44 - get all of the phone call objects back
13:46 - here this contact feel is going to be
13:48 - populated already with the contact
13:51 - object so you don't need to fetch it
13:53 - separately like this but that's only if
13:55 - you know that you need the contact PF
13:58 - object because otherwise you would be
14:00 - fetching it for no reason the query
14:02 - would take longer it would take more
14:04 - bandwidth and generally just be less
14:05 - efficient okay so I hope that makes
14:07 - sense please thumbs up the video if you
14:09 - liked it please share it with anyone who
14:11 - you think could use it and please
14:13 - subscribe if you haven't already I'll
14:15 - talk to you guys tomorrow
14:16 - have a great day bye for now