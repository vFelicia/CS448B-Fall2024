01:12 - hello everyone can you hear me
01:14 - hopefully the audio is okay this is a
01:17 - new setup
01:17 - so finally my mac mini has come in
01:20 - and that means that we can stream in
01:23 - 1080p
01:25 - and we can also compile on xcode
01:27 - simultaneously
01:30 - how's everyone doing
01:35 - i see some familiar faces already
01:40 - where are all you guys from
01:52 - now before we start i do have to give
01:54 - you guys some
01:55 - context about what this weather app is
01:59 - all about now i'm not sure
02:01 - how many of you guys uh are part of our
02:04 - code crew
02:05 - community forum
02:09 - let me just make this text a little
02:11 - bigger
02:13 - hopefully it's really easy for you to
02:15 - see now that's really huge for me though
02:20 - argentina algeria brazil awesome i love
02:23 - to see people from all over the world
02:25 - this is amazing
02:28 - yeah so i bet you a lot of people here
02:31 - in the audience
02:32 - must be starting out as a beginner you
02:35 - know brand new
02:37 - i have to say that this app is a little
02:40 - more intermediate than
02:42 - it's not you know intermediate but i
02:44 - would say
02:45 - in order to follow it properly you would
02:48 - need to know at least
02:49 - the basics but don't worry i'll try my
02:51 - best to go slowly
02:52 - and explain it to step by step and
02:56 - a lot of these streaming and coding type
02:59 - of
03:00 - events are going to be pretty messy
03:01 - right it's not going to be like the
03:03 - prepared videos tutorials that i would
03:06 - actually film and take you through step
03:09 - by step so
03:10 - you're going to see the messy process of
03:12 - of coding here
03:13 - now if you are starting brand new and
03:16 - maybe you haven't
03:20 - you haven't gone through the swift ui
03:22 - basics or anything like that
03:23 - i would suggest you to go through just
03:25 - go to my channel
03:27 - youtube.com code with chris and go
03:29 - through this beginner playlist right
03:31 - here
03:32 - and would also help for you to go
03:35 - through another video that i have
03:40 - is it swift api
03:44 - this one right here or any of them for
03:46 - for that matter
03:47 - um because the big exercise for this
03:50 - weather app really is to connect to the
03:52 - weather api here to get the data
03:54 - and then to parse that data and then to
03:56 - display it in the app
03:58 - all right so we'll get started shortly
04:01 - uk india
04:03 - england saudi arabia awesome germany
04:06 - hello
04:11 - i was waiting for this for a long time
04:14 - well it was only a matter of time before
04:16 - this new mac came in so that i can
04:17 - actually
04:19 - build on xcode without killing the
04:21 - stream
04:22 - so i've been using this new mac mini for
04:24 - about
04:25 - a day because the monitor just came in
04:28 - yesterday
04:29 - and everything's a lot faster i'll admit
04:33 - but um yeah launching the simulator
04:36 - compiling code
04:37 - it's a super fast now all right so we'll
04:40 - get started
04:42 - again i want to give you guys some
04:44 - context about what this is all about
04:46 - so in our code crew forum which is at
04:50 - codecrew.codewithchris.com
04:52 - we go here about every month and a half
04:55 - we issue out
04:56 - a community app challenge so this is a
04:58 - chance for
04:59 - everyone to try and build something
05:02 - because
05:03 - through the process of learning you
05:06 - don't
05:07 - really get things to sink in
05:10 - until you start practicing so even if
05:12 - you go through my
05:13 - tutorials and you watch you know all of
05:16 - these
05:17 - 14 beginner lesson videos it's not going
05:20 - to
05:21 - do anything for you unless you launch
05:23 - xcode and you try to do some of it so
05:26 - we started these routine
05:29 - community app challenges to encourage
05:32 - people to take part
05:33 - and to try to build something on their
05:36 - own and even if you can't finish
05:38 - building it you'll still learn
05:39 - a ton a shout out to war card
05:43 - yeah i did get the m1 this is an m1 mac
05:45 - mini with uh
05:47 - one terabyte of hard drive space and 16
05:50 - gigs of ram
05:53 - uh so so far we've done two of these app
05:55 - challenges
05:56 - right we've done the weather app
05:57 - challenge and we've done the stock
05:59 - tracker app
06:00 - and actually you guys
06:04 - i've showcased your apps here so this is
06:06 - the stock tracker app challenge that you
06:08 - see here
06:09 - and there was a weather app one which we
06:11 - did a while ago and
06:12 - and i don't know if some of you guys are
06:15 - in the chat right now if you did the
06:17 - weather app challenge
06:18 - please shout out so props to you for
06:20 - doing that
06:21 - uh all of the communities app weather
06:24 - apps
06:25 - looked amazing and so today um
06:28 - we have about an hour and i haven't done
06:32 - this weather app yet because we usually
06:35 - get the code with chris
06:36 - interns who come in here to work on
06:39 - these
06:40 - app challenges as a way to ramp up and
06:43 - learn swift ui
06:44 - and swift because a lot of them come and
06:46 - they don't have that experience
06:48 - but because they have the computer
06:51 - science background or they know
06:52 - maybe java or whatever they learn in
06:55 - school these days
06:56 - right they they can get up to speed
06:57 - pretty quickly
07:00 - um yes mark mark you did the weather app
07:04 - it was look
07:05 - looked pretty good um one thing to note
07:08 - as well
07:09 - even though there were specific dates
07:11 - for this challenge
07:12 - this challenge is still open so after
07:14 - you watch this video if you get inspired
07:16 - or maybe
07:17 - there was a part you were stuck at that
07:20 - this video illuminated for you
07:22 - you can definitely go back and do this
07:23 - app challenge or even if you haven't
07:25 - started it
07:27 - you can start it right now and you can
07:28 - request to have this forum badge
07:31 - in our forum you can earn badges so it's
07:34 - kind of like a fun way
07:35 - a fun little reward we're going to come
07:37 - up with the new app challenge
07:39 - in a couple of days and there will be
07:41 - another batch that you can earn for that
07:44 - all right so let's scroll down and take
07:46 - a look at the requirements because
07:48 - i like i said i haven't actually done
07:50 - this before
07:52 - now i did take a look at the api last
07:54 - night and it's actually a good thing
07:56 - that i did
07:57 - because although this api is free to use
08:01 - it's a single call api you pass in a lat
08:04 - long so just like a set of coordinates
08:07 - and it returns to
08:08 - all of the data that you need so current
08:11 - weather and conditions as well as
08:12 - hourly uh future forecast
08:16 - um it's a good thing that i created my
08:18 - api key last night because it did take a
08:21 - few hours for it to
08:22 - go live and take effect and i was
08:24 - confused at first because i wasn't able
08:26 - to make this api call even though i had
08:28 - an
08:28 - api key so if you're brand new to swift
08:33 - uh you're brand new to app development
08:35 - uh oftentimes
08:36 - apps will be you know unless it's like a
08:39 - calculator and it's sort of
08:40 - self-contained
08:41 - most apps will fetch data from somewhere
08:44 - um
08:44 - to display within the app and an api
08:48 - is just an interface to another platform
08:52 - or another data source that you can make
08:55 - network calls to and requests to
08:58 - and you pass in a certain set of
09:00 - criteria
09:02 - along with an api key which usually
09:05 - identifies who you
09:06 - are and identifies
09:10 - you know if it's not free that that's
09:12 - their way to identify how many
09:14 - requests you're making because usually
09:15 - it's limited
09:17 - um so you make these requests to the api
09:20 - and then you get data back which then
09:23 - inside your app
09:24 - you can unpack it's known as parsing
09:27 - if that's new to you and then you can go
09:29 - ahead and display those pieces of data
09:32 - on your ui so in this particular
09:36 - uh live stream in the hour that we've
09:39 - got
09:40 - we'll probably take a look at this api
09:42 - together i've already signed up for an
09:44 - api key we'll do some test
09:46 - calls i'll show you something called
09:50 - proxyman which is a tool which will
09:52 - allow you to
09:53 - take a look at the traffic going in and
09:56 - out of your
09:57 - ios simulator so that you can debug any
10:00 - issues
10:00 - and we'll probably display some basic
10:03 - information
10:04 - on the screen now there won't be any
10:05 - fancy ui
10:07 - so if you saw mark's tweet earlier about
10:11 - watching me build a complete weather app
10:13 - i'm thinking that in this hour
10:15 - we will probably be able to make the api
10:18 - call
10:19 - parse the data get some data on the
10:22 - screen
10:23 - and then maybe in a follow-up stream
10:26 - we'll construct the ui
10:27 - not to mention that i have no idea about
10:29 - what to do
10:30 - for the ui right now
10:41 - awesome i'm glad to see that some people
10:44 - some people have done the app
10:45 - football app with all the latest games
10:49 - awesome yeah we're gonna do a sports
10:53 - statistics app as a community app
10:55 - challenge soon so you might be
10:56 - interested in that
10:59 - okay so let's get started with this api
11:01 - uh
11:02 - it's pretty simple if you take a look at
11:05 - this is an example
11:06 - should i make this let's make this
11:08 - bigger
11:10 - that's easier to see okay so
11:13 - this is the url and we can even hit this
11:16 - in our browser
11:18 - right this is a free api so all you need
11:20 - to do is create an
11:21 - account and you get an api key
11:24 - now normally you'd probably want to keep
11:26 - these private
11:28 - especially if you're well whether
11:31 - they're free or paid you probably still
11:32 - want to keep it private because
11:33 - if someone else gets your api key and
11:35 - uses it they're basically
11:37 - um using your usage
11:41 - amount now for the free api for this
11:43 - weather
11:44 - uh call this weather api they limit you
11:47 - to about a thousand calls a day
11:49 - which for our purposes for learning is
11:53 - more than enough all right so you can
11:55 - see here i created a second one because
11:56 - this first one wasn't working but it
11:58 - really was just that
12:00 - it takes a few hours for it to turn on
12:04 - hello from vietnam hello hello okay so
12:08 - this is what we're gonna do we are going
12:10 - to just open up a new browser
12:13 - we're gonna paste that there and we're
12:14 - gonna replace the parts
12:17 - um with the appropriate data so you can
12:20 - see there's a lot
12:21 - there's a lawn there's a part and
12:23 - there's an api key
12:25 - now most apis i think all apis will have
12:28 - some sort of documentation telling you
12:30 - what these parameters are and how to
12:32 - make the calls and what sort of data
12:34 - types
12:35 - that these parameters should be if you
12:37 - take a lot
12:38 - look down here parameters these are
12:40 - required so you have to supply these
12:42 - in to your call right here you need the
12:45 - app id which is essentially your api key
12:48 - right here so i'm just going to take
12:50 - this
12:51 - and i'm going to replace it right here
12:56 - and then you have your coordinates
12:59 - latitude and longitude
13:01 - and these are required as well so for
13:03 - this demo we're just going to pick a
13:04 - location and
13:06 - do you guys have a location a city that
13:09 - you guys want to see
13:10 - too bad i didn't first want to type in a
13:14 - city we'll use that city
13:16 - uh too bad i didn't do any sort of
13:17 - voting
13:19 - thing if i implement something from
13:21 - streamlabs which is the streaming
13:23 - software that i'm using
13:24 - we can vote between two places and get
13:25 - the chat to vote
13:32 - all right let's see what we got in the
13:34 - chat beirut
13:35 - all right that's what we're gonna use
13:40 - the rest of you guys you gotta be faster
13:42 - next time
13:47 - all right so we're going to use this
13:50 - this is the lot
13:52 - right
13:57 - and this is the lawn
14:04 - now if we take a look at the last
14:07 - parameter that
14:08 - we need to do which is part let's take a
14:11 - look at what that means
14:12 - this exclude part so this is optional
14:16 - that means that we could
14:17 - run the api call as is we don't need
14:19 - this parameter but
14:21 - it does allow you to exclude some data
14:24 - from
14:24 - the response so if you don't care about
14:27 - alerts
14:27 - you don't care about minutely or hourly
14:30 - or daily you can
14:32 - you can exclude that and that saves
14:33 - bandwidth and that
14:35 - it's generally you don't want to grab
14:37 - everything when you're making calls grab
14:39 - only what you need so we can just put
14:42 - something in here minutely maybe we
14:44 - don't need
14:45 - minute by minute data so we'll put
14:47 - minutely in here
14:50 - and i'm sure you can put multiple
14:56 - comma delimited list without spaces
14:59 - um i could try that alert
15:05 - i don't know if we'll have to encode
15:07 - that
15:09 - okay so this is the response that it
15:11 - gave us
15:13 - just make this bigger
15:20 - please explain the end point as well
15:22 - what could be the end point here
15:23 - in open weather so
15:27 - the um the end point this is the
15:30 - endpoint right here
15:32 - they have different endpoints for uh
15:34 - different pieces of data
15:36 - this one call endpoint is just a single
15:39 - api call which returns like all the
15:41 - weather data that you would need but
15:43 - if you want historical data for example
15:45 - i think
15:47 - yeah there's historical data so i guess
15:50 - you'd have to pass in
15:51 - a time for when you'd want
15:54 - your your weather data for and then also
15:57 - the coordinates
15:59 - so there are a couple of different uh
16:02 - end points here
16:03 - but the one that we're using today is
16:07 - are we here
16:09 - this one this one call end point okay so
16:13 - this is our data now if you
16:16 - if you haven't learned swift before this
16:19 - will be kind of hard
16:20 - to understand but we'll do our best here
16:25 - so you can see that it all collapses
16:29 - nicely it's
16:29 - like a hierarchy of data right and
16:33 - each piece of data has a label
16:38 - and a value so this is also what's known
16:41 - as a key
16:42 - so you can see that this is exactly the
16:44 - location that we passed in
16:46 - right it's telling us also the time zone
16:49 - the time zone offset and
16:52 - any good api documentation will also
16:55 - tell you
16:56 - the the data that's returned it'll
16:59 - explain to you what those
17:01 - pieces of data are because sometimes it
17:03 - can be pretty confusing so
17:05 - if we go down example of api response so
17:09 - this is kind of
17:10 - kind of what we got here and if we want
17:12 - an explanation of some of these
17:14 - values and keys and what they mean we
17:17 - keep scrolling down it'll tell you
17:19 - fields in the api response
17:21 - so i really like api documentation that
17:24 - is
17:25 - so easy to read and so clear like this
17:29 - so for example uh shift in seconds from
17:33 - utc
17:34 - right that's perfect because if you look
17:36 - at this it's hard to tell
17:38 - what that number is right but this
17:41 - documentation tells you exactly
17:43 - what that data means so that you can do
17:45 - something with it
17:47 - okay so in here we have current which
17:50 - represents the current weather i'm
17:52 - assuming
17:54 - and we have inside a group of data
17:58 - and we have so you can collapse this
18:02 - so all of this data right here is
18:03 - related to the current weather
18:06 - and dt uh this is a big number
18:10 - i'm going to assume that that means
18:14 - date time uh
18:18 - yeah dt here current time unix utc so
18:22 - we're going to have to do some
18:23 - conversion right and i'm assuming this
18:26 - would be
18:27 - number of seconds sunrise like
18:30 - time of when the sun rises time when the
18:32 - sun sets temperature
18:34 - right this is a big number which i'm not
18:37 - quite used to so
18:38 - let's take a look at this temperature uh
18:42 - units default is kelvin
18:46 - uh you can do celsius fahrenheit
18:49 - how to change the units used so let's
18:51 - click this
18:54 - and you can see here there's an
18:57 - additional parameter that you can supply
18:59 - called units and you can pass in it's
19:02 - optional
19:03 - you can pass in standard which i guess
19:06 - is the default that we have right now in
19:07 - kelvin
19:09 - we have metric and imperial now i don't
19:12 - know about you guys
19:13 - and what uh what measurements you use
19:15 - but for me here
19:16 - we're going to use metric i think for
19:19 - you guys
19:20 - if in the us you're probably fahrenheit
19:22 - right units
19:23 - equal metric so that's how you just add
19:26 - another parameter here use the ampersand
19:29 - and then the the parameter name followed
19:32 - by
19:32 - the value so if we do that
19:37 - that looks a little more like what i
19:39 - would expect
19:46 - feels like pressure now you can capture
19:49 - as much of this data as you want
19:52 - and we'll take a look at how in a second
19:55 - in xcode
19:55 - but for now let's let's go through the
19:57 - rest of this data
19:59 - we also have hourly data and you can see
20:02 - it's the same thing but
20:03 - notice that for this it's a square
20:06 - bracket instead of like a curly bracket
20:08 - and this
20:09 - square bracket usually denotes like a
20:11 - list of items
20:13 - okay so you can see here there's
20:15 - actually 14 items you can collapse them
20:16 - all
20:17 - but each of these items inside this
20:19 - hourly list
20:21 - is a temperature with a certain time
20:25 - that is different from the current time
20:28 - so this
20:29 - current is current temperature this
20:32 - hourly is going to be the temperature
20:34 - for each hour if we go back to the app
20:37 - challenge
20:39 - the requirements for this app is going
20:41 - to be show current temperature
20:43 - current feels like temperature
20:46 - and general weather conditions
20:49 - uh be able to switch units from celsius
20:52 - to fahrenheit
20:53 - so that's going to be you know just
20:57 - making a call on metric or passing an
21:00 - imperial
21:02 - have an hourly temperature display for
21:04 - the next 12 hours
21:06 - so what i typically do when i work with
21:10 - the brand new api is just
21:12 - try to get a valid response first
21:15 - right try to make that request this api
21:18 - pass in all of the necessary parameters
21:22 - uh have a positive response like um
21:26 - like a successful status
21:30 - and then try to parse some of the data
21:32 - so the app requirements there are
21:34 - you know a ton of different app
21:36 - requirements here but i'm going to focus
21:37 - on
21:38 - just one very basic thing which is show
21:41 - current temperature
21:42 - for beirut all right so let's focus on
21:45 - that
21:47 - um we're going to jump into xcode now
21:49 - and we're going to set up our project
21:51 - set up the all the scaffolding and the
21:54 - foundation of it and then we're going to
21:55 - try to make an
21:56 - api call here and then we're going to
21:59 - try to just display
22:01 - the current temperature on the screen
22:04 - very basic so think small first
22:07 - let's get rid of that right
22:12 - here comes the fun part and this is
22:14 - where the m1 mac will
22:16 - will shine and not kill my stream when i
22:18 - try to build something
22:20 - okay so we're going to create a brand
22:21 - new app here oh i haven't even added my
22:24 - account yet
22:25 - yeah this is so new uh weather app
22:30 - demo uh interfaces swift ui lifecycle is
22:33 - swift ui app and language is swift
22:35 - we're not going to do core data or tests
22:38 - so we're going to go click on next
22:40 - and we're just gonna save it on the
22:42 - desktop right there
22:45 - so let me see if i can make this screen
22:46 - a little bigger
22:54 - and the audio is good you guys there's
22:56 - some you know background music
22:58 - but you guys can hear me fine
23:04 - how difficult is it to convert those
23:06 - seconds to hours and minutes
23:08 - actually really easy so you in the um
23:11 - the date of the date class you can
23:14 - create
23:14 - one you can create a date object and you
23:17 - can pass in the seconds and then
23:19 - you can use the date formatter class to
23:21 - specify whatever format you want but
23:23 - usually i have to google the format
23:25 - because
23:26 - it's like hh colon mm and then there's a
23:29 - bunch of letters to specify the format
23:31 - so um specify the format and you can
23:34 - convert that date object to the format
23:36 - that you want
23:45 - okay thank you for confirming i know in
23:47 - the very first streams that i did i had
23:48 - some issues with
23:50 - audio let me just make this a little
23:52 - bigger even
23:55 - there we go wow this is really big
24:00 - on my screen okay
24:03 - uh one of the things if you go through
24:05 - my beginner lessons you'll know that
24:09 - you know i like to separate things into
24:12 - groups so it's
24:13 - you know especially for a beginner it's
24:18 - easier to understand and see the
24:21 - different uh
24:22 - components working together
24:25 - oops oh man
24:37 - okay so we'll move our content view
24:39 - which is our base view into our
24:41 - views group and then we'll have this
24:44 - entry point
24:44 - at the top there let me see let's try
24:48 - compiling and running just this basic
24:51 - thing
24:52 - and let's take a look at the stream for
24:53 - performance
24:56 - look at how fast that was
25:01 - all right
25:05 - okay now
25:11 - oh yes i said i was gonna set up the
25:13 - scaffolding first so let's go ahead and
25:14 - do that
25:18 - okay so we're going to set up a view
25:20 - model and the view model is going to
25:23 - supply all of the data for the view so
25:26 - we're going to create a brand new
25:28 - swift file here i'll just call it a
25:32 - weather model
25:40 - and we're gonna make this an observable
25:42 - object which
25:43 - means that our view will be able to
25:48 - observe changes to certain things
25:51 - inside this class uh because inside here
25:54 - we're going to be fetching the data
25:55 - we're going to bring
25:56 - it back and as soon as that data comes
25:59 - back we want the view to be
26:01 - to to realize that right and to display
26:03 - that data
26:04 - so that's why this protocol
26:07 - call observable object will help us with
26:10 - that
26:14 - and then inside content view what we can
26:16 - do in here
26:21 - is we can create a
26:25 - observed object and this is going to be
26:29 - our weather model so i'll just call it
26:32 - model
26:33 - and we will create a new instance of
26:36 - weather model
26:44 - now inside the weather model
26:48 - when this instance gets created this
26:51 - initializer method
26:53 - will run this this basic default and
26:56 - init method
26:57 - see when we create that here it's going
26:59 - to be
27:00 - calling that now in here
27:04 - just to test our api call we can make
27:08 - the request to the api
27:13 - right um
27:16 - we're going to parse the response
27:19 - so when we make the request of the api
27:22 - we're basically sending off
27:24 - we're basically hitting this endpoint
27:26 - right here in the browser url
27:28 - and then the response that we get back
27:30 - is going to be this data right here that
27:32 - we just
27:32 - walked through now we can't use the data
27:36 - in this format this is called the json
27:38 - data format
27:39 - we're going to need to turn this json
27:41 - data into
27:42 - usable instances of
27:45 - our models which we haven't created yet
27:48 - and
27:49 - that so that's what parsing the response
27:51 - means parse the response
27:52 - into i don't know
27:56 - weather objects we haven't created these
27:59 - weather
28:00 - objects yet but we will define that
28:02 - inside models here
28:04 - so it's going to represent the data
28:07 - that comes back from here right that's
28:10 - that's what uh our models are going to
28:12 - represent we're modeling our data
28:17 - and then we are going to
28:21 - set i'm trying just thinking about how
28:26 - how to explain this properly in case
28:27 - there's
28:28 - uh you know someone who's just starting
28:31 - out in the chat right now so i'm trying
28:33 - to
28:33 - think about the best way to explain this
28:39 - now i mentioned that when the response
28:41 - comes back and we parse it into these
28:43 - weather objects
28:45 - we'd want the content view to be uh to
28:47 - pick up on that right and
28:48 - be notified well the the way you do that
28:52 - is you can create a property up here
28:54 - called published
28:56 - and this can store your weather objects
28:59 - so we might call it
29:03 - weather for lack of a better term right
29:05 - now and
29:06 - this will be an instance of the
29:09 - the model that we create in here so
29:11 - right now i can't actually
29:13 - declare this yet so let's just comment
29:15 - that out
29:17 - but we're gonna set the weather property
29:20 - with the parsed objects
29:23 - and the fact that we have this property
29:27 - wrapper called
29:28 - published right here as soon as we set
29:30 - our
29:31 - parsed objects from the api response
29:35 - as soon as we set that into this
29:37 - property because
29:39 - in the content view which is what the
29:41 - user will see
29:42 - because this is an observed object it's
29:45 - going to pick up on that change and
29:46 - we're going to be able to display the
29:48 - data
29:48 - inside our view here so right now we
29:50 - just have a hello world
29:55 - okay so let's go through the process of
29:58 - modeling our data we're going to create
30:00 - a new
30:03 - swift file in here in our model group
30:06 - and we'll call this
30:08 - we'll call this weather i don't really
30:11 - have
30:11 - a good term for that but if we take a
30:14 - look at our data now essentially
30:16 - what we want to do is create some swift
30:18 - structs
30:19 - that map to this data and we don't have
30:22 - to map all of the data
30:24 - because right now we're only interested
30:26 - in
30:27 - the current temperature like i said we
30:29 - want to start really small
30:30 - and we can add on pieces as we go on
30:33 - because
30:34 - you know if you model everything and you
30:37 - run into errors
30:38 - in parsing then you've got way more to
30:41 - to figure out and to troubleshoot so i
30:43 - always like to start with like
30:44 - the smallest easiest case and sort of
30:47 - build up from there
30:52 - okay so this
30:56 - this is the outer object that we're
30:59 - trying to map here
31:00 - so maybe i'll call this
31:03 - weather response
31:06 - all right and we'll have properties here
31:10 - that represent you know
31:13 - the information that we want to capture
31:15 - here so let's say we want to catch our
31:16 - lat
31:17 - and long and these are
31:20 - this would be a double data type that's
31:23 - what we would represent here
31:24 - lat and this would be a double
31:30 - this would be a double as well um but
31:32 - what we're really interested
31:34 - in for the current temperature at least
31:36 - is inside this
31:37 - current property right here because
31:40 - inside here
31:41 - there's it's another object which has
31:44 - the date time uh
31:46 - and then also the temp so this is the
31:48 - temperature that we're interested in
31:49 - right
31:50 - so we're gonna have to create
31:53 - var current now what's the data type for
31:56 - this
31:57 - like i said before it is an object in
32:00 - itself so we have to create another
32:03 - structure to map or model
32:06 - this data right here
32:10 - all right so let's call that
32:14 - actual
32:17 - let's call that the actual weather
32:18 - struct because
32:20 - in my point of view
32:23 - this outer object is just a wrapper for
32:28 - you know the the actual weather data
32:30 - that we want which is inside
32:32 - current see this this is a
32:35 - you know a unit of weather and this
32:37 - hourly is an array
32:39 - of these these units of weather
32:43 - which have you know a particular
32:44 - timestamp to it
32:46 - so if we take a look at what this
32:50 - unit of weather has what we're most
32:52 - interested in right now is a date
32:55 - timestamp right there and also the
32:57 - temperature so both of these
32:59 - are doubles let's say
33:02 - so var dt
33:06 - temp right and we're matching the
33:09 - property names
33:10 - exactly to the uh the key
33:15 - the key names here in the json data and
33:17 - that's going to make it easier for us to
33:19 - parse we don't have to do that
33:20 - there are ways for you to specify coding
33:23 - keys
33:24 - to map your property names to the json
33:27 - key names but
33:29 - let's keep it simple here now
33:32 - for current we can say that this is an
33:34 - instance of
33:36 - weather here we're assuming a couple of
33:40 - things
33:41 - we are assuming that there always will
33:43 - be a lot
33:44 - long in the current because
33:47 - we have not made any of these optional
33:50 - that means when it's parsing
33:52 - the response it's going to look for
33:55 - these pieces of data if for example the
33:58 - lat is missing or the long is missing or
34:00 - sorry not long lawn
34:04 - and current or current is missing like
34:07 - this this is just
34:08 - empty then we will probably crash our
34:10 - app
34:11 - so sometimes in the api
34:15 - you'll be able to see if it can
34:18 - ever be uh nil or not like
34:22 - in this case i don't let me just see
34:25 - here
34:31 - yeah here's lat lawn and current doesn't
34:34 - tell us
34:35 - if this could for example be
34:38 - missing information i'm assuming it it
34:41 - wouldn't be missing
34:43 - and that's what we're going to go with
34:45 - um okay so
34:47 - the other thing that we have to do is to
34:54 - uh inherit not in here but like conform
34:57 - to this decodable protocol and this
34:59 - makes it
34:59 - this is gonna make it easy for us to
35:01 - turn this response data
35:04 - right here into instances of this so
35:07 - let's go ahead and make the call i
35:08 - realize that
35:09 - we're running out of time because i talk
35:11 - so much and i try to
35:12 - go a little slower so i'll pick it up a
35:15 - little bit
35:16 - but we are going to try to parse this
35:18 - response into
35:20 - this weather response right here so
35:22 - we're going to kick off the call right
35:23 - here
35:24 - and we're going to do that with a class
35:26 - called url session
35:28 - so this is typically um
35:32 - a little harder to understand for
35:36 - newcomers but after you do this a couple
35:38 - of times it
35:39 - it's you sort of get used to it so first
35:42 - of all you get the shared session
35:44 - and then you create a data task from it
35:47 - so i'll show you what that means
35:51 - session.datatask and you can pass in
35:54 - either a url request object or a url
35:57 - object
35:58 - now if you need to specify a more
36:00 - complicated request maybe you need to
36:02 - put something in the headers
36:04 - or something like that you would use
36:06 - this but for our purposes for this
36:09 - api all you need to do is pass in the
36:12 - api key through
36:13 - this query stream parameter so we can go
36:16 - ahead
36:18 - and do it through a url now in addition
36:21 - to having these two
36:22 - options there are also versions with a
36:25 - completion handler and that's actually
36:27 - what we'll want because
36:29 - this completion handler parameter lets
36:31 - us specify
36:32 - a block of code also known as a closure
36:36 - a block of code to run when the
36:39 - when the response comes back so inside
36:41 - this completion handler inside this
36:43 - block of code that's when we are going
36:44 - to do this work right here
36:46 - parse the response into weather objects
36:48 - and then set the weather property with
36:49 - the parsed objects
36:53 - all right so this is the one we want
36:56 - okay so first of all we need to create
36:57 - that url object
36:59 - all right so let url equals url
37:02 - and there's a one there's one uh where
37:05 - we can just pass in a string
37:07 - but if you notice this one
37:12 - this the this potentially could be
37:15 - nil so typically you'd want to check if
37:18 - this is nil or not before proceeding
37:20 - but for the sake of time i think i'm
37:23 - just going to
37:25 - throw all caution to the wind and just
37:28 - uh
37:28 - just run with it so we are going to
37:31 - create a url
37:33 - object like that and this is exactly the
37:37 - the call that we made in the browser
37:39 - right here i just copy and pasted it so
37:41 - we should get the same response
37:44 - so let's go ahead and do that we're
37:47 - going to pass in that url in here we're
37:49 - going to force unwrap it if it happens
37:50 - to be nil this will crash
37:53 - we're going to double click this closure
37:54 - to open up a
37:56 - block sorry double click the parameter
37:58 - to open up a block of code or closure
38:01 - we're going to give each of these
38:02 - parameter names
38:04 - this is the data that is returned this
38:06 - is the response
38:08 - if you want to check status code or
38:09 - anything like that and this is any
38:11 - potential errors
38:13 - so this is the data that we'll want to
38:14 - parse into other objects
38:17 - so let's give that a name data response
38:21 - and error
38:27 - and then what we'd actually want to do
38:29 - is in here
38:31 - right so parse response into weather
38:33 - objects
38:35 - actually one thing before before we
38:38 - forget
38:39 - and i always forget this is when you
38:41 - create a data task
38:43 - from the session here here
38:46 - it hasn't actually been fired like
38:49 - you're not firing off that request yet
38:51 - all you're doing is creating a data task
38:53 - that's ready to be fired
38:55 - or or you know a request to be made
38:58 - so you have to call the resume method
39:01 - on it now you can either call it
39:04 - directly from here if you don't need
39:06 - a reference to the data task or you can
39:09 - assign this
39:10 - to a constant like that
39:13 - and then you can call resume on your
39:16 - constant
39:16 - instead so it really depends maybe you
39:18 - want to track the progress of it if it's
39:20 - a download or something
39:22 - like that then you'd want to keep a
39:23 - reference to it okay so let's go ahead
39:26 - and parse these
39:27 - weather objects so we're trying to parse
39:29 - this data that gets returned
39:31 - right and that data represents
39:33 - everything in here
39:34 - if it's a successful call
39:39 - maybe before we parse the data we should
39:41 - see if we're able to make this
39:43 - call and and what we get back and this
39:46 - is a good opportunity for me to show you
39:48 - that network debugging
39:50 - now i use this tool called proxyman
39:53 - there are
39:54 - a variety of different tools you can use
39:56 - out there
39:57 - right so i am going to
40:00 - okay so first of all we have to launch
40:02 - this app
40:04 - right what's going to happen it's going
40:05 - to show this view which says hello world
40:08 - it's going to create a weather model and
40:11 - when this
40:11 - weather model object gets created this
40:14 - init method is going to get called
40:16 - and this is going to kick off that
40:17 - network request
40:19 - right to the api and we're going to see
40:21 - it show up in proxy man proxyman
40:24 - essentially sits in between your app
40:27 - or in between your computer and you know
40:30 - wherever you're trying to make requests
40:32 - to and then you can peek at the traffic
40:47 - all right so hello world uh we see the
40:49 - screen
40:50 - it should got kicked off weather app
40:52 - demo i'm just going to pin this to the
40:53 - top so we can see it
40:55 - now initially you won't be able to see
40:58 - anything in here
41:01 - what we have to do is we actually have
41:03 - to enable
41:05 - we have to give security access for
41:07 - proxy man to listen to that traffic so
41:09 - that we can see it
41:11 - but we can see that it made this uh
41:15 - made this api call and it returned with
41:17 - a status code of 200 which is
41:19 - successful i wonder if i can make this
41:21 - bigger can i zoom this
41:24 - nope i can't zoom in okay
41:27 - what i'm going to do is install the
41:30 - certificate
41:31 - on my simulator so that we can actually
41:34 - take a
41:34 - peek alright so it makes it really easy
41:46 - okay i'm gonna install it on my
41:49 - simulator now
41:51 - okay and then i have to reboot my
41:53 - simulator and that's it
41:56 - so it's gonna crash this because it just
41:58 - killed the simulator
41:59 - and then i'll launch this again just
42:02 - booting back up
42:07 - uh yeah the app right now just says
42:10 - hello world we're still testing out the
42:12 - network call
42:13 - making sure we can make a successful
42:14 - network call and making sure that
42:16 - we get back the data that we are
42:18 - expecting so this is the call
42:21 - that just went out let me actually see
42:23 - do i have to enable this
42:26 - okay let me just try to run that again
42:33 - okay now we can see it so this is the
42:36 - network call that just went out you can
42:37 - see that
42:38 - you know it's a the request goes to this
42:42 - url
42:43 - on the left hand side here you can see
42:45 - the request you can see the body
42:47 - you can see the raw request and then the
42:49 - response is what we're interested in
42:52 - the body here take a look this i know
42:54 - it's hard for you to see
42:56 - because the text is so small
42:57 - unfortunately i can't
43:00 - i can't enlarge this but this data this
43:02 - response that our app
43:06 - okay this app is getting back
43:10 - is the same response in our browser
43:13 - window right here
43:14 - so this tells us that we are indeed
43:17 - getting the appropriate data back
43:19 - now a tool like this is really helpful
43:21 - sometimes
43:22 - um because it's hard to see what's
43:24 - happening
43:26 - in terms of what the api is sending back
43:28 - to you so
43:29 - if you ever run into issues where you
43:31 - need to debug network traffic
43:32 - a tool like this is great this is free i
43:35 - mean you can pay for it but i'm using
43:37 - the free version
43:38 - which is more than sufficient for what i
43:40 - need right now
43:42 - okay so since now we have verified
43:45 - that we are making this call and we are
43:48 - getting an
43:49 - appropriate response back we can try to
43:50 - parse it so to parse it
43:52 - we use a class called json decoder
43:58 - and all we have to do is decoder
44:01 - dot decode and we are going to pass
44:04 - in the data that got returned from the
44:06 - call
44:07 - this method throws errors potentially so
44:11 - we need to be
44:12 - safer about it and wrap it in a you know
44:15 - some error handling
44:16 - in swift there's a do catch block which
44:19 - i'll show you right now
44:22 - okay so what we're trying to parse well
44:24 - we're trying to decode
44:25 - the uh the data so let's put this in
44:28 - here
44:29 - and the data can be nil like this is an
44:32 - optional parameter so
44:33 - you know ideally you'd want to check
44:37 - if the yeah let's do that so ideally
44:41 - you'd want to
44:42 - say something like you know if the data
44:45 - is
44:45 - not nil and the error is
44:49 - nil that means that there's no error
44:52 - that came back and that the date there
44:54 - is data for you to parse
44:56 - so normally you'd want to do this sort
44:58 - of check right
45:00 - and you'd only attempt to parse
45:02 - everything if
45:04 - this is true
45:14 - and then again up here you would
45:17 - definitely check
45:18 - if you were able to construct a url
45:20 - object
45:21 - and not just force unwrap it like i've
45:23 - done here for the sake of time
45:26 - okay so we've already checked that the
45:28 - data is not nil
45:29 - so i can safely force unwrap this and
45:32 - what are we trying to parse this data
45:34 - into well that's where
45:36 - our models come in right we have mapped
45:39 - the data that we're interested in
45:41 - you know we have mapped this response
45:45 - to this class here so we're trying to
45:49 - turn this data that we get back
45:52 - right into an instance of weather
45:54 - response
45:57 - so that's what we're going to put here
46:02 - and in order to specify it as a class
46:05 - we're going to put dot self there
46:07 - and we're going to try so when this
46:10 - throws errors we have to put the try
46:12 - keyword in front of it
46:14 - we're going to try to parse this into
46:16 - let's say
46:19 - let weather equals equals that
46:22 - we're going to try to parse the weather
46:23 - response into this
46:26 - weather constant and then
46:30 - what we can do oh now we can
46:34 - declare this published property up here
46:36 - so we use the published property wrapper
46:39 - to indicate that when this property
46:41 - changes
46:41 - the value and it changes we want to
46:43 - notify anyone who's
46:45 - observing it so this is going to be
46:49 - a data type of weather response and
46:50 - we're going to make this optional
46:52 - so this initially is nil because we
46:54 - don't have any data
46:57 - and then down here what we can do is we
47:00 - can set
47:00 - this property to the data that we parsed
47:04 - from the api
47:05 - so we're going to say self dot
47:08 - if i call it weather i think i called it
47:10 - yeah whether itself.weather equals
47:13 - uh maybe maybe we'll call this weather
47:16 - response just to be a little
47:17 - more clear and we'll set it like that
47:20 - now what's gonna happen is when you do
47:22 - this because
47:24 - this property up here is a published
47:26 - property
47:27 - it's going to cause the view code in
47:30 - here that depends on it
47:32 - to reevaluate and create new ui
47:36 - based off the fact that that has changed
47:40 - so we always want to update the ui from
47:44 - the main thread
47:45 - and what uh how we're going to do that
47:48 - is with
47:52 - a class called dispatch queue
47:55 - and this is how you would
47:59 - pass off a task or some code for the
48:01 - main thread to run
48:03 - so we can put that in there
48:09 - update the ui
48:13 - all right because setting this weather
48:16 - property is going to cause view code to
48:18 - reevaluate
48:20 - okay so i it looks like we still have
48:22 - some errors here
48:24 - invalid conversion okay we didn't uh we
48:28 - didn't
48:29 - wrap this in error handling yet remember
48:31 - i said that this decode method
48:33 - could potentially throw errors so here's
48:35 - what you would do do
48:41 - catch and you would put
48:45 - that inside the do and in here
48:48 - if there was an error from uh trying to
48:52 - parse this
48:53 - it would come here and you can catch it
48:54 - and you can display it but uh let's take
48:56 - a look at what's happening here oh
48:58 - this should also be inside this do block
49:05 - okay those are let's see let's take a
49:14 - look
49:16 - hmm did i do this wrong
49:19 - decoder.decodeweatherresponse.self
49:27 - uh give me a sec here construct
49:30 - weather response decodable
49:48 - oops
49:52 - oh you know what it might be because i
49:55 - have a couple of what the
50:00 - there we go it was confused as to
50:04 - which weather response was i referring
50:05 - to the class or the parameter but i
50:07 - remember i wrote response as the
50:09 - parameter i don't know
50:10 - did autocomplete change this to weather
50:12 - response for me
50:14 - it might have okay but in any case our
50:16 - code
50:17 - should be pretty good now okay so
50:21 - what we're going to see now is when we
50:23 - launch the app it's going to make the
50:24 - network call it's going to come back and
50:26 - it's going to parse it
50:28 - in and then it's going to set this
50:29 - published property to our weather
50:31 - response
50:32 - so let's step through this code by
50:33 - setting a breakpoint
50:35 - let's set a breakpoint right here
50:39 - when it kicks off the call so you can
50:40 - see that and it will set a breakpoint
50:42 - right here
50:43 - when the response comes back
50:48 - we're doing okay for time okay so
50:51 - initially
50:52 - we're to kick off that network request
50:55 - so i'm going to continue execution
50:57 - right then it comes back with the
50:59 - response and
51:02 - did i shut that off no we still have it
51:05 - so i think this is the response that
51:06 - came back
51:07 - right so that's captured it here in this
51:09 - closure
51:10 - and we can check does the data actually
51:13 - contain data
51:14 - is there an error if we're good to go
51:17 - it's going to go into here it's going to
51:19 - create the json decoder
51:22 - and then we're going to try to parse
51:23 - that data into
51:25 - an instance of our weather response
51:28 - struct
51:30 - so it looks like we're good right it
51:33 - didn't come in here
51:34 - we should probably print the error there
51:37 - but when it comes here
51:38 - essentially we're setting the data to
51:41 - our published property
51:42 - and it's going to pass that off to the
51:44 - main thread to do
51:48 - okay so right now the last thing for us
51:51 - to do
51:52 - is to use the data that we have now and
51:55 - display something
51:57 - in the ui so let's go ahead and do that
52:06 - so here we can because initially
52:09 - remember that in weather model
52:11 - this is nil right model.weather is
52:14 - initially nil because the data hasn't
52:15 - come back yet
52:17 - so before we display anything we're
52:19 - going to check if
52:21 - model.weather is not
52:24 - nil display
52:27 - the weather otherwise
52:31 - oops where's my else otherwise
52:34 - we can display a progress view component
52:40 - so when you launch it now initially
52:42 - you're going to see a progress view
52:44 - and then afterwards you're gonna see
52:47 - let's see
52:56 - uh we're gonna sub in
53:00 - we can do we can say
53:03 - if let weather
53:07 - equals model dot weather and this is
53:10 - just another way of expressing
53:12 - a checking if this is nil or not right
53:14 - so if
53:15 - uh if this is nil it's gonna go down to
53:17 - progress view if that's not nil it's
53:18 - gonna assign it to this constant
53:20 - called weather here so here we can just
53:22 - do
53:23 - weather and then we can display current
53:26 - so current
53:27 - is a double
53:32 - celsius okay so now let's run it and see
53:36 - see what we see
53:40 - oh what have we got here
53:43 - append interpolation did i do something
53:45 - wrong here weather
54:14 - current is an object
54:17 - oh yes sorry thank you chat thank you
54:20 - thank you
54:24 - that's right so current was the object
54:27 - and temperature was the actual value
54:29 - though
54:29 - or property that we're trying to display
54:32 - so we get something like that
54:34 - yes i'm glad you guys are paying
54:37 - attention
54:38 - because it looks like i'm not okay
54:41 - leather in beirut is 29.76 degrees
54:44 - celsius
54:46 - now uh we can we can round that if we
54:50 - want but uh
54:52 - right now let's try to display the
54:53 - hourly
54:55 - all right let's try to round it if this
54:57 - is a double
55:04 - right
55:06 - so what we can do since we'll probably
55:08 - have to do this a couple of times what
55:09 - we can do is
55:10 - create a function here to let's say um
55:22 - how about temperature to string
55:25 - and this is going to accept the
55:26 - temperature in double
55:29 - and give us a string back so in here
55:32 - we're going to we're going to say
55:35 - that we want to return
55:39 - string so string has a format
55:42 - initializer
55:43 - where we can specify uh how many decimal
55:47 - places we want and we can
55:49 - try to uh i don't know if you could just
55:52 - pass a double in like that
56:00 - so let's give that a try attempt to
56:04 - string
56:14 - hello from egypt malaysia awesome
56:19 - he's watching someone code live yeah
56:23 - how many of you guys are actually like
56:26 - this is completely easy in review for
56:28 - you
56:29 - and how many of you guys don't know
56:31 - what's going on because you're so brand
56:33 - new to app development
56:34 - it'd be nice to know because then that
56:36 - would allow me to tailor
56:38 - what what we work on
56:46 - okay so we have about 10 minutes let me
56:48 - see if i can
56:49 - quickly parse the hourly weather and
56:51 - display it
56:54 - so in inside weather response now that
56:57 - we want to capture
56:59 - uh where's our yeah so we've captured
57:03 - current
57:04 - and we want to capture hourly you can
57:06 - see hourly is an array
57:08 - it is a list essentially a list of
57:10 - weather objects
57:12 - so what we're going to do is add to our
57:15 - weather response so we want to capture
57:16 - hourly
57:18 - and this is going to be an array of
57:20 - weather
57:22 - now just by doing that it's gonna
57:26 - parse the hourly data now so inside
57:29 - content view
57:31 - we can actually display this in a list
57:33 - we can try to display it in a list
57:41 - and we can do something like
57:47 - our temperature
57:53 - and this would be you know our dot
57:56 - oh we're gonna have to convert that
57:58 - actually
58:04 - yeah hold on a second because let's back
58:07 - up
58:07 - because we are using uh we're trying to
58:10 - put this into a list component
58:12 - um we are going to make this
58:18 - i'm going to make this identifiable
58:21 - and we are going to add an id parameter
58:23 - here so this is going to be a uuid
58:25 - initially it's going to be nil
58:27 - and then we're going to set this so this
58:29 - is going to allow the
58:30 - the list component to differentiate
58:33 - between the different
58:35 - hourly weather objects so inside our
58:38 - weather model
58:40 - when we parse it here
58:44 - we can add
58:47 - uuids to the hourly
58:50 - other objects so we can say um
58:56 - you know for
59:00 - i in zero to
59:06 - weatherresponse.hourly.com
59:10 - we're going to say whether response dot
59:12 - hourly
59:14 - dot id equals uuid
59:19 - create a new uuid for each hourly
59:23 - all right and we got to change that to
59:25 - var
59:27 - and then that should allow us
59:30 - to use this in the list and then in here
59:36 - let's see
59:39 - our dot
59:43 - uh dt which is basically just a double
59:46 - now
59:47 - right that's this we're going to have to
59:48 - convert that to an actual
59:50 - hour but let's just display for now and
59:53 - then this is going to be
59:54 - our dot temp but we have a method here
59:57 - attempt to string
59:58 - so we can use that
60:02 - so let's display that
60:09 - yeah this is awesome we have currently
60:11 - 87 people
60:12 - in this stream that's awesome thank you
60:16 - so much for all of your support and for
60:17 - watching
60:18 - okay so we have that initial text up
60:20 - here whether in beirut we have the
60:22 - temperature
60:22 - and then we have the hours as you can
60:24 - see here it's just a long
60:26 - number because so we got back here
60:29 - we're gonna have to convert that uh
60:32 - where's our simulator
60:34 - but you can see the temperature differs
60:35 - from hour to hour so this is great
60:39 - so let's go ahead and convert this hour
60:41 - into
60:42 - like an actual hour and then i'm gonna
60:44 - have to unfortunately
60:46 - end the stream and then we'll continue
60:48 - building the ui
60:49 - we'll refine the ui in a in the next
60:52 - stream because for right now
60:55 - we we have accomplished quite a bit
60:57 - which is to
60:59 - be able to connect to the api and fetch
61:01 - the data and then be able to parse it
61:04 - and display something on the screen
61:07 - okay so let's create another function
61:09 - down here
61:10 - called
61:13 - seconds to
61:19 - hour that's not the right thing to call
61:24 - you guys have any suggestions all right
61:26 - seconds to hours it is for now and then
61:28 - you guys can decide
61:30 - uh here we're going to pass in the the
61:33 - unix
61:34 - number of seconds i believe that was
61:36 - what it was current time
61:38 - unix so let's just say
61:44 - and we're going to pass back a string
61:46 - for display
61:48 - so we're going to say let date equals
61:50 - the date
61:53 - and uh
61:56 - before in the past when i done this i
61:58 - wasn't sure which one to use but
62:01 - sometimes you just have to play around
62:03 - with it and see
62:04 - which method to use but in this case
62:07 - i'm gonna believe that it's this one
62:10 - um and then we're gonna create a date
62:13 - formatter
62:17 - and for the date formatter we're going
62:19 - to set the
62:20 - date format to
62:23 - i'm going to guess here because
62:27 - is it capital ms i always forget
62:32 - let's go with that for now and then we
62:34 - are going to say
62:35 - date uh date formatter date from
62:40 - string string from date yeah so this is
62:43 - going to allow us to
62:46 - pass in a date which we have right here
62:50 - and it's gonna return us a string in the
62:52 - format that we've specified
62:55 - all right so we're gonna pass in our
62:56 - date and this is what we're gonna return
63:02 - all right source date
63:06 - desired format
63:10 - all right so let's give that a try
63:12 - second did you guys have
63:15 - time interval since reference date to
63:16 - hours
63:19 - you know what that was probably a joke
63:21 - but i'm gonna use that
63:23 - this is not good by the way let's not uh
63:26 - have super long method names like that
63:30 - oh i can't even it's it's way too long
63:35 - and we'll make this argument label
63:38 - optional like that
63:47 - is this right
63:58 - uh
64:04 - and a state formatter
64:12 - that's what we want that looks good
64:22 - mms month yeah you're probably right i
64:24 - always forget these formats
64:27 - luckily we have handy references like
64:30 - this
64:32 - uh you're right there mm
64:38 - where are we here all right cool
64:42 - it doesn't look like much but this
64:44 - challenge the hardest part was really to
64:48 - uh interface with the api and download
64:50 - the data now a lot of you guys
64:53 - um did wonderful wonderful uis
64:56 - um if you want to check it out
65:00 - definitely go uh let's see i want to
65:03 - play all of it
65:03 - but
65:07 - let's see here it is wait no
65:10 - this one i'm just going to put this in
65:14 - here in the chat
65:15 - if you guys want to take a look at the
65:17 - community
65:18 - weather apps that other people have
65:21 - built inside our code crew community
65:23 - and if you want here in the chat i'm
65:26 - going to post the
65:27 - challenge the community app challenge
65:31 - for this weather app if you want to try
65:32 - yourself
65:34 - and then in the next stream we are going
65:36 - to
65:37 - uh refine the ui because right now
65:41 - i would be kind of embarrassed to
65:44 - to say like this is the completed
65:45 - weather app especially if you guys
65:47 - take a look at that video which i pasted
65:50 - uh
65:50 - has a lot of wonderful awesome weather
65:53 - apps now before we end off the stream i
65:55 - do want to
65:56 - highlight your attention to
65:59 - a sale that's going on from mark moykins
66:03 - whom i really respect as a teacher and i
66:06 - use his resources
66:08 - myself so i've used his resources to
66:10 - learn combine
66:11 - which i haven't completely gone through
66:14 - the whole thing yet i'm still in the
66:15 - process of learning
66:16 - but the swift ui views mastery is a
66:20 - great reference book
66:22 - especially when i'm coding because it
66:24 - lists all of the ui components
66:26 - and their behaviors and there's like
66:28 - sample code that you can copy and paste
66:30 - very easily so it's not a dense
66:32 - dense textbook and that's not the way
66:34 - it's intended to be used it's a visual
66:37 - reference
66:38 - which means that you can search for the
66:39 - component that you need either like
66:41 - copy a code snippet or to read up on its
66:44 - behavior and properties because for
66:46 - example some swift ui views
66:48 - uh expand to take up all its available
66:51 - space
66:52 - and some swift ui views uh sort of
66:55 - take up as little space as needed for
66:58 - that component
66:59 - so sometimes to remind yourself it's
67:02 - really
67:02 - useful to have a reference like that
67:08 - if i'm a beginner in what course do you
67:09 - recommend i buy from you if you're a
67:11 - beginner you actually don't have to buy
67:12 - anything
67:13 - right now to get your feet wet just go
67:16 - to code with chris.com
67:18 - start and i would recommend that you
67:23 - start with the 14 day beginner challenge
67:25 - get your feet wet
67:27 - you're going to learn the basics of some
67:29 - swift logic and some swift code
67:31 - how to construct uis how to navigate
67:33 - around an xcode all for free
67:35 - so if if you find that you enjoyed the
67:38 - experience
67:39 - and you like app development then go and
67:42 - invest
67:43 - in a course or you know something like
67:45 - that so i'll paste this link here as
67:47 - well
67:48 - scott uh the stream will be reposted i'm
67:51 - i think as soon as i end this stream the
67:54 - replay is just going to be live
67:56 - already it's not going to be unlisted or
67:58 - anything
67:59 - like that all right awesome
68:02 - so unfortunately i have to go lunch with
68:04 - the fam
68:05 - but thank you so many people for joining
68:08 - i do notice that you guys love coding
68:10 - and uh now that i have this new m1 mac
68:13 - we'll do more of it on stream
68:15 - so again thank you guys so much um
68:19 - and i'll see you guys next time probably
68:21 - next tuesday
68:22 - uh check cwc dot to slash
68:25 - streams to find the schedule right now
68:29 - um i don't have anything scheduled but i
68:32 - will put
68:33 - one in definitely for next tuesday same
68:35 - same time
68:37 - alright see you guys later and thanks
68:39 - for watching