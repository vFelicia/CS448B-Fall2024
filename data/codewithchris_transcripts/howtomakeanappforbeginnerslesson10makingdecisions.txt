00:00 - hi welcome to lesson 10 by the end of
00:02 - this video you will have completed the
00:04 - war card game project all that's left to
00:06 - do is to count score and update the
00:08 - labels in order to do that though we
00:10 - need to write Swift code that can
00:12 - compare two numbers and then execute a
00:15 - different branch of code depending on
00:17 - the outcome in other words you're going
00:19 - to be writing Swift code that can make
00:21 - its own decisions that's step one if you
00:23 - want to build a terminator alright let's
00:26 - get this show on the road
00:27 - so here I've got a playground and the
00:29 - only thing I have right now is a
00:30 - constant called X and I've set it to
00:33 - equal to ten and now I'm going to show
00:35 - you how to write what's called an if
00:36 - statement in this if same lets us test
00:39 - conditions and if the condition that
00:41 - we're testing is true then we can choose
00:44 - to run some code and this is how we are
00:46 - going to actually compare the two
00:48 - numbers in our war card game project
00:50 - when we randomized those two numbers so
00:53 - let me show you how to write this if
00:54 - statement we start off with the keyword
00:56 - if and then we do space and then we
00:59 - write our condition or expression here
01:01 - and in this case I'm going to test this
01:03 - condition is X greater than 14 and if
01:07 - that is true that I want to run the
01:09 - following code we open up a code block
01:12 - with a pair of curly brackets and inside
01:15 - here let's just print hello so I'm just
01:21 - gonna put a comment here this code will
01:24 - run if X is greater than 14 since X is
01:29 - actually 10 and this is not true it's
01:32 - not going to run this statement here
01:34 - it's not gonna run any of the code in
01:36 - here I can put lots of code statements
01:38 - in here if I wanted to now let's change
01:41 - X to 15 in this case this becomes true
01:45 - and then it's going to run the code
01:46 - inside the if statement and therefore we
01:50 - see this hello statement down here now
01:52 - the cool thing is that I can actually
01:54 - expand my if statement into multiple
01:57 - branches I can test many things have all
02:00 - wanted to and the way we do that is this
02:03 - first test that we use if the second
02:06 - test we use else space if and then I can
02:09 - test another condition I can say is
02:12 - X less than ten all right if that's the
02:15 - case then let's print I don't know let's
02:18 - just print a and then I can go on and I
02:20 - can test something else is X let's do
02:24 - equal to and it opened up another code
02:27 - block if that is true now here's the
02:29 - interesting thing I want to show you if
02:32 - X is equal to 12 I don't use the single
02:35 - equal sign I use a double equal sign and
02:37 - this is to test equality why is this the
02:40 - case well because the single equal sign
02:42 - is used for assignment you learned this
02:45 - back in the first Swift lesson where we
02:47 - talked about variables and constants
02:49 - this equal sign is to use to assign this
02:52 - data on the right-hand side to the
02:54 - variable or to the constant so if I use
02:57 - the single equal sign here Xcode will
02:59 - actually think we are assigning this to
03:02 - that when we actually want to compare so
03:05 - you use the double equal sign to test
03:08 - for equality all right so in this case I
03:10 - mean I just print B so far we've said
03:13 - that you can test a single condition and
03:15 - then you can test other conditions after
03:17 - that and there is actually a last part
03:21 - to the if statement which is the else
03:23 - keyword and there is no if in this case
03:26 - this is kind of like the last resort if
03:29 - none of these conditions up here are
03:32 - true
03:32 - then this is kind of like your catch-all
03:35 - let's open up a code block and let's
03:37 - just print C in here so this entire
03:41 - thing is your if statement let's talk
03:44 - about how this code is going to be run
03:45 - so when it comes here it's going to test
03:48 - the statement is X greater than 14 and
03:51 - if it is it's going to come into this
03:54 - this is called a branch of the if
03:56 - statement and it's going to execute this
03:59 - line and it's going to skip everything
04:00 - else because in the entire if statement
04:03 - it's only going to choose one branch to
04:05 - go into so in here this is true so it
04:08 - comes into this branch and it's gonna
04:10 - skip the rest how about if we change X
04:13 - to nine now a is printed so what's
04:17 - happening here well it's gonna test this
04:19 - condition first and that's false so then
04:22 - it's going to test the next one and
04:25 - in this case it's true so then it's
04:27 - gonna come into here and it's gonna skip
04:29 - the rest now let's change X to 12 and
04:32 - you kind of get the idea right you test
04:34 - this one false it'll test the next one
04:37 - that's false then I'll test the next one
04:39 - and this is true so it's gonna come in
04:41 - here and it's gonna skip this guy now if
04:43 - I just made a c13 would be I guess the
04:48 - sweet spot here and we get C because
04:51 - it's gonna test these conditions all of
04:54 - them evaluate to false and then it's
04:57 - going to come down here and this is kind
05:00 - of the last resort where if none of this
05:02 - is true then it's going to come into
05:05 - this branch of code I want to point out
05:08 - that you can actually just omit the else
05:10 - if you wanted to and if you did that
05:12 - nothing would happen because they would
05:14 - check all of these conditions all of
05:17 - them are false so it's not going to do
05:20 - any of it and furthermore you can have
05:22 - more elsif branches if you want or you
05:24 - could just have one or you can simply
05:27 - have none in just a simple single branch
05:29 - if statement let me just hit undo here I
05:34 - want to point out something else here
05:36 - and that is that this whole thing is a
05:39 - single if statement I know I've said
05:42 - this before but I want to tell you what
05:44 - the implications of that are it means
05:47 - that only a single branch of this if
05:49 - statement is going to be executed right
05:52 - it's gonna go into the first one that is
05:55 - true or since we have an else clause
05:57 - it's going to come into this last branch
06:00 - this is different then if I had done
06:03 - something like this if I had done
06:07 - something like this these are separate
06:10 - if statements this is a single if
06:13 - statement this is another if statement
06:15 - and lastly this is the third if
06:19 - statement so that means in this case I
06:21 - could have multiple things printed so
06:23 - let me change this to that and if I had
06:28 - this as let's say 15 well you can see
06:32 - Hello is printed you can see a is
06:34 - printed and you can see that C is also
06:37 - printed
06:38 - right and the reason for this is because
06:41 - this is a single estimate it's going to
06:43 - test this if it's true then it's going
06:45 - to print this now on to the second if
06:48 - statement this is true so that's gonna
06:50 - print this third if statement it's gonna
06:53 - test this that's false then it's going
06:55 - to come into the else branch all right
06:57 - this is very different than if I had
06:59 - made these branches of my first if
07:05 - statement now this is a single if
07:07 - statement it's only gonna choose one
07:09 - branch to go into it's gonna test each
07:12 - of these conditions and go into the
07:14 - first one that is true in this case this
07:16 - one and it's gonna skip the rest so I
07:19 - just want to make that distinction to
07:20 - you and the last thing I just want to
07:22 - say about if statements before we move
07:24 - on is that testing these conditions can
07:26 - actually get pretty complex because
07:28 - there are things called boolean
07:29 - operators where you can chain multiple
07:32 - conditions together so I'm just going to
07:34 - do a very quick example this isn't
07:37 - something that we're going to need for
07:38 - our war card game project but you know
07:42 - good to know this stuff so for example I
07:45 - can test if X is greater than 14 and Y
07:49 - is equal to 10 I use a double ampersand
07:53 - symbol like that space and then I can
07:56 - test that so this is going to do two
08:01 - tests and they both have to be true in
08:03 - order for it to come into this branch
08:06 - because it's an end okay you can
08:09 - actually chain a whole bunch of these
08:11 - together now I want to show you or and
08:13 - that is these two double pipes on my
08:18 - keyboard I have to hold down shift and
08:20 - hit the backslash key in order to get
08:22 - these symbols here this is the or
08:25 - operator that means that if this is true
08:27 - or this is true then it will come into
08:31 - here only one of these two conditions
08:33 - needs to be true you know one can be
08:36 - false for example let's say I change X
08:40 - to ten right this is false however this
08:43 - is true and since it's an or it will
08:46 - still come into here and print hello
08:48 - however if this is
08:50 - and claws then they both have to be true
08:54 - you can see down here it actually comes
08:56 - down to print see down here okay so
09:00 - that's the end and or and you can chain
09:02 - multiple statements together and
09:04 - actually let me show you one more thing
09:06 - so this is equality if Y is equal to ten
09:10 - all right if you want to test inequality
09:12 - use that exclamation mark equals and
09:15 - that is going to say if y is not equal
09:17 - to ten and just to whet your appetite a
09:19 - little bit and show you some more things
09:21 - that you can do with this statements you
09:23 - can even include these brackets so you
09:25 - can say something like if this and this
09:29 - are true or you know X plus y is greater
09:33 - than twenty nine or something like that
09:35 - so in this or statement either this is
09:38 - true or either this is true and that's
09:41 - what those brackets allow you to do kind
09:44 - of like group things together or if we
09:46 - had another thing that's like a string
09:50 - like that you can do tests like if Z is
09:54 - equal to test then we could print hello
09:58 - or you know you can do not equal to test
10:01 - and you can actually even do greater
10:04 - than but in this case it's kind of weird
10:08 - to say if it's greater than or less than
10:10 - a but essentially it doesn't care about
10:14 - the string length so even though test is
10:17 - four characters and this is only one
10:20 - character it basically tests character
10:23 - by character if this is greater than a
10:26 - then it's going to be considered true
10:28 - you know and if we had two letters like
10:32 - that it would also it would basically
10:34 - test this letter against this letter and
10:36 - then e is considered greater than a
10:38 - right and so this would be true and it
10:40 - come down here but I don't usually see
10:43 - this happening a lot using equality
10:47 - symbols using greater than or less than
10:49 - with strings I just wanted to show you
10:51 - that that was possible all right so now
10:53 - we're going to go back into our war card
10:55 - game project and use if statements to
10:58 - compare this course so we're going to
11:00 - first go into the view controller that's
11:03 - Swift
11:04 - and when deal tapped in here we are
11:08 - randomizing to numbers right the left
11:10 - random number and the right random
11:12 - number and then we are setting the
11:14 - images in fact we should probably write
11:16 - some comments so I think we can get rid
11:19 - of this print statement here let's get
11:21 - rid of these print statements and down
11:23 - here I'm gonna write randomized to
11:29 - numbers change the image views and down
11:35 - here we are going to compare the numbers
11:39 - all right so I can say if the left
11:42 - random number is greater than the right
11:46 - random number and then we open up a pair
11:50 - of curly brackets right in this case the
11:54 - left side has one because it's got the
11:56 - bigger number and I'm gonna do here else
12:00 - if write random number is greater than
12:03 - the left random number then do this and
12:06 - then for the last Clause there's only
12:08 - one more possibility right and that is
12:11 - if they are equal so I can either you
12:14 - know just use an else statement like
12:16 - that or you can just do you know if left
12:19 - the random number is equal to right
12:21 - random number if you want to be a little
12:22 - clearer you can do that as well
12:25 - so there are three different cases so in
12:28 - order to keep a score we actually need a
12:31 - counter of some sort so we're gonna go
12:34 - all the way up here and we are going to
12:36 - write two properties to keep track of
12:39 - the scores so let us write a left score
12:43 - we're going to just set that to zero and
12:45 - we are also going to do a write score
12:48 - also equal to zero I'm going to scroll
12:52 - all the way back down here so if the
12:54 - left random number is greater than the
12:56 - right random number then we're going to
12:58 - increase this the left score so you can
13:02 - either do left score equals left score
13:05 - plus one or you can actually do a
13:08 - shorthand way and that is to use the
13:11 - symbol plus equals and that just means
13:15 - to increment
13:17 - so we're going to increment whatever
13:19 - left score is by one all right we're
13:22 - going to do the same thing here if the
13:24 - right random number is greater than the
13:26 - left number then we are going to do the
13:28 - right score plus equal one and if you
13:33 - want to decrement you can actually do
13:35 - minus equal just a quick note all right
13:38 - so here update the score now update the
13:44 - label to reflect that new score and we
13:48 - have an iboutlet property for that left
13:50 - score label all right we connected it
13:53 - before so we can do left score label and
13:58 - the label has actually got a text
14:00 - property and you've said it before let's
14:03 - go to the storyboard let me click this
14:05 - label you can see here in the inspector
14:07 - panel there is this text property right
14:11 - here all right so we can use dot
14:14 - notation start typing text and it
14:18 - expects a string all right so we can try
14:21 - to assign it this left score which is an
14:24 - integer and you can see what happens all
14:29 - right and Xcode is going to complain
14:30 - cannot assign value of int to a type of
14:34 - string so we need to somehow convert
14:37 - this int data to a string data all right
14:42 - we need to represent that number in the
14:44 - form of a string so you can actually
14:46 - create a new string object and pass in
14:51 - an integer to create a string version of
14:55 - that integer and you do it like this
14:57 - okay so we're gonna do the same thing
14:58 - here update the score update the label
15:05 - and make sure you're incrementing the
15:08 - correct score right here we are
15:10 - incrementing the Left score and updating
15:13 - the left score label here we're going to
15:15 - update the right score and update the
15:17 - right score label dot text equals a new
15:22 - string and in this string object we are
15:26 - going to initialize it with the right
15:29 - score
15:30 - and let us run our project and see how
15:34 - that looks
15:34 - for a tie I'm not sure what we want to
15:38 - do there so I'm just gonna actually
15:40 - leave that empty so 10 is greater than 6
15:47 - so we have this updated this is greater
15:51 - than 5 so we have this is 2 now it looks
15:54 - like the player is winning all the time
15:56 - there we go CPU gets one on the
15:59 - scoreboard 10 is greater than 5 all
16:07 - right pretty cool right now the last
16:09 - part is how do we get this app onto our
16:12 - device so what you're gonna do is you're
16:14 - actually going to plug it your device
16:15 - into your computer and then if you go
16:19 - back to Xcode here and you pull down
16:22 - this where you select a simulator you go
16:25 - all the way up here you're gonna see
16:26 - this menu node well mine say is no
16:29 - device is connected to my Mac because I
16:31 - don't actually have a phone there but if
16:33 - you have connected your phone or your
16:35 - iPad here you're gonna see that device
16:38 - appear here and you just want to select
16:39 - it so this is what I get because I don't
16:43 - have a device but when you select it it
16:46 - should have your device selected and
16:47 - then all you need to do is hit the Run
16:51 - button and you're going to run that app
16:53 - on your device and even after you
16:54 - disconnect your device you'll still have
16:56 - that app on your phone and you also
16:58 - might get a prompt if it's the first
17:00 - time you're using your device with Xcode
17:02 - you might get a little pop-up asking if
17:05 - you want to use this device for
17:07 - development then you just say yes and
17:09 - off you go not bad right
17:11 - look at how far you've come seriously
17:13 - give yourself a pat on the back if you
17:15 - finish this project I want you to go to
17:17 - the lesson page scroll down and click on
17:19 - that tweet button to let me know I love
17:21 - hearing from people who have completed
17:23 - this project and I'll also put your name
17:25 - on the wall of fame that is exclusively
17:28 - for people who have finished this
17:29 - project and if you haven't gotten this
17:31 - project to work yet remember you can
17:33 - always download my Xcode project and
17:35 - compare it against your own also don't
17:38 - be afraid to ask for help just leave a
17:40 - comment below in the next lesson I'll
17:42 - show you where to go from here
17:43 - and what to learn next alright see you
17:46 - there