00:00 - hey cuckoo how would you like to learn
00:01 - how to do these animations in just four
00:04 - simple steps
00:08 - hell yeah let's do it but before we dive
00:16 - in for all of you new viewers welcome to
00:17 - code with Chris to place the beef you
00:19 - want to learn how to make an app I'm
00:21 - Chris and today we're going to do some
00:22 - awesome animations using the Gemini
00:24 - library
00:25 - guys this is dead simple to do check out
00:28 - the animation so you can do
00:29 - it's like eye candy
00:34 - shoutout to Shohei for writing this
00:36 - library and making it available to all
00:38 - of us now for this demo we're going to
00:40 - be starting off with a plain old boring
00:42 - collection view showing a list of images
00:45 - and if you're not sure what a collection
00:47 - view is you obviously haven't watched my
00:49 - beginner series what are you doing it's
00:51 - free just click up here to put it simply
00:54 - a collection view is just a user
00:56 - interface element to show a list of
00:57 - items now we're gonna spice it up in
00:59 - four simple steps a step one we're going
01:02 - to install the Gemini pod we're going to
01:04 - add the Gemini library to our Xcode
01:07 - project using cocoapods and if you don't
01:09 - have that installed on your machine yet
01:10 - I have an in-depth video on how to do
01:12 - that right up there now assuming that
01:14 - you've got cocoa pods installed on your
01:16 - machine already here's what we're going
01:17 - to do I'm going to start by creating a
01:20 - single view application I'm just gonna
01:22 - call this Gemini and I'm going to save
01:25 - it on my desktop in this folder called
01:30 - apps and then what we're gonna do is
01:32 - just close out this project because then
01:35 - we're going to launch terminal and we're
01:37 - gonna navigate their CD desktop apps and
01:44 - Jim Knight whoops there we go so I'm in
01:48 - my project folder now and if this seems
01:50 - confusing to you
01:52 - check out my cocoa pods video it's gonna
01:54 - let you know what's going on so right
01:57 - here we're gonna type in pod in it to
01:59 - indicate that we want to use cocoa pods
02:01 - with our Xcode project and now I can go
02:05 - ahead and open that folder and we're
02:07 - gonna have a pod file with our project
02:10 - I'm gonna open it in my text editor here
02:13 - and we are going to add the pod Gemini
02:19 - you guys if you're ever wondering what
02:22 - the appropriate pods to use for the
02:24 - thing that you're trying to install is
02:25 - make sure that in the github page
02:27 - there's always sort of usage section
02:30 - where you can grab that or requirements
02:33 - rather so under installation you'll see
02:38 - that that's the pod name we need to use
02:40 - then we can go ahead and save this go
02:42 - back to terminal
02:44 - then go pod install and it's gonna grab
02:47 - the Gemini library and install it into
02:50 - our project you can go ahead and close
02:54 - that and now back in our Gemini project
02:57 - folder we have this XC workspace file
03:00 - which is the one that we're going to
03:02 - launch to open up our Xcode project and
03:04 - here you can see that we've got the pod
03:07 - installed step two we're going to
03:10 - convert our UI collection view classes
03:12 - that use the Gemini classes now in
03:15 - Gemini there is a Gemini collection view
03:17 - which is just the subclass of the UI
03:19 - collection view class and we have a
03:21 - Gemini cell class which is a subclass of
03:24 - the UI collection view cell class if
03:26 - you're already using a collection view
03:28 - in your Xcode project then you're
03:29 - already using the UI collection view
03:31 - class and the UI collection view cell
03:33 - class now we're going to swap those out
03:36 - for the Gemini versions now here in step
03:39 - two I've already got a collection view
03:41 - running so that I can show you how to
03:42 - replace the regular collection view
03:45 - classes with the Gemini classes if
03:47 - you're unsure of how to do this basic UI
03:50 - collection view setup make sure you
03:51 - check out my beginner series first
03:53 - alright so let me quickly run you
03:55 - through what I've got so I've got a
03:57 - collection view here and then inside
03:59 - I've got a single UI collection view
04:01 - cell which is actually a custom class
04:04 - that I created called my cell inside
04:07 - we've got one image view and then inside
04:10 - my cell class you can see it's a
04:13 - subclass of your collection view cell
04:14 - I've just hooked up an iboutlet to the
04:17 - image view and I've got a single
04:19 - function called set cell which sets the
04:21 - image for that image view to whatever
04:24 - gets passed in here so now that we have
04:28 - the Gemini classes all we need to do is
04:32 - say that this collection view is no
04:34 - longer just a regular UI collection view
04:36 - instead it's a Gemini collection view
04:39 - and then my cell instead of a UI
04:44 - collection view cell it is now a Gemini
04:47 - cell let me go ahead and save those and
04:51 - go back to the view controller so in the
04:53 - view controller I've got the collection
04:57 - view hooked up
04:58 - an iboutlet so that I can reference it
05:01 - from here and I've got an array of
05:03 - photos 1 2 3 4 5 and these just
05:07 - correspond to the file names in my asset
05:10 - library here I've got these five images
05:15 - so in here this is pretty much standard
05:17 - stuff the setting the datasource and the
05:20 - delegate for the collection view to this
05:23 - view controller and then these are all
05:26 - of those collection view delegate
05:28 - methods which indicates how many items
05:31 - are in the collection view grabbing a
05:34 - Cell setting the cell to the image and
05:39 - yeah that's pretty much it so one thing
05:43 - I do have to do is this collection view
05:45 - because we've changed it to a Gemini
05:47 - collection view class I need to change
05:49 - the type here as well so we change it to
05:54 - a Gemini collection view one thing that
05:56 - I didn't mention is make sure that you
05:59 - call import Gemini if you're gonna be
06:02 - using that class or else it's not going
06:04 - to recognize that same thing for here in
06:06 - the mysel class even need to make sure
06:08 - that you type import Gemini first so
06:11 - that those Gemini classes are recognized
06:14 - all right but after you've swapped out
06:16 - the UI collection view classes for the
06:19 - Gemini versions you're ready for the
06:21 - next step step three we're going to
06:24 - configure how we want this animation to
06:26 - look now Gemini makes it very easy for
06:28 - us to do by exposing some properties
06:30 - that we can simply just set now the
06:32 - easiest way to do this is just to go on
06:34 - the Gemini github page and take a look
06:37 - at the animations you want to replicate
06:38 - and copy those sets of pre-configured
06:40 - properties and use it in your Xcode
06:43 - project now obviously you're free to
06:45 - configure it however you want to create
06:47 - a custom animation but if you want to
06:49 - get started fast and you kind of like
06:51 - the pre-configured animations already
06:53 - feel free to copy those so in here we're
06:55 - going to configure the animation and you
06:58 - can do it right here after you set the
07:00 - datasource and the delegate and the
07:05 - easiest thing to do if you're not sure
07:07 - about what sorts of settings and
07:10 - properties to use it's just go
07:12 - the github page take a look at what sort
07:14 - of animation you want to do for example
07:16 - this one right here then you might just
07:19 - copy this and you would just paste it in
07:25 - there now if you're iboutlet property
07:28 - isn't called collection view then you're
07:30 - obviously going to need to change this
07:32 - part but since mine is then I don't
07:35 - really need to change any code here now
07:37 - let's move on to the next step step four
07:40 - we have to tell it where to animate the
07:42 - cells there are a couple places we need
07:44 - to do this namely when we set up a cell
07:47 - when a cell is going to be displayed and
07:49 - when the user is scrolling the
07:50 - collection view so the first place we're
07:53 - going to tell it to animate is when
07:55 - we're setting the cell and that's in
07:56 - here so we're DQ in a cell casting it as
08:00 - my cell and then we're calling the set
08:02 - cell method to pass in the image so that
08:05 - the image view can be set and in here
08:08 - we're just going to and make the cell
08:10 - and the way you can do that is by
08:12 - calling the animate method of the Gemini
08:15 - collection view class and passing in the
08:17 - cell
08:17 - so let's first access the Gemini
08:22 - collection view and actually because
08:25 - I've called my iboutlet property
08:28 - collection view with a lowercase C it
08:32 - it's ambiguous as to whether it's
08:35 - referring to this parameter which is a
08:38 - type of UI collection view or if it's
08:40 - referring to my iboutlet property which
08:43 - is a Gemini collection view so in order
08:45 - to specify that I want my property
08:47 - instead I should probably shouldn't have
08:49 - named it that in the first place I'm
08:50 - gonna use the self keyword then it knows
08:52 - that I'm actually referring to this guy
08:55 - up here as opposed to the parameter in
08:57 - this method which I'm writing this code
09:01 - statement so animate cell is the method
09:04 - and we're gonna pass in cell the second
09:10 - place we have to animate is when the
09:13 - user Scrolls so in here this one we're
09:17 - gonna call self thought collection view
09:20 - thought animate visible cells
09:24 - and then finally the last place is the
09:27 - will display when a cell is about to be
09:29 - displayed and we can access the cell
09:31 - that is about to be displayed via this
09:34 - parameter here now this is a collection
09:37 - view cell type but we actually know that
09:42 - it is a Gemini cell type so we can cast
09:45 - it say if let's sell equal cell as my
09:52 - cell so just to double check that it
09:54 - actually is a type of my custom cell in
09:59 - that case we can call self-thought
10:02 - collection view not animate cell and
10:05 - then can pass in that cell
10:11 - now let's run this project and take a
10:13 - look at what we have
10:30 - now if you wanted to change the
10:32 - animation you could just go in here
10:34 - let's say let's try this cube one and
10:40 - you would just replace this where we
10:43 - configure the animation you don't need
10:44 - to touch any of those other statements
10:47 - that we've done in this step
10:54 - and now I have a question for you is
10:57 - there a particular animation that you'd
10:58 - like to see how to do just leave me a
11:00 - quick comment below and let me know what
11:02 - it is and I'll definitely consider it
11:04 - for a future video now for more awesome
11:08 - iOS tutorials please hit that subscribe
11:09 - button below and join the code crew
11:11 - family I would love to have you and if
11:14 - you're just beginning your iOS
11:15 - development journey and you want to
11:16 - learn with me step-by-step don't forget
11:18 - to check out my beginner's playlist
11:20 - right up there and if you've got a
11:21 - little more experience under your belt
11:23 - and you're ready to build your own app
11:24 - don't forget to check out my seven-day
11:26 - app action plan that's going to give you
11:28 - a customized roadmap for your particular
11:29 - app and tell you how to achieve it