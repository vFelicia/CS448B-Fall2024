00:00 - hello in this lesson I'm gonna teach you
00:02 - how to become a better I oh s coder by
00:04 - the end of this video you'll have
00:06 - learned the most widely accepted iOS
00:08 - best practices you'll learn how to
00:10 - properly declare and name your classes
00:12 - variables and methods you're gonna learn
00:15 - how to organize your Xcode project on
00:17 - your files you're also going to learn
00:19 - how to write effective comments and keep
00:20 - your code neat and tidy I'm pumped to
00:23 - show you guys this stuff and I can't
00:25 - wait to get started let's do it let's
00:27 - start with naming conventions what is a
00:29 - naming convention very simply it's an
00:32 - agreed-upon format to named variables
00:34 - properties classes and all that sort of
00:36 - stuff by following a naming convention
00:38 - your code becomes much easier to read
00:41 - and to understand if you're working
00:43 - within a team it's even more important
00:45 - to establish a naming convention that
00:46 - everyone will follow luckily there are
00:49 - some standard conventions that everyone
00:51 - can agree upon these have been set forth
00:54 - by Apple and can be seen when you start
00:56 - a brand new Xcode project so let's go
00:58 - ahead and take a look at some of them
01:00 - now so here we have a brand new Xcode
01:03 - project and I'm looking at the view
01:05 - controller that Swift file that comes by
01:07 - default with a single view application
01:09 - project now this is a great place to
01:11 - illustrate some of the naming
01:13 - conventions which Apple has established
01:16 - which are also commonly accepted by iOS
01:19 - developers the first thing I'll mention
01:21 - is that for some of the things there is
01:23 - absolutely no wiggle room so for example
01:26 - the Swift keywords this import this
01:29 - class override all of these keywords in
01:33 - pink you cannot simply you know decide
01:36 - you want to use a capital F you can see
01:38 - that it just completely breaks things
01:40 - Xcode won't recognize that as the Swift
01:43 - keyword that you want to use it is case
01:45 - sensitive and thankfully all of these
01:48 - Swift keywords are lowercase so it's
01:50 - easy to remember the second thing that
01:52 - absolutely has no wiggle room are class
01:54 - names and framework names so for example
01:57 - UIKit you can't decide to use a
02:00 - lowercase U or a lowercase I and this
02:03 - uiviewcontroller class is also case
02:06 - sensitive so you cannot use a lowercase
02:10 - V that isn't going to recognize that
02:13 - as the uiviewcontroller class inside
02:15 - UIKit now what you do have control over
02:18 - and this is where the naming conventions
02:21 - come in our variable names property
02:24 - names these function names and also
02:27 - class names when you create your own
02:29 - custom classes so let's start with class
02:33 - names take this view controller class
02:35 - for example you can see that it starts
02:37 - with a capital and other words also
02:40 - start with a capital so that's the
02:42 - general rule with class names each word
02:44 - in your class name starts with a capital
02:47 - letter now contrast that with function
02:50 - and method names as you can see here in
02:52 - this viewdidload method
02:54 - it starts with a lowercase so the
02:57 - general rule for methods and functions
03:00 - are each word in your method name starts
03:04 - with a capital letter except for the
03:06 - first word so you can see this in action
03:09 - here again this is did receive memory
03:12 - warning that's four words but the first
03:14 - word starts with a lowercase so if you
03:17 - follow this naming convention one of the
03:19 - immediate benefits you get is that it's
03:21 - very easy to distinguish between a class
03:24 - and a method or a function because a
03:27 - class name will start with a capital
03:29 - letter whereas the function method names
03:31 - start with a lowercase okay so now let's
03:34 - jump to the app delegate Swift file you
03:38 - can see here in the class name again
03:41 - it's app delegate two words they both
03:43 - start with a capital letter but what I
03:45 - want to draw your attention to is this
03:48 - property down here it begins with a
03:51 - lowercase letter now the general rule
03:53 - with these properties with variables you
03:57 - might declare or constants and also
04:00 - parameters that are passed into your
04:02 - functions and methods they all follow
04:05 - the same rule we just discussed with
04:07 - methods and functions and that rule is
04:09 - each word in the name begins with a
04:12 - capital letter except for the very first
04:15 - word this property called window is only
04:17 - one word so it starts with a lowercase
04:19 - you can see that this function here is
04:23 - application starts with a lowercase this
04:26 - one application
04:27 - will resign active each word is
04:30 - capitalized the first letter except for
04:32 - the first word here and even these
04:35 - parameters in here follow the same rule
04:38 - so to summarize each word in your class
04:41 - name begins with a capital letter
04:43 - however for your properties variables
04:46 - constants functions methods and
04:49 - parameters in your functions and methods
04:51 - each word in those names start with a
04:55 - capital letter except for the very first
04:57 - word that word is in all lowercase that
05:01 - was the easy stuff but there's another
05:03 - aspect of naming that is a bit more
05:05 - subtle take for example you have a news
05:07 - app and there's a method that will be
05:09 - used to refresh the data in the view
05:11 - well how do you name it do you call it
05:14 - refresh view get new data retrieve
05:18 - updated data because the user pulled to
05:20 - refresh or how about new data is coming
05:23 - to town that's the one isn't it do you
05:26 - see what I'm saying it's a little harder
05:29 - to establish rules around this
05:30 - especially if you're working on a team
05:32 - but here are some simple tips to follow
05:35 - number one you can establish a loose
05:38 - structure for methods and variable
05:39 - naming for example with methods you can
05:43 - follow a format where the first word is
05:45 - a verb and the second word is a noun so
05:49 - something like get data or update data
05:52 - or delete person number two you can use
05:56 - an agreed-upon set of verbs there are so
05:58 - many different words that you can use
06:00 - that mean the same thing for example if
06:02 - you're going to be retrieving some new
06:04 - data just to use the same example you
06:07 - can use get retrieve fetch you can use
06:10 - refresh so if you can stay consistent
06:13 - throughout your entire project and
06:15 - whenever you need to create a method
06:17 - that needs to fetch something use the
06:20 - verb fetch
06:21 - instead of using fetch for this method
06:24 - and then using get for another method
06:26 - it's just a lot neater and tidier if
06:29 - you're using the same verb throughout
06:31 - your project and number three you can
06:34 - agree to stay within a certain word
06:36 - limit for example you can tell your team
06:38 - know
06:39 - to create one word methods because it's
06:42 - not descriptive enough or you can say
06:44 - that a method name shouldn't be over six
06:47 - words or something like that and this is
06:50 - a little harder to control because you
06:53 - know some methods are more obscure than
06:55 - others and so you might need to be a
06:57 - little more descriptive but I think you
06:59 - can loosely define lower and upper
07:01 - limits for the number of words to use in
07:03 - method names now we're going to talk
07:05 - about file organization within an Xcode
07:08 - project first let's talk about where we
07:11 - declare new classes and I always get
07:13 - this question you might have noticed in
07:15 - Lesson four of this module when I
07:17 - created the new custom classes I added a
07:20 - new file to the project this is the
07:22 - match app which we have been working on
07:24 - and when I created the card model class
07:27 - I created it in this file here here we
07:31 - have the card class as well and then
07:34 - here we have the card collection view
07:35 - class or subclass I always get asked
07:39 - this and that question is can I create
07:42 - my new classes in the same Swift file
07:45 - and the answer is yes but you really
07:47 - wouldn't want to do that the best
07:49 - practice is to separate it out into
07:51 - these different files like I have and
07:53 - let me demonstrate why for example so if
07:56 - I let's say I just took this code here
08:01 - this class model 8 and I cut the code
08:05 - out and let's say we didn't have this
08:07 - card model that Swift and inside instead
08:09 - I went all the way down to the end of
08:12 - the viewcontroller class and then I
08:14 - pasted my new card model class here
08:17 - while this is completely fine you can
08:20 - see why this is really confusing because
08:23 - for example if someone else were to join
08:26 - your development team they wouldn't know
08:29 - that the card model class is in side
08:31 - view controller dot Swift because first
08:33 - of all this file is named view
08:35 - controller dot Swift and the second of
08:37 - all they would have to scroll all the
08:40 - way down and figure out and hopefully
08:42 - see that the card model class is
08:44 - declared right here or they can do I
08:47 - guess they can do a project wide search
08:49 - for class
08:51 - model like this and they would also find
08:53 - it in viewcontroller.swift but this is
08:56 - all very unnecessary right the best
08:59 - practice is to actually create new files
09:03 - per class that you need to declare the
09:08 - second confusion is whether you need to
09:11 - when you to create a new file for your
09:14 - class whether you need to choose Swift
09:17 - file or cocoa touch class and I can give
09:20 - you a simple rule to follow for that so
09:22 - if your plan is to create a subclass of
09:26 - an existing class from some framework
09:29 - like uikit then I would choose cocoa
09:32 - touch class and you get a dialog like
09:35 - this where you can specify the subclass
09:37 - the reason for this is because sometimes
09:39 - when you do it this way it comes with
09:42 - some boilerplate or default code that is
09:45 - associated with subclasses of whatever
09:48 - class you're trying to subclass however
09:51 - if you're creating a brand new class
09:53 - that isn't really a subclass of anything
09:55 - else then you would choose a swift file
09:58 - and you would just declare your class in
10:00 - there and by default when you create
10:04 - these new files they always add it to
10:06 - the end of the list here so what I like
10:08 - to do and you probably see me do this is
10:11 - just rearrange the files here by
10:14 - dragging them like this now when you
10:17 - start to get a lot of classes and a lot
10:20 - of files in this navigator right here in
10:23 - your project what you can also do is you
10:26 - can start creating something called a
10:27 - group so you can choose new group like
10:30 - that and you can name this anything you
10:32 - want you might organize it like say view
10:36 - controllers that would be plural and
10:39 - then you would put all your view
10:40 - controllers in there and then you might
10:42 - add another group for models or
10:45 - something like that and move all your
10:46 - models in there now when it comes to
10:49 - what sorts of groups you should have
10:51 - this will really boil down to personal
10:54 - preference how the organization makes
10:58 - sense to you as a developer and how you
11:00 - like to think of it if you like to think
11:02 - in terms of the MVC pattern you
11:05 - might create groups like this some
11:07 - people prefer to have groups that are
11:09 - grouped based on the screens in the app
11:11 - and this is also fine but what's really
11:14 - important is that if you're working on a
11:16 - team you guys should agree on this
11:18 - before you guys start creating groups
11:20 - and files and just putting things
11:23 - everywhere there needs to be some sort
11:25 - of agreement about how to organize the
11:28 - project and then you stay consistent for
11:31 - the duration of that project now groups
11:33 - are also a handy way to organize assets
11:36 - that you have to add to your project
11:37 - here we have an asset library which is
11:41 - great for managing image assets but if
11:43 - you have sound assets if you have
11:45 - additional data files that you need to
11:47 - add or anything like that you can create
11:49 - a group called sounds maybe and then add
11:53 - all your sound files into that group
11:55 - also don't forget that you can actually
11:57 - drag your group and organize them as
12:01 - well but be careful about putting groups
12:04 - within groups if you if you are not
12:07 - intending to do that if your project is
12:10 - really massive you you might end up
12:12 - having groups inside of groups just to
12:14 - have multiple layers of organization if
12:17 - you really have that many files okay so
12:20 - let me get rid of these sample groups
12:24 - that I have here oh and actually there
12:27 - was one last thing I didn't show you
12:29 - which is when you create your groups you
12:31 - can actually just go ahead and drag your
12:33 - files into the groups and organize them
12:36 - like that the next thing I want to talk
12:39 - about is commenting whitespace and
12:42 - indentation and basically writing code
12:45 - that is easy to read and easy to follow
12:48 - now I've talked about the importance of
12:51 - writing comments before and that is that
12:53 - it's not just for yourself I mean it is
12:56 - because if you come back to your project
12:58 - several months later you might not
13:00 - remember why you wrote that piece of
13:02 - code so it's for yourself but it's also
13:04 - even more important when you're working
13:05 - together on a team because other people
13:08 - are going to be looking at your code and
13:10 - if it's not properly documented then
13:13 - they're going to have to spend a lot of
13:16 - time or extra time
13:17 - trying to figure out what your code does
13:19 - and why it's there so this leads me to
13:22 - the second point about comments and that
13:25 - is that when you write comments try as
13:29 - much as possible to explain why that
13:33 - line of code or that block of code is
13:35 - there and not just what it does because
13:38 - it's very easy for example for me to
13:41 - write here to say loop that goes eight
13:45 - times or nine times right it's very easy
13:49 - for me to write that but that comment
13:52 - really is not helpful because anyone who
13:55 - can read Swift code can immediately tell
13:57 - that that is exactly what that is and so
13:59 - your comment really doesn't provide any
14:02 - value rather than stating the obvious
14:05 - you want to write comments that explain
14:07 - your thought process that explains the
14:12 - logic behind that block of code and what
14:14 - it's set out to accomplish so that it's
14:17 - almost like if your teammate is reading
14:21 - the comments to your code it's almost
14:23 - like you're sitting beside them and you
14:25 - are telling them as they're looking
14:27 - through the code what everything does so
14:30 - that's how you want to think about your
14:31 - comments another tip and sometimes
14:35 - you'll see me doing this is that
14:36 - sometimes you just want to flesh out the
14:38 - idea that you have for that method you
14:41 - want to flesh out the entire method you
14:42 - don't want to get hung up or caught up
14:44 - on the details so you might add a to-do
14:48 - and actually I think we have one down
14:50 - here alright so we have a to-do here to
14:53 - randomize the array I know I have to do
14:55 - it I just didn't want to do the
14:56 - implementation there because I don't
14:59 - want to lose my higher level train of
15:02 - thought then you can just write a to-do
15:04 - here exactly in this format and actually
15:07 - if you go into here this sort of drop
15:13 - down for your class you're going to see
15:15 - your two DS like this so whenever you go
15:17 - into a class and you pull this guy down
15:20 - you can see any to do is that you write
15:22 - at a glance the next thing I want to
15:26 - talk about is whitespace
15:28 - and that is the spaces that are in
15:31 - between your lines of code now you can
15:33 - see there really isn't any defined rules
15:36 - per se for example some people will not
15:41 - include a line break below a for loop
15:44 - like that all right and actually let me
15:47 - just show you the worst the worst actual
15:50 - case like is if you have no white space
15:52 - like this let me show you how hard it is
15:54 - to read right it just looks like a
15:59 - column of code and it's really hard to
16:01 - read and white space really isn't going
16:04 - to make your code any slower or anything
16:06 - like that and it improves readability
16:09 - massively and so you can see how much
16:13 - easier that is to read now like I said
16:17 - there are no hard and fast rules to how
16:20 - white space is used but generally I like
16:22 - to leave a line break after an opening
16:25 - bracket to a method or a for loop or an
16:28 - if statement and then what I like to do
16:30 - from there is organize my code into
16:34 - little chunks of code that are related
16:38 - so and then I'll put a comment above
16:40 - each one so for example this line of
16:44 - code is for generating a random number
16:46 - so I'll put a comment there and I'll put
16:48 - a white space or line break beneath it
16:50 - and for these two lines of code I don't
16:54 - do that and that's because to me they
16:57 - are related to creating the card object
16:59 - and then setting its properties I would
17:02 - put those lines together and put a
17:04 - comment above it to say something like
17:06 - I'm creating the card and setting the
17:09 - appropriate properties or something like
17:10 - that we could probably add another
17:12 - comment here saying something like add
17:16 - the created card or keep track of the
17:19 - card in the array or something like that
17:21 - so white space is very important when it
17:23 - comes to how readable your code is
17:25 - another aspect of readability is
17:29 - indentation as you can see by default
17:33 - Xcode kind of handles this for you but
17:36 - this is the start of the class
17:37 - definition and so what's inside you know
17:40 - in between this
17:42 - opening curly bracket and above this
17:46 - closing curly bracket for the class
17:48 - everything is indented and then when we
17:51 - have a function here that starts another
17:54 - curly bracket with its ending one right
17:57 - here everything inside of that is oh
18:00 - sorry that's not the ending one this is
18:02 - the ending bracket for the function
18:04 - everything inside of that is indented
18:07 - and then for this for loop we have
18:09 - another opening one and another closing
18:12 - one and all of the code inside that is
18:15 - indented in the same sort of distance
18:18 - from the left-hand side and this makes
18:20 - it very easy to see that all of this
18:23 - code is inside of this for loop while
18:26 - all of this code here is inside of this
18:33 - function so it's very important that
18:35 - your code isn't indented properly
18:38 - because as you can see if I did
18:40 - something like this you know it just
18:44 - becomes you don't get that sort of
18:46 - immediate comprehension that you get
18:51 - when everything is lined up well like
18:53 - it's hard to see that this line of code
18:55 - is inside of this for loop and what's
19:01 - also kind of infuriating actually when I
19:05 - see it is that the closing brackets
19:07 - aren't indented properly with the
19:10 - statement that opens the bracket so for
19:13 - example if this bracket was right here I
19:15 - might confuse this closing bracket with
19:18 - the ending of this function right
19:21 - whereas it's not so it's very important
19:24 - that things are indented properly it
19:26 - actually adds a lot to being able to
19:29 - understand the code and seeing the
19:31 - structure of how the code is laid out
19:33 - now fortunately there is a way to fix
19:37 - indentation really quickly across your
19:40 - entire project so let me go back and
19:42 - show you if I had things just indented
19:47 - improperly like that let's say I could
19:50 - select all of my code by pressing
19:51 - command 8 and then I can go up to editor
19:55 - and I can go up to structure Riaan dent
20:01 - like that and that's basically going to
20:03 - fix everything and indent everything
20:06 - properly but instead of relying on that
20:10 - menu command just get into the habit of
20:12 - indenting while you're writing your code
20:14 - and I think Xcode already helps you a
20:16 - lot with that so for example if I did
20:18 - something like if true you see you can
20:23 - see that Xcode automatically put my
20:25 - cursor in this indented position and
20:31 - then when I press ENTER I again start on
20:34 - this indentation level so Xcode helps a
20:38 - lot with that but if somehow you're
20:40 - intending gets messed up and you're
20:42 - closing brackets get misaligned you can
20:46 - use that editor command to reinvent
20:49 - everything but make sure you remember to
20:51 - select all of the code first okay and
20:54 - the last thing I want to say is that all
20:56 - of the things that we talked about in
20:57 - this video should be outlined in a style
21:00 - guide now what is a style guide it's
21:02 - basically for larger teams to have one
21:06 - document that states how things should
21:09 - be organized how things should be named
21:10 - so that the project is consistent if
21:14 - you're on a small team or you're a
21:16 - one-man show it doesn't matter as much
21:18 - as long as you stay consistent
21:20 - throughout your whole project but if
21:22 - you're working on a giant team it's
21:24 - important to establish a style guide and
21:26 - a lot of what we talked about actually
21:28 - are commonly accepted practices anyways
21:31 - the things where there may be a little
21:33 - bit of a gray area is the format of the
21:36 - names of your methods and functions and
21:38 - variables and properties the verbs that
21:41 - you're going to use for those methods
21:42 - and functions and subtle stuff like that
21:45 - but in terms of things like white space
21:47 - indentation commenting capitalization of
21:51 - class names and method names and stuff
21:54 - like that that is all pretty standard
21:56 - across iOS developers how is that now
22:00 - you know how to write tidy code and keep
22:02 - your Xcode project organized so that
22:04 - other people can follow it now I want to
22:06 - turn it over to you did I miss any best
22:08 - kisses let me know by leaving a comment
22:10 - below or if you simply just enjoyed this
22:13 - video please let me know by leaving a
22:16 - comment below as well in the next video
22:18 - I'm gonna show you how to troubleshoot
22:19 - and fix your code when your app is
22:21 - crashing Xcode actually gives you a lot
22:23 - of tools to figure this stuff out and
22:25 - I'll show you how to use them in the
22:27 - next lesson so if you enjoyed this video
22:29 - and you want to see more please consider
22:31 - subscribing to my channel by hitting
22:32 - that red subscribe button below if you
22:34 - don't want to miss the next video when
22:36 - it comes out hit that Bell icon as well
22:38 - thanks for watching i'll see you guys in
22:40 - the next lesson