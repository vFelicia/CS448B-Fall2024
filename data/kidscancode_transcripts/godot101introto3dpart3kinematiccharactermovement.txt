00:00 - welcome back to Gouda 101 intro to 3d
00:03 - this is part three in this part we're
00:05 - gonna make a user controlled character
00:07 - that can move around and jump in the 3d
00:10 - world all right here's the scene that we
00:12 - made last time I just removed the crates
00:14 - out of it
00:15 - I have my ground plane and my
00:18 - directional light and that is all right
00:22 - now so we're going to use start using
00:25 - some of those other blocks that were in
00:27 - the platform kit so if you look in there
00:29 - there are a bunch of them that start
00:31 - with the word block and those are the
00:33 - different platform pieces if you
00:37 - highlight all of them which I'm going to
00:40 - do right here and you click the import
00:45 - tab you'll see that when they're
00:48 - imported they're gonna be spatial nodes
00:50 - let's change this to static body and
00:52 - click reom port that way whenever
00:55 - they're instanced they're going to start
00:59 - out being a static body so let's start
01:02 - with the block large one if we double
01:04 - click on it it's going to tell us we
01:05 - need to make a new inherited scene just
01:07 - like we did with the crate in the last
01:08 - video so hit that and then you'll see
01:12 - our platform block and all you need to
01:15 - do since it started as a static body is
01:19 - add a collision sibling to it and change
01:25 - its name to block large and save this I
01:30 - recommend you save it in a separate
01:33 - folder because you're gonna have a bunch
01:34 - of these I made a folder called platform
01:35 - objects that I'm saving them in and then
01:39 - when I go back over to my scene I can
01:42 - instance one of these my block large
01:48 - scene that I saved there and there it is
01:53 - now we want to be able to place these so
01:55 - that they line up so what you can do is
02:01 - set configure snap to 0.5 and then when
02:07 - you turn on snap it's going to move at
02:10 - 0.5 unit increments and that means if I
02:13 - do
02:13 - locate this and make another one right I
02:16 - can line them up just right so add a few
02:19 - blocks I'm layout a level feel free to
02:21 - use a bunch of the other ones if you
02:22 - want and get creative you can make it as
02:24 - complicated as you want I'm gonna do a
02:26 - fairly simple one which I'll show you
02:28 - now so there's a little level I made up
02:33 - I just use some of the ramps so that
02:35 - when we test our character we can climb
02:37 - up the ramps jump off things and so on
02:39 - now let's make our character start with
02:41 - a new scene and let's add a kinematic
02:43 - body kinematic bodies worked very much
02:46 - the same as the 2d version if you've
02:49 - followed any duty tutorials and
02:52 - hopefully you have they have a move and
02:54 - slide method just like the 2d kinematic
02:57 - body does we just need to add a mesh
03:00 - instance and a collision shape for the
03:09 - mesh instance I'm going to create a
03:11 - sphere mesh and for the size I'm going
03:17 - to give it a radius of 0.5 and notice
03:21 - that the radius only is in the XZ plane
03:26 - and so the height also has to get set if
03:29 - you wanted to remain circular set the
03:32 - height to one right and then we get a
03:34 - nice sphere shape that is going to have
03:38 - a diameter of one unit and then we can
03:43 - just make a collision shape along with
03:46 - it new sphere shape you can drag again
03:50 - the little handle or I will just go here
03:53 - and make the radius 0.5 then I know it
03:57 - will be exactly the same let's add a
04:01 - material to the mesh so that we can give
04:05 - it a color I'm gonna choose like a blue
04:09 - here a little lighter
04:18 - okay now a sphere it's gonna be very
04:23 - hard to tell which way it's going so
04:25 - let's add another mesh to give a front
04:28 - to this so add another mesh instance and
04:31 - this time I'm going to use a prism mesh
04:37 - so this is a prism mesh shape we're
04:40 - gonna resize it to 0.5 0.5 0.1 I'm going
04:50 - to turn off snap here and then we're
04:53 - going to move it out so you can see it
04:55 - there this it's made a little triangle
04:57 - shape and I'm gonna rotate it
04:59 - I'm gonna rotate this in the x-direction
05:03 - by a negative 90 so that points forward
05:06 - and so forward is along the negative z
05:10 - axis and you can tell that because the
05:12 - local are sorry the global gizmo arrows
05:16 - point in the positive direction so this
05:19 - blue arrow is pointing in positive Z
05:20 - this is the positive z direction so I'm
05:22 - going to move it in the negative Z
05:23 - direction so I'm to stick out the front
05:25 - and mego raise it up a little bit so
05:28 - that arrow will sort of point out the
05:30 - front of our character now before we
05:33 - start coding the movement let's talk
05:34 - about the controls in the project
05:36 - settings in the input map I have added
05:40 - the controls here I've got to move
05:42 - forward event move back
05:44 - strafe right strafe left and jump I'm
05:48 - using WASD and the spacebar for jump
05:51 - because we're going to use the mouse for
05:53 - looking around when they get to that but
05:56 - first we're gonna do the movement so go
05:57 - ahead and add these input actions and
06:01 - then attach a script let's rename this
06:04 - to the character and save it and it will
06:09 - attach a script to it okay so let's
06:13 - start with some of our variables we're
06:15 - going to need a variable for gravity
06:17 - it's gonna be how fast we fall this is
06:20 - the kinematic body so we have to
06:21 - calculate gravity ourselves we're going
06:23 - to use the vector three down constant
06:28 - which is an arrow pointing down negative
06:30 - and the y
06:32 - direction I'm going to multiply it by
06:34 - the strength I want which is 12 that's
06:37 - how strong gravity will be speed is
06:39 - going to be how fast the character moves
06:42 - jump speed is going to be how fast the
06:46 - character jumps up when we hit the jump
06:48 - key and then we're going to have a
06:50 - velocity vector to track our character's
06:56 - velocity so let's start with the physics
07:00 - process so in here we need to add
07:03 - gravity to our velocity and then we need
07:10 - to get our input which we're going to
07:12 - write a function for this and then we
07:16 - need to move using our velocity move and
07:21 - slide velocity and we need to configure
07:26 - the up direction well that's the vector
07:29 - 3 da so that's all we need to move we
07:35 - just now need to define our to get input
07:42 - so here I'm going to set my velocity got
07:45 - X and my velocity dot Y naught Y dot Z
07:51 - to 0 because I don't want the character
07:52 - to be moving when I'm not pressing any
07:55 - of the arrow keys and then we're going
07:58 - to check for the inputs so first we'll
08:03 - do move forward and when we do that we
08:07 - want to move in the negative Z direction
08:09 - so velocity dot Z - equals speed and we
08:15 - do the same for the other inputs
08:24 - you
08:30 - okay and that should do it so now if we
08:32 - go over to our scene and we are going to
08:38 - instance the character in here let's
08:42 - find our character put them in a good
08:49 - starting location camera our camera can
09:02 - see them yeah we need to move the camera
09:05 - back a bit there we go
09:09 - maybe up a little bit all right so let's
09:14 - try this out so I'm gonna press the WASD
09:18 - Keys and you're strafing forward and
09:23 - back alright so that's all working fine
09:30 - but the problem we have here is that we
09:34 - can't rotate all right the character is
09:36 - always facing in the same direction and
09:38 - we can't change direction so that's the
09:40 - next part we need to implement okay so
09:42 - let's move the camera camera up a little
09:45 - bit more and angle it down because I
09:47 - want to be able to look down and see
09:50 - which way the character is facing so we
09:53 - can test our rotation okay so I want us
09:57 - be able to see the character rotating
09:58 - and see which way the arrow is pointing
10:02 - now we're gonna go into the character
10:04 - script and add the code for rotating so
10:07 - we want to rotate whenever the mouse
10:08 - moves side to side so we're gonna use
10:12 - the unhandled input we're using
10:15 - unhandled input instead of input because
10:17 - we want to make sure that what in
10:20 - general whatever GUI you use is going to
10:22 - intercept the input events first and an
10:25 - unhandled input is going to be the ones
10:28 - that pass on to the game
10:30 - so if our event is input event mouse
10:36 - motion that means we move to the mouse
10:39 - and we want to rotate based on the
10:42 - mouses motion in the X Direction that's
10:46 - contained in the relative property and
10:47 - since we want to move if we move to the
10:50 - right we're gonna rotate to the right
10:51 - move to the left we're gonna rotate to
10:53 - the left we can do this all in one so
10:55 - we're gonna rotate our character in the
10:57 - Y direction but something to keep in
11:01 - mind is we don't want to rotate the same
11:02 - speed with a small mouse movement as we
11:05 - do with a large amount of movements we
11:06 - want it to be relative to the movement
11:10 - that you input so we're going to use
11:12 - alert for that
11:16 - and so we're gonna lurk between zero and
11:20 - some movement speed let's put that up
11:24 - here at the top we'll call that spin and
11:27 - that's gonna be the base angle of our
11:30 - movement of our rotation speed we're
11:32 - gonna alert between zero and that based
11:36 - on our event relative X the amount that
11:42 - we moved the mouse and that values going
11:45 - to be in pixels so they can be pretty
11:47 - large so dividing by ten is going to
11:50 - scale that back a little bit so let's go
11:53 - ahead and test it out and see what
11:55 - happens so now as I move the mouse
11:58 - side-to-side the character is rotating
12:00 - see if I move the mouse a little bit and
12:02 - move slow but if I move the mouse fast
12:04 - it moves fast but now watch what's going
12:07 - on with the movement right
12:09 - when I press W to go forward I go that
12:12 - way but when I rotate the character
12:14 - I still go that way so our coordinates
12:18 - our movement is happening in global
12:20 - space but what we really want is we want
12:23 - the character to go whatever directons
12:25 - pointing so we want to use the
12:26 - characters local coordinates that's what
12:30 - we're gonna do next so here I've got my
12:32 - character let's look at them from the
12:34 - top let's change the top view
12:36 - there's my character and it's pointing
12:38 - forward right along the negative z axis
12:41 - and when I rotate this character you see
12:45 - those arrows don't change right because
12:48 - they're the global direction and that's
12:50 - what's happening right now is we're
12:51 - moving along these global arrows which
12:54 - doesn't matter which way I'm pointing so
12:57 - what we want to do is use the characters
13:00 - local space and so if we can illustrate
13:03 - that by switching clicking this button
13:05 - and switching to local space mode in
13:07 - local space mode see how when I rotate
13:10 - so do the gizmo arrows so the in the
13:16 - characters local space forward is this
13:21 - way before it is the direction that that
13:24 - white triangles pointing and that's what
13:26 - we want we want to move using local
13:29 - space so how do we do that in code to do
13:32 - that we use something called a transform
13:34 - so you've probably already noticed as
13:36 - we've been setting properties that every
13:37 - spatial object has a transform property
13:39 - and the transform includes the
13:41 - translation the rotation and the scale
13:45 - and those are encoded in this matrix
13:50 - this transform matrix is how the is how
13:53 - the engine is keeping track of those
13:55 - properties so if I rotate the character
13:57 - and you see the rotation degrees start
14:00 - the transform isn't updating you
14:03 - actually have to save it to update when
14:05 - I save it you see other the properties
14:07 - have changed right and so these
14:10 - properties are encoding that rotation
14:12 - and and tell us that the forward
14:15 - Direction is actually is actually this
14:17 - and not that so when you want to access
14:21 - that in code you access the transform
14:25 - dot origin which will tell you this data
14:29 - where it's moved to or the transform
14:31 - basis the basis has the rotation in it
14:35 - it tells you the local direction arrows
14:39 - for the body so let's go back into our
14:43 - character's script and we're going to
14:46 - change what we're doing here in the get
14:48 - input so I want to reset the velocity
14:51 - vector I don't know which way it's going
14:55 - to be going right and based on the
14:58 - characters local based on the characters
15:02 - local coordinates it might be going
15:04 - partially and Zee partially in X we
15:06 - don't know so I'm going to reset the
15:07 - whole velocity to zero but if I do that
15:12 - that's gonna cancel out gravity and we
15:14 - wouldn't be we'd stop falling so I want
15:17 - to capture the Y velocity so that at the
15:22 - at the end I can put that back
15:29 - just so that we don't lose that
15:31 - information and we'll keep accelerating
15:34 - downwards and so on now we need to
15:36 - change what we do when we move forward
15:37 - or back so now instead of just adding to
15:41 - the Z when we press forward we're gonna
15:44 - take our velocity and we're gonna add
15:46 - the transform basis Z transform basis Z
15:54 - is going to be that that blue arrow in
15:57 - the the blue arrow in the local
16:01 - coordinates so that always when it
16:04 - rotates transform basis Z is gonna be
16:07 - this blue arrow well we want to move
16:08 - opposite that blue arrow when we go
16:10 - forward so that's why I'm putting a
16:12 - negative in front of it the basis is a
16:15 - unit vector so we need to multiply by
16:17 - our speed and then we're going to do the
16:20 - same thing for the other inputs
16:29 - so strafe is going to do the X transform
16:34 - forward and back you're going to be the
16:36 - Z transform so let's try that out and
16:38 - see what it looks like when we run so
16:45 - now let's turn to plan angle now I go
16:49 - forward whatever direction I am facing
16:51 - and strafe go side to side and that's
16:56 - good but it's also very hard to control
17:01 - it would be much better if we had a
17:03 - camera attached to the player that sort
17:06 - of followed us around so we're looking
17:07 - over the character's shoulder here's our
17:10 - character let's add a camera to it and
17:14 - let's take that camera and put it behind
17:17 - and above the character I want to get a
17:23 - little bit higher up and let down so
17:31 - we're looking over the shoulder maybe a
17:37 - little farther away set the camera to
17:41 - current and now we should be following
17:47 - over our character's shoulder with our
17:51 - camera now we can walk around on the map
17:53 - and more easily see where we are and
18:00 - we're almost done we just need to add
18:01 - the jumping now so in our script we're
18:04 - going to add a flag called
18:05 - jump that's going to toggle when we
18:09 - press the jump button sit down here and
18:11 - our input we're going to set jump to
18:16 - false unless we press the input and I'm
18:22 - going to use I'm gonna use just pressed
18:27 - jump we want it to only trigger once per
18:31 - button press if we if we did then we'll
18:34 - set jump equal to true and then in our
18:37 - physics process is where we can check to
18:39 - see if we're allowed to jump
18:41 - because after moving slide is when it
18:46 - knows whether it's on the ground or not
18:47 - so if jump is true and is on floor is
18:53 - true then we want to take our velocity Y
18:57 - instead of equal to our jump speed and
19:01 - now we'll run it and see how our jumping
19:05 - works so now we have a jump alright so
19:18 - that is a really good start on a
19:22 - controllable 3d character hopefully this
19:26 - was helpful to you the one of the
19:27 - biggest takeaways from this lesson is
19:30 - the concept of transforms get used to
19:34 - using those transforms because this
19:36 - transform basis is going to be massively
19:39 - useful in all sorts of circumstances as
19:43 - you'll see as we get further into the
19:44 - tutorial series thanks for watching and
19:47 - I'll see you in the next video
19:56 - you