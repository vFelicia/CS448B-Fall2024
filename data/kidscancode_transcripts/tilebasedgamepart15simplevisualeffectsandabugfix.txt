00:00 - welcome back to game development with
00:02 - pygame this is part 15 of our table
00:05 - based top-down shooter in this video
00:07 - we're gonna be talking about adding some
00:08 - simple visual effects to add some appeal
00:12 - some visual flair to our game and we're
00:17 - also going to really quickly talk about
00:18 - a pesky bug that has snuck into our code
00:22 - and that we hadn't noticed yet so before
00:26 - we start we have a bug to fix so a
00:30 - viewer named Matthew Brown discovered
00:32 - this bug and when it comes up I switch
00:36 - over to our map here he discovered it
00:40 - when he was trying to place walls around
00:41 - the edge of the map and here's what
00:46 - happens right so I've added this wall
00:48 - here I don't and so with it right here
00:52 - if we go over and run the game you'll
00:56 - see there's no problem all right there's
01:00 - the player spawning where we wanted him
01:02 - to spawn but if I go back over to the
01:06 - map and I make this wall a little bit
01:10 - longer let's do it to about right there
01:14 - watch what happens when we run it my
01:18 - player is not in the same place and in
01:22 - fact when it really goes wrong is if you
01:26 - try and make this wall really long watch
01:31 - what happens now whoops let me save it
01:34 - here watch what happens now the player
01:38 - is gone in fact so is the zombie that
01:41 - was supposed to spawn here so what
01:43 - happened well if I start moving you'll
01:46 - see I was over here off the screen and
01:50 - so I'm spawning off the side and if
01:52 - there were walls on this side as well
01:54 - I'd be outside of them so it would be no
01:56 - way to get back onto the screen so
01:58 - something is causing our players
02:00 - position to be changed when it sees
02:06 - these walls so I recommend that before
02:10 - you
02:11 - continue and hear what the answer is
02:14 - plus the video try this on your game see
02:19 - if you have the problem you probably
02:22 - will if you've been following along with
02:24 - the code we've been writing but give a
02:26 - shot at trying to see if you can figure
02:28 - out what is causing it and then and then
02:33 - come back and unpause the video and see
02:35 - if if you found the same solution that I
02:37 - did and so it had me stumped for a
02:42 - couple minutes and then I realized
02:44 - what's happening is in our sprites so
02:48 - let's go look at the player and this is
02:50 - true it's happening with the player and
02:51 - the zombies but look at the player in
02:55 - the init we get the X Y and we set the
02:59 - position to that right and then the
03:02 - update we figure out where we're
03:04 - supposed to be and we set our rectangle
03:07 - to that location but in the first frame
03:12 - we're using the settings that come from
03:15 - the init function and then the init
03:16 - function we create the rectangle but we
03:20 - never set any values for it which means
03:23 - the x and y of the self-direct are being
03:28 - set to 0-0 so on the first frame before
03:31 - it has updated the first thing it does
03:35 - is check for collisions right it checks
03:39 - for colliding with walls and if we're at
03:43 - 0-0 or our rectangles at 0-0 then when
03:47 - we collide with a wall we're going to be
03:48 - moved to the edge of the wall and that
03:50 - is what is happening is we're being
03:52 - shifted to the edge of the wall so to
03:55 - fix that all we need to do is just make
03:58 - sure that in the init of our sprite when
04:03 - we create the rectangle we just set the
04:06 - self-direct center to that XY position
04:12 - and we need to do that on the mob as
04:17 - well
04:19 - so this is one of those pesky little
04:22 - bugs that would have been obvious if we
04:24 - had done this earlier but it just
04:26 - happened that since we weren't creating
04:28 - a map with any stuff on the edges it
04:31 - didn't it didn't come into play so now
04:36 - when I run it no problem I spawn right
04:38 - there
04:38 - the wall is there I can't go through it
04:41 - but we don't get any strange behavior on
04:46 - spawn now that we have that out of the
04:52 - way let's talk a little bit about visual
04:54 - effects now it's still a little early in
04:57 - this game to talk too much about that
05:00 - but I thought it'd be fun just to to do
05:03 - a little bit add a little bit of visual
05:06 - appeal to what we have so far and to do
05:09 - that I went to back to our friend Kenny
05:13 - and I are pack that he did of particles
05:17 - and things and I've grabbed a couple of
05:20 - images here called white puffs with
05:24 - numbers on them right and all they are
05:26 - are just some cloud puffs and we're
05:29 - going to use those to create a muzzle
05:33 - flash whenever we shoot a bullet from
05:35 - our gun so I went ahead and went over
05:39 - here on our settings and I made a list
05:41 - of those files just a list of them in a
05:44 - list called muzzle flashes so that I can
05:46 - load them over in our load data code so
05:53 - we're just going to make a list of gun
06:00 - flashes to hold these images once we
06:02 - load them so we're just going to go
06:07 - through that muzzle flashes list and
06:10 - we're going to append it append each of
06:14 - them
06:16 - there's a load join from our image
06:23 - folder the image name and then I
06:31 - remembered to do convert alpha okay so
06:39 - now we'll have all of those loaded and
06:41 - to make them appear we're gonna create
06:44 - another sprite now eventually this might
06:49 - become more of a generic sprite for
06:53 - different kind of effects we want to
06:55 - have and there's a lot more advanced
06:57 - ways to do effects but again we're
07:00 - trying to keep it relatively simple for
07:02 - now oops
07:04 - so we're gonna just add a muzzle flash
07:08 - class and this is going to start out as
07:12 - a generic sprite right we're just going
07:15 - to pass it a position for where we want
07:17 - it to spawn and then we just need to
07:26 - randomize a couple of things we want to
07:29 - randomize which image we use right we
07:33 - also want to randomize the size so that
07:35 - we can sometimes get bigger or smaller
07:40 - flashes now up here I'm going to add R
07:44 - and int because I also want to just pick
07:48 - random integers for this case so we're
07:50 - just going to do a random integer
07:52 - between 20 and 50 and then art we're
07:58 - going to set our image to a scaled image
08:01 - of that so you transform scale we're
08:07 - going to make a choice from game dot gun
08:14 - flashes
08:15 - and we're going to Reese to Gail it to
08:18 - that size that we just chose we do get
08:26 - rekt for the image and we set our
08:28 - position to wherever we said and we've
08:31 - set our rect Center to wherever we said
08:35 - and then we just want to make sure that
08:38 - we can despawn this thing it's not going
08:41 - to live very long right
08:43 - so the spawn time of this is going to be
08:47 - get ticks and then we just need to in
08:55 - our death
08:56 - update just see if it's been long enough
09:00 - to de-spawn it so what we want to do is
09:05 - say if get ticks - spawn time is greater
09:14 - than some number of milliseconds we want
09:18 - it to last so we'll go over here to our
09:20 - settings we're also going to add a flash
09:28 - duration of say 40 milliseconds right
09:33 - this is going to be pretty quick we just
09:34 - wanted to be a slash so if it's been
09:41 - longer than that then cell duck kill
09:45 - okay and that's our muzzle flash so now
09:49 - we just need to spawn one of these
09:51 - whenever we fire a bullet and we do that
09:57 - in class player when we shoot so right
10:03 - here where is where we spawn a bullet
10:07 - and we're just going to also spawn a
10:11 - muzzle flash
10:16 - and the position is going to be this
10:19 - position that we just calculated of
10:21 - where the bullet because we calculated
10:23 - the where the end of the barrel is that
10:25 - the bullets going to spawn we also want
10:27 - to just spawn the muzzle flash there now
10:31 - if we try this out right you see that
10:35 - flash but we have a problem sometimes
10:38 - that flash is underneath the gun and
10:41 - sometimes it's on top and sometimes it's
10:43 - underneath the bullet and sometimes it's
10:45 - on top of it so we need to start
10:49 - introducing the idea of layers so if we
10:52 - can tell our draw code to always draw
10:56 - things in the correct order we can make
10:59 - sure that the muzzle flashes are always
11:01 - on top
11:02 - the bullets are never underneath the
11:05 - player that kind of thing and the place
11:11 - we're going to do that is in the all
11:13 - sprites group right now the all sprites
11:15 - group is just a regular PI game sprite
11:20 - group but there's another kind of sprite
11:23 - group you can use called layered updates
11:29 - it works just the same as a regular
11:32 - sprite group as far as updating drawing
11:36 - all that kind of thing but it has an
11:38 - additional property that if you set a
11:40 - layer property on sprite it'll draw them
11:45 - in the order that you set the layers so
11:48 - for example over here in the settings
11:50 - i'm i've added some some layers right so
11:55 - i want to make sure that the walls are
11:56 - always at the lowest layer so they have
11:58 - the lowest number right the effects are
12:00 - set at little layer 4 so they're going
12:02 - to always be drawn on top of anything
12:05 - that has a lower layer value than 4
12:09 - it'll always draw those effects the last
12:10 - so that way when we add other effects
12:14 - like dust or fog or smoke or anything
12:18 - else like that we can make sure that
12:20 - it's drawn where we want it to be drawn
12:23 - so all we need to do is assign each of
12:26 - these layers to our
12:29 - rights and the easiest way to do that is
12:31 - in the sprite definition so in the
12:36 - sprite definition now you can set this
12:38 - in a lot of different ways but the
12:39 - easiest way I think is to just add in
12:43 - the player in it a self dot underscore
12:49 - layer it's sort of like a default layer
12:51 - settings right so we know we want the
12:54 - player to be on the player level layer
12:56 - so if you do this here before you call
12:59 - the PI game sprite in it it'll see this
13:03 - property and set the layer to that layer
13:06 - and so on the mob we just want to say
13:14 - Bob layer the bullet we're gonna set to
13:30 - bullet layer and it is underscore layer
13:33 - that's a you can look into the PI game
13:38 - documentation if you want to see why but
13:40 - they just decided to name it that way to
13:42 - indicate it's a special special variable
13:45 - that we're setting at a initialization
13:49 - time while they're now technically this
13:52 - wall layer isn't being used right now
13:54 - because we're using the tiled map to do
14:01 - all of our graphics we're not actually
14:03 - drawing those wall objects but I went
14:04 - ahead and filled it in some of you may
14:09 - still be using that if you ever want to
14:11 - go back to it it'll be ready to go and
14:14 - we won't put this at the effects layer
14:19 - okay
14:20 - so just check back make sure we set it
14:24 - right on each of these underscore layer
14:27 - Orillia okay so now if we go over here
14:30 - and we run this you're gonna see that
14:33 - whenever you shoot those bullets let
14:38 - those model flashers are always
14:39 - appearing on top of the gun
14:42 - looks very nice just gives a little bit
14:45 - of visual flair now moving forward you
14:50 - might think of other places we could use
14:51 - effects like this when a bullet hits a
14:55 - mob or when a mob hits the player when a
14:58 - bullet hits a wall any of those kind of
15:01 - things you can have a little shock wave
15:02 - effects puffs of dust even sprays of
15:07 - blood if you were thinking of making
15:08 - things a little more gory although I
15:11 - think for this video series we're gonna
15:13 - stick to a PG rating so that'll do it
15:19 - for this video
15:20 - we now have a layered drawing function
15:24 - and we can start adding more graphical
15:29 - effects and more visual appeal we have
15:33 - some more work to do on our zombies and
15:36 - their movement style although they're
15:39 - way better than they used to be and we
15:42 - can actually start talking about some
15:45 - more about gameplay as opposed to basic
15:48 - code functions if you have some thoughts
15:51 - or suggestions along those lines please
15:54 - post them in the comments below and I
15:57 - will see you all in the next video as
15:59 - always please hit the like button below
16:02 - and subscribe if you haven't already so
16:05 - that you can see the next video as soon
16:07 - as it comes out thanks and I'll see you
16:09 - next time
16:14 - welcome back to game time with PI game
16:16 - this is part 15 of the Tao based
16:20 - top-down shooter project and in this
16:23 - video we're going to be talking about
16:24 - how to add some simple visual effects to
16:27 - add a little flare a little appeal to
16:31 - our games graphics welcome back to game
16:37 - don't move tie game this is part 15 of
16:40 - the tile-based top-down shooter project
16:43 - and in this video we're going to be
16:45 - talking about how to add some simple
16:48 - visual effects to add a little flare a
16:51 - little appeal to our games graphics
17:03 - you