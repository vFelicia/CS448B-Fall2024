00:00 - in this tutorial I'll show you how to
00:02 - make a 2d laser effect in Godot 3.1 for
00:07 - this demo I've got a kinematic character
00:09 - which I'm controlling with the mouse and
00:11 - keyboard walking around in a top-down
00:14 - tile map and so what we want to do in
00:18 - this tutorial is get this guy to shoot
00:21 - but I don't want him to shoot bullets I
00:23 - want him to shoot a laser beam a beam
00:25 - that's gonna come out of the gun and
00:27 - travel until it hits something so pretty
00:31 - much instantaneously to do that we're
00:33 - gonna need to use two techniques a ray
00:35 - cast which is gonna be a line projecting
00:39 - from the gun and detecting a collision
00:41 - at some point and then we're also going
00:44 - to need to draw this laser beam and
00:46 - we're gonna use a line 2d for that
00:49 - here's my soldier and he's got a
00:52 - position 2d marking the muzzle of the
00:54 - gun so I'll know where to project from
00:56 - but we're gonna need to add the visible
01:00 - component of this laser which is a line
01:01 - 2d I'm going to add a line to D node and
01:05 - to start with we're just going to draw
01:07 - this on the screen just so we can see
01:09 - something so I'm just gonna put two
01:10 - points kind of like that now over here
01:15 - if we look at the positioning we'll see
01:17 - it's not quite on the muzzle so I'm
01:19 - gonna move that a little bit just so we
01:21 - have it and so this is just gonna be a
01:24 - test version of it when we draw it we're
01:26 - gonna dynamically set where this goes
01:28 - and let's make the default color more
01:32 - laser you lookin and then for the
01:35 - capping I'm going to make the end cap
01:37 - round it looks a little better so that's
01:40 - now coming out of the gun projecting out
01:44 - and our line 2d is basically always
01:48 - gonna have two points the starting point
01:50 - is going to remain the same all the time
01:52 - it's the muzzle of the gun but the
01:54 - ending point is going to be wherever the
01:56 - raycast
01:57 - detects a collision or its second point
02:03 - is going to be non-existent right if I
02:06 - remove the second point I don't have a
02:07 - line so that's the condition when we're
02:09 - not shooting or we haven't hit anything
02:11 - all right so let's look at the play
02:13 - code right now all I have in here is the
02:17 - movement code and I just have a at the
02:21 - left mouse click action calling a shoot
02:25 - function and that shoot function right
02:27 - now doesn't do anything so this is where
02:29 - we're gonna do our our code so I'm going
02:33 - to add a couple of variables here we're
02:36 - gonna have a beam duration it's gonna be
02:43 - how long the beam lasts now while we're
02:48 - testing we can make this big you
02:49 - probably don't want it to be a long
02:50 - number but maybe you do I'm gonna put 1
02:55 - and 1/2 seconds and I'm also going to
02:58 - make a cool-down is how long you have
03:02 - after the beam disappears before you can
03:05 - shoot again and then this can shoot flag
03:09 - is what's going to determine if the
03:12 - shooting happens see we have this here
03:14 - when you press click it'll only shoot if
03:16 - that can't shoot variables true and then
03:20 - one more variable called hit this is
03:23 - going to be our collision did we detect
03:27 - a collision or not so I like having this
03:30 - beam here for visibility for testing but
03:34 - obviously when the game runs I want this
03:36 - to disappear I don't want to see this
03:39 - line sticking out of the player so what
03:42 - we want to do is remove this second
03:45 - point in the line and so I'm going to do
03:48 - that in the ready I'm just gonna say
03:53 - line to D remove point number one all
03:58 - right we'll leave point number zero on
04:00 - there so that way we have our line ready
04:04 - to go ready to have the second point
04:06 - added when we shoot so when we shoot
04:09 - what do we do we are shooting so we're
04:12 - going to set can shoot to false and then
04:19 - we're going to need to cast our beam
04:22 - cast our array to detect a collision and
04:25 - I'm going to put that in
04:27 - a separate function because as you'll
04:28 - see later we're gonna want to do some
04:30 - different things with it so I'm gonna
04:32 - assign that to a method so I'm gonna
04:40 - make a method called cast beam it's
04:42 - going to return it's gonna return either
04:48 - null if it didn't hit anything or a
04:51 - collision if it did hit something right
04:54 - so rather than use the raycast 2d node
04:57 - which you could use for this I'm going
04:59 - to use the direct space state method so
05:03 - we're gonna get world 2d and we're gonna
05:08 - get the direct space state from that and
05:11 - that's gonna let us cast array in the
05:16 - current world space that will detect a
05:20 - collision with any physics objects so
05:23 - result the result is going to be space
05:26 - state dot intersect ray now the
05:30 - parameters that we passed through this
05:32 - we need to the start point that's the
05:34 - muzzle global position we need the end
05:38 - point well that's the muzzle global
05:44 - position projected outwards so we're
05:50 - gonna take the transform dot X of our
05:53 - player that's gonna be the direction the
05:55 - player is pointing in and how far we
05:58 - want to cast it I'm just gonna put a
06:01 - thousand there for now that's how far we
06:04 - want to cast this beam out oh and then
06:06 - we don't want the beam to collide with
06:08 - ourself just in case we have any kind of
06:11 - one pixel overlap with our collision
06:13 - shape or something like that let's make
06:15 - sure we don't intersect with the player
06:18 - itself okay so now we've cast array a
06:21 - thousand pixels forward so result is
06:24 - either going to be null or it's going to
06:25 - be equal to the collision so if there's
06:27 - a result then we want to add to the line
06:32 - 2d and so you might think you could say
06:36 - add point result dot position
06:39 - all right that's that's the location of
06:42 - the collision and then we're going to
06:47 - return results so now if we try this let
06:57 - me move over here into the center and
06:59 - then I'm going to shoot and you see how
07:01 - that is not a straight line at all all
07:04 - right it collided over there somewhere
07:05 - and that's because the position is this
07:08 - is a global position but we're adding it
07:11 - to the line to D so we needed to use
07:12 - local coordinates and we can do that by
07:16 - using the transform again transform
07:20 - again is the transform to D of the
07:22 - player so it has the player's position
07:25 - and rotation encoded in it so we're
07:29 - going to use transform the transform
07:32 - inverse on the position result and that
07:35 - will transform it to local coordinates
07:39 - ok let's see what that looks like now
07:41 - I'm going to walk over here I'm gonna
07:44 - shoot ok it hit that spot right now
07:47 - we're not able to shoot again because we
07:48 - haven't reset things but two problems
07:50 - you notice one is it did hit right it
07:52 - hit the wall there but now when I move
07:54 - the the line is still extending that
07:58 - same distance even if I move and I don't
08:01 - want that I want the beam to stop when
08:04 - it hits the wall no matter how I rotate
08:06 - while the beam is active so we're gonna
08:09 - need to update that position every frame
08:14 - because the player might be moving
08:16 - ok so let's fix those problems first
08:19 - let's make it so we can shoot again
08:20 - well after we shoot we're going to give
08:24 - it we're gonna say get tree create timer
08:28 - and we're gonna use the beam duration
08:30 - all right that's how long we wanted the
08:31 - beam to show and then we tuck wait for
08:34 - that to timeout and then we will remove
08:39 - point one from the line so now the line
08:42 - will disappear again and we also want to
08:47 - set
08:49 - can shoot people true actually we want
08:56 - to wait so the beam went for that long
08:58 - we need another yield because we also
09:00 - want to wait for the amount that we gave
09:02 - the cooldown so we're gonna get tree
09:06 - create timer cooldown also wait for the
09:11 - timeout and then we're going to set
09:13 - can't shoot to true so let's see how
09:18 - that looks so go over here we shoot it
09:23 - hit the wall then the beam goes away and
09:26 - I can shoot again right so wherever I'm
09:32 - pointing when I'm able to shoot that's
09:34 - where the beam is cast to and it stays
09:36 - that length so the next thing we have to
09:38 - fix is that process of updating the
09:42 - length of the beam okay so we have to go
09:46 - down here in our physics process we want
09:48 - to update that beam as long as there is
09:51 - a as long as there's a value of hit
09:54 - right so if hit isn't null then we must
09:57 - have hit something and we want to update
09:58 - that beam so we're gonna call it again
10:04 - then it'll go through cast the beam
10:07 - again but it's gonna add another point
10:09 - right and we don't want to do that right
10:13 - because if we've already hit something
10:16 - we already have two points in the line
10:18 - we don't want to add a third point to
10:20 - the line so if if we have a result we
10:24 - want to add a point if there's no we had
10:27 - never hit anything before right it's
10:29 - first time we've hit something we're
10:30 - adding the point otherwise we're going
10:34 - to update we're going to set point
10:38 - position one to that same value so we're
10:43 - gonna grab this and update to the new
10:48 - result so let's try this
10:54 - so I shoot at the wall all right but now
10:57 - look my error mat code is going crazy
11:00 - and that is because
11:03 - hit is still hit is still valid after
11:08 - the timeout right I've removed a point
11:11 - from the line when the beam ended but
11:15 - hit the value of hit hasn't changed
11:17 - because I haven't cast a new beam so
11:18 - after we timeout the beam we need to
11:22 - just reset hit to null and that will put
11:27 - everything back to the way it was so we
11:29 - can cast the next one so now you can see
11:32 - the beam as long as it lasts won't go
11:35 - through any walls and this is including
11:38 - if I keep moving around
11:39 - I can shoot as I move and we're all good
11:47 - so I'll do it for our 2d laser effect
11:50 - tutorial
11:51 - obviously we kept the look of it very
11:53 - simple with a plain line 2d there's a
11:56 - lot more things you could do to add
11:57 - world environment glow to add shaders
12:01 - for pulsing effects to get something
12:03 - like this which is a quick one that I
12:05 - did but that will have to be a topic for
12:09 - another video click the link below to
12:12 - download the project and play with it
12:14 - yourself thanks for watching and I'll
12:16 - see you in the next video
12:25 - you