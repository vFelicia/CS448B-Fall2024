00:00 - this is part two of the procedural
00:02 - generation tutorial series for Godot in
00:05 - this part we're gonna look at some ways
00:08 - that we can use the randomly generated
00:10 - mazes we created in part one for
00:13 - different applications in game projects
00:17 - so here's our script from the previous
00:20 - part where we made our map using the
00:23 - maze generation algorithm and all I've
00:26 - added to it is I've added a camera 2d so
00:29 - that when we run I can zoom the camera
00:32 - out and put the camera at the center of
00:35 - the map which allows us to make a much
00:37 - bigger map so if I run it you can see
00:40 - you know we made a much bigger map here
00:43 - and that's just going to be more
00:44 - convenient for the different variety we
00:46 - might be making so the first thing I
00:50 - want to talk about is something a lot of
00:52 - people ask me about in the comments and
00:55 - that is seeding the random number
00:57 - generator and if you're not familiar
01:00 - with that a lot of procedurally
01:02 - generated games like Minecraft for
01:04 - example use this so that users can share
01:08 - the same random worlds so what happens
01:10 - is if I generate a new world it's gonna
01:13 - be it's gonna be randomly created as I
01:15 - explore it and but if I share with you
01:18 - the same seed that my random number
01:20 - generator is using to generate that
01:22 - world you will get the same world as me
01:25 - even though we explore some you know the
01:27 - a humongous world we don't have to share
01:30 - all that data we just have to share that
01:32 - one number and we'll always be sure that
01:34 - will generate the same world and we can
01:36 - do that with our randomly generated
01:38 - content here too so what we're gonna do
01:41 - is we're going to add a variable called
01:43 - seed or I'll call it map seed to hold
01:47 - that seed value and I'm setting that to
01:51 - 0 to indicate that we don't have a seed
01:53 - so here on our ready
01:55 - what we're gonna do is after we
01:56 - randomize to initialize the random
01:59 - number generator we're gonna check to
02:00 - see if a seed has been set and so if no
02:03 - seed has been set we want to make a new
02:05 - one so we'll set that equal to a random
02:08 - integer and then what we will do is seed
02:14 - you know the seed function we will see
02:16 - the random number generator with that
02:17 - value and then I'm also going to print
02:20 - it out because I want to see what it's
02:22 - coming up with so we'll print that out
02:25 - so if we run this we'll see a random map
02:28 - and if we run it again you know we'll
02:31 - see a random different map so every time
02:34 - we run it we're getting a different
02:35 - random map but it's printing out this
02:37 - value here this is the seed that it used
02:39 - when it made the maze so if we copy and
02:42 - paste that value we'll get the same
02:44 - pattern again so if you look really
02:47 - closely at how the pattern is laid out
02:49 - you've got a couple of just pick a
02:51 - couple of things that you notice what
02:52 - they look like
02:52 - and we'll copy and paste this value for
03:01 - the map seed your extra space there and
03:04 - you'll see that when we run it we get
03:07 - the same exact pattern so every time we
03:10 - run this we're gonna get the same
03:12 - pattern and that's how the seed works
03:15 - and so depending on your games
03:18 - application you could generate this at
03:20 - the beginning when the player starts a
03:22 - new level and then save this as part of
03:25 - the save file so the user can see it and
03:28 - recall it if they want to play the same
03:29 - level again that kind of thing so the
03:31 - next thing I wanted to talk about was
03:33 - the maze itself so when we talked about
03:36 - the recursive backtrack or algorithm we
03:39 - talked about how it generates what's
03:41 - called a perfect maze that means that
03:43 - from any one point on the map there is
03:45 - one path to any other point on the map
03:49 - there are no loops there's no there's no
03:53 - two routes in between any places and
03:55 - there are no sections that aren't
03:57 - connected at all and so that's fine and
04:00 - we have our nice little twisty maze but
04:01 - it means that if for example you were
04:04 - generating a random city city streets
04:07 - don't work like this they need their
04:09 - need to be more intersections so one
04:11 - thing we can do is once we've generated
04:13 - the maze and we know everything is
04:14 - connected we can go back and randomly
04:17 - remove some extra walls in between some
04:20 - of the additional tiles so I'm going to
04:23 - make a variable to control that this is
04:25 - the fraction
04:27 - of walls to remove so this is just going
04:30 - to be a number from 0 to 1 of how much
04:33 - removing do you want to go through and
04:35 - do and I'm going to set that to 0.2 and
04:40 - we're going to start off doing this very
04:42 - simply we're just going to randomly pick
04:44 - tiles out of the map and if there's a
04:48 - wall on that tile we're gonna remove it
04:51 - so I'm gonna go down here to the end and
04:54 - I'm going to make a new function for
04:55 - that okay the race fault walls function
05:01 - is going randomly remove a number of the
05:08 - map walls okay
05:11 - so we need to we need a loop so we're
05:14 - gonna do this however many times which
05:17 - is going to be width times height times
05:21 - the erase fraction all right so if we
05:25 - have a 10 by 10 map there's a hundred of
05:26 - them we're gonna do 20 randomly so now
05:32 - we need to pick a random tile but we
05:34 - need to pick one that's not on the edge
05:36 - so I'm going to pick an number between 1
05:42 - and width minus 1 do the same thing for
05:48 - y we're gonna do height instead and now
05:54 - we have a random pile so the cell that
05:56 - we are focused on is that x and y so now
06:03 - we need to pick a random neighbor of
06:07 - this cell that we just got so neighbor
06:10 - is going to be we take the keys from
06:17 - cell walls and remember that's the for
06:20 - directional vectors and we're going to
06:23 - just pick a random one
06:32 - so we pick a random directional neighbor
06:35 - if there's a wall between them remove it
06:43 - so we picked a random cell we picked a
06:46 - neighbor there may or may not be a wall
06:47 - between them so if there is so if map
06:50 - get cell V so we get that cell and then
06:56 - we compare it with cell walls a neighbor
07:09 - okay so if we have a 15 for example all
07:14 - four walls and the neighbor was the one
07:17 - to the north then we're comparing it
07:19 - with north and we're gonna get right
07:21 - we're gonna compare it with north and
07:24 - we're gonna get a true or false here if
07:26 - the wall is there so if it is we're
07:28 - gonna remove both so so the cells walls
07:33 - let's do so the new wall to SMAP gets lv
07:41 - cell - cell walls neighbor alright so
07:49 - since we have a north wall we need to
07:51 - subtract it but we also need to remove
07:53 - the south wall from the other one so n
07:56 - walls for the neighbor is mapkit so the
08:01 - cell plus n oops L plus neighbor - cell
08:11 - walls negative neighbor alright we want
08:18 - the opposite so if we have a cell with a
08:24 - neighbor to the north we're gonna
08:26 - subtract the north wall and on the
08:28 - neighbor we're gonna subtract the
08:30 - opposite which is the south wall so now
08:33 - we can just update now we can just
08:35 - update the map map set
08:39 - Selvi and map sale plus neighbor okay
08:56 - and so that will update both of them and
09:01 - now just so we can see it happening I'm
09:03 - going to stick the yield here so that we
09:08 - will pause or update the screen in
09:10 - between each frame and then we're gonna
09:12 - go up to our ready and just call the
09:14 - erase walls and we should now see it
09:18 - start removing some tiles there we go so
09:23 - you see how we're getting some loops
09:25 - here now some places where there's a
09:27 - little roundabout some places where
09:30 - there will be ways to get around from
09:32 - one place to another and depending on
09:34 - what you set that erase fraction to you
09:36 - can get a pretty densely connected map
09:39 - or very sparsely connected map for
09:41 - example here's the result if you set the
09:43 - erase fraction to 0.8 it's really high
09:46 - you get a lot of grids and chunks of
09:52 - tiles that are all connected together
09:54 - which might make sense if you wanted a
09:57 - very densely populated city or something
10:00 - like that
10:03 - speaking of cities since we're using
10:05 - roads here it kind of makes sense that
10:07 - you might want to turn this into some
10:10 - sort of city or or other driving kind of
10:15 - game and in that case you want to put
10:18 - some items some decorations some
10:22 - buildings things like that in the green
10:24 - spaces but because of the way our maze
10:28 - generator works every single tile is
10:30 - being explored so every tile has a road
10:34 - in it so that only leaves us a very tiny
10:37 - amount of space in between the adjacent
10:40 - roads to place any buildings or other
10:43 - objects and so what we want to do is
10:46 - space these roads out and create more
10:50 - space in between adjacent roads
10:53 - to do that we can go in and redefine our
10:56 - neighbors so instead of the neighbors
10:58 - being the one cell to the north south
11:00 - east and west we're going to change this
11:02 - to a two and so we're gonna say assails
11:06 - neighbors are the ones two spaces away
11:08 - in any direction and so that means it's
11:12 - going to consider those but in our
11:15 - making maze here we have to change this
11:19 - because we're now appending all cells to
11:22 - unvisited and there's no way to visit
11:24 - those in-between cells so we actually
11:26 - need to take this line out so we set the
11:30 - whole map to 15s into solid green and
11:34 - then we're also going to do a loop where
11:39 - we go from 0 to width by twos and Y from
11:46 - 0 to height by twos and we're going to
11:51 - append those just those to the unvisited
11:54 - and now if we run this what's going to
11:57 - happen is we're now our maze algorithm
12:02 - is running just fine and it's
12:03 - calculating every cells adjacent
12:06 - neighbors by skipping over and of course
12:09 - since it's skipping over there are gaps
12:11 - in all of the roads so what we need to
12:15 - do is whenever we skip over a tile
12:17 - whenever we cut a wall in between say
12:20 - this one and this one we need to place a
12:23 - connection there and if you remember
12:27 - from our list of tiles here that means
12:31 - we either want to use number 5 we want
12:34 - to make it we want to make that in
12:36 - between cell a5 if it's connecting east
12:38 - to west or we need to make it a 10 if
12:41 - it's connecting north and south so it's
12:42 - we either moved horizontally or we moved
12:46 - vertically so now down here where we
12:50 - remove the walls from both cells we have
12:53 - a direction vector here that's keeping
12:55 - track of it'll tell us whether we went
12:57 - horizontally where we went vertically so
13:00 - after we set these walls we can add
13:02 - another insert
13:06 - intermediate cell so we want to stick
13:12 - that one in between so if Durex is not
13:15 - equal to zero that means we did a
13:17 - horizontal so we need number five so we
13:21 - need to set cell the current plus der
13:29 - over two so we want to do half way right
13:33 - there's der is two spaces so we want to
13:37 - do a one space over and we want to set
13:39 - it to five I'm just missing an L there
13:42 - and then otherwise we must have gone
13:47 - vertically so so we want to set current
13:52 - plus three over two to ten and that
13:57 - should now insert the one in between
14:00 - everywhere we go and made another typo
14:06 - there but there we go
14:09 - so now our maze is generating just like
14:12 - it did before but we have more space in
14:16 - between our roads so we have room in
14:17 - here to put buildings and trees and
14:20 - whatever other kind of things we want to
14:22 - put in between those spaces and you
14:27 - could totally go and just and generalize
14:30 - this and make the spacing arbitrary
14:33 - three spaces four spaces whatever I just
14:37 - wanted to do two as an example to show
14:39 - you the concept now if you also want to
14:44 - remove walls which I had disabled in the
14:48 - previous example then you're going to
14:51 - need to change or erase walls because
14:52 - we're also going to be skipping over so
14:56 - you'll have to change things like for
14:58 - example when you pick your random cell
15:00 - you need to pick a you need to pick an
15:03 - even-numbered one so instead of picking
15:05 - and we still don't want the walls so
15:08 - we're going to start with two and the
15:10 - easiest way to get even-numbered one is
15:12 - just to go between 32 minus 2
15:18 - - - and then multiply by two and then
15:24 - that way you get something in between
15:26 - left in the middle and then you multiply
15:28 - by two so you get some where all the way
15:31 - across and I've always been an even
15:32 - number because you multiply by two and
15:34 - then we can use that same if statement
15:38 - here to insert the intermediate cell
15:41 - except that the naming is this is
15:45 - neighbor and this is a cell plus
15:50 - neighbor right here and again this is
15:58 - another thing that you could generalize
16:00 - so that your spacing can be arbitrary so
16:05 - there we go so now we drew our spaced
16:07 - out cells and then we connected a bunch
16:10 - of them so now you can make little city
16:12 - blocks here that kind of thing and then
16:15 - one other thing I wanted to show you is
16:17 - if we take our maze scene we're using
16:21 - you know our square tile map but the
16:24 - cool thing about doing our tile map this
16:26 - way is that the the arrangement of cells
16:30 - the the actual maze that we generate and
16:34 - the connections is independent of what
16:37 - the map actually looks like what the
16:40 - visibility of it is and so for example
16:43 - if you wanted to use isometric tiles you
16:47 - could use isometric tiles as well and
16:49 - they look like this so we have the same
16:52 - connections that we had with our
16:56 - top-down cells but rendered in an
17:01 - isometric or in an isometric style and
17:04 - all we would have to do is change our
17:08 - tile map and tile set and we won't have
17:12 - to change any of the code and I'll show
17:14 - you how that works so we're gonna take
17:16 - I'm gonna take the maze and I'm gonna
17:18 - save this scene as and call it maize
17:22 - isometric
17:24 - and so now I still have the same script
17:27 - attached to it let's rename this too and
17:34 - so we have the same tile map the same
17:38 - script but now I'm going to take the
17:40 - tile map and I'm going to change this to
17:43 - isometric and then I'm going to change
17:46 - the now when we do that we have to
17:48 - change the cell size and the cell size
17:50 - that we want for these isometric tiles
17:54 - we're using is 100 by 50 and then we
18:00 - needed to change the tile set and so if
18:03 - you load you can see there's an iso
18:07 - rhodes tile set so we wrote load that
18:10 - instead now we've got isometric tiles
18:12 - right and we can lay those out like that
18:15 - and now when we run it our maze is going
18:18 - to work exactly the same except it
18:21 - renders it with isometric tiles okay so
18:24 - I hope you enjoyed that it went a little
18:26 - bit longer than I had planned I so I do
18:29 - have at least one more video I want to
18:32 - do talking about the maze specifically
18:36 - doing the decorations filling in those
18:40 - blank spaces in between the roads with
18:42 - other features and also doing a very
18:45 - simple game where you walk around on the
18:49 - maze and explore it so that'll be
18:51 - that'll have to happen in the next video
18:53 - so as always please comment with your
18:57 - questions and suggestions below and I'll
19:00 - see you in the next video