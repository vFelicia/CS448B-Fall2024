00:00 - hello and welcome to another good old
00:01 - game engine tutorial in this video I'm
00:04 - going to show you how to implement
00:05 - pathfinding on a tile map using the
00:08 - navigation 2d nodes if you're new to
00:10 - Godot be warned I won't be explaining
00:13 - every little thing so you might feel a
00:14 - little bit lost I recommend you start
00:16 - with my Godot 101 tutorials first
00:19 - alright let's get started okay so for
00:23 - this project we're going to have a
00:25 - simple map here with some mobs that are
00:28 - walking from a start position to a goal
00:31 - position and using the navigation 2d
00:36 - node they're going to be able to find
00:39 - the shortest path from the start to the
00:41 - end and we'll be able to remove blocks
00:45 - from the path and they'll find a new one
00:47 - that will let them get to where they're
00:49 - trying to go ok let's look how this is
00:56 - set up so in our main steam here we've
00:58 - created a navigation 2d node and all we
01:03 - did with it is make a tile map the child
01:07 - and I'm not going to go into how you
01:09 - create tile maps in this video we can do
01:12 - that one in a separate one but we have
01:15 - this time up here with two two different
01:17 - types of tiles which I've gone and drawn
01:19 - these initial tabs with and also in the
01:24 - scene we've created a start position and
01:26 - an in position using to position 2d
01:29 - nodes with sprites attached to them to
01:31 - give them something to see and then we
01:35 - have a mob timer that's just going to
01:37 - all this does is control how often the
01:39 - mobs spawn at the start position I have
01:41 - that set to half a second right now and
01:43 - it's an auto start so that it just
01:45 - repeats over and over again so this is
01:49 - the set up and our mob is just a sprite
01:52 - I've just created a sprite of the little
01:56 - army guy and that's it so the way that
01:59 - nav 2d nodes work is they need to have a
02:04 - shape attached to them just like with a
02:07 - collision body you need to have the
02:09 - collision shape attached to it
02:10 - you need to have a shape attached to
02:12 - this navigation
02:13 - be and that's usually done with a
02:15 - navigation polygon instance right so
02:20 - just as an example I could add a child
02:22 - here to NAV and now I have a polygon
02:24 - instance which needs to have its shape
02:27 - defined so I can say so you can either
02:30 - say new navigation polygon or you can go
02:33 - up here to these buttons up here which
02:35 - let you create a new polygon from
02:37 - scratch so if I click the little pencil
02:38 - and I start clicking out here it's going
02:40 - to say do you want me to create a
02:43 - polygon here say yes and then you can
02:46 - draw points where you know wherever you
02:50 - want and connect them up and this
02:52 - becomes your navigation polygon and
02:55 - using the little red button here you can
02:58 - adjust these you can you can insert you
03:02 - see the pop up here you can split the
03:05 - segment using ctrl + left mouse button
03:08 - so if I click ctrl in here I can insert
03:10 - a new point in there and so depending on
03:15 - how you're set up you might draw your
03:17 - navigation polygon too to cover whatever
03:21 - your area that you want to navigate is
03:24 - and now any node that's inside of here
03:27 - can find a path from any point inside
03:30 - the polygon to any other point inside
03:32 - the polygon and that all works fine for
03:36 - a static setup but because we have a map
03:40 - here our time up that we want to be able
03:43 - to add and remove tiles
03:44 - I want the navigation polygon to
03:47 - basically be all the brown road tiles
03:51 - and so as I add and remove them the
03:53 - shape of this polygon is going to change
03:55 - and so we want that to be dynamic and so
03:59 - we're going to tie that into the tile
04:00 - map so let's delete this polygon we
04:05 - don't actually want to do it that way
04:06 - and so the way that we do this is when
04:10 - we've set up our tile map or sorry when
04:13 - we set up our tile set right here's my
04:16 - tile set I have the graph style and I
04:20 - have the brown road tile okay and on the
04:24 - brown road tile I've added a navigator
04:27 - and polygons as a child and so this
04:31 - navigation polygon covers the the tile
04:34 - and you're going to get an error here
04:36 - because it's going to tell you that a
04:38 - navigation polygon needs to be a child
04:40 - or grandchild to a navigation 2d node
04:43 - and so by itself it doesn't work but
04:47 - when we have it here in the in the tile
04:49 - map it will be under a nap 2d so it's
04:53 - going to work fine now the only thing
04:55 - you need to be careful of is since these
04:58 - tiles are going to be laid in the map
05:00 - they're going to be side by side and so
05:02 - this navigation polygon needs to connect
05:05 - to the one of the tile next to it and
05:08 - that means that you need to size these
05:10 - properly so right now I have snapping on
05:13 - on the grid if I turn snapping off you
05:16 - can see I could grab the corners and you
05:18 - know size this however I wanted and the
05:22 - problem will be if if you are not
05:24 - exactly on the borders of the tile if
05:27 - you're sticking over a little bit this
05:28 - way or sticking over a little bit this
05:30 - way the navigation will not work so you
05:34 - need to turn on snap and make sure that
05:36 - you are exactly matching the size of the
05:40 - tile that you're using so that when they
05:44 - are adjacent they will line up properly
05:47 - if you have starting to have problems
05:49 - with your navigation working that's the
05:51 - first place to look is you might not
05:53 - have your your snap grid on and you
05:56 - don't have your polygon covering the
05:58 - edges of the tile okay so we take the
06:02 - two tiles we export this as our tile set
06:04 - and that's the tile set we use in our
06:07 - tile map node and so I have tile number
06:12 - zero which is the grass and I of tile
06:15 - number one which is the road so here's
06:19 - the start of our main scenes code we are
06:22 - pre loading the mob scene so that we can
06:25 - instance it we have a few variables
06:27 - pointing to the nodes that we need to
06:30 - reference in the case of the positions
06:33 - we're just getting the positions for the
06:35 - start and end so that we can
06:37 - spawn the mobs at the right position
06:39 - we're going to set process input to true
06:42 - so that we can detect the mouse clicks
06:43 - and in the input function this is where
06:48 - we're going to do that so if the mouse
06:50 - button is clicked or if a mouse button
06:52 - is clicked first thing we do is we use
06:55 - the world to map function to convert
06:58 - from the mouse coordinates to map
07:02 - coordinates so we basically get what
07:03 - tile we have clicked on and then if you
07:08 - click the left mouse button we're going
07:10 - to put we're going to set the cell to
07:12 - the road tile if you click the rice
07:15 - right mouse button we're going to set
07:16 - the tile to the grass tile and then when
07:20 - you let go of the mouse button we've
07:22 - created a custom signal here called map
07:25 - update and we're going to emit that
07:27 - signal which all of the mobs are going
07:30 - to listen for and if they hear that
07:31 - signal they're going to know that the
07:33 - map has changed and they need to update
07:35 - their path and then finally we have
07:38 - whenever our mob timer times out we're
07:41 - going to instance a mob set its position
07:44 - to the start position and that's all we
07:47 - have so far so here's our mob code so I
07:51 - have a speed variable so we can control
07:53 - how fast they move nav is going to refer
07:58 - to the navigation 2d node which we're
08:01 - going to have to tell the model that
08:03 - when it spawns path will be an array
08:06 - just holding the point that it needs to
08:08 - travel through this is what you get back
08:11 - from navigation is a list of path of
08:16 - path points to travel through and then
08:20 - we're also going to want to be able to
08:21 - set our goal position so we know where
08:23 - we're traveling to so that's it so now
08:26 - where do we start
08:27 - well first we need to be able to set our
08:31 - navigation and so it's null by default
08:35 - but when we set it we're going to want
08:36 - to do a couple of things so we're going
08:38 - to use a set get here and we're going to
08:41 - make a function called set navigation
08:44 - and set nav and set nav
08:48 - is going to be passed some new
08:50 - navigation right so in theory you could
08:53 - have multiple multiple navigation nodes
08:56 - that the sprite is traveling between and
08:58 - whenever you want to change it you're
09:00 - going to send it a new one so we'll set
09:02 - our nav to the new now and whenever we
09:06 - get a new navigation we're going to want
09:07 - to update the path but we're also going
09:10 - to want to update the path whenever it
09:12 - changes so we're going to make a
09:14 - function called update path and what
09:22 - update path is going to do is calculate
09:23 - its new F and you do that by taking the
09:29 - navigation node right which we have set
09:33 - and you use the get simple path method
09:39 - on it and what that does is you pass it
09:43 - a the position you want to start at and
09:46 - that's so that's going to be our
09:47 - whatever our current position is where
09:50 - you want to travel to and then a true or
09:54 - false
09:55 - which is which has to do with path
09:57 - optimization I'm going to set this to
09:59 - false and we can we can look at what it
10:02 - does when you set it to true once we
10:04 - have it working okay and now if our path
10:10 - size returns 0 that means we either have
10:17 - reached the destination so there's no
10:20 - more points to travel through or it
10:22 - means we are stuck somewhere where
10:24 - there's no path to the goal right if
10:26 - there's no way to get from your start
10:29 - position to your in position you will
10:30 - get an empty after return and so if that
10:34 - happens because we've you know trapped a
10:36 - node somewhere because we removed the
10:38 - road it was on we're going to queue free
10:41 - so we just want the mobs to disappear
10:43 - when they've reached the end and if they
10:45 - ever get stuck somewhere they can't move
10:47 - we'll just we'll just have them be
10:49 - deleted ok so now our mob has its path
10:52 - that it needs to travel and now we need
10:56 - to have it follow that path so let's go
11:00 - back over to our main real quick
11:02 - and when we spawn the node here we're
11:05 - going to use those functions we just set
11:08 - up so we're going to set the mobs goal
11:10 - to the end position we're going to set
11:16 - the mobs nav to our nav node right and
11:21 - because we used a set get it's going to
11:25 - run that update path code and then
11:29 - finally we want to connect our map
11:33 - update signal to the mob and have it run
11:39 - the update path function whenever it
11:42 - does
11:43 - so whenever the mob here's the map
11:46 - update signal it's going to update path
11:49 - now back over on our mob we just need to
11:51 - decide what to do with our path so again
11:55 - our path is going to be an array of
11:57 - points to travel through so as we are
12:00 - processing we need to check if so if
12:04 - path size is greater than 1 then we have
12:11 - at least one more path you know one more
12:14 - path node to travel to and so we need to
12:18 - figure out the distance to that so we're
12:21 - going to get our position and find out
12:25 - the distance to path 0 first first one
12:30 - in the list of the next the next ones
12:32 - we're basically going to be removing
12:34 - we're going to be removing items from
12:37 - the path as we reach them all right so
12:39 - the next node we need to travel to is a
12:42 - certain distance away and the reason we
12:45 - do that is so that we can interpolate
12:48 - the movement and move at the city speed
12:50 - to that point so if the distance is
12:52 - greater than 2 which means we've gotten
12:57 - really close right that's going to be
12:59 - close enough and you can adjust that as
13:01 - well it's depending on the size of your
13:05 - sprite that you're moving and the size
13:08 - of the map that you're moving on you can
13:10 - adjust that to get to get smoother
13:12 - transitions between different nodes but
13:14 - this one works fine for
13:16 - our speed and size that we are using so
13:20 - we're going to set our position to
13:22 - whatever current position is and then
13:24 - we're just going to do a linear
13:25 - interpolation to path zero the place
13:30 - we're going so between the place we are
13:33 - in the place we're going interpolated by
13:36 - the speed that we want to travel at
13:38 - times Delta divided by D alright and so
13:45 - that way we'll move whatever fraction it
13:47 - takes to keep the speed steady otherwise
13:50 - if we've gotten that close then we will
13:53 - remove at zero right and so then we'll
13:58 - be ready to process the next one and
14:02 - again if path size is if we've reached
14:07 - it then we can Q free because we've
14:10 - reached the final node so we are there
14:14 - okay and so that should do it for the
14:17 - code for them up and now we're ready to
14:19 - try it out so here come our mobs
14:23 - spawning and they are now calculating
14:26 - their path along the navigation to D and
14:31 - if we remove a path they're going to try
14:35 - and find whatever their next closest one
14:38 - is that makes them go around as you
14:48 - change it you'll see them find whichever
14:51 - ones they can we'll find the closest
14:53 - path that they can make this guy go all
14:57 - the way back around hopefully you get
15:00 - the idea navigation to D is a really
15:02 - powerful node there's a lot you can do
15:04 - with it this is just one example that
15:06 - could be applied to games like tower
15:08 - defense games strategy games where you
15:11 - have a lot of Units needed to travel
15:12 - around the changing map thanks for
15:16 - watching please check below for the
15:18 - source code if you want to try the
15:20 - project out yourself and I will see you
15:22 - in another video
15:32 - you