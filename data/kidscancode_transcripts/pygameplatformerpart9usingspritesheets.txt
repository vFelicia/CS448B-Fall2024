00:00 - welcome back to game development Piegan
00:02 - in this video we're going to start
00:05 - talking about adding graphics to our
00:07 - platformer game using spreadsheets so
00:12 - it's time to start thinking about adding
00:14 - some graphics to our game now if you
00:17 - watched the shmup video you know we made
00:20 - a folder and we put a lot of different
00:22 - images in there and we loaded those and
00:25 - use them as our sprite images and that's
00:29 - fine that's a that's a simple way to do
00:31 - it but a lot of times you have a lot of
00:34 - art for your game you might have a lot
00:36 - of different images and that image
00:38 - folder can get very full
00:40 - it also can start to be a performance
00:43 - problem because every time you load an
00:45 - image off the disk you're taking a chunk
00:49 - of time you know that's a that's a slow
00:51 - process so the fewer times you have to
00:56 - read data off the disk the better for
00:58 - performance or for in this case loading
01:01 - right because this would be at the
01:02 - beginning of the game loading all the
01:03 - graphics so the way that programmers
01:09 - solved that is by using something called
01:11 - a sprite sheet so I have here the jumper
01:16 - pack from Kenny game art which I'll link
01:20 - to in the notes below and this is a nice
01:24 - low pack with lots of art in it if we
01:27 - look at the little sample
01:28 - it's got player sprites it's got lots of
01:31 - obstacles and enemies and platforms and
01:34 - coins and all the stuff that you might
01:37 - need to make a little jumper game like
01:40 - we are and so if you look at the preview
01:46 - he's included all of these graphics
01:47 - right and so that's a lot of that's a
01:50 - lot of art and so you could go in here
01:53 - and load the individual images for all
01:58 - the different actions of the players and
02:01 - and all the different items and so forth
02:04 - and so on but again that's going to
02:06 - start to fill up your folder with lots
02:08 - of art right so the way we solve that
02:11 - is with this there's something called a
02:14 - sprite sheet and a sprite sheet has all
02:16 - of the images collected in it all
02:18 - together and so we load this one image
02:23 - so we only have one load off the disk
02:26 - and then we in our program slice it up
02:30 - into the parts we need when I need the
02:32 - coin image I just go and find the coin
02:33 - image and grab this little chunk of the
02:36 - sprite sheet and make that the image for
02:39 - my coin sprite and if I want this
02:44 - platform I cut that one out etc so I've
02:47 - copied this sprite sheet into my image
02:54 - folder here in my in my folder where I'm
02:58 - where we're building the jumper game and
03:00 - so I have my sprite sheet you can
03:03 - preview it right there and then I also
03:06 - have this included along with it is an
03:08 - XML file if we look at this XML file you
03:12 - can see that it's just a list of each of
03:15 - the images and where it's located in the
03:19 - sprite sheets of which what the x and y
03:22 - coordinate of its top left-hand corner
03:23 - are and how wide each image is and how
03:26 - tall each image is so you can go through
03:28 - here and find which of the images you
03:32 - want right so if I want the players
03:39 - ready image I would cut out from 6 14
03:43 - 1063 with a width of 120 and a high to
03:46 - 191 okay hopefully that makes sense and
03:51 - wilt as we go through the process you'll
03:53 - see how it works okay so we're gonna go
03:58 - over here to our sprites file where we
04:01 - were defining our various sprites and
04:03 - well technically this isn't a sprite I'm
04:05 - going to stick it in here because it's
04:07 - another class we're going to find we're
04:09 - gonna define a sprite sheet class and
04:12 - what this sprite sheet class is gonna do
04:14 - is you know load the image and let us
04:18 - and give us a way to slice it up into
04:22 - the parts we want
04:24 - this is a utility class for loading and
04:28 - parsing sprite sheets now if you're not
04:32 - familiar with the word parsing parsing
04:34 - means reading through a data file and
04:40 - understanding what it means you know for
04:43 - example if you were trying to read a
04:45 - file that was written in English and you
04:47 - wanted to understand the grammar that's
04:50 - what parsing means so in this case what
04:51 - we're doing is taking a sprite sheet and
04:54 - understanding how to break it up into
04:56 - the pieces that you need so the in it
05:01 - for this class is gonna be pretty simple
05:02 - we're just gonna pass it the file name
05:04 - that we need to load and then we'll call
05:09 - it the we'll call it the spreadsheet
05:11 - this is just pi gonna image dot load
05:15 - we're gonna load the file name and
05:18 - convert it okay and so then we need to
05:26 - define a get image command and that what
05:30 - that's gonna do is let us tell it an X a
05:31 - Y a width and a height for what chunk of
05:37 - the sprite sheet we want now you might
05:41 - be thinking you know we could go and if
05:43 - we look at this XML file that came with
05:45 - the sprite sheet we could set it up so
05:48 - that we read all of this and then if I
05:50 - want the particular image out of it I
05:56 - could say you know if I want you know
05:59 - bunny one ready I could just say give me
06:02 - bunny one ready and it reads from this
06:04 - file what location to use and that would
06:08 - be very functional the problem is so I'm
06:12 - not going to do it that way because if
06:14 - you decide to use a different sprite
06:15 - sheet you may find you go and get a
06:17 - sprite sheet online and the artist who
06:20 - made it didn't include an XML file with
06:22 - it and then you'd have to go and
06:23 - generate this which could get kind of
06:25 - tedious it might come with a text file
06:27 - it might come with you know some other
06:30 - format there's listing listing where the
06:32 - different parts are so what we're gonna
06:34 - do is we're gonna just manually specify
06:36 - these things
06:38 - at least the first time through here and
06:39 - we'll talk about different ways you
06:42 - could do it but we're gonna stick with
06:43 - that for now to keep it more flexible
06:45 - for whatever you might be using so we
06:49 - tell it what part of the image we want
06:51 - so this function will go ahead and
06:54 - document this
06:56 - we'll grab an image out of a larger
07:00 - larger spreadsheet okay so we're gonna
07:05 - make a little surface to put this image
07:09 - on and that's it's gonna be the size we
07:14 - want so it's gonna be this size we
07:15 - specify and then we're just going to
07:19 - flit on to that onto the image it's a
07:27 - chunk of the sprite sheet and the chunk
07:31 - we want so we want to blit it in the
07:34 - corner of the image and the chunk we
07:36 - want is the chunk specified by the
07:40 - rectangle that we specified okay
07:46 - so we take this chunk of this sprite
07:51 - sheet and we lit and onto this image at
07:55 - this location okay and then we can
08:00 - return that image so now I'll just say
08:03 - you know get image whatever we want and
08:06 - that will be our image that we get back
08:10 - okay so now we can go and tell our game
08:15 - to load that and so I'm gonna go in here
08:17 - to our settings and just define what the
08:19 - name of my sprite sheet file is
08:22 - spreadsheet jumper dot PNG and then I
08:27 - can go over here to the main and in our
08:29 - load data section is where we're gonna
08:32 - do this now
08:33 - our image file is in the image folder so
08:37 - we needed to find that image folder all
08:45 - right so we know what it what folder all
08:46 - the images are in
08:49 - and then we're going to load okay so the
08:59 - spritesheet for a game is going to be
09:01 - one of our spreadsheet objects and all
09:04 - we need to pass it is the file name this
09:07 - file name is going to be the file name
09:11 - joined with the image during and keep it
09:14 - simple we need to put that in here so
09:17 - we're to join join the image dirt with
09:22 - the sprite sheet image that we specified
09:27 - okay and then now I'll go over here and
09:30 - load one of these and Oh in case you
09:32 - didn't notice I just noticed that I
09:34 - typed tie game here instead of PG which
09:37 - is gonna give us an error message and
09:40 - now we can run this and make sure we
09:41 - don't have any typos okay now obviously
09:45 - we're not gonna see any graphics yet
09:50 - alright so let's go over here to our
09:53 - player and let's change this into one of
09:57 - our images so if we go over here and
09:59 - look at the art pack individually you
10:03 - can see what some of the graphics look
10:05 - like so we're gonna use this little
10:07 - bunny for our player and to start with
10:10 - I'm just going to use the stand one
10:12 - alright we can obviously animate it
10:14 - walking and do all sorts of stuff like
10:16 - that but to start with I just want to
10:19 - load this ready one and make this my
10:20 - player so funny one ready and if we go
10:23 - look at our sprite sheet here bunny one
10:26 - ready these are the coordinates for it
10:33 - so I'm gonna just copy that I don't have
10:38 - to go back and stuff that image here we
10:41 - want to use the game sprite sheet and
10:46 - say get image and in the parenthesis of
10:50 - get image we want to put those four
10:54 - numbers which I just copied and pasted
10:56 - so I'm going to just stick them in here
10:58 - and replace the
11:02 - Camas and then we should be good to go
11:06 - okay so we got the image and we need to
11:10 - not fill it with yellow so now we should
11:15 - have our player being the sprite we want
11:17 - so let's take a look okay so here's our
11:27 - big giant sprite so two problems we have
11:31 - one is it's a lot bigger than the
11:35 - sprites we've been using so far the
11:38 - little rectangle we defined so we have a
11:39 - size problem and we also need to do the
11:44 - set off on the background and fix the
11:45 - background problem okay fixing the black
11:50 - border is very easy we just need to go
11:52 - in here and say self image set color key
11:58 - okay now the size issue is a little
12:01 - different right so we know that this is
12:04 - bigger than we want to be and if we
12:05 - actually go and look at the image all of
12:08 - these images are pretty large which is
12:12 - nice because it makes it flexible you
12:13 - can use them all whatever size you want
12:14 - but we want to resize them we're gonna
12:18 - want to resize all the ones we're using
12:21 - so that they all fit together so we
12:25 - could just resize this sprite sheet but
12:28 - the problem with resizing the sprite
12:29 - sheet is as soon as we do this as soon
12:32 - as we do that all these images aren't
12:35 - gonna be at the same locations and the
12:37 - same sizes so all these numbers won't
12:38 - work anymore and we won't know where the
12:40 - individual images are and be a lot of
12:42 - work to go through and Reap lot out all
12:45 - of these locations so what we're gonna
12:49 - do to keep things simple is resize them
12:52 - after we load them so we could resize it
12:56 - right here and say when we load the
12:58 - player we resize it but then we'd also
13:00 - need to resize it when we load the
13:01 - platforms and etc etc right that can get
13:04 - kind of annoying so what we're gonna do
13:07 - is in the get image we're just gonna
13:09 - automatically resize it when we load it
13:12 - so so we could do that here we could
13:15 - just say
13:16 - PG transformed scale image now when you
13:23 - scale an image when you use the scale
13:26 - transform you have to specify the new
13:29 - width and height you can't just say
13:31 - divide by two so we could say with / - I
13:37 - - I - I - so make everything half the
13:39 - size okay so so it says lid get this
13:42 - image it gets the image and scales it
13:45 - then sends back the scaled image and so
13:48 - that's good so let's see how that looks
13:50 - now okay ah no we got an error message
13:56 - here and if you look at what that is it
13:58 - says integer argument expected got float
14:01 - what does that mean well my height is
14:06 - 191 190 1/2 is not a integer it is a
14:12 - fraction so because we're working with
14:16 - pixels the scale command wants a an
14:18 - integer number for the width and height
14:20 - so we need to round these or truncate
14:23 - these two integers and the quickest way
14:27 - to do that is using the double slash
14:31 - operator which all that does is divide
14:34 - by you know divide and truncate the
14:39 - fraction into an integer chunk it's the
14:41 - decimal part so that'll give us that
14:43 - should give us whole numbers and then we
14:45 - can run it and we should have a
14:48 - half-size little bunny okay
14:51 - so that looks a little better you're now
14:55 - working with sprite sheets okay so
15:01 - that's going to do it for this video
15:02 - we're now working with sprite sheets
15:05 - loading them and cutting images out in
15:08 - the next video we'll start to work with
15:12 - some more graphics and improve the
15:15 - platforms and then we can start
15:17 - animating the character so that we're
15:19 - using some of these some of these nice
15:24 - animation frames to make it look nice
15:27 - then we can go from there thanks for
15:29 - watching and we'll see you next time
15:39 - you