00:00 - welcome back good Mego 101 this is part
00:02 - 2 or we'll start talking about scripting
00:05 - if you haven't watched the previous
00:06 - video please do so every video is going
00:09 - to build on the previous one so I don't
00:11 - want you to fall behind alright let's
00:13 - get started ok so here we have our
00:16 - sprite scene that we created in the last
00:18 - video and when you run it doesn't do
00:21 - very much it just pops up and shows
00:22 - what's our sprite in our game window and
00:26 - so in this video we want to make the
00:28 - spread-eagle move and to do that we need
00:30 - to add a script to it you can add a
00:32 - script to any node in Godot and the code
00:34 - and scripts will act on that node for
00:37 - example you can access and change any of
00:40 - these properties over here in the
00:42 - inspector that the node has like for
00:45 - example if you want to change its
00:47 - position you want to change whether it
00:49 - is visible or not any of these any of
00:52 - these properties can be accessed that
00:54 - you can access in that in the inspector
00:55 - it can also be accessed from code ok so
00:59 - to move the sprite around we want to
01:02 - focus on this property right here pause
01:06 - let's see position so this is the
01:09 - position of the sprite in the scene so
01:11 - when I grab it and move it around that
01:13 - position and value will change and if I
01:16 - go in here and I type that I want it at
01:18 - 300 300 be able to move there but in our
01:24 - script if we write code to change the
01:26 - value of this then we'll see the sprite
01:28 - both so we need to add a script to this
01:32 - node and there's a couple different ways
01:33 - to do that like I said any node can have
01:37 - a script attached to it so if you scroll
01:39 - down to the bottom of the inspector
01:40 - right here there's a script property
01:44 - it's under node because every node can
01:47 - have one and if you pull down around
01:50 - here you can create a new CD script
01:52 - slate or load one that you've already
01:54 - made if you written the script
01:55 - previously do you want to use and so
01:58 - that's one way the other way is you just
02:00 - go up to the node here in the scene and
02:02 - you right click on it you can choose add
02:04 - script and that's what we're going to do
02:06 - that's quicker so we click there and
02:10 - then we get this
02:11 - little box that pops up and asked us
02:13 - about the script that we want to create
02:16 - so the inherits is going to put in here
02:20 - what type of node it is this is a sprite
02:22 - node so it's going to inherit from
02:24 - sprite you don't need to change that
02:28 - from language QT script is the only
02:31 - option right now in the future there
02:34 - will be some other languages that you
02:35 - can use in Godot but let me use GU
02:38 - script and then the path is just going
02:40 - to be where in the game folder that it
02:45 - will be we're just going to leave that
02:46 - as it is right now - it'll create and
02:50 - now here we are in the script editor so
02:54 - this is our default script you see the
02:57 - first line says extend write if you're
03:00 - familiar with object-oriented
03:02 - programming this script is a class every
03:05 - script you make is going to be a class
03:07 - and it's inheriting from the sprite
03:09 - class because that's the type of node
03:12 - that we're wanting to control so by
03:15 - inheriting from the sprite class we will
03:16 - get access to all of the properties that
03:19 - a sprite has so then it has some
03:23 - comments that are automatically inserted
03:25 - you know when they start this is where
03:28 - member variables will go we'll talk
03:30 - about what that means in a minute I'm
03:32 - just going to delete that and then we
03:34 - have a function called underscore ready
03:37 - and like the comments up here this
03:40 - function runs every time the node is
03:43 - added to a seems sort of like your
03:46 - initialization code when your first hit
03:48 - play the sprite is added to the scene
03:52 - and whatever coded in this ready
03:55 - function is going to execute now if
03:58 - you're familiar with Python
04:00 - Gidi script is going to look very
04:01 - similar it has very similar syntax
04:05 - indentation is important and some of the
04:10 - names will be different like we use func
04:13 - to declare a function not death but
04:16 - aside from that it should look pretty
04:18 - familiar to you there's not a lot of
04:21 - resources out there for learning Gd
04:23 - script there's lots out there for
04:25 - so if you want to study Python it'll
04:27 - help you with your GD script so let's
04:30 - just demonstrate how this works what
04:32 - we're going to do is we're just going to
04:33 - fill in I'm going to race the comets
04:36 - here and I'm just going to say print
04:37 - hello right so I want it to print when
04:41 - it gets added to the scene right so
04:44 - that's what the ready will do and I can
04:45 - remove the TAS as well that was just a
04:48 - placeholder so when I hit run
04:50 - [Music]
04:51 - there's my sprite and right here in the
04:53 - output tab I see
04:56 - hello sprite so my code is working so
05:03 - what do we want to do well to start with
05:04 - why don't we do this what we're going to
05:06 - do is we're going to print get pause
05:10 - well let's get Todd let's look at what
05:13 - it does prints out 300 300 because that
05:19 - is the sprites position that's the value
05:23 - right now I don't know I could use this
05:26 - fit Clause function well one thing you
05:29 - can do is if you click on the classes
05:31 - tab here you can see a reference to the
05:35 - documentation so if I go to sprite
05:38 - that's the note we're using these are
05:42 - all the properties that a sprite has
05:44 - right
05:46 - set set texture is centered is slipped
05:51 - you see these are all various properties
05:54 - but you don't see get pause there do you
05:58 - because if we look down here the paws
06:01 - property is part of the node to the
06:04 - class and a sprite is a node to be but
06:08 - all node 2ds have this so this is under
06:10 - the node TD class so if we click here
06:12 - you can see which sprite inherits from
06:15 - node 2 T so if I click on that these are
06:18 - all the functions or methods that a node
06:21 - TD nodes can use and if we go along here
06:26 - we can see there's get pause you're
06:29 - going to hear it tells us it returns the
06:31 - position of the 2d node and it gives us
06:34 - a vector to the vector 2 is a
06:36 - two-dimensional vector
06:38 - with an x and a y component and that is
06:43 - what we're going to that's what we're
06:44 - printing out so now if I want to move
06:48 - this right I mean I want to change its
06:49 - position over time and just like any
06:53 - other game engine because oil engine is
06:56 - running a loop it's running a certain
06:58 - number of frames per second typically 60
07:00 - and so every 60th of a second I want to
07:03 - move that sprite a little bit so what we
07:06 - need to do is we're going to declare a
07:09 - variable U bar to do that we call it the
07:13 - velocity okay and that's going to be a
07:15 - vector two and I'm just going to put one
07:18 - comma one in there okay I wanted to move
07:22 - one pixel next one one six one Y and now
07:28 - you want this sprite to be something
07:31 - every frame and that means we need to
07:33 - say set process true and what this does
07:40 - is it tells it it's sprite to do
07:45 - something every frame and what it will
07:47 - do every frame is what you put in the
07:50 - process function so anything in this
07:54 - process function will happen every frame
07:57 - so what we're going to do is we're going
07:59 - to tell you to set position to whatever
08:03 - the position is now plus blocking okay
08:08 - and then if we hit play on this now
08:10 - that's what we're going to see is every
08:13 - frame it's adding one pixel in x + 1
08:17 - pixel in Y and that's fine
08:21 - but we could definitely do better and
08:23 - one of the things we could do better is
08:26 - how to do is this Delta variable ratio
08:32 - because different things could be going
08:34 - on on your computer at different times
08:37 - every frame isn't going to be exactly
08:40 - one sixtieth of a second it might be a
08:43 - little off and what Delta measures is
08:45 - how much time has passed since the last
08:48 - frame
08:50 - it's going to be around 160th but
08:52 - sometimes a little bit less so and we
08:57 - want to use that so that we can make
08:58 - sure there are animation anything moving
09:01 - anything like that is independent of
09:04 - that delay and another word for that is
09:10 - framerate independence so for example if
09:14 - I have a sprite and I wanted to move
09:15 - across the screen at 100 pixels per
09:17 - second I always wanted to move 100
09:20 - pixels in a second of time regardless of
09:23 - what the framerate is doing whether it's
09:26 - going up or down and that's what Delta
09:28 - lets us do so instead of having our
09:31 - velocity vector just be in you know the
09:34 - units of this would be pixels per frame
09:36 - right we're saying move this mucus with
09:38 - every frame what we want them to we want
09:41 - the unit to be is pixels per second so
09:44 - I'm going to increase these numbers here
09:46 - so I want to move it a hundred pixels
09:48 - per second which is convinced going to
09:51 - be fairly slow because that means it'll
09:53 - take ten seconds to cross the window
09:56 - that's a thousand pixels wide and I'm
09:59 - going to make this one even smaller I'm
10:01 - except 50 and we use that just by going
10:04 - and taking the velocity and multiplying
10:06 - by the Delta so now it'll move whatever
10:11 - fraction of that second that fraction of
10:15 - that speed okay and that's going to look
10:17 - like this so pretty similar still very
10:23 - smooth now we are set up to be
10:26 - independent of the framerate if anything
10:30 - ever happens to slow the framerate down
10:32 - for one or two frames we won't have a
10:34 - you won't see any difference in the
10:36 - movement speed so there's lots of other
10:39 - stuff you can do obviously anything
10:41 - about any other property that you want
10:44 - to change over time you can change them
10:46 - here in the process for example we have
10:50 - this lot property that's the rotation of
10:53 - the sprite so let's change that to be
10:57 - fun so I set the rotation and you can
10:59 - see here it says it's looking for
11:02 - radians
11:04 - so we want to do get whatever the
11:06 - current rotation is plus I'm going to
11:09 - take PI times Delta that means I want to
11:13 - move high in radians represents 180
11:18 - degrees so when I lose 180 degrees
11:20 - versus rotate 180 degrees for a second
11:22 - let's lie on that you can see it's also
11:27 - going to stand spotless okay so the next
11:32 - thing we need to do is deal with it
11:34 - going off the edge of the screen there
11:36 - but we will save that for the next video
11:38 - we've almost reached 15 that so I don't
11:41 - want to go too much longer with each
11:42 - video thanks for watching please like
11:45 - and subscribe if you enjoyed the video
11:47 - and I will see you next time