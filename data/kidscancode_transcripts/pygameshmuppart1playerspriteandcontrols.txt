00:00 - and welcome back to game development
00:02 - with pygame today we're going to start
00:04 - making our first game we've learned how
00:07 - to create sprites and move them around
00:10 - on the screen and so we're ready to
00:12 - start making a game out of that and the
00:16 - first game we're going to make is called
00:17 - a shmoop
00:18 - if you haven't heard the term before
00:20 - shmoop is an abbreviation for
00:22 - shoot-'em-up that's any kind of game
00:25 - where you run around or fly around and
00:29 - shoot it stuff that's coming at you
00:33 - space invaders Galaga asteroids these
00:37 - are all examples of shmups you may have
00:39 - heard of and so for this one I thought
00:42 - that we would make a little spaceship
00:45 - that we're flying around and we're
00:47 - shooting at aliens or asteroids and
00:51 - eventually we can have all sorts of fun
00:54 - stuff like fancy explosions and
00:56 - power-ups and different kinds of lasers
00:59 - and fun sound and music so let's get
01:04 - started alright let's get started on our
01:10 - shmoop game so I'm going to take my
01:12 - packing template which we made in the
01:14 - previous lessons and I'm going to save
01:17 - that as and I'm going to call this shmup
01:22 - okay so now we're we have a nice
01:26 - starting point for our project
01:35 - and the first thing let's do is set up
01:37 - our screen settings so we're going to
01:40 - make this a vertical game so it's going
01:44 - to be taller than it is wide so we're
01:47 - going to make the width 480 and the
01:49 - height about 600 that should fit on just
01:53 - about everybody screen and this is going
01:55 - to be an action game so we want it to be
01:57 - really fast and smooth we're going to
01:58 - set the FPS to 60 now that means that
02:03 - things are going to need to happen
02:05 - really fast in our loop so that the game
02:08 - doesn't get slow but we should be fine
02:10 - we're going to do anything too fancy
02:12 - in this first time around okay and we'll
02:17 - set the title of the window also to
02:20 - shmoop and we have a lot of things to
02:26 - consider before we're going to finish
02:28 - this game we have to figure out the
02:30 - player and how it moves we have to
02:32 - figure out shooting we have to figure
02:33 - out enemies and how the enemies behave
02:36 - we have to figure out the graphics and
02:38 - the sound music are there going to be
02:41 - power-ups things like that and that's a
02:45 - lot of things to do and we can't do them
02:46 - all at once so we're going to do this
02:47 - step by step and the very first step is
02:50 - we need to get a sprite onto the screen
02:53 - to be our player so that we can start
02:55 - talking about movement so we're going to
02:58 - make a player sprite now you could name
03:01 - this you could name this ship if it's
03:05 - going to be a ship but you might have
03:06 - enemy ships that might be a confusing
03:07 - name I'm going to stick with just
03:10 - calling it player and this is going to
03:13 - be a PI game sprite object and if you
03:17 - forgot how the sprite stuff works you
03:20 - can look back at the last a couple of
03:22 - lessons where we talked about working
03:24 - with sprites and if you recall every
03:27 - sprite has a couple of mandatory things
03:32 - required things that you have to do for
03:34 - the sprite to work and one of those is
03:37 - we need to call the sprites the built in
03:41 - sprites init function without that the
03:45 - sprite will not work and then the two
03:48 - pieces that
03:49 - every sprite must have are an image and
03:52 - this image we're just going to make this
03:54 - be a rectangle for now it's a lot easier
03:57 - to just work with rectangles while
04:00 - you're getting everything working and
04:02 - then come back and change those into
04:04 - graphics once you have it working the
04:06 - way you want to so this is going to be
04:09 - our surface is going to I decide to make
04:11 - it fifty pixels wide and 40 pixels tall
04:13 - so it'll be a little rectangle and then
04:15 - I'm just going to fill that with a color
04:18 - and I think I'll do green and then the
04:23 - second mandatory piece is you have to
04:26 - have a rectangle a rect defined and so
04:29 - we will do that by using self image get
04:32 - rekt and let's place that on the screen
04:37 - somewhere convenient we're going to be
04:40 - having our ship down towards the bottom
04:42 - of the screen so let's just put it let's
04:44 - put the center X at width over to that
04:49 - will make it centered on the screen and
04:51 - we'll put the rect bottom equal to
04:55 - height oops
04:56 - height minus 10 that'll put it 10 pixels
04:59 - up from the bottom so it'll be in a nice
05:01 - position to start out at and then it's
05:05 - going to need to move side to side so
05:08 - we're going to set an X speed that will
05:12 - control how fast in pixels that sprite
05:15 - should move and our speed will start at
05:18 - zero and for our update portion of our
05:22 - sprite which is the things that will
05:26 - happen every time the animation loop
05:28 - happens every time the the update
05:31 - happens in the animation loop we need to
05:35 - tell it to just move its rectangle at
05:38 - whatever the speed is okay and right now
05:42 - that's zero so it won't be moving but
05:44 - once we start adding controls we'll have
05:46 - the controls change what that speed is
05:48 - but before we do that let's make sure
05:50 - that our sprite works so we'll create a
05:53 - new object so I'll just use the variable
05:58 - name player and that will be one of
05:59 - these player sprites
06:02 - and we just need to make sure that we
06:05 - add any sprite that we create into the
06:07 - sprites all sprites group so that down
06:10 - here in our animation game loop it gets
06:12 - updated and it gets drawn so let's see
06:16 - if we have any problems nope there we go
06:20 - there's our nice little green player
06:22 - sprite down towards the bottom of the
06:24 - screen ready to talk about how to
06:28 - control it
06:30 - now how do we go about making it move
06:34 - when we're talking about movement we're
06:37 - talking about we want to use the arrow
06:40 - keys or if you prefer a and D you can
06:43 - use those as well but we want to use the
06:45 - keys to control it
06:47 - now that means we want to talk about
06:49 - events remember we have this section of
06:52 - the game loop was dealing with events
06:56 - events again are any any anything that
07:00 - might happen outside of your game that
07:03 - you want the game to know about like
07:06 - someone clicking the mouse button
07:07 - someone pushing a key on the keyboard
07:09 - and then you can write some code for
07:14 - what the program should do when that
07:16 - event happens now we have a couple of
07:19 - options here when we talk about using
07:22 - the arrow keys to control the sprite now
07:25 - one way is right down in here in our
07:27 - event queue we could say if the left
07:31 - arrow key was pressed so there'll be
07:33 - another event for that so if the left
07:35 - arrow key was pressed then we tell the
07:38 - player sprite to move to the left and
07:41 - then we would appear in our player
07:43 - sprite define some command called move
07:45 - left or or maybe just move that could be
07:49 - left or right and that would set the
07:51 - speed to the appropriate speed in the
07:54 - case of left we want it to go to a
07:56 - negative value so it goes this way and
07:58 - in the case of right we want to go to a
08:00 - positive value so it goes this way but
08:03 - that means that when you press the left
08:05 - arrow key the sprite will start moving
08:07 - to the left and then when you let go the
08:09 - o left arrow key it will keep moving to
08:12 - the left
08:13 - and while that might be a way you want
08:18 - to control things in some games where
08:21 - your sprite can't actually stop moving
08:23 - in our case that's going to be kind of
08:26 - frustrating because then we would have
08:27 - to make two more or two more events for
08:30 - the left key getting released and the
08:33 - right key getting released and make
08:35 - those set the speed back to zero so it
08:37 - starts to get kind of cumbersome so
08:40 - instead what we're going to do is we're
08:43 - going to tell our sprite right here in
08:46 - our update section we're going to tell
08:49 - our sprite that your speed should always
08:52 - be zero okay first thing just you
08:55 - shouldn't be moving and then we're going
08:57 - to check and see is the key down if the
08:59 - key is down then you can move so you're
09:02 - always sitting still unless the key is
09:04 - pressed down so the way that we do that
09:08 - is we have to find out what keys are
09:12 - down okay and the way you do that is
09:16 - there's a command in PI game called PI
09:20 - game key get pressed and get pressed
09:25 - will give us back a list and that list
09:28 - will be every key on the keyboard that
09:31 - happens to be down right at this instant
09:34 - so if three or four different keys are
09:37 - held down at the same time you would
09:38 - know about all of them so once we have
09:41 - that list we can say if the key state of
09:48 - Pi game UK left all right that's the
09:51 - left arrow key is down then we're going
09:56 - to set the speed X to negative say it's
10:01 - five and we'll see how we like that
10:03 - speed and if the key state of the right
10:08 - key is down then we're going to set the
10:13 - speed to five okay and that makes things
10:17 - a little simpler so that it always moves
10:22 - as long as you hold it down and as soon
10:23 - as you let go it will stop so if we try
10:26 - that out
10:26 - you can see when I press lefty goes left
10:29 - and when I let go it stops so I can you
10:34 - know if I want to move quickly I can
10:35 - move back and forth between the keys and
10:37 - I can control how he moves now we still
10:40 - need to deal with the edges of the
10:42 - screen if you remember in the sprite
10:45 - example we made this we made the sprite
10:47 - wraparound so that if you went off this
10:48 - side you would come back in on this side
10:51 - but I think for this game
10:53 - I want the sides to be walls so that I
10:56 - can't go past the edge so we just want
11:00 - to tell the sprite here that if the rect
11:05 - if the right edge of the sprite ever
11:09 - tries to get bigger to go past the right
11:12 - side of the screen never tries to get
11:14 - greater than width then we're just going
11:16 - to set the right equal to width so that
11:20 - way the right coordinate can never get
11:22 - bigger than whatever our width is and
11:25 - just the same on the left side we're
11:29 - going to say if it ever tries to get
11:31 - less than zero then we're going to set
11:33 - the rect left equal to zero okay that
11:37 - way I will be nicely stuck on the screen
11:42 - or constrained as programmers like to
11:47 - say so I'm constrained to say on the
11:49 - screen so that's some pretty simple
11:54 - movement if you'd prefer to use
11:57 - different keys for example if you want
12:00 - left to be the a key and you want right
12:03 - to be the D key that's how you would do
12:05 - that if you'd like the sprite to move
12:09 - faster as you can imagine you could do
12:11 - something like that and make the speed a
12:14 - little bit faster and now when we move
12:18 - it's a lot quicker you can play around
12:22 - with that get it the way you like it
12:25 - remember if you make it too fast you're
12:27 - basically going to just teleport from
12:29 - one side to the other and you'll never
12:30 - be able to stop in the middle because
12:31 - you won't be fast enough your fingers
12:33 - won't be fast enough to let go so find a
12:36 - comfortable speed that you like
12:38 - and in the next lesson we will start
12:41 - talking about adding some enemies