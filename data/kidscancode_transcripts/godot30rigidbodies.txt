00:00 - hello if you're new to judo and you
00:02 - think you might want to use rigid bodies
00:03 - in your games this video is for you
00:05 - recently I've been seeing a lot of
00:07 - confusion among new users who are
00:09 - confused about how physics works in
00:11 - Godot this video will show you how rigid
00:13 - bodies work some of their most commonly
00:15 - used properties and how to properly work
00:17 - with them in code while the examples in
00:19 - this video are in 2d the same lessons
00:21 - apply to using rigid bodies in 3d as
00:24 - well
00:25 - Godot has three physics body types rigid
00:29 - static and kinematic and rigid body is
00:32 - the one that provides simulated physics
00:36 - and what this means is that you don't
00:38 - control a rigidbody 2d directly instead
00:41 - you apply forces to it things like
00:43 - gravity impulses things like that and
00:46 - Godot is built in physics engine will
00:48 - calculate the resulting movement and
00:51 - figure out collisions bouncing whether
00:53 - if something starts spinning that kind
00:55 - of thing so we jump into Godot when you
00:57 - add a rigidbody 2d you'll see a lot of
01:00 - properties show up over here in the
01:01 - inspector and this is where you can set
01:04 - things like the mass of the body the
01:07 - friction the bounciness if you want it
01:10 - to respond to gravity or not a lot of
01:15 - properties can be set directly right
01:17 - here in the inspector now the body is
01:20 - also affected by in the project settings
01:22 - there is a physics 2d section where you
01:26 - can have your global gravity and
01:29 - friction settings and all rigid bodies
01:32 - will be affected by those unless you set
01:36 - them to ignore them now one of the
01:39 - benefits of using a rigidbody is that a
01:41 - lot of behavior can be gotten for free
01:43 - without having to write any code for
01:47 - example let's look at making a
01:49 - rudimentary Angry Birds style game where
01:52 - you have falling blocks and you throw a
01:54 - projectile to try and knock them down
01:56 - you only need to create rigidbody 2d s
01:59 - for the blocks and the projectile and
02:01 - set their properties the stacking the
02:04 - following the bouncing all that stuff
02:05 - will automatically be handled by the
02:06 - physics engine so for the blocks we're
02:09 - going to use I've created a new scene
02:11 - here and the block is a rigid
02:13 - badi 2d and it has two children as
02:15 - sprite so we can give it a texture and a
02:18 - collision shape 2d and of course all
02:21 - collision objects have to have a
02:23 - collision shape or they won't be able to
02:26 - collide with anything and the for the
02:29 - textures that I'm using I'm using an art
02:31 - pack from Kenney that is for physics and
02:35 - has lots of different textures and types
02:37 - of blocks and I'll link to that below if
02:40 - you want to grab that too but you can
02:41 - use any other textures that you want to
02:44 - use for this and then I've added a
02:46 - rectangular collision shape on top of it
02:49 - to outline it and if you haven't watched
02:54 - one of my videos before I'm gonna
02:56 - reiterate never ever ever do this with
03:00 - your collision shape things will not act
03:05 - properly if you scale a collision shape
03:08 - you need to always whatever clusion
03:11 - shape you're using is going to have size
03:13 - handles on them and you're going to use
03:15 - those to change the extents or the
03:19 - radius or whatever property of the
03:21 - collision shape to make it the size you
03:22 - want if you wanted your block to be
03:25 - bigger
03:25 - you're not gonna scale the rigidbody if
03:28 - you scale a rigidbody the physics engine
03:31 - will automatically scale it back to one
03:35 - to one size when you hit run and all
03:39 - that will go away if you want a bigger
03:41 - object you scale the sprite make the
03:44 - sprite bigger and then scale the
03:47 - collision and you know size the
03:48 - collision shape to match that so now if
03:51 - you drag this block to somewhere around
03:54 - the middle of your screen
03:56 - and run the scene you will see the block
03:59 - fall downwards now yours might be
04:03 - falling a little bit slower than mine
04:05 - and that's because I've gone over here
04:07 - and set the gravity scale to three this
04:11 - multiplies gravity by three for the
04:12 - block so it falls a little bit faster
04:14 - than the default which you should have
04:16 - set to one so now I've made a new scene
04:19 - and I've created a bunch of static body
04:21 - 2ds he was gonna be my walls and
04:24 - Laure and these are just static body 2ds
04:27 - with a sprite in collision shape just
04:31 - like we've done before and i just
04:33 - grouped these in a group called walls so
04:35 - that I could hide them all like that and
04:37 - then I instanced a bunch of the blocks
04:40 - that we just made five of them to be
04:42 - precise and I've stacked them up so when
04:44 - you hit run you will see that stack of
04:48 - blocks just sort of sitting there and
04:50 - now we need our projectile the
04:52 - projectile is one more rigidbody2d with
04:55 - this bright and a collision shape at
04:57 - this time I've used a round texture so
05:00 - that it'll look like a ball and we're
05:03 - going to throw that at the blocks to
05:06 - knock them over for a rigid body to move
05:08 - it needs to have some sort of velocity
05:11 - and you can give a body an initial
05:12 - velocity right here in the inspector
05:14 - under linear there's velocity so we're
05:17 - going to set that to 500 comma zero so
05:21 - it's going to be moving to the right and
05:24 - now if you hit play you will see the
05:29 - ball flies to the right and when it hits
05:30 - the box they come tumbling down you can
05:34 - also play around with the balls friction
05:37 - and bounce properties I like a bounce of
05:39 - around 0.5 makes the ball not just come
05:43 - to a complete stop when it hits the wall
05:45 - but bounce off a little bit
05:46 - and friction will determine how slippery
05:49 - it is on contact with other objects now
05:53 - for the next part let's set the velocity
05:54 - back to zero zero and let's say we want
05:58 - to be able to toss the ball at the
06:01 - blocks in code you should never set a
06:04 - rigid bodies velocity or position
06:05 - manually these objects are simulating
06:09 - real-world physics and in the real world
06:11 - objects can't instantly jump from place
06:13 - to place or go from a standstill to a
06:15 - high speed in zero time and if you try
06:19 - and do so in code the physics engine is
06:20 - going to resist you and you can get
06:23 - unexpected results so instead we have to
06:26 - apply forces which can create an
06:27 - acceleration in a certain direction
06:30 - aka Newton's second law to add a force
06:33 - to a rigid body you've got two functions
06:35 - to choose from add force
06:38 - apply impulse add force is like adding a
06:41 - continuous force to the body if you
06:44 - think about a rocket when it's when the
06:47 - rocket is firing it's steadily pushing
06:49 - it faster and faster that's an added
06:51 - force and also note that this adds to
06:55 - any existing forces that are on it so
06:57 - the force will continue to be applied
06:59 - until it's removed apply impulse is more
07:02 - like an instantaneous kick sort of like
07:05 - hitting a baseball with a baseball bat
07:06 - so we're gonna use apply impulse to kick
07:09 - the ball when we click the mouse drag it
07:12 - in a certain direction and release it's
07:14 - gonna kick it in the direction that we
07:17 - dragged away from to capture the mouse
07:21 - click I've gone into the project
07:23 - settings under input map and added a new
07:26 - action called click and then I click the
07:29 - plus here and added the left mouse
07:31 - button
07:32 - so this click event will fire whenever I
07:35 - use the left mouse button then we're
07:38 - gonna add a script to the sprite or to
07:40 - the ball here's that script so we have
07:44 - two variables one dragging is going to
07:46 - keep track of whether we are currently
07:48 - in the drag state or not whether we're
07:50 - holding the mouse down and and dragging
07:52 - or we've let go and drag start is going
07:55 - to be used to store the mouse position
07:58 - when we click so we know where we
07:59 - started and then we have the input
08:02 - function here checking for the press or
08:04 - release action on click and if we click
08:08 - it we're going to set drag in to true
08:10 - and capture the mouse position and when
08:14 - we let go we're going to set dragging to
08:16 - false and capture the end point the
08:20 - location where I let go and then by
08:23 - subtracting and from start we get the
08:25 - vector pointing from end to start so
08:28 - we're going to push back in the
08:30 - direction like we pulled back and let go
08:31 - and then we're gonna apply an impulse
08:34 - and apply impulse takes two parameters
08:36 - the first one is an offset how far off
08:39 - from the center of the body do you want
08:41 - this impulse applied and so we're going
08:43 - to have that be zero and then we're
08:47 - going to use our direction vector as the
08:48 - force that we're going to
08:50 - with and I'm multiplying by five here
08:53 - just to scale it up a bit it's just an
08:55 - arbitrary number I decided to use for
08:57 - this demonstration now when we play the
09:00 - scene
09:03 - there's our ball now if I click and I
09:06 - drag when I let go the ball will go
09:09 - flying and if I click and drag a longer
09:13 - distance it's gonna fly faster and so on
09:18 - now if you try adding an offset to the
09:20 - impulse say we set this to 40 comma zero
09:24 - you're gonna give a big spin to the ball
09:27 - when you launch it which is gonna make
09:30 - it you see how it kind of kicks away the
09:35 - blocks when it hits them and so you can
09:37 - just play around with a very small
09:39 - amount of code we've got a lot of
09:40 - functionality happening what about when
09:44 - you want a little bit more control
09:46 - direct control over rigidbody2d well for
09:50 - this other scene that I've created we're
09:52 - gonna talk about making the classic
09:54 - asteroids style game so I have a ship
09:57 - here and it needs to rotate when I press
10:00 - the left and right arrow keys and needs
10:02 - to move forward when I press the up
10:04 - arrow so I've made my rigidbody ship and
10:09 - the sprite and the collision shape one
10:13 - thing to note if you're using my art the
10:16 - image comes pointing upwards and in
10:21 - Godot three zero degrees means pointing
10:24 - along the x axis to the right so if we
10:27 - want the rotation of the ship to match
10:29 - the rotation of the body you need to go
10:31 - into the sprite and add a 90 degree
10:33 - rotation to it so let's talk about
10:37 - control so by default the physics
10:42 - settings have some damping in them in
10:45 - the project settings which will reduce a
10:47 - body's velocity and it's spin in space
10:51 - there's no friction so you know
10:53 - realistic space game you wouldn't want
10:55 - any damping at all but for asteroids we
10:57 - want the ship to stop rotating pretty
11:00 - quickly when we let go of the side arrow
11:03 - keys and we
11:04 - so want it to slow down a little bit
11:06 - when we let go of the thrust so what
11:10 - I've done here is I've gone in and
11:12 - changed the linear damp to 0.5 which is
11:16 - a little bit bigger than the default
11:18 - which is 0.1 and I've set the angular
11:21 - damp to 5 which is much higher than the
11:24 - default and it's going to make the
11:26 - rotation stop pretty quickly when we let
11:28 - go of the arrow key here's the script
11:32 - for our ship feel free to pause this if
11:34 - you want to take a look at it for a
11:37 - minute before I scroll down we have two
11:40 - important setting variables here the
11:43 - engine thrust which is going to be the
11:45 - power of the engine when you press the
11:47 - up arrow and then the spin thrust which
11:49 - is how quickly it you know how fast it
11:51 - rotates when we press the side arrow
11:52 - keys thrust is going to be the actual
11:57 - engine thrust it's going to be 0 when
12:00 - it's not on and it's going to be you
12:02 - know this this a vector with this
12:05 - magnitude when it is on the rotation
12:08 - direction is going to be tracking
12:10 - whether we're rotating to the left or
12:12 - the right and then we're going to
12:13 - capture in the ready the screen size
12:16 - we're not going to use that yet but
12:18 - that's something we're going to use a
12:18 - little bit later so I went ahead and put
12:20 - it in here then I have a function here
12:23 - to get the input we check for the up
12:27 - arrow and if it is pressed we're going
12:29 - to set the thrust and otherwise we'll
12:32 - set the thrust to 0 and then we capture
12:35 - the right and left and add or subtract
12:38 - from directions so that we get a 1 a 0
12:40 - or a negative 1 for direction of
12:43 - rotation and we call that input function
12:46 - input function every frame in our
12:48 - process function and then here I have
12:51 - the physics process and we're going to
12:54 - set the applied force to the rigidbody
12:57 - to that thrust rotated by whatever
13:02 - direction our ship is rotated in and
13:05 - then we're going to set the applied
13:07 - torque applied torque applies a
13:09 - rotational velocity or sorry a
13:12 - rotational acceleration to the body and
13:15 - so we take our rotation direction
13:17 - and multiplied by this been thrust now
13:21 - when you go over to the inspector you
13:23 - want to set those values I have engine
13:25 - thrust set to 500 and I have spin thrust
13:29 - set to 25,000 in Godot units torque
13:34 - winds up having some pretty large
13:37 - numbers but go ahead and set those and
13:39 - you can see how it will work if we hit
13:41 - run now I can rotate left and right and
13:49 - I can press forward and I get some good
13:53 - asteroids style flying around the screen
13:57 - now here's where people start getting
14:00 - into trouble if you remember the classic
14:02 - asteroids game the way that these ship
14:05 - flies is when it goes off the edge of
14:08 - the screen it comes in on the other side
14:10 - giving us a wraparound effect on the
14:14 - screen it also has a hyperspace function
14:17 - where when you press the hyperspace
14:18 - button the ship teleports to another
14:21 - location and those are basically the
14:24 - same thing when you go off one side
14:25 - you're teleporting to the other side and
14:28 - we talked about how about you know a
14:30 - little earlier how you can't change a
14:32 - rigid bodies position directly without
14:36 - breaking the physics engine and so this
14:39 - is where people run into a lot of
14:40 - trouble when they're trying to do
14:41 - customized things with rigid bodies a
14:43 - really common mistake I see people make
14:46 - is trying to do something like this so
14:48 - we've added some ifs to the physics
14:50 - process saying that if we you know reach
14:52 - if we pass one screen edge we teleport
14:55 - over to the opposite screen edge and
14:57 - update the nodes position remember the
15:00 - position is a node 2d property has
15:02 - nothing to do with physics and so what's
15:05 - gonna happen when we run this is
15:08 - everything looks fine right now until we
15:12 - hit the edge and then we become stuck
15:16 - I'm holding the I'm holding the thrust
15:19 - button down and we are not moving and
15:23 - depending on how we do this we might
15:26 - suddenly teleport off but what happens
15:29 - is the physics engine is trying to
15:31 - move the body continuously but our
15:35 - script is trying to teleport it and
15:37 - those two are fighting each other and
15:38 - it's just not coming out good at all so
15:43 - don't ever do this now I think part of
15:46 - the problem here comes from people
15:49 - assuming that physics process means this
15:52 - is where you do physics stuff but what
15:55 - physics process means is that this Delta
15:58 - and this function is called in sync with
16:03 - the physics engine with the physics
16:06 - frames but that doesn't mean that it's
16:09 - safe to do things like change the
16:11 - physics body's position inside it and if
16:15 - you look at the docs for rigid body the
16:17 - answers are all there if you scroll down
16:20 - to the description you will see right
16:24 - here this note if you need to directly
16:29 - affect the body state use integrate
16:31 - forces which allows you to directly
16:33 - access the physics state so integrate
16:36 - forces and if we go look at the
16:37 - description of that allows you to read
16:41 - and very important here safely modify
16:44 - the simulation state of the object use
16:46 - this instead of physics process if you
16:49 - need to directly change the body's
16:51 - position or other physics properties so
16:54 - that's what we need to do we need to use
16:56 - this integrate forces callback instead
16:59 - and the integrate forces callback has
17:03 - one parameter it passes U which is the
17:05 - physics 2d direct body state which is an
17:09 - object that contains a whole bunch of
17:13 - information about the current state of
17:17 - the body whether it's colliding how it's
17:20 - moving what its gravity is experiencing
17:23 - is what its applied forces are
17:27 - everything like that and what we're
17:29 - really concerned with for our purposes
17:31 - here is its location which is contained
17:34 - in its transform so we have set
17:37 - transform here and we have get transform
17:40 - here and that's where we can find out
17:43 - what the current position
17:45 - rotation of our body is and set those
17:48 - parameters as well so here's our updated
17:53 - script I'm getting rid of physics
17:55 - process and I'm putting these applied
17:59 - force and applied torque statements in
18:02 - to integrate forces and then I'm adding
18:05 - the following code to do the teleporting
18:07 - so we get the current transform stored
18:11 - in this X form variable and the position
18:16 - of the body is encoded in the origin of
18:19 - the transform and so the X is what we
18:24 - check to teleport to the left and right
18:27 - and the Y is what we check to teleport
18:28 - to the upper and lower edges of the
18:32 - screen then we take that new transform
18:35 - that we've modified and we set it back
18:38 - to the state and now we should have very
18:45 - smooth happy teleporting that does not
18:50 - confuse the physics engine and doesn't
18:54 - conflict with any of the forces that are
18:57 - being applied you see I still continue
18:59 - to move in us in the same direction
19:01 - after I'm teleporting my rotation isn't
19:04 - affected and we're no longer getting
19:07 - stuck on the edges of the screen so if
19:12 - you're going to be working with
19:13 - rigidbody 2d integrate forces is your
19:16 - friend learn how to use it get get
19:19 - familiar with it experiment with it it's
19:21 - gonna make your life easier and one
19:24 - other thing I'll comment on which is
19:26 - that people get confused about is the
19:30 - rigidbody also has a property called
19:33 - custom integrator custom integrator
19:38 - let's use override the physics engine
19:40 - entirely and do and figure out the
19:43 - forces on the body yourself now if you
19:47 - do enable custom integrator you set this
19:50 - to true then you will write that code in
19:53 - the integrate forces function but that's
19:56 - not to imply that the integrate forces
19:57 - function
19:58 - only for custom integration known as the
20:01 - previous project we worked on I did not
20:03 - ever touch the custom integrator I'm
20:05 - perfectly happy with the built in physic
20:07 - engine doing what I wanted to do I'm
20:09 - using the integrate forces so that I can
20:11 - access that physics state so these two
20:14 - can work together but they are not
20:17 - integrated forces does not require you
20:19 - to be using a custom integrator a lot of
20:22 - people get confused about that and maybe
20:23 - I'll maybe I'll do a PR to this
20:27 - documentation to sort of try and make
20:29 - that a little clearer all right hope
20:32 - this was helpful to you in your projects
20:35 - where you're trying to use rigidbody2d
20:36 - please let me know in the comments below
20:38 - if you have any questions and thanks for
20:41 - watching
20:49 - you