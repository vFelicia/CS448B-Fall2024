00:00 - welcome back to part five of the
00:02 - top-down tank battle tutorial in good√∂
00:04 - 3.0 this time we're gonna make the enemy
00:08 - tanks shoot and we're also going to
00:10 - improve the enemy tank movement a little
00:13 - bit all right let's get started so to
00:16 - start we have a couple things to clean
00:18 - up on the enemy tanks one thing that I
00:21 - forgot about last time was you know say
00:24 - this tank here I have the detect radius
00:27 - set to 500 but when I run the scene it's
00:30 - still a very small circle and the reason
00:33 - for that is our enemy tank go over to
00:36 - enemy tank scene is usually using a
00:38 - circle collision shape for the detect
00:41 - radius and then the code is setting the
00:45 - radius but the problem is because we
00:48 - created that shape in the scene and then
00:51 - instanced multiple copies of that scene
00:53 - they're using the same shared collision
00:57 - shape so every enemy tank will have the
01:00 - same exact collision shape and if you
01:03 - change the radius on one it changes it
01:05 - on all of them
01:06 - so instead what we're gonna do here is
01:08 - I'm going to set this to bet to null I'm
01:11 - going to clear out the shape and leave
01:13 - the shape undefined
01:14 - and then in the script what we're going
01:17 - to do is in the ready we're going to
01:20 - make a new circle shape
01:24 - when we initialized the tank so then we
01:28 - set our detect radius collision shapes
01:31 - shape equal to the circle and then we
01:34 - set the shape radius like we did there
01:36 - and that way we will have what we want
01:40 - which is a big circle for that guy and a
01:43 - smaller circle for that guy whatever we
01:46 - set so now I've gone ahead and made an
01:49 - enemy bullet seen extending the base
01:51 - bullet seen just like we did with the
01:53 - player and I've chosen a sprite for it
01:56 - and gave in giving it a collision shape
01:57 - and we're gonna use that to make the
02:00 - enemy tanks fire so we need to add that
02:03 - to the enemy tanks bullet parameter and
02:07 - then we'll jump into the script so what
02:11 - we want is the enemy tank to fire but
02:13 - only when it is pointing at least in the
02:18 - general direction of the player I don't
02:19 - want the tank firing you know in the
02:22 - opposite direction from where the player
02:23 - is so we want to know if the angle
02:25 - between the enemy tanks turret and the
02:29 - player's position is less than a certain
02:33 - number of degrees and we can adjust that
02:36 - to give the tank more or less accuracy
02:38 - so in our process function we already
02:41 - have a unit vector pointing towards the
02:43 - target and we have a unit vector of our
02:45 - current direction of our turret and so
02:49 - to find the angle between them we can
02:51 - just use the dot product so if target
02:57 - Direction dot current direction and so
03:04 - that will give us a value and if you're
03:05 - not familiar with dot product what I
03:07 - recommend you do is go over to the Godot
03:10 - official documentation under the
03:13 - tutorials math section there's a
03:15 - document on vector math and if you go
03:19 - down to the dot product section it tells
03:20 - you a little bit about what the dot
03:21 - product is and for our purposes what we
03:24 - need to know is that when you have two
03:26 - vectors and you take their dot product
03:28 - if the dot product comes out to be zero
03:30 - then they are exactly 90 degrees apart
03:33 - if the number is less than zero then
03:36 - it's going to be greater than 90 degrees
03:37 - and if the number is greater than zero
03:39 - then it's less than 90 degrees and
03:41 - because their unit vectors then that
03:45 - value is going to be between zero or I'm
03:48 - sorry between one if they're pointing
03:51 - the exact same direction and negative
03:52 - one if they're pointing you know exactly
03:54 - in the opposite direction so we want a
03:56 - number that is close to one and that
04:01 - will mean what that we're nearly
04:03 - pointing in the same direction so I'm
04:06 - gonna try this and we're gonna we can
04:08 - experiment I'm going to try this with
04:09 - zero point nine and see how that works
04:12 - and then we can adjust it if we want to
04:14 - make it different and we'll make it
04:16 - probably make it a parameter but I
04:18 - always want to try it out then we're
04:20 - going to call our shoot function which
04:21 - we argue to defined in the tank script
04:24 - right and that's going to emit a signal
04:27 - with our bullet so just like we did with
04:29 - the player we just need to connect that
04:31 - signal of our enemy tank to the function
04:35 - in main to handle the bullet so we go to
04:38 - our enemy tank and we connect its shoot
04:41 - function and we're going to connect it
04:43 - and map to tank shoot is what we named
04:46 - it not enemy tanks shoot because we're
04:48 - using the same function for all of them
04:52 - and I'm going to do the same thing with
04:53 - the second enemy tank
05:01 - so let's try it out and see if our
05:03 - enemies are shooting at us go over here
05:06 - and get inside the radius yeah there we
05:11 - go
05:11 - and so see when the turret is pointing
05:15 - in the general direction of my player it
05:18 - fires but if I'm far away then it
05:23 - doesn't okay
05:26 - so that's pretty good now the next thing
05:30 - I wanted to do something about was that
05:32 - that you just saw there when we get in
05:34 - front of the enemy tank you know it kind
05:38 - of pushes the player out of the way
05:41 - which is a little bit ugly because if
05:44 - you're at an angle or something you get
05:45 - that snapping right so instead let's
05:48 - make our enemy tanks not quite so dumb
05:51 - and if they see something in front of
05:53 - them they are going to hit the brakes
05:56 - and you know shoot at it keep shooting
06:00 - at it but they're gonna hit the brakes
06:00 - and then if nothing's in front of them
06:02 - they'll resume movement so we're gonna
06:05 - do that by adding a ray cast to the
06:09 - enemy tank so I'm going to add a ray
06:11 - cast to D and I'm gonna call this look
06:17 - ahead and I want this to be pointing in
06:21 - front of the player out in front of it
06:24 - so I'm gonna enable the raycast very
06:27 - important a lot of people forget to do
06:28 - this when they first add a ray cast to
06:31 - denote enable is off by default so if
06:34 - you're wondering why your ray cast isn't
06:35 - working that's probably why the cast too
06:40 - we want to set it to look ahead of the
06:42 - player so I'm gonna try let's say 100
06:46 - let's say 100 pixels so there we see
06:52 - I'll zoom in here and there there we see
06:54 - our ray casting ahead so if this
06:56 - contacts something that's how we're
06:58 - gonna know that we want to slam on the
07:01 - brakes now the thing is this also means
07:05 - I want to be able to adjust my speed I
07:06 - want it to slow down and speed up so
07:09 - instead of this constant value that
07:13 - we've set here for speed
07:14 - or it always moves the exact same speed
07:16 - in the tank source script I'm gonna
07:19 - change this too and call this max speed
07:23 - and then we will adjust that with a
07:27 - local speed variable that can change
07:29 - over time as we're accelerating or
07:31 - decelerating so now if you save that
07:33 - don't forget to go back over to your
07:35 - various tanks and set their properties
07:39 - again because we've changed the name of
07:41 - the property it no longer has the value
07:44 - in there now over on the player script
07:46 - we need to change this we're just gonna
07:50 - stick to max speed here we'll worry
07:53 - about player acceleration and
07:55 - deceleration maybe later but that should
07:58 - be all we need to do there now on the
08:00 - enemy tank we're gonna add a local
08:03 - variable here called speed and that's
08:09 - gonna be whatever a current speed is and
08:11 - in the process function we're sorry in
08:14 - the control function when we're this is
08:18 - where we're detecting and moving along
08:19 - the path we're going to check the look
08:22 - ahead
08:22 - so if look-ahead is colliding then that
08:27 - means that something's in front of us so
08:30 - we need to take our speed and we want to
08:33 - adjust it down to zero but I don't want
08:35 - to just set it to zero because then it
08:37 - would look like it stopped instantly and
08:39 - starts instantly when it starts going
08:41 - again so instead we're gonna use a
08:43 - linear interpolation or lerp we're going
08:47 - to take whatever the current value of
08:48 - speed is we're gonna ramp it down to
08:51 - zero and we're gonna try zero point one
08:54 - and see how we like how that looks now
08:58 - if it's not colliding with something
09:01 - then we want to do the reverse and we
09:03 - want to take our speed and we want to
09:05 - ramp it back up to max speed and we can
09:12 - use the same factor so now the speed
09:16 - should adjust when something is in front
09:18 - of it so let's try it out
09:20 - get down here in front of the tank and
09:24 - it should stop when it sees the raycast
09:27 - hit and it doesn't why is that it's not
09:31 - detecting the player anyway tank let's
09:34 - see ah know what it is the collision
09:37 - mask on the raycast
09:40 - is only seeing the environment that
09:43 - means it doesn't detect the player or
09:44 - other enemies and that's actually what
09:46 - we want so we're going to set that and
09:50 - that should do it so let's go over here
09:52 - and try that one more time
09:54 - and now if I'm in front of the enemy
09:58 - tank it should stop moving right as I
10:03 - back up and free up some space it can
10:05 - move again if I get out of its way it
10:08 - starts going and that's pretty good but
10:11 - the problem is gonna be when we have a
10:15 - situation at a corner let me get ahead
10:19 - of the enemy tank here and you know it's
10:24 - going to see it doesn't ever see me
10:27 - because the raycast doesn't hit it so we
10:30 - can get a better result if we have
10:33 - instead to look ahead raycast
10:40 - and what i'm gonna do is i just
10:42 - duplicated it and then we're gonna take
10:44 - one of them and offset them i'll set it
10:47 - up and I'll set the other one down so
10:50 - we're gonna take the transform we're
10:52 - gonna give it about 30 pixels in the y
10:56 - direction and the other one we will move
11:00 - about minus 30 in the other direction so
11:06 - now those two both stick out ahead and
11:08 - they're gonna detect those things that
11:10 - are you know just right on the edge that
11:13 - it's going to run into on the corners
11:14 - and that just means we need to in our
11:17 - script adjust this so that it checks
11:20 - both so if look-ahead
11:23 - 1 is colliding
11:25 - or look ahead to its colliding and
11:32 - that's just gonna make it look a little
11:35 - better especially if we're down for
11:38 - example over here where the curvy area
11:42 - is where the tanks about to make some
11:43 - turns then it rotates you see that first
11:50 - one is touching the player when if I was
11:53 - about right here the single ray cast
11:56 - wouldn't be seeing me right now she'd be
11:58 - going right past so this gives it a
12:00 - little bit more field of view you can do
12:04 - this with areas too you could have a
12:06 - triangular area out in front of the
12:09 - player or sorry in front of the tank
12:10 - that detects whether something's there
12:14 - but this is working pretty well I think
12:18 - one thing I might do is so it comes to a
12:21 - stop and it starts going again I might
12:26 - change the ramp up back to speed a
12:32 - little bit lower so it takes a little
12:36 - just a slightly longer time to get
12:40 - started again
12:41 - so it doesn't look like it has as much
12:43 - acceleration so it can slam on the
12:45 - brakes but it can't accelerate back up
12:49 - to speed as fast that looks better and
12:53 - then if I'm going backwards you know
12:56 - it's trying to keep pace with me yeah I
13:04 - like that
13:05 - all right I think that'll do it for this
13:08 - installment in the next video we're
13:11 - gonna need to make these bullets start
13:13 - doing some damage now that they are
13:15 - hitting things we will connect up the
13:18 - health of the player and the enemy and
13:21 - make them take damage thanks for
13:25 - watching please leave your comments and
13:27 - questions below and I'll see you in the
13:30 - next video
13:38 - you