00:00 - welcome back to game development with
00:01 - Pegeen this is part 6 of our tile based
00:04 - game and in this video we will be
00:07 - implementing rotation for our player
00:09 - sprite and dealing with several problems
00:13 - that that's going to cause they're gonna
00:16 - make it things work a little differently
00:18 - than they have before ok so we have our
00:25 - player sprite which is this little blue
00:28 - character with a gun that we're gonna we
00:31 - want to make this sprite have free
00:34 - rotation so I want to be able to turn
00:36 - and point in any direction 360 degrees
00:40 - around so that means we need to start
00:45 - talking about how we're going to control
00:46 - that and how we're going to deal with
00:49 - the graphics and collisions and
00:50 - everything like that so I'm first thing
00:53 - I'm going to do is I'm going to go over
00:55 - here to my settings and I'm going to add
00:59 - a new constant for the player it's gonna
01:04 - be his rotation speed this is going to
01:08 - be in remember everything is per second
01:12 - because we're using the delta time on
01:14 - the frames so everything would be
01:16 - multiplied by which is like we we did
01:19 - this movement speed so this is gonna be
01:21 - in degrees per second so it's going to
01:23 - take him a little more than a second to
01:26 - go all the way around and you'll see how
01:28 - it works when we start and this will
01:30 - give you an easy way to adjust how fast
01:32 - or slow you want the player to be able
01:34 - to turn and now we can go over to our
01:39 - sprite here and the settings we need to
01:42 - add to this we needed a variable that's
01:45 - going to track how far we've rotated
01:47 - okay and we're starting out pointing to
01:50 - the right so that's going to be a
01:52 - rotation of 0 degrees we're pointing to
01:55 - the right which means we're pointing
01:57 - along the positive x-axis and then we're
02:03 - going to go down here to our key to our
02:08 - key settings and the rotation speed is
02:11 - going to work the same way as the
02:12 - velocity as long as
02:14 - we have the key Downey moves and when we
02:16 - let go he stops really the same thing
02:18 - with rotation so our rotation speed will
02:22 - normally be zero we're not rotating okay
02:26 - but we are going to add that left and
02:33 - right or a and B are going to rotate us
02:36 - now not make us move so these are going
02:42 - to change left and right are going to
02:44 - change to setting our rotation speed
02:48 - equal to the player's rotation speeds so
02:51 - let's get rid of that these are going to
02:57 - be negative and positive player rotation
02:59 - speed although I think I need to swap
03:02 - those turning to the left is going to
03:04 - turn us in the positive direction
03:07 - pressing right is going to rotate us in
03:09 - the negative direction and now up the up
03:14 - arrow is going to move us forward so
03:17 - that means it's going to change our
03:19 - velocity and we wanted to we want this
03:21 - velocity to now be pointing in whatever
03:25 - direction we are facing right which
03:28 - means there's a couple of ways we could
03:31 - do this you could figure out what angle
03:33 - you're planning at based on the how much
03:35 - we've rotated and then you know multiply
03:40 - that the cosine and the sine times the
03:43 - X&Y right it starts to get tricky with
03:45 - trigonometry but vectors make this
03:48 - really easy what we want to do is we
03:51 - want the player to move forward right so
03:54 - at whatever the player speed is so if we
03:59 - did that right that means move at the
04:01 - player speed in the x-direction and zero
04:06 - in the Y direction that would mean move
04:07 - at the player speed directly to the
04:10 - right all right the way we're facing
04:11 - normally or when we start and we just
04:15 - want to take that vector and rotate it
04:19 - by whatever our rotation is and we're
04:22 - putting the negative here because normal
04:32 - and we're putting the negative here
04:34 - because we're basically rotating this
04:38 - vector in the opposite direction from
04:41 - the direction that we are pointing so
04:43 - that it will match our rotation that we
04:47 - did with the keys you'll see what I mean
04:49 - when we when we do it but we're gonna do
04:51 - that with the up and down and both of
04:52 - these are going to do the same thing so
04:56 - I'm going to just duplicate that oops
05:01 - shift that down delete that and when we
05:05 - move backwards we can also make it we
05:07 - can just say that's negative right
05:09 - opposite direction and I'm also going to
05:12 - divide it by two so we move at half the
05:14 - speed when we move backwards now we're
05:18 - only moving in one direction right the
05:20 - direction we're pointing it so we don't
05:21 - need to solve the diagonal problem
05:25 - anymore we're not going to be moving in
05:26 - a diagonal direction versus a horizontal
05:30 - and vertical we're moving in a rotated
05:33 - speed at any angle okay so that is going
05:38 - to do that so now our velocity is
05:43 - rotated to point in the direction we're
05:45 - facing now we just need to go down here
05:49 - to our update and make sure that just
05:51 - like we update our position by whatever
05:55 - our velocity is we also need to update
05:58 - our rotation by whatever our rotation
06:00 - speed is so our rotation now we're going
06:06 - to take the rotation and we're going to
06:08 - add the rotation speed times the Delta
06:16 - time and I'm going to take the remainder
06:21 - use the remainder function by 360 that
06:25 - way when we've if we rotate 361 degrees
06:28 - that just changes this back to one so or
06:30 - we don't have to have our angle keep
06:33 - getting bigger and bigger and bigger
06:35 - right it's only going to be between zero
06:37 - and
06:37 - you know 360 so that's going to change
06:42 - our rotation so now our rotation
06:43 - variable changes that changes our
06:46 - velocity to rotate at that angle now if
06:50 - we were to run this obviously we have a
06:53 - problem because the graphics aren't
06:54 - going to change but you can see that
06:57 - when I rotate you know I'm I am able to
07:02 - rotate and if I'm holding the the
07:05 - turning and probably the left arrow down
07:07 - so I'm turning and rotating around but
07:11 - we need to do that we need to rotate the
07:13 - image to match so that means we need to
07:17 - take we need to take another step here
07:21 - and after we rotate we need to take our
07:24 - image and we need to transform it and
07:30 - we're gonna rotate the original player
07:36 - image by whatever our rotation is right
07:41 - now that of course isn't quite enough
07:45 - because now our rotation looks like this
07:47 - right every time I turn because my
07:51 - rectangle isn't updating to put me in
07:55 - the right place so I can run around but
07:58 - it's obviously not good right so we need
08:02 - to rotate around
08:03 - we need our player to rotate around its
08:05 - center we need the sprite to rotate
08:07 - around its center right now it's
08:09 - rotating around the corner and so that
08:13 - means that the center is probably the
08:16 - location that we want to track as well
08:19 - we want the center to be where the
08:24 - position our position is tracked from so
08:27 - that position is what changes when we
08:29 - move around that's going to be the
08:31 - center of the sprite and that's going to
08:33 - be a lot easier to calculate things than
08:35 - then using the corner of the rectangle
08:37 - so that means we have to change a few
08:40 - more things
08:42 - so one thing we need to do is we need to
08:45 - say that here when we move our rectangle
08:51 - it's the center that uses that position
08:57 - not the corner but it also means that
09:01 - when we rotate our image remember that
09:04 - image is going to change in proportions
09:06 - so it's rectangle is going to change so
09:10 - whenever we rotate in order to keep the
09:13 - sprite centered we have to calculate
09:14 - what our new rectangle is all right we
09:19 - get the new rectangle and we put that to
09:23 - the center of that rectangle at our same
09:27 - position that our previous rectangle
09:29 - with that and what that allows us to do
09:33 - now is oops I put a dot in there this is
09:39 - supposed to be Center X and Center Y of
09:44 - the rectangle okay so now that looks
09:49 - much better I rotate around my Center I
09:52 - can move forward in whatever direction
09:55 - but now if you notice when I get off of
09:58 - here my camera is still very bouncy and
10:04 - that's because the camera was using the
10:07 - corner of the rectangle we need to
10:09 - update our camera to also use the center
10:11 - we also have some major problems with
10:14 - our wall collisions because our wall
10:16 - collisions we're trying to put the
10:18 - corner of the rectangle against the wall
10:21 - but then we're telling it to calculate
10:24 - its position using the center and so
10:25 - those two things are conflicting and we
10:28 - get all sorts of weirdness with the
10:30 - walls so we can fix the camera really
10:33 - easy if I go over to our camera here and
10:36 - saying when we update we use the center
10:40 - not the corner
10:42 - it's interacts and center Y and that's
10:45 - going to prevent that bouncing problem
10:49 - when we're out in camera land and we
10:52 - rotate say the camera does not move when
10:56 - we turn you know I lose when we move
11:00 - so now let's talk about the walls so we
11:02 - go over here to our wall collision code
11:06 - our wall collision code right now is
11:08 - it's putting the position but it's not
11:13 - putting it in the right place right
11:15 - because we want to put our for example
11:20 - when we hit the when we're moving to the
11:21 - right and we hit the side of a wall
11:24 - moving to the right we want to put
11:26 - ourselves at the left - width / -
11:31 - because we're using the center but we
11:34 - also want to put our right at the right
11:41 - plus the width / - okay
11:44 - and same idea with the height when we're
11:47 - talking about the y-axis okay and then
11:54 - we also need to make sure we put our
11:56 - that here we use the center X or Center
12:02 - Y as that position okay so now you can
12:11 - see I can go up against to the wall and
12:16 - that works but I still have a problem
12:21 - that problem happens when I rotate and
12:33 - to be even more specific that problem
12:35 - happens if I rotate after I've collided
12:39 - with the wall right so let's say I'm
12:42 - going to the I'm moving to the right I
12:45 - hit that wall no problem right but if
12:51 - I'm up against the wall and I rotate and
12:53 - then I try and move like say that then I
12:58 - get a problem right now does anybody can
13:02 - you guess what that is some of you might
13:04 - have already guessed what is causing
13:06 - this problem but the easiest way to see
13:10 - it is to illustrate it by going over
13:13 - here to our game and
13:14 - drawing and drawing our players
13:18 - rectangle on the screen so that we can
13:21 - see what's happening so I'm going to go
13:25 - over here and I'm going to draw after
13:35 - this I'm going to draw a rectangle on
13:41 - the screen in white and I just want to
13:47 - use the players rectangle alright
13:55 - players I can't and the thickness of two
13:58 - so now I have my players rectangle and
14:01 - now you can see what happens to it as I
14:03 - rotate because the proportions of the
14:06 - sprite change so does the size of the
14:09 - rectangle so if I move over against this
14:12 - wall
14:12 - I'm fine until I rotate now the
14:16 - rectangle is colliding with the wall but
14:19 - our collisions check for when we move so
14:21 - as soon as I move it's going to detect a
14:24 - collision now I'm fine and I rotate and
14:29 - I try and move oh but just snap me to
14:31 - the top of the rectangle I remove top of
14:34 - the wall
14:35 - so our problem is that our collision
14:38 - rectangle is tied to our rotation and
14:43 - varies in size and that's going to make
14:46 - it really hard to keep our collisions
14:50 - with the walls working correctly because
14:52 - we don't know how wide and how tall our
14:56 - rectangle is going to be it's going to
14:57 - change and all sorts of crazy stuff is
14:59 - going to happen
15:00 - making us teleport through walls and
15:03 - things we don't want to happen so what
15:06 - we need is we need a rectangle that's
15:09 - not going to move this rectangle we're
15:12 - stuck with it moving it's going to
15:14 - change because the size of the image is
15:15 - going to change but we don't have to use
15:18 - this rectangle as our collision
15:21 - rectangle we can have a different hitbox
15:24 - for collisions than we use for the
15:27 - drawing okay so we're going to need to
15:31 - create another rectangle for our player
15:34 - to use for the collisions and how big we
15:40 - want to make that can well it can sort
15:43 - of vary right we're going to call this
15:46 - the hit rect and I'm going to go ahead
15:49 - and define this here so that we can
15:53 - change it later right so let's say we
15:56 - want to make it 35 by 35 so it's just a
15:59 - rectangle of that size or a square I
16:01 - should say that means we're going to
16:04 - need to import PI games so we don't get
16:06 - an error here autocomplete okay so we've
16:15 - defined that rectangle that our player
16:18 - sprites going to use and now we just
16:21 - make sure that when we go over here and
16:23 - spawn our player we set up that
16:27 - rectangle okay so we're gonna say we're
16:34 - gonna get our regular rectangle and then
16:36 - we're going to say our hit our hip
16:39 - cracked is also is going to be that and
16:45 - then the center of that should be equal
16:48 - to the same right we always want the
16:53 - center of our hit rect to be the same as
16:55 - our image rect but that means now that
17:01 - in our movement what we want to move is
17:06 - our hit rect right so our hit rec center
17:13 - is what we move and to check with the
17:16 - collision
17:20 - all right our hit rect is what we move
17:23 - to check with the collision and that
17:25 - means in our collision code we're also
17:28 - going to use the hit rect
17:34 - okay so this is going to be the getrekt
17:41 - this is going to be the hit rect this is
17:46 - going to be the hit rect and this is
17:51 - going to be the hit right and also we
17:56 - place our hit rect against the wall so
18:02 - they hit rec is what bumps up against
18:04 - the wall when they collide and in our
18:09 - update then after we've moved the hit
18:13 - rec to see if it collides it set the hit
18:15 - rect against the wall we make sure that
18:19 - our regular rect gets set equal to our
18:23 - hit rect
18:25 - okay now here's the problem this
18:28 - function right here
18:30 - sprite collide automatically looks at a
18:33 - sprite and a group of sprites and uses
18:36 - their wrecked parameter you use it's
18:39 - going to use this no matter how many
18:42 - other rectangles we make it's not going
18:45 - to use this right so we need to we need
18:49 - to modify this to tell it to use the hit
18:54 - rect instead and we can do that by just
18:59 - creating a quick little function now I'm
19:04 - gonna put it I'm gonna put it here for
19:07 - now we're actually going to find a home
19:08 - for it later but we're going to make
19:16 - a function called collide hit rekt okay
19:18 - it's just going to take two sprites
19:21 - sprite one is bright too and it's just
19:24 - going to return the collide rectangle
19:30 - right the it's gonna use that with two
19:34 - dot right right so we're just gonna take
19:38 - in this case what we're gonna have it do
19:41 - is the player versus the wall right so
19:44 - every time it tries the collision it's
19:45 - going to compare the players hit rect
19:47 - versus the wall rectangle and send that
19:51 - back instead of just comparing the two
19:56 - rekts if I did this that's exactly what
19:59 - the normal collision does okay so we
20:05 - just go over here and say for these we
20:09 - tell them to use our new function use
20:17 - collide hit rect instead okay so that's
20:21 - going to use that function we just need
20:24 - to make sure that we import that file
20:36 - we just make sure we import that
20:39 - function okay so now let's go ahead and
20:42 - go over here and draw instead of drawing
20:49 - our players rectangle let's just draw
20:58 - our hit rectangle real quick just so
20:59 - that we can see it okay there's our hit
21:02 - rectangle and see when I turn it doesn't
21:06 - move and that hit rectangle is going to
21:09 - hit the wall and it's gonna stay against
21:14 - the wall now it's the camera isn't
21:17 - tracking it so it's not gonna work when
21:19 - we go off but this is just for us to
21:20 - test it right so the hit rect is going
21:23 - to map against the wall just fine just
21:27 - like it used to do when we were a plain
21:30 - square and not a rotating player all
21:34 - right so if I I'm gonna just comment
21:36 - this out and then you're gonna see it's
21:39 - gonna look really nice right I can bump
21:44 - up against walls I can run against them
21:47 - everywhere I go my hit rect is what's
21:52 - determining whether I've collided with a
21:53 - wall or not and because it's a little
21:58 - bit smaller than the sprite we can get
22:00 - close up against a wall too you see how
22:03 - I'm overlapping it just slightly
22:05 - graphically we can adjust that too to
22:09 - get it just the way we want it also
22:10 - because of the way sprites are drawn our
22:13 - player is sometimes underneath the
22:15 - sprite and sometimes on top of it but
22:17 - that's something we'll fix later when we
22:21 - start talking about doing the wall
22:23 - graphics so don't worry about that right
22:24 - now
22:24 - the point is that we have our collisions
22:27 - working again and they are not dependent
22:31 - on how our sprite is rotated in fact
22:36 - they're not dependent on what the sprite
22:38 - looks like at all right they're just
22:41 - controlled by that hitbox and we can
22:43 - customize that hitbox to be whatever we
22:45 - want and it will always remain
22:55 - all right that will do it for this video
22:58 - as always please hit the like button
23:01 - below if you found this video useful and
23:04 - subscribe for the next video because we
23:07 - have a lot more to come thanks and I'll
23:10 - see you next time
23:18 - you