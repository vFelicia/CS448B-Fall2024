00:00 - hi welcome back this is part two of our
00:02 - in-depth pathfinding video series and in
00:04 - this video we're going to talk about how
00:06 - to implement our first search algorithm
00:08 - or path finding algorithm which is the
00:10 - breadth-first search okay so in part one
00:15 - we built this simple structure where we
00:19 - could make our grid of walls that we
00:24 - will be able to walk around on and we
00:26 - can click and draw walls wherever we
00:29 - want since the last video I did add just
00:34 - a quick thing here where if you press
00:38 - the M key it's just gonna print out a
00:41 - list of all your walls it looks like
00:42 - this when I press M over here it's just
00:46 - gonna print a list of all those wall
00:48 - locations and what that allows us to do
00:50 - is copy that print out and paste it
00:54 - right here and quickly make some walls
00:58 - that way when I run my program I am not
01:00 - always starting with an empty map and
01:02 - have to draw the walls every time so if
01:04 - you spend some time drawing a map layout
01:08 - you like you can just quickly save it
01:11 - just a quick and dirty way of doing that
01:14 - okay so we've we've got our map we've
01:16 - got our our grid set up we can find
01:20 - neighbors how do we calculate how to get
01:25 - from one point to another well as I said
01:28 - in the first video we're gonna talk
01:30 - about a few different path finding
01:32 - algorithms but the first one that we're
01:34 - going to talk about is one that just
01:36 - visits every square in the map okay and
01:42 - that is called the breadth-first search
01:46 - algorithm and let's look at how that
01:50 - algorithm works
01:54 - so the breadth-first search is also
01:57 - called DFS and all it does is you have
02:02 - something called the frontier the
02:03 - frontier is a group of tiles an
02:05 - expanding ring of tiles coming out from
02:07 - whatever your start position is and you
02:10 - just loop through over
02:13 - until that frontier is empty and there's
02:15 - only three steps to this algorithm first
02:18 - thing you do is you take the next
02:19 - location now they're out of the frontier
02:21 - you mark it as visited so you keep track
02:24 - of which ones you visited so that you
02:26 - don't ever visit them again and then you
02:28 - expand by taking that location and
02:32 - adding each of its neighbors to the
02:34 - frontier and that's all there is to it
02:38 - so let's look at an example of how that
02:40 - works okay so here we have our simple
02:44 - five by four grid and I've chosen this
02:48 - tile to be the starting position marked
02:51 - it with a star now to begin with the
02:54 - only tile that's in the frontier and I'm
02:57 - gonna mark all the frontier tiles with
02:58 - red all the visited tiles with green
03:00 - right we haven't visited anywhere yet so
03:02 - there's no green tiles you start out
03:05 - with your starting tile in the frontier
03:07 - and that's it so the algorithm says the
03:09 - first thing you do is you take the first
03:12 - tile in the frontier and you mark it
03:15 - visited and then you add its neighbors
03:18 - to the frontier so now the frontier has
03:20 - these four tiles in it and we're done
03:24 - with one loop now we go back to the top
03:27 - is the frontier empty no so take the
03:30 - next one
03:30 - market visit it and add its neighbors
03:32 - and then we're gonna continue doing that
03:36 - around and around slowly adding more and
03:40 - more neighbors to the frontier until we
03:43 - get to a situation like this see number
03:47 - 11 here so when we mark that one visited
03:51 - there's no neighbors it has no neighbors
03:53 - to add to the frontier because these two
03:54 - are already in the frontier and there's
03:57 - nothing over here because we're at the
03:58 - edge of the map so so it just gets
04:02 - marked visited and we move on to number
04:05 - 12 which is gonna do the same thing 13
04:09 - you can see we're slowly filling them
04:12 - all in until we have visited every
04:15 - single square and that's it that's the
04:18 - breadth-first search so let's look at an
04:20 - example of that running so you can see
04:21 - what it looks like in practice so here's
04:23 - a big empty grid and this red tile this
04:27 - is the starting tile so it's the one in
04:30 - the frontier only one in the frontier
04:31 - and when I unpause this you'll see it's
04:36 - just going to expand the ring just like
04:38 - we did in the demonstration until it is
04:42 - visited every tile and what's great
04:44 - about this algorithm is it works just as
04:48 - well when you have walls so if we look
04:51 - at another situation where we have all
04:53 - these walls right when this neighbor
04:55 - when we look at its sorry when we look
04:57 - at this tiles neighbors it only has
04:59 - these three neighbors right because this
05:01 - tile is not going to count
05:03 - so this tile won't get out to the
05:05 - frontier same thing with all the walls
05:07 - so when you run here the ring just goes
05:12 - all the way around the walls until you
05:15 - visit everywhere and that's why this
05:17 - algorithm is sometimes called the
05:18 - flood-fill algorithm if you've ever used
05:20 - a paint program and you use the paint
05:23 - bucket tool you know you click somewhere
05:25 - in a shape and the paint fills in all
05:28 - the empty areas that is exactly how that
05:31 - is implemented in a paint program is
05:33 - using the breadth first search algorithm
05:35 - to do the flood fill ok so let's talk
05:39 - about how we can implement this
05:41 - algorithm in code so the first thing
05:45 - we're going to need is let's look back
05:46 - at the algorithm for a second so we're
05:50 - going to need a frontier and we're going
05:52 - to need a list of visited tiles the list
05:55 - of visited tiles is just going to it so
05:57 - we keep track of which ones we have
05:59 - visited and this frontier is where we're
06:04 - adding and removing the tiles as we look
06:07 - at them right but we need to do them in
06:10 - order the first one that we add to the
06:12 - frontier should be the first one we take
06:14 - out and so we need what's called a queue
06:18 - a queue is a data structure where when
06:22 - you add things you add things at one end
06:24 - and you take them out the other okay so
06:26 - the first thing that gets added is the
06:28 - first thing that comes off just like
06:30 - when you stand in line at the store you
06:32 - get in the back you have to wait for the
06:33 - people ahead of you before you get to
06:35 - leave the line and so we could use a
06:39 - list
06:41 - in Python to do this queue right we
06:43 - could have a list of items and adding to
06:47 - the N is just using the append function
06:49 - of a of a list at the end and when what
06:53 - we want to remove we would need to pop
06:55 - item number 0 now the problem with this
06:58 - is remember lists are indexed right this
07:01 - is position zero position 1 position 2
07:03 - so if you remove the item at position 0
07:07 - you take it out then everything moves
07:11 - and this becomes position 0 this
07:12 - position 1 this position 2 everything
07:15 - gets reindex t' and that is slow lists
07:19 - are not really good at re-indexing
07:21 - quickly that's not what they're for so
07:24 - what if we tried the other way around
07:26 - right what do if we did it in the
07:29 - opposite direction and we said that when
07:33 - we want to remove we just use pop with
07:35 - no arguments right that means take it
07:37 - off the end so pop will be fast it'll
07:39 - just chop the one off the end item would
07:42 - be equal to 1 and 1 is removed out of
07:44 - the list but then when we want to add we
07:47 - need to insert the new item at the front
07:50 - of the list in position 0 which means
07:53 - all of these other ones have to be re
07:55 - indexed again and we have the same
07:57 - problem so this is not going to be the
08:01 - optimal solution for this because you
08:05 - think about we're gonna have a lot of
08:06 - squares to visit we're gonna have a lot
08:08 - of tiles to be added to this frontier
08:11 - all the neighbors every time we look at
08:13 - a tile and removed from the other end
08:15 - and a list isn't going to be very
08:17 - efficient the answer is to use something
08:20 - from the Python collections module the
08:24 - collections module is part of the
08:26 - standard library that comes with Python
08:29 - and has lots of useful objects in there
08:32 - the one we care about is called the deck
08:35 - the double-ended queue and this is a
08:38 - data structure that is set up to very
08:42 - efficiently you can add items to either
08:45 - end and you can remove items from either
08:48 - end you cannot access items that are in
08:51 - the middle you can't look at in index
08:53 - and say what
08:54 - the third item of the list because this
08:56 - isn't a list is a queue and all you care
08:58 - about is the ends that's perfect for our
09:00 - situation so the way we would use that
09:02 - is we can use append to put things on
09:06 - the end and we can use top left which
09:09 - pops things off the left hand side you
09:12 - could totally go the other way around
09:13 - and do pop things off of this side and
09:17 - append left at this end doesn't matter
09:20 - works exactly the same and it's gonna be
09:22 - very fast and efficient for all the
09:25 - piles will be looping through right
09:28 - let's start writing some code so first
09:33 - thing we need to do is let's define our
09:36 - starting position I'm just gonna put it
09:38 - around the middle here so that's going
09:42 - to be the starting tile and then let's
09:47 - hide that let's define breadth-first
09:53 - search okay
09:58 - breadth-first search works you give it
10:00 - some sort of graph and you give it a
10:04 - start position all right so we're just
10:06 - gonna pass in those values and that's
10:09 - all it needs
10:12 - okay and so we're going to make the
10:17 - frontier a one of those double ended
10:23 - queues which we need to import
10:31 - okay so we have the deck we will put the
10:38 - start in it that's the only thing in the
10:41 - frontier when you start and then I'm
10:44 - also going to make a list of visited
10:47 - tiles all right which all it has in it
10:53 - at the beginning is the start it's the
10:55 - only one we visited and now we just need
10:59 - to start that loop all right as long as
11:02 - Len of frontier is greater than zero
11:08 - right so as long as there are things in
11:10 - there we are going to loop through and
11:15 - do the steps of the algorithm all right
11:20 - so the first thing is we'll pick the
11:21 - current current tile that we're looking
11:23 - at is the next one in the frontier all
11:26 - right so we pop the next one off of the
11:28 - queue and that's our current okay now we
11:33 - need to look at the neighbors of current
11:36 - let's call it the next next files so we
11:42 - take the graph and use our find
11:44 - neighbors function we wrote last step
11:46 - and we find all the neighbors of the
11:48 - current tile if the next tile is not
11:53 - Envisat 'add we haven't visited yet and
11:59 - frontier then we're going to add it to
12:01 - the frontier
12:06 - and we're going to append it to the
12:08 - visited tiles okay so we're sort of
12:13 - combining those two steps because it's
12:14 - just a little bit quicker I wrote in
12:17 - twice okay and then so at the end of
12:21 - this we will have visited all of the
12:26 - tiles but how will we how will we know
12:31 - well I'm not gonna write the code here
12:35 - to animate exploring because you know
12:39 - obviously you don't want to do that when
12:40 - you're doing pathfinding in your game so
12:42 - all we want to do is have it walk
12:44 - through and visit all the tiles and so
12:48 - let's just when we're at the end print
12:52 - out the visited list and see if we've
12:54 - visited all of them just to test okay so
12:58 - we run this by executing that so here's
13:03 - our start so if we just say
13:04 - breadth-first search we have gee our
13:09 - graph and start and there we go it lists
13:16 - a whole giant long list of tiles right
13:21 - but this isn't very useful because it
13:24 - doesn't tell us anything about how to
13:26 - get from tile to tile this just visits
13:28 - every single tile and marks them visited
13:32 - and that's it that's not good enough so
13:35 - what we want is to be able to see all
13:40 - this up again here what we want is to be
13:42 - able to see how to get to the start
13:46 - starts gonna be over here so if you're
13:48 - here how do you get there or if you're
13:50 - over here how do you get there what's
13:51 - the path to that point so I'm any other
13:54 - point and we can do that pretty easily
13:57 - by going in here and changing we don't
14:00 - care if or we're not concerned about
14:04 - whether we visited or not we're
14:05 - concerned about when we visit a new tile
14:08 - where we moved to it from okay so I'm
14:14 - gonna make a dictionary call called path
14:17 - the key will be a tile and the value
14:20 - will be what tile we came from right so
14:25 - for example we can say the path just
14:30 - start is not because alright you're
14:34 - already on the start when you're on
14:36 - start so you don't need a path to there
14:37 - but anywhere else when we look if next
14:44 - is not in path then we're gonna path the
14:52 - path for next equals okay and that's
14:59 - gonna say for example that you know if
15:05 - you're on a tile here then this tile
15:08 - should point back to this tile right
15:11 - that's the tile you steps from so an
15:14 - easier way to do this instead of saying
15:16 - that you know 0 1 is connected to 0 0 is
15:20 - to actually put an arrow there it's
15:24 - actually have a direction and the
15:27 - easiest way to do directions is with a
15:29 - direction vector alright so if we said
15:32 - current minus next that's going to be an
15:33 - arrow pointing from the next tile back
15:38 - to the current say path here
15:45 - autocomplete right and so we'll have a
15:49 - direction vector pointing the direction
15:51 - we want to go ok and let's get rid of
15:54 - this print ok now watch what happens
15:57 - when we run this ok we get an error okay
16:04 - and the error no this is hard to read so
16:08 - I'll here the error is unhackable type
16:12 - our problem is we're using a dictionary
16:15 - here right and the key of the dictionary
16:19 - is we want to use the tile we're on and
16:22 - we're using vectors to represent the
16:24 - tile well vectors it
16:27 - turns out cannot be the keys to the
16:32 - Cheniere because they're not hashable
16:35 - kind of annoying I thought about this
16:39 - for a little while there's a couple
16:40 - different ways we could approach this
16:42 - but so when you're doing a dictionary
16:48 - the the key can be any type of object
16:51 - right it can be a it can be a string it
16:56 - could be a number it could be a two-pole
16:59 - it can be a lot of different things but
17:02 - it just happens to be it can be a vector
17:04 - but it can be a pair of numbers like
17:06 - this right and so the easiest thing to
17:09 - do is let's just convert our vector into
17:13 - one of those I'm just going to write a
17:18 - quick little function that does that
17:21 - conversion and it just returns the X and
17:27 - the y of the vector and putting an
17:31 - anterior because when you we are using
17:34 - integers for all of our table locations
17:37 - right it's going to be 1 comma 1 or 5
17:39 - comma 7 but when you use the PI game
17:44 - vector to function it will send them
17:47 - back as real numbers so you'll get one
17:50 - point zero and twelve point zero I'm
17:52 - just going to use the int function to
17:54 - strip away that decimal ok so that means
17:58 - now that whenever we want to whenever we
18:04 - want to put something into this
18:06 - dictionary we're just going to convert
18:08 - it to an integer so we need to do that
18:12 - with this one with this one okay
18:22 - and that will take care of that error
18:27 - okay so now we're getting value so as
18:31 - the frontier creeps around and explores
18:35 - everywhere each tile is going to have a
18:38 - vector pointing up down left or right
18:42 - back to the tile it was on previously
18:44 - the one it was the neighbor of right so
18:47 - like when this one was the current this
18:50 - was these were neighbors whichever ones
18:52 - it added they're gonna point back to it
18:54 - so we have little Direction vectors for
18:57 - each of those and just real quick you
19:00 - can see that if we just print out the
19:02 - path just so you can see what the output
19:06 - is each each tile has a vector and see
19:11 - the vectors are all unit vectors
19:13 - pointing up down left or right okay and
19:16 - so let's visualize that so what we're
19:18 - gonna do is we're gonna return that path
19:20 - so whenever you run the function that's
19:23 - first search you're gonna get back
19:24 - you're gonna get back to the path all
19:28 - right so path equals that so we have our
19:34 - path we have all our vectors we just
19:36 - need to draw them and to draw them I
19:39 - just have here this this code right here
19:42 - which I've just pasted in goes to the
19:45 - icons folder and gets an arrow an image
19:49 - of an arrow pointing to the right and
19:50 - then I just create a list of those
19:52 - arrows four of them rotated in each of
19:55 - the four directions so I have arrows
19:57 - pointing up down left and right just
19:59 - four different images you can import
20:01 - those you know you could load this
20:02 - however you want it but that's how I'm
20:03 - doing it just so that I have four
20:06 - different arrows and I can draw them
20:07 - here and so what we want to do is we
20:12 - want to go through for each node and
20:15 - direction in that path dictionary
20:20 - if there's a direction because remember
20:22 - where we're gonna have none if we're on
20:24 - the starting pile then we're gonna get
20:30 - the X and y of the node and then I want
20:32 - to find the center of the tile so I can
20:34 - Center the arrow image so that just
20:37 - means I need to take the X of the tile x
20:40 - tile size and add tile size / - okay and
20:48 - I'm just going to do the exact same
20:50 - thing for Y and then the image that
20:56 - we're going to use for this tile is the
21:00 - one that's pointing in the direction in
21:06 - the direction that we need we're going
21:09 - to get the rectangle to match with the
21:15 - center at X Y and then we're gonna
21:19 - obliterate all right and if we run that
21:25 - we should see a bunch of arrows so
21:29 - here's our start tile we'll probably
21:31 - need to draw something there too but
21:32 - here's our start tile and you can see
21:34 - from any point you can follow the path
21:37 - of arrows and you will get to the start
21:41 - point now the only other thing we need
21:44 - to do is if I add some walls you see
21:46 - nothing changes because we're not
21:47 - updating anytime we add or remove some
21:50 - walls we need to rerun the search so
21:55 - what I'm going to do here is if there's
21:57 - a click whether we added or removed
21:59 - we're just going to recalculate geez
22:05 - start we're gonna recalculate the
22:07 - breadth-first search that way you can go
22:09 - in here and you can do things like
22:10 - closing off walls and you can see how
22:13 - the arrows change when you do that
22:21 - and go all the way around and if you
22:23 - block off an area well these are not
22:25 - neighbors of anybody anymore so they're
22:27 - never gonna get searched so anytime you
22:32 - close off an area it just won't get
22:33 - searched or included in the in the
22:36 - directions so so there you go and that's
22:39 - our first version of pathfinding now
22:43 - okay let's just add one other thing
22:45 - which is I want to add that if we click
22:51 - the right mouse button then I just want
22:55 - to change the start to that position and
22:58 - I want to recalculate when that happens
23:00 - to so any kind of mouse button is gonna
23:02 - make it re calculate button one will let
23:05 - us draw button three will draw walls
23:08 - button three will let us move the start
23:10 - that way you can also right click and
23:13 - move the start position around and see
23:15 - how that changes plus adding whatever
23:21 - walls you want okay so that is our
23:28 - breadth-first search path finding
23:32 - algorithm this is a really useful one
23:35 - for all sorts of different kinds of game
23:37 - applications like for example if you're
23:39 - making a tower defense maybe your start
23:43 - is over here so this is the destination
23:45 - you're gonna have the mobs all spawn
23:47 - over here and then they're gonna follow
23:49 - whatever path through to get around and
23:52 - get out of the level and then you can
23:55 - you know predefined the walls and the
23:58 - player can place their turrets and
24:00 - things wherever they want them to be for
24:04 - something like our zombie game this
24:07 - location will be the location of the
24:09 - player and then you know how no matter
24:13 - where on the map a zombie is it has a
24:16 - way of getting to the player and it can
24:19 - roam around the maze and get to the
24:21 - player and that's a lot more efficient
24:23 - than you know if you have a lot of
24:25 - zombies that's a lot more efficient than
24:27 - having each zombie calculate its own
24:30 - path because then you have to do path
24:32 - finding you
24:33 - you know 20 times this way you do it
24:35 - once for the whole map and anything on
24:37 - the on the grid can look at the this
24:40 - vector field and head towards the player
24:45 - okay so in a in a later video so we'll
24:48 - talk about some other different kinds of
24:49 - path finding plus some other things you
24:51 - can do with this we didn't really talk
24:54 - about diagonals yet diagonals are a
24:57 - separate issue which can cause you need
25:01 - to do things a little bit differently
25:02 - for and we'll talk about that in a later
25:03 - video as well I hope you enjoyed it and
25:06 - I hope you have fun and I will see you
25:08 - in the next video thanks
25:16 - you