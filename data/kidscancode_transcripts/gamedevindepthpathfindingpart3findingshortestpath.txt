00:00 - welcome to part three of our pathfinding
00:03 - series in this video we're gonna build
00:05 - on the breadth first search algorithm we
00:08 - explored in the last video and talked
00:10 - about how we can find the shortest path
00:12 - between any two points on the map in our
00:17 - previous video we used the breadth first
00:19 - search algorithm to explore the whole
00:21 - map and find the path from any point on
00:25 - the map to some goal location and we
00:29 - also made it so that we can move that
00:31 - goal location around and see how the
00:33 - paths change alright and that's useful
00:37 - for a number of different types of
00:38 - applications but sometimes you want to
00:41 - find the path from one just from one
00:44 - point to another point if you have the
00:46 - concept of some start location and some
00:48 - end location you just want to find that
00:50 - path you don't care about the rest of
00:52 - the map so what we're gonna do is we're
00:56 - gonna call that home location the bill
00:59 - and we're gonna add a start location
01:02 - okay and then I've actually loaded some
01:06 - other graphics to do this so what we
01:07 - want to do is be able to have a start
01:11 - location and a goal location I'm using
01:14 - the middle mouse button to change my
01:16 - start and the right mouse button to
01:17 - change my goal and I just want to draw
01:20 - this path not any of the other paths so
01:27 - let's start by changing what we're
01:30 - drawing down here at the bottom this
01:31 - loop right here is drawing all the
01:33 - arrows in every place on the map so
01:38 - instead we're going to get rid of this
01:40 - and what we're going to do is just draw
01:45 - the path from the start to the goal okay
01:49 - and so we want to start with we're going
01:53 - to move from node to node along that
01:55 - path and we're going to start with the
01:57 - start node the one right after it I
02:00 - don't want to draw an arrow on top of
02:01 - the X I just want to draw the next one
02:05 - so I'm going to start with the next
02:09 - one whichever one is pointing whichever
02:12 - one the start points to right so as long
02:16 - as we haven't reached home as long as we
02:21 - haven't reached home we're gonna keep
02:22 - doing this
02:23 - oops well current okay we're just gonna
02:27 - keep drawing one after another until
02:28 - we've drawn them all so we're gonna take
02:34 - the current dot x times the tile size
02:39 - let's tile size over two again so that
02:42 - we can get the center do the same thing
02:46 - for the Y and then we're going to pick
02:55 - the arrow we want which is whichever
03:05 - item in the path we are looking at it's
03:11 - going to give us that direction vector
03:12 - so we can pick the right arrow get rekt
03:18 - so that we can Center it and flip that
03:25 - on the screen now we also want to find
03:29 - after we've lived that we want to find
03:31 - the next node in the path so we just add
03:37 - the current we just add the next one the
03:42 - next vector in the path so
03:47 - like that okay okay yeah oh I have an
03:51 - Hermes elf right we're going to the
03:54 - called it goal not home okay so now we
04:00 - can just draw our single path from the
04:03 - start to home okay
04:07 - now this works fine and it's gonna draw
04:11 - it from anywhere on the screen but you
04:14 - might notice something a little bit odd
04:16 - if I remove some of these walls you can
04:19 - see that we're not really taking the
04:22 - shortest path right we're going all the
04:24 - way down and then all the way over when
04:27 - it would be shorter if we you know took
04:31 - some steps over all right if we're right
04:32 - way over here see it just draws straight
04:35 - and that's happening because we are
04:37 - doing because of the way we're doing our
04:40 - find neighbors so here on our find
04:43 - neighbors for each node we're adding the
04:46 - various connections which we listed here
04:48 - and we listed them in this order right
04:51 - we're trying to the right to the left
04:54 - down and then up that just happens to be
04:57 - the order we wrote it in but that means
04:59 - it's always gonna prefer going right
05:03 - over going left
05:05 - it's gonna always prefer going down over
05:07 - going up and that's what's getting us
05:09 - those really long straight stretches and
05:12 - there's a few different ways you can
05:14 - deal with this but the most simplest and
05:16 - the most elegant is when you get the
05:18 - neighbors for your node we're going to
05:20 - add just a little bit of variation here
05:23 - by just saying yes I'm going to take I'm
05:28 - just going to add the node x and y okay
05:32 - and we're just going to alternate here
05:36 - using % to to say if it's an even number
05:39 - we're gonna do one thing it's an odd
05:41 - number or not if it's an even number I'm
05:43 - just gonna take neighbors and I'm gonna
05:47 - reverse it okay so every other time
05:51 - we're gonna go the opposite direction
05:53 - through this and look at these neighbors
05:56 - first before we look at these and that's
05:59 - going to let it
06:02 - choose different directions so now if I
06:05 - remove some of these walls here again
06:07 - you can see we're taking a much more
06:11 - straight path right we come down and
06:13 - then we start jogging over so if we were
06:16 - actually exactly diagonal we'll take the
06:19 - most diagonal path and that's going to
06:22 - work when we are when we are really far
06:27 - apart as well right it's gonna find the
06:30 - diagonal path and that's gonna look a
06:32 - lot better as we travel around these
06:36 - things like this when we go around
06:37 - corners okay so that looks good and
06:41 - we're getting good paths now from start
06:44 - to end now our problem is that this is
06:49 - very inefficient right because wherever
06:53 - we are on the map we're exploring the
06:55 - whole map and finding all these paths
06:57 - even though this is the one we want so
07:00 - I'm only showing this one
07:02 - remember our flood-fill algorithm our
07:04 - breadth first search is searching the
07:06 - whole map so them so we're searching all
07:09 - of these tiles over here even though
07:11 - there's no way for them that they would
07:14 - be part of the path all right and so
07:17 - that's where we can start talking about
07:19 - some variations to this process to
07:23 - improve its efficiency and we only want
07:26 - to find this so let's not waste our time
07:28 - doing other parts of the map okay so the
07:32 - way we could solve this is we could go
07:33 - to our search here and we're gonna add
07:37 - that there's a start time and an end
07:39 - time and all we need to do is here in
07:43 - our loop as we're going through and
07:44 - looking at every tile if current equals
07:47 - end break right because if we found the
07:53 - final tile I mean we found the goal tile
07:56 - we don't need to keep searching so we
07:57 - can just stop searching and return what
08:00 - path we have so let's change that we
08:03 - just need to add that we included this
08:09 - in the
08:11 - function right now if we run this this
08:15 - isn't gonna look any different right
08:16 - it's still gonna find the path we want
08:19 - right but let's look at what's happening
08:22 - by looking at that animation that we had
08:25 - before okay so here's my animated
08:28 - breadth-first search and so when I start
08:30 - this off we're gonna keep filling out
08:34 - like normal but as soon as we reach and
08:37 - have found the start tile we can stop
08:43 - and we don't need to bother exploring
08:45 - any of these over here okay
08:48 - let's look at it one more time with some
08:50 - walls in there so that we can see how
08:53 - well it works in that case right so here
08:58 - we are we know what the paths is gonna
09:00 - be let's see how quickly it finds it all
09:03 - right so now we saved ourselves a whole
09:05 - bunch of time by not exploring around
09:07 - all of these areas okay so it's much
09:11 - much more musician so back over to our
09:18 - code where our breadth first search is
09:20 - storing the full path right it's storing
09:24 - all of the tiles that it visits so we
09:28 - can just show these on the screen by
09:31 - this little section I added here which
09:32 - just goes through that path and fills a
09:35 - man in a darker color so that we can see
09:38 - how much of our map were actually
09:39 - exploring whatever we run so as I move
09:42 - around we can see right when it's close
09:45 - by we're not very far away we're saving
09:50 - a whole lot of time and you can imagine
09:52 - on a much bigger map or a much more
09:53 - complicated map that this would save a
09:57 - whole lot of time especially if you're
10:00 - having to recalculate these paths often
10:03 - because you know the player is moving
10:05 - around the mobs moving around whatever
10:09 - the case may be walls might be changing
10:13 - and changing the path
10:16 - so the last thing we want to look at
10:18 - here is what if we allow diagonal
10:21 - movement on our grid right right now we
10:25 - can only choose neighbors for any tile
10:28 - that are in the four directions up down
10:31 - left and right but what if we want to
10:34 - change that well we just need to add to
10:37 - the list of connections here the four
10:41 - diagonal directions right so you can go
10:43 - that way that way you could go that way
10:52 - or you could go that way all right and
10:56 - now when we do find neighbors we're
11:00 - going to get any of the eight directions
11:03 - possible and our search will work just
11:08 - fine this is just going to go through
11:11 - and all those tiles get added to the
11:12 - frontier that's all it cares about but
11:15 - we do need to change right here so that
11:18 - we can see our path and have some
11:19 - diagonal images I'm going to add those
11:23 - as well one negative one and okay now
11:34 - when we run this we're going to see that
11:37 - we can take diagonal paths now you might
11:39 - notice something odd about these
11:41 - diagonal paths if I remove some of these
11:43 - walls you can see it really easily those
11:49 - and let's say we had a straight line
11:53 - right why isn't it taking this path
11:57 - right this path should be shorter than
12:00 - this path although if you count it 1 2 3
12:03 - 4 5 6 7 8 9 10 11 12 13 steps it's the
12:09 - same this way actually let's do it a
12:11 - little bit closer your season so you can
12:13 - see right 1 2 3 4 steps 1 2 3 4 steps
12:18 - right so our search algorithm is seeing
12:21 - this is the same distance as this right
12:24 - and that's because diagonal paths aren't
12:27 - the same distance as
12:29 - horizontal and vertical paths but it but
12:32 - by our search algorithm they are it
12:34 - costs the same amount to step one step
12:36 - this way as it does to step one in this
12:39 - direction and in reality if this
12:42 - distance were one then this distance
12:44 - would be the square root of two which is
12:47 - about one point four and so to fix this
12:51 - we're going to need to talk about having
12:54 - the concept of a movement cost right
12:58 - like you could imagine that not only our
13:01 - diagonal moves a little bit more
13:04 - expensive than horizontal or vertical
13:06 - moves but you could have different types
13:08 - of terrain too right moving through the
13:11 - forest area it's slower than moving
13:16 - through the grass so maybe this path a
13:19 - path around the forest is faster than
13:21 - moving through it and all those kind of
13:24 - things can be implemented in a different
13:28 - version of the algorithm called
13:30 - Dijkstra's algorithm and we're gonna do
13:31 - that in the next video but in the
13:34 - meantime if you want to have some nice
13:37 - straight paths under this scheme all we
13:41 - need to do really is go back over here
13:43 - and remove I was commented out our
13:46 - little reversal of the the list every
13:50 - other time right because the idea of
13:52 - that one is that helps it find the
13:54 - shortest path and that works great when
13:56 - you're only going horizontal again
13:59 - horizontally and vertically but now this
14:02 - isn't helping us so if we comment that
14:05 - out you'll see we get much more much
14:10 - straighter paths right even when things
14:14 - are in a straight line
14:15 - alright so this will be a good enough
14:16 - solution for now but as you can see of
14:22 - course just getting from here to here
14:24 - we're still exploring all of this part
14:27 - of the map all the way around and it's
14:29 - not super efficient yet so in the next
14:33 - video we'll talk about extras algorithm
14:35 - and implementing the movement costs and
14:38 - some other strategies for improving the
14:42 - it's
14:43 - see of the search so we don't spend so
14:44 - much time on unimportant parts of the
14:47 - map
14:48 - all right so that'll do it for this
14:49 - video I will see you in the next part
14:53 - Thanks
15:01 - you