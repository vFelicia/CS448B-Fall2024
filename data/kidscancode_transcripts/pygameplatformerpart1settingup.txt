00:00 - welcome back to game development with
00:02 - pygame we are going to start on a new
00:05 - game this time I hope you're excited
00:07 - we're going to make a platformer
00:09 - platformers are really popular
00:11 - everybody knows Mario is it going to be
00:14 - a game where you have a character that
00:15 - can jump around and stand on things and
00:18 - we'll see where we go from there but the
00:21 - first step is we're going to spend a
00:24 - little time talking about how to set up
00:26 - the project and make things organized so
00:31 - that as we move forward and add things
00:32 - it'll be a lot easier to keep track of
00:35 - of what we're doing okay before we start
00:39 - I want to talk a little bit about what
00:43 - our plan is going to be so I opened up
00:45 - the PI game template which is which we
00:47 - made in the first video of the series if
00:50 - you need to refresh your memory there's
00:52 - a link below for the video on how we
00:55 - created this and what the different
00:56 - pieces of it are you know the game loop
00:58 - and the pieces of the game loop and all
01:01 - that kind of stuff okay and this is a
01:03 - great beginning this great starting
01:07 - point for any kind of PI game project
01:09 - but if as you might have noticed if you
01:12 - if you follow it along with our last
01:14 - game once the game gets big and has a
01:16 - lot of pieces in it this the file can
01:20 - get big and have a lot you know there's
01:21 - a lot of scrolling and there's a lot of
01:23 - lines of code so what we're going to do
01:26 - is organize this a little better which
01:30 - is it's easier to do at the beginning if
01:32 - you start out organized it's easier to
01:33 - stay organized if you wait until you've
01:35 - got a whole bunch of stuff and you've
01:36 - got a lot of different things in your
01:38 - update section and a lot of different
01:39 - things in your draw section it gets
01:40 - harder to make it organized once you've
01:45 - made it so we're going to start out
01:47 - planning for this to be a more organized
01:50 - project okay so what I've done is I made
01:54 - a folder okay I made a full record
01:56 - platforms for our platform you okay and
01:59 - in that is where we're going to put all
02:01 - our files for the game and that keeps us
02:02 - separated from any other projects you
02:05 - might have that you're working on okay
02:07 - and I went ahead and made the image and
02:09 - sound folders although I don't have
02:10 - anything in them yet they're empty
02:13 - and here's the tie game template that we
02:14 - made okay and we're going to rename this
02:16 - in a minute but first of all let's talk
02:18 - a little bit about how we're going to
02:18 - organize it one really good way to
02:21 - organize things is to break them up into
02:23 - separate files so for example all of
02:27 - these things right here which are kind
02:29 - of the settings these constants that
02:31 - we're setting up for the options of the
02:34 - game you know that you want to be able
02:37 - to change in one place and it affects
02:39 - the whole game we're going to put those
02:41 - in a separate file so I'm going to make
02:45 - a new file okay and now the settings
02:56 - that py file is we're going to put all
02:59 - this stuff in here so I'm going to cut
03:00 - that out and I'm going to paste it here
03:02 - oops gonna paste it here and then this
03:05 - is going to be the game options and
03:11 - settings whatever we want to call it
03:13 - right now this file is fine I've saved
03:15 - it it's got all this stuff but now over
03:17 - here in our PI game template now we're
03:19 - going to get errors right because it
03:20 - doesn't know what width is and it
03:22 - doesn't know what height is it doesn't
03:23 - know what fps is right so what we want
03:27 - to do is we want to import this file
03:30 - into this file now there's a couple ways
03:33 - we can do that we could say import
03:35 - import settings
03:39 - alright import settings will tell it
03:41 - look for a file called settings dot py
03:44 - which it does and run the code that's in
03:47 - that alright so we go over here would
03:49 - look for this file and I would run this
03:50 - code which makes initializes all these
03:53 - variables right but if we wanted to
03:56 - refer to the variables we would have to
03:58 - say settings dot width and settings dot
04:04 - height because they come from the
04:05 - settings file and that gets kind of
04:07 - tedious so that's one way you could do
04:10 - it another way you could do it is you
04:11 - could say from settings import star and
04:15 - that says import all the things from
04:19 - that file but it doesn't make you append
04:22 - the or prepend I should say since you're
04:25 - putting it in front then
04:26 - the file you've imported in front of the
04:28 - settings so now we get all of these
04:31 - variables variable names load it into
04:35 - this file and now when we want to make
04:38 - changes of things we just have to know
04:39 - we go here and we change these things
04:41 - and they'll change and are in our game
04:44 - okay oh and one other thing we'll do
04:47 - real quick is I'm going to just make a
04:49 - variable for the title so that we can
04:52 - set that and we're going to fill that in
04:58 - later I'm just using that for a
04:59 - placeholder right so now our this file
05:01 - will run just fine all right there's our
05:06 - game window we can close and exit it did
05:09 - the width and height and frames per
05:10 - second and all that like he was supposed
05:11 - to so that's good so now what about all
05:16 - of this okay so for for organizing this
05:22 - I'm going to make another new file okay
05:24 - and I'm going to call that file main dot
05:26 - py okay now you can name this whatever
05:30 - it a lot of people like to call it main
05:33 - so you know that the this is the main
05:36 - file right settings dot py isn't the one
05:38 - you want to run to run your program main
05:41 - is right and so we're going to start
05:44 - moving stuff from the template over into
05:46 - main and what exactly do we want to move
05:49 - well to make this a little easier I'm
05:53 - going to go up here to view and I'm
05:55 - going to click on panes and I'm going to
05:58 - say split right and what that lets us do
06:02 - I make this window wider is have two
06:06 - files right next to each other okay so
06:10 - I'm going to have my main dot py here
06:13 - and my PI game template here because
06:14 - we're going to start moving stuff over
06:15 - here to get it organized it just makes
06:17 - our life a little easier I'm going to
06:19 - hide the file list there so we have
06:20 - plenty of space to move things you know
06:22 - and get them where we want them to be
06:25 - all right now the imports those are a
06:28 - no-brainer we know we're going to want
06:30 - those over here okay I'm actually
06:33 - cutting and pasting because I'm going to
06:35 - throw this file away this is just a copy
06:36 - of my template if if you're using your
06:39 - original
06:40 - but you know you don't want to destroy
06:41 - it so you can cut and paste so this is
06:46 - going to be let's go ahead and put our
06:47 - comment up here this is going to be our
06:51 - jumpy platformer game okay and we'll
06:57 - fill in the other stuff there later so
07:01 - what do we need to do well we're going
07:03 - to make a class game okay in class game
07:08 - is going to have a bunch of pieces in it
07:10 - what are the pieces it's going to have
07:11 - well it's going to need to have an init
07:14 - right and then the init is going to be
07:16 - the stuff that needs to happen when the
07:19 - game first starts up the program first
07:21 - starts up and then it's going to need to
07:23 - have a game loop right so we'll call
07:28 - that run so when we run the game it's
07:32 - going to run the game loop you see how
07:34 - I'm just putting pass here if you
07:36 - haven't seen that before pass is a
07:38 - Python command it just says do nothing
07:40 - okay because I'm not ready to write the
07:43 - code that goes in in it I'm just using
07:44 - that as a placeholder if I put nothing
07:47 - there Python would give me an error
07:49 - message because it would say oh you said
07:51 - Def and then you didn't actually write
07:53 - any code inside there right so pass help
07:56 - lets us just just put a placeholder
07:59 - there right and we can we should almost
08:01 - we should also comment these things just
08:03 - so we know what they're for right
08:05 - initialize game window and other things
08:12 - right we'll fill that in as well so run
08:15 - is going to be the actual game loop okay
08:19 - and then what else are we going to need
08:22 - well we're going to need to have a
08:28 - update update section right this is the
08:35 - this is the this is the game loop update
08:40 - right and we're going to need to have a
08:43 - event section this is the game loop
08:49 - events remember these are the pieces
08:52 - that the game would have every
08:53 - gameloop has to have in it these these
08:56 - three things right update events and the
09:00 - draw this is the game loop draw and then
09:06 - that's going to be passive I left off
09:07 - the pass here okay so you see I'm
09:12 - filling these in or I'm putting them
09:15 - there and I'm waiting to fill them in
09:16 - once I have once I figured out exactly
09:18 - what I what order I want to do them in
09:22 - okay what else do we need
09:24 - oh we're going to want to be able to
09:27 - have a def new the new section is the
09:32 - that's to start a new game right so once
09:34 - you once you've ended the game you you
09:37 - lost whatever game over you want to be
09:39 - able to start again new is the is going
09:41 - to be the code that resets the game sets
09:42 - the score back to zero
09:44 - et cetera initializes everything or I
09:47 - should say initializes the game not
09:48 - initializes the whole program right
09:50 - which is the difference between these
09:52 - start a new game okay so how is this
09:58 - going to work well this class game just
10:00 - is going to define all these pieces of
10:02 - the game and then one when we start our
10:04 - program what we're going to do is we're
10:07 - going to make a an instance of the game
10:10 - object right this g4 short right and
10:14 - then we want to and then we want to run
10:19 - it right we want to have a loop that
10:20 - runs the game and in fact what we could
10:23 - do is we could have actually have a
10:24 - Start screen sort of like a splash
10:29 - screen or or whatever you want to call
10:31 - it right and then we're going to have
10:33 - some sort of loop okay and I'm going to
10:37 - leave that for a second okay and then
10:40 - we're going to say start a new game
10:42 - right and that's going to actually run a
10:45 - game and as you're playing the game
10:46 - you're going to do whatever you do when
10:48 - the game ends then we will drop to here
10:52 - and we can show our game over screen and
10:55 - the game over screen should just you
10:59 - know tell us that the game is over
11:00 - whatever things we want to show the
11:02 - player and wait for the wait for the
11:05 - press a key to play again right which
11:06 - goes back to
11:07 - you know right and if that loop ends
11:11 - then we're going to then we're going to
11:13 - quit okay and actually here's a good
11:18 - point to where we can save ourselves
11:20 - some typing right up here where we
11:22 - import pygame let's change that to
11:24 - import by game as PG all right the as in
11:29 - an import lets you basically rename this
11:31 - so we're importing PI game but we're
11:34 - going to say call it PG so that way here
11:37 - I can actually just load PG run PG quit
11:40 - instead of Pi game got quit you think of
11:42 - all the times that we have to type the
11:45 - word PI game this is going to help make
11:48 - things a little easier to read and
11:50 - n-type okay so what controls this loop
11:55 - well we're going to make a variable
11:58 - we're going to make a game variable so
12:03 - we're going to have to initialize that
12:05 - right so that's going to be all right so
12:10 - now we have a game object with a
12:14 - variable called running that controls
12:16 - whether this loop happens or not okay
12:19 - and we're also going to need a show
12:22 - start screen and a show game over screen
12:24 - right now most of those things will
12:26 - probably wait until until much later for
12:33 - us to fill in
12:40 - but we can have them here so they're
12:46 - ready to go okay okay so part of the
12:57 - reason I've done this is you would see
12:59 - that if we ran this program it would run
13:02 - with no errors it's not going to do
13:03 - anything right it's not going to do
13:06 - anything because there's no code to tell
13:07 - it do anything but it doesn't give us an
13:09 - error right if we hadn't defined show
13:11 - game over screen with past then this
13:14 - line would give us an error and we would
13:16 - have to not do that until we were ready
13:18 - to do it this way we have these blocks
13:22 - here and they're ready to go we can hide
13:25 - them right like this because I'm nowhere
13:29 - near ready to do the code for my Start
13:32 - screen but it's ready the place for it
13:35 - to go is ready so whenever i am i can go
13:37 - and drop it in there and the same with
13:39 - all these other pieces okay so let's
13:42 - start talking about how we move things
13:43 - over okay so this stuff here this is
13:46 - useful right this is the stuff that
13:48 - creates the game window and gets
13:50 - everything started so that pretty
13:53 - obviously needs to go into the init
13:58 - section right now we are going to want
14:00 - to replace pygame
14:02 - with PG so I have a few places there
14:06 - where I can reset that right
14:12 - these are object class variables so
14:17 - we're going to need to say self dot for
14:19 - the screen and self dot for the clock so
14:23 - now the game has a screen on a screen
14:25 - and a clock item assigned to it we're
14:33 - going to probably want to create this
14:36 - all sprites group in the new right
14:40 - because when you create the group it
14:41 - creates an empty one right
14:44 - so that would let us do that okay now so
14:50 - we've got our game loop and our game
14:51 - loop is going to be
14:53 - this right so this stuff is all going to
14:55 - go over here right what are the parts of
14:57 - our game loop well we know we have to do
15:01 - the clock bit right we have to say self
15:06 - clock tick right and then we also want
15:09 - to do the pieces of our game loop right
15:13 - and actually what we really want to do
15:16 - is we want to have this game loop start
15:20 - and end kind of to be our to be whether
15:25 - we're playing the game or not right
15:26 - that's how we know that this when we
15:29 - start our new game it should end correct
15:32 - so so we're going to need a variable to
15:35 - control that and we can say playing
15:40 - equals true right and if we set playing
15:42 - equal to false the game ends so while
15:45 - playing what do we need to do that's
15:49 - where we need to tick the clock I put
15:51 - that in the wrong place and then we need
15:58 - to do self dot events which we've
16:02 - defined so dot update which we've
16:07 - defined and self dot draw which we've
16:10 - defined right so there's our game loop a
16:12 - nice little compact game loop your game
16:16 - loop is to just have a loop that takes
16:19 - the clock checks for events checks rep
16:23 - excuse the updates execute the draw and
16:25 - that's it that's our def run all right
16:27 - so I'm going to hide that and what else
16:33 - do we have so we have our events right
16:34 - events is going to go into this event
16:36 - section so let's grab this and put that
16:40 - in the events section right so for event
16:45 - in PG event get if it's a PG quit then
16:53 - what do we want to have happen well we
16:56 - want to end everything right so if you
17:02 - are playing
17:06 - then we want to say we want set playing
17:12 - to false and then we also want to set
17:14 - running to false because running is the
17:17 - command that ends this loop right so you
17:21 - stop playing the game you also stop
17:23 - running the whole program you get out of
17:27 - everything and that's our event section
17:30 - so as I fill these in I'm just going to
17:33 - close them right now update we want to
17:38 - update the all sprites group right so
17:40 - we'll put that into update now these
17:44 - need to be named self and that's our
17:50 - whole update section alright nothing
17:52 - else to put in there and then we have
17:54 - our draw section our draw section just
17:57 - does these things right so if I stick
18:00 - those over here I have a couple of self
18:09 - dot screen fill black all sprites draw
18:14 - screen and then we want to do PG dot
18:21 - display dot flip okay so now we have all
18:31 - the pieces in here and our game should
18:32 - actually run oops we have a little error
18:36 - says game doesn't have an attribute
18:38 - running well we said here so here's
18:42 - where we set it to true ah hopefully
18:46 - some of you notice this typo the init
18:49 - the init method needs to have underlines
18:52 - on both sides it's double called a
18:54 - dunder init double underscore okay so
18:58 - actually I'm going to go ahead and close
18:59 - that since we're done with that
19:03 - and I just notice one other thing we
19:05 - forgot running is what runs the game
19:09 - right
19:10 - so we just two ways we could think about
19:12 - doing this right now we're calling new
19:14 - to set the new game up but we also need
19:16 - to say run the game
19:19 - now you could do that or you could put
19:22 - self dot run here and say whenever a new
19:26 - game starts it should just run itself
19:28 - right and that keeps things simpler here
19:30 - right and that lets us start the game
19:33 - actually start the game loop okay so
19:36 - there we have our game loop press the X
19:39 - program ends
19:40 - so hopefully this whole process made
19:45 - sense to you
19:46 - if it didn't let's walk through this one
19:48 - more time so when we start up our
19:50 - program it you know import spy game and
19:53 - we just abbreviated that to PG import
19:58 - random because we've we've had that in
19:59 - there because we know we're going to we
20:00 - know we're going to need it and then
20:01 - import everything from the settings file
20:03 - which is where we put all of these
20:06 - things how big the window should be and
20:07 - what our frame rate and colors and that
20:09 - kind of thing and then if we go down
20:12 - here right because class game I'll hide
20:14 - that for a second it goes down here and
20:17 - says make a new game object well what is
20:20 - the game object do well when a new game
20:22 - object is created it does this which is
20:25 - all the stuff we've done before
20:27 - initialize PI game create the game
20:30 - window set the caption create the clock
20:34 - and make a variable called running okay
20:37 - so after you've done that you should
20:40 - show the Start screen
20:41 - well show Start screen is here it's
20:44 - passed so it means show Start screen
20:46 - does actually nothing okay so this does
20:49 - nothing but it just skips to here and it
20:51 - says as long as the running variable is
20:53 - true and we set the running variable to
20:55 - true to start with then you should
20:58 - create a new game well what does that
21:00 - mean create a new game is doesn't do
21:03 - anything right now except create that
21:05 - all sprites group which we're going to
21:06 - use once we start making sprites and run
21:11 - the game and run the game right here
21:13 - says create the game loop make a
21:15 - variable called playing that controls it
21:17 - and then tick the clock check for events
21:23 - all right with the only events that we
21:27 - have defined here are check for the
21:28 - clicking the X which will make those
21:31 - variables false
21:34 - do the update which all we have an
21:37 - update is to update the sprites we don't
21:42 - really have any but they're ready to go
21:43 - and then do the draw which fills the
21:46 - screen draws whatever sprites we might
21:49 - have and flips the display okay if you
21:54 - did click the X then you end the running
22:01 - loop so you go to here you see I'm sorry
22:04 - if the game ends right we don't have
22:06 - anything ends the game because we're not
22:07 - playing then you're going to see a game
22:10 - over screen and game over screen is
22:12 - empty right now if you had clicked the X
22:16 - in the events we have set running to
22:19 - false so this loop will end and we'll
22:23 - just drop to PG quit and everything is
22:26 - over okay so next video we will start
22:31 - using this starting point this main dot
22:35 - py to start building our platform game
22:46 - you