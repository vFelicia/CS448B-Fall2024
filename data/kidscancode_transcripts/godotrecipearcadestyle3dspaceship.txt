00:00 - this is one i've gotten a lot of
00:01 - requests for especially since i did the
00:03 - airplane
00:04 - tutorial is how to make a 3d spaceship
00:07 - that flies around in kind of an
00:10 - arcadey star wars kind of style so not
00:14 - realistic physics but more of
00:16 - the dog fighting action kind of game all
00:18 - right so let's take a look
00:20 - for our spaceship models we're going to
00:21 - use this ultimate spaceship pack that
00:23 - was recently released by
00:25 - quaternious it's they're really cool
00:26 - they've got a lot of different
00:29 - ship models to choose from and
00:32 - conveniently they come in all sorts of
00:34 - formats the gltf version is what we're
00:37 - going to use so that's what i'm going to
00:38 - drop in my assets folder
00:40 - of my project right here
00:43 - and then i've chosen to use the
00:45 - executioner
00:46 - [Music]
00:47 - model so this is the ship i'm going to
00:49 - use okay but in order to use this
00:52 - i'm going to take the executioner and
00:54 - i'm going to import it
00:55 - and use kinematic body as
00:58 - the root type so that when i create a
01:02 - new
01:04 - instance of one of these it'll already
01:05 - have a kinematic body as its root so
01:09 - new inherited scene and you see i've got
01:11 - a kinematic body
01:13 - and then the mesh is a child of it and
01:15 - now we can add a collision shape
01:18 - to this and you can do the collision
01:21 - shape however you want
01:22 - i'm not really concerned about
01:23 - collisions for this demo we're really
01:25 - talking about
01:26 - the control so i'm just going to do a
01:28 - simple box shape
01:30 - around the around the ship
01:33 - body and not worry about
01:36 - the details because oh and i just
01:39 - noticed
01:40 - by the way something to keep an eye out
01:42 - for
01:43 - when you're importing meshes notice that
01:45 - this
01:46 - mesh is facing the positive z-axis which
01:50 - means that when we
01:51 - fly around we're going to be flying
01:52 - backwards so you take the mesh
01:54 - and rotate it 180 degrees around y
01:59 - so that it will be pointing in the right
02:02 - direction
02:03 - that we want okay and
02:07 - all right so there's my collision shape
02:10 - i'm going to go ahead and save this
02:13 - okay so in the input map i've added
02:16 - inputs for pitch up and down
02:18 - roll right and left yaw right and left
02:21 - and
02:22 - throttle up and down and for all of
02:24 - these i've added
02:25 - the inputs both keys and game controller
02:28 - you'll definitely find that using analog
02:30 - stick input for the
02:31 - controls is going to work better and
02:33 - then throttle up and down i've just done
02:35 - buttons for
02:37 - okay and so we'll use those in the
02:40 - script that we're now going to add
02:42 - to our executioner
02:45 - scene okay here's our script we're going
02:47 - to start with a couple of variables
02:49 - that we can set for the performance of
02:51 - the ship
02:52 - the max speed is going to be our top
02:54 - speed that we can go and acceleration is
02:56 - just going to be how fast we
02:57 - can get there obviously in a real
03:01 - space situation with no no friction
03:03 - there isn't a max speed but again we're
03:05 - this is an
03:05 - arcade style you know star wars type of
03:08 - flying around ship and there's going to
03:10 - be a max speed or else
03:12 - things will be really hard to control
03:14 - and then we're going to keep track of
03:15 - our velocity
03:16 - and we're going to keep track of our
03:18 - forward speed our forward speed is
03:20 - basically how fast we're going to be
03:21 - going that's going to change when we
03:24 - throttle up and throttle down and then
03:26 - velocity is going to be our vector that
03:27 - we
03:28 - that we have out of that and so the
03:31 - first thing we're going to do is
03:32 - we're just going to talk about forward
03:34 - motion first then we'll get to the
03:36 - then we'll get to the controls um so
03:38 - we're going to use
03:39 - git input here so we make a function
03:41 - called get input that's going to check
03:44 - the status of all of our inputs and for
03:47 - here we're going to do throttle up and
03:48 - throttle down
03:49 - and all those are going to do is
03:52 - lurp our forward speed right when we
03:55 - throttle up we
03:56 - head towards the max speed and when we
03:57 - throttle down we head towards zero
04:00 - and that's all we really need to do with
04:02 - those and then we can do our movement
04:04 - and in our
04:05 - in our physics process is where we will
04:08 - do
04:09 - the movement okay so we get the input
04:13 - we set our velocity equal to our forward
04:16 - speed
04:16 - in the forward direction and then we'll
04:21 - just i'm just going to use move and
04:22 - collide from a movement here obviously
04:24 - you can use movement clyde or you can
04:26 - move and
04:26 - use move and slide and i'm not actually
04:28 - capturing the collision info
04:30 - which we would eventually want to do uh
04:33 - in case you ran into things but again
04:35 - i'm mainly just concerned with getting
04:37 - the movement working so i'm just going
04:38 - to leave that like that
04:39 - for now all right to test this out i've
04:42 - made a test scene here with a nice space
04:44 - background
04:45 - and a camera so that we can see if our
04:48 - ship
04:48 - is moving and make sure we don't have
04:50 - any problems so i'm going to hit play
04:51 - the scene
04:54 - and now i can hit my throttle up and
04:55 - throttle down buttons and i should see
04:57 - the ship
04:58 - accelerate and decelerate
05:01 - all right so now we know that stuff is
05:03 - working now we're ready to go back in
05:05 - our script and add some
05:08 - functionality for the rotations so we're
05:11 - going to set
05:11 - three configuration variables for the
05:15 - speed at which it will roll pitch and
05:17 - yaw
05:19 - and then we're going to have a variable
05:20 - for each of the each of those axis
05:22 - inputs that we'll be capturing from the
05:26 - joystick or the keyboard and then
05:29 - in the get input is where we're going to
05:31 - capture these so
05:32 - what we're going to do is we're just
05:34 - going to make each input
05:39 - equal to the input's action strength
05:42 - right so up my up minus down roll left
05:45 - minus
05:45 - roll right y'all left minus you all
05:47 - right
05:49 - and now we'll that will get us each of
05:51 - those
05:52 - inputs and then we can use those inputs
05:54 - in
05:55 - the physics process and we'll do that by
05:58 - rotating
05:59 - the basis and we'll rotate the basis
06:03 - along each of those axes based on
06:05 - what the input was roll is along the z
06:09 - rotating around the z axis pitch rotates
06:11 - around the x-axis
06:12 - and yaw rotates around the y-axis
06:16 - and then it's always a good idea when
06:17 - you're manipulating the basis
06:19 - to orthonormalize it because of
06:22 - floating point errors will eventually
06:24 - accumulate and
06:25 - make your your axes no longer
06:28 - orthogonal and things will start to skew
06:30 - and look weird
06:32 - and now we should be able to try this
06:33 - out and see if it works
06:37 - so i'm gonna yaw
06:41 - i'm gonna roll and i'm gonna pitch
06:46 - okay and now you can see we can control
06:49 - all those together
06:51 - and rotate the ship in whatever
06:52 - direction we want and if we
06:54 - and actually if we throttle up we should
06:57 - see the ship
06:59 - fly away let's point away from the
07:00 - camera and then
07:02 - if i pitch up i'm going to do a loop
07:06 - all right y'all will go in a circle and
07:07 - so on
07:10 - and we can also roll okay so that
07:13 - is our the basics of our control right
07:16 - now let's talk about
07:17 - improving this a little bit if you
07:19 - notice when i was
07:21 - rolling and you know pitching the ship
07:23 - and so on
07:24 - it moves a little too sharp right the
07:27 - ship starts and stops instantly
07:29 - based on the input and that doesn't feel
07:32 - very natural
07:33 - so we want to give it a little bit of we
07:36 - want to
07:36 - do a little bit of lerp there to cause
07:39 - it to
07:40 - not stop instantly and depending on how
07:43 - rapidly you do that you can set how
07:45 - floaty
07:46 - you want those controls to be so we're
07:48 - going to add a variable here
07:50 - called input response
07:53 - and the bigger this number the faster
07:55 - the response the quicker
07:58 - it'll snap to to moving and and
08:01 - and not moving and then we'll use that
08:04 - here when we get the inputs
08:05 - okay so instead of these three what i'm
08:08 - going to do is actually
08:11 - make these lerps so we're gonna when we
08:13 - have a new pitch input which is the same
08:16 - combination of inputs we're gonna lurp
08:19 - it based on that input response
08:21 - okay and what that's gonna do when we
08:24 - try playing this is watch when i roll
08:27 - when i let go of the
08:29 - stick the ship still rolls just a little
08:32 - bit
08:33 - right it comes to a stop pretty quickly
08:35 - but there is a little bit of time there
08:37 - and you can adjust that based on what
08:39 - you set that input response to
08:41 - but now we get a little bit of
08:44 - gives us a little bit of a feel of
08:45 - inertia right and you can
08:48 - you can't instantly change direction
08:50 - there's a little bit of
08:51 - delay when you slam the stick from the
08:53 - right all the way to the left
08:55 - one other thing you might have noticed
08:56 - is that the controls are a little bit
08:58 - awkward
08:59 - because we have three axes of rotation
09:03 - we need to use two analog sticks so i'm
09:06 - using the left stick and the right stick
09:08 - right and the left stick does roll and
09:09 - pitch and the right stick is doing yaw
09:12 - and that gets kind of tricky to control
09:14 - because using both
09:15 - those sticks at the same time and so
09:18 - what a lot of
09:19 - space games do to get rid of that
09:22 - problem
09:22 - and make it so you only need one stick
09:25 - for steering
09:26 - is to link two of the axes and that's
09:29 - what we're gonna i'm gonna show you how
09:30 - to do here we're gonna link
09:32 - the roll and the yaw and to do that we
09:36 - really just want to go up here we want
09:37 - to make the yaw speed
09:40 - somewhere between a quarter and
09:43 - a half of what the roll speed is
09:47 - so i'm going to make it let's 0.75 okay
09:50 - and then down here instead of getting
09:52 - the yaw input from the joystick
09:55 - right instead of that we're just going
09:57 - to say
09:58 - yaw input equals roll input
10:02 - and so now we'll be able to steer with
10:04 - one
10:05 - stick now what this will look like
10:10 - is essentially when you
10:13 - when you roll you yaw a little bit too
10:16 - right pitch is still up and down but now
10:19 - yaw will roll a little bit
10:22 - and it makes your ship spiral a little
10:25 - bit so you sort of
10:26 - turn to the right a bit when you
10:29 - roll to the right and
10:33 - that's really all we need to do and you
10:34 - can experiment with that quite a bit
10:36 - and if you have if your ship has
10:38 - different types of
10:39 - if your game has different types of
10:41 - ships in it you can
10:43 - set them up differently so that
10:45 - different ships have different handling
10:46 - capabilities
10:47 - and fly differently and you could also
10:50 - try doing things like
10:52 - linking pitch and yaw for example
10:55 - instead of rolling yawn but i
10:56 - i recommend you you experiment with it
10:58 - and play around so to see how this might
11:00 - look in practice let's take a look at a
11:02 - little example game i've made where i
11:04 - added some
11:06 - effects and shooting and some other
11:08 - ships and we can switch to a chase
11:10 - camera
11:12 - right and you can fly around
11:15 - and like i said this is where you'll
11:17 - want to experiment with
11:19 - different types of ships and different
11:21 - behavior depending
11:22 - on what you're going for all right i
11:25 - hope this
11:26 - tutorial was fun for you and helps you
11:29 - with the space game that you
11:31 - dream of making thanks for watching and
11:34 - make sure to check below for a link to
11:37 - this example
11:38 - project that you can try out yourself
11:42 - you can find this recipe and lots more
11:44 - on the godot recipes
11:45 - website at goodrecipes.com here you can
11:48 - find a wide variety of
11:50 - recipes for creating the game system you
11:53 - need
11:54 - some help on how to get started with
11:55 - godot in the basics section
11:57 - and lots more i recommend you go over
11:59 - there and explore and
12:01 - let me know if there's something you're
12:02 - looking for that you'd like me to add
12:05 - as i'm always adding more recipes over
12:07 - time
12:08 - thanks for watching and i'll see you in
12:10 - a future video