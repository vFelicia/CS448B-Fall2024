00:03 - in this video I want to work a little
00:05 - bit deeper at the kinematic body to
00:07 - denote specifically how to handle
00:10 - collisions with objects so that you can
00:13 - as in this example have good-looking
00:16 - bounces and responses to the collisions
00:20 - with the objects in your game so let's
00:23 - take a look here at the basic structure
00:25 - of a kinematic body 2d scene so we start
00:28 - with the body itself and then it's going
00:31 - to have two children and sprite and a
00:33 - collision shape the sprite is just going
00:36 - to be the texture so you have an
00:38 - appearance for the nodes you can see it
00:41 - when it moves around on the screen and
00:42 - the collision shape I've just made a
00:44 - circular collision shape here because
00:46 - that matches the shape of the sprite
00:49 - that I'm using and when we move a
00:51 - kinematic body to D we want to use the
00:53 - Move method you give it a vector that
00:56 - represents the distance and the
00:58 - direction that you want to move and it
01:01 - will automatically stop if it collides
01:05 - with an obstacle that obstacle can be
01:08 - any other physics body the kinematic
01:11 - body static body or a rigid body and
01:13 - then it's going to return to you a
01:16 - vector representing how much of the
01:18 - movement was left when it stopped so
01:22 - let's look at that a little more in
01:23 - detail so here's our object that we want
01:27 - to move the gray vector is the vector
01:30 - that we want to move the body along but
01:33 - we have this green obstacle but it's
01:36 - going to collide with so when we call
01:38 - the move method on the body it's
01:40 - actually going to stop when it hits the
01:43 - obstacle and it's going to give us this
01:45 - red vector which represents the
01:47 - remaining motion that it wasn't able to
01:50 - complete
01:51 - and when once we have that we have two
01:55 - choices of what we can do in response
01:57 - that's why I have two examples here so
02:00 - when we hit the surface we can either
02:03 - continue along it sliding along the
02:07 - surface or we can bounce off of it
02:10 - reflecting the movement off of it like
02:14 - light off of the mirror and to do that
02:17 - we need the normal of the surface when
02:22 - you collide with an object you can
02:23 - request it's normal the normal is a
02:25 - vector that represents it's a
02:28 - perpendicular vector to the surface
02:29 - itself so in this way we can tell what
02:34 - direction the surface is facing and what
02:38 - direction the surface that we hit is
02:40 - facing and now we can use that normal to
02:44 - do our collision response and these are
02:46 - the two options if we use that normal to
02:50 - slide the remaining motion then it will
02:53 - move the body parallel to the surface
02:56 - within the distance that the component
03:01 - of the remaining motion is in that
03:04 - direction you see the length of this
03:07 - yellow arrow is not the same as the
03:08 - length of this red one but it is along
03:10 - the x axis the same distance
03:13 - or we can use that normal to reflect the
03:17 - remaining motion which means it's going
03:19 - to use the same angle that it came in on
03:23 - the angle of incidence is going to equal
03:26 - the angle of reflection it's going to
03:28 - bounce off at the same angle these are
03:33 - your two options for how you can respond
03:34 - to the collision with an object so let's
03:39 - look at this in action when I click the
03:41 - mouse
03:41 - I will spawn a ball that green vector is
03:45 - representing its velocity and you can
03:47 - see since I set it to reflect it's going
03:50 - to bounce off at the proper angle
03:54 - I've also created this round obstacle in
03:57 - the middle so that you can see if I
03:58 - spawn a whole bunch of them and they hit
04:01 - it at various angles they will bounce
04:03 - off from the normal of the curved
04:06 - surface just as well as they do from the
04:10 - normal of the horizontal surface and so
04:14 - you can see the length of the green
04:16 - vector doesn't change the velocity
04:18 - remains steady and it just looks like it
04:22 - bounces
04:25 - now alternatively they had space to
04:28 - toggle to slide mode you can see that
04:31 - when the ball hits the surface that
04:35 - green arrow got a little bit shorter
04:37 - because it's only using the horizontal
04:40 - component of the remaining velocity and
04:43 - so if you hit it at a slower speed you
04:46 - are going to only have a little bit of
04:49 - that motion left and that's true of
04:52 - hitting the round surface as well
04:57 - so slide you want to use when for
05:01 - example you have a platformer and you
05:03 - want the player when they land on the
05:05 - surface to still be able to walk along
05:07 - it things like that if we look at the
05:13 - code here you can see there's not a
05:14 - whole lot that's involved I basically
05:18 - have I'm moving the ball at its velocity
05:23 - capturing that remaining motion in this
05:27 - variable motion and then if we collide
05:31 - if we are colliding with an object we
05:33 - get the normal we get that normal vector
05:35 - and then so that we could show both
05:38 - examples I have a reflect variable
05:42 - that's puzzling whether it's going to
05:44 - reflect our slide if we reflect we use
05:47 - the reflect vector method on the motion
05:50 - and on the velocity and if we slide we
05:54 - do the same thing but just use slide and
05:57 - then you move you move one more time to
06:01 - move with the remaining motion that has
06:03 - been altered by your reflector slide now
06:08 - I also included this bounce coefficient
06:10 - in here if you download the project and
06:12 - play around with it you can set this to
06:14 - a lower value set this to lower than one
06:16 - you can see the effect of losing some
06:21 - energy every time it bounces in it'll
06:22 - it'll slow down as it bounces around
06:26 - there's one other very important thing
06:28 - I'll show you so here we have our shape
06:32 - our collision shape is a circle right
06:34 - and you use the inner handle here to set
06:37 - its size but something I see happen
06:40 - quite frequently with students is that
06:43 - they wind up grabbing V
06:47 - outline handles my mistake right and
06:50 - they want to kind of size it like this
06:52 - this need to go out a little bit more
06:54 - right and they wind up having the circle
06:57 - be scaled which you can see here this
07:01 - skate this is now been scaled and the
07:04 - problem is that when you run this you're
07:07 - going to see some problems with your
07:10 - collisions see that especially shows up
07:15 - when you hit the round surface
07:18 - but if you're having glitchy collisions
07:20 - with your kinematic body to be very very
07:23 - important that you go and you check that
07:26 - your collision shape has not been scaled
07:28 - this skill property should never be
07:32 - anything but one by one
07:35 - always use the inner
07:39 - handle to drag it also if you shifted it
07:42 - off-center you can set this back to 0 0
07:45 - so it will be centered on the parent
07:48 - kinematic body shape ok this is true of
07:51 - the kinematic body itself as well you
07:55 - don't want to scale that right if you
07:58 - scale that you're going to get some
07:59 - weird collision stuff happening too so
08:03 - that will do it for this video hopefully
08:05 - you have a better understanding of how
08:07 - the kinematic body collisions and
08:10 - collision response works go ahead and
08:13 - download this project at the link below
08:15 - in the description if you want to try it
08:17 - out and experimental is it with it
08:19 - yourself and I will see you in the next
08:21 - video
08:29 - you