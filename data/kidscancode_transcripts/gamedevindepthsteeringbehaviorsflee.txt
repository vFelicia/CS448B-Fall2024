00:00 - all right this is part three of our
00:03 - in-depth exploration of steering
00:05 - behaviors and in this video the behavior
00:08 - we're going to be looking at is the flee
00:10 - behavior making our sprite flee from a
00:15 - target run away from something so here
00:20 - we are again with our standard random
00:23 - mob running across the screen and what
00:26 - we want to do this time is I want to
00:27 - make the mob flee or a void to the mouse
00:31 - pointer so in the mouse pointer gets
00:33 - close its gonna run away and so with
00:38 - flee we could have it see you know
00:40 - infinitely far like we did with the with
00:43 - the seek but that gets kind of crazy
00:45 - then everywhere on the screen it's
00:47 - always trying to go off the sides
00:48 - because it's always fleeing the mouse
00:50 - what we're gonna do is we're going to
00:51 - make a radius around the mouse pointer
00:54 - and inside of that radius is where the
00:58 - flee behavior will take over you can
01:00 - think of it as the distance the mob can
01:02 - see right and when it sees that it's
01:04 - getting close to whatever it's trying to
01:07 - avoid it's going to avoid it okay so
01:10 - we're gonna set a flee radius and let's
01:16 - just make that 200 pixels okay so that's
01:19 - going to be the size of the circle
01:21 - around the mouse pointer that we're
01:26 - gonna flee okay so let's define that
01:29 - flee behavior so what the flee is gonna
01:37 - do is it's gonna figure out again just
01:40 - like usual the steering vector right the
01:43 - default value of that's going to be zero
01:44 - right we're not gonna be turning if
01:46 - we're too far away from the mouse so
01:50 - what we need to do is we need to figure
01:52 - out how far away is the mouse so we're
01:54 - going to take this the mobs position
01:57 - minus the target and now we have that
02:00 - arrow pointing from the target to the
02:02 - position and if you remember from our
02:05 - seek video we did target minus position
02:10 - right because we wanted the arrow
02:12 - pointing from the
02:13 - mob to the target this time we have the
02:16 - arrow pointing from the target to the
02:18 - mob because we want to flee away alright
02:21 - so this is gonna be pointing the
02:22 - opposite direction is gonna be pointing
02:23 - away from the target and if that
02:27 - distance the length of that distance
02:31 - vector is less than the flee radius then
02:35 - now we know we need to flee so a self
02:39 - dot desired is going to be that distance
02:46 - that we just figured out normalize x max
02:53 - B which is the same as we did in the
02:57 - seek remember we're doing we're pretty
02:58 - much doing the same thing we did in the
03:00 - seek behavior except we're doing it in
03:03 - the opposite direction steer will just
03:06 - be desired minus velocity and if the
03:21 - length of the steer is greater than the
03:26 - max force then we'll just scale it okay
03:42 - and then to draw the you know it let's
03:47 - set a default desired just so that we
03:52 - don't get an error message with drawing
03:54 - our vectors okay so that's our fleeted
03:57 - that's our flee behavior if you're close
04:01 - enough to whatever the target is I
04:03 - forgot to pass the target then you're
04:06 - gonna then you're gonna run away from it
04:08 - okay so we can put that into our update
04:11 - that self dot acceleration is just going
04:15 - to be flee and then the target is going
04:19 - to be position of the mouse and I've
04:26 - just added to the draw vectors here line
04:28 - to draw the circle so we can see the
04:30 - flee radius ourselves so let's run this
04:33 - and you're gonna see the mob running
04:37 - away from the mouse if I turn on the
04:40 - vectors you can see that when it crosses
04:43 - that line it starts running away and I
04:49 - can chase it around and it's always
04:51 - trying to get away now something you
04:56 - might notice though is that if it comes
04:58 - in a little bit yeah actually see that
05:02 - now it's speed is much slower because it
05:05 - stopped fleeing as soon as it got
05:07 - outside the ring and you can be left
05:08 - with a mob that has a very low a very
05:12 - low speed if you time it just right
05:15 - there we go you saw that so so what we'd
05:19 - like to also do is have the concept of a
05:22 - default speed and the default speed
05:24 - should be the maximum speed right so if
05:26 - there's no behavior acting on it if
05:29 - there's no flea force acting on it and
05:31 - it's going slower than the max speed
05:33 - then its desire should be to accelerate
05:37 - up to the max speed and so we can add
05:41 - that into our flee behavior by just
05:46 - setting the instead of having our
05:49 - desired be zero here we're just gonna
05:52 - say right if it's
05:54 - if we're closer than the free rate flea
05:56 - radius this is our desired but otherwise
06:03 - our desired is going to be whatever our
06:06 - velocity is scaled up to max speed and
06:14 - then we can actually unand end these
06:16 - things right and so so now our steering
06:19 - vector becomes away from the mouse if
06:22 - we're close to it or away from the
06:24 - target if we're close to it and
06:25 - otherwise just keep accelerating up to
06:29 - the max speed if you're not going the
06:32 - max speed and then that's gonna give us
06:34 - our steer so now if we turn that back on
06:39 - you can see if I try and get him off the
06:42 - edge see he accelerates back up to his
06:44 - maximum speeds right and I've added a
06:49 - function here that when I press M it's
06:51 - gonna spawn a new mob so if I spawn a
06:53 - whole bunch of them you can see they're
06:56 - all trying to flee away from the mouse
07:08 - all right by now you should be starting
07:10 - to see some of the power of these
07:14 - various steering behaviors with a
07:17 - relatively small amount of code in a
07:20 - really simple code we can produce the
07:24 - impression that we've created some
07:26 - really complex AI system and that's the
07:32 - nature of what's called emergent
07:34 - behavior right simple rules interacting
07:37 - together producing a complex result and
07:42 - it should also be hopefully apparent to
07:45 - you that none of this would be nearly as
07:49 - simple if we weren't using vectors and
07:52 - all of the nice things like you know
07:56 - length and normalize and scale that come
07:59 - along with vectors and vector math that
08:02 - would be really a huge difficult process
08:07 - if
08:08 - we're doing this with individual x and
08:11 - y-components
08:12 - and trig in a trigonometric functions
08:15 - and and all that kind of stuff it would
08:17 - be it would be really hard to keep track
08:19 - of so vectors are really powerful when
08:21 - it comes to things like this can't
08:25 - that'll do it for this video
08:27 - fleeing is a pretty simple process in
08:30 - the next video we're going to continue
08:32 - talking about steering behaviors and
08:35 - we're going to talk about avoiding
08:38 - obstacles things like walls how do you
08:40 - keep from running into the wall and go
08:42 - around obstacles that get in your way
08:45 - all right and I'll see you next time
08:47 - please hit the like button below and
08:49 - subscribe for the next video thanks
09:00 - you