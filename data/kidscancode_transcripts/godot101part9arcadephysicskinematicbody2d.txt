00:00 - welcome back to video 101 in this video
00:04 - we're going to explore how to create
00:07 - basic arcade physics for things like
00:09 - platformers using the kinematic body to
00:12 - the node type so we're starting with a
00:18 - new project and I've created a new empty
00:20 - scene and we're going to add a node to
00:23 - it and the node we're going to use if
00:26 - you recall we've talked before about
00:28 - different collision objects and we used
00:30 - area 2d in the previous examples and for
00:35 - this one we want to use one of these
00:37 - three physics body two DS and
00:39 - specifically we're going to use the
00:41 - kinematic body and this is the one with
00:44 - the little Space Invader icon because
00:47 - this is the one that's used or best used
00:50 - for arcade style physics you want to run
00:53 - around you want to bump into things but
00:55 - you don't necessarily need full-on
00:58 - physics simulation and the overhead that
01:02 - comes with that all right this is good
01:04 - enough for doing platformers and
01:06 - top-down games and whatever else other
01:09 - kind of games you might think of so
01:11 - we're going to make a kinematic body 2d
01:13 - and that's going to be the player and
01:16 - that's going to need a couple nodes
01:18 - underneath it
01:19 - one is going to be a sprite so we have
01:22 - something to look at and the other one
01:24 - is going to be our collision shapes
01:26 - because we're going to need that as well
01:29 - now for the sprite I've chosen some art
01:33 - from this project that I got from open
01:35 - game art and I'll link in the
01:37 - description below where you can go get
01:40 - it too but it comes with some different
01:43 - some different images of the player and
01:46 - so it's this little red haired boy and
01:49 - it has some different animations for
01:51 - running and jumping and so forth and
01:53 - we'll talk about how to do how to use
01:55 - those later but for right now we're just
01:57 - going to use this idle frame and I'm
02:00 - going to drop that in the texture it's
02:04 - going to rename these two sprite and
02:07 - this one too collision
02:11 - and then we just need to make our
02:14 - collision shape but before we do that
02:16 - you might have noticed how enormous this
02:18 - sprite is all right this blue or purple
02:21 - rectangle is our screen and so this he
02:25 - doesn't even fit on the screen I used
02:26 - too tall this character is about 500 by
02:30 - 700 really nice super-high resolution
02:34 - that you can use in you know all sorts
02:38 - of games but it's way too big for our
02:41 - purposes here for sure so we definitely
02:43 - want to resize that so I'm going to go
02:45 - to the sprite and I'm just going to
02:47 - change the scale to about 20 percent 0.2
02:51 - and that's going to give us a much more
02:54 - manageable size for this guy so you can
02:57 - run around the screen and then we just
03:02 - need to make our collision shape now we
03:04 - have some decisions here
03:06 - on what kind of collision shape we want
03:08 - to use all right there's a lot of
03:09 - options rectangle is definitely one of
03:13 - the most common ones but there's also
03:14 - other options now depending on how you
03:19 - want to make things you can you can do
03:21 - this in a lot of different ways you
03:22 - could make a small rectangle that's just
03:25 - covering the seat area so that that's
03:28 - the part that lands on the ground and
03:29 - collides with things you could do a lot
03:34 - of other things I'm going to use the
03:35 - capsule shape this is a very common one
03:39 - to use for this style of character you
03:42 - see it's called a capsule shape because
03:43 - it's basically an elongated round shape
03:48 - of the round ends so we just use the
03:51 - handles here to resize it right I'm
03:53 - going to stretch it out to the size we
03:55 - want and then we're going to grab the
03:56 - sides which also essentially grab the
03:59 - side first
04:00 - and we're bringing it back down and we
04:03 - just want this to cover the main area of
04:07 - the player and this is going to make us
04:11 - stop when we land on the ground it's
04:13 - going to make a stop when we bump into a
04:14 - wall and it covers the shape pretty well
04:18 - that covers the sprite pretty well
04:21 - so let's just save this player scene and
04:26 - we're ready to start talking about how
04:27 - to make it move around so we're going to
04:29 - add a script and create so when you're
04:35 - using a physics body it is recommended
04:38 - in the documentation that you use the
04:41 - fixed process you set that to true and
04:47 - that you do all of your movement and
04:50 - collision code and everything like that
04:51 - in the fixed process function that's
04:56 - because the expressives function runs at
04:59 - a fixed frame rate Delta will should
05:02 - always be the same one sixtieth of a
05:05 - second and all of the physics
05:08 - calculation happens in that time frame
05:10 - so your code will be synced up and you
05:13 - won't have any hopefully physics errors
05:17 - or glitches happen when you're moving a
05:20 - physics body you don't just change it
05:23 - you don't use set pause you don't set
05:24 - its position like you like we did with
05:27 - the area and that's because it needs to
05:31 - do the physics calculation to see when
05:33 - it moves if it runs into something so
05:36 - instead you use the move function and in
05:40 - the move function you put how far you
05:43 - want it to move right typically that's
05:45 - going to be your velocity all right and
05:48 - we'll have a variable for that let's go
05:51 - ahead and set that up bail for velocity
05:53 - and that's going to be a vector two and
05:57 - I usually like to have characters that
06:02 - don't you know instantly start moving
06:04 - when you press the key and then
06:05 - instantly stop I like to have some sort
06:07 - of acceleration so we're also going to
06:11 - have an acceleration vector that is
06:13 - going to be what we apply our motion to
06:18 - and it's going to affect the velocity so
06:19 - when we press a key we're going to
06:22 - accelerate in the direction we pressed
06:24 - okay and how much we do that well that
06:29 - can that can vary so in the move
06:31 - function we're just going to put
06:33 - velocity times
06:34 - Delta so move it whatever your speed is
06:37 - times the time step and then we need to
06:42 - set our acceleration by pressing the
06:44 - keys we're also going to set up a couple
06:47 - of constants for how we want this to
06:51 - function for example the acceleration
06:54 - when we press a key now fast do we speed
06:58 - up to our running speed and for that
07:01 - matter we're going to have a max speed
07:03 - this is the maximum speed that the
07:06 - player will run at pixels per second and
07:10 - all of these and we're also going to
07:12 - have a friction and that's going to be
07:16 - how quickly you slow down okay now all
07:20 - of these can be adjusted to give you a
07:22 - wide range of behavior how your movement
07:25 - works but we're going to stick with that
07:27 - right now
07:28 - so in our fixed process our acceleration
07:32 - we're going to use the left and right
07:34 - arrow keys to run side-to-side so we're
07:36 - talking about the x-direction and we're
07:39 - just going to use the input use action
07:43 - pressed UI right - is X and pressed
07:51 - UI left right this is going to give us a
07:57 - what 1 or 0 minus a 1 or 0 will dump
08:02 - both keys you're going to have 1 minus 1
08:04 - that's 0 you won't move it as you're
08:06 - pressing in both press right you'll have
08:08 - 1 minus 0 and if you press the left you
08:10 - will have 0 minus 1 which is perfect to
08:14 - the left should be in the negative
08:15 - direction you just want to take that
08:16 - acceleration and multiply it by our
08:20 - constant so it will be of the right
08:24 - magnitude next our velocity is just
08:27 - going to we're going to add the
08:31 - acceleration times the time step so our
08:35 - velocity will increase if we're holding
08:37 - it down but if we do that we're going to
08:39 - keep accelerating as long as we hold the
08:41 - button down and our speed will get
08:44 - higher and higher and higher so we want
08:45 - to make sure we keep it at the Mac
08:48 - speed so to do that we're going to take
08:51 - the X velocity and clamp it and the
08:54 - clamp function just lets us set a
08:56 - maximum and minimum value for that for
09:01 - that parameter so for the velocity X we
09:03 - want to set it to the minimum should be
09:06 - negative max speed and the maximum
09:10 - should be positive XP that way we'll
09:13 - never get above 500 in either direction
09:16 - and then we can move and if you try this
09:20 - out you will see that you can run to the
09:24 - left and the right by holding down the
09:27 - arrow keys but of course you don't stop
09:29 - right when you let go of the key you
09:31 - keep going and so we need to have the
09:37 - character stop when you let go of the
09:39 - key and that's what our friction is for
09:45 - so what we're going to do is we're
09:47 - basically just going to check if our
09:51 - acceleration in the x-direction is zero
09:55 - so we are not pressing the keys down
09:57 - right then we're going to apply friction
09:59 - so the acceleration is going to be
10:02 - whatever the velocity is times friction
10:06 - times Delta and so if we're not pressing
10:12 - the keys down then there's going to be
10:15 - friction as negative so so we'll be
10:18 - multiplying by a negative number so
10:20 - it'll be in the opposite direction of
10:22 - whatever direction we're traveling and
10:24 - that's going to let the player close to
10:27 - a stop all right so when I let go it
10:29 - stops okay and I set friction fairly
10:36 - high so he stops pretty fast all right
10:40 - if you make the friction a little lower
10:41 - it'll feel like you're kind of on an on
10:43 - an icy surface and you're it's very
10:45 - slippery but we don't want that now we
10:50 - need some gravity but we don't want to
10:53 - just put it in now because we'll just
10:54 - fall off the bottom of the screen we
10:56 - need something to land on so we're going
10:58 - to make a platform I'm going to make a
11:00 - new scene
11:01 - and the platform is going to be also a
11:07 - physics body but because the because the
11:10 - platform doesn't need to move instead of
11:14 - using kinematic body we can use static
11:16 - body and static bodies are special
11:18 - physics bodies that are just set up to
11:20 - be stationary so they don't include any
11:23 - code for moving it around so they're
11:25 - simpler they just need to sit in a spot
11:27 - and stop things when they run into them
11:29 - we're going to use that for our platform
11:32 - and the platform also needs a sprite and
11:38 - it also needs a Clayton shape now the
11:44 - sprite I'm going to use just to keep
11:47 - things simple right now is I just have a
11:49 - plain green square okay
11:53 - plain green square that just will be
11:57 - whatever size we want it to be and
12:00 - [Music]
12:02 - rename these and then we can use the
12:10 - sprite scale to set this whatever sizing
12:13 - one so let's set the scale to let's say
12:19 - 200 wide I want to multiply it by say 20
12:25 - yeah okay so that's going to be my
12:29 - platform in a collision shape we're just
12:32 - going to use a rectangle and we'll just
12:37 - set the extents of that rectangle to be
12:42 - the extent of our sprite so it looks
12:45 - like a solid thing okay save that and
12:49 - that will be our platform so we'll go
12:54 - back over to our main scene and we'll
12:56 - put a instance of the player you have to
13:00 - click on the node we'll put an instance
13:03 - of the player in there and we'll put an
13:05 - instance of V platform in there okay
13:08 - just going to put the platform in the so
13:11 - the bottom of the screen and we'll have
13:13 - the player spawn up here
13:14 - in the middle of the air and now we can
13:18 - add some gravity to the player so we'll
13:23 - set a constant for how strong we want
13:25 - our gravity to be figure this number the
13:30 - faster they will fall it's positive
13:33 - because we want it to go downwards and
13:37 - gravity is going to affect our Y
13:39 - acceleration so right here we can just
13:41 - say acceleration dot y equals gravity
13:47 - and that's it because we're going to
13:49 - apply the acceleration to our velocity
13:51 - and we're going to move in our velocity
13:53 - so let's hit run on our main scene and
13:56 - you will see you and simply fall down
13:59 - but now you're going to notice a problem
14:01 - I'm pressing the arrow keys I can't move
14:04 - so I fell down and I stopped on the
14:06 - platform but now I can't walk anymore
14:08 - so what's going on well we need to talk
14:12 - a little bit about how the kinematic
14:15 - body collision works so let's look at
14:18 - this example diagram so right now when
14:21 - we're moving we have our start position
14:24 - and we have two forces acting on us
14:28 - gravity which is pulling downwards and
14:31 - pressing the arrow key which is pushing
14:34 - us to the right so our velocity vector
14:37 - is going to be at an angle something
14:39 - like this so when we move we should move
14:42 - from this position to this position and
14:45 - that's what happens when we're falling
14:50 - but when there's a platform in the
14:52 - middle what happens is we can only move
14:55 - this far right we can't move the full
14:58 - distance we want to move as soon as a
15:01 - collision happens the object will stop
15:05 - moving so as soon as it detects
15:07 - colliding and that's that's detected by
15:10 - a function called is colliding so is
15:13 - colliding becomes true as soon as the
15:17 - object collides with another object so
15:20 - we've moved to here and we've stopped
15:21 - but there's still some remaining
15:24 - movement left that isn't happening
15:27 - and the problem becomes when we're
15:31 - standing on the platform we still have
15:34 - gravity pulling up downwards and when we
15:36 - press the arrow key to the right that
15:39 - means our desired move is still a
15:42 - diagonal like this well it can't move
15:44 - diagonally like this it instantly
15:46 - detects a collision is gliding is true
15:49 - and stops moving that's why we can't
15:52 - move right now even when we press the
15:53 - arrow keys because we're trying to move
15:54 - down into the platform because gravity
15:57 - is always pulling us down so the way
16:00 - that we fix that is by using something
16:04 - called the collision normal this is the
16:07 - collision normal a normal is a vector of
16:11 - length one it's called that's why it's
16:13 - called normal whose normalized and it's
16:15 - perpendicular to the surface of whatever
16:18 - you collide with so for example of the
16:21 - ground this would be the collision
16:22 - normal zero negative one if we ran into
16:25 - a wall
16:26 - the collision normal would be pointing
16:27 - right or left in the X direction so what
16:31 - we want to do is take that remaining
16:33 - unused movement and slide it
16:37 - perpendicularly to the collision normal
16:40 - so that way if we're moving diagonally
16:42 - we would hit and fly it along and if
16:44 - we're standing on the platform you'll
16:47 - slide along it to the right when we try
16:49 - and move and we won't try and go down
16:51 - into it okay so that's what we're going
16:54 - to do in our code so this move function
16:57 - where we tell our body how far we want
17:00 - it to move if it collides it will return
17:04 - that unused portion of the movement
17:07 - vector so we're going to save that in a
17:11 - variable called motion and so this is
17:14 - the remaining motion that we didn't get
17:15 - to do could we hit something and so
17:19 - normally you know if you're in free
17:22 - space that would be zero zero because we
17:24 - were able to move the full amount so if
17:26 - we hit something that will have some
17:28 - vector in it so now we're going to say
17:31 - if we are colliding is colliding is true
17:36 - then we need to get the collision normal
17:39 - you can find out what that is
17:41 - just call it n get collision normal now
17:48 - will now will have that normal which
17:50 - since we hit the ground are this we at
17:52 - the platform is going to be 0 negative 1
17:54 - and then we're going to take motion and
17:57 - set it equal to the motion vectors slid
18:02 - along the collision normal and that
18:04 - slide motion and now that we have that
18:08 - remaining motion vector pointing in the
18:11 - slide direction we can move again by
18:13 - that vector and now we'll be able to
18:16 - move but you're going to notice two
18:18 - things one is it's a little choppy
18:23 - there's something going on and watch
18:25 - what happens when I want run off the
18:27 - edge let's see that it's almost
18:31 - teleported it's all so fast why did it
18:34 - fall so fast
18:35 - well our velocity vector is still
18:40 - pointing downwards even though we hit
18:43 - the ground and gravity is making it
18:47 - point more and more you know point more
18:50 - and more downwards and so our velocity
18:52 - vector is really getting really really
18:54 - large the longer we stand on the ground
18:56 - so as soon as we fall off we're suddenly
18:58 - going to shoot downwards really fast so
19:01 - we're going to fix that by doing the
19:03 - same thing that we did with motion and
19:07 - sliding the velocity as well and what
19:14 - that'll do is let us run along the
19:18 - ground and when we fall you will start
19:22 - falling from a 0 Y velocity and start
19:26 - accelerating and that was a lot lot
19:28 - better so that is the basics of the
19:31 - kinematic body 2d in the next video we
19:35 - will talk about how to make it jump and
19:39 - also how to animate to the sprite so
19:43 - that we can look like we're running
19:45 - instead of just sliding along the ground
19:47 - alright thanks for watching and I'll see
19:49 - you next time
19:57 - you