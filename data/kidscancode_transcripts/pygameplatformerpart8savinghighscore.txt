00:00 - welcome back to your game development
00:02 - our game in this video we're going to be
00:04 - adding persistent data to our platform
00:08 - game and what I mean by that is a high
00:10 - score that will stick around after we
00:13 - quit playing and come back the next time
00:15 - ready let's get started so in this video
00:19 - we want to talk about doing file i/o
00:21 - which is written like this
00:24 - io stands for input and output so it's
00:29 - how you have your program read and write
00:32 - information from another file it's
00:35 - specifically for this example that we're
00:37 - going to do we want to do a high score
00:39 - which means we want to save whatever the
00:44 - high score is we want to save that so
00:45 - that when you quit the program the next
00:47 - time you run it you'll be able to is the
00:50 - program will be able to see that high
00:52 - score and it's saved and the only way to
00:56 - do that since when the program ends
00:58 - right all of our variables stop existing
01:00 - we can't save it in the program we need
01:03 - to save it to a separate file okay so
01:08 - what I'm gonna do is I'm gonna go over
01:10 - here to settings and I'm going to add
01:11 - another setting constant here to tell us
01:15 - what the name of the file we're gonna
01:16 - keep our high score is so that's gonna
01:20 - be high score dot txt it's just gonna be
01:22 - a simple text file with a number in it
01:25 - and that number will be whatever the
01:26 - high score is and so this would be the
01:30 - name of the file that the program will
01:31 - look for to open and we're also going to
01:35 - need to over here in our main we're
01:39 - going to import the path command this is
01:45 - gonna help us locate other files on the
01:48 - computer if you have watched the shmoop
01:52 - game tutorial you know when we went
01:55 - through loading our files we talked
01:56 - about different operating systems and
01:59 - how Windows uses backslashes and OS 10
02:03 - and Linux use forward slashes and all
02:05 - that can get confusing to keep track of
02:08 - where files are so we use this path
02:10 - command to
02:12 - build our file locations automatically
02:15 - and I'll link to the video below if you
02:18 - want to go back and review how that
02:20 - worked now the first thing we want to do
02:24 - is when the program starts up we want to
02:25 - go look at that high score file and read
02:28 - the value in so we know so the game does
02:30 - what the high score is and so we can go
02:34 - over here to our startup when we first
02:38 - start up here and create the game object
02:41 - we can load the file now planning ahead
02:44 - we know we're also going to load lots of
02:46 - you know graphics and sounds and things
02:48 - when we add those so what I'm going to
02:50 - do is I'm just going to add a load data
02:56 - function so that we have that all
02:59 - grouped together okay and so this will
03:05 - be where we'll put all the graphics
03:06 - loading and the sound and all that kind
03:08 - of stuff but right now we're just gonna
03:10 - load the high the high score and so we
03:16 - need to figure out what folder our
03:19 - program is located in right we're on the
03:22 - computer it lives so we can use that
03:25 - path command to figure that out right
03:30 - and then that way we can have you know
03:33 - other folders that hold our graphics or
03:35 - and and so on our high score file we're
03:38 - just going to say that in the same
03:39 - folder that our program lives in now now
03:44 - we need to open that file and when you
03:47 - open a file in Tython you know the
03:51 - computer goes and locates that file on
03:54 - the hard drive and it opens it for
03:57 - reading so that it can look inside the
03:59 - file and see what's inside it
04:00 - and then you can do whatever you need to
04:03 - do you know write information to it read
04:06 - information out of it and then at the
04:08 - end you need to close that file because
04:11 - you don't want you know what can happen
04:15 - is something bad can happen if more than
04:16 - one program opens the file at the same
04:18 - time and they're both trying to do
04:19 - different things to it so you want to
04:22 - make sure you close the file so you're
04:23 - no longer doing things to it
04:25 - and a lot of times programs will run
04:29 - into trouble because they you know write
04:31 - the code to work with a file and then
04:32 - they forget to close it you know
04:35 - somewhere and everything work seems to
04:36 - work fine for a while and then you get
04:38 - strange errors later on that become that
04:40 - can be kind of difficult to track down
04:42 - so in Python a great thing you can use
04:45 - and the fancy name for it is a context
04:49 - but I'll explain it this way if we we
04:53 - make we basically make a little block of
04:55 - code that operates with the open the
04:59 - file open command okay
05:01 - file open command or the open command is
05:04 - the one we use to open a file and so
05:07 - we're gonna open our we're gonna open
05:12 - our high score file so we just join use
05:16 - path giant to join whatever folder we're
05:19 - in with the name of the high score file
05:23 - we decided to use and that will open the
05:30 - file and then when you open a file you
05:33 - have some options that you can set okay
05:36 - and there's a variety of ones you can
05:40 - use you can use our if you want to read
05:42 - from the file
05:42 - you can use you can put a B if it's a
05:46 - binary file or a t if it's a text file
05:49 - you can put a W if you want to write
05:52 - sometimes you want to only put stuff at
05:54 - the end of an existing file there's a
05:56 - lot of different options okay I'm going
05:59 - to use the W here because the W will
06:03 - actually open the file for reading and
06:05 - for writing but also if the file doesn't
06:08 - exist which it doesn't right now cuz we
06:11 - haven't created it then it will create
06:13 - the file so otherwise if I just tried to
06:16 - do R here it's gonna look for the file
06:18 - and if the file doesn't exist we'll get
06:20 - an error message and the program ends
06:21 - and you never really want that so I want
06:25 - to create the file if it doesn't exist
06:27 - okay and then we just give this a name
06:30 - what was call it f for short so in this
06:34 - little width sorry with block
06:37 - it's gonna work with the open file and
06:41 - when this block of code ends the file
06:43 - will automatically be closed okay so now
06:48 - we could read from the file now I could
06:50 - do it this way I could say give it to a
06:56 - variable here called high score and we
07:01 - could just save F dot read so read from
07:04 - the file whatever is in there which is
07:07 - gonna come in as a string and then
07:09 - convert it to a number and then I would
07:11 - have number but think about what's gonna
07:14 - happen if I just created this file
07:16 - because it didn't exist then the file is
07:18 - empty then what I read out of it is
07:20 - nothing you know there's nothing
07:23 - existing there so you can't take and
07:25 - make an integer out of that string I'm
07:30 - sorry that string you know there's
07:31 - nothing inside it so you'd get an error
07:33 - message so again we have a problem where
07:35 - what do we how do we cover all the
07:37 - possibilities so that we don't get an
07:38 - error message and our program crashes
07:40 - well this is where we want to use
07:42 - something called a try accept and so
07:50 - what what this does is lets you have two
07:54 - different options something that you can
07:56 - some code that you can run and then some
07:59 - other code you can run in case that code
08:01 - breaks or has an error so what we want
08:06 - to run is self dot high score equals
08:10 - into F dot read all right we want to run
08:14 - that and if that works because there was
08:17 - something in the file there was a number
08:18 - in the file then we're fine
08:21 - but if it doesn't work then we get an
08:23 - error or what can also be called an
08:25 - exception which is another word for
08:27 - error if we get that error then we're
08:32 - gonna set self dot high score equal to
08:34 - zero so it didn't find anything in the
08:37 - file
08:38 - Ouimet maybe we just created it or maybe
08:41 - something went wrong another time and
08:42 - there's something wrong in the file so
08:45 - forget it we're just going to call the
08:46 - high score zero
08:49 - now we've so now we've got our high
08:53 - score being read okay now to make sure
08:57 - this is to see if this is working what
08:59 - we're gonna do what we'll do is we'll go
09:01 - down to our shows Start screen and we'll
09:07 - add something on there to show what the
09:10 - high score is okay so I'm just gonna add
09:14 - another draw text command and I'm gonna
09:19 - say the high high score and I'm gonna
09:29 - draw that at the same size we've been
09:32 - doing white with over two and I'm gonna
09:39 - put it I'm just gonna stick it at the
09:41 - top of the screen okay so now we should
09:44 - be able to run our program it's going to
09:47 - not see the file so it's gonna create it
09:50 - so I'll open up the file manager here
09:54 - and you can see this is the folder this
09:55 - working folder is where we're currently
09:58 - adding the code so you see there's no
10:00 - high score text file but now when I run
10:04 - this program
10:09 - oops I forgot to do what I do
10:15 - oh I wrote der name here twice when I
10:19 - was talking I want I want the directory
10:21 - name of the file yeah I see that
10:24 - I just made a little type of I was
10:25 - talking all right so we run our program
10:29 - notice over here in the folder this high
10:31 - score text file has been created now it
10:33 - just came into existence and obviously
10:35 - there was nothing in it so our exception
10:37 - triggered and we set the high score to
10:39 - zero so now we can see what our high
10:41 - score is
10:47 - okay so now we have our high score being
10:50 - read we know what it is
10:52 - hopefully you can see how these try and
10:55 - accept clauses are very useful anytime
10:58 - you need to run you're gonna run some
10:59 - code and you're not entirely sure where
11:01 - you you know there's a case where it
11:03 - might fail you can have basically as
11:07 - safety as opposed to if we ran this
11:10 - without you know we could have our
11:12 - program just crash at the high score
11:13 - file wasn't there for some reason it got
11:15 - deleted or something went wrong then the
11:17 - program won't even run and that's
11:19 - frustrating so okay so we have our high
11:22 - score in our game now we need to see if
11:26 - the player you know if the player beat
11:28 - it so I'm gonna go to game over screen
11:31 - here and the game over we're going to
11:37 - add a little message here if they got a
11:41 - if they got a high score we also needed
11:43 - to save that high score to the file so
11:45 - that it's so it's permanent so I'm going
11:50 - to say here I'll just put this after the
11:55 - other text here if the score is greater
11:59 - than the high score so we did it we got
12:03 - a high score then then we make the high
12:09 - score equal to the score now we have a
12:11 - new one alright and we want to say
12:14 - something to congratulate the player for
12:18 - doing it so we're gonna say you got a
12:25 - new high score might Center it and I'm
12:32 - gonna put that at height over to where
12:35 - we is where we put the score so I'm
12:38 - gonna put that right below where we
12:43 - wrote the score so you see where a score
12:45 - is and then you get this little message
12:46 - saying new high score now I'm also going
12:49 - to open up the file to write it so just
12:51 - like we did in the loading
12:58 - we're gonna we're gonna open up high
13:02 - score file with a W because we are gonna
13:06 - be writing to it and we're going to just
13:12 - say F dot right okay so we're going to
13:19 - write what the score was and we need to
13:23 - convert it to a string because this is a
13:25 - text file and that will do that now if
13:30 - we didn't get a new high score then I'm
13:34 - also going to just say what the high
13:36 - score was so I'm just gonna do like I
13:39 - did here I'll just copy and paste that
13:44 - down here and I'll click that at the
13:49 - same place right over to plus 40 all
13:56 - right let's see how it goes
14:04 - our high score is zero so I'm gonna play
14:06 - I'm just gonna jump a little bit now my
14:09 - I got a 20 so hopefully when I fall off
14:11 - hey look we got a new high score
14:14 - press the key to play again well I will
14:16 - but first I want to just take a look
14:18 - let's go look at our high score file
14:20 - yeah see it has a 20 in there so we
14:23 - correctly wrote what we were supposed to
14:25 - write in there and now if we run it
14:30 - again I'll jump up a little bit higher
14:34 - and get hey I got a new high score of 50
14:38 - now let's make sure if I'd died yeah see
14:43 - I got 20 the high score is 15 okay so
14:46 - everything is working the way we want it
14:49 - to all right thanks for watching as
14:55 - always if you have any questions please
14:57 - post them below hopefully you can see
15:00 - how this would be useful and could be
15:03 - extended to add to other programs to be
15:06 - turned into something a little more
15:10 - complicated like a save game things like
15:13 - that are just extensions of this basic
15:16 - process this is the simplest example I
15:19 - could come up with for reading or
15:21 - writing from a file just putting one
15:22 - number in there all right next time we
15:27 - will come back and we will add more to
15:29 - our platform game I think next time we
15:32 - will start talking about graphics
15:35 - alright thanks for watching
15:44 - you