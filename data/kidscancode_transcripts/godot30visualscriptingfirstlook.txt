00:00 - hello and welcome to another Godot game
00:02 - engine tutorial in this video we're
00:04 - gonna take a look at the new visual
00:05 - scripting feature of Godot 3.0 if you're
00:08 - interested in trying it out yourself
00:10 - you're gonna need a recent alpha build
00:12 - I've included a link in the description
00:14 - below to where you can find daily builds
00:17 - but before we start I want to stress
00:19 - that this is an early look at visual
00:21 - scripting it's very possible that there
00:24 - will be changes between now and 3.0
00:26 - release my hope is that after watching
00:29 - this some of you will be interested in
00:31 - testing this new feature out and
00:33 - reporting issues okay let's take a look
00:36 - at visual scripting in Godot to start
00:40 - I've just made a small scene here that
00:41 - has a background and a star which is a
00:44 - sprite that we're going to attach a
00:46 - visual script to to make it move around
00:48 - the scene so we want to attach a script
00:51 - to the star so we're gonna click on the
00:53 - star node and click the attach script
00:55 - button and for language we want to
01:00 - choose visual script right you might
01:02 - have it on Gd script if you have created
01:05 - GV scripts before we're gonna make a
01:07 - visual script and it inherits from
01:10 - sprite that's the type of node that we
01:12 - are using
01:13 - there aren't any templates to choose
01:15 - from for visual scripts so that's gonna
01:17 - stay that and here we're gonna choose
01:20 - sprite for the name and click create and
01:24 - that brings us to the script editor over
01:27 - here on the left you can have a couple
01:29 - of panels one of them shows the various
01:32 - scripts that you have in your project
01:35 - this one right here shows you the base
01:38 - type that's what type of node this
01:41 - script is attached to if for some reason
01:44 - you have changed it or need to change it
01:47 - for some reason you can click here and
01:48 - choose the object type that you want to
01:51 - use then here you have your members
01:55 - these are the things that are going to
01:56 - belong to the script you have functions
01:58 - variables and signals and we'll talk
02:01 - about all those a little later in the
02:03 - video and then here you have a place
02:06 - where you can search for through the
02:08 - list of available nodes and before we
02:11 - move on I want to talk a little bit
02:12 - about terminal
02:14 - the word node is going to be used in two
02:17 - different ways when you're using visual
02:19 - script you might be referring to the
02:21 - scene nodes over here in this in the
02:24 - tree which are the Godot objects that
02:26 - you are adding to your scene to get your
02:28 - different functionality but then in
02:31 - visual scripting you're also going to
02:32 - have nodes which are the blocks that
02:36 - you're going to put here in the center
02:38 - of the script editor and connect with
02:41 - lines to create a graph which is a
02:45 - series of nodes that are connected in
02:47 - some order and so we might be referring
02:51 - to nodes over here which are the nodes
02:54 - of your project or the visual scripting
02:56 - nodes and usually you're gonna figure
02:59 - out which one is which by context but
03:01 - just keep in mind that that word does do
03:03 - double duty to start we need to create a
03:08 - graph where we can place our nodes and
03:10 - one visual script can contain multiple
03:13 - graphs in general each graph is going to
03:17 - represent a different function and so
03:20 - let's start by making a function now
03:22 - over here in the functions you can click
03:24 - the plus to create your own function any
03:27 - function you want you give it a name or
03:29 - you can click this little drawer icon
03:31 - which is going to let you choose one of
03:33 - the built-in functions that Godot offers
03:37 - and the one we're gonna select is the
03:40 - ready function that's the function
03:42 - that's called when the object first
03:44 - enters the scene tree so it's the
03:47 - starting code for the object so click
03:50 - open and now we have a ready function
03:53 - and this is our graph now navigating the
03:57 - graph there's not a lot to it you have a
04:02 - grid here you can drag the node around
04:04 - and you can see right now it's snapping
04:06 - to the grid you can also turn off the
04:10 - grid and place them however you like you
04:13 - can change the size of the grid here if
04:16 - you want the grid to be bigger then you
04:20 - get bigger squares that you can snap
04:21 - around to you can also zoom in and out
04:26 - although at
04:27 - stage at this build of Godot the zoom is
04:31 - a little fuzzy the font doesn't have any
04:35 - anti-aliasing in it so it looks a little
04:37 - chunky when you zoom in and when you
04:40 - zoom out it becomes pretty much
04:41 - unreadable I'm pretty confident that
04:44 - will be fixed by the time we hit release
04:47 - but just be aware at the time of this
04:48 - recording the zoom isn't isn't great so
04:51 - you're gonna want to stick to the
04:53 - one-to-one zoom level so here is our
04:57 - visual script node they're all pretty
05:00 - much going to look similar they have a
05:01 - title what type of node it is and then
05:05 - they're going to have some connections
05:07 - like this little triangle here that
05:08 - allow you to drag a line and connect it
05:11 - to another node now let's look at
05:14 - another node type as an example I'm
05:16 - going to click here in the available
05:18 - nodes and type add so I can find the add
05:20 - node and if I drag that out this is a
05:24 - node that takes two numbers a and B or
05:26 - two objects I should say a and B and
05:28 - adds them together and now you can see
05:30 - we have some more connections these
05:32 - connections are called ports and the
05:35 - ports on the left side are for input and
05:38 - the ports on the left side are the
05:40 - output and these ports come in two
05:43 - different kinds the triangular ones like
05:46 - on the ready function are called
05:48 - sequence ports they control the program
05:51 - flow so after this node executes
05:53 - whatever it does it's going to transfer
05:57 - execution to the next node it connects
05:59 - to these circular ports our data ports
06:03 - and that means you have data comes into
06:06 - them and data comes out you can also
06:10 - change some of the properties of these
06:13 - visual script nodes over here in the
06:15 - inspector
06:15 - for example the add node here we see
06:19 - these data ports are labeled any that
06:22 - means you can pass in any type of data
06:26 - but if you want to specify what type of
06:28 - data this block should process you can
06:32 - go over here to the inspector and it has
06:35 - a property called type so we can change
06:37 - that let's say we wanted them to be
06:39 - integers and now the
06:41 - block visually changes the color
06:44 - indicates what type it is it also has a
06:47 - into label now and it we now know that
06:50 - we need to pass in integers and we're
06:52 - gonna get out an integer so you won't be
06:54 - able to connect an input that is not an
06:56 - integer any longer here and it also
06:59 - means since it knows what type it is you
07:01 - could fill in any of these values if you
07:03 - just want to add five to any number that
07:06 - you put in you could put a five here and
07:08 - then you just plug in an a value it'll
07:11 - add whatever that is to B and you'll get
07:13 - out a plus five all right let's start
07:17 - building our script I'm gonna delete the
07:19 - add block here by clicking the X and
07:22 - what I want to do is I want to take my
07:25 - star and I want to set its position when
07:29 - the script starts so when we hit play I
07:31 - want to make sure the Stars position is
07:32 - put up here in the upper left-hand
07:34 - corner so I want to set its position
07:36 - property so over here in the script if
07:39 - we click on this star in the inspector
07:42 - we will see all the stars properties and
07:44 - one of them is the position so I can
07:46 - take the position and I can drag it out
07:48 - onto the graph and if I let go I'm going
07:53 - to get a setter for the position and it
07:57 - actually shows me the current value
07:58 - right now when you drag a property out
08:02 - you see the message down there at the
08:04 - bottom if I hold in the meta key and
08:06 - drop it I'm gonna get a getter so I can
08:09 - have whatever that value is to input
08:12 - into something else but I want to use
08:15 - this setter so I want to set the
08:17 - position so I want to drag the sequence
08:22 - node and connect these so that after the
08:24 - ready starts the first thing it's going
08:25 - to do is set the position and I can do
08:28 - this in two ways if I have a vector node
08:32 - I can use that as the input for the
08:35 - position or I can just click here and
08:38 - type that I want it to go to 50/50 and
08:41 - it's going to set the position value to
08:42 - 50/50 so over here on our scene if we
08:47 - have the sprite over here when we hit
08:50 - play it's going to place it at 50/50 and
08:55 - be up
08:55 - in the corner but instead of typing
08:59 - these this value in here it makes more
09:01 - sense for us to use a variable so let's
09:03 - create a variable by clicking the plus
09:05 - right here and for the new variable I'm
09:09 - going to click it and type start
09:11 - position that's what I want the variable
09:13 - named
09:13 - and then if you right-click on it and
09:16 - choose edit variable you have some more
09:19 - options so I want the type of this
09:22 - variable to be a vector 2 so I'm going
09:24 - to choose that and then you can click
09:26 - here and set the value but instead of
09:29 - typing a value in there what I'm gonna
09:32 - do is click export and that's going to
09:35 - allow me to see this variable in the
09:37 - inspector so if I click on the star over
09:39 - here I have start position and I can set
09:42 - it here and now I have this start
09:49 - position variable so if I drag it out
09:51 - onto the graph I will get a reference to
09:55 - it and I can take its value and connect
09:59 - it to the input port of the set node and
10:02 - now notice that the manually typed
10:06 - values disappear right you can't type in
10:08 - a manual value if you have an input port
10:10 - setting the value so now the position is
10:15 - going to be set to whatever the value of
10:16 - that variable is so now let's make this
10:19 - star move so we want to do something in
10:22 - the process function so I'm going to
10:24 - click again the drawer icon here and
10:27 - choose the process function this is
10:30 - going to be the code I want executing
10:32 - every frame and notice the process
10:35 - function has its sequence port but it
10:38 - also has an output data port of the
10:40 - Delta time which is a float value which
10:43 - we can use for things as well so
10:46 - skipping ahead just a bit I've dragged
10:48 - in another position setter here and I've
10:50 - created a variable called velocity which
10:53 - I'm setting to 100 comma zero so I just
10:57 - want this sprite to move to the right so
11:00 - I want to add to this position
11:03 - every frame that velocity times Delta
11:09 - so there's a couple ways I could do this
11:11 - I could take the velocity variable and I
11:15 - could multiply it by Delta then I could
11:21 - get the current position add those two
11:23 - things together and set the position to
11:26 - that or what I can do is I can take this
11:30 - set node and over here the assign
11:36 - operator I can change this to add and
11:40 - see now it says self dot add so that's
11:43 - going to take whatever comes in here and
11:44 - it's going to add that to the position
11:47 - so all I need to do is multiply velocity
11:50 - times Delta so I'm going to need a
11:52 - multiply operator I'll bring that out
11:56 - here so this lets me multiply any two
11:58 - things so I want to multiply the Delta
12:04 - times the velocity and I'm going to
12:08 - slide this over and I'm going to connect
12:12 - that to there so now every frame I want
12:15 - to add velocity times Delta and if we
12:20 - run that we should see our sprite moving
12:24 - to the right now just like when you
12:31 - write code in a written programming
12:34 - language you want to be careful about
12:38 - sticking to a consistent style and
12:41 - keeping your code readable and these
12:44 - nodes will connect and work fine no
12:46 - matter how you drag them around so if
12:48 - this stuff was all around like this it's
12:50 - still gonna work but this is a lot
12:52 - harder to read because you've got to
12:54 - follow these little lines around and
12:56 - they're crossing over each other and
12:58 - that's very messy so in general because
13:02 - inputs are on the left and outputs are
13:04 - on the right your graph is going to tend
13:09 - to go from the upper left and and head
13:14 - down into the right as you connect up
13:17 - nodes so you want to try to do follow a
13:20 - couple simple rules like do not cross
13:23 - the lines try and keep your lines from
13:26 - crossing don't put them all too close
13:29 - together because you know if you put
13:31 - them really close together just like
13:34 - this it's really hard to tell what's
13:36 - connected because you can't see much of
13:38 - the lines all right everything's very
13:40 - clumped up together and hard to read but
13:43 - you don't want to spread them out real
13:44 - far either because then your eye has to
13:46 - follow a long line to find out where
13:50 - it's connected to so find kind of a
13:53 - happy medium that works for you make
13:55 - sure you can see the connections you
13:57 - know something like that is pretty
13:59 - reasonable just avoid you know making
14:03 - trying to make things too messy because
14:05 - it's easy to get yourself lost when
14:07 - creating larger graphs than this and
14:10 - I'll show you some examples at the end
14:12 - of the video of how complicated things
14:15 - can get and what you can do to try and
14:17 - simplify them a little bit so just a
14:20 - couple other things I want to show you
14:21 - is for controlling program flow when you
14:27 - connect one of these sequence ports out
14:29 - you get some options for some different
14:34 - nodes that you can choose like condition
14:37 - is going to do an if statement so this
14:40 - says if some boolean that comes in is
14:43 - true it will go out this sequence port
14:45 - if it's false it will go out this
14:47 - sequence port and once it's done either
14:49 - of those or both it will come out the
14:51 - done port so as an example I just set up
14:56 - this situation so here what I've done is
15:00 - I said get the position and I've used
15:04 - the deconstruct node which I got over
15:07 - here if you type in deconstruct and that
15:10 - takes a vector 2 and splits out as x and
15:13 - y and then I used a greater than
15:15 - comparison to say if that X is greater
15:19 - than actually I'm going to set this to
15:22 - 400 so we can see this sooner if that X
15:24 - is greater than 400 then that's going to
15:27 - result in a true or a false right and
15:30 - that'll go into our condition so if
15:32 - that's true I want to set the velocity
15:36 - to be whatever the velocity is negated
15:41 - so negative so it's going to when it
15:43 - reaches when the x-coordinate reaches
15:45 - 400 it's going to negate the velocity
15:50 - which means it's going to turn around
15:52 - and go the other way so I just did that
15:56 - as a quick example to show you how you
15:59 - can kind of chain these things together
16:01 - to get the conditions you want you can
16:04 - also see that it can really quickly
16:07 - start to take up a lot of space so you
16:11 - need a lot of screen real estate to to
16:14 - do this stuff one solution for that and
16:17 - let's say that we were still doing this
16:19 - same function are the same thing but we
16:23 - want this this section of code here
16:26 - these three blocks these three blocks
16:28 - are what are determining did we reach
16:31 - the point where we want to bounce and so
16:34 - one way to organize your codes to take
16:36 - chunks like this and say well let's make
16:38 - that its own function right and here's
16:42 - how we would do that so I need to make a
16:44 - new function so I'm going to go over
16:46 - here to the functions and click the plus
16:48 - to make a new function and let's just
16:50 - call this bounce right bouncing off the
16:55 - right edge of something and what I want
16:59 - in there is those three nodes so if I go
17:03 - back over to the process and I grab
17:05 - these and I hit cut then I can go back
17:10 - over to my bounce right and I can paste
17:14 - so what I want to do is I want to return
17:17 - the result of this boolean so I need a
17:22 - return with value so the return so all
17:28 - bounce right is gonna do is it's gonna
17:30 - return whatever result I got from that
17:35 - so there's my bounce right function it's
17:39 - gonna compare these things send back a
17:41 - true or a false so now in our process
17:43 - our input to this condition is going to
17:46 - be the bounce right function so I need
17:48 - to just pull that out
17:50 - now I have the bounce right function but
17:52 - I need that to get executed so I'm going
17:55 - to have to disconnect this and insert
17:57 - this in between so let's move the
17:58 - condition over and we can squeeze this
18:02 - in I'll have to do a little shuffling
18:03 - but after we set the position we need to
18:07 - call the bounce write function that's
18:10 - going to then go to the condition and
18:13 - the output of bounce write is going to
18:16 - go to the condition so let's arrange
18:19 - this a little bit and now we should see
18:22 - the same result of the star bouncing
18:26 - when it reaches 400 but instead of those
18:32 - three nodes we took and just replace
18:34 - them with this one and so whenever you
18:38 - have large groups of nodes
18:41 - it really helps clean up your code if
18:43 - you separate those out into functions
18:45 - and in fact it makes you actually think
18:48 - a little more about what your different
18:52 - what your code is doing and what things
18:54 - make sense to pull out into different
18:58 - functions because now our star has a
19:00 - bounce right all right it knows how to
19:03 - bounce right and if you look at this
19:05 - right away you can see you know what
19:08 - kind of things that this node can do
19:11 - what kind of properties it has and its
19:14 - variables and so on so is this easier
19:18 - than writing GD script well I'll leave
19:20 - that up to you to decide for yourself
19:23 - you can wind up with things like this
19:26 - which are quite a bit more verbose than
19:30 - the same thing done in GD script but
19:33 - again this is just an example and you
19:36 - could do a lot more you could do some
19:38 - optimization turn these into different
19:40 - functions on things but it's still
19:42 - inherently more verbose than something
19:45 - like Gd script is hopefully this helps
19:49 - you get started with with visual script
19:50 - and you will download a recent build and
19:53 - try it out there's still a lot of rough
19:56 - patches the visual script needs a lot
19:58 - more testing so the more people are
20:02 - trying it out and reporting
20:03 - issues the better it will get and
20:05 - hopefully you can help contribute to
20:08 - that thanks and I'll see you next time
20:19 - you