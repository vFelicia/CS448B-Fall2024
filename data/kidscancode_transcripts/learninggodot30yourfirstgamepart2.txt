00:00 - welcome back this is part 2 of the Godot
00:03 - 3.0 beginner tutorial if you haven't
00:06 - watched part 1 yet please go and watch
00:08 - that first and you'll be all caught up
00:10 - and ready for part 2 in the last video
00:13 - we created our player scene and now we
00:16 - want to make it move and when you need
00:19 - functionality on a node that isn't
00:21 - available from the built-in settings
00:24 - over here in the inspector that is when
00:27 - you need to add a script so we're gonna
00:29 - add a script to this player node by
00:32 - clicking the add script button right
00:34 - here and this dialog box that pops up
00:38 - asks you some questions about how you
00:41 - want this script created and so the
00:44 - language is going to be Gd script it
00:47 - inherits area 2d because that's the type
00:49 - of node that we clicked on the template
00:52 - you can leave that default basically you
00:54 - don't need to change any of these other
00:55 - things it's going to name the script
00:57 - player GD which matches the name of our
01:01 - scene node so that's perfect so just
01:04 - click create and then you will be in the
01:07 - script editor if you haven't encountered
01:10 - GD script before there's a link below to
01:13 - the GD script introduction on the Godot
01:15 - website I recommend you go take a look
01:17 - at it and then come back here and all
01:19 - this will make a little bit more sense
01:21 - to you so in here in our script editor
01:24 - we have some information boxes over here
01:27 - on the side I'm gonna make these smaller
01:29 - because we don't need to look at them
01:31 - very much right now and in here is our
01:33 - script and the default script has some
01:36 - comments to give you some some
01:38 - information about how this group works
01:40 - and a little bit of default code that
01:42 - doesn't do anything just yet so I
01:45 - deleted the comments and I've made the
01:47 - font a little bit bigger so hopefully
01:49 - it's easier for you to read on the
01:50 - screen the first thing we want to do is
01:53 - declare our member variables remember
01:55 - variables are properties that you want
01:57 - to add to this particular node to
01:59 - increase its functionality so for
02:02 - example we might want to have a variable
02:03 - to decide how fast our character moves
02:08 - so I can make a variable called speed
02:10 - and set it equal to some value
02:13 - but that means if we are playing our
02:14 - game and we decide our what we want our
02:16 - character to move a little faster a
02:18 - little slower we would need to edit the
02:20 - script and change this number so instead
02:23 - what we can do is export this variable
02:29 - like this and what this says is I want a
02:33 - speed variable it's going to be an
02:35 - integer so in the parenthesis here you
02:37 - put what type of variable you want it to
02:39 - be and export means I want this to be
02:42 - visible in the inspector so if I were to
02:44 - go over here and click on player now you
02:46 - can see I have a speed right here so I
02:50 - can just click in here and set that and
02:52 - now my speed is 400 and that makes it
02:55 - easier to change that property later
03:03 - so let's click on script to get back to
03:06 - our script and declare our other
03:08 - variables we're also going to have a
03:11 - velocity this is going to track the
03:15 - players movement and we'll be changing
03:17 - that as we press press different keys on
03:19 - the keyboard and then we're going to
03:21 - have a screen size variable that's going
03:24 - to be the size of the game window so
03:27 - that we can know when our player reaches
03:29 - the edges of the screen next is our
03:32 - ready function this is a function that's
03:33 - called whenever the node is added to the
03:37 - scene so it's the initialization code
03:39 - this is the code you want the player to
03:41 - run when it first starts up and we're
03:43 - going to figure out what our screen size
03:45 - is at this point and so the command to
03:47 - do that is get viewport rec dot size so
03:51 - that will get us the size of the screen
03:54 - and if you go and change that in the
03:57 - project settings like we did at the
03:58 - beginning the player will automatically
04:00 - know about those changes now for the
04:02 - movement we need to look at the process
04:04 - function and the process function is one
04:05 - that's run every frame which means about
04:09 - 60 times per second in here is where you
04:11 - want to do anything that you need to
04:13 - happen continuously and we're going to
04:15 - do three things in this process function
04:17 - we're going to check for input which
04:20 - keys the player is pushing we're going
04:24 - to move in that given direction and
04:27 - we're gonna play the appropriate
04:28 - animation to match what direction we're
04:31 - going in so depending on what keys are
04:34 - being pressed like if none of them are
04:37 - being pressed we want our velocity to be
04:38 - zero so we're gonna reset our velocity
04:41 - here then we're gonna check which keys
04:43 - are being pressed and we can do that by
04:45 - using input dot is action pressed and
04:50 - then we say what action we want to talk
04:53 - about now there are already some
04:55 - predefined actions like UI write which
05:00 - stands for the right arrow key these are
05:02 - defined in the project settings in a
05:05 - section called input map and we're not
05:08 - going to go into that for this tutorial
05:09 - but you can go in and assign custom
05:12 - inputs in that input map if you have a
05:14 - particular set up you want to use
05:16 - we're gonna use these defaults for the
05:19 - left right up and down arrow keys now
05:22 - what this function is going to return is
05:24 - either true if the key is currently
05:26 - being held down or false if it isn't so
05:29 - if it is down we want to take our
05:31 - velocity and we want to make its X
05:34 - positive because we're going to the
05:37 - right and then we want to do the same
05:39 - for the other arrow keys so I've copied
05:42 - and pasted in and now I have right going
05:47 - positive in the X Direction left goes
05:49 - negative so you can notice if right and
05:52 - left are both held down at the same time
05:54 - we add one and subtract one which leaves
05:57 - you at zero so you won't move at all and
05:58 - then down and up do the same thing but
06:02 - for the y direction now one problem
06:05 - we'll have is if we hold down right and
06:07 - down at the same time then our velocity
06:11 - vector is going to be one in X and one
06:15 - in Y 1 comma 1 which is going to make
06:18 - the player move faster because it's
06:20 - adding a horizontal and a vertical
06:22 - movement together then it would be
06:24 - moving just horizontally or just
06:26 - vertically so the way we fix that is if
06:30 - our velocity length is greater than zero
06:35 - then we want to normalize the velocity
06:40 - so velocity equals velocity dot
06:43 - normalized normalizing a vector means
06:47 - resetting its length to one so if we're
06:50 - only going to the right our length of
06:54 - our vector will be one if we're going
06:55 - diagonally
06:56 - now our length will be one but we don't
06:59 - want to move at one we want to move at
07:01 - our speed so we're going to multiply
07:02 - that by speed and now we have our
07:06 - velocity set correctly based on whatever
07:10 - keys are being held down so now that we
07:13 - know our velocity we know how much to
07:16 - move so let's change our position the
07:19 - position of our area to d node and we're
07:23 - just going to add the velocity times
07:26 - Delta which is the time step
07:29 - of the frame which we get from process
07:31 - and let's try it out and see if it works
07:34 - so if we click on our player node here's
07:37 - our scene this button right here will
07:40 - play the current scene so if we hit play
07:42 - we're gonna see our game window our
07:45 - character is up there in the corner
07:46 - because we haven't changed this position
07:48 - but if I press the arrow keys I can move
07:50 - around in all four directions and
07:53 - diagonals but we do go off the screen
07:56 - because we're not using that screen size
07:58 - limit to stop us from moving off and so
08:02 - to fix that what we want to do is we
08:04 - want to clamp our position we want to
08:07 - clamp the x value of the position
08:09 - between 0 and the width of the screen
08:11 - and the y value between 0 and the height
08:14 - of the screen so that can't go outside
08:16 - of those bounds so we take the position
08:18 - X and we clamp this is what the clamp
08:22 - function does the value we want to clamp
08:24 - is the position X between 0 and screen
08:29 - size X and then we just want to take
08:34 - that same thing and do it again with Y
08:38 - and then we'll have our character should
08:44 - not be able to go off the screen we run
08:47 - the scene again we stop when we hit the
08:53 - edges now we do go half way off because
08:56 - our position of our character is the
08:58 - center of the node but that's fine that
09:05 - is good enough for us not to get lost
09:08 - anywhere off the screen now we're
09:11 - checking input and we're moving we need
09:14 - to handle the animations and we want to
09:17 - do two things we want to play and stop
09:21 - based on whether we're moving when we
09:23 - stop moving we should stop playing the
09:24 - animation but also we want to pick which
09:27 - direction we're going so that we can
09:29 - play the up animation when we're going
09:31 - up and etc so when we're when our speed
09:34 - is greater than zero we're moving so
09:37 - we're going to take our we're going to
09:40 - take our animated sprite and
09:42 - gonna say play and that's going to play
09:46 - it's animation but if we're not moving
09:49 - we want to take that animated sprite and
09:52 - stop it and that's going to just start
09:55 - and stop the playing whenever we move
09:58 - which is going to look like this so see
10:04 - whenever I move it's playing the
10:05 - animation and then stopping when I let
10:09 - go and that's fine except I'm always
10:12 - pointing to the right because we're
10:14 - playing the right animation to change
10:17 - which direction we're pointing in we
10:20 - want to use on our animated sprite these
10:23 - properties flip h and flip v flip
10:26 - horizontal these are true or false slips
10:29 - the sprite in that direction and
10:31 - vertical flips it this way so depending
10:34 - on what direction we're going we're
10:36 - going to trigger one of these to flip
10:38 - the image of the sprite and then we're
10:40 - going to switch between the up and right
10:43 - animations so back to our script we need
10:48 - to decide which way we're going
10:51 - so if our velocity X is not equal to
10:56 - zero well that means we are moving left
11:00 - or right so we want to take our animated
11:03 - sprite and we want to set the animation
11:06 - that we're going to use to write and we
11:11 - also want to take it and set its flip V
11:16 - to false because we don't want it to be
11:18 - flipped when we're moving side to side
11:20 - and finally we want to take our animated
11:23 - sprite and set its flip H to true if
11:28 - we're going to the left and false if
11:31 - we're going to the right well that's
11:33 - just is the velocity dot X less than
11:37 - zero so if our X velocity is less than
11:40 - zero we're going to the left so flip H
11:43 - will be true if it's false flip H will
11:46 - be false and then we just need to do the
11:49 - same thing for the Y direction so we're
11:54 - going to take check our velocity dot Y
11:56 - and if that's not equal to zero then
11:58 - we're moving up or down so we take our
12:02 - animated sprite and set its animation we
12:05 - want to use the up animation that we
12:07 - made and we want to set its flip v2
12:15 - whether we're going up or down so
12:17 - velocity dot y greater than zero now if
12:21 - we play the scene again we should see
12:24 - the animation changing based on which
12:27 - direction we're moving in so I go left
12:30 - or right my eye points that way if I go
12:32 - down or up I'm playing that animation
12:39 - once you're sure you have the animation
12:42 - working right and all the movement go
12:45 - back up to you're ready and add hide we
12:48 - want this player to be invisible when
12:51 - the game first starts they're not going
12:53 - to appear until we've pressed the start
12:55 - button and started playing the game so
12:57 - we want them hidden at the beginning so
13:00 - now if you hit play or your player is
13:02 - going to be invisible and now we can
13:04 - start talking about collisions so we
13:07 - want to get ready for this player to be
13:09 - able to detect the mobs hitting it so
13:13 - we're going to make a signal called hit
13:18 - and so we're gonna admit that when the
13:21 - player dies so that the game will know
13:23 - to pop up the game over screen play the
13:26 - death sound all that kind of thing and
13:28 - so first we need to detect did we hit
13:32 - something if we click on our area 2d
13:35 - node down here next to the inspector is
13:39 - another tab called node and in there it
13:42 - lists a whole bunch of signals that the
13:45 - area to denote can produce and since the
13:47 - enemies are going to be rigidbody 2ds
13:49 - their bodies so we want the body entered
13:53 - signal so if we click on that and then
13:57 - we click connect we can connect that to
14:01 - a function in our player and Godot will
14:05 - automatically name this function and we
14:06 - can leave that as the default we don't
14:08 - have to change any of this
14:10 - stuff we can just hit connect and now
14:13 - our player script has a function created
14:17 - called on player body entered so
14:20 - whenever a body enters the boundaries of
14:23 - this player's collision shape right
14:26 - which we defined then the code in this
14:30 - function will be run and what we want
14:33 - this function to do is hide the player
14:38 - we want it to emit that hit signal that
14:43 - we defined so that the game will know
14:45 - that the player died and then we also
14:49 - want to set monitoring equal to false
14:52 - meaning we want this player to stop
14:54 - detecting collisions if we just hide it
14:57 - it's still going to detect when things
14:59 - hit it and we don't want if two mobs hit
15:02 - us you know one after another we don't
15:04 - want to have a double hit so we need to
15:08 - turn monitoring off but you can't just
15:10 - set that one equal to false directly in
15:14 - the middle of a collision so you have to
15:16 - use a command called called deferred and
15:20 - what we want to do is we want to set
15:23 - monitoring to false and what that does
15:28 - is it just sets it to that as soon as
15:30 - it's able to and then we need one more
15:34 - function and this function is called
15:36 - start and what this does is tell the
15:41 - player where to start when the game
15:42 - starts and so we're just gonna have the
15:45 - game say hey player start at this
15:48 - position so we're going to set our
15:49 - position equal to that position we're
15:51 - going to unhide and we're going to set
15:54 - our monitoring equal to true
15:59 - and now we're finished with the player
16:01 - script I know it was pretty long almost
16:04 - 50 lines of code and 15 minutes or more
16:09 - of video but the player is the heart of
16:14 - the game there's a lot going on with the
16:15 - player we had to write a lot of code to
16:17 - get it to do everything we wanted it to
16:18 - do in the next video we're going to
16:21 - start talking about making the mobs for
16:23 - the game