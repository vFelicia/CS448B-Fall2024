With timestamps:

00:00 - hello in this video we will be creating
00:02 - heart containers in pygame
00:04 - and here's what we are going to make
00:06 - right now on the screen you can see
00:07 - three different rows of hearts
00:09 - and they all work in slightly different
00:11 - ways so let me remove
00:13 - a couple of hearts and they can see on
00:15 - the first row
00:16 - we can see full hearts and empty hearts
00:19 - in the second row we can see only four
00:20 - hearts
00:21 - and in the third row we can see half
00:23 - hearts
00:24 - and all of this is inside of a sprite
00:26 - class but that isn't strictly necessary
00:29 - so you could create the entire thing
00:30 - without one i just thought it was useful
00:33 - because you are usually going to create
00:34 - hearts inside of a sprite class that
00:36 - represents your player
00:38 - but it's up to you and i got the artwork
00:40 - for the hearts from an artist called
00:41 - kenny
00:42 - who does amazing art for free so check
00:45 - him out i'll put a link in the
00:46 - description
00:47 - but with all of that covered let's
00:48 - actually jump in and let's create some
00:50 - hearts and pie game
00:53 - so here we are in our code and i already
00:55 - have a couple of lines there
00:57 - there is all the basic logic you need to
00:58 - create pygame and i created a sprite
01:01 - class
01:02 - that i've put into a group single and in
01:04 - our game loop
01:05 - i am drawing and updating it and i
01:08 - called the link because that's where the
01:09 - logic for hearts basically comes from
01:11 - and the class is created up here
01:13 - and i will talk about it in just a
01:14 - second but before that i also imported
01:17 - three different hearts
01:18 - that are called full heart half out and
01:20 - empty heart and they do what the name
01:22 - implies
01:23 - so this one is quite straightforward so
01:25 - with all of that out of the way
01:26 - let's look at our class so in the class
01:30 - we have an image
01:31 - and we have a rectangle the basics you
01:33 - need for any kind of class
01:34 - and right now this just shows an image
01:36 - of link so if we run the code right now
01:39 - we can see link in the middle of our
01:40 - screen but he can't do anything and he
01:43 - will never be able to do anything in
01:44 - this game
01:45 - i just want to have something on the
01:47 - screen for the class it felt a bit weird
01:49 - having it empty
01:50 - but okay then we have an update method
01:53 - that doesn't do anything right now
01:56 - so now let's get started with the health
01:58 - and the very first thing we need is an
02:00 - actual number that keeps track of how
02:01 - much health we have
02:02 - which in my case i call it self.health
02:06 - and let's start with five but you could
02:08 - put any number in here it's really up to
02:10 - you
02:11 - and i will also create an attribute that
02:13 - i called self dot
02:15 - max health that i will be setting to 10
02:18 - and this is going to be the maximum
02:20 - amount of health we are going to have
02:23 - and we will also have a minimum health
02:24 - but that's going to be zero so that
02:26 - doesn't really need its own attribute
02:29 - okay and now we need some methods to
02:31 - influence
02:32 - this number here and i created two that
02:35 - i called
02:36 - get damage
02:40 - and all that get damage does is if our
02:43 - self
02:44 - dot health is greater than zero
02:48 - then self.health minus equal one
02:53 - so if you're running this method and our
02:55 - player has greater than zero health
02:57 - then we are reducing the health by one
02:59 - so effectively we can never go
03:00 - below zero in our health and then let me
03:05 - copy the entire thing actually
03:08 - there is the opposite function that i
03:10 - call get health
03:12 - and this one is our health is smaller
03:15 - than our self dot max self
03:19 - then i want to increase our health by 1.
03:21 - so all these two methods do is
03:23 - increase or decrease our health nothing
03:25 - fancy
03:26 - but now we have to figure out a way to
03:28 - trigger both of these methods
03:30 - and how i approach this is that if we're
03:32 - pressing the up key we're running get
03:34 - health
03:34 - and if i press down we get damage
03:37 - so let's implement that so where we
03:41 - check our events
03:42 - i'm going to add if event dot
03:45 - type is equal to pi game dot
03:48 - k down down
03:52 - and then if event dot key
03:56 - is equal to pygame dot key
04:00 - up and if that is the case i want link
04:03 - dot sprite dot get health
04:08 - and then equally let me copy this entire
04:11 - line
04:13 - if i'm pressing the down key then i want
04:16 - to get damage
04:18 - and with that logic our player has
04:20 - health that we can influence
04:22 - and let me actually test this so in our
04:24 - update method
04:26 - i'm going to print self dot health
04:29 - and if i run all of this now you can see
04:32 - in the bottom of the screen our health
04:34 - and if i press up or down and i scroll
04:37 - down
04:37 - in this thing you can see here the
04:39 - numbers going up or down it doesn't go
04:42 - down with it right now i don't know why
04:44 - but we can't go below zero and
04:48 - if i press all the way up we can never
04:50 - go higher than 10.
04:51 - so we know this is working so that's a
04:53 - pretty good start so let me stop this
04:57 - and replace this with pass again
05:00 - so now we know all of this is working
05:03 - but we can't see it so it's not really a
05:06 - good health indicator
05:08 - so let's actually put some hearts on the
05:09 - screen and i'm going to start with the
05:11 - simplest approach
05:12 - and that is just having the full hearts
05:14 - on the screen and not showing the empty
05:16 - hearts
05:17 - and that's the second row i showed in
05:18 - the beginning and to get to that
05:21 - i'm going to create a new method that i
05:23 - call
05:24 - full hearts
05:29 - and now we need to figure out how to
05:31 - approach this in terms of logic to put
05:33 - hearts on the screen by using this
05:34 - self.health
05:36 - and the logic is actually surprisingly
05:38 - easy all i'm going to do
05:39 - is to use a for loop that runs as many
05:41 - times as we have health
05:43 - so in our case right now that's going to
05:44 - be five and on every cycle of this for
05:47 - loop
05:47 - i'm going to use this health indicator
05:49 - to place the heart a little bit further
05:51 - to the right
05:52 - so the first heart is going to be at
05:53 - position zero the second one is going to
05:55 - be at position
05:56 - one times fifty the second one is going
05:59 - to be at position
06:00 - two times fifty and so on depending on
06:03 - how many hearts we have
06:05 - and all of this is really just a basic
06:07 - for loop so for
06:09 - heart in range self
06:12 - dot health
06:16 - and then in here we want to use screen
06:18 - dot
06:19 - and what we want to blit is this full
06:22 - heart for now
06:23 - and
06:26 - full heart and blit
06:30 - always needs two arguments it needs the
06:32 - image you want to put on the screen and
06:33 - then the coordinate of this image
06:35 - and for the coordinates we always need x
06:37 - and y
06:39 - and for my x-coordinate i want heart
06:42 - multiplied by 50. so the first side is
06:46 - going to be zero
06:46 - so zero times 50 is going to be zero but
06:49 - for the first heart this is going to be
06:50 - 50 because it's 1 times 50
06:53 - and then we have 2 times 50 3 times 50
06:55 - and so on
06:57 - and then we need a y coordinate and in
06:59 - my case i went with
07:00 - 45. and that's all we need for the
07:03 - simple hearts
07:04 - so if i call this method now so
07:07 - self.full
07:09 - hearts then we should be seeing some
07:12 - health
07:12 - on the screen there we go and i can
07:15 - press up and down
07:16 - and we can see the health increasing or
07:18 - decreasing
07:19 - so pretty nice so that's our first hard
07:23 - system
07:24 - and there's one improvement you could be
07:26 - making is that when you're placing the x
07:28 - coordinate
07:29 - you can increase this by a tiny number
07:31 - let's say 10
07:33 - then we are going to have a little bit
07:35 - of space on the left side of the hearts
07:37 - which i think is going to look slightly
07:39 - better
07:40 - now we have the first kind of heart
07:41 - system the full hearts
07:43 - next up i want to add the full hearts
07:45 - and the empty hearts and for that
07:47 - i created another method that i call
07:50 - empty hearts maybe not the perfect name
07:54 - but
07:54 - doesn't matter too much and here's how
07:56 - this is going to look like
07:58 - we are still going to run the for loop
08:00 - but this time the for loop is going to
08:01 - be on our max health
08:03 - so 10 in our case and inside of this for
08:06 - loop
08:06 - we are going to make a check that if the
08:08 - point of health we are looking at this
08:10 - particular for loop
08:11 - is smaller than our health then we want
08:14 - to print a full heart
08:15 - however if the heart in the current for
08:17 - loop is greater than our health then we
08:19 - want to print an empty heart
08:21 - and that way we are always going to
08:22 - create 10 hearts
08:24 - but some are going to be full and some
08:25 - are going to be empty so let's implement
08:27 - it
08:28 - so i'm still going to start with for
08:30 - heart in range
08:32 - and this time it's going to be self.max
08:34 - health
08:37 - and now i need some slightly different
08:39 - logic
08:40 - the first thing i want to check is if
08:43 - this heart is smaller than
08:46 - self dot health
08:50 - and if that is the case i want to use
08:52 - this line again
08:53 - basically so let me put it
08:57 - down here and this time i'm going to
09:00 - reduce
09:01 - the y coordinate to 5 so it's above this
09:03 - line
09:04 - but now i also want an else statement
09:08 - that if this line is not the case we
09:10 - want to print an empty heart
09:12 - so i can copy this entire line again and
09:15 - this time
09:16 - i called it empty heart
09:19 - empty heart and with that
09:23 - we are done so let me try this now
09:27 - and we can't see it because i'm not
09:28 - calling the method
09:30 - silly mistake so self. empty
09:34 - hearts and now let's try it again
09:37 - and there we go this seems to be working
09:41 - quite well cool so we already have two
09:43 - lines of hearts that work quite well
09:45 - and the reason i went with this order of
09:47 - hearts is because if we're losing some
09:48 - health it looks better to have the full
09:50 - hearts at the top
09:52 - but it really doesn't matter too much
09:55 - but alright now we have two different
09:56 - ways of creating hearts and pie game
09:58 - and to finish this off let's create our
10:00 - half hearts on the screen
10:02 - and this is going to be the most complex
10:04 - way but it's not that much more
10:06 - complicated
10:08 - and i think for this one it's best to
10:10 - explain it while i'm actually creating
10:11 - it
10:12 - so let's go straight to it i will start
10:14 - by creating a new method that i call
10:17 - half hearts
10:22 - and the first thing i want to check is
10:24 - how many half hearts we are going to
10:26 - have
10:26 - so i'm going to create a new variable
10:29 - that i call
10:30 - half hearts total
10:33 - and all this is is self dot health
10:38 - divided by two so right now we have five
10:40 - health if we divide it by two
10:42 - we get 2.5 and this is the amount of
10:45 - half hearts we are going to have
10:49 - and besides this one line i also found
10:51 - it really useful to check if our last
10:53 - half is going to be a full heart or a
10:55 - half heart
10:58 - and how i call this variable is half
11:01 - heart exists and all i need for this one
11:05 - is half hearts total
11:09 - minus bind half heart's total
11:13 - is different from zero so let me explain
11:16 - what happens here
11:17 - we first check the half heart's total so
11:20 - the result of this line
11:21 - right now this would be 2.5 then we take
11:24 - the same number
11:26 - but turn it into an integer so the 2.5
11:28 - will be turning into a 2
11:30 - because pygame always rounds down the
11:32 - number when it creates an integer
11:34 - and then 2.5 minus 2 would be greater
11:37 - than 0.
11:38 - however if this half hearts would be 2
11:41 - then this line would also be 2
11:42 - so this one would be 0 and this entire
11:44 - line would then be false
11:46 - so if we have a half out at the end of
11:48 - our line this is going to be true
11:50 - if not this is going to be false and
11:52 - this is going to become
11:53 - important in just a bit but let's go
11:56 - through it step by step
11:57 - now we come back to our for loop that
11:59 - for part
12:01 - in range
12:04 - and in here we do have to think about
12:06 - this a little bit
12:07 - the first thing we have to worry about
12:09 - is that we want to see both the half
12:11 - hearts and the background for the empty
12:12 - hearts
12:13 - so we do have to use self.maxhealth
12:16 - just like we used in this method here so
12:19 - this one should be quite straightforward
12:20 - for now
12:21 - but we don't want to have to fill max
12:23 - health instead we want to divide this by
12:25 - two
12:26 - because each health point right now is
12:28 - going to be represented by half a point
12:30 - of health not a full one anymore
12:32 - so all of this has to be divided by two
12:35 - but now the problem is you couldn't put
12:36 - a number like 2.5
12:38 - into a range function it always has to
12:40 - be an integer so we have to turn this
12:42 - entire thing
12:43 - into an integer and for the first line
12:47 - in here
12:48 - i am only going to worry about full
12:49 - hearts so if we have 2.5
12:52 - health we have two full hearts and one
12:54 - half heart
12:55 - and i'm going to start by creating the
12:57 - full hearts
12:58 - and what i want to do in here is if the
13:01 - integer
13:02 - of our half hearts total
13:05 - is greater than our heart
13:09 - and if that is the case i want to put
13:11 - the hearts on the screen again
13:12 - so i can copy again screen.lit
13:16 - and i want to draw a full heart at this
13:18 - position
13:19 - and this time it is going to be
13:23 - 85. so when it comes down to it
13:26 - this entire bit is really similar to
13:28 - this entire bit here
13:30 - except for some minor changes to account
13:31 - for the 0.5 at the end of the number
13:34 - and just like before if that is not the
13:36 - case
13:37 - so else then we want to draw the empty
13:40 - heart
13:41 - and for that i can just copy this entire
13:43 - line again
13:45 - and again i have to change it to 85 so
13:47 - now we have the full hearts
13:49 - and the empty hearts but this leaves us
13:51 - with the half hearts and this is going
13:53 - to be
13:54 - in an l if statement and what i want to
13:57 - check in here
13:58 - is first if half hearts exists in the
14:02 - first place
14:03 - and then i also want to check if the
14:06 - integer
14:07 - of our half hearts total
14:12 - is equal to heart and i'm going to
14:14 - explain this
14:15 - in just a second but if all of that is
14:17 - the case
14:18 - i want to draw a half heart so i can
14:21 - just copy the entire line again
14:22 - and this time i am drawing at a half
14:26 - heart
14:27 - and it needs 85 for the y position again
14:30 - and this is all we needed so let's try
14:33 - this now
14:35 - and again i forgot to call the method in
14:37 - the update function
14:39 - so self dot
14:43 - half hearts and let's try this again now
14:46 - and there we go so we can see that this
14:50 - is working
14:51 - and let me go through now what happened
14:53 - in here so we are starting with a for
14:56 - loop
14:56 - that looks at the max health and divides
14:58 - it by 2 and takes the integer of the
15:00 - entire thing
15:02 - and in this for loop we start by drawing
15:03 - the full hearts so if we are 2.5 health
15:07 - this if statement would draw two health
15:09 - points on our screen
15:11 - exactly what we wanted but then we want
15:13 - to look at the half hearts
15:15 - and that is this entire l if statement
15:18 - and we start by checking if a half out
15:20 - exists in the first place
15:22 - but if we just had this one line we
15:24 - wouldn't know where the half heart needs
15:25 - to be
15:26 - and for that we have this entire line
15:28 - here
15:30 - and it effectively checks where the half
15:31 - heart needs to be
15:33 - which is right next to the full hearts
15:35 - and if that's the case we're just
15:36 - drawing a half heart
15:37 - and for everything else we just have
15:39 - this line where we are drawing empty
15:41 - hearts
15:42 - and with all of that we have full
15:45 - hard systems that work quite well
15:48 - and even nicer if we changed for example
15:51 - our max health to 20
15:55 - then we would just update the entire
15:57 - thing so in your game
15:58 - you could very easily add more and more
16:00 - hearts to the entire thing
16:02 - and create a zelda-like health system so
16:04 - i hope you found this useful
16:06 - and i will see you around

Cleaned transcript:

hello in this video we will be creating heart containers in pygame and here's what we are going to make right now on the screen you can see three different rows of hearts and they all work in slightly different ways so let me remove a couple of hearts and they can see on the first row we can see full hearts and empty hearts in the second row we can see only four hearts and in the third row we can see half hearts and all of this is inside of a sprite class but that isn't strictly necessary so you could create the entire thing without one i just thought it was useful because you are usually going to create hearts inside of a sprite class that represents your player but it's up to you and i got the artwork for the hearts from an artist called kenny who does amazing art for free so check him out i'll put a link in the description but with all of that covered let's actually jump in and let's create some hearts and pie game so here we are in our code and i already have a couple of lines there there is all the basic logic you need to create pygame and i created a sprite class that i've put into a group single and in our game loop i am drawing and updating it and i called the link because that's where the logic for hearts basically comes from and the class is created up here and i will talk about it in just a second but before that i also imported three different hearts that are called full heart half out and empty heart and they do what the name implies so this one is quite straightforward so with all of that out of the way let's look at our class so in the class we have an image and we have a rectangle the basics you need for any kind of class and right now this just shows an image of link so if we run the code right now we can see link in the middle of our screen but he can't do anything and he will never be able to do anything in this game i just want to have something on the screen for the class it felt a bit weird having it empty but okay then we have an update method that doesn't do anything right now so now let's get started with the health and the very first thing we need is an actual number that keeps track of how much health we have which in my case i call it self.health and let's start with five but you could put any number in here it's really up to you and i will also create an attribute that i called self dot max health that i will be setting to 10 and this is going to be the maximum amount of health we are going to have and we will also have a minimum health but that's going to be zero so that doesn't really need its own attribute okay and now we need some methods to influence this number here and i created two that i called get damage and all that get damage does is if our self dot health is greater than zero then self.health minus equal one so if you're running this method and our player has greater than zero health then we are reducing the health by one so effectively we can never go below zero in our health and then let me copy the entire thing actually there is the opposite function that i call get health and this one is our health is smaller than our self dot max self then i want to increase our health by 1. so all these two methods do is increase or decrease our health nothing fancy but now we have to figure out a way to trigger both of these methods and how i approach this is that if we're pressing the up key we're running get health and if i press down we get damage so let's implement that so where we check our events i'm going to add if event dot type is equal to pi game dot k down down and then if event dot key is equal to pygame dot key up and if that is the case i want link dot sprite dot get health and then equally let me copy this entire line if i'm pressing the down key then i want to get damage and with that logic our player has health that we can influence and let me actually test this so in our update method i'm going to print self dot health and if i run all of this now you can see in the bottom of the screen our health and if i press up or down and i scroll down in this thing you can see here the numbers going up or down it doesn't go down with it right now i don't know why but we can't go below zero and if i press all the way up we can never go higher than 10. so we know this is working so that's a pretty good start so let me stop this and replace this with pass again so now we know all of this is working but we can't see it so it's not really a good health indicator so let's actually put some hearts on the screen and i'm going to start with the simplest approach and that is just having the full hearts on the screen and not showing the empty hearts and that's the second row i showed in the beginning and to get to that i'm going to create a new method that i call full hearts and now we need to figure out how to approach this in terms of logic to put hearts on the screen by using this self.health and the logic is actually surprisingly easy all i'm going to do is to use a for loop that runs as many times as we have health so in our case right now that's going to be five and on every cycle of this for loop i'm going to use this health indicator to place the heart a little bit further to the right so the first heart is going to be at position zero the second one is going to be at position one times fifty the second one is going to be at position two times fifty and so on depending on how many hearts we have and all of this is really just a basic for loop so for heart in range self dot health and then in here we want to use screen dot and what we want to blit is this full heart for now and full heart and blit always needs two arguments it needs the image you want to put on the screen and then the coordinate of this image and for the coordinates we always need x and y and for my xcoordinate i want heart multiplied by 50. so the first side is going to be zero so zero times 50 is going to be zero but for the first heart this is going to be 50 because it's 1 times 50 and then we have 2 times 50 3 times 50 and so on and then we need a y coordinate and in my case i went with 45. and that's all we need for the simple hearts so if i call this method now so self.full hearts then we should be seeing some health on the screen there we go and i can press up and down and we can see the health increasing or decreasing so pretty nice so that's our first hard system and there's one improvement you could be making is that when you're placing the x coordinate you can increase this by a tiny number let's say 10 then we are going to have a little bit of space on the left side of the hearts which i think is going to look slightly better now we have the first kind of heart system the full hearts next up i want to add the full hearts and the empty hearts and for that i created another method that i call empty hearts maybe not the perfect name but doesn't matter too much and here's how this is going to look like we are still going to run the for loop but this time the for loop is going to be on our max health so 10 in our case and inside of this for loop we are going to make a check that if the point of health we are looking at this particular for loop is smaller than our health then we want to print a full heart however if the heart in the current for loop is greater than our health then we want to print an empty heart and that way we are always going to create 10 hearts but some are going to be full and some are going to be empty so let's implement it so i'm still going to start with for heart in range and this time it's going to be self.max health and now i need some slightly different logic the first thing i want to check is if this heart is smaller than self dot health and if that is the case i want to use this line again basically so let me put it down here and this time i'm going to reduce the y coordinate to 5 so it's above this line but now i also want an else statement that if this line is not the case we want to print an empty heart so i can copy this entire line again and this time i called it empty heart empty heart and with that we are done so let me try this now and we can't see it because i'm not calling the method silly mistake so self. empty hearts and now let's try it again and there we go this seems to be working quite well cool so we already have two lines of hearts that work quite well and the reason i went with this order of hearts is because if we're losing some health it looks better to have the full hearts at the top but it really doesn't matter too much but alright now we have two different ways of creating hearts and pie game and to finish this off let's create our half hearts on the screen and this is going to be the most complex way but it's not that much more complicated and i think for this one it's best to explain it while i'm actually creating it so let's go straight to it i will start by creating a new method that i call half hearts and the first thing i want to check is how many half hearts we are going to have so i'm going to create a new variable that i call half hearts total and all this is is self dot health divided by two so right now we have five health if we divide it by two we get 2.5 and this is the amount of half hearts we are going to have and besides this one line i also found it really useful to check if our last half is going to be a full heart or a half heart and how i call this variable is half heart exists and all i need for this one is half hearts total minus bind half heart's total is different from zero so let me explain what happens here we first check the half heart's total so the result of this line right now this would be 2.5 then we take the same number but turn it into an integer so the 2.5 will be turning into a 2 because pygame always rounds down the number when it creates an integer and then 2.5 minus 2 would be greater than 0. however if this half hearts would be 2 then this line would also be 2 so this one would be 0 and this entire line would then be false so if we have a half out at the end of our line this is going to be true if not this is going to be false and this is going to become important in just a bit but let's go through it step by step now we come back to our for loop that for part in range and in here we do have to think about this a little bit the first thing we have to worry about is that we want to see both the half hearts and the background for the empty hearts so we do have to use self.maxhealth just like we used in this method here so this one should be quite straightforward for now but we don't want to have to fill max health instead we want to divide this by two because each health point right now is going to be represented by half a point of health not a full one anymore so all of this has to be divided by two but now the problem is you couldn't put a number like 2.5 into a range function it always has to be an integer so we have to turn this entire thing into an integer and for the first line in here i am only going to worry about full hearts so if we have 2.5 health we have two full hearts and one half heart and i'm going to start by creating the full hearts and what i want to do in here is if the integer of our half hearts total is greater than our heart and if that is the case i want to put the hearts on the screen again so i can copy again screen.lit and i want to draw a full heart at this position and this time it is going to be 85. so when it comes down to it this entire bit is really similar to this entire bit here except for some minor changes to account for the 0.5 at the end of the number and just like before if that is not the case so else then we want to draw the empty heart and for that i can just copy this entire line again and again i have to change it to 85 so now we have the full hearts and the empty hearts but this leaves us with the half hearts and this is going to be in an l if statement and what i want to check in here is first if half hearts exists in the first place and then i also want to check if the integer of our half hearts total is equal to heart and i'm going to explain this in just a second but if all of that is the case i want to draw a half heart so i can just copy the entire line again and this time i am drawing at a half heart and it needs 85 for the y position again and this is all we needed so let's try this now and again i forgot to call the method in the update function so self dot half hearts and let's try this again now and there we go so we can see that this is working and let me go through now what happened in here so we are starting with a for loop that looks at the max health and divides it by 2 and takes the integer of the entire thing and in this for loop we start by drawing the full hearts so if we are 2.5 health this if statement would draw two health points on our screen exactly what we wanted but then we want to look at the half hearts and that is this entire l if statement and we start by checking if a half out exists in the first place but if we just had this one line we wouldn't know where the half heart needs to be and for that we have this entire line here and it effectively checks where the half heart needs to be which is right next to the full hearts and if that's the case we're just drawing a half heart and for everything else we just have this line where we are drawing empty hearts and with all of that we have full hard systems that work quite well and even nicer if we changed for example our max health to 20 then we would just update the entire thing so in your game you could very easily add more and more hearts to the entire thing and create a zeldalike health system so i hope you found this useful and i will see you around
