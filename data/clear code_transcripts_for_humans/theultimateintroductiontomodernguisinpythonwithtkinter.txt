With timestamps:

00:00 - in this tutorial we will create a BMI
00:02 - app that can work with metric and
00:04 - imperial units an iOS theme calculator
00:06 - that also has a light mode and a
00:08 - Photoshop inspired app that can change
00:10 - the brightness Vibrance rotation scale
00:12 - and lots more of any image
00:15 - to make them I will use tkinter the
00:17 - default user interface framework in
00:19 - Python and I will cover all of it before
00:21 - making the apps
00:23 - I start with the basics things like
00:25 - buttons sliders and text then I go over
00:28 - how to create pretty much any kind of
00:30 - layout including responsive and
00:32 - scrollable ones finally I cover styling
00:35 - which will include animations themes and
00:37 - scaling images by the end of this video
00:39 - you should be able to create basically
00:41 - any kind of user interface in Python and
00:44 - if you enjoyed this video check out my
00:45 - paid course where I cover 7 additional
00:47 - apps a responsive weather app an iOS
00:50 - timer a map viewer a paint app a stock
00:52 - market tracker a snake game and a QR
00:55 - code generator
00:56 - you can get the course for about 15
00:58 - dollars and buying it helps me massively
01:00 - to create these larger videos and well
01:03 - with that I hope you enjoyed this
01:04 - tutorial
01:06 - alright so let's get started with
01:08 - tkinter and already I want to start by
01:11 - making one app that is going to be very
01:13 - simple but it is going to look something
01:15 - like this
01:16 - in here we are converting miles to
01:18 - kilometers we have an entry field we can
01:21 - type any kind of number and if you
01:23 - convert it you get the output in
01:24 - kilometers
01:25 - a very simple app but it is going to
01:27 - cover all of the basics of tkinter
01:30 - although let's talk about these Basics
01:32 - first to make any kind of appendique
01:35 - Kinder you need three major components
01:37 - the first one is called widgets if I
01:40 - show the app again a widget for example
01:43 - could be a button it could be some text
01:46 - it could be an entry field all of these
01:48 - are widgets tkinder has quite a few of
01:51 - them you're going to learn all of them
01:52 - although for now I'm only going to cover
01:55 - three different ones text an entry field
01:58 - a button and another bit of text
02:00 - besides that we have layout this one
02:03 - determines how the widgets are arranged
02:05 - on the window for example in the app you
02:08 - can see here we have a top-down
02:10 - Arrangement where we have three
02:12 - different rows and then inside of the
02:15 - middle one in here we have two different
02:17 - columns one for the entry field and one
02:20 - for the button this would be a very
02:21 - simple layout obviously you can make
02:23 - much more complex ones
02:25 - finally we have Style
02:27 - style for example determines the color
02:30 - of the button the font of the text the
02:33 - size of this text and so on we could
02:35 - also set the background color and lots
02:37 - of different things all of this is
02:39 - inside of the style if you understand
02:41 - these three main components you are
02:43 - going to have a fairly easy time
02:44 - designing whatever kind of app you want
02:46 - to create and Decanter that being said
02:49 - each of these parts can be quite
02:51 - extensive and I have lots of videos on
02:54 - every single one of them and to
02:55 - understand them in detail it is going to
02:57 - take you some hours
02:59 - now to get started with this app here I
03:03 - am going to skip over a lot of the
03:05 - details that I will cover in future
03:06 - videos so let me explain how you can
03:09 - follow along for this video there are
03:11 - three ways you can approach this
03:14 - I would recommend you to follow along is
03:16 - to download the code and then just play
03:18 - around with the code and follow along as
03:20 - I create this app from scratch that way
03:22 - you're not going to get too lost and you
03:24 - can just play around and change some
03:26 - individual values and see what happens
03:29 - besides that you can also follow from
03:31 - scratch and don't worry too much about
03:33 - the details because at this stage you
03:36 - don't really need to understand every
03:37 - single bit you just need to have a very
03:39 - basic overview of how tikente works with
03:42 - all of the individual bits
03:44 - finally you can also skip this video and
03:46 - go straight into the separate parts you
03:48 - are not going to miss anything
03:50 - although I guess if you follow this
03:52 - video you have a tiny bit of a head
03:53 - start to see how the different parts
03:54 - connect with each other
03:56 - but just to emphasize for this video you
03:59 - don't have to understand every single
04:00 - bit of tkinter I am just going to cover
04:02 - the really Basics and over the next
04:05 - couple of videos we're going to flesh
04:07 - out all of this in a lot of detail
04:10 - so just relax follow along and if you
04:12 - understand even 10 you already have a
04:15 - really good start
04:16 - so let's jump in and let's create an app
04:19 - here I have a completely empty python
04:21 - file and to get started I want to import
04:24 - tkinter and this is usually abbreviated
04:26 - as TK
04:27 - besides that I also want from tkinder
04:30 - import ttk
04:33 - inside of ttk we have all of the widgets
04:35 - that we actually want to use while TK
04:38 - gives us the basic logic
04:40 - once we have that we can create a window
04:43 - or the main window we put everything
04:44 - else on this we create with TK and then
04:48 - TK this we have to call is going to
04:51 - return an object that I want to store
04:53 - inside of a window variable
04:55 - for this one you do want to be careful
04:57 - here with what letters are uppercase and
04:59 - lowercase basically everything is
05:02 - lowercase besides the second t
05:05 - with this we have a window although if I
05:07 - run the app now nothing is going to
05:09 - happen although we don't have a crash
05:10 - that's usually a good start
05:13 - we actually see something we have to
05:15 - call what is called the main Loop let me
05:17 - add another section here called run and
05:20 - I want to call the main Loop method
05:24 - on the object we just created now if I
05:26 - run this we have a basic window
05:29 - and on this window we can already make
05:31 - some changes for example I can get the
05:33 - window and set a title this is just a
05:37 - string let me call it demo if everyone
05:39 - is now in the top left we have demo
05:42 - besides that we can also set the size of
05:45 - this window this we do with window dot
05:47 - geometry
05:49 - in here again we are going to need a
05:51 - string this string wants a width and a
05:54 - height separated by an X for example in
05:57 - my case I want the app to be 300 pixels
05:59 - wide and a 150 pixels high if it runs
06:03 - now we have a much smaller app
06:05 - next up I want to create the first
06:08 - widget this let me add another section
06:10 - here called title and the widget I want
06:13 - to create is called a label this label I
06:16 - want to store in a variable let me call
06:17 - it title label
06:20 - label in tkinter is just a fancy word
06:23 - for text and this label we create with
06:26 - ttk
06:27 - dot label
06:30 - in here we need a couple of arguments a
06:33 - really important one is we need to set a
06:35 - master and the master is basically the
06:38 - parent which in our case is going to be
06:40 - the window
06:41 - the way you want to think about it is
06:43 - that this label needs to be in some kind
06:45 - of container and the only container we
06:47 - have right now is the main window
06:49 - after that I want to create some text so
06:52 - the actual text this label is going to
06:54 - display
06:55 - in my case I want to display myodes to
06:58 - kilometers and with that we have a label
07:02 - widget although if I run the app now we
07:05 - cannot see any kind of text
07:07 - the reason for that is that we need
07:09 - another kind of method to place this
07:12 - label on this window
07:14 - decanter has quite a few of those but
07:16 - I'm going to use the simplest one it's
07:18 - called pack
07:19 - now if I run this again we can see miles
07:22 - to kilometers
07:24 - although what I am quite unhappy about
07:26 - is the font size this one we can also
07:28 - change by adding another font named
07:31 - argument and in here we need a string
07:33 - then we need the font and the font size
07:38 - the font size in my case is 24 and the
07:41 - font I want to use is called calibri now
07:43 - for once again we have a much larger
07:46 - piece of text
07:47 - what you can also do is add something
07:49 - like bold in here that one would give me
07:53 - bold text
07:54 - next up I want to create the input field
08:00 - if I run the app again
08:02 - the input field is going to be this area
08:06 - here
08:08 - for this one I want to have an entry
08:10 - field next to a button
08:12 - although what is really important here
08:14 - is that both of these widgets are inside
08:16 - of a larger container
08:19 - so essentially if we have to create
08:21 - three different widgets here but let's
08:23 - go through it step by step
08:25 - first of all I want to create what is
08:28 - called a let's call it input
08:31 - brain this is going to be ttk and frame
08:36 - this like the label is going to need a
08:39 - parent or a master which again is going
08:42 - to be the window which means I want to
08:44 - set the master to window besides that
08:46 - the frame doesn't need anything else
08:49 - now I have a frame that I can put
08:51 - witches into and I want to put an entry
08:54 - inside of this Frame and a button the
08:57 - entry we create with ttk and entry this
09:01 - one now also needs a master but the
09:04 - master now is going to be this input
09:06 - frame
09:08 - which means input frame in here Order
09:10 - button I want to have ttk and button and
09:14 - once again the master is going to be the
09:17 - input frame although the button is going
09:19 - to need a second argument and that is
09:21 - going to be the text let me call this
09:23 - one convert this will be the text the
09:26 - button is going to display what we now
09:28 - have to do is take both of these widgets
09:31 - place them inside of the frame and then
09:34 - place the frame itself inside of the
09:36 - window
09:37 - and that is going to happen the same way
09:39 - we have placed the label using the pack
09:41 - method which means I want to get my
09:44 - entry widget and I want to pack it or
09:47 - place it with the pack method
09:49 - this I also want to do with the button
09:52 - which means button dot pack
09:55 - with that we have these two widgets
09:57 - inside of the input frame
10:00 - finally I want to get the input frame
10:03 - and pack it on the main window
10:06 - if I run this now we can see we have an
10:09 - entry field and a convert button
10:11 - let me move this a bit to the side
10:14 - and the way you have to understand this
10:17 - this input frame here is a frame around
10:20 - these two widgets and this we have
10:22 - placed using the pack method
10:26 - and what pack does is it places widgets
10:28 - below each other we first have the title
10:30 - label this is the first one here and
10:33 - then we have the frame this is the
10:35 - second one here and inside of the frame
10:37 - we have these widgets here we have an
10:39 - entry widget and we have a convert
10:42 - button
10:43 - since those are also placed with the
10:45 - pack method here they are on top of each
10:48 - other
10:50 - I hope that makes sense once again if
10:52 - you don't understand this don't worry
10:53 - too much about it I will explain all of
10:55 - this in a lot more detail
10:57 - although now I have a problem I want
10:59 - this entry widget and this button next
11:01 - to each other for that we can add an
11:04 - argument inside of pack and this I want
11:06 - to do for both the entry widget and the
11:08 - button the argument I want to add is
11:10 - called side and the side here is going
11:12 - to be left
11:15 - if I run this now we have the widgets
11:17 - right next to each other
11:19 - what you can also do in here is set some
11:22 - padding so pad X could be 10 pixels for
11:25 - example and if I run this now we have a
11:28 - bit of a gap between the entry field and
11:30 - the button this area here a similar
11:33 - thing I want to do to the input frame in
11:35 - here I'm going to set padding for the
11:37 - y-axis this one could be let's say 10
11:40 - pixels and now we have a bit more space
11:43 - on the top and the bottom
11:45 - because of this pad white 10 pixels here
11:48 - we have a bit more space above and below
11:51 - this Frame
11:52 - now finally we need one more widget and
11:55 - that is going to be the output in here I
11:58 - want to have an output
12:01 - label this like the title label is going
12:05 - to be ttk and label
12:08 - this one is going to be inside of the
12:11 - window container which means the master
12:14 - is going to be the window
12:17 - and for now I'm going to set some text
12:21 - let me call it
12:22 - output
12:25 - this output label we now have to pack on
12:28 - the window so we can see it and there we
12:30 - go we have output all the way at the
12:32 - bottom although for this one I don't
12:35 - really like how small the font is as a
12:37 - consequence I'm going to steal the font
12:39 - from the title label and paste it in
12:42 - here and remove the Bold part
12:44 - with that we have output that looks kind
12:47 - of similar to the title except a bit
12:49 - less bold for this pack method I want to
12:52 - set a bit more vertical padding let's
12:54 - say five pixels and with that we have
12:57 - our basic app now I can add a number in
12:59 - here and click on the button but nothing
13:02 - is going to happen
13:04 - for that we have to add a bit of
13:06 - functionality
13:07 - the most important one is inside of this
13:10 - button whenever a user is pressing the
13:12 - button I want something to happen and
13:15 - for that
13:16 - we want to add the command argument this
13:19 - one wants to have a function let me call
13:21 - it convert this is going to be a
13:24 - function and this function we have to
13:25 - create I want to Define convert it
13:28 - doesn't need any arguments and then here
13:30 - we could for example print convert
13:34 - if I now run this again and I click on
13:36 - convert we can see convert in the bottom
13:39 - because of this print statement here
13:41 - what you really want to be careful here
13:43 - is that you only want to pass a function
13:46 - in here you do not want to call this
13:49 - function the function is going to be
13:51 - called by the button itself so be
13:53 - careful with that one
13:54 - next up whenever I'm pressing the button
13:57 - I want to get the content of this entry
14:00 - field and there are two ways of getting
14:02 - this the first one the easier one is we
14:05 - can get the entry widget itself and then
14:07 - run the get method
14:09 - if I run this again I can type some text
14:12 - in here let's say 10 and now if I click
14:14 - on convert we get 10.
14:17 - that's a pretty good start but that's
14:19 - not usually the method you want to use
14:21 - to get values from a widget it's not
14:23 - particularly efficient you will learn
14:24 - later why instead what you want to do is
14:28 - create a separate variable that holds
14:30 - the value of this entry widget and
14:33 - tkinder has specific objects for that
14:35 - for example in my case I want to create
14:37 - an entry integer this accurate with TK
14:41 - and int VAR and make sure to call this
14:45 - one
14:46 - this is going to create a separate
14:48 - variable that can store and update
14:50 - values and this I want to connect to
14:52 - this entry widget using the text
14:55 - variable
14:56 - which I want to set to entry integer
15:00 - anything we're adding inside of this
15:02 - entry field will be stored inside of
15:04 - this entry integer also whenever we're
15:07 - updating this entry integer we're going
15:09 - to update the content of this entry
15:11 - field although this isn't what we are
15:13 - going to do for this video
15:15 - once you have that you can inside of the
15:18 - convert method instead of Entry I want
15:20 - to get the entry integer although the
15:23 - get method still works just fine if I
15:25 - run this again
15:27 - I can type a number in here I can click
15:30 - on convert and we're going to have the
15:32 - same result
15:33 - so far this wasn't particularly useful
15:36 - but where this system becomes much more
15:39 - powerful is labels can also have their
15:41 - own variable for example since I want to
15:44 - change the output label to the result of
15:46 - this conversion I want to create another
15:49 - ticket variable
15:51 - this I called the output string and this
15:56 - I create with TK and string VAR again
15:59 - don't forget to call it now this
16:01 - variable is going to work kind of like
16:03 - the invariable except it is going to
16:05 - store a string instead of an integer
16:08 - also I just realized
16:10 - I kind of messed up the naming
16:12 - convention here this shouldn't be entry
16:13 - in like this this should be entry int
16:16 - like so
16:17 - let me fix this right away I want to
16:19 - have entry in here and enter it all the
16:22 - way at the top
16:23 - but back to the output label now we have
16:25 - a variable that can store the data for a
16:28 - label
16:29 - this I want to connect to this output
16:31 - label
16:33 - once again for that we need a text
16:35 - variable
16:36 - the text variable here is going to be
16:38 - the output string
16:41 - and let me put all of this over multiple
16:44 - lines so it's a bit easier to see like
16:47 - so
16:48 - now if I run this you will already see
16:50 - some difference and that is
16:54 - let me scroll down a tiny bit
16:56 - when we created this output label we
16:59 - have set a text but after assigning this
17:02 - text variable here we cannot see any
17:06 - more text inside of the app the reason
17:09 - for that is that it takes variable
17:11 - overwrites whatever text is inside of
17:13 - the label
17:15 - and this we can use to update the label
17:17 - dynamically
17:19 - for example when I am pressing the
17:21 - button I want to get the output string
17:25 - and I want to set a new value the new
17:28 - value could be let's say test for now if
17:31 - I run this again and I click on the
17:33 - convert button we now have testing here
17:36 - with that we are able to get data and
17:40 - update the widgets so now we can combine
17:42 - all of that to actually make the app
17:44 - work
17:45 - first of all I want to get the mile
17:47 - input this is what we're getting from
17:51 - the entry widget so this line here I can
17:53 - just copy it in here
17:56 - like so with that we have the miles
17:59 - this I want to convert to kilometers let
18:01 - me call it km output
18:04 - to turn miles into kilometers we need
18:07 - the miles itself so mile input and
18:10 - multiply it with 1.61
18:13 - one mile is always 1.61 kilometers
18:17 - and this kilometer we want to Output in
18:20 - the label like so and now if I run this
18:24 - again
18:25 - I can type in a 10 in here convert this
18:28 - and we get 16.1
18:31 - I can do this multiple times let's say a
18:33 - 2 and we get 3.22
18:36 - I can also add large numbers in here
18:37 - this is still going to work just fine
18:40 - let's try one more time and again this
18:43 - is looking really good
18:44 - and with that we have some basic
18:46 - functionality
18:48 - so with about 37 lines of code we have a
18:52 - functioning app that at the very least
18:54 - does a basic thing although if I run
18:57 - this again this doesn't look very good
18:59 - right now the problem for tkinter is
19:02 - that the default starting methods are
19:04 - very limited but to account for that
19:06 - tkhinter has external modules that you
19:08 - can work with
19:09 - the one that I'm going to use I want to
19:11 - import with ttk and bootstrap this is
19:16 - another module that you have to install
19:18 - and that is going to happen either in
19:20 - the terminal or on the Powershell for
19:22 - example if you are on Windows you want
19:25 - to type pip install
19:27 - ttk bootstrap
19:30 - and run this again in my case this isn't
19:33 - going to do anything because I already
19:34 - have this installed
19:36 - and on Mac OS you would type pip3
19:39 - install TDK bootstrap you would have the
19:42 - same result
19:43 - with that we can use all of this and the
19:46 - way you will use this is you are
19:48 - importing ttk bootstrap as ttk
19:52 - basically what's going to happen is that
19:54 - ttk bootstrap takes all of the gtk
19:56 - widgets and adds more styling options
19:58 - which means I can simply comment out
20:00 - this one here we can already see an
20:02 - update if I type A Tenon here we can
20:05 - convert and this entire thing already
20:07 - looks much better
20:09 - that's a really good start what we can
20:11 - also do instead of setting the window
20:13 - with tk.tk we can get ttk dot window run
20:18 - this again
20:19 - and now we have to expand the window a
20:22 - tiny bit and we get the same kind of
20:24 - styling
20:25 - although what we can do now is we can
20:28 - set a theme name
20:31 - and in here we have a lot of different
20:33 - themes we could choose from
20:35 - for example the one you have seen
20:37 - earlier is called Journal if I run this
20:39 - again
20:40 - and expand the app we're going to fix
20:42 - this later now we have a different kind
20:44 - of app and while most of what you see is
20:47 - a different button color
20:49 - but the rest still works just fine
20:52 - a dark color you could use here would be
20:54 - called Darkly and this one is going to
20:56 - look something like this
20:58 - although this doesn't change any kind of
21:00 - functionality there we go this is still
21:02 - looking pretty good
21:04 - and with that we have a basic tkinter
21:07 - app
21:08 - we have covered styling we have covered
21:11 - widgets we have covered layouts and we
21:13 - have covered functionality all of the
21:15 - basics of tkinder although over the next
21:18 - couple of videos I will flesh out all of
21:19 - this in a lot of detail and we're going
21:22 - to start by talking about all of the
21:23 - widgets that you have available
21:26 - I'll see you there let's get started by
21:28 - creating a basic window with some
21:30 - widgets that is going to look like so
21:34 - in here we have one large text box where
21:37 - I can write some texts over multiple
21:42 - lines
21:44 - I also have another widget and that is a
21:46 - single line entry so in here I have one
21:49 - line of text besides that I have a
21:53 - button that if I press it it is going to
21:55 - print something you can't see it right
21:57 - now but it definitely works
21:59 - finally there's one more element this
22:02 - bit of text here is also what we are
22:04 - going to add
22:06 - although I jumped ahead a tiny bit
22:08 - before I start coding I do want to cover
22:10 - a tiny bit of theory
22:12 - the most important part is that widgets
22:15 - are the building blocks of T kinder
22:18 - which means anything you see like a text
22:20 - a button a checkbox any kind of menu or
22:23 - any kind of frame is always going to be
22:25 - a widget the best way to think about it
22:27 - is anything you see in a graphical user
22:29 - interface is going to be a widget
22:32 - and understanding widgets is incredibly
22:35 - important to understanding any GUI
22:37 - framework
22:38 - as a matter of fact any framework you
22:40 - are going to use in any language is
22:42 - going to work like that you always Place
22:45 - widgets in such an arrangement that you
22:47 - get some kind of interface
22:49 - it doesn't really matter if you use tick
22:51 - hinder react or something like flutter
22:52 - in the most basic sense they work in the
22:55 - same way although there are lots of
22:57 - other differences but they all use
22:59 - widgets inside of tkin term we have two
23:02 - sets of widgets one is called TK widgets
23:06 - and we have ttk widgets they do sound
23:09 - fairly similar and they are but ttk
23:12 - widgets is what you actually want to use
23:14 - the original TK widgets were made in the
23:17 - original part of tkinter they do work
23:19 - and we are going to use some of them but
23:22 - most of the time they do look quite
23:24 - outdated all of them were made in the
23:26 - 90s and The Styling really doesn't look
23:28 - proper anymore ttk widgets however
23:31 - haven't added much later and work in the
23:34 - same way but look much better and have
23:36 - some extra functionality which is why we
23:38 - are going to use those primarily
23:40 - and that is all we need to get started
23:43 - so let's jump into the code and let's
23:45 - have a look at all of this here I have a
23:48 - completely empty python file and the
23:51 - very first thing that I do have to do is
23:53 - to import T kinder
23:55 - this is usually abbreviated as TK and
23:59 - once we have that I already want to
24:01 - execute the code just to see if we're
24:03 - not getting an error and I don't which
24:05 - is a good sign that means I have tkinter
24:08 - installed if you're getting an error you
24:11 - probably want to check how to install
24:12 - the Kinder with that covered I want to
24:15 - create a window and this window we
24:19 - create with TK and then uppercase t and
24:23 - lowercase k and this we have to call
24:26 - what this is going to return is the
24:28 - actual window that we can place
24:29 - everything else in which means I want to
24:32 - store this inside of another variable
24:34 - let me call it window when you look
24:36 - online you see quite a few different
24:38 - names for this kind of variable a lot of
24:41 - people call it root or you see app quite
24:44 - often I prefer to use window but it
24:47 - really doesn't matter choose whatever
24:48 - you think is best but once we have that
24:51 - we do have a window that we could show
24:53 - however if I run the code now we can't
24:57 - see anything
24:58 - the reason for that is that we need one
25:01 - more method and let me add another label
25:04 - here and let's call it run what we have
25:06 - to do to actually see something is we
25:09 - have to get the window the one we just
25:11 - created and call Main loop on it and
25:15 - don't forget to call it as well now if I
25:17 - run it we can see a basic app
25:21 - you can also resize it all of this works
25:23 - pretty well although it doesn't do very
25:26 - much right now
25:27 - and let's talk very quickly about what
25:29 - main Loop is doing it does a couple of
25:31 - things
25:32 - the main Loop has two major
25:34 - functionalities the first one is it
25:36 - updates the GUI that way if you write
25:39 - some text or update any kind of widget
25:41 - you actually see the result besides that
25:44 - the main Loop is also checking for
25:46 - events this means without the main Loop
25:48 - there wouldn't be any way to check for
25:49 - button clicks Mouse movement closing the
25:51 - window or anything the user could
25:53 - potentially do all of this combined
25:56 - means that our app couldn't run without
25:58 - the main Loop which is why we always
26:01 - have to call it but other than that it
26:04 - is pretty straightforward although there
26:06 - is one thing that you do want to
26:07 - consider this main Loop here runs until
26:10 - we are closing the application which
26:12 - means if I write something afterwards
26:14 - let's say print
26:16 - hello and run the code again
26:19 - we can see the window but we can't see
26:22 - this print hello
26:24 - only when I close the app we get hello
26:27 - which means the code is stopped on this
26:30 - line here and only when we close the
26:32 - window then we get to the next line in
26:34 - most instances this isn't going to be an
26:36 - issue but sometimes you do want to be
26:38 - aware of it alright with that we have a
26:41 - basic window and there's already a
26:44 - couple of things that we can do for
26:46 - example we could add window dot title
26:49 - and this is going to be method so we
26:51 - want to run it and in here we can add a
26:53 - string that changes the name of the app
26:56 - in this case I'm going to call it window
26:58 - and widgets
27:00 - if I run this again and expand the app a
27:03 - tiny bit we can see window and widgets
27:06 - all the way in the top left another
27:08 - thing that you can do is set the
27:10 - geometry this is another method so
27:12 - window dot geometry
27:15 - in here you can do a couple of things
27:17 - the most basic one is that the width and
27:20 - the height of your app at least when it
27:22 - starts
27:23 - and this you do with a string again and
27:25 - tkinder expects a string with the width
27:28 - then an X and then the height kind of a
27:31 - weird format but it is what it is for
27:34 - example if you wanted to have an app
27:36 - that is 800 by 700 pixels you want 800 x
27:41 - 700. actually let me change this to a
27:43 - 500 so you can see it a little bit
27:45 - better
27:46 - running this again now we're getting
27:48 - another app that is 800 pixels wide and
27:52 - 500 pixels tall the numbers we specified
27:55 - here and here later on we are going to
27:58 - learn a few more methods to influence
28:00 - the window but for now I don't want to
28:02 - get into too much detail because it's a
28:04 - tiny bit more advanced
28:05 - what is much more important is that we
28:08 - want to create widgets that is going to
28:11 - be the actual lifeblood of our
28:13 - application and remember what I said
28:15 - earlier we have TK widgets and we have
28:18 - ttk widgets and just to get started I
28:21 - want to create a TK widget one that we
28:24 - are going to see fairly often is called
28:26 - TK dot text this is a multi-line text
28:30 - input although when we are creating it
28:33 - we have to give it at least one argument
28:35 - we have to tell it what its Master is
28:39 - in our case the master is going to be
28:41 - the window the main application so
28:44 - Master is going to be the window
28:46 - the way you want to think about it is
28:49 - that the master is basically the parent
28:51 - when we are creating this text box where
28:54 - do we want to put it in my case I want
28:56 - to put it right on the window for now
28:58 - don't worry too much about it we are
29:00 - always going to place widgets on the
29:02 - window but later on when I talk about
29:04 - layouts we're going to change this quite
29:06 - a bit just don't worry too much about it
29:08 - this is all we need to create a basic
29:10 - text input box although if I run the
29:13 - code now we can't see anything
29:16 - the reason for that is that this line
29:18 - here only creates a widget and tells
29:21 - what the parent is we don't actually
29:23 - place it in a visual manner for that we
29:26 - need one more method and tick enter has
29:28 - quite a few different ones
29:30 - the simplest one is called pack
29:33 - if I run this and run the entire app now
29:36 - we can see a text box
29:40 - and this one can work over multiple
29:42 - lines so in here I can write as much as
29:45 - I want this always works
29:47 - when we get started we are creating One
29:50 - widget with this line here and this
29:53 - widget has a master which is the window
29:55 - which means this TK text is going to be
29:58 - a child of this main widget here and
30:01 - what pack is doing if I draw the entire
30:04 - thing this one here is the main window
30:06 - the one we created here and we have
30:09 - placed the widget in the middle of the
30:11 - top this is what pack is doing it takes
30:14 - a widget and it places it in the middle
30:16 - on the top you can customize this quite
30:19 - a bit but for now I'm not going to worry
30:21 - too much about it and with that you can
30:23 - create and place a basic widget although
30:26 - in practice this is not exactly what you
30:28 - see what you see much more often is that
30:31 - people store this widget in separate
30:33 - variable and then called pack on this
30:36 - variable separately which means I want
30:38 - to create another variable let me call
30:40 - it text and this variable is going to
30:43 - contain the widget meaning I want to get
30:45 - rid of this pack and on the next line I
30:48 - want to call text Dot pack
30:51 - the result is going to be the same
30:53 - although now I do have access to this
30:56 - widget with the text variable
30:58 - which I am not going to use for this
31:00 - part but in later tutorials this is
31:03 - going to be really useful
31:04 - and this is what you see most of the
31:06 - time in tkinder when you are creating
31:08 - and placing widgets
31:10 - and with the basic logic covered let's
31:12 - talk about ttk widgets those are the
31:16 - widgets you actually want to use most of
31:18 - the time and to use those we first of
31:21 - all want to import them properly to use
31:23 - them easily this happens
31:26 - with from tkinter import ttk ttk is just
31:31 - another sub-module of tkinter so you can
31:34 - just import it from tikenter and that's
31:36 - all you need
31:37 - after that you are using ttk widgets
31:40 - like you would use TK widgets for
31:43 - example I want to create a label
31:46 - and this label I create with ttk DOT
31:49 - label like we have done for the text we
31:53 - have to set the master
31:55 - and this once again is going to be the
31:57 - window which essentially is going to be
31:59 - the parent
32:01 - besides that for the label we need a
32:03 - text argument
32:05 - in my case I want to go with this is a
32:08 - test
32:09 - with that we have a label and this label
32:12 - I want to pack on my window
32:14 - if I run the code now we have a text
32:17 - widget this one doesn't do very much but
32:20 - it will display some text and this is
32:22 - also a very good illustration of what
32:24 - the pack method does if this one here is
32:27 - the window so we have a window like so
32:30 - what pack is doing is it takes a widget
32:33 - and it packs it all the way on the top
32:36 - like a stack so text was our first
32:38 - widget and then we had the label widget
32:40 - that we placed right below and since we
32:44 - called pack on the text first number one
32:46 - here this one is on top
32:48 - and the label had number two so this one
32:51 - is right below which means if I place
32:54 - those two around and create a label
32:56 - first like so we should have this widget
32:59 - all the way on the top if I run this
33:01 - again they can see we now have the text
33:03 - on the top I hope it makes sense so far
33:06 - I am not going to go into any further
33:09 - depth in terms of layouts until we get
33:11 - into the proper layout section for now
33:14 - all you really have to understand is
33:15 - that we are using pack to place widgets
33:17 - on the window so that is a label let me
33:21 - actually rename the comment here ttk
33:23 - label and this I want to call TK text
33:27 - there are two more widgets that I do
33:29 - want to cover in this section the first
33:31 - one is called ttk entry
33:34 - this is a single line entry widget let
33:38 - me save it under entry and this we are
33:40 - creating with ttk and entry
33:43 - in here once again as always we have to
33:46 - set a master which is going to be the
33:48 - window
33:49 - and once we have that I want to get
33:51 - entry dot pack
33:54 - now if I run this again
33:56 - in the bottom we have another entry
33:59 - widget and in here we can write a single
34:02 - line of text if I press enter nothing
34:06 - happens
34:08 - but at the very least it is working
34:11 - and finally I want to create a ttk
34:14 - button
34:15 - let me save it in a variable called
34:17 - button and this button I create with ttk
34:20 - DOT button in here once again as always
34:24 - we need a master which is going to be
34:26 - the window and besides that we need a
34:28 - text for the button this I get with text
34:31 - like for the label and let me call this
34:33 - one a button this button
34:36 - we have to place on the window with the
34:38 - pack method and if I run this we have a
34:42 - button that we can press so this one is
34:45 - working pretty well although this button
34:47 - doesn't actually do anything right now
34:50 - to make it do something we have to add
34:52 - another named argument in here and this
34:54 - named argument is called command
34:57 - this one wants to have some kind of
35:00 - function for example this could be a
35:02 - button function
35:04 - this button function is just a regular
35:07 - python function so all the way at the
35:09 - top I want to create the button function
35:12 - I don't need any arguments and in here I
35:16 - just want to print
35:18 - a button was pressed
35:21 - and now if I run this and I press on the
35:25 - button we get a button was pressed
35:29 - which means every time we are pressing
35:31 - this button we are executing this
35:34 - function the function we have created up
35:37 - here
35:38 - and what is super important to
35:40 - understand here is that this is just a
35:43 - function you do not want to call it
35:46 - that would cause an error
35:49 - the reason why you don't want to call it
35:51 - is you only want to call this function
35:53 - when you are pressing the button so the
35:55 - button itself calls this function
35:57 - so with that we have the basic widgets
36:00 - these are the widgets you are probably
36:02 - going to use most of the time
36:05 - now with that what I want you guys to do
36:07 - is an exercise and then we can finish
36:10 - this part what I want you guys to do is
36:12 - add one more text label and a button
36:15 - with a function that prints hello the
36:18 - label the one you are creating here
36:20 - should say my label let me put this one
36:23 - in quotation marks like so and this
36:26 - label should be between the entry widget
36:28 - and the button
36:29 - those two we have created here the label
36:32 - I want to be between those two
36:34 - and all of this should be fairly
36:36 - straightforward so pause the video now
36:38 - and try to figure this one out
36:42 - let's get started with the label that's
36:45 - the easier part
36:46 - the label I want to let me add the
36:50 - exercise label here
36:53 - and I want to call this the exercise
36:55 - label this is once again just going to
36:58 - be ttk dot label and in here we need a
37:03 - master which is going to be the window
37:05 - besides that I want to have a text and
37:09 - the text should say my label the one I
37:13 - specified in the exercise
37:15 - with that I have to widget and this
37:17 - widget so the exercise label I want to
37:20 - pack on the window
37:22 - if I run this now you can see I have my
37:25 - label all the way at the bottom the
37:28 - issue is this my label should be between
37:30 - the button and the entry widget so we
37:33 - have to move it
37:35 - since we know that Pax respects the
37:37 - order of our code what we want to do is
37:39 - to move this text label between the
37:41 - entry and the button like so that way
37:45 - we are placing the first label all the
37:49 - way in the top below there we have the
37:50 - text then we have the entry then we have
37:53 - the exercise label and then we have the
37:55 - button which means the exercise label is
37:58 - between the entry and the button
38:00 - so let's run all of this again and there
38:03 - we go my label is between the entry
38:05 - widget and the button
38:07 - which means all we have to do now is to
38:09 - create the exercise button
38:12 - this I want to store in the variable I
38:15 - called exercise button and this is going
38:17 - to be ttk dot button inside of it as
38:21 - always I need a master which is going to
38:23 - be the window besides that I want to
38:26 - have some text
38:27 - the text here doesn't really matter let
38:29 - me call this one the exercise button and
38:32 - just to see that this is working let me
38:34 - place the exercise not the label but the
38:37 - button
38:38 - on the window
38:40 - and if I run this now you can see all
38:43 - the way at the bottom we have the
38:44 - exercise button
38:46 - that is a really good start now we just
38:49 - have to create a function that makes
38:51 - this button print the word hello
38:54 - I want to create the exercise
38:57 - button function
39:00 - doesn't need any arguments and what I
39:02 - want to do in here is to print the word
39:04 - hello
39:06 - inside of the button I have to add the
39:09 - command argument and this is going to be
39:11 - the exercise button function once again
39:14 - remember you do not want to call this
39:16 - you just want to pass the function in
39:18 - here the button itself is going to call
39:20 - this function
39:21 - and now if I run this and I press on the
39:25 - exercise button we get the word hello
39:27 - with that we have covered the absolute
39:30 - basics of tkinter now there's one more
39:33 - really quick thing that I do want to
39:34 - cover and that is inside of the button
39:37 - the function you pass in here doesn't
39:40 - necessarily have to be a function by
39:42 - itself it could also be a Lambda
39:44 - function I'm going to duplicate this
39:46 - line here and comment out the original
39:48 - and I'm going to replace this exercise
39:51 - button function with a Lambda function
39:54 - inside of this function all I really
39:56 - want to do is to print the word hello
39:59 - the result is going to be the same
40:01 - meaning if I run the code now and I
40:04 - press on the exercise button we get the
40:06 - word hello
40:07 - which means that these two lines here
40:09 - are identical although you probably want
40:12 - to use the second one because this one
40:14 - is much easier to use since we only want
40:17 - to do something fairly simple a Lambda
40:19 - function here would be perfectly fine
40:20 - also if you're not sure about Lambda
40:23 - function this is probably something you
40:24 - want to look into for a tiny bit at
40:26 - least for any kind of GUI Lambda
40:28 - functions are pretty important
40:30 - especially for buttons but well with
40:33 - that we have the absolute basics of the
40:36 - kinder so far our app is pretty static
40:39 - so in this part I want to get widget
40:41 - data and change widgets and for that we
40:45 - have to cover a couple of things the
40:47 - first part is that there are two major
40:49 - ways to get data from a widget the first
40:51 - one is called tkinder variables this is
40:54 - the one you want to use most of the time
40:57 - although this one is a tiny bit more
40:59 - advanced so I'm going to cover it in the
41:00 - next few parts for now we're going to
41:03 - use the get method
41:05 - lots of widgets have fairly obvious data
41:08 - that the user would want to get hence we
41:11 - have a dedicated method for it the best
41:13 - example here is the entry widget if we
41:16 - run the get method on it it is going to
41:18 - return the text inside of that widget
41:20 - and that is the easiest way to get data
41:24 - from a widget
41:25 - so let's play around with that and once
41:27 - we have that we can change the widget
41:29 - with that data alright once again I have
41:32 - a completely empty python file and the
41:35 - first thing I want to do is to import
41:36 - the Kinder SDK and since I do want to
41:40 - use the nicer widgets I also want from
41:42 - tkinter import ttk
41:45 - and once we have that I want to create a
41:48 - window this I want to store in a window
41:50 - variable
41:52 - and this we create with TK and TK
41:55 - finally to see something I want to run
41:58 - the entire thing and this I do with
42:01 - window.main Loop
42:04 - like so and if I run this thing now we
42:07 - can see we have a basic window that we
42:09 - can work with
42:10 - on top of that I also want to change the
42:13 - title which I do with window.title this
42:16 - I called getting and setting widgets
42:21 - let me run this again and you can see we
42:24 - have a much better title
42:27 - so with that I want to create some
42:30 - widgets that we can work with
42:32 - I want to create a label I want to
42:35 - create an entry widget and I want to
42:37 - create a button and this could already
42:40 - be a pretty good exercise for you see if
42:42 - you can remember what was done in the
42:44 - last part and create the label an entry
42:46 - and a button and see if we can figure
42:49 - this one out
42:53 - all right let's get started by creating
42:55 - a label and this we get with ttk and
42:58 - label once again we need a master and
43:02 - this is going to be the window for the
43:04 - content or the text of this widget I
43:08 - want to set some text it doesn't really
43:11 - matter what it is just choose whatever
43:13 - you want in here finally I want label
43:16 - dot pack
43:17 - this is going to be the label besides
43:19 - that we have the entry which we're
43:21 - getting with ttk and entry
43:25 - in here we just need a master so I can
43:27 - copy from the label and paste it in here
43:30 - and finally I want entry dot pack
43:34 - for the button we need ttk dot button
43:38 - the master once again and we need a text
43:41 - and this could be the button
43:45 - to show the button I want to pack that
43:48 - button and with that we have the three
43:51 - widgets let me run the code and this is
43:54 - looking pretty good I have some text I
43:56 - can write something in the entry and I
43:59 - can press the button so this is working
44:01 - really well
44:02 - now what I want to do is when I'm
44:05 - pressing the button I want to add a
44:07 - command and this is going to be the
44:09 - button function inside of this button
44:12 - function whenever I press the button I
44:15 - want to get the content of the entry
44:17 - widget so let's create that function
44:20 - for that all the way at the top I want
44:22 - to have a button function it doesn't
44:25 - need any arguments
44:27 - and in here I want to get the content of
44:31 - the entry this entry here so how can I
44:35 - get that
44:36 - and for that we have the get method all
44:40 - we really need is entry dot get this is
44:43 - going to return the content of the entry
44:45 - widget so if I print it I can run the
44:48 - entire thing again and now if I press
44:52 - the button nothing happens the reason
44:54 - for that is that nothing is inside of
44:56 - this widget but if I write some text and
45:00 - print and press on the button again we
45:03 - get if I write some text whatever I've
45:05 - just written this works with literally
45:07 - any kind of text and now if I press the
45:11 - button without any content you can see
45:13 - we have an empty line
45:16 - so this is working just fine this get
45:19 - method here for a couple of widgets is
45:22 - the easiest way to get the information
45:24 - however you do have to be really careful
45:27 - here because lots of widgets do not have
45:29 - a get method the label for example
45:32 - doesn't have such a method so if I run
45:35 - label
45:36 - and press on the button we're getting an
45:40 - error the error being that label object
45:43 - has no attribute get so this would not
45:46 - work here I gotta change it back to
45:48 - entry because this is the only one that
45:50 - really works amongst all of the widgets
45:53 - that we have right now so with that we
45:56 - can work on the next part and that is to
45:59 - change widgets let's talk about that bit
46:01 - every single widget in tkinter has a
46:04 - config method and this is what you're
46:07 - using to update the method at least in a
46:09 - very basic way
46:11 - for example inside of the label we can
46:13 - use the config method to update the text
46:15 - this one should be fairly
46:17 - straightforward and since this is so
46:19 - simple there's a shorthand in tkinter
46:21 - this one looks like that we're getting
46:24 - the widget and then kind of like
46:26 - indexing we are passing in a named
46:29 - argument in this case text the same text
46:31 - we have used up here
46:33 - and then we can assign whatever new
46:35 - value we want to assign to it
46:38 - the same thing we have done up here
46:40 - both of these methods are identical you
46:43 - can basically choose whatever you prefer
46:45 - so let's play around with them
46:47 - back in the code whenever I'm pressing
46:50 - this button here I also want to update
46:52 - this label
46:54 - for that let me add another comment here
46:56 - update the label
46:59 - I want to get my label and I want to run
47:02 - the config method
47:05 - inside of this I want to change the text
47:08 - of the label and this let's for now go
47:11 - with some other text
47:14 - that is all we need let me run this
47:16 - entire thing and now if I press on the
47:18 - button we get some other text
47:21 - so this is all we need here
47:24 - now what you do see fairly often is that
47:26 - some people use config other people use
47:29 - configure
47:30 - the result is going to be the same so if
47:32 - I press on the button again we get also
47:34 - some other text
47:36 - right now both are working just fine but
47:39 - I think at some point config is going to
47:41 - be removed so you probably want to use
47:43 - configure most of the time
47:45 - that being said this kind of thing here
47:47 - is not really what you would want to use
47:50 - instead you would go with label
47:53 - and then text and then you can assign
47:55 - the new value so in here I can set some
47:59 - other text and comment out the line
48:02 - we've just created and run the entire
48:04 - thing again and now if I press on the
48:06 - button we are getting the same result
48:09 - which means those two lines here are
48:11 - equivalent they do the same thing and
48:14 - since this one here is a bit more
48:16 - concise I think this is what you would
48:18 - want to use but once again it really
48:21 - doesn't matter whatever you prefer and
48:23 - now that we do have that we can connect
48:25 - updating the label and getting the
48:28 - content of the entry widget so what I
48:31 - want to do is I want to update the label
48:34 - to whatever text is inside of the entry
48:36 - widget
48:37 - and for that I don't want to print the
48:40 - entry widget so let me get rid of the
48:42 - print statement here instead I want to
48:45 - save the content let's call it entry
48:47 - text
48:49 - as another variable
48:51 - and the value here is just going to be a
48:54 - string and this string I want to use
48:56 - down here
48:58 - or my label
49:01 - and this should be all I need if I run
49:03 - the entire thing again I can print a new
49:07 - label and now if I press on the button
49:10 - we get a new label this also works
49:13 - multiple times so some other text I
49:16 - press the button we're getting some
49:18 - other text
49:19 - with that you can get information from a
49:21 - widget and you can update an existing
49:24 - widget
49:24 - and that is basically all you have to
49:27 - know for the basics
49:29 - although for now this is quite limited I
49:32 - guess what I could be covering is that
49:34 - besides the text there are quite a few
49:36 - attributes that you could Target
49:39 - for example what you could do is you can
49:41 - get the entry and there is the state
49:45 - the state determines if the widget is
49:47 - enabled or disabled
49:51 - if I left it like this after I press the
49:54 - button the entry widget would not work
49:56 - anymore let me actually try
49:58 - if I now write in here let's just call
50:01 - it test and I press the button
50:03 - the entry widget is going to be disabled
50:06 - which means I even if I click on it
50:08 - nothing is going to happen
50:10 - although we did update the label so it
50:13 - is still working but after we're
50:14 - pressing the button it is disabled if
50:17 - you want to know all of the possible
50:18 - things you can do with a widget all you
50:21 - have to do is call the widget you want
50:23 - to look at and then the config let's
50:26 - call it configure method without any
50:28 - arguments this is going to return all of
50:31 - the options if you print that
50:33 - you get what is being returned so let me
50:37 - press on the button
50:38 - and close and expand this a tiny bit in
50:42 - here you can see all of the options you
50:44 - can work with for example I have used
50:47 - the text and I have also used this state
50:50 - if I can find it really quick down here
50:53 - so text and State
50:56 - and well there are quite a few more
50:59 - throughout this entire series I'm going
51:01 - to cover basically all of them for now
51:03 - don't worry too much about them I'm
51:06 - going to comment out this part to not
51:07 - make it confusing and that was quite a
51:10 - bit of information so let's do one more
51:14 - exercise and then we can finish this
51:16 - part what I want you guys to do is to
51:18 - add another button that changes the text
51:20 - back to some text the one that we have
51:23 - seen in the original
51:25 - on top of that after the button was
51:27 - pressed the entry widget should be
51:29 - enabled again when we're pressing this
51:31 - button here the entry widget is disabled
51:34 - when we are pressing the other button
51:35 - the one you are going to create it
51:37 - should be enabled again
51:40 - and pause the video now and try to add
51:42 - this new button with the edit
51:44 - functionality and see if we can figure
51:46 - it out
51:49 - let me start by adding the exercise
51:52 - button
51:54 - this is just going to be another ttk dot
51:57 - button with a master being the window
52:03 - or the text
52:04 - I just want to add let's call it the
52:06 - exercise button
52:09 - finally we need a command
52:12 - and the command once again is going to
52:14 - be a function I'm going to create it
52:15 - right here below the exercise let me
52:18 - call this one the reset function
52:21 - it does need any arguments and in here I
52:25 - want to do a couple of things but
52:27 - they're going to come in a bit so I'm
52:28 - going to add pass for now
52:30 - this function I want to call when I
52:32 - press the button so reset function and
52:34 - also don't forget I want to pack the
52:37 - exercise button on the window
52:39 - if I run the entire thing now I have
52:41 - never button that I can press but
52:43 - nothing happens
52:44 - that is the functionality we can work on
52:47 - now
52:48 - there are two things we have to cover
52:50 - number one we have to change the text
52:52 - back to some text let's work on that I
52:55 - want to get my label once again and in
52:58 - here I want to change the text
53:02 - and the text I want is some text
53:07 - that should already reset the label so
53:10 - let me run it and I can write some other
53:15 - text and press the original button and
53:18 - there we go we have some other text
53:20 - however now if I press the exercise
53:22 - button we go back to some text the
53:25 - problem we have is that the entry widget
53:27 - still doesn't work that fortunately we
53:30 - can change quite easily I want to get
53:32 - the entry widget in here I want to
53:35 - Target this state and this state I want
53:38 - to set to enabled
53:40 - I can run the entire thing again I can
53:43 - write whatever I want in here I can
53:45 - press the button and now the entry
53:47 - widget is disabled but if I press the
53:49 - exercise button we have some text again
53:52 - and I can work with the entry widget
53:54 - again and write something else and now
53:58 - once again if I press the button
54:00 - we go back to the enter widget disabled
54:02 - and we have updated the label and this I
54:05 - can do as often as I want and with that
54:07 - we have added a fair bit of
54:09 - interactivity to our app it's not very
54:12 - much but at the very least it's a start
54:14 - although in the next part we're going to
54:16 - make all of this significantly more
54:18 - powerful in this part we are going to
54:21 - cover TK enter variables and this is
54:24 - what you probably want to use most of
54:25 - the time to make widgets interact with
54:27 - each other
54:29 - tkinder has a bunch of inbuilt variables
54:32 - and those are designed to work really
54:35 - well with widgets what that means is
54:37 - that these can be automatically updated
54:39 - by a widget and they can also update the
54:41 - contents of a widget
54:43 - but fundamentally we are still talking
54:46 - about basic data structures like string
54:49 - integers or booleans for this part I am
54:52 - primarily focusing on a string just to
54:55 - keep things simple but well so far this
54:58 - probably doesn't make too much sense so
55:00 - let me give an example
55:02 - let's say we have a label and an entry
55:04 - and both of those should always have the
55:07 - same text whatever I'm writing inside of
55:09 - the entry is also going to be the text
55:11 - of my label coincidentally that is
55:14 - actually what we are going to make let
55:16 - me show you actually the project we are
55:18 - going to build is going to look
55:19 - something like this in here whatever I
55:21 - write in the entry is going to be the
55:25 - text of the label
55:28 - so those two widgets are very closely
55:31 - connected
55:32 - and this we couldn't do so far but we
55:35 - can do it quite easily using a tkanta
55:38 - variable
55:39 - basically how it works is we are
55:42 - creating a string variable so a ticket a
55:45 - variable that stores a string and this
55:47 - variable automatically gets the value of
55:50 - the entry and it automatically sets the
55:52 - value of the label that way both of
55:54 - those are always going to be connected
55:56 - it's not part of the slide but a
55:59 - stringvar also sets the value of the
56:01 - entry so if you had two entry widgets
56:05 - they could also be connected using a
56:07 - string variable I think all of this is
56:09 - going to be much easier to understand
56:10 - when we actually implement it so let's
56:13 - have a look at this encode and let's see
56:15 - how far we get here is a nearly empty
56:17 - python file I have imported tkinter and
56:19 - ttk
56:20 - with that covered I want to create a
56:23 - window and I want to run the window
56:26 - this we have seen a couple of times by
56:28 - now I want to create a window variable
56:30 - and in here TK and TK
56:33 - I guess while we're here I also want to
56:35 - set the title of this thing to tkinter
56:38 - variables
56:40 - once we have that I want to run the main
56:43 - Loop and if I execute all of this we can
56:46 - see a basic window it doesn't do very
56:48 - much right now but it's a start
56:51 - so with that I for now want to create
56:54 - two different widgets I want to create a
56:57 - label and I want to create an entry
57:00 - widget and once again if you want to
57:02 - practice create and pack them on the
57:05 - window yourself but in my case both of
57:08 - those are going to be ttk
57:10 - one is going to be a label the other is
57:13 - going to be an entry
57:16 - although besides that both need the same
57:18 - Master which is going to be the window
57:20 - the label however needs some kind of
57:22 - start text
57:24 - let me call it label for now it doesn't
57:26 - really matter we are going to change it
57:27 - very soon anyway and once we have that I
57:30 - want to pack the label and I want to
57:33 - pack the entry
57:35 - and let me add a tiny bit of white space
57:38 - run the entire thing and there we can
57:40 - see we have a label and an entry field
57:42 - although they are not connected right
57:45 - now and for that we need a teak and a
57:48 - variable this I want to create in a
57:50 - separate section in here I want to have
57:52 - a t cantare variable this you create
57:55 - with TK and then you need the name of
57:59 - the variable you want to create the one
58:01 - I want to create is going to be a string
58:03 - variable
58:04 - and this you have to call it's a
58:06 - separate object this object I want to
58:09 - store inside of a separate variable
58:11 - I'm going to call this one a string VAR
58:15 - and besides a stringvar you also have an
58:18 - INT VAR you have a double VAR and you
58:22 - have a Boolean VAR
58:26 - depending on what value you need but
58:28 - stringvar is what I'm going to use for
58:30 - this video for the next part when we
58:32 - talk about the buttons I'm going to use
58:33 - other kinds of variables as well how
58:36 - this is going to work is that this
58:38 - string bar is going to contain some kind
58:40 - of string and when we pass this into the
58:42 - label it is going to overwrite whatever
58:45 - the text is so for example if inside of
58:48 - this string VAR we have a low
58:51 - then this hello would overwrite the text
58:55 - on top of that we can also connect the
58:57 - string VAR to the entry and this would
59:00 - mean that the entry widget overwrites
59:04 - this string bar which means this widget
59:06 - and this widget have to be connected to
59:09 - this string VAR and for that we have
59:12 - another named argument it is called text
59:15 - variable
59:17 - both a label and entry have the same one
59:19 - so in here I want to pass in the string
59:22 - VAR and that is actually all we need if
59:25 - I run the code now you can already see
59:27 - one change let me expand the window a
59:29 - tiny bit
59:30 - we used to have a label here and it
59:33 - disappeared the reason why it
59:35 - disappeared is because the string VAR
59:37 - doesn't have any value right now so the
59:40 - label does exist but it's empty so we
59:42 - can't see it however if I start typing
59:45 - in here you can see the label text again
59:53 - and the reason why this is working is
59:55 - that both the entry and the label share
59:58 - the same data
60:00 - and this is a very powerful system what
60:02 - you can also do is let me create another
60:05 - entry I can just copy this one and call
60:08 - this entry 2 and entry 2. and if I run
60:11 - the code now again we have two entry
60:13 - Fields if I type in the first one
60:18 - the second one is also updated and if I
60:20 - update the second one the first one is
60:22 - also being updated the reason for that
60:24 - is that these three widgets all share
60:27 - the same string or string variable and
60:31 - that way whatever sn1 is going to be in
60:33 - the other as well and that is a really
60:36 - powerful way to connect different
60:37 - widgets it's super super useful what you
60:40 - can also do is set a start value for
60:43 - this string VAR this you do by adding
60:45 - one argument that is called value
60:47 - in here we can set basically whatever
60:49 - you want for example in my case I want
60:52 - to go with start a value now if I run
60:54 - this again we have start value as the
60:57 - start value for all of the fields and
60:59 - for the label
61:00 - although I can still change them to
61:02 - whatever I want
61:04 - in this case though I don't want to use
61:06 - the start value but this is something
61:07 - you could do
61:08 - on top of that what you can also do if I
61:12 - get rid of enter widget 2 and instead
61:14 - create another button this is going to
61:16 - be ttk button with Master being the
61:20 - window and for the text let's go with
61:24 - button
61:25 - this button I have to pack
61:29 - and if I run the entire thing now we can
61:31 - see we have a button it doesn't really
61:33 - do anything right now
61:34 - for that I want to create another
61:37 - function let's call it button function
61:40 - again we don't need a parameters and in
61:42 - here I want to print the content of this
61:46 - string variable
61:47 - and this we can do quite easily because
61:49 - the string variable has a get method
61:52 - which means all I have to do is add the
61:55 - command named argument for my button and
61:58 - pass in the button function and now I
62:01 - can run the entire thing again
62:03 - and let me type and test it here the
62:06 - label still updates and if I press on a
62:08 - button we also get test
62:10 - we can also write something else and if
62:14 - I press the button again we get write
62:16 - something else finally there's one more
62:18 - thing that I do want to cover and that
62:20 - is you can also set the value of any of
62:23 - these variables let's say after I press
62:25 - a button I want to set the value of this
62:28 - string VAR to button pressed this I do
62:32 - with stringvar and set and in here I
62:35 - just want to add the value I want to set
62:37 - it to button pressed in my case
62:41 - if I now run this thing
62:43 - and let me write just test test test and
62:48 - if I click on the button we get button
62:50 - pressed
62:52 - and you can also see this is updated in
62:54 - the entry and in the label as well
62:56 - because these two share the same data
62:58 - and with that we have taken the variable
63:01 - although I think it might take you a
63:03 - couple of minutes to get your head
63:05 - around it but once you understand it
63:06 - it's super useful and really powerful to
63:09 - connect different widgets and ultimately
63:11 - a much better system than using get
63:14 - basically any widget in tkinter either
63:16 - has a text variable or just a variable
63:19 - we're going to see quite a few more in
63:21 - the next section but before we get to
63:24 - that I want to do some exercises
63:27 - specifically I want you guys to do this
63:30 - I want you guys to create two entry
63:31 - fields and one label that should all be
63:33 - connected via a string variable
63:36 - also set the start value of test and
63:39 - well that should be all you need
63:41 - and pause the video now and try to
63:43 - implement all of this
63:48 - let's get started by creating another TK
63:52 - string VAR
63:54 - this I want to assign to the variable
63:58 - let me call it exercise
64:01 - VAR
64:02 - and in here we already want to set a
64:05 - start value now this you could do in two
64:07 - different ways you could either get the
64:10 - exercise bar and set
64:12 - it to the string test
64:15 - or you could set a start value so in
64:18 - here the value is going to be test
64:22 - both of those are going to get you the
64:23 - same results so let me stick with this
64:25 - one it's a bit more concise once we have
64:28 - that I want to create two entry fields
64:29 - and one label
64:32 - and there should be one label
64:35 - so let's say entry one
64:38 - and entry two
64:40 - since they are both going to be
64:42 - identical I can just do this by copying
64:45 - the text I want to have ttk dot entry
64:48 - then Master is going to be the window
64:51 - and the text variable is going to be the
64:54 - exercise VAR
64:56 - and then I also want to pack both of
64:59 - them although this should be one and
65:02 - this should be two finally I want to
65:04 - create a label and let me call this the
65:07 - exercise label
65:09 - and I am very bad at spelling exercise
65:12 - but for this one we need TDK and label
65:15 - Master is going to be window I'm going
65:18 - to say that a lot
65:19 - we don't actually need a text here all I
65:21 - really care about is a text variable
65:24 - and this is going to be the exercise of
65:27 - r
65:27 - finally I want to pack this label
65:32 - and with that we should actually be good
65:33 - to go if I run the code now you can
65:36 - already see we have two entry widgets
65:39 - and a text or a label widget and all of
65:43 - them have tests if I change the test in
65:45 - either of the entry widgets we get
65:47 - something else
65:48 - once again this is working because they
65:50 - all share the data which means if you
65:52 - update one you update all of them and
65:55 - with that we have string variables it's
65:58 - super powerful Concept in the next part
66:00 - we will talk about buttons and then
66:02 - there this system is going to become
66:03 - even more powerful so I'll see you there
66:06 - in this section we are going to create
66:08 - some buttons specifically we are going
66:11 - to create this app here we have the
66:14 - normal button this one we have already
66:16 - seen then we have checkbox buttons and
66:18 - we have radio buttons how they work in
66:21 - detail I'll explain while I make this
66:23 - section but these are the main buttons
66:25 - we are going to work with
66:27 - so there are three major kinds of button
66:30 - we have a button a check button and a
66:32 - radio button and a really important
66:34 - thing here is that to use them properly
66:37 - you are going to need teak into
66:39 - variables there's stuff I have covered
66:41 - in the last section but well let's Jump
66:43 - Right In and let's have a look here I
66:45 - have a new python file and I already
66:48 - have some imports and I'm creating the
66:50 - basic window the last thing I need is I
66:53 - have to run the entire thing and this I
66:55 - do with window dot main Loop
66:58 - which means if I run the entire thing
67:00 - now we can see we have a basic window I
67:03 - do want to make two minor changes first
67:05 - of all I want to create a title and I
67:09 - call this one just buttons besides that
67:11 - I also want to set the geometry of this
67:15 - app there's no particular reason for it
67:17 - I just think it looks better I want to
67:19 - set the width to 600 and the height to
67:21 - 400. if I run this now we have a
67:25 - slightly larger window which means now
67:27 - we can work with the buttons and let's
67:29 - start with the most basic button this
67:32 - one we have already seen let me just
67:34 - create it again I want to have a button
67:36 - and this I get with ttk DOT button once
67:39 - again we need a master and this is going
67:42 - to be the window
67:44 - now I have used this named argument here
67:46 - quite a bit and you don't actually have
67:49 - to use that instead what you can do is
67:51 - just pass in window or whatever Master
67:53 - you want to have for this widget as the
67:55 - first argument in here the first
67:57 - argument is always going to be the
67:58 - master that way you don't have to write
68:00 - so much
68:01 - besides that for the button you need
68:03 - some text for the name of the button
68:06 - let's say a simple button
68:09 - finally we have to pack the button so we
68:12 - can see it and there we go we have a
68:14 - simple button that we can click on
68:16 - although right now since the button
68:18 - doesn't have any function attached to it
68:20 - it doesn't do anything that we can
68:22 - change quite easily and let me put the
68:24 - function right below the button so I
68:26 - keep everything organized I want to
68:28 - create a function let's call it button
68:30 - function in here we don't have any
68:33 - parameters and I just want to print e
68:37 - basic button
68:39 - this I now have to attach to this button
68:42 - via the command
68:45 - so in here I want to pass in the
68:47 - function
68:49 - if I run the entire thing now I can
68:51 - click on the button and we can see a
68:53 - basic button besides that instead of
68:55 - using a proper function here you could
68:57 - also use a Lambda function like so so
69:00 - Lambda and print and we have a basic
69:04 - button running this again once again I
69:07 - can click on the button and we get the
69:09 - same result once again if you don't
69:11 - understand Lambda functions definitely
69:13 - check out a dedicated video for it it's
69:15 - really important to understand for gui's
69:17 - I am going to use it quite a bit you
69:19 - might be wondering what if you have a
69:22 - function let me return to button
69:24 - function what if you have a function
69:26 - with parameters
69:28 - How Could You incorporate that because
69:30 - when we are calling the function here we
69:32 - can't call this function so we couldn't
69:35 - pass in arguments
69:36 - if you understand how functions work
69:38 - this should be quite easy I'm going to
69:41 - cover this in the next section in a bit
69:43 - more detail for now just think about it
69:45 - and maybe you can figure it out already
69:46 - it's not that difficult but well this is
69:50 - all we need for the basic button we have
69:53 - seen all of this already so there
69:55 - shouldn't be anything new so far
69:57 - although there's one more thing that we
69:59 - can do and that is the button can also
70:01 - have a text variable
70:04 - let me create one as a separate variable
70:06 - I once again want to have a TK and is
70:09 - string VAR don't forget to call it and I
70:12 - want to assign it let's call it
70:15 - button string and this we can pass in
70:18 - here for the button string
70:21 - if I run the entire thing now we have an
70:24 - empty button the reason for that is that
70:27 - this button string is now overwriting
70:30 - the text and since there's nothing
70:32 - inside of the string VAR we have a
70:34 - button without any text so it looks like
70:37 - it's just a basic button that we can
70:40 - change
70:41 - by setting a basic value for the string
70:43 - bar
70:44 - I'm going to call this one a button with
70:47 - string VAR and let me fix the typo there
70:51 - we go if I run this now we have a button
70:54 - with stringvar and this is basically all
70:57 - you need for a basic button it really
71:00 - doesn't do that much more later on when
71:02 - we talk about layouts and styling
71:04 - there's going to be a bit more but for
71:06 - the basic button this is pretty much all
71:08 - you are ever going to need
71:10 - so with that we can come to the next
71:12 - kind of button and that is a check
71:15 - button
71:16 - this one let me create a basic check
71:18 - button I'm going to call it check this
71:20 - one we create with ttk and check button
71:24 - in here as always we're going to need
71:26 - the master which in my case is always
71:28 - the window
71:29 - then we have the text
71:32 - like the normal button I want to call
71:33 - this one check box one
71:37 - and that is all we need for now so let
71:40 - me pack this checkbox and see what we
71:42 - get
71:43 - there we have checkbox one and in here I
71:46 - have a checkbox I can click and unclick
71:48 - this also I click this quite fast away
71:50 - if I restart this by default we have
71:53 - this other kind of value which is I
71:55 - guess neutral besides that we have on
71:58 - and off but once we click on it we can't
72:01 - go back to the neutral position
72:03 - another argument you can pass in here is
72:05 - command and this works like in the
72:08 - normal button meaning you could just add
72:10 - any kind of function you want in my case
72:12 - I'm going to go with Lambda and just
72:14 - print
72:16 - check
72:17 - button
72:19 - this function is going to be run every
72:22 - time we are pressing on this check
72:24 - button let me run this again and now
72:27 - anytime I am clicking on the checkbox we
72:29 - get check button
72:31 - which is pretty useful and now you might
72:35 - be wondering how could we get the value
72:37 - or in other words how do we know if this
72:39 - check button is on or off
72:42 - we couldn't do something like check dot
72:45 - get
72:46 - if I run this and click on the checkbox
72:48 - we get the check button object has no
72:51 - attribute get
72:53 - quite unfortunate so we couldn't use
72:55 - that one let me undo all of this
72:58 - and I just want to print the word check
73:00 - button to store and check the value of
73:02 - check we need a tkinter variable
73:06 - here I want to have a check VAR
73:10 - the value here is actually quite
73:13 - open-ended
73:14 - we could for example use a TK string VAR
73:17 - the one we have already seen
73:20 - and this we now have to connect to this
73:22 - checkbox and that we do I guess I could
73:25 - put all of this over multiple lines so
73:27 - it's a bit easier to read like so
73:31 - a checkbox doesn't have a text variable
73:34 - instead we have just a variable
73:38 - and this is going to work the same so in
73:40 - here I want to add my check VAR the
73:43 - reason why it's not called text variable
73:44 - is because this variable doesn't set the
73:47 - text of this checkbox
73:49 - instead the check bar is going to store
73:51 - the value if this box is ticked or not
73:55 - and that I can now check so whenever I'm
73:58 - clicking on this box I want to get my
74:00 - check bar and now I can use get
74:03 - if I run the app now you can see we
74:06 - already have one difference and that
74:08 - difference is that this box right now is
74:10 - not neutral anymore instead it is empty
74:12 - or unticked
74:14 - and if I click on it
74:16 - we get one or we get zero
74:19 - and those values since we can only store
74:22 - string vars
74:23 - is going to be a string I guess I can
74:26 - demonstrate this the value we get
74:28 - returned I want to put inside of type
74:30 - and if I run this again click on the
74:32 - checkbox we're getting a string returned
74:36 - it only looks like we get zeros and ones
74:39 - but we are storing them inside of a
74:40 - string variable so they are being
74:42 - converted to a string although that
74:44 - doesn't have to be because we could
74:47 - instead of a string VAR use an INT VAR
74:50 - the result is going to be the same if I
74:52 - run this thing now and click on checkbox
74:54 - we still get zeros and ones
74:58 - however now if I use type on what we're
75:01 - getting returned once again
75:05 - what we're storing now are integer
75:07 - values
75:08 - and that should illustrate quite well
75:10 - that we are working with different data
75:12 - types we have an invar for the tkinter
75:15 - variable and we have a string bar
75:18 - while those two are different the most
75:20 - basic thing you have to understand is
75:22 - that we're just storing basic data types
75:24 - of python inside of slightly more
75:26 - complicated containers that's all that's
75:28 - happening here
75:29 - you could also add in here a Boolean VAR
75:32 - and if I run this we have the same
75:34 - result except now we're getting Boolean
75:37 - values
75:37 - and this might be the data type that
75:39 - makes the most sense here so if I run
75:42 - the same thing again we're getting true
75:44 - or false depending if this thing is
75:45 - ticked or not and this is why it is
75:48 - really important to understand taking
75:49 - their variables to work with buttons
75:52 - or the check button if you want to check
75:54 - the value you basically always need a
75:57 - tkinter variable for Simplicity for this
76:00 - one I want to keep on working with an
76:02 - integer variable
76:03 - this one let me run this again we are
76:05 - always getting once or zero although we
76:09 - could change that because inside of this
76:12 - we have what is called an on value and
76:16 - we have an off value
76:18 - and those well I think they're quite
76:20 - self-explanatory on value is the value
76:24 - that's being returned when this value is
76:26 - turned on or when the box is checked
76:28 - this in our case should be a number
76:30 - because we are working with integer for
76:32 - the storage
76:33 - let's say the on value could be 10 and
76:36 - the off value could be 5.
76:38 - if I now run the entire thing again I
76:40 - can click on the checkbox and we get 10
76:42 - and 5 depending if it's on or off or
76:45 - checked or unchecked and if you want to
76:47 - change the start value you would have to
76:49 - work inside of the intvar so in here if
76:52 - I set value to 10 and run it typing
76:54 - again now the Box by default is checked
76:58 - cool so this is working quite well which
77:01 - means now we can work on the Third Kind
77:04 - of button and that is going to be a
77:06 - radio button or rather radio buttons
77:09 - because you basically always want to use
77:11 - multiple I want to start by creating
77:13 - Radio 1 and this we get with ttk DOT
77:16 - radio button
77:19 - for this once again we need a master
77:20 - which is going to be the window and then
77:22 - we need text and this I want to call
77:25 - radio button one
77:27 - since I do want to have two radio
77:29 - buttons I'm going to duplicate this and
77:31 - change to 1 to a two both for the name
77:34 - and for the variable and now I just want
77:37 - to pack Radio 1 and Radio 2 so we can
77:41 - actually see them like so and if I run
77:45 - the entire thing now we have two radio
77:47 - buttons but now you can see something
77:48 - weird let me restart the entire thing so
77:52 - I can explain what I'm doing
77:54 - right now both radio button 1 and radio
77:56 - button 2 are unchecked but if I click on
77:59 - either of them
78:00 - all of a sudden both are being ticked so
78:03 - something weird is happening here this
78:06 - super important thing you have to
78:07 - understand about radio buttons is that
78:09 - each of the widgets has to have a value
78:12 - that is going to be just another named
78:15 - arguments so in here we have a value the
78:18 - value here could be basically anything
78:20 - let's say for the first button I want to
78:22 - have a radio 1 and for the other button
78:25 - I want to have the integer 2. now if I
78:28 - run this again I can click on each
78:30 - button and they don't trigger together
78:31 - anymore if you don't set a value the
78:35 - default value is going to be zero and if
78:37 - you have the same default value for
78:38 - every single radio button tikinder gets
78:41 - a bit confused you basically always have
78:43 - to set a custom value here
78:46 - now other than that you can use this
78:48 - radio button like the buttons we have
78:50 - seen already which means you could also
78:52 - add a command like so and this once
78:56 - again could be just a function or a
78:57 - Lambda function let me go with Lambda
79:00 - because all I want to do is print
79:02 - something
79:03 - and there's something I want to print is
79:05 - the value of this radio one and once
79:09 - again I want to put all of this over
79:10 - multiple lines so things are a tiny bit
79:13 - easier to read like so
79:16 - we once again have the problem that we
79:18 - couldn't use Radio 1 dot get if I run
79:22 - this and click on radio button one we
79:25 - get that the radio button object has no
79:27 - attribute get instead what we have to do
79:29 - is kind of the same thing we have done
79:31 - for the check variable
79:33 - we once again have to create another let
79:36 - me call this one a radio VAR we have to
79:39 - create a t kinter variable and for this
79:42 - one we have a bit of a problem because
79:44 - the value for this one is a string and
79:47 - the value for this one radio button 2 is
79:49 - an integer
79:51 - the best way for that I find is to use a
79:54 - string VAR and this one is going to
79:56 - convert any kind of integer into a
79:58 - string and that way you can work with it
80:01 - and this you have to set as the variable
80:05 - or this radio one button so radio VAR
80:10 - there we go and now you can use the
80:13 - radio VAR and get the value meaning if I
80:17 - print the entire thing and I click on
80:18 - radio button one
80:20 - we get radio 1. that is the value we
80:23 - specified in here for the value
80:26 - so far we basically have a check button
80:29 - what makes radio buttons different is
80:32 - that the idea is you have this takened a
80:36 - variable in multiple radio buttons let
80:38 - me add it for this button here radio
80:41 - button two I want to have a variable as
80:44 - well and this is going to be the same
80:46 - radio variable
80:48 - which means that this radio button and
80:50 - this radio button are both connected to
80:52 - this radio bar here
80:54 - which by default isn't particularly
80:57 - useful if I run the entire thing again I
80:59 - can click on one and we always get radio
81:02 - 1.
81:03 - where this system becomes really useful
81:06 - is when I get the radiovar from
81:09 - somewhere else let's say all the way in
81:12 - this button function
81:14 - I want to print
81:16 - radio VAR and get the value
81:21 - if I now run the entire thing again
81:24 - I can click on radio button 1 and click
81:27 - on the button we get radiovar again and
81:30 - if I click on radio button 2 we get 2 or
81:33 - the value inside of radio button 2. and
81:37 - the really important thing here is if I
81:39 - reorganize everything a tiny bit
81:41 - the basic idea of a radio button is that
81:44 - only one button is ever activated
81:47 - meaning we could have multiple buttons
81:49 - and only one of them would ever be true
81:51 - and then the value is going to be stored
81:53 - inside of this ticket variable and we
81:56 - could get it for example with a button a
81:59 - checkbox is different to that because
82:01 - inside of a checkbox you can have
82:03 - multiple values that are ticked or
82:05 - unticked whereas for a radio button only
82:07 - one value is ever ticked
82:10 - I can actually demonstrate this as well
82:13 - if I wanted to create a second checkbox
82:17 - let me create one right below I want to
82:19 - have check two and let me be consistent
82:22 - with the naming here this check should
82:24 - be a one and a one here
82:26 - check 2 is going to be another ttk check
82:29 - button
82:31 - the master is going to be the window the
82:34 - text is going to be check box 2.
82:39 - and let's say for the command I want to
82:41 - have another Lambda function
82:43 - that for now it's just going to print
82:45 - test and all of this I also have to pack
82:49 - so check two dot pack
82:53 - if I run this again now for the checkbox
82:56 - we can have multiple values and each of
82:59 - those are essentially self-contained
83:01 - whereas for the radio button
83:03 - we only have one value ticked this is
83:07 - quite different
83:08 - although that being said if you really
83:10 - wanted to you could connect those two
83:12 - check buttons quite easily using the
83:15 - check bar for example if I click on
83:17 - check bar instead of printing something
83:19 - I could also get check VAR
83:22 - and then set the value to the off value
83:26 - let's say a 5. this would be 5 in this
83:28 - case I can now run this and right now
83:31 - checkbox one is ticked but if I click on
83:33 - checkbox 2 checkbox one is not ticked
83:36 - anymore
83:38 - and I can retick it and click on
83:40 - checkbox 2 checkbox one will always be
83:42 - false
83:43 - that way you can connect these two
83:45 - buttons if you want to but by default
83:47 - they are not connected whereas for radio
83:50 - buttons they are always connected
83:53 - although the connection here happens via
83:55 - the tkanta variable and then here
83:57 - sometimes you can get into minor
83:59 - problems for example if I set the value
84:02 - to 1 for both of them and run the typing
84:06 - again if I now click on one of them both
84:09 - are going to be ticked because they both
84:10 - have the same value
84:12 - what basically happens is ticket that
84:14 - checks what is inside of the string
84:16 - variable right now this could be a one
84:18 - and then it checks if this value is
84:20 - identical to the value inside of each
84:23 - widget if it is it's going to check this
84:25 - radio button if it is not it is not
84:27 - going to check it
84:28 - so if these values aren't unique you are
84:31 - going to have some slightly weird
84:32 - Behavior something you do want to keep
84:34 - in mind
84:35 - but other than that this is kind of all
84:38 - you need for the radio buttons so with
84:40 - that we have radio buttons we have check
84:42 - buttons and we have the basic buttons
84:45 - with that I want to do an exercise and
84:48 - then we are done and the exercise here
84:50 - is going to be a tiny bit more extensive
84:52 - let me copy and paste it in it's going
84:55 - to look like so
84:56 - I want you guys to create another check
84:58 - button and two radio buttons and they
85:01 - are going to be very connected for the
85:03 - radio button each radio button should
85:06 - have the value A or B if you click on
85:09 - either of the radio button you are
85:10 - printing the value of the check button
85:12 - the one you're going to create in a
85:14 - second and also if you take either radio
85:17 - button you're also unchecking the radio
85:19 - button
85:20 - so as soon as you click on the radio
85:22 - button you get the value of the checkbox
85:24 - and you uncheck the checkbox
85:26 - and then for the check button if you
85:28 - tick the check button you print the
85:30 - currently selected value for the radio
85:31 - value also you want to use a t Kanda
85:35 - Boolean value for the check button try
85:38 - to implement all of this yourself and
85:40 - see how far you get
85:44 - first of all I want to create the radius
85:46 - and let me call this exercise
85:49 - radius so it's a bit easier to read now
85:52 - in here I want to have exercise Radio 1
85:55 - and I want to have exercise radio 2.
85:58 - both of those are going to be created in
86:00 - basically the same way I want to have
86:02 - ttk and radio button
86:05 - the master as always is going to be the
86:08 - window then we have text and in here let
86:12 - me call them radio and this is going to
86:15 - be
86:16 - radio a and Radio b
86:19 - that way we have a bit of an indication
86:21 - if we're working with a or b to actually
86:24 - get that value we have to set well the
86:27 - value
86:27 - and this one is going to be either a or
86:30 - it is going to be B to store this value
86:33 - we need a tkinter variable let me call
86:36 - this the radio string
86:39 - and this one is going to be TK string
86:42 - VAR
86:44 - I'm going to use stringvar because A and
86:46 - B are both going to be strings if they
86:49 - were zero or true or false this would be
86:51 - a different kind of teak inter variable
86:54 - Auto stringvar is the one you're
86:55 - probably going to use the most
86:58 - besides that I want to create a function
87:01 - that we can work with and this let me
87:04 - call it radio function in here no
87:07 - parameters and basically what I want to
87:10 - do when I'm clicking on either of these
87:13 - I first of all want to set a command so
87:16 - I'm connecting them with the radio
87:17 - function like so
87:20 - when I'm calling this function however I
87:22 - want to get the current value of the
87:24 - check button
87:25 - and I also want to untick the current
87:28 - check button
87:29 - the problem we have right now is we
87:31 - don't have a check button so we have to
87:34 - create that one first
87:36 - I want to create an exercise check and
87:39 - this is going to be ttk and check button
87:43 - in here we need a window the text is
87:46 - going to be the exercise check and this
87:50 - one is also going to need a variable and
87:52 - this one is going to need an on and an
87:54 - off value
87:56 - and we don't have to set an on on off
87:59 - value because 0 and 1 is perfectly fine
88:01 - here and there's one thing I did forget
88:04 - because we are not placing anything on
88:07 - the window right now which I can do with
88:11 - exercise Radio 1 dot pack then exercise
88:15 - Radio 2 dot pack and then the exercise
88:18 - check dot pack
88:21 - and that is some atrocious spelling
88:25 - before I'm running this I want to add
88:27 - paths inside of the radio function so
88:29 - we're not cutting an error writing this
88:31 - now we can see we have a few more things
88:34 - so something is definitely working
88:37 - we now just have to give it some proper
88:39 - functionality
88:40 - and the first thing we are going to need
88:42 - now is to actually add ticket into
88:44 - variables so we can work with all of
88:46 - this the exercise radio already has a
88:49 - string variable although I didn't
88:51 - connect it to it this we can do all the
88:53 - way at the end
88:55 - we need a variable and a variable is
88:58 - going to be the radio string
89:01 - the one we created here and
89:04 - let me put
89:06 - the entire thing like so
89:09 - we have our data we have the widgets
89:14 - and we have the layout
89:17 - I think that system makes the most sense
89:19 - besides the radio string I also want to
89:22 - have a check and this is going to be a
89:25 - Boolean value because remember in the
89:26 - exercise we want to use a t content
89:29 - variable for booleans
89:31 - which means in here I want to have TK
89:33 - and Boolean VAR this Boolean VAR I now
89:37 - want to place inside of my exercise
89:39 - check and here I need a variable and
89:42 - this is going to be the check
89:44 - Boolean variable with that I can access
89:47 - the value inside of my radios and inside
89:49 - of my check buttons which means I can
89:52 - finally work on the radio function
89:55 - in here I want to get the value of the
89:58 - check button that is currently selected
90:00 - and I'm just going to print it so we're
90:03 - going to keep things simple
90:04 - I want to get my check Bool and I want
90:08 - to get the value
90:10 - and that is all I need for that part if
90:12 - I now run the entire thing again and I
90:14 - click i1 radio a on Radio b we are
90:17 - getting false
90:18 - and that seems correct because the
90:20 - exercise check is not checked right now
90:22 - if I do check it and click on either
90:24 - radio A or B we're getting true so this
90:27 - is looking pretty good
90:29 - next up I want to set the value of the
90:32 - check button to false
90:35 - that way it's not going to be checked
90:37 - this I do with checkpool and set
90:41 - and in here
90:43 - I want to pass in false
90:46 - if I run this again now I can click on
90:48 - the exercise check and if I click either
90:50 - on radio A or B it is going to be
90:53 - unchecked
90:54 - so that is going to cover the first part
90:57 - of the exercise for the next part we
91:00 - have to work on the check button
91:02 - and we only really have one bit left and
91:05 - that is that ticking the check button
91:07 - prints the value of the radio button
91:08 - value
91:09 - that is going to be so simple we can do
91:12 - all of this inside of a Lambda function
91:13 - so in here I want to have Lambda
91:16 - and this is going to print the radio
91:20 - string and I want to get the value the
91:23 - last thing I need is this should be
91:25 - command
91:26 - and this is going to be very hard to
91:28 - read let me put all of this over
91:30 - multiple lines like so
91:33 - I assume you have a much better monitor
91:36 - than I do so you probably don't have to
91:39 - do this
91:40 - but in my case I want this to be visible
91:43 - on even smaller monitors
91:46 - so I'm a bit more constrained
91:50 - there we go this is a bit easier to read
91:52 - we have our exercise Radio 1 Radio 2 and
91:56 - the check and the check now has a Lambda
91:58 - function that prints the current value
91:59 - of the radio buttons so I can run the
92:03 - entire thing and now if I click on let's
92:06 - say radio a
92:08 - I have the exercise to check and I can
92:10 - do this for B and we get B this is
92:12 - working pretty well
92:14 - and with that we have the different
92:16 - kinds of button at least the basic ones
92:19 - that you can work with in tkinder on top
92:21 - of that I think you have a pretty good
92:23 - understanding at this point about teak
92:25 - and their variables I am going to keep
92:28 - on using them quite a bit so definitely
92:30 - make sure that you have at least a basic
92:32 - idea about how they work there's one
92:34 - more topic I do want to cover and that's
92:36 - going to be a shorter one and that is
92:39 - functions with arguments inside of a
92:41 - button and the keynote among you might
92:44 - have seen we have already fixed all of
92:46 - this
92:47 - because when we called The Print
92:49 - function
92:50 - this one here we literally called a
92:53 - function with an argument and this one
92:56 - was only executed when we are actually
92:58 - pressing the button which means with
93:00 - this Lambda here we can call functions
93:03 - with arguments inside it's literally as
93:06 - simple as that
93:07 - although alternatively you could also
93:09 - create a function that returns another
93:11 - functions and have arguments via that so
93:14 - let's explore both of those
93:16 - here I have a python file if I execute
93:19 - this you can see we have a basic tkinder
93:22 - window it doesn't do anything right now
93:24 - but I want to add two widgets let me add
93:27 - a comment here I want to have an entry
93:30 - this once again we get with ttk DOT
93:34 - entry this one is going to need the
93:37 - window as the master
93:39 - and I want to pack this entry widget
93:42 - besides that I need a button this I get
93:45 - with ttk DOT button and here we need the
93:49 - window as the master and for the text I
93:52 - just want to have button
93:54 - this button I also want to pack
93:56 - if I call this pack and execute it we
93:59 - get an entry widget and a button
94:02 - and basically what I want to do is
94:06 - this button should have a command that
94:10 - enables us to call some kind of function
94:14 - let me call it the button function
94:19 - and this button function needs to have
94:22 - an argument
94:23 - the argument is going to be the content
94:25 - of this entry widget
94:28 - to get the content we could use get here
94:30 - but I want to do this properly so I'm
94:33 - going to create an entry string and this
94:36 - is going to be a TK string VAR variable
94:40 - and let's set a start value to test
94:44 - this entry string I now want to pass
94:47 - into this button function when we are
94:50 - calling this function
94:51 - although the function doesn't exist
94:53 - right now so let's create it all the way
94:55 - at the top I want to create a button
94:58 - function
94:59 - this now does need to have a parameter
95:02 - let's call it the entry string all I
95:05 - really want to do in here is to print a
95:07 - button was pressed on top of that I also
95:11 - want to print entry string dot get with
95:14 - that we have a basic setup
95:18 - and try to think ahead if I were to
95:20 - execute all of this what would we get
95:24 - I suppose the best way to find out is to
95:26 - actually run this program meaning if I
95:29 - execute the code we can see in the
95:31 - bottom left we already have a button was
95:34 - pressed and test
95:36 - which is if I move this widget to the
95:39 - side this is what we have gotten from
95:42 - this function the problem is we got it
95:45 - without pressing the button
95:47 - on top of that if I press the button
95:51 - as much as I want nothing is going to
95:54 - happen
95:55 - so let's talk about what the problem
95:56 - here is
95:57 - the problem with this line right now is
95:59 - that python executes the code from the
96:02 - top to the bottom like so that should be
96:04 - fairly obvious and when it comes to this
96:07 - line here it sees a function and since
96:10 - we are calling this function with this
96:13 - bit here python is executing all of this
96:18 - which means we can see a button was
96:20 - pressed and we can see the value of this
96:24 - string variable here
96:26 - the issue then however is that this
96:29 - function is going to return none because
96:32 - we don't Define a return value
96:34 - as a consequence the value that this
96:37 - command is going to get is a none
96:41 - which doesn't do anything
96:43 - we don't get an error but when python
96:45 - tries to execute anything here it's
96:47 - getting command none and simply nothing
96:49 - is going to happen as a consequence of
96:52 - all of this we can see these two values
96:54 - when we are starting the program and
96:56 - afterwards nothing happens when we press
96:58 - the button and well there are two ways
97:01 - to fix this issue the easiest one the
97:03 - one that you are probably going to use
97:05 - basically all the time is you just wrap
97:08 - this function inside of a Lambda
97:10 - function this Lambda here tells python
97:13 - to only execute this code when we are
97:16 - pressing the button the reason why this
97:18 - works is that this Lambda function by
97:20 - default is not being called and then the
97:22 - Lambda function itself returns this
97:24 - function and then this is what the
97:26 - command value sees which means now if I
97:29 - execute the code we can't see any value
97:32 - and if I type in here and press on the
97:35 - button we can see a button was pressed
97:37 - and test and I just saw I made a mistake
97:40 - because this entry widget needs to have
97:43 - the text variable
97:46 - like so and this should be the entry
97:48 - string now let's try this again
97:51 - now we can see test inside of the entry
97:54 - widget and if I press button we can see
97:56 - a button was pressed and test on top of
97:59 - that if I change the value in here to
98:01 - something else and press the button
98:03 - again now we get a button was pressed
98:06 - and something else
98:07 - meaning this is working quite well
98:10 - and if you understand return values and
98:12 - functions this should be fairly
98:14 - straightforward although you could make
98:16 - it more explicit
98:18 - so let's say that you really do not want
98:21 - to use a Lambda function and you insist
98:23 - on using a function that you can call
98:25 - like this
98:27 - if you insisted on doing that you would
98:29 - have to create two functions wrapped
98:31 - inside of each other let's start with
98:33 - the outer one let me call it outer
98:35 - function and this one is going to have a
98:38 - parameter let's call it parameter inside
98:42 - of this function we're going to Define
98:44 - another function and this one I'm going
98:46 - to call the inner function
98:49 - this one doesn't have any parameters and
98:52 - this function is actually going to
98:53 - execute the code and here I want to
98:55 - print
98:56 - a button was pressed
99:00 - and on top of that I want to print the
99:03 - parameter which in this case is going to
99:05 - be this entry string which means we can
99:09 - run the get method on it
99:11 - once we have that all I have to do is to
99:14 - return the inner function
99:17 - and with that
99:19 - down here I can call the outer function
99:22 - and this should still work meaning if I
99:24 - run the code now
99:26 - nothing happens that's a good start and
99:28 - if I click on the button we can see a
99:30 - button was pressed and test and if I
99:32 - change the text to something else this
99:35 - one is also going to work
99:37 - when we come to this line here python is
99:40 - going to execute this function so we are
99:44 - executing all of this inside of this
99:46 - function we are creating another
99:48 - function this one is going to get a
99:51 - simple string and print it that one's
99:53 - quite easy and it also gets the value
99:55 - from the parameter which is the one we
99:57 - created down here the important part is
100:00 - this return in a function because this
100:03 - is what's being returned to the command
100:06 - argument
100:07 - so when we press the button this is what
100:10 - we actually get
100:11 - once again if you understand functions
100:13 - and how they exchange values with return
100:15 - this should be fairly straightforward
100:18 - so I hope that was helpful and most of
100:21 - the time you don't really have to think
100:23 - about it too much if you want to call a
100:25 - function with an argument you just use
100:27 - Lambda and then the function you want to
100:30 - call with the argument in this case the
100:33 - entry string
100:34 - that way all of this works perfectly
100:36 - fine let's talk about event binding
100:39 - first of all what does that even mean
100:41 - and events can be lots of different
100:44 - things the most common one are keyboard
100:46 - inputs although an event can also be a
100:49 - widget getting changed in which you're
100:51 - getting selected or unselected or a
100:53 - mouse click motion or wheel all of these
100:55 - are different kinds of events and what
100:58 - is super useful is that these can be
101:00 - observed and used for example you could
101:03 - run a function when the user is pressing
101:05 - a button that is the main idea of an
101:08 - event
101:09 - and events are very easy to use
101:12 - basically all you have to do is to bind
101:14 - an event to a widget this could for
101:17 - example look like this we have a widget
101:18 - and then we use the bind method and then
101:21 - we have the event and the function the
101:23 - event format is always going to be
101:24 - modifier type and detail for example if
101:28 - I wanted to check alt and the a button I
101:30 - would go for ALT key press and a and
101:33 - once we have that we can run whatever
101:35 - function we want to use
101:37 - so that's all we need let's have a look
101:39 - at all of this
101:41 - here I have a tikenter file and I
101:44 - already have a couple of things if I
101:46 - execute all of this you can see we have
101:49 - a text field we have an entry widget and
101:52 - we have a button although there's no
101:54 - interactivity right now nothing is going
101:56 - to happen and what I want to add is a
101:59 - couple of events there are quite a few I
102:03 - am just going to give some random
102:04 - examples
102:05 - but let's get started slowly and let's
102:07 - do a basic example I want to get my
102:10 - window so the main widget
102:13 - and on this I want to run the bind
102:15 - method in here we need an event and we
102:19 - need a function
102:20 - for the function I'm going to keep it
102:22 - simple and just use a Lambda function
102:25 - and this one is just going to print
102:28 - n event
102:31 - for the event we have to get the proper
102:34 - format and this is always going to be a
102:37 - string
102:38 - inside of that string
102:40 - we need the modifier we need to type and
102:43 - then we need detail the example I gave
102:46 - in the slides was if you want to check
102:49 - for the ALT key
102:50 - a key press
102:53 - and then the a button
102:55 - there's just one more thing that we have
102:57 - to do and that is this thing needs to be
103:00 - enclosed in a smaller than and greater
103:04 - than sign it's a bit weird I don't know
103:06 - why it's necessary but you kind of need
103:09 - it every single time
103:10 - also this is key press with an uppercase
103:13 - p with that I can run the entire thing
103:16 - and if I have the window selected and I
103:19 - press alt and a we are getting an error
103:23 - and that is that Lambda takes zero
103:26 - position arguments but one was given
103:28 - which means when we are calling this
103:32 - function here
103:33 - tick enter automatically inserts one
103:36 - argument in there which we do have to
103:39 - capture
103:40 - that we can do quite easily with Lambda
103:42 - we just have to add event here and now
103:44 - this should be working
103:45 - again with the window selected I can
103:47 - press alt and a and now we get an event
103:51 - yes I can do multiple times and with
103:53 - that we have keyboard input
103:55 - and just for detail let me print this
103:58 - event to see what we get
104:00 - so I want to print the event if I run
104:03 - this entire thing now and I press alt a
104:06 - we are getting
104:08 - an event that has a couple of attributes
104:12 - for example it tells us what the current
104:14 - character is it tells us the position on
104:17 - the widget and that's kind of all we
104:20 - really need this bit here is the only
104:22 - really important part
104:24 - if you understand this system here it is
104:26 - pretty straightforward
104:29 - and there are quite a few different
104:31 - events that you could be working with
104:33 - there's a very good website that
104:35 - accounts for all of them that one looks
104:37 - like this I'm going to add a link in a
104:39 - second and in here if you scroll down
104:42 - you have a list with all of the events
104:45 - you could possibly work with and well in
104:49 - here you have for example the F keys you
104:52 - have the keypad and well you have lots
104:55 - of other things that you could be
104:56 - working with
104:58 - that is basically all you need to
105:00 - understand the basics so with that in
105:02 - mind let's play around with this a tiny
105:05 - bit more and let's create some more
105:06 - events
105:07 - although before that there's one
105:09 - important thing that this event right
105:12 - now checks if we are anywhere on the
105:14 - window and pressing alt and a however I
105:18 - could also change this to only work with
105:20 - the button and I just realized that I
105:23 - changed the naming Convention of the
105:24 - button here a tiny bit let me fix that
105:27 - this should be button properly spelled
105:30 - both is fine I just want to keep things
105:32 - consistent
105:33 - now we have an event that is connected
105:36 - to the button so what does that mean and
105:39 - I think it's best to explain this when I
105:42 - actually run the app here we have the
105:43 - app and if I now anywhere on this window
105:46 - press alt a nothing happens however if I
105:49 - press on the button and now I press alt
105:51 - a we get the event back if I click
105:55 - inside of Entry I press alt a nothing
105:57 - happens
105:58 - what you have to understand here is that
106:01 - if we are clicking on the button
106:02 - tikenter selects that button and only if
106:05 - that is the case we are running events
106:08 - on this widget and if we don't have the
106:11 - widget selected we are not running any
106:12 - kind of event on it so that's an
106:15 - important thing to understand here a
106:17 - really good way to visualize all of this
106:18 - is to use window.bind and in here we can
106:22 - check for one event that is called
106:25 - motion and now for this one I want to
106:28 - create a separate function let me call
106:30 - this one get position
106:32 - once again remember you do not want to
106:35 - call this function
106:37 - instead I want to create it get position
106:40 - and this one needs to have one parameter
106:43 - it always needs the event
106:46 - and what I want to do in here is to
106:47 - print an F string
106:50 - that is getting us the X position and
106:52 - this we can get with event.x and besides
106:56 - that I also want to have y and this is
106:58 - going to be event dot y
107:01 - let me use some semicolons in here
107:04 - that way this is going to look a bit
107:06 - cleaner and now every time I am moving
107:08 - the mouse tikanta is going to tell me
107:10 - the position of the mouse so let me run
107:13 - the entire thing and show my mouse now
107:16 - you can see wherever I am on the window
107:18 - we have the position of the mouse if I
107:21 - go all the way to the top left we have 0
107:24 - and 0 roughly here and all the way in
107:27 - the bottom right we have 599 and 499
107:31 - which is
107:33 - basically the window Dimension -1
107:36 - and with this you can get the mouse
107:38 - position wherever you are on the tkinder
107:41 - widget which can be super handy
107:43 - however one important thing you do have
107:45 - to understand here is that right now
107:47 - we're doing all of this on the entire
107:49 - window if I change this to only work
107:52 - with the text so the text field we
107:54 - created up here
107:55 - and run the entire thing again
107:58 - if I keep my mouse on the bottom of the
107:59 - window nothing is going to happen only
108:02 - if I start to hover over the text widget
108:04 - we can see the position and this stops
108:06 - once I leave the text widget depending
108:09 - on what widget you bind the event to you
108:12 - are going to get different results well
108:14 - obviously I guess the way you have to
108:16 - understand this is that TK enter only
108:18 - checks the event on the currently
108:20 - selected widget
108:21 - although the window is always selected
108:25 - another useful thing to consider is that
108:27 - you don't necessarily always need this
108:31 - entire format sometimes for example you
108:34 - just want to check for any kind of key
108:36 - press you don't really care about what
108:38 - specific key or what modifier you just
108:41 - want to check any kind of key press
108:43 - if that is the case let's actually check
108:45 - for it I want to get my window I want to
108:48 - bind an event and in here
108:52 - I just want to check for a key press
108:55 - nothing else
108:57 - if that is the case you could just add
108:59 - key press and don't worry about the
109:01 - modifiers
109:02 - so let me add Lambda event and I want to
109:05 - print
109:06 - a button was pressed
109:10 - I can run this now and now if I press
109:12 - any of the buttons we get a button was
109:15 - pressed
109:17 - and I'm still getting the input when I
109:19 - move the mouse all of this is working
109:20 - just fine
109:22 - I suppose we could make this a bit more
109:25 - elaborate by turning this into an F
109:27 - string and in here we can get event and
109:32 - character
109:34 - if I run this now I can press any button
109:36 - and we can see what I have pressed that
109:39 - way you can always capture anything on
109:41 - the keyboard
109:43 - let me move this key press right below
109:45 - here so the entire thing is a tiny bit
109:48 - more organized
109:50 - finally there's one more thing that I do
109:52 - want to cover
109:54 - let's say we want to check if the user
109:57 - has selected the entry field and then we
109:59 - want to run some code this we can also
110:01 - do I want to check my entry widget and
110:04 - in there I want to bind an event
110:08 - that is called focus in
110:12 - and this once again is going to be a
110:14 - Lambda event and I just want to print
110:17 - entry field was selected
110:22 - and before I run this let me comment out
110:24 - all of this so we can see a bit easier
110:27 - what's going on
110:29 - so if I run it
110:30 - and now if I select the entry field we
110:34 - are running this statement here which
110:37 - gets us an entry field was selected
110:40 - I can do this multiple times so if I
110:42 - click on the button and return to the
110:43 - entry field
110:45 - we get the entry field was selected I
110:47 - can still use it as normal but now every
110:49 - time I select it I get a function that I
110:52 - can use for whatever purpose
110:54 - this also works the other way around
110:56 - with Focus out
110:58 - and then here I have an entry field was
111:01 - unselected
111:03 - let's try this one now and now I have to
111:05 - field selected and I have the field
111:07 - unselected
111:09 - pretty simple but very very powerful
111:12 - once again check out the website it
111:15 - covers all the options that you could
111:16 - ever need so any kind of event is going
111:19 - to be covered in here and you just have
111:21 - to look for what you need
111:24 - let me put the list actually all the way
111:27 - on the top here so it's very easy to
111:28 - find you can also find it in the notes
111:30 - to this part
111:33 - and alright there's one more thing that
111:35 - I want to do and that is going to be an
111:38 - exercise
111:40 - and upon is going to be
111:43 - I want you guys to print Mouse wheel
111:45 - when the user holds down shift and uses
111:47 - the mouse wheel while the text is
111:49 - selected the text being this text box
111:51 - here and for that you will need the
111:54 - website so check it out and then try to
111:57 - figure out this kind of event
111:59 - pause the video now and see if we can
112:01 - figure it out
112:05 - obviously we have to start by getting
112:07 - our text widget in here I want to bind
112:11 - an event
112:12 - for the event we need a smaller and
112:14 - greater than symbol and now we have to
112:16 - figure out how to combine shift with the
112:18 - mouse wheel let's open the website for
112:21 - that
112:22 - in here first of all we need a modifier
112:25 - the modifier is going to be shift so
112:28 - that one is easy I'm going to start by
112:30 - adding shift in here
112:32 - then I need to Dash and now I have to
112:34 - figure out the mouse wheel
112:37 - for that let me use a text search I want
112:40 - to have a mouse wheel
112:43 - there we go this one is very easy to get
112:47 - which means all we have to do now is add
112:50 - a mouse wheel here and then we are good
112:53 - to go
112:54 - I can then add another Lambda function
112:56 - with event and all I want to do is to
112:59 - print Mouse wheel
113:02 - like so and this should be all we need
113:05 - if I run the code now
113:08 - and I use the mouse Wheel by itself
113:10 - nothing happens but if I hold down shift
113:12 - and use the mouse wheel
113:14 - also nothing happens because my mouse
113:16 - isn't over the text field but if I'm
113:18 - over the mouse field and I use the mouse
113:20 - wheel we get mouse wheel
113:22 - meaning this is working really well and
113:25 - this is basically all you have to know
113:27 - about events it really isn't that
113:29 - complicated the main issue here I think
113:32 - most of the time is figuring out the
113:35 - proper format for the event but if you
113:37 - play around with this for a bit it
113:39 - should be fairly simple
113:40 - in this part we are going to learn about
113:42 - two new widgets they're called combobox
113:44 - and spinbox and let me show you what
113:47 - we're going to make it's going to look
113:49 - like this this is the app for this part
113:51 - and a combo box is basically a drop down
113:54 - menu in here I can select different
113:56 - items and then I can also get the item
113:59 - and place it for example inside of a
114:01 - label
114:02 - is spinbox is this kind of selection
114:05 - menu entry thing where I always have
114:09 - predefined values this could ever be a
114:11 - number or it could be a letter or
114:13 - literally anything else so this is what
114:16 - we are going to create and it's not that
114:18 - hard to make
114:19 - all you really need is a basic widget
114:21 - and you have to assign a list of values
114:24 - to this widget and also you can connect
114:27 - a teak into a variable to select this
114:29 - widget and use it for basically anything
114:31 - else
114:32 - that is all we need so let's jump into
114:34 - some code and let's have a look at this
114:36 - here we are in the code and I already
114:39 - have a few lines of tkinder code if I
114:42 - execute all of this we can see a basic
114:44 - window by now all of this should be
114:47 - fairly familiar
114:48 - and I want to start by creating a combo
114:51 - box
114:53 - this we do with ttk DOT combo box
114:58 - in here as always we are going to need a
115:00 - master which in my case as always is
115:03 - going to be the window
115:04 - on top of that like any other widget I
115:07 - want to assign the widget to a variable
115:09 - let me call it combo
115:11 - once we have that I can pack this combo
115:14 - box fix my typo and run the code and
115:17 - there we can see a drop down menu
115:20 - although right now it doesn't have any
115:22 - values
115:23 - to get the values we need some kind of
115:27 - list let me create one let me call it
115:29 - items and this is just going to be a
115:32 - list and I think for the demo I used ice
115:35 - cream
115:36 - I had
115:38 - pizza and I had Rocco Lee you might
115:42 - notice I am recording all of this right
115:45 - before lunch but this list I now want to
115:48 - assign to this combo box and this we do
115:52 - well we can do it in a couple of
115:53 - different ways the one you probably want
115:55 - to use is by going with values and then
115:59 - here assign the items
116:02 - if I run the code now and I select the
116:05 - drop down menu we can see the different
116:07 - items in here this one is working pretty
116:10 - well
116:11 - alternatively besides disk values you
116:14 - could also use
116:15 - either config or configure and then here
116:19 - you can set the values to whatever the
116:22 - items are
116:24 - like so this line and this line do the
116:27 - same thing which means I could comment
116:29 - out the first one run this again
116:32 - and we have the same items in the drop
116:34 - down menu as always I would recommend
116:37 - this one here because it is more concise
116:39 - but both options are perfectly valid
116:42 - besides that what you can do is to
116:45 - create a ticket variable let me call it
116:48 - the food
116:49 - string and this one is going to be a TK
116:53 - string VAR
116:55 - and this stringvar you can assign to
116:57 - this combo box with a text very bill I
117:01 - want to assign the food string although
117:04 - if I run the entire thing by default
117:06 - nothing is going to happen
117:08 - which means the box is empty when we
117:10 - start the app the reason for that is
117:12 - that we don't set a starting value for
117:14 - this food string that is quite easily
117:17 - changed all you have to do is set a
117:19 - starting value and I want to get the
117:21 - items and select let's say the first one
117:24 - that way on Startup the selected item
117:27 - should be ice cream let's try and there
117:30 - we go we have ice cream in here and we
117:32 - could select something else still this
117:34 - works just fine
117:36 - and for the basics of a combo box this
117:38 - is basically all we need although
117:41 - there's one more really cool thing that
117:43 - you can do and that is events for a
117:46 - combo box
117:47 - like we have seen in the last part you
117:49 - can get the combo box like any other
117:51 - widget and bind an event to it and then
117:54 - run a function
117:56 - and the combo box has one special event
118:00 - that is unique to it and this you call
118:03 - with a double smaller than and a double
118:05 - greater than symbol and in here you have
118:09 - to type in combo box selected
118:12 - what this does is it executes a function
118:15 - every time we are selecting any kind of
118:17 - item inside of it let me create a Lambda
118:21 - function with an event in here and I
118:23 - just want to print
118:25 - test anytime we are selecting an item
118:28 - inside of this combo box
118:30 - so if I run the code now and I select
118:33 - Pizza we get test I select broccoli we
118:36 - get test this one is working just fine
118:39 - I guess something slightly more useful
118:41 - here we could get the food string and
118:44 - then get the value that way we are going
118:47 - to print whatever value is being
118:49 - selected so right now we have ice cream
118:51 - then we have pizza and then we have
118:53 - broccoli
118:54 - that way you can extract the values from
118:57 - this combo box quite easily as always
119:00 - using the TK enter variable with get is
119:02 - the best way to get any kind of value
119:04 - and pass it around it's fairly simple
119:07 - and this you can now connect for example
119:10 - to a label
119:12 - and this is going to be ttk and label
119:15 - with the window as the master
119:18 - and this combo label I want to pack
119:21 - on the window if I run this we can see
119:24 - that we can't see anything let me add
119:27 - some text in here so we can see what's
119:29 - going on here we have a label so if I
119:32 - run this again we can see a label
119:34 - this label I now want to change to
119:36 - whatever is selected inside of the combo
119:39 - box
119:40 - for this one you could work with the
119:43 - tkinter variable the food string for
119:46 - example what you could do is set the
119:48 - text variable and set this one to the
119:51 - food string if I run this now we already
119:54 - have ice cream if I select Pizza we have
119:56 - pizza and if we have broccoli I have
119:58 - broccoli
119:59 - that is one way to approach it
120:01 - although it's quite limited because we
120:03 - can't influence the string so I don't
120:05 - actually want to do it instead what I
120:08 - want to do is what I'm clicking on
120:10 - combobox selected I want to get my combo
120:14 - label and I want to run config on it
120:19 - in here I want to set the text
120:21 - and the text is going to be an F string
120:24 - with selected
120:27 - value
120:29 - is going to be
120:31 - the food
120:33 - string and get
120:35 - now I can run this again
120:38 - by default we get a label but as soon as
120:40 - we select anything we get selected value
120:42 - pizza or broccoli or ice cream and well
120:46 - this is basically all we need so this is
120:50 - a combo box and this is pretty much all
120:52 - you need the main things you have to
120:54 - understand is that all of this is just a
120:57 - widget the main difference compared to
120:59 - other widgets is you have to create a
121:01 - list and assign this list to the values
121:04 - other than that you can use it like any
121:06 - other widget with a teak into a variable
121:08 - and then with events although there's
121:11 - one special event combobox selected
121:14 - so with that covered we can cover the
121:17 - next kind of widget and that is called a
121:19 - spin box
121:21 - and I realized I have combo box with
121:24 - lowercase C it should be an uppercase C
121:26 - that kind of annoyed me
121:28 - a spinbox works very very similar
121:30 - compared to a combo box which is why I
121:32 - covered them in the same bit
121:34 - you are creating it with ttk DOT spin
121:38 - box
121:39 - and in here you need a master which is
121:41 - going to be the window
121:43 - this I also want to assign to a variable
121:45 - I'm going to call this one spin
121:47 - once we have that I can pack the entire
121:49 - thing and run the code we have another
121:52 - widget that is an entry field with up
121:54 - and down arrows where we can select
121:56 - predefined values
121:58 - and now like for the combobox to assign
122:01 - actual values you have to get spin then
122:05 - the value and now we need some kind of
122:08 - list this could for example be one two
122:10 - three four and five if I now run the
122:13 - entire thing we can select between one
122:15 - two three four and five although since
122:18 - you very often work with numbers inside
122:20 - of a spin box there is an easier way to
122:23 - get lots of numbers what you have to do
122:25 - is to define a from and really important
122:28 - here you need an underscore
122:31 - and this is determining the start value
122:33 - let me set this one to a three
122:35 - completely random values and then you
122:37 - need a two and this one doesn't have an
122:39 - underscore let's set this one to 20.
122:42 - the underscore next to from here you
122:45 - always need and if you don't edit you're
122:46 - going to get an error there are some
122:48 - predefined values that you cannot mess
122:50 - with don't forget that it's a very easy
122:52 - mistake to make but once we have defined
122:54 - this from and to Value we can run the
122:56 - entire thing again and now if I click on
122:59 - up we get the values from 3 all the way
123:02 - to 20.
123:03 - another thing that you could do in here
123:05 - is to add an increment value
123:08 - this is essentially the step size for
123:10 - example if I set this to a 3 run the
123:13 - entire thing again now we are starting
123:15 - with a free but then we move in
123:17 - increments of three
123:18 - although here you do have to be a bit
123:20 - careful let me go all the way up and I
123:23 - do reach the highest value of 20.
123:26 - and now if I go down we have 17 14 and
123:29 - 11. so the numbers here are not
123:32 - consistent it's a little bit annoying
123:35 - basically what tikenter does it tries to
123:37 - go as high as it can get in terms of the
123:40 - two number but if it gets to 21 in our
123:43 - case with the increment of three it
123:46 - limits the maximum number to a 20. so
123:48 - that way we actually change the number
123:50 - and the increment doesn't really work
123:52 - anymore
123:53 - it's just something to be aware of it
123:55 - can be kind of annoying but quite
123:57 - workable there are two more things that
123:59 - I do want to cover the first one is that
124:01 - there is a command inside of a spin box
124:04 - in here for example we can use Lambda
124:08 - without any parameters and just print
124:11 - a button was pressed or I guess arrow is
124:15 - a bit clearer because if I run this
124:17 - again and I'm running this command every
124:20 - time I'm clicking on an arrow
124:22 - if you want to have a bit more control
124:24 - so you only want to run a function if
124:27 - the user presses up or down you couldn't
124:30 - use command but like the combo box a
124:34 - spinbox has special kinds of events too
124:36 - actually
124:37 - we can use Spin and bind and event
124:41 - with a function and the event here is
124:45 - once again we need a string and now two
124:49 - smaller than and two greater than
124:50 - operator signs inside of this we have
124:53 - increment
124:55 - and we have
124:58 - decrement
125:00 - increment is forget when we press the up
125:03 - Arrow decrement when we press the down
125:04 - arrow
125:06 - and this we can connect to a Lambda
125:08 - event I just want to print
125:12 - either up or I want to print down
125:16 - now I can run the entire thing again and
125:18 - if I press on up we get up and an error
125:20 - was pressed and the same with down and
125:22 - arrow was pressed
125:24 - depending on the level of control you
125:26 - want to have you can either use command
125:27 - or you can use an event both work
125:30 - perfectly fine
125:31 - finally the last thing you want to be
125:33 - aware of is you can use spin along with
125:36 - the tkinter variable
125:38 - for example I could create a spin
125:40 - integer
125:41 - and this is going to be TK and VAR
125:46 - in here you could also as always Define
125:48 - a start value let's go with 12.
125:51 - this spin integer I now have to connect
125:54 - to the spin box and for that I want to
125:57 - separate all of this over multiple lines
125:59 - that way you can see it a bit better
126:03 - in here I want to create a text variable
126:07 - and this is going to be the spin integer
126:11 - and now we have 12 as the start value
126:14 - and I can change it like so and this
126:17 - would also update the integer
126:19 - for example if I print the value instead
126:22 - of an error was pressed I want to get
126:24 - spin integer and get
126:27 - and now if I run this again and I press
126:29 - up or down we get the various numbers
126:32 - very simple to work with most of this
126:34 - should be quite familiar at this point
126:37 - and with that there's only one more
126:39 - thing that I do want to do for this
126:40 - video and that is an exercise
126:43 - I want you guys to create a spin box
126:45 - that contains the letters a b c d and e
126:49 - on top of that what I forgot to copy in
126:51 - is I want you guys to print a value
126:54 - whenever the value is decreased inside
126:57 - of the spin box so pause the video now
126:59 - and try to implement this one
127:04 - I am going to start by creating exercise
127:09 - letters
127:11 - and this is going to be a list with a b
127:15 - c e and e
127:20 - once we have that I want to create an
127:22 - exercise string and this is going to be
127:24 - a TK string VAR and then here I do want
127:29 - to have a start value like we have seen
127:32 - in the combo box with this part up here
127:35 - I want to get my exercise letters and
127:39 - select the first item
127:41 - once I've all of that I should probably
127:43 - create the exercise spin box
127:47 - and this is going to be ttk dot spin box
127:51 - in here for the master as always we have
127:53 - the parent
127:54 - and I want to have a text variable
127:57 - which is going to be the exercise string
128:01 - let me put this exercise spin
128:05 - on the window widget with pack and now
128:08 - we already have a start value the
128:11 - problem is let me run this again
128:12 - actually just to demonstrate what's
128:14 - happening if I start the app we already
128:16 - have another spin box that says a that
128:19 - happens because of this string VAR here
128:23 - however if I press up we're getting to
128:25 - zero
128:26 - the reason for that is that we haven't
128:28 - assigned these letters as the values for
128:31 - this spin box
128:33 - that we can do quite easily you could
128:35 - either get the exercise Spin and then
128:38 - get the values and assign the exercise
128:42 - letters in here if I run this now I can
128:45 - go up and down and we get the different
128:47 - letters
128:49 - although if you already know that you
128:52 - want to have this list inside of this
128:54 - widget you can just when you create it
128:56 - assign the values with the exercise
128:59 - letters and then I can get rid of this
129:02 - one here and we should have the same
129:04 - result
129:05 - so now
129:07 - I have the same result that is pretty
129:09 - good
129:10 - we are nearly done we have covered the
129:12 - first part now we have to work on the
129:15 - second one that I want to print a value
129:17 - whenever the value is decreased and this
129:19 - we have covered up here I only want to
129:22 - print a value when we are decrementing
129:24 - the value
129:25 - I want to get my exercise Spin and bind
129:29 - an event
129:30 - the event I want to bind is going to be
129:33 - decrement
129:35 - and inside of this I want to get my
129:37 - Lambda with an event and here
129:41 - I want to print the exercise string and
129:46 - I just want to get the value
129:48 - that should be all I need if I run the
129:50 - code now and I press up nothing happens
129:53 - but if I press down or I decrement we
129:55 - get the different letters
129:57 - so with that we are done
130:00 - and this is giving us two new widgets
130:03 - that are quite useful especially
130:04 - combobox I feel is a really commonly
130:07 - used widget
130:08 - the next widget I want to cover is a
130:11 - canvas and a canvas is essentially a
130:14 - widget that allows us to draw various
130:16 - shapes
130:17 - for example we could draw a square a
130:19 - circle lines text and quite a few more
130:21 - elements
130:22 - in the most basic sense what we are
130:24 - doing is we are recreating paint inside
130:26 - of tea Kinder or at the very least we
130:29 - have the basic tools to do so
130:31 - I already have prepared some code the
130:34 - only difference compared to what we've
130:35 - seen in the past is I do not have ttk I
130:38 - only have TK because that's all I need
130:40 - but if I run this code you can see we
130:43 - have a basic window
130:45 - I want to create a canvas which is one
130:49 - specific kind of widget this I want to
130:52 - store in a variable that I'm also going
130:53 - to call canvas and in here we need TK
130:56 - and can this
130:58 - like any other widget this is going to
131:01 - need a master which is going to be my
131:03 - window
131:03 - once I have that I can pack this canvas
131:07 - and if I run the code now we can't see
131:10 - anything however the widget does exist
131:13 - the problem is by default it's well
131:15 - invisible
131:17 - we can change that the easiest way to do
131:20 - so is by giving it a background
131:22 - in here you could choose basically any
131:24 - color for example I could use white in
131:26 - here if I run it now we can now see a
131:29 - white background
131:30 - this would work with any other color red
131:32 - for example would look like this
131:35 - there are quite a few more colors you
131:36 - could be using but I'm going to cover
131:38 - them later but now using basic names is
131:40 - fine
131:41 - and I'm going to stick with white that's
131:43 - I think the easiest color to work with
131:45 - with that all we really have to do is go
131:48 - through the different methods that the
131:50 - canvas object has for example one that I
131:53 - think is very simple is called create
131:56 - rectangle this for the first argument is
132:00 - going to need a tuple and this Tuple is
132:03 - going to determine the dimensions of the
132:04 - rectangle we are going to draw to make
132:07 - this work we need the left point the top
132:09 - point the right point and the bottom
132:13 - point
132:14 - let me actually use the values here for
132:16 - the left I'm going to go with 0 and for
132:19 - the top I also want to go with zero or
132:21 - the right side I want to have 100 pixels
132:23 - and for the bottom I want to have 200
132:26 - pixels
132:27 - and now if I run this
132:29 - we can see we have a kind of rectangle
132:32 - or at least the outline of one
132:35 - a better way to visualize this is
132:37 - changing these numbers to 50 and 20
132:41 - that is a bit easier to see
132:43 - so what we have here is a rectangle or
132:47 - the outline of a rectangle and this one
132:50 - is 50 pixels from the left this side
132:52 - here and we have 20 pixels from the top
132:55 - that's this part here
132:57 - the right side this one here is this
133:00 - line and then the bottom 200 is down
133:04 - here we are defining the four sides of
133:07 - this rectangle and the Kinder uses that
133:09 - to create a rectangle
133:11 - another option we have to make this look
133:13 - a bit better is a fill color and for
133:16 - this one again you could use basically
133:18 - any kind of color for example red would
133:20 - be fine and now we have a red rectangle
133:23 - with a black outline
133:25 - if you want to get rid of the outline
133:27 - you would set with to zero width here
133:31 - refers to the Border width if I run this
133:34 - now we only have a red rectangle
133:37 - and well basically now we have a ton of
133:40 - different options that we could be using
133:42 - the best website for that let me open it
133:44 - this one here it's a little bit old but
133:47 - it still works perfectly fine
133:49 - on this side you have a canvas widget
133:52 - and the canvas widget you can see has a
133:55 - ton of different options the one I have
133:57 - looked at already or the one we're
133:58 - working with right now is create
134:01 - rectangles
134:02 - you can already see in there we have
134:04 - canvas then create rectangle and then
134:07 - left top right and bottom and then the
134:09 - different options the different options
134:11 - you can find here and you can see there
134:14 - are a lot
134:16 - I could for example set the width to 10.
134:19 - this one gives us a very thick border
134:21 - and besides that I can also specify a
134:25 - dash in here we did a tuple that
134:28 - specifies what is called a dash pattern
134:30 - let me use some random numbers if I run
134:32 - this now we get a certain kind of Dash
134:35 - what this Dash here means is the first
134:38 - number the one in my case tells me how
134:41 - long each Dash should be and the second
134:44 - number two in this case is how big the
134:47 - Gap is which in this case is going to be
134:49 - twice as wide as the actual pixel if I
134:52 - change this to let's say four and two
134:55 - and run this again we now have a
134:58 - slightly different look this is
134:59 - something you have to play around with
135:00 - quite a bit to really get the idea
135:03 - you could even add more values in here
135:05 - let me add a one and a one run this
135:07 - again and now we get even weirder
135:09 - results but mastering the dash pattern
135:12 - is well something that I'm not too
135:14 - concerned about so do this in your own
135:16 - time if you are really interested
135:17 - another option we have is the outline
135:22 - this determines the color of the Border
135:25 - in here once again we need just a color
135:27 - and now we have a green outline I think
135:30 - at this point you get the idea with this
135:32 - thing it's not terribly complicated and
135:34 - if you go through the list it's quite
135:36 - easy to work with
135:38 - which means I can work with another one
135:41 - another very simple option is called
135:43 - canvas and create line
135:47 - you might already guess what this one is
135:48 - doing it draws a line and then here we
135:51 - need
135:52 - start X and start Y and then end X and
135:57 - end Y and other than that we still have
136:01 - basically the same options we have seen
136:02 - for the rectangle let's say I want to go
136:04 - from 0 and 0 to position 100 on X and
136:11 - 150 on y
136:13 - if I run this now you can see we have a
136:16 - line
136:17 - oh and I forgot to mention right now
136:19 - I've just used numbers you could also
136:22 - place all of this inside of a tuple you
136:24 - would get the same result the same
136:26 - applies to the rectangle you could just
136:28 - have the numbers and everything would
136:30 - still work just fine I just think using
136:33 - a tuple here makes it a bit easier to
136:35 - read and for the line we could for
136:37 - example use fill again let's fill this
136:39 - one with yellow what's a little bit hard
136:42 - to see yeah it's going to be very hard
136:44 - to see
136:44 - let's go with blue
136:46 - that is much easier to see
136:49 - besides that we also have canvas and
136:51 - create oval
136:54 - this one works quite similar compared to
136:56 - the rectangle we are specifying the left
136:58 - the top the right and the bottom and
137:01 - then TK enter is going to draw a circle
137:03 - or rather an oval inside of these
137:06 - limitations
137:07 - although if you have a rectangle with
137:10 - these Dimensions so if I go 0 0 100 and
137:13 - 100 we are going to have a circle
137:16 - like this
137:17 - I want to fill this one let's say with
137:21 - green there we go we have a circle right
137:24 - now but if I change this 100 to a 300
137:28 - we have a oval I'm going to change this
137:31 - to 200 so we're not drawing too many
137:33 - things on top of each other
137:35 - also I want to turn the coordinates into
137:38 - a tuple to keep things a bit more
137:40 - consistent
137:41 - besides that we also have a create
137:44 - polygon for this polygon I'm going to do
137:48 - all of this inside of a tuple we always
137:50 - need X and Y positions so we have X1 and
137:54 - y1 then we have X2 and Y2 then we have
137:58 - X3 and Y3 and tick inter is going to
138:02 - connect all of them
138:04 - so once again let me go with a point at
138:08 - 0 and 0.
138:10 - then I want to have another point at 100
138:13 - and 200
138:16 - and let's say a point at 350.
138:21 - running this now we have a triangle
138:24 - because the point we have drawn consists
138:26 - of three points
138:27 - so let me visualize this
138:31 - our first point is 0 and 0 that is the
138:34 - point up here
138:35 - the next point is 100 and 200 which
138:39 - means we're going 100 pixels to the
138:41 - right
138:42 - and we are going 200 pixels down
138:46 - the final point is 350 so we are going
138:50 - 300 pixels to the right and 50 pixels
138:52 - down and we're ending up on this point
138:54 - which you could see better if I remove
138:56 - the drawing this point here
138:58 - and in here you could add as many points
139:00 - as you want you can also work with fill
139:04 - let's say fill we haven't used white yet
139:08 - and for another point I want to have for
139:11 - x 150 and you could also work with
139:14 - negative points let's say negative 50.
139:17 - okay that um it works but it's very hard
139:20 - to see
139:21 - let's go with gray
139:23 - there we go now we have a polygon on top
139:25 - of everything else
139:26 - there's one more basic method I do want
139:29 - to cover but at this point this becomes
139:30 - fairly repetitive I want to create an
139:33 - arc for the arc we basically start like
139:37 - we have started for the oval
139:39 - which means I want to put them like this
139:43 - for these methods we are drawing always
139:45 - a rectangle and then we are filling the
139:47 - rectangle either with a rectangle itself
139:49 - an oval or now an arc so a partial oval
139:53 - essentially to visualize this let me
139:55 - actually copy this circle here or the
139:57 - coordinates for the circle and I also
140:00 - want to comment out the polygon so we
140:02 - can see what's going on
140:04 - if I run the code now
140:06 - you can see something weird on the
140:08 - circle
140:09 - the green bit here is the circle and on
140:11 - top of that we have this slice cut out
140:15 - if I fill the arc this is going to be
140:17 - even more visible let's say fill with
140:20 - red
140:22 - yeah I can see by default The Arc covers
140:25 - one quarter of the entire Square
140:28 - these numbers you can specify for that
140:30 - you need a start point and this by
140:33 - default is zero which means if I run
140:35 - this thing now nothing changes
140:37 - however if I change this to a 45 now the
140:41 - thing looks like this the way you can
140:43 - understand this number is this line here
140:46 - is angle zero and a whole circle around
140:50 - this well circle is 360 degrees
140:55 - with this line here being 45 degrees
140:59 - what we have specified here for the
141:01 - start point
141:03 - and by default The Arc goes
141:05 - counterclockwise by 90 degrees
141:10 - this we can also change for that we need
141:13 - another argument here that is called
141:15 - extend by default this one is 90 so if I
141:18 - run it nothing changes
141:20 - if I however I change it to 180 degrees
141:23 - it looks like this
141:25 - we are starting here at 45 degrees and
141:28 - then we're going
141:29 - 180 degrees around the circle
141:34 - so this point down here is degree 225.
141:38 - besides that there is one more
141:41 - interesting argument in here and that is
141:44 - called Style
141:46 - in here we have to specify specific
141:48 - tkinter options
141:50 - this could for example be TK and now on
141:53 - capital letters Pi slice and let me fix
141:57 - the typo like so if I run this we cannot
142:00 - see any difference because this is the
142:02 - default option
142:03 - however what we can do is change this to
142:06 - Arc and if I run this now you can't see
142:08 - anything because the arc only draws the
142:11 - Border
142:12 - if however I change the outline which is
142:15 - the Border color to let's go with yellow
142:18 - run this again now you can see very
142:21 - faintly there's a yellow half circle
142:23 - again for this one I want to change the
142:26 - width to 10 so we can see it easily
142:28 - there we go now it's a bit more visible
142:31 - let me actually change the color to Red
142:33 - there we go now this is much more
142:35 - visible
142:37 - also I want to put all of this over
142:39 - multiple lines
142:42 - otherwise this is going to be quite hard
142:44 - to read
142:46 - there we go these are basically the main
142:49 - options you can work with besides Arc
142:51 - and Pi slice you also have chord
142:55 - running this gets us something like this
142:57 - um I am messing this up with the width
142:59 - let me change this to one
143:01 - the difference compared to a pie slice
143:04 - right now is kind of hard to see because
143:06 - we are drawing half a circle let me
143:09 - change this to a smaller number let's
143:10 - say 140 and I want to go with pi slice
143:16 - running this now I get part of a slice
143:19 - the part that chord is going to change
143:21 - is it's going to take away this bit here
143:26 - it's going to be easier if I actually
143:27 - use it so instead of Pi slice I want to
143:30 - have the chord now we can see we are not
143:32 - drawing this bit here anymore that's the
143:35 - only difference between the two and with
143:37 - that we have an arc and this covers
143:40 - another really important part
143:42 - besides that you can also I want to
143:47 - comment out everything so you can see
143:49 - things a bit easier besides all the
143:51 - shapes you can also draw a text
143:54 - with canvas and create text
143:58 - or this one you have to start with a
144:00 - position let me go with 0 and 0
144:04 - and then a text argument this is some
144:08 - text if I run this now we can see some
144:12 - parts of a text all the way in the top
144:14 - left up here
144:17 - the problem we have with the coordinate
144:18 - right now is this point here 0 and 0 is
144:22 - this point but we are placing the center
144:25 - of the text
144:26 - which means the actual bounding
144:27 - rectangle of the text looks something
144:30 - like this
144:33 - which is fine in general but right now
144:35 - it doesn't help us too much
144:37 - I'm going to change these numbers to 100
144:39 - and 200 and there we go now we can see
144:42 - this is some text
144:44 - and once again you can also fill this
144:47 - thing with different colors let's go
144:49 - with green
144:50 - now we have some green text
144:52 - another option we could be using is with
144:55 - and this specifies the width of the text
144:58 - if I change this to a 10. now the width
145:01 - of the text is 10 and tkanta tries to
145:03 - fit everything inside of this width
145:05 - which means we have a ton of line breaks
145:08 - and once again if you go through the
145:10 - list you can find a few more options but
145:12 - those are the main ones you could also
145:14 - change the font or if the text is
145:16 - Justified or not there are quite a few
145:17 - different things you can do here
145:20 - the last important thing that you really
145:22 - want to care about is you can also
145:24 - display widgets with a canvas which is a
145:28 - super powerful feature let me use it we
145:30 - need canvas
145:32 - and this is called create window
145:35 - for this first of all we need a position
145:38 - this is just X and Y let me go with 50
145:41 - and 100.
145:43 - now we need a window argument and
145:45 - important here this window has nothing
145:48 - to do with this window up here they just
145:51 - happen to be called the same the idea is
145:53 - inside of this canvas we are creating a
145:56 - separate tkinder window and this we are
145:58 - using for drawing and drawing in widget
146:00 - specifically and this window once a t
146:03 - can't have widget for example ttk dot
146:06 - label and with this I realized I do
146:09 - actually in ttk so let me import it all
146:12 - the way at the top from tkinter import
146:14 - ttk
146:16 - I should check my notes a bit better for
146:18 - this one we now need a master which
146:20 - doesn't really matter but we still need
146:21 - it and then we need some text
146:24 - or the text this is text in a canvas
146:29 - this one we don't have to pack if I run
146:31 - this now we have this is text in a
146:34 - canvas and once again we are placing the
146:36 - center of this widget which is 50 pixels
146:39 - from the left
146:40 - since the text itself is wider than that
146:42 - we are going a bit outside of the
146:44 - bounding box which is totally fine to do
146:46 - just be aware of it and widgets for some
146:49 - reason aren't being clipped off they are
146:51 - still visible I have no idea why it's
146:53 - just the way it works
146:55 - I'm going to change this 50 to 150 and
146:58 - now this looks a bit better and this is
147:00 - actually quite interactive for example
147:02 - besides the label we could also use a
147:04 - button
147:05 - and this would still work you could even
147:07 - press on the button and execute
147:09 - functions all of this works perfectly
147:11 - fine as a matter of fact or scrolling
147:14 - through a window you want to use this
147:17 - method here for the more advanced parts
147:19 - we are going to see this quite a bit
147:20 - it's super useful
147:22 - and with that we basically have all that
147:25 - we need for the basic canvas widget I'm
147:28 - going to comment this one out as well
147:30 - and now I want to do an exercise that I
147:33 - think is going to be quite fun
147:34 - I want you guys to use event binding
147:37 - along with the canvas to create a basic
147:40 - paint app so wherever the mouse is I
147:42 - want to draw something so when you move
147:44 - the mouse around you can see a line
147:46 - being drawn
147:48 - so pause the video now and try to figure
147:49 - this one out
147:53 - for this one I as always want to get my
147:56 - canvas and I want to bind an event the
148:00 - event I'm looking for is called motion
148:03 - which means I am checking for a movement
148:05 - of my mouse and if that is the case I
148:08 - want to draw on canvas
148:12 - this function doesn't exist right now so
148:14 - let's create it Define draw on canvas
148:19 - in here remember for the parameter we
148:22 - are always going to need one for the
148:23 - event
148:24 - from this event we can get an X and A Y
148:27 - position so X is going to be event dot X
148:30 - and Y is going to be event dot y
148:34 - and these points we can use to draw on
148:36 - the canvas
148:38 - although for that I want to have one
148:40 - more thing and that is the brush size
148:43 - I'm going to use this in a bit again so
148:46 - I want to Define this as a global
148:48 - variable brush size and let's go with
148:51 - four now that I have that I can get my
148:54 - canvas and create an oval
148:58 - we need a left a top a right and a
149:02 - bottom let's say this point here is the
149:05 - mouse cursor I'm going to call it m
149:08 - around this point I want to draw a
149:11 - circle every time we are moving the
149:13 - mouse
149:14 - and this point is going to need four
149:16 - different Arguments for the left side I
149:19 - want to go from the mouse position and
149:22 - then have the brush width which in our
149:25 - case is going to be 4 over 2 or this
149:28 - number here divided by 2. that is going
149:31 - to give us the left position the same
149:33 - thing I want to do for the top for this
149:35 - one I want to go up
149:38 - by 4 over 2 and for the right side I
149:42 - also want to go by 4 over 2 that way the
149:46 - entire width of the thing is 4 pixels
149:49 - which is our brush size
149:51 - I want to get x minus my brush size over
149:55 - 2.
149:57 - the same thing for y except now we need
149:59 - Y which is going to be the brush size
150:01 - divided by 2 again
150:03 - or the right side
150:05 - I want to have X and then plus my brush
150:08 - size over to
150:11 - and finally for the bottom I want to
150:13 - have y plus my brush size over two
150:17 - that is all I need if I run the code now
150:20 - and I hover over the canvas widget we
150:23 - have a very basic drawing app it doesn't
150:26 - look terribly good but at the very least
150:28 - it is working
150:29 - one issue we have right now is that we
150:31 - are only redrawing the outline
150:33 - let me fill this thing with a black
150:36 - color
150:37 - and now this is already looking a little
150:39 - bit better I think the brush size is
150:42 - also a tiny bit large I can change this
150:44 - to a 2.
150:45 - and this is improving as well but well
150:49 - this is a very basic drawing app and you
150:52 - can see here if I move the mouse really
150:53 - fast you can see the individual points
150:55 - we are drawing besides that another cool
150:58 - thing that I realized you can do is I
151:01 - also want to create a canvas method with
151:04 - bind and this one is going to be called
151:08 - Mouse
151:09 - wheel
151:11 - if I'm using that I want to get a brush
151:14 - size adjust function
151:17 - I'm going to create this here and this
151:19 - is going to be brush size adjust as
151:21 - always this needs the event
151:24 - and for this one I want to update this
151:27 - brush size which means I have to create
151:29 - a global variable that is called brush
151:31 - size
151:32 - and when we are doing this let me print
151:35 - the event to see what we get if I now
151:37 - use my mouse wheel
151:39 - we're getting a couple of different
151:40 - arguments the one I care about is called
151:43 - Delta if I move my mouse bit forwards
151:45 - it's going to be plus 120 and if I move
151:48 - it towards me it's negative 120 or
151:50 - backwards I guess for your mouse these
151:53 - numbers might be slightly different but
151:55 - the actual number doesn't matter I only
151:57 - care that it's positive or negative
151:59 - which means I can use this inside of an
152:01 - if statement so if the event dot Delta
152:05 - is greater than zero
152:08 - then I want to increase my brush size
152:10 - let's say brush size plus equal four and
152:14 - else if it is negative then brush size
152:18 - negative equal four
152:21 - with that if I run this again and let me
152:24 - actually show my mouse that's going to
152:25 - make all of this a bit easier to see the
152:27 - drawing still works but now if I scroll
152:29 - forward we have a much thicker Mouse and
152:33 - if I scroll towards me this becomes very
152:36 - very small although he can see an issue
152:38 - I am scrolling just towards me and the
152:41 - number gets smaller and smaller let me
152:43 - actually start this again
152:45 - so right now the line is very thin but
152:48 - now I'm scrolling towards me so the line
152:50 - should get smaller I'm scrolling quite a
152:53 - bit towards me and more and more towards
152:55 - me and the line just gets thicker
152:58 - the reason for that is
153:00 - when we're using the brush size here or
153:03 - these numbers it doesn't really matter
153:06 - if the number is positive or negative
153:08 - the larger the number gets or rather the
153:10 - larger the absolute number becomes the
153:12 - larger the circle is going to be which
153:15 - means as far as the brush is concerned
153:17 - 20 is the same size as negative 20 or
153:20 - almost the same they are slightly
153:21 - different but the larger the number
153:23 - itself the larger the brush size this I
153:26 - don't like which means at the end of
153:28 - this function I want to get my brush
153:31 - size and I want to limit it between two
153:33 - values
153:34 - for that we can use minimum and this is
153:38 - going to pick the smaller numbers
153:39 - between two arguments
153:42 - so in here I can have my brush size and
153:45 - the maximum number I want to have is
153:47 - going to be 50. so let me run this again
153:49 - and now I'm scrolling forward and this
153:52 - is the largest size that I can have for
153:54 - my brush
153:56 - kind of hard to see but it definitely
153:58 - works this function I want to wrap
154:01 - inside of a Max function this one works
154:05 - like minimum except this one selects the
154:07 - larger number and then here I want to
154:09 - have a zero that way our brush can never
154:13 - go below zero
154:15 - if this number becomes negative the max
154:17 - always chooses the zero so now I can run
154:20 - this again and I can increase the size
154:22 - and I can decrease it and at the minimum
154:24 - we get this line here
154:28 - and that is a nice basic paint app
154:32 - you could play around with this quite a
154:33 - bit more to add colors and we are going
154:36 - to do that later but for now I think
154:38 - this is a pretty good start with the
154:40 - canvas app
154:41 - the next widget we are going to look at
154:43 - is called Tree View and if canvas is
154:47 - paint Tree View is essentially Excel or
154:50 - rather we are going to create a table
154:52 - this one is going to look like this in
154:55 - here we have a bunch of different
154:57 - entries that we can look at we could
155:00 - also delete entries like so
155:03 - and you can also select multiple entries
155:05 - and work with them
155:09 - it's a fairly straightforward table that
155:11 - is quite easy to work with and well
155:13 - that's what we're going to create
155:15 - once again I have some code if I execute
155:18 - the entire thing we have a basic window
155:21 - the one thing that is new are these two
155:23 - lists I'm going to use them to create
155:25 - some random names in a bit for now just
155:27 - don't worry about them I want to create
155:29 - a widget and this is called Tree View
155:32 - this we create with
155:34 - ttk.3 View
155:37 - as always I want to store this in a
155:39 - separate variable and this I'm going to
155:41 - call table
155:43 - in here we always need the master which
155:46 - is going to be the window
155:48 - and let me just pack the entire thing to
155:51 - see what we get
155:52 - by default we're getting a plain white
155:54 - square although if I go to the top we
155:57 - can already see we have some kind of top
155:59 - row that doesn't do anything right now
156:02 - that we can change
156:04 - inside of this the idea is that you are
156:07 - defining some columns
156:10 - for example what I want to do is I want
156:12 - to have a column called first then last
156:15 - and finally email
156:18 - if I run this now you can see we have
156:20 - three different columns although you
156:23 - can't see the title right now
156:24 - we have to add what is called headings
156:27 - so I want to get table and then specify
156:31 - a heading
156:32 - and now I have to get the name of the
156:34 - column and this is what we specified
156:36 - here
156:38 - the First Column is called first the
156:40 - second one last and the last is called
156:42 - email
156:43 - which means for the First Column I want
156:45 - to get my first column and the text in
156:47 - here
156:49 - is going to be first name and now if I
156:53 - run this we can see we have first name
156:55 - right in the middle
156:57 - to get it to the left side we have to
156:59 - add another argument inside of the
157:02 - original Tree View and this is called
157:03 - show and then here I want to add
157:06 - headings now if I run this we get first
157:08 - name on the left side
157:11 - by default tkinter is showing some
157:13 - elements on the left side or in the
157:16 - first columns and with this option we
157:18 - are disabling that
157:19 - cool now besides that for the last
157:23 - column I want to have let's call it
157:25 - surname and then for the email I want to
157:30 - have the email
157:33 - and with that we have different columns
157:35 - and then here you could add as many as
157:37 - you wanted
157:38 - and with that we can cover how to insert
157:41 - values into a table
157:44 - this we're doing with table and the
157:47 - insert method
157:49 - in here we need a couple of arguments
157:51 - the first one is called parent and this
157:54 - is usually going to be an empty string
157:58 - what this means is you want this item to
158:00 - be attached to this table and not have
158:03 - any intermediaries
158:06 - later on we're going to learn you could
158:08 - also attach this new item to an existing
158:10 - item inside of the table and then you
158:13 - will get the name of this item inside of
158:15 - the table as the parent but if you leave
158:17 - it empty
158:18 - you're going to attach it to the main
158:20 - table
158:21 - besides that we need an index and we
158:24 - need the actual values for the index for
158:27 - now let me go with zero
158:29 - and the values
158:30 - is going to be a tuple and since we have
158:33 - three columns first last and email we
158:36 - need three values in here
158:39 - let's call this John what is surname I
158:42 - want do and for the email I want to have
158:45 - John Doe at
158:48 - email.com or whatever you want to add in
158:51 - here
158:51 - if I run this now we have a first name a
158:54 - last name and the email
158:57 - so this is going to create one entry but
159:00 - I want to create a hundred entries so
159:02 - let me comment this out and instead I
159:05 - want to create a for Loop so for I in
159:09 - range 100 and I want to use these values
159:13 - here to create random names
159:16 - for that I'm going to need one more
159:18 - module and that is from random import
159:22 - choice
159:23 - choice we can use to pick one item from
159:26 - a list
159:27 - and this could actually be a really good
159:29 - exercise for you it's not going to be
159:31 - the main exercise for this video but try
159:33 - to create from these names 100 entries
159:36 - and add them to the table and see if we
159:38 - can figure this one out
159:40 - I want to create a first name a last
159:43 - name and an email the first name is
159:46 - quite easy I want to have Choice and
159:48 - then first names
159:50 - the same for the last names I want to
159:52 - choice and pick a random item from the
159:54 - last names
159:56 - for the email I want to create an F
159:58 - string and for this one I want to have
160:02 - the first name
160:04 - then I want to have the last name
160:08 - like so and then add email.com
160:12 - this information we can now turn into a
160:15 - tuple let me call it data and here we
160:17 - are first we have last and we have email
160:21 - finally I can actually get the table and
160:24 - insert the values
160:26 - once again for the parent I want to have
160:29 - an empty string
160:30 - besides that for the index
160:33 - well now I'm gonna go with zero
160:36 - and then for the values I want to have
160:40 - data
160:42 - now I can run this and we can see we
160:44 - have a table with a ton of different
160:46 - entries
160:48 - this is looking really good
160:50 - and there's one very quick layout thing
160:53 - that I do want to do inside of pack I
160:56 - want to fill and add the option here for
160:59 - both
161:00 - and then expand I want to set to true
161:03 - I'm going to explain those values later
161:05 - but if I add them we're going to fill
161:07 - the entire widget with entries that
161:10 - looks much better
161:11 - and obviously you could also change
161:13 - these values as much as you liked so for
161:16 - example in the demo app I don't use the
161:19 - first name for the email I only use the
161:22 - first letter of the first name so index
161:24 - 0 here and now we have some slightly
161:26 - different email addresses
161:29 - now let's talk about index and the best
161:32 - way to understand it is if I play around
161:35 - with the value
161:36 - for this one we need parent with an
161:38 - empty string
161:40 - or the index by default this is going to
161:42 - be 0 and for the values I want to have
161:45 - something that's easily visible let me
161:47 - go with XXXX then we have yyy and then
161:51 - we have z z z
161:54 - if I run this now all the way at the top
161:57 - we have the values that I just specified
161:59 - with this entry here
162:01 - if I change this index to a 1 we are
162:04 - placing it on the first index So Below
162:08 - the first element
162:10 - and this I can keep on doing three we
162:13 - have three items on top and so on
162:16 - the question now is if you wanted to add
162:18 - an element at the end of this table how
162:21 - could you do it I guess in our case we
162:23 - know there are 100 elements so I could
162:26 - add 101 in here and now all the way at
162:30 - the bottom
162:32 - we have the entry I just created but
162:35 - sometimes you don't know the end of the
162:36 - table and for that we can use TK and end
162:40 - that way the new item is always going to
162:43 - be inserted at the end and I just
162:45 - realized this needs to be or in
162:47 - uppercase letters like so and now this
162:50 - is working if I scroll all the way to
162:52 - the bottom now we are always at the
162:54 - bottom
162:55 - and that is what index is doing
162:58 - there are two more things that we have
162:59 - to understand we have events inside of a
163:02 - table and we have items and those work
163:05 - really well together so let me start
163:07 - with events there's one special event at
163:10 - a table or a tree view has
163:12 - we need two smaller than and two greater
163:14 - than signs and then here we have three
163:17 - view select
163:20 - this is going to be triggered every time
163:22 - we are selecting an item inside of the
163:24 - table
163:25 - for now let me just Lambda with event
163:28 - and I want to print the event that we
163:31 - are getting
163:32 - so if I run this now and I click on one
163:35 - and we are not getting very much
163:39 - as a matter of fact the event is always
163:41 - going to be the same no matter what we
163:43 - click on
163:44 - the event here you can basically ignore
163:47 - what you rather want to do is get table
163:50 - and then what is called selection this
163:53 - gives us the curly selected items so now
163:56 - if I click on something we get a random
163:58 - number
163:59 - and I can click on multiple items the
164:01 - number is always going to be a bit
164:03 - random
164:05 - so what does that actually mean
164:08 - if this one here is the table this table
164:11 - is populated with lots of items this
164:14 - could be one item this could be another
164:16 - item this could be a third item
164:19 - basically one item is one row of data
164:22 - this is the item we are going to talk
164:24 - about in just a bit
164:27 - oh well we are talking about it right
164:28 - now
164:30 - and each of those items has a specific
164:32 - ID this was what we have seen something
164:34 - like IO and then two numbers 45 for
164:37 - example
164:39 - these numbers we can use to select items
164:42 - from this table and this I want to do in
164:45 - a separate function so let me Define
164:48 - item select
164:51 - this I want to run in here so item
164:54 - select
164:55 - in here I need one argument for the
164:58 - event although since the event is
165:00 - basically pointless I'm going to add an
165:02 - underscore in here to indicate that I
165:04 - don't care about this value in here once
165:06 - again I want to print my table and then
165:09 - the selection
165:12 - so if I run this now I can click on
165:15 - various items and we get some random ID
165:19 - this random ID I can now use the way you
165:22 - use it is you want to get a table and
165:25 - then the item and in here you can add
165:29 - the table dot selection if I comment
165:33 - this out there is going to be one
165:35 - problem because if I click on this you
165:38 - can see we don't just have the ID we
165:41 - have a tuple that has one element inside
165:44 - of them and that is the ID the reason
165:47 - for that is we can select multiple items
165:49 - so if I select Thomson and hold shift we
165:52 - have a bunch of different items
165:54 - the way you are going to work with this
165:56 - is inside of a for Loop that'd be an
165:58 - easy way so for I in table dot selection
166:04 - then I can use table and item and then
166:07 - here I want to look at the item
166:11 - this I could for example
166:13 - print and let's see what we get if I now
166:16 - click on let me show my mouse again if I
166:19 - click on Lisa Thompson we get
166:21 - text nothing image nothing and then
166:24 - values Lisa Thompson LT Thompson and so
166:28 - on
166:28 - those are the main items although there
166:30 - are a few more for this video I want to
166:33 - keep it simple so in here I only want to
166:36 - show the values now if I should notice
166:40 - again I can click on one item and I can
166:42 - select multiple by holding down shift
166:44 - and we always get all of the different
166:46 - items or rather the actual values
166:49 - and with that we have also covered items
166:52 - so let me get rid of the comment and
166:54 - this is covering the basics of a table
166:57 - although there's one more thing that I
166:59 - do want to do I can find another event
167:04 - for this one we only need one smaller
167:06 - and greater than symbol and in here I
167:09 - want to look for delete
167:11 - if that is the case I want to delete
167:14 - items
167:15 - this delete here stands for the delete
167:18 - key on the keyboard
167:20 - so in here I want to delete items and
167:23 - create a function for the event again we
167:26 - don't care about it so an underscore
167:28 - and let me just print the lead so we can
167:31 - see what's going on if I now run the
167:34 - entire thing and I have the table
167:35 - selected and I click on delete we get
167:37 - delete
167:40 - and I want to use this to actually get
167:42 - rid of a value
167:44 - and this I think could be a really good
167:46 - exercise for you try to figure out this
167:48 - function here
167:50 - one method you need is called table dot
167:54 - Elite
167:55 - in here you can pass an item and this is
167:58 - going to delete Whatever item you pass
168:00 - in here
168:01 - and that is going to delete the selected
168:03 - row
168:05 - although you have to figure out how to
168:06 - actually get all of the items so
168:09 - positively now and try to figure this
168:11 - one out
168:14 - basically what we have to do is very
168:17 - similar compared to this in fact let me
168:19 - copy it and I again want to look at my
168:22 - entire selection but now I don't want to
168:24 - print it instead I want to get my table
168:27 - and delete it and then here I want to
168:30 - add I
168:31 - so now if I run this again
168:33 - and I can select a couple of entries
168:36 - let's go with those two and if I click
168:38 - on delete they disappear
168:41 - this works with as many items as I can
168:43 - select and they always just disappear
168:47 - that way we have quite a fancy table
168:49 - that works really well
168:51 - and let me try to delete all of the
168:54 - values inside of this table
168:56 - then you can see it very well that this
168:59 - is indeed working quite good cool so
169:02 - with that we can delete items inside of
169:05 - this table
169:07 - or rather rows that usually makes a bit
169:09 - more sense
169:11 - and with that we have the basics of a
169:14 - table now tables do get quite
169:16 - complicated so there's a lot more stuff
169:18 - that you could cover but if you got so
169:21 - far and you have a documentation this
169:23 - shouldn't be too hard let's create some
169:25 - sliders specifically we are going to
169:28 - create this app here inside of there we
169:32 - have a couple of Sliders and a few
169:33 - progress bars right now I'm dragging the
169:36 - top one and this one is connected to a
169:38 - progress bar on the bottom you can see
169:41 - another progress bar and another slider
169:43 - and those are also connected meaning I
169:45 - can drag the slider and influence the
169:47 - progress bar and also update the text
169:51 - besides that I can also write inside of
169:54 - this box over multiple lines let me add
169:57 - quite a few
169:59 - and on the right I can drag the text up
170:03 - and down
170:05 - that is going to be the project for this
170:07 - part and let's cover some basics
170:11 - in tkinter there are two main widgets to
170:15 - create sliders one is called the
170:17 - progress bar and the other is a slider
170:19 - and both show progress in one dimension
170:22 - this could either be the horizontal or
170:24 - the vertical axis you can Define this
170:26 - yourself
170:27 - in terms of differences the slider can
170:30 - be moved by the user or it can be set
170:32 - independently meaning you can either use
170:34 - the mouse or you can use something like
170:36 - a tkinder variable
170:38 - the progress bar Works a bit differently
170:41 - this one cannot be set by the user so
170:43 - Mouse input is not activated basically
170:46 - always need some kind of tick in the
170:48 - variable or something external to set it
170:50 - but other than that the two widgets work
170:53 - kind of in a similar way so let's have a
170:56 - look
170:57 - I already have a few lines ready if I
170:59 - execute all of this we can see we have a
171:02 - basic tkinder window nothing special so
171:06 - let's start by creating a slider
171:10 - a slider is called ttk and scale this I
171:14 - want to store inside of a variable I'm
171:16 - going to call it scale
171:18 - in here as always at the minimum we need
171:20 - the master which is going to be the
171:22 - window and once I have that
171:24 - I can pack this widget
171:26 - now I can run this and we have a basic
171:30 - slider I can move this around but right
171:32 - now it doesn't really do anything
171:35 - to get some interactivity we have to add
171:38 - a few more arguments the one that is the
171:42 - most useful I feel is called command and
171:45 - this one works like a button anytime we
171:47 - are clicking on the scale we are
171:50 - activating this command meaning in here
171:52 - we need a function or a Lambda function
171:55 - I am going to go with a Lambda function
171:58 - and I want to print let's say test
172:02 - I can now run this and if I click on the
172:06 - widget we can see we are getting an
172:08 - error the error being that Lambda takes
172:11 - zero positional arguments but one
172:13 - argument was given
172:15 - which means when we are calling this
172:18 - Lambda function ttk dot scale enters one
172:22 - argument automatically this we have to
172:24 - capture with a parameter which we can do
172:26 - quite easily I'm going to call it value
172:29 - and just to see what happens let's print
172:31 - this value
172:32 - I can run the entire thing now and if I
172:35 - move the slider around we can see the
172:37 - values that this slider has right now
172:39 - they start from zero and go all the way
172:41 - to one
172:43 - these are the default values and those
172:46 - you can change quite easily
172:48 - we have seen the same thing from the
172:49 - spin box you need from and underscore
172:52 - don't forget that in my case I want to
172:54 - set the start value to zero the end
172:57 - value is going to be set with 2. I'm
173:00 - going to set this one to 25. with that I
173:03 - can run the entire thing again
173:05 - drag this thing around and now we can
173:07 - see we have values from 0 to 25. works
173:10 - pretty well
173:12 - before I continue I want to put all of
173:15 - the arguments on separate lines
173:17 - otherwise this is going to be difficult
173:19 - to read
173:20 - another argument you might want to
173:22 - consider is called length and this one
173:25 - sets the length of the scale so if I set
173:28 - 300 in here we get a much longer slider
173:31 - although in terms of functionality we
173:34 - have the very same numbers
173:36 - finally we have what is called Orient
173:39 - and by default Orient is horizontal I
173:43 - can run this now and we have the same
173:45 - outcome however you might already see
173:47 - where this is going I can set this to
173:49 - vertical and now we have a vertical
173:51 - slider that still works in exactly the
173:54 - same way finally the last thing I do
173:57 - want to cover for slider is you can set
173:59 - a variable and this variable is just
174:03 - going to be a tkinter variable meaning
174:05 - before I create a slider I want to
174:07 - create I'm going to call it scale end
174:10 - and this is going to be TK int VAR this
174:15 - I can set as the value for the variable
174:17 - let me add scale in in here if I run
174:21 - this now nothing is going to happen
174:24 - however what I can be doing is for
174:27 - example set the start value of this
174:29 - decanter variable to let's go with 15.
174:33 - if I now run this we can see that the
174:36 - start value is 0 the N value is 25 and
174:41 - this value here is 15.
174:44 - which is already quite good at
174:46 - demonstrating how these two numbers work
174:49 - together quite well or well not numbers
174:51 - more like widgets you get the idea
174:54 - I guess there's one thing I should cover
174:57 - and that is that this scale end Only
175:00 - Stores integer values that's why it's
175:02 - called integer variable which means if I
175:06 - inside of the command Lambda function
175:08 - get my scale end and get the value if I
175:12 - now run this again I am only getting
175:14 - integer values
175:16 - in the original we had floating Point
175:19 - numbers so be aware that how you store
175:22 - this data is quite important
175:24 - if you really wanted to store floating
175:27 - Point numbers you would need a double
175:30 - VAR
175:32 - this one stores floating Point numbers
175:34 - now I can run this again and now we have
175:37 - the same output as before
175:38 - I guess I can stick with this one
175:40 - seems to work quite well although I do
175:43 - want to change the name here from scale
175:44 - end to scale
175:46 - load
175:49 - cool and with that we have all of the
175:52 - basics of a slider it really isn't that
175:54 - complicated
175:56 - which means next up we can work on a
175:59 - progress bar this we get with ttk and
176:04 - progress bar
176:07 - as always I want to store this inside of
176:09 - a variable I'm going to call this
176:11 - progress and window for the master and I
176:14 - want to pack the progress bar widget
176:17 - if I run the code now
176:19 - we're getting an error because this
176:21 - scale end should be scale float let's
176:23 - try it again in the bottom of the window
176:26 - now you can see we have a progress bar
176:29 - problem is I can't click on it nothing
176:33 - is going to happen
176:34 - the reason being here that there is no
176:37 - mouse input for a progress bar instead
176:40 - what you want to do is to use taking the
176:42 - variables and connect them via variable
176:44 - to this widget for example I could use
176:47 - scale float and now
176:49 - you already see we have some basic
176:52 - progress bar in here and if I drag this
176:55 - thing down and up you can see the
176:57 - progress changes inside of the progress
176:59 - bar
177:00 - although there's one thing that I forgot
177:02 - let me run the entire thing again by
177:04 - default we know that the slider
177:07 - currently is set to 15.
177:09 - in this 15 we have down here as well
177:13 - but we don't know how far this progress
177:17 - bar goes although we do know it starts
177:20 - at zero if I drag the entire thing all
177:21 - the way to the top we get to zero that
177:24 - part should be fairly obvious
177:26 - you might be tempted for this one to set
177:29 - it to argument like we've done for the
177:32 - scale unfortunately this one works
177:35 - slightly different the value you want to
177:37 - specify here is called maximum if I set
177:39 - this one to 25 I can now drag my slider
177:43 - all the way to the bottom and then we
177:45 - have a full progress bar and this way we
177:48 - can connect these two widgets quite well
177:50 - and they work really really well
177:51 - together
177:52 - these are the two arguments you
177:54 - basically always want to use with a
177:56 - progress bar although there are quite a
177:58 - few more and to demonstrate them I'm
178:00 - going to set all of this over multiple
178:01 - lines that way I have a bit more space
178:05 - the next one is called Orient and this
178:09 - one we have already seen in here for
178:11 - example I can set this to vertical and
178:13 - we have a vertical progress bar although
178:16 - it works in exactly the same way
178:18 - I don't want this to be vertical I'm
178:20 - going to set this to horizontal so now
178:23 - we have the starting point again
178:25 - we can also set what is called the mode
178:29 - in here we can either set determinate
178:32 - which is what we already have
178:36 - no change or we can set this to
178:40 - indeterminate
178:41 - if I run this you can see the difference
178:43 - between the two now we don't have a
178:45 - complete progress instead we just have a
178:47 - small bar it's kind of hard to explain
178:49 - but you can see it pretty well besides
178:52 - that we also have length this one like
178:56 - for the slider up here we can set the
178:59 - length of the progress bar let's go with
179:02 - 400 and now we have a really long
179:05 - progress bar that still works with the
179:08 - slider so no change there
179:11 - with that we have all of the main
179:13 - arguments that you could use for
179:15 - Progress bar although there's one more
179:17 - thing that is a little bit weird and
179:21 - that is that a progress bar has a couple
179:23 - of special methods they're called start
179:26 - and stop
179:28 - for example if I said progress dot start
179:30 - run the code
179:32 - you can see this thing starts by itself
179:35 - and since we are changing the number
179:38 - let me move it to the side let me close
179:40 - it actually
179:40 - once I click on start the progress bar
179:44 - is going to start some progress
179:47 - and this progress can also influence the
179:50 - variables the one we have set here
179:51 - because of that we are also going to
179:54 - change this scale here
179:57 - let me run the entire thing again
179:58 - actually
179:59 - you can see that when we start in the
180:02 - program the indicator for the slider
180:04 - went down automatically
180:07 - and it can't go any further but if I
180:09 - move it now the two are kind of fighting
180:12 - with each other so you have to be really
180:14 - careful when you're using start
180:16 - generally I wouldn't really recommend
180:19 - using start there isn't usually a good
180:22 - reason for it when you're using a
180:24 - progress bar you want to have some
180:26 - external data set that gives you the
180:27 - data for this progress like a download
180:30 - for example
180:32 - using the start by itself probably is
180:34 - never really going to be useful although
180:37 - besides that we also have stop although
180:39 - this one doesn't do very much because we
180:41 - are stopping this once we get started
180:44 - I suppose a better way of approaching
180:46 - this is I want to stop this progress as
180:50 - soon as I click on this scale
180:52 - this means instead of printing the value
180:54 - I now want to get the progress and stop
180:58 - it
180:59 - let's try this one now and now if I
181:01 - click on the slider the progress bar
181:03 - doesn't go weird anymore
181:05 - there's one thing I forgot and that is
181:08 - inside of the start method you can set a
181:10 - step size or rather you can determine
181:13 - how often this start method is updating
181:16 - the progress bar
181:18 - for example if I set 1000 in here this
181:21 - is in milliseconds meaning 1 000
181:23 - milliseconds are one second
181:26 - if everyone is now nothing happens but
181:28 - after one second we get some minor
181:30 - progress
181:33 - so if that is your thing this is also
181:36 - what you could be doing although in my
181:37 - case I don't want to use the start
181:39 - method so I'm going to comment it out
181:41 - all right there's one more widget that I
181:44 - do want to cover and that is called
181:45 - scrolled text
181:48 - let me fix the typo this scroll text we
181:52 - have to import because it's basically a
181:55 - compound widget
181:56 - let me import it first and then you can
181:58 - see quite well how this is going to work
182:00 - to import this we need from tkinder and
182:04 - we want to import scrolled
182:06 - text all in lowercase letters
182:10 - once we have that just be aware that
182:12 - this scroll text is not a widget in
182:14 - itself it works rather like ttk this one
182:17 - contains other widgets which we can use
182:20 - down here I want to create another
182:22 - variable let's call it scroll text and
182:25 - now I want to get my scroll text and
182:28 - then Dot and uppercase as
182:31 - and scrolled text and this is now going
182:35 - to be a widget so this one needs a
182:38 - master once I have that I can get the
182:40 - scrolled text pack the entire thing and
182:43 - now if I run it we have a text field
182:46 - where I can type quite a bit
182:49 - let me go all the way to the bottom and
182:51 - there you can see on the right we have a
182:54 - scroll bar
182:55 - Works quite well this one is well quite
182:58 - straightforward
183:00 - what you really have to be aware of here
183:02 - is that this is not one widget basically
183:06 - we have a normal text widget and then on
183:08 - the right for the scroll bar we have a
183:11 - slider we could make this ourselves and
183:14 - later on I'm gonna have one part where
183:16 - we do make this thing ourselves
183:18 - but for now if you just want to have
183:20 - some simple text widgets this is how you
183:21 - would go on about it
183:23 - you can also set some custom parameters
183:25 - here for example you can set the width
183:28 - to I don't know 200 let's see what we
183:30 - get possibly a bit much
183:34 - let's say 100. there we go
183:37 - and you can also set the height of this
183:41 - thing to 20
183:43 - and that doesn't do very much let's go
183:46 - with five so you can see it really well
183:49 - there we go now we have a very
183:52 - short text field
183:55 - but other than that this scroll text you
183:57 - would use like a text widget
184:00 - now I am not going to use this very much
184:02 - I just want to cover it so you have a
184:04 - basic idea of what it is in case you see
184:06 - it
184:08 - in my case usually when you create a GUI
184:10 - it is much more efficient to create your
184:12 - own scroll text which means this is not
184:15 - going to be terribly relevant
184:18 - instead I want to do an exercise and
184:21 - then we can finish up this part
184:24 - I want you guys to create a progress bar
184:28 - that is vertical start automatically and
184:30 - also shows the progress as a number
184:33 - on top of that there should also be a
184:35 - scale slider that is affected by the
184:37 - progress bar
184:38 - pretty much what we have done with these
184:41 - two widgets here
184:43 - pause the video now and try to implement
184:45 - this yourself
184:49 - let's get started by creating the
184:52 - progress bar that is vertical that
184:54 - starts automatically and that shows the
184:56 - progress as a number since we do have to
184:59 - store some data here I want to create
185:01 - let me call it the exercise and this
185:04 - could be an integer
185:06 - this as always is going to be an INT VAR
185:09 - with no starting value once we have that
185:12 - I want to create an exercise progress
185:15 - bar
185:16 - and this we get with ttk and progress
185:20 - bar
185:22 - what a master we need the window then
185:24 - for the orientation to be vertical I
185:28 - need to set Orient to vertical
185:32 - besides that I also have to declare the
185:34 - variable for this widget which is going
185:36 - to be the exercise integer
185:38 - with that I can fix the typo and pack
185:42 - this widget
185:45 - let's see what we get
185:47 - that's looking pretty good although it
185:50 - doesn't do anything right now
185:52 - for that I want to get exercise progress
185:55 - and start the entire thing running this
185:57 - again now we have an automatically
186:00 - starting progress bar
186:02 - that covers most of the first bit so we
186:06 - got so far this bit here next up we have
186:09 - to show the progress as a number
186:12 - which means we are going to need a label
186:16 - with ttk and label the master is going
186:20 - to be the window besides that we are
186:22 - going to need a text variable
186:25 - which is going to be the exercise
186:26 - integer
186:28 - don't forget to pack this label
186:32 - and let's see this is looking really
186:35 - good
186:38 - cool I'm quite happy with this although
186:40 - here you can see one quite weird thing
186:43 - and that is that this number is well a
186:47 - floating Point number we have point zero
186:49 - I don't actually know why tkinder is
186:52 - doing that but when you're using
186:54 - an integer variable and set it as the
186:57 - text variable and the original number is
187:00 - a floating Point number like what we get
187:02 - from a progress bar then tick interp
187:05 - stores it as a floating Point number but
187:07 - rounds it down it's kind of weird but
187:11 - this is basically never going to be an
187:13 - issue so not too much to worry about
187:15 - this covers the entire first part for
187:18 - the next bit we have to create another
187:20 - slider that is affected by the progress
187:22 - bar
187:23 - let's call this one exercise scale
187:28 - and we need ttk and scale the master is
187:32 - going to be the window and in here I
187:34 - want to have a variable which is going
187:36 - to be the exercise integer
187:38 - this exercise
187:40 - scale I now want to pack
187:43 - I can now run the entire thing and now
187:46 - we can see we kind of have a problem
187:48 - that is the slider is always all the way
187:51 - on the right
187:53 - the reason for that is that the default
187:55 - values for a slider are between 0 and 1.
187:59 - to fix that all we have to do is set a
188:02 - from argument for the slider which I
188:05 - want to set to zero and a two argument
188:08 - to let's go with 200 and let's see what
188:11 - change that is going to make
188:13 - now we can see that the slider goes all
188:16 - the way to the halfway point
188:21 - and if we change this to 100
188:25 - we can see that all of this is working
188:27 - as intended there we go this is looking
188:30 - really good
188:31 - and with that we have the basic sliders
188:34 - inside of tkinter the last change that I
188:37 - do want to make is I want to set the
188:39 - orientation of the original scale widget
188:41 - to
188:42 - horizontal
188:44 - that way this thing doesn't look as
188:45 - cramped anymore and this is what you
188:47 - have seen in the demo more or less in
188:50 - this part we are going to cover
188:51 - something slightly more advanced and
188:54 - that is frames and parenting
188:57 - frames are just another widget but you
189:01 - wouldn't really use them by themselves
189:02 - instead use them to create better
189:05 - layouts and for the better layouts you
189:08 - are going to need parenting let's talk
189:10 - about it
189:11 - so far for the parent we have always
189:13 - used the window itself but that is very
189:17 - often not what you want
189:20 - for example if we are going to create a
189:22 - menu you want to have every single menu
189:24 - item to have the actual menu as the
189:27 - parent
189:28 - or if you have a tap entry you want to
189:31 - have every single widget inside of the
189:33 - tab with the parent being the tab we're
189:35 - going to cover both of those cases in
189:37 - the next two parts so I'm going to go
189:40 - into a bit more detail but for both you
189:42 - need more control over what the master
189:44 - is
189:45 - what we're going to cover for this part
189:47 - is a complex layout or a slightly more
189:50 - complex one because what you can do is
189:54 - you can create a container widget and
189:56 - use that to organize your widgets and
189:59 - then you can place the container widget
190:00 - somewhere on the window
190:02 - the container which it here is going to
190:04 - be the frame
190:06 - this one is called ttk frame and this is
190:09 - an empty widget
190:11 - how you are going to use it is you are
190:13 - placing other widgets inside of it and
190:15 - then you place the frame that way you
190:18 - are placing all of the widgets inside of
190:19 - it as well which is really powerful to
190:22 - create more complicated layouts for now
190:25 - we're going to keep it fairly simple but
190:28 - in the next major section we're going to
190:29 - cover layouts in a lot of detail so
190:32 - don't worry about too much for now what
190:35 - you should take away from this part is
190:37 - how parenting Works once again here we
190:40 - are in the code if I run all of this we
190:43 - have an empty window that has a custom
190:45 - size 600 by 400 pixels what I want to
190:49 - start with is I want to create a frame
190:51 - this I want to store in a separate
190:54 - variable and this we create with ttk DOT
190:58 - frame this one like any other widget is
191:01 - going to need a master which in this
191:03 - case is going to be the window
191:06 - once we have that I can pack this thing
191:10 - and if I run it we can see that we can't
191:13 - see anything the reason being that
191:16 - frames are invisible that being said
191:19 - there's one way to visualize how a frame
191:22 - is going to look like right now the
191:24 - window has this certain size this I want
191:27 - to comment out if I run the code now we
191:29 - can see something like this we basically
191:31 - only have the top control buttons I can
191:34 - extend it but by default we have this
191:36 - size here this happens because tkinter
191:40 - or the window tries to have the size of
191:43 - the widgets inside which right now is an
191:46 - empty widget with no size so we get
191:48 - something like this
191:49 - but for frame we can set the width let
191:53 - me go with 10 and we can set the height
191:55 - in here I want to go with 20. if I run
191:59 - this now we have a very small window I
192:03 - guess the numbers here are a bit small
192:05 - let's go with 100
192:07 - and 200 that is looking a bit better
192:11 - we have a width of 100 pixels and we
192:15 - have a height of 200 pixels the numbers
192:19 - we get here and here another way you
192:22 - could visualize a frame which I think is
192:25 - even better is you could set a border
192:28 - with border with and this I'm going to
192:32 - go with 10. although by default you're
192:34 - not going to see anything also there
192:36 - shouldn't be a typo in there border with
192:39 - like so this is looking better now we
192:42 - have a border width but the Border has
192:44 - no color so it's invisible
192:46 - for that we have to set a relief
192:51 - and for the relief we have a couple of
192:53 - inbuilt options the one I'm going to use
192:56 - is called TK and Rich all in uppercase
193:00 - letters if I now run this we get the
193:03 - frame we have seen earlier
193:06 - except right now it has some kind of
193:08 - Border thingy the default for the relief
193:11 - is flat with this one you don't see
193:15 - anything besides that we have raised and
193:19 - we have sunken those look like this
193:23 - or like this
193:26 - it basically starts to look like a
193:28 - button another option is called Groove
193:31 - like so
193:34 - and this one I guess is even better
193:36 - let's stick with this one
193:38 - the relief option you're not going to
193:40 - use too often because most of the Styles
193:42 - here look quite outdated and later on
193:45 - we're going to learn better ways to
193:46 - style it
193:47 - now we can actually start the
193:49 - interesting bit and that is the
193:51 - parenting or I guess a more appropriate
193:55 - name in tkinder would be Master setting
193:58 - right now the master was always the
194:01 - window so the first argument we placed
194:03 - into any widget was always the window
194:05 - which we created all the way at the top
194:08 - this does not necessarily have to be the
194:11 - case what we could for example do is
194:13 - create another label or it could be any
194:15 - widget you create this always in the
194:18 - same way ttk label in this case and now
194:21 - for the master I want to set the frame
194:24 - other than that I want to have text and
194:27 - this I want to call label in frame you
194:31 - also still need to pack this label
194:34 - and if I run this now we can see a
194:37 - couple of things happened the first one
194:39 - is that we have the label inside of the
194:42 - frame however besides that the width and
194:45 - the height of the frame have changed we
194:48 - don't have something like this anymore
194:51 - instead we have well just this size here
194:54 - so what happened well the issue you have
194:57 - to understand here is that ttk primarily
195:01 - tries to set the size of a widget by its
195:04 - children
195:05 - in this case the frame only has one
195:07 - child and that is the label and that
195:10 - overwrites the width and the height
195:12 - if you don't want that there is an
195:14 - option to disable that you will get the
195:16 - frame again and the option is called
195:18 - pack and proper gate this is a method so
195:23 - we have to call it and then here we can
195:25 - either set faults or we can set true
195:28 - if you set true
195:30 - we are setting the size of the widget by
195:32 - its children if we set false we get the
195:36 - original size meaning we are using the
195:38 - width and the height we have used for
195:41 - this tkinter widget
195:42 - you can also set multiple children
195:44 - inside of one frame for example I could
195:47 - create another button
195:49 - and this one is also going to have the
195:51 - frame as the master for the text I'm
195:53 - gonna go with button in a frame I want
195:57 - to pack the button and there we go now
196:00 - we have a button inside of it and you
196:01 - can't see we are cutting off the button
196:04 - a tiny bit meaning that TK enter
196:06 - constrains the size of these widgets
196:08 - quite a bit
196:10 - let me increase the width of this widget
196:12 - to 200 now this looks a bit better and
196:15 - that's kind of all you need to set the
196:18 - master to something other than the
196:19 - window you have created
196:21 - right now this doesn't seem too useful
196:24 - but let me demonstrate one instance
196:26 - where this could be powerful let's call
196:29 - this example I want to create another
196:32 - label let's call it label 2. this label
196:35 - is going to have the window as the
196:37 - parent and for the text I want to have
196:40 - label outside frame this label to I now
196:45 - want to pack
196:47 - and now we can see that the label is
196:49 - outside of the frame which is giving us
196:52 - quite a bit of space
196:54 - in here however now if I get the
196:57 - original frame and only pack it after
197:02 - label 2.
197:04 - if I run this now we can see we have the
197:07 - label on top and below that we have the
197:09 - frame itself with the widgets inside of
197:12 - that frame let me move it to the side
197:14 - this label here is all the way on the
197:17 - top and below that we have all of the
197:20 - other stuff this Frame here and all of
197:22 - the children of the frame what is even
197:25 - more powerful and what we are going to
197:27 - learn more about later let me return
197:29 - frame.pack to its original place so this
197:33 - thing is going to look like so again
197:35 - you can also inside of Pack set aside
197:39 - by default this side is always the
197:41 - string top
197:43 - but it doesn't have to be you could also
197:45 - set left for example let's see what this
197:48 - gets us and now we have the frame on the
197:51 - left side
197:52 - with the label outside of the frame
197:53 - being on the top this however we can
197:56 - also set to the left side and that gives
197:59 - us two widgets right next to each other
198:02 - with this system you can create pretty
198:05 - powerful setups and again we're going to
198:08 - learn much more about this later but for
198:10 - now this is all I want to cover for this
198:13 - bit
198:14 - Let's do an exercise and then we are
198:17 - done what I want you guys to do is to
198:20 - create another frame with a label a
198:22 - button and an entry widget and place it
198:25 - to the right of the other widgets pause
198:28 - the video now and see if you can figure
198:29 - this one out
198:33 - let's start by creating I'm going to
198:36 - call this the exercise frame
198:39 - this is going to be ttk and frame this
198:42 - one has the parent of window I am not
198:45 - going to pack it just yet instead I want
198:48 - to create a label a button and an entry
198:51 - widget
198:52 - since those are not going to be doing
198:55 - anything right now I am not going to
198:56 - store them inside of a variable I am
198:59 - just going to create ttk label
199:02 - the parent is going to be the exercise
199:04 - frame and the text is going to be label
199:08 - in frame 2. right after creating this I
199:12 - want to pack it as well I can copy this
199:15 - one now instead of a label I want to
199:17 - have a button the other arguments can
199:20 - stay identical and finally I want to
199:22 - have an entry widget this one doesn't
199:25 - have a text argument
199:28 - once I have all of those I want to get
199:31 - my exercise frame and pack it running
199:34 - this now
199:35 - we are getting a couple of other widgets
199:38 - all the way on the top right
199:40 - Adobe I realized the text here this one
199:43 - shouldn't be labeled this should be
199:45 - button in frame 2. let's run this again
199:47 - and this is looking pretty good
199:50 - although the last thing that we do have
199:52 - to do is that when I'm packing the
199:55 - exercise frame I want to set aside and
199:58 - decide should be left although this one
200:01 - has to be a string
200:03 - and now we have another widget to the
200:06 - right of it this one doesn't have a
200:08 - border around it so it looks a bit
200:09 - different but it's basically the same
200:11 - thing we have done in the original frame
200:13 - and this kind of system you can push
200:16 - quite a bit for example you could have
200:18 - one widget inside of a frame which is
200:21 - inside of another frame which is inside
200:24 - of the window but once again all of this
200:27 - we are going to cover in much more
200:28 - detail in just a few sections in this
200:31 - section we are going to cover tabs let's
200:34 - have a look this is what we are going to
200:36 - create we have a basic set of widgets
200:39 - inside of one tab then we have another
200:41 - tab with some other widgets the widgets
200:43 - in here work as expected
200:46 - and you can just play around with them
200:49 - this is what we're going to create
200:52 - and the widget we need is called ttk
200:54 - notebook the way this is going to work
200:57 - is that we want to set a couple of
201:00 - children to this notebook this is almost
201:03 - certainly going to be a frame
201:05 - and each frame is then going to become a
201:08 - tab
201:09 - since you can add lots of widgets to a
201:11 - frame you can use that system to make
201:14 - widgets visible or invisible it's
201:16 - honestly a fairly simple system
201:19 - here's the code if I execute all of this
201:21 - we have a basic window
201:24 - and I want to create a tab widget or
201:29 - rather I want to create a notebook
201:32 - let me call it notebook and the widget
201:34 - we need is ttk and node book
201:39 - this one is going to have the window as
201:42 - the parent
201:43 - I can pack this notebook right away
201:46 - although by default we can't see
201:49 - anything The Notebook by itself is going
201:51 - to be invisible the only thing you are
201:54 - going to see are the tabs inside of it
201:56 - since we don't have any tabs right now
201:57 - nothing is going to be visible
202:00 - which means I have to create a couple
202:03 - let me call it tab 1 and this is going
202:06 - to be ttk and frame
202:08 - what apparent I now want to set the
202:11 - notebook while we are here I want to
202:13 - create a second tab I'm going to call it
202:15 - Tab 2 and this one also has the parent
202:18 - as The Notebook
202:19 - with this I can run this again we still
202:22 - can't see anything
202:24 - what we now have to do is inside of the
202:26 - notebook we have to add and this is
202:30 - going to be tab 1
202:33 - and this wants to have a text this text
202:36 - is going to be the name of the tab I'm
202:38 - going to call this one tab 1 then I can
202:40 - duplicate it and change this 1 to a two
202:43 - and now we should be seeing something
202:45 - there we go we now have two tabs
202:49 - which means you can just Place widgets
202:51 - inside of either of the frame and then
202:54 - they are going to be visible inside of
202:56 - the respective tab for example inside of
202:59 - tab 1
203:00 - I'm going to add a tiny bit of white
203:02 - space I'm going to call this tab one
203:06 - inside of tab 1 I want to create a label
203:10 - with ttk and label
203:13 - this one is tab 1 for the master and for
203:16 - text I want to have text in tab 1. don't
203:22 - forget to pack this widget
203:26 - and with that
203:27 - we can see we now have some text in the
203:30 - first tab although Tab 2 doesn't have
203:33 - anything right now but we certainly have
203:35 - a good start
203:37 - in the demo inside of the first tab I
203:39 - also had a button let me call it button
203:41 - one ttk and button with tab 1 as the
203:46 - parent and the text is going to be
203:48 - button in tab 1.
203:52 - besides that I also have to pack this
203:55 - button and now we have text and we have
203:58 - a button inside of tab number one
204:00 - tab number two still doesn't have
204:02 - anything
204:03 - all of that is going to happen inside of
204:06 - tab 2. in here I want to create Label 2
204:09 - which is going to be ttk and label with
204:13 - Tab 2 as the parent
204:16 - the text is going to be I guess text in
204:21 - Tab 2 makes the most sense here
204:24 - this Label 2 I also want to pack
204:28 - I have text and a button in the first
204:31 - Tab and in tab number two I have tab 2.
204:34 - so this is working quite well
204:37 - there's also going to be an entry let me
204:40 - call it entry 2 and this is going to be
204:42 - ttk and entry inside of Tab 2 and
204:46 - there's nothing else in here and entry 2
204:49 - and pack
204:50 - and now
204:53 - we have the stuff you have seen in the
204:55 - demo honestly this wasn't very difficult
204:58 - all of these watches work like anything
205:01 - else if you understand how to set the
205:03 - master this system should be really
205:05 - really simple
205:07 - or at least I hope it is
205:09 - which means we can already do a
205:11 - challenge
205:13 - what I want you guys to do is to add
205:15 - another tab with some buttons and text
205:17 - inside
205:18 - let's say with two buttons and one label
205:24 - to be a bit more specific possibly now
205:26 - and try to figure this one out
205:31 - I want to start by creating another
205:34 - frame this I'm going to store inside of
205:36 - tab exercise and it's going to be a ttk
205:40 - and frame with the parent being The
205:43 - Notebook
205:44 - inside of that I want to create button
205:49 - exercise one
205:52 - with ttk and button
205:55 - the parent being tab exercise and the
205:59 - text could be button one it doesn't
206:02 - really matter what it is
206:04 - this button exercise one I also want to
206:08 - pack and with that I can just copy the
206:10 - entire thing
206:12 - and add another button here
206:14 - all I have to do now is change to one to
206:16 - a two the one in the name or the text
206:19 - should also be a two
206:21 - that is going to give us the buttons
206:24 - besides that I want to copy this one
206:26 - more time I want to create a label
206:30 - which I get with ttkn label this is
206:33 - going to be label
206:35 - there we go now we are packing this one
206:37 - as well with this we have all of the
206:40 - widgets and the frame to put them inside
206:42 - next up
206:44 - I want to get the notebook and add my
206:48 - tab exercise like we have seen up here
206:52 - which means besides that I need a text
206:55 - and this is going to be tab exercise
206:59 - let's try this one now and there we go
207:01 - we have tab 1 we have Tab 2 and we have
207:04 - tab exercise with button one button 2
207:06 - and the label
207:08 - that's pretty much it I hope you can see
207:10 - how this system is fairly
207:12 - straightforward there shouldn't be too
207:13 - much that can go wrong
207:15 - I guess the one thing you want to be
207:17 - aware of is that this Frame here or
207:21 - these frames here are not going to be
207:24 - packed themselves for that we're using
207:26 - this add method
207:28 - for completion here you don't actually
207:31 - have to set the notebook as the parent
207:33 - for example if I change this notebook to
207:35 - a window and run this again we get the
207:38 - very same outcome although all of these
207:41 - other widgets do need the frame as the
207:43 - parent I just think that in the notebook
207:45 - as the parent makes the most sense here
207:47 - but choose whatever you want in this
207:50 - case it doesn't make too much of a
207:51 - difference
207:52 - let's talk about menus in tkinter you
207:56 - are creating a menu with TK menu be
207:59 - aware here we are using TK not ttk
208:03 - but other than that the widget is fairly
208:05 - straightforward however there's one
208:07 - thing you have to understand to create
208:09 - more complex menus and that is that you
208:12 - are always using multiple TK menus and
208:15 - you Nest them sometimes you can Nest
208:17 - quite a few of them at the same time and
208:20 - this can get a bit confusing and a bit
208:22 - complex
208:23 - let me give you an example if you want
208:25 - to create a simple menu you will place a
208:28 - TK menu inside of another TK menu and
208:31 - then this sticker menu becomes an option
208:34 - now what does that mean let's say we
208:37 - have our normal application the entire
208:39 - window is the blue frame here inside of
208:42 - there we have TK menu this is the main
208:46 - menu this would be just a normal top bar
208:49 - like you've seen in basically any other
208:51 - application
208:53 - inside of that we are placing another
208:56 - item and this would be the TK menu this
208:59 - would now be one of the entries inside
209:01 - of this menu
209:03 - but other than that both of these are
209:05 - just TK menu widgets
209:08 - the red menu though can now have a
209:10 - couple of extra options
209:12 - meaning here we actually have items we
209:15 - can pick from
209:17 - I hope that makes sense you could make
209:20 - all of this even more complex because
209:22 - you could place for a sub menu a menu
209:25 - inside of a menu inside of another menu
209:29 - for this example I kept the colors
209:31 - constant the main menu is the yellow one
209:34 - inside of there we have a red Sub menu
209:37 - or one item inside of the main menu
209:39 - inside of that menu we have another menu
209:42 - this would be one of the items in here
209:46 - inside of there we could have other
209:48 - entries like so
209:51 - and we could even have other menus in
209:53 - here this would still work
209:56 - the system overall can get quite
209:58 - complicated
210:00 - but well once you understand the basic
210:02 - logic this really isn't too difficult as
210:04 - long as you understand the nesting
210:06 - principle
210:07 - let me actually demonstrate what we are
210:09 - going to make it's going to look like
210:11 - this we have a menu with a couple of
210:15 - entries and inside of one we have a sub
210:17 - menu on top of that we also have a
210:19 - checkbox in here that we can check and
210:22 - uncheck finally there is a separate menu
210:25 - button it's basically a button with a
210:27 - menu although it works like a menu
210:31 - and that is all we need let's have a
210:34 - look at this in code
210:36 - once again I have a few lines of code
210:38 - ready if I execute all of this we have a
210:41 - plane ticket window it doesn't do very
210:43 - much
210:44 - in here I want to create a menu
210:47 - this we create with TK and menu like any
210:52 - other widget this is going to need a
210:54 - parent which in my case is going to be
210:55 - the window
210:57 - on top of that this widget I want to
210:59 - store inside of a variable that I'm
211:01 - going to call menu
211:03 - while this menu is just another widget
211:06 - we are not using the pack method on it
211:08 - instead to turn it into the menu of the
211:11 - window you would use window
211:14 - configure and then you would set the
211:17 - menu to the menu
211:20 - if I run this now we can't see anything
211:23 - the reason for that is that this menu by
211:26 - default is invisible we can only see the
211:28 - children inside of it
211:30 - since we don't have any children right
211:32 - now we can't see anything
211:34 - but that we can change quite easily
211:36 - let's start by creating one sub menu
211:41 - I want to create TK menu again
211:45 - although now the parent is going to be
211:47 - the menu the one we just created this
211:50 - one up here
211:51 - this I want to store as well in the
211:53 - variable I'm going to call this one the
211:55 - file menu
211:56 - the name is basically arbitrary
211:59 - with this we have an entry but if I run
212:01 - the code we still can't see anything the
212:04 - reason for that is that we need one more
212:06 - line of code
212:07 - we need to get our menu and then the
212:09 - method add Cascade
212:11 - for this one we need two arguments first
212:14 - of all we need what is called the label
212:17 - this is the text you are going to see
212:20 - I'm going to call this one file
212:22 - besides that we need a menu entry this
212:25 - is the file menu we just created and now
212:29 - we should be seeing something there we
212:30 - go in the top left we now have file
212:33 - although if I click on it we just see
212:35 - something empty that is doing some weird
212:38 - stuff
212:39 - there are two reasons why this is
212:41 - happening the more important one is that
212:43 - this file menu doesn't have any entries
212:45 - right now to give it some we have a
212:49 - couple of different options the one you
212:51 - are going to use the most is the method
212:53 - add command
212:56 - this one like at Cascade has a label
213:00 - let me call this one new and then we
213:04 - have a command
213:06 - this one could be any function in my
213:09 - case I'm going to set a Lambda function
213:11 - that is going to print
213:15 - new file
213:17 - like so and now if I run this again I
213:20 - can click on file and we have a new
213:23 - entry if I click on that we have a new
213:26 - file printout that's pretty good
213:28 - although if I click again on file you
213:30 - can see we have this separator thing if
213:32 - I click on that we are creating another
213:36 - window that is kind of weird although
213:39 - the menu still works but this isn't the
213:41 - desired Behavior
213:43 - to fix that when we are creating the
213:45 - file menu we have to add one more
213:48 - argument and that is called tear off
213:51 - by default this one is true and that
213:53 - means you can tear away the menu and
213:55 - have it as a separate window I do not
213:58 - want this Behavior so I'm going to set
213:59 - this to false
214:01 - running this again now inside a file we
214:04 - only have the menu entry this is looking
214:06 - like a proper menu
214:08 - and let's go through the entire thing
214:10 - again just to make sure all of this
214:12 - makes sense
214:13 - we have the entire main window up here
214:15 - that is the entire window that one
214:18 - should be fairly obvious at this point
214:20 - inside of that thing we have a menu this
214:24 - is the entire menu bar up here
214:27 - for that you need to menu widget itself
214:30 - and on top of that you have to run
214:32 - window configure and set the menu as the
214:35 - menu
214:36 - inside of that we have right now one
214:39 - menu or one sub menu that is called file
214:42 - menu this is the file we have created
214:44 - here
214:45 - for that we need another TK menu and we
214:48 - have to get the original menu and add
214:50 - Cascade
214:51 - then inside of this file menu let me
214:54 - clean this up a bit inside of this file
214:56 - menu we can add different entries with
214:58 - for example add command there are a
215:00 - couple more entries but at command is
215:02 - the one you probably want to use
215:04 - if you got this far the worst part about
215:07 - understanding menus is basically over
215:10 - because now we could run this at command
215:13 - a second time
215:14 - besides new let's say I also want to
215:16 - have open
215:18 - which is going to print open file
215:22 - let's run all of this again inside of
215:25 - the file menu I now have new and open
215:27 - let's still both do a command oh this is
215:30 - working quite well
215:32 - and I guess besides at command there are
215:35 - a couple more methods you could use a
215:37 - really simple one is called add
215:39 - separator
215:41 - don't forget to call it if you run this
215:43 - one we now have a separator between the
215:46 - menus this one doesn't really do
215:47 - anything but it's a nice way to separate
215:50 - the menu entries
215:52 - to get all of the entries this website
215:54 - here is pretty good because if you
215:56 - scroll down you have a couple of basic
215:59 - options and below that you have all of
216:01 - the methods you could use for example we
216:04 - have used add command and we have used
216:06 - ad separator
216:08 - there's also a radio button a check
216:11 - button those are quite obvious I think
216:13 - and you can also delete and do quite a
216:16 - few more things but I want to keep it
216:17 - simple
216:19 - if you want to go into more depth check
216:21 - this out in your own time
216:22 - I want to create another Sub menu
216:27 - this I want to store in a separate
216:29 - variable let me call it the help menu
216:32 - this again we create with TK menu once
216:36 - again menu is going to be the parent and
216:38 - tear off I want to set to false
216:41 - like the one we have created up here
216:43 - this submenu I now have to attach to the
216:46 - main menu
216:47 - which means I want to get my main menu
216:49 - then I want to add Cascade
216:52 - the label here is going to be help
216:57 - and then the menu is going to be the
217:00 - help menu
217:02 - I can run this now and there we have a
217:04 - second menu item this one if I click on
217:07 - it doesn't do anything because there are
217:08 - no entries but file still works just as
217:11 - before
217:12 - this one I want to have one item let's
217:15 - copy the add command from the file menu
217:18 - except this one should be for the help
217:21 - menu
217:22 - in here for example the label could be
217:24 - help entry and this one just prints help
217:29 - it doesn't really matter what it is
217:31 - and this we have already seen a couple
217:33 - of times so if I run this we now have a
217:35 - second menu besides file menu this one
217:38 - is pretty straightforward
217:40 - let's do something a bit more
217:42 - interesting for this help menu I now
217:45 - want to add a check button
217:49 - this is going to work basically like the
217:51 - normal check button that you have seen
217:53 - in the buttons a couple of sections ago
217:55 - although first of all we need a label
217:59 - and this label I just called check
218:01 - since we're working with a check button
218:03 - in here we can set an on value that I
218:06 - want to set to on and we have an off
218:08 - value that I want to set to off these
218:12 - two values we have to store somewhere
218:14 - for that I want to use a tkinter
218:16 - variable
218:18 - I'm going to call this one help check
218:20 - string value
218:23 - the value here is going to be TK and a
218:26 - string VAR
218:27 - this variable I now want to set for this
218:30 - check button so variable is going to be
218:33 - the help check string
218:35 - that should be all we need let me run
218:37 - this and if I click on help now we have
218:40 - to check entry I can click on it and now
218:43 - we have this entry checked
218:45 - I can click on it again and it
218:46 - disappears cool
218:48 - once we have that we can always get the
218:51 - value from inside of this tkinder
218:53 - variable for example inside of this add
218:55 - command instead of printing help I want
218:58 - to get help check string and get the
219:00 - value
219:01 - let's try all of this
219:03 - inside of help I still have the check
219:05 - entry I can click on it and it still
219:07 - works and now if I click on help entry
219:10 - we get either on or if I unselect the
219:13 - check I get off so this is working
219:16 - pretty good
219:18 - with that we have created some basic
219:20 - menus and once again the main difficulty
219:23 - here is the nesting that we always Place
219:25 - one menu inside of another menu but they
219:28 - are the same widget
219:30 - besides that we can also create a menu
219:33 - button
219:35 - this is a separate widget that is called
219:37 - ttk and menu button
219:40 - this as always is going to need a master
219:43 - in my case this is going to be the
219:45 - window and we need a text like any other
219:47 - button
219:48 - I'm going to call this one the menu
219:50 - button
219:52 - on top of that this needs to be stored
219:54 - in a variable menu button is a good name
219:56 - here I think for this button we need the
220:00 - normal pack method because this one
220:02 - functions well like a button menu button
220:05 - and pack
220:06 - and now we have a menu button although
220:10 - if I click on it nothing happens right
220:11 - now because we don't have any entries
220:14 - that being said once you get this far
220:17 - you can just add TK menus to it
220:21 - let me create one TK menu
220:24 - [Music]
220:26 - in here the parent is going to be the
220:28 - menu button
220:29 - and tear off is also going to be false
220:33 - this I want to store let me call it
220:35 - button Sub menu
220:38 - once we have that we basically want to
220:41 - do what we have done here we want to set
220:43 - the sub menu to the parent menu
220:47 - via configure
220:50 - which means I want to get my menu button
220:53 - I want to run configure and here I want
220:56 - to set the menu to my button Sub menu
221:00 - let's try this one now and now if I
221:03 - click on the button
221:04 - we still can't see anything
221:06 - the reason for that now is that this
221:10 - button Sub menu doesn't have any entries
221:13 - although that we can change very easily
221:15 - all we need is the button Sub menu I
221:18 - want to add a command
221:21 - for this we need a label with entry one
221:25 - or whatever you want to add and we have
221:27 - a command that is going to be Lambda in
221:31 - my case that is going to print test one
221:33 - if I now fix the typo and run this this
221:36 - should be working now we have entry one
221:40 - I can click on it and we also get entry
221:43 - one
221:43 - besides that we could also add
221:47 - a check button
221:49 - for this one we can just leave it like
221:52 - so I guess I can call it check one
221:55 - I can run this now and now we have a
221:57 - check button in here that I can click on
222:01 - works like any other menu
222:04 - it's kind of similar compared to the
222:05 - menus you've seen before but not that
222:07 - much
222:08 - the main difference is that now you have
222:11 - a menu button and for this one you have
222:14 - to configure the menu to be the proper
222:16 - menu
222:17 - oh and what I forgot this configure you
222:20 - could simplify a tiny bit this is what
222:22 - we have seen earlier besides this line
222:24 - you could get the menu button in here
222:27 - you could get the menu
222:29 - and the value of this menu could be this
222:32 - button Sub menu the result would be the
222:35 - same if I run it
222:37 - we still have the same outcome
222:39 - choose whichever you like more it's
222:42 - really up to you both are equivalent
222:44 - we are nearly done although I want to do
222:47 - an exercise
222:48 - this exercise I want to place before we
222:51 - are setting the menu to the window I
222:53 - want you guys to add another menu item
222:56 - to the main menu
222:57 - like file menu and help menu you should
223:00 - create another menu the one difficulty
223:03 - for this one is that this new menu
223:05 - you're going to create should have one
223:07 - sub menu
223:09 - a menu inside of the menu you are going
223:12 - to create for that you want to read this
223:15 - website the one I just talked about
223:21 - I want to start by creating an exercise
223:23 - menu this is going to be TK and menu in
223:28 - here that parent is going to be the main
223:30 - menu and tear off I want to set to false
223:34 - just to make sure that we have one entry
223:36 - in here I want to get this exercise menu
223:38 - and add a command
223:41 - for the label I just want to have
223:43 - exercise test one
223:46 - this is actually all we need you don't
223:48 - have to specify a command if you don't
223:50 - want to or don't need to
223:53 - finally to see this menu we have to get
223:57 - the main menu and we have to add Cascade
224:00 - like we have done here and here we need
224:04 - a label this one I called exercise
224:07 - the menu is going to be the exercise
224:11 - menu
224:13 - with that I can run the entire thing and
224:15 - now we have the exercise menu with
224:17 - exercise test one and I can see I have a
224:20 - typo
224:21 - this should be exercise like so
224:24 - with this we have covered the first part
224:27 - of the exercise the next one is a bit
224:29 - more interesting I want to add a sub
224:31 - menu to this Sub menu
224:34 - meaning we have a sub Sub menu
224:37 - this Sub menu I want to store another
224:40 - variable I'm going to call it exercise
224:42 - Sub menu
224:44 - although this one once again is just
224:46 - going to be another TK menu
224:49 - with menu being the parent and tier of
224:52 - being false
224:54 - the way you have to think about it is
224:56 - that this exercise Sub menu we want to
224:59 - add to the exercise menu like we've
225:02 - added the exercise menu to the main menu
225:04 - which we have done with ADD Cascade
225:08 - which means I want to get my exercise
225:11 - menu and add Cascade
225:14 - once again we need a label let's call it
225:17 - more stuff
225:20 - besides that we also need a menu this is
225:23 - going to be the exercise Sub menu
225:26 - now if I run this inside of exercise we
225:30 - have more stuff and this one doesn't do
225:32 - anything right now because it has no
225:34 - entries
225:35 - but that we can change very easily
225:38 - for this exercise Sub menu I want to add
225:41 - a command like I have done for the
225:42 - exercise menu
225:44 - which means I can copy the exercise menu
225:46 - at command and change this to exercise
225:48 - Sub menu
225:52 - with a new label some more stuff
225:56 - now I can run this and if I now click on
225:59 - exercise more stuff we have a sub Sub
226:02 - menu
226:03 - this could then be literally anything
226:05 - once again the nesting here is the
226:08 - complicated bit but all we have really
226:10 - done is we have the main menu all the
226:14 - way on the top this is where everything
226:16 - else goes in inside of this menu we are
226:19 - adding one exercise menu for that we are
226:22 - creating a TK menu widget and we are
226:25 - using add Cascade on the parent menu to
226:28 - create this menu item
226:30 - although this add Cascade we can do on
226:33 - any menu item
226:35 - for example on this exercise menu we
226:37 - have added another Sub menu and I'm
226:42 - fully aware that this can be kind of
226:43 - confusing definitely go through this
226:45 - slowly and make sure you understand
226:46 - every level of nesting although with
226:49 - that we have finished the menus
226:52 - in this part I'm going to talk more
226:54 - about how to change the window
226:56 - so far we only really changed the title
226:59 - and the size of the window but we can do
227:02 - quite a bit more
227:04 - we can for example change the opacity
227:06 - the position the full screen status and
227:08 - the title bar and quite a few more
227:10 - things
227:12 - although all of this is really simple so
227:15 - let's Jump Right In and let's have a
227:16 - look
227:17 - once again I have the basic setup that
227:20 - we have seen multiple times by now I can
227:22 - execute this and this is what we get
227:25 - so far we always change the window title
227:27 - and the window geometry
227:30 - for the window geometry we always
227:32 - specified the width and the height of
227:34 - the window which right now is 600 by
227:37 - 400. let me run the window again
227:40 - 600 by 400 specifies the width and the
227:45 - height of the window although you can
227:47 - extend this a tiny bit
227:50 - inside of this string you can also add
227:53 - the position of the window this you do
227:55 - by adding a plus then you give the left
227:57 - position of the window another plus and
228:00 - then the top position
228:02 - if you add numbers in here you are going
228:04 - to place the window or the top left of
228:06 - the window and then the rest is going to
228:08 - follow for example if I change these
228:10 - numbers to 0 and 0
228:13 - I now have a window starting in the top
228:16 - left
228:16 - if I change the left number to 100 we
228:19 - now have a slight Gap to the left side
228:22 - finally I can change the top number to
228:24 - 200 and now we have even more space to
228:27 - the top
228:28 - you're probably not going to use this
228:31 - very much but in some circumstances it
228:33 - can be really useful
228:35 - what you do want to use much more often
228:37 - however if I run this again by default
228:40 - we always have this feather here or the
228:43 - logo of tkinter this you can also change
228:48 - although for that you need a specific
228:50 - kind of file it's called an Ico or Ico
228:53 - file inside of the file folder here are
228:57 - all of the Python files I have used so
228:59 - far besides that we also have a file
229:02 - called Python and this if I show you the
229:05 - properties
229:06 - is an Ico file this is what you need for
229:09 - the title bar
229:11 - once you have that all you have to do is
229:14 - get the window and I can bit map and now
229:18 - you need to file name in my case this is
229:20 - python dot Ico
229:23 - now I can run this again and now on the
229:25 - top left we have the python symbol
229:27 - instead of the tkinter symbol if you
229:30 - look online you can find lots of
229:31 - websites that convert a PNG or JPEG file
229:35 - to an Ico file it's completely free and
229:37 - very easy to do
229:39 - and it does make quite a difference in
229:41 - terms of how your app is going to look
229:42 - so I would definitely recommend
229:44 - designing your own logo although well it
229:46 - can be something quite complex
229:49 - besides that we have a few more let me
229:53 - call it window attributes
229:55 - for this one for example we could set a
229:58 - window Min size
230:01 - for this we need a weft and a height a
230:05 - tkinter can never be smaller than these
230:07 - two numbers
230:08 - for the width let's say I want to have a
230:10 - minimum number of 200 or the height I
230:12 - want to have a minimum height of 100. I
230:15 - can now run this thing again and if I
230:18 - scale the window
230:19 - this is the smallest I can scale it too
230:21 - it never goes smaller than that
230:25 - we also have a maximum size let's say
230:28 - for this one I want to have 800 by 700.
230:33 - I can run this again and now
230:36 - I can only scale the window to this size
230:39 - here let me move it a bit further to the
230:41 - top like so this is the maximum I can
230:43 - scale it to
230:46 - there's one more entry that's useful
230:48 - here and that is called window and
230:50 - resizer Bill
230:52 - for this one you can specify if the app
230:54 - can be resized either in the X Dimension
230:57 - or in the Y Dimension or horizontally or
230:59 - vertically for example if I set X to
231:02 - true and Y to false we are only able to
231:06 - scale the app in the horizontal
231:08 - Dimension let's try this one
231:10 - and now if I scale the app left and
231:13 - right this one works as before however I
231:16 - cannot scale it up or down this one
231:18 - simply doesn't work it's very hard to
231:20 - see but well try it yourself
231:22 - most of the time you are not going to
231:24 - use this or the max size they are quite
231:27 - rare however the minimum size I would
231:30 - always set because if you don't set it
231:32 - the user could minimize your app to size
231:34 - of 0 and 0 which would look very strange
231:37 - besides that you can also get screen
231:41 - attributes so this green new app is
231:43 - running on the two important aspects you
231:46 - want to know here are the width and the
231:48 - height of the screen your app is working
231:50 - in this you would get with window and W
231:53 - info
231:55 - underscore
231:56 - screen with don't forget to call it this
232:00 - is a method this method is going to
232:02 - return the wift of your screen not the
232:06 - app the actual display
232:08 - this I want to print and if I run this I
232:11 - get 1536 this is the width of my monitor
232:16 - I can duplicate this the same thing is
232:18 - going to work with the height
232:20 - linear can run this now and the height
232:22 - of my monitor is 864 pixels
232:25 - this information very often can be
232:27 - surprisingly useful for example the
232:30 - exercise we are going to do in a couple
232:31 - of minutes is going to be about starting
232:33 - the window in the center of the screen
232:36 - and if you know geometry and this
232:39 - information this is quite easy to do
232:42 - but let's first do some other things
232:45 - in here I want to set some window
232:48 - attributes and I realized the naming
232:52 - here is not ideal this is actual window
232:54 - attributes whereas this one was rather
232:57 - window
232:58 - let me rename this to window sizes
233:00 - that's much more appropriate
233:02 - the reason for that is that a window has
233:05 - actual attributes
233:07 - for example in here we could set the
233:09 - alpha value
233:11 - for this one you can set one additional
233:14 - value and this value has to be between 0
233:17 - and 1. with 1 being for transparency and
233:21 - 0 being the app being completely
233:23 - invisible
233:25 - let me set this to 0.5 run this again
233:28 - and now we can see we have a transparent
233:30 - window
233:31 - works pretty well
233:33 - if I set this to a 1 we have the proper
233:37 - window and if I set this to 0.1 we get a
233:41 - barely visible app
233:43 - besides that we can also set top most
233:48 - if you set this value to true you can
233:50 - run the entire thing again and let me
233:53 - change the transparency back to one if I
233:55 - run this again you can't see any
233:57 - difference the app still works just as
233:59 - before however if I now bring in the
234:01 - folder you have seen a second ago
234:03 - this folder is always behind the window
234:05 - even if I have it selected it's always
234:08 - behind the window we just created and
234:10 - this happens because of this topmost
234:13 - being true it sets the window we
234:15 - currently have on top of any other
234:16 - window
234:18 - besides that there are a few more
234:20 - attributes but those can cause problems
234:22 - for that I want to add a security event
234:27 - all I really want to do is add window
234:29 - dot bind and I want to check if I am
234:33 - pressing the escape button
234:36 - if I am doing that I want to run a
234:38 - Lambda function that quits the window
234:41 - which I can do with window.quit
234:43 - so if I run this now I have a window
234:45 - open if I click on escape the window
234:48 - disappears
234:49 - the reason why I want that is because
234:51 - some of the attributes can make it
234:53 - impossible to close the window
234:55 - one example for that could be window
234:59 - attributes
235:01 - and in here
235:03 - one option you can use and they always
235:05 - start with a dash I don't exactly know
235:07 - why but you just have to add it
235:10 - you could disable the entire window
235:13 - for this you have a Boolean value that
235:15 - is either true or false
235:17 - the default here is false but if you set
235:19 - it to true the window is going to be
235:21 - disabled let me run it
235:23 - and now no matter where I click on the
235:26 - window nothing is going to happen
235:29 - the only way I can close the window is
235:31 - by pressing on Escape because of this
235:33 - line here but the window itself doesn't
235:35 - do anything
235:37 - finally another thing that you can do is
235:39 - to set the window to full screen if you
235:43 - have set this one and you start the app
235:45 - it is going to start in the full screen
235:47 - mode although if I run this right now
235:49 - we're going to get an error there we go
235:51 - the reason being
235:53 - that
235:55 - this part here we cannot set the full
235:58 - screen because we have a Max width and a
236:00 - Max height and this is smaller than my
236:02 - monitor
236:03 - the problem is this one here
236:05 - let me disable it and on top of that I
236:08 - also want to disable the disabling of
236:12 - the window and also I want to disable
236:14 - topmost because we don't need them right
236:17 - now and I want to focus on the full
236:19 - screen now if I run this note here in
236:22 - the top right we don't have any menu
236:24 - items or title bar so we can only close
236:26 - the window if we press on Escape
236:29 - and this we can do because of this line
236:31 - if we didn't have it we would have to
236:33 - use the task manager to close it which
236:35 - is kind of annoying but with that we
236:38 - have the basic window attributes there's
236:40 - one more thing that I do want to cover
236:42 - and that is
236:44 - let's call it the title bar
236:47 - also I want to comment out the full
236:49 - screen so we can see what's going on
236:51 - like so now for the naming what I want
236:54 - to do now is this thing here is I think
236:58 - called a title bar this you can also
237:01 - hide
237:02 - that you do with window and over write
237:07 - read Direct
237:09 - I have no idea why it's called like that
237:12 - but if you said true in here you don't
237:15 - see any title bar anymore
237:18 - which makes it kind of annoying to close
237:20 - the app so we have to close it via the
237:22 - event but this is super useful to create
237:25 - nicer looking apps because if you don't
237:27 - have the title bar you have much more
237:29 - options in terms of styling
237:31 - the problem is if you have something
237:33 - like this you also are not able to
237:35 - resize the app which is well a problem
237:39 - for that tkinder has another widget that
237:42 - you can use it is called ttk and size
237:45 - grip
237:47 - for this one I want to set the master to
237:49 - the window and I want to store it inside
237:51 - of a variable that I call grip
237:54 - this grip we could for example pack now
237:58 - but this is not what you would want to
237:59 - do but if I do it we have this kind of
238:02 - app here and if I use it I can drag the
238:05 - window again
238:07 - although right now I can only move it
238:09 - left or right or scaled in the
238:11 - horizontal axis because of this
238:13 - resizable if I comment it out run this
238:15 - again now I can properly resize the app
238:19 - and the position here is very awkward
238:21 - for this thing but we could change that
238:26 - although for that we need a different
238:28 - kind of layout method we're going to
238:30 - cover those in much more detail in the
238:32 - next major section but what you would
238:34 - use for this one is called place in here
238:37 - you can specify a relative X position
238:39 - which is going to be 1.0 and a relative
238:42 - y position which is also going to be 1.0
238:47 - finally you want to set an anchor and
238:50 - this is going to be south east or SE in
238:52 - short
238:53 - if I run this now we have this size bar
238:57 - in the bottom right and this is much
238:59 - better now we can resize this window
239:01 - the way let me place it like this the
239:06 - way place is going to work is we have
239:09 - the entire window and we start at
239:12 - position
239:12 - 0.0 and all the way on the right we have
239:16 - 1.0 and any point in the middle here we
239:19 - can choose from
239:20 - this works either on the horizontal axis
239:23 - or on the vertical axis and those you
239:25 - get with relative X or relative y
239:29 - if we get 1.0 for both we end up in the
239:32 - point in the bottom right
239:34 - and this is where we are placing this
239:37 - size grip
239:39 - the anchor is going to set which point
239:42 - you are placing the way you want to
239:43 - think about it is that there's a
239:45 - rectangle around this widget and by
239:48 - default we are placing the top left or
239:52 - the North West Point
239:54 - we however want to set the south east
239:56 - point so the bottom right point should
240:00 - be in the bottom right corner
240:04 - I'm not going to go into too much detail
240:05 - we're going to cover all of this in much
240:07 - more detail in just a bit but this is
240:10 - all you need to create a window without
240:12 - a title bar which can be super powerful
240:16 - with this we have all the methods for a
240:17 - basic window and this gives you a ton of
240:20 - control over how you want to style your
240:22 - app or it is going to give you much more
240:24 - control later on in terms of what you
240:26 - want to do
240:27 - all right with that I want to do an
240:29 - exercise and the exercise I am going to
240:32 - place right here below
240:34 - the window creation because what I want
240:37 - you guys to do is to start the window in
240:39 - the middle of the screen
240:42 - so pause the video now and see if you
240:44 - can figure this one out
240:47 - first of all I want to declare some
240:50 - variables I want to get my window with
240:53 - and this could be any number I'm going
240:55 - to go with 1400.
240:58 - this by the way is going to overwrite
241:00 - this 600 here as a matter of fact I want
241:03 - to comment out this geometry here
241:04 - entirely
241:06 - besides that I want to have a window
241:08 - height
241:10 - this I want to set to let's go with 600.
241:14 - besides that I need to know my display
241:17 - width and my display height both of
241:21 - those I am getting from this down here
241:23 - so I can just copy them
241:25 - I want to get my window info
241:29 - screen with and the window info screen
241:33 - height
241:34 - that is all the information we are going
241:37 - to need once we have that
241:39 - we can declare a variable for the left
241:41 - point and for the top point of our
241:44 - window
241:46 - and the way you want to think about it
241:48 - this one here is going to be the entire
241:51 - window we are working with this one has
241:54 - this display width and this display
241:55 - height
241:57 - inside of this display we want to add
241:59 - our app right in the middle the problem
242:03 - is when we are placing this window we
242:05 - are placing this top left point and for
242:08 - this top left point we have to figure
242:09 - out the left and the top position
242:12 - for that first of all I want to get the
242:15 - center of my display roughly this point
242:17 - here this I get by dividing the window
242:19 - width by 2 and the window height by 2.
242:23 - that way I get exactly to this point
242:26 - once I have that point I can simply
242:28 - subtract half my window width and half
242:30 - my window height and then I get to this
242:33 - top left point
242:34 - let's start with the left side
242:36 - I want to get my display with and divide
242:39 - it by two
242:41 - from that I want to subtract my window
242:45 - with and also divide this by two
242:48 - that is all we need the same thing for
242:50 - the top except for this one I want to
242:52 - get my display height divided by 2 and
242:55 - subtract my window height also divided
242:59 - by two
243:01 - once we have all of that I can actually
243:03 - set window and the geometry
243:07 - for this one I now want to create an F
243:09 - string
243:11 - in here we need the with x the height
243:17 - the width is going to be the window with
243:19 - and the height is going to be the window
243:23 - height
243:24 - after that we have to add a plus and now
243:28 - we need the left point and another plus
243:31 - with the top point
243:34 - those are the two points we have just
243:36 - created here and here
243:39 - which means now if I run all of this
243:42 - we are getting an error the error you
243:45 - can see down here we have a bad geometry
243:47 - specifier but the numbers look kind of
243:51 - okay
243:52 - the problem here is that tkinter is
243:55 - expecting integers but we got floating
243:57 - Point numbers python always creates a
244:00 - floating Point number whenever you
244:01 - divide two numbers
244:03 - this we can fix quite easily all we need
244:05 - is to wrap all of this inside of an
244:07 - integer function and then we're going to
244:10 - convert the float into an integer so now
244:13 - if I run this there we go we have our
244:15 - app right in the middle of the window
244:18 - and with that we have covered all of the
244:21 - really basic parts you need to know
244:22 - about taking the widgets and the window
244:24 - so for the next major part we can work
244:26 - on the layout layouts are one of the
244:30 - most important part of any GUI framework
244:32 - they can also be one of the most
244:35 - annoying Parts because it's probably
244:37 - going to be a very common thing for you
244:39 - that you want to place a widget in a
244:41 - very specific spot but somehow you just
244:44 - cannot place it there which is a very
244:47 - frustrating thing to work with so let's
244:49 - talk about layouts and what you can do
244:51 - in tkinter
244:53 - there are three major methods that you
244:55 - have to be aware of the most common one
244:58 - is called pack
245:00 - this one takes a window and lets you
245:03 - stack widgets in a certain direction by
245:06 - default you are going from the top to
245:08 - the bottom
245:09 - which means the first widget is all the
245:11 - way on the top in the middle and then
245:13 - you place other widgets below it
245:16 - while you're doing that you can also
245:18 - customize things quite a bit for example
245:20 - you can tell widgets to take up the
245:23 - entire horizontal space or the entire
245:26 - vertical space or both as well that also
245:29 - works
245:29 - besides that you can also stack widgets
245:32 - in different directions for example you
245:34 - can go from left to right right to left
245:37 - or bottom to top
245:39 - other than that pack is fairly simple
245:42 - and well that's kind of all you have to
245:44 - know about it we're going to do a lot of
245:46 - examples later on with this one the next
245:49 - layout method is called grid this one
245:51 - works by creating a grid over the window
245:54 - and this grid you are then using to
245:56 - place widgets in a certain position with
245:58 - a certain size this could for example
246:01 - look like this like this like this and
246:04 - you can also Place widgets on top of
246:06 - each other with an overlap like so
246:09 - this system gives you a ton of
246:11 - flexibility you could for example change
246:13 - the height of each row or the width of
246:16 - each column grid is generally the system
246:20 - you want to use if you want to create
246:21 - really complex layouts again we're going
246:25 - to do a ton of examples later on
246:27 - finally we have the place method this
246:30 - one is kind of the simplest because you
246:32 - just take a window and you place widgets
246:35 - with a certain position
246:37 - you can also change the size and this
246:39 - one is fairly straightforward
246:41 - you always have an X and A Y position
246:43 - and you're using that to place the
246:45 - widget with that we have the three major
246:48 - tools that you are going to use and what
246:51 - is super important that you have to
246:53 - understand is that you can combine these
246:55 - layout methods very easily as a matter
246:58 - of fact this is what you have to do to
247:00 - create any kind of complex layout
247:03 - for that though you do want to be aware
247:05 - of a couple of things the most important
247:08 - part is that you are going to rely very
247:11 - heavily on parenting and frames
247:14 - that way you can combine different
247:16 - layouts and keep them organized
247:18 - basically what you are going to do is
247:21 - you are placing one layout inside of a
247:22 - frame and then you are placing that
247:24 - frame that way you keep everything much
247:27 - more modular and much easier to maintain
247:29 - Let's do an example
247:31 - this is going to be our main window this
247:34 - I want to separate into two parts for
247:37 - that I am going to use pack
247:39 - we have a frame on the left that is a
247:41 - bit more narrow and a larger one on the
247:43 - right inside of the left one I want to
247:46 - use the grid method like so to place a
247:49 - couple of other widgets like so
247:52 - this could for example be a simple menu
247:54 - with a couple of vertical sliders
247:57 - inside of the right frame I want to
247:59 - place a couple of widgets like so
248:02 - I can place them wherever I want since I
248:04 - am using place
248:06 - with that I have created a fairly
248:08 - complex layout that is still quite
248:09 - maintainable because each part Works
248:12 - inside of a frame and it makes it very
248:14 - easy to change things we never create a
248:16 - layout that's too complicated
248:18 - what you can also do is mix different
248:21 - layouts inside of the same frame for
248:23 - example you could place another widget
248:25 - on top of a grid
248:28 - that way you can basically create any
248:30 - kind of layout
248:32 - so with that we have the basics that you
248:35 - need and let's do a couple of examples
248:38 - although I really want to emphasize for
248:40 - this part I only want to have a couple
248:42 - of very basic examples over the next
248:45 - couple of videos we are going to expand
248:47 - on all of this quite a lot
248:50 - as always we have a super basic window
248:53 - if I run all of this we have a simple
248:55 - window it doesn't do anything right now
248:58 - inside of this one I want to create two
249:01 - widgets let me call it widgets I want to
249:04 - have label one and I want to have label
249:07 - two I'm creating both with ttk label the
249:11 - parent or the master is going to be the
249:13 - window the text is going to be
249:16 - let's say label and this could be label
249:19 - 1 or label 2.
249:21 - on top of that there's one more thing
249:23 - that I do want to do when we are
249:25 - creating the label we can style this
249:27 - very easily by giving it a background
249:30 - for this we can just choose plain name
249:32 - colors like red
249:34 - or besides that we can also use blue
249:39 - that makes it much easier to see what's
249:40 - going on
249:42 - these widgets I now want to place
249:44 - somewhere on the window and for that we
249:46 - have the different layout methods the
249:48 - easiest one is pack
249:50 - this one we always use by getting a
249:53 - widget let's say label one and packing
249:55 - it
249:57 - in the simpler sense you don't need any
249:59 - arguments and I can just pack label 1
250:02 - and label 2 if I run all of this we have
250:04 - label 1 and label 2.
250:06 - although in here you can specify a
250:09 - couple of different things
250:11 - for example you could specify the site
250:13 - one could be left and this always has to
250:16 - be a string or decide could be right
250:20 - if I run this now we have the label on
250:22 - the left and on the right still in the
250:24 - middle though
250:26 - we could also use bottom here
250:29 - also works just fine
250:32 - and if we have the left side for both
250:34 - widgets we are stacking them on top or
250:38 - to the right of each other again
250:41 - besides that you can also tell a widget
250:43 - to expand and this is either true or
250:47 - false by default it is false if I set it
250:50 - to true however the widget is going to
250:52 - take up the entire available space
250:56 - which means in our case the entire
250:58 - available space on the x-axis is this
251:01 - space here although we have Label 2
251:03 - which takes up this vertical space here
251:07 - which means the entire space to which it
251:09 - can take up is this width and this
251:13 - height
251:14 - to make this even more visible we can
251:16 - use the fill argument
251:19 - for this one we can either use x y or
251:22 - both and this one tells the widget if it
251:25 - is going to fill the entire available
251:27 - space let me run this actually then you
251:29 - see what I mean there we go now label
251:32 - one is going to fill the entire
251:34 - available space
251:36 - whereas if I only set this to X we only
251:39 - filling the horizontal space if I set
251:41 - this to Y we are only filling the
251:43 - vertical space
251:44 - you can do that with the other widget as
251:47 - well if I expand this or I set expand to
251:51 - true now we are splitting the entire
251:53 - window by two
251:55 - which means tick enter is quite smart
251:57 - about it if you have two widgets that
251:59 - are expanding they are intelligently
252:01 - separating the space that is available
252:05 - and let me set this to fill both
252:09 - and then we get something like this this
252:11 - is one way to place widgets
252:13 - besides that we have the grid method
252:17 - what a grid we have to start with some
252:20 - basic setup we have to get the window
252:22 - and then we need column configure and we
252:26 - need
252:27 - I think you can already see where this
252:29 - is going we need row configure
252:32 - or this one we are determining first of
252:34 - all the index of the row and then we
252:37 - need a weight
252:38 - let's go with one for now with this we
252:42 - have created one column
252:44 - I can create a second one by duplicating
252:46 - this line and setting this to a one
252:49 - and let me add a third one with the
252:51 - index two and to wait for this one could
252:54 - be let's say two with that we have three
252:57 - different columns although the final
252:59 - column is twice as wide as the other
253:01 - columns so if I draw the entire thing
253:05 - we have one column here that has a width
253:08 - of one we get a second column also with
253:11 - the width of one and then we have a
253:13 - final column and this is as wide as the
253:15 - other two columns combined
253:17 - the same thing we can do for the row in
253:19 - here I want to have a first row of the
253:21 - index 0 and a weight could also be one
253:25 - this information we can now use to get
253:28 - our label let me use label one and use
253:32 - the grid method in here we have to
253:34 - specify a row let's start with zero and
253:37 - a column
253:39 - this one I can set to 1.
253:42 - if I run this now we have the label in
253:45 - some position it's kind of hard to tell
253:46 - what's going on
253:48 - although if I draw on this we have
253:49 - roughly one column here one column here
253:52 - and then we have the wider column here
253:54 - with the width of two
253:56 - the reason why this is so hard to see
253:58 - right now is because the label only
254:00 - takes up the minimal amount of space so
254:02 - the space it needs to display the text
254:05 - but this we can change as well and the
254:08 - argument we need here is called sticky
254:11 - this one tells it to which border the
254:13 - widget is going to stick and this one
254:16 - needs Compass directions
254:18 - for example I could place it here just
254:21 - North that way the widget is always
254:23 - going to stick to the top part of the
254:25 - cell
254:25 - I can also add another Direction solve
254:28 - that's why it sticks to the North and
254:30 - the South and if I add all of the
254:32 - directions then it's going to stick to
254:34 - all four sides
254:36 - and now you should see a bit better
254:37 - what's going on we have column 0 column
254:40 - 1 and then column two with column 2
254:43 - being twice as wide as column one and
254:45 - two
254:47 - if I add Label 2 in here this is going
254:49 - to be even more visible for this one I
254:52 - still want row 0 but now I want column 0
254:55 - as well
254:57 - now I can run this one again and there
254:59 - we go now we have label one and label 2
255:01 - and an empty column
255:03 - this I can make even more complex by
255:05 - adding another row and this one is going
255:07 - to be Row one
255:10 - if I run this now we can see we have
255:12 - split the entire thing in half
255:15 - what I can also do is Place Label 2
255:20 - and make it take up this entire space
255:24 - for that I have to tell it to occupy
255:27 - this column here and this column here
255:30 - this I do
255:32 - with the column span method although
255:34 - first of all we have to change row to
255:36 - one column to one
255:38 - and then we need column span
255:42 - I want to tell the widget to span two
255:44 - columns and everyone is now we can see
255:47 - we have level 2 occupying two columns
255:52 - once again I will go into much more
255:53 - detail later on but if you understand
255:55 - this system you understand ninety
255:57 - percent of it it doesn't get that much
255:59 - more complicated
256:01 - the final layout method we have is
256:04 - called place
256:06 - but this one again I want to have one
256:08 - widget and I want to place it
256:10 - although this should be a Dodge
256:13 - we need an X position and we need a y
256:16 - position
256:19 - for Simplicity let's start with X being
256:21 - 0
256:22 - and Y being 0 as well
256:26 - if I place this now you can see we have
256:28 - label one in the top left
256:31 - what you have to understand about this
256:32 - one is that when we are placing the
256:34 - widget the actual position we are
256:36 - placing is the top left this position
256:39 - here
256:40 - with the entire window being a
256:42 - coordinate system that goes like so and
256:45 - so
256:46 - the one thing that can be kind of
256:47 - confusing here is that if you want to go
256:49 - downwards you have to increase y the
256:53 - higher this number is the further down
256:55 - we go
256:56 - in computers basically any kind of
256:59 - layout always works like that if you
257:01 - only know high school geometry this can
257:03 - be kind of confusing but you get used to
257:05 - it quite fast if you do any kind of game
257:07 - development they use the same system
257:10 - although X is a bit easier if you want
257:12 - to go further right you have to increase
257:14 - X this one should be quite
257:16 - straightforward
257:17 - let's say I want to say x to 100 if I
257:21 - run this now this distance here is 100
257:24 - pixels
257:26 - the same thing I can do for y if I set
257:29 - this to 200
257:31 - we have 200 pixels from the top
257:34 - we know in our case the window has a
257:36 - size of 600 by 400 which means if I set
257:39 - the Y position to something like 380 we
257:43 - should have label one almost at the
257:45 - bottom
257:46 - and there we go this looks pretty good
257:49 - you can actually also specify a few more
257:51 - things in here you have the whiffed I
257:54 - could for example set this to 200 and
257:57 - you have the height
257:58 - this I could set to let's say 100 and
258:02 - now for renders
258:03 - we can well only see part of the widget
258:06 - that's because it is so far down
258:10 - if I set this to 200
258:13 - now this is more visible
258:15 - we now have a widget that is 100 pixels
258:17 - from the left
258:19 - this number here
258:20 - it is 200 pixels from the top
258:23 - that is this number here
258:25 - and it has a width of 200 and a height
258:30 - of 100.
258:33 - with that you can place a widget
258:34 - basically wherever you want and all of
258:36 - these numbers are absolute so we always
258:39 - have pixel positions
258:41 - you can however if I am placing Label 2
258:44 - with the place method again use relative
258:47 - numbers for this one you would use
258:50 - relative X and relative y
258:53 - what you have to understand about this
258:55 - one is that now we don't have pixel
258:57 - positions instead what we are doing for
258:59 - this one is this one here is the entire
259:02 - window and we are declaring that the top
259:05 - left point is position 0 and 0 for x and
259:09 - 0 and 0 for y
259:11 - the bottom right position this one here
259:14 - is going to be
259:17 - 1.04 X and 1.0 for y
259:22 - which means if we have relative x 0 and
259:25 - relative y being 0 as well we are going
259:28 - to be in the top left position
259:31 - this point here
259:33 - let's try this one
259:35 - let's try and there we go Label 2 is in
259:38 - the top left position
259:41 - if I change this to 0.5
259:44 - and 0.5
259:47 - now label 2 is roughly in the middle or
259:51 - to be more specific we are placing a top
259:53 - left point this one is right in the
259:55 - middle of the window
259:58 - I can actually demonstrate this by
260:00 - reducing the size of this thing they can
260:02 - see
260:02 - this Label 2 is always in the middle
260:04 - even if we change the size of the window
260:06 - this however doesn't apply to label one
260:09 - because for this one we only have pixel
260:11 - positions generally when you're using
260:14 - place you want to use relative positions
260:17 - you can also set the relative with
260:20 - let's say if this one is one now the
260:23 - widget is taking up the entire space
260:25 - like so
260:27 - although keep in mind here we are
260:29 - cutting off the widget a tiny bit
260:33 - this one here is the entire width of the
260:36 - window and widget one is going to have
260:38 - the entire width as well however we
260:41 - cannot see this part here because the
260:43 - widget is starting on this position so
260:45 - some bits are cut off
260:47 - to change that we would have to change
260:49 - what is called the anchor this is the
260:51 - point you're actually placing
260:54 - if this one here is the widget we are
260:57 - always placing this point
261:00 - and then the rest of the widget is going
261:02 - to follow by default we always place the
261:05 - North West Point
261:08 - but we could also place the South West
261:11 - Point or the South East Point
261:16 - North East Point besides that we could
261:19 - also place the center
261:22 - let's drive this one if I place in here
261:25 - this has to be a string I place the
261:28 - center
261:29 - now we are placing the center of the
261:30 - widget and we are filling the entire
261:33 - window width we could also change this
261:36 - to South East and there we go now we are
261:39 - placing only the right point which means
261:41 - if I move this a bit to the side
261:43 - the point we are placing is the south
261:45 - east meaning this point here is right in
261:48 - the middle of the window and then the
261:50 - entire weft is going to be something
261:52 - like this which means once again we are
261:54 - cutting off some parts you can play
261:56 - around with this a lot and I would
261:58 - recommend you to do so but this is all
262:01 - you have to know for the basics
262:03 - and well these are the three major ways
262:05 - to place elements inside of a window
262:07 - over the next couple of videos I'm going
262:09 - to go into a lot of detail for this
262:12 - video I'm not going to add an exercise
262:13 - instead I would recommend you to go over
262:16 - all of this and make sure you at least
262:18 - have a very basic understanding of how
262:20 - this is going to work ideally create a
262:23 - few more labels and just place them
262:24 - wherever and see if you can work with
262:27 - all of them at least reasonably okay
262:29 - in this video we are going to cover the
262:32 - pack layout method in tkinter the
262:34 - project we are going to make by the end
262:36 - of this video is going to look something
262:37 - like this it's nothing too complicated
262:40 - but definitely enough to understand the
262:42 - basics of this layout method
262:44 - let's talk about it in the most basic
262:47 - sense Pac works by stacking widgets in a
262:50 - certain order by default we are stacking
262:52 - widgets from the top to the bottom
262:55 - which means the first widget is all the
262:57 - way on the top and then with widgets
262:59 - always below that
263:01 - you can already tell here we have a
263:03 - couple of ways to customize this for
263:06 - example we can tell the widget to take
263:07 - up all of the horizontal space or all of
263:10 - the vertical space like so
263:13 - to create these kind of effects you have
263:15 - three different arguments that you have
263:17 - to understand the most important one is
263:19 - the site this one determines which side
263:22 - the widget is added to the options here
263:25 - are fairly straightforward we have left
263:27 - we have right we have top and we have
263:31 - bottom
263:32 - with top being the default argument
263:35 - besides that we have expand that is true
263:38 - of false this one determines the
263:40 - vertical or horizontal space in which it
263:43 - can occupy
263:45 - can here is the key word because expand
263:48 - only determines how much space a widget
263:51 - potentially has it doesn't tell you how
263:54 - much space it is actually going to use
263:56 - fundamentally what you have to
263:58 - understand is that in tkinder we have a
264:00 - disconnect between the space in which it
264:02 - can occupy for example this widget for
264:05 - here could theoretically occupy this
264:08 - entire space but the widget itself might
264:12 - only occupy this area here we have to
264:15 - specifically tell the widget to actually
264:17 - occupy all of this additional space here
264:20 - it doesn't do it automatically
264:22 - for that we have one more argument and
264:25 - that is called fill
264:26 - this one determines how much space to
264:29 - which it is actually going to occupy
264:31 - the arguments we can use here are X Y
264:34 - both and none none being the default
264:36 - argument this one tells the widget to be
264:39 - as small as it possibly can however if
264:42 - we specified X and here we would tell
264:44 - the widget to take up all of the
264:46 - horizontal space
264:47 - which would make the widget look
264:49 - something like this
264:52 - if you understand these three arguments
264:54 - you can use Pac really well although
264:57 - there are two more arguments that you do
264:59 - need to understand both of those are for
265:02 - the padding those two are incredibly
265:04 - easy and I'll cover them at the end
265:06 - don't worry too much about them so let's
265:09 - go into a bit more detail
265:11 - for the site again we have left right
265:14 - top and bottom and this determines the
265:16 - direction of the widgets or rather how
265:19 - we are stacking these different widgets
265:20 - the four options we have are top bottom
265:23 - left and right
265:26 - I don't think I have to explain all of
265:28 - this too much it should be fairly
265:30 - straightforward
265:31 - let's get started by playing around with
265:33 - this argument
265:34 - here I have some basic tkin Tech code I
265:38 - am importing tkinter I have a basic
265:41 - window with a title and a geometry and
265:43 - I'm running the main Loop
265:45 - that way if I run the entire thing you
265:48 - can see a basic window
265:50 - on top of that I have created a couple
265:52 - of widgets most of them are labeled with
265:56 - some basic text and a background that
265:59 - way it's easy to see what's going on
266:01 - finally I have a button that doesn't do
266:04 - anything
266:05 - you cannot see any of these widgets
266:07 - because I am not placing them on the
266:09 - main window but this I want to do by
266:11 - adding another section that I'm going to
266:13 - call layout
266:14 - for this one I want to place all of the
266:17 - labels using the pack method
266:19 - I have label 1 Label 2 Label 3 and the
266:25 - button
266:26 - if I run this now you can see we have
266:29 - the basic pack order
266:31 - we start all the way from the top and we
266:34 - are going downwards with each widget
266:37 - taking up the minimum amount of space
266:41 - in this packing order we can customize
266:43 - let me select all four of them and in
266:46 - here I want to specify a site
266:49 - by default we have top if I run this one
266:52 - we cannot see any difference
266:54 - however if I change this to let's say
266:57 - left now the widgets are being placed
266:59 - from the left and we're going further to
267:01 - the right with the first widget being
267:03 - placed all the way on the left the next
267:05 - widget is to the right of it and then so
267:08 - on
267:09 - the same is going to work
267:11 - with right
267:15 - and finally we also have autumn
267:19 - there we go this should be quite
267:20 - straightforward
267:22 - you can also combine different sides
267:24 - meaning not all of those have to have
267:26 - the same side for example the first
267:29 - label could have decide right and if I
267:32 - do that we get some slightly weird
267:34 - outcome I'll talk about this later for
267:36 - now just ignore it
267:39 - with that we have the basics of the site
267:41 - next up we have the expand method this
267:45 - can be either true or false this one
267:47 - determines how much space which it can
267:50 - occupy
267:51 - again can is the really important word
267:54 - here also the widget only expands in One
267:57 - Direction
267:59 - let's talk about this one
268:00 - once again we have a window and we are
268:03 - placing One widget and then we are
268:05 - placing the second widget this is the
268:07 - one we have seen already what you might
268:09 - assume here is that expand expands this
268:12 - widget all the way left and right but
268:16 - that is not the case because the width
268:18 - of a widget is not set by expand if the
268:21 - side is top or bottom
268:22 - instead we would only set the height of
268:26 - the fourth widget
268:27 - or in other words height is set by
268:29 - expand but only vertically in this
268:31 - example
268:32 - and I'm pretty sure this is kind of
268:34 - confusing and for that I have made a
268:36 - couple more slides the most important
268:38 - thing you have to understand in tkinter
268:40 - about layouts is that there are two
268:42 - kinds of space
268:44 - this space in which it can occupy and
268:46 - the space which it will occupy
268:49 - by default in which it will only be as
268:52 - big as the content it needs to cover for
268:55 - example if we have a label the label
268:57 - widget is only as big as the text it
269:00 - needs to display but that being said
269:02 - even by default the widget can occupy
269:05 - much more space than that
269:09 - for example here we have another window
269:11 - and we have a couple of widgets inside
269:15 - all of these widgets will only occupy
269:18 - the space that they need to display the
269:19 - content for example if all of these are
269:22 - labeleds we would have a space to cover
269:25 - the space of some text this is the space
269:29 - the widget is going to occupy
269:31 - this is actually what we have already
269:33 - seen
269:34 - if we return to the app and let me
269:37 - change the bottom here to Top Again
269:40 - like so
269:42 - when we place all of these widgets by
269:44 - default they are only taking up a tiny
269:47 - amount of space you can see this via the
269:49 - background
269:50 - the widget essentially is always only as
269:52 - big as the text the exception here is
269:54 - the button this one is a tiny bit wider
269:56 - but not that much
269:59 - so by default this is the size we get
270:01 - for every single widget
270:03 - however all of these widgets can occupy
270:06 - more space the amount of space that can
270:09 - occupy determines on the side right now
270:12 - our site is top which means we are
270:15 - placing the widgets in a downward
270:16 - Direction so top is our current site
270:20 - with that the witches could occupy the
270:23 - entire width of the container which in
270:25 - this case right now is the window the
270:28 - same is going to be the case for the
270:29 - bottom side in either case widgets are
270:32 - going to occupy the entire width of the
270:34 - container and expanse is going to tell
270:37 - them to take up all of the available
270:39 - space in that direction for example if
270:42 - we add one more widget here
270:44 - and set expand to true for this one then
270:47 - it's going to take up the entire rest of
270:49 - the available space but only in the
270:52 - current direction that we are working in
270:54 - which is this downward Direction
270:57 - meaning the widget is going to take all
270:59 - of the remaining vertical space and on
271:01 - top of that it is also capable of
271:04 - occupying the entire horizontal space
271:07 - and just for completion sake here
271:10 - when the site is top or bottom widgets
271:13 - can be as wide as the entire container
271:15 - and the expand method determines the
271:18 - height of the widget
271:19 - if the site is left or right then the
271:22 - widget can be as high as the container
271:24 - and expand determines the width
271:26 - I hope all of that makes sense this is
271:28 - definitely something we have to play
271:29 - around with here we are back in the code
271:31 - and I want to add the expand method to
271:36 - label one
271:37 - by default expand is simply false if I
271:40 - run it like this we're not going to see
271:42 - any difference
271:43 - however if I said expand to true then
271:47 - the first label is going to occupy
271:49 - basically the entire vertical space we
271:52 - are starting all the way at the top here
271:54 - and we're going all the way to the
271:56 - bottom second here is fairly intelligent
272:00 - it knows if there are other widgets and
272:02 - those need to occupy their space as well
272:05 - but other than that we are occupying the
272:08 - entire height of the window we are
272:10 - telling the first label to occupy as
272:13 - much space as possible and the other
272:15 - widgets take up the minimum amount of
272:17 - space which is exactly the space they
272:19 - need to display the text although that
272:22 - being said as you can see in here all of
272:24 - these widgets still are very small all
272:27 - we are telling them now for example for
272:29 - the first label that this widget can
272:32 - take up all of this space
272:35 - but we are not telling it to actually
272:37 - fill this entire space which means we
272:39 - have a ton of space around the first
272:41 - table but we're not filling that we're
272:43 - going to cover that in just a bit
272:45 - on top of that we can also set multiple
272:48 - widgets to expand being true and tick
272:52 - interp separates the space here
272:53 - intelligently although right now this is
272:56 - kind of hard to see
272:58 - I think a better way to illustrate this
273:00 - is if I set the first and the last
273:02 - widget with expand being true
273:05 - now you can see we have the first widget
273:08 - covering the entire
273:12 - almost the first half
273:14 - and the bottom also gets the same amount
273:16 - of space
273:17 - like so
273:20 - in between we have the other two widgets
273:22 - only covering the minimum amount of
273:24 - space
273:25 - and this is also going to work with the
273:27 - other directions for example if I change
273:29 - top to left
273:31 - then we can see if I expand this a tiny
273:34 - bit we now have the same issue again the
273:37 - two middle widgets only occupied the
273:39 - minimum amount of space whereas the
273:41 - first table takes up as much space as it
273:44 - can
273:45 - same with the button like so this
273:48 - however doesn't feel particularly
273:50 - satisfying because we need one more
273:52 - argument to make all of this work
273:54 - properly
273:55 - for that we have the film method this
273:58 - one can be X Y both or none
274:01 - and this determines if it which it will
274:03 - occupy the available space
274:05 - by default this is going to be none
274:07 - which is telling the widget to only be
274:10 - as large as it needs to be to cover the
274:12 - content if we set this to X we are
274:14 - telling the widget to cover the entire
274:16 - horizontal space
274:18 - if we set this to Y we are covering the
274:20 - entire vertical space and when we set
274:22 - this to both we are covering the entire
274:24 - space that is available let's have a
274:27 - look at this one once again we are in
274:29 - the code I want to set this back to top
274:32 - so it's a tiny bit easier to see what's
274:34 - going on
274:36 - for the first widget now I want to
274:38 - specify a film method the one you
274:41 - probably want to use most of the time is
274:43 - called both and if I specify this one
274:46 - now my first label covers the entire
274:49 - space it can potentially take up I could
274:52 - set this to X only then we are covering
274:54 - the entire width and if I set this to Y
274:57 - then we are covering only the entire
274:59 - height for this one I want to keep it at
275:02 - both
275:03 - the same we can do for the button let's
275:05 - say for this one I want to fill this
275:07 - thing in the y direction
275:10 - there we go we have a button that covers
275:13 - the entire available height and now I
275:16 - can also demonstrate that widgets by
275:17 - default cover the entire width even if
275:20 - we don't use expand for example for
275:22 - Label 2 if I set fill to both
275:26 - we can see that the label didn't grow in
275:29 - the vertical Direction but now covers
275:31 - the entire width of the window
275:33 - which means if I only set this to Y
275:35 - we're not going to see any difference
275:37 - because the widget doesn't have any
275:39 - available space it could take up
275:41 - although if I set this to X we can see
275:43 - the entire width is being occupied
275:46 - so these are the three major arguments
275:50 - you have to understand site expand and
275:52 - fill and I don't think they are
275:54 - particularly difficult
275:56 - although since this is really important
275:59 - I want to add an exercise in here and I
276:02 - want you guys to recreate this kind of
276:04 - layout pause the video now and see if
276:07 - you can copy this
276:08 - I guess let me move it a bit to the side
276:10 - so we can see what we have already there
276:13 - we go now pause the video and try this
276:14 - one yourself
276:18 - what we can see here is that the first
276:21 - label and the button at the end only
276:23 - occupied the minimum amount of space
276:25 - meaning those don't have expand
276:28 - whereas Label 2 and the last of the
276:31 - labels are occupying as much space as
276:34 - they can which means those two get
276:37 - expand
276:38 - finally Label 2 doesn't have any fill
276:41 - because the widget itself is very small
276:43 - whereas all of the other widgets do fill
276:46 - up the available space
276:48 - shouldn't be too hard to replicate
276:50 - the site remains identical for all of
276:52 - them although for label 1 pack should
276:55 - not be true so I'm just going to remove
276:57 - it although fill is going to be both
277:00 - if I run this again now we have the
277:02 - first label all the way in the top and
277:04 - this is already a good starting point so
277:06 - first label is done
277:08 - Label 2 however is going to need quite a
277:11 - bit of work this one is not supposed to
277:13 - be filled but I do want to expand the
277:16 - entire thing
277:17 - I'm going to set it to true and there we
277:19 - go now we have Label 2 with a ton of
277:22 - white space around it if I compare it to
277:24 - the goal this is looking pretty good
277:28 - next up we have to work with label three
277:33 - in this one I also want to expand so
277:35 - expand is going to be true and I want to
277:38 - fill this one as well
277:40 - both let me run this again now and we
277:43 - are almost there this is starting to
277:46 - come together quite well
277:48 - the issue we have right now is that the
277:49 - button is way too tall
277:53 - that happens because expand is true for
277:55 - the button
277:57 - let's remove it let's try this again and
278:00 - we are nearly done the last thing we
278:03 - have is that the button doesn't fill the
278:05 - entire width like we have done in the
278:07 - goal
278:09 - the reason for that is that right now
278:11 - the button only fills the vertical space
278:13 - but I want it to fill the horizontal
278:15 - space and now we can try this and there
278:18 - we go we have replicated the entire
278:21 - window of the exercise
278:24 - if you could figure this thing out
278:25 - yourself you are understanding about 90
278:27 - of the pack method the rest is going to
278:30 - be fairly simple
278:32 - the last two arguments inside of pack
278:34 - are two kinds of padding the first
278:36 - argument is either pad X or pad y or
278:39 - both I guess
278:41 - this one creates space around this
278:43 - widget which means we are essentially
278:46 - creating a larger box around this widget
278:48 - and filling the box with empty white
278:51 - space it is not going to be visible
278:55 - besides that we have iPad X or iPad y
278:59 - this one creates padding inside of the
279:02 - widget which means that we are expanding
279:06 - the widget itself
279:08 - or in practice we're not filling the
279:10 - entire space with white space instead we
279:12 - are expanding the widget
279:16 - let's play around with this one as well
279:18 - in the code I think that's going to
279:19 - explain all of this much better
279:21 - for label 1 I want to add pad y
279:25 - if I set this to let's say 50 pixels
279:30 - now we have something that's very hard
279:32 - to see
279:34 - to make this a bit more visible for Pack
279:36 - 2 I want to set fill to both that way we
279:41 - can see where label one ends and label 2
279:43 - begins let me run this again there we
279:45 - can see
279:47 - what this pad y has done is I created
279:50 - padding around the top and the bottom of
279:53 - the widget
279:54 - that way we have a bit of space and the
279:57 - larger number gets the more white space
279:59 - we have the same thing you could also do
280:01 - for pad X
280:04 - if I set this let's say to a hundred
280:06 - now we also have a ton of white space on
280:09 - the left and on the right of the widget
280:11 - all of this is padding
280:14 - I think this one is fairly
280:16 - straightforward besides that we also
280:18 - have iPad Y and iPad X
280:22 - although for now I only want to cover
280:24 - iPad y because conceptually this can be
280:27 - a tiny bit complicated to understand let
280:29 - me run the code again
280:31 - now we can see that the widget is quite
280:33 - a bit larger we are covering this bit of
280:35 - extra space
280:38 - this happens even though label 1 doesn't
280:40 - have any expand method the reason why it
280:43 - occupies more vertical space is because
280:45 - of this iPad y we are essentially
280:48 - pushing the widget to be a bit larger by
280:50 - the amount of padding we specify
280:53 - this is in contrast to pad X this one
280:56 - creates white space around it I hope you
280:58 - get a difference here
281:00 - most of the time you are only really
281:03 - going to use pad X because iPad y you
281:06 - don't really need to have much if you
281:07 - understand expand and fill they
281:09 - basically fulfill the same task
281:12 - that is going to leave us only with one
281:14 - more thing to cover
281:16 - and that is that you can combine
281:18 - different sides inside of the pack
281:20 - method although if you're doing that the
281:23 - order of the pack holds really really
281:25 - matters on top of that usually you don't
281:29 - want to combine different sides I'm
281:32 - going to cover this in the next video
281:33 - but using frames to organize a layout is
281:36 - much much cleaner
281:38 - first of all to make this as easy as
281:40 - possible to see I want to remove the
281:42 - padding and instead set expand to true
281:47 - for all of them and also fill both for
281:50 - all of them this I also want to do for
281:52 - the button like so now if I run this we
281:56 - have four identically sized widgets
281:59 - but let me change the top for the site
282:01 - for the first widget to left
282:04 - if I run this now we can see that the
282:07 - first label takes up a huge amount of
282:10 - space and why is that
282:13 - let me put the widget to the side here
282:16 - the main thing you have to understand is
282:18 - that the first time you're calling Peg
282:20 - with a certain kind of site this side is
282:23 - going to get priority which means right
282:26 - now the first label is going to try to
282:28 - occupy as much horizontal space as it
282:31 - possibly can
282:33 - then it sees these other widgets here
282:35 - but all of them are set to top
282:39 - which means the horizontal space is
282:41 - going to be ignored as a consequence
282:43 - they only get as much space as they need
282:46 - to display their text
282:49 - you can see here the largest label is
282:51 - this one the last of the labels this one
282:53 - occupies the most amount of space
282:56 - and this one determines the width of all
282:58 - of these widgets
283:00 - that is the reason why this label gets
283:02 - this much horizontal space and since
283:05 - there's no other widget in the vertical
283:06 - axis it occupies the entire height of
283:09 - the window
283:10 - after that the other widgets only get
283:13 - this remaining amount of space
283:15 - and they will divide the space between
283:18 - the three of them
283:20 - once again you can be really fancy with
283:23 - this kind of system
283:25 - but most of the time you want to use
283:26 - frames to organize out of this and
283:28 - that's going to be much cleaner again
283:30 - I'm going to cover this in the next
283:32 - video
283:33 - although this is something that you want
283:35 - to practice which means we can do
283:37 - another exercise
283:39 - here is one window that is a tiny bit
283:42 - more complex try to create this one
283:45 - yourself
283:46 - and see how far you get you probably
283:48 - have to experiment quite a bit but it's
283:50 - certainly doable if you could follow
283:51 - along so far
283:55 - first of all I want to set top to all of
283:58 - the sides if I run this again now all of
284:01 - the widgets occupy the same amount of
284:03 - space
284:04 - next up for Label 2 I have set the site
284:08 - to left
284:10 - what this one is doing is let me move
284:13 - this window a tiny bit to the side
284:16 - sees that we have three widgets that
284:20 - occupy the top Direction and since the
284:24 - first site that we are looking at is top
284:26 - it starts with that this means taken
284:30 - that tries to get the entire height of
284:32 - the window and separate it into three
284:34 - different areas we have one we have two
284:38 - and we have three
284:40 - they can already see this determines the
284:43 - height of our widgets
284:45 - besides that teak inter sees that we
284:47 - have one widget that has left however
284:50 - this one comes after the top
284:52 - which means tkinter tries to push this
284:56 - first label as far as it can but I can
285:00 - only push it up to this first line here
285:04 - because we have two other widgets with
285:06 - the top side
285:08 - this constrains the height of the first
285:10 - label
285:11 - this also determines the height of label
285:15 - 2. this is the entire height
285:18 - finally for the width like so thickener
285:21 - knows that there's no other widgets
285:23 - inside of our sides that occupies any
285:26 - horizontal space
285:27 - so Label 2 tries to take up as much
285:30 - space as it can the only constraint is
285:33 - last of the labels this one needs to
285:35 - have the minimum amount of space to
285:37 - occupy last of the labels the bit of
285:39 - text here
285:40 - which sets the maximum width of Label 2
285:44 - to this point here and with that we have
285:47 - the basic layout the last thing we have
285:49 - to do if I show it again we had some
285:52 - padding around the first label
285:54 - this is quite easily done I want to have
285:57 - pad X for 10 and Pad y I've set this one
286:01 - to 10 as well if I run this again now
286:03 - here's what I created in the exercise
286:07 - and once again this kind of setup can
286:10 - work but most of the time it is much
286:13 - easier to use frames to make all of this
286:15 - much easier and that's going to be the
286:17 - next video I'll see you there in this
286:19 - video we are going to cover pack along
286:21 - with frames to create more complicated
286:23 - layouts in t Kinder what we are going to
286:26 - create is going to look something like
286:28 - this we have a fairly complicated layout
286:31 - that has lots of individual elements
286:34 - that come together quite well
286:37 - this is quite easy to do if you know how
286:39 - to combine pack with frames
286:42 - although for all of this to work you
286:44 - should already know how pack works and
286:46 - how frames work along with parenting
286:48 - check out the previous videos for more
286:50 - detail but I will assume you know at
286:52 - least the basics
286:56 - just to reiterate using pack along with
286:58 - frames is going to make it much easier
287:00 - to create more complicated layouts
287:02 - basically what you want to do is always
287:05 - create single Direction layouts
287:08 - with the only exception that some of
287:10 - these items are frames that contain
287:12 - their own layout
287:14 - for example we could have one window
287:16 - like this and then here we have one
287:18 - frame a normal widget and another frame
287:21 - note here that this entire widget only
287:24 - goes in a single direction there's
287:26 - nothing else in there
287:28 - however inside of the first frame we
287:31 - have two widgets and inside of this
287:33 - Frame we again only have a single
287:36 - Direction
287:37 - but if you combine the two we are
287:40 - already creating a slightly more
287:41 - complicated layout
287:44 - this we can make even more complex by
287:46 - adding another layout inside of the
287:48 - final frame and this one could be a
287:50 - normal widget and another frame and in
287:52 - this final frame we could add a few more
287:55 - widgets as well with this system we are
287:57 - able to create really complicated
287:59 - layouts without worrying about the pack
288:01 - sides too much
288:02 - and again if you don't know what pack
288:04 - sites are or why that can be a problem
288:06 - check out the previous video that
288:08 - explains all of this in quite some
288:09 - detail
288:10 - and just for comparison here is the
288:12 - widget we are going to make this one has
288:15 - one frame all the way at the top then we
288:18 - have a widget here
288:20 - and at the bottom we have one larger
288:22 - frame and this one consists out of two
288:24 - frames one that goes like this and the
288:28 - second one that goes like so
288:31 - all of the layouts inside of this widget
288:33 - are single Direction layouts which makes
288:35 - them much easier to handle
288:37 - that was quite a bit of talking let's
288:40 - have a look at all of this in code
288:42 - alright here I have a really basic setup
288:45 - if I execute all of this we can see a
288:48 - basic window
288:49 - although on top of that I do have quite
288:52 - a few widgets there are four labels and
288:55 - two buttons all of which have the window
288:58 - as the parent right now or the master to
289:00 - be more specific this I already want to
289:03 - change the first two labels should have
289:05 - one frame as their parent and the final
289:07 - three should have another frame as their
289:09 - parent to keep all of this organized I
289:12 - want to have slightly more detailed
289:13 - comments
289:14 - let's get started by creating a top
289:16 - frame
289:18 - for this I want to have a top frame and
289:21 - this I create with ttk DOT frame this
289:24 - one is going to have the parent or the
289:26 - master of the window but then label 1
289:28 - and label 2 are going to have the master
289:32 - as the top frame
289:34 - this is already giving us the first part
289:36 - that we need to make all of this work
289:38 - this I can now use to create another
289:40 - section here I'm going to call this
289:42 - layout
289:44 - actually let's be a bit more specific
289:45 - and I'm going to call this the top
289:47 - layout
289:48 - I want to get my label one and I want to
289:52 - pack this without any other Arguments
289:54 - for now the same I want to do for Label
289:56 - 2 and now if I run this we can see that
289:59 - we cannot see anything even though we
290:02 - have used pack the reason is that we
290:05 - haven't packed this Frame or the top
290:07 - frame to be more specific
290:09 - which means we do have labels inside of
290:12 - the top frame but the top frame itself
290:14 - isn't placed anywhere which is the
290:16 - reason why we can't see anything
290:18 - to fix that we also have to get the top
290:20 - frame and pack this one now if I run
290:24 - this we can see two labels
290:27 - this I can now use for example for label
290:30 - 1 and label 2 to fill the sides and I'm
290:33 - going to add both in here
290:35 - if I now add this we can't see much of a
290:39 - difference the only difference that we
290:41 - can see really is that Label 2 has
290:44 - become a bit wider
290:45 - it became the same size as the first
290:47 - label the reason for that is that right
290:50 - now both of these labels are constrained
290:52 - by the frame width
290:55 - and the frame is only as wide as the
290:57 - widest widget
290:59 - which is the first label in this case
291:01 - that again we can fix by also adding
291:04 - fill and both for the top frame and now
291:08 - let's have a look now it covers the
291:10 - entire width of the window
291:12 - by the same logic I could use expand
291:15 - here and set this to true
291:17 - now we can't see anything
291:20 - but that being said we know that this
291:24 - top frame here is going to occupy the
291:27 - entire height of the window
291:30 - the reason why we can't see it is that
291:32 - we don't expand level 1 or label 2. if I
291:36 - expand the two like so
291:38 - we can see we have both labels covering
291:41 - up the entire window this is the first
291:44 - part next up I want to place label three
291:46 - which again is just going to be now
291:48 - available with some text and a
291:50 - background color
291:51 - this is not going to have a parent so
291:54 - window can remain
291:55 - although I'm going to add a comment here
291:57 - for the middle widget
292:00 - tikenta doesn't care very much if you
292:02 - combine labels or frames or any other
292:04 - kind of widget which means I can also
292:07 - add the middle layout here and simply
292:10 - get my label 3 and pack this thing if I
292:15 - now run this we have another label all
292:17 - the way at the bottom
292:19 - this one since we didn't specify any
292:21 - fill or expand argument it is only going
292:23 - to occupy the minimum amount of space it
292:25 - needs to display the label or the text
292:27 - itself
292:29 - however if we set expand to true
292:33 - now we get some slightly more
292:35 - interesting Behavior
292:37 - what tikenter is doing now is it says
292:40 - that we have a top frame and label three
292:43 - those are the only two widgets inside of
292:46 - the window
292:47 - this window here which we know because
292:49 - both of these have window S10 master
292:52 - because of that tkinter is separating
292:55 - the entire vertical space into two parts
292:57 - this one here and this one here
293:00 - I hope this already makes it quite easy
293:02 - to see why using parenting here is
293:05 - really useful because what we can do now
293:07 - for example for label 1 and label 2
293:10 - inside of the top frame we could for
293:12 - example set the site to left
293:15 - and now we get this kind of layout which
293:18 - already is quite a bit more complicated
293:20 - and doing this kind of thing without
293:22 - parenting would be kind of a nightmare
293:24 - next up I want to create the bottom
293:29 - frame for this one I want to create a
293:32 - variable bottom frame which is going to
293:35 - be ttk frame as well the parent here is
293:38 - going to be the window however for label
293:40 - three button and button 2 the master is
293:43 - going to be the bottom frame once we
293:46 - have that we can create the bottom
293:49 - layout
293:51 - for this one I first of all want to
293:53 - place my button and for now I'm just
293:55 - going to use pack and nothing else
293:57 - the same thing I want to do with button
293:59 - 2 although between the two I want to
294:01 - have label 4.
294:04 - which I also need to pack
294:06 - with this we have the three widgets
294:08 - finally we have to pack the bottom frame
294:10 - as well bottom frame dot pack like so
294:14 - now if I run this we can see we have the
294:18 - other three widgets at the bottom
294:19 - although if I compare this to the demo
294:22 - we have to get a slightly different
294:24 - layout here I first of I want to change
294:27 - the side to left
294:30 - like so and now if I run this these
294:33 - three labels are right next to each
294:35 - other the problem is they're not
294:37 - expanding
294:38 - for that actually let me show it again
294:41 - right now we're telling tkinter to look
294:44 - at this top frame here and to take up as
294:47 - much space as possible then to look at
294:49 - this widget here and to take up as much
294:52 - space as possible and then we have this
294:54 - final frame here and this one doesn't
294:56 - get any expand
294:58 - so it's only as large as it needs to be
295:00 - that I want to change which I do with
295:03 - expand and this I want to set it to true
295:06 - if I now run this we have a slight
295:09 - Improvement
295:10 - inside of the window layout we have One
295:13 - Direction and we are separating this
295:15 - into three parts because we have three
295:17 - widget this one here this one here and
295:20 - this one here
295:21 - that compete for space
295:24 - because of that we have three equally
295:26 - sized spaces this one this one and this
295:29 - one
295:30 - the problem in the bottom one frame is
295:33 - that these widgets are not being told to
295:35 - expand so they only take a minimum
295:37 - amount of space
295:39 - this we can also fix very easily I just
295:42 - want to add expand being true and now we
295:46 - can't see any difference
295:48 - the reason for that if you check out the
295:50 - last video if you missed it
295:52 - is that pack only works in One Direction
295:55 - right now our side is from left to the
295:58 - right so we are going this way and
296:00 - expand only expands the widget in the
296:03 - current direction meaning it tells the
296:05 - first button to take up as much space as
296:07 - possible same for the label and same for
296:10 - the final button
296:11 - and then this one here is going to be
296:14 - the size of the frame
296:16 - to make it take up even more space we
296:19 - once again need to fill argument and
296:22 - this I want to add to all of the widgets
296:26 - and now if I run this this is looking
296:28 - much better
296:30 - now we're telling both the frame and all
296:32 - the widgets inside the frame to occupy
296:34 - as much space as they can and fill the
296:36 - entire space as well
296:37 - although what I also want to do if I
296:40 - compare this to the demo again we have a
296:44 - bit of padding around this this area
296:47 - here I also want to add which if you use
296:50 - frames is very easy to add
296:52 - all we have to do inside of the bottom
296:54 - frame I want to add pad X is 20 and Pad
296:58 - Y is 20. if Iran is now we have a bit of
297:02 - padding around this
297:04 - and with that we have a couple of basic
297:08 - ways to create more complicated layouts
297:11 - it doesn't really get that much more
297:13 - complicated you essentially always
297:14 - create a single frame and then you pick
297:17 - widgets in One Direction inside of this
297:19 - Frame and if you combine enough of these
297:22 - you end up with slightly more
297:23 - complicated layouts and those are also
297:26 - much easier to understand and to
297:27 - implement
297:28 - now you could replicate all of this by
297:31 - using the side very cleverly in tkinter
297:33 - to get really complicated layouts the
297:36 - problem with that approach though is
297:38 - that this really often ends up with very
297:40 - complicated layouts that are really hard
297:42 - to maintain which is why I would
297:44 - recommend to always stick with one
297:46 - directional layouts and then add frames
297:48 - to create greater complexity that's
297:50 - basically all you need
297:52 - all right and with that I want to do an
297:55 - exercise and then we're done with this
297:56 - part
297:57 - what I want you guys to do I want you to
298:00 - create three more buttons and another
298:02 - frame the frame should be on the right
298:05 - side inside of the bottom frame this
298:07 - bottom frame here and the buttons inside
298:10 - of this extra frame should be stacked
298:13 - vertically inside of it
298:15 - the result of all of this should look
298:17 - something like this the buttons should
298:19 - be here
298:21 - let me put it a bit to the side and
298:23 - pause the video now and try to figure
298:25 - this one out yourself
298:29 - we have to get started by creating a few
298:32 - more widgets this I want to do all the
298:34 - way at the top
298:36 - I'm going to call those the exercise
298:38 - widgets
298:40 - first of all in here we need an exercise
298:43 - frame
298:45 - this once again is just going to be
298:48 - another ttk.frame with the parent being
298:51 - the bottom frame this is going to be the
298:54 - only difference compared to what we have
298:56 - done here and here because for both of
298:59 - those the frame always at the window as
299:01 - the master this Frame here has another
299:04 - frame as the master which is perfectly
299:06 - fine to do
299:07 - after that I want to create button three
299:10 - and this is going to be ttk dot button
299:14 - with the exercise frame as the master
299:18 - the text can just be button free
299:23 - this should be a string though and I
299:25 - should also fix my typo
299:27 - I can copy this two times it should be
299:30 - button four at button five both for the
299:33 - variable and for the name
299:34 - that is going to be all we need to
299:37 - create the different widgets now we have
299:39 - to place them this I want to do all the
299:41 - way after the exercise comment
299:44 - in here first of all I want to place the
299:46 - buttons I have button three
299:50 - button 4 and button five
299:54 - all three of those should be packed
299:58 - since the stacking order is going to be
299:59 - vertical I can just leave the default
300:02 - argument which is the top side
300:04 - although I do want all of the buttons to
300:06 - occupy as much space as they can which
300:09 - means I only said expand to true and
300:12 - fill to both sides
300:15 - once I have that I can place the actual
300:18 - frame and this I called the exercise
300:20 - frame
300:21 - I want to pack this one as well and if I
300:24 - run this let's just see what happens
300:26 - we are getting something
300:30 - the problem we have right now is that
300:31 - this pack is very small it only occupies
300:34 - this area here
300:36 - to fix that we have to do a couple of
300:39 - things first of all I only want single
300:42 - Direction layouts which means the site
300:44 - here should be left
300:46 - like so
300:48 - and let's see what we get now now it
300:50 - places this thing in the middle
300:53 - that's a good start besides that I also
300:55 - want to set the fill
300:57 - and this could either be y
301:00 - there we go or it could be both
301:04 - both work perfectly fine I tend to
301:06 - prefer both because it just works most
301:08 - of the time
301:10 - but once again both here are perfectly
301:12 - valid
301:13 - finally what you could also do is set
301:15 - expand to true and that's going to make
301:19 - these buttons a tiny bit wider
301:21 - with this expand being true we are
301:24 - telling this Frame here to divide the
301:27 - space into four equal parts
301:29 - we have number one number two number
301:31 - three and number four and all four of
301:34 - those have the same width with that we
301:37 - have created quite a complicated layout
301:40 - in the next video we are going to cover
301:42 - grids this one is going to be even more
301:44 - powerful so I'll see you there in this
301:47 - video we are going to learn about the
301:49 - grid layout what we are going to make
301:52 - is going to look like this I am fully
301:55 - aware this looks horrible but that's not
301:58 - the point of this lesson what I want you
302:00 - guys to do is to understand how to
302:02 - create a grid and how to place elements
302:04 - in here
302:06 - let's talk about how it works when we
302:09 - are using the grid method we are
302:11 - creating a grid inside of this grid we
302:13 - can determine the number of rows and
302:15 - columns
302:16 - on top of that you can also set the
302:18 - width and the height of each column or
302:20 - row you can see this one quite well for
302:23 - example this cell here
302:26 - s is certain amount of width and a
302:29 - certain amount of height
302:31 - this you can set yourself quite easily
302:34 - once you have that you can place widgets
302:36 - in columns and rows and on top of that
302:39 - you can also specify how many cells in
302:41 - which it is going to occupy for example
302:43 - this could look like this like this or
302:47 - like this where you have one widget
302:48 - overlapping with another widget
302:51 - in the most basic sense this is a very
302:54 - simple system
302:55 - however there's one limitation you need
302:57 - to be aware of
302:59 - like with pack grid only determines how
303:02 - much space at which it can occupy but
303:05 - not how much it will occupy and this
303:07 - difference is important
303:09 - inside of the pack method we had the
303:11 - fill argument inside of a grid we are
303:14 - using sticky
303:15 - this one works like this this could be
303:18 - one cell inside of our table and we can
303:21 - specify to which border the widget is
303:24 - going to stick in here we have north
303:26 - east south and west and this we used to
303:30 - place a widget inside of here by default
303:33 - a widget is always going to be right in
303:36 - the middle however if we for example
303:38 - specify sticky North then the widget is
303:41 - going to stick at the top
303:43 - this would look something like this
303:46 - note here that the size of the widget
303:49 - hasn't changed however when we Define
303:51 - two arguments in here like North and
303:54 - South in that case the widget is going
303:57 - to retain the width but is going to
303:58 - occupy the entire height of the cell
304:01 - let me clean this up a tiny bit our
304:03 - widget is going to stick to the north
304:05 - and to the South which means the height
304:08 - of the widget is going to occupy all of
304:11 - this
304:13 - however the width of the widget is going
304:16 - to be determined by the content for
304:18 - example if we have a label with some
304:21 - text
304:23 - then the width of the text is going to
304:26 - determine the width of the widget
304:29 - although if we specify all four
304:32 - directions North South East and West let
304:34 - me clean this up a bit
304:36 - if we have all four directions we are
304:38 - telling the widget to stick to all four
304:40 - sides of this cell and that way we have
304:44 - one widget that is quite large or well
304:46 - as large as the cell it's in
304:49 - that is quite a bit of stuff to cover so
304:52 - let's Jump Right In and let's have a
304:54 - look at some examples here I have some
304:56 - very basic code if I execute all of this
304:58 - we can see that we have an empty window
305:01 - that window we're getting from these
305:03 - lines here and we are running main loop
305:05 - on the window we created besides that we
305:08 - have quite a few different widgets but
305:10 - right now we're not packing them so they
305:12 - are not visible we have four different
305:14 - labels and each of them has a background
305:16 - color besides that we have two buttons
305:19 - and we have an entry widget
305:21 - all of these I want to place using the
305:23 - grid method for that first of all I have
305:27 - to define a grid for that you take the
305:31 - container and you run two methods the
305:34 - first one is called column configure
305:37 - this is going to create one or multiple
305:40 - columns for now I only want to create
305:42 - one at least on this line of code
305:45 - this needs two arguments first of all is
305:48 - the index and the index here is going to
305:50 - be column 0.
305:52 - then we need what is called the weight
305:54 - and this is going to determine how wide
305:56 - this column is for now I'm going to set
305:58 - it to 1. once we have that I want to
306:01 - duplicate this thing and change the 0 to
306:03 - a one with that we have two columns
306:06 - I want to duplicate this thing another
306:08 - time and change the column to a row the
306:12 - index now being 0 and the weight being
306:14 - 1. with this what we created is is is
306:19 - our window and we have two columns one
306:22 - and two this is what we're getting from
306:25 - here besides that we have one row this
306:28 - is what we are getting here
306:29 - I want to place a widget
306:33 - to place label one I have to get the
306:35 - widget label one and then use the grid
306:38 - method
306:39 - I have to specify row and I have to
306:42 - specify a column for both of those we
306:45 - have to use the index numbers we
306:47 - specified earlier
306:48 - meaning the column could either be 0 or
306:51 - 1. let me set it to zero for now the row
306:55 - right now always has to be zero because
306:57 - we only have a single row
306:59 - with that we are placing label one let
307:02 - me run the code and there we go we have
307:05 - one label
307:06 - the same thing we can do with label two
307:08 - I'm going to copy this entire line
307:10 - change label one to label two
307:13 - the row I'm not going to touch the
307:15 - column I'm going to change to 1.
307:18 - if I run this now we have label 1 and
307:20 - label 2. and here we already have the
307:24 - first issue that being that the cells we
307:28 - are specifying let me draw them on here
307:29 - we have column one and we have column
307:32 - two and the two are separated roughly
307:35 - here besides that we have one row the
307:38 - issue we have right now is that there's
307:40 - a ton of white space both around label
307:42 - one and label two
307:44 - and this comes back to the issue that is
307:46 - kind of annoying in tkinter and that is
307:48 - that these cells only create a space for
307:51 - the widget but we're not telling the
307:53 - widget to occupy that entire space
307:56 - as a consequence we are ending up with a
307:59 - huge amount of white space sometimes you
308:02 - want that but most of the time you
308:04 - probably don't
308:05 - so let's get rid of it
308:07 - to get rid of it we need the sticky
308:11 - argument
308:12 - in here we have to specify north south
308:15 - east or west the order of the letters
308:17 - here really doesn't matter and let me
308:19 - just run it like this now this is
308:22 - looking much better we are telling the
308:25 - widget to stick to all four sides
308:27 - although I guess I jumped a bit ahead
308:30 - for now let's get started by just
308:31 - specifying North
308:33 - if I run this now the widget sticks all
308:36 - the way to the top of the cell
308:38 - I can do this with the other sites as
308:39 - well for example if I specify sticky to
308:43 - West for the first widget and then I
308:46 - also add sticky with East
308:49 - then we can see we have each of the
308:52 - widgets on the side of the window
308:55 - although I guess if I flip this around
308:56 - with east and west
308:59 - now we can see where the borders of
309:01 - these cells are although that's not
309:04 - usually how you would use sticky instead
309:06 - most of the time you specify two sides
309:09 - for example East and West tells the
309:11 - widget to span the entire width of a
309:15 - cell you could also specify North in
309:17 - here and then we are sticking the entire
309:20 - thing to the top
309:22 - you do have to play around with this a
309:24 - tiny bit but eventually It's Gonna Come
309:26 - quite handy although most of the time
309:28 - you just specify north south east and
309:30 - west you are occupying the entire cell
309:33 - and you are done that is basically the
309:36 - fundamental thing you have to understand
309:38 - about grid layouts I guess what we can
309:41 - do is create a few more rows and columns
309:43 - and then play around with this quite a
309:45 - bit more
309:46 - I want to have three columns in total 0
309:49 - 1 2 and 3.
309:51 - and already if I run this after creating
309:54 - more columns you can see the layout has
309:56 - changed because now we have column 0
309:58 - column 1 column two and column three so
310:02 - the space we have for each column is
310:04 - going to be less
310:05 - what you can also do is change the
310:07 - weight of each column for example if I
310:09 - change this to a 2 then we have even
310:12 - less space let me add a higher number so
310:15 - you can see this a bit better we still
310:17 - have 0 1 2 and 3 columns but the final
310:22 - column is going to be much wider than
310:25 - the other columns I can demonstrate this
310:27 - quite well by placing label three this
310:30 - one is going to be in row 0 but column
310:33 - three and I want this to go from east to
310:37 - west
310:38 - there you can see we have a really wide
310:40 - label
310:41 - we can actually make it even easier
310:43 - because these three lines are basically
310:46 - identical they all have the same weight
310:48 - we just want to specify a different
310:50 - index for that we can also add a tuple
310:53 - in here for the index and just call this
310:55 - 0 1 and 2. like we have done before and
310:59 - this is going to give us the same thing
311:00 - which means I can get rid of this now we
311:04 - are creating three columns with the
311:05 - index 0 1 and 2 all with a weight of one
311:07 - and then we have a final column with the
311:11 - index free and this is much wider so if
311:13 - I run this we are getting the same thing
311:17 - the majority of the time you are going
311:19 - to have columns or rows that have the
311:21 - same weight and then using tuples for
311:23 - that is much easier to read
311:25 - for the rows I also want to have
311:27 - multiple
311:29 - I have one two and three or well four
311:32 - rows in total but you get the idea and
311:34 - like with the columns I can also change
311:36 - the weight let me change this one to a
311:38 - three now if I run this all of our stuff
311:40 - is at the top because this is where the
311:43 - original row zero was
311:45 - this one here is row 0 and before we had
311:48 - the other rows this was the only one but
311:50 - now we have a ton of stuff down here so
311:53 - all the existing elements we had were
311:55 - pushed upwards
311:56 - but these cells I can now use quite
311:58 - easily
312:00 - for example let's go with label two
312:02 - instead of row 0 I want to place this
312:05 - one at row 1.
312:07 - if our one is now it is a bit further
312:09 - down and let me change sticky to north
312:12 - south east and west then you can see
312:16 - this a little bit better there we go
312:17 - this is looking pretty good
312:20 - this could also be column two
312:23 - or it could be row 2. like so
312:29 - the system here I hope is quite easy to
312:32 - understand it really doesn't get that
312:33 - complicated
312:35 - so we can cover the next part and that
312:37 - is either column span or row span
312:41 - let's start with roseban since I do have
312:44 - quite a few rows that I'm not using
312:46 - roseban is telling the widget how many
312:48 - rows it should occupy by default this is
312:51 - one
312:52 - if I run this we are not seeing any
312:54 - change
312:55 - however if I change this to A2
312:58 - now we're occupying two rows and if I
313:01 - change it to a three
313:04 - we are occupying all of the rows
313:07 - let me draw this actually
313:10 - in this widget right now we have four
313:12 - different rows this one here is row zero
313:15 - then we have roughly here Row one row
313:19 - two and the rest is Row three this one
313:22 - is much taller than the other rows
313:24 - because we have given it a greater
313:25 - weight
313:26 - and this row span is telling the widget
313:28 - to occupy this starting cell then
313:31 - another cell and then another cell
313:35 - those numbers are 1 2 and 3 for the
313:38 - argument
313:39 - the same thing you can also do with the
313:42 - columns let's use level three for that
313:45 - I want this thing to be in row one and
313:48 - the column for now should be column zero
313:50 - also I want to have north south east and
313:54 - west so if I run this now we have label
313:56 - three on the left side
313:58 - however I want to specify column span
314:02 - this widget should span three columns if
314:06 - I run this now we have a much wider
314:08 - widget that is overlapping with label 2.
314:12 - to make this even more visible we can
314:15 - cover one additional concept that is two
314:18 - different kinds of padding if you have
314:20 - watched a pack video this should be
314:22 - familiar we either have pad X or pad Y
314:25 - and this is going to expand the space
314:27 - around the widget to give some space
314:29 - between the current widget and any
314:31 - neighboring widgets
314:33 - meaning pet X or pad y create space
314:35 - around the widget besides that we have
314:38 - iPad X or iPad Y and this one is
314:40 - expanding the border of the current
314:42 - widget
314:43 - it essentially makes it larger
314:46 - back in the code to make this Label 3
314:49 - here visible we want to add pad X let's
314:54 - say 20 and Pad y let's go with 10.
314:58 - although before that I want to fix the
315:00 - typo let's try it now there we go there
315:03 - is quite a bit of space in the X and the
315:05 - y-axis although on the x-axis this side
315:09 - we have a large amount because pad X is
315:11 - twice as large as pad y
315:13 - and if you changed pad y to iPad y
315:17 - we can see well not much of a difference
315:20 - but let me add a much larger number in
315:22 - here a hundred third virtual visible
315:25 - there we go basically what happened now
315:28 - is that this used to be row 0 then we
315:31 - had Row 1 Row 2 and then down here Row 3
315:35 - originally Label 3 occupied this height
315:38 - here
315:40 - but because of iPad why we are pushing
315:45 - the widget up and down by quite a bit or
315:48 - not really pushing we are rather
315:50 - expanding it quite a bit
315:52 - what you want to be careful about here
315:54 - is that this is shrinking other cells
315:56 - label one in particular has become much
315:59 - smaller
316:00 - so do be careful with this one I only
316:03 - want to use pad y with 10 pixels
316:06 - like so this is much cleaner what can
316:09 - also be really useful let me Place label
316:12 - 4 with the grid method you can place
316:15 - elements in the corner for example this
316:18 - label 4 I want to have in the bottom
316:20 - right corner for that I will need to
316:23 - roll that is the maximum which is Row 3
316:25 - and I want to have the maximum column
316:28 - which is also number three
316:30 - running this now gets me label 4 but not
316:34 - in the ideal position
316:36 - Instead This widget should be in the
316:39 - bottom right here for that we can use
316:42 - sticky I want this to stick to the South
316:44 - East if I run this now there we go the
316:47 - label is all the way in the bottom right
316:48 - even if we resize the window it will
316:51 - always be in the bottom right I guess I
316:54 - didn't mention it but the grid always
316:56 - scales along with the window
316:59 - which lets you make really cool stuff I
317:03 - think at this point this is becoming
317:05 - quite repetitive ultimately using grid
317:08 - is quite simple it really doesn't get
317:11 - that complicated
317:12 - that being said there's one thing that
317:15 - can be kind of annoying
317:16 - grit has a tiny bit of a uniformity
317:19 - issue which means when you have cells
317:22 - with content their width is not what you
317:25 - would expect let me do an example
317:28 - let's say we have a grid like this and
317:30 - we want to place two widgets one and two
317:33 - inside of this example we have 0 1 2 and
317:37 - 3 columns they all have a weighting of
317:40 - one let me use a color like this they
317:42 - have one one one and one they are all
317:45 - supposed to be equally wide the issue is
317:49 - if this cell here is empty and this cell
317:52 - here is empty then tkinter is going to
317:55 - make the existing cells with content
317:57 - wider than they are supposed to be there
318:00 - is a formula to calculate the exact
318:02 - numbers but most of the time you don't
318:04 - need that because you don't want this
318:06 - Behavior at all because it's well
318:08 - inconsistent and kind of annoying but
318:11 - let me demonstrate this issue first
318:14 - I want to comment out the third column
318:17 - and I also want to comment out
318:20 - all of the other rows besides the first
318:22 - one
318:23 - besides that I also want to comment out
318:25 - what we have done for Label 2 3 and 4.
318:28 - that way I can focus on one specific
318:31 - thing I already have label one with a
318:34 - grid and this one occupies the first row
318:36 - and the first column I am just going to
318:38 - copy this
318:40 - and change column 0 to column 2. if I
318:43 - run this now
318:45 - you can already see the issue quite well
318:48 - this column here and this column here
318:51 - they have the same width but this one
318:54 - here in the middle is much less wide
318:57 - I guess much less white is a bit of an
319:00 - exaggeration but it is less wide than
319:02 - the other two the reason for that is if
319:05 - a column or a row has a widget in it he
319:09 - Canta is going to give it a bit more
319:10 - space
319:12 - that being said though you can fix this
319:14 - one quite easily all you have to do is
319:16 - add one more argument and that's called
319:18 - uniform
319:20 - in here you are supposed to add a string
319:23 - and you can give different columns is
319:26 - similar uniformity
319:28 - in practice though you are hardly ever
319:30 - going to use it most of the time I just
319:32 - had an a for every single row or column
319:36 - like so and then every single row or
319:39 - column have a uniformity
319:42 - I can run this now and now we have all
319:44 - the columns having the same size or a
319:46 - uniform size this is still going to work
319:49 - with the weighting
319:50 - and that way you have much more expected
319:52 - Behavior
319:54 - with that I can get rid of Label 2 and
319:59 - uncomment everything else like so
320:03 - this stuff here I want to uncomment as
320:05 - well
320:07 - like I have done this stuff here
320:11 - all of those are going to get uniform
320:13 - also I want to change the weight of
320:16 - column with index 3 to a two and now if
320:19 - I run this
320:20 - we got something that looks very much
320:22 - like the example I had earlier
320:24 - that one looked like soap and we are
320:27 - definitely getting there
320:29 - that is leaving us just with the
320:31 - exercise and then we are done with this
320:33 - video what I want you guys to do is
320:36 - going to add the buttons and the entry
320:38 - field as a reminder
320:41 - the demo app I had looked like this you
320:45 - have to add this button and this button
320:47 - and the entry field
320:51 - try to figure out in which row and which
320:54 - column they are and see if you can place
320:56 - them as well shouldn't be too difficult
320:58 - so pause the video now and try to sort
321:01 - this
321:04 - we know that button one is very easy to
321:08 - place because we have row 0 and we have
321:12 - column three
321:14 - this button is in the top right it has
321:16 - to have these values or button two this
321:19 - one here I know we have one row here and
321:23 - we have one row here
321:25 - and besides that we have one column here
321:29 - another column here and that brings us
321:32 - then to this cell which means this one
321:35 - is going to be column two and row 2.
321:38 - let's start by placing those two and
321:40 - then we can work on the entry field I
321:42 - want to start by placing button one with
321:45 - the grid method
321:47 - for this one I know that the row is
321:50 - supposed to be 0 and the column needs to
321:53 - be three if I run this now we have the
321:56 - button in the top right but the button
321:58 - doesn't fill the entire available space
322:00 - this we do by using sticky
322:05 - and adding
322:07 - north south east and west which is what
322:11 - I am always using but you could change
322:13 - the numbers here around as you want this
322:15 - could be north east south west it really
322:18 - doesn't matter tikanta just cares about
322:19 - the numbers being present in there
322:21 - I can duplicate this slide now and
322:24 - button two I want to place in Row 2 and
322:29 - column 2.
322:30 - let's see this is looking pretty good
322:34 - finally we have to place let me open it
322:37 - again
322:38 - we have to place the entry widget this
322:41 - one is a tiny bit more tricky
322:43 - for example we know that this button
322:45 - here is on row 2.
322:48 - which makes all of this row number three
322:52 - the issue is the entry is not perfectly
322:55 - centered in here that would be roughly
322:57 - this line instead what I have done for
323:00 - the entry is I have taken up Row 2 and 3
323:04 - and place the entry widget in the middle
323:07 - of that which places it roughly here
323:09 - which means we want to have column
323:12 - number three but then for the row we
323:14 - want to start on two but occupy two rows
323:17 - in total
323:18 - that should be fairly easy to implement
323:21 - I want to get my entry widget I want to
323:24 - place it using grid the row is going to
323:28 - be 2 and the column is going to be 3.
323:33 - like so if I run this now
323:35 - we have the entry widget right next to
323:37 - the button to push it down I want to add
323:40 - a row span it should occupy two rows if
323:45 - I run this now there we go this entry
323:48 - field is now in the position we had
323:50 - before
323:52 - you could make this a bit more explicit
323:54 - by adding sticky to it although that
323:56 - would give us a really large entry field
323:58 - like so that's a bit weird because entry
324:01 - only allows one line of input but it
324:04 - certainly works in this case though I
324:06 - don't want to add sticky in here I guess
324:08 - we can add sticky
324:10 - or east and west
324:13 - like so that I think is a bit better
324:16 - with that we have all of the basics of
324:19 - the grid method I hope it wasn't too bad
324:21 - if you understand grid you understand
324:23 - the most common layout method in tkinter
324:25 - this one especially from a complex
324:28 - layouts you are going to use all the
324:29 - time
324:31 - in this video we are going to cover the
324:33 - place layout method what we are going to
324:36 - create is going to look something like
324:39 - this once again not a particularly
324:42 - pretty app but it definitely teaches you
324:44 - quite a bit on top of that this one is
324:47 - quite flexible and here you can see a
324:49 - couple of different effects I'll explain
324:51 - them as we go along
324:54 - so let's talk about place
324:57 - widgets are placed by specifying the
324:59 - left the top the width and the height of
325:01 - the widget this is a very flexible
325:04 - system also I think a fairly simple one
325:07 - to understand although when you are
325:09 - placing widgets you can do this in two
325:11 - ways you can either use absolute or
325:13 - relative values
325:15 - let's start by talking about absolute
325:17 - values for this we once again have a
325:20 - window or any kind of container it
325:22 - doesn't really matter and this container
325:24 - right now is 400 pixels wide and 800
325:27 - pixels tall
325:29 - if we want to place a widget inside of
325:31 - this we would have to specify at least
325:33 - two but ideally four values these four
325:36 - the values we absolutely have to specify
325:39 - are these two values here those are
325:43 - crucial with these points we are placing
325:46 - the left and the top of the widget which
325:48 - is this point here in this particular
325:51 - example the top left of the widget is
325:54 - 100 pixels from the left side and 200
325:56 - pixels from the top
325:58 - besides that we can also specify the
326:01 - width and the height of the widget
326:04 - these numbers are optional if you don't
326:06 - specify them the widget is going to have
326:08 - the size of its content let's do another
326:10 - example
326:12 - we have a widget all the way at the
326:14 - bottom for this one we once again would
326:16 - have to get the top left point
326:19 - this one has zero pixels from the left
326:21 - and from the top we have something like
326:25 - let's say 500 pixels
326:28 - the widget is about let's say 200 pixels
326:31 - tall and it has the entire width of the
326:35 - window or the container which is 400.
326:39 - and that's it I hope the system makes
326:41 - sense besides that we have a relative
326:44 - values for this again we have a window
326:47 - or any kind of container but instead of
326:51 - specifying a specific width or height
326:53 - instead we separate this thing into a
326:57 - coordinate system that starts from zero
326:59 - and goes all the way to one
327:01 - and this we do both for x and for Y
327:03 - which means that this point in the top
327:06 - left always has the coordinate 0.0 and
327:10 - 0.0
327:12 - 1 4 Y and the other for x
327:15 - the bottom right point of the container
327:18 - then is 1.0 and one point for both axes
327:23 - that way if you want to place a widget
327:25 - you would have to do it like this
327:28 - instead of specifying a specific
327:30 - distance like we have done here we are
327:33 - telling the widget or the left side of
327:34 - the widget to be 10 of the width of the
327:38 - widget or at 20 from the top of the
327:40 - widget
327:42 - we can also do this with the width and
327:43 - the height for example we can tell the
327:45 - widget to have 40 percent or ten percent
327:47 - of the width or height of the container
327:49 - other than that the system works in
327:51 - exactly the same way so if we do another
327:54 - example for this widget
327:56 - the left position is still going to be
327:59 - zero let's put a zero here for the top
328:02 - position this one is going to be a bit
328:04 - larger let's say this one would be 0.6
328:08 - the height of the entire widget would be
328:11 - I don't know let's say 0.2
328:14 - finally the width of this thing is going
328:17 - to be a one because I want this to cover
328:19 - the entire width of the container
328:22 - once again that's basically it for the
328:24 - basics of place it well is quite simple
328:28 - so let's have a look at all of this in
328:30 - code
328:31 - I already have a few lines of code ready
328:34 - if I execute all of this all we can see
328:37 - is a basic window
328:39 - the reason for that is that these
328:40 - widgets are not being placed on the
328:42 - window let's create a layout then
328:45 - I am going to start with label 1 and
328:48 - this I want to place using the place
328:50 - method
328:51 - for this one we at the very least need X
328:54 - and Y coordinates
328:56 - and let me use some really simple
328:58 - numbers X being 0 and Y being zero if I
329:01 - run this now we can see label 1 in the
329:04 - top left I guess I should talk about the
329:06 - widgets we have we have three labels
329:08 - label one two and three they all say the
329:12 - same thing basically they just have
329:13 - different background colors red blue and
329:15 - green besides that we have a button
329:18 - since we only have one button I guess I
329:20 - can rename this just a button
329:22 - there we go now if I run this again we
329:25 - can see label 1 in the top left
329:28 - the reason for that is that the entire
329:31 - container the window in this case is
329:33 - going to be a coordinate system that
329:35 - goes something like this with the origin
329:39 - point being up here or rather more
329:41 - specifically up here
329:43 - this point is 0 and 0 if you want to go
329:46 - further to the right we have to increase
329:47 - X and if you want to go downwards we
329:50 - have to increase y so plus Y and plus X
329:55 - if you are only familiar with high
329:57 - school math this might be a tiny bit
329:58 - confusing because in high school math if
330:01 - you want to go up you have to increase Y
330:03 - which we are not doing in this case
330:06 - which can be a tiny bit confusing
330:08 - you will get used to it quite fast
330:11 - and well all we have to do now is play
330:13 - around with these values for example if
330:16 - I change X to 100 and Y to let's go with
330:20 - 200.
330:21 - if I run this now we can see a
330:23 - difference
330:24 - what we have is X being 100 meaning we
330:28 - have a distance of 100 pixels between
330:31 - the left side of the container this side
330:33 - here and the left side of the widget
330:35 - this distance is 100 pixels
330:39 - other than that we have y and this tells
330:42 - us that from the top of the container to
330:45 - the top of the widget we have 200 pixels
330:48 - of a difference
330:50 - what we can also do is set a width and a
330:54 - height for example the width could be
330:56 - 200 actually let's go with 300 so we
330:59 - have different numbers and for the
331:01 - height I want to go with 50.
331:03 - let's run this now and there we go the
331:06 - widget is much wider and a tiny bit
331:08 - taller
331:10 - by default a widget is only going to
331:12 - take up this space it needs to display
331:14 - the text which by default would be
331:16 - something like this
331:18 - but if we specify numbers for width and
331:20 - height we are setting the width in this
331:23 - case to 50 and the height is going to be
331:26 - 300 that's very hard to read sorry about
331:28 - that
331:30 - we can play around with the numbers here
331:32 - quite a bit for example X could be 300 y
331:36 - could be 100 and let's say for the width
331:39 - we have 100 and for the height we have
331:41 - 200 and now we get a different kind of
331:44 - witch that is all the way on the right
331:46 - to understand the numbers here we know
331:49 - that the entire widget is 400 pixels
331:51 - wide this thing is 400 pixels
331:55 - and we are placing the left side 300
331:58 - pixels from the left side of the window
332:00 - this distance here is 300 pixels
332:05 - on top of that we are setting the width
332:08 - of the widget to 100 pixels meaning this
332:10 - distance here is going to be 100 as a
332:14 - consequence the widget ends exactly on
332:16 - the right side of the container
332:18 - after that for y we have 100 meaning
332:21 - this distance here is 100 and then we
332:24 - are setting the height to 200 so this
332:27 - one here is 200.
332:30 - all of that I think should be reasonably
332:32 - straightforward
332:34 - with that we have covered the absolute
332:37 - positioning besides that we can place
332:39 - Label 2 and for this one I want to use
332:42 - relative positions this we do in a
332:45 - similar way we still have to specify X
332:47 - and Y values except now they're called
332:50 - relative X or Rel X and relative y or
332:53 - Rel y
332:55 - in here just to get started I can again
332:57 - set 0 and 0.
333:00 - running this now we can see Label 2 all
333:03 - the way in the top left
333:05 - although now I don't specify pixels
333:07 - instead if I set this to 0.5
333:10 - and let's set y to 0.2
333:15 - the top left position of the widget this
333:18 - point here is exactly in the middle of
333:20 - the window meaning we have 0.5 to the
333:24 - left and 0.5 to the right 0.5 like so
333:29 - and then from the top we have 20 but I
333:32 - think it's not too difficult to
333:33 - understand
333:34 - if we use different numbers let's say
333:36 - 0.2 and 0.1 we should be a bit closer to
333:41 - the top left
333:42 - we can also specify the width and height
333:44 - in a relative way this we do with
333:46 - relative width or with relative height
333:51 - for this one let's say I want to have 40
333:54 - of the width of the container and let's
333:57 - say 50 of the height
334:00 - and difference now we have a much larger
334:03 - container
334:04 - I think the numbers here are fairly
334:06 - straightforward I well I don't think the
334:09 - system is very difficult so it shouldn't
334:11 - be too hard to understand but drop a
334:12 - comment if you think it's super
334:13 - complicated
334:15 - what we can do as an exercise to make
334:17 - this a bit more interesting is I want
334:19 - you guys to place label three labor free
334:24 - should be positioned using absolute
334:26 - numbers meaning we have x y
334:29 - we have the width and we have the height
334:34 - and label three should be exactly in the
334:36 - same position as Label 2 meaning you
334:39 - have to convert these numbers to X and Y
334:41 - positions
334:43 - possibly now and see if you can figure
334:45 - this one out
334:48 - are to convert these numbers you have to
334:51 - know the size of the container which in
334:53 - our case is the window
334:55 - for example for X we have to convert 400
335:00 - by 0.2 which is going to be 80.
335:06 - Y is 0.1 of 600 which is just 60.
335:11 - the width is 40 of 400 which is 160
335:17 - like so and height is 0.5 of 600 which
335:21 - is 300.
335:23 - that should be all if I run this now we
335:25 - can see level 3 covering all of label 2.
335:29 - that looks pretty good and well with
335:31 - that we can see that relative and
335:33 - absolute positioning works pretty well
335:35 - together
335:37 - although that being said you do want to
335:39 - use relative positioning I can
335:41 - demonstrate why quite easily here we
335:43 - have the app again right now this is
335:45 - looking really good but once I start to
335:47 - move the window around we get some
335:50 - massive differences
335:53 - the problem here is that Label 2 is
335:56 - relative let me move it to the side like
335:59 - so
336:01 - the only widget that scales along with
336:04 - the window is label 2. this one here
336:07 - it scales along with the widget because
336:09 - we are always using relative values
336:13 - whereas label 1 and level 3 have
336:16 - absolute positioning so those two do not
336:19 - move regardless of what the window is
336:21 - doing if you wanted to scale those you
336:23 - would have to update the value every
336:25 - time you are changing the size of the
336:27 - window which would be kind of a pain in
336:30 - ninety percent of the cases you want to
336:32 - use relative positioning because this
336:33 - one is much more flexible
336:36 - there's one more case that I do want to
336:38 - cover I want to place this button and
336:41 - where I want to place it let me run the
336:43 - app again the button should be in the
336:46 - bottom right corner of the window down
336:49 - here
336:50 - this I can't really do right now
336:52 - although we can get started
336:54 - once again I want to get my button I
336:57 - want to use the place method and I want
336:59 - to use relative positioning let's set
337:01 - relative X to 1 and relative y to 1 as
337:05 - well
337:05 - if I run this now we cannot see the
337:08 - button the reason is that we are placing
337:12 - the top left of the button in this
337:14 - corner here but then the rest of the
337:16 - widget goes in this direction and this
337:19 - direction meaning the button is this
337:20 - yellow outline
337:22 - which is just outside of the window but
337:25 - we just cannot see it
337:27 - this obviously is a problem so we have
337:30 - to learn about another argument that we
337:32 - can control what is called the anchor
337:34 - when we're using the place method the
337:37 - anchor controls which point is placed by
337:40 - default if this one is the widget we are
337:42 - setting the top left point but this you
337:45 - can customize and here we have all the
337:48 - points you can use
337:50 - the default here is North West which is
337:54 - telling tkinter to place the left and
337:58 - the top of the widget which is giving us
338:00 - this point that's the default one
338:02 - that being said we could also tell
338:04 - tikenta to place the south east of the
338:07 - widget and then we will place this point
338:09 - here
338:11 - besides that you could also tell
338:12 - tikenter to place the center of the
338:14 - widget then you will place this point
338:17 - if you know the grid method this should
338:19 - look fairly familiar let's play around
338:21 - with it for my button I want to set the
338:24 - anchor and that is atrocious spelling
338:27 - that looks much better
338:28 - we need a string and I want to place the
338:31 - South East Point running this now now we
338:34 - can see the button this one works as
338:36 - always it's a button
338:38 - to see a bit better what's Happening
338:40 - Here I am going to place the center
338:43 - now we can see we can only see the top
338:46 - left area of the button
338:49 - the reason for that is we are placing
338:51 - the center of the button in the bottom
338:53 - right of the window or the container to
338:55 - be more specific that way we can only
338:57 - see the top left and the rest is cut off
339:00 - I do want to cover one extra case and
339:03 - that is using the place method along
339:05 - with a frame I want to create a frame
339:07 - with ttk and frame the master here is
339:11 - going to be the window after that I want
339:13 - to create two widgets one is going to be
339:16 - a frame label which is going to be ttk
339:19 - and label with the window as the master
339:22 - and the text could be frame label
339:27 - on top of that I want to give this thing
339:30 - a background color which we can set to
339:33 - Yellow that's the one we haven't used
339:35 - yet
339:36 - besides that I'm going to duplicate the
339:38 - entire line and change frame label to a
339:41 - frame button
339:42 - this is going to be ttk and button enter
339:46 - button is not going to have a background
339:47 - color
339:48 - also this should be frame button to be a
339:51 - bit more consistent what I now want to
339:53 - do is to place this Frame using the
339:57 - place method and also add these two
339:59 - frame labels inside of this Frame and
340:02 - for that I have already seen one problem
340:04 - and that is that this label and this
340:07 - button need to have the master as the
340:10 - frame because I want to place those two
340:12 - inside of the frame
340:14 - this I want to do in another section I'm
340:16 - going to call this one layout frame
340:19 - layout looks good
340:21 - first of all I want to place the frame
340:23 - itself which I do with the place method
340:26 - and this one I want to have the relative
340:29 - X position of 0 and the relative y
340:32 - position of 0 as well
340:34 - that way it's in the top left
340:37 - the width I want to have
340:40 - 0.3 and the relative height is going to
340:44 - be 1. that way if I run the entire thing
340:48 - we can't really see it but the frame we
340:51 - have just created is going to cover an
340:53 - area roughly this size and I am very
340:57 - very bad at drawing straight lines
341:00 - inside of this I want to place the frame
341:02 - label and the frame button
341:04 - I will start with the frame label
341:08 - I'm going to use place again for
341:10 - relative X I want to have 0 relative Y
341:14 - is also going to be 0 meaning this label
341:17 - is in the top left
341:18 - and besides that I want to cover the
341:21 - entire width so relative width is 1 and
341:24 - relative height is going to be 0.5
341:28 - and there we go we have a frame label
341:31 - that covers one third of the window
341:34 - what you really have to understand here
341:36 - is that place always works relative to
341:40 - The Container which in this case is the
341:42 - frame
341:43 - right now the width of the frame is this
341:46 - width here which means when we are
341:49 - specifying relative width of one water
341:52 - frame label we are telling this Frame
341:54 - label here to cover this entire width
341:57 - the width of the container if the frame
341:59 - label had the master as the window then
342:03 - it would cover the entire width of the
342:05 - window
342:06 - what you want to keep in mind here the
342:08 - parent or the master is incredibly
342:10 - important for layouts
342:12 - but once we have that I also want to
342:14 - place the frame
342:16 - button
342:18 - this one should take up the bottom half
342:20 - of this container relative X should
342:22 - still be zero but relative y should be
342:25 - 0.5 the other numbers I think can remain
342:29 - The Identical and that is looking pretty
342:32 - good we have separated the space in half
342:35 - and I can even drag the window around
342:37 - this is still working just fine
342:41 - cool I'm really happy with that on top
342:43 - of that for this button here the one we
342:45 - created earlier I want to set the anchor
342:47 - to Southeast so all of this looks a bit
342:50 - better
342:51 - ready with that we have covered all of
342:54 - the basics of the place method
342:56 - all we have to do now is an exercise and
342:58 - then we are done
343:00 - what I want you guys to do
343:02 - is this one here
343:04 - create a label and place it right in the
343:07 - center of the window the label should be
343:09 - half as wide as the window and beat 200
343:11 - pixels tall
343:13 - also give it a background color to make
343:15 - it a bit nicer to look at which color
343:17 - you want to choose is entirely up to you
343:22 - I am going to start by creating an
343:24 - exercise label this is going to be ttk
343:27 - and label the parent here is going to be
343:30 - the window text is going to be the
343:33 - exercise label
343:35 - finally I want to have a background
343:38 - color
343:39 - let's go with orange
343:41 - this exercise label I now want to place
343:45 - a position here has to be right in the
343:48 - center of the window which means I want
343:50 - to have a relative X being 0.5 and
343:54 - relative y should also be 0.5
343:58 - running this now we get the exercise
344:00 - label although it's not perfectly
344:03 - centered the point we have centered is
344:05 - the top left of the widget
344:07 - what I want to do is to place the center
344:10 - of the widget right in the middle of the
344:12 - window
344:13 - for that I have to set the anchor to
344:17 - Center and I am somehow unable to spell
344:20 - anchor that's right now and there we go
344:23 - this is looking much better
344:25 - finally we have to set the width and the
344:27 - height of the label it should be half as
344:30 - wide as the window and 200 pixels tall
344:33 - which means the relative with is going
344:36 - to be 0.5
344:37 - enter height is going to be 200. I can
344:41 - run this now and this is looking pretty
344:43 - good
344:44 - on this line I realized I didn't mention
344:46 - but you can combine these values quite
344:49 - easily so you could for example set the
344:51 - relative width and the height in pixels
344:53 - they work together really really well
344:56 - the same could also be done with X and Y
344:59 - for example I could set X to I know 200.
345:03 - and I think since the entire window is
345:05 - 400 pixels wide this is still putting us
345:08 - in the middle of the window
345:09 - you do want to be careful using this
345:11 - though because if you now resize the
345:14 - window like so things start to get a
345:17 - tiny bit weird so just keep that in mind
345:20 - there's one important issue that you
345:22 - have to understand about tkinter layouts
345:25 - and that is the widget's sizes because
345:28 - that can be a tiny bit tricky let's talk
345:30 - about it indicator every widget can have
345:34 - a custom size
345:36 - however what you also have to understand
345:38 - is that this size will always be
345:40 - overwritten by the layout methods you
345:43 - basically have two places where you can
345:44 - add a size of a widget but one is
345:47 - prioritized for example if we have
345:50 - something like this we are creating a
345:52 - label this label has some text but much
345:55 - more important we are giving this label
345:57 - a whiffed this specific width in this
346:00 - example is going to be 50. really
346:03 - important here this is not pixels
346:06 - TK enter uses a really weird measurement
346:08 - system where this 50 is the width of 50
346:11 - characters
346:13 - it's kind of weird but don't worry too
346:15 - much about it
346:16 - what is much more important for now is
346:19 - that we have two different kinds of
346:20 - width way after with I've just talked
346:23 - about and then we have the width of the
346:25 - pack method because in here we're
346:27 - telling the widget to fill the entire
346:30 - horizontal space
346:32 - as a consequence tkinder has to decide
346:34 - is it going to use this with here or
346:38 - this width here
346:39 - and the default answer for tkinder is
346:42 - going to be this one here tikenter
346:45 - always relies on the inbuilt layout
346:47 - methods as the main layout tool
346:50 - so if you have two different kinds of
346:51 - width the actual width you are going to
346:53 - get is the one from the inbuilt layout
346:55 - method now this might seem quite simple
346:58 - and most of the time it is but in some
347:01 - cases this can cause problems with the
347:03 - layout which is why I want to talk about
347:05 - it
347:06 - I already have a couple of lines ready
347:08 - if I execute the entire thing we have an
347:10 - app with two labels inside both labels
347:12 - have a background color
347:14 - I am importing tkinte at the top then
347:17 - I'm creating a window after that we are
347:19 - creating two labels and after that we
347:21 - are placing both labels using the pack
347:23 - method finally we are running main Loop
347:26 - to see the window
347:27 - all of this should be fairly simple and
347:30 - now we can start working on the layout
347:32 - itself or more specifically I want to
347:34 - give Label 2 a custom width label 1 is
347:37 - going to be a reference so I'm not going
347:39 - to change this which should make it a
347:41 - bit easier to see what's going on
347:43 - both labels are right in the middle of
347:45 - the window
347:46 - if I now change the width of Label 2
347:49 - with the with parameter I can give this
347:52 - a width of 50. if I run this now you can
347:55 - see we have a much wider label too
347:59 - also what I really want to emphasize
348:01 - here is that the entire width of the
348:03 - window is 400. this with here is 400 and
348:09 - this is in pixels
348:12 - however this with here of the label is
348:17 - this Dimension here and this very
348:19 - obviously is not 50. pixels
348:23 - that is not the unit we are using
348:25 - instead what the Kinder is using is 50
348:28 - whiffs of a character
348:30 - it's a very strange measurement you are
348:33 - not going to use it that much anyway so
348:35 - I'm not going to go into much detail but
348:37 - just be aware we are not using pixels
348:39 - all right but with that we have a custom
348:42 - width
348:43 - what we can also do inside of Label 2
348:46 - when we are packing it we can set the
348:49 - fill and this determines the actual size
348:51 - of the widget if I in here set this to X
348:55 - and run this again we can now see that
348:57 - the second label covers the entire width
348:59 - of the window
349:00 - which means that this for the X here
349:02 - covers the entire window while this
349:05 - width here is simply being ignored in
349:08 - practice you could just remove it and
349:10 - this is what you probably want to do 99
349:12 - of the time you simply want to use the
349:15 - layout methods to create the size of a
349:17 - widget because that way the entire
349:19 - system is going to be responsive and
349:21 - while using hard-coded numbers can be a
349:24 - problem for example if I remove this
349:26 - fill here
349:29 - we can see our label has a certain width
349:31 - again but now if I resize the window
349:33 - this doesn't change we always have the
349:36 - same width of the label which is going
349:39 - to be a problem if the window gets too
349:41 - small or if the window gets really large
349:44 - this is a general thing you want to
349:46 - understand for layouts you basically
349:48 - always want to have flexible layouts
349:50 - otherwise things can break very very
349:52 - easily
349:53 - with that covered I want to do one more
349:56 - thing right now we looked at the pack
349:58 - method but we also have to look at the
350:01 - grid layout
350:02 - for that one I want to give my window a
350:04 - couple of columns and a couple of rows
350:06 - let me start with the column with column
350:09 - configure I'm going to create two
350:11 - columns 0 and 1. both are going to have
350:16 - a weight of one and I'm going to set the
350:18 - uniform to a this I can now duplicate
350:22 - and I want to have a row configure
350:26 - I also want to have two rows with 0 and
350:28 - 1 with the same weight and same uniform
350:30 - argument that way we have four cells
350:32 - with an identical size inside of this
350:35 - one I now want to place my label 1 and
350:37 - label 2 which means label 1 dot grid
350:41 - this one I want to place in row 0. and
350:45 - column zero I can duplicate this entire
350:49 - line change label 1 to Label 2 and this
350:52 - one should be in row 1. now if I run
350:55 - this we can see we have two different
350:58 - sizes for the labels this once again
351:00 - happens because of this width here
351:04 - however I can overwrite this quite
351:07 - easily
351:07 - if I for example for Label 2 said sticky
351:12 - to north south east and west we now have
351:15 - the label covering the entire cell
351:18 - so once again the inbuilt layout method
351:21 - is overwriting the custom width we have
351:24 - set inside of the widget
351:26 - if you were using the place method the
351:28 - same thing would happen
351:30 - this can be fairly confusing and
351:32 - frustrating at times so I hope this
351:33 - helped another important part of the
351:36 - Kinder is the stacking order this one
351:38 - determines which widget is on top of
351:41 - another widget so in here I can place
351:44 - different widgets on top of each other
351:47 - especially when you use the Grid or the
351:49 - place layout method this can become
351:51 - quite important because for both of
351:53 - those layout methods it's very easy to
351:55 - place the widgets on top of each other
351:57 - so you need to be able to control which
351:59 - widget is on top of the other
352:01 - for that the most basic thing you have
352:03 - to understand is that widgets always
352:05 - placed on top of other widgets when they
352:07 - are created really important here not
352:10 - when they are placed for example we have
352:13 - two labels both are TDK label and
352:16 - nothing else the arguments here really
352:18 - don't matter and then we are using the
352:20 - grid method to place them once again I
352:23 - am ignoring the arguments here but just
352:25 - imagine they are on top of each other in
352:27 - this case Label 2 is going to be on top
352:30 - but this is because we are creating
352:32 - Label 2 after we are creating label one
352:36 - if we switch this around then label 1
352:39 - would be on top of label 2. the grid
352:42 - method itself doesn't have any influence
352:45 - on that it's kind of confusing to be
352:47 - honest but well it is what it is on top
352:49 - of that you can also raise witches to
352:52 - the top of all of the widgets or on top
352:54 - of another widget
352:56 - for this video I have something slightly
352:58 - more complex ready if I execute this I
353:01 - have two labels label one and label two
353:03 - on top of that I have two buttons in the
353:06 - bottom right we have arrays label one
353:08 - and race label two later on those are
353:10 - going to control which label is on top
353:12 - although right now they don't do
353:14 - anything inside of the code I am
353:16 - importing tkinter I am creating a window
353:19 - then I'm creating four different widgets
353:22 - I have two bits of text and two buttons
353:25 - button one and button two after that I
353:28 - have a layout section in here I am
353:30 - placing the two labels using the place
353:33 - method the arguments here are basically
353:36 - random the one important thing is that
353:38 - those two labels are overlapping with
353:40 - each other
353:41 - that way I can show you which label is
353:43 - on top of the other
353:44 - besides that we have the buttons and the
353:47 - only important thing here is that both
353:49 - buttons are in the bottom right that I
353:51 - achieved with relative y being 1 and
353:53 - relative X being 1 or 0.8 that way both
353:57 - buttons are in the bottom right with
353:58 - button one being a bit further to the
354:00 - left
354:01 - the anchor here is really important that
354:03 - way we're placing the origin point of
354:05 - the widget in the bottom right of the
354:06 - widget
354:07 - with that covered we can start talking
354:10 - about the actually important part and
354:12 - that is that right now we have label one
354:15 - being below level 2.
354:19 - the reason for that is that we are
354:21 - creating label one before label two
354:25 - I can demonstrate this by creating Label
354:29 - 2 before label one now if I run this we
354:31 - have label one in front of label 2.
354:34 - however the layout method so place in
354:37 - this case has no impact on this
354:38 - whatsoever
354:39 - if I place Label 2 before label 1 we get
354:43 - the same outcome and if I place Label 2
354:45 - after label 1 we still get the same
354:48 - result
354:49 - in my case I want to start with label 1
354:51 - and then create label 2. this means that
354:53 - Label 2 is on top of label one Now to
354:56 - control the stacking order you have a
354:58 - couple of different approaches the
355:00 - easiest one is called lift for example
355:03 - after I'm creating the widgets label 1
355:06 - and label 2 remember here Label 2 is on
355:09 - top right now so we have Label 2 on top
355:12 - but I could get my label one and then
355:16 - run the lift method on it this
355:20 - elevates label 1 on top of all of the
355:23 - other widgets alternatively I could get
355:27 - labeled 2 and then run the lower method
355:30 - on it that way we are lowering Label 2
355:34 - below all of the other widgets
355:36 - so let me add both in here so you can
355:39 - see them in the code a bit easier
355:40 - we have lift and we have lower
355:43 - besides that what we can also do let me
355:45 - comment out left and lower for now
355:47 - inside of the button let's say for label
355:51 - one for now I want to add a command
355:54 - this command is going to be a Lambda
355:56 - function because it will be very simple
355:58 - I want to get label 1 and what I could
356:01 - do is simply run the lift method
356:04 - if I now run this again
356:06 - note here label one right now is below
356:09 - Label 2 but if I click on raise label 1
356:12 - we can see label 1 is on top of label 2
356:14 - and what we can also do if I copy the
356:16 - command here now for race Label 2 I
356:20 - could get Label 2 and lower it
356:24 - so now if I run this again and now if I
356:27 - click on raise Label 2 we are lowering
356:30 - label 2. the naming here doesn't really
356:32 - make sense but I'm going to change this
356:34 - anyway in a second
356:35 - so lift and lower you can use quite well
356:38 - besides that you could also use TK rays
356:41 - and that does the same thing as lift let
356:45 - me add it for both and now if I run this
356:46 - again we can raise label 1 or race label
356:49 - 2.
356:51 - and that way we can control which widget
356:53 - is on top of the other
356:55 - you might be wondering now what is the
356:57 - difference between lift and TK rays and
357:00 - quite honestly I have no idea they seem
357:02 - to be doing the exact same thing so you
357:05 - can use whichever one you prefer it
357:07 - really doesn't make much of a difference
357:08 - so with that let's do an exercise
357:12 - I want you guys to add a third label and
357:15 - a third button meaning label three here
357:17 - and button number three
357:20 - the command for button number three
357:22 - should raise the third label all the way
357:24 - to the top pause the video now and try
357:26 - to implement this one yourself
357:32 - this should be a fairly simple thing to
357:34 - implement because all we have to do is
357:36 - duplicate Label 2 change this one to
357:38 - label three I also want to change the
357:41 - text to label 3 and for the color we can
357:43 - go with blue after that I want to create
357:46 - button number three with button number
357:48 - three this one should be race label
357:51 - three and for this one I want to have
357:53 - Labor 3 and then TK race
357:56 - with that covered I have to cover the
357:59 - layout for both the label and the button
358:02 - for label three I once again want to use
358:05 - the place method and here for the
358:07 - arguments I do want to have a different
358:09 - position so we can see this a bit easier
358:11 - the numbers I went with X being 20 y
358:15 - being 80 the width is a hundred and
358:19 - eighty and the height is simply 100.
358:22 - finally I want to place button number
358:24 - three for this I want to copy button 2
358:26 - change it to button number three the
358:30 - only change I'm going to make here is
358:31 - relative X should be 0.6
358:35 - if I run your typing now we're getting
358:37 - an error because I have some weird typo
358:40 - in here let me fix that like so and that
358:43 - is looking much better
358:45 - now let's try this there we go now we
358:47 - have label three for this one if I click
358:49 - on raise label one now we have label one
358:52 - all the way on the top the same thing we
358:54 - can do with label two and then we have
358:55 - label three so one of this is working
358:57 - quite well and you can very easily
359:00 - control which label is on top this would
359:03 - also work with literally any other
359:04 - widget
359:05 - I am simply using labels because they
359:07 - are the most easy to work with and I can
359:10 - visualize easily what's going on now
359:12 - there's one more thing that I do want to
359:14 - cover and that is that both for TK rays
359:17 - and lift we can add one argument and
359:20 - that is called Above This
359:24 - by default TK race puts a widget all the
359:28 - way on top of all of the other widgets
359:30 - but if you want to have a widget only on
359:32 - top of another widget you would use
359:35 - Above This for example for label 1 when
359:38 - I'm clicking on TK race I want to only
359:41 - elevate it on top of label 2. so if
359:45 - Label 3 is on top then label 1 would not
359:48 - be elevated all the way to the top it
359:50 - would still be below the third label
359:52 - I hope that makes sense let me
359:54 - illustrate actually so now we have Label
359:56 - 3 all the way on the top if I click on
359:59 - raise Label 2
360:00 - we have Label 2 all the way on the top
360:03 - and now if I click on raise label 1 we
360:05 - have label 1 all the way on the top
360:07 - although more specifically label 1 is
360:10 - now only going to be on top of label 2.
360:13 - if I raise Label 3 all the way again
360:17 - and now erase label one again nothing is
360:21 - going to happen because label 1 already
360:23 - is on top of label 2.
360:26 - I hope the logic makes sense here if you
360:29 - think about it for a couple of seconds
360:30 - it should be fairly straightforward
360:32 - I supposed to illustrate this a bit
360:34 - better if I raise Label 2 all the way to
360:36 - the top and now I raise Label 3 on top
360:39 - of it now if I click on Race table 1 the
360:42 - green bit is going to be on top of the
360:44 - red bit but below the blue bit so Ray
360:47 - stable one there we go label 1 is on top
360:50 - of label 2 but below level 3. the above
360:53 - this argument would also work with lift
360:55 - I can run this again and we would have
360:58 - the very same outcome
360:59 - once again I don't really know what are
361:02 - two different methods for the same thing
361:03 - but choose whatever you want it really
361:06 - is up to you
361:08 - a really important aspect of tkinter is
361:10 - toggling widgets what that means in
361:13 - practice
361:14 - is something like this we have a label
361:17 - and I want to talk that meaning I'm
361:20 - switching it on or off or visible or
361:22 - invisible whatever you want to call it
361:26 - this is actually quite simple if you
361:28 - know what you are doing in tkinder so
361:30 - let's talk about it inside of tikinta
361:33 - you don't really hide or show widgets
361:34 - instead what you're doing is you are
361:37 - removing or adding widgets to the layout
361:40 - chances are you already know how to add
361:42 - widgets this either happens with pack
361:44 - Grid or place but all of these methods
361:48 - also have the opposite for example for
361:50 - the pack method we have pack for get and
361:53 - this one does the opposite of the pack
361:55 - method it removes a widget all of this
361:58 - can also be done while the app is
361:59 - running and if you know how to use it
362:01 - you can hide and show witches quite
362:04 - easily I already have a couple of lines
362:06 - of code ready I am importing decanter I
362:09 - am creating a window and I'm running the
362:11 - entire thing
362:12 - so this is what we're getting
362:15 - but now we have to cover a couple of
362:17 - things for every single layout method we
362:20 - have to look at the actual layout method
362:22 - and how to do the opposite and let's get
362:25 - started with the place method this one I
362:27 - think is the easiest one to understand
362:29 - we first of all have to create a button
362:32 - let me call it ttk and button with the
362:36 - window being the parent and the text is
362:38 - going to be toggle
362:40 - label
362:42 - finally this one is going to get a
362:44 - command that I'm going to call toggle
362:47 - label place
362:50 - we're going to create this one right
362:52 - away under the place method so all of
362:54 - this is a bit easier to put together
362:56 - toggle Place method no need for
362:59 - parameters and for now I'm just going to
363:01 - add paths in here finally I want to add
363:04 - the button and let's use the place
363:06 - method for that
363:08 - since the button isn't going to do
363:09 - anything besides being clicked on the
363:11 - position here doesn't matter let's go
363:13 - with X being 100 and Y being 50.
363:17 - so now if I run the entire thing in the
363:18 - top left we have a button although I
363:21 - guess it's a bit too far down let's
363:23 - change this to 10 and 10. like so now we
363:27 - have a button in the top left
363:29 - that I can click on but nothing's going
363:30 - to happen to make something happen we
363:33 - need another widget I'm going to call
363:34 - this one label but it's going to work
363:36 - with any widget and in here I want to
363:39 - create TDK label with the parent being
363:41 - the window and the text is going to be a
363:45 - label
363:46 - and this label I want to place in the
363:48 - center of the window which means label
363:51 - dot Place relative X is going to be 0.5
363:55 - relative Y is going to be 0.5 and the
363:59 - anchor is going to be the center
364:03 - let me fix my typo really quick and if I
364:06 - run this now in the middle of the window
364:08 - we have a label
364:10 - what I now want to do is if I click on
364:12 - toggle label this label should ever be
364:15 - hidden or shown I'm going to start by
364:18 - simply making this label disappear this
364:20 - is going to happen inside of this
364:22 - function
364:23 - to achieve that all we have to do is get
364:26 - the label and then Place forget
364:30 - this is going to remove this label here
364:34 - and well then we can't see it anymore so
364:37 - now if I click on toggle label the label
364:40 - disappears although the problem is if I
364:42 - click on it again nothing is going to
364:44 - happen because well we can only really
364:47 - forget it once this doesn't work a
364:49 - second time but the basic logic is in
364:52 - place here we have a widget that's
364:54 - visible in the first place and then we
364:56 - make it invisible
364:58 - but to make this actually interesting we
365:00 - want to have a proper toggle
365:02 - functionality and for that I want to
365:04 - create another variable I call this one
365:07 - label visibility
365:10 - by default this one is simply a Boolean
365:13 - value of true this I want to update
365:15 - inside of this function which means this
365:18 - needs to be a global variable so Global
365:20 - label visibility I should probably
365:23 - rename this a tiny bit let's call it
365:25 - label Visa bill
365:28 - that is making much more sense
365:30 - and essentially what I want to do if I'm
365:33 - clicking this button I'm going to check
365:34 - if the label is visible or not which
365:38 - means if label visible if that is the
365:43 - case I want to forget this label
365:47 - besides that I also want to get label
365:50 - visible and set it to volts
365:53 - once I have that I can create an else
365:56 - statement and now if I'm running this
365:58 - function here I know the label is not
366:01 - visible because label visible is false
366:03 - if that is the case I want to set label
366:07 - visible back to True finally all I have
366:11 - to do is run this method here again I am
366:14 - reattaching the label to the window or
366:17 - to any kind of container this would also
366:19 - work with frames which means I can
366:21 - simply copy this entire line here paste
366:24 - it in there and now if I run the entire
366:26 - thing I can click on toggle label the
366:29 - label disappears and I can click on it
366:31 - multiple times and now we make it appear
366:33 - or disappear
366:35 - and this is basically all you need to
366:38 - toggle a label or literally any kind of
366:40 - widget
366:41 - so for example this label here could
366:43 - also be a button now we have a button
366:46 - and this one would still work just fine
366:48 - although I'm going to keep it being a
366:50 - label
366:52 - and this is the basic logic that you
366:54 - have to understand besides place we also
366:57 - have grid so let's work with this one
367:00 - next I now want to work on the grid for
367:03 - this one first of all we have to create
367:05 - a couple of rows and columns which means
367:08 - I want to get my window and run column
367:11 - configure I want to have two rows zero
367:15 - and one that have the same weight let's
367:18 - go with one and I also want to set Yoon
367:21 - form to a so they are the same size like
367:25 - so besides that I am duplicating the
367:28 - entire line and change the column to a
367:30 - row although I only want to have a
367:33 - single row so this isn't going to be a
367:35 - tuple it's just going to be a zero with
367:37 - that in place I want to create a label
367:40 - and a button
367:42 - exactly the same thing I have done here
367:45 - as a matter of fact I'm going to copy
367:47 - all of this and paste it in here and
367:50 - uncomment the entire thing
367:52 - the button is going to be basically
367:54 - identical the only thing that's going to
367:56 - change is I'm not going to use place
367:58 - instead I'm going to use grid
368:01 - the button is going to be in column 0
368:04 - and row 0.
368:07 - for the label I still have label visible
368:09 - being set to true I am creating a label
368:12 - but I'm not using the place method to
368:14 - place it instead I'm going to use grid
368:17 - the label I'm going to place in column
368:20 - being 1 and row being 0. if I run the
368:24 - entire thing now we are getting an error
368:26 - that we are using a function that
368:28 - doesn't exist right now let me remove it
368:31 - and run the entire thing again there we
368:33 - go we have toggle label right next to
368:36 - e-label although nothing is going to
368:38 - happen if I click on the button for that
368:40 - we have to create the command once again
368:42 - this one is going to be toggle label
368:46 - except now we're using grid the basic
368:49 - logic here is going to be the same as in
368:51 - place
368:52 - but let's create the function itself
368:54 - Define I called this one toggle
368:59 - label grid only for parameters and then
369:03 - here we are going to do the same thing
369:05 - we have done up here
369:07 - but for good practice let's do it from
369:09 - scratch and if you want to practice
369:11 - yourself try to do all of this yourself
369:13 - all you need here are grid and grid
369:16 - forget but in my case I want to start by
369:18 - creating Global label visible that way
369:22 - we can change this variable here from
369:24 - inside of the function if the label is
369:27 - visible
369:29 - I want to get my label and I want to run
369:34 - grid underscore forget
369:37 - besides that I want to set label visible
369:41 - to true this we can already test if I
369:45 - run the entire thing now and I click on
369:46 - toggle label the label disappears
369:49 - although if I click on it a second time
369:51 - nothing is going to happen that is the
369:53 - functionality we have to work on right
369:54 - away so else I want to set label visible
369:58 - back to true and then I have to run this
370:03 - grid method here one more time
370:05 - so I can just copy it paste it in here
370:07 - and now this should be working let's try
370:09 - if I now click on toggle label the label
370:12 - disappears if I click again
370:14 - nothing is going to happen so something
370:16 - went wrong I can already see the problem
370:19 - this label visible here should be false
370:23 - now let's try it again if I click on
370:25 - toggle it disappears if I click again it
370:28 - reappears this is looking really good
370:31 - cool with that we have the grid method
370:34 - and this basically works in the same way
370:37 - the displays method here is going to
370:38 - work and both of those are working
370:41 - really well because the layout isn't
370:44 - really affected by other widgets so
370:46 - where we are placing the label isn't
370:48 - really affected by the placement of the
370:50 - button each of those either have their
370:52 - unique positions like in place or their
370:55 - own unique cells like in the grid this
370:57 - is going to be different for the final
370:59 - layout method and this is going to be
371:01 - for pack for this one once again I want
371:05 - to copy the button and the label
371:07 - place them in here and uncomment them
371:10 - and those I simply want to place using
371:12 - the pack method
371:14 - also let me get rid of this command here
371:16 - so we're not going to take an error
371:19 - if I run the typing now we get the two
371:21 - widgets right next to each other what is
371:24 - really important to understand here is
371:26 - that the position of this label is
371:28 - influenced by this button the pack
371:30 - method always places widgets on top of
371:33 - each other and this is kind of a problem
371:36 - when we're using pack for get
371:38 - let me demonstrate and then you're going
371:40 - to see how this is going to work
371:43 - although I want to make some changes
371:44 - this button I want to have all the way
371:47 - at the bottom of the window so I'm going
371:49 - to pack it after the label and the label
371:51 - I am going to set to expand to cover the
371:55 - entire window
371:56 - if I run the entire thing now the label
371:58 - is basically in the middle of the window
372:00 - and the button is all the way at the
372:02 - bottom
372:03 - now we can work with this
372:05 - if I press on the button I want to run a
372:08 - function which means I have to use
372:10 - command again and I want to toggle
372:14 - label pack for this we have to create
372:18 - another function toggle label pack once
372:21 - again no need for parameters and in here
372:24 - I can already demonstrate what the
372:26 - problem is going to be if I simply run
372:28 - label and pack forget
372:31 - try to predict what is going to happen
372:34 - but well let me run the entire thing and
372:37 - now if I click on toggle label the
372:39 - button is going to be all the way at the
372:41 - top the reason being that originally the
372:44 - label covered all of this space and then
372:47 - the button was placed at the bottom here
372:49 - but since we got rid of the label this
372:52 - entire thing here disappeared and the
372:54 - button is now all the way at the top
372:57 - and this is going to be a problem that
372:59 - we have to account for and accounting
373:01 - for that is going to be your exercise
373:03 - what I want you guys to do is to fix the
373:06 - code so the button stays at the bottom
373:09 - pause the video now and try to figure
373:10 - this one out as a tip here try to use a
373:14 - widget that is by default invisible
373:19 - righty this solution here is if I run
373:23 - the entire thing again by default we
373:25 - have two widgets we have a label and we
373:28 - have a button with the label taking up
373:31 - this entire space here
373:33 - what I want to do is create a third
373:36 - widget and this one is going to cover
373:38 - the same space as the label although it
373:42 - is not going to have any content
373:45 - this could either be a frame or a label
373:48 - without any text both would be fine in
373:50 - my case I'm going to work with a frame
373:52 - and this Frame is only going to be
373:54 - placed when the label is invisible
373:57 - that way the button has something to be
373:58 - stacked below but let's Implement all of
374:01 - this step by step first of all I want to
374:04 - create another widget this is going to
374:06 - be the frame
374:08 - this is simply going to be ttk and frame
374:11 - and the parent here is going to be the
374:13 - window
374:14 - we're not going to place this one right
374:15 - away instead inside of the toggle label
374:19 - pack function I want to once again set
374:23 - the label visible as a global variable
374:26 - and now I can use the if statement again
374:28 - if the label is visible then I want to
374:33 - pack forget the label I also have to set
374:37 - label visible to false
374:40 - but now what I also want to do is to get
374:43 - the frame
374:45 - and pack this one
374:47 - on top of that since the frame is
374:50 - supposed to take up the entire space
374:52 - that the label has taken I want to set
374:55 - expand to true so expand is going to be
374:58 - true
375:00 - and now if I run this I can click on
375:02 - toggle label and we have the same
375:04 - problem
375:05 - and the issue here right now is
375:09 - when we are placing the widgets this
375:11 - label Here Comes as number one and then
375:13 - we are placing the button number two
375:17 - so in the original widget we had the
375:20 - label something like this position and
375:23 - then we add the button below this
375:25 - position here
375:27 - and the button moved all the way to the
375:29 - top once removed this label here
375:32 - the problem now is that once we're
375:35 - adding this frame with the pack method
375:38 - we are adding it below the button so the
375:41 - label is going to be here
375:43 - which for our purposes is not going to
375:46 - be useful
375:47 - we have to find some kind of method to
375:50 - place the frame on top of the button
375:53 - and this we can do quite easily because
375:55 - the pack method has another useful
375:57 - feature
375:59 - that is called B4
376:01 - we can tell the frame method to pack a
376:04 - widget before a certain other widget
376:06 - the widget we want to pack the frame
376:08 - before is the button
376:11 - and now if I run this again I can click
376:14 - on toggle label and the button stays all
376:16 - the way at the bottom
376:17 - the reason for it is that now we have
376:20 - created this Frame here and packed it
376:24 - before the button so it is going to be
376:27 - in this position
376:28 - if you play around with this this should
376:30 - become fairly obvious although most of
376:32 - the time when you're hiding or showing
376:34 - widgets you want to use either place or
376:37 - a grid because this tends to get a tiny
376:40 - bit more complicated
376:41 - but let's finish it and then we can wrap
376:43 - up this video I want to have else
376:46 - I first of all want to get the frame
376:48 - again and now run pack or get
376:51 - this Frame should only be there when the
376:54 - label is not visible once the label is
376:56 - visible it is going to take up the
376:58 - entire space of this Frame
377:01 - which means I also have to get the label
377:03 - back which I'm doing with the pack
377:04 - method
377:05 - and this one needs expand being true and
377:09 - also we have to use before again I want
377:12 - to have this labeled before the button
377:15 - and finally label visible is going to be
377:18 - true
377:19 - let's run this one and now if I click on
377:22 - toggle label this one is working really
377:24 - good
377:25 - so with that we can toggle widgets hope
377:27 - that was helpful
377:29 - in this video we are going to combine
377:31 - the different layout methods in tkinter
377:34 - what we are going to make is going to
377:36 - look something like this
377:37 - here we have a fairly complex UI that
377:41 - also scales along with the window
377:45 - this is what we're going to create and
377:47 - for that we're going to use Place pack
377:49 - and grid they all work together really
377:51 - well for all of this
377:53 - later on when we can style things this
377:55 - is going to look actually good but we
377:57 - are definitely making progress
377:59 - and before I jump in I do want to talk
378:02 - about the layout here it's quite
378:04 - important to understand
378:05 - on the most fundamental level we are
378:07 - separating the UI into two parts which
378:10 - is going to be two frames one is here
378:12 - and one is here
378:14 - both of those are placed with the place
378:18 - method
378:20 - inside of the left container this one
378:23 - here we are mostly using the grid method
378:25 - for example here's one row here's
378:28 - another row and here's a row at the end
378:30 - and then we have a couple of columns
378:32 - they are three in total
378:35 - you can see this quite well with the
378:36 - sliders they are on the left and on the
378:38 - right column
378:40 - although that being said in the bottom
378:43 - there is one frame that covers the
378:46 - entire width of the column inside of
378:49 - that one we are using the pack method to
378:51 - place these two check boxes
378:53 - finally
378:55 - the entry widget here at the bottom it's
378:57 - kind of hard to see this one is placed
379:00 - using the place method that way it's
379:02 - always at the bottom in the middle after
379:05 - that we have this entire area
379:08 - for this one I am using the pack method
379:10 - to create these two areas
379:14 - with each area being one frame and
379:17 - inside of the frame we are creating
379:19 - another directional layout that is just
379:22 - going to contain a label and a button
379:25 - I already have a few lines of code and I
379:28 - realized the title I didn't change from
379:30 - grid this should be combined layout
379:35 - but other than that we have a window
379:37 - that's 600 by 600 pixels
379:40 - although there's one thing I already
379:42 - want to do and that is I want to get my
379:44 - window and set a minimum size
379:48 - like so the minimum size should be 600
379:51 - by 600 that way the window cannot be too
379:54 - small which would end up looking very
379:56 - strange
379:57 - once we have that we can start by
379:59 - creating the main layout widgets I call
380:03 - them
380:04 - for this one I have a menu frame and I
380:08 - have a main frame
380:11 - both of those are going to be ttk and
380:16 - frame with the parent being the window
380:19 - those two I now have to place and this I
380:22 - do let me add another comment Main Place
380:25 - layout I'm going to use the place method
380:28 - to place these two frames
380:30 - for example I want to have the menu
380:32 - frame I want to use place and now I have
380:36 - to specify an X position a y position a
380:39 - width and a height
380:41 - since I want a menu frame always to be
380:43 - on the left side x is going to be 0 and
380:48 - Y is also going to be 0. you could use
380:52 - relative values here but since we are
380:54 - using 0 it really doesn't matter it's
380:56 - going to give you the same result
380:58 - although for the width I do want to get
381:00 - the relative width
381:03 - this is going to be 0.3 in my case and
381:06 - finally for the height I want to have a
381:09 - relative height that is going to be 1.
381:11 - if I run this now we can't see anything
381:14 - because frames by themselves are
381:16 - invisible although we can make this
381:19 - visible by creating a ttk label with the
381:23 - parent being the menu frame and this one
381:26 - is going to have a background of red
381:29 - this I want to pack
381:31 - right away
381:33 - and in here I'm going to set expand to
381:35 - true and fail to both
381:38 - if I run this now we can see the entire
381:41 - area of the menu frame
381:43 - with that we can create the Mainframe
381:46 - and the Mainframe is going to take up
381:48 - the entire remaining space
381:51 - which means for place I want to set e
381:55 - relative X position
381:58 - and this one is going to be 0.3
382:02 - I know I have to use 0.3 because the
382:04 - width of the menu is also 0.3 that way
382:07 - those two start on the same point
382:09 - the Y position though is still going to
382:12 - be zero both of the widgets are supposed
382:14 - to start on the top of the window
382:17 - after that I want to have a relative
382:19 - width and this is going to be 0.7 the
382:23 - number here should be obvious with the
382:25 - width and the height we have a total
382:27 - number of one so we are covering the
382:30 - entire rest of the window
382:31 - finally I want to have a relative height
382:34 - and this one is going to be 1. to
382:36 - visualize this I want to copy the label
382:39 - and change the background color to
382:41 - yellow and the master is going to be the
382:45 - main brain
382:46 - let's try this one now and there we go
382:48 - we have covered the entire area of the
382:51 - window I can also resize this and this
382:54 - is looking pretty good
382:55 - I guess if you make the window too large
382:57 - the left side is going to become quite
383:00 - large but I'm not going to worry too
383:02 - much about it
383:03 - let me comment out those two lines I'm
383:06 - going to reuse them in a bit for some
383:08 - debugging just to see what we are doing
383:11 - next up I want to create the menu layout
383:14 - widgets
383:16 - I guess we could just call this menu
383:17 - widgets
383:19 - for those I have to create quite a few
383:22 - different widgets
383:23 - to save some time let me just copy them
383:25 - in we have to create all of these
383:28 - widgets we have three buttons button one
383:31 - button two and button three then we have
383:33 - two sliders slider one and slider two
383:35 - then we have a toggle frame and inside
383:38 - of this toggle frame we have two toggles
383:41 - toggle one and toggle two both of the
383:43 - toggles are just going to be check
383:45 - buttons
383:46 - I guess just to get started I can
383:48 - comment out the toggle frame so we only
383:51 - have a couple of buttons and a couple of
383:53 - Sliders
383:54 - these I want to place now
383:57 - now I want to create the menu layout
384:00 - since I want the menu to have the grid
384:02 - layout I have to create the columns and
384:05 - the rows which I Do by getting my menu
384:08 - frame and then creating column configure
384:13 - I want to have three columns which means
384:16 - I'm going to create a tuple with 0 1 and
384:19 - 2.
384:20 - the weight I'm going to set to 1.
384:23 - besides that I want to create a row
384:26 - configure and I want to have
384:29 - three and four
384:32 - rows in total all of which have the
384:34 - weight of one once I have that I can
384:37 - actually place things for example I can
384:40 - get menu button one
384:42 - and I want to use the grid method the
384:44 - button here should be in row zero column
384:48 - 0 as well and let's just see what we get
384:53 - we get an error because I have made a
384:55 - typo this should be column configure
384:58 - let's try it now and there we go we can
385:00 - see button one in the top left the
385:03 - button doesn't cover the entire area for
385:06 - that we are going to need the sticky
385:09 - argument
385:10 - and I want a button to stick to the
385:12 - north south west and east of the
385:15 - container or the cell and now if I run
385:17 - this we have button one in the top left
385:20 - finally I want this button one to be a
385:22 - tiny bit wider for that I'm going to set
385:25 - the column span to two it's going to be
385:29 - very hard to see right now but this
385:31 - button is now going to span two columns
385:34 - once I have that I can duplicate the
385:36 - line and now I want to place button 2.
385:40 - this button is going to be on row 0 but
385:43 - on column 2.
385:45 - it is only going to span one column
385:48 - though
385:49 - and I want to stick the widget to all
385:51 - four sides of the cell
385:53 - let's run this one now and there we go
385:55 - we have button one and button two with
385:57 - button one being much wider than button
385:59 - two
386:00 - if I expand the window you can see this
386:03 - much better
386:04 - to really make these columns and rows
386:07 - consistent I want to add the uniform
386:09 - argument
386:11 - uniform and I'm going to set the
386:13 - argument here to a it doesn't really
386:15 - matter what it is as long as those two
386:17 - identical strings
386:19 - now if I run this we can actually see
386:22 - that button one is twice as wide as
386:24 - button two that looks much better
386:26 - after that I want to place menu button
386:29 - three
386:30 - this is again going to use the grid
386:32 - method
386:33 - I want to set the row to 1 and the
386:37 - column to zero
386:40 - column span is going to be free and
386:44 - sticky is going to be north south east
386:48 - and west
386:49 - with that we are creating a button that
386:52 - spans the entire second row the result
386:55 - is going to be three buttons in this
386:57 - kind of layout
386:58 - next up I want to place the sliders
387:01 - these two sliders here both already have
387:04 - the orientation of vertical that's why
387:07 - they're going up and down and just to
387:09 - demonstrate I want to have the sliders
387:11 - here and here which means I want to get
387:15 - my menu slider 1 and I want to use the
387:19 - grid method again
387:21 - the row should be number two here and
387:24 - column is going to be zero I want the
387:27 - row span
387:29 - to be 2.
387:31 - and finally I want to set sticky to all
387:34 - four sides so north south east and west
387:37 - running this now gives me one of the
387:39 - sliders although I don't like how close
387:43 - this is to the buttons
387:46 - to account for that I want to set pad y
387:48 - to let's say 20 pixels
387:51 - and now we have a bit of a distance
387:53 - between the two which I think looks much
387:55 - better
387:56 - this I can now duplicate because I want
387:59 - to place slider 2.
388:01 - or this one I want to have column two
388:04 - and Row 2 can stay the same in fact all
388:07 - of the other arguments can also remain
388:09 - identical
388:10 - if I run this now we have both of the
388:13 - sliders this is looking really good
388:15 - with that we can place a slightly more
388:18 - complicated layout and that is the
388:21 - toggle
388:22 - layout the one I have created here and
388:25 - commented out for now
388:28 - this one is going to be one frame and
388:31 - the frame consists two toggle or two
388:33 - check buttons to be more specific
388:36 - in terms of my layout though I can work
388:38 - with these separately for example I
388:40 - first of all want to get my toggle frame
388:42 - and use the grid method to place it
388:45 - I want this one to be in row number four
388:50 - and the column is going to be zero
388:53 - although I want this
388:56 - frame to span the entire width of the
388:59 - container so column span is going to be
389:01 - free what I also shouldn't forget is I
389:04 - want to set this to Sticky
389:06 - with north south east and west just to
389:09 - be sure
389:10 - and if I run this now we can't see
389:12 - anything the reason is again frames are
389:16 - invisible
389:18 - we can use the ttk label again I created
389:20 - earlier I now want to set the toggle
389:23 - frame as the master run this again and
389:26 - there we can see we are covering the
389:28 - entire bottom bit
389:30 - so I want to comment this out again and
389:32 - now I want to use this area to place
389:35 - these two toggle buttons for that I am
389:38 - going to use the pack method
389:40 - I want to get my menu toggle one and
389:45 - pack the entire thing
389:47 - since I want both of these toggles next
389:49 - to each other I want to set this side to
389:52 - left
389:53 - and I want to set expand to Rue
389:57 - this line I can now duplicate and change
389:59 - toggle 1 to toggle 2. and let's see what
390:02 - we get
390:03 - that is looking really good
390:06 - we have both of the toggles right next
390:08 - to each other
390:09 - I hope here you can see how it is really
390:12 - easy to combine different kinds of
390:14 - layouts we have created the main layout
390:17 - using the place method then we have
390:20 - created a grid inside of one of the
390:22 - frames and inside of this grid we have
390:25 - created another frame with the pack
390:27 - method
390:28 - that way using containers gives you a
390:30 - ton of power
390:32 - finally what I want to do is I want to
390:35 - place the entry let me call it entry
390:37 - layout
390:38 - for this entry
390:41 - this entry doesn't exist right now
390:43 - actually I want to create it when I'm
390:46 - importing all of the widgets here
390:47 - I want to create an entry widget and
390:50 - this I do with ttk and entry the parent
390:53 - is going to be the menu frame
390:57 - this entry I now want to place using the
391:01 - place method since I want this entry
391:04 - widget to be in the middle at the bottom
391:06 - I want to use relative X being 0.5
391:10 - then relative Y is going to be
391:14 - 0.95 and I want to set the relative
391:18 - width to 0.9
391:22 - if I run this now we get something
391:25 - slightly weird or well if you understand
391:27 - place this should be familiar right now
391:30 - we are placing the top left point and
391:32 - this one is right in the center of the
391:35 - container right here
391:38 - the reason we get that is because we
391:40 - haven't update the anchor
391:42 - for that we have the anchor argument and
391:45 - I want to place the center of this entry
391:48 - widget
391:49 - let's try it now and this is looking
391:51 - much better this entry widget is now
391:54 - always going to be all the way on the
391:55 - bottom of this container
391:57 - you could have also used another row
392:00 - inside of row configure to place the
392:02 - entry widget using the grid method
392:05 - although in my case I just want to
392:06 - demonstrate that you can combine
392:08 - different layout methods
392:10 - although that has its limits you
392:14 - couldn't combine a grid and a pack
392:16 - method for example if I wanted to
392:18 - comment out this one here and use entry
392:21 - dot pack without any arguments run this
392:24 - we're getting an error the error message
392:26 - we get is cannot use geometry manager
392:28 - with pack inside the reason is we
392:31 - already have the grid method in here
392:33 - this though only applies to entry
392:36 - place is perfectly fine ready next up we
392:40 - can create the main layout
392:43 - unfortunately for that we need a few
392:47 - more widgets so let me add another
392:49 - section called main widgets and I'm
392:52 - going to copy in the widgets I am going
392:54 - to need
392:55 - like so
392:56 - I have one more frame that I called
392:59 - entry frame one inside of this Frame we
393:02 - have a label and a button alt label one
393:05 - and button one
393:06 - both are super super simple the one
393:10 - notable feature here is that both of
393:12 - them have the parent or the Masters
393:13 - entry frame one this one here
393:16 - this we're doing two times one time here
393:19 - and one time here
393:21 - entry Frame 2 main level 2 and button
393:24 - two are basically identical to the first
393:26 - one which means what I want to do if I
393:29 - run the entire thing again
393:31 - over this entire space here I want to
393:34 - use the pack method to create two large
393:36 - areas one could look like this and one
393:39 - is going to look like this both of these
393:41 - are going to be frames
393:43 - inside of each frame we are going to
393:45 - place the label and then we are going to
393:47 - place the button
393:49 - which means
393:51 - we have to get started by placing entry
393:53 - 1 and entry 2.
393:55 - for that I want to get entry one and use
393:58 - the pack method
394:00 - since I want both of these frames next
394:02 - to each other I want to set the side to
394:05 - left
394:07 - other than that I want to set expand to
394:10 - true so we are covering the entire
394:12 - horizontal space and I want to set fill
394:14 - to both this I can now duplicate and set
394:18 - entry 1 to entry 2. all of the arguments
394:21 - though can stay identical
394:23 - this if I run this again is not going to
394:25 - be visible because once again frames are
394:28 - invisible but I can once again use these
394:32 - two labels to make all of this visible
394:34 - the master for the first one is going to
394:37 - be entry frame 1 and the master for the
394:39 - second one is going to be entry frame 2.
394:42 - if I run this now this is looking pretty
394:45 - good although I do want to have some
394:47 - padding between the two
394:50 - I want to create pad X
394:53 - I went with 20 here and I want to create
394:56 - pad Y which I also set to 20. now if I
394:59 - run this again we have a bit of padding
395:02 - around them
395:03 - ready with that finally I can get rid of
395:05 - these two labels at the end and instead
395:08 - place all of these labels and buttons
395:12 - I'm going to start with main label one
395:15 - the side is going to be the top since
395:17 - that is the default argument I can just
395:19 - leave this empty although I do have to
395:21 - set expand to true and
395:24 - Bill to both
395:27 - this line I can duplicate again because
395:29 - now I want to place main button one this
395:33 - one up here
395:34 - this is also going to get expand true
395:36 - and fill both let's try it actually
395:39 - there we can see we have the label and
395:41 - the button
395:42 - what I don't like is that those two are
395:45 - right next to each other to account for
395:47 - that I'm going to give the button pad y
395:51 - of 10 pixels now we have a tiny bit of
395:54 - space between the two
395:56 - with that all I have to do is copy all
395:58 - of this
396:00 - duplicate it and I can just change main
396:03 - label one to two and Main button one to
396:05 - two the result is going to look like
396:07 - this
396:09 - and with that we have a fairly
396:11 - complicated layout that is well working
396:14 - quite well
396:15 - obviously we have no functionality but
396:18 - in terms of layouts this is basically as
396:20 - complex as taking the widgets are going
396:22 - to be
396:23 - now that being said all of this is still
396:27 - not particularly manageable because we
396:30 - have a ton of different sections and
396:32 - this isn't Pleasant to work with
396:35 - but all of this is going to be much
396:37 - easier managed when we are using classes
396:40 - and this is going to be the next video
396:42 - but if you want to challenge yourself a
396:45 - really good exercise could be to convert
396:48 - all of this to a class-based approach
396:51 - see if we can figure this one out
396:53 - although if you can't do it don't worry
396:54 - too much about it I'm going to cover all
396:56 - of this in the next video I'll guess
396:58 - I'll see you there let's talk about
397:00 - using classes in tkinter and what we are
397:03 - going to make is going to look something
397:04 - like this this is the same layout we
397:07 - have seen on the last part except now we
397:09 - are using classes to organize all of
397:11 - this which is making the entire app
397:13 - significantly more manageable
397:16 - let's talk about it and then we can
397:18 - Implement all of this
397:19 - the most important thing that you have
397:21 - to understand is that we are basically
397:24 - always taking some kind of widget
397:25 - usually a frame but it doesn't have to
397:28 - be and then we're adding widgets to this
397:30 - Frame and then in the end we are placing
397:33 - this Frame somewhere on the window
397:35 - that way we can organize lots of widgets
397:38 - very very easily
397:39 - if you understand basic tkinter this
397:42 - shouldn't be too difficult to implement
397:43 - although to make all of this work let me
397:46 - show you my setup
397:47 - here I have two python files open on the
397:51 - left side we have classes dot Pi this is
397:53 - what I'm going to work in on the right
397:55 - side we have the previous code from the
397:57 - last video this is the same layout or
398:00 - the same app except that we are not
398:02 - using any classes
398:05 - so what we're going to do in this video
398:06 - is convert all of this into class based
398:09 - approach
398:11 - that way I can switch between the two
398:13 - and illustrate what's going on
398:16 - now first of all we have to import the
398:18 - basics this I can just copy straight
398:21 - away I want to import tkin to SDK and I
398:23 - also want to have ttk now that we have
398:25 - that I want to create a class I'm going
398:28 - to call this app but you can name this
398:30 - whatever you want
398:31 - this app is going to become the window
398:35 - essentially this bit here is what we
398:38 - have to turn into a class
398:40 - the really important thing here that
398:42 - might be a little bit complicated is
398:44 - that this app is going to inherit from
398:47 - tk.tk which means that the app here is
398:51 - going to be the main window
398:53 - let me implement it straight away this
398:56 - app is supposed to inherit from TK dot
398:58 - TK in the function based approach this
399:01 - one here we have stored this object
399:03 - inside of the window variable
399:06 - in the class-based approach we are
399:08 - storing the object itself
399:10 - once we have that I want to call a
399:12 - Dunder init method
399:15 - for now this one just needs self and
399:17 - nothing else
399:18 - in here there's one really important
399:20 - thing that we have to do before anything
399:22 - else and that is to call Super and
399:25 - thunder in it
399:27 - this ensures that this TK functionality
399:30 - works properly
399:31 - although besides that we don't have to
399:33 - add any arguments so this one can stay
399:35 - as it is
399:36 - with these lines of code we basically
399:39 - have replicated this one line of code
399:42 - here so far we have just become less
399:44 - efficient but what we can do now is get
399:47 - self and for example set the title the
399:50 - title could be something like class
399:54 - based app
399:56 - this would be the equivalent of this
399:58 - line here let me expand it a tiny bit
400:01 - like so
400:02 - in the function based approach we got
400:04 - the object which we called window and
400:06 - then we called the title method on it
400:08 - this we can simplify here a tiny bit
400:10 - because the object itself is well self
400:13 - and we can still call the method on it
400:16 - because we inherited the entire object
400:19 - and this is one method of it
400:21 - to illustrate how all of this is going
400:23 - to work let me go all the way down in
400:25 - the functional approach and run
400:27 - window.main Loop in the class-based
400:29 - approach this would be self dot main
400:32 - Loop without any arguments
400:35 - with that approach we can simply create
400:39 - an instance of this object and run it
400:42 - and if I execute the entire code now we
400:45 - can see we have a window that also has
400:47 - the same title class based approach
400:50 - there you can see it better
400:52 - although right now our app is one class
400:55 - that is a lot easier to manage not for
400:58 - now but it is going to be much easier
401:01 - so besides that I want to also duplicate
401:04 - these two bits here which means inside
401:07 - of window I want to get self and I want
401:10 - to set the geometry of this class or
401:13 - this app
401:14 - to duplicate this I want to have the
401:16 - same Dimension 600 by 600. I can run
401:20 - this again and there we go we have a
401:22 - larger window
401:23 - the same I can do if I duplicate this
401:25 - line I can set the minimum size here
401:28 - for this one we just want two numbers
401:30 - with 600 and 600. that way if I run this
401:34 - again I cannot make the app smaller than
401:37 - 600 by 600.
401:39 - and with that we have copied all of this
401:43 - here to set up our window
401:46 - although I do want to make some minor
401:48 - changes and that is I want to set the
401:51 - title and the geometry from the
401:53 - arguments that we pass into the class
401:55 - when we create the instance of it
401:57 - which means inside of app I want to pass
401:59 - in a title let me call it a class based
402:03 - app
402:04 - and then I want to add a tuple with the
402:07 - with and the height which in my case is
402:09 - 600 by 600.
402:11 - which means I have to update all of this
402:14 - a tiny bit to account for these
402:16 - arguments here which I think could be a
402:19 - fairly good exercise for you try to
402:21 - update the code to account for these
402:23 - arguments most of you now and see if you
402:25 - can figure this one out
402:30 - first of all we have to add two more
402:32 - parameters to a niche I want to have a
402:35 - title and I want to have let's call it
402:37 - size
402:38 - the title is very easy to change because
402:40 - this one is just a string which means
402:43 - inside of title I can pass in the title
402:46 - the geometry is going to be a tiny bit
402:49 - more difficult although not very much we
402:52 - basically have to figure out how to turn
402:54 - this Tuple into a string in my case I am
402:58 - using an F string which means I want to
403:00 - add an F in here
403:02 - and the first argument is going to be
403:04 - size and
403:06 - zero
403:08 - the second one is then going to be size
403:11 - and one and now we should be good to go
403:14 - I guess one more thing that we could be
403:16 - doing is right now minimum size is
403:18 - static we can also update this one
403:21 - although we would use the same numbers
403:23 - we have used with geometry so size 0 and
403:27 - size 1.
403:29 - which means if I run this now we cannot
403:31 - see any difference although what I can
403:33 - do is change these numbers let's say to
403:35 - 200 and 400 and now we get a different
403:39 - kind of window although I don't actually
403:40 - want to do that and I think with that
403:42 - you can already see some advantages with
403:45 - just one line of code we can call the
403:48 - entire window and pass arguments into it
403:51 - so when we actually use the app this one
403:53 - is much easier to understand than these
403:56 - four lines here
403:57 - and this is only going to become more
404:00 - advanced for the next bit I want to work
404:02 - on the menu let me show this again
404:04 - here's the app what I want to work on is
404:07 - the left side this bit here
404:11 - in the original code
404:13 - I move this to the side we have a menu
404:16 - the menu is all of this bit here
404:19 - a couple of widgets all of those are
404:22 - inside of a menu frame this menu frame
404:24 - here
404:26 - or rather we are creating it here we are
404:29 - placing it here and then we're adding
404:31 - widgets here
404:33 - on top of that further down there we are
404:36 - adding the layout of the widgets further
404:38 - down here which all things combined is
404:41 - really annoying to manage we basically
404:44 - have a huge amount of code that is
404:45 - really really disorganized
404:48 - this I can change very easily by
404:51 - creating another class that I want to
404:52 - call menu
404:54 - this menu is going to inherit from ttk
404:57 - and frame
404:59 - basically what we are going to start
405:01 - with is we are going to recreate this
405:04 - Frame here
405:05 - except now we are not storing ttk frame
405:08 - inside of a variable instead we are
405:11 - creating a whole new object
405:13 - inside of this like with the app we have
405:16 - to create a Dunder init method
405:19 - this one is going to need itself and on
405:21 - top of that we are also going to need a
405:24 - parent or a master
405:26 - because inside of the init method I want
405:29 - to call the super Thunder init method
405:31 - and this one is going to need one
405:33 - argument and that is the master or the
405:36 - parent
405:37 - the way you have to understand this is
405:39 - that this init method is basically the
405:42 - same as calling the object by itself and
405:45 - for that we always have to pass in the
405:47 - master which in this case is going to be
405:48 - the window
405:50 - with that we have basically created
405:53 - another frame this we can now use inside
405:56 - of the app the way this is going to work
405:59 - let me add a couple of comments here I
406:01 - want to create widgets and besides that
406:04 - I have the
406:07 - main setup
406:10 - all the way at the bottom I am running
406:12 - the app
406:14 - the widgets right now we only have self
406:17 - dot menu which is going to be the menu
406:19 - although don't forget when we are
406:21 - calling this menu here we have to pass
406:23 - in the parent and this could be an
406:26 - interesting exercise for you try to
406:28 - figure out what the parent is
406:34 - the parent in this instance is self
406:37 - because the app is tk.tk what we called
406:42 - window in the functional approach
406:45 - and in the functional approach we sort
406:47 - all of this inside of the window
406:48 - variable and passed this inside of the
406:50 - frame in the class-based approach let me
406:53 - move this a bit to the side
406:55 - app itself is the window so this app we
406:58 - are passing into the menu that way this
407:01 - menu is going to have this app as the
407:04 - master
407:05 - although if I run all of this we can't
407:07 - really see very much there are two
407:09 - reasons for it number one this menu
407:12 - right now is just a frame and frames are
407:15 - invisible although even if they were
407:17 - visible we couldn't see them because
407:19 - we're not placing this Frame anywhere on
407:22 - the app right now there's a parent or a
407:24 - master but we don't actually position
407:26 - the frame inside of the parent
407:29 - which means there are two things we have
407:31 - to work on
407:32 - number one I want to create a label that
407:34 - actually illustrates where the menu is
407:37 - for that I simply want to create a ttk
407:40 - and label like so the parent here once
407:46 - again has to be self
407:48 - I don't actually want to have text in
407:49 - there instead what I want is a
407:52 - background this one can be read right
407:54 - now
407:55 - right after creating this label I want
407:58 - to use the pack method and in here I
408:01 - want to set expand to true and fill to
408:05 - both
408:06 - that way this label is going to fill the
408:09 - entire frame with a red color
408:12 - and let me move this a bit further to
408:14 - the right so we can see the entire thing
408:16 - right with that we should be having a
408:19 - menu that's at least visible although if
408:22 - I run this again we still can't see
408:23 - anything because we have to place the
408:26 - frame itself and this can happen inside
408:28 - of this class as well
408:31 - because all we have to do is get self
408:33 - and now we can run for example pack or
408:36 - we could run grid we could run whatever
408:38 - we want
408:39 - to keep it simple for now I want to run
408:42 - the pack method if I run this now we can
408:44 - see all the way in the top we have a
408:47 - tiny red bar
408:49 - this we can set to expand being true and
408:53 - we can set fill to both and now if I run
408:57 - this this Frame is covering the entire
409:00 - window
409:02 - although in the original if I expand
409:04 - this a tiny bit more when we are placing
409:06 - the menu frame this happens here we are
409:09 - using the place method with all of these
409:12 - arguments
409:13 - meaning I can just copy them
409:15 - move this a bit further to the site
409:17 - again and now instead of Peg call the
409:19 - place method this one has X being 0 and
409:22 - Y being zero so menu is always on the
409:24 - left side it covers 30 percent of the
409:26 - width of the window and it covers the
409:28 - entire height
409:29 - I can run this again and there we go now
409:32 - we have the same position for the menu
409:35 - why this approach is really useful is I
409:37 - can now minimize the menu and inside of
409:40 - the app this is what I'm actually
409:41 - working with the entire menu is simply
409:44 - one entry I don't have to worry about
409:48 - all of these different Snippets that are
409:52 - in different places the entire menu is
409:55 - in one spot which makes it much easier
409:57 - to work with
409:59 - although right now the menu doesn't have
410:01 - any content so we have to work a bit
410:03 - more on this and let me move this a bit
410:05 - further to the right there we go
410:07 - inside of the menu I want to create all
410:11 - of these menu widgets these ones here
410:14 - for that I'm going to create a separate
410:16 - method
410:17 - I'm going to call this one Define create
410:21 - widgets this one itself and nothing else
410:24 - and in here I want to create all of
410:27 - these widgets so let me copy them
410:30 - we have menu button one two and three we
410:32 - have two sliders we have a toggle frame
410:34 - this one is a frame in itself and this
410:37 - one has two children menu toggle one and
410:39 - two and finally we have a frame
410:42 - all of these I want to copy and paste
410:45 - them in here and also fix the
410:47 - indentations
410:49 - there's one more change that we do have
410:51 - to make and that is that all of these
410:54 - buttons and Sliders don't have a menu
410:57 - frame as the parent instead
410:59 - I want to change all of the menu frame
411:01 - to self
411:03 - because all of these buttons should have
411:05 - this many frame as the parent with the
411:09 - exception of menu toggle 1 and menu
411:11 - toggle 2 because those two are supposed
411:14 - to be a child of the toggle frame
411:16 - meaning those we don't actually have to
411:18 - change
411:19 - besides that the entry I forgot to
411:21 - change this isn't many framed this
411:23 - should be self
411:24 - with that all I have to do is call this
411:27 - method self dot create widgets and now I
411:30 - can run this and we can't see anything
411:32 - again this happens because we're only
411:34 - creating widgets we're not placing them
411:37 - on this Frame
411:38 - for that I want to create another method
411:42 - I guess we can call this one create
411:45 - layout
411:47 - no custom parameters again and what I
411:50 - want to do now is replicate basically
411:54 - this here
411:57 - including this one as well
411:59 - as you can see in here we are using the
412:02 - grid method to place all of these
412:04 - elements which means first of all what
412:06 - we have to do a bit further up we have
412:09 - to create the grid for the menu
412:12 - this I have done here with these two
412:14 - lines of code so let me start by copying
412:17 - those two
412:20 - and once again I have to fix the
412:22 - indentation I move this thing a bit
412:24 - further to the side so we can see what's
412:25 - going on
412:27 - I want to first of all create the grid
412:32 - for this
412:33 - I can minimize the create widgets method
412:36 - I want to get this Frame here and I want
412:39 - to set columns and rows on this which
412:42 - means instead of the menu frame I want
412:44 - to get self
412:46 - although the rest can stay identical
412:49 - which means next up I can place the
412:53 - widgets
412:54 - for this once again I can copy
412:58 - all the stuff I have done here all of
413:01 - this
413:04 - and I can place it in here once again we
413:07 - have to fix some indentations
413:10 - like so
413:11 - and now we can work with this
413:13 - and now we have a tiny problem all of
413:17 - these widgets are only available inside
413:19 - of create widgets they are in the local
413:22 - scope of this method
413:24 - inside of here
413:27 - which means I couldn't access them
413:28 - inside of this create layout method
413:33 - I guess there are two ways you could
413:34 - approach this problem number one you
413:37 - could change all of these variables to
413:38 - attributes so for example you would turn
413:41 - this variable into an attribute using
413:43 - self and then down here you would use
413:45 - self.entry.place
413:48 - that would be one approach although in
413:50 - my case I don't want to go with that one
413:53 - so let me undo everything instead I'm
413:56 - going to be a tiny bit lazy here copy
413:58 - all of this
414:00 - and then place it
414:01 - inside of create widgets
414:05 - that way we are doing all of this inside
414:07 - of one method and we are staying within
414:10 - the same scope
414:12 - not the cleanest approach and if you had
414:14 - a more complex app this would probably
414:16 - be something you want to work on more
414:17 - but for this simple app this is totally
414:19 - fine
414:20 - at the very least let me add some
414:22 - comments here I want to create the
414:25 - widgets then I want to create a grid and
414:27 - then I want to place the widgets
414:30 - and with that I want to get rid of this
414:34 - TDK label here
414:36 - because we don't need it anymore now I
414:39 - can run the entire thing and there we go
414:40 - we have the entire menu still works just
414:43 - as before
414:45 - except now all of this is inside of one
414:48 - class
414:49 - and this finishes the menu which means I
414:52 - can minimize this and now we can see
414:54 - menu is simply one entry
414:57 - that is much easier to work with and if
415:00 - we wanted to work with it we could
415:01 - simply open this and then change all of
415:03 - this and do whatever change we want to
415:05 - make which makes maintaining all of this
415:08 - much easier so in comparison here's the
415:11 - original we had just code for the menu
415:14 - here here here here here here
415:18 - and this was very difficult to separate
415:20 - from the main widget for example
415:25 - so with that we are making some good
415:27 - progress next up I want to create main
415:30 - if I run this again main is
415:33 - this main area here
415:37 - this one is actually really simple
415:38 - because what we want to do again
415:42 - is we have main.frame here just another
415:46 - frame this one we are putting on the
415:48 - window using the place method again so
415:51 - this we can start on right away I want
415:53 - to create another class and this one I
415:56 - called Main
415:57 - once again this has to inherit from ttk
416:00 - dot frame
416:03 - and let me move this a tiny bit further
416:05 - to the side
416:06 - in here like for the menu we are going
416:08 - to need a Dunder init method that gets
416:11 - self and it gets apparent
416:14 - spelled correctly as well like so and
416:17 - don't forget
416:18 - super underscore underscore init and
416:22 - pass in the parent in here
416:24 - this is the same thing we have done for
416:26 - the menu so if I open the init method of
416:29 - the menu we had all of this
416:32 - next up to actually see the main menu I
416:35 - want to run the place method again
416:37 - although I can copy this from the
416:40 - original video
416:42 - we are calling this place method here
416:47 - which means inside of the init method of
416:49 - main I want to call self and place
416:53 - and then place the widget in this
416:55 - position
416:56 - to make sure that we can't see this I
416:59 - want to once again create ttk label with
417:02 - self as the parent with background being
417:06 - red and with the pack method setting
417:09 - expand to true and fill to both
417:15 - with that I can simply create this main
417:17 - method inside of the app
417:19 - right below the menu itself let's call
417:22 - it main is going to be Main
417:26 - with self as the parent and if I run
417:28 - this now we can see the main frame
417:33 - let me minimize the menu and get rid of
417:36 - TDK label here
417:38 - we definitely know this is going to work
417:41 - which means with that let me show the
417:44 - app again we can start working on the
417:46 - actual entries these things here
417:50 - this one once again is going to be one
417:52 - frame inside of the frame we have one
417:54 - label with a background and then we have
417:56 - a button below
417:59 - or that I want to add a tiny bit more
418:02 - code inside of main I first of all want
418:04 - to create a frame
418:06 - so I can just call it frame and this is
418:08 - going to be ttk and frame the parent
418:12 - here is going to be self
418:14 - inside of this Frame I want to have a
418:16 - label and a button so let me create a
418:19 - label variable then I want to use ttk
418:22 - and label
418:24 - with the frame being the parent text is
418:28 - going to be let's say test one and the
418:32 - background color is going to be red
418:35 - after that I want to create a button and
418:38 - this is going to be ttk and button
418:41 - with the frame as the parent text is
418:44 - going to be I call this one test one as
418:46 - well although let's call it button that
418:48 - Pro makes a bit more sense
418:50 - these two buttons we now have to get
418:52 - inside of the frame and this Frame we
418:55 - have to place inside of the Mainframe
418:58 - let's start with putting these two
419:00 - widgets inside of the frame
419:02 - for that I'm going to use the pack
419:04 - method so label dot pack
419:08 - expand should be true and fill should be
419:12 - both
419:14 - yes I can now duplicate because the
419:16 - button is going to work in the same way
419:18 - with the only difference that the button
419:21 - has padding y being 10 pixels
419:25 - finally I want to get the frame and pack
419:28 - this one as well although for this one I
419:31 - want to set the site to left
419:34 - actually I can copy all of this from the
419:36 - original in here we are placing all of
419:41 - this if I find it really quick
419:44 - we are placing the main layout here we
419:47 - have entry frame one and entry frame two
419:49 - all of this I want to copy like so
419:53 - so let me move all of this to the site
419:54 - again and I want to use this pack method
419:57 - with all of these arguments
420:00 - and with that this should be working
420:02 - let's try now and there we go we can see
420:05 - the entry inside of the main frame
420:09 - we are making a lot of progress
420:11 - now this is starting to become a tiny
420:14 - bit messy because this Frame here could
420:17 - be its very own class and this
420:20 - incidentally is going to become your
420:22 - exercise I want you guys to get this
420:26 - Frame here and turn it into a separate
420:28 - class along with all of its children so
420:31 - it should be a frame class with a label
420:33 - and a button
420:35 - on top of that I want you guys to set
420:37 - the color the label and the button via
420:40 - the arguments which means you should be
420:43 - able to use the init method of this new
420:46 - class to set the text of the label the
420:48 - text of the button and the background of
420:50 - the label
420:52 - and pause the video now and try to
420:54 - figure this one out yourself
420:59 - let's get started first of all I want to
421:02 - create a new class and this one I called
421:04 - entry
421:06 - as always we have to inherit from ttk
421:08 - and frame
421:10 - inside of that we need the dunder init
421:13 - method in here we need self as always
421:16 - then we need a parent then we need three
421:19 - more arguments we need the label text we
421:23 - need the button text and we need to
421:26 - label
421:28 - background
421:30 - these three arguments we need to cover
421:31 - the second part of the exercise
421:34 - with that inside of the init method
421:36 - don't forget to call this super init
421:39 - method and then here you want to add the
421:42 - parent this entry frame here is going to
421:46 - be this Frame which means inside of it
421:49 - we can do all of this
421:51 - as a matter of fact let me cut out all
421:54 - of this and delete the frame
421:57 - and instead I want to paste all of these
421:59 - things in here
422:01 - now we have a label a button we are
422:04 - placing the label and the button and
422:06 - then we are packing the frame although
422:08 - for this to work we have to make some
422:09 - changes first of all label and button
422:12 - have not the frame as the parent instead
422:15 - self is the parent now
422:17 - or the layout this can stay exactly as
422:20 - it was before
422:22 - although for the frame itself we don't
422:24 - want to pack the frame we want to pack
422:26 - self because remember self is a frame
422:30 - that we can pack on the parent
422:32 - with that we can already create a entry
422:36 - frame in here
422:38 - the one argument we have to pass in here
422:40 - for now is the self although all the
422:42 - other arguments we are not using right
422:44 - now so let me simply pass in one two and
422:47 - three it doesn't really matter right now
422:50 - I can run this now and there we go we
422:52 - have the very same result
422:54 - and this is actually super useful
422:56 - because now I can duplicate this entry
422:58 - widget run this again and now we have
423:01 - two entry fields or frames I can do this
423:04 - multiple times and there we go we have
423:06 - lots of different fields
423:09 - in my case though I only want to have
423:11 - two but I hope you understand the
423:12 - principle here
423:14 - although next up we have to actually
423:16 - cover these three parameters and they
423:19 - are very easy to work with because all
423:21 - of them are going to be a string
423:23 - the label text is going to be the text
423:25 - for the label this one here which means
423:28 - in there I want to pass in the label
423:30 - text
423:32 - the same thing for the button I don't
423:33 - want to have a string button instead I
423:36 - want to have the button text finally let
423:39 - me add the comma here for the background
423:41 - we don't want to have hard-coded red
423:43 - instead we want to have the label
423:45 - background
423:46 - with that I now have to pass in proper
423:49 - arguments in here
423:51 - let's say for entry 1 I want to have
423:53 - entry one
423:55 - then for the button I want to have
423:58 - button one spelled correctly and for the
424:02 - background I want to go with green let
424:05 - me duplicate all of these and paste them
424:08 - into the second entry and let's call
424:11 - this entry two
424:13 - button to and for the color let's go
424:16 - with blue
424:17 - let's try this again and there we go now
424:19 - we have widgets that work perfectly fine
424:22 - and now I hope you can see the value of
424:24 - this approach because this makes it
424:27 - really easy to create lots of widgets
424:28 - that are self-contained
424:30 - for example for the entry we are only
424:33 - having one entry here but this entry
424:35 - contains a huge amount of stuff
424:37 - if I compare this to the original
424:39 - functional approach
424:41 - we created the frame here we created
424:43 - some widgets here and then we could set
424:46 - the layout here and this was kind of
424:49 - messy because in there we had the second
424:51 - frame and all of this was really hard to
424:53 - follow
424:55 - whereas in this approach we simply have
424:58 - one frame that contains it all and we
425:00 - are placing it wherever we need it
425:03 - and with that we have the entire app
425:06 - that is much more manageable because now
425:09 - we have logical parts to it that we can
425:11 - work with whenever we need and this is
425:13 - what you want to use most of the time as
425:16 - soon as you have any kind of complexity
425:18 - in your app this approach is vastly
425:20 - Superior in this part I want to talk
425:23 - about a really important part of T
425:25 - Kinder and that is creating custom
425:28 - components
425:29 - what that means is to use tickhinder or
425:33 - literally any GUI framework efficiently
425:35 - you need to be able to create your own
425:37 - components for example when we use the
425:40 - classes in the last bit we have created
425:42 - a couple of custom widgets one example
425:45 - was the entry widget
425:47 - what we created looked like this and
425:50 - what is really important here is that
425:52 - this entire thing was one frame that we
425:56 - customized so we gave it a label with a
425:59 - background and a button and once we have
426:01 - that we could create this multiple times
426:03 - so we had another label and another
426:05 - button besides that we also created this
426:09 - entire side panel as a separate widget I
426:13 - suppose I should look at all of this in
426:14 - code straight away
426:16 - here's the code of what we just covered
426:18 - before and all of this gives us this
426:22 - kind of app
426:23 - the really important thing you have to
426:25 - understand here is that we are creating
426:26 - custom widgets this entry here inherits
426:29 - from frame and adds more stuff to it so
426:32 - this Frame here
426:34 - this we can do multiple times we have
426:36 - one frame and we have another frame
426:39 - this one here
426:41 - both of these were very easily created
426:45 - we did all of that inside of Main in
426:47 - here we can simply create one entry and
426:50 - another entry I could duplicate this
426:52 - again add entry free button free and for
426:55 - the color I could go with green if I run
426:58 - this thing now we have a third entry
427:00 - widget with this kind of system we can
427:03 - create more complex layouts fairly
427:05 - easily and also keep them more
427:06 - manageable which is why it is really
427:08 - important that you understand how to use
427:10 - all of this
427:11 - I'm going to practice it in this video
427:13 - as well but definitely play around with
427:15 - this in your own time although more
427:17 - importantly for this video what I also
427:19 - want to cover is that there are two ways
427:21 - to create custom components the first
427:23 - one we have already seen is by using
427:25 - classes
427:27 - inside of a class you inherit a widget
427:29 - and you add custom parts to it
427:32 - this can create really complex layouts
427:35 - but the downside is if you end up with
427:37 - too many small bits you might have a ton
427:40 - of classes which would be a bit annoying
427:42 - to manage to account for that we have
427:44 - the second approach and that is a more
427:47 - functional approach all we are doing in
427:49 - here is we are creating a widget inside
427:51 - of a function and then return the widget
427:53 - this is a bit more limited in terms of
427:56 - what we can do but the upside is we can
428:00 - create lots of small components inside
428:02 - of a class
428:04 - basically what you want to do for any
428:06 - more complex component you want to use a
428:09 - class but inside of this more complex
428:11 - component you want to use the functional
428:13 - approach to create simpler bits all of
428:16 - this is going to make much more sense
428:18 - when we actually make the app speaking
428:20 - of which what we're going to make is
428:22 - going to look something like this in
428:24 - here we have a couple of custom
428:26 - components
428:27 - the most important one is each of those
428:31 - rows is One widget and all of those are
428:35 - made using classes inside of this we
428:38 - have three columns we have a label we
428:40 - have a button and then we have this kind
428:43 - of thing with an entry and a button for
428:45 - this final bit here I want to use the
428:48 - functional approach
428:50 - for the simple reason that this isn't
428:52 - particularly complicated we simply have
428:54 - a frame with two widgets inside it
428:57 - wouldn't really Merit using a whole
428:58 - class but I also don't want to create
429:01 - too much of a layout inside of the class
429:04 - itself in the init method
429:06 - but well let's jump into the code and
429:08 - let's have a look at all of this once
429:10 - again I already have a couple of lines
429:13 - of code ready if I execute the entire
429:15 - thing we have a basic window with a
429:17 - title but not much else
429:19 - with that we have to figure out how to
429:21 - create this kind of thing what I want to
429:24 - start with is that these rows are always
429:28 - one widget and this I want to create by
429:31 - using a class
429:33 - which means I want to get started by
429:35 - creating a class and this I want to call
429:38 - segment I guess is a good name
429:41 - this has to inherit from ttk dot brain
429:45 - inside of this I want to create a Dunder
429:48 - init method this one itself we need a
429:52 - parent on top of that we need a label
429:54 - text
429:56 - and we are going to need a button text
430:00 - that way I can customize the entire
430:02 - thing quite a bit easier for reference
430:04 - once again
430:06 - inside of each segment I have a label
430:08 - and I have a button
430:10 - once I have that I can actually create
430:13 - the widget itself for that we first of
430:16 - all have to run this super init method
430:19 - and set the master to the parent with
430:23 - that we basically have a frame and
430:26 - essentially what I want to do
430:28 - inside of the global scope I want to
430:30 - create all of the widgets
430:33 - the important Point here is I only want
430:36 - to call the segment and T Kinder almost
430:40 - specifically the class itself should
430:42 - take care of everything else all I want
430:44 - to pass inside of the segment is the
430:46 - parent which is the window that I want
430:48 - to have a label text let's go with label
430:52 - and I want to have a button text button
430:55 - and that is it I don't want to do
430:57 - anything else inside of the global scope
430:59 - the entire logic of this widget should
431:02 - be inside of this segment that way we
431:05 - have one component that takes care of
431:07 - everything and we don't have to think
431:09 - about it too much
431:11 - what this allows us to do is duplicate
431:13 - this a couple of times and we have
431:15 - different widgets that can do different
431:17 - things for example in this case we would
431:20 - have different labels let's say button
431:22 - and click
431:24 - or hello and test it doesn't really
431:29 - matter what you place in here
431:31 - the important thing that you have to
431:33 - understand is that we are creating a
431:34 - custom component that contains a huge
431:36 - amount of logic to get started in all of
431:39 - this inside of the segment class I want
431:42 - to create a grid layout for that I want
431:45 - to get self and row configure
431:49 - although for this one I want to have row
431:51 - 0 with a weight of one and that's
431:54 - basically it although with that I can
431:56 - duplicate the entire thing change the
431:58 - row to a column instead of a zero I want
432:02 - to have 0 1 and 2. I want to have three
432:04 - columns that all have the same weight on
432:08 - top of that I also want to set uniform
432:10 - to a or it doesn't really matter what it
432:13 - is but with this all of the columns are
432:16 - going to have the same size
432:18 - almost specifically the same width
432:20 - inside of this I can now create a TDK
432:23 - label and I can create a ttk button
432:27 - both are going to need fairly similar
432:29 - arguments the first one is the parent
432:31 - that is going to be self besides that we
432:34 - also need text
432:36 - this text we already have because we
432:38 - have the label text and we have the
432:40 - button text for the label I want to have
432:42 - the label text or the button I want to
432:44 - have the button text
432:46 - after I have that I want to use the grid
432:49 - method to place both of the widgets
432:52 - the label is going to be in row 0 and
432:57 - column 0 as well all of this I can copy
433:00 - as well because the button is also going
433:03 - to be in row 0 but column is going to be
433:05 - one if I run the entire thing we can see
433:08 - that we well cannot see anything the
433:11 - reason for that is that this segment is
433:13 - not being placed on the window which
433:16 - means we have created a component but we
433:18 - are not placing it for that we need well
433:22 - a placement method and this once again
433:24 - we can do inside of the component itself
433:26 - all I have to do inside of the init
433:28 - method is self and then use one of the
433:31 - layout methods I'm going to go with pack
433:34 - with that we can see the different
433:36 - layouts although right now all of this
433:38 - looks a tiny bit weird
433:41 - so not ideal yet
433:43 - first of all I want to set this to
433:46 - expand being true and fill should be
433:50 - both
433:51 - now if I run this this is starting to
433:54 - look a little bit better although I need
433:56 - a few more widgets to make all of this
433:57 - look halfway decent that we can do very
434:00 - easily because to create more widgets
434:02 - all I have to do is duplicate this
434:04 - segment and we get more widgets although
434:07 - I'm going to change the text here so we
434:09 - can see a bit better what's going on I
434:11 - will just add random words in here it
434:14 - really doesn't matter what you add here
434:16 - it's just for illustration anyway let's
434:18 - say exit and now we have five different
434:22 - segments
434:23 - this still isn't terribly visible
434:25 - because there's so much white space in
434:27 - here the reason for that is that both of
434:30 - the label and the button only take up
434:32 - the minimum amount of space that they
434:34 - need to display the text that we can
434:36 - change by using this sticky argument and
434:40 - I want to set sticky to north south east
434:42 - and west now if I run this all of this
434:44 - starts to come together much better
434:47 - what you can also do is inside of this
434:49 - pack method
434:50 - set pad X to 10 pixels and Pat y should
434:56 - also be 10 pixels
434:58 - if everyone is now we have a tiny bit of
435:00 - white space between the widgets and that
435:02 - is basically it I don't want to repeat
435:04 - myself too much here but what we have
435:07 - done is we have created a custom
435:09 - component called segment and inside of
435:12 - the segment we have a ton of logic that
435:15 - way inside of the global scope this bit
435:17 - here we can simply create one component
435:20 - and this component creates something
435:21 - much more complex in the app just
435:24 - imagine if we didn't have this kind of
435:25 - setup we would have to create this code
435:28 - up here five different times and if we
435:32 - wanted to update any individual bit
435:33 - let's say this hello here we would have
435:37 - to go through a lot of code just to find
435:39 - this one part which would be really
435:42 - annoying to work with but in our setup
435:44 - here all of this is very easily
435:47 - manageable
435:48 - which is why you really have to
435:49 - understand this
435:51 - now this is one way to create this kind
435:53 - of layout system there is another way
435:56 - though
435:57 - what we have done for now is we have
435:59 - used a class based approach to organize
436:02 - our widgets but this we don't have to do
436:05 - we could also use a functional approach
436:07 - let's have a look at this one by
436:09 - translating our class-based approach to
436:11 - a functional one back in the app I want
436:15 - to all the way at the top create a
436:16 - function I'm going to call this one
436:18 - create segment
436:20 - this one is going to need three
436:23 - different arguments
436:24 - we need the parent we need a label text
436:27 - and we need a button text for the Keen
436:30 - it among you those are the same
436:32 - parameters we have used here we don't
436:35 - need self because we're not using a
436:37 - class inside of this function we are
436:40 - basically trying to recreate all of this
436:42 - and then return the result basically
436:45 - what that means is I want to create a
436:47 - frame which is just going to be ttk and
436:50 - frame at the end of the function I want
436:53 - to return that frame which essentially
436:56 - means that we are taking this Frame here
436:58 - except now we are keeping it by itself
437:01 - although first of all we have to set a
437:04 - master for the frame which is going to
437:06 - be the parent we are passing into the
437:08 - function this parent here
437:10 - next up we have to create the layout
437:13 - this grid layout here I suppose I could
437:16 - just copy the entire thing paste it in
437:18 - here and fix the white space we don't
437:21 - have self anymore instead we want to set
437:23 - the frame with rows and columns after
437:27 - that I want to create some widgets
437:30 - I suppose I should be a bit better here
437:33 - with the comments what we have done in
437:34 - the class based approach was also
437:36 - creating widgets that way all of this is
437:39 - a bit easier to read
437:41 - in my case I want to copy all of this
437:43 - and paste it inside of the functional
437:45 - approach
437:46 - now we have a ttk label and a ttk button
437:49 - although once again we don't have self
437:51 - anymore instead I want to parent them to
437:54 - the frame the frame we created up here
437:56 - with that we have the same thing we
437:59 - created inside of the segment here
438:02 - which means now that we are returning it
438:04 - we can simply use it
438:06 - which means
438:08 - all of this here I want to comment out
438:11 - and if I run this we can't see any
438:13 - widget anymore
438:15 - and let me minimize the class now you
438:18 - can see roughly the entire app
438:21 - instead of using a segment I want to
438:23 - create
438:25 - segment
438:27 - and for the arguments I have to get the
438:30 - parent the label text and the button
438:32 - text these three arguments if I run this
438:35 - now we still can't see anything because
438:37 - what we have done inside of this
438:39 - function is create a widget but we are
438:42 - not placing it this we could have done
438:44 - inside of the segment very easily
438:46 - because in here we could simply run
438:48 - self.pack
438:49 - this unfortunately we cannot do inside
438:52 - of the frame because we are returning
438:54 - the frame we couldn't place it right
438:56 - away
438:57 - although what we can do
438:59 - since this function here is returning a
439:02 - widget we can on it run a layout method
439:06 - like Pac for example and this pack could
439:09 - be expand true and fill both like so
439:15 - another runders
439:17 - we can see we have one widget
439:21 - although since we only have one all of
439:23 - this looks a bit weird but what I can do
439:25 - now is simply copy all of this
439:28 - let me add some white space uncomment it
439:32 - and instead of a segment I want to use
439:35 - my function create segment since we're
439:37 - using the same arguments all of this
439:39 - should still work also don't forget we
439:41 - have to add the pack method to all of
439:43 - them
439:44 - like so and now if I run this we have
439:47 - the same result
439:49 - although I did forget one thing and that
439:51 - is the padding for x and for y let me
439:54 - copy it from the segment class and paste
439:57 - it inside all of them so we get exactly
440:00 - the same result now if I run this we
440:02 - have exactly the same result
440:05 - and we have done all of this by using
440:07 - either a function or a class both would
440:11 - be fine in this instance because we are
440:13 - creating something fairly simple but
440:15 - once again I want to emphasize if you
440:17 - want to create more complex layouts
440:19 - having either something like this or
440:21 - something like this let me uncomment it
440:24 - is much easier to understand and to
440:26 - maintain than having a ton of widgets
440:28 - that you all create manually for future
440:31 - videos I am going to rely a lot more on
440:33 - custom components so this is an
440:35 - important thing to understand
440:37 - which means Let's do an exercise and I
440:40 - hope you can still keep up all we have
440:42 - to do is an exercise and then we are
440:45 - done what I want you guys to do is
440:47 - create a smaller widget inside of the
440:50 - segment class using a function or a
440:52 - method
440:53 - specifically inside of this segment
440:55 - class I want you guys to use a function
440:57 - to create another widget like we have
440:59 - done up here instead now don't use a
441:02 - function use a method inside of this
441:04 - class
441:05 - what you should be doing is create a
441:07 - container that has an entry field and a
441:08 - button stacked on top of each other
441:10 - the button should be set via the
441:12 - parameters and all of this should be
441:15 - inside of the third column of this
441:17 - segment as a reminder
441:19 - we are creating three columns and right
441:22 - now we are only using column 0 and
441:24 - column 1.
441:26 - at the end of this out of this should
441:28 - look something like this we have an
441:30 - entry field and we have a button for all
441:32 - of my buttons I use the text exercise
441:34 - but this should be more customizable
441:37 - pause the video now and try to figure
441:39 - this one out yourself
441:43 - alright let's get started I want to work
441:47 - inside of the segment again although
441:49 - first of all what I should do is comment
441:52 - out all of these functions because I
441:54 - only want to work with the segment class
441:57 - inside of this one I want to create a
442:00 - method let me call it create exercise
442:05 - box for this one we need two arguments
442:08 - we need self like for any method and
442:10 - then I want to have some text this is
442:13 - going to be the button text now inside
442:15 - of this method we have to create a frame
442:18 - like we have done up here with create
442:21 - segment we always start by creating a
442:23 - frame in this Frame we are returning at
442:25 - the end although this Frame while being
442:28 - ttk and frame has a parent of self
442:33 - or a master to be a bit more specific at
442:36 - the end of this method I want to return
442:38 - this Frame although before we are doing
442:41 - that I want to create a ttk entry this
442:46 - one is going to have the parent of frame
442:48 - and besides that I want to have a ttk
442:50 - button this one has frame as the parent
442:53 - but also text is going to be the text
442:57 - that we are getting from the parameters
442:59 - this text up here we are passing in here
443:03 - once we have that we have to place both
443:05 - of these widgets inside of the frame and
443:08 - this I want to do with the peg method
443:12 - since both of the widgets are supposed
443:14 - to be on top of each other I don't need
443:15 - a side but I do want to set expand to
443:18 - true and fail to both
443:22 - and that is all I need inside of this
443:26 - method with that I can minimize it now
443:29 - inside of the widgets I can call Self
443:31 - dot create exercise box
443:34 - and add the text in here for now let's
443:38 - go with exercise
443:41 - if I run the entire thing now we still
443:43 - can't see anything because once again I
443:45 - forgot that we have only created a
443:48 - widget we haven't placed it yet for that
443:50 - we need the grid layout method so grid I
443:54 - want to have a row 0 and column should
443:57 - be 2.
443:58 - on top of that I want to set sticky to
444:01 - north south east and west and that
444:03 - should cover it all meaning if I run
444:05 - this now here we have a pretty good
444:08 - looking result we have an entry field
444:10 - and we have an exercise button I hope
444:13 - you can see the value of this because
444:15 - now inside of this class when we are
444:18 - creating the widgets we have all of this
444:21 - in a fairly logical layout we are
444:23 - creating a label a button and then an
444:25 - exercise box now this exercise box could
444:29 - be a separate class that would be
444:31 - perfectly fine but since it is so simple
444:34 - it's only four lines of code you don't
444:36 - really have to do that it's kind of an
444:38 - Overkill which means in this case simply
444:41 - using a method to create something
444:43 - slightly more complex is perfectly fine
444:45 - and much easier to maintain although
444:47 - there's one more thing I do want to do
444:49 - and that is that right now we always use
444:51 - exercise for the text for the button but
444:54 - this I want to have a bit more
444:55 - customizable so when I'm creating this
444:58 - segment I want to have another parameter
445:00 - and that is going to be the exercise
445:03 - text
445:05 - this exercise text I'm going to pass
445:07 - into this function like so and now when
445:11 - I'm creating all of these segments I
445:13 - have to add one more argument
445:15 - let's go with test just to see if this
445:18 - is working and there we go now we have
445:20 - test for all of these buttons
445:23 - I could change this the first one could
445:25 - be test the next one could be something
445:28 - else then we have one two three we could
445:31 - also have an empty button or we could
445:33 - have end it doesn't really matter but
445:35 - now we have different kinds of text in
445:38 - here and everything is still very easily
445:41 - maintainable all of the customization
445:43 - happens in here and this is very easy to
445:45 - see and very easy to understand and if
445:47 - you want to make changes you have all of
445:50 - this contained inside of one class that
445:53 - is maintainable and very easy to work
445:55 - with
445:56 - a really important part of any app is
445:59 - responsive layout what that means is let
446:02 - me run the app that we are going to
446:03 - create it is going to look like this
446:06 - right now we have an app with a couple
446:08 - of items stacked on top of each other so
446:11 - far nothing special however if I
446:14 - increase the size of this widget we are
446:16 - at some point getting another kind of
446:18 - layout and if I go even further we have
446:21 - a different kind of layout
446:22 - which means depending on the size of the
446:25 - window we get different kinds of layout
446:28 - which is really important because I want
446:30 - the app to look good on basically any
446:32 - size
446:33 - and some layouts simply don't work on a
446:36 - certain kind of size for example if I
446:38 - make this a bit smaller again
446:40 - this kind of layout here only really
446:42 - works on very small windows
446:45 - while this one here would only really
446:47 - work on a white window so I have to
446:49 - create different kinds of layouts
446:52 - now that being said implementing all of
446:54 - this in tkinter isn't the easiest thing
446:56 - to do
446:57 - the reason for that is that tkinter
447:00 - doesn't have inbuilt tools to create
447:01 - responsive layouts which basically means
447:04 - that we cannot update an existing layout
447:07 - instead what we have to do is we have to
447:10 - create a separate layout for every
447:12 - Windows size or at least for the layouts
447:14 - that we want to create so for this
447:16 - example I have created three different
447:18 - layouts let me actually show you I think
447:21 - that's going to be useful here's the
447:23 - code that we are going to create over
447:25 - the course of this video all the
447:27 - important stuff is inside of the app
447:29 - class basically what you have to
447:31 - understand is that we have three methods
447:34 - one for create small layout create
447:36 - medium layout and create large layout
447:38 - inside of them we are simply creating a
447:41 - frame we are adding widgets to this
447:43 - Frame along with the layout method and
447:46 - then we are packing the frame also
447:48 - before that we are forgetting the
447:50 - previous frame that way if we go from
447:52 - the small layout to the medium layout we
447:55 - are not creating extra widgets the
447:58 - really important part of logic happens
447:59 - inside of another class this one is
448:02 - called size Notifier what this one is
448:04 - doing is it checks the size of our
448:06 - window order with to be more specific
448:09 - and if we reach a certain threshold like
448:12 - 300 or 600 or 1200 then this class is
448:17 - going to call the functions we are
448:19 - passing into it or the methods in this
448:21 - case which are going to be create small
448:22 - layout create medium layout or create
448:24 - large layout
448:26 - all you really have to understand is
448:27 - that we are creating three separate
448:29 - layouts and we are displaying each
448:31 - layout depending on the minimum size of
448:33 - the window that's all that's happening
448:34 - here as a matter of fact let's talk
448:37 - about it really quick
448:38 - what we are doing in the most basic
448:40 - sense we are setting different breaking
448:42 - points for the minimum width of a layout
448:44 - so for example if the width of the
448:47 - windows 300 we want to have a small
448:48 - layout if the width is 600 we want to
448:51 - have the medium layout and if the width
448:53 - is 1200 we want to have the large layout
448:57 - and whenever the window resizes we are
448:59 - checking the width and if the window is
449:01 - crossing a new threshold if that is the
449:03 - case we are building a new layout and
449:05 - for getting the previous layout that is
449:07 - literally the entire logic although to
449:09 - implement it we do need a couple of
449:11 - things
449:12 - the major difficulty that we actually
449:14 - have to face is in this step here by
449:17 - default we can use event binding to
449:19 - check when the window is resizing the
449:22 - problem is this event is going to run on
449:25 - every resizing of the window which is a
449:28 - problem for us because we only really
449:30 - want to check if the width crosses a
449:33 - certain threshold so for example we want
449:35 - to check if the width of the app roses
449:39 - 300 we do not care if it goes from 350
449:43 - to 400 that is completely irrelevant to
449:48 - us we only care if we go from
449:51 - 299 to 300.
449:55 - that is the major difficulty that we
449:57 - have to implement the rest is actually
449:59 - fairly simple but I guess let's jump
450:01 - straight in and let's create all of this
450:03 - to get started all I have are the
450:05 - Imports for tkinder and ttk
450:08 - the reason for that is that all of the
450:10 - app is going to be handled by classes
450:13 - the most important one is the app class
450:16 - this one has to inherit from TK and TK
450:19 - inside of that I want to call the dunder
450:22 - init method with self and I also want to
450:24 - have a parameter for the start size
450:27 - should be fairly obvious what this one
450:29 - is doing
450:30 - inside of the init method I know what to
450:33 - create is super thunder in it method
450:35 - although this one doesn't need any
450:36 - arguments
450:37 - next up I want to create a title for the
450:40 - app which I called responsive layout
450:44 - after that I want to get the geometry of
450:48 - the app
450:49 - this one is going to set the starting
450:51 - size
450:52 - the starting size we are getting from
450:53 - the parameters this one is supposed to
450:55 - be a tuple with the width and the height
450:57 - this I have to convert into a string
451:00 - which I'm doing with an F string
451:03 - I want to get start size and the index
451:06 - number zero that is going to be the
451:08 - width then I want to do the same thing
451:10 - so start size except now I'm getting the
451:13 - first Index this is going to be the
451:15 - height
451:16 - once I have that I want to run self dot
451:19 - main Loop to actually run the app and
451:22 - this should be all we need to get
451:23 - started I can now create an instance of
451:26 - this app
451:27 - so app is app
451:29 - or the starting size I went with 400 by
451:33 - 300.
451:35 - if it runs now we have a basic window
451:38 - what I now have to figure out is how to
451:41 - get the size of this window when we are
451:43 - resizing it for that we need a certain
451:45 - kind of event before the main loop I
451:49 - want to self dot bind and event and the
451:53 - event we're looking for don't forget the
451:55 - smaller and greater sign
451:56 - what we're looking for is called
451:58 - configure this kind of event triggers
452:01 - every time a widget resizes or changes
452:04 - the position just to illustrate what's
452:06 - happening let me pass in a Lambda
452:08 - function don't forget the event all I
452:10 - want to do is print the event if I run
452:13 - this now you can already see in the
452:15 - bottom we have an event that is called
452:16 - configure this event gives us the X and
452:19 - the Y position of the window along with
452:21 - the width and the height so for example
452:23 - you can see right now we have a width
452:26 - and a height of 400 by 300 the exact
452:28 - same thing we have passed into the app
452:31 - on top of that if I am resizing the
452:33 - window you can see we get a different
452:35 - kind of width and height and if I change
452:38 - the position of the window we get a
452:39 - different X and Y position
452:41 - but now we do have a tiny bit of a
452:44 - problem or at least something to be
452:45 - aware of if I'm resizing the window
452:47 - again you can see for the width
452:50 - we get lots of different numbers let me
452:53 - try to find a Breaking Point what you
452:56 - can see in here we are running a new
452:59 - event on every change of the window and
453:01 - I got a width of 977 988 999 1005.
453:07 - and in just a bit I want to run a
453:10 - function to build a new layout when we
453:12 - are passing a certain kind of threshold
453:14 - for example our threshold could be 1000
453:17 - pixels which means if we go from 999 to
453:21 - 1005 we want to build a new layout but
453:24 - only at this point if we go from 977 to
453:29 - 988 I do not want to build a new layout
453:33 - which means we have to add some code
453:35 - that we only Built a new layout if we
453:37 - are crossing a certain kind of threshold
453:40 - all of the logic I have put into a
453:43 - separate class this class I called size
453:46 - node TEF fire
453:48 - there's no need for inheritance and in
453:51 - here I want to have a Dunder init method
453:54 - when itself as always then I want to
453:57 - have the window which is going to be the
453:59 - main window or in our case this app here
454:02 - finally I want to have what I called a
454:04 - size dictionary for now don't worry
454:07 - about it I'll explain in just a second
454:09 - first of all I want to get self.window
454:12 - as an attribute which means self.window
454:15 - is going to be window
454:16 - next up I want to turn the size
454:18 - dictionary into an attribute as well
454:20 - size dictionary itself is going to be
454:22 - size dictionary the basic idea is that
454:25 - this size dictionary is going to have
454:27 - key value pairs like any dictionary the
454:30 - key is going to be the minimum size of
454:32 - the layout and then the value is going
454:35 - to be the function that creates this
454:36 - kind of layout
454:38 - let me implement it right away actually
454:40 - we're going to create an instance of
454:42 - this class inside of the app
454:45 - we don't have to store it in a variable
454:47 - so we can just create it straight away I
454:49 - want to have a size Notifier the window
454:51 - is going to be self
454:52 - and the size dictionary is going to be a
454:55 - dictionary I want to have for the key a
454:57 - minimum size which I set to 300. the
455:01 - associated value is going to be a method
455:04 - for example if our minimum width is 300
455:07 - I want to create a small
455:10 - layout this one doesn't exist right now
455:13 - so let me create it right away
455:15 - I want to create a small layout we need
455:17 - self and nothing else for now so I don't
455:20 - get an error I'm going to add pass in
455:22 - here the code we are going to write
455:24 - inside of size Notifier really is just
455:27 - going to check if we are crossing this
455:29 - number and then we're going to call this
455:31 - function although to make this a bit
455:34 - more practical I want to have two
455:35 - different layouts at least for now
455:38 - I want to create one at 300 the small
455:40 - one and then I want to have at 600
455:42 - pixels a medium layout this one doesn't
455:47 - exist right now as well meaning I have
455:49 - to create medium layout with self and
455:53 - pass that means inside of the size
455:55 - Notifier if I am printing self dot size
455:59 - dictionary I am getting a dictionary I
456:02 - don't need the window right now
456:04 - that has a key of 300 then a method and
456:08 - another key of 600 and then another
456:10 - method this is a good start but I do
456:13 - want to do one more thing
456:16 - and that is I want to order this
456:18 - dictionary right now it is already
456:21 - ordered we are starting from a small
456:22 - number like 300 and going to a large
456:24 - number to 600. however what we could
456:28 - have is a dictionary like this
456:31 - where we are starting with the larger
456:33 - number this would be a massive problem
456:35 - later on so I want to order this
456:37 - dictionary right away this is actually
456:39 - quite simple all I need is dictionary
456:41 - comprehension in here I want to create a
456:44 - new dictionary with key value pairs next
456:47 - up I need 4 and key and Val u in now I
456:54 - want to size dictionary and get the
456:56 - items with this we would essentially
456:59 - copy the dictionary that we already have
457:01 - so if I run this we can't see any
457:03 - difference
457:04 - to sort all of this I have to sort what
457:07 - is being returned from this items here
457:09 - this I can do very easily with this
457:11 - sorted function now if I run this we
457:14 - have a dictionary that is sorted we can
457:17 - get to the next part and that is going
457:20 - to be running this event here or binding
457:24 - it to the window this I want to do
457:25 - inside of the size Notifier I want to
457:28 - cut it out and paste it in here although
457:30 - for this to work I have to add
457:33 - self.window.bind because we want to
457:35 - check the size of the window
457:37 - not the size of this size Notifier which
457:40 - wouldn't work because it's not a widget
457:42 - and let me clean up the white space a
457:45 - tiny bit like so
457:48 - the reason why I want to have this event
457:50 - binding inside of the size Notifier is
457:52 - because I want to connect it to a method
457:54 - of this class the method I called check
457:58 - size or rather self dot check size
458:02 - and this is going to be just another
458:05 - method
458:06 - important here we need self and we need
458:08 - the event just to check if this is
458:10 - working I want to print the event
458:13 - this should already work if I run this
458:15 - now we can already see we have one event
458:18 - printed out if I resize the window we
458:21 - get lots of events so things are still
458:23 - working just fine Wicket already get
458:25 - started to create different kinds of
458:26 - layout
458:27 - I guess for now what I could do is I
458:30 - could print
458:31 - small layout for the small layout and I
458:35 - could print
458:36 - medium layout for the medium layout so
458:39 - we can see a bit better what's going on
458:41 - these two methods I can already call
458:43 - quite easily for example when I'm
458:45 - checking the size I could get self dot
458:48 - size dictionary with a key of 300
458:52 - and then don't forget to call it
458:54 - if I run this now I get small layout
458:57 - anytime I am changing the layout this
459:00 - self.size by 300 is going to return this
459:04 - create small layout method the brackets
459:07 - afterwards are calling this method
459:09 - importantly here when we are passing the
459:12 - method into the other class we're not
459:14 - calling it we're just passing the method
459:16 - around which is totally fine to do what
459:18 - we now have to figure out is when to
459:20 - call which method so when do we call the
459:23 - 300 method and when do we call this 600
459:25 - method for that we need a couple of
459:28 - things
459:29 - first of all I want to get the window
459:32 - width this one is really easy because
459:34 - all we need is event dot with next up I
459:39 - want to have a variable that tracks
459:40 - which sizes I have already checked I
459:42 - call this check size by default the
459:45 - value here is none also let me get rid
459:48 - of this function call here now the logic
459:51 - that I want to implement is for minimum
459:54 - size in self dot size dictionary
459:59 - I want to toggle through all of the
460:01 - minimum sizes inside of this size
460:02 - dictionary I can print right away what
460:05 - we're getting minimum size if I run this
460:07 - now we get 300 and 600. the way I am
460:10 - going to use this is I want to have the
460:13 - Delta size
460:14 - this is going to be the window with
460:17 - minus the minimum size
460:20 - and let me print right away what we're
460:22 - getting
460:24 - we get 100 and minus 200. what these
460:28 - numbers mean is by default this window
460:31 - has a width of 400 and we have two
460:35 - breaking points one at 300 let's say
460:38 - this is roughly here at 300 and we have
460:42 - another point at 600. let's say this one
460:45 - is broadly here
460:47 - 600. this Delta is going to give us
460:51 - either this distance here or this
460:55 - distance here
460:56 - which is going to be
460:58 - 100 and minus 200. this information is
461:03 - really useful because all I really have
461:05 - to know is what the smallest positive
461:07 - number is once a number goes negative I
461:10 - know my window size this point here
461:13 - doesn't reach the next minimum size but
461:15 - if the number is positive I am greater
461:18 - than the smaller minimum size
461:20 - so in this case we have two options 100
461:23 - and negative 200. this negative 200
461:26 - tells me that I haven't reached the next
461:28 - minimum size but since this number here
461:31 - is positive I know I have exceeded this
461:34 - minimum size
461:35 - which is this 300 here and since my
461:38 - window is 400 right now we're on this
461:40 - point we know we have reached this
461:42 - minimum size but not the next one all I
461:44 - really want to check is if Delta is
461:47 - greater or equal than zero if that is
461:50 - the case I want to get my checked size
461:52 - and set it to the minimum size
461:55 - since Delta is becoming negative once we
461:58 - don't reach the next minimum size this
462:00 - checked size here is going to give us
462:02 - the proper minimum size there's one
462:05 - thing we still have to do and that is I
462:08 - want to check if the checked size is
462:12 - different from self dot current minimum
462:17 - size
462:18 - this is an attribute that doesn't exist
462:20 - right now but I do want to create it let
462:23 - me copy it and inside of the init method
462:26 - I want to create a current minimum size
462:29 - by default this can be done it doesn't
462:31 - really matter what it is also this
462:33 - should be size inside of this if
462:36 - statement I want to set self dot current
462:38 - Min size to the checked size
462:42 - checked size like so this statement here
462:45 - is really important because this one
462:47 - actually tracks if we have a change in
462:49 - our minimum size which means in here we
462:53 - can now run
462:54 - self dot size dictionary and I can pass
463:00 - in self dot current minimum size and
463:04 - this I want to run
463:06 - now if I run this we get small layout
463:08 - and nothing happens if I just move it a
463:10 - tiny bit although if I moved a bit
463:12 - further we get medium layout and if I go
463:15 - back to small layout this is working
463:16 - really well
463:18 - however there's one problem already and
463:20 - that is if I go too far to the left we
463:23 - get none the reason for that is if our
463:26 - window is smaller than 300 pixels we are
463:30 - well trying to get the index
463:32 - on this dictionary of a number that
463:34 - doesn't exist as a consequence this one
463:37 - here is going to throw an error the best
463:40 - way around that that I found is to set a
463:43 - minimum size that is as large as the
463:45 - smallest size here so in our case I want
463:47 - to set the minimum size of the window to
463:49 - 300.
463:51 - that way we can never have a smaller
463:53 - layout than the smallest layout
463:55 - that is quite easily added here
463:58 - I'm going to do this inside of the init
464:00 - method I want to get a minimum height
464:03 - and I want to get a minimum width
464:07 - the minimum width is actually the easier
464:09 - bit
464:10 - for the simple reason that I already
464:12 - have myself dot size dictionary and I
464:16 - only want to get the first key from it
464:18 - for that I have to turn the entire
464:21 - dictionary into a list
464:24 - on this list I want to get the first
464:26 - item that is literally all we need so
464:30 - next up we have to work on the height
464:32 - for the height I simply want to copy
464:34 - what we are getting when we are creating
464:36 - the app in my case that is going to be
464:38 - 300. one way to get that is first of all
464:42 - I want to get the window or to be a bit
464:44 - more consistent self.window although in
464:46 - this case window and sales.window refer
464:49 - to the same object it doesn't matter
464:50 - which one you choose this one has a
464:53 - method called W info underscore with
464:56 - this is a method so don't forget to call
464:58 - it although let me print it right away
465:01 - minimum height and well let's see what
465:05 - we get
465:06 - we are getting one and that is going to
465:10 - be a bit weird
465:12 - we know that the minimum height of the
465:15 - app when we are starting it is going to
465:17 - be 300. so why is this minimum height
465:20 - going to give us one that is very
465:22 - strange the reason for that is that
465:24 - ticking that can be a tiny bit weird so
465:26 - what it creates and when it places a
465:28 - layout there's a tiny bit of delay at
465:32 - this point here when we are creating the
465:34 - size Notifier we have created the
465:36 - widgets but we haven't placed them
465:38 - properly yet
465:39 - as a consequence the size of the app is
465:41 - going to be one
465:43 - to account for that we have to call Self
465:46 - dot update this is going to put
465:48 - everything in place and afterwards you
465:51 - can call the W info.wiff or hide and
465:54 - then you get the proper numbers so if I
465:56 - run this now
465:57 - we are getting an error because size
465:59 - Notifier doesn't have an update method
466:01 - instead what we need is self dot window
466:04 - dot update now if I run this we are
466:07 - getting 400.
466:09 - and I just realized that is the width
466:11 - not the height I typed in with this
466:14 - should be height like so now if I run
466:17 - this we get 300 that is much better ah
466:19 - sorry about that with that I can get rid
466:22 - of the print statement here and once I
466:25 - have these two numbers all I have to do
466:26 - is get self.window and set a minimum
466:29 - size the minimum size here is going to
466:32 - be the minimum width and the minimum
466:35 - height
466:37 - let's try this one now
466:38 - I have the app and I can move it
466:41 - to be wider and taller but this is the
466:44 - smallest it's going to get all we have
466:46 - to do now is create different kinds of
466:48 - layouts we're already calling them so
466:50 - inside of these two methods we have to
466:53 - create all of the layouts that we are
466:55 - going to use or while the two layouts
466:57 - that we want to use
466:58 - for this small layout
467:00 - I want to have self dot frame which is
467:03 - going to be ttk and frame
467:06 - the parent here or the master is going
467:08 - to be self
467:09 - inside of that I want to create four
467:11 - labels and to save you watching me type
467:14 - I'm going to copy paste things into here
467:16 - like so
467:18 - we have ttk labels four times they all
467:22 - have cells dot frame as the parent then
467:25 - I'm setting the text to be label one
467:27 - they all have a different kind of
467:29 - background and afterwards right away I'm
467:32 - calling the pack method
467:34 - water pack Method All I'm really doing
467:36 - is I'm setting expand to True fill to
467:38 - both and then I'm giving them some
467:40 - padding
467:41 - there's literally nothing complicated
467:43 - going on right now
467:44 - the last thing that we have to do in
467:46 - here is self.frame and pack this entire
467:50 - frame for that I want to set expand to
467:53 - true and I want to set fill to both
467:57 - and now if I run this
467:59 - we can't see any kind of layout
468:02 - and this is a little bit weird because
468:04 - we are creating a layout here and we're
468:07 - also placing it on the window so this
468:09 - should be working
468:11 - now if I scroll down a tiny bit we are
468:14 - calling this method inside of this line
468:18 - the problem is if I add a print
468:20 - statement in here let me call it test I
468:22 - run this again nothing happens
468:25 - which means that this method here isn't
468:28 - being called and that's the problem
468:29 - right now the reason why it is not being
468:31 - called is because of this self.window
468:34 - update if I comment this one out run
468:36 - this again now we can see our app
468:38 - basically this self.window update
468:42 - causes this self.configure not to run
468:45 - I'm not exactly sure about the reason
468:47 - why but we can overcome it quite easily
468:49 - by moving this configure
468:52 - before the Windows update now if I run
468:55 - this there we go
468:57 - this configure is run before the update
469:00 - as a consequence it runs when we are
469:02 - starting the app and with that we can
469:04 - see our layout
469:06 - with that I can minimize size Notifier
469:08 - and now we can start working on the
469:11 - other layout
469:12 - for the medium layout I do need quite a
469:15 - few lines of code I think the best way
469:18 - for this is to Simply copy paste
469:19 - everything like so and then let me
469:22 - explain it really quick
469:23 - we are once again creating a frame
469:26 - although this frame has a grid layout
469:29 - which means we need a column configure
469:31 - and a row configure in this case we have
469:34 - two columns and two rows after that we
469:37 - are packing the frame on the main layout
469:39 - so we can see it and after that I am
469:42 - creating four different labels
469:44 - these labels have the same arguments
469:47 - that I used up here for the minimum
469:49 - layout
469:50 - and here you can see a minor problem in
469:53 - tkinter and that is well we have to
469:56 - create all of these widgets again
469:58 - there's no efficient way to copy widgets
470:01 - from one master to another
470:03 - right now we have a very simple layout
470:06 - so this isn't too much of a problem but
470:08 - if you had a more complex layout this
470:10 - would be quite a bit of work so well
470:12 - it's quite unfortunate but we have to
470:14 - work with it other than that we are
470:16 - using the grid layout method four times
470:19 - to place each label inside of one cell
470:21 - I'm also adding some padding but well
470:23 - that isn't very much
470:26 - and with that let's try the entire thing
470:29 - I have the small layout and if I
470:31 - increase the size of the app we get
470:33 - something very strange
470:35 - also a key error and well we have to
470:38 - cover a couple of things here the first
470:40 - one
470:41 - let me close this
470:43 - and get rid of the error message
470:45 - the first problem we have is that once
470:48 - we create the medium layout we are not
470:50 - discarding the small layout
470:52 - that is quite an easy thing to fix all I
470:54 - want to do for that is create self.frame
470:57 - as an attribute in the init method this
471:00 - is going to be tdk.frame as well with
471:03 - self as the master this self.frame I
471:06 - want to pack right away
471:08 - self.frame dot pack we can set it to
471:11 - expand being true and fill being both as
471:14 - well although this one doesn't matter
471:16 - very much because as soon as I create I
471:19 - have a small or medium layout I want
471:22 - self.frame dot pack underscore forget
471:26 - this I want to do for both the small and
471:28 - the medium layout
471:30 - essentially what is going to happen when
471:32 - we are starting the app we are creating
471:34 - a frame
471:35 - by default this Frame is going to be
471:37 - empty however once we are creating this
471:39 - small layout we are removing this Frame
471:42 - and then creating a new frame for the
471:45 - same variable or while attribute this is
471:48 - important because if we now create a
471:50 - medium layout we can use the same
471:52 - attribute to forget the current layout
471:54 - and then create a new one
471:57 - that way if we go back to a small layout
471:59 - like this one here we can once again
472:01 - forget the layout and create a new one
472:04 - with that we should be making some
472:06 - progress although still not ideal so now
472:09 - if I increase the size we get something
472:12 - very briefly like so but we're getting a
472:16 - key error none
472:19 - this problem happens down here in the
472:21 - size Notifier more specifically all the
472:23 - way down here
472:25 - there's some kind of problem with
472:27 - self.current size
472:29 - let's print it actually I want to print
472:32 - self.current minimum size now if I run
472:34 - this by default we get 300 that's a good
472:37 - start
472:37 - but if I resize the app
472:41 - we get something really strange we
472:44 - basically have an infinite Loop let me
472:47 - close all of this
472:48 - we had some kind of infinite Loop where
472:51 - we kept on getting 300 and 600. and the
472:55 - issue here is
472:58 - let me find it really quick this
472:59 - window.bind is being run whenever any
473:03 - kind of widget changes size or position
473:06 - as a consequence this is also going to
473:08 - be run when we are placing ttk.label
473:11 - also this is going to be run on
473:13 - self.frame the reason why this is a
473:16 - problem is because all of these labels
473:18 - here all of these labels and this Frame
473:21 - as well they also get the configure
473:24 - event and since they can change the size
473:27 - we basically end up with the problem
473:29 - that this widgets here or more
473:32 - specifically the grid layout method
473:34 - changes the size as a consequence of
473:37 - this change in size we are calling check
473:39 - size which in turn once again calls this
473:44 - function here which once again calls the
473:46 - grid method the result is we are
473:49 - creating an infinite Loop where nothing
473:51 - is going to work anymore and ticket gets
473:53 - really confused
473:55 - fortunately this is really easy to fix
473:57 - inside of check size I want to add one
474:01 - more if statement this if statement is
474:03 - going to be
474:04 - the event dot widget
474:08 - should be self dot window I only care
474:11 - about this event and only if that is the
474:14 - case I want to run all of this
474:17 - now if I run the code again I can resize
474:20 - the window and now this is working
474:22 - perfectly fine
474:24 - and we can change between different
474:26 - layouts this is looking good
474:28 - and with that we are done we have
474:31 - different kinds of layout and well we
474:33 - can move between them although I would
474:36 - really recommend you to go over this in
474:38 - your own time especially this kind of
474:40 - logic here can get a bit tricky
474:44 - but well the exercise is going to be I
474:47 - want you guys to create a third layout
474:49 - where all of the widgets are next to
474:51 - each other for that purpose I use grid
474:54 - but you could use whatever you want it
474:55 - doesn't really matter and this layout
474:58 - should appear once the window is wider
475:00 - than 1 200 pixels pause the video now
475:02 - and try to implement this yourself
475:08 - alrighty first of all we are going to
475:12 - need another layout method
475:14 - I'm going to call this one create large
475:18 - layout and we need itself as always
475:22 - and here once again this is going to be
475:24 - quite a bit of typing so I'm going to
475:26 - just copy it for my notes it's going to
475:28 - look like this and it's fairly similar
475:30 - compared to create the medium layout we
475:33 - are forgetting the previous frame then
475:34 - we are creating a new frame with a
475:36 - column and a row although now we have
475:39 - four different columns and just one row
475:41 - this Frame we're packing right away and
475:43 - after that we're creating four labels
475:45 - that all once again have the same
475:47 - arguments
475:48 - after that we are using the grid layout
475:51 - method to place all of these labels
475:54 - although now we're using column 0 1 2
475:57 - and 3 and row is always going to be zero
476:00 - now we have to figure out when to call
476:02 - this and for that I want to minimize all
476:05 - of these methods so things are a bit
476:07 - easier to see
476:08 - when we are calling size Notifier we are
476:11 - passing in a dictionary
476:13 - it's probably better to put this
476:15 - dictionary over multiple lines
476:18 - like so that way it's quite a bit easier
476:21 - to read
476:22 - to this I want to add another entry 1200
476:25 - that's the minimum width and I want to
476:28 - create large layout
476:31 - and with that we are done I can now run
476:33 - this I have a small layout I have a
476:36 - medium layout and I get a large layout
476:39 - that's basically all we need
476:41 - I guess what you could do if you have
476:43 - your own app you could simply use the
476:45 - size Notifier and use it for your own
476:47 - purposes this one is quite reusable and
476:49 - works really well
476:51 - a really important part that I haven't
476:53 - covered yet is scrolling
476:55 - which is going to look like this we have
476:59 - a canvas and on this one we have custom
477:01 - scroll bars that go up and down or left
477:04 - and right
477:06 - now this really doesn't look too
477:08 - impressive but what we eventually can do
477:11 - with this
477:13 - is something like this where we can
477:15 - create a frame that is scrollable
477:18 - although for now we're going to keep it
477:20 - simple and let's start with some Theory
477:23 - in teak and there are there are three
477:24 - widgets that can be scrolled we have
477:27 - canvas text and Tree View
477:30 - the canvas is the most useful one since
477:33 - this one can display other widgets we
477:35 - will cover that in the next part but for
477:37 - now let's get started with the basics
477:40 - I am importing tkinter I am setting up a
477:43 - window and I'm running main Loop the
477:45 - result is going to look like this on
477:48 - this I want to start by creating a
477:50 - canvas
477:52 - this I want to store in a variable that
477:53 - I call canvas and canvas we create with
477:55 - TK dot canvas
477:58 - in here we need to parent or to master
478:00 - which is going to be window and just so
478:02 - we can see it I want to set a background
478:04 - with a white color this canvas I want to
478:07 - pack right away so canvas dot pack I'm
478:10 - going to set expand to through and fill
478:14 - to both now if I run this we can see the
478:18 - entire background is white I guess for
478:21 - now I can change the background to red
478:23 - that is a bit easier to see we can
478:25 - definitely tell the canvas covers the
478:28 - entire window but that's not actually
478:30 - what we want instead what I want is that
478:34 - the canvas is larger than the window for
478:37 - that we need one more argument and that
478:39 - is called scroll region this creates a
478:42 - larger canvas that we can use for
478:44 - scrolling for this we need four
478:46 - arguments we need the left the top the
478:49 - right and the bottom the left and the
478:52 - top are basically always zero and zero
478:54 - that makes it very easy to navigate
478:56 - for the right I want to set 2000 and for
479:00 - the bottom I want to have 5 000. for
479:03 - comparison here the window itself is 600
479:05 - by 400 pixels so the canvas now is going
479:08 - to be quite a bit larger although if I
479:10 - run the entire thing we can't see any
479:13 - kind of difference
479:14 - first of all we only have a red color
479:16 - for the canvas right now which isn't
479:18 - particularly helpful to actually see
479:21 - some scrolling we need content for the
479:23 - canvas in my case I want to the most
479:26 - important one create a line this line is
479:30 - supposed to go from the top left all the
479:32 - way to the bottom right
479:34 - which means when we are creating it I
479:36 - want this to start at 0 and 0 for the
479:38 - left at the top the right is going to be
479:40 - 2000 and the bottom is going to be 5000.
479:44 - with that we have the exact same numbers
479:45 - that we have used here although for a
479:48 - line the first two are the starting
479:49 - position and the last two are the end
479:51 - position
479:52 - other than that I want to fill this one
479:55 - with a color let's go with green
479:58 - and then I also want to set the width so
480:00 - it's a bit easier to see let's go with
480:01 - 10. now if I run this one we have a line
480:05 - although we can only see one part of the
480:07 - line but that we can work on besides the
480:11 - line I also want to create a couple of
480:13 - rectangles for that I'm going to use a
480:15 - for Loop let's say for I in range and I
480:18 - want to create a hundred rectangles
480:21 - to create a rectangle I need canvas and
480:24 - create underscore rectangle this one is
480:27 - going to work kind of like the line for
480:29 - each rectangle we have to specify a left
480:32 - a top a right side and a bottom side
480:35 - besides that I also want to have a fill
480:38 - which is supposed to be a color which
480:40 - means we have to create five different
480:42 - variables we need a left side we need a
480:46 - top side we need a right side we need a
480:50 - bottom and we need a color
480:53 - all of these numbers are actually fairly
480:55 - simple but since I do want to have
480:56 - random numbers I need to import two
480:59 - things
481:00 - I want from random import rant int and
481:04 - choice Rand int is going to give me the
481:07 - positions so left top right and bottom
481:09 - basically all I want to do is run in
481:12 - from 0 to 2000 or from 0 all the way to
481:16 - the right or the top I want to have Rand
481:19 - int with 0 and 5000 so all the way from
481:22 - the top to the bottom for the right side
481:25 - I want to have the left side plus a
481:27 - random amount let's say rant end with 10
481:31 - and I think 500 is what I went with
481:34 - finally for the bottom I want to have
481:36 - the top plus rant end 10 and 500. for
481:41 - the color I want to use choice
481:43 - and choice needs a tuple with a couple
481:46 - of color arguments and here I want red I
481:49 - want to have green I want to have blue I
481:54 - also want to use yellow and let's go
481:57 - with orange
481:59 - with that I can run the entire thing and
482:01 - now we can see at least parts of some
482:03 - rectangles
482:04 - and with that I can also change the
482:06 - background of this canvas to White
482:10 - and we can still see things or at least
482:12 - we can see the line for now we didn't
482:14 - get lucky to see any kind of rectangle
482:16 - but they are definitely there if I run
482:17 - this again now we can see them with that
482:20 - we can cover the actually important part
482:21 - and that is a scroll bar
482:26 - this grow body Kinder is just another
482:29 - widget we create this with ttk and
482:31 - scroll bar
482:33 - this one is apparent let's go with
482:36 - window and I also want to store all of
482:37 - this inside of a variable let's call it
482:39 - scroll bar
482:41 - for the scroll bar we need one argument
482:44 - right away that you basically always
482:46 - want to pass in and that is Orient for
482:48 - this one you have horizontal or you have
482:51 - vertical horizontal is the default one
482:54 - but I want this to be vertical
482:57 - with that covered I want to place this
482:59 - thing right away and place was
483:01 - deliberate because I want to use the
483:02 - place method this is basically what you
483:05 - always want to use for scroll bar
483:06 - because this allows you to set relative
483:08 - X to 1 and relative y to zero with a
483:13 - relative height of 1 and an anchor of
483:18 - North East
483:20 - that way this crowbar is always on the
483:22 - right side of the window so I can run
483:24 - this now and on the right side we have a
483:27 - scroll bar although right now it doesn't
483:29 - do anything
483:30 - now this scroll bar Works kind of like a
483:34 - slider what that means in practice is we
483:37 - can give it one more argument that is
483:38 - called command this command wants to
483:41 - have a function you could pass a normal
483:44 - function in here but most of the time
483:46 - you want to do one specific thing you
483:48 - want to get a scrollable widget like the
483:51 - canvas and then get the Y view method
483:55 - this y view method is basically designed
483:58 - to work with a scroll bar if I run this
484:01 - now you can't really see any difference
484:03 - on the scroll bar but if I move the
484:05 - scroll bar we now have some scrolling
484:09 - which is a good start
484:11 - to actually see the progress inside of
484:13 - the scroll bar
484:14 - we want to have the canvas and we want
484:16 - to run configure the argument we need
484:19 - now is called y scroll
484:22 - command this I want to set to scroll bar
484:26 - dot set now if I run this we can see the
484:30 - scroll bar is working and we can use it
484:32 - to move around in the canvas this is
484:35 - working really well
484:37 - and basically what you have to
484:38 - understand let me draw this actually we
484:41 - have a canvas that is what we created
484:44 - here and then we have a scroll bar that
484:47 - is what we created here
484:50 - those two are going to influence each
484:52 - other the scroll bar is going to give us
484:55 - one size of the canvas and this we are
484:58 - doing with this command and canvas.y
485:01 - view this picks one part of the scroll
485:03 - region
485:05 - however we also have to go the other way
485:07 - that the canvas influences the scroll
485:10 - bar and this happens down here with the
485:14 - scroll command is equal to scrollbar.set
485:17 - this tells the scroll bar how tall the
485:19 - widget is and which section we currently
485:22 - have you need both of these parts to
485:24 - make all of this work efficiently but
485:26 - once you have it you are basically done
485:28 - so let me run this again and we
485:30 - basically have all we need for the basic
485:32 - scroll logic there's one more thing that
485:34 - we can do and that is let me put it
485:37 - above the scroll bar Mouse wheel
485:40 - scrolling
485:42 - for that I want to get my canvas again
485:44 - and I want to bind an event the event I
485:47 - want to look for is called Mouse wheel
485:50 - be careful here the W has to be
485:52 - uppercase
485:54 - once we're doing that I want to call a
485:56 - function and this could just be a Lambda
485:58 - function don't forget the event here and
486:00 - for now let me just print the event
486:02 - itself
486:04 - now if I'm over the canvas with my mouse
486:06 - and use the scroll wheel we get an event
486:08 - that we can work with on this event what
486:11 - I care about is this Delta
486:14 - if I move my mouse with away from me
486:16 - this is a positive number if I move it
486:18 - towards me this is a negative number I
486:21 - think it is always 120 but your results
486:24 - May Vary
486:25 - depends on your mouse and your operating
486:26 - system I think but the number itself
486:28 - here isn't really that important the way
486:31 - you are going to use it is by targeting
486:33 - the canvas and then calling the Y view
486:36 - underscore scroll method
486:40 - this one tells the canvas to scroll in a
486:42 - certain direction and for this we need
486:45 - two arguments we need the amount and we
486:48 - need the units the units is kind of
486:51 - weird you basically need a string that
486:53 - is called units and you never use
486:55 - anything else so just always pass units
486:57 - in there the amount is the much more
486:59 - important bit for example in here I
487:01 - could simply add 20.
487:03 - although this might be a bit large if I
487:05 - now run this and I use my Mouse as a
487:07 - scroll wheel we are scrolling quite a
487:10 - bit although this only works one way
487:12 - in my case what I want to do I want to
487:15 - get the event I want to get the Delta
487:17 - and I want to divide this by 60.
487:20 - remember here event Delta was either
487:22 - positive or negative 120. if I divide
487:25 - this by 60 I am getting 2.
487:28 - which seems like a reasonable number but
487:30 - just play around with this whatever
487:31 - feels good is fine here
487:33 - however now we need one more thing if I
487:35 - run this again and are you scrolling we
487:37 - are getting an error and that is not
487:39 - actually the error I was expecting
487:40 - because I had a typo now let me try this
487:43 - again if I now use the scroll wheel we
487:46 - get expected an integer but got a
487:48 - floating Point number
487:50 - basically what you have to understand
487:52 - here is that tkinder for the scroll
487:54 - always wants to have an integer
487:57 - so now if I run this again I can use
488:00 - scrolling and now this works perfectly
488:02 - fine with my mouse wheel
488:04 - if you want to change the direction of
488:06 - the scrolling you would just add a
488:08 - negative here
488:09 - depending on what operating system you
488:11 - are used to you properly know different
488:13 - scrolling behaviors
488:15 - for some people if you scroll away from
488:17 - you on the mouse wheel you want to go up
488:19 - other people want to go down
488:21 - I prefer that if I go towards myself I
488:24 - am scrolling down and if I scroll away
488:25 - from me I'm going up but this is a
488:28 - choice you have to make but with that we
488:30 - have all of the basics of using a scroll
488:33 - wheel to move along a widget it really
488:36 - isn't that difficult
488:38 - so with that I want to add an exercise
488:42 - I want you guys to create a horizontal
488:45 - scroll bar
488:47 - and this one should be at the bottom and
488:49 - with that you are scrolling left and
488:50 - right on the canvas
488:52 - on top of that I want you guys to add
488:55 - one more event that the user can scroll
488:56 - left and right by holding down control
488:58 - and the mouse wheel control or command
489:01 - if you're on a Mac
489:03 - positively now and try to figure this
489:05 - one out yourself
489:10 - first of all I have to create a new
489:12 - scroll bar let me call it the scroll bar
489:15 - bottom
489:16 - this is going to be ttk and scroll bar
489:21 - the parent is going to be the window and
489:24 - Orient for this one is going to be
489:27 - horizontal
489:28 - although since this is the default
489:30 - argument you could just ignore it
489:32 - entirely let me place this one right
489:34 - away I want to get this scroll bar and
489:37 - use the place method for this one I want
489:40 - to have relative X being 0 and relative
489:43 - y being 1. on top of that I want to have
489:47 - the relative with being one
489:50 - and the anchor should be the south west
489:55 - let's run the entire thing
489:57 - and something definitely went wrong
490:00 - ah I see this shouldn't be scroll bar
490:02 - this should be scroll bar Bottom now if
490:05 - I run this this is looking much better
490:07 - all the way to bottom now we have
490:09 - another scroll bar
490:11 - there is a tiny overlap between the two
490:14 - scroll bars down here and for an actual
490:17 - app you would want to take care of this
490:18 - but in my case I'm not worrying too much
490:20 - about it
490:21 - with that let's work on the
490:24 - functionality we need a command argument
490:27 - and this command argument we have seen
490:29 - here before we still want the canvas
490:32 - except now we don't want why view
490:35 - instead we want to have x view
490:37 - I can already run the entire thing click
490:40 - on the scroll bar you can't really see
490:42 - it at least on the scroll bar but in the
490:44 - canvas you can see we can go left and
490:46 - right
490:47 - to make it visible in the scroll bar I
490:49 - want to have the canvas and I want to
490:51 - run configure now instead of Y scroll
490:54 - command I want to have X scroll command
490:57 - and for this I want to have my scroll
490:59 - bar dot bottom and use the set method
491:03 - with that I should basically be done now
491:05 - I can use the scroll bar on the
491:08 - horizontal axis
491:09 - the vertical one still works perfectly
491:11 - fine and this is looking really good
491:13 - finally I want to cover the second part
491:15 - of the exercise let me move it below
491:17 - because in here I want to have canvas
491:20 - dot bind
491:21 - and I think the only difficult part was
491:24 - to figure out how to combine the control
491:26 - or command with the mouse wheel
491:29 - on Windows this would be control and
491:32 - mouse wheel
491:34 - I believe on Mac OS it's actually the
491:36 - same keyword but let me know if that's
491:38 - wrong and then I'll help you next up we
491:41 - have to call a Lambda function or well
491:43 - some kind of function but Lambda is best
491:45 - here I guess I can just copy the entire
491:47 - thing I want to have a Lambda function
491:50 - for this one we need an event and then
491:52 - we have to call canvas and not y view
491:55 - but x view and scroll
491:58 - the other arguments though can stay
492:00 - identical with that we should be done
492:03 - let's run this
492:05 - and now I can use my mouse wheel to go
492:07 - up and down and if I will control I'm
492:09 - going left and right this is working
492:11 - quite well
492:13 - and this is going to cover all of the
492:16 - basics of scroll bars at least for the
492:18 - canvas
492:19 - with that I want to comment out all of
492:22 - this stuff because there are tumor
492:24 - widgets that I do want to cover
492:27 - the first one is the text widget
492:30 - this we create let me start in a
492:32 - variable TK dot text the master is going
492:35 - to be a window and I want to pack this
492:38 - right away text Dot pack with expand
492:41 - being true
492:43 - and fill is going to be both if I run
492:47 - this now we have a text box I can type
492:49 - in this but other than that we have no
492:51 - scroll bar
492:52 - to make a scroll bar work I want to add
492:55 - some content to this text box
492:58 - this I can do with a for Loop for I in
493:01 - range let's go from 1 to 200.
493:06 - these numbers I want to use with text
493:08 - Dot insert
493:10 - and now I need two arguments I need a
493:13 - position or rather a start index and
493:16 - then I need some text that I actually
493:18 - want to write the text is the easier bit
493:20 - I just want to have an F string that
493:24 - says text with the current index so I
493:29 - the index itself is going to be the
493:31 - starting position I already talked about
493:32 - it but basically in here tikenter
493:34 - expects something like 1.0 with 1 being
493:39 - the starting line and 0 being the
493:41 - character on that line
493:43 - since we do have the numbers from 1 to
493:46 - 200 we can simply turn this into an F
493:48 - string
493:50 - and put this as I now if I run this
493:53 - we get a whole bunch of numbers that's a
493:56 - good start although I do want to have
493:58 - some line breaks
494:00 - those we create with a slash and the
494:02 - letter N now to run this this is looking
494:04 - much cleaner
494:06 - we can already scroll around here by
494:08 - simply using the mouse wheel so this is
494:11 - the default Behavior although we don't
494:13 - have a scroll bar but this we can add
494:15 - quite easily afterwards I want to have
494:18 - another scroll bar let me call it scroll
494:20 - text
494:21 - and this is going to work basically
494:23 - identical compared to the canvas in fact
494:26 - I could simply copy all of the code here
494:29 - and paste it here
494:32 - if I comment it out I want to rename
494:34 - scroll bar
494:36 - in all of the places to scroll
494:39 - bar text and let's go through it step by
494:43 - step first of all for the scroll bar we
494:46 - are creating it we are setting it to the
494:48 - window we have an orientation and then
494:50 - we have the command right now the
494:52 - command is for the canvas instead this
494:54 - one should be for the text
494:57 - other than that the text widget also has
494:59 - a y view method so we can leave this one
495:01 - as it is
495:02 - next up we have to tell the scroll bar
495:04 - that it is being set by the text widget
495:07 - for that I want to get rid of the canvas
495:09 - and replace it with text
495:11 - for this one I want to have configured
495:13 - then the Y squirrel command
495:15 - and now I want to set scrollbar text Dot
495:18 - set that's all we need here
495:20 - finally I have to place the scroll bar
495:22 - itself
495:23 - and I want to have this one all the way
495:25 - on the right which is what I already
495:27 - have here so if I run the code now we
495:30 - have a scroll bar
495:31 - if you understood this for the canvas
495:33 - this one should be fairly
495:34 - straightforward which means I can
495:36 - comment out all of this and then cover
495:39 - the final one tree View
495:41 - for this one I have quite a few lines
495:43 - already let me just paste them in and
495:46 - uncomment them
495:48 - I am creating a table and this table has
495:51 - two headings we have one for the first
495:53 - name and one for the last name then I
495:56 - have a bunch of random first names and a
495:58 - bunch of random last names then I'm
496:00 - creating a for Loop that creates 100
496:02 - items that I'm inserting into the table
496:05 - finally I am placing or packing the
496:08 - entire table so if I run this we have a
496:11 - table
496:12 - I already covered treeview in quite a
496:14 - bit of details so check that bit if
496:16 - you're confused about all of this it
496:18 - shouldn't be too difficult
496:19 - once I have that I can simply once again
496:22 - copy the scroll bar from up here paste
496:24 - it in here and remove the comment
496:28 - and let's go for this step by step I
496:29 - guess first of all we have to create a
496:32 - scroll bar widget and this one I'm going
496:35 - to call scroll bar table
496:37 - this week rate with ttk.scrollbar the
496:40 - parent is the window and orientation
496:42 - should be vertical
496:43 - next up for the command I don't want to
496:46 - have text.yview I want to have table dot
496:49 - y view that's the name of the widget we
496:51 - just created or at least the variable we
496:53 - are storing it in
496:55 - next up we have to configure the scroll
496:57 - bar itself for that I want to have the
497:00 - table and this one has to configure y
497:03 - scroll command with scroll bar table and
497:07 - set
497:08 - this is going to set the position of the
497:10 - scroll bar itself
497:12 - oh well to position and the size finally
497:15 - I want to get scroll bar dot table and
497:19 - place it on the window for this I
497:21 - already have all of the arguments here
497:23 - so if I run this now
497:24 - we have
497:26 - a scroll bar for this table as well
497:29 - and that is it the really important part
497:32 - here is that you understand how to use
497:34 - scroll bars with the canvas because this
497:37 - is the one you are actually going to use
497:39 - quite a bit
497:40 - but it's generally good idea to
497:43 - understand all of them although I think
497:45 - if you understand one of them you
497:46 - understand them all
497:47 - another really important part for
497:49 - layouts are scrollable widgets and this
497:53 - is what we're going to work on we have a
497:56 - widget and we can scroll through it this
497:59 - is also quite flexible so if I extend it
498:02 - like so at some point We Can't Screw
498:04 - anymore because the window itself is
498:07 - larger than the list
498:11 - like with the responsive layouts
498:12 - decantera doesn't have an inbuilt tool
498:15 - for scrolling which is kind of a pain
498:17 - but what we can do is have a scroll
498:19 - wheel on a canvas on top of that we can
498:22 - also add widgets to a canvas
498:24 - if we combine those two we can create
498:27 - scrollable widgets but this isn't the
498:30 - most straightforward process and well
498:32 - you have to be very specific in terms of
498:34 - what you are going to do for example in
498:37 - the widget that we are going to create
498:39 - this one here
498:41 - you always use the pack method now you
498:44 - can use any kind of layout but you
498:46 - always have to create some custom
498:47 - solution that is going to make much more
498:49 - sense when you actually Implement
498:50 - everything
498:52 - once again I have a basic setup for the
498:54 - code and just as a reminder I want to
498:57 - create a canvas and this canvas is going
499:00 - to hold a widget for that I want to
499:02 - create a canvas with TK dot canvas
499:06 - the parent is going to be the window and
499:08 - let's say for the background color I
499:10 - want to go with white this canvas I want
499:13 - to pack right away I want to set expand
499:16 - to true and fill to both running this
499:20 - gets me a white background
499:22 - on this I now want to place a widget
499:24 - this I can do with canvas and create
499:27 - window
499:29 - this one at the minimum needs two
499:31 - arguments we need a position and we need
499:34 - a window a window is basically the name
499:37 - for the widget we want to place I want
499:40 - to place the widget at a position 20 and
499:42 - 50 completely random numbers
499:45 - for the window tick enter does expect a
499:48 - widget like ttk dot label for this one
499:52 - again we need a parent or a master I
499:55 - usually set this to the canvas but it
499:56 - actually doesn't matter now we need a
499:58 - text and the text is going to be let's
500:00 - say a label if it runs now we have a
500:04 - label the master here doesn't really
500:06 - matter I can set this to window and it
500:09 - would still get the same result now this
500:11 - isn't a picture it's an actual widget I
500:14 - can for example place a button and this
500:16 - button is here and I can even press it
500:19 - it works like any other widget which is
500:22 - super useful because that way I can add
500:24 - some scrolling mechanic and then I have
500:26 - a scrollable container although all of
500:29 - this does get a bit more complex so I'm
500:31 - going to do all of this inside of a
500:33 - class
500:34 - let me get rid of the canvas and instead
500:36 - create a new class
500:38 - I call this one a list frame it is going
500:42 - to inherit from TDK dot frame
500:45 - and we need a thunder init method
500:48 - this one itself it needs a parent then I
500:51 - want to have text Data finally I want to
500:55 - have an item height basically how this
500:58 - one is going to work I'm going to create
501:00 - a new variable to store it in list frame
501:04 - seems fine
501:05 - this is going to be list frame
501:08 - this one needs three arguments the
501:11 - parent is going to be the window or
501:13 - could be anything is really up to you
501:15 - then we need some Text data for that I
501:17 - have a list of some random entries
501:20 - this one is literally just a list with a
501:23 - couple of tuples inside and those are
501:24 - random strings
501:26 - this is going to be our Text data and
501:29 - finally I need the item height this is
501:32 - going to determine if I run the entire
501:33 - thing again
501:35 - the item height is going to be the
501:37 - height of one of those entries
501:40 - they are always going to span the entire
501:42 - width of the container so this we don't
501:44 - have to set ourselves you can also see
501:46 - here we have for the first entry label
501:49 - and button and this is this label and
501:51 - this button for the height I went with
501:53 - 100 but you can always choose whatever
501:55 - looks best inside of the init method the
501:59 - first thing we always need is a super
502:00 - Thunder init method
502:03 - for this one we need a master which is
502:06 - going to be the parent
502:07 - right after that I also want to pack
502:09 - this list frame which I do with the pack
502:12 - method this is going to be expand set as
502:14 - true and fill is going to be both
502:18 - since we're just working with a frame
502:20 - any layout method is going to be fine
502:22 - here I'm just working with the simplest
502:24 - one to not over complicate things
502:26 - once we have that I want to get my
502:29 - widget data this is going to tell me
502:31 - some basic things that I need to make
502:32 - all of this work for that first of all I
502:35 - want to turn the text Data into an
502:37 - attribute so self.text data is going to
502:40 - be text not text list but text Data
502:43 - next up I want to know how many items I
502:46 - have this I called self dot item number
502:51 - this item number we are getting from the
502:53 - text list this one down here I simply
502:56 - want to know the length of this list I
502:58 - have one two and so on items which means
503:02 - all I have to do is use the length
503:04 - function and then pass Text data in here
503:08 - finally I want to have one more
503:09 - attribute and that is going to be the
503:11 - list height this is going to be the
503:14 - height of the entire list this I get
503:16 - with self dot item number and multiply
503:20 - it with the item height next up I can
503:24 - create the actual canvas that I want to
503:26 - use for scrolling this is going to be
503:28 - self.canvas and then here PK dot canvas
503:33 - the parent is going to be self and just
503:35 - so we can see something I want to set
503:37 - the background to red
503:39 - this self.canvas I want to pack right
503:42 - away and I'm going to use the expand
503:44 - method this should be true and fill
503:46 - should be both let me run it straight
503:49 - away and now we can see we have a canvas
503:51 - that covers the entire window it's a
503:54 - pretty good start
503:55 - on this canvas we are now going to place
503:58 - another frame
504:00 - I called this one the widget frame
504:02 - although a better name would be the
504:04 - display frame
504:06 - essentially what is going to happen we
504:08 - are going to place all of our widgets
504:10 - inside of this Frame and then this Frame
504:12 - we're going to draw on this canvas I
504:15 - think that's going to be quite difficult
504:17 - to understand so let me explain what I'm
504:19 - implementing it
504:20 - I want to have self.frame and this is
504:22 - going to be ttk dot frame the parent is
504:24 - going to be self and now I want to use
504:28 - self dot canvas dot create underscore
504:32 - window
504:33 - once again we need to position and we
504:36 - need a window the window is quite simple
504:37 - I want to use self.frame the position
504:40 - actually is also very simple because I
504:42 - want to have 0 and 0 as a starting point
504:44 - so the top left of the canvas
504:47 - that being said if I'm running all of
504:49 - this we can't see a difference however
504:51 - what I can do now is give this
504:54 - self.frame a child
504:57 - let's work with ttk and label
505:01 - the parent here is going to be
505:02 - self.frame and the text is going to be a
505:06 - label I want to pack this right away
505:09 - without any arguments now if I run this
505:11 - we can see label all the way in the top
505:13 - left
505:14 - not terribly visible right now but you
505:17 - get the idea at least it's working
505:19 - one change we can already make is that
505:21 - we are placing the center of the widget
505:23 - right now
505:25 - to make that a bit better I want to
505:27 - place the anchor and the anchor is going
505:29 - to be North West now if I run this we
505:32 - can see a label in the top left that's
505:34 - much better
505:36 - although now things are getting a bit
505:38 - weird we have this self.frame but we are
505:41 - never using a layout method to place
505:43 - this Frame instead we are drawing it
505:45 - with the create window method and that
505:48 - is creating some bits that are deviating
505:51 - from what you used to know about tkinter
505:53 - the most important one is that this
505:56 - great canvas is now giving the space for
505:59 - the frame which means I could set the
506:02 - width here to whatever number I want it
506:04 - wouldn't matter so the width of 200 is
506:06 - not going to make a difference
506:08 - I could also set for the label fill to
506:11 - both we still couldn't see anything
506:15 - the reason for that is let me remove
506:17 - them actually because they would be
506:19 - confusing
506:20 - when we run create window great window
506:24 - tries to find Dimensions that are just
506:26 - large enough to display the widgets
506:28 - inside which right now is just large
506:31 - enough to display this label although
506:34 - you could customize this you can set a
506:37 - rift let me go with 200 and you can set
506:40 - a height let's go with 400 in here so if
506:43 - I run this now we can see a difference
506:45 - if I expand the window a bit the frame
506:48 - with this label is 200 pixels wide
506:53 - and it is 400 pixels tall and this we
506:58 - can already use because I know for
507:00 - example the hype is going to be the list
507:02 - height itself although I want to place
507:05 - all of this over multiple lines so it's
507:07 - a bit easier to see like
507:09 - so
507:12 - that is much better basically what you
507:14 - have to understand now is when we are
507:16 - creating this Frame I want the frame to
507:19 - cover the entire canvas but since we
507:22 - can't use pack Grid or place we have to
507:25 - do a bit of math here ourselves although
507:27 - the math is going to look as complex as
507:29 - this one it's really not hard the first
507:32 - part we already have because the height
507:33 - of the list is going to be self dot list
507:36 - height
507:37 - if I run this now we can see we have a
507:40 - longer widget here that goes up to this
507:43 - point for the width I want to cover the
507:46 - entire width of the window so right now
507:48 - this would be 500.
507:51 - let me change this to 500 and there we
507:54 - go the label covers the entire window
507:55 - although if we resize the window this
507:58 - breaks but that we can work on
508:00 - for now I'm going to leave this at 500
508:02 - but later on we're going to make this
508:04 - flexible
508:06 - what is much more important for now we
508:08 - have to make this canvas scrollable as
508:11 - well
508:12 - right now the canvas is as large as the
508:15 - container so this TDK frame up here but
508:18 - if you want to make this scrollable it
508:20 - has to be larger as a consequence we
508:22 - have to give this a scroll region
508:26 - this one wants four arguments it wants
508:28 - the left the top the right and the
508:30 - bottom
508:32 - the left and the top are going to be 0
508:34 - and 0. those are really easy
508:37 - for the right side I want to have the
508:39 - width of the list which right now is
508:41 - going to be 500. and the bottom is going
508:45 - to be the height self and list height
508:47 - I should probably explain this in a bit
508:49 - of detail we have a list frame which is
508:53 - just going to be a frame this is the
508:55 - parent of all of this inside of that we
508:59 - have a canvas and this canvas is going
509:02 - to by default cover the entire frame
509:05 - like so that being said I want this
509:08 - canvas to be larger which I'm doing with
509:10 - this line here the width right now is
509:13 - hard coded so the width is always going
509:16 - to be 500 but the height
509:19 - this part here can at least in theory be
509:24 - larger than the window itself it might
509:25 - be something like this
509:26 - this entire canvas I want to fill with a
509:30 - widget which is this create window this
509:33 - should fill the entire canvas and then
509:36 - we are scrolling on it instead of
509:38 - creating a label I want this to be a bit
509:40 - more flexible
509:41 - I want to cycle over this text Data here
509:46 - which is going to be a for Loop for item
509:49 - in Text data
509:51 - let's make this self.txt data
509:54 - on top of that if I run the entire app
509:57 - again
509:58 - what we have is we have the index then
510:03 - we have one bit of text and then we have
510:05 - a button
510:06 - the number here we are getting from the
510:08 - for Loop
510:10 - for that I have used the enumerated
510:12 - method the numerate
510:16 - with that we are returning an index and
510:19 - the item
510:20 - let me actually print what we get I want
510:22 - to print the index and I want to print
510:24 - the item and I realized I made a fairly
510:29 - significant typo this should be scroll
510:30 - region
510:32 - talking and typing is really not easy
510:34 - there we go
510:35 - we are getting the index and the content
510:38 - of the text Data this is the information
510:40 - we have gotten down here
510:43 - this I now want to turn into a proper
510:45 - widget and then place it on this Frame
510:48 - since that is going to become a tiny bit
510:51 - more complex I want to store all of this
510:53 - inside of a method
510:55 - I'm going to call it self dot create
510:57 - item I want to paste in the index and
511:01 - the item
511:02 - this I now want to create I want to
511:06 - Define create item we need itself we
511:10 - need an index and we need the item
511:12 - I first of all want to create a new
511:14 - frame this is simply ttk and frame
511:18 - the parent here is going to be self dot
511:21 - frame next up I'm going to create a grid
511:25 - layout
511:27 - this is simply going to be frame and row
511:31 - configure we have only one row so this
511:34 - is zero and weight is going to be one
511:37 - then I can copy the entire thing and
511:39 - change this to column configure I want
511:42 - that to be five columns so zero one two
511:45 - three and four all with the same weight
511:47 - on top of that I want to have the
511:50 - uniform argument and set this to a
511:53 - once I've that I can actually create the
511:56 - widgets this one is quite
511:57 - straightforward I wonder if ttk dot
512:00 - label
512:01 - the master is going to be the frame text
512:04 - is going to be the index
512:08 - I want to have a label for the index
512:09 - this is what we are creating right now
512:11 - then I want to have another label for
512:13 - well label and then I want to have a
512:15 - button and this button covers a whole
512:17 - bunch of columns
512:19 - to display the text here I simply am
512:21 - going to use an F string
512:23 - and pass the index in here
512:27 - on top of that
512:29 - I want to use the hashtag symbol next up
512:31 - I want to place this widget using the
512:33 - grid layout method the row is going to
512:36 - be 0 and the column is also going to be
512:38 - zero
512:39 - this I now want to duplicate
512:41 - the text is not going to be the index
512:44 - instead I want to have the item and the
512:47 - item has two parts because it is a tuple
512:50 - we have label and button in this case I
512:52 - only care about the one with the index 0
512:54 - which would be label or thing the first
512:57 - item
512:59 - this I want to be in row 0 and column 1.
513:02 - finally I want to create one more widget
513:04 - and that is going to be ttk and button
513:07 - the text here is going to be item and 1
513:10 - and the column will be column two on top
513:13 - of that I want to have column span this
513:16 - button is going to span three columns
513:19 - finally the button is going to be sticky
513:21 - to north south east and west with that
513:24 - we have a frame and this Frame I want to
513:27 - return
513:29 - this is going to give me a widget I can
513:31 - minimize this if I run this now we can't
513:35 - see anything the reason for that is that
513:37 - this method returns a widget but we're
513:39 - not placing it on this Frame but that is
513:42 - very easily done by using the pack
513:44 - method
513:46 - this should be expand being true
513:49 - bill being both
513:52 - then I want to have a bit of padding for
513:54 - why this is going to be 4 and 4 pad X
513:57 - this is going to be 10.
514:00 - now if I run this
514:01 - we're getting an error because I forgot
514:04 - an equal sign
514:06 - there we go now we can see actual
514:09 - widgets although I cannot scroll right
514:11 - now and I move the mouse wheel and I
514:13 - don't have a scroll bar and if I resize
514:15 - this thing
514:17 - you can see that we don't actually have
514:19 - scrolling we just displayed a whole
514:21 - bunch of items but it's at the very
514:23 - least a starting point
514:25 - what I want to start with now is some
514:27 - actual scrolling and for that I'm going
514:29 - to use the mouse wheel all I have to do
514:31 - for that is create another section here
514:35 - for the events this is still inside of
514:39 - the init method
514:41 - let me minimize the create window part
514:44 - to get mouse wheel scrolling I want to
514:47 - get self dot canvas and then bind the
514:52 - Mouse wheel
514:55 - although there's going to be one issue
514:57 - that we have to be aware of let me just
514:59 - run a Lambda method with the event and
515:02 - print the event if I run the app now and
515:05 - I have my mouse over the widgets and use
515:08 - the scroll wheel nothing is going to
515:10 - happen however if I extend the app and
515:12 - use the scroll wheel over the red bits
515:15 - we can see scroll wheel
515:17 - the problem that we have right now is
515:20 - that this canvas.bind is only working
515:23 - for the canvas but once we're adding
515:25 - widget to the canvas with create window
515:28 - tkinter sees this as the mouse being
515:30 - active on this widget not on the canvas
515:33 - itself which is why the event doesn't
515:35 - work this however you can fix quite
515:37 - easily with bind all this adds the event
515:40 - to all of the children of the widget as
515:42 - well so now if I run this
515:45 - with a mouse on all of these widgets I
515:47 - can use the scroll wheel wherever I am
515:49 - which means now I can create the actual
515:52 - Lambda function what we need here is
515:54 - self dot canvas dot y view underscore
515:58 - scroll this one needs an amount and a
516:02 - unit
516:03 - once again for the unit tkinder just
516:05 - wants to have a string that says units
516:07 - for the amount you basically want to
516:10 - choose what works best with your
516:12 - computer
516:13 - what I have used is negative integer and
516:17 - then event dot Delta divided by 60. now
516:21 - if I run this I can use the scroll wheel
516:23 - and go up and down this is working
516:25 - really well although once again if I
516:28 - make this thing larger
516:31 - well I guess it still works but if I
516:33 - make it full screen we get some very
516:36 - strange Behavior
516:37 - although we are making progress for the
516:40 - next part I want to make sure that the
516:42 - list covers the entire width of the
516:43 - canvas
516:45 - right now all of this is hard coded
516:48 - when I'm creating the window it is 500
516:51 - and when I'm creating the scroll region
516:53 - this is also 500. but we do know how to
516:57 - get the width of a widget we need in
516:59 - this case self and W info underscore
517:04 - either with or a height in this case
517:07 - with also don't forget to call it
517:09 - if I now run this again we can see the
517:12 - same result because by default the
517:14 - window is 500 pixels
517:16 - but this would still work even if we
517:18 - have different numbers this I also want
517:20 - to paste in for the with for the list or
517:23 - Brava create window
517:25 - if you're honest again now
517:27 - although now if I run this well we can't
517:30 - see anything
517:31 - the reason for that is that this W info
517:33 - dot with is one by default let me
517:35 - actually print it
517:37 - if I print this you can see what I'm
517:39 - talking about I want to print self.w
517:42 - info with don't forget to call it once
517:44 - again and if I run this we are getting
517:46 - one as a consequence the widget we are
517:50 - creating is all the way on the left here
517:52 - and it is one pixel wide so not very
517:55 - helpful
517:56 - to account for that I want to bind the
517:59 - configure part again so self dot bind
518:02 - and in here
518:04 - I want to have configure
518:07 - this is going to run every time we are
518:10 - updating the size or the position of
518:12 - this container this list frame here it
518:15 - is also going to run when we are
518:16 - creating the widget for the first time
518:18 - meaning we can use this to update the
518:21 - size of all of this and make this work
518:22 - again
518:24 - since we are going to use a couple of
518:26 - lines of code here I want to create a
518:28 - separate method I got this one self dot
518:31 - update underscore size
518:34 - let's create this right away I want to
518:36 - have update size
518:39 - remember here we need self and event
518:42 - for the parameters we need self and
518:44 - event
518:45 - in here I want to get self.canvas again
518:48 - and run create window one more time
518:52 - with essentially the same arguments all
518:56 - of these here I want to pass into this
518:59 - one and now if we run this this is going
519:02 - to work again
519:04 - because essentially what is happening
519:05 - now when we are creating this bit here
519:08 - it changes the width to one so we can't
519:11 - see it but this configure is going to
519:14 - call this update method once when we are
519:17 - creating the layout
519:18 - which is going to draw on top of this
519:21 - create window and that way we can only
519:23 - see the updated canvas and this one has
519:26 - the proper size I'm not actually quite
519:28 - sure why W info.wiff Works in here but
519:31 - not in here tkinder can be a bit weird
519:34 - with that if you play around with this
519:36 - you will eventually understand this but
519:38 - it's more of an art than a science to be
519:40 - honest what we can do is simply get rid
519:43 - of this thing here this is still going
519:45 - to work
519:46 - now we also have scrolling and more
519:48 - importantly if I resize the window we
519:51 - are covering the entire wift because
519:53 - every time
519:55 - that we are resizing the window we are
519:58 - calling this method here with configure
520:01 - and configure is going to update the
520:03 - width of this create window
520:06 - the weft is always going to be the full
520:08 - height of the container that way the
520:11 - frame we are going to place this one
520:14 - here is going to cover the entire width
520:16 - of the canvas also I want to get rid of
520:19 - the comments here
520:21 - because we have a ton of logic I want to
520:23 - keep this a bit more organized although
520:26 - we are almost done we have the basic
520:28 - widgets and they work very well the one
520:32 - problem we have right now is if I make
520:34 - the container really large I can keep on
520:36 - scrolling and now this starts to look
520:38 - weird the basic problem we have if I
520:41 - make the smaller again
520:42 - if the actual container is larger than
520:45 - the list this kind of logic starts to
520:47 - break so we have to account for that
520:49 - that isn't terribly difficult and all of
520:51 - the logic happens inside of update size
520:53 - let me minimize the init method so all
520:57 - of this is a bit easier to see the issue
520:59 - here is the height
521:01 - we have a list frame and this would be
521:04 - something like this it's just a frame
521:07 - nothing else inside of there we have a
521:09 - canvas and instead of the canvas we have
521:11 - a frame this Frame could either be let's
521:14 - say this tall
521:17 - or it could be this tall if the list is
521:20 - longer than the container this one is
521:22 - perfectly fine we have enormous scroll
521:24 - logic and everything just works the
521:26 - problem is when we have a list that is
521:28 - shorter than the container so the height
521:31 - here is what's causing the problem
521:34 - what we have to do to fix that is if
521:36 - this list is smaller or well shorter
521:38 - than the entire container I want to
521:41 - stretch the list to cover the entire
521:43 - height also I want to disable scrolling
521:46 - because it shouldn't be possible if the
521:48 - list doesn't even cover the entire
521:49 - container all we have to do for that is
521:52 - set a custom height right now we always
521:55 - set the height from the init method this
521:58 - height here however if the list doesn't
522:01 - cover the entire height of the container
522:03 - I want to have the height of the
522:05 - container as the height of this window
522:08 - which means if self dot list height
522:13 - is greater or equal
522:16 - then self.w info not with but height if
522:21 - that is the case I want height to be
522:23 - self dot list height
522:26 - this is basically what we already have
522:28 - but this height I want to have in here
522:30 - although for now this isn't going to
522:33 - make a difference so the same problem is
522:35 - going to come up again and here we're
522:37 - getting an error because if this
522:39 - condition is false
522:41 - we are not accounting for it
522:43 - but that we're going to work on right
522:45 - away
522:46 - if the container so w info dot height is
522:49 - taller than the list if that is the case
522:52 - I want the list to stretch out over the
522:54 - entire height of the container
522:56 - which in practice means the height
522:59 - should be self.w info and height
523:03 - with that I can run your typing again
523:05 - and now if I maximize it
523:08 - the list now covers the entire container
523:11 - although if I scroll up we still get
523:13 - some weird scrolling behavior all we
523:15 - have to do for this one I want to get
523:17 - self dot canvas
523:20 - and then unbind all
523:23 - the events for this one is going to be
523:27 - the
523:29 - Mouse wheel
523:31 - this is going to be the opposite of bind
523:33 - all quite obvious I think so for the
523:36 - canvas earlier we used canvas and bind
523:39 - all for the mouse wheel
523:40 - if the container is taller than the list
523:42 - I want to unbind this so now if I run
523:45 - this this is looking still pretty good I
523:48 - can maximize this and now if I scroll
523:50 - well I can't scroll anymore that way we
523:53 - are simply covering the entire frame
523:55 - with a list and this looks quite
523:57 - responsive
523:59 - the problem now is if I make this small
524:01 - again I still cannot scroll because
524:04 - I remove the binding
524:06 - but that we can fix quite easily all you
524:08 - have to do is copy this entire line
524:12 - and if the list is taller than the
524:15 - window height I want to bind this event
524:17 - again like so if you're doing this
524:19 - multiple times tikkinder simply ignores
524:21 - The Binding chords so we can do this
524:23 - multiple times without a problem with
524:25 - that we are pretty much done now I can
524:28 - scroll I can maximize the window and I
524:30 - can't scroll anymore if I minimize this
524:32 - again I can scroll again this is working
524:34 - really well
524:37 - with that let me minimize everything so
524:40 - things are a bit easier to see we are
524:43 - pretty much done although I do want to
524:45 - do an exercise this is really important
524:48 - what I want you guys to do is to add a
524:50 - scroll bar to all of this
524:56 - first of all we have to create the
524:57 - widget for the scroll by itself this is
524:59 - going to happen inside of a niche in
525:02 - here let's say before events I want to
525:05 - create a scroll bar
525:08 - this should be an attribute so self
525:10 - Dodge let's call it scroll bar
525:13 - this we create with ttk and scroll bar
525:17 - the parent is going to be self Orient
525:19 - should be vertical next up I want to
525:23 - place the screw bar this I do with self
525:25 - dot scrollbar dot place
525:28 - the positions here are going to be Rel x
525:30 - 1 Rel y 0 meaning we are on the top
525:34 - right
525:35 - and I want real height to be 1. with
525:39 - that we're covering the entire vertical
525:41 - space finally we have to set the anchor
525:44 - to Northeast
525:46 - with that we should be having a scrolled
525:49 - bar let's run the code and there we go
525:51 - on the right side we have a scroll bar
525:53 - although it doesn't do anything and on
525:55 - top of that it's overlapping with the
525:57 - buttons so this isn't ideal
526:01 - for this project I'm not going to worry
526:03 - too much about it but in an actual
526:05 - project you want to have a better system
526:06 - here for example the entire container
526:09 - would be its own frame and then you
526:12 - place a scroll bar to the right of it
526:13 - using the pack method that way it
526:16 - wouldn't be overlapping
526:17 - with that we have a scroll bar now we
526:19 - have to connect it to the widget itself
526:22 - or more specifically to the canvas this
526:25 - canvas here
526:27 - this requires us to add two more basic
526:30 - bits first of all when we are creating
526:32 - the scroll bar it needs to have a
526:35 - command whenever we are clicking on it
526:38 - and this command is going to execute
526:41 - self.canvas dot y View
526:44 - that way the scroll bar is going to
526:46 - influence the canvas let's try now I can
526:49 - click on the scroll bar and move the
526:51 - canvas this is working really well
526:53 - although we can't see it in a scroll by
526:55 - itself for that we're going to need
526:58 - another line of code what we have to do
527:01 - is to set self DOT cam this
527:06 - dot configure in here we need to command
527:09 - y scroll command
527:12 - this is going to influence the scroll
527:14 - bar depending on where we are on the
527:16 - canvas for that we need
527:18 - self.scrollbar dot set
527:22 - and with that I can run the entire thing
527:24 - and now you can see the scroll bar only
527:26 - covers the appropriate amount and this
527:28 - is working pretty well although you are
527:31 - going to notice here the cameras has one
527:33 - slightly annoying thing if I move the
527:35 - scroll bar really fast you are going to
527:37 - see this
527:38 - you can see we get some graphical
527:40 - glitches and that is because sometimes
527:43 - the canvas doesn't keep up with the
527:44 - drawing which unfortunately is not
527:46 - something we can really deal with it's
527:48 - just a problem of tkinder although if
527:51 - you just use the mouse wheel this isn't
527:52 - happening
527:53 - with that we have a scroll bar but
527:55 - there's one more thing that I do want to
527:56 - do that is if we maximize the window and
528:00 - we can't scroll anymore the scroll bar
528:02 - should disappear because it's not needed
528:05 - for that we don't need a net anymore
528:08 - instead I want to work inside of update
528:10 - size in here the if statement is what
528:14 - really matters this if statement
528:16 - triggers if we can scroll and this if
528:18 - statement triggers if we cannot scroll
528:20 - if we cannot scroll I want to hide the
528:23 - scroll bar which we do with
528:25 - self.scrollbar DOT lace underscore
528:28 - forget
528:29 - with that if I run the entire thing
528:31 - again and I expand the window at some
528:35 - point the scroll bar will disappear this
528:37 - is looking good although if I make the
528:39 - window smaller again this robot doesn't
528:41 - reappear which is what we have to work
528:43 - on next and this happens inside of this
528:46 - if statement here all we have to do is
528:48 - place the scroll bar again this is what
528:50 - we have done inside of the init method
528:52 - this line here I can just copy it paste
528:56 - it in here and now we should be good to
528:58 - go
528:59 - let me run the entire thing there we can
529:02 - see the scroll bar again this is working
529:04 - pretty good now if I make the window
529:06 - larger let's full screen it actually now
529:09 - the scrubby disappears and we can't
529:11 - scroll at all however if I make the
529:13 - window smaller again a scroll bar
529:15 - reappears
529:17 - I can make the window even smaller and
529:20 - this is still working really good
529:22 - I suppose there's one thing I should
529:24 - mention if you place or use any layout
529:27 - method on a widget multiple times
529:29 - tkinder is going to override the
529:32 - previous layout method meaning if we
529:34 - call place twice the last call is going
529:37 - to overwrite the previous one let's talk
529:39 - about using multiple windows in tkinter
529:42 - what we're going to make for this bit is
529:44 - going to look something like this inside
529:47 - of this app we have three buttons If I
529:49 - click on the top one open main window we
529:52 - are opening another window this is a
529:54 - completely separate teak in the window
529:56 - and inside of this one we can create any
529:58 - kind of layout
529:59 - although in my case I stuck with a
530:01 - simple one but this could be much more
530:03 - complex in this window you can also
530:05 - close inside of the window itself like
530:07 - so or if I open it again I can also
530:10 - close it inside of the main window like
530:12 - so
530:13 - besides that you can also create a more
530:15 - focused window for example sometimes you
530:18 - only want to ask a user a yes or no
530:20 - question for that tick enter has a more
530:23 - dedicated option that looks something
530:24 - like this in here you can click either
530:26 - yes or no let's click on no and then it
530:29 - disappears the input you can also
530:31 - capture and then use for whatever
530:33 - purpose and tick enter has a couple of
530:35 - options for that we're going to explore
530:37 - all of them but let's talk about it in a
530:40 - bit more detail first and then we can
530:42 - jump into the code
530:43 - inside of the Kinder you have two
530:45 - options for extra windows the first one
530:47 - is called a message box and these are
530:50 - more specialized windows for example if
530:52 - you want to create an alert or a yes or
530:54 - no dialog you would use a message box
530:56 - besides that you have top level and this
530:59 - is going to create a whole new window
531:02 - inside of that window you can create any
531:04 - kind of layout and use any widget you
531:06 - want I already have a couple of lines of
531:09 - code ready if I execute all of this we
531:11 - have a window and we have a couple of
531:13 - buttons although none of the buttons do
531:15 - anything right now we are importing
531:18 - tkinder up here we are creating a window
531:20 - here we are creating three buttons here
531:23 - and then we are running the main Loop
531:25 - all of this at this point should be
531:28 - fairly straightforward
531:29 - but now I want to actually make these
531:31 - buttons do something and I'm going to
531:33 - start with button number three this is
531:36 - going to create a yes no window I want
531:39 - to trigger all of that inside of a
531:41 - function so let me add a command method
531:45 - I call this one ask yes no
531:49 - this function we have to create and I
531:52 - will do that all the way at the top
531:53 - Define ask yes no there's no need for
531:56 - parameters and in here just to test if
531:59 - this is working let's print test
532:02 - if I run the entire thing now and I
532:04 - click on create yes in the window we can
532:06 - say test
532:07 - that's a pretty good start
532:09 - what I now have to figure out is how to
532:11 - create an actual message box in here
532:14 - and for that we have to import something
532:16 - else from tkinder what we need all the
532:20 - way at the top is from tkinter import
532:22 - what is called a message box all in
532:26 - lowercase letters inside of this message
532:28 - box we have a couple of objects that we
532:31 - could use for a well message box
532:34 - the option you have just seen is called
532:37 - message box dot ask question
532:42 - inside of this one you have to add two
532:44 - strings the first one is for the message
532:46 - box title let's call it title for now
532:50 - besides that for the second argument we
532:52 - need a string for the body let me call
532:54 - this one body
532:56 - like so and now if I run this and I
533:00 - click on create yes in the window we can
533:02 - see we have another window with title
533:04 - body and then I can click yes or no
533:07 - let me click on yes and it disappears
533:10 - and that is basically it although I
533:13 - suppose there's one more thing you have
533:14 - to understand and that is that all of
533:16 - this here Returns the answer which means
533:20 - I can store what is being returned in a
533:22 - separate variable and then print
533:25 - answer
533:27 - and now if I run this again I click on
533:30 - create yes in the window and if I click
533:32 - on yes we can say yes in the bottom and
533:35 - if I click on no we can see no that way
533:38 - you can use this one here to get the
533:40 - actual user input and that's kind of all
533:43 - you have to know
533:44 - if you got this far all you really have
533:46 - to know is that there are different kind
533:47 - of methods you can use to create a
533:50 - simple message box and there's a really
533:52 - good website to explain all of them let
533:54 - me open it right away it is looking like
533:57 - this and then here you can see all of
533:59 - the options you can work with
534:01 - the one I've just used is called ask
534:03 - question besides that I could ask okay
534:06 - cancel I could ask yes no I could ask
534:09 - yes no cancel I could also show just an
534:12 - info or a warning or an error and well
534:16 - these are all very simple Windows
534:19 - let's play around with a couple of them
534:21 - but this shouldn't be too difficult
534:23 - yeah I'm back in the code and I want to
534:25 - comment out what I've just done so this
534:28 - part here
534:30 - besides that I want to get my message
534:32 - box and show info
534:35 - for this one I want to display some
534:38 - information
534:39 - and now if I run this click on the
534:42 - button we have some information for the
534:45 - title but no actual text
534:48 - this happened because we need two
534:49 - arguments in here one for the title and
534:52 - one for the body of the text like we
534:54 - have done up here
534:55 - let's change this one right away I want
534:57 - to call this one the info title the
535:00 - second argument is going to be here is
535:03 - some information
535:05 - now if I run this again and I click on
535:07 - the button now we have here some
535:09 - information
535:11 - besides that we can get rid of show info
535:14 - and show an error
535:16 - if I run this again we have an error
535:19 - message looks basically identical except
535:21 - now we have an X here
535:23 - and with that we have basically all we
535:26 - are ever going to need for these simple
535:27 - boxes
535:29 - let me add the link to the website here
535:32 - so you can find it yourself it's super
535:34 - useful
535:35 - with that we have covered the simple
535:37 - Windows next up let's create some more
535:40 - complex ones I am going to minimize the
535:42 - ask yes no function and create another
535:44 - one
535:46 - this one I'm going to call create window
535:50 - doesn't need any parameters and in here
535:52 - I want to create a whole new window that
535:55 - can do basically anything a normal
535:56 - t-kinder window can do
535:59 - for that we need a new widget this is
536:01 - called TK top level
536:04 - this is going to return an object that
536:06 - works kind of like the window in the
536:09 - sense that you can just add other
536:11 - widgets to it and then they are going to
536:13 - be displayed let me store this in a
536:14 - variable actually let's call it extra
536:17 - window and just to get started let's
536:21 - actually run this function when we are
536:22 - pressing this button here which means on
536:25 - this button I want to have a command
536:28 - that is creating the window
536:30 - if everyone is now and I click on open
536:32 - main window we have another window and
536:35 - this one let me move it to the side
536:37 - doesn't really do anything right now
536:39 - the only thing we can really see is that
536:41 - we have multiple windows as the title
536:43 - for both of them but this we can change
536:45 - so let me close all of this and what we
536:48 - can do with this window is basically the
536:50 - same that we can do with this window
536:52 - down here for example we could get the
536:55 - extra window and set the title to extra
536:58 - window
537:00 - and we could also get the geometry and
537:04 - set this to let me use a larger number
537:06 - let's say 800 by 300.
537:10 - if I run this now
537:11 - and I click on open main window there we
537:13 - go we have another larger window that we
537:16 - can work with
537:17 - although let's use smaller numbers so
537:19 - this isn't getting too large what I used
537:22 - in demo is 300x400 but these numbers are
537:25 - entirely up to you on top of that what
537:27 - you can do is create other widgets and
537:30 - place them in here for example what I
537:32 - have done is I created ttk label and the
537:36 - parent here has to be this extra window
537:38 - so extra window and then we can add some
537:41 - text
537:43 - for example a label and this I want to
537:47 - pack right away
537:49 - running this now I can click on open
537:51 - window and we have a label inside of
537:53 - this extra window
537:55 - I could do this in another time except
537:58 - now I want to use a button let me run
538:00 - this again and there we go we have a
538:03 - label and a button although with the
538:05 - wrong text in there let me change it
538:06 - right away this should be a button
538:09 - and just to finish the demo here what I
538:12 - have done what you've seen in the opener
538:14 - I have created another label and this is
538:18 - going to be
538:20 - in never label
538:22 - and for this one pack I have set expand
538:26 - being true now if I run this entire
538:28 - thing I can click on open window and
538:30 - there we go we have another window you
538:33 - could also use a grid method or place
538:34 - method in here it works like any other
538:37 - widget in tkinder
538:39 - finally what I want to cover is how to
538:41 - destroy this window and there's one very
538:44 - easy way if I run this again I click on
538:46 - open main window and I can simply close
538:48 - this window by clicking on the X up here
538:50 - and then it disappears but besides that
538:53 - I also want to be able to close the
538:54 - window by clicking on this close main
538:56 - window which we can't do right now
539:00 - for that I want to create another
539:02 - function close
539:04 - window
539:06 - no need for parameters once again and
539:08 - this close window I want to call on the
539:11 - middle button which means this one is
539:13 - going to need a command like so
539:16 - and all we really have to do now is
539:19 - somehow get this variable let me use it
539:22 - right away extra window although this
539:24 - wouldn't work right now
539:26 - and I have to call the destroy method on
539:29 - it
539:31 - the reason why this is not going to work
539:32 - right now is because in this extra
539:35 - window only exists inside of the scope
539:37 - of this create window function
539:40 - to fix that we can simply declare it as
539:43 - a global variable extra window and now
539:46 - it is available everywhere which means
539:48 - this function here should already work
539:51 - I can open this window and move it to
539:53 - the side and if I click on close main
539:55 - window it disappears
539:57 - with that you should know how to use
539:58 - multiple windows it really doesn't get
540:00 - that much more complicated although
540:03 - there's one exercise I really want to do
540:05 - and that is that this kind of approach
540:07 - is not really ideal because it gets kind
540:10 - of messy you're creating a ton of local
540:13 - variables inside of a function and you
540:16 - work with lots of widgets this doesn't
540:17 - really feel organized what you should
540:20 - rather do is create an extra class let
540:23 - me call it extra
540:24 - right away and put all of this stuff
540:27 - inside of this extra class and that is
540:31 - going to be your exercise
540:33 - so this extra class should be a top
540:36 - level widget and contain all of these
540:38 - widgets and then you're creating this
540:40 - extra widget when you're calling the
540:42 - create window function pause the video
540:44 - now and try to implement this one
540:50 - first of all this extra has to inherit
540:53 - from TK Pop level with that we are
540:57 - recreating this line here
540:59 - although for that to work properly we
541:02 - have to call an init method
541:04 - that has self and nothing else inside of
541:07 - that we have to call this super Thunder
541:10 - init method
541:12 - although it doesn't need any arguments
541:15 - now we have recreated this entire line
541:18 - let me start by copying the title
541:21 - because all we have to know is called
541:23 - self and then the title
541:26 - the same thing we have to do for
541:28 - geometry meaning I can copy this one as
541:30 - well except for the class we have to run
541:33 - self and geometry
541:36 - and with that we should already have a
541:38 - basic window which means I can comment
541:41 - out all of this stuff here and instead I
541:46 - want to assign
541:47 - the extra class to the extra window that
541:51 - way this one here is still going to work
541:54 - let me run the entire thing now and if I
541:56 - click on open window we can see we have
541:58 - an extra window
542:00 - that's a pretty good start so next up we
542:04 - have to create all of these widgets here
542:06 - which is going to be very simple I just
542:09 - have to copy them and remove the comment
542:12 - and fix the indentation
542:15 - besides that now the parent isn't going
542:18 - to be the extra window it is just going
542:20 - to be self
542:22 - that didn't go particularly well this is
542:25 - looking much better
542:27 - now the label the button and the other
542:29 - label are all children of the extra
542:32 - widget
542:33 - which means I can try all of this again
542:35 - I can click on open window and there we
542:38 - go we have an extra window
542:40 - and what is even better now is that the
542:42 - entire extra window is inside of a
542:44 - separated class
542:46 - that way when I'm calling the function
542:47 - all of this is very easy to work with
542:51 - and if you had the entire app so all of
542:54 - this one here as well inside of a class
542:55 - you wouldn't even need Global you can
542:58 - simply turn this extra window into an
543:00 - attribute and then work with this in any
543:02 - kind of method
543:04 - the final part that you need to create
543:06 - good looking apps is styling for styling
543:09 - tkinder has a couple of different
543:11 - options the first one is the inbuilt
543:14 - styling tools for that we have the
543:17 - widget options and we have the style
543:19 - object widget options you should already
543:21 - have seen for example when I'm giving a
543:24 - label a background that is a widget
543:26 - option
543:27 - the next one is external themes this
543:31 - basically means your importing a set of
543:32 - graphics and certain Styles and you
543:34 - apply them to all of your widgets
543:37 - finally we have external modules these
543:40 - are literal external modules that people
543:42 - have made that build on top of tkinter
543:45 - and they are giving you a ton of extra
543:47 - functionality and extra styling which
543:50 - are incredibly useful now unfortunately
543:53 - there's one issue I really have to talk
543:56 - about and that is that the inboard
543:58 - styling tools and the external themes
544:00 - just aren't very good there are a couple
544:03 - of reasons why they are quite bad
544:05 - actually the most obvious one is that I
544:07 - just don't look particularly good but
544:10 - besides that they're also quite annoying
544:12 - to work with and you don't have that
544:13 - many options I am going to go over them
544:16 - but I will not use them too much most of
544:19 - what I'm going to use are the external
544:21 - modules because those are actually
544:24 - really good and significantly more
544:26 - powerful so let's talk about external
544:28 - themes and tick interest in build
544:30 - styling tools for that I already have a
544:33 - couple of lines of code ready I am
544:36 - importing tikkinder I am creating a
544:38 - window I am creating a label and a
544:40 - button finally I'm running the window
544:42 - and that's literally it
544:44 - running all of this is giving me an app
544:47 - like this it's probably a bit large let
544:49 - me make it smaller let's say 400 by 300
544:53 - that is looking a bit nicer what you can
544:56 - already do is add a bit more styling
544:59 - when you are creating either the label
545:01 - or the button
545:03 - for example what you have already seen
545:05 - is a label can have a background and
545:09 - this is a background color for example
545:11 - this could be white Adobe I suppose
545:14 - that's quite hard to see let's go with
545:16 - red that's definitely visible in here
545:19 - you have a few more options for example
545:22 - you could also update the foreground
545:24 - color let's make this one white if you
545:27 - spell this correctly this is also going
545:28 - to work like so now we have a label with
545:32 - white text and a red background color
545:34 - let me move all of this over multiple
545:36 - lines so it's a bit easier to read
545:40 - another option you have for
545:41 - customization is called the font this
545:44 - one well it determines the font the
545:46 - important thing here is this needs a
545:49 - tuple this Tuple should contain two
545:51 - parts we have the font and the font size
545:54 - if font size is really easy this is just
545:57 - a number that determines the size of the
545:59 - font let's go with 20.
546:01 - the font is the actual style of the text
546:04 - this one needs a string with the name of
546:06 - a font style to get all of the fonts
546:09 - what you have to do is from the Kinder
546:11 - you want to import something else this
546:13 - something else is called font
546:16 - once you have that
546:18 - you can print font dot families and
546:22 - don't forget to call it if you run a
546:24 - code now you can see all of the fonts
546:27 - that you could be using
546:30 - let me pick one at random let's go with
546:34 - jokerman
546:36 - on your system you probably have
546:38 - different ones but just choose whatever
546:40 - you want in here Joker man and there we
546:42 - have a font that's definitely visible if
546:44 - you install external font themes they
546:46 - would also show up in the list so we can
546:48 - extend this quite easily for the text
546:50 - there are two more things that I do want
546:53 - to cover the first one is called
546:56 - justify for this one we have the options
546:59 - right left and Center
547:03 - what this one is doing I think is quite
547:04 - obvious it justifies the text however if
547:08 - I run this right now the result would
547:10 - not be visible but the simple reason
547:12 - that right now the text box is this wide
547:16 - exactly as wide as the label because of
547:19 - that it wouldn't really matter if you
547:21 - put the label on the right on the left
547:24 - or right in the middle since the label
547:26 - covers the entire area of the background
547:29 - you are not going to see a difference
547:30 - either way however what we can do when
547:34 - we are specifying the text we can add a
547:36 - line break in here with a dash and an n
547:40 - and then type on another line
547:45 - if I run this now we have text that is
547:48 - centered if I change the center to left
547:52 - we have left Center text and this would
547:54 - also be
547:55 - right
547:56 - there we go now we have right center
547:58 - text
547:59 - although if you only have one line of
548:02 - text let's say only a label you wouldn't
548:06 - really want to use justify instead you
548:08 - would rely on the layout methods those
548:11 - make it much easier to place the label
548:13 - in a certain position although you can
548:15 - certainly combine different ways of
548:16 - making all of this work it's entirely up
548:18 - to you with that we have a whole bunch
548:22 - of style methods inside of the widget
548:24 - that's a pretty good start although if I
548:28 - run this this still doesn't look
548:29 - terribly good I guess we have quite a
548:31 - few options but they are still Limited
548:34 - but with that we are going to run into
548:37 - some problems for example I have a
548:39 - button if I want to style the background
548:42 - of this button
548:43 - with background and red if I run this
548:47 - now we would get an error we have
548:49 - unknown option background on top of that
548:52 - let me comment out the print statement
548:55 - at the top this one's getting a bit
548:56 - annoying if I run this now we are just
548:58 - getting in the error that button has no
549:01 - option background
549:02 - the same would apply to foreground
549:06 - it's not available
549:20 - which is very very annoying
549:24 - what is even worse if you look online
549:26 - for example for this website here you
549:30 - might have Googled how to give a button
549:32 - a background color and you found this
549:33 - you'll scroll down a tiny bit and you
549:36 - find a code snippet like this we can see
549:39 - we have foreground and background so
549:42 - maybe the problem in my code was that I
549:45 - used background but BG was the proper
549:47 - name let's try that one back in my code
549:49 - I want to use BG let's go with
549:53 - yellow
549:55 - but if I run the code now we get unknown
549:57 - option BG
549:59 - so what's the issue here
550:02 - you might have already seen what the
550:04 - difference is just check out this code
550:07 - and then try to figure out what the
550:09 - difference is
550:11 - the difference is that this person is
550:13 - only importing everything from tikhinter
550:16 - there are no ttk widgets and this is
550:19 - something I talked about all the way in
550:21 - the beginning in tikenter we have t k
550:25 - widgets and we have ttk widgets ttk
550:29 - widgets is what I have used most of the
550:31 - time and those are the much more modern
550:34 - widgets TK widgets I have used sometimes
550:37 - like text for example these TK widgets
550:41 - can use this kind of styling but they do
550:44 - look much more outdated while the ttk
550:47 - widgets look more modern but have a
550:49 - different kind of styling unfortunately
550:52 - a lot of websites online have written
550:54 - these tutorials a long long time ago so
550:58 - this tutorial here probably wasn't
550:59 - updated in just about a decade possibly
551:02 - longer I would definitely not recommend
551:05 - any of the courses
551:07 - be careful with that one so how can we
551:10 - style a button for that we need a whole
551:13 - new concept that is called style what
551:16 - that means is we have to create a style
551:18 - object let me save it inside of a
551:20 - variable right away we want to have ttk
551:23 - and style
551:25 - don't forget to call it this is going to
551:28 - give you a styling object that can apply
551:30 - styles to every single widget inside of
551:32 - tkinder I can actually use this right
551:34 - away we can use style dot theme
551:37 - underscore use
551:39 - body argument I want to use clam if I
551:42 - run this now
551:43 - we get an error on an option BG because
551:46 - I didn't get rid of this background
551:48 - now let me try this again and there you
551:51 - can see the button is looking a tiny bit
551:53 - different that is because of this clamp
551:56 - theme if you are on a Mac or Linux
551:58 - system this might not work to figure out
552:01 - what themes are available on your system
552:03 - you want to print style and theme
552:06 - underscore names don't forget to call it
552:09 - if I run this now on my system I have a
552:13 - native clam alt default classic Whistler
552:15 - and XP native let's use classic for the
552:19 - theme use and there we have a really old
552:23 - style button I think the theme they are
552:25 - using is Windows 98.
552:27 - however all of these Styles aren't very
552:30 - good so I'm not going to use any of them
552:33 - instead what I want to do is I want to
552:36 - have style and configure the style I'm
552:39 - currently using
552:41 - in here we need first of all a string of
552:44 - the widget we want to update
552:46 - and then we can set for example the
552:49 - background color
552:50 - choose something like let's say green
552:53 - the name of each widget always starts
552:55 - with a T and then the name of the widget
552:58 - for example a button would be a button t
553:01 - button would style all of the buttons in
553:03 - your app
553:04 - meaning now if I run this
553:07 - we have a button with a green background
553:09 - color it's kind of hard to see but it's
553:11 - definitely there I think if we change
553:13 - this to foreground this is much more
553:15 - visible there we go now our button has a
553:18 - green text
553:19 - in here we can also set the font let me
553:22 - copy it from the label I want to have
553:24 - jokerman and 20 like so now if I run
553:27 - this we have a button with custom text
553:29 - what you can also do is add custom
553:31 - styles for every widget for that you
553:34 - would have to add another kind of text
553:36 - whatever you want let's say new and then
553:39 - Dot and then t button this would create
553:42 - a new style for a button but you could
553:45 - apply it specifically to a widget if I
553:48 - run the code now the button would have
553:50 - the default style we would only get the
553:53 - styling back if I set a style for the
553:56 - button and this would be new DOT t
554:00 - button
554:01 - now for runders we have our styling back
554:03 - this style configure here is actually a
554:06 - lot more powerful for example right now
554:09 - we only have the text of the button
554:11 - colored but what if I wanted the text
554:14 - color to be different when I'm pressing
554:16 - the button or when I have pressed the
554:18 - button we can create a style dot map in
554:23 - here first of all we have to Target a
554:25 - certain kind of element in my case this
554:28 - is going to be new DOT t button after
554:30 - that we have to Target one kind of
554:32 - attribute this could for example be the
554:34 - foreground
554:35 - but now we are assigning this a list
554:39 - this list is going to be full of tuples
554:41 - inside of each Tuple we have the state
554:44 - and then the option for the color in
554:47 - this case
554:48 - for example if the button is pressed
554:51 - I want a button to be red however if the
554:55 - button is disabled then I want a button
554:58 - to be yellow
555:01 - if everyone is now and I press the
555:03 - button you can see the button is red if
555:06 - I inside of the button set this state to
555:10 - disabled
555:12 - then the button color would be yellow
555:14 - and we can't click on the button because
555:16 - it's disabled inside of the map you can
555:19 - then add more arguments let's say
555:22 - besides the foreground I also want to
555:24 - have a background color and I am very
555:27 - bad at spelling background for this one
555:29 - once again I want to have a list if the
555:33 - button is
555:35 - pressed then I want to have a ring
555:39 - background color
555:40 - another option here would be if the
555:43 - button is active I want it to be blue I
555:47 - should add a comma and now if I run this
555:51 - you can see that we have a couple of
555:54 - different background colors for the
555:55 - button they are quite hard to see
555:57 - because we are styling the background
555:59 - behind the button it's um well not ideal
556:02 - once again this kind of styling is
556:04 - really annoying to work with and very
556:06 - soon we are going to find much much
556:09 - better ways to work with all of this
556:11 - in fact let's do an exercise and then we
556:13 - are done with this bit
556:15 - what I want you guys to do for the
556:18 - exercise I want you guys to add a frame
556:21 - with a width and a height and give it a
556:23 - pink background color
556:25 - pause the video now and try to figure
556:26 - this one out
556:31 - first of all we have to create a frame
556:33 - this is going to be frame is equal to
556:36 - ttk dot frame the parent is going to be
556:40 - the window
556:42 - on top of that I have to give this thing
556:44 - a height and a width I'm going to use
556:46 - completely random numbers for width
556:49 - let's go with 100.
556:51 - finally I want to pack this entire thing
556:53 - if I run the code now we can't see
556:56 - anything because frames by default have
556:58 - no color the frame now is kind of
557:00 - similar to the button in the sense that
557:03 - we couldn't just add a background with
557:06 - pink in here we would just get an error
557:10 - instead what we have to do I'm going to
557:12 - cut this one out
557:14 - inside of the style we have to configure
557:17 - a new widget which means I have to use
557:20 - style dot configure for the widget I
557:24 - used to have t button but now I need T
557:27 - frame
557:28 - once I have that I can set the
557:31 - background let's go with pink if I run
557:35 - this now we have a pink frame
557:37 - with that we have covered The inbuilt
557:40 - Styling methods for tea Kinder this
557:42 - video is already getting a tiny bit
557:43 - longer so let's finish it here and for
557:46 - the next video we are going to cover
557:48 - different kinds of themes another way to
557:51 - style a tkinter app is to use themes
557:54 - basically what that means is tkinder has
557:57 - lots of external themes that you can
557:58 - import and those themes are going to
558:00 - style every single element of your app
558:03 - it sounds very simple and these themes
558:06 - are generally fairly easy to use
558:09 - however you might remember a couple of
558:11 - videos ago I talked about that external
558:14 - themes just aren't very good
558:16 - to illustrate why let me show you a list
558:19 - of all the available Tech inter themes
558:22 - here is a list of all the teak inter
558:25 - themes if you scroll down you can see
558:27 - preview colors and while some look okay
558:31 - I guess this one here looks fine
558:35 - there are some more I guess this one is
558:38 - passable but most of these themes look
558:41 - really old and outdated for example
558:44 - using this one here would just seem like
558:47 - you're making a Windows 98 app same for
558:49 - this one same for these down there most
558:52 - of these themes just don't look good at
558:54 - all
558:55 - on top of that the styling here is very
558:57 - limited for example if you want to
559:00 - change any of these options here for
559:02 - this theme you could maybe change some
559:06 - minor things but most of these are hard
559:08 - set so you're kind of stuck with
559:10 - whatever you download which somewhat
559:13 - defeats the point of styling because you
559:15 - want to have your own app I wouldn't
559:17 - recommend any of these but I do want to
559:19 - cover if you've seen some other people's
559:21 - code
559:22 - what is broadly considered the best
559:24 - looking theme if I go all the way down
559:26 - is called Azure if I search for it we
559:31 - have Azure and we have Azure dark this
559:33 - we can get from GitHub let me open it
559:35 - really quick in here you can see we have
559:38 - a fairly good looking theme
559:40 - it also tells you how to use it and this
559:43 - is quite a nice theme to work with to
559:45 - use it you first of all have to download
559:47 - it which you can do up here you have to
559:50 - click on code and then download zip
559:54 - this is going to download the entire
559:56 - thing and this theme you have to unpack
559:59 - if I open my download folder here we
560:02 - have Azure ttkv Main
560:04 - this I want to extract all to the
560:07 - current folder
560:09 - and then we get this folder here Azure
560:12 - ttk main theme and then there we have a
560:16 - couple of things
560:17 - although the only thing that we really
560:19 - care about is this theme folder here
560:21 - because in there we have a dark a light
560:24 - theme and then some extra information
560:26 - inside of for example light
560:29 - what we really have in here are a bunch
560:32 - of images
560:33 - for example here we have the radio
560:35 - accent which is a blue dot same with 40
560:39 - on accent this is just a button which is
560:42 - also telling you why this is quite
560:44 - Limited in terms of customization
560:46 - but at the very least we have a good
560:48 - looking theme in my case what I have
560:50 - done
560:51 - I went to the main folder and copied the
560:54 - entire thing
560:55 - after that I have another folder this
560:58 - one has an app I'm going to open this in
561:00 - a second but I want to paste all of this
561:03 - in here this is going to take a second
561:05 - there we go and rename it to let me just
561:09 - call it azure
561:11 - inside of this Azure we now have the
561:14 - theme inside of the theme we have dark
561:16 - and Light
561:17 - what I should have mentioned this Azure
561:19 - TCL is really important
561:22 - also if you're using this for your own
561:24 - app you have to include a license I
561:26 - that's just good practice
561:28 - let's open the app and let's Implement
561:30 - all of this the app I have just opened
561:33 - is what we created earlier this slightly
561:37 - more complex layout
561:39 - although I do want to change the name
561:40 - this shouldn't be class based app
561:42 - anymore let's call it theme based app
561:45 - using the theme is actually incredibly
561:48 - simple all we have to do inside of the
561:51 - init method of the main window so
561:54 - wherever you create tk.tk
561:56 - you want to do two more things before
562:00 - you create any kind of widget you want
562:02 - to use the theme
562:06 - for that
562:07 - you want to use self or whatever your
562:09 - main window is then TK and then call
562:14 - inside of this you need two arguments
562:16 - the first one is called source
562:19 - this tells the kinder to import
562:21 - something the next argument now is going
562:24 - to need a path
562:25 - the path that we want is inside of azure
562:29 - and azure.tcl this is the file we want
562:34 - to import
562:35 - which means the folder I want to go for
562:37 - is called azure
562:39 - in there I want to have Azure dot TCL
562:44 - if I run this now
562:46 - we can't see anything but we're not
562:48 - getting an error message that's what I
562:50 - was looking for
562:51 - to actually use this beam we have to use
562:54 - self again then dot TK and then call now
562:58 - we need two arguments again the first
563:00 - one is called set beam after that we
563:04 - have to decide between a light theme and
563:06 - a dark theme if I use the Dark theme now
563:10 - we can see some major Improvement
563:12 - although it's not perfect yet let me
563:14 - expand it a tiny bit
563:16 - you can see most things work okay but we
563:21 - have to change a few things the sliders
563:23 - are the worst part right now but things
563:25 - are definitely getting better
563:28 - the main issue we have right now is
563:31 - inside of I think all of this happened
563:33 - inside of menu inside of there we have
563:36 - create widgets and further down there we
563:40 - have the menu slider one and menu slider
563:44 - two both of those are ttk scales
563:49 - the problem we have with this theme
563:50 - right now is that we are sticking them
563:52 - to all four sides this is causing a
563:55 - problem
563:56 - the theme only really works if you stick
563:58 - the slider either on the horizontal or
564:01 - on the vertical axis but not both
564:03 - now if I run this this fixes a slider
564:06 - and that's looking much better
564:08 - sometimes when using external themes you
564:10 - have to be a tiny bit careful although
564:12 - besides that instead of the Dark theme
564:14 - you could also use a light theme and
564:17 - there we go we have a different kind of
564:18 - theme that probably looks a little bit
564:20 - better I know it's quite subjective
564:23 - I guess one more thing that we can do is
564:25 - all of the buttons look quite close
564:28 - together they should have a tiny bit of
564:30 - padding
564:31 - that is very easily done inside of
564:35 - create widgets we are placing all of the
564:37 - buttons here
564:39 - all we have to do is give them a tiny
564:42 - bit of pad X let's go with 4 and Pad y
564:45 - should also be four
564:47 - now if I run this again now we have a
564:49 - tiny bit of padding between the buttons
564:51 - and if I increase the size of this
564:54 - window here we go this is looking much
564:56 - better
564:57 - and that's kind of it for themes all of
565:00 - the themes work either in this way or in
565:02 - a very similar way and while this can
565:04 - give you some decent results I really
565:06 - wouldn't recommend using it number one
565:08 - for this theme you either have a light
565:10 - color or a dark color and that's all you
565:12 - can really do for customization on top
565:15 - of that since all of these elements are
565:17 - simply images this also slows down
565:20 - performance
565:22 - you notice this in particular when you
565:24 - try to resize the app let me show my
565:26 - mouse actually and let me try to resize
565:30 - the app really fast you can see the
565:32 - thing really struggles and cannot keep
565:35 - up at all and I think that's really bad
565:37 - user experience
565:40 - as a consequence while themes can be a
565:43 - good way to get started I just wouldn't
565:45 - recommend using them at all they are
565:47 - much better ways to style your app
565:49 - there's one important topic that I want
565:51 - to cover before I continue and that is
565:54 - colors
565:57 - so far I always use the tkinter default
566:00 - colors those are for example red white
566:03 - blue pink orange yellow I think they're
566:06 - about 10 in total which well is quite
566:09 - limiting to create any color that you
566:12 - want you would use what is called
566:15 - hexadecimal value system
566:17 - it sounds complicated but it really
566:19 - isn't that bad
566:21 - hexadecimal numbers go from 0 to F that
566:25 - is going to sound confusing but the
566:27 - numbers look like this we go from 0 all
566:30 - the way to 9 and then we continue with a
566:32 - b c d e and f with zero being the lowest
566:36 - number and F being the highest number
566:38 - basically just imagine that these
566:41 - letters here are numbers in this kind of
566:43 - numbering system
566:45 - the reason for that is that with the
566:47 - system you can express a much greater
566:49 - range of values with fewer numbers you
566:52 - see it quite often actually when you
566:53 - work with computers to turn this into
566:56 - color you have to combine three of these
566:59 - numbers with the first value standing
567:01 - for red the second one for green and the
567:05 - final one for blue this might look
567:07 - something like this we have 0 8 and F
567:12 - this means that we have zero amount of
567:15 - red because zero is the lowest value and
567:18 - in this case it means we have the
567:19 - absence of red
567:21 - next up we have d8 this one is roughly
567:25 - in the middle of the system which means
567:28 - we have more or less 50 of green color
567:32 - although this is not an exact number
567:34 - here finally we have F and this F stands
567:38 - for blue and is the highest number in
567:41 - here which means we have one hundred
567:44 - percent of the blue color finally to
567:47 - indicate that we are using hexadecimal
567:49 - numbers you want to add the hashtag
567:51 - symbol in front of this
567:53 - if you add this into tkinder as a string
567:56 - T Kinder is going to recognize this as a
567:58 - color let's have a look for the code I
568:01 - am importing tkinder and ttk I am
568:04 - creating a window then I'm creating
568:06 - three labels and place them right away
568:08 - using the pack method finally as always
568:10 - I'm running main Loop so we can see the
568:12 - app this is giving us an empty window
568:15 - because none of the labels has any text
568:18 - although they don't need any kind of
568:19 - text because I only care about the
568:21 - colors here
568:23 - to give it a color as always we need for
568:25 - example a background
568:27 - for this so far we always use something
568:29 - like red with that we have a red
568:32 - background color however now that we
568:34 - have learned about hexadecimal colors we
568:37 - can set the background to the color I
568:40 - used was hashtag 0 8 and F
568:45 - if I run this now we are getting a very
568:48 - bluish color
568:50 - this should make sense because we have
568:52 - no amount of red and we have a huge
568:55 - amount of blue that way you would expect
568:58 - this color here to be quite blue
569:00 - although since we do have a certain
569:03 - amount of green that's the eight this is
569:05 - not going to be a complete blue I can
569:07 - actually demonstrate this if I copy all
569:10 - of this I could for example change the 8
569:13 - to an f and the F to a zero
569:16 - what would we expect now for the color
569:20 - well if I run this again we are getting
569:22 - a pure green because for this one we
569:26 - have no red and we have no blue the only
569:30 - color that we have is green and we have
569:32 - the full amount of green
569:34 - so with that system you could create
569:36 - basically any kind of color now it's
569:39 - going to be really annoying to just
569:40 - experiment with each of these values and
569:43 - nobody actually does that instead what
569:45 - people are doing is they use some kind
569:47 - of editor and they all have some kind of
569:49 - Color Picker in build
569:51 - for example here I am in Photoshop if I
569:54 - click on the color
569:56 - you can see down here we have a
569:59 - hexadecimal color system although this
570:02 - one looks a tiny bit different compared
570:04 - to what I have just used instead of
570:06 - three colors we have six colors let's
570:09 - talk about that one really quick
570:10 - hexadecimal color values are always
570:13 - either three or six digits long
570:16 - the one we have just seen looked like
570:18 - this we have one digit for red one digit
570:22 - for green and one digit for blue
570:25 - besides that we could also specify two
570:27 - digits for each color two for red two
570:30 - for green and two for blue
570:33 - this second system here is a lot more
570:36 - precise because we have twice as many
570:38 - values for the red color for example as
570:40 - would have in this system
570:42 - which gives you well a whole lot more
570:45 - options when you use basically any color
570:47 - editor online this is the system they
570:50 - are using they basically always have six
570:52 - colors but you don't have to use it if
570:54 - you have a simple app this system here
570:56 - is perfectly fine
570:57 - back in Photoshop you can see right now
571:00 - we have FF so we have a pure red color
571:03 - and then 0 0 for green and zero zero for
571:07 - blue if I move around you can see these
571:09 - colors change and you can create
571:11 - basically any kind of color value in
571:14 - total I think this gives you about 16
571:15 - million options definitely enough for
571:18 - any kind of style that you want
571:20 - if you don't have Photoshop you don't
571:22 - have to worry because Google has a Color
571:25 - Picker inbuilt as well in here you can
571:27 - simply move a color around and get
571:30 - basically any kind of hex value that you
571:32 - want this is the value you're always
571:34 - looking for which means I could
571:36 - literally just copy the value from this
571:39 - return to my code editor and paste the
571:41 - color in here
571:44 - run the code and there we go we have the
571:47 - same color we just created which makes
571:49 - all of this quite efficient because you
571:51 - can now pick literally any color that
571:53 - you want Let's do an exercise on this
571:56 - one I want you guys to create a brownish
571:58 - color using hexadecimal values you could
572:01 - use a Color Picker for that although
572:04 - just to practice the system try to
572:06 - figure out the numbers without using an
572:08 - editor it should be fairly easily doable
572:11 - but both approaches are going to be fine
572:13 - pause the video now and try to figure
572:16 - this one out
572:20 - let me copy the final label here and
572:23 - place it below the exercise for this one
572:26 - I want to work with just three digits
572:30 - let's start with f 0 and 0. this is
572:34 - going to give us a pure red because we
572:36 - only have F and then 0 for green and
572:38 - zero for blue
572:39 - which means we have a pure red this we
572:42 - now have to make darker to get some kind
572:44 - of brown the best way of doing that is
572:47 - by increasing the amount of green
572:49 - instead of zero let's go with an a
572:54 - if I run this now this is giving us a
572:57 - bit of an orangey color if I reduce the
572:59 - amount of green let's say 2 is 6.
573:03 - this is definitely getting brownish
573:05 - although right now it's more of a dark
573:07 - orange if I put this to a green
573:12 - we are definitely getting closer I guess
573:14 - if I increase this a tiny bit more to a
573:16 - five this gets close enough to at least
573:19 - a light brown
573:20 - and if I reduce the amount of red from
573:23 - an F to let's say c
573:26 - this is very much a brown color doing
573:29 - all of this inside of Google gives you
573:31 - much easier results you can just click
573:33 - on a brownish color here something like
573:35 - this and you have a lot of different
573:38 - brown tones you could work with
573:40 - before I move on there are two more
573:42 - things that I do want to cover and that
573:44 - is white and black
573:48 - right now we always set a color but how
573:50 - can we get a white and a black color
573:52 - those two are really easily done I can
573:55 - just copy this black is the absence of
573:57 - all colors which means 0 0 and 0.
574:01 - running this gives us a black color and
574:04 - a white color is the opposite we have
574:06 - every color 100 available which means f
574:09 - f and f with that we have white if you
574:13 - have the same color value for every
574:15 - color you always get some shade of gray
574:18 - let me duplicate this if I change 0 0
574:21 - and 0 to 888
574:24 - we're getting a grayish color with that
574:27 - we have covered all of the colors let's
574:30 - talk about styling modules so far I
574:33 - mostly talked about stuff that you
574:34 - shouldn't do in teak hinder in terms of
574:36 - styling this is going to change now
574:38 - because external modules are really good
574:41 - to add style and to use it easily
574:44 - these external modules build on top of
574:46 - the Kinder and improve certain parts of
574:48 - it most of them are styling but they
574:51 - also add a few more extra
574:52 - functionalities custom tkinter and ttk
574:55 - bootstrap are the really common options
574:58 - I'm going to start with custom tkinter
575:00 - because this is what I think is the best
575:02 - option for tkinter in terms of styling
575:05 - it's also the one I really like to use
575:08 - custom taken that works by using the
575:10 - same widgets as ttk but it lets you
575:13 - customize all of them easily on top of
575:16 - that there are also some additional
575:17 - widgets and every single widget has a
575:19 - dark and a light mode that way you can
575:22 - basically create any kind of style that
575:24 - you want before I jump into the code
575:26 - there's one more thing I do want to
575:28 - cover and that is that custom tikkinder
575:30 - has a really good documentation
575:33 - decide with all of the code is looking
575:35 - something like this although if you
575:37 - scroll down you can already see some
575:39 - demos for the dark and the light mode
575:41 - all of these elements are dynamically
575:43 - generated meaning you can customize a
575:45 - lot of different things here
575:47 - on top of that if you go down a tiny bit
575:49 - further you have the documentation
575:52 - in here on the right side you have all
575:55 - of the different widgets and all of the
575:57 - elements of custom tkinter if I for
576:00 - example click on ctk label
576:03 - there we have an example of the code we
576:06 - have all of the arguments and then we
576:09 - get a bit more information this is
576:11 - literally all we need
576:13 - and here you can see for example we can
576:15 - set the text the width the height the
576:17 - corner radios a foreground color a text
576:20 - color and a font and all of this is very
576:23 - easily implemented I suppose the best
576:25 - example here would be ctk button on the
576:28 - right this is just a simple Button as
576:31 - you can see here you can customize every
576:34 - single element of this button quite
576:36 - easily
576:37 - if you contrast this with standard
576:39 - tkinter well you have to create a style
576:41 - object and in there you have to create a
576:43 - map none of this is necessary here you
576:46 - could simply set a foreground color a
576:48 - hover color a border color a text color
576:50 - a text disabled color
576:52 - basically whatever you want there are
576:54 - lots of different options in here so
576:56 - let's actually create a basic custom
576:59 - teakinter app
577:01 - although for that first of all we have
577:03 - to install custom t Kinder because it
577:05 - doesn't come with python by default but
577:07 - that once again we either need the
577:09 - Powershell or The Terminal depending if
577:11 - you are on Windows or on Mac OS in my
577:14 - case I'm using the Powershell so I need
577:16 - pip install custom tkinter
577:20 - although in my case I already have this
577:22 - one installed so it's not doing anything
577:23 - if you were using Mac OS this would be
577:26 - pip free install custom tkinter
577:30 - here we have a completely empty python
577:32 - file the reason why I have nothing ready
577:35 - is because we are not going to use any
577:37 - of the tkinter widgets we have used so
577:40 - far instead I want to import custom
577:43 - tkinter this is going to be kind of
577:46 - annoying to write I usually abbreviate
577:48 - this as ctk
577:51 - the best comparison here is that all of
577:53 - this is fairly similar to TDK in the
577:56 - sense that inside of this ctk module we
577:58 - have a ton of widgets that we can use
578:00 - for example we can use this to create a
578:04 - window this is going to be another
578:06 - window that I want to store in a
578:08 - variable and then here we need ctk and
578:11 - then CT or upper score and then K and
578:15 - lower score don't forget to call this
578:16 - once we have that we can run the entire
578:19 - thing with
578:21 - window.main Loop
578:23 - if I execute the entire thing we already
578:25 - get a window that is looking
578:26 - significantly better a really important
578:29 - thing that you do have to understand is
578:31 - that this ctk window inherits from the
578:34 - tkinter window as a consequence we have
578:37 - all of the default arguments we could
578:40 - use for the window for example we could
578:42 - set a window dot title let me call it a
578:45 - custom tkinter app that is some terrible
578:49 - spelling that looks better if I run this
578:51 - thing now and increase the size we have
578:54 - a custom tkinter app although I just
578:57 - realized there's another typo in there
578:58 - that is looking better
579:01 - besides that we can also set window dot
579:04 - geometry in here as always we need a
579:07 - string with a number let's go with 600
579:10 - by 400. running this now we get a much
579:14 - larger window with that we have a window
579:16 - next up we can create some widgets
579:21 - for example if we want to create a label
579:24 - I want to store this in a variable all
579:26 - we need here is ctk and then ctk with
579:30 - label just like with ttk we need the
579:33 - master which in my case is going to be
579:35 - the window after we have that I can set
579:37 - some text this can be a ctk label
579:42 - this is going to return a widget and
579:44 - this widget I have to place on the
579:46 - window with some kind of layout method
579:48 - let's go with pack
579:50 - if I run this now we have a ctk label so
579:54 - far we have some very basic
579:56 - functionality this ctk label gives us a
580:00 - ton of options for customization just
580:02 - for reference here is the documentation
580:05 - what we could set for example is the
580:08 - corner radius the foreground color and
580:10 - the text color I guess the foreground
580:12 - color here isn't the perfect name this
580:14 - is essentially the background color for
580:16 - this one we can either use a tuple with
580:19 - a light and a dark color or we can use a
580:21 - single color that is called transparent
580:23 - all the colors here we would either use
580:25 - hexadecimal color or one of the inbuilt
580:28 - tkinter color names which means I can
580:31 - set an F G color and set this to red
580:36 - if everyone is now we have a red
580:37 - background color
580:39 - on top of that I can set a text color
580:44 - let's go with white here with that we
580:46 - have a white label
580:48 - also I'm going to put all of this over
580:50 - multiple lines that's going to make
580:52 - everything a bit easier to read another
580:54 - useful thing that custom ticket has that
580:57 - ttk actually doesn't have is Corner
581:00 - radius
581:02 - this one determines the corner radius I
581:04 - think that's quite obvious if I set this
581:06 - to a 10 we now have rounded corners for
581:09 - this label with that we have a label
581:11 - next up let's create a button this we
581:15 - create with ctk and then ctk button what
581:19 - you always have to be aware of you have
581:21 - C and T in capital letters and then the
581:23 - K is a lowercase letter
581:25 - now this button like the label is first
581:28 - of all going to need a master which is
581:30 - going to be the window then we need some
581:32 - text I'm going to call this one a ctk
581:35 - button
581:36 - this button I want to pack if I run this
581:40 - now we have a ctk button
581:43 - we can click on it but nothing is going
581:45 - to happen
581:46 - this button now is very easy to
581:49 - customize for example if we now set an
581:51 - FG color or this one let's use an
581:54 - hexadecimal color we can use f f and 0
581:59 - with that we get yellow on top of that
582:02 - we can set the text color and for this
582:06 - one just to stick effects of decimal
582:07 - colors I want to have a black color so
582:09 - I'm going to go with 0 0 and 0.
582:12 - now we have a yellow button
582:15 - although if I hover over it we get this
582:17 - dark blue
582:19 - that we can also change although again I
582:22 - want to do all of this over multiple
582:24 - lines so it's a bit easier to read
582:27 - to change the hover color we need well
582:30 - have a color for this one I want to have
582:33 - a slightly darker yellow we started with
582:36 - FF and 0 to get a darker yellow this
582:39 - should be let's go with a a and 0. if I
582:44 - run this now I can hover over it and we
582:46 - get a darker yellow other than that the
582:49 - button works like in TDK which means we
582:52 - can add a command this could for example
582:54 - be a Lambda or literally any function
582:56 - but in this case I just want to print e
582:58 - button was pressed I forgot the
583:03 - semicolon
583:04 - now this should be working and if I
583:07 - click on the button we get a button was
583:09 - pressed now that we can execute a
583:11 - command we can work on something really
583:14 - cool in custom t Kinder and that is to
583:16 - change the theme between light and dark
583:18 - mode by default custom TK enterp uses
583:21 - the default theme of your system in my
583:24 - case if I run the entire thing again if
583:26 - I show you the settings for Windows like
583:29 - this right now my system setting is dark
583:32 - if I set this to light things will need
583:35 - a second to load but now you can see the
583:38 - app automatically switched to a light
583:40 - mode if I go back to dark
583:44 - Banks need a second again
583:46 - and there we go we have a dark Style app
583:49 - again which is really cool for custom
583:51 - tkinter because it already knows if the
583:54 - user has a dark or a light mode and it
583:56 - and it adjusts for that
583:58 - although you can customize this yourself
584:01 - if you want your app to run in light
584:03 - mode or in my case I want the app to run
584:06 - in light mode once I press the button
584:07 - all you have to do is get ctk
584:11 - set appearance underscore mode you can
584:15 - either set light or you can set dark
584:17 - dark is the one we already have so I
584:20 - want to have light
584:21 - now if I run this and I click on the
584:24 - button we have light mode although if I
584:27 - click on it again nothing is going to
584:28 - happen
584:29 - what is even better is that every single
584:31 - color you can specify usually isn't one
584:34 - color but a tuple of colors let's say
584:37 - for the label if we have a dark mode I
584:41 - want this to be red but if we have a
584:43 - light mode I want this to be blue
584:46 - what you simply do in this way you have
584:49 - a tuple the first argument is the light
584:51 - color the second argument is the dark
584:53 - color
584:54 - which means if I run this again right
584:56 - now we have the dark mode so the color
584:58 - is red for the label but if I click on
585:00 - cdk button now the label foreground
585:03 - color is blue
585:05 - because we have the light mode this
585:07 - system works with every single color for
585:10 - example for the text color I can have
585:12 - white for the dark mode and I can have
585:16 - let's go with black for the light mode
585:19 - if I now click on the button now we have
585:22 - black text and a blue background color
585:24 - exactly what we specified in here if you
585:27 - understand all of this so far you
585:29 - understand the basics of custom tkin
585:31 - term all you really have to do is look
585:33 - at the documentation and then pick and
585:35 - choose whatever widget you want on the
585:38 - right side you have ctk widgets the one
585:40 - I just used was ctk then we have ctk
585:44 - button and ctk label we also have a ctk
585:48 - frame that works like a ttk frame
585:50 - although this one has a background color
585:52 - besides that we have a text box
585:56 - we would have a switch although there's
585:59 - no image
586:01 - we would have a scroll bar also no image
586:04 - let me find one with an image we have a
586:06 - slider this one also doesn't have an
586:08 - image okay some bad luck but let's play
586:11 - around with a few more this system here
586:13 - doesn't really change if you found this
586:15 - series so far you already know how to
586:18 - use all of this let's say for the next
586:21 - part I want to create a frame this one
586:23 - is going to be ctk and frame
586:26 - although I forgot ctk dot ctk frame but
586:30 - this one as always we need a master
586:32 - which is going to be the window if I
586:36 - pack this Frame now
586:38 - you can see this already has a
586:40 - background color if you don't like it
586:42 - you can simply set the FG color to
586:46 - transparent
586:48 - that way it disappears this Frame is
586:51 - going to work like any other frame we
586:53 - have seen so far which means you can add
586:55 - elements in here
586:56 - let's say I want to add a slider in
586:59 - there this we create with cdk and ctk
587:02 - slider
587:04 - the parent now is going to be the frame
587:07 - and let's pack it right away slider.pack
587:11 - there we go now we have a slide end here
587:13 - and this one works like any other slider
587:16 - just to visualize that this is indeed
587:18 - inside of a frame let's remove the
587:20 - background color now we can see that
587:23 - there's a slight background behind the
587:25 - slider if I'm adding some padding let's
587:27 - say pad X is 20 and Pad Y is also 20
587:33 - now all of this is much more visible
587:36 - what you can also do is combine custom
587:39 - tkinter with standard tkinter for that
587:41 - though I have to import
587:44 - import tkinter SDK and I want from the
587:48 - counter import TDK it is totally fine to
587:52 - combine ttk widgets with custom tkinter
587:55 - widgets although most of the time the
587:57 - ttk widgets especially when you put them
588:00 - right next to the custom TK inter
588:01 - widgets they start to look really bad so
588:05 - generally I wouldn't recommend doing it
588:07 - however what you might want to do is use
588:10 - the T content variables those work
588:13 - perfectly fine with the custom taken
588:15 - that variables for example for the label
588:17 - I can create a let's call it a string
588:21 - VAR which is going to be TK and string
588:24 - VAR
588:26 - order value here
588:27 - we could set a custom string
588:32 - this string VAR we can set as the text
588:35 - variable for the label so string VAR
588:39 - exit in here and now we get a custom
588:41 - string for the label
588:43 - although strictly speaking custom
588:46 - tkinter also has inbuilt TK inter
588:49 - variables
588:51 - we get those by simply using ctk and
588:54 - then we can use stringvar invar and so
588:57 - on which means if I have ctk instead of
588:59 - TK we're not going to see a difference
589:03 - right now the ctk and the TK variables
589:06 - are identical although that might change
589:08 - in the future if you are using teak into
589:11 - variables and using custom tkinter use
589:14 - the custom teak into variables with that
589:16 - we have all of the basics of custom
589:19 - tkinter it really doesn't get that much
589:21 - more complicated which means we can do
589:23 - an exercise and then we are done
589:25 - what I want you guys to do is going to
589:28 - look something like this all the way at
589:30 - the bottom we now have an exercise
589:32 - switch this one looks absolutely
589:34 - horrible but if you can make it look
589:36 - this horrible and custom tkin term you
589:39 - definitely know how to change a lot of
589:40 - different things which means you have to
589:43 - look at the documentation use the custom
589:45 - tkin test switch and then make it look
589:48 - something like this
589:50 - pause the video now and try to implement
589:52 - this one yourself
589:56 - we have to create a custom tkin test
589:59 - switch although first of all let me add
590:01 - an exercise text in here I want to
590:04 - create a switch and this we create with
590:06 - custom tkinter and then ctk switch
590:11 - this one first of all needs a master so
590:13 - window is the default argument here
590:16 - next up I want to have some text this is
590:19 - going to be the exercise switch
590:23 - to get started this is all we need which
590:25 - means now I want to pack this switch
590:29 - I have made an error and you can already
590:31 - see I made a typo the K here should be
590:34 - lowercase
590:35 - which means CT lowercase k now let's try
590:38 - this and there we go now we have a basic
590:41 - switch that by default is looking pretty
590:43 - good we want to make this thing look
590:46 - absolutely horrible so let's talk about
590:48 - how to customize this thing
590:50 - and to customize anything accustomed to
590:52 - kinder the first step should always be
590:55 - look at the documentation here's the
590:57 - documentation I still have the slider
591:00 - open but I want to look at ctk switch
591:04 - this one here
591:06 - this one has a huge amount of arguments
591:08 - we could be working with I actually only
591:11 - used a small amount of them you could
591:13 - make this look even worse
591:15 - I guess we can start with the colors I
591:17 - want to have a FG color of red
591:21 - don't forget the comma Now if I run this
591:23 - we get some bits of red to get the other
591:27 - color we need what is called progress
591:30 - color
591:31 - this in my case I want to be pink now we
591:34 - have red or we have pink
591:37 - I guess FG color sometimes he is a bit
591:39 - misleading it's basically the background
591:41 - color but you get the idea also if you
591:44 - wanted to you could add a tuple in here
591:47 - with red for the dark mode and let's say
591:50 - blue for the light mode if I run this
591:53 - now we have red as a default but if I
591:56 - change this to the light mode now this
591:58 - is blue
591:59 - so once again a tuple always works here
592:02 - to get the light mode color besides that
592:04 - if you want to change the color of the
592:07 - actual button you want the button color
592:10 - I'm not sure if button is the proper
592:11 - name but you get the idea in my case I
592:14 - change this one to Green now we have a
592:17 - green color for the button although if I
592:19 - hover over it it becomes white that I
592:22 - also want to change
592:23 - and for that we have the button
592:28 - our
592:29 - color I set this one to Yellow now if I
592:33 - run this again and I have over it it's
592:34 - yellow
592:37 - you can already see we have a ton of
592:39 - customization here all of the colors can
592:41 - be changed and this wouldn't really be
592:44 - doable if we used a theme because this
592:47 - one relies much more heavily on images
592:48 - so those couldn't be easily changed what
592:51 - we can also do since all of this is
592:53 - dynamically generated Wicket set is
592:55 - switch with if I set this to 10 you
592:59 - should already be able to see what's
593:00 - going on now we have the width of the
593:03 - thing being much more narrow and if I
593:06 - click on it nothing is going to happen
593:08 - although if I change this to let's say
593:11 - 60
593:13 - now you can see we have a much wider
593:15 - switch
593:16 - you can also set this switch underscore
593:19 - height to let's say 30
593:22 - and now you have a huge switch thingy
593:26 - if you want to make this thing look
593:27 - really horrible you can set the corner
593:30 - radius and this changes the corner
593:33 - radius of the button if I set this to a
593:35 - 2 now we get a very thin slider
593:40 - although it all still works perfectly
593:42 - fine I just made a mistake I just
593:44 - realized when we set the corner radius
593:47 - we are setting the corner radius both of
593:50 - the button and the corner radius of the
593:52 - background these Corners here at this
593:55 - corner as well so with that we have
593:58 - custom decanter or at the very least the
594:00 - basics of custom tea Kinder if you know
594:03 - ttk already using custom decanter is
594:06 - really easy basically all you have to do
594:08 - is replace ttk and then the widget with
594:11 - custom TK and then ctk and then the
594:13 - widget name on 90 of the time this is
594:16 - all you have to do to understand custom
594:18 - TK enter a little bit better I want to
594:21 - convert a ttk app to a custom tkinter
594:24 - app the app I want to convert is the
594:27 - more complex layout app I created
594:29 - earlier if I run this we get this app
594:33 - here I want to convert all of this to
594:35 - the custom tkinder style this isn't
594:38 - going to be very difficult and it's not
594:40 - going to take very long
594:41 - because of that I want this to be an
594:44 - exercise right away I want you guys to
594:47 - convert the app to use custom tkinter it
594:52 - really shouldn't be too hard so pause
594:54 - the video now so pause the video now and
594:56 - try to figure this one out
595:00 - to make sure we are not using any
595:03 - default decantera functionality I am
595:05 - going to comment out the import for
595:07 - tkinter and ttk instead I want
595:11 - to import custom tkinter as ctk if I run
595:16 - this now we are going to get a lot of
595:18 - error messages we have to go through
595:20 - this thing one by one and fix things
595:22 - starting down here I want to change the
595:25 - title from class based app to
595:27 - class-based app with ctk
595:30 - with that we have to look at the app
595:33 - itself so the main app or this one I
595:36 - don't want to have tk.tk instead I want
595:38 - to have ctk dot ctk that is actually all
595:43 - we need inside of the app because this
595:45 - one doesn't actually do very much next
595:48 - up I want to work on the menu for this
595:50 - one we are inheriting from a frame this
595:53 - I want to change to ctk and then ctk
595:55 - frame inside of the init method for this
595:58 - one we just have basic stuff so this can
596:02 - stay as it is
596:03 - although inside of create widgets we
596:06 - have to make a couple of changes
596:08 - first of all the buttons are very easy
596:10 - to update instead of ttk I want to have
596:14 - ctk and then ctk button for the menu
596:18 - slider we cannot use scale anymore this
596:20 - one doesn't exist in custom tkinter
596:22 - instead what we are using for this one
596:24 - is called a ctk slider which means I
596:28 - want ctk and ctk slider
596:32 - after that we have toggle frame this is
596:35 - going to be a frame so ctk dot ctk frame
596:39 - inside of there we have a menu toggle 1
596:42 - and menu toggle 2.
596:44 - check button doesn't exist in custom
596:45 - tkinder but we do have a checkbox and
596:48 - that's basically the same thing I want
596:50 - to get rid of those and use ctk and then
596:53 - ctk
596:54 - check box
596:57 - and that should be all we need finally
597:00 - we have an entry widget this one does
597:02 - exist in custom tkinder so I want to
597:05 - have ctk Dot ctk and entry the rest is
597:09 - just layout all of this can stay as it
597:12 - is because it works with custom tkinder
597:14 - like it would work with TDK
597:16 - I can minimize the menu we should be
597:19 - done with this one and that's the most
597:21 - amount of work inside of main we have
597:23 - one frame this I want to change to ctk
597:27 - and then ctk frame the rest in here can
597:30 - stay identical finally we have the entry
597:33 - in here as always I want to change the
597:36 - TDK frame to ctk frame inside of this
597:40 - one we are using a label this we can
597:43 - change very easily to ctk dot ctk label
597:46 - the same for the button this should be
597:48 - ctk dot ctk button
597:52 - with that we should be nearly done
597:55 - although if I run this now
597:57 - we get one error message and that is
597:59 - that Orient
598:00 - inside of the menu
598:03 - doesn't exist
598:05 - the reason for that if I open the
598:07 - documentation a ctk slider we don't have
598:10 - Orient instead we have orientation a
598:14 - very easy thing to change instead of
598:16 - Orient we want to have orientation
598:19 - let's try this now
598:21 - next up we have a typo There's No ctk
598:26 - Label I once again made a typo let me
598:29 - minimize the menu the error message
598:31 - happened inside of entry in here this
598:35 - should be ctk lowercase k
598:38 - let's try this now there's one more
598:40 - error message and that is that custom
598:42 - decanter for label doesn't have
598:44 - background
598:45 - although if I remove this one it should
598:48 - be working now there we go
598:51 - although well it's not ideal yet
598:54 - we do have a couple of things that we
598:56 - want to work on most importantly
598:59 - the sliders aren't great yet but that is
599:03 - very easily fixable
599:05 - all we have to do if I minimize the app
599:08 - and to entry inside of the menu
599:11 - when we are placing the sliders that
599:14 - happens down here
599:15 - I want to remove
599:17 - the East and West now if I run this the
599:21 - sliders are looking much better
599:24 - and let me increase the size a tiny bit
599:26 - here
599:27 - this is all coming together much better
599:31 - although right now the sliders do look
599:33 - quite a bit thin if you want to make
599:35 - them a bit wider you can do that quite
599:38 - easily all you have to do is go to the
599:40 - sliders and in here set a width let's go
599:44 - with 15
599:47 - possibly a bit too thin
599:49 - I guess 20 is better
599:51 - yeah this one looks much nicer
599:55 - if I maximize the entire thing it still
599:58 - works
600:00 - next up for the buttons I want to have a
600:02 - tiny bit of padding
600:04 - which means when I'm placing the button
600:06 - using the grid method all I really have
600:09 - to do is to add pad X of 4 and Pad y of
600:14 - 4.
600:15 - with that we have a bit of padding and
600:18 - we are starting to run a bit out of
600:20 - space but I hope you see the potential
600:23 - of custom tkinder because all of this is
600:25 - starting to look much better than
600:27 - defaulty kinder most importantly it is
600:30 - really easy to change all of the
600:32 - elements you see here can be customized
600:35 - and if you have a bit of experience you
600:38 - can actually create pretty sophisticated
600:40 - guis with that that actually look modern
600:42 - another useful tool to customize tkinder
600:45 - is called ttk bootstrap this one like
600:49 - custom tkinter is an external module
600:51 - that you have to install ttk bootstrap
600:53 - is an external module that has really
600:55 - good theme support
600:58 - what that means is well for custom
601:00 - tkinter we customized every widget
601:03 - individually or TDK bootstrap instead we
601:06 - are creating one theme and applying this
601:09 - theme to every single widget while this
601:11 - means that we have a bit less control it
601:14 - makes it much easier to style widgets
601:17 - although before we can use it we have to
601:19 - install it as always this either happens
601:22 - in the Powershell if you're on Windows
601:24 - or in the terminal on Mac OS to install
601:27 - it in my case on Windows I would need
601:29 - pip install TDK
601:31 - bootstrap if you're on the code now
601:35 - we get a short message and then we have
601:38 - it installed if you're using Mac OS you
601:40 - would use pip 3 install ttk bootstrap
601:45 - and that would happen in the terminal
601:48 - the code I am going to start with is
601:50 - looking like this
601:52 - we are doing the usual Imports in window
601:54 - creation the really important bit is
601:57 - this we have a label and then three
602:00 - buttons finally we are running the
602:02 - entire app so nothing special
602:04 - if I run this code we can see we have a
602:07 - basic app with three buttons and a label
602:09 - to style this we have to import ttk
602:13 - bootstrap which means import ttk boot
602:16 - strap
602:18 - and just by importing TDK bootstrap we
602:21 - are already applying a new theme to our
602:24 - app meaning if I run the code now we can
602:26 - already see we have much nicer looking
602:28 - buttons
602:29 - although to actually use ttk bootstrap
602:32 - what you usually see is that people
602:34 - import it as ttk the reason for that is
602:38 - that tdga bootstrap basically works like
602:40 - ttk in the sense that all of the
602:43 - important widgets like label button and
602:45 - so on exist inside of it and we are just
602:49 - accessing them except if we are using
602:51 - ttk bootstrap they all look much nicer
602:53 - because of that we don't need the Kinder
602:56 - ttk at all if I run the entire app now
602:59 - everything still works as before there's
603:02 - only one change that you absolutely have
603:04 - to be aware of and that happens on this
603:07 - line here when we are using ttk
603:09 - bootstrap we don't want to use tk.tk
603:12 - instead we want to use ttk Dot
603:16 - window if I run this now we can see we
603:20 - have a different kind of title bar with
603:22 - a custom icon but other than that not
603:25 - much has changed the reason why we need
603:27 - this window is because with that we can
603:30 - add one more argument and that is called
603:32 - theme name this is where the actual
603:35 - magic happens for ttk bootstrap because
603:38 - in here we can for example add Darkly
603:41 - run the code now and they can see we
603:44 - have applied a custom theme to the
603:46 - entire app
603:47 - another thing that we could be using is
603:49 - called Journal if I run this now we have
603:52 - a completely different style
603:54 - if you want to know all of the available
603:55 - custom themes you have to look at the
603:58 - website there's a full list let's have a
604:00 - look at that one actually the website is
604:03 - looking like this and in here you have
604:05 - lots of explanations in terms of what
604:07 - you can do we can already see a couple
604:08 - of styles here
604:10 - although to find all of the Styles at
604:12 - the top you have to go to themes
604:14 - in here you find one theme that is
604:17 - called litera this is the default theme
604:20 - on the left side you can see light
604:22 - themes and dark themes let's have a look
604:24 - at all the light themes and here we have
604:26 - Cosmo we have flatly we have journal
604:29 - litera and a few more quite a few more
604:31 - actually
604:32 - besides that we also have the dark
604:34 - themes here we have solar Darkly Cyborg
604:37 - and again a few more
604:39 - all of these themes you can use
604:41 - immediately on top of that if you want
604:44 - to create your own theme you would have
604:46 - to go to ttk Creator and in here you
604:49 - have an app that you can use to create
604:51 - your own custom theme I'm going to cover
604:53 - that in the next part
604:55 - although before that there are a few
604:58 - more basic things we have to cover the
605:00 - most important part is if you look at
605:02 - this app here
605:04 - you can see we have lots of different
605:06 - styles we have primary secondary success
605:08 - and so on and all of these are different
605:11 - colors inside of a theme
605:13 - but right now if I return to my code and
605:17 - run the entire thing all of the buttons
605:19 - have the same color for example I might
605:22 - want to have the first Button as red
605:24 - then another button could be let's say a
605:28 - warning the final button could be some
605:30 - kind of green button how could I get
605:33 - these colors to learn how to do that the
605:36 - best way is to start with the
605:37 - documentation here we are again the
605:39 - important part you want to look at now
605:41 - is called getting started the
605:43 - installation we have already covered
605:45 - next up there is a tutorial this covers
605:48 - all you have to know about ttk bootstrap
605:51 - since the entire module isn't terribly
605:53 - difficult this is quite a short page
605:56 - which means this could be a really good
605:58 - exercise read through this website and
606:01 - try to understand how to style
606:02 - individual elements using ttk bootstrap
606:05 - so pause the video now and try to figure
606:07 - this one out
606:11 - I guess a quick solution here would be
606:14 - using the boot style covers just about
606:17 - everything this allows you to give
606:19 - certain widgets a certain kind of style
606:21 - for example One widget could have the
606:23 - Style's success another widget could be
606:25 - info and well you have quite a few more
606:29 - themes if you scroll down a bit more you
606:32 - can see all of the themes here
606:34 - you have primary secondary success info
606:37 - warning danger light and dark all of
606:41 - these can be passed into the boot style
606:42 - to get a certain kind of color
606:45 - how you pass it in there you can do in
606:47 - two ways you can either import from
606:51 - ttkbootstraps.constance import
606:52 - everything or if you go a bit further
606:55 - down you can use a string that looks
606:58 - something like this the module is really
607:00 - flexible here so choose whatever you
607:03 - like
607:03 - the recommended option you can see it
607:06 - down here is the dash this one here this
607:10 - is the one I'm going to use as well in
607:12 - this one you always specified the color
607:14 - first and then if you want to have only
607:16 - the outline or the full color I haven't
607:18 - covered this yet but you can see it up
607:20 - here quite well
607:22 - we can either have a button with a solid
607:24 - color or a button only with the outline
607:27 - the Sonic color is the default the
607:30 - outline you get if you add outline in
607:33 - the style with that we have all we need
607:35 - although I guess one more thing that I
607:37 - do want to cover to actually get a
607:39 - preview of how all of this is going to
607:41 - look you can look at themes and I'm
607:44 - looking Journal right now which is a
607:45 - light theme in here we have Journal
607:49 - you can see we have the primary
607:50 - secondary success info and all of the
607:53 - other colors that way you have an idea
607:55 - of how this is going to look in the end
607:58 - so here I am back in the code and let's
608:01 - start by coloring in the first button I
608:05 - need the boot style
608:07 - with a string let's call this one danger
608:10 - now if I run this the first button has a
608:13 - different color now it's orange instead
608:15 - of the default red if you only want to
608:18 - have the outline you would add a dash
608:20 - and then outline now if I run this we
608:23 - only have an orangey label around it and
608:25 - if you hover over it like so then you
608:28 - can see the full orange color
608:31 - for the warning you can add a boot style
608:33 - of warning
608:36 - that is horrible spelling that looks
608:39 - better now the warning is more yellowy
608:42 - finally for the green one I wonder if a
608:45 - boot style that is called success
608:48 - running this one gives me a green button
608:51 - while I only use buttons these kind of
608:54 - styles would work with literally any
608:56 - widget if I return to the documentation
608:58 - you can see we for example have a
609:01 - checkbox we have a progress bar we have
609:04 - a slider we have a toggle down here we
609:08 - even have a calendar we will learn about
609:11 - that later and we have scroll bars all
609:14 - with these colors here every single
609:17 - aspect of the app will be styled
609:19 - appropriately all you have to do is use
609:22 - the bootstrap ttk module and then use
609:24 - the normal widgets that way you already
609:27 - get all the Styles you want I guess on
609:29 - top of that you have to set the boot
609:31 - style but that's a fairly small task
609:33 - since all of that is fairly simple we
609:35 - can do one more thing
609:38 - here's the app we created earlier with
609:40 - the more complex layout and I want you
609:42 - guys to style this entire thing using
609:45 - the TDK boot style module make sure to
609:48 - use a couple of different colors
609:50 - and pause the video now and implement
609:52 - this one yourself
609:57 - for this one I want to comment out from
610:00 - tikenter import TDK instead I want to
610:03 - import ttk boot
610:06 - strap as ttk just by doing that the app
610:10 - already looks quite a bit better
610:13 - although we can make a few more changes
610:15 - first of all inside of the app I don't
610:18 - want to use tk.tk instead I want to use
610:21 - ttk dot window
610:24 - doing that gives me a much smaller app
610:27 - but well we're getting a different title
610:29 - bar although once we have that inside of
610:33 - this super dot init method we can now
610:36 - set a theme name this theme name could
610:39 - for example be Darkly
610:42 - Ebon I usually like quite a bit
610:45 - or to stick with what we have already
610:47 - seen we could use Journal
610:50 - this one would look something like this
610:52 - other than that we don't really have to
610:55 - make too many changes because we are
610:57 - still using ttk and the regular widgets
611:00 - although I guess what we could be doing
611:03 - when we are creating the menu not the
611:06 - init but in create the widgets for
611:08 - example for the buttons I could use
611:10 - different styles for example I could
611:12 - have a boot style for menu button one
611:15 - that could be Danger
611:17 - that makes the first button orange I
611:20 - could use boot style for the second
611:22 - button let's call this one success
611:25 - now we have a green and an orange button
611:29 - for the third button I want to have
611:32 - let's use dark and out line
611:36 - running this one we are getting a third
611:39 - button although I don't really like the
611:41 - styling here but well you can see
611:43 - different kinds of styles
611:45 - I think adding a tiny bit of padding
611:48 - here would make a lot of difference
611:50 - when I am using the grid method to place
611:52 - all of the buttons I want to add
611:56 - pad X off for and Pad y of four
612:01 - like so and this is a minor Improvement
612:08 - I think this is looking a little bit
612:09 - better although the outline here doesn't
612:11 - work too well
612:12 - I'm just going to remove it
612:15 - like so this is definitely looking
612:17 - better
612:19 - next up we can also change the menu
612:22 - slider once again for that we need a
612:25 - boot style
612:27 - let's use one we haven't used yet
612:29 - for example back in the app one that I
612:32 - haven't covered yet is called info
612:35 - we also haven't covered secondary let's
612:37 - use those two
612:38 - the first slider should have the style
612:40 - info the second one should have this
612:44 - style secondary
612:47 - if I run this now we get two sliders one
612:50 - that is dark blue the other that is more
612:52 - grayish
612:53 - after that we can style the check button
612:57 - I'm only going to cover one because this
612:59 - is probably starting to get repetitive
613:01 - and here now we have one check button
613:04 - being blue the other still being red
613:06 - I think you get the idea so I'm gonna
613:09 - stop this
613:11 - but I think the app already made quite a
613:14 - bit of progress although there are a
613:16 - couple things you want to be aware of
613:17 - the most important one is that you still
613:19 - have the basic ttk widgets which you see
613:22 - in particular here for the entries both
613:26 - of those are just labels with a
613:27 - background and titigate bootstrap
613:30 - doesn't style those
613:31 - if you wanted to have a better color
613:33 - here you would have to use a hexadecimal
613:36 - code to make a similar style compared to
613:39 - these buttons here which certainly is
613:41 - doable a really cool part of ttk
613:43 - bootstrap is to create custom themes
613:46 - this is very easily done because TDK
613:49 - bootstrap gives you this kind of app
613:52 - where you can pick an existing theme
613:55 - let's say Journal I have already used
613:58 - and simply change any part of it for
614:01 - example you could give it a different
614:02 - main color let's go with blue you could
614:05 - give it a different background the
614:07 - default is white let's change it to a
614:10 - really horrible green
614:13 - there we go you can literally change
614:15 - whatever you want this is also very
614:17 - easily imported into any app you're
614:19 - using to get started there's only one
614:22 - thing you really have to do you start by
614:24 - using either the Powershell or The
614:26 - Terminal
614:28 - the command you need you can find in the
614:30 - documentation let me open it really
614:32 - quick here's the website for ttk
614:34 - bootstrap you want to go to themes and
614:37 - in there is creator
614:39 - this one gives you a command python-m
614:42 - ttk Creator this one opens this program
614:45 - here let me copy it
614:47 - and return to the Powershell and simply
614:50 - paste the command in here
614:52 - if a run is now we can see we have the
614:56 - app you have just seen a really
614:57 - important part do not close the
615:00 - Powershell or The Terminal this would
615:02 - close this program here as well once you
615:05 - have it you can simply give your theme a
615:08 - new name let me show my mouse folder of
615:09 - this actually in the top left you can
615:11 - set a name I'm going to call my theme
615:13 - custom after that I can set a base theme
615:17 - let's go with simplex
615:20 - it really doesn't matter what you're
615:22 - starting with with this one you can now
615:24 - basically very easily change whatever
615:27 - colors you want
615:29 - let me use some colors that are very
615:31 - easily visible here we have a pink color
615:33 - for primary and for the background I
615:36 - want to use a visible color let's go
615:38 - with pure black
615:40 - that is going to be really annoying to
615:42 - see I guess we should make this a tiny
615:44 - bit less black let's go with a darkish
615:46 - gray
615:48 - definitely an improvement but this is
615:51 - absolutely something you have to play
615:52 - around with for a bit
615:54 - all I really care about for now is that
615:57 - you can see how easy this thing is to
615:58 - use to use it all you have to do is
616:01 - click on Save and then you get the
616:04 - message the theme custom has been
616:05 - created although nothing else
616:08 - fortunately that is because we don't
616:10 - need anything else because with that you
616:13 - can use this custom theme like any other
616:16 - theme in ttk bootstrap for example here
616:19 - is the app we styled in the last part
616:22 - the theme name we got here inside of the
616:26 - app class
616:27 - we use Journal so far if I change this
616:29 - to custom run the app again here we have
616:32 - the theme I just created
616:35 - it's literally as easy as that to use
616:37 - the theme other than that what you can
616:40 - also do in the top left you can set
616:42 - reset to get back to the starting point
616:44 - if you really don't like what you
616:46 - created
616:47 - you can also Import and Export your
616:49 - theme all of that works really easily
616:52 - so with that we can create our own
616:55 - themes
616:56 - there's one more thing that I want to
616:57 - cover for ttk bootstrap and that is some
617:00 - extra widgets that come with this module
617:03 - the app we are going to create is going
617:05 - to look something like this in here we
617:07 - have a couple of elements the top part
617:10 - is a scrollable widget this one comes by
617:13 - default so you don't have to create it
617:15 - next up we can show a toast this one
617:17 - gives you a toast in the top right
617:20 - after that we have a tooltip
617:22 - then we have a calendar where we can
617:25 - pick a date and get the date this one
617:27 - only prints the date but you get the
617:28 - idea after that we have a better looking
617:31 - kind of progress bar
617:33 - finally we have what is called a meter
617:35 - this one is looking really fancy all of
617:38 - these switches we are going to create in
617:40 - this bit
617:41 - to get started I already have a couple
617:44 - of imports at the top I am importing
617:46 - tikenter SDK and ttk bootstrap
617:50 - note here I am importing TDK bootstrap
617:53 - sttk not tkinter after that we have the
617:56 - window and we are running the entire
617:58 - thing
617:59 - finally we are using the Darkly theme
618:01 - with that we can start creating some
618:04 - widgets the first one is called scroll
618:07 - frame which creates a scroll level frame
618:11 - to understand this one in detail I would
618:14 - recommend to read the documentation
618:16 - let's open it actually once again here I
618:18 - am on the website of ttk bootstrap and
618:21 - you want to look at API in here we have
618:24 - a couple of extra parts that are really
618:26 - useful the one I want to look at right
618:28 - now is called scrolled module and here
618:31 - we have scrolled frame and scroll text
618:33 - scrolled frame is the one I really care
618:35 - about this one gives you no picture
618:38 - that's very annoying but it gives you
618:41 - some code snippet on how to use it first
618:43 - of all you have to import a specific
618:45 - subpart of ttk bootstrap although this
618:49 - one is basically just a frame so you can
618:52 - create it like any other frame you can
618:54 - pack it on whatever container you want
618:56 - and then the important part is you want
619:00 - to populate it with some kind of Widget
619:02 - the only thing you have to do is set the
619:05 - parent or the master of these new
619:07 - widgets as the container widget you just
619:10 - created then these widgets are going to
619:12 - show up inside of it
619:14 - back in the code the first thing that I
619:16 - have to do is from ttk bootstrap dot
619:20 - scrolled I want to import
619:23 - scrolled
619:25 - frame
619:26 - if you run a code now we cannot see an
619:28 - error that's a good sign that I didn't
619:31 - make a typo
619:32 - now with that
619:34 - I want to create let me call it a scroll
619:38 - frame
619:39 - this is going to be a scrolled frame
619:42 - as always this one is going to need a
619:44 - parent which in my case is going to be
619:46 - the window I am going to pack this
619:48 - straight away using the pack method for
619:51 - now let's set expand to true although if
619:54 - I run this all we can really see is a
619:57 - scroll bar since we don't have any
619:58 - widgets yet this isn't going to do very
620:00 - much
620:01 - to account for that I want to create a
620:03 - whole bunch of widgets this I do with a
620:06 - for Loop for I in range 100.
620:10 - I want to create a ttk label and I want
620:14 - to create a ttk button both of those
620:18 - have this grow frame as the parent which
620:21 - means scrolled frame is going to be the
620:24 - master and after that I want to create a
620:28 - text that is going to be an F string
620:30 - that shows us the number which is going
620:33 - to be I this I we're getting from the
620:35 - for Loop for the text I think I chose
620:37 - label with I and then button with I
620:43 - after that we have to make sure that we
620:45 - are packing these widgets and then they
620:48 - are going to show up let's run this now
620:49 - and there we go now we have a scrollable
620:54 - thing that we can work with I should
620:56 - have probably said fill to
621:00 - both so this thing actually covers the
621:02 - entire window now if I run this here we
621:06 - have scrolling that works for all of the
621:09 - elements
621:10 - although you can't see if I scroll
621:12 - really fast the graphics here really
621:14 - aren't working too well so I would
621:17 - generally recommend to create your own
621:19 - scrolling system I have covered this
621:21 - earlier on if you skipped it I suppose
621:23 - what you can also do for the label and
621:25 - the button in the pack you can set fill
621:27 - to X that way they are covering the
621:31 - entire horizontal space
621:33 - now the reason why I would recommend to
621:35 - create your own scrolling logic is
621:37 - because all of this is quite Limited
621:40 - for example what if you wanted to have
621:42 - if I'm drawing this if you want to have
621:45 - some kind of setup where you have one
621:48 - widget covering this amount of height
621:50 - and then you have one widget on the left
621:53 - for the label and then the button on the
621:56 - right this unfortunately you couldn't
621:58 - easily do inside of this setup
622:01 - something you might want to try is
622:03 - create a separate frame with ttk and
622:06 - frame and the scroll frame as the master
622:09 - the label and the button would then be
622:11 - parented to this one which means here I
622:14 - want to have the frame and then I want
622:16 - to set this side to
622:19 - left
622:20 - finally I want to pack the frame if I
622:25 - run this now this is kind of working
622:28 - although you can see we're not filling
622:31 - the entire space
622:33 - we could try to set fill to X or to both
622:37 - although if I do that all we're doing is
622:40 - setting the frame on the left side
622:42 - you might be thinking this is going to
622:44 - be fixed when we set expand to true but
622:48 - it doesn't we still get the same result
622:50 - this happens because of the drawing
622:52 - logic here to get proper scrolling logic
622:55 - you unfortunately have to create your
622:57 - own kind of widget
622:59 - but okay next up we get a much more
623:02 - useful widget and that is called a toast
623:06 - a toast is a small notification for
623:09 - example in the bottom right of the
623:10 - window you can get a message with some
623:12 - extra information this is what a toast
623:15 - creates
623:16 - this one we once again have to import
623:18 - like the scrolled frame we do this with
623:21 - ttk bootstrap dot toast
623:25 - import
623:26 - toast notification
623:29 - I can already see there's a table here
623:32 - but other than that this is okay to use
623:35 - this widget we first of all have to
623:37 - create it and store it inside of a
623:39 - variable let me call it toast and toast
623:41 - notification
623:43 - this one doesn't have a master but we do
623:46 - need to set a title
623:48 - let's call it this is a message title
623:52 - besides that we also need a message
623:54 - itself
623:56 - I'm going to call one this is the actual
623:59 - message
624:01 - finally I want to put all of this over
624:04 - multiple lines because we need one more
624:06 - argument in here that would be the
624:09 - duration
624:10 - this tells you how long the toast is
624:12 - going to be on the window the number you
624:14 - need to specify is going to be in
624:15 - milliseconds meaning if you want two
624:17 - seconds you would need two thousands one
624:20 - second is one thousand milliseconds
624:23 - that is all you need to get started the
624:26 - way you are using it is you get the
624:28 - variable that stores the widget and then
624:30 - run show underscore toast
624:33 - if I run the app now you can see in the
624:35 - bottom right we have this is the message
624:37 - and it disappears after two seconds
624:40 - although you can see that the entire app
624:42 - disappeared after we have used this
624:45 - is a bug that happens if you use this
624:48 - show toast by itself if I remove it we
624:51 - are back to the normal window
624:53 - essentially what you want to do is to
624:55 - run this toast only if the user presses
624:58 - a button or does a certain kind of
625:00 - action only then you are calling it I
625:02 - want to add ttk and button
625:05 - the window is the master for the text I
625:08 - want to have show toast finally the
625:12 - command is the important bit here this
625:14 - is going to be
625:16 - toast and show underscore toast
625:20 - I want to pack this widget straight away
625:22 - without any arguments because we don't
625:24 - need too many
625:26 - now if I run this we have another button
625:28 - show toast if I click on it we now have
625:31 - the message and now the window doesn't
625:33 - disappear anymore when the toast
625:35 - disappears this covers the basics I
625:38 - guess we can cover a few more arguments
625:40 - in here but other than that this doesn't
625:42 - become any more complicated we can set a
625:45 - boot style in here this could for
625:48 - example be dark let me run it now and
625:51 - show the toast now this is dark we could
625:54 - also set this to warning
625:57 - and now we get a yellow kind of button
626:00 - or well not button but a warning the one
626:03 - thing you want to be careful about is
626:04 - that this boot style here doesn't
626:06 - support outline if I run this again
626:09 - click on show toast we now get an error
626:12 - that this thing doesn't have an
626:14 - attribute create outline frame Style
626:17 - you can only use the color there's no
626:19 - other style available
626:20 - I'm going to stick with dark I think
626:22 - this one generally looks the best
626:24 - finally there's one more important thing
626:26 - and that is you can set the position
626:30 - you have X petting y petting and then
626:34 - the start position
626:37 - the start position is the really
626:39 - important one in here you can set
626:41 - something like North East North West
626:43 - South East or Southwest these positions
626:47 - would refer to the different corners of
626:49 - your screen for example Southwest would
626:52 - be the corner down here Southeast would
626:55 - be down here we have Southeast South
626:58 - West then we have North East and we have
627:02 - North West
627:05 - these are the different Corners you can
627:07 - start with and then you are using X
627:09 - padding or white padding to get a bit of
627:12 - offset
627:13 - for example if you want to start with
627:15 - the Northeast you would add an e in here
627:18 - and then you would use these numbers to
627:20 - get an offset
627:21 - let's actually play around with that for
627:23 - X padding and Y padding I want to start
627:26 - with zero so we can focus on the corner
627:29 - I want to start with North East if I run
627:32 - this again now I click on show toast now
627:34 - the message is in the top right if I set
627:36 - this to North West run this again click
627:40 - on show toast now it's in the top left
627:43 - I'm going to stick with Northeast and
627:45 - for the numbers I now want to have 50
627:47 - and 100.
627:49 - this means if I show the toast we have a
627:53 - hundred pixels from the top and 50
627:54 - pixels from the right that covers
627:57 - everything there has to know about toast
627:59 - if you want to read up on it you can
628:01 - look at the documentation you can find
628:03 - this here you want to look at the toast
628:05 - module and this has a couple more
628:09 - arguments
628:10 - as opposed to one I didn't cover is the
628:12 - alert this one plays a sound if you are
628:15 - playing it by default it is false and I
628:17 - think that's a better way to go on about
628:19 - it but if you want your program to be
628:21 - annoying do play a sound
628:23 - ready next up
628:25 - we can create a tool tip this is going
628:30 - to be a very simple message that shows
628:32 - up once we hover over a certain element
628:35 - like a button for example in fact let's
628:38 - create a button right away with ttk and
628:42 - button the master here is going to be
628:44 - window for the text I want to have tool
628:47 - tip button to make this a bit more fancy
628:50 - I want to set a boot style
628:53 - let's call it warning this button I want
628:56 - to pack right away if I run the app now
628:58 - we have a yellowish orange-ish button I
629:03 - think the entire thing starts to be a
629:05 - bit crammed so I'm going to add a bit of
629:07 - vertical padding
629:10 - pad Y is going to be 10
629:13 - for both of the buttons
629:15 - running this now this is looking a
629:16 - little bit better
629:17 - this button I now want to have a tooltip
629:21 - once we hover over it for that we need
629:23 - one more widget this we get from the top
629:26 - as before we need from ttk bootstrap
629:29 - although now we need tool tip and we
629:32 - want to import dual tip
629:36 - this is going to give us the widget
629:38 - also I'm going to minimize a couple of
629:41 - things here so the entire thing is a bit
629:43 - easier to read all we have to do for the
629:45 - tool tip is we have to create an object
629:47 - from the class so call the class itself
629:50 - in here we have to set a master and the
629:53 - master is going to be the element that
629:55 - we want to have the tooltip attached to
629:57 - in my case that is this button here
630:00 - so the master is the button then we need
630:03 - a certain kind of text it doesn't really
630:05 - matter what it is let's say this does
630:08 - something
630:09 - if I run this now I can hover over the
630:11 - button and we get this does something
630:14 - if I go away from it it disappears
630:17 - right now this doesn't look too great
630:19 - but we can style it using boot style for
630:22 - example what you could be doing is use
630:24 - light in here
630:25 - now
630:27 - we have some other kind of color I think
630:30 - using danger here might be a bit better
630:32 - let's try this one
630:35 - yeah it kind of works now the boot style
630:38 - for tooltip has one specific thing and
630:40 - that is called inverse if you attach
630:43 - that one and hover over it now you get
630:45 - the colors inverted if we didn't use
630:48 - this we had red text and I think a black
630:50 - background with the inverse we get white
630:53 - text and a red background
630:55 - inverse is the only styling you can use
630:57 - though you couldn't use outline this one
631:00 - doesn't exist if I use it we're getting
631:02 - an error but I think inverse works
631:04 - really well here there are three more
631:06 - widgets that we have to cover the next
631:09 - one is a calendar
631:11 - this is going to be another widget we
631:13 - have to import in a custom kind of way
631:16 - like the ones we have used here although
631:18 - for this one we need from
631:20 - ttkbootstrap.widgets
631:23 - from this one we want to import date
631:25 - entry
631:27 - this date entry I want to create and
631:30 - store in a variable right away let's
631:33 - call the variable calendar the value is
631:36 - going to be date entry this one doesn't
631:38 - need any arguments besides the master
631:41 - after I have that I want to pack it
631:43 - right away
631:45 - with some vertical padding pad y let's
631:48 - go with 10.
631:50 - if I run this we now have a calendar
631:53 - that shows the current date if I click
631:55 - on the calendar I can even select other
631:58 - kinds of dates
632:00 - I can go further wherever I want and if
632:02 - I click on the date we get to the
632:03 - current date
632:04 - if I select one we get the new date here
632:07 - and we can extract this one quite easily
632:09 - as well
632:11 - to do that let me create a button I want
632:15 - ttk
632:17 - dot button
632:19 - the window is going to be the parent
632:21 - text is going to be get calendar date
632:26 - the command is going to be some kind of
632:28 - command to print the current date this
632:31 - could be a function but in my case I'm
632:32 - going to add all of this into a Lambda
632:34 - function
632:35 - what I want to do is I want to print the
632:38 - calendar inside of this we have an entry
632:41 - widget this we have to Target and on
632:43 - this one we can use the get method the
632:46 - calendar is basically a compound widget
632:50 - the compound here is an entry widget and
632:52 - a frame with a bit of content all we
632:54 - really care about is the entry itself
632:57 - once we have that I can simply pack the
633:00 - button
633:01 - run this entire thing and now if I
633:03 - select a certain kind of date let's say
633:05 - the 1st of December 2022 I can get the
633:09 - calendar date and we get the 1st of
633:10 - December 2022. I suppose one thing to be
633:14 - aware of here the calendar has the date
633:16 - first then the month and then the year
633:18 - if you are American and you're doing the
633:21 - calendar wrong just be aware of that the
633:22 - month is the middle part not the first
633:24 - bit that covers the calendar next up we
633:28 - can create a progress bar
633:32 - although in TDK bootstrap this is called
633:35 - a flat gauge once again we have to
633:38 - import this one this module lives inside
633:41 - of the widgets besides the date entry I
633:43 - want to import the flood gauge
633:47 - once I have that I can use it I want to
633:50 - store all of this inside of a variable
633:51 - that I call progress and here we need
633:54 - ttk and blood gauge first of all we need
633:59 - a master which is going to be the window
634:00 - besides that we can also set a text in
634:03 - here I will call this one progress so
634:06 - that we have something after that I want
634:09 - to pack this progress with some vertical
634:12 - padding there you can see we can see
634:14 - something but this doesn't look too
634:16 - great yet
634:18 - what you want to be aware of for this
634:19 - flood gauge is that it needs a lot of
634:22 - horizontal space
634:23 - in my case I want to fill the X
634:27 - and there we go now we can see this
634:29 - progress properly although right now all
634:31 - we can see is a plain background to make
634:34 - it actually work we need a tkinter
634:36 - variable let me create this one at the
634:38 - top I want to have I'm going to call
634:40 - this a progress integer
634:43 - this is going to be a TK end
634:47 - VAR with a default value of 50. this
634:51 - value we now have to attach to the
634:53 - progress which we can do by setting a
634:56 - variable progress integer if I run this
635:00 - now there you can see we have some
635:02 - proper progress bar if you update this
635:05 - integer the value in here is also going
635:08 - to update for example what you could be
635:11 - doing is to create another slider with
635:13 - ttk and scale the parent is going to be
635:16 - window
635:18 - we want to go from
635:20 - 0 to 100 with the variable of progress
635:27 - integer I want to pack this one right
635:29 - away if I run this now I can use this
635:32 - slider to update the progress bar
635:36 - which is working pretty well
635:38 - this flat gauge also accepts a few more
635:41 - arguments
635:43 - I will put all of the arguments over
635:45 - multiple lines so this is a bit easier
635:47 - to read one obvious argument we can use
635:50 - here is boot style
635:52 - this could for example be info now we
635:56 - get a different kind of color well not
635:57 - that different we could also use danger
636:00 - now it's red
636:02 - other than that the really interesting
636:04 - argument in here is called a mask
636:07 - this one is overwriting the text by
636:09 - default let me call this one mask for
636:11 - now if I run this now we can see mask so
636:15 - this isn't too useful
636:17 - however what you can do if you add curly
636:19 - braces in here
636:21 - ttk bootstrap is going to add the
636:24 - variable number in here right away which
636:27 - means if I run this now we get mask 50
636:29 - and if I play around with the slider we
636:33 - get numbers here updated right away
636:35 - which means I could for example add a
636:38 - percentage sign
636:39 - afterwards and this makes it very easy
636:42 - to get a percentage as well as a visual
636:44 - indicator in terms of where you are on
636:46 - the progress those are the main
636:48 - arguments obviously you can read up on
636:50 - it on the documentation I haven't opened
636:52 - this one let's do it right away inside
636:55 - of the documentation you want to look at
636:57 - the widgets module in here we have
636:59 - Floodgate
637:00 - if I open this one you can see a nice
637:03 - preview and if you go a bit further down
637:06 - you can see all of the arguments you
637:08 - could be using
637:09 - there are quite a few actually
637:12 - we are very nearly done there's only one
637:15 - more widget that I really want to cover
637:17 - and that is the meter this one looks
637:19 - like this
637:20 - in here we have lots of different things
637:22 - that we could be using all of these
637:25 - arguments
637:27 - this is going to be your exercise what I
637:30 - want you guys to do is to figure this
637:33 - widget out yourself in my case I have a
637:35 - meteor that's something like this it's a
637:37 - red color we have a full circle and we
637:40 - can see the numbers straight away
637:43 - try to read through this page and see if
637:45 - you can implement this one yourself
637:50 - back in the code the first thing that we
637:53 - have to do is to import the widget
637:55 - since it happens inside of the widgets
637:57 - from here I want to import meter now
638:00 - that we can use it all the way at the
638:03 - bottom I want to add a meter
638:06 - I'm going to store it inside of a meter
638:08 - variable and we create it with ttk and
638:11 - meter
638:12 - since we are going to use quite a few
638:14 - arguments I'm going to start over
638:15 - multiple lines right away the first
638:17 - argument as always is the master which
638:19 - is going to be the window
638:20 - but now this is all we need so I'm gonna
638:23 - pick this thing run this and there we go
638:27 - we have a meter that right now doesn't
638:30 - do anything
638:31 - to actually use it we have to first of
638:34 - all create an amount total
638:38 - I want this to be a hundred this is the
638:40 - maximum value after that we want to have
638:43 - amount used this is the starting value
638:46 - and the minimum is always zero let's say
638:49 - for this one amount used should be 10.
638:51 - running this now we can see we already
638:54 - have a basic start
638:56 - that being said if I'm trying to click
638:58 - on it nothing is going to happen
639:00 - to make something happen we have to set
639:02 - interactive to true
639:06 - now I can click on it and move this
639:08 - thing around
639:09 - other than that you have lots of
639:11 - different arguments you could be using
639:13 - for example we have the meter type this
639:17 - could be either full
639:19 - that I believe is the default
639:21 - alternatively you can use semi with that
639:24 - you get a semi-circle that otherwise
639:26 - still works the same you can also
639:29 - customize the text or add a subtext
639:31 - let's go with some other text
639:35 - now we get some other text although the
639:37 - functionality doesn't change you can
639:39 - also set the boot style this works with
639:42 - literally every widget I used danger for
639:45 - this one this is giving us a red color
639:47 - these are the basic arguments I think
639:50 - you want to use most of the time
639:51 - although there are quite a few more you
639:53 - could for example set the stripe
639:55 - thickness you could show the text or not
639:57 - show the text you could set the media
639:58 - thickness and lots of other things you
640:01 - can work with you have a ton of options
640:04 - in here and well with that we have
640:07 - covered quite a bit of stuff and this
640:08 - video is getting a bit long so let's
640:10 - finish it here a really important part
640:13 - of good looking user interfaces are
640:15 - animated widgets so what we're going to
640:17 - make
640:18 - is this app here inside of that I have a
640:21 - button if I click on it we have an
640:23 - animated sidebar this has a button and
640:26 - it has a text field where I can write
640:29 - over multiple lines if I write too many
640:31 - lines we get a scroll bar
640:33 - all of this is quite easily implemented
640:35 - on top of that we can also do all of
640:38 - this in light mode we have the same
640:40 - sidebar although now it's looking a bit
640:43 - brighter but with the same functionality
640:46 - so let's cover some Theory first
640:49 - into Kinder you can create animated
640:52 - widgets but you do not have pre-built
640:54 - components for it as a consequence you
640:57 - have to make your own systems for that
640:59 - you need two major Concepts the first
641:02 - one is the after method this one allows
641:05 - you to call a function after a certain
641:07 - amount of time
641:08 - this you combine either with the layout
641:10 - methods or with configure those can
641:13 - update the position the size the text
641:14 - the color of any widget
641:16 - should go into a bit more detail
641:19 - widgets can be updated in real time
641:21 - using either configure or the layout
641:24 - methods for example
641:26 - if you're calling a layout method
641:28 - multiple times the current one
641:30 - overwrites the previous one if we are
641:33 - calling button Place once with X being
641:34 - 10 and Y being 50 and then call it again
641:37 - with 210 only the second one will be
641:41 - displayed the previous one will simply
641:44 - be removed that way you can update the
641:46 - position and the size of a widget in
641:49 - real time on top of that you can use
641:51 - configure to update the text the font
641:53 - the colors and all the stuff you can
641:55 - update inside of configure I'm gonna
641:57 - play around with this in just a second
641:58 - but there's one more thing I do want to
642:00 - talk about and that is when you're
642:03 - animating widgets you want to use place
642:05 - at least when it comes to the layouts
642:08 - for the simple reason that only plays
642:10 - can give you pixel by pixel positions
642:12 - imagine using the grid method for
642:14 - animations inside of the grid you can
642:16 - only specify the current cell we are
642:18 - working in you couldn't move a widget by
642:20 - one pixel to the right
642:22 - only place can do that so we have to use
642:24 - it for animations that being said you
642:27 - could totally use grid for animations it
642:29 - just wouldn't look good this gives us a
642:31 - couple of Concepts I want to practice
642:33 - already I am using custom tikenter to
642:36 - make all of this look good but all of
642:38 - this would also work with the normal ttk
642:40 - apps after that I'm creating a window
642:42 - and I have one button the one notable
642:45 - thing about this button is that for the
642:48 - X position which we are placing with the
642:50 - place method we are storing the position
642:52 - inside of a variable and this we're
642:54 - passing in here we're going to work with
642:56 - this position in just a second finally
642:59 - we are calling window.main Loop to run
643:01 - the entire app which means if I'm doing
643:03 - that we have a window with one button
643:05 - that doesn't do anything right now to
643:07 - influence it I need to run some kind of
643:09 - function which I'm doing when the button
643:11 - is pressed let's call the function move
643:14 - button this function we have to create
643:16 - move BTN there are no need for
643:19 - parameters and in here we we can use the
643:23 - place method or the configure on the
643:25 - button to update the button itself let's
643:28 - start with the place method itself
643:30 - because I want to move the button to the
643:32 - right every time we are pressing it
643:33 - since I want to use button X for that I
643:36 - need to be able to influence this
643:38 - variable in my case I'm going to set it
643:40 - as a global variable using the global
643:42 - keyword
643:43 - once I have that I want to Simply
643:46 - increase button X by let's say
643:50 - 0.05 every single time we're pressing
643:52 - the button to make sure that this is
643:54 - working let's print button X as soon as
643:57 - we are pressing the button
643:59 - now if I'm pressing the button we get
644:01 - 0.05 0.06
644:04 - some weird stuff with floating Point
644:05 - numbers but that isn't going to make a
644:07 - difference
644:08 - this number we can now use inside of the
644:11 - place method let me actually copy it I
644:14 - want to place the button one more time
644:16 - with this button X
644:18 - the difference now compared to the
644:20 - original is that button X becomes larger
644:22 - every single time
644:24 - let's try it now if I click on toggle
644:27 - sidebar it always moves a tiny bit
644:29 - further to the right
644:31 - the numbers are quite large and we only
644:33 - move when we are clicking but this is
644:35 - the first step to understand animations
644:37 - besides relative X and relative y you
644:40 - could also work with relative height
644:42 - let's say I guess we can use button X in
644:45 - here again
644:46 - if I run this now every time I'm
644:48 - clicking the button gets a tiny bit
644:49 - larger
644:50 - I think I should set button X for the
644:53 - starting height as well
644:56 - I wonder if real height is going to be
644:59 - button X now if I run this we start with
645:01 - a much larger button and every time I
645:02 - click the button gets larger it moves to
645:04 - the right
645:05 - you could also just use X and Y here
645:08 - that would be perfectly fine all of the
645:10 - animations work either with absolute or
645:12 - with relative numbers that would cover
645:15 - the layout methods besides that we can
645:18 - also use config or rubber configure for
645:21 - example what we could be doing is
645:22 - declare a couple of random colors let's
645:25 - say red yellow pink and green every time
645:30 - we are clicking on the button I want to
645:32 - give the widget a new color for that I
645:35 - need some Randomness which means from
645:37 - random import choice
645:40 - every time I'm clicking the button I
645:42 - want to get a color let's call it color
645:44 - and the value is going to be choice of
645:47 - colors that way let me print it really
645:50 - quick I want to have my color
645:52 - and I click on the button we get one of
645:55 - the colors
645:57 - okay we just got really unlucky in the
645:58 - beginning
645:59 - I'm going to add a few more colors in
646:02 - here so we have a bit more variety like
646:05 - so
646:06 - now for runders we get much more
646:09 - randomness that we can use to configure
646:12 - the button for example we could run
646:14 - button dot configure the argument in
646:17 - here since we're using custom tkinter
646:19 - would be FG color to get the actual
646:22 - button color and this I want to set to
646:25 - the color if I run this thing again and
646:27 - now if I click on the button and move
646:28 - away from it
646:30 - we can see we get different colors after
646:33 - every single click
646:35 - if you were using normal tkinter this FG
646:38 - color wouldn't work you would need to
646:39 - use the default styling options which
646:41 - are quite limited which is why I'm using
646:43 - custom tkinter
646:44 - it makes all of this much easier but
646:47 - well with that we can update a widget in
646:50 - real time what we now have to figure out
646:53 - is how to make tikinta do all of the
646:55 - work for the animation for us for that
646:57 - we have to learn One More Concept that
646:59 - concept is after and after can call a
647:02 - function after a certain amount of time
647:04 - this one would look like this it always
647:07 - has to be part of the window we specify
647:10 - two arguments the amount of time and
647:12 - then the function we want to call the
647:14 - amount of time here is in milliseconds
647:17 - since 1 000 milliseconds are one second
647:19 - this number here would be one second
647:21 - what is really important is that this
647:24 - can be circular a function that is
647:26 - called with after can contain after
647:28 - itself
647:29 - in this case we could have a function
647:31 - like this
647:32 - after one second we are calling this
647:35 - function here then we are printing test
647:37 - and then we are running the function
647:39 - again as a consequence this function
647:42 - will run forever let's play around with
647:44 - this one actually I want to create
647:45 - another function I will call this one
647:48 - infinite print it doesn't need any
647:51 - parameters in here I simply want to
647:54 - print I suppose infinite is appropriate
647:57 - in here
647:58 - this I want to start whenever we are
648:00 - pressing on the button
648:02 - meaning if I run this now the button
648:04 - only prints infinite but what we can do
648:07 - now is run window
648:10 - after then we need the time and the
648:13 - function we want to call let's say after
648:15 - one second so 1000 milliseconds I want
648:18 - to run infinite print again
648:21 - if it runs now I can click on toggle
648:23 - sidebar we get infinite once and after
648:25 - one second we get it again and again and
648:27 - again and again this is never going to
648:30 - stop
648:31 - for animations one second is quite long
648:34 - but you could set this to even one
648:36 - millisecond now if I click on it we get
648:39 - a whole bunch of infinites
648:41 - I suppose 100 milliseconds is a good
648:43 - middle ground here while we are doing
648:45 - this infinitely right now you could also
648:48 - control this for example with an if
648:50 - statement to keep on using button X we
648:54 - could
648:55 - check if button X is smaller than 10 and
648:59 - only then run this
649:01 - to make that work we have to update
649:03 - button X for that I want to set button X
649:06 - as a global variable again and then
649:08 - increase it by a certain amount
649:10 - button X Plus equal
649:14 - let's say 0.5 only if the if statement
649:17 - now is the case I want to print infinite
649:19 - and to make sure that we see what's
649:21 - going on I also want to print button X
649:25 - let's run this one now if I click on the
649:28 - button
649:29 - we get infinite but only up to 9.5 then
649:32 - the thing stops with that all we have to
649:35 - do is combine this function with this
649:38 - function to get an animated button which
649:41 - is bringing us to one exercise already I
649:44 - want you guys to animate a button so
649:45 - that it moves to the right side of the
649:47 - window after we are pressing it if you
649:49 - combine this function and this function
649:51 - this should be fairly easy to do pause
649:53 - the video now and see if we can figure
649:55 - this one out
649:59 - first of all I want to work inside of
650:02 - this function here for that when I'm
650:04 - pressing the button I want to call the
650:07 - move button function on top of that I
650:09 - don't want to change the height of the
650:11 - button meaning I'm just going to remove
650:12 - the relative height both inside of the
650:14 - function and when I'm creating the
650:16 - button in the first place
650:18 - that way we're only focusing on one bit
650:20 - at a time with that we can actually
650:22 - counter the animation inside of the move
650:24 - button for now I am declaring a global
650:27 - button X I am increasing button exit and
650:30 - then I'm calling button.place so if I
650:33 - run this we are moving the button a tiny
650:35 - bit to the side and we're also changing
650:36 - the color I guess we should remove this
650:39 - one because that would be quite
650:40 - confusing
650:41 - the issue we have right now is after
650:44 - we're clicking the button nothing
650:45 - happens but instead what we want to do
650:47 - is call this function one more time
650:51 - or well not just one more time but until
650:53 - we are reaching the right side of the
650:55 - window for that I want to use the after
650:58 - method
650:59 - I want to run window and then after
651:03 - I want to get an update every 100
651:05 - milliseconds and I want to call move
651:07 - button with that I can run this thing
651:10 - and we get some kind of Animation it's
651:14 - really choppy right now and it doesn't
651:15 - stop the choppiness we can fix very
651:18 - easily all we have to do is reduce this
651:20 - number and this number I only want to
651:23 - update the position by 0.01 units and I
651:26 - want to update this thing every 10
651:28 - milliseconds if I run this now
651:31 - this is a much smoother animation to
651:34 - control it a little bit better what we
651:36 - can do is use an if statement that if
651:39 - button.x let's say is smaller than 0.9
651:44 - only if that is the case I want to call
651:46 - the after method
651:47 - if I run this now
651:49 - the button is going to move we have to
651:51 - wait a tiny bit at some point it should
651:53 - stop there we go now it's stopping on
651:55 - the right side of the window this isn't
651:57 - perfect but I think for now it's good
651:59 - enough so that covers basic animations
652:02 - obviously this doesn't look very good so
652:05 - let's make a good looking animated
652:07 - widget what I want to create is some
652:10 - kind of slide panel I want to create
652:13 - something like this where we can click
652:14 - on a button and then we have a side
652:16 - panel this doesn't have to be on the
652:18 - right it could also be on the left it's
652:19 - quite flexible this first of all has to
652:23 - inherit from ctk and frame I forgot this
652:26 - cdk at the beginning that way we are
652:29 - simply creating a frame when I'm calling
652:31 - the Thunder init method we now need a
652:35 - couple of arguments the obvious one is
652:37 - self and we need a parent other than
652:39 - that we need a start position and an end
652:43 - position the animation will then move
652:45 - between these two once we have that as
652:48 - always we need the super init method and
652:51 - we have to set the master to the parent
652:54 - I forgot the brackets here after that I
652:59 - want to create some general attributes
653:02 - basically what that means I want to
653:04 - store the start position as the start
653:07 - position as an attribute the same I want
653:09 - to do for the end position end position
653:11 - like so other than that I need the width
653:14 - of this thing self.wift the width I want
653:17 - to generate automatically this is going
653:20 - to be the window I want the widget to
653:23 - start here at position
653:25 - 0.0 for the simple reason that by
653:28 - default the side panel should be on this
653:31 - side if however the user clicks the
653:33 - button I want this thing to slide to
653:35 - left let's say to position
653:38 - 0.3 the demos you have seen was the
653:41 - panel moving to the right but in this
653:42 - case I want to move to the left this
653:45 - thing is flexible though both would work
653:47 - just fine with the same widget but first
653:49 - of all we need to generate the width and
653:51 - the width we get from this distance here
653:54 - that number we get with the start
653:58 - position minus the end position and all
654:02 - of this and needs to be absolute the
654:05 - reason why this needs to be absolute let
654:07 - me print
654:08 - the with
654:10 - self.wift and create a widget this by
654:13 - the way needs to happen before we create
654:14 - a button
654:16 - animated widget
654:18 - I want to create an animated panel which
654:22 - is going to be the slide panel
654:24 - for this one the master is going to be
654:26 - the window the start position is going
654:28 - to be zero and the end position is going
654:30 - to be 0.3 although this one has to be
654:33 - negative running this now we get an
654:35 - error because I am incapable of typing
654:38 - this should be an uppercase t now if we
654:41 - run this we get 0.3 this is a proper
654:44 - width but if we didn't use absolute
654:47 - numbers in here we would still get 0.3
654:50 - but if we used other numbers this might
654:52 - be a negative number for example if I
654:55 - want to start my widget on 0.7 so
654:57 - somewhere on the right side
654:59 - and then move it to one then we will get
655:02 - a negative number
655:03 - since this would create a negative width
655:05 - we would get some weird results as a
655:08 - consequence always use absolute values
655:11 - in here
655:12 - also spell them correctly that tends to
655:14 - help
655:15 - with that we get positive numbers the
655:18 - floating Point weirdness here you can
655:20 - just ignore it's not going to make a
655:21 - difference
655:22 - so with that we have a proper width
655:25 - which means we can actually place the
655:27 - thing I'm going to use self.place let me
655:30 - add a comment here as well I want to get
655:33 - relative X that would be self dot start
655:38 - position
655:40 - relative y would be zero then we have
655:44 - the relative
655:45 - width that would be self dot with and
655:49 - finally I want to have relative height
655:52 - which for now would be one now if I run
655:55 - this we have a sidebar all the way on
655:57 - the right
655:58 - it's kind of hard to see right now but
656:00 - it is the brighter stuff here all of
656:03 - this to make sure that this is a bit
656:04 - more visible I want to set an F G color
656:07 - to let's go with red now if I run this
656:10 - this is much more visible on top of that
656:12 - to move the panel to the left side I
656:14 - want to change these numbers back to
656:16 - zero and negative 0.3
656:19 - that way now the panel starts on the
656:21 - left because the start position is zero
656:23 - so this self-estar position is zero with
656:26 - that we need a few more things
656:29 - all of these numbers are for the
656:31 - animation itself so animation logic
656:34 - first of all we have to track the
656:37 - position Itself by default this will be
656:39 - the start position this will become
656:41 - important in just a bit besides that I
656:44 - want to toggle self dot in start
656:48 - position by default this should be true
656:52 - this is going to be a switch and it is
656:54 - going to track if our budget is in stock
656:56 - position or not in the start position
656:58 - if it is in a stock position we want to
657:00 - move towards the end position if it is
657:02 - not in a stop position we want to move
657:04 - towards the start position
657:06 - which basically means this thing is
657:08 - going to determine the direction
657:09 - we can use this right away actually
657:11 - because I want to create another method
657:13 - that I call animate
657:16 - with itself and nothing else in here and
657:19 - all I want to do is if self dot in start
657:22 - position then I want to self dot animate
657:26 - or Ward
657:28 - if that is not the case meaning else I
657:31 - want to run self Dot and made
657:35 - backwards these two methods are what
657:38 - actually creates the animation so let's
657:40 - start with animate forward
657:43 - Define animate forward what I want to do
657:46 - in here is first of all I need an if
657:48 - statement if self dot position is
657:51 - greater than self dot end position
657:54 - I should probably draw while doing all
657:56 - of this this one here would be our
657:59 - window a bit squashed a start position
658:01 - right now is this point zero
658:04 - this would be our start position or
658:07 - rather this one here besides that we
658:10 - have the end position the end position
658:12 - right now is somewhere here negative 0.3
658:17 - that is a horrible three that's looking
658:19 - better
658:20 - finally we have a position this position
658:23 - here at the start this is on the start
658:25 - position meaning it's here this position
658:28 - I'm going to move a tiny bit further to
658:31 - the left every time we are calling
658:33 - animate forward
658:35 - however I am only going to do that until
658:37 - we reach negative 0.3 for that we have
658:41 - this if statement here we are only going
658:43 - to move the position to the left until
658:46 - we are reaching the end position
658:48 - if that is the case though I want to
658:50 - update self.position
658:53 - and reduce it by
658:56 - 0.008 the number here is very subjective
658:59 - it basically determines the animation
659:01 - speed just choose whatever you think
659:03 - looks good
659:04 - once we have that we can run self dot
659:06 - place again
659:08 - let me copy the numbers actually from up
659:10 - here
659:11 - because we can reuse quite a bit
659:15 - for the X position we now don't need
659:18 - start position we just want the position
659:20 - relative y relative width and relative 5
659:23 - can stay identical
659:24 - finally what we are going to need is
659:27 - self dot after
659:30 - I want to run another function after 10
659:32 - milliseconds the function I want to run
659:34 - is self dot animate forward with that we
659:38 - should already have something let me run
659:40 - the entire thing again and now if I
659:42 - click on toggle sidebar
659:43 - we are moving the button to the right
659:46 - and that is because the button still
659:49 - gets the move button function this I
659:51 - want to change I want to get my animated
659:53 - panel in here I want to run a method the
659:56 - method I want to run is this animate
659:59 - which means animated panel dot animate
660:02 - now let's try this again
660:04 - if I now click on toggle sidebar this
660:06 - thing is moving to the left
660:08 - although if I click on it again nothing
660:10 - is going to happen
660:11 - and to make it a bit easier to see
660:13 - what's going on let me update these
660:15 - numbers here let's say to 0.3 and 0.1
660:21 - now if I run this again this thing is
660:23 - much more in the middle and if I move it
660:24 - to the left now it only moves up to 0.1
660:28 - I hope you can follow logic here I am
660:31 - going to stick with the original numbers
660:33 - like so and now we can keep on working
660:36 - on this
660:37 - first of all once we are reaching this
660:39 - position which means an else statement
660:42 - will be triggered
660:43 - I want to set self dot in start position
660:47 - to false that way once we're clicking on
660:51 - the button again we would run animate
660:53 - backwards
660:54 - this we now have to create Define
660:57 - animate backwards this one also doesn't
661:01 - need any parameters besides self and now
661:04 - we have to do basically the same thing
661:06 - we have done here as a consequence I can
661:08 - just copy the entire code and paste it
661:10 - in here and make some updates
661:13 - first of all self dot position we only
661:16 - want to run if the number is smaller
661:18 - than self.n position
661:20 - actually this should be this start
661:22 - position
661:24 - the reason for that let me draw all of
661:26 - this actually again
661:27 - we have the window one more time and
661:30 - again we have to start position at zero
661:32 - and the end position at negative 0.3
661:36 - right now the position when we are
661:39 - calling this method here is going to be
661:41 - on negative 0.3 and we want to move it a
661:45 - bit further to the right every time we
661:47 - are calling the method however we only
661:50 - want to call it until we reach the
661:52 - starting position this line here
661:54 - that is covered with this if statement
661:57 - if that is the case I want to increase
662:00 - the start position by the same amount
662:02 - you could use a different number in here
662:04 - but you probably don't want to
662:06 - after that you're calling Place although
662:08 - after now is animate backwards instead
662:11 - of forwards finally if that is not the
662:14 - case anymore in start position should be
662:16 - true again
662:17 - with that we should have a basic
662:19 - animation if I now run this I can toggle
662:22 - this and we have an animated sidebar
662:24 - that's looking pretty good
662:26 - although right now it doesn't look very
662:28 - good let me run it again all we get is a
662:31 - red frame that we can move but it
662:33 - doesn't have any content and well
662:35 - generally I want to make this thing look
662:37 - a bit better
662:39 - first of all I want to have a gap
662:41 - between the frame itself and between the
662:43 - surrounding this I do with relative Y
662:45 - and relative height for example I could
662:48 - set the relative height to 0.5
662:51 - 0.05
662:54 - and then the relative height is going to
662:56 - be 0.9 running this now we get a gap
663:00 - between the top and the bottom
663:02 - while the frame itself is still in the
663:04 - middle
663:05 - besides that for the start position we
663:08 - can increase this by a tiny amount let's
663:10 - say 0.1 now if I run this again we have
663:14 - that's quite a large gap let's go with
663:16 - 0.05
663:19 - it's looking a bit better
663:21 - the toggling itself still works although
663:23 - we have to make a few more updates here
663:25 - the problem if I run this again once I
663:28 - click on toggle sidebar we are covering
663:30 - the entire height so this we can change
663:33 - already I want to copy all of these
663:36 - numbers here and now when I'm calling
663:38 - place in here and in here so animate
663:41 - forward animate backwards I want to have
663:43 - these updated numbers that way it's
663:46 - looking a bit better
663:49 - although there's a small jump in the
663:51 - beginning and that is because of this we
663:54 - are setting the position to zero because
663:56 - we're in start position from the
663:58 - parameters but not from the updated
664:00 - value here
664:01 - we can fix that by setting self.start
664:03 - position and now this is much smoother
664:07 - that being said I think this is a tiny
664:10 - bit large let's go 0.04 that's looking a
664:13 - bit better once again you can play
664:15 - around with these numbers it's entirely
664:17 - up to you they're quite subjective what
664:20 - is much more important though I don't
664:22 - want to have a red background color
664:24 - instead I want to minimize the side
664:26 - panel and work with the animated panel
664:29 - what is really important to understand
664:31 - now is that this side panel is simply a
664:34 - frame which means we can place any other
664:36 - widget inside of it and it would still
664:38 - work the same for example I could create
664:41 - a ctk and ctk label
664:46 - with the parent being the animated panel
664:48 - after that I can set some text let's
664:51 - call it label one
664:54 - like so and this I want to pack right
664:56 - away
664:58 - although any other layout method would
665:00 - also work just fine I want to set expand
665:02 - to True fill to
665:05 - both
665:07 - and on top of that I want to add a bit
665:10 - of pad X
665:12 - let's go with 2 and Pad y with 10.
665:18 - if I run this now we have label 1
665:20 - covering the entire frame the rest still
665:23 - works just fine
665:25 - I can do this again and change it to
665:27 - label 2.
665:29 - run this again and now we have two
665:31 - labels in here the same thing would also
665:34 - work with another widget let's say with
665:36 - a button
665:38 - I simply call this one button if I run
665:41 - this now we have a button all the way at
665:43 - the bottom although the padding here
665:45 - looks a bit weird especially X padding
665:48 - doesn't work particularly well in here
665:51 - but why padding I think still works just
665:53 - fine yeah that looks okay
665:55 - on top of that for this button I want to
665:58 - remove the corner radius so I'm going to
666:01 - set it to zero now this is looking much
666:03 - better finally One widget that we can
666:06 - use that I don't think I have used yet
666:08 - is called ctk and then ctk text box
666:13 - this is a text box with the parent being
666:16 - the animated panel and this I want to
666:19 - pack as well with expand being true and
666:22 - fill being both
666:25 - now if I run this we have a text box
666:27 - that we can type in although the
666:30 - background color here doesn't really fit
666:32 - to update that we have to set inside of
666:36 - the widget the FG color
666:39 - the colors here should cover both the
666:42 - light mode and the dark mode
666:44 - the colors we need are this now if I run
666:47 - this we have no more background color so
666:50 - this is looking much better
666:54 - although this might be very hard to see
666:56 - and it's a tiny detail but in the bottom
666:59 - left we have a sharp corner like this
667:02 - whereas in the top left we have a round
667:04 - corner this happens because now this
667:07 - text box has sharp corners and is
667:10 - overshadowing the frame
667:12 - unfortunately we cannot cut this off but
667:14 - what we can do is set vertical padding
667:18 - so pad Y and set it to 10. now we have a
667:21 - rounded Corner because the text box
667:23 - widget only reaches to this point here
667:25 - we have a text box that works over
667:28 - multiple lines
667:29 - it's looking pretty good we can still
667:31 - use it just fine
667:33 - we're making a lot of progress on top of
667:36 - that since we have two different colors
667:38 - we could also update the theme so what I
667:41 - could be doing is ctk and then set
667:45 - appearance mode to light
667:49 - and I can run it again and we still have
667:51 - the same outcome with colors that look
667:53 - consistent
667:55 - the animation once again still works
667:57 - just fine although I do prefer the dark
667:59 - mode but choose whatever you like
668:02 - with that we are nearly done yes one
668:06 - more thing that we have to do and that
668:08 - is to make this slide panel a tiny bit
668:10 - more flexible
668:11 - so if I run this again I can click on
668:13 - the button and all of this works just
668:15 - fine
668:17 - however I want a system to work a tiny
668:19 - bit different what I want to have is
668:22 - that by default this panel here is all
668:26 - the way on the right and not visible to
668:29 - the user only once we click toggle
668:31 - sidebar then it should be on the right
668:34 - side like so
668:36 - this by the way if I run the demo again
668:39 - this is what I want to have at the End
668:41 - by default I can't see anything on the
668:43 - right only if I click on toggle sidebar
668:45 - we get the cipher window and then I can
668:48 - remove it again
668:49 - so by default it shouldn't be visible
668:52 - for that we have to make a few updates
668:53 - although none are too difficult
668:57 - as a consequence we can add a second
668:59 - exercise what I want you guys to do is
669:03 - to update
669:05 - the panel so it moves in from
669:09 - the right
669:12 - you would have to figure out a couple of
669:14 - things but pause the video now and see
669:16 - if we can figure this one out
669:22 - first of all I want to update the
669:24 - positions my start position should be
669:27 - 1.0 so the app is invisible and the end
669:31 - position should be 0.7 if I run the app
669:34 - now we can't see anything because the
669:38 - actual frame now is roughly here
669:41 - what is even better if I click on the
669:43 - button this still works just fine
669:46 - which is a really nice start which means
669:49 - now we can work a bit more inside of the
669:51 - button to fix some minor things
669:54 - first of all when I'm running this thing
669:56 - you can see on the right side we are
670:00 - losing the Gap this one is very very
670:03 - narrow
670:05 - to account for that for the end position
670:08 - I also want to add let's say 0.04
670:12 - now if I run this again we have the Gap
670:15 - back although again it's a bit large
670:17 - let's make this smaller say 0.03
670:23 - that I think looks better
670:25 - once again these numbers are fairly
670:27 - subjective just choose whatever you like
670:29 - we have a pretty good app this is
670:32 - working just fine I guess the one thing
670:35 - you want to be aware of here is that the
670:38 - starting position always has to be to
670:41 - the right of the end position
670:43 - because in our case animate forward
670:48 - reduces the amount and animate backwards
670:51 - increases the amount which means forward
670:53 - in our case is always left and backwards
670:56 - is always going to the right although
670:58 - this video is already getting quite long
671:00 - so this you can Implement yourself it
671:02 - shouldn't be too hard another really
671:04 - important part for good looking user
671:06 - interfaces are images
671:09 - in tick interim you can add images to
671:11 - some widgets labels buttons and canvas
671:14 - is what you're going to use most of the
671:16 - time
671:16 - that being said for images that scale
671:19 - properly you will need to create a logic
671:21 - yourself so the scaling logic doesn't
671:23 - come with tkinder that is something you
671:26 - have to make yourself on that note what
671:28 - I have mentioned yet what we're going to
671:30 - create is going to be this one here
671:34 - we have two buttons one with TDK and one
671:37 - with custom tkinter and then we have a
671:39 - raccoon and this raccoon we can't scale
671:42 - and it's always going to cover the
671:43 - appropriate area
671:46 - this kind of logic you have to make
671:48 - yourself it doesn't work by default now
671:50 - before we can do all of this we have to
671:53 - do one more thing and that is we always
671:55 - need a pillow library to use images
671:57 - pillow is the default python image
671:59 - Library
672:00 - this one you have to install on your own
672:03 - first of all this you do either of the
672:05 - Powershell or The Terminal in my case
672:07 - this is the Powershell what you have to
672:09 - type is PIP install hello
672:14 - this is going to install quite a few
672:15 - things obviously if you're on a Mac and
672:18 - using terminal this would be pip free
672:20 - install hello
672:23 - once you have that we can start working
672:25 - on some code for the starting setup I am
672:27 - importing tkinter and ttk on top of that
672:30 - I am importing custom tkinter we are
672:33 - going to use both because they have
672:35 - slightly different setups for importing
672:36 - images
672:37 - after that we're creating the basic
672:39 - tkinter window and then we are running
672:41 - the main Loop the end result is going to
672:43 - be a basic window before we can start
672:46 - properly we have to do one more thing
672:48 - and that is we want from p-i-l import
672:52 - image and image TK pil is the pillow we
672:58 - just installed
672:59 - for some reason the input here is a
673:02 - different name compared to the import in
673:03 - the Powershell or The Terminal pil
673:06 - stands for python image library and some
673:09 - are for a PQ to call it pillow I don't
673:11 - understand it either it's quite weird
673:13 - but this is how you would import it
673:15 - inside of pillow you have one really
673:18 - important object and that is called
673:20 - image you basically always use that one
673:22 - and image has a custom teak and a
673:25 - variant that is called image TK on that
673:27 - note I have made a really long tutorial
673:29 - on pillow itself it's on YouTube you can
673:32 - watch it for free
673:33 - you can use pillow for all sorts of
673:35 - things like scaling images changing
673:37 - colors adding text and well lots of
673:40 - other things so check it out if you are
673:42 - interested although for this video I
673:45 - just want to import an image
673:48 - to make that work first of all I need to
673:51 - cover our folder structure
673:53 - right now I have one folder and this
673:55 - folder contains the code the code file
673:57 - here is called images in this folder I
674:00 - have three more images I have python
674:03 - dark hyphen Lite and raccoon those are
674:05 - the images I want to import
674:07 - for the import first of all we need to
674:10 - import the image itself so image let's
674:13 - call it origin nil
674:16 - this we get with image dot o pen
674:20 - and now we need to file path
674:22 - since I want to import let's start with
674:26 - the raccoon I want to import raccoon and
674:29 - the file ending here is jpeg with that
674:32 - we have an image so I can run the code
674:33 - we're not getting an error that's
674:35 - looking pretty good now I have to figure
674:37 - out how to get this image on a widget
674:40 - for that first of all we need a widget
674:43 - to get started I just want to create a
674:46 - label and this can be ttk label
674:49 - the parent is going to be window
674:52 - the text could be let's go with raccoon
674:57 - and let's pack the label
675:00 - there we go we have raccoon
675:02 - a label can also take an image
675:05 - although what we cannot do is simply
675:07 - pass in the original image in there we
675:09 - will get an error that the image
675:11 - specification must contain an odd number
675:13 - of elements I don't know what that
675:15 - specifically means but basically what
675:18 - tkinder wants is a image TK not an image
675:22 - we can account for that quite easily I
675:24 - want to store this in another variable
675:26 - I'll call it image TK this image Decay
675:29 - we create with image TK dot photo image
675:35 - you only need one argument that is the
675:38 - image original with that we can pass an
675:41 - image Decay into the image and it should
675:44 - be working
675:45 - there we go the problem we have right
675:47 - now is that the image is way way too
675:49 - large
675:50 - for reference the raccoon has a size of
675:54 - six thousand by four thousand while our
675:56 - window is only 600 by 400 so we can only
675:59 - see a very small part of this window
676:01 - right now but we can resize the image
676:04 - this we do when we are importing the
676:06 - image this image here is returning an
676:09 - image object this image object has a
676:12 - couple of methods the one we care about
676:14 - right now is called resize resize wants
676:17 - a tuple with a new size and a new width
676:19 - let's say for now I want to cover the
676:21 - entire window with the image
676:24 - this will be 600 by 400. with that we
676:28 - have the raccoon covering the entire
676:30 - image although if I resize the window
676:32 - this breaks quite fast
676:36 - but at the very least we do have a start
676:39 - unfortunately though you basically never
676:42 - want to use an image inside of a label
676:44 - for the simple reason that you cannot
676:46 - resize the image if the window changes
676:49 - you always have the same image size
676:51 - depending on what you get from here to
676:53 - change that you need quite a bit more
676:55 - logic so I am going to cover that later
676:57 - on let me get rid of the resize and
677:00 - comment out the label
677:02 - running this again we have a plain
677:04 - window but we do have an imported image
677:06 - before I expand the logic on how to use
677:09 - images I want to cover buttons because
677:11 - buttons are very easily usable with
677:13 - images
677:14 - let's say I want to create a button this
677:17 - is going to be ttk dot button the parent
677:22 - here is going to be the window and for
677:24 - text we can go with a button
677:27 - this button I want to pack right away
677:31 - now we have a button
677:34 - this button can also accept an image I
677:37 - could add imhdk now we have the raccoon
677:41 - again but remember the raccoon is way
677:42 - too large but the raccoon is not what I
677:45 - want to add to this button instead I
677:48 - want to import a different image that
677:50 - image is going to be python dark which
677:53 - we get with image dot open the name of
677:56 - the file is called python underscore
677:59 - dark dot PNG
678:01 - important here we have a different file
678:03 - ending because python dark has Alpha
678:05 - values so we need a PNG this once again
678:08 - we have to convert let me call it python
678:11 - dark TK
678:13 - for that we need all of this I can
678:17 - simply copy it
678:19 - like so and paste in Python dark this
678:23 - python dark TK I now want to use for the
678:25 - button like so
678:27 - and this is still way too large although
678:30 - I guess a little bit better since the
678:32 - button isn't going to change size for
678:34 - this one it is fine to Simply resize the
678:37 - button here and then you don't have to
678:39 - worry about it anymore in my case I want
678:41 - to resize the button to a size of let's
678:44 - go with 30 by 30. now we have a button
678:48 - with a python logo to see the text again
678:50 - we need a compound argument if I for
678:54 - example set right here we now have a
678:57 - button and then the logo to the right
678:59 - this can also be left
679:02 - and then we have the image to the left
679:04 - of the button for a bit more spacing you
679:07 - could do a tiny bit of a hack here and
679:09 - simply add some spaces for the button
679:10 - and now we get a bit more spacing
679:13 - between the two however if I duplicate
679:16 - all of this and change the button to let
679:19 - me call it a button ctk because I want
679:22 - to create ctk dot ctk button for that
679:26 - one we are getting an error that photo
679:28 - image object has no attribute create
679:31 - scaled photo image once again I'm not
679:33 - quite sure what that means but the
679:35 - concept you have to understand is that
679:37 - you couldn't use an image TK this one
679:40 - here inside of a ctk widget instead what
679:43 - you would need to do is create a
679:45 - separate ctk image if you get with ctk
679:48 - and ctk image
679:50 - this is what you have to pass into is
679:53 - ctk widget if you want to have images
679:54 - I'm going to store this one in an image
679:57 - ctke variable the reason why this is
680:00 - different is because for custom tick
680:02 - enter we always need a light image and
680:06 - we need a dark image
680:08 - those we have to import separately
680:11 - but other than that we are using it the
680:13 - same way
680:14 - how you usually want to do this let me
680:17 - put it over multiple lines actually what
680:19 - you can do with the input here is simply
680:21 - use image open as the argument
680:23 - for example I could paste image open
680:26 - python dark in here and then for the
680:28 - Dark theme I want to have python light
680:31 - this might look confusing here basically
680:34 - you want a dark image for the light
680:36 - theme and the light image for the Dark
680:38 - theme for the simple reason that light
680:40 - image has a light background so you want
680:42 - to have a dark image and then the other
680:45 - way around it's going to work the same
680:46 - with that we have an image cdk and this
680:49 - is what you want to pass into this image
680:51 - now I can run this and there we go we
680:54 - have a python logo for a button that is
680:57 - bright right now if you were using
680:59 - custom tikkinder and had a light and a
681:01 - dark theme this would also cover the
681:03 - Dark theme although since I am using
681:05 - tkinter by itself this isn't really
681:08 - applicable but it would definitely work
681:10 - with that we can actually cover how to
681:12 - use tkinter with images
681:14 - the major problem that you have in tkin
681:16 - type of images is that images do not
681:19 - scale by default we could have as large
681:22 - or a small of a window or any kind of
681:24 - container the image unless you add some
681:26 - custom code is not going to update which
681:29 - would break any kind of layout really
681:31 - fast to account for that we have to add
681:34 - an image to a canvas and then use the
681:36 - canvas Dimension to update the size of
681:38 - the image that we can do in real time
681:40 - although we have to figure out a few
681:43 - Mappy things in here it's not going to
681:44 - be too bad although once we have that we
681:48 - can add an image to a container and
681:50 - always make the image scale to that
681:51 - container and before I start I want to
681:54 - create a different kind of layout I want
681:56 - to have a grid where those two buttons
681:58 - are on the left and then on the right we
682:00 - have the actual image
682:02 - for that I'm going to put it up here I
682:05 - want to create a grid layout I want to
682:08 - get window dot column
682:12 - configure
682:14 - in here I want to have 0 1 2 3 in total
682:18 - four columns that all have a weight of
682:21 - one and I want them to be uniform
682:24 - like so so uniform is equal to a besides
682:27 - that I only want to have one row so row
682:30 - is just going to be zero uniform we can
682:34 - just ignore for that the image Imports
682:37 - can stay the same although for the
682:39 - buttons we have to update them because
682:41 - we're using pack but now we have a grid
682:44 - as a consequence I want to put both
682:46 - buttons inside of a frame
682:48 - I'm going to call this button frame and
682:50 - this is ttk dot frame
682:54 - with the window as the parent
682:57 - both of the buttons are going to be
682:59 - mastered to this button frame finally I
683:03 - want to place the button frame using the
683:06 - grid method I want column to be zero
683:12 - I want the row to be 0 and then I want
683:15 - to have sticky with north south east and
683:19 - west
683:20 - if I run this again now there we go we
683:22 - have the two buttons all the way in the
683:23 - top left I think to make this look a
683:25 - tiny bit nicer we can give both a bit of
683:28 - vertical padding let's say 10 pixels now
683:30 - there's a bit of space between the two
683:31 - with that I can create the canvas for
683:35 - the image
683:38 - this is simply going to be a canvas so
683:40 - TK dot canvas
683:43 - the parent is going to be the window and
683:46 - for now this is all we are going to need
683:49 - this canvas I want to place right away
683:51 - canvas dot grid
683:53 - this is going to be column one
683:56 - column
683:57 - span is going to be free we are covering
684:00 - all of the remaining columns finally row
684:02 - is going to be zero also I want this to
684:05 - be sticky to all four sites if I run
684:08 - this now we can't see anything because
684:10 - we don't have a background color which I
684:12 - can change quite easily background let's
684:14 - set it to red and there we go now we can
684:18 - see the canvas itself however the canvas
684:21 - doesn't cover everything perfectly for
684:23 - example at the bottom here we have this
684:25 - very thin line
684:29 - same on the right side and we would have
684:31 - the same on this side and this side as
684:33 - well this we have because of the border
684:36 - of the canvas we can get rid of it
684:38 - though all we have to do is set BD to
684:42 - zero then we need High light thickness
684:47 - and set this to zero as well finally the
684:50 - relief should be rich with these numbers
684:54 - the canvas is now going to cover the
684:56 - entire area and we have no border also
684:59 - let me set this to Black so it looks a
685:01 - bit better there we go on this canvas we
685:04 - can now add an image this we do with
685:06 - canvas dot create image for the
685:10 - arguments here we need an X and the Y
685:12 - position I'm going to set it to 0 and 0
685:14 - which is the top left and then we need
685:16 - an image this needs to be a TK image
685:20 - which in my case for the raccoon I have
685:24 - image TK
685:26 - image Decay now if I run this
685:28 - we can see one eye of the raccoon
685:32 - what we could also do in here is set the
685:34 - anchor by default we are placing the
685:36 - center anchor like this but I want to
685:38 - place the North West now we can see a
685:41 - top part of the image again but it
685:42 - doesn't do very much the way you have to
685:44 - think about it is that the entire image
685:47 - starts here and then goes really really
685:50 - wide to the right and to the bottom I
685:55 - believe the numbers were six by four
685:58 - thousand so much larger than our window
686:01 - to account for that we have to
686:03 - dynamically resize the image
686:06 - I don't want to create the image right
686:08 - away instead I want to do all of this
686:10 - inside of a function this function I'm
686:12 - going to trigger every time we are
686:14 - changing the size of the window this we
686:16 - get with canvas dot bind in here we need
686:22 - on figure
686:24 - this is going to trigger every time the
686:26 - size of the canvas changes if that
686:28 - changes I want to run a function this
686:31 - simplest
686:32 - for the image is stretch image
686:36 - you're going to see in a second what
686:37 - this one is going to do
686:39 - but let me create it first of all all
686:41 - the way at the top
686:42 - I want to create stretch image
686:46 - in here since we are working with an
686:49 - event we need one default argument and
686:52 - that is the event what we are going to
686:54 - do in here is we are going to get the
686:57 - size of the canvas and then we are going
686:59 - to scale the image to that size finally
687:02 - then we can actually place the image for
687:05 - that though first of all we need to get
687:07 - the windows size or more specifically
687:09 - let me call it size we want to get the
687:12 - width and we want to get the height
687:14 - the width is going to be event dot with
687:17 - and the height is going to be event dot
687:20 - height if I print both of those numbers
687:23 - we have with and we have height
687:27 - now if I run this we are calling this
687:29 - function and if I resize the image we
687:32 - get updated numbers so this is working
687:34 - quite well just to make sure now the
687:36 - thing is really narrow and very very
687:39 - small but now it's much larger so the
687:41 - numbers seem to be pretty accurate
687:44 - these numbers we can now use to create
687:47 - an image although what is really
687:50 - important you already want to have one
687:52 - image imported and you only resize it
687:55 - when you resize the entire window you do
687:57 - not want to re-import the image every
687:59 - single time you are resizing the window
688:01 - that would be really inefficient
688:03 - in my case though I already have one
688:06 - image imported this is what I want to
688:07 - work with
688:08 - I want to store all of this inside of a
688:10 - new variable I'm going to call this
688:12 - resized
688:13 - image we need the image original and
688:17 - then resize it since resize wants to
688:20 - have a tuple with a width and a height
688:22 - this is quite easy because we already
688:24 - have width and height although this is
688:28 - still just an image but we need an image
688:30 - TK we need another variable that we call
688:33 - it resized TK this is going to be image
688:37 - PK dot photo image the same thing I have
688:41 - done down here except now the one
688:44 - argument is going to be the resized
688:46 - image
688:47 - finally this we can place on the canvas
688:53 - for that all we need is canvas dot
688:55 - create image the start position here is
688:59 - going to be 0 and 0 the image I want to
689:02 - place is resized EK finally the anchor
689:07 - is going to be North West now if I run
689:11 - this
689:12 - we only get a black background color so
689:16 - something didn't go well
689:17 - the problem is that the image TK this
689:20 - line here always has to be in the same
689:23 - scope as the main Loop or wherever you
689:26 - call it
689:28 - in our case an easy fix here would be to
689:31 - set resize TK as a global variable
689:33 - resized TK and now we can see the
689:37 - raccoon
689:38 - so just to reiterate we have our window
689:41 - in the global scope and we're also
689:43 - calling window.main Loop in the global
689:45 - scope because of that the image Decay
689:48 - needs to be in the global scope as well
689:50 - they always have to be in the same and
689:53 - once again I have no idea why but with
689:55 - that we have the image of a raccoon and
689:58 - if I resize the window the raccoon
690:00 - resizes with it because we are updating
690:02 - the size of the window every single time
690:04 - we're updating the canvas
690:06 - which is working but you can see a
690:08 - limitation here we are stretching the
690:10 - raccoon quite a bit
690:12 - to account for that I want to create a
690:15 - second function I'm going to call this
690:17 - one fill image
690:19 - this one is not going to resize the
690:21 - image instead we are going to fill the
690:25 - entire image and we're going to cut off
690:27 - parts of the image that don't fit what
690:29 - we are going to do for this one let me
690:31 - explain it first before I create a
690:32 - function let's say this one here is the
690:35 - canvas and the image might be as large
690:39 - as this bit here
690:42 - inside of this function if the image is
690:45 - larger than the canvas we're going to
690:47 - cut off this bit and this bit
690:50 - that way the raccoon is going to keep
690:52 - the same aspect ratio later on we will
690:55 - create a third function that will keep
690:56 - the raccoon always inside of the canvas
690:58 - but for now let's fill the entire canvas
691:01 - for that once again the one parameter I
691:03 - need is the event
691:05 - I want to have Global resized PK
691:09 - now in here we first of all need to get
691:12 - the current ratio of the event
691:16 - or off the canvas the same thing this we
691:19 - get
691:20 - I want to store it in a variable canvas
691:22 - ratio
691:23 - all we need here is event dot with
691:26 - divided by event dot height this number
691:30 - is really important and we need it both
691:33 - for the canvas and we need it for the
691:35 - image we have imported this image here
691:38 - this we can also get quite easily I want
691:40 - to store it in a variable let me call it
691:42 - image ratio to get the width and the
691:45 - height we need image original dot size
691:49 - this is returning a tuple with the width
691:51 - and the height which means the width is
691:53 - going to be zero and this I want to
691:55 - divide
691:57 - by the height so size 1. if I print all
692:01 - of this
692:02 - image
692:04 - ratio this one
692:07 - we get 1.5 that number we get if I open
692:10 - the folder again the raccoon
692:13 - has a size of 6000 by 4000 pixels
692:16 - dividing six thousand by four thousand
692:20 - gets us 1.5 this number is really
692:24 - important
692:25 - because it tells us how we are going to
692:27 - scale the image itself for some context
692:30 - here let me do all of this actually on a
692:32 - separate surface imagine we have a
692:34 - perfect square where all sides are one
692:38 - if that was the case and we would divide
692:41 - the width by the height we would get one
692:45 - this is telling us that we have a
692:47 - perfect square if we have some kind of
692:49 - rectangle with a width of Two and a
692:52 - height of one in that case we would
692:55 - divide two by one which would give us
692:58 - two
692:59 - which tells us that the larger that this
693:01 - number gets the wider the entire thing
693:04 - is
693:05 - by the same logic if we have a really
693:08 - narrow container something like this
693:11 - where we have a height of 1 and a width
693:15 - of 0.5
693:17 - that is a horrible five 0.5 then we
693:20 - would do 0.5 divided by 1 which would be
693:24 - 0.5 which means the smaller this ratio
693:28 - becomes the more narrow our container is
693:30 - going to be this applies both to the
693:32 - canvas and to the image itself
693:35 - this information we can use so in our
693:38 - case we know the ratio of the image and
693:40 - of the canvas
693:42 - what we want to do imagine this one here
693:45 - is the canvas or C in short this we want
693:49 - to compare with the image itself or the
693:51 - aspect ratio of the image let's say this
693:53 - could be something like this this would
693:56 - be I for image if the canvas has an
693:59 - aspect ratio of let's say
694:01 - 1.8 with the image having aspect ratio
694:04 - of 1.5 we know that the canvas is wider
694:08 - than the image if that is the case I
694:11 - want to scale the width of the image to
694:14 - the width of the canvas
694:17 - which right now would simply stretch out
694:20 - the image so this wouldn't be
694:22 - particularly useful
694:24 - however since I know the aspect ratio of
694:26 - the image I can simply use the weft and
694:29 - then combine it with the aspect ratio to
694:32 - get a new height of this image even if I
694:36 - resize the entire canvas I would fill
694:38 - the entire width and then the top and
694:41 - the bottom part of the raccoon so the
694:43 - parts that are outside of the image are
694:45 - simply going to be cut off
694:47 - I hope all of this makes sense the math
694:49 - here isn't particularly difficult but
694:51 - you have to get your head around it I
694:53 - think if I Implement all of this this is
694:55 - going to make a bit more sense what I
694:57 - really want to figure out is I want to
694:59 - get the coordinates of my image
695:03 - which means ultimately I want to get a
695:05 - whiff for the image and I want to get
695:07 - the height of the image although for
695:09 - these images first of all I want to know
695:11 - if the canvas ratio is greater than the
695:16 - image ratio
695:17 - if that is the case we know that the
695:20 - canvas is wider than the image
695:25 - if that is the case I want the width of
695:28 - the image to be the event with that way
695:33 - we are filling the entire width of the
695:35 - canvas
695:36 - there's one thing that t can do is a bit
695:38 - fussy here and that is that we always
695:40 - need to have integers
695:42 - a very easy thing to account for once we
695:45 - have that width let's say for some
695:48 - imaginary numbers the width of the
695:50 - canvas could be 800. on top of that we
695:53 - know that the image ratio is 1.5
695:57 - these two numbers we can now use to
695:59 - calculate the new height of the image
696:01 - all we have to do for that is rearrange
696:03 - this formula here initially we got the
696:05 - canvas ratio but now we want to have the
696:07 - height this height here this we get by
696:11 - getting event dot with or the width of
696:15 - the image itself this width here and
696:17 - then divided
696:19 - by the image ratio this also needs to be
696:23 - an integer
696:25 - let me remove the white space this
696:27 - information we can now use because with
696:29 - that we can create a resized image which
696:33 - is going to be the image original and
696:36 - then I want to resize it
696:38 - with the with and the height after that
696:42 - we can create a resized TK which is just
696:45 - going to be image
696:46 - TK dot photo image
696:51 - with the resized image finally there's
696:53 - one more thing we have to cover we still
696:55 - want to get canvas and create image
696:58 - although now for the X and the Y
697:01 - position we want to place the image
697:03 - right in the middle of the canvas all we
697:06 - really have to do is get event dot width
697:09 - that is the width of the canvas and
697:10 - divide it by two decanter or the canvas
697:13 - more specifically wants to have an
697:15 - integer
697:16 - this we can do again for the Y position
697:20 - I simply want to divide the height of
697:22 - the canvas by two finally besides that
697:25 - I'm going to set an anchor the anchor is
697:27 - going to be the center once we have all
697:29 - of that ideally over multiple lines so
697:32 - it's easier to read we can place the
697:35 - image itself the image is going to be
697:38 - resized TK
697:40 - now if I run this
697:42 - we can see the raccoon and the raccoon
697:44 - scales with the canvas
697:46 - because I forgot to actually call fill
697:49 - image whenever we are resizing all of
697:51 - this
697:52 - now if I run off this again
697:55 - we are getting an error because by
697:58 - default this if statement here is not
698:01 - true to account for that
698:03 - let me change it to else with with being
698:07 - one and height being one as well so we
698:10 - get at least something
698:12 - with that we can't see anything however
698:14 - if I make this less tall there we go we
698:18 - can now see the raccoon at least on a
698:19 - certain aspect ratios but if I make this
698:22 - smaller at some point it disappears that
698:25 - happens because this if condition
698:27 - doesn't apply anymore because in the
698:30 - else statement the canvas is narrower
698:34 - than the image
698:36 - this is what we have to account for as
698:38 - well
698:39 - for that let me copy the width and the
698:41 - height now I need these numbers here
698:44 - for this one we now want to have the
698:47 - image covered the entire height of the
698:49 - canvas which means the height is simply
698:52 - going to be the event dot height for the
698:56 - weft I want to get the
698:59 - height once again and multiply this with
699:03 - the image ratio this should be multiply
699:07 - not plus with that all of this should be
699:10 - working now we can see the raccoon and
699:12 - the raccoon works just fine we're never
699:15 - scaling this one we are simply cutting
699:18 - off parts that are outside of the canvas
699:22 - this is looking pretty good
699:23 - border math year if you really want to
699:26 - understand this I would recommend to go
699:28 - over this a couple of times basically
699:30 - you always want to imagine that you are
699:32 - scaling a canvas and then you are
699:33 - fitting an image inside of it when
699:36 - you're hearing this the first time it
699:37 - can be quite confusing so definitely go
699:39 - over this in your own time
699:41 - the math really isn't hard it's just
699:43 - some logic that you have to grasp
699:45 - with that we are nearly done there's one
699:48 - more thing that I want to do in this
699:50 - case the raccoon is always going to be
699:52 - fully visible and we are scaling it
699:55 - in such a way that we never cut off
699:58 - anything but the aspect ratio itself
700:00 - stays identical
700:03 - this is going to be reasonably similar
700:05 - compared to what we have done here with
700:07 - fill image
700:09 - which means it's going to be your
700:10 - exercise
700:11 - I want you guys to create a third
700:13 - scaling Behavior to always show the full
700:15 - image without cutting off parts
700:17 - the video now and try to figure this one
700:19 - out you can reuse a lot of this
700:26 - since I am going to reuse quite a bit I
700:28 - am simply going to copy the entire
700:30 - function paste it in here and rename it
700:33 - to show full
700:36 - image this function I want to call right
700:38 - away down here inside of configure I
700:41 - want to show the full image
700:43 - inside of the function Global can stay
700:46 - the same the current ratio we also need
700:48 - and all of the stuff down here is also
700:51 - going to stay identical which means the
700:53 - only part we have to change is this bit
700:55 - here
700:57 - specifically we have to get new numbers
700:59 - for the width and the height for all
701:01 - aspect ratios
701:02 - the way you have to think about this one
701:04 - we once again check if the canvas ratio
701:07 - is larger than the image ratio which
701:10 - means that the canvas is wider than the
701:12 - image for example if this one here is
701:14 - the canvas the image would be something
701:17 - like this what we have done before is we
701:20 - have scaled the width of the image to
701:23 - here and then use that number to
701:25 - calculate the new height of the image
701:28 - this I want to change now instead what I
701:30 - want to do to show the entire image I
701:32 - want to scale the height to only be as
701:35 - tall as the canvas itself
701:37 - this number I am then going to use to
701:39 - calculate the width of the image which
701:41 - means for this one I want to have a new
701:43 - height the height is simply going to be
701:46 - event Dot
701:48 - height with the with simply being the
701:52 - height multiplied by the image ratio
701:57 - we can try this one right away
702:00 - if it's like this we have the entire
702:02 - image but now if I go even further now
702:04 - we have a black background
702:07 - and we can see the entire raccoon
702:10 - which only leaves us the last bit here
702:12 - or this one I want to start with the
702:15 - width because now the canvas is narrower
702:17 - than the image
702:19 - in this case the width is going to be
702:22 - the event dot width order height I want
702:26 - to get the width and divided by the
702:29 - image ratio that should be all we need
702:32 - with that we have the entire raccoon and
702:35 - we can always see the entire raccoon
702:37 - regardless of aspect ratio and well the
702:40 - raccoon updates automatically this image
702:43 - in all of its forms so these three
702:46 - functions work slightly differently but
702:49 - once you have them you can place the
702:51 - canvas in any kind of container and the
702:53 - size would always scale that way you can
702:55 - use the image wherever you want
702:57 - which is what makes it actually useful
703:00 - let's talk about image animations what
703:03 - we are going to make will look something
703:05 - like this
703:06 - I can click on a button and we have a
703:09 - star if I click on the button again the
703:11 - start disappears the important part is
703:13 - that we have animation for this star
703:16 - to create something like this you
703:18 - already know most of the steps if you
703:20 - can import images and animate widgets
703:22 - you know the basics although there are
703:25 - some problems let me go through them
703:27 - number one for these kind of animations
703:29 - you have to import a lot of images so
703:32 - far we may have imported one or two
703:34 - images for this one they are going to be
703:37 - a lot more that very neatly brings me to
703:39 - the folder structure this one looks like
703:41 - this we have one python file this one
703:44 - contains the program we are going to
703:46 - make other than that we have four
703:48 - folders and all of them contain images
703:50 - for example inside of yellow we have a
703:53 - whole bunch of stars what we're going to
703:55 - do is we're going to play one star after
703:57 - another and if we do that fast enough we
704:01 - have an animation
704:02 - in case you're wondering here the first
704:05 - image is only white because Windows is
704:07 - weird the image here is actually empty
704:08 - going through the images is actually not
704:10 - that hard we just have to configure a
704:12 - button what is much more important is
704:14 - how can we import all of this
704:16 - I guess you could write 30 import
704:18 - statements but that would be kind of a
704:20 - pain because we also have other folders
704:22 - We have the black folder here we have a
704:25 - black star then we have a dark folder
704:27 - and here we have another kind of
704:28 - animation and then we have the light
704:30 - folder here's one more animation if you
704:33 - were to import every single file
704:35 - manually you would have to write a lot
704:37 - of code which means I want to find some
704:39 - smarter way of doing that for part
704:42 - number two we have to organize State
704:44 - Management this is going to toggle if
704:46 - the button has been pressed and goes
704:48 - forward with the animation or if the
704:49 - button was already pressed and we have
704:51 - to run free animation backwards while
704:53 - doing that we also have to make sure we
704:55 - are preventing interruptions so what
704:57 - happens when the user is pressing a
704:59 - button while the animation is playing in
705:02 - my case I'm going to prevent any kind of
705:04 - button click other than that it's just
705:06 - basic animation logic so let's have a
705:08 - look
705:09 - in my case I am relying on casted T
705:11 - Kinder because this one is slightly more
705:13 - complicated but all of the logic would
705:16 - also work for ttk
705:17 - the reason why I'm using custom tkinder
705:20 - is because well it looks much nicer but
705:23 - and if you can use this with custom
705:24 - tkinter you can also use it with normal
705:26 - T Kinder
705:27 - other than that I'm importing from pil
705:29 - image so we can have images then we are
705:32 - creating a basic window and we are
705:34 - running main Loop
705:35 - the result is going to look like this a
705:38 - basic window to stay consistent one
705:40 - thing I forgot is the comment to say run
705:42 - before the main Loop now for the button
705:44 - I want to have a dedicated class class
705:47 - let's call it animated button
705:50 - for this one I'm going to inherit from
705:52 - ctk
705:54 - button I forgot this cdk first of all
705:58 - this is the button we want to work with
706:01 - so far I only really inherited from
706:03 - frames but you could inherit from any
706:06 - widget and add specific bits to it in
706:08 - here we want to create a Constructor so
706:11 - done there in it method this one needs
706:13 - four arguments in total or while
706:15 - parameters self as always definitely the
706:18 - parent after that we need a light path
706:21 - and we need a dark path those are for
706:25 - the light images and the dark images
706:27 - because remember in custom tkinter when
706:30 - we are creating images we have to
706:31 - account for a light and a dark theme
706:33 - which means you always need two kinds of
706:35 - images
706:37 - I guess if you want to be lazy you could
706:38 - have the same image for the dark and the
706:40 - light image but that wouldn't look as
706:41 - good what we have to do in here first of
706:44 - all is run this super Dunder init method
706:48 - the master is going to be the parent
706:52 - besides that we want to have some text
706:55 - what you put in here really doesn't
706:57 - matter let's say a button
707:00 - or rather a animated button
707:04 - once we have that we can place the
707:06 - entire thing using the pack method or
707:09 - while any kind of layout method here is
707:11 - fine I'm going to use pack because it's
707:13 - easy with expanding true the button is
707:16 - going to be right in the middle with
707:17 - that I can create the animated button I
707:21 - can add in the window as the parent then
707:23 - I need two paths although for now I'm
707:25 - just going to add none and none
707:28 - because we have nothing for the paths if
707:31 - everyone is now we have an animated
707:32 - button although this one doesn't do
707:34 - anything right now
707:35 - that is bringing us to the first part
707:38 - that we really have to care about we
707:40 - want to write a method that Imports a
707:44 - whole folder or rather folders because
707:47 - what I want to do in here is I want to
707:50 - add self then I want to have the light
707:52 - path and the dark path
707:54 - the argument I'm expecting here is a
707:57 - path to a folder so if I reopen the
707:59 - folder again we have the python file
708:01 - here and what I'm expecting is for
708:03 - example yellow or black or dark or light
708:06 - any of these folder names is what I'm
708:08 - expecting just to be explicit here I
708:11 - want to have
708:12 - for the light theme I call this one
708:15 - black for the Dark theme so the second
708:18 - argument I want to have yellow
708:21 - once we have the actual images we can
708:23 - play around with the colors here but
708:24 - they all work in the same way in here we
708:27 - have to figure out how to work with that
708:29 - first of all though I want to Loop over
708:31 - both of these paths which is very easily
708:34 - done for path in then a tuple with the
708:38 - light path and the dark path
708:40 - if I print the result path
708:43 - while also making sure that I'm running
708:46 - this method in the init method self dot
708:49 - import folders with the light path and
708:52 - the dark path
708:54 - this method needs to be run before the
708:56 - Super method that is really important
708:58 - you will see later on why
709:00 - although if I run this now we get black
709:02 - and yellow now we have to figure out how
709:05 - to get the folder contents from this
709:07 - path for that we are going to need
709:09 - another module that module is called OS
709:12 - however I don't just want to import OS
709:15 - instead I want from OS import walk
709:19 - what walk is doing is if you give it a
709:22 - folder name it gives you the content of
709:24 - a folder for example what I could be
709:26 - doing instead of printing the path I can
709:29 - print walk and then the path if I run
709:32 - this now we get a generator object that
709:35 - didn't go as planned but if you convert
709:38 - this thing to a list then you can see
709:41 - what's going on this is looking much
709:42 - better let me extend this a tiny bit
709:45 - we are getting two lists this list here
709:48 - for a light path and this list here for
709:50 - the dark path you can actually see for
709:52 - the first argument we are getting black
709:55 - and we are getting yellow those are the
709:57 - folder names
709:59 - for each list there are actually only
710:01 - three arguments the first one is the
710:03 - folder name this one we don't care about
710:05 - because we already have that next up we
710:08 - have an empty folder for both of them if
710:11 - there were any subfolders inside of
710:13 - these folders the names of these folders
710:15 - would be in this list
710:17 - since we don't have any subfolders we
710:19 - can entirely ignore this one as well
710:21 - it's simply not relevant for us
710:24 - however afterwards we have a long list
710:27 - with all of the files inside of this
710:30 - folder
710:31 - this is what we actually care about
710:34 - on top of that you want to be aware of
710:36 - the order here in my case I'm starting
710:38 - with zero zero zero zero zero zero one
710:41 - then two three and so on
710:43 - on some operating systems I think in
710:46 - particular for Mac OS this order might
710:49 - be messed up I'm going to show you later
710:50 - how to account for that but it's
710:52 - definitely something you want to be
710:54 - aware of it can mess with your
710:55 - animations quite a bit although another
710:57 - really important thing to mention is
710:59 - that what we are getting in here are
711:02 - just file names all of these are strings
711:05 - they are not files they're not images we
711:08 - just get a string of a file name we
711:10 - still have to do the actual import
711:12 - but that comes later
711:14 - first of all though I want to add
711:16 - another for Loop or let's call it data
711:19 - in walk path
711:23 - the result is going to be if I print the
711:25 - data we have the stuff I've just shown
711:29 - you although we can be a bit more
711:31 - elegant here since this walk path is
711:34 - returning three things we can unpack
711:37 - them right away inside of the for Loop
711:39 - we get the folder name we get sub
711:43 - folders
711:44 - and then we get the let's call it image
711:47 - data
711:48 - all we care about is image data this is
711:52 - what I want to print so if I run this we
711:54 - get all of the image names
711:56 - to indicate that I don't care about the
711:58 - folder name I will replace this one with
712:00 - an underscore a subfolder I also don't
712:03 - care about so this one is going to be a
712:04 - double underscore next up the image data
712:07 - if I print this again we absolutely have
712:10 - to make sure that this data is sorted it
712:13 - always says to start with zero zero zero
712:15 - zero and end with zero zero zero and two
712:17 - nine
712:18 - with the numbers going from the lowest
712:20 - to the highest
712:21 - you might get this by default you might
712:24 - not and you really want to make sure
712:26 - for that I want to create a new variable
712:29 - I'm going to call it sorted data
712:33 - in here we want to use sorted
712:36 - what I want to sort is the image data
712:40 - but to be a bit more specific here I
712:42 - want to set a key
712:45 - because if we just passed in the image
712:47 - data let me show one entry I want to
712:50 - print image data and then the one with
712:52 - the index one also let me comment out
712:54 - this bit here so we're not getting an
712:56 - error if I just print one we get this
712:59 - bit here and this is a string
713:02 - if we use this with sorted python
713:04 - wouldn't really know what to do with it
713:06 - because if you compare different strings
713:09 - it's not really clear which one is
713:10 - smaller and which one is larger
713:13 - instead what I want to do is only get
713:15 - the last five digits
713:18 - if I then turn this into a number python
713:20 - can sort it from the lowest to the
713:22 - highest
713:23 - and obviously if you have different file
713:25 - names the logic here would be different
713:26 - it very much depends on what kind of
713:28 - system you have
713:30 - in my case I created these with After
713:32 - Effects and this is the default name so
713:35 - I can't really change that let's first
713:37 - of all only get the number here with
713:39 - this one item
713:41 - we first of all have to get rid of the
713:44 - dot PNG
713:45 - that we can do using the split method
713:48 - and I want to split this wherever we
713:50 - have it dot
713:52 - like so if I run this now we're getting
713:54 - a list with two items returned I only
713:57 - care about the first one
713:58 - which means I can use indexing here to
714:01 - only get the first one with that we get
714:04 - image and light zero zero zero one since
714:07 - we can do indexing on strings we can use
714:10 - indexing here once more
714:12 - I want to go from negative five all the
714:15 - way to the end
714:16 - if everyone is now we are just getting
714:19 - the number itself
714:21 - although if I print the type of what we
714:25 - are getting
714:26 - we are still getting a string which
714:29 - means we have to convert all of this to
714:31 - an integer and now we are just getting a
714:33 - number
714:35 - you can see we're getting a number
714:36 - because python removes all of the zeros
714:39 - which means this logic here is what we
714:42 - actually want to use
714:43 - let me uncomment sort it put this over
714:47 - multiple lines now for the key I have to
714:50 - use a Lambda function the Lambda
714:52 - function will always get one let's call
714:54 - it item
714:56 - this item is now going to be my image
714:58 - data which means I can copy all of this
715:02 - paste it in here and replace image data
715:05 - with item
715:06 - then I can comment all of this out fix
715:09 - the white space here on top of that we
715:13 - have to remove this one here
715:15 - we only use that to get one item from
715:17 - the image data this we don't need
715:19 - anymore
715:20 - now if I run this we're not getting an
715:22 - error that's a pretty good sign but just
715:25 - to be sure let me print sorted data
715:29 - the result is still going to go from 0
715:31 - all the way to 29 although now I think
715:34 - if you are on a Mac the result here
715:36 - should now be a properly sorted list
715:38 - with that I can get rid of the print
715:41 - statements this one and this one and we
715:44 - have sorted data this is still not
715:47 - enough because now we need the full path
715:51 - you might be wondering now don't we
715:53 - already have that from this image data
715:56 - the answer is not quite
715:59 - let me print it actually again if I
716:02 - print sort it data what we get is a file
716:06 - name but this is not a path what we have
716:09 - to do instead is first of all for the
716:12 - full path we need the folder name then
716:15 - Plus
716:17 - then a slash and then we need the image
716:20 - name
716:21 - fortunately we have everything we need
716:23 - the image names we are getting from this
716:25 - list here the folder name is I have a
716:28 - light path or dark path
716:30 - which we are getting from the path
716:32 - although since we have quite a few of
716:35 - them I want to store all of this inside
716:36 - of a list
716:38 - let me change full path to full path
716:40 - data and now we are going to use list
716:43 - comprehension
716:45 - I first of all want to get the path this
716:47 - is either light path or dark path in our
716:50 - case this would be black or yellow after
716:52 - that I want to add a slash and then I
716:56 - want to add one of these file names I
716:59 - guess we can use item again so I want
717:01 - for item in sorted data with that if I
717:06 - print the full path data we are now
717:10 - getting actual paths we go into the
717:12 - black folder and in there we have image
717:14 - zero zero zero then black image001 and
717:18 - so on this is what we actually need
717:21 - although we have to get all of this out
717:24 - of this for Loop so we can use it a bit
717:26 - more efficiently
717:27 - for that I want to have another variable
717:29 - I'm going to call this one image
717:32 - paths this for now is going to be an
717:35 - empty list and once I have full path
717:37 - data I'm going to append that image
717:40 - paths dot append bold path data with
717:45 - that after we are finishing the for Loop
717:47 - let me minimize it actually
717:49 - I want to print image paths
717:53 - this is not going to give us two long
717:56 - lists full of image paths
718:00 - the first one is all of this and the
718:04 - second one is all of this
718:06 - this is a good start but I want to
718:08 - modify this a tiny bit ideally I'm going
718:11 - to have a list
718:13 - let me draw it here inside of this list
718:15 - I want to have lots of two builds each
718:18 - Tuple should contain one dark image path
718:20 - and one light image path
718:23 - so one in here and one in here then I
718:26 - want to have another Tuple with two more
718:29 - of those so that would be this image
718:31 - here or this image path and then this
718:33 - image path here I want to assign a new
718:36 - value to my image path the value I want
718:39 - to assign is zip and then I want to
718:43 - unpack
718:45 - the image paths
718:48 - let me print actually what we get this
718:49 - might be a bit complicated
718:51 - image paths what we now get is a zip
718:53 - object that's not particularly helpful
718:55 - but we can turn this into a list and now
718:58 - we can see what's going on
719:00 - what we're getting now is one long list
719:04 - and this list is full of tuples one
719:06 - Tuple contains the first image for the
719:10 - dark image so black image000 and then
719:13 - the light image so yellow image 0 0 and
719:16 - 0.
719:17 - then we have another Tuple here and this
719:20 - continues forever we keep on having more
719:22 - and more two builds this makes it very
719:24 - easy to work with this data which is
719:27 - exactly what I wanted
719:29 - also in case you're wondering here zip
719:31 - is a function that zips together two
719:34 - lists
719:35 - in a way that you take the first item
719:37 - from the first list and the first item
719:38 - from the second list and then you
719:40 - combine those two into one Tuple zip is
719:43 - expecting two arguments which should be
719:45 - two lists which we get by unpacking
719:47 - image paths because this one contains
719:49 - two lists with that we have all the data
719:52 - that we need so now we can turn all of
719:54 - this into actual ctk image objects
719:57 - those I also want to store in a list so
719:59 - we're going to continue by creating ctk
720:02 - images which is going to be another
720:04 - empty list we are almost done actually
720:07 - this is the much easier part what I want
720:10 - to do now is for image path in image
720:14 - paths
720:16 - let me print what we get image path
720:19 - we are simply getting
720:21 - a tuple with the light images and the
720:23 - dark images or however you want to call
720:25 - them the naming here doesn't matter
720:27 - terribly much
720:28 - what I want to do with that is I want to
720:30 - create a ctk image this I do with cdk
720:34 - and ctk image this is what we need in
720:38 - custom tkinder to store image data
720:40 - inside of this we need a light image
720:45 - and we need a dark image
720:48 - since in my case the first item inside
720:51 - of the image path Tuple is the light
720:53 - image this is what I'm going to assign
720:55 - here which means we can now use image
720:58 - dot open
721:00 - and pass the path in here which would be
721:03 - image path 0. I should probably put all
721:06 - of this over multiple lines otherwise
721:08 - this will be difficult to read
721:11 - we are using image open on the first
721:13 - item now we are doing this on the second
721:15 - item as well or the one with the index
721:16 - one
721:17 - once we have that all we have to do is
721:20 - get ctk images and append the ctk image
721:26 - with that we are going to have one long
721:28 - list with all of the cdk images
721:31 - this is what I want to return so return
721:34 - ctk images then we can close this method
721:37 - and never worry about it again and this
721:40 - was by far the most difficult part of
721:41 - this tutorial if you got so far the
721:44 - worst part is definitely over
721:46 - once we have the imported folders I want
721:49 - to store the return value inside let's
721:51 - call it self dot frames just to make
721:54 - sure this is working let me print self
721:55 - dot frames and we are getting a list of
722:00 - objects this doesn't tell us very much
722:02 - right now but at the very least we are
722:04 - getting something
722:05 - I guess you can tell here we are getting
722:08 - ctk images so that's a pretty good sign
722:10 - once we have that we need actually to
722:13 - create a bit more stuff in here so let
722:16 - me create a proper section that I call
722:19 - animation logic setup besides the frames
722:23 - we also need what I call a frame index
722:28 - this by default is going to be zero
722:30 - later on I'm going to explain the
722:31 - animation logic but for now this is what
722:34 - we're going to use to pick one item from
722:36 - the frames that we want to display
722:38 - we can actually already use this when
722:41 - I'm setting up the button instead of the
722:42 - init method I can also add an image
722:46 - this image is going to be self dot
722:49 - frames
722:51 - and since this is a list I can use
722:53 - indexing
722:55 - I want to get self dot frame index in
722:57 - here and once again this should be over
722:59 - multiple lines otherwise I'm cutting off
723:02 - some text
723:03 - if I now run this there should be an
723:06 - image
723:07 - you can see there's an empty space but
723:09 - nothing more the reason for that is that
723:11 - the first image is completely empty this
723:14 - is why you can't see it however what we
723:16 - can do now if I change the frame index
723:18 - from 0 to let's say 20
723:21 - . now we can see one star if I increase
723:23 - the number to 21 we get a slightly
723:26 - larger star if I go to 26
723:29 - okay it is going to be very hard to see
723:31 - but if I go to let's say four we get a
723:36 - very small star the differences between
723:38 - these images is so small it's really
723:40 - hard to see if you see them by
723:41 - themselves
723:42 - for now just trust me this is definitely
723:44 - working
723:46 - next up we need self dot animation
723:49 - length
723:52 - this is going to be the length of self
723:55 - dot frames
723:57 - although from that I want to subtract 1.
724:01 - the reason for that is imagine if we had
724:04 - a list right now with three items the
724:07 - list would be 0 1 and 2.
724:10 - this would be three items
724:13 - however if I want to use indexing it
724:15 - would always be the length minus one the
724:18 - final item would be the length of the
724:20 - list so three minus one this is going to
724:23 - be really important for this animation
724:25 - length
724:26 - because I only want to go up to this
724:28 - final item but then I want to stop so I
724:31 - have to know what is going to be the
724:32 - final index of the list which I'm going
724:35 - to call length it's not exactly accurate
724:37 - but I think I get the idea
724:40 - there's one more thing that we need and
724:42 - that is self dot animation status
724:46 - this is going to be a tkinter variable
724:49 - almost specifically is ctk string VAR
724:54 - this one is going to have the value of
724:56 - start by default
724:58 - now why do I want the animation status
725:00 - to be a string VAR well the reason here
725:03 - is because with that I can use tracing
725:06 - so self dot animation status and I can
725:09 - use trace and anytime I'm updating the
725:12 - value so I'm writing in it I want to run
725:15 - a certain kind of method this method is
725:18 - going to be animate
725:21 - let's create this one right away I want
725:23 - to have nmate
725:25 - what is important here besides self we
725:28 - also need unpacking and arcs because
725:31 - every time we are using trays we got
725:34 - some default arguments although in our
725:36 - case we don't really care about them
725:38 - for now I'm going to add pass in here
725:41 - because there's one more function that I
725:43 - want to create that is going to happen
725:46 - inside of this super init method
725:49 - because I only want to start the
725:51 - animation when I'm clicking on the
725:53 - button which means this one needs a
725:55 - command
725:56 - the command function is going to be self
725:58 - and I called this one trigger
726:01 - animation
726:03 - I'm going to create this one above
726:05 - animate so trigger animation with self
726:08 - and nothing else
726:10 - in here we are going to the State
726:12 - Management which means we are updating
726:14 - animation status
726:17 - for example if
726:20 - self.animationstatus dot get which would
726:22 - right now get us start if that is the
726:24 - case so if this is equal to start then I
726:28 - want to set self dot frame index to zero
726:31 - so we are starting on the first frame of
726:34 - all of the images
726:35 - on top of that I want to set self dot
726:38 - animation status
726:40 - with the set method 2 for Ward
726:45 - which basically means that we want to
726:47 - start at 0 and move the animation
726:49 - forward
726:50 - besides that I also want to check if
726:54 - self.animationstatus dot get is equal to
726:57 - end if that is the case
727:00 - I want to get self.frame index and set
727:03 - this to self dot animation length other
727:07 - than that I want to set self dot
727:10 - animation status with the set method to
727:13 - backward
727:15 - since with this we are updating the
727:17 - tkinder variable with forward or
727:20 - backwards this animate is going to be
727:22 - triggered
727:24 - now we can check for different things
727:26 - for example what I could be checking for
727:28 - is if self dot animation status dot get
727:32 - is equal to forward
727:37 - if that is the case I want to play the
727:39 - animation which in this case means I
727:41 - want to get self dot frame index frame
727:45 - index like so and increase the value by
727:48 - 1. which means that this number here
727:53 - self.frame index when we use it first
727:55 - time gets the first image which we are
727:58 - using down here with the image
728:00 - this I want to increase to 1 2 3 4 all
728:03 - the way until the end of the animation
728:05 - frames if I go through them fast enough
728:07 - we are going to have an animation
728:10 - which means I can use this now with
728:12 - self.configure I want to update the
728:15 - image the image is going to be self
728:18 - taught frames in here self dot frame
728:21 - index let me run this actually if I now
728:24 - click on the button
728:26 - we get a very small star
728:30 - this is because we are only calling this
728:32 - animate once so we only go from frame 0
728:34 - to frame 1. we will need self dot after
728:38 - after 20 milliseconds
728:41 - I want to run self.animate again with
728:46 - that if I click on this now we have an
728:48 - animation and then we are crashing
728:50 - since we are running this method here
728:52 - forever at some point we are going to
728:54 - run out of frames or more specifically
728:56 - we have a larger index than the length
728:59 - of the list which is giving us the error
729:01 - or more specifically we get list index
729:04 - out of range
729:05 - to account for this we need an if
729:07 - statement if self dot frame index
729:12 - is smaller than self dot animation
729:15 - length only then do I want to update all
729:18 - of this
729:20 - if I try this now and click on the
729:22 - button we have an animation that's
729:24 - looking pretty good
729:25 - if that is not the case so else I want
729:28 - to set self dot animation status using
729:31 - set to end
729:33 - that is telling us once we get to the
729:35 - end of all of this I want to have a new
729:38 - status because I know the animation has
729:40 - finished if we're done pressing again
729:42 - this is stepping here with run and we
729:45 - would set the animation status to
729:47 - backwards
729:49 - by now this wouldn't do anything because
729:50 - inside of animate we only have this bit
729:53 - of code here
729:54 - meaning we're only running any kind of
729:56 - Animation if the status is forward
729:58 - to account for that we need a second one
730:01 - that checks self dot animationstatus dot
730:05 - get is equal to end
730:08 - if that is the case I want to do very
730:10 - similar things compared to what I've
730:12 - done here although not exactly let me
730:14 - start by copying it and now I want to
730:17 - set self.frame index
730:19 - and reduce it by one every time we are
730:22 - calling this configure still works just
730:24 - fine although for this if statement I
730:27 - only want to do all of this if
730:29 - self.frame index is greater than zero
730:33 - this part is still fine although in the
730:35 - else statement if we are finishing the
730:38 - animation I want to set the status back
730:40 - to start
730:42 - if I'm running all of this now I can
730:45 - click on an animated button and now we
730:48 - are almost done the animation works but
730:51 - we always go to the end and then back to
730:53 - the start
730:54 - the reason for that is that we only want
730:56 - to do this if the status is backward
731:01 - now if I run this
731:03 - this goes forward and now nothing
731:05 - happens but if I click on it again we're
731:07 - now going backwards
731:08 - yes I can do multiple times still works
731:11 - just fine
731:13 - on top of that
731:15 - when I'm creating all of this I can get
731:17 - ctk set
731:20 - appearance mode and switch all of this
731:24 - to light mode
731:26 - we are now getting a different kind of
731:28 - Animation or while the same kind of
731:29 - Animation just different colors if I
731:32 - open the folder again we are importing
731:35 - yellow this is the dark images this one
731:38 - is all yellow and then black has the
731:41 - same animation just in completely black
731:44 - although besides that we also have dark
731:46 - this one has a hard animation
731:49 - either for white or for the dark path
731:53 - which means if I add in here light and
731:56 - dark we importing those folders and now
731:59 - we get a heart that we can also animate
732:03 - although I think there should be the
732:05 - other way around dark and Light
732:09 - that is definitely looking better
732:13 - if I remove the appearance mode
732:16 - I guess it kind of works
732:19 - let me stick to
732:21 - yellow and black
732:25 - I think those look a bit better
732:26 - although I had this the other way around
732:28 - earlier this was black and yellow
732:32 - there we go now we have the yellow
732:34 - animation again
732:36 - cool with that we have made a lot of
732:39 - progress although there's one challenge
732:42 - I have for you
732:44 - I want you guys to create another
732:46 - animation and this one should run
732:48 - forever that means we go from frame 0
732:51 - all the way to the end once we reach
732:53 - that point we're going back to the start
732:55 - and then once again we go from zero to
732:57 - the end
732:58 - that way the animation will keep on
733:00 - starting over and over again try to
733:03 - implement this one
733:08 - I want to keep all of the logic
733:09 - contained inside of a method I will call
733:12 - this one infinite animate no need for
733:16 - custom parameters this I also want to
733:18 - trigger when we are pressing the button
733:21 - to check if this is working let's print
733:24 - infinite if I now click on the button we
733:27 - get infinite
733:29 - that's a good start
733:32 - now we have to figure out the logic for
733:35 - that
733:35 - self.frame index and increase it by one
733:40 - once I have that I want to use configure
733:42 - again
733:44 - I want to update the image
733:46 - the value is going to be self dot frames
733:49 - with the index of self dot frame index
733:53 - finally I have to run self dot after
733:58 - I want to update this after 20
733:59 - milliseconds and call Self dot infinite
734:03 - animate again
734:04 - if I run this one now
734:06 - we get the first animation but then we
734:09 - are crashing because we are running out
734:11 - of list indexes again
734:13 - to account for that we need one more
734:15 - line of code basically what I want to do
734:17 - I want to update self.frame index and I
734:21 - want to set it to zero if self dot frame
734:24 - index is greater or equal than self
734:28 - dot animation length
734:32 - however if that is not the case else I
734:35 - want to keep self.frame index as
734:37 - self.frame index
734:39 - the way you want to think about it is if
734:41 - we have a list with 0 1 2 3 and 4 items
734:48 - self.frame index is going to start here
734:50 - and it's going to jump to this one then
734:52 - to this one then to this one then to
734:55 - this one and if we get to this point
734:57 - here this if statement is going to
734:59 - trigger and it is going to put
735:01 - self.frame index back to the start that
735:04 - way the animation will go on forever
735:05 - let's try this one now if I click on the
735:08 - button we get a continuous loop
735:13 - although I think because of the equal
735:15 - sign here we are skipping the last frame
735:18 - let's remove it and play this again
735:20 - there we go you can't really see a
735:22 - difference but well there's one more
735:24 - frame in the animation now
735:26 - and with that we have animations
735:29 - obviously you can make all of this a lot
735:31 - more fancy but this should be a really
735:33 - good start in this tutorial we are going
735:36 - to work a bit more with colors we
735:38 - already know how to color in the
735:40 - background of any app especially if you
735:42 - use custom TK enter this should be
735:44 - fairly easy
735:45 - however what we don't know is how to
735:48 - color in the title bar this one so far
735:51 - always had one color it was either white
735:53 - or black and unfortunately there's no
735:56 - easy way of changing it we actually have
735:59 - to use Python to Target windows and then
736:01 - tell it to give it a custom color and
736:03 - this is only going to work on Windows so
736:06 - we also have to make sure that if we're
736:07 - running the code on Mac OS or Linux
736:09 - we're not crashing the entire app and
736:11 - that is giving us quite a few things to
736:13 - work with so let's Jump Right In
736:16 - here we are in a code editor and first
736:18 - of all we have to import tkinter now in
736:21 - this case I'm going to work with custom
736:23 - tkinter but this would also work with
736:25 - the normal decanter what I want to do is
736:28 - import custom tkinter as ctk after that
736:32 - I want to create an app this we get with
736:35 - ctk and ctk I guess while we are here we
736:39 - can also give this a geometry of let's
736:42 - say
736:43 - 300 by 200 the number here doesn't
736:47 - really matter and after we have that I
736:49 - can run main Loop to start the app with
736:53 - that I'm getting a small window that
736:56 - isn't looking too terrible and I do have
736:58 - some control over the colors most
737:00 - importantly to set the background color
737:02 - when I'm creating the app with ctk and
737:05 - ctk I can set an FG color this could for
737:09 - example be red
737:10 - if a run is now we have a red background
737:13 - color
737:14 - you could also use hexadecimal values
737:16 - for that you need a hashtag and then
737:18 - let's say ff00 and FF and that would
737:22 - give you a pink color just as a reminder
737:25 - FF stands for the red color 0 0 is for
737:29 - the green color and the final FF is for
737:32 - the blue color which means in our case
737:34 - we have a full amount of red and a full
737:36 - amount of blue and combine these two
737:38 - colors and there's no green whatsoever
737:40 - and the result of that would be pink
737:42 - however now we have one important thing
737:45 - that we can't do and that is to change
737:48 - the title bar color how can we do that
737:51 - to get started we have to import a
737:54 - couple of things I want from C types
737:58 - import win dll then by ref
738:03 - then size off and finally C underscore
738:06 - int
738:07 - all of those modules are quite specific
738:10 - the one we really care about is wind dll
738:13 - because this is giving us access to some
738:16 - system level functionality of Windows
738:18 - and that we can use to color in the
738:20 - title bar and for that we will need a
738:23 - couple of steps first of all we have to
738:25 - Target the current window because right
738:28 - now what we're doing is we are talking
738:29 - to Windows directly and what we want to
738:32 - do first of all is to get our current
738:34 - window this you usually store in a
738:37 - variable called hwnd which is standing
738:40 - for the window handle and that window
738:42 - handle you get with win dll then user32
738:47 - get parent or get parent make sure you
738:51 - spell this right the G and P should be
738:54 - uppercase
738:55 - this is a method so we have to call it
738:57 - we have to add one argument and that is
739:00 - app W info underscore ID and this is
739:05 - also a method basically what is going to
739:07 - happen this app W info ID is giving us
739:11 - the current ID of the window we have
739:13 - open the app we just created
739:16 - and this ID we are using to get the
739:19 - current window handle this is what
739:21 - Windows as an operating system sees so
739:23 - this is what we are now storing in the
739:26 - variable with that we have access to the
739:28 - window
739:29 - which means next up we can actually
739:32 - change the title bar color and this we
739:34 - do with win dll and WM API and then
739:39 - uppercase the WM set window attribute
739:45 - this method wants four arguments the
739:48 - first one is going to be the window
739:49 - handle this we just got so HW and D next
739:54 - up we will need one argument that tells
739:55 - us what attribute we want to address
739:57 - because this set window attribute can
740:00 - Target quite a few things to give this a
740:03 - bit more context here is the windows
740:04 - documentation for this method we have
740:07 - dwm set window attribute and in there we
740:11 - can Target quite a few different
740:13 - attributes
740:14 - for example in there we could Target the
740:17 - Border color the caption color the text
740:19 - color and well quite a few more things
740:22 - most of those we are basically just
740:24 - going to ignore I'm going to add a link
740:26 - to this website but it's not going to be
740:28 - too important
740:29 - back in the code all we really have to
740:31 - do is add a 35 in there this is the
740:35 - attribute for the title bar color
740:37 - next up we will need the actual color
740:39 - and you might be tempted to Simply add
740:41 - something like red unfortunately that
740:45 - would not work
740:47 - instead we need a very specific kind of
740:51 - color and this is called hexadecimal
740:53 - color let me store it in a separate
740:55 - variable actually
740:57 - I will call this one the title bar color
741:00 - and this is going to be a weird format
741:02 - we start with 0 then an X then 0 0 and
741:07 - then we can add a color that looks
741:09 - something like this except it's inverted
741:12 - which means we are adding two digits for
741:15 - the blue color then two digits for the
741:17 - green color and then two digits for the
741:19 - red color
741:21 - for example if we want to have pure red
741:23 - this would be 0 0 then 0 0 again and for
741:28 - the red color f f
741:30 - once again we are using hexadecimal
741:32 - values which means zero is the absence
741:34 - of the color and F is the full amount of
741:36 - the color you might be wondering now
741:38 - what kind of value is this even because
741:40 - we have a bunch of numbers but in a
741:42 - couple of strings so is this a string or
741:45 - a number the answer is this is an
741:47 - integer if I simply print the type of
741:51 - the title bar color and comment out the
741:54 - dwm set window attribute and run all of
741:57 - this we're getting a class integer what
742:00 - we're creating with this one is a
742:02 - special kind of integer although we
742:04 - don't have to worry too much about it
742:06 - this color we now want to use but we
742:08 - have to convert it and for that we have
742:10 - pyrav and C underscore int to use them
742:13 - we first of all have to use buy ref and
742:16 - this one wants the argument with C
742:18 - underscore end and this one wants the
742:20 - actual color title bar color
742:23 - and let me put all of this over multiple
742:25 - lines that's why it's a bit easier to
742:27 - read there's one more argument we need
742:30 - to make all of this work and this one is
742:32 - fairly Technical and it's always going
742:33 - to be the same what you need is size off
742:35 - and this one wants the argument C
742:37 - underscore int
742:39 - at this stage don't worry too much about
742:42 - it just always add it and then you're
742:43 - good to go but now if I run the app we
742:46 - get a red title bar color that is
742:49 - because in the title bar color string we
742:52 - have the full amount of red we have no
742:54 - green and we have no blue if we change
742:58 - this to an FF for blue and 0 0 for red
743:03 - run out of this again we get a blue
743:05 - title bar color what you can also do let
743:08 - me copy all of this and paste it right
743:11 - below if you target attribute number 36
743:15 - then you target the color of the title
743:17 - bar text which means if I run this now
743:20 - we can't see the text anymore
743:22 - the bit up here is gone oh well it's not
743:25 - really gone it's just the same color as
743:26 - the background however if I give this
743:29 - another kind of color let's say the
743:31 - title text
743:33 - color
743:34 - this would have to be the same format
743:36 - that we have used up here let me copy it
743:38 - actually
743:40 - and let's say for the color I want to
743:43 - have no amount of blue I want to have
743:45 - the full amount of green and just a bit
743:48 - of red so let's go with Nine and Nine
743:50 - and this color I want to use for the
743:53 - text color and if I run this again we
743:56 - get some greenish looking color that is
743:58 - because we have the full amount of green
744:00 - and some red with that you can change
744:02 - the title bar color and you can change
744:05 - the text of the title bar color it's not
744:07 - terribly elegant but it certainly Works
744:10 - however there's one major issue that we
744:12 - have to address
744:14 - all of this code is only going to work
744:16 - on Windows and let me get rid of the
744:18 - white space
744:19 - if you try to run this code on Mac OS
744:21 - you would get a crash because python
744:24 - couldn't import win dll this one is
744:27 - exclusive to Windows
744:29 - as a consequence we want to add a tiny
744:31 - bit more code that if we are running all
744:34 - of this on another operating system that
744:36 - would cause an error we are simply
744:37 - skipping this part of the code
744:40 - which means we want to add a try and an
744:42 - accept statement and this I have covered
744:45 - earlier in the python introduction we
744:47 - basically need two important keywords
744:50 - they are called try and accept
744:54 - I hope you remember those two
744:57 - in fact this is going to be your
744:59 - exercise
745:01 - I want you guys to make sure that this
745:02 - code would run on any operating system
745:04 - which in effect means that if you're
745:07 - running this on anything other than
745:08 - Windows we are simply skipping this line
745:10 - and all of these lines
745:13 - pause the video now and try to figure
745:15 - this one out you might have to go back
745:17 - to the python introduction but see how
745:19 - far you get
745:23 - first of all we have to wrap all of this
745:26 - import into a try statement which means
745:28 - I want to try to import this like so
745:33 - and when I'm using try I also have to
745:35 - use accept
745:37 - in this case I simply want to add pass
745:39 - to all of this I am telling python to
745:42 - try to import all of this stuff
745:45 - if we are on Windows this is going to
745:48 - work so python is going to be happy and
745:50 - run this line however if we are on Mac
745:52 - OS this is not going to work and as a
745:55 - consequence we're going to end up with
745:57 - the accept statement and in there we
745:59 - simply have a pass so this is not going
746:02 - to do anything
746:03 - that is going to be the first part we do
746:05 - however need a second part if we'll have
746:08 - the code like this we would skip this
746:11 - line so the code would work up to that
746:12 - point
746:13 - this bit here would also work however
746:16 - now python would try to run this code on
746:19 - any operating system and since we don't
746:21 - have windll we would get an error
746:24 - as a consequence all of this also needs
746:27 - to be wrapped in a try accept statement
746:29 - let me indent it and I will need Rye
746:32 - at the end of all of this since we're
746:34 - using try once again I will need accept
746:36 - and once again I want to accept pass we
746:40 - are telling python to try this entire
746:43 - block of code and check if it is working
746:46 - or not if it is working everything is
746:48 - good and simply continue however if it
746:51 - is not working simply don't do anything
746:53 - which we're doing with accept pass
746:55 - I can run the entire thing again we are
746:58 - getting our current APP however now if
747:00 - you run out of this on Mac OS although
747:03 - it would have the standard colors so at
747:05 - the very least we have something and
747:08 - with that we have covered another really
747:10 - important part about styling
747:12 - hello in this part we are going to
747:15 - create a BMI calculator for this one you
747:18 - can change the weight and the height and
747:21 - then you get your body mass index it's a
747:24 - fairly straightforward app I guess the
747:26 - one extra thing I added here was you can
747:28 - change this to Imperial units and then
747:31 - use ounces and inches it really isn't
747:34 - anything complicated in here I am just
747:36 - using custom tkinter with some basic
747:37 - sliders and buttons and then the formula
747:40 - for BMI is also really simple
747:43 - and before I jump in really quick here
747:46 - is the folder I'm going to work with
747:48 - let me make it a bit larger we have BMI
747:51 - and there we're going to write a code
747:52 - right now it's entirely empty besides
747:55 - that we have settings.pi this is going
747:57 - to cover the colors and the font sizes
747:59 - and stuff like that finally we have
748:01 - mt.ico and this is to hide the icon of
748:03 - the app
748:05 - that is all we need so with that let's
748:08 - jump into some code here's my code
748:10 - editor ifbmi dot Pi open and I have
748:13 - settings.pi inside of settings.pi we
748:16 - have a couple of basic information about
748:18 - the text sizes and then some colors
748:21 - finally we have the title hex color this
748:24 - one is also a color but it works
748:26 - slightly differently
748:27 - so what we're going to start doing is
748:29 - create a basic window using custom
748:31 - tkinter and color it all with one shade
748:34 - of green this shade of green here in
748:36 - particular
748:37 - for that first of all I want to import
748:39 - custom tkinter as ctk and after that I
748:45 - want to create a class
748:47 - I got this one the app and for this one
748:50 - I want to have ctk and ctk
748:53 - this class app is going to need a
748:56 - thunder in it method with self and
748:58 - nothing else the first we want to do in
749:00 - here is some kind of window setup
749:04 - yes as always means to call the super
749:06 - Thunder image method we can call
749:09 - straight away an F G color which is
749:13 - going to be green that is going to be
749:16 - this green color here although right now
749:18 - I don't have my settings available for
749:21 - that inside of pmi.pi I want from
749:25 - settings import everything
749:28 - just to make sure this is working I am
749:30 - going to call Self dot main Loop inside
749:33 - of the app after that I'm going to
749:36 - create an instance of the app
749:38 - with that if I execute the code we can
749:41 - see we have a small window
749:43 - that has a greenish background what I
749:46 - want to do now is to write the title and
749:47 - the icon this I do with self dot title
749:50 - and set a title to an empty string with
749:53 - that I don't have a title anymore next
749:57 - up to hide the icon I want to use I can
750:01 - bit map
750:03 - and for that we are going to use Mt dot
750:06 - Ico that is the blank file we have
750:09 - inside of the folder I am importing this
750:11 - one with this line
750:13 - and now if I run the code
750:15 - we don't have anything at the top left
750:17 - anymore
750:19 - meaning this error here is completely
750:20 - empty although right now when I'm
750:23 - starting the window the window is quite
750:25 - small for that I want to use
750:28 - self.geometry and give my window a start
750:31 - size of let's say 400 by 400. if
750:35 - everyone is now this is looking much
750:36 - better
750:37 - on top of that since this isn't a
750:40 - flexible layout I want to self dot
750:45 - resizable I do not want to allow
750:48 - resizing the window which means in here
750:50 - I want to add faults and false
750:53 - this means the window cannot be resized
750:55 - so if I try to click on the corners
750:57 - nothing's going to happen
750:59 - the main reason why I don't like
751:00 - resizable for these small apps is simply
751:03 - because there isn't that much to fill
751:04 - the content if we are something this
751:06 - simple and we resize it all of the
751:08 - elements just become really small
751:10 - relative to the Windows size although I
751:12 - guess if you wanted to add more elements
751:14 - you could fill the space a bit more
751:16 - efficiently but if you don't do it it's
751:18 - just starting to look a bit silly but
751:20 - right we are very nearly done the last
751:23 - thing we have to do and this I want to
751:25 - do in a separate method I want to change
751:29 - title
751:30 - bar color
751:33 - this is going to be a method
751:35 - so I have to create the method here and
751:37 - this one is self and nothing else what I
751:40 - want to do in here let me add pass for
751:42 - now I want to change the color of the
751:46 - title bar
751:48 - and since I covered this earlier this
751:51 - could be a really good exercise
751:55 - although there's one additional thing I
751:57 - do want to add this will only work on
752:01 - Windows but I do want you guys to make
752:04 - sure it does not crash on Mac OS
752:10 - pause the video now and try to implement
752:12 - this one it shouldn't be too difficult
752:18 - first of all we have to import a couple
752:21 - of things all of those we are getting
752:23 - from C types
752:25 - specifically I want to import win dll
752:29 - by ref
752:32 - size off and finally C underscore int
752:36 - when dll however only exists on Windows
752:39 - meaning if we tried this line here on
752:42 - Mac OS we would be getting an error for
752:45 - that I want to use try
752:47 - spreading it correctly would also help
752:49 - try like this meaning we are trying to
752:52 - run this code however if we are getting
752:55 - an error then we are using accept
752:58 - and if that is the case I simply want to
753:01 - run pass meaning we're not doing
753:02 - anything once we have that I can work
753:06 - inside of the method and once again in
753:08 - here I also want to run try
753:11 - because if we couldn't import this line
753:13 - up here then we definitely cannot run
753:15 - this line here so both need to have try
753:17 - and here I want to get H and WD and this
753:21 - I get with win dll dot user32 dot get
753:28 - parent
753:30 - this one needs one argument which is
753:33 - self.w info underscore ID and do not
753:37 - forget to call this one next up we have
753:39 - to get what is called a
753:41 - dwmw a underscore attribute and this is
753:46 - simply 35.
753:48 - next up we need a color and the color we
753:51 - already have this we have inside of
753:53 - settings this color here
753:55 - it does look very strange but I added a
753:58 - comment here the hex order is 0 then x 0
754:02 - 0 this you can entirely ignore after
754:05 - that we have the blue colors the green
754:06 - colors and the red colors so the green
754:10 - color that I want is this one here which
754:12 - is the same that I have up here for the
754:14 - background color
754:16 - although in my case all I have to do is
754:17 - copy title hex color paste it in here
754:19 - and then I'm good to go
754:22 - finally I have to get win dll then
754:26 - bwm API dot now comes the long name
754:31 - uppercase d w m then set
754:36 - window
754:38 - attribute inside of this one we now need
754:41 - HW and D then we need
754:45 - dwma attribute
754:48 - finally we need buy ref C underscore int
754:52 - of the color for the last element we
754:56 - want to have size off and then here C
754:58 - underscore int
755:00 - the last argument is quite technical so
755:02 - you don't have to worry about it but
755:04 - basically what we're doing in here just
755:06 - to recap when dll dwm API and then set
755:10 - attribute sets one specific attribute of
755:14 - a window inside of this one we're
755:16 - getting the current window then we have
755:19 - to Target one specific attribute and the
755:21 - one we are targeting is the number 35.
755:24 - this targets the color of the title bar
755:27 - and then we are giving it a color with
755:29 - this line here the way this is working
755:31 - is a bit more cryptic but that's just
755:33 - how it works but well with that we are
755:36 - done so let me run the entire thing and
755:39 - I am getting an error that after this
755:42 - try statement I am not adding an except
755:44 - that is very easily fixed except and
755:48 - pass
755:49 - if I now run this we don't see a
755:53 - difference so something went wrong
755:55 - most likely in this line here because
755:57 - this one's really long and I can see the
755:59 - error this should be a lowercase C
756:02 - now if I run this there we go now we
756:04 - have a completely green window
756:08 - with that I can get rid of the exercise
756:10 - text
756:12 - and minimize the app for now although
756:14 - there's one more thing that I want to do
756:16 - this app here should be wrapped inside
756:18 - of an if statement and that if statement
756:21 - is going to be if done their name is
756:25 - equal to the string Thunder Main
756:29 - only if that is the case I want to
756:31 - create an instance of this app
756:32 - if I run the code now we're not going to
756:34 - see a difference
756:36 - but if you have multiple files this is
756:38 - generally what you should do that way we
756:41 - don't accidentally run some code in some
756:42 - other file like in settings for example
756:44 - although in this case there's no real
756:47 - code to run here we're just storing some
756:49 - data
756:50 - but it's got practice so I am going to
756:53 - include it in this part we're going to
756:55 - create the four widgets that are visible
756:57 - inside of the app meaning we're going to
757:00 - create the title for the BMI text then
757:02 - we have the weight buttons after that we
757:05 - have the slider for the height and
757:07 - finally in the top right we have the
757:09 - metric Imperial button for now they are
757:12 - not going to do anything but at the very
757:15 - least we are going to have a pretty good
757:16 - start
757:17 - I want to keep on working inside of my
757:19 - class app in here before we can create
757:22 - any kind of widget we have to create a
757:25 - layout
757:27 - in my case I have used a grid layout
757:29 - although we only have a single column
757:33 - which means I can run column configure I
757:36 - have a column with 0 and the weight is
757:40 - going to be 1.
757:41 - the rows are going to be much more
757:43 - important
757:44 - in my case I have four rows 0 1 2 and 3
757:49 - all with a weight of one on top of that
757:53 - I have set uniform to a the way the app
757:57 - is going to work if this is the entire
758:00 - window we have four rows one two three
758:05 - and four the BMI text is going to cover
758:08 - the top two buttons the white buttons
758:11 - are going to be in this one here and
758:13 - finally the height slider is in the
758:14 - bottom one
758:16 - all the way at the end the Imperial
758:18 - metric button is going to be in the top
758:20 - right and this one we are placing with
758:22 - place not with the grid layout
758:25 - since you can combine them this isn't a
758:27 - problem we have the layout meaning I can
758:30 - minimize the class app and now create
758:33 - all of the widgets each of them is going
758:36 - to get their separate class first of all
758:38 - I want to have class let's call this one
758:40 - the result text since this one is only
758:44 - going to be a label I want to inherit
758:46 - from ctk label although this one like
758:50 - any other class we're going to create is
758:52 - going to need an init class in here we
758:54 - need self and for now we need a parent
758:56 - we have to call the super Dunder init
758:59 - method to initialize the parent
759:01 - the most important argument in here is
759:04 - the master which is going to be the
759:05 - parent
759:06 - to get something in here for now I want
759:09 - to give this some text let's go with
759:11 - 22.5
759:12 - once we have that I want to place this
759:15 - result text right away using the grid
759:17 - method we are in column 0 and row 0 as
759:23 - well since I do want this widget to span
759:26 - two rows I need a row span of two
759:30 - finally sticky is going to be north
759:32 - south east and west this should be all
759:35 - we needed to get started with this text
759:36 - meaning now I can add another section in
759:40 - here let's call this one the widgets I
759:42 - want to create my result text
759:45 - I need the parent in here which is going
759:47 - to be self
759:48 - other than that there are no arguments
759:50 - needed
759:52 - let me run the code now and there we can
759:54 - see 22.5 right in the middle
759:58 - that's a decent start but well it is
760:00 - very very small
760:02 - for that though we can make a few
760:04 - updates inside of settings we have a
760:07 - font and a main text size
760:10 - I want to use those two to create a font
760:12 - and then this font should Define how
760:14 - large the text is I suppose for this one
760:17 - to keep things a bit more organized I
760:19 - can create a font inside of this result
760:21 - text this I have to do before the Super
760:24 - init method in here I want to create a
760:27 - font this I create with ctk and then ctk
760:30 - font
760:32 - this font is going to need a family and
760:35 - a size
760:36 - both of those we're getting from the
760:38 - settings the family is going to be the
760:40 - font
760:42 - this one here next up we need the main
760:44 - text size for the size let me copy it
760:47 - the size is going to be the main text
760:49 - size all we have to do now is send the
760:52 - font of the text to the font we just
760:55 - created
760:56 - and now if I run this again this is
760:58 - looking much better there's one more
761:01 - thing that I do want to do inside of the
761:03 - font I want to set a weight the weight
761:06 - should be bold and now if I run this
761:09 - again this is looking significantly
761:11 - better
761:12 - with that we have to resolve text and
761:14 - next widget is going to be the weight
761:18 - input
761:19 - this one is going to inherit from CT k
761:22 - for aim
761:24 - as always we need a Dunder init method
761:27 - this one itself enter parent first of
761:30 - all in here I want to call the super
761:32 - Dunder init method
761:35 - the master needs to be the parent and I
761:39 - guess while we're here I can also set an
761:41 - FG color which is going to be white this
761:44 - white we are getting from the settings
761:46 - I'm using this right here
761:48 - after that I want to place this widget
761:51 - as well with the grid
761:53 - I want to use column 0 and the row is
761:57 - going to be 2.
761:58 - also sticky should be north south east
762:01 - and west
762:03 - with that we should be seeing something
762:05 - after creating an instance of this class
762:08 - which means I want to create the weight
762:10 - input itself as the one argument for the
762:14 - parent run this entire thing again and
762:16 - there we go this isn't looking terrible
762:18 - although it needs a bit of refinement
762:21 - most importantly when I'm using the grid
762:23 - method I want to add a bit of padding
762:26 - for the horizontal and the vertical I
762:29 - want to use 10 pixels each
762:32 - and now this is looking a bit cleaner
762:34 - and what I'm looking at is I can see I
762:37 - forgot one thing it's probably very hard
762:39 - to see on your computer but the color of
762:41 - the text is slightly darker than the
762:43 - color of this box this is because when I
762:48 - created the text
762:50 - I did not set a color
762:52 - that we do with text color and this one
762:56 - should be white as well now if I run
762:58 - this both the text and the Box have the
763:01 - same color inside of the weight input we
763:04 - now have to create a layout for all of
763:06 - the buttons as a reminder here is the
763:09 - final app what I want to create for the
763:12 - layout is once again I'm going to use
763:14 - grid we have one row and then we have a
763:17 - bunch of columns we have column 0 column
763:20 - one column two column three and column
763:23 - four the easy part in here I want to use
763:26 - row configure
763:29 - the index is zero the weight is going to
763:32 - be one
763:33 - and uniform
763:36 - let's set this one to be simply because
763:38 - I have used a up here
763:41 - also I don't need the class app right
763:43 - now I just want to work inside of the
763:44 - weight input
763:45 - next up I have to work with the column
763:49 - configure
763:50 - I have to create five columns so let me
763:53 - duplicate this a couple of times so that
763:56 - we have 0 1 2 3 and 4 5 columns in total
764:01 - the middle column should be the widest
764:04 - one so this one is going to get a weight
764:06 - of three
764:07 - column one and three are for the small
764:10 - buttons I like to keep them at one
764:12 - however column 0 and column four need a
764:17 - weight of two so they are twice as wide
764:19 - as the columns one and three once again
764:22 - to illustrate what this means column 0
764:25 - and 4 are these large buttons here they
764:28 - get a weight of two each
764:31 - next up we have one and three these are
764:35 - the smaller buttons so they only get a
764:37 - weight of one finally the text in the
764:40 - middle is going to be column two this
764:42 - one needs to be the widest
764:44 - which means this one's going to get a
764:46 - weight of three and I am incapable of
764:49 - drawing a free this is giving us the
764:51 - layout so now we have to create the
764:54 - widgets or the buttons whatever you want
764:56 - to call it
764:57 - I guess it's not all buttons so let me
765:00 - just call it widgets the most important
765:02 - widget in here is going to be the label
765:04 - this one will be a ctk and ctk label
765:08 - self is going to be the parent
765:11 - for the text for now let me just write
765:14 - in 70 kilogram
765:18 - this label I want to place right away so
765:20 - label dot grid
765:22 - row is going to be 0 column is going to
765:27 - be 2 and with that if I run the entire
765:30 - thing
765:31 - we can see something very very faint but
765:34 - there is a very faint 70. it's tiny and
765:38 - basically white so we have to change the
765:40 - styling here
765:41 - first of all the text color should be I
765:45 - think I call this black
765:47 - if I go to settings we have black here
765:49 - so now let's run this and this is
765:52 - definitely more visible
765:53 - on top of that I also want to create a
765:56 - font like I have done before this is
765:58 - going to be ctk and ctk font we need a
766:02 - family and a size both we already have
766:06 - inside of the settings
766:08 - the font size I want for this one is the
766:10 - input font size
766:12 - for the family I simply want to use my
766:15 - font
766:16 - now once I have that I want to set the
766:18 - font to the font I just created
766:21 - and this is looking much more visible
766:24 - let me change this once again a better
766:27 - comment here would be the text because
766:29 - now we can add the buttons
766:31 - there are four buttons that we need let
766:34 - me start with one I want the minus
766:36 - button this is going to be ctk and ctk
766:39 - button
766:40 - the parent is going to be self and the
766:43 - text for this one is simply going to be
766:46 - a minus this one is also going to need a
766:50 - font and for the font here we can simply
766:52 - reuse the font we created earlier which
766:54 - means font is going to be font where we
766:57 - are here we can also set the text color
766:59 - to Black
767:02 - let's add this minus button to the
767:04 - layout right away using the grid method
767:06 - this one should be all the way on the
767:08 - left meaning the row is still going to
767:11 - be 0 and the column is also going to be
767:14 - zero if I run this now we are getting an
767:17 - error that this black is not defined
767:19 - this should be an all uppercase letters
767:21 - black now if I run this this is feeling
767:24 - a bit better but I guess I can already
767:26 - see some problems we first of all have
767:29 - the completely wrong colors and if I
767:30 - hover over this the hover color is also
767:33 - wrong also this button is a bit too wide
767:36 - first of all I want this button to cover
767:39 - the entire height of the container for
767:41 - that I need sticky and the argument I
767:44 - want in here is north and south now if I
767:47 - run this again the button is going to
767:49 - cover the entire area
767:50 - although that's also not exactly what I
767:53 - want
767:54 - instead what I want to do is give this a
767:57 - padding of 8 both vertically and
767:59 - horizontally so pad X is 8 and Pad Y is
768:02 - 8. and this is looking much better
768:05 - although the colors still don't work
768:08 - for that inside of the button I need to
768:11 - add a few more arguments
768:13 - first of all I have to set an FG color
768:16 - this FG color I termed light gray
768:20 - this once again we get from the settings
768:22 - light grain here
768:24 - now if I run this again this is looking
768:26 - significantly better however if I hover
768:29 - over this we're getting a really ugly
768:31 - color
768:32 - so the last thing we have to do is we
768:35 - have to set a hover
768:37 - color the hover color is simply going to
768:39 - be Gray
768:41 - this is the gray we're getting here is
768:44 - slightly darker shade of gray so now if
768:46 - I run this again we have a hover color
768:49 - that works and well this is looking
768:51 - really good although that being said
768:53 - there's one more thing that I did add
768:54 - and that is a corner radius I have set
768:58 - this one to six
769:00 - although this one is going to be very
769:01 - difficult to see but I think it
769:04 - definitely makes the entire thing look a
769:05 - bit nicer although this corner radius
769:08 - here I should add to the settings
769:11 - which means inside of the settings let
769:13 - me edit here
769:15 - I want to have button Corner radius and
769:19 - it should be six
769:21 - this I now want to copy and replace the
769:23 - 6 with the button Corner radius
769:26 - the result is going to be the same but
769:28 - now we can change the styling from
769:30 - inside of the settings
769:32 - so with that we have the minus button
769:35 - once I have that I can simply duplicate
769:37 - these lines and create the plus button
769:42 - the only difference here really is that
769:46 - the minus should be a plus for the text
769:48 - and when I'm placing this button using
769:50 - the grid method the column is going to
769:53 - be 4.
769:55 - now if I run this one we have a plus and
769:57 - a minus button that both look pretty
769:59 - solid
770:00 - meaning now I can copy this entire thing
770:02 - one more time because now I want to have
770:05 - let's use the plus button again
770:07 - I want to have a small plus button
770:10 - this one is still going to show a plus
770:12 - sign however since we're placing it on
770:15 - column three it is going to be smaller
770:17 - meaning now if I run this we have a
770:20 - smaller plus button
770:22 - this is almost working but this covers
770:24 - the same height as the bigger plus
770:26 - button
770:27 - to account for that I simply remove this
770:29 - sticky argument run this again and there
770:33 - we go now this plus button is much more
770:36 - square-ish which is looking better
770:39 - on top of that I want to change the
770:42 - padding from 8 to 4. and with that we
770:47 - have a much nicer looking button there's
770:50 - just one more button that we need so I'm
770:52 - going to duplicate all of this one more
770:53 - time because now we have the small
770:57 - minus button the only two changes that
771:00 - we have to make is change the plus to a
771:02 - minus and the column shouldn't be free
771:04 - it should be one
771:06 - and now if I run this again we have all
771:09 - four buttons meaning now I can hide the
771:13 - weight input
771:14 - and work on my next class
771:17 - this is going to be the height input
771:21 - this one once again is going to inherit
771:23 - from ctk frame
771:26 - and then here I want to have an init
771:29 - method
771:31 - that takes self parent and that's all
771:34 - that we need for now
771:36 - and here as always I want to have the
771:38 - super init method I want to set the
771:41 - master to the parent and the FG color to
771:45 - white
771:46 - after that this is getting a bit
771:48 - repetitive I want to use the grid method
771:50 - row is going to be free and column is
771:54 - going to be zero also we need sticky
771:57 - north south east and west and Pad X
772:01 - should be 10 and Pad y should be 10.
772:05 - this should be giving us a container
772:07 - although I do have to create an instance
772:08 - of this class meaning inside of the app
772:12 - below the height input I want to have
772:14 - the height input with self
772:16 - now if I run this we have the final
772:18 - container
772:20 - that's looking pretty good we now just
772:23 - have to fill the swing
772:24 - since this layout is pretty simple we
772:27 - can stick with the pack method
772:29 - so I can jump straight to creating the
772:32 - widgets I want to create two widgets in
772:34 - here I first of all want to have a
772:37 - slider this I create with ctk and ctk
772:40 - slider
772:42 - the parent here is going to be self as
772:44 - usual and that is actually all I want
772:47 - for now once I have that I want to pack
772:50 - this slider
772:52 - the most important argument in here is
772:54 - the side because I want to place this on
772:56 - the left side
772:58 - I also want to fill the entire
773:01 - horizontal space and I want to set
773:03 - expand to Rue also for a bit of padding
773:07 - I want to set pad y to 10 and Pad X to
773:11 - 10.
773:12 - if I run the app now this isn't looking
773:15 - terribly bad although we definitely have
773:17 - to work on the styling inside of the
773:20 - slider I want to set a few more things
773:22 - and I am going to work over multiple
773:24 - lines because there are quite a few in
773:26 - there
773:27 - also I want to use named arguments so
773:29 - let me set the master to self and then
773:32 - we can work on the rest
773:34 - first of all I have to change the button
773:36 - color and this one should be green
773:41 - the green here should be in all
773:43 - uppercase letters now if I run this the
773:45 - button that we can drag on the slider
773:47 - let me show my mouse the button that we
773:49 - can show is going to be green although
773:51 - if we hover over it it defaults to this
773:54 - ugly bluish color
773:56 - to get rid of that one we have to set a
773:59 - button hover
774:01 - color
774:03 - the button have a color I set is gray
774:06 - and now I have a green button by default
774:08 - and if I have over it it becomes a
774:11 - lightish gray next up I want to set the
774:14 - progress color and this one should be
774:17 - green as well what this one is doing is
774:20 - it colors the left side of the slider so
774:23 - this side here is now green
774:25 - the last thing that we have to do is to
774:28 - change the f g color and this one I have
774:31 - set to light gray this one updates the
774:34 - right side of the slider so this side
774:36 - here it's now light gray
774:39 - that is giving us the slider although I
774:41 - also want to have some text let me name
774:44 - this the output text
774:47 - this is simply going to be a ctk and ctk
774:50 - label although I can already see my typo
774:53 - there should be uppercase t in here once
774:56 - again the master is going to be self and
774:58 - for now the text is let's go with 1.80
775:03 - this output text I want to pack right
775:06 - away
775:07 - I want to set the site to left as well
775:10 - and Pad X I want to have 20 pixels of
775:13 - padding
775:15 - now if I run this one
775:17 - we can once again we have the same issue
775:19 - we have to text earlier the text here
775:21 - does exist but it's really hard to see
775:23 - and it's also very small
775:25 - but that we can work on first of all I
775:29 - want to set a text color to Black
775:33 - and now with that this is much more
775:35 - visible also I realized there should be
775:38 - a meter at the end like so
775:41 - and now we get 1.8 meters besides that I
775:45 - have to create a font and so far I
775:49 - always created a separate variable but
775:51 - we don't actually have to do that I can
775:52 - do it straight in here so I can simply
775:54 - create c t k and font
775:57 - with the family being the font
776:01 - and the size is going to be
776:04 - I call this one the input font size
776:09 - enough around this we have a much larger
776:11 - font that covers the height input so
776:14 - there's only one more thing to do
776:16 - I call this one the class unit Switcher
776:21 - what this one is going to do let me run
776:23 - Define lab again this one is going to be
776:26 - the text all the way in the top right
776:28 - here
776:29 - by default it's going to say metric and
776:32 - it's going to be a bold text with the
776:35 - same font but a smaller font size
776:38 - what is really important about this one
776:39 - is that it's not placed using the grid
776:41 - method but rather the place method
776:44 - this is really important to know because
776:47 - this final widget is going to be your
776:50 - exercise
776:52 - I want you guys to create that text in
776:55 - the top right
776:57 - the only important things that you have
776:58 - to know for this one is that inside of
777:00 - settings we are using the same font so
777:03 - calibri but now we have a switch font
777:05 - size
777:07 - for the text color go with dark green
777:10 - that is all you have to know so pause
777:12 - the video now and try to figure this one
777:14 - out yourself
777:19 - first of all we have to figure out the
777:21 - inheritance for this one I'm going to
777:24 - use a ctk label
777:27 - simply because the entire widget is just
777:29 - going to be some text
777:31 - inside of the init method in the class
777:34 - way after yourself and then get a parent
777:38 - this parent we can use in this super in
777:40 - Niche method because in here we have to
777:43 - set a master which is the parent
777:45 - on top of that just to see something for
777:48 - now I'm going to set the text to metric
777:52 - now we have to figure out how to place
777:55 - this kind of widget and importantly here
777:57 - we cannot use the grid method or well we
778:00 - could use it but it wouldn't give us the
778:02 - right result instead I want to use the
778:04 - place method
778:06 - for this one I want to use relative
778:07 - values which means I want to set
778:10 - relative X relative Y and then I also
778:13 - have to create an anchor
778:16 - the way you want to think about it is
778:18 - that this one here is the entire app the
778:22 - position I want for the widget is going
778:23 - to be roughly somewhere here so I have
778:26 - to figure out how to get this widget in
778:28 - the top right with a tiny bit of padding
778:32 - also remember the sizing here for
778:34 - relative numbers so relative X for
778:36 - example would go from 0 all the way to
778:39 - 1.0 and for relative y we're also going
778:43 - from 0 to 1.0 these numbers we can use
778:48 - quite easily to create padding ourselves
778:49 - because the place method doesn't have
778:52 - padding
778:53 - the way I approach this is I said
778:55 - relative X to 0.98
778:59 - and relative y to 0.01
779:03 - finally I have set the anchor
779:06 - to North
779:08 - East and this should be a string
779:11 - basically I have set the anchor to North
779:14 - East which is this point here then
779:17 - relative y 0.1 gives me almost a top so
779:21 - almost this line here except a tiny bit
779:24 - of difference this would be 0.01
779:28 - that's why we get a tiny bit of padding
779:30 - at the top a similar thing I have done
779:33 - for productive X I am going almost to
779:36 - the right side but not quite
779:38 - so if this line here is zero I'm going
779:42 - almost to the end but not quite
779:45 - 0.98 leaves this tiny bit of space
779:49 - and now with that I simply have to
779:51 - create an instance of this app
779:54 - let me call it in here unit switcher
779:57 - with self and now in the top right we
780:00 - have our metric text
780:03 - that is a really good start
780:06 - although we have to work on styling a
780:08 - tiny bit more
780:09 - first of all I want to update the text
780:11 - color and this one I believe I called it
780:14 - dark green
780:16 - inside of settings this dark green
780:18 - that's looking good let's try this one
780:21 - and there we go we have a dark green
780:23 - text
780:24 - besides that I have to create a font
780:27 - which is going to be ctk and ctk bond
780:31 - the family is still going to be the font
780:35 - on uppercase letters
780:37 - this size is going to be inside of
780:40 - settings I have a switch font size I
780:43 - want to use that one
780:44 - and the weight for this one is going to
780:47 - be bold
780:48 - now if I run it again there we go in the
780:51 - top right we have the metric text
780:53 - and with that we have all of the widgets
780:55 - now this video is getting a tiny bit
780:57 - longer but I did want to cover all of
780:59 - this in one go so now we can work on
781:02 - actual functionality for this part we're
781:04 - going to start implementing the logic
781:06 - for well the entire app which means if I
781:09 - now press on any of the buttons or use
781:12 - the slider we are updating the BMI
781:15 - number for now I'm only going to use
781:17 - metric numbers in the next video I'm
781:19 - going to cover how to use Imperial
781:20 - numbers or rather how to make the user
781:23 - think they are using Imperial numbers
781:25 - but let's focus on the basic logic for
781:27 - now once again here we are in the app
781:30 - and now I have to start thinking about
781:32 - how to implement the entirety of the
781:34 - logic
781:35 - for that first of all inside of the app
781:38 - we have to add another section before
781:40 - the widgets because to make any kind of
781:43 - logic work here we have to account for
781:46 - the data so I want to store some data in
781:49 - here I want to create three different
781:51 - variables the first one is going to be
781:54 - the height and this is going to be an
781:56 - integer this accurate with ctk and int
782:01 - bar
782:02 - don't forget to call it and then here I
782:04 - want to set a start value of let's say
782:06 - 170. also I just realized this should
782:09 - just be invar without the ctk in front
782:12 - now if I run this this is working again
782:14 - besides the height end we also need a
782:17 - weight although this is going to be a
782:20 - float which we are creating with ctk and
782:23 - then double VAR
782:25 - for a start value here I want to go with
782:28 - 65 kilograms
782:30 - finally I want to have
782:33 - self.bmi string this is going to be ctk
782:36 - and is string VAR this one does not have
782:40 - a starting value but what we can do now
782:42 - is run a method that I call Self dot
782:45 - update BMI this we have to create let me
782:49 - do it on top of change title bar color I
782:52 - call this one update BMI for now I will
782:56 - not need any custom parameters and what
782:59 - I want to do in here is first of all I
783:02 - need to get the height in meter oh and I
783:06 - should mention the formula for BMI is
783:09 - the weight
783:11 - divided by the height
783:16 - squared and by default in all of this
783:18 - the units you would be using are
783:21 - kilogram
783:22 - and meter the 65 here is totally fine
783:26 - for the weight however for the height we
783:29 - have 170 right now this would be
783:33 - 1.7 meter
783:35 - for any American viewer watching this I
783:38 - hope you understand the units just drop
783:39 - me a comment if this is too confusing
783:41 - and I'll explain more basically the way
783:44 - you want to think about it if you never
783:45 - encountered metric units is one meter is
783:48 - a hundred centimeter and the unit we're
783:52 - using in the height in so far is
783:54 - centimeter on top of that one kilogram
783:59 - is going to be 1
784:02 - 000 Ram although this one we don't
784:05 - really need because kilogram is much
784:07 - easier to use
784:09 - how these numbers relate to inches and
784:11 - pounds I will cover in the next video
784:13 - for now don't worry too much about it
784:15 - the most important thing for now is we
784:18 - have to get our height in meter this is
784:21 - super easy to get all I want is self dot
784:24 - my height integer and importantly here I
784:27 - want to get right now this would get me
784:29 - the value of 170.
784:32 - which would be centimeters to convert
784:35 - this to meter I simply have to divide it
784:37 - by 100 and then I'm done next up I want
784:41 - to get my weight in kilogram
784:44 - this I get with self dot weight float
784:47 - and get
784:49 - since we are already using kilogram this
784:51 - one is totally fine by itself
784:53 - finally we can calculate the BMI result
784:57 - for this I want to have my weight in
784:59 - kilogram and divide it by my height in
785:03 - meter although this one needs to be
785:05 - squared and as soon as I have that
785:07 - number I can simply update my BMI string
785:11 - using set and pass in the BMI result
785:16 - this will give me the proper value
785:18 - inside of this BMI result however
785:20 - there's one problem we have right now
785:22 - this BMI string is not connected to this
785:25 - result text
785:26 - we could update it as much as we want it
785:29 - wouldn't be visible
785:30 - to account for that when I'm creating my
785:33 - result text in this line here I want to
785:35 - pass in self dot Emi string
785:39 - and now inside of the result text
785:42 - we need another parameter which is going
785:45 - to be the BMI string
785:48 - and this BMI string I have two instead
785:51 - of the super init method set as the text
785:54 - very
785:56 - Bill like so
785:58 - in here I want to have my PMI string and
786:02 - now at the very least we should see some
786:04 - kind of different starting text let me
786:07 - run the entire thing well we can
786:08 - certainly see a change the problem is
786:11 - that this number here has way too many
786:14 - decimal points to fix that I simply have
786:17 - to round this result this I can do using
786:19 - the round function the second argument
786:22 - here would be how many decimal points we
786:24 - have I think two are totally fine here
786:27 - now for run this this is looking much
786:30 - better now we get a proper result
786:33 - now the issue is I can use the slider
786:36 - and the buttons they don't do anything
786:38 - right now to fix that we have to connect
786:40 - the height integer to the height input
786:43 - and the weight load should be connected
786:46 - to the weight input
786:48 - let's get started with the height
786:50 - integer this I want to do inside of the
786:52 - height input I want to also pass in self
786:55 - dot height integer
786:58 - now once we have that inside of the
787:01 - height input we need another parameter
787:04 - let's call it the height int this height
787:08 - integer I now want to set inside of the
787:11 - slider as the variable
787:14 - so in here height integer if I execute
787:18 - the code now you can see that by default
787:20 - the slider is all the way on the right
787:24 - the reason for that is that by default
787:26 - this slider goes from 0 to 100 which
787:29 - isn't ideal to account for that I want
787:33 - to add a from and to parameter
787:36 - I want to go from
787:38 - let's say 100 centimeters so one meter
787:41 - should be the minimum if you are below
787:43 - that the formula doesn't help anyway two
787:45 - let's go with 250. this is 250
787:49 - centimeters I I think that's a bit
787:52 - taller than eight feet so very few
787:54 - people are going to be larger and if
787:56 - they are a BMI formula would not apply
787:59 - to them anyway
788:00 - so now if I run this we can see the
788:03 - slider is slightly to the left so this
788:05 - would be 170 this would be 100 and this
788:08 - would be 250. we have the basic slider
788:12 - with a height integer now the problem
788:15 - with that if I run the entire thing
788:16 - again I can move the slider as much as I
788:19 - want it is not going to influence
788:20 - anything for that let me minimize the
788:23 - height input again because what we can
788:26 - do inside or rather after the starter
788:30 - I can add what I called Racing for the
788:33 - basic logic here
788:35 - essentially all we have to do is
788:37 - whenever this height or the weight
788:39 - changes then we want to call this method
788:42 - here and this would update the text the
788:45 - functionality for that is inbuilt into
788:47 - tkinter we are getting this with for
788:49 - example for the height integer using the
788:52 - trace method there are two arguments we
788:55 - need in here do we want to run a
788:57 - function or a method whenever we are
788:59 - reading the value or when we are writing
789:02 - on the value in my case whenever we
789:04 - change the value so when we are writing
789:06 - on this variable I want to run a method
789:08 - which is going to be self dot update BMI
789:11 - there's one more thing you have to be
789:13 - aware of and that is if you run a method
789:16 - using this Trace method
789:19 - tick enter automatically adds a couple
789:21 - of arguments into it as the second
789:23 - argument those usually capture with star
789:27 - arcs and then you just completely ignore
789:29 - them
789:29 - meaning no if I run this again I can
789:32 - update the height and we are updating
789:35 - the value for our BMI
789:39 - so next up we can do the same thing for
789:42 - the buttons
789:43 - which means for this one as the second
789:46 - argument I want to pass in self dot
789:49 - weight load
789:52 - so now I can minimize the app to have a
789:54 - bit more space and I want to work inside
789:57 - of my weight input
789:59 - I have to get the weight load in here as
790:02 - a parameter so the entire thing doesn't
790:04 - crash and we have the weight float
790:06 - available inside of the class
790:09 - that's a good start however now we have
790:11 - a problem
790:13 - each of these buttons does something
790:15 - slightly different
790:17 - we have to figure out some kind of
790:19 - system how to make every button change
790:22 - this weight float slightly differently
790:25 - for example if I click on the minus
790:27 - button I want to reduce the weight by
790:29 - one kilogram however if I click on the
790:32 - small minus button I only want to reduce
790:34 - the weight by 0.1 kilogram
790:37 - for the plus and the small plus button
790:39 - the same thing just in a positive
790:41 - direction
790:43 - since this is going to be a bit of extra
790:45 - logic I'm going to create a separate
790:47 - method
790:48 - let's call this one the update weight
790:50 - method
790:52 - besides self I also want to have let's
790:55 - call it the information by default this
790:58 - is going to be none
790:59 - for now all I want to do is to print the
791:02 - information now how this is going to
791:05 - work is each of those buttons is going
791:08 - to get one method this method here
791:10 - and then we're using that to pass
791:12 - information in for example for the minus
791:16 - button I want to add a command and this
791:19 - command is going to be a Lambda function
791:22 - although this Lambda function is simply
791:24 - going to call Self dot update weight
791:28 - the reason why I'm using lambdar is
791:30 - because this allows me to add an
791:33 - argument when I'm calling this method
791:36 - what I want to pass in here is a tuple
791:38 - with two values the first one is going
791:40 - to be minus the second one will be large
791:45 - the reason is this is a minus button so
791:48 - we have minus and this is a larger
791:50 - button so we have large
791:52 - that's literally all of this then I can
791:55 - copy this entire line paste it in here
791:58 - because now we have the plus button
792:00 - meaning this minus should be a plus
792:02 - next up we have the small plus button so
792:05 - I can paste this in again this should be
792:08 - a plus button and it is a small button
792:12 - finally for the small minus button
792:15 - I want to pass in the command line again
792:18 - this should be minus and small
792:22 - way of that let me run the app and now
792:25 - if I click on the large button we get
792:26 - plus large plus small minus small and
792:30 - minus large
792:32 - that way within one method we have all
792:34 - of our buttons
792:36 - inside of this method I first of all
792:38 - want to get an amount so by how much do
792:42 - I want to update this value
792:44 - this will be one if info 1 is going to
792:49 - be large
792:52 - this large only exists inside of the
792:54 - minus enter plus button these two
792:56 - buttons here they have large and large
793:00 - if I have either of them I want to
793:02 - change by one kilogram
793:04 - however if I don't so else then the
793:08 - amount should be 0.1
793:11 - this would cover these two buttons here
793:14 - once I have that I can simply check if
793:17 - info 0
793:20 - is equal to let's start with Plus
793:23 - then I want to self and set the value
793:28 - what the new value is going to be is
793:30 - self dot weight load dot get
793:34 - Plus
793:36 - the amount however if that is not the
793:39 - case so else I can simply duplicate this
793:42 - line and the plus should be a minus
793:47 - I hope these lines here make sense
793:48 - basically all we are doing is we're
793:50 - getting the current amount of the weight
793:52 - and then we are either adding or
793:54 - subtracting the amount we have specified
793:56 - here
793:57 - although I think I've realized this
794:00 - attribute self.weight float does not
794:02 - exist right now all we have is this
794:04 - parameter but we're never turning it
794:06 - into an attribute
794:08 - let's do this right at the top so self
794:10 - dot weight float is weight
794:14 - float
794:15 - now this should be working if I click on
794:18 - any of the buttons nothing is happening
794:21 - although
794:23 - if I print
794:26 - self.weight float dot get let's see
794:29 - what's happening if I now click on the
794:31 - small Plus
794:32 - we can see at the very least this is
794:34 - working
794:36 - and yeah we do have the proper values
794:38 - here and don't worry too much about all
794:41 - the floating Point numbers here they are
794:43 - not going to make a difference they just
794:44 - look weird but to a computer they're
794:47 - totally fine all of this here is working
794:50 - totally fine meaning we can minimize it
794:52 - but when I am opening the app again or
794:56 - the class app nothing is going to happen
794:59 - so why is that and well we're looking at
795:01 - it right now
795:03 - we haven't set a tracing for the weight
795:06 - meaning I want to duplicate this line
795:07 - when I'm updating the weight load
795:12 - using Trace as soon as the value updates
795:15 - I want to call the update BMI method so
795:18 - now if I run this and I click on Plus
795:21 - we are once again updating the BMI value
795:25 - it's looking really good also the slider
795:27 - still works just fine now this video is
795:30 - getting a bit longer and I can't think
795:32 - of a good exercise I guess what you
795:34 - should be doing is definitely understand
795:36 - how this tracing method here works and
795:38 - why it is important it's a really
795:40 - important thing to understand because
795:42 - this one allows us to work inside of
795:44 - these widgets by simply passing in any
795:47 - of these variables
795:49 - and as soon as we are making any kind of
795:51 - change all of that will be captured by
795:54 - these two tracing methods that keeps all
795:56 - of this much more organized so
795:58 - definitely have a look and see how this
796:00 - works at this point we have a reasonably
796:03 - working app which means I can click on
796:06 - the buttons to get a higher weight and I
796:08 - can also move the slider to get a
796:10 - different kind of height on top of that
796:11 - we get an updated BMI number all of that
796:14 - is working just fine however what we
796:16 - don't have is the weight and the height
796:18 - being updated which makes the app feel a
796:21 - bit weird and this is what I want to
796:23 - work on now for now I'm just going to
796:25 - work with metric units but later on we
796:27 - will also add the switch the one up here
796:30 - to switch to Imperial units as always
796:33 - I'm starting in bmi.pi and we have to
796:36 - work Ivan side weight input or height
796:38 - input depending on what we want to start
796:40 - with let's say I want to start with the
796:43 - height input
796:44 - the order here really does not matter
796:46 - what we have to do inside of this one we
796:49 - have to update this output text here for
796:53 - that I have created another text
796:56 - variable I called it self dot output
797:00 - string this is going to be a ctk and
797:04 - string VAR without any starting value
797:07 - although inside of the output text I
797:10 - want to set this as the text variable
797:13 - meaning text variable is going to be
797:15 - self and output string if I run the
797:18 - thing now we can see that we can't see
797:20 - the text anymore so this text here is
797:22 - gone to make it reappear I want to
797:25 - create another method I call this one
797:27 - update text besides self we are also
797:32 - going to need an amount so what amount
797:34 - do we want to set for the height for now
797:36 - let me simply print the amount
797:39 - the way we are going to use this is
797:41 - inside of this slider I'm going to add a
797:44 - command let me do it all the way at the
797:45 - top the command is going to be a
797:47 - function which is going to be self and
797:49 - update text
797:52 - since the command for the slider
797:54 - automatically inserts one argument which
797:56 - is the amount on the slider we get the
797:58 - amount here right away
798:00 - if I run this now and move the slider
798:02 - I'm getting the current height that's
798:04 - looking really good once again we are
798:06 - getting a huge amount of floating Point
798:08 - numbers so all of this but well we can
798:11 - simply ignore it it doesn't matter for
798:12 - our purposes this number I now have to
798:15 - convert to meters for example if I get
798:18 - 182 centimeters this is what I would be
798:22 - getting from a slider not centimeters
798:24 - but just 182 and that I want to convert
798:27 - to 1.82 and meters all of this needs to
798:31 - be one string for that first of all I
798:34 - have to convert the amount to a string
798:36 - let's call it text string
798:39 - and all I'm going to do is turn the
798:41 - amount into a string also while we're
798:44 - here I want to turn the amount itself
798:46 - into an integer that way we get rid of
798:49 - the floating Point numbers they are
798:51 - going to be a bit annoying
798:52 - once we have that I want to have the
798:54 - meter and the centimeter and the
798:57 - conversion here is really simple because
798:59 - for example if we have once again 182
799:02 - this would be the string right now
799:05 - I simply want to get the first digit
799:08 - this works reliably because my slider
799:10 - only goes from 100 to 250 meaning we go
799:14 - from 1 meter to 2.5 meters it is
799:17 - literally not possible to be below 1
799:19 - meter or greater than 10 meters
799:22 - which means this first digit is always
799:24 - going to be the meter to get this one I
799:26 - want to get the text string and simply
799:28 - get the first element
799:30 - which isn't going to be 1 but a zero
799:33 - next up for the centimeters I want to
799:36 - get my text string again and now I'm
799:38 - going to go from the first element all
799:40 - the way to the end with that I have my
799:42 - meter in centimeter so now I simply have
799:44 - to update self dot output string using
799:48 - the set method and then here I have to
799:50 - add an F string the F string needs the
799:54 - meters meter in here then I want to have
799:57 - a DOT after that I want to have the
800:00 - centimeters and finally I want to add
800:02 - the units so meter at the end
800:04 - with that I can run the entire thing
800:07 - again by default we can't see anything I
800:09 - will fix that in just a second but if I
800:11 - move the slider we can see the meters
800:14 - being properly updated that's looking
800:15 - really good to see the text right when
800:18 - the app is starting we simply have to
800:19 - call this method somewhere after we have
800:23 - created this output string
800:25 - let me do it right after
800:27 - self dot update text and really
800:31 - important in here we have to add the
800:33 - amount if we are calling update text
800:35 - inside of a slider this amount is added
800:37 - automatically but if we don't do it and
800:39 - just call it by itself we have to edit
800:41 - manually this fortunately is quite easy
800:44 - to do because we know the current height
800:46 - we're getting this from the height int
800:48 - let me copy it paste it in here and all
800:51 - I have to do is get and then we should
800:53 - be good to go now if I run this we can
800:55 - see 1.7 meter by default and I can
800:58 - update this this is working just fine
801:01 - with that we have finished the height
801:03 - input now we can work on the weight
801:05 - input for this one we have to follow is
801:08 - somewhat similar logic compared to what
801:10 - we have done in the height input which
801:13 - means this
801:15 - label here is going to get a text
801:17 - variable once we have that we can use
801:19 - update weight we already have a method
801:21 - for that to update the number as well
801:25 - since this should be reasonably
801:26 - straightforward it's going to be an
801:29 - exercise I want you guys to update the
801:31 - text to display the current weight pause
801:34 - the video now and try to figure this one
801:35 - out
801:40 - first of all I once again am going to
801:42 - need another output string
801:45 - which is going to be ctk dot stringvar
801:48 - this we now have to connect to the label
801:52 - which we can do very easily I want to
801:54 - have a text variable which is going to
801:57 - be self dot output string with this
802:01 - output string we don't actually need to
802:03 - text anymore I can simply get rid of it
802:06 - I should also do the same thing for the
802:09 - height input just to keep things a bit
802:10 - cleaner this text 1.8 meter we don't
802:14 - need any more
802:15 - back to the weight input now that we
802:18 - have this output string and we have
802:20 - connected it to the label if I run the
802:22 - app we shouldn't see any text anymore
802:23 - and we don't that's working just fine
802:25 - next up we have to work inside of update
802:29 - weight to actually update the text label
802:33 - and for that I want to call this method
802:36 - right when the app is started which
802:38 - means after I've created this output
802:41 - string I want to call
802:43 - self.update White
802:45 - if I run this we are going to get an
802:48 - error this error happens down here
802:51 - because right now info is going to be
802:54 - none and we are trying to get the index
802:56 - on none which doesn't work
802:59 - to fix that error I have to put all of
803:01 - this stuff here inside of an if
803:03 - statement that if info exists only then
803:07 - do I want to do all of this
803:09 - and with that I can run this again we
803:12 - still can see the text but at the very
803:13 - least the app isn't crashing anymore
803:16 - however what I can do now
803:18 - after the if statement set the output
803:21 - string what I want to have in here is
803:25 - some kind of string that looks like
803:27 - let's say 80.1 kilogram
803:30 - the weight I already have because I have
803:33 - the weight float which means I can get
803:36 - rid of this string here replace it with
803:38 - an F string
803:39 - I want to get myself dot weight
803:43 - underscore float and let's just see what
803:45 - happens we are getting the name of the
803:48 - ticket variable because I forgot the get
803:51 - method if I run this now and click on
803:54 - the button this one is working just fine
803:56 - for full kilograms however if I click on
803:59 - the small buttons this seems working up
804:01 - there we go
804:02 - now we have way too many numbers after
804:04 - the decimal point
804:06 - although this we can fix fairly easily
804:08 - all we have to do is round the weight
804:11 - let's say with one decimal point now if
804:14 - I run this the kilogram buttons so the
804:17 - larger buttons still work perfectly fine
804:20 - and on top of that the small buttons
804:22 - should also be working totally fine now
804:25 - and this is looking really good
804:27 - although there's one thing I have to add
804:29 - and that is the kilogram afterwards now
804:32 - if I run this we have kilograms although
804:35 - the rest of the buttons still work just
804:37 - fine
804:39 - all right and with that I can minimize
804:43 - or before I want to get rid of the
804:45 - exercise text
804:46 - and let me add a comment here for output
804:50 - logic now I can minimize the weight
804:53 - input fix the white space and we have
804:56 - covered another important part to finish
804:58 - the app I want to activate the button up
805:01 - here so we can switch between metric and
805:04 - imperial units for now we only work with
805:06 - metric ones so meter and kilogram but
805:10 - obviously for Americans and British
805:12 - people this isn't going to work the
805:14 - logic fault of this one isn't
805:15 - complicated I just have to talk about a
805:17 - couple of formulas to convert kilogram
805:19 - to pounds and ounces and meters to
805:22 - inches and feet shouldn't be too
805:24 - difficult let's Jump Right In back at my
805:27 - code there's one thing I want to do
805:29 - inside of the app to get started and
805:31 - that is I want to add one more variable
805:33 - to my data I guess we can do it right at
805:36 - the top I want to create
805:39 - self dot metric and this is a Boolean
805:44 - which I create with ctk and Boolean VAR
805:49 - the default value here should be true
805:51 - this metric Boolean we're going to pass
805:54 - into the white input and the height
805:56 - input to change the units and into the
805:58 - unit switcher to control it let's get
806:01 - started with the unit switcher and here
806:03 - I want to pass in the metric Boolean
806:06 - with that I can minimize the app for now
806:09 - and work on the unit switcher because in
806:11 - here we are going to have some important
806:13 - logic we have to start by adding a
806:15 - second parameter I got this one the
806:17 - metric pool
806:19 - this we have to turn into a parameter
806:22 - right away
806:23 - self dot metric pool is going to be
806:25 - metric pool
806:27 - what we now have to figure out is how to
806:29 - turn this unit switcher into a button
806:32 - which actually is quite simple all we
806:34 - have to do is use bind so we have to use
806:37 - events the one event I care about is
806:40 - called button
806:41 - this is simply a mouse button click if
806:44 - that is the case I want to run a method
806:47 - that I called change units
806:50 - this one doesn't exist right now let's
806:52 - create it right away change units and
806:55 - here we need self and we need the event
806:59 - although the event we are going to
807:00 - ignore entirely in here we have to do
807:03 - two things number one we have to change
807:06 - the metric rule
807:09 - meaning if it is currently true then we
807:13 - want to set it to false and vice versa
807:16 - this is very easily achieved all we have
807:19 - to do is get self dot metric boole and
807:22 - then set it with a new value
807:24 - since we only have true or false we are
807:27 - working with Boolean values the new
807:29 - value is simply going to be not self dot
807:32 - metric Bool dot get if this value is
807:35 - true right now the not is going to turn
807:37 - it into false
807:39 - and if this value will be false then not
807:42 - would make it a true value
807:44 - that way we can have the entire logic in
807:46 - a single line of code which is quite
807:48 - handy
807:50 - next up
807:52 - we have to update the text that is also
807:54 - going to be fairly simple I want to
807:56 - check if self dot metricpool dot get if
808:01 - this is true then I know I am using
808:03 - metric units which I can use with the
808:06 - configure
808:07 - method to update the text to
808:11 - metric however if that is not the case
808:14 - else I want to configure the text as
808:17 - well let me just copy it except now the
808:20 - units are going to be Imperial
808:23 - with that we should already have a basic
808:25 - start let me run the app and now if I
808:28 - click on Metric we get Imperial if I
808:30 - click on Imperial we get metric we
808:32 - essentially created our own button with
808:34 - that I can minimize the unit switcher
808:36 - and not worry about it again although
808:38 - the white space here does annoy me
808:40 - back in the app
808:42 - I now have to work either on the weight
808:45 - input or on the height input let's get
808:48 - started with the height input in here I
808:50 - have to pass in the metric boole
808:53 - and for that let me minimize the app
808:56 - again and work on the height input we
808:59 - are now going to need another parameter
809:00 - metric rule this one absolutely has to
809:04 - be an attribute
809:05 - let's do that right at the top self dot
809:08 - metric pool is going to be the metric
809:11 - Boolean although we are not going to use
809:13 - it anymore inside of the init method we
809:15 - are only going to care about it inside
809:17 - of update text because in here I only
809:21 - want to do all of this if metric pool is
809:24 - true so if self.metric pool dot get if
809:28 - that is the case I know I am using
809:30 - metric values but if that is not the
809:33 - case so else then I'm using imperial
809:37 - units for that I have to figure out feed
809:40 - and inches right now we have the
809:44 - centimeters inside of our amount for
809:47 - example the value we start with is a
809:49 - hundred and seventy and this would be
809:52 - centimeters these 170 centimeters I now
809:55 - want to convert to inches the formula to
809:59 - get an inch from centimeters would be
810:02 - one
810:04 - centimeter
810:06 - divided by 2.54
810:10 - that's literally it it's not terribly
810:13 - difficult next up to get two feet
810:16 - we have to get
810:18 - one
810:20 - inch and divide it by 12.
810:24 - these are all the units that we are
810:26 - going to need all of this can actually
810:28 - be done in a single line of code
810:31 - how I approach this first of all I want
810:34 - to get the amount and divide it by 2.54
810:38 - this would simply give me the inches but
810:42 - what I can do now is to use diff mod and
810:46 - then add a second argument which is
810:49 - going to be a 12.
810:50 - for example right now we are starting
810:53 - with 170 and
810:56 - 170 divided by
810:59 - 2.54 would be almost 67. what div mode
811:04 - is then doing is divide this entire
811:06 - thing by 12. so divided by 12 which
811:10 - would be giving us a 5 and then point
811:14 - let's say almost 0.7
811:17 - both of these numbers we are getting
811:19 - separately
811:20 - which is literally all we need to
811:23 - convert centimeters to feet and inches
811:26 - as a matter of fact
811:27 - to make sure this is working let me
811:30 - print feed and
811:32 - inches
811:34 - now if I run this again
811:36 - I have to click on metric to get
811:37 - imperial units and now if I move the
811:40 - slider
811:43 - we are getting some units the text
811:45 - doesn't update anymore but at the very
811:47 - least in the bottom you can see that
811:49 - this seems to be working just fine to
811:51 - actually make it visible I want to
811:53 - duplicate this line here because I want
811:55 - to set the output string
811:57 - but this isn't going to be meters and
812:00 - centimeters anymore
812:01 - instead I want to have my feet the short
812:06 - end units for this is a single quotation
812:08 - mark which is going to confuse python so
812:11 - we have to add the Escape character
812:13 - this one here ensures that we can only
812:15 - see the quotation mark or the single
812:17 - quotation mark
812:18 - after we have that I want to add the
812:21 - inches and for this we need a double
812:23 - quotation mark
812:24 - and just to make sure that this isn't
812:26 - confusing to python I want to add the
812:28 - Escape character as well
812:29 - way of that we should be seeing
812:32 - something if I now go to metric
812:34 - and update all of this we can see that
812:38 - well we get a whole bunch of numbers the
812:41 - issue once again is we have a huge
812:44 - amount of numbers after the decimal
812:45 - point to account for that I want to wrap
812:48 - both of those into an INT function
812:52 - and now let's try this again
812:54 - I have to click on Metric
812:57 - to get Imperial and now I get the feet
813:01 - and inches
813:04 - this is going to give us the basic logic
813:06 - so we have a good start however you
813:10 - might have already noticed there's one
813:11 - problem I can update the meters
813:13 - individually and if I now click on
813:15 - Metric I get Imperial however the
813:18 - meteors right now are still visible only
813:21 - once I update the slider do I get to the
813:23 - feet and inches
813:25 - so the issue is only when I'm moving the
813:28 - slider do I run this method here you get
813:31 - the different kind of units
813:33 - if I simply click on the unit switcher
813:35 - nothing is going to happen
813:37 - let's work on this one next this is
813:39 - going to happen once again inside of the
813:42 - app
813:43 - in here I want to use tracing one more
813:46 - time
813:47 - I want to get my metric Boolean and once
813:51 - again I want to trace and check if the
813:53 - value is changing
813:55 - if that is the case
813:57 - I want to call a method I called change
814:00 - units
814:01 - this one doesn't exist right now let's
814:04 - create it right away
814:06 - change units in here we need self and we
814:10 - need the arcs
814:12 - although once again I'm going to ignore
814:14 - them entirely
814:15 - inside of this method I want to run a
814:18 - method on the height input which isn't
814:20 - possible right now because I didn't turn
814:22 - this instance of the class into an
814:25 - attribute although that I can change
814:27 - quite easily
814:29 - I want to have this as the height
814:32 - underscore input
814:34 - now I can access this self dot hide
814:37 - input
814:39 - the method I want to use is called
814:41 - update
814:44 - text I believe I called it let's check
814:46 - inside of height input
814:49 - I have this update text method this is
814:51 - what I want to use
814:54 - this one wants one argument and that is
814:57 - the current height which we do have
814:59 - available inside of this height integer
815:02 - let me copy it and simply pass it in
815:04 - here with the get method with that this
815:08 - should be working now I can still update
815:11 - the height but if I click on Metric I
815:14 - now immediately get the imperial units I
815:16 - can still update them just fine and if I
815:19 - return to metric I am back to meters
815:22 - with that we have finished the height
815:24 - input so next up we can work on the
815:26 - weight input
815:28 - for this one like for the hive we first
815:30 - of all need another parameter which is
815:32 - going to be the metric Boolean
815:35 - this we have to pass into it when we
815:37 - create the instance so in here self dot
815:40 - metric pool
815:42 - and let me minimize the class app so I
815:45 - have a bit more space
815:47 - first of all I want to turn the metric
815:49 - pool into an attribute self dot metric
815:52 - pool will be the metric Boolean
815:55 - after that I don't need the dunder init
815:57 - method anymore because the entirety of
815:59 - the logic is going to happen inside of
816:01 - update weight
816:02 - in here I still want to check if the
816:06 - info exists however now the amount I
816:10 - want to have a bit more flexibly
816:13 - what that means is I want to check if
816:16 - self dot metric
816:18 - bull
816:21 - is true
816:23 - and only if that is the case I want to
816:25 - increase the amount by one or by 0.1
816:28 - it also be the sensible units for
816:30 - kilogram however if that is not the case
816:33 - I want to use Imperial units once again
816:36 - the units for this one would be pounds
816:38 - and ounces
816:41 - for that once again we have to talk
816:43 - about units I am once again starting
816:45 - with one kilogram or 0.1 kilogram
816:49 - and I'm not really going to convert them
816:52 - instead what I'm going to do is I'm
816:54 - going to increase the pounds by one
816:57 - pound
816:58 - one pound is
817:03 - 0.453592 kilogram
817:06 - a g at the end
817:08 - to get two ounces we simply let me write
817:13 - ounce in here all we have to do is get
817:16 - one pound and divide it by 16.
817:20 - since the units are actually fairly
817:22 - simple all I really have to do in here
817:24 - is get my amount and by default this is
817:28 - going to be one pound
817:30 - which would be
817:32 - 0.453592 kilogram this I only want to
817:35 - get if info 1 is equal to large which
817:42 - should be a string if that is not the
817:44 - case so else I want to get this same
817:46 - number and divide it by 16. with that
817:50 - I'm either getting one pound or one
817:53 - ounce except I'm expressing them in
817:56 - terms of kilograms and grams
817:58 - that is actually the entire trick for
818:00 - how this logic is going to work I am
818:02 - always working in metric units like
818:03 - kilograms or meters and centimeters
818:05 - except for the front end I'm converting
818:07 - these numbers either to metric units or
818:09 - to Imperial units because of that this
818:12 - logic here can stay exactly identical we
818:15 - simply change the amount that we are
818:17 - working with
818:18 - however at the bottom we have to make a
818:21 - few more updates because right now we
818:23 - are only working with metric units
818:25 - to update this one
818:28 - I want you guys to do an exercise
818:31 - I want you guys to do some research and
818:33 - get the proper output for both metric
818:35 - and imperial units
818:37 - meaning we either want to have kilogram
818:39 - this we already get and if we're using
818:42 - imperial units I want to display the
818:44 - pounds and the ounces
818:46 - parts of you now and try to figure this
818:48 - one out
818:52 - the first step that we have to do is we
818:56 - have to check if we are using metric or
818:58 - imperial units which we get with self
819:00 - dot metric Bool dot get
819:03 - if that is the case I know I'm using
819:06 - metric units so this line here can stay
819:08 - identical
819:09 - if that is not the case
819:11 - and I forgot the if statement here if
819:14 - that is not the case so else then I want
819:17 - to use imperial units
819:19 - which means what we now have to figure
819:21 - out is how to get the pounds and the
819:24 - ounces
819:25 - the function we can use here is divmod
819:28 - once again
819:29 - however for that we will need just the
819:32 - ounces which we don't have right now
819:35 - because this is what we are trying to
819:36 - get
819:37 - although once we have the answers we
819:39 - simply have to divide them by 16 and
819:41 - then the remainder will be the ounces
819:43 - that are left
819:45 - now how can we get the answers first of
819:47 - all well for that I want to add another
819:49 - variable let me call it the raw ounces
819:53 - for that first of all I want to get the
819:55 - current weight so self dot weight
819:58 - load and get this would get me the
820:02 - kilogram to turn this into pounds I want
820:06 - to multiply this with 2.20462
820:11 - and just in case you're confused if we
820:13 - have
820:15 - one kilogram
820:17 - this would be
820:20 - 0.45 pounds this is what we have done
820:23 - here however what we do down here is the
820:26 - reverse so we have one pound and that is
820:30 - going to be
820:31 - 2.2 kilogram also I forgot the G here
820:35 - that needs to be there
820:37 - with this we would have the pounds to
820:39 - get to the ounces we have to multiply
820:41 - this by 16 because remember they are 16
820:44 - ounces inside of one pound
820:47 - with that we have all the ounces that we
820:49 - need and this is what I want to use div
820:51 - mod with
820:52 - once I have that I can simply get my
820:55 - output string and set a new value
820:58 - for this one we need an F string
821:01 - we first of all want to have the pounds
821:05 - with lb afterwards then a white space
821:09 - and then we get the ounces
821:12 - the short end for that is Oz
821:15 - now let's try this
821:17 - if I now click on Imperial we can still
821:19 - see the kilogram but if I click on a
821:21 - button we now get something else
821:24 - once again
821:26 - the issue is that the rounding here
821:28 - creates way too many numbers to fix that
821:31 - I want to turn both of these numbers
821:33 - into integers and now let's try this
821:36 - again I click on Imperial and now if I
821:38 - click on a button this is looking much
821:41 - better so I can change the answers and
821:43 - the kilogram
821:45 - with that I can get rid of the exercise
821:47 - text we don't need it anymore in fact I
821:50 - can minimize update weight entirely
821:53 - the last thing that I have to do inside
821:55 - of the app when I am calling change
821:58 - units I also want to update the weight
822:00 - input for that I first of all have to
822:03 - create an attribute self dot weight
822:06 - input
822:08 - is going to be one instance of the class
822:11 - now that I have that inside of change
822:13 - units I want to get self dot weight
822:15 - input
822:17 - the method I want to call if I scroll
822:19 - down a tiny bit is simply update weight
822:23 - this works because inside of here we are
822:26 - only updating the units if we have
822:28 - information but by default this is none
822:30 - so if we call it the method by itself
822:32 - without any arguments it is simply going
822:34 - to run this bit down here which is all
822:37 - we need
822:39 - meaning in here update wait with that we
822:43 - should be done I can now click on plus
822:47 - and minus 40 kilogram I can update the
822:50 - height in meters and now if I click on
822:53 - Imperial we get pounds and ounces and we
822:56 - get feet and inches all of those we can
823:00 - update quite easily this seems to be
823:02 - working just fine
823:03 - and we also get the PMI updated so with
823:07 - that we have finished another app let's
823:10 - get started by working on the calculator
823:11 - you can see the result already it is
823:14 - very much inspired by the iOS calculator
823:16 - although for the most part let me show
823:18 - my mouse I can simply add any kind of
823:21 - calculation in here and I would get a
823:22 - result I can also clear the entire thing
823:25 - and on top of that I have the plus and
823:27 - minus button from the iOS calculator and
823:29 - the percentage sign other than that it's
823:31 - well a calculator there are two major
823:34 - changes compared to the original
823:35 - calculator the first one is on the top
823:38 - we now have the formula that we have
823:40 - typed in which I think is really
823:42 - annoying that this doesn't exist in the
823:43 - original calculator this is quite easy
823:46 - to add
823:47 - the other change I made is that besides
823:49 - the dark mode we also have a light mode
823:52 - it works in exactly the same way but if
823:55 - your system settings are light then
823:56 - you're going to get a much brighter
823:58 - calculator which fits much better into
824:00 - the system overall all of this will be
824:02 - covered in this section and there really
824:04 - isn't terribly much that is complicated
824:06 - to work on the one slight complication
824:09 - is that we have to create a lot of
824:10 - buttons and most of these buttons have
824:12 - some slight difference in functionality
824:14 - for that we're going to work quite a bit
824:17 - with inheritance but I'll talk about
824:19 - that more when we get to it for now I
824:22 - want to set up a basic window but before
824:24 - we get to that I want to talk about the
824:26 - folder we have because this one is
824:28 - slightly more elaborate
824:30 - before that I'll be starting with is
824:31 - going to look something like this in
824:33 - here we have calculated.pi and
824:35 - settings.pi in terms of python
824:37 - settings.pi is going to contain already
824:39 - quite a bit but all of these are just
824:41 - settings so what the calculator will
824:43 - look like and where the buttons are
824:45 - going to be I'll shake it up on in just
824:46 - a second the entirety of the logic
824:48 - though is going to be inside of
824:50 - calculated.pi right now this one is
824:52 - completely empty besides that we have
824:55 - empty.ico I'm using this one to hide the
824:57 - icon that's literally all it does
824:59 - finally we have one folder called images
825:02 - if I open this one in here we have four
825:04 - Images one for division and one for the
825:08 - inversion I think this is we always have
825:10 - one for dark mode and one for light mode
825:13 - the reason why we need those four
825:14 - buttons is because the character doesn't
825:16 - exist in the normal alphabet as a
825:19 - consequence when I'm creating these
825:20 - buttons I would have an image and then
825:22 - use this image for the button that
825:24 - covers the setup let's have a look at
825:26 - all of this in code here you can see
825:28 - calculated.pi it is completely empty
825:30 - besides that I have settings let me
825:32 - scroll to the top and here we do have
825:35 - quite a bit more I start with some basic
825:37 - sizing information this is giving us the
825:40 - app size and how many rows and columns I
825:42 - have after that we have some text
825:44 - information so the font and the font
825:46 - size then I have a tiny bit on styling
825:49 - and all of that is fairly simple the
825:52 - really important bit here are these
825:54 - three dictionaries because they contain
825:57 - the position and some additional
825:59 - information about the buttons for
826:01 - example this entry here is for the
826:04 - button number two this button should be
826:06 - in column 1 Row 5 and span one cell or
826:10 - this entry here for example this is for
826:12 - the multiplication button this one is in
826:14 - column three Row 3 it shows the
826:16 - character X for multiplication but the
826:19 - operation is going to be multiplication
826:21 - that's this sign here I'll explain all
826:23 - of that later finally all the way at the
826:26 - bottom we have a huge amount of colors
826:28 - this part should be fairly
826:30 - straightforward
826:32 - now inside settings.pi we are not going
826:35 - to add any logic all of that is going to
826:37 - be inside of the calculator
826:39 - speaking of let's create a basic window
826:41 - this I want to do with custom tkinder
826:44 - which means I want to import cast term T
826:48 - Kinder s c d k once I have that I want
826:52 - to create a class that I called Chi Q
826:55 - later you could call it whatever you
826:57 - want but I guess calculator makes sense
826:58 - here this one needs to inherit from ctk
827:01 - and c t k
827:03 - first of all in here we have to create a
827:06 - dender in it method with self but no
827:08 - other parameters finally the first
827:10 - argument we always need is the super
827:12 - Dunder init method to initiate the
827:15 - parent
827:15 - with that we have a basic object but to
827:18 - see the actual window we have to add one
827:20 - more line this would be self and Main
827:23 - Loop don't forget to call it with that
827:26 - we're going to have a window that we can
827:27 - at the very least see all we have to do
827:29 - is create an instance of this calculator
827:31 - with that we have a basic window this
827:34 - one looks pretty good although I do want
827:37 - to customize this quite a bit while I'm
827:40 - doing this I also want to be conscious
827:42 - of light and dark modes meaning for now
827:44 - if the system settings are light then I
827:47 - want to have a white-ish background if
827:49 - the system settings are dark then I want
827:51 - to have a black background for that
827:53 - first of all we have to detect if the
827:55 - user is using a light mode or a dark
827:57 - mode for that we have to import dark the
828:01 - detect we can use this one let me put it
828:03 - above the calculator I want to print
828:05 - dark detect and then the method is dark
828:09 - don't forget to call it now if I run the
828:11 - code I get true because in my case I'm
828:14 - using the dark mode however
828:17 - if I go to my system settings and I
828:20 - switch from dark mode to light mode and
828:23 - return to my code I can run this thing
828:25 - again and now this is going to be false
828:27 - which means I now am aware if the user
828:29 - is using dark mode or a light mode
828:31 - in my case I'm going to stick to dark
828:33 - mode but I will switch around quite a
828:35 - bit back in here I want to go back to
828:37 - dark mode
828:39 - to account for all of this inside of the
828:41 - app I want to add a second parameter
828:43 - that I called is dark with that I can
828:47 - simply pass all of this into the
828:50 - calculator and then I know if the user
828:53 - is using dark mode and light mode and I
828:55 - can account for that inside of this
828:56 - class
828:57 - although before that I want to add one
829:00 - more if statement this if statement is
829:02 - going to check if the name is equal to
829:05 - Dunder Main
829:07 - only then do I want to create an
829:09 - instance of the calculator the result is
829:12 - going to be the same but that way we
829:14 - prevent any kind of code not inside of
829:16 - this file to cause some accidental
829:18 - errors once we have that we can actually
829:20 - come to customizing the calculator
829:22 - itself let me put all of this inside of
829:26 - a setup section
829:28 - and in here we have to add quite a few
829:31 - more things number one I want to set the
829:34 - appearance to dark or light depending on
829:38 - is dark if this is dark is true then I
829:43 - want to call the dark mode if it is
829:44 - false then I want to call the light mode
829:46 - besides that number two I want to set
829:49 - the f g color and set this to white or
829:53 - black depending on the light mode or the
829:56 - dark mode these two colors you can get
829:58 - from the settings because all the way at
830:00 - the bottom we have black and white black
830:03 - is pure black white is not perfect White
830:07 - if you understand the hexadecimal colors
830:08 - here you can see that this is almost
830:10 - perfect white but not exactly these two
830:13 - colors you should be using
830:15 - number three get the start window size
830:18 - from the settings and disable window
830:22 - resizing
830:24 - to start window size you can get also
830:26 - from settings in here finally number
830:29 - four hide the title and the icon
830:33 - I want you guys let me resize this a
830:36 - tiny bit
830:37 - this stuff here should disappear these
830:39 - four things should be fairly
830:41 - straightforward as a consequence this is
830:44 - going to be an exercise pause the video
830:47 - now and try to implement this one
830:49 - yourself
830:53 - number one for this one I need ctk and
830:57 - then set underscore
830:59 - appearance underscore moat this one is
831:03 - expecting either dark or light which
831:07 - means if I run it like this we get light
831:08 - mode if I run it with dark we get the
831:11 - dark mode
831:13 - this entry I want to make dependent on
831:15 - is Stark which I do with an F string I
831:19 - want to have dark
831:21 - if is dark is true if that is not the
831:25 - case else then I want to have light
831:27 - let's try this one and it's looking
831:29 - pretty good
831:30 - next up I want to update the FG color
831:33 - this has to happen inside of the super
831:36 - internet method in here I need an FG
831:39 - color since we have a color for the
831:41 - light and the dark mode we need a tuple
831:44 - in here the first argument is going to
831:46 - be for the light mode the second for the
831:48 - dark mode which means with a tuple white
831:50 - and black I can run this again
831:53 - and we're getting an error because white
831:55 - is not defined that is happening because
831:57 - we're not importing settings that we can
832:00 - change quite easily I want from settings
832:02 - import everything
832:04 - if I fix my typo this should be working
832:06 - there we go now you can see the
832:09 - background color is completely black
832:11 - before this was a dark gray number three
832:14 - I want to set the start window size and
832:16 - also disable window resizing
832:19 - to set the start size I want to use self
832:21 - dot geometry
832:23 - this one wants a string something like
832:26 - 400 times 600. however inside of the
832:30 - settings we have a tuple with the app
832:33 - size
832:34 - let me copy this one right away actually
832:37 - to get this one
832:38 - I want to replace the 400 with curly
832:42 - brackets in here I want app size and the
832:45 - entry zero
832:47 - then I can copy all of this
832:49 - and replace the 600 with app size and
832:52 - one
832:53 - now if I run this we have a much larger
832:55 - window besides that I want to disable
832:58 - window resizing this I get with self dot
833:01 - resizer bill
833:04 - the arguments here are false and false
833:06 - those cover the horizontal and the
833:09 - vertical axis
833:10 - now if I run this let me show my mouse I
833:13 - can try to resize the window it simply
833:15 - doesn't work
833:16 - for the final part I want to write the
833:18 - title and the icon the title is the
833:20 - easier bit for this I need self.title
833:23 - and an empty string running this again
833:25 - now on the top left we don't have a
833:28 - title anymore
833:29 - to hide the icon we need self and I can
833:32 - bid map
833:34 - this is going to import an icon that
833:37 - we're going to set as the icon for the
833:38 - app
833:39 - for this one I have empty dot Ico
833:43 - if I run this one now there we go in the
833:45 - top left we have nothing anymore which
833:47 - looks significantly cleaner this also
833:50 - covers the exercise let me get rid of
833:52 - all of the comments because they are
833:54 - getting a bit tedious
833:56 - that is much better for the final part
833:59 - if I run the app again I want to color
834:01 - the title bar because right now this bit
834:04 - up here looks a bit weird it doesn't fit
834:07 - at all with the rest of the app which
834:09 - means I want to create another method
834:13 - that I called
834:16 - title bar color for the parameters we
834:21 - need self and I want to pass is dark in
834:25 - here in here we can now run some code to
834:28 - color the title bar however for that we
834:30 - have to import a few more things also
834:33 - since this is only going to work on
834:35 - Windows I want to wrap all of this
834:37 - inside of a try statement that way on a
834:40 - Mac we at least don't get an error I
834:42 - want from C types import Wind dll
834:47 - by ref
834:50 - size off and finally C underscore int
834:54 - however if we're getting an error so
834:56 - accept then I want to run pass so
834:59 - nothing at all
835:01 - with that inside of title bar color the
835:04 - method I want to create another try
835:06 - statement because in here I can now run
835:09 - the code to color the title bar
835:12 - for that first of all I want to create a
835:14 - variable that iOS call hwnd
835:18 - this we get with win dll user 32
835:23 - and then get parent
835:26 - to get the parent we need the ID of the
835:28 - current app which we get with W info
835:31 - underscore ID do not forget to call this
835:33 - one
835:34 - next up we need to dwm dwa underscore
835:38 - attribute which is simply going to be
835:40 - 35.
835:42 - the one important difference here in the
835:45 - earlier tutorials I always add a single
835:47 - color well we still have a single
835:48 - variable
835:50 - but this variable now is either going to
835:52 - have the hex color for let me open
835:54 - inside of settings we have either the
835:57 - dark color or the light color
836:00 - which means we have to add an if
836:02 - statement in there I want to copy the
836:04 - title bar hex colors
836:07 - I want to get dark but only if is Stark
836:11 - is true if that is not the case else
836:14 - then I want to get title bar hex colors
836:17 - with the light color
836:19 - well I think that's what I called it
836:21 - yeah light color
836:22 - that gives us all we need which means
836:25 - finally I have to call win dll
836:28 - dwm API now we get to the long one
836:32 - capital d w m set window attribute
836:39 - for this one we want to Target the
836:41 - window which is awnd
836:43 - then I want to get the dwma attribute
836:48 - after that I have to add the color
836:49 - except I have to convert it a tiny bit
836:52 - for that we have five ref then C
836:55 - underscore end and this one is getting
836:58 - the color
837:00 - for the last argument we need size off
837:04 - and then C underscore int
837:07 - that should be all we need for this one
837:09 - although the last bit is we have to add
837:12 - an accept statement which is not going
837:14 - to do anything
837:16 - with that all I have to do now is called
837:19 - self title bar color and pass is dark in
837:24 - here
837:25 - if it runs now we're getting an error
837:28 - that is because I forgot the if
837:30 - statement in here now if I run this
837:32 - again this is looking much better
837:35 - on top of that what I can do I can set
837:38 - this is Stark to false to check the
837:41 - light mode so if I run this now we have
837:43 - the light mode
837:45 - although I want to keep on working with
837:46 - the dark mode
837:48 - which still is working just fine
837:50 - with that I can minimize everything
837:53 - because this covers the first part
837:56 - we have our window now that we have a
837:59 - basic window we can start working on the
838:01 - elements that are actually visible there
838:03 - are going to be quite a few what I want
838:05 - to start with let me type a tiny bit in
838:08 - here actually
838:09 - let's say something like this what I
838:12 - want to start with
838:13 - I want to have this text here and this
838:16 - text here although for now they are not
838:18 - going to do anything I just want to have
838:20 - the basic widget
838:22 - later on they will become Interactive
838:24 - back in my code I want to keep on
838:27 - working inside of the calculator
838:29 - the first thing I have to do in here is
838:31 - I have to create a layout because
838:34 - without that we can't add any widgets I
838:37 - want to use a grid layout
838:40 - in fact let me talk about how this is
838:42 - going to work
838:43 - the grid layout is going to be well a
838:47 - grid
838:48 - for this app I want to have seven rows
838:51 - and I want to have four columns
838:56 - The Columns should be fairly
838:57 - straightforward we have column 0 column
838:59 - one column two and column three
839:02 - for the rows this part here is also
839:04 - quite easy to understand
839:07 - this would be row number six five four
839:10 - three and two
839:12 - after that and those columns you can't
839:15 - really see we have these columns here
839:17 - one is looking something like this for
839:22 - the main output
839:23 - this would be row number one and finally
839:26 - we have all the way the top row number
839:28 - zero
839:29 - those numbers I'm actually getting from
839:31 - the settings if I scroll up here we have
839:34 - main rows and Main columns those I want
839:37 - to use to create all of these columns
839:39 - and rows dynamically
839:41 - although for that first of all
839:43 - I have to start with self and row
839:47 - configure
839:49 - what I ultimately want to get in here is
839:52 - zero one two three four five and six all
839:55 - with the same weight of one also I want
839:58 - to have uniform and set this to a
840:02 - the thing that I have to create
840:03 - dynamically is this list here
840:06 - for that I'm going to use the range
840:09 - function and pass my main rows in here
840:14 - I think that's what I called it main
840:16 - rows I'm using this variable here
840:19 - this by itself is not going to work
840:21 - because row configure is expecting a
840:23 - tuple or a list whereas this range is
840:26 - going to give us a range object but this
840:28 - we can convert to a list or a tuple and
840:32 - then we have the proper outcome
840:33 - with that I can duplicate the line
840:35 - because besides a row I also want to
840:38 - have a column
840:40 - the only difference now is going to be
840:42 - that I'm not going to use main rows
840:44 - instead I will be using main columns
840:48 - or at least that's what I think I called
840:49 - it yeah main columns
840:51 - I can now run the app and well we can't
840:54 - really see a result but now we have a
840:56 - grid that we can work with to organize
840:59 - the text I want to create a separate
841:01 - class which means I want to minimize the
841:04 - calculator and create a class that I
841:07 - called
841:09 - output label
841:12 - since this is just going to be a label
841:15 - I'm going to inherit from ctk label
841:19 - other than that we need a dender init
841:21 - method and this one for now is just
841:24 - going to be self and parent
841:26 - after that as always we need this super
841:29 - in Niche method first of all I want to
841:32 - set the master to whatever the parent is
841:35 - after that I want to set the text so we
841:39 - can see something let's say I'm just
841:41 - going to type one two three in here next
841:43 - up we have to place this output label
841:46 - since we're using the grid layout this
841:49 - has to be a grid in here we have a
841:53 - column
841:55 - which is always going to be zero after
841:58 - that I want to set the column span which
842:01 - is going to be 4.
842:03 - after that we have to specify the row
842:06 - and the row has to be more flexible
842:08 - because this output label we are going
842:11 - to use twice once for the formula and
842:14 - then for the actual output as a
842:16 - consequence we cannot hard code the row
842:18 - this we have to get from the parameters
842:21 - which means I want to add the row in
842:23 - here and pass it to the grid method once
842:26 - we have that inside of the calculator
842:30 - I can start creating some basic widgets
842:35 - although later on we're going to create
842:37 - a huge amount of widgets as a
842:40 - consequence I want to have a separate
842:41 - method to create the widgets I'll call
842:44 - it create widgets
842:47 - so I need a method called create widgets
842:50 - with self and nothing else in here for
842:54 - now I'm going to create the labels
842:57 - or to be a bit more specific the output
843:00 - labels
843:01 - for this one I want to create an output
843:05 - label
843:06 - with for now I will need a parent and a
843:09 - row the parent is always going to be
843:11 - self the first label is going to be in
843:14 - row 0. after that I want to have the
843:17 - exact same output label except this one
843:19 - should be in row 1.
843:21 - with that if I run the app we can see we
843:25 - have one two three twice although the
843:28 - positioning here is not ideal if I draw
843:30 - this one in we have one cell here and we
843:35 - have a second cell here just imagine
843:38 - that I'm able to draw straight lines
843:40 - the first minute I want to do is I want
843:43 - to move this one two three here the
843:45 - first one to the bottom right it should
843:49 - be somewhere here
843:51 - the other one two three this one here
843:54 - should only be moved all the way to the
843:56 - right
843:57 - which means it should at the end be
844:00 - somewhere here
844:01 - that way later on once we have larger
844:04 - font sizes they are properly filling the
844:06 - entire available space in a proper way
844:08 - also to achieve this kind of thing this
844:11 - is going to be your exercise I want you
844:14 - guys
844:15 - to update this class so you can control
844:18 - on what corner the label is going to be
844:21 - I suppose I should be adding this in
844:24 - text the exercise is going to be update
844:27 - the class so you can control which
844:28 - corner the label is attached to
844:31 - pause the video now and try to figure
844:33 - this one out
844:38 - the argument that we need inside of
844:41 - self.grid is called sticky this one
844:45 - tells the label which side to stick to
844:47 - in here for example we can set this to e
844:51 - and then our text is going to stick all
844:54 - the way to the right
844:55 - however since I want each label to stick
844:58 - to a different site I want to set this
845:00 - via the parameter
845:02 - let's call this one the anchor
845:06 - this I want to pass through to the
845:08 - Anchor now for both of these we need one
845:12 - more argument in here
845:14 - for the first output label let me
845:16 - actually add a comment here this is
845:18 - going to be for the formula
845:20 - this one should stick to the south east
845:23 - or the bottom right
845:26 - whereas the result
845:29 - should only stick to the east side
845:32 - now if I run this again you still can
845:35 - see much of a difference but well we
845:38 - will be getting there
845:39 - we make this a tiny bit more visual the
845:42 - first cell would be something like this
845:45 - well the second cell would be looking
845:49 - roughly like this
845:51 - before I'm continuing I'm going to get
845:54 - rid of this text here we don't need it
845:56 - anymore on top of that I want to set
845:58 - some horizontal padding of 10 pixels
846:01 - that way the text isn't completely
846:03 - attached to the right side anymore
846:05 - what we have to do now is add a font so
846:08 - a text here looks significantly better
846:11 - unfortunately we couldn't just create a
846:13 - font inside of the output label
846:16 - for one because these two labels need a
846:19 - different font because they're different
846:21 - text sizes on top of that later on I
846:24 - want to reuse the font for the formula
846:27 - for the buttons as well
846:29 - as a consequence I want to create my
846:33 - fonts inside of the create widget method
846:36 - that way I can pass them into the output
846:38 - labels and later on into the buttons
846:41 - the first bond is going to be I call
846:43 - this one the main font because this is
846:46 - what I'm going to use the most
846:48 - we are creating this one with ctk and
846:51 - ctk bond in here we need a family and we
846:55 - need a size the family
846:58 - we're getting both from settings the
847:00 - family is always going to be the font I
847:02 - can pass this one in here next up for
847:05 - this size
847:07 - I want to use the normal font size
847:10 - this in here and then we're good to go
847:12 - this main font I'm going to use for the
847:15 - formula and for all of the buttons
847:18 - besides that I want to have a result
847:20 - Bond
847:23 - or this one I can simply duplicate this
847:26 - line here
847:27 - because most of it stays the same the
847:30 - one difference is that I now want to use
847:32 - the output font size instead of the
847:35 - normal font size
847:37 - that is giving me two fonts and those I
847:40 - want to pass into the formula which is
847:42 - going to get the main font the output
847:45 - label for the result is going to get the
847:47 - result font
847:50 - once we have that inside of the output
847:52 - label we now need one more parameter
847:55 - that I called the font
847:58 - this font we now have to pass into the
848:00 - Super init method in here font is equal
848:03 - to font
848:04 - now if I run this again that is time to
848:06 - come together much nicer
848:09 - the last thing that I want to do is that
848:11 - right now both the output labels are
848:13 - simply displaying text one two three
848:15 - this has to become a tiny bit more
848:18 - interactive although for now we're not
848:20 - going to use it
848:21 - for that inside of the initi method
848:24 - before I'm creating the widgets I want
848:27 - to add another section that I called
848:28 - Data
848:30 - in here I'm going to create two string
848:33 - variables
848:34 - first of all I want to create self dot
848:37 - result string this is a string so ctk
848:41 - string VAR
848:43 - the default value for this one should be
848:46 - a string of zero this is what we should
848:49 - be seeing by default
848:50 - after that I can duplicate this because
848:53 - next up I want to have another string
848:55 - VAR or the formula
848:58 - although this one for the default value
849:00 - has simply nothing
849:02 - basically later on when we have actual
849:05 - functionality the results string is
849:07 - going to get the result we see from any
849:09 - kind of calculation and the formula is
849:11 - going to well give us the formula
849:14 - these two string vars I now want to pass
849:16 - into these output labels and set them as
849:20 - the text variable for each of the label
849:23 - which means for the output label for the
849:25 - formula the final argument is going to
849:28 - be self Dot formula string
849:33 - whereas for the result label we need
849:36 - self dot result
849:38 - string because of that we will need one
849:41 - more parameter let's call it the string
849:44 - VAR
849:46 - this string bar I want to set as the
849:48 - text variable which is going to be the
849:51 - string VAR with that if I run all of
849:53 - this again we can see 0 for the result
849:56 - and nothing for the formula to make sure
850:00 - this is working let me add test for the
850:02 - formula and we have test so this is
850:06 - definitely working
850:07 - also because of the text variable this
850:10 - text is now redundant meaning we can get
850:13 - rid of it entirely to make all of this a
850:15 - bit cleaner with that we have finished
850:18 - the output label
850:20 - which means I can minimize everything
850:23 - because this covers a really important
850:25 - part
850:26 - next up we can start working on the
850:28 - buttons this is going to be a larger
850:30 - section now that we have the labels we
850:32 - can start working on the buttons
850:35 - for that we need quite a bit for the
850:38 - simple reason that we have a lot of
850:39 - different buttons
850:41 - just to go for them really quick we are
850:44 - going to have these number buttons here
850:47 - those are going to give us the numbers
850:48 - from 0 to 9 and the DOT besides that we
850:53 - have the math buttons those are divide
850:56 - multiply minus and plus and the result
850:59 - button I also added in here at the end
851:02 - we have these are called the operator
851:04 - buttons those are clear invert and
851:07 - percentage sign
851:09 - all of these work in slightly different
851:11 - ways so we have to account for that
851:14 - on top of that what is also quite
851:16 - important is that for the division
851:19 - button and the invert button we have
851:21 - images instead of text this we also have
851:24 - to account for
851:26 - as a consequence I will create quite a
851:28 - few different classes for the buttons
851:30 - and then work with that
851:32 - should be a really good practice for
851:34 - inheritance but let's Jump Right In and
851:37 - let's have a look at all of this back in
851:39 - calculated.pi I first of all want to get
851:42 - rid of this white space because it
851:43 - annoyed me
851:44 - now since we're going to create quite a
851:46 - few different buttons I'm going to store
851:48 - the logic in a separate python file
851:50 - meaning I want to with control and N
851:53 - create a new file and save this one with
851:55 - Ctrl and S this file I'm going to call
851:58 - buttons dot Pi we are still going to use
852:02 - custom tkinter but we only need one
852:05 - class which means I want from Custom
852:08 - tkinter import
852:12 - ctk
852:13 - button this is the only part of custom
852:16 - decanter I am going to need although
852:18 - besides that I am also needing from
852:21 - settings import everything to get
852:24 - started in here I want to create a class
852:26 - that I called button it should also
852:29 - start with a capital letter this one
852:31 - since we are simply going to create a
852:33 - button I want to inherit from ctk and
852:36 - button importantly here you do not have
852:39 - to add ctk at the beginning because now
852:42 - we are importing a ctk button straight
852:44 - away
852:45 - for this one first of all I want to have
852:48 - a thunder init method this one itself
852:52 - we need a parent
852:54 - we need some text then we need a column
852:57 - and a row separated by a comma
853:00 - and that is all I'm going to use for now
853:03 - I should also specify for now I am going
853:07 - to create this AC button and the
853:11 - percentage sign those are going to be
853:13 - basically the simplest buttons that we
853:16 - are going to have to create those inside
853:19 - of this thunder in the method for the
853:21 - button
853:22 - I have to call Super and thunder init as
853:26 - always
853:27 - in here I will need quite a few
853:29 - different arguments so let me use named
853:32 - ones I want to have the master which is
853:35 - going to be the parent
853:37 - next up text is going to be text
853:41 - that is all we need for this super init
853:43 - method to place the button I want to
853:45 - call Self dot grid
853:47 - this one is going to get column with
853:50 - call and row is going to be the row
853:54 - we are simply passing these two
853:56 - parameters in here and here besides that
853:59 - I also want to make sure that the button
854:01 - sticks to all of the sides which means I
854:04 - want to use sticky and north south east
854:06 - and west
854:07 - this is going to give us an incredibly
854:10 - simple button that we can use which
854:12 - means back in calculated.pi
854:15 - I want all the way at the top below
854:18 - custom decanter from buttons I want to
854:22 - import for now only the button
854:25 - if I run the code now this is not
854:27 - crashing so at the very least we know
854:29 - that this is kind of working
854:31 - which means now inside of the calculator
854:33 - I can minimize the init method and the
854:36 - title bar color we also don't need
854:38 - instead
854:40 - I want to create the AC button
854:43 - which is going to be the clear button
854:46 - let me type it like this that's a bit
854:49 - clearer this is going to be simply a
854:51 - button which is the button we just
854:54 - created
854:55 - for this button we're going to need a
854:57 - bunch of arguments to cover all of these
855:00 - parameters let me copy them actually and
855:03 - paste them in here we definitely want to
855:05 - use named arguments because later on
855:07 - they're going to be a lot more arguments
855:09 - in here first of all the parent is easy
855:11 - this is going to be self
855:14 - for the text for now I simply want to
855:17 - have AC
855:18 - the column for this one is going to be
855:20 - zero the row is going to be 2. with that
855:24 - if I run the code
855:27 - we are getting an error because I
855:29 - stopped using the keywords this should
855:31 - be column
855:33 - this should be row not a stratus and
855:36 - there we go we have the first button it
855:39 - doesn't do anything right now but at the
855:41 - very least we have something
855:43 - although there's already one thing I do
855:45 - have to change because
855:47 - the text the column and the row I want
855:51 - to get from the settings this is really
855:53 - important I want to work with this
855:56 - operator dictionary
855:57 - in here we have the clear button and
856:00 - this has the column the row the text and
856:03 - if we add an image it would also have an
856:05 - image path the clear button doesn't have
856:07 - one but the invert one does have one
856:11 - this kind of setup is really important
856:12 - because I want to make sure for The
856:15 - Styling and the layout of my button all
856:17 - of this is organized separately that way
856:20 - I can make any kind of change in here
856:21 - and it would be reflected inside of the
856:24 - calculator
856:25 - or anything more complicated you do want
856:27 - to separate the logic and the layout
856:29 - makes it much easier to work with a more
856:31 - complex program
856:33 - all right I want to get the operators
856:35 - use the operators inside of my button as
856:39 - a matter of fact let me put all of this
856:40 - over multiple lines so it's going to be
856:42 - easier to read
856:44 - first of all I want to get the operators
856:48 - in here the button I'm working on is
856:50 - clear
856:52 - this one here this is going to give me
856:54 - another dictionary inside of this
856:56 - dictionary I have the keys column row
856:58 - and text
857:00 - I want to have the text
857:02 - then I can copy all of this for the
857:05 - column
857:06 - instead of text this should be call
857:08 - finally for the row the text should be
857:12 - row
857:13 - if I run this now we cannot see a
857:15 - difference because we have used the same
857:17 - data but now inside of settings I could
857:20 - make an update here and it would be
857:22 - reflected in the app
857:24 - just to test this
857:25 - let me rename AC to something
857:29 - run the calculator again and now we get
857:31 - something
857:32 - meaning all of this is at the very least
857:34 - working
857:36 - but now obviously if I run this again
857:38 - this button doesn't look very good we
857:41 - have to make a few more changes here
857:43 - inside of the button we have to do a
857:45 - couple of things
857:47 - a very easy thing to work on is to set a
857:50 - corner radius
857:53 - this corner radius we're getting from
857:55 - the settings in here we have styling
857:58 - I want to get my styling
858:01 - this is another dictionary inside of
858:03 - this styling we have Corner radius
858:07 - with that if I run this again now we
858:09 - have no more Corner radii another
858:12 - important thing is I want to add a font
858:16 - this font we already have which means I
858:19 - can set this to font and get my font via
858:22 - the parameters this I can do because
858:24 - inside of the calculator we have created
858:27 - two fonts all the way up here I want to
858:29 - use the main font for this button as
858:32 - well
858:33 - which means I can copy it
858:35 - for this button I want to set a font to
858:38 - my main font now if I run this we have a
858:42 - much better looking text
858:43 - what we now have to work on is the color
858:46 - for that I want to have another
858:48 - parameter
858:50 - and let me explain how the colors are
858:52 - going to work inside of settings at the
858:55 - bottom there are a whole bunch of colors
858:59 - the color we will use for now is dark
859:01 - gray this is the color I generally want
859:04 - to use for the operator buttons we have
859:07 - a foreground color we have a hover color
859:09 - and we have a text color
859:12 - these colors are always going to be two
859:14 - birds for example for the FG color we
859:17 - have this Tuple here one is for the
859:20 - light mode the other is for the dark
859:21 - mode this applies to all of the colors
859:24 - we always have a tuple with two
859:26 - different colors
859:27 - which means when I'm assigning the color
859:29 - here I can simply pass in a default
859:31 - argument with dark gray
859:34 - although this by itself isn't going to
859:36 - do anything I can run the code again we
859:38 - cannot see this color
859:39 - do account for that when we are running
859:42 - the super init method we have to add
859:44 - quite a bit more
859:46 - for example if I want to get the FG
859:49 - color
859:50 - I want to get from my settings I want to
859:53 - have the colors paste this in here this
859:57 - colors is a dictionary all of this stuff
860:00 - here I now want to get one entry in here
860:03 - which is going to be dark gray this dark
860:05 - gray I am getting via my color this one
860:08 - up here so all I have to do is pass this
860:11 - into this dictionary with the color
860:14 - with that I am inside of another
860:17 - dictionary in here I want to get the FG
860:20 - which is the foreground color which
860:22 - means another dictionary with FG
860:26 - and now I can run the calculator again
860:28 - and there we go this is looking much
860:30 - better if I hover over it we still get a
860:34 - bad color but at the very least we're
860:35 - making progress on top of that
860:38 - if I now switch to the light mode
860:40 - meaning if I set a stark to false
860:44 - we also get an updated color although we
860:47 - do have to work on a text color
860:48 - let me revert this and now we can keep
860:51 - on working inside of buttons and make a
860:54 - few more changes
860:56 - besides the FG color I also want to set
860:58 - the hover color and the text color
861:00 - which is fairly easy to do I want to
861:03 - have the hover color
861:05 - which is going to be the same thing we
861:07 - have done before all of this except now
861:10 - we don't want to use FG instead I'm
861:13 - going to use hover
861:14 - hover in here without any white space
861:17 - and now if I run this again show my
861:20 - mouse the basic color still works if I
861:22 - have over it basically the same thing
861:24 - just a tiny bit brighter but it
861:26 - certainly works
861:28 - finally I want to have the text color
861:31 - which once again is going to be
861:34 - basically identical I want to copy this
861:37 - one and now this shouldn't be hover this
861:39 - should be text or at least I think
861:41 - that's what I called it yeah and here we
861:43 - have text
861:45 - now if I run this this is still looking
861:47 - good
861:49 - other should also work this is looking
861:51 - nice
861:53 - you can mostly see this when I switch to
861:55 - the light mode meaning this one should
861:57 - be false again now this button is much
861:59 - more visible
862:01 - I still want to use the dark mode and
862:04 - with that we have one of the buttons at
862:07 - least to an extent the problem we have
862:09 - right now is that this button doesn't do
862:12 - anything which is not ideal for a button
862:15 - to account for that to get started
862:18 - inside of the button I want to have let
862:21 - me put it right beside text I want to
862:24 - pass in a function
862:27 - which the button is then going to call
862:29 - to connect this one to the button we
862:32 - have to give this button a command which
862:34 - is going to be the function
862:36 - with that we just going to need a
862:39 - function we can pass into this button
862:41 - since this is going to be the clear
862:42 - button I want to create one method
862:45 - inside of the calculator
862:47 - which are called clear this will not get
862:50 - any parameters and for now I simply want
862:53 - to print Lear
862:55 - once we have that inside of this button
862:58 - I want to add another named argument the
863:01 - function is going to be self.clear
863:04 - really important here do not call this
863:06 - function we just pass in the function
863:08 - around we're not calling it yet this is
863:10 - only going to happen once we click on
863:12 - the button
863:13 - in fact let's try this one now if I
863:16 - click on the AC button we can see clear
863:18 - inside of the code editor
863:21 - so this is working quite well this is
863:24 - going to give us one button there is a
863:26 - second button we can create right away
863:29 - I call this button the percentage button
863:33 - if I run the entire thing again the
863:35 - button I want to create now is this one
863:37 - here
863:38 - since this should be reasonably easy
863:40 - this is going to be your exercise I want
863:44 - you guys to create the percentage button
863:46 - and you have all you need pause the
863:49 - video now and try to figure this one out
863:55 - for the percentage button we are going
863:58 - to use the same button class meaning I
864:00 - can just copy all of this and paste it
864:02 - in here we just have to make some
864:05 - updates
864:06 - the most important one or the most
864:08 - visible ones are the text the column and
864:11 - the row
864:12 - this information if I look inside of
864:14 - settings we can get from the operator
864:16 - dictionary because in here we have
864:18 - percent
864:20 - to access all of that all we have to do
864:22 - inside of the button I want to replace
864:24 - this clear with percent
864:28 - if I run this now we have the percentage
864:30 - button also works with the hover so this
864:33 - was really easy to add
864:34 - the main font we are also going to use
864:37 - the only other change that we have to
864:39 - make is this function because well this
864:42 - button is not going to clear the
864:43 - calculator it is going to
864:46 - let's call it the percent
864:49 - which needs cell for now and in here
864:52 - we're going to print
864:54 - percent once again this button isn't
864:57 - going to do anything for now we are just
864:59 - working on the UI
865:00 - I have to replace clear with percent and
865:04 - then test all of this I have the AC
865:06 - button this one still says clear and the
865:09 - percentage button says percent alrighty
865:11 - with that we have two buttons definitely
865:15 - some progress
865:17 - at this point we have two buttons this
865:20 - one and this one both of those are using
865:23 - text next up I want to create this
865:26 - invert button here and this one is
865:28 - different because it uses an image
865:30 - instead of text for that I'm going to
865:33 - create a separate class
865:35 - although for the most part it is going
865:37 - to be quite similar compared to the
865:38 - other buttons let's Jump Right In and
865:41 - let's have a look at this one
865:42 - back inside of calculated.pi let me run
865:45 - this again we have two buttons not a bad
865:48 - start but we need a bit more inside of
865:51 - buttons.pi
865:53 - I want to create another class which I
865:57 - called image button
866:00 - this one once again has to inherit from
866:02 - ctk button we need it under image method
866:07 - with self we need a parent
866:10 - and then well we are going to need a lot
866:13 - of the stuff up here
866:14 - as a matter of fact let me just copy it
866:16 - all in terms of changes this one does
866:20 - not need a font but we do need an image
866:23 - this image we're going to create inside
866:25 - of the calculator
866:27 - which means we don't have to create it
866:28 - in here
866:30 - once we have all of that
866:32 - I have to create a super Dunder init
866:36 - method
866:38 - with the usual stuff
866:40 - as a matter of fact I can copy all of
866:43 - the stuff I created up here and simply
866:45 - paste it down here
866:48 - with that I can get rid of the font but
866:52 - I do have to replace it with an image
866:55 - which is going to be the image we're
866:57 - getting from the parameters
866:59 - also let me put it up here so if the
867:01 - styling all together
867:02 - once we have that I want to place this
867:05 - button using the grid method which once
867:09 - again is going to be very similar
867:10 - compared to this grid method
867:12 - so I can simply copy the entire thing
867:14 - and we don't have to change very much
867:17 - while I'm here I did realize I forgot
867:20 - one thing and that is inside of settings
867:22 - if I go up a bit we have a gap this Gap
867:26 - I haven't used right now but I do want
867:28 - to use it
867:29 - which I can do by adding pad X is going
867:33 - to be styling
867:35 - and this one I called Gap at least I
867:38 - think I did yeah Gap
867:40 - this is going to be pad X and will also
867:43 - be
867:44 - pad
867:45 - y
867:46 - which I want to do both for the image
867:49 - button and for the normal button this
867:53 - one up here they both got this kind of
867:55 - padding it's not going to be visible for
867:57 - now but later on it is going to be this
867:59 - tiny black line between the buttons
868:02 - with that I can minimize the button and
868:05 - now for the image button we are
868:07 - basically good to go
868:09 - what we have to do now is actually use
868:11 - this button which is going to happen
868:13 - inside of the calculator.pi file in here
868:16 - first of all I have to import this
868:18 - button which means image button with
868:21 - that we can use it if I run this we can
868:24 - certainly import it the program doesn't
868:26 - crash
868:27 - now inside of the calculator I don't
868:30 - need the init method instead I want to
868:33 - work inside of my create widgets in here
868:37 - I want to create the invert button
868:41 - this button is going to be an image
868:43 - button
868:44 - but before we can create that we have to
868:47 - create the invert image
868:50 - which is going to be is ctk and ctk
868:54 - image importing this is actually going
868:58 - to be your exercise I want you guys let
869:01 - me type it import the image and create
869:05 - the image button there are way too many
869:09 - typos in here
869:11 - image and see this is looking much
869:15 - better I want you guys to import the
869:17 - image and then create an image button in
869:19 - the appropriate Place pause the video
869:21 - now and try to figure this one out
869:23 - yourself
869:27 - ready first of all we have to import the
869:30 - invert image for that inside of ctk
869:33 - image we need two things we need the
869:36 - light image and we need the dark image
869:40 - both of those we are getting by using
869:43 - image dot open although this image we
869:46 - don't have available right now we're
869:49 - getting that all the way from the top
869:51 - let me put it below here I want from pil
869:56 - import image that way I can import
869:59 - images
870:01 - with that image.open
870:04 - the file path I am getting from this
870:07 - settings
870:08 - the one we are looking for right now is
870:11 - this one here inside of the operators I
870:14 - want to get invert this is going to give
870:16 - me another dictionary this dictionary
870:18 - has image path
870:19 - I want to get my operators
870:22 - I want to get the invert dictionary
870:24 - inside of this dictionary I have the
870:28 - image path
870:29 - meaning now we are in here which in fact
870:33 - is going to be another dictionary which
870:36 - has light and dark
870:38 - for the light image this is going to
870:40 - sound a bit counterintuitive I want to
870:42 - have the dark image
870:44 - on top of that for the dark image
870:49 - I want to have if I copy all of this
870:53 - I want to have the light image
870:56 - the way you want to think about it is
870:58 - that light image is the image for the
871:00 - light mode since we have a white
871:02 - background for this one we want to have
871:04 - a dark image whereas for the dark image
871:06 - so the image for the dark mode we have
871:09 - lots of black so for the actual image we
871:11 - want to have the light image
871:13 - now we have to figure out the image
871:15 - button for that we need all of these
871:19 - parameters
871:20 - the color can stay dark gray this one is
871:22 - totally fine
871:24 - for the parent I want to have self
871:27 - text
871:29 - we can simply leave MD like so
871:32 - for the function for now this should be
871:35 - over multiple lines
871:36 - we want to create another method
871:39 - I call this one invert once again no
871:43 - need for any parameters and for now I
871:46 - just want to print invert
871:48 - the function is going to be self dot
871:51 - invert
871:53 - next up we have to column the row and
871:55 - the image the image is the really easy
871:57 - bit because this is what we just created
871:59 - invert image
872:01 - column and row we are getting from the
872:04 - settings in here I want to get operators
872:07 - invert this one has column and row
872:11 - although this I can simply copy from the
872:13 - other buttons
872:15 - I have operators they shouldn't be
872:17 - percent this should be invert
872:20 - the same I can do for the row
872:23 - this should be in Verge
872:26 - and row with that we should be having
872:31 - something working let's try with that we
872:33 - have a button I can click on it we get
872:35 - invert and we also get the hover effect
872:38 - on top of that we check the light mode I
872:41 - want to set this dark detect to false
872:45 - once again run this again and there we
872:47 - go this also works in light mode
872:50 - meaning I can go back to dark mode and
872:52 - this is looking really good
872:55 - there's one more change that I do want
872:57 - to make and that is that this text right
872:59 - now is not really necessary however if I
873:03 - go to the buttons and don't set a text
873:06 - here
873:07 - run this again we get ctk Button as the
873:10 - default text which is well not ideal we
873:15 - do need this text in here however what
873:17 - we can do we can set a default argument
873:19 - for the text but for that to work we
873:22 - have to put the text all the way at the
873:24 - end and now we can set a default empty
873:27 - string
873:28 - this text needs to be at the end because
873:30 - we have a default value whereas for
873:33 - these we don't
873:34 - once we have that we have a default
873:37 - value so inside of this image button I
873:39 - can get rid of the text which is looking
873:41 - a tiny bit cleaner the result is still
873:43 - going to be the same with that I can get
873:47 - rid of the exercise and we have our
873:49 - image button you might be wondering now
873:52 - if I look at the buttons the normal
873:55 - button and the image button look really
873:58 - similar they are roughly 80 identical so
874:03 - why didn't I use the button as the
874:05 - parent for the image button and that is
874:08 - a really good question
874:09 - what I've could have done for example is
874:12 - combine these two classes where the
874:15 - button gets an image argument which by
874:18 - default is going to be none
874:20 - and after the init method I can check if
874:23 - an image exists and if that is the case
874:25 - I want to run self.configure and set the
874:29 - image to the image we get that way we
874:32 - could have skipped this entire bit
874:34 - however this didn't work in custom t
874:37 - Kinder whenever I tried this I get some
874:40 - weird Behavior around the images
874:42 - which might be fixed in the future but
874:44 - right now this is some behavior that is
874:46 - there that's why I'm creating two
874:48 - separate classes for the next button
874:50 - though we are going to inherit from this
874:53 - button to create the number buttons but
874:55 - that's going to be the next bit
874:57 - I'll see you there at this stage we have
875:00 - three buttons which is a start but
875:02 - didn't get us very far so for this bit
875:05 - we are going to create all of these
875:07 - number buttons
875:09 - that is a terrible square but we're
875:12 - going to create these buttons here
875:14 - for that we are going to use the base
875:16 - buttons we have created and then use
875:18 - inheritance to create the other buttons
875:20 - that way we don't have to start entirely
875:23 - from scratch
875:24 - also it's a really good way to practice
875:26 - inheritance let's have a look at this
875:28 - one here I am back in my code I want to
875:31 - work inside of the buttons and let me
875:34 - minimize everything
875:36 - I want to create another class
875:39 - I have caught this one a num button
875:43 - really important here this num button is
875:46 - going to inherit from the button the one
875:49 - we created a tiny bit earlier this one
875:51 - here
875:53 - in fact let me open both then I can
875:56 - explain a bit better what's going on
875:59 - as always we are going to need the
876:01 - dunder init method in here
876:04 - this one needs a couple of parameters
876:06 - now
876:07 - self is the usual one after that I need
876:11 - a lot of the parameters that we created
876:13 - up here in fact let me just copy all of
876:16 - them we have parent text function column
876:19 - row font and color
876:22 - there's one change that I already want
876:24 - to make that is inside of color these
876:27 - buttons shouldn't be dark gray instead
876:30 - they should be inside of settings I have
876:32 - the colors
876:34 - they should be light gray
876:36 - let me copy this color here
876:39 - I can paste it in there and now we have
876:43 - a light gray color already this covers
876:46 - the entirety of the color
876:47 - inside of the init method we need Super
876:51 - Thunder init
876:53 - what is really important to understand
876:55 - now is that this thunder in it is going
876:58 - to call this init method as a
877:02 - consequence we have to get all of these
877:06 - parameters
877:07 - and find a value for them
877:09 - we're going to put all of this over
877:11 - multiple lines
877:12 - for the parent we want to use the parent
877:14 - or the text we want to use the text or
877:18 - the function for now we just want to use
877:20 - the function column is going to be the
877:23 - column
877:24 - row is going to be the row
877:27 - bond is going to be the font and color
877:29 - is going to be the color
877:32 - in this case since we simply duplicated
877:35 - all of these parameters this might seem
877:38 - quite mundane but what this is already
877:40 - giving us is all of this styling here
877:45 - basically what is happening when we are
877:47 - calling this init method
877:50 - we are taking all of these parameters
877:52 - we're going to create them in just a bit
877:53 - and then we are going to this init
877:56 - method
877:58 - inside of this one we are adding
878:00 - Arguments for all of these parameters
878:03 - after that we are going to create the
878:06 - actual button
878:08 - which means for example this color here
878:11 - light gray would now be this color here
878:14 - so instead of dark gray we get light
878:16 - gray because of that these three colors
878:19 - here are now going to give us a light
878:22 - gray instead of a dark gray color
878:24 - I hope all of that makes sense
878:25 - inheritance can be a tiny bit tricky
878:28 - especially at the start
878:30 - let's actually create the buttons and
878:32 - then this should make a bit more sense
878:34 - first of all I have to import the num
878:37 - button
878:38 - I think that's what I called it yeah
878:40 - this num button here
878:42 - inside of the calculator not in the init
878:45 - method but inside of create widgets I
878:48 - now want to create all of the number
878:51 - buttons
878:53 - for that I want to look at settings in
878:56 - here we have num positions
878:59 - for each num position we have a value
879:02 - and then a dictionary
879:04 - the dictionary contains a column a row
879:06 - and a span most of the buttons only span
879:09 - a single column with the exception of
879:12 - the zero button this one spans two we
879:15 - cannot account for this just yet but we
879:18 - will cover that in just a bit
879:20 - for now I just want to go over this
879:22 - dictionary and use the column and the
879:24 - row to place all of the buttons
879:26 - for that inside of the calculator I am
879:29 - going to need a for Loop
879:31 - for the number and the data in num
879:37 - positions this is the dictionary here
879:42 - on this I want to get the key and the
879:44 - value which I'm getting with items
879:47 - the key I am storing a num the value
879:49 - inside of data meaning the data is going
879:52 - to be this dictionary here
879:55 - once I have that I can create a num
879:58 - button
880:00 - the number now is going to need all of
880:02 - the parameters I have set up here color
880:05 - has a default value so we can just
880:07 - ignore this one
880:09 - but for all the other values we need
880:11 - parent text function call row and font
880:15 - font is the easiest one let's start with
880:18 - this one
880:19 - I simply want to use the main font
880:23 - parent is also going to be really easy
880:25 - this should be self
880:28 - for the text I simply want to use the
880:31 - num because num is 0 to 9 or a DOT
880:37 - the function we don't have just yet
880:41 - for now let me add a Lambda function in
880:43 - here that is going to print the text so
880:46 - at the very least we have something
880:49 - for the column if I look at the
880:51 - dictionary inside of data we have column
880:54 - and row
880:56 - which means I can get data and column I
881:00 - can do the same thing for the row which
881:02 - is going to be data and row
881:07 - with that we have a number button if I
881:10 - now run the code we can see we have a
881:13 - whole lot more buttons this is getting
881:15 - much more efficient
881:17 - however we do have quite an obvious
881:19 - problem there is a big gap in here this
881:23 - exists because the zero button should
881:25 - cover two columns like so which we can't
881:29 - account for just yet to achieve that
881:31 - inside of buttons we have to update this
881:35 - num button so it is accepting another
881:37 - parameter
881:39 - which I'm going to call Span in this
881:41 - span we have to use inside of this grid
881:44 - method here
881:46 - which means we have to figure out how to
881:48 - get this span into this init method and
881:52 - then from this ended method we want to
881:54 - go into this grid here
881:57 - on top of that we have to make sure that
881:59 - when we are creating the normal button
882:01 - which we've done earlier for The
882:02 - Operators we are not getting an error we
882:05 - know that all of the operator buttons
882:07 - don't care about span they always have
882:09 - one
882:10 - we really have to make sure that we're
882:11 - not breaking these buttons all of this
882:14 - is going to be your exercise I want you
882:16 - guys to get the zero button to span two
882:19 - columns on top of that make sure that
882:22 - you don't break existing buttons also
882:24 - let me fix that typo that looks much
882:27 - better pause the video now and try to
882:29 - figure this one out you will need
882:31 - inheritance
882:36 - let's work backwards for this one first
882:39 - of all inside of grid we have to add one
882:42 - more argument let me put it right after
882:45 - the column we need a column span
882:49 - for most buttons in fact all buttons
882:51 - except the zero this is going to be one
882:54 - however for the zero it should be 2. as
882:57 - a consequence this can't be hard coded
882:59 - this needs to be span
883:02 - this span I'm going to get from the
883:04 - parameters I will put this one all the
883:07 - way at the end we want to have a span
883:09 - value
883:10 - once we have this parameter inside of
883:13 - num buttons we already have the spam
883:16 - button here so we can add span
883:20 - and span in here with that this is going
883:24 - to be passed into this span argument and
883:27 - then this span argument is going to span
883:29 - two columns
883:32 - however now if I run the calculator we
883:35 - are getting an error that non-default
883:37 - argument follows default argument
883:39 - this we can fix quite easily I can move
883:42 - span
883:44 - in front of the color
883:47 - although we are going to get another
883:48 - error that button in it is missing one
883:51 - required position argument Span in this
883:54 - error we are getting up here
883:57 - this button and this button as well the
884:00 - button for percentage and clear they now
884:03 - both want an argument for this span
884:05 - which we don't have
884:08 - to fix this you can approach this in two
884:10 - ways you could either add a span
884:15 - of one in here when you're creating the
884:18 - button
884:19 - however since they both have one this
884:22 - wouldn't be ideal instead what I would
884:25 - recommend is simply add a default value
884:27 - here of one
884:29 - with that these buttons should still
884:31 - work but now we're getting another error
884:33 - that when we're creating these num
884:35 - buttons we're not giving them a span
884:37 - argument which we can do quite easily
884:40 - because inside of settings we have a
884:44 - span value
884:45 - which means span is going to be data and
884:48 - span now if I run this here we go all of
884:52 - this is working perfectly fine now
884:54 - also I haven't clicked on any of the
884:56 - buttons yet we are getting an error here
884:58 - so we do have to work on that as well
885:01 - the text here shouldn't be text it
885:03 - should be num now if I run this we get
885:06 - well we always get nine
885:10 - something definitely went wrong here
885:12 - which doesn't matter so much because we
885:15 - have to create a custom function here
885:16 - anyway since I want to capture the input
885:19 - I want to create a method
885:23 - I call this one num press this one
885:27 - itself and it needs a value
885:30 - for now once again I simply want to
885:32 - print the value
885:34 - this nump press I now want to use as the
885:37 - function here although this should be
885:40 - self Dot numpress
885:43 - this however is going to give us an
885:45 - error if I run the code now we are
885:48 - getting
885:50 - calculated.numpress that's the method we
885:52 - just passed into the number button is
885:54 - missing one required position argument
885:56 - value
885:58 - which means we are passing in the
886:00 - function which right now is numpress the
886:03 - one I just created this one
886:05 - the problem is that numpress is
886:07 - expecting one value this value however
886:10 - we are not getting inside of this
886:12 - function
886:13 - to fix that we can use Lambda I want to
886:17 - get Lambda and then my function with
886:20 - that I can pass n parameters
886:23 - just to test this let me add test in
886:26 - here
886:28 - if I now run the code I can click on off
886:30 - the buttons and I'm always getting test
886:33 - that's looking pretty good
886:35 - what I can also do is pass the text in
886:38 - here the text for now we simply used for
886:40 - the button text but we can also pass it
886:42 - into the function and now
886:45 - I am getting the proper output for all
886:49 - of the buttons
886:50 - that is looking significantly better
886:53 - when we are passing in the numpress
886:56 - function we are passing it in here and
886:59 - from this function we are creating a
887:01 - Lambda function
887:03 - meaning we are wrapping the function
887:06 - inside of a Lambda function that way we
887:09 - can add parameters in this case the text
887:12 - all of this is going to create a new
887:15 - function which we are then passing into
887:17 - the command of the actual button
887:21 - that way we can create a function with
887:23 - parameters that is only going to be
887:25 - called when we are pressing the button
887:27 - or rather when the user is pressing the
887:29 - button
887:30 - so with that we have another major part
887:33 - which means I can minimize the
887:35 - calculator
887:36 - and finish up this section
887:38 - to finish up the layout I want to create
887:41 - the orange buttons
887:43 - they are mostly going to work like the
887:46 - number buttons which means we have to
887:48 - pass in a function and this function
887:50 - gets one argument
887:52 - which is going to be the Plus for the
887:54 - plus button the minus for the minus
887:56 - button equal for the equal button and so
887:58 - on the one difficulty is that these four
888:02 - buttons here are simple buttons whereas
888:05 - the division button has to be an image
888:07 - button
888:08 - but other than that there isn't going to
888:10 - be anything new so let's Jump Right In
888:13 - and let's see how far we get
888:15 - back in the code let's go to settings
888:18 - and let's see what we have what I now
888:21 - want to create are all of these math
888:23 - buttons
888:25 - the information for that is inside of
888:27 - the dictionary math positions we have a
888:29 - dictionary with the key being the
888:32 - operator so divide multiply minus equal
888:36 - and plus
888:37 - the value attached is a dictionary that
888:40 - has a column a row a character an
888:43 - operator and an image path
888:46 - although the only image we have is for
888:48 - the division button from that inside of
888:51 - buttons.pi below the number buttons I
888:54 - want to create the math button
888:58 - this one has to inherit from but turn as
889:02 - well
889:03 - because primarily this math button is
889:07 - going to work kind of like the number
889:09 - button the only difference that for the
889:12 - number button inside of the function we
889:14 - are passing in the text
889:16 - which means the text for the button is
889:18 - going to be the same as the text for the
889:21 - function for the math buttons this is
889:23 - not going to work because if I look at
889:25 - settings what the button is supposed to
889:27 - say is going to be inside of the
889:29 - character
889:30 - x minus equal or plus distributed text
889:35 - for the button however what we actually
889:37 - pass into the function is going to be
889:39 - inside of the operator
889:41 - as a consequence we can kind of copy
889:44 - this but we have to make some updates
889:46 - since this should be quite doable we can
889:49 - do an exercise right away
889:51 - I want you guys to create the math
889:53 - buttons the only important thing here is
889:56 - that you have to separate the character
889:58 - and the operator once you have that also
890:01 - all the buttons with a four Loop inside
890:06 - of calculator
890:08 - dot pi
890:10 - in calculator and create widgets
890:14 - there should be another for Loop
890:16 - somewhere here for the math buttons
890:20 - try to figure this one out also for now
890:23 - don't worry about the image
890:25 - I will cover that after the exercise
890:31 - first of all I need a Dunder init method
890:34 - as a matter of fact I will need most of
890:37 - this so I can simply just copy it all
890:40 - and then we can work on it the first
890:43 - minute I want to do is to update the
890:45 - color because I know that all of these
890:48 - buttons should be orange
890:51 - also they don't have a span value
890:53 - because they're all simply occupy a
890:56 - single cell meaning I can get rid of
890:58 - span entirely
891:00 - that is looking better the final change
891:02 - that we have to make I'm going to put
891:04 - this right next to text besides the text
891:07 - for the button I also want to have an
891:09 - operator
891:10 - this operator I'm going to pass into the
891:13 - function which means now we have a
891:15 - separation between a text so what the
891:17 - button looks like and the operator so
891:20 - what the button actually does
891:22 - other than that we are good to go for
891:24 - the math button there really wasn't that
891:26 - much to do in here
891:28 - so now inside of the calculator first of
891:30 - all all the way at the top I have to
891:33 - import the math
891:34 - button
891:36 - once I have that class
891:39 - I want another for Loop for let's call
891:42 - it operator and data once again in the
891:47 - dictionary I have called math positions
891:51 - don't forget to call items on this one
891:54 - that way we get the key value pairs
891:57 - I want to create a math button
892:00 - this math button is now going to need
892:03 - all of these arguments let me copy them
892:06 - and paste them in here
892:09 - first of all the font is super easy it
892:12 - is going to be the main font we have
892:13 - done this a couple of times by now
892:15 - parent is also going to be easy tap on
892:18 - is going to be self after that we need
892:20 - text operator function column and row
892:25 - most of these are fairly easy
892:29 - if I open settings inside of the
892:31 - dictionary which is data in our for Loop
892:34 - we have column row character and
892:37 - operator
892:38 - also I realized in this one that I have
892:41 - duplicated data a tiny bit
892:43 - these operators here
892:45 - and the keys for the dictionary are
892:48 - identical
892:49 - meaning we could use either one it
892:52 - really doesn't matter
892:53 - I suppose what I could be doing is
892:55 - simply get rid of the operator
892:58 - then all of this is going to be a bit
893:00 - cleaner
893:02 - with that we're getting the actual
893:04 - operator from the keys
893:06 - which is good because I call them the
893:08 - operator
893:09 - but now inside of the text I want to
893:13 - have data
893:16 - this value I called character or at
893:19 - least I think I did
893:21 - we are using this character here
893:24 - also note for the division we don't have
893:26 - anything right now but that's okay we
893:28 - will fix that in just a second for the
893:30 - operator we're just going to use the
893:32 - operator
893:34 - the function we don't have right now so
893:38 - below the number press
893:40 - I want to have another function that I
893:42 - called math press
893:45 - like number press this one needs self
893:47 - and a value although again I simply want
893:51 - to print the value that we are getting
893:52 - for now
893:54 - this function I'm going to pass in here
893:56 - self dot math press
894:00 - finally we have the column and the row
894:03 - this is information that's quite easy to
894:05 - get we need the column and we need the
894:08 - row
894:09 - with that we should be having some
894:12 - buttons and this is looking pretty good
894:14 - let me move it to the side
894:17 - at the very least we have multiply minus
894:20 - plus and equal and you can also see
894:22 - these buttons do print the required
894:25 - value
894:25 - the one thing that doesn't work right
894:27 - now is the division button
894:30 - this part here is looking very sad right
894:33 - now
894:35 - for that we are going to need an image
894:37 - button
894:38 - to create this one let me get rid of the
894:41 - exercise text and minimize all of the
894:44 - stuff we have so far what I want to do
894:46 - now is use this image button and then
894:49 - create another math button that can take
894:51 - an image this is going to be another
894:54 - class
894:55 - I call it this one math image button
895:00 - this one has to inherit from the image
895:02 - button
895:03 - this one is going to be quite similar
895:05 - compared to the math button so let me
895:08 - copy all of it
895:10 - then we have something to work with the
895:12 - major difference is that this math image
895:15 - button is going to need an image
895:17 - let me create a parameter by removing
895:19 - the font because we don't need that one
895:21 - anymore in fact we can't use it because
895:24 - the image button doesn't have a font we
895:26 - don't need font anymore
895:29 - instead now we have to pass in an image
895:33 - which is going to be image
895:35 - to understand what is going on we once
895:37 - again have to make sure that this super
895:40 - knit is targeting all of the parameters
895:43 - of the image button in knit method
895:46 - in there we have a parent this one we
895:48 - have we need a function this one we also
895:50 - have we need column and row those we
895:53 - also have we need an image this we have
895:56 - text we don't need because we have a
895:58 - default argument and color we do need
896:01 - because we want to have a different
896:02 - color which we do have
896:05 - which means now we have a MAV image
896:07 - button we just have to figure out how to
896:10 - create it in the for Loop all of that is
896:12 - going to happen inside of the calculator
896:13 - although once again first of all I have
896:17 - to import my math image button
896:21 - I don't need the init method also I can
896:24 - minimize all of these buttons so this is
896:27 - a bit easier to see
896:29 - inside of this for loop I now want to
896:32 - check if I want to create a math button
896:34 - or a MAV image button this sounds very
896:37 - much like an if statement
896:39 - now I just have to figure out the
896:42 - condition which is fortunately quite
896:44 - simple if I look at settings
896:47 - the thing that makes this division entry
896:50 - unique is it has an image path all of
896:53 - the other entries simply have none for
896:55 - the image path
896:57 - since none is going to evaluate to false
897:00 - inside of an if statement all I have to
897:02 - do is instead of this if statement check
897:04 - my data and then the image path
897:08 - which is telling me if this is true
897:11 - I have an image
897:14 - however if that is not the case so else
897:17 - I don't have an image meaning I just
897:19 - want to create a math button
897:22 - just to test this let me add a pair
897:25 - statement in here run this again the
897:28 - calculator still works just fine but now
897:30 - we have
897:31 - nothing in here because this is what we
897:34 - singled out with the if statement
897:37 - this I now want to replace with a math
897:39 - image button
897:42 - this one to get the parameters let me
897:45 - copy it from the buttons in here I need
897:48 - all of these and once again
897:51 - we need a parent and this parent is
897:53 - simply going to be self I realized I
897:56 - didn't get rid of the text let's remove
897:58 - it right now in fact inside of the
898:00 - buttons this text here shouldn't exist
898:03 - at all
898:04 - I have to remove it from the parameters
898:06 - and from the init method that's much
898:09 - better
898:11 - next up the operator is simply going to
898:14 - be the operator
898:16 - the function is going to be self dot
898:19 - math press next up we have the column
898:22 - this in fact these two entries I can
898:27 - copy from the math press
898:29 - let me paste them in here like so and
898:32 - the final thing we need is an image
898:37 - since for this one we have a slightly
898:40 - larger line I want to create this in a
898:42 - separate variable I'm going to call this
898:44 - one the Divide image
898:47 - which is going to be ctk ctk image
898:52 - we as always going to need two arguments
898:55 - we need a light
898:58 - image and we need a dark image
899:01 - both of those we are getting with image
899:05 - dot open and then a file path
899:08 - this file path we are going to get from
899:11 - inside of settings we have image path
899:13 - which is going to be another dictionary
899:15 - with light and dark entries
899:18 - this we access with data inside of here
899:21 - we have an image path
899:24 - for the light image so the image for the
899:27 - light mode I want to have the dark image
899:29 - because remember light image means we
899:31 - have a bright background so we want to
899:33 - have a dark image without this we
899:35 - wouldn't have any contrast
899:38 - the same thing I want to do for the dark
899:40 - image with the one difference that now
899:42 - we want to have a light image
899:44 - this is giving us the Divide image this
899:46 - I'm passing into the image and now I can
899:49 - run this thing and there we go we have
899:52 - the division button I can also click on
899:54 - it and we get divide
899:56 - with that we have all of the buttons
899:59 - working
900:00 - on top of that I can now minimize the
900:04 - calculator
900:05 - I want to test if this is also working
900:07 - with light mode which I can check by
900:10 - adding faults into the calculator run
900:12 - this now and there we go
900:15 - now we are getting a dark image for this
900:17 - button although it still also works
900:20 - but once again I want to use the dark
900:22 - mode
900:23 - with that I can minimize all of the
900:26 - classes and we have made a ton of
900:29 - progress this covers the entirety of the
900:31 - layout now that we have the entire
900:34 - layout we can start working on the logic
900:36 - of the calculator which means I can type
900:38 - some numbers and actually get a result
900:42 - unfortunately for all of this we have to
900:45 - cover quite a bit of logic I think this
900:48 - is best done when I jump right in and
900:50 - explain it while we are doing it the
900:52 - logic here does get a tiny bit more
900:54 - advanced
900:55 - fortunately we can work entirely inside
900:58 - of the calculator that works because we
901:01 - don't need the init method we also have
901:03 - all of our widgets we have these methods
901:07 - here numpress is giving us all of the
901:10 - numbers math press will give us the math
901:13 - buttons and then we have clear percent
901:15 - and invert these are all of the buttons
901:18 - of the calculator
901:19 - which is quite handy I don't have to
901:22 - worry about the buttons or the settings
901:24 - although as a reminder there's one
901:27 - important thing in terms of data that we
901:29 - have to be aware of inside of the init
901:31 - method we have a result string and a
901:35 - formula string result is going to show
901:37 - the results and formula out the formula
901:40 - that was a very pointless sentence sorry
901:44 - but basically what we want to start with
901:47 - is when I'm pressing the button I want
901:50 - to show the number inside of the result
901:52 - string
901:53 - this is actually quite simple all we
901:55 - have to do inside of the nump press
901:57 - instead of printing the value I want to
902:00 - update self dot result string and then
902:04 - set this to the value
902:06 - if I run this now let me move this to
902:08 - the middle I can click on all of the
902:10 - numbers and this is looking really good
902:14 - well really good is relative because
902:16 - right now we only ever get a single
902:19 - number
902:20 - so how can we get multiple
902:22 - to achieve that I want to create another
902:26 - entry inside of my data I'm going to
902:28 - need a list I call this one let's call
902:32 - it the display
902:34 - nums this is simply going to be a list
902:37 - what we're now going to do inside of
902:40 - numpress we are not going to set the
902:43 - value of the result string instead we
902:46 - are simply going to get the display nums
902:49 - and append the current value
902:53 - although I really want to make sure that
902:55 - I am only working with strings here that
902:56 - is really important meaning when I'm
902:58 - getting this value I want to convert it
903:00 - to a string right away let's see what
903:02 - this is going to give us I want to print
903:04 - self dot display nums
903:07 - now if I click on the buttons I get a
903:10 - list that gets increasingly longer this
903:14 - list I now want to convert to an actual
903:16 - number let's do this with a variable I
903:19 - want to have the full number for this we
903:22 - need a string and then the method join
903:25 - really important here this string needs
903:27 - to be empty
903:29 - inside of this join we need a list which
903:31 - we have
903:32 - this is our display nums I want to print
903:36 - the full number
903:38 - now if I run this let me move it to the
903:41 - side
903:42 - I get a number that becomes increasingly
903:45 - large I can also have the dot and this
903:47 - is looking good
903:49 - which means now I can set this full
903:52 - number as my value for
903:55 - self.result string like so with that I
904:00 - can click on all of this and I'm getting
904:04 - a pretty good result
904:06 - I can also use the dot and then at some
904:08 - point the number gets too long but well
904:10 - I'm not too concerned about that
904:13 - now that we have that I can minimize
904:15 - numpress and work on my math press as a
904:19 - reminder in here we are going to do our
904:20 - math operations
904:22 - the very first thing that I want to
904:25 - check in here is that we actually have a
904:28 - number
904:29 - let me actually return to the print
904:31 - statement
904:32 - let's say we have the calculator
904:35 - these buttons here for equal plus minus
904:38 - multiply and divide that should only be
904:41 - possible to use once we have a number
904:43 - for example if I have a 6 then I should
904:46 - be able to use these numbers
904:48 - however if we don't have a number they
904:50 - shouldn't be available or at the very
904:52 - least when we are pressing them they
904:54 - shouldn't do anything
904:55 - for that I first of all want to get my
904:58 - let's call it the current
905:00 - number
905:02 - this is going to be the same thing I
905:04 - have done inside of numpress I can
905:06 - literally just copy it
905:08 - now I want to check if the current
905:11 - number exists
905:13 - if that is the case let's for now print
905:16 - do stuff
905:18 - also I want to print the current number
905:22 - just so you know what's happening
905:24 - if I now click on the X we can't see
905:28 - anything because we get an empty string
905:30 - that well doesn't do very much
905:33 - but if I now click on 66 and now I'm
905:35 - minus we get 66 and do stuff and you can
905:39 - see here we have two empty Fields this
905:41 - is this empty string
905:44 - which means we know that this is working
905:47 - inside of the current number we now have
905:51 - to figure out what to do with these
905:53 - values the thing that I started with is
905:56 - another list inside of the init method I
905:59 - want to have self dot let's call it the
906:02 - full operation which is going to be an
906:06 - empty list when we get started
906:08 - with that I can also minimize the init
906:10 - method because these are the only two
906:12 - lists that we are going to need
906:14 - basically what I want to do if we have a
906:17 - current number I want to get my self dot
906:21 - goal operation and then append the
906:25 - current number
906:27 - that way we're getting the current input
906:29 - besides that what I want to do I want to
906:32 - get self.fully operation again and then
906:35 - append the value which in this case is
906:38 - going to be the operation
906:40 - to demonstrate what's happening let me
906:42 - print self dot full operation
906:46 - I want to type on 56 then multiply it
906:49 - now we get 56 and multiply
906:52 - if I now click on 3 and plus we get some
906:56 - decently looking results but it's not
906:58 - perfect
906:59 - at the very least we can work with this
907:01 - but we do have to make some updates
907:03 - first of all I want to start with
907:06 - another if statement that if the value
907:09 - is different from equal
907:14 - only then do I want to do some math
907:16 - operations
907:17 - if that is not the case let me add an
907:19 - else statement right away
907:22 - I want to print
907:24 - result
907:26 - the logic here should be quite obvious
907:29 - if I run the calculator again these four
907:32 - buttons here for divide multiply minus
907:34 - and Plus data to actual math operations
907:36 - however the equal sign should simply
907:39 - give us the result the logic for this
907:41 - one is slightly different this is why
907:43 - I'm separating the two if however we
907:46 - don't have the equal sign then I want to
907:49 - append the current value
907:52 - besides that I also want to get my
907:55 - display nums and then clear the list
907:58 - which is simply going to empty all of it
908:00 - that way we don't get duplicate values
908:04 - in fact let me print self dot not
908:08 - display nums but full operation that's
908:10 - the one we care about right now I can
908:12 - now get 12 and plus which gives me 12
908:16 - and plus which looks like a decent
908:18 - operation but now if I go to 34 and
908:21 - minus now we are separating all of this
908:24 - properly the way you have to understand
908:26 - this this is quite important so let me
908:29 - cover it in a bit more detail
908:31 - we are always starting with a numpress
908:33 - at the end of it in terms of data we are
908:36 - getting display nums
908:39 - this could for example be a list with
908:43 - one and two both are going to be strings
908:46 - but this one doesn't matter right now
908:48 - once we have that and we are pressing MF
908:51 - button
908:52 - if there is a current number which we do
908:55 - have right now we'll be running this bit
908:57 - here which is going to give us another
908:59 - list inside of this list we are
909:02 - combining these values which right now
909:05 - would give us a 12.
909:08 - after that if we don't have an equal
909:11 - sign we get to this bit here which is
909:14 - going to append the value
909:17 - this could be a plus
909:19 - with that we have another list
909:22 - what is really important now is this
909:24 - line here this is going to clear the
909:27 - display numbers
909:28 - which means we're getting rid of this
909:30 - one and this 2 in our case
909:33 - as a consequence the next time we are
909:35 - clicking on the number press we are
909:37 - adding new numbers in here
909:40 - those could for example be three and
909:43 - four could be as many numbers as you
909:45 - want
909:46 - after that if we press on this again we
909:50 - are now combining these two numbers add
909:53 - them in here and after that we are
909:56 - adding the value once again so we get 34
910:00 - and then we would get minus
910:03 - which is then going to give us a really
910:06 - clear operation that we can work with
910:07 - that is literally all that I wanted
910:10 - the issue we have right now is that the
910:13 - result cannot be seen but that we can
910:15 - fix quite easily what I want to do is if
910:19 - we are clicking on any of the math
910:21 - operators I want to get myself and my
910:25 - result string and set this to an empty
910:29 - value
910:30 - that way we can't see anything in the
910:32 - result
910:33 - to account for that I want to get self
910:35 - dot formula string and set this value
910:39 - what I want in here is a string then
910:42 - join
910:43 - I want to join self dot full operation
910:49 - what this is going to give us I can type
910:51 - in some numbers in here and now if I had
910:54 - multiply we get the operation I can also
910:57 - add more numbers
910:59 - or as long as I want
911:02 - this is working pretty well
911:05 - although what I don't like right now is
911:08 - all of this is really close to each
911:10 - other to fix that I have to add a space
911:13 - I should have mentioned this earlier
911:15 - the value you add inside of this string
911:18 - is what will be between the characters
911:21 - if it's an empty string it is simply
911:23 - going to be a tiny bit of space which
911:25 - looks much cleaner although you could
911:27 - add I don't know XXX in here now this is
911:30 - going to look horrible
911:32 - now we get XXX a whole bunch
911:35 - I simply want to have an empty value
911:38 - also I should be adding comments in here
911:41 - let's call this one update data and this
911:44 - one should be update output
911:48 - with that we are getting the value so
911:52 - next up I want to work on the result
911:55 - the really important question you might
911:57 - have for this one is let's say we have
912:00 - some kind of string that is 12 plus 43.
912:05 - we can print this but how would we get
912:07 - the result
912:09 - the answer here is one special function
912:11 - inside of python that is called eval
912:15 - let me run this one actually
912:17 - if I type any kind of number then I can
912:20 - use these buttons here if I now click on
912:22 - equal we get 55. this 55 is 12 plus 43.
912:29 - eval is simply going to evaluate some
912:31 - code and then give it a result
912:34 - I mentioned this in the introduction to
912:36 - python but this eval you have to use
912:38 - very very carefully
912:40 - if for example you allow the user to
912:43 - type some text then they could execute
912:45 - some code using this eval
912:48 - which would be a huge security risk in
912:51 - our case though we are making a
912:52 - calculator the security here isn't
912:54 - terribly important also we don't have
912:56 - user input so this shouldn't be an issue
912:59 - if however you're making a database for
913:01 - a website then this is definitely
913:03 - something to keep in mind
913:05 - so with that we can evaluate a formula
913:09 - which means we have to actually get our
913:12 - formula
913:13 - let's create another variable that I
913:15 - call formula
913:17 - this needs to be a string so I want an
913:20 - empty string with the join method and
913:22 - all of my operation is inside of this
913:25 - full operation attribute let me simply
913:27 - paste it in here
913:29 - I can run this now I can click on some
913:32 - math numbers so I get an operation and
913:35 - now if I have a number here I can click
913:37 - on equal we are getting the math
913:39 - operation this is looking quite good to
913:42 - get the result all I have to do is use
913:45 - eval and then we should be good to go
913:47 - for example if I have 56 minus 32 and
913:52 - click on eval and we're getting 24. that
913:55 - looks accurate
913:57 - this result I want to store the result
914:00 - is going to be eval of the formula
914:04 - once I have that
914:06 - I want to update my output
914:09 - I want to clear the full operation list
914:14 - finally display nums should have the
914:19 - value of
914:22 - the result and nothing else
914:26 - these three things are going to be
914:28 - reasonably straightforward meaning they
914:30 - are going to be your exercise pause the
914:32 - video now and try to figure this one out
914:34 - you're working entirely inside of this
914:37 - else statement
914:42 - I'm going to start by updating the
914:44 - output this is going to be quite similar
914:47 - compared to what we have done up here in
914:49 - fact let me simply copy it
914:52 - I want to first of all update the
914:54 - results string using set although now I
914:57 - don't want to empty it instead I want to
914:59 - get the result
915:00 - for the formula I could use this full
915:03 - operation here but I don't really like
915:06 - that because I already have the formula
915:08 - up here
915:09 - and there shouldn't be a space for this
915:11 - one
915:12 - with that we should be having a working
915:14 - output meaning now I can type 2 plus 3
915:18 - and then equal and we're getting five
915:20 - also we're getting the formula however
915:22 - there's no space between the values
915:25 - this I can fix quite easily all I need
915:27 - is a space in here eval doesn't care
915:30 - about that whatsoever
915:32 - which means now let's say six minus five
915:35 - is going to be one and we have a nice
915:38 - looking formula this is going to update
915:40 - the output besides that to cover these
915:44 - two bits here I want to update the data
915:48 - this once again is going to be somewhat
915:51 - comparable to what we have done up here
915:53 - I'm going to copy these two values
915:56 - first of all the full operation I now
915:59 - want to clear that way once we start
916:01 - typing again we're getting completely
916:03 - new values
916:05 - although to retain the result we have
916:07 - gotten I want to get my display num and
916:10 - set this to
916:12 - a new list that has a single entry which
916:15 - is going to be the result
916:18 - although this result right now is going
916:19 - to be a number but I only want to work
916:21 - with strings
916:23 - what this means if I now type
916:26 - 2 plus 3 get my equal now I can type on
916:31 - multiply and then you can already see we
916:34 - now have inside of the formula 5
916:36 - multiplied let's say by 9 and we get 45
916:39 - from this I can keep on working minus 31
916:43 - and we get 14.
916:46 - which is going to give us a basic
916:48 - working calculator
916:50 - meaning I can now get rid of the
916:53 - exercise text and we are nearly done
916:56 - there's one thing I want to cover that
916:58 - isn't exactly breaking but very annoying
917:01 - if I run this again and I type something
917:04 - like 8 divided by two if that is the
917:08 - case we are getting the correct result
917:10 - but this point zero is well entirely
917:13 - pointless
917:14 - also it might be confusing to some
917:16 - people so I would rather get rid of it
917:19 - on top of that if I run all of this
917:21 - again
917:22 - if I have something like 8 divided by 7
917:25 - we are getting a really really precise
917:28 - result but that isn't really necessary
917:32 - I would rather round this so it doesn't
917:34 - get too confusing
917:36 - which means inside of this bit here I
917:38 - want to add a tiny bit more logic let's
917:41 - call this one
917:42 - format the result
917:45 - for this I first of all want to check if
917:48 - the result is a floating Point number
917:50 - because only then do we get the weird
917:52 - Behavior
917:53 - this I can check with if is instance in
917:58 - here we need two arguments the first one
918:00 - is the value we want to check in my case
918:03 - this is going to be the result
918:05 - besides that the second argument is
918:08 - going to be the data type we're checking
918:10 - this result against which in this case
918:12 - is going to be a float
918:14 - which means all of this is going to
918:16 - check if the result is the data type
918:18 - load and this is going to return either
918:21 - true or false
918:23 - let's try this actually if this is the
918:26 - case I want to print float
918:28 - now if I type 5 divided by 2 and get the
918:33 - result we are getting float the result
918:35 - here is looking really good but this
918:38 - isn't given for example if I divide this
918:41 - by three we're getting some very strange
918:43 - Behavior once again which I want to
918:46 - account for the result you have just
918:48 - seen is we have too many numbers after
918:52 - the decimal this is the first problem
918:55 - the second problem is that we have an
919:01 - integer
919:02 - is formatted like a float which means we
919:07 - get stuff like 4.0
919:11 - these two cases we have to address
919:12 - separately to account for them I want to
919:15 - start with if the integer is formatted
919:18 - like a float
919:19 - to check for this kind of behavior if we
919:22 - have stuff like 4.0 python actually has
919:25 - another inbuilt method it is called if I
919:28 - want to check my result and the method
919:30 - here is called is underscore integer
919:35 - this is basically checking a number if
919:37 - it is an integer or not which means if
919:39 - we have a floating point value with 4.0
919:42 - this is going to be true if that is the
919:44 - case I want to get my result
919:47 - the value I want to assign is integer of
919:50 - the result
919:52 - to explain this one right now when we
919:55 - are getting this result here we might be
919:57 - getting something like 4.0 let me write
920:00 - it in here 4.0
920:02 - inside of this if statement we are then
920:05 - checking if this is a floating point
920:06 - value or not since we do have a DOT and
920:10 - a decimal value we know that this is a
920:12 - floating point value
920:14 - however this is statement here is going
920:17 - to check this value and see that it's
920:19 - simply dot 0 so we can simply ignore it
920:22 - this is actually an integer
920:26 - and because of that we're going to force
920:28 - it to be an integer which will remove
920:31 - anything after the decimal point and we
920:33 - simply get the number
920:36 - so I can run this again and now 8
920:38 - divided by 2 is simply giving us 4. that
920:42 - is feeling much better for the other
920:44 - case we can identify this with an else
920:46 - statement
920:48 - so let me get rid of this text here if
920:52 - this else statement is true we know we
920:55 - have an actual floating point value I'm
920:57 - going to keep the logic simple for this
920:59 - one I am simply going to assign a new
921:01 - value to the results this new value is
921:04 - going to be the rounded value of the
921:07 - result with let's say three values after
921:09 - the decimal point
921:11 - with that I can get rid of this comment
921:14 - as well and now we should be good to go
921:16 - if I now type 8 divided by 7 get the
921:20 - result I get 1.143
921:23 - now this logic is quite crude and not
921:26 - ideal because sometimes a user really
921:28 - wants to have precise results
921:31 - but well this is something you can work
921:33 - on yourself it shouldn't be too hard to
921:35 - implement
921:36 - for the next part we are going to
921:38 - account for the free operator buttons so
921:40 - clear percent and invert but other than
921:43 - that we are basically done now that we
921:46 - have the basic logic of a calculator we
921:48 - only have to account for these three
921:50 - buttons here to explain what they are
921:52 - doing let me type some numbers in here
921:55 - like so AC is simply going to clear the
921:58 - calculator to get a value back again we
922:02 - can now use this plus and minus button
922:04 - all that this one is doing is it gives
922:06 - us minus or plus so it inverts the
922:09 - current number the percentage sign
922:11 - divides the current value by a hundred
922:14 - that way we are getting well the
922:16 - percentage
922:17 - these are the three buttons we are going
922:19 - to create and they are not terribly
922:21 - difficult let's Jump Right In here I'm
922:23 - back in the code and I want to work
922:25 - inside of clear percent and invert Lear
922:29 - is by far the easiest one let's start
922:31 - with that one all I have to do in here
922:34 - is clear the output and clear the data I
922:40 - want to get myself dot result string and
922:44 - set this to a zero this is our default
922:47 - value for the result string besides that
922:50 - self dot formula string
922:53 - should simply be an empty string
922:56 - I also want to clear the data which is
922:59 - going to be self dot displaynums dot
923:03 - clear
923:04 - don't forget to call it besides that
923:07 - self Dot
923:09 - full operation this should also be
923:12 - cleared
923:13 - with that we have one part covered I can
923:16 - now type some numbers in here get the
923:18 - result if I now click on AC everything
923:21 - disappears
923:23 - that was quite easy I can now hide this
923:26 - method and not worry about it again
923:28 - next up we have to do either percent or
923:31 - invert
923:32 - let's start with invert this is the
923:34 - slightly more difficult one we first of
923:37 - all have to get the current number
923:39 - I want to get the current number this we
923:42 - get an empty string then join and then
923:45 - self dot display nums this is the same
923:49 - thing we have done inside of math press
923:51 - this button like the math buttons is
923:54 - only going to work if we have a number
923:56 - so if current number then we want to
923:59 - invert something Bishop makes sense
924:01 - because if we have 0 as the default
924:04 - value this isn't going to do anything
924:05 - plus and negative 0 is just going to be
924:09 - zero if we have a number however I want
924:12 - to check if it is positive or negative
924:16 - this is going to be an if statement to
924:19 - do an example let's say instead of
924:21 - display nums we have 1.5
924:25 - because of join this is going to become
924:29 - 1.5 as a string
924:33 - this number I now have to turn into a
924:36 - floating Point number that way I can
924:37 - check if it is positive or negative
924:40 - hence inside of this if statement I want
924:43 - to create a float from my current number
924:47 - if this resulting number is greater than
924:50 - zero then I know this is positive
924:52 - however if that is not the case else
924:55 - then I have a negative number
924:57 - what we now have to figure out is what
925:00 - to do with these results right now we
925:02 - have this case here our value is
925:05 - positive
925:06 - so how can we turn it negative
925:09 - for this one you do have to be careful
925:11 - because the number we want to make
925:13 - negative is this one here
925:16 - the value we are working with right now
925:18 - all of this is only temporary this is
925:21 - what we created here this is not the
925:24 - actual number that the calculator is
925:25 - working with what we ultimately have to
925:27 - do
925:28 - is add another value in here at the
925:31 - beginning this value has to be a
925:34 - negative
925:35 - and this we can do quite easily all we
925:37 - have to do is get self dot display nums
925:41 - and then insert a value
925:44 - this value has to be inserted at index 0
925:47 - and the value we want to add is a minus
925:51 - to test this one in the else statement
925:53 - I'm going to add a pass and also what we
925:56 - have to do is we have to update the
925:58 - output which we do with self dot result
926:01 - string I want to set this and once again
926:05 - I need dot join
926:08 - and self.d display nums
926:12 - let's try this by now if I simply click
926:15 - on invert nothing is going to happen
926:17 - this is because it only works if we have
926:20 - a number inside of display nums let's
926:22 - say if I click on 8 and 9. now if I
926:25 - click on negative we get Negative
926:27 - however if I click on it again nothing
926:29 - is going to happen
926:30 - but at the very least we do have a start
926:33 - this line here is working we now to
926:36 - figure out this one
926:37 - to explain how we need to approach this
926:39 - one let's do another example we now have
926:42 - to create a negative number the
926:44 - important thing here inside of display
926:45 - nums we have to start with a negative
926:47 - number the numbers afterwards don't
926:49 - really matter let's say one and two
926:53 - what this join is going to give us is
926:56 - negative 12.
926:59 - because of this if statement here we
927:01 - know that this is going to be negative
927:03 - so we are working inside of this else
927:05 - statement which means now we have to
927:07 - figure out what to do in here
927:11 - the answer for this one is actually
927:13 - quite simple we simply have to remove
927:15 - the first item from display nums and
927:18 - then we are good because that way we are
927:21 - turning a negative number into a
927:22 - positive number which means we're
927:24 - getting simply rid of this minus
927:27 - literally all I want to do is delete
927:30 - self dot display nums
927:33 - the value with the index 0. with that I
927:37 - can run this again let me type in 56 now
927:40 - now if I click on invert it's minus if I
927:43 - click on it again we get plus and this
927:45 - keeps on working
927:47 - also if I clear the calculator I can do
927:49 - one plus three if I now click on the
927:52 - result this is also going to work
927:56 - so this is looking quite nice we have
927:59 - covered invert
928:01 - next up we have to work on percent
928:06 - this one is going to be your exercise
928:10 - figure out what to do with this button
928:12 - as a reminder the actual functionality
928:15 - here is divide the current value by 100.
928:22 - pause the video now and try to figure
928:24 - out this one
928:29 - to get started with this one I have to
928:31 - check if we have any kind of numbers
928:33 - inside of display nums
928:36 - this is going to be kind of similar
928:38 - compared to what we have done with
928:40 - invert however for this one I don't want
928:43 - to get the current number I simply want
928:45 - to know if there's something inside of
928:47 - display nums or not which means I simply
928:50 - want to check if self.d display nums or
928:53 - not
928:54 - only if that is the case I want to
928:56 - create a current number
928:59 - this has to be a float
929:02 - off I need to use join and now the
929:07 - display nums
929:08 - several display numbers to be accurate
929:11 - you might be wondering now why am I
929:14 - doing this this way
929:16 - you might be tempted in here to type
929:18 - something like current number
929:22 - is going to be float and then the actual
929:25 - value and then check if or a number
929:29 - this unfortunately would not work let me
929:32 - get rid of it
929:34 - and demonstrate this on a separate code
929:37 - editor
929:38 - I am printing a value and the value I'm
929:40 - printing is the float value of some kind
929:43 - of string for example in here this could
929:45 - be one two three point four five this
929:48 - will be working just fine
929:50 - the problem is if this float is
929:53 - completely empty I am getting a value
929:55 - error
929:56 - which would crash the entire thing
929:59 - and with this kind of setup I'm avoiding
930:01 - that anytime I'm creating the current
930:03 - number which I want to turn into a float
930:06 - right away but I can only do this if the
930:09 - display nums so the list is not empty
930:12 - although once I have that I can convert
930:14 - this number I got this one the percent
930:17 - number
930:19 - this is simply going to be the current
930:21 - number divided by 100.
930:24 - also let me add some comments again I
930:26 - want to get the percentage number
930:31 - once I have that I want to update the
930:35 - data and output
930:37 - I have to start with self dot display
930:40 - nums
930:42 - what we now have to figure out is how to
930:44 - turn this percent number back into a
930:46 - list so we can keep on working with it
930:49 - also I realized there's a typo this is
930:52 - much better
930:54 - actually let's first test if this is
930:56 - working
930:57 - I simply want to print percent
931:00 - number
931:01 - if I now run this again I can click on 6
931:04 - and then press send and we get 0.06
931:08 - I can also clear this and three plus six
931:10 - is equal to 9 and percent again gives me
931:14 - 0.09 I can also click on this again
931:17 - multiple times but this doesn't do
931:19 - anything
931:21 - that we're going to work on in just a
931:22 - second
931:24 - what we now have to do is turn this
931:26 - percentage number back into display nums
931:28 - list that way we can keep on working
931:30 - with it
931:31 - to achieve that we need list
931:35 - string and then percent
931:38 - number
931:39 - the way you want to think about this
931:41 - this percent number could be 0.06
931:46 - which is going to be a floating point
931:48 - value
931:49 - if we're turning this into a string like
931:51 - so we didn't achieve very much however a
931:56 - string is some kind of list in a very
931:59 - primitive sense which means when we are
932:01 - putting it into the list function
932:04 - all we're doing is we are separating
932:06 - each value
932:08 - with a comma and then we have a list
932:11 - around it
932:13 - that way we get the list from the number
932:15 - the last thing that we have to do now is
932:18 - to update our result so result string
932:21 - dot set this is going to be a string
932:23 - again with join
932:25 - self Dodge display nums and then we
932:29 - should be good to go let's try
932:31 - if I now click on 9 then the percent
932:33 - this is working and since I turn the
932:36 - result into display nums again I should
932:38 - be able to click on it again and now we
932:40 - get increasingly smaller numbers
932:44 - also if I click on AC this returns
932:46 - everything back to normal and
932:49 - this is still looking pretty good
932:52 - cool with that I can get rid of this
932:56 - exercise command
932:58 - and other than that we have a calculator
933:03 - in this tutorial we're going to create
933:04 - an image editor you can see the result
933:07 - right here I can click on open image and
933:10 - import an image the one test image I
933:12 - have right now is called Otter
933:14 - if I open this one you can see we have
933:17 - the image this is by the way also
933:19 - responsive so I can resize it quite
933:21 - easily but much more importantly on the
933:23 - left side I have quite a few different
933:25 - options the first one is rotation this
933:27 - one rotates the image I can also zoom in
933:31 - or invert the image and revert all of
933:34 - this besides that I can change the color
933:36 - for example the brightness or the
933:39 - Vibrance I can also use black and white
933:41 - or invert
933:44 - after that we have effects and here I
933:47 - can set some blurriness or some contrast
933:51 - and I can work with extra options like
933:54 - Contour is going to be really visible
933:55 - and all of those options also work
933:57 - together
934:00 - for example if I use blur with this one
934:02 - you're not going to see anything so you
934:04 - do have to be careful here
934:05 - but for example if I return to color I
934:08 - can make all of this black and white
934:10 - or remove the invert then it becomes
934:13 - White
934:15 - finally I can export the image I can
934:17 - give it a file name let me call it dark
934:20 - water I can select a file path open
934:23 - Explorer I want to save it on the
934:25 - desktop so I select the folder and
934:27 - finally if I click on Save we have
934:29 - exported the image which means now if I
934:33 - open my desktop I have dark otter
934:35 - besides the normal author meaning this
934:38 - has worked also I can close the image
934:40 - and open another image for example the
934:43 - dark otter and then work with this image
934:45 - literally any image is fine so you can
934:48 - do whatever you want in here for this
934:50 - kind of project we are going to need the
934:52 - pillow Library which we have already
934:54 - used to some extent but for this video
934:56 - I'm going to go into much more detail
934:58 - now I am not going to cover everything I
935:01 - will only talk about the parts that we
935:02 - actually need
935:04 - that being said if you're interested in
935:06 - pillow I have made a whole separate
935:08 - video on YouTube that talks about all of
935:09 - the library in detail check this one out
935:12 - if you're interested but all of that is
935:14 - a couple of videos in the future for now
935:16 - I just want to create a basic window
935:19 - before I start with that I want to have
935:21 - a look at the folder this one is going
935:23 - to look like that let me increase the
935:25 - size a bit
935:27 - we are starting with two files we have
935:29 - main.pi and settings.pi main.pi contains
935:32 - the entirety of the logic settings
935:34 - contains the settings let's Jump Right
935:36 - In and let's see what we have right now
935:39 - main.pi is completely empty besides that
935:41 - we have settings.pi this one contains a
935:44 - couple of elements not terribly much
935:47 - all of this stuff here are the default
935:49 - values that we are going to need much
935:51 - later for example we have the default
935:53 - value for rotate which is going to be 0
935:55 - degrees
935:57 - besides that
935:58 - we have a couple of colors and this
936:00 - space shouldn't be there these are the
936:02 - colors for the styling of the app I am
936:05 - not going to go too crazy on The Styling
936:07 - because I want to focus on the actual
936:09 - logic but obviously you can apply your
936:11 - own Styles here it's quite easy to do
936:13 - with that let's create the basic app
936:16 - by the end of this video I want to have
936:18 - something like this a basic window with
936:21 - one button in the middle it should be
936:23 - really easily done
936:24 - for that first of all I have to import
936:27 - custom tkinter as ctk
936:31 - once I have that I want to create a
936:33 - class that I usually call app which
936:36 - inherits from ctk then we need it under
936:40 - init method with self and nothing else
936:43 - once we have that we can set up the
936:46 - window the most important thing in here
936:48 - is going to be super and then Thunder
936:51 - init without any arguments
936:54 - also for this app I want to keep the
936:56 - styling a bit simpler which basically
936:59 - means I always want to use the dark mode
937:01 - this I get with cdk and set the
937:04 - appearance mode
937:07 - with dark as the only argument in here
937:11 - besides that I want to run the app so we
937:14 - have something this I achieve with self
937:15 - dot main Loop
937:18 - after that I can create an instance of
937:21 - the app run the code
937:23 - and we are getting a basic window this
937:27 - isn't looking too bad with that covered
937:29 - I want to add a tiny bit more styling
937:31 - first of all I want to set a starting
937:34 - size which I get with geometry
937:37 - the starting size here should be 1000 by
937:41 - 600.
937:42 - let's see how that looks this seems fine
937:46 - besides that I want to update a title
937:48 - which I do with self.title I got this
937:51 - one the photo editor
937:55 - and there we can see in the top left we
937:57 - have photo editor for this app I am not
938:00 - going to color in the title bar because
938:02 - this one just seems fine
938:05 - although I do want to set a minimum size
938:07 - which I get with self.min
938:10 - size this one wants two arguments for
938:13 - the width and the height which I want to
938:15 - set to 800 and 500. which means if I run
938:19 - this now let me show my mouse I can
938:22 - resize this window however I can only
938:25 - make it this small
938:26 - later on when we have all of the widgets
938:28 - if the app gets smaller than this it's
938:30 - going to look really weird
938:32 - with that covered I want to create a
938:36 - layout
938:37 - once we have that layout I can create my
938:40 - widgets the One widget I want to create
938:43 - for now is some kind of import button
938:47 - although to be a bit more specific here
938:49 - this import button is going to be
938:51 - another widget which is going to be a
938:53 - frame with a button but first of all we
938:57 - have to think about the layout for that
938:59 - let me draw a tiny bit this is going to
939:02 - be the entire window once again imagine
939:04 - I can draw straight lines what I want to
939:06 - create right now is going to be a simple
939:09 - button right in the middle this we could
939:11 - achieve with basically any kind of
939:13 - layout method Place grid and pack would
939:16 - all work for this one however later on I
939:20 - want to have another kind of layout I
939:22 - want to have a panel on the left roughly
939:25 - here
939:26 - besides that I want to have a main panel
939:28 - in this area here for the image as a
939:31 - consequence our layout has to account
939:33 - for this button here and for this more
939:36 - elaborate layout
939:38 - although it's not that much more
939:39 - elaborate
939:41 - basically all I have done is I have used
939:43 - the grid layout to create one row and
939:46 - two columns the rows I get with row
939:49 - configure
939:51 - we only have a single row so row 0 with
939:55 - a weight of one
939:57 - the more important one is the column
940:01 - let me duplicate it actually right away
940:03 - those two columns are going to have
940:05 - different sizes the left one so column 0
940:08 - is going to have a weight of two the
940:10 - right one column one is going to have a
940:13 - weight of six
940:14 - that is all we need for now in here
940:16 - which means now we can work on the
940:19 - import button or rather the frame with a
940:21 - button
940:22 - this import button I want to create in a
940:25 - separate file simply because later on
940:27 - mannaut Pi is going to contain a ton of
940:29 - logic for the image manipulation
940:32 - which means I want to create a new file
940:34 - with Ctrl s and save this as let's call
940:37 - it image widgets don't forget dot pi
940:42 - inside of this file I'm going to contain
940:44 - the widgets for the image import and the
940:46 - image output
940:48 - for both of them we have to import
940:50 - custom t Kinder as ctk
940:54 - with that I can create another class
940:57 - this one is going to be called image
941:00 - import
941:01 - we're just going to inherit from cdk and
941:04 - ctk frame
941:07 - this one is going to be fairly
941:09 - straightforward I want this Frame to
941:11 - cover the entire window on top of that
941:16 - it should contain a single button right
941:20 - in the middle the button should say open
941:25 - image
941:27 - this should be fairly straightforward so
941:30 - it's going to be your exercise create
941:33 - this widget and then call it inside of
941:35 - main.pi the result should look something
941:38 - like this possibly now and try to figure
941:41 - this one out
941:45 - first of all we have to create a thunder
941:48 - init method this one itself and we need
941:52 - a parent
941:53 - once we have that we can call Super
941:55 - right away the only thing we have to add
941:58 - in here is Master needs to be the parent
942:02 - next up we have to place this widget
942:04 - which we do with self dot grid this one
942:07 - wants a column
942:09 - which is going to be zero however since
942:12 - I have specified two columns and I want
942:15 - my widget to span both of them I have to
942:17 - add column span
942:19 - answer this to two
942:21 - row is going to be super easy it's
942:23 - simply going to be zero finally I want
942:25 - to have sticky with north south east and
942:28 - west that way this widget is going to
942:31 - cover the entire window
942:33 - let's try it actually backend main.pi I
942:36 - want from
942:39 - image widgets
942:41 - and I want to import everything
942:44 - also I should fix my typo this is
942:47 - looking much better what I can do now
942:49 - down here under my widgets
942:51 - I can create this image import
942:55 - let me paste it right in we only need
942:57 - one argument which is sell for the
942:59 - parent
943:00 - if a run is now we can see that well we
943:03 - can't really see anything
943:04 - that is because this app here and this
943:07 - image import have the same background
943:09 - color
943:10 - we can change that though by setting FG
943:13 - color of the image import to something
943:16 - like red now if I run main.pi again we
943:19 - have a completely red app
943:21 - which means all of this is working
943:24 - that's a good start
943:25 - all we have to do now is that the button
943:27 - with ctk and ctk button
943:31 - the parent here is going to be self text
943:33 - is going to be open image that is all we
943:37 - need for now although we do have to
943:39 - place this button this we can do with
943:41 - the pack method by simply setting expand
943:44 - to true
943:46 - now if I run main.pi again we have a
943:48 - button right in the middle on top of
943:51 - that if I resize the window this button
943:53 - is always going to stay in the middle
943:55 - which is perfect for my purposes
943:57 - before I finish this video there's one
944:00 - more thing that I want to do let me run
944:02 - the app again when I'm clicking on open
944:04 - image I want to run a function however I
944:08 - want to contain all of the logic for the
944:10 - image inside of the app
944:13 - which is going to be a tiny bit of a
944:15 - problem because I want to contain all of
944:17 - the logic in here but the image import
944:19 - widget is going to call the function as
944:22 - a consequence I want to create
944:25 - the function in here I call This One
944:28 - Import image
944:30 - this one is going to need self and a
944:33 - path
944:34 - although for now we are simply going to
944:36 - print that path the path we're going to
944:39 - get in the next video it's going to be
944:41 - the file path towards an image
944:44 - this import image I now want to pass
944:47 - into the import image widget which I do
944:50 - with self dot import image
944:53 - the naming here arguably isn't ideal but
944:56 - this one here is a class whereas this is
944:59 - a method inside of the app class
945:03 - so now inside of image widgets I need
945:05 - another parameter
945:07 - let's call it the import function
945:10 - I can also get rid of the exercise text
945:13 - and create an attribute with import this
945:17 - shouldn't be Fung this should be Funk or
945:20 - function
945:21 - which is going to be the argument we
945:23 - just got
945:24 - after we have that
945:26 - this cdk button is going to need a
945:29 - command
945:30 - which is going to be a separate method I
945:33 - call this one the open dialog
945:36 - let's create this one right away Define
945:39 - open dialog
945:41 - inside of this method we have to create
945:43 - some kind of path for now we cannot
945:46 - really do that so let me simply ADD test
945:49 - in here
945:50 - besides that I want to import the image
945:52 - which I do with the import function
945:55 - meaning I want to call it with the path
945:57 - I just created
945:59 - this means now inside of main.pi I can
946:03 - run this method here when I'm clicking
946:06 - on this button
946:07 - let's try it if I now click on open
946:10 - image I can say test in the bottom left
946:12 - meaning this is working perfectly fine
946:15 - with that we have a really good start so
946:17 - in the next video we can work on
946:18 - importing the image
946:20 - now that we have a basic window I want
946:22 - to figure out if I click on the button
946:24 - how can I get this dialog on top of that
946:27 - if I open an image like this author how
946:30 - can I display this image
946:32 - which means we have to create an opening
946:34 - dialog and a canvas to display the image
946:37 - this shouldn't be too difficult to do
946:39 - let's Jump Right In back in my code
946:42 - inside of the class the issue right now
946:45 - is that this import image is simply
946:48 - printing a path later on we actually
946:50 - want to import an image for that though
946:53 - we have to create a proper path right
946:55 - now inside of the image import we always
946:59 - have test for the path this I want to
947:02 - change right away
947:04 - instead what I want to have in here is
947:07 - some kind of file dialog then this file
947:09 - dialog is going to return the path that
947:11 - I want to use
947:12 - for that tick enter has all we need
947:16 - although we do have to import something
947:18 - what we have to import is from tkinter
947:21 - import file dialog
947:25 - this is going to be a file dialog that
947:27 - can open a file or rather give us a path
947:29 - to a file
947:31 - to use it we have to get file dialog and
947:35 - then ask open file all in one word also
947:40 - don't forget to call it
947:42 - what this one is going to do if I run
947:45 - may not Pi again I can now click on open
947:47 - image and we get a file dialog on top of
947:52 - that if I open this order I can double
947:54 - click on it and now we are printing
947:57 - something else
947:58 - this is what we're getting from the path
948:01 - this path here is what we are printing
948:03 - right now
948:04 - most of the information in here isn't
948:07 - really important the only thing we
948:09 - really care about is the name because
948:12 - this one contains the file path to the
948:14 - image this is what we actually want to
948:16 - get
948:17 - which is quite nice because this part we
948:19 - can get very easy it's inside of the
948:22 - name of this path which means when I'm
948:24 - opening the path I want to get all of
948:27 - this which is going to return the object
948:29 - you have just seen this object has one
948:32 - attribute called name this name contains
948:35 - the actual path
948:36 - which means now if I run all of this
948:38 - again I can click on open image
948:41 - now I'm getting the proper path to the
948:43 - image of the author
948:45 - with that I can minimize the image
948:48 - import class and focus on main.pi
948:52 - what I now want to figure out is how to
948:54 - actually use this path to import an
948:56 - image for that first of all we're going
948:59 - to need the pillow Library which you
949:01 - usually use with from pil import image
949:06 - this I can now use to create an
949:08 - attribute let's call it self dot image
949:11 - which we are getting with image dot open
949:15 - the argument we have to pass in here is
949:17 - the path
949:18 - once we have that python is going to
949:20 - import the image and store it inside of
949:22 - an attribute that I called image
949:25 - we can actually test if this is working
949:27 - right away I can do for example self dot
949:30 - image dot show and then python over our
949:33 - pillow is going to show the image let's
949:36 - try I can click on open image
949:39 - otter and now I have to wait a bit
949:42 - and there we go python has opened the
949:44 - image meaning this is working just fine
949:47 - although this isn't actually what I want
949:50 - to do let me get rid of it
949:53 - instead I want to display this image
949:55 - inside of tkinder now for that we are
949:58 - going to need another widget I put this
950:01 - inside of the image widgets
950:03 - in here all the way at the bottom I want
950:07 - to create another class which is going
950:09 - to be image output
950:11 - let me minimize the image import because
950:13 - we don't need this one what is really
950:15 - important and what I talked about in the
950:17 - past is that to display an image in
950:20 - tkinder you want to use a canvas which
950:23 - means this image output is going to
950:25 - inherit from the canvas
950:28 - since the canvas is a part of tkinder we
950:31 - have to import this one separately as
950:32 - well which means besides the file dialog
950:35 - I want to have the canvas
950:38 - first of all inside of the class I as
950:41 - always want a Dunder in it method with
950:43 - self and parent
950:46 - there are two things I want to do in
950:47 - here the first one is super Thunder init
950:50 - and set the master to the parent
950:54 - besides that I want to use self dot grid
950:58 - and place the Grid in row 0 and column
951:03 - one also sticky should be north south
951:07 - east and west
951:09 - on top of that
951:10 - just to make sure that we can see this
951:12 - canvas I want to change the background
951:15 - to Red also I realized I forgot row 0
951:19 - here
951:21 - once I have that back inside of main.pi
951:24 - I have to figure out something else
951:27 - let me run the app to demonstrate right
951:29 - now we have the image open Button if I
951:32 - click on it I can select an image but
951:35 - now this image open still sticks around
951:37 - which would be annoying to display
951:39 - anything else as a consequence I want to
951:43 - get rid of this image import
951:45 - which could actually be a pretty good
951:47 - exercise for you
951:50 - I want you guys to hide the image import
951:53 - widget
951:55 - pause the video now and try to figure
951:57 - this one out
952:01 - first of all we have to figure out how
952:04 - to Target this image import we do have
952:07 - an instance of it but to Target it we
952:10 - have to store it inside of an attribute
952:12 - I call this one image import
952:16 - now that we have this attribute I can
952:19 - get self dot image import
952:22 - and now to hide it I need Grid or get
952:27 - let's try this one I can now click on
952:29 - open image click on the other and now
952:32 - the import button disappears
952:34 - which means this part is already done
952:37 - next up after hiding the import I want
952:40 - to create self dot image output
952:45 - this is going to be the widget I just
952:47 - created this image output here
952:50 - I can place it all the way at the end
952:52 - add cell for the parent and now let's
952:55 - run it and let's see what we get if I
952:57 - click on open image the author now we
952:59 - can see we have the canvas on the right
953:01 - side
953:03 - although I don't like the border around
953:05 - it to get rid of this one inside of the
953:09 - image output class we have to add a few
953:11 - more arguments in here
953:13 - those are BD is equal to zero then we
953:16 - have highlight
953:18 - thickness which is also going to be zero
953:22 - and finally relief should be rich
953:28 - let's try all of this I can click on
953:30 - open image and the author again and now
953:32 - we have a plain red background
953:35 - although this red color is not exactly
953:37 - what I want instead I want to have this
953:40 - color this is the same color as the
953:42 - background for custom tkinter which
953:45 - means now if I run all of this click on
953:47 - the utter we can't see a difference
953:50 - although the canvas is still there it
953:53 - just has the same color as the
953:54 - background this ensures that when we add
953:56 - an image later on it looks like the
953:59 - image is just by itself
954:01 - although that being said this color here
954:04 - should be inside of the settings
954:06 - let me put it all the way to top I got
954:09 - this one the background
954:11 - or rather the background color
954:13 - this should be this color here and I
954:16 - want to replace it with background color
954:18 - I can copy the color in Here and Now
954:21 - inside of image widgets all you have to
954:24 - do is from settings import everything
954:28 - with that I should have the same results
954:30 - like so this one is still working the
954:34 - last thing that we have to figure out is
954:35 - how to put the image on the canvas and
954:38 - for that there's one really important
954:41 - thing to understand you might be tempted
954:43 - to place
954:45 - this image inside of the image output
954:48 - something like as a second argument self
954:51 - dot image
954:53 - this would be possible but that's not
954:56 - what I want to do instead I want to make
954:59 - sure that the image only stays inside of
955:02 - the app
955:03 - since there are going to be a lot of
955:04 - changes to the image later on I really
955:07 - want to make sure that the logic stays
955:08 - contained which for now means that this
955:11 - image output is not going to get the
955:14 - image itself instead what I'm going to
955:16 - do is I'm going to create another method
955:19 - that I called resize image for now this
955:24 - image doesn't need any arguments I
955:26 - simply want self in here
955:27 - and what is going to happen at the end
955:29 - of this method is self dot image output
955:33 - dot create image discrete image we can
955:37 - use on any canvas and since our image
955:40 - output this one here simply is a canvas
955:43 - we can use this method
955:46 - and with that we're going to place the
955:48 - image
955:49 - there are three arguments we need to
955:51 - place in here we need x y and the image
955:54 - or more specifically we need an image TK
955:58 - X and Y for now can just be 0 and 0.
956:01 - although I will change those later on
956:04 - image Decay we don't have right now we
956:07 - simply have the image but this we have
956:09 - to convert for it to work properly with
956:11 - t kinder
956:12 - to create that although at the top
956:14 - besides image I also want to import
956:17 - image TK
956:19 - once I have that
956:22 - after I'm importing the image I want to
956:24 - create self dot image underscore TK this
956:28 - is created with image TK then dot photo
956:32 - image
956:34 - the only argument we have to pass in
956:36 - here is self dot image
956:39 - with that we have an image TK which we
956:42 - can set as the image for the canvas
956:46 - all we have to do now is call this
956:49 - method here which I'm doing at the end
956:51 - of the import method self dot resize
956:55 - image
956:57 - if I now run all of this again I can
956:59 - click on open image click on the other
957:01 - and we can see we have one part of the
957:04 - author this isn't working perfectly yet
957:07 - also if I resize all of this we're
957:10 - getting some weird Behavior
957:12 - but at the very least we can open a file
957:15 - dialog and we can import the image from
957:17 - this dialog
957:18 - for the next part we are going to make
957:20 - all of this look much better which means
957:23 - the image is going to fill the entire
957:24 - available space and also resize with the
957:27 - window
957:28 - we now have an image however the image
957:31 - we have doesn't look anything like the
957:33 - final thing which means for this part I
957:36 - want to make sure we can see the actual
957:38 - image and also if I'm resizing the image
957:41 - the image is being resized as well
957:45 - for that we have to add quite a bit of
957:47 - logic to update the image and to place
957:49 - it properly
957:51 - although the entirety of the logic I
957:53 - have covered in an earlier video on how
957:55 - to use images in tkinter I am basically
957:57 - going to use all of that so if you want
958:00 - to have a lot more detail check out that
958:01 - video
958:03 - here I'm back in the code and let me
958:05 - demonstrate what we have right now I can
958:07 - click on open image open the author and
958:10 - now you can see that what we have is an
958:13 - ideal I suppose what we can start with
958:15 - is to place the image right in the
958:18 - center of the canvas roughly here
958:20 - for that though I have to work inside of
958:24 - resize image and in here what I'm
958:27 - placing 0 and 0 I need to know the size
958:31 - of my canvas
958:32 - the best way to get that is to use an
958:35 - event
958:37 - although this event I can't easily get
958:40 - right now I'm simply calling resize
958:42 - image in here this I don't want to do
958:45 - anymore
958:47 - instead what I'm going to do is when I'm
958:49 - creating the image output I will insert
958:52 - this resize image method into it as an
958:56 - argument self dot resize image
959:00 - what this is going to do inside of the
959:03 - image widgets in image output
959:05 - first of all I have to create a resize
959:09 - image method
959:11 - and this resize image method I want to
959:14 - call anytime I am creating or resizing
959:17 - this image which we can get with self
959:20 - dot bind
959:22 - the event here is called configure
959:25 - if that is the case I want to get my
959:29 - resize image method
959:31 - which means we are now going to call
959:33 - this method here and we get the size of
959:36 - the canvas via the event
959:39 - as a matter of fact let me print the
959:41 - event and let's see what we get
959:43 - if I now run all of this again open the
959:46 - image and the other
959:47 - we can now see at the bottom we have
959:50 - configure event
959:52 - we have an X in the Y position those we
959:54 - don't care about but then we have a
959:55 - width and a height this is the width and
959:58 - the height of the canvas
960:01 - we could use that for example with event
960:03 - dot with and then divide it by 2 for X
960:08 - for y this is going to be event Dot
960:11 - height divided by 2.
960:14 - now if I try this and I click on open
960:16 - image we get something that looks
960:18 - significantly better
960:20 - also if I resize the image this will
960:24 - always stay in the middle although since
960:26 - we're not getting rid of the previous
960:27 - images we get a lot of weird stuff
960:30 - behind but at the very least we have a
960:32 - start
960:34 - also let me get rid of this print here
960:36 - that's going to be annoying first of all
960:38 - this resize image we are now going to
960:41 - call when we are creating this image
960:44 - output and when we are resizing it which
960:46 - means whenever we are resizing the
960:48 - window this resize image will be called
960:52 - the issue with that is that we are
960:54 - creating new images but we don't discard
960:56 - the old images
960:58 - as a consequence we end up with way too
961:00 - many images and this is eventually going
961:02 - to tank performance
961:04 - to account for that I want to get myself
961:06 - dot image output and then delete
961:10 - with the argument the string all this
961:13 - gets rid of anything on the canvas which
961:17 - means now once again I can get the other
961:19 - and now I can resize this thing and this
961:23 - is looking significantly better
961:25 - with that we can place the image what we
961:30 - now have to figure out is how to resize
961:31 - it
961:32 - for that we're going to need quite a bit
961:34 - of logic and once again for the entirety
961:37 - of the logic that you need here check
961:39 - out the dedicated video
961:41 - I will go over it briefly but for the
961:43 - full detail check out that video I
961:45 - suppose let me start with the biggest
961:47 - problem
961:48 - if I open the image again we want the
961:51 - image to always be fully visible
961:54 - which isn't the case right now I can go
961:56 - a bit further to the right and we can
961:58 - see more of the image
962:00 - so only with this do we show the entire
962:03 - image however if I make the image
962:05 - smaller
962:06 - we are cutting off some bits
962:08 - which means what I have to figure out is
962:11 - how can I not cut off certain parts
962:14 - for this one I have to know the aspect
962:17 - ratio of the image and of the canvas
962:20 - for example if this is the canvas
962:25 - if I have an image that looks something
962:28 - like this in this example the image
962:32 - would be taller
962:34 - than the canvas but less wide
962:37 - as a consequence when I'm resizing the
962:40 - image I want to scale the height down so
962:44 - that the entire image would end up
962:46 - something like this
962:50 - however the other side is if this is the
962:53 - canvas again
962:55 - I could also have an image that looks
962:57 - something like this in this example I
963:01 - would want to scale the width of the
963:04 - image to fit into the canvas
963:06 - as a consequence we want to start by
963:09 - figuring out if the image is wider or
963:12 - taller than the canvas
963:14 - for that we will need the aspect ratio
963:16 - both of the image and of the canvas
963:20 - let's start with the image we have the
963:22 - image up here
963:24 - and I want to get self dot let's call it
963:27 - image ratio
963:29 - to get the ratio all I want is the width
963:32 - divided by the height both of these
963:34 - numbers we can get quite easily the
963:36 - width we get with self dot image dot
963:39 - size this is going to return a tuple I
963:42 - want to have the one with zero that's
963:43 - the width the height is going to be the
963:47 - entrance with one so a one in here
963:50 - let's try this one I want to print self
963:53 - dot image ratio
963:56 - if I now run this I can open an image
963:59 - and we get 1.5
964:02 - this means that the image is one point
964:04 - times as wide as it is tall this
964:07 - specific number here doesn't matter but
964:09 - I do have to know it
964:11 - which means I don't need a print
964:13 - statement anymore but instead now I have
964:16 - to figure out the aspect ratio of the
964:18 - canvas
964:20 - which I can do inside of a resize image
964:23 - I want to get the current canvas ratio
964:28 - let me store this inside of a variable
964:31 - as well canvas ratio and this number I
964:34 - get with event dot width divided by
964:37 - event dot height
964:39 - basically the same operation we have
964:41 - done up here except we're getting our
964:43 - width and our height via different
964:45 - methods
964:46 - once we have that order resizing I now
964:50 - want to get a width and a height of the
964:53 - image
964:55 - although for that I first of all have to
964:57 - check if the image is wider or taller
965:00 - than the canvas for that we can use the
965:02 - canvas ratio for example I can check if
965:06 - the canvas ratio is greater than self
965:09 - dot image ratio
965:13 - this means the canvas is wider than the
965:17 - image
965:18 - if that is the case I want to get a new
965:21 - image height
965:23 - which is going to be the event DOT type
965:28 - in the case we have right now this one
965:30 - here is this version here
965:34 - what is really important to understand
965:35 - is that the canvas the yellow area is
965:38 - wider than the image
965:41 - as a consequence I want to scale the
965:43 - image in such a way that the top and the
965:47 - bottom
965:48 - touch the top and the bottom of the
965:50 - canvas which means they have the same
965:52 - height which I am achieving with this
965:54 - line here
965:56 - or at the very least for now I'm simply
965:58 - getting the height of the canvas but
966:00 - later on we're going to use the image
966:01 - height to resize the image
966:04 - which means all I have to figure out now
966:06 - is the image with
966:09 - this is very easily done because I have
966:12 - the image ratio for example for this
966:14 - image I know it is always one point
966:16 - times as wide as it is tall
966:19 - since I have the height I can simply get
966:22 - the image
966:24 - height and multiply this with self dot
966:28 - image ratio
966:30 - with that we have a new height and a new
966:33 - weft this we can now use to resize the
966:35 - image before we are placing it
966:38 - I am going to store this in a separate
966:40 - variable resized image this is going to
966:44 - be self dot image dot resize
966:47 - this method wants a tuple with the new
966:50 - width and a new height which in my case
966:52 - is going to be the image with and the
966:55 - image
966:56 - height
966:59 - with that we have a new image this image
967:01 - we now have to set as the TK image the
967:04 - one we created earlier but now we have a
967:06 - new image which means self dot image
967:11 - PK is going to be the same line I have
967:14 - used earlier let me just copy it
967:17 - and paste it in here although I don't
967:19 - want to have self.image now I want to
967:22 - have the resized image
967:25 - with that we have a start
967:27 - however we only cover one of the cases
967:31 - we need an else in here
967:34 - else like so we have to cover
967:38 - the canvas is taller than the image
967:43 - which means in here we're going to need
967:46 - an image with and an image
967:50 - height once again
967:52 - figuring out these two numbers is going
967:55 - to be your exercise
967:57 - figure out these two numbers
968:01 - once you have that all of this should be
968:04 - working and we can display an image
968:07 - pause the video now and try to figure
968:09 - this one out
968:14 - for this one if I open the drawing again
968:16 - the case we're working with right now is
968:18 - this one here
968:20 - which means the image is wider than the
968:23 - canvas as a consequence we want to scale
968:25 - the image to such a degree that we are
968:29 - covering the entire width of the canvas
968:31 - and then the height comes as a
968:33 - consequence
968:35 - so to get started I want to set the
968:38 - image width to the width of the canvas
968:40 - which can do very easily this is simply
968:42 - going to be event.wift
968:45 - from that I can also get the height
968:48 - I simply have to get the image with
968:52 - now for this one I know that the image
968:54 - is always one point times as wide as it
968:57 - is tall this we can also flip around
969:00 - which we simply do by dividing the image
969:03 - with with self dot image ratio
969:07 - these two operations here are doing the
969:10 - same thing we simply move them around a
969:12 - tiny bit
969:13 - with that we have an image with and an
969:16 - image height for all aspect ratios let's
969:19 - try this one now I can click on open
969:21 - image the author
969:23 - and now we're getting an error that
969:25 - float object cannot be interpreted as an
969:28 - integer
969:29 - the issue here is that when we are
969:31 - resizing an image the resize method
969:34 - wants integers for both the image width
969:37 - and the image height but right now when
969:40 - we're doing some of these operations
969:41 - we're going to end up with floating
969:43 - Point numbers
969:44 - that fortunately is very easy to fix I
969:47 - simply have to get all of these results
969:50 - and then wrap them inside of an INT
969:53 - function
969:55 - now if I try this again I can click on
969:57 - image utter and we have an otter what is
970:01 - really important now if I resize all of
970:04 - this
970:05 - we are almost okay we're getting a tiny
970:08 - bit of an error but most of this is
970:10 - working
970:11 - the error I got is that this event
970:13 - height is an attribute so I cannot call
970:15 - it
970:16 - let's try it now it should be working
970:20 - there we go we have the others and
970:22 - they're always looking pretty good this
970:26 - seems like the appropriate scaling
970:27 - Behavior
970:30 - with that I can get rid of this comment
970:33 - here for the exercise minimize all of
970:36 - the methods and we have covered another
970:38 - really important aspect
970:40 - there's one more thing that we have to
970:41 - work on before we can work on the actual
970:44 - input buttons If I open all of this
970:46 - again we do have the image but we don't
970:49 - have a close button which I want to add
970:52 - for this video
970:54 - this is a very easy thing to add let's
970:56 - Jump Right In back in my code I want to
970:59 - start by creating a widget for the close
971:01 - button this I want to do inside of the
971:04 - image widgets might not be the perfect
971:06 - position but I think it's good enough we
971:09 - are only showing the close button when
971:10 - we are showing an image so I think it
971:12 - fits in here quite okay
971:14 - this is going to be another class that I
971:17 - have called close output for The
971:20 - Inheritance here we are only going to
971:22 - need a ctk button
971:24 - although this button is going to need a
971:27 - thunder image method
971:29 - we need itself and I want a parent
971:32 - now we're just going to place it
971:34 - to place it we need this super thunder
971:37 - in it method Master is going to be the
971:40 - parent the text for this one is simply
971:43 - going to be an X
971:45 - after that I want to use the place
971:47 - method to place the button in the top
971:49 - right
971:51 - for that I want to use relative x with
971:56 - 0.99 and then relative y with 0.01
972:00 - finally I want to set the anchor to
972:04 - North East
972:06 - this should give me a button that I can
972:09 - see all the way in the top right of the
972:11 - window
972:12 - which means inside of main.pi after I
972:15 - have imported the image I have created
972:17 - all of this stuff here I now want to
972:19 - create the self dot let me call it close
972:23 - button
972:25 - this will be the close output button we
972:28 - just created and we just need self in
972:30 - here as the one argument
972:32 - let's try this one I can click on the
972:35 - other and there we go we have a button
972:37 - in the top right it doesn't do anything
972:38 - right now but we have something although
972:41 - it looks pretty bad
972:43 - but that we can work on inside of the
972:45 - widget
972:46 - I want to update the text color which
972:50 - should be Pure White this white we're
972:53 - getting from the settings this right
972:54 - here
972:56 - after that what is even more visible is
972:59 - the FG color this I want to be
973:02 - transparent
973:04 - besides that I also want to set a custom
973:07 - height and a custom width both of those
973:09 - are going to get the same number which
973:11 - means the width is going to be 40 and
973:13 - the height is going to be 40 as well
973:17 - since we are having a bunch of arguments
973:20 - I'm going to put all of this over
973:22 - multiple lines
973:24 - that is much easier to read
973:27 - Also let's try it before I continue just
973:29 - in case I made a mistake
973:31 - if I now click on open image and the
973:33 - author now on the top right we have a
973:35 - button that looks much better
973:38 - what I now want to add is a corner
973:40 - radius with zero and finally I want to
973:45 - have a hover color
973:47 - which I have set to close red
973:52 - now if I try this one I can click on
973:54 - open image the auto once again and now I
973:57 - have a close button in the top right
974:00 - cool with that we have the close button
974:03 - but it doesn't do anything right now for
974:05 - that I want to create another method I
974:09 - call this one close edit
974:12 - this one itself and nothing else
974:15 - I want to hide the image and the close
974:19 - button
974:20 - this is going to be your exercise
974:24 - and it's going to be somewhat similar
974:26 - compared to what I have done here oh
974:28 - also I forgot
974:30 - we want to recreate the import button
974:35 - essentially I want to hide the image
974:37 - output and the close button and then
974:39 - show the image import button again that
974:42 - way we can import another image
974:44 - pause the video now and try to figure it
974:46 - out yourself
974:50 - to get started I want to hide the image
974:53 - and the close button since I have the
974:55 - attributes for both I can simply Target
974:58 - self dot image output and then use Grid
975:02 - or get
975:04 - for the image output I also want to use
975:06 - forget except this one has to be Place
975:09 - forget because we're using the place
975:11 - method to place it or the other part to
975:14 - recreate the import button I want to
975:17 - create self dot image import
975:20 - is going to be this is the same line we
975:24 - have used inside of the init I want to
975:26 - copy this one here
975:29 - and assign it to image import
975:31 - with that we're getting rid of the image
975:33 - and the close button although this one
975:35 - should be image output it should be the
975:37 - close button and we are recreating the
975:39 - import
975:41 - this is almost working except there's
975:43 - one thing missing we are never calling
975:45 - this close edit
975:47 - right now we have this close button
975:50 - but there's no command which means it
975:53 - doesn't do anything but that we can add
975:55 - quite easily we need a command in here
975:58 - this one is going to need some kind of
976:01 - close function this close function we
976:04 - don't have available but we can pass it
976:06 - into the widget so I want to get the
976:09 - close function from the parameter
976:11 - now back inside of main.pi this close
976:14 - button when we are creating it needs
976:17 - cell for the parent and on top of that
976:19 - we need self Dot close edit that way we
976:23 - are calling this method let's try now I
976:26 - can open the image open the others we
976:28 - can see the authors and if I click on X
976:30 - we are back to open image I can click on
976:33 - this one and open another image and this
976:35 - one seems to be working just fine with
976:38 - that we can open and close the editor
976:42 - and that finishes another major part of
976:44 - this project
976:46 - at this point we have the image this is
976:48 - the first major part done which means
976:51 - now we can start working on the menu
976:53 - this one contains quite a few different
976:55 - parts
976:57 - I will be going through them step by
977:00 - step the one I'm going to start with now
977:02 - is this main panel here this is a custom
977:06 - tkinder widget that is a container that
977:08 - has different panels it's really easy to
977:10 - implement let's have a look at this one
977:12 - back in my code editor I want to create
977:14 - another widget for this container since
977:18 - this is going to be a larger project I
977:20 - am going to create a new file
977:22 - I will save this one as menu dot pi
977:26 - first of all as always we need to import
977:28 - custom t Kinder as ctk
977:32 - this allows me to create another class
977:34 - which I called menu
977:37 - what makes this one special is that for
977:40 - the inheritance we are using ctk tab
977:44 - View
977:46 - this is basically a frame with tabs
977:48 - although other than that we need the
977:51 - dunder init method with self and the
977:53 - parent and later on we're going to add
977:55 - more but that's enough for now
977:57 - after that we need Super init
978:00 - and set the master to the parent
978:05 - last step I want to place this menu
978:08 - right away using grid with row being
978:12 - zero and the column being 0 as well
978:15 - on top of that I want to set sticky to
978:18 - north south east and west
978:20 - with that we have a menu let's use it
978:22 - right away inside of main.pi for that
978:25 - first of all we have to import it which
978:27 - means from men you import menu
978:33 - this I will create inside of import
978:36 - image because in here
978:39 - we are first of all closing the input
978:41 - button and then we are creating the
978:43 - image editing stuff so the image output
978:45 - and the close button besides that I want
978:48 - to create a third thing which is going
978:50 - to be self dot menu
978:52 - for that I am going to use the menu
978:54 - class I've just created the one argument
978:57 - we need for now is sell for the parent
979:00 - on top of that for close edit I should
979:03 - get rid of the exercise in fact I should
979:05 - get rid of all of the text
979:07 - we don't need that anymore like so
979:12 - what I want to do inside of this method
979:14 - now is to hide this menu as well
979:17 - just like I have hidden the image output
979:19 - and the close button which means in here
979:21 - self dot menu dot grid underscore forget
979:26 - then everything should be working let's
979:28 - try I get the usual menu and now we get
979:33 - some slightly weird Behavior but at the
979:36 - very least for now we have a container
979:38 - so something is happening
979:40 - although right now there's an issue and
979:43 - that is these columns are not properly
979:46 - represented let me run the entire thing
979:48 - again really quick
979:50 - you can see here that roughly the image
979:54 - on the right
979:55 - this with here is roughly as large as
979:59 - this width here
980:01 - which is not what I specified earlier
980:04 - these two lines don't seem to work
980:06 - properly anymore that is because I have
980:09 - to specify uniform and set this to some
980:12 - kind of string it has to be the same for
980:13 - both of them
980:15 - if I now run this click on open image
980:17 - and an image now this is looking much
980:19 - better
980:21 - all right with that we have the proper
980:23 - menu so let me minimize all of this now
980:26 - we can work inside of the menu
980:28 - first of all what I want to create in
980:30 - here are the tabs
980:33 - those you create using self and then the
980:36 - add method the one argument you want for
980:39 - this one is the name of the tab for
980:41 - example the first one that I want is
980:43 - called position
980:45 - let's try this one if I now click on
980:47 - open image and an image we can see
980:49 - position this is going to be the only
980:51 - tab for now
980:52 - although in my case I want to have four
980:55 - tabs I want to have the color I want to
980:58 - have effects and finally I want to have
981:01 - export
981:03 - let's try this one one more time
981:05 - and there we go now we have four tabs
981:08 - that we can toggle between
981:10 - so now we have to figure out how to
981:12 - attach a frame to any of these tabs
981:15 - I am going to start with the class
981:18 - position frame
981:20 - which is going to be just a ctk frame
981:24 - this one is going to work like any other
981:26 - frame we have created so far which means
981:29 - we need self and a parent after that
981:32 - called super Thunder init and set the
981:35 - master to the parent
981:38 - once we have something like this inside
981:40 - of the menu I can create the widgets
981:45 - well now I just want to create a
981:46 - position frame although now when we are
981:49 - setting the parent we are not using self
981:51 - instead we are using self dot Tab and
981:55 - then the tab we want to attach the
981:57 - widget to which in this case is going to
981:59 - be position
982:01 - although if I were to run this you
982:03 - wouldn't really see a difference because
982:04 - this widget here is going to look
982:06 - identical to the background of the menu
982:10 - we can change that by setting the FG
982:12 - color to something like blue
982:15 - and to really make sure that this is
982:17 - working let me duplicate the entire
982:19 - class and change position to let's say
982:23 - alert is the second one
982:26 - this one is going to work in basically
982:28 - the same way except for now I'm going to
982:30 - change the background color to Green
982:32 - finally for the position frame I want to
982:35 - add a duplicate and change position to
982:38 - color
982:39 - with the parent being the color tab not
982:42 - the position
982:43 - let's try all of this now I can run the
982:46 - app again click on open image click on
982:49 - utter and now we can see that nothing
982:53 - happened
982:54 - the reason for that is that these two
982:56 - frames position and color also need to
982:59 - be placed like any other widget
983:01 - for them I can simply use pack because
983:04 - they're supposed to fill the entire area
983:06 - which means I want to set expand to true
983:09 - and fail to both
983:12 - let me duplicate this one
983:14 - and now let's try this again click on
983:16 - open image otter and there we have a
983:19 - completely blue tab if I click on color
983:21 - it's entirely green effects and Export
983:23 - don't have anything yet so they are
983:25 - empty but at the very least this is
983:27 - working
983:28 - with that I can set the background color
983:30 - for both of them to transparent
983:33 - and now I have to figure out what to add
983:36 - inside of these frames
983:39 - since that is going to be quite a bit of
983:41 - logic in and of itself I have created
983:43 - another python file that I have saved as
983:46 - panels dot pi
983:49 - the way you want to think about it if I
983:52 - open the finished project and open image
983:56 - really quick
983:57 - basically what we have right now is a
984:00 - frame for each of these tabs
984:02 - what we now have to create are these
984:04 - panels here
984:06 - these are going to be reusable
984:08 - components for example this slider box
984:11 - here and this slider box here are the
984:13 - same class the only difference between
984:15 - them is that I inserted different
984:16 - arguments
984:18 - as a matter of fact inside of color we
984:21 - have two more slider boxes these two
984:23 - here and inside of effects we have two
984:26 - more all of these sliders are the same
984:29 - class I simply use different arguments
984:30 - to customize them although besides them
984:33 - we have other widgets like this one here
984:35 - or like these toggles or like this box
984:39 - here
984:40 - all of these we have to create for now
984:43 - I'm simply going to start with this
984:44 - slider box this is going to be a fairly
984:47 - simple one although for now it's not
984:49 - going to do anything but that I am going
984:51 - to work on in the next part
984:53 - I want to work inside of the panels in
984:56 - here I have to first of all import
984:58 - custom tkinter as ctk
985:02 - once I have that I want to create a
985:04 - class that I called panel this one has
985:08 - to inherit from ctk and ctk frame
985:11 - first of all in here we are going to
985:14 - need to done their init method with self
985:15 - and the parent we have done this
985:17 - multiple times by now after that super
985:20 - Thunder init with master
985:24 - being the parent
985:27 - finally I want to use self.pack this one
985:31 - should set fill to X
985:34 - on top of that I want pad y to be 4 and
985:39 - iPad y to be 8. this will create a
985:43 - fairly basic panel that doesn't do much
985:45 - by itself also I forgot one more thing I
985:48 - want to set an FG color in here which is
985:51 - going to be dark gray this is the dark
985:55 - gray that I'm getting from the settings
985:56 - this dark gray
985:58 - although for this to work I have to add
986:00 - from settings import everything let's
986:04 - try to use this one right away inside of
986:06 - menu dot Pi I want
986:09 - from panels import everything
986:13 - with that inside of the position frame I
986:16 - want to create a simple panel
986:19 - with self as the parent
986:22 - now let's try to use this one open image
986:24 - order and there we have a simple
986:27 - container
986:28 - which is ideal because in here we could
986:31 - now write a sliders some text we could
986:33 - add switches basically whatever we
986:35 - wanted
986:36 - the idea basically is that this panel is
986:39 - going to be a parent class and
986:42 - from this I'm going to create the actual
986:44 - panels that you are going to see for
986:46 - example the one I will be using the most
986:48 - is the slider panel this one is a child
986:51 - of the panel
986:53 - which means inside of the image method
986:57 - after self I have to specify a parent
987:01 - also I now want to specify some kind of
987:04 - text to display what kind of box we are
987:06 - going to have
987:07 - Adobe I am still going to need Super
987:10 - init
987:12 - or this one I have to set the parent to
987:14 - the parent because remember this parent
987:17 - here refers to this parent which is
987:21 - going to set the master
987:24 - what we are now able to do inside of the
987:27 - slider panel I can for example create a
987:30 - ctk and ctk label
987:34 - self is going to be the parent
987:36 - the text I can now set from the text the
987:39 - one I've specified inside of the
987:40 - parameter
987:42 - just so we can see something I want to
987:44 - pack this thing right away
987:46 - once I have that inside of menu I don't
987:49 - want to have a panel anymore instead I
987:52 - want to have a slider panel beside
987:54 - itself for the parent this is going to
987:56 - need some kind of text let's add test in
987:58 - here
988:00 - once again I can run this open image
988:03 - order and now we can see we have one
988:05 - panel that says test that is working
988:07 - really good
988:08 - which means now we can create all of the
988:11 - stuff for an actual slider panel in here
988:13 - as a reminder what this is going to look
988:15 - like let me open the final thing
988:18 - I want to create this slider box here or
988:21 - this one here they're the same creating
988:24 - this layout is going to be your exercise
988:26 - I want you guys let me clean this up a
988:29 - tiny bit I want you guys to recreate
988:31 - this slider box most of you now and try
988:34 - to figure this one out
988:39 - let's get started in my case I used a
988:43 - grid layout which means I want to start
988:45 - with a layout we need self.row configure
988:51 - I have zero and one rows that both have
988:54 - a weight of one
988:57 - the same thing I want to do for the
989:00 - column configure which means we have two
989:03 - rows and two columns
989:05 - with that this ctk label shouldn't use
989:09 - pack anymore instead we need grid and
989:12 - this text I want to have in the top left
989:13 - which means column is going to be 0 row
989:17 - is going to be zero
989:19 - and let's stick with that for now
989:21 - besides that I want to have a second
989:24 - piece of text that for now is simply
989:26 - going to say 0.0
989:30 - I should do all of this actually
989:32 - this is going to be the text box and
989:35 - because of these two lines here we have
989:38 - basically created this kind of layout
989:41 - the first item I have set in here is the
989:43 - first ctk label which is going to occupy
989:46 - this top left cell here this is 0 and 0.
989:49 - these numbers
989:51 - next up I want to create another ctk
989:53 - label that should be 0.0 in the top
989:57 - right
989:58 - which means we are still going to be in
990:00 - row 0 but column should be 1 now
990:03 - let's try those two I can click on open
990:06 - image again utter and now we get test
990:09 - and 0 and 0. however I want to make one
990:12 - more change this test should be all the
990:15 - way on the left roughly here while this
990:18 - 0.0 should be all the way on the right
990:20 - roughly here
990:22 - to achieve that I can use sticky
990:26 - a title text for this box should stick
990:29 - to the west side is 0.0 should only
990:32 - stick to the east which means the right
990:35 - side let's try this one again now
990:38 - and that is an improvement but now I
990:41 - think the issue is that both of these
990:43 - text labels are far too close to the
990:46 - Border
990:46 - this I can fix as well by using some
990:49 - padding
990:51 - both of these labels should get pad X of
990:54 - 5 and now we should have a good result
990:58 - there we go I am happy with this one you
991:00 - could probably add a tiny bit more
991:01 - padding but well experiment around
991:04 - finally I want to add ctk and ctk slider
991:09 - order parent I'm going to set self here
991:12 - and then we can place this using the
991:14 - grid method right away
991:16 - row should be one column should be zero
991:21 - and since I want this slider to span the
991:24 - entire wift column span should be 2.
991:28 - let's try this one open image click on
991:31 - the order again and there we have a
991:34 - slider that's not looking bad at all
991:36 - although a few tiny more changes I want
991:40 - to set sticky to
991:42 - East and West so we are covering the
991:44 - entire horizontal space
991:47 - although just like with the labels I
991:50 - want to add a tiny bit of horizontal
991:52 - padding now let's try this again
991:54 - open image otter and well this looks
991:58 - basically identical but now we have a
992:00 - bit more control over it
992:02 - also we can try to add for the slider a
992:06 - bit of vertical padding let's go with
992:09 - five as well
992:11 - I think that's going to make the entire
992:13 - thing look a bit more open yeah I do
992:14 - like this one better although the
992:16 - difference is quite minor
992:18 - all right what we can do now inside of
992:22 - position frame rename this label to
992:24 - rotation
992:27 - what this allows us to do if I open the
992:29 - entire thing again we now have the
992:31 - rotation text box this one is looking
992:33 - pretty good
992:34 - oh although there's one thing that I did
992:36 - forget inside of panels
992:39 - or in this slider I want to set an F G
992:44 - color
992:46 - which is going to be slider PG from
992:49 - settings
992:50 - this color here
992:53 - what this one is going to do is make the
992:55 - slider background a tiny bit brighter so
992:57 - it's easier to see the change once again
992:59 - is not very pronounced
993:02 - now we have the actual box for the
993:04 - slider what is even more important now
993:07 - we have the rotation box this is this
993:10 - slider panel
993:12 - but now I can duplicate this because the
993:15 - second box I want is called Zoom
993:19 - what this one does if I rerun everything
993:21 - we now have a second box that can work
993:24 - independently
993:26 - so with that we have made a ton of
993:29 - progress
993:30 - although unfortunately neither of those
993:32 - do anything so this I do have to work on
993:35 - although before we get to that there's
993:37 - one more change that I would like to
993:39 - make there is right now no padding
993:42 - between the menu and the image
993:45 - which seems a bit cramped so I want to
993:48 - add a tiny bit of padding both for the
993:50 - menu and for the image for the menu when
993:53 - I'm using the grid method to place it up
993:55 - here I want to add pad Y which is going
993:59 - to be 10 and Pad X is also going to be
994:02 - 10. besides that inside of the image
994:05 - widgets
994:06 - the image output in the grid method I
994:10 - also want to add pad X and such as to 10
994:13 - pad Y is going to be the same
994:16 - finally I can run my DOT Pi again the
994:19 - otter now the entire thing looks a bit
994:22 - more spacious
994:23 - so next up we can make all of this
994:25 - actually work
994:27 - now that we have the basic layout we can
994:29 - start working on the actual
994:30 - functionality of this image editor what
994:33 - I want to start with is the rotation
994:35 - which means this rotation slider
994:37 - actually rotates the image
994:41 - to make this kind of thing work we are
994:43 - going to need a couple of things most
994:46 - importantly to understand the basics is
994:48 - that this rotation slider is going to be
994:52 - connected to a custom taken to a
994:53 - variable
994:54 - and when this variable changes we are
994:58 - going to update the image in a certain
994:59 - way for this particular case we're going
995:02 - to rotate the image but this could also
995:04 - later become a zoom or it could become
995:07 - an invert or any of the color or effects
995:11 - but let's do all of this in code this is
995:13 - going to be much easier to understand
995:15 - once again I am inside of main.pi
995:19 - what I want to do in here is first of
995:22 - all I want to create another method that
995:25 - I called init rameters
995:30 - which one itself and nothing else for
995:32 - its own parameters
995:34 - what I want to do in here is to initiate
995:36 - the parameters that are going to track
995:38 - the data for the image manipulation
995:40 - later on there will be quite a few in
995:43 - here but for now I simply want to create
995:45 - self dot rotate and this is going to be
995:48 - a float
995:50 - this is going to be an object ctk and
995:53 - double VAR
995:55 - this one is also going to have a start
995:57 - value which I set with the value a start
996:01 - value I am getting from the settings
996:02 - this rotate default here is what I want
996:05 - I can copy it and use it for the value
996:09 - with this we have some kind of way to
996:12 - track the value of the rotation of the
996:14 - image by default it's going to be zero
996:16 - now once we have that we want to do a
996:19 - couple of things number one we want to
996:22 - connect the
996:25 - VAR to the slider which means this
996:30 - rotation needs to be accessible or
996:32 - rather changeable from inside of this
996:35 - slider panel so we have to somehow get
996:38 - it in there
996:39 - once we have that number two we need to
996:42 - trace changes to the VAR which means
996:46 - once this slider panel is changing the
996:49 - variable we want to do a certain thing
996:52 - finally number three
996:55 - we want to use the VAR value to change
996:58 - the image
997:01 - which in this case means anytime we're
997:03 - moving the slider we're updating the VAR
997:05 - and then we're updating the image
997:07 - so let's go through this one by one
997:10 - number one we have to connect the VAR to
997:12 - the slider although before we can do
997:14 - that we have to call this method this is
997:17 - going to happen inside of init before we
997:20 - are creating the widgets
997:21 - I want to self dot init parameters
997:26 - I suppose we can do this right at the
997:28 - top it makes a bit more sense there
997:31 - with that I can minimize the init method
997:34 - because now I want to work inside of
997:37 - import image
997:39 - the reason for that is that the menu
997:41 - needs to have access to this self.rotate
997:45 - float
997:46 - that way let me pass it right in self
997:48 - dot rotate float that way inside of menu
997:53 - the class I can create another parameter
997:56 - let's call this the rotation the
997:58 - rotation I want to pass right through to
998:01 - the position frame which means the next
998:03 - argument in here is going to be the
998:05 - rotation
998:07 - with that inside of the position frame I
998:10 - have the rotation available and now I
998:14 - can pass this into the slider panel
998:16 - rotation for this one
998:18 - that way the slider panel has access to
998:21 - the rotation
998:22 - which means inside of the panels
998:25 - I can work inside of the slider panel
998:27 - although first of all I have to give
998:29 - this another parameter the rotation what
998:32 - this allows me to do for example I can
998:35 - set the text well I can remove it right
998:37 - away and instead get a text variable
998:40 - which is going to be the rotation I can
998:44 - do the same thing for the slider
998:46 - although this one is going to be a
998:48 - variable which is also going to be the
998:50 - rotation
998:51 - with that when we're moving the slider
998:54 - the text should also update let's try
998:56 - this one actually
998:58 - I can open the image and now if I click
999:01 - on rotation we get something so
999:04 - definitely
999:05 - we're making progress although the
999:07 - number here is way too precise
999:09 - also let me comment out the zoom for now
999:12 - because this one is going to cause an
999:14 - error well now I want to keep on working
999:17 - inside of the rotation they had too much
999:19 - of problems actually
999:21 - the first one is that this ctk slider I
999:24 - think goes from zero to one which is
999:27 - fine for a starting value but I want
999:29 - this to go from 0 to 360. as a reminder
999:33 - a full circle so a full rotation starts
999:36 - at zero and then goes all the way around
999:39 - to
999:41 - 360. which means the slider let me do
999:44 - this over multiple lines right away
999:47 - the slider is going to need
999:50 - two more arguments we need from and
999:53 - underscore this should start at zero
999:57 - and then go to and this should be 360.
1000:01 - which means now
1000:04 - we should get the numbers from zero this
1000:07 - is a good starting point and I can go
1000:09 - all the way to 360. although the problem
1000:12 - now is that the number is way too
1000:15 - precise we don't need this many numbers
1000:18 - before we can get to that
1000:20 - we have another issue this zero and the
1000:23 - 460 are only unique to this particular
1000:27 - slider panel if I want to create another
1000:29 - slider panel for example for the zoom
1000:31 - the numbers might be different as a
1000:33 - consequence these numbers cannot be hard
1000:36 - coded although that is very easy to
1000:38 - change I want to add another parameter
1000:41 - or rather two parameters
1000:43 - that are Min value and max value
1000:48 - ROM is going to be the Min value 2 is
1000:52 - going to be the max value for the slider
1000:55 - with that back in menu I can add two
1000:59 - more arguments that are going to be 0
1001:01 - and 360. that way this slider panel
1001:05 - becomes actually a reusable component
1001:07 - where we have a name a variable and then
1001:10 - a start and an end value later on for
1001:13 - the zoom panel we can simply copy it and
1001:16 - add different numbers and then we have a
1001:17 - completely new panel before we can work
1001:20 - on that we have to update this ctk label
1001:24 - the issue once again is that the numbers
1001:27 - we are getting from the text variable
1001:28 - are much too precise
1001:31 - to fix that I want to round them but for
1001:33 - that we have to add a tiny bit more
1001:35 - logic first of all I want to get access
1001:38 - to this ctk label by turning it into an
1001:41 - attribute let's call it the num label
1001:45 - this is simply going to be
1001:49 - the widget we just created after that I
1001:52 - want to place it with the grid method so
1001:55 - self.num label so far this is going to
1001:58 - be the exact same result
1002:00 - although this one is not going to get a
1002:03 - text variable instead I am just going to
1002:05 - set the text
1002:07 - which is going to be self dot rotation
1002:12 - dot get
1002:14 - by default this one is going to be zero
1002:17 - with that let me run the code again
1002:21 - we are getting an error this isn't going
1002:24 - to be self this is just going to be the
1002:26 - rotation
1002:27 - now let's try it again
1002:30 - there we go now we have rotation and the
1002:33 - number on the top right doesn't do
1002:34 - anything because we are simply getting
1002:36 - the value of the rotation but then not
1002:39 - using it this one here doesn't do
1002:42 - anything right now for that I want to
1002:44 - create a separate method
1002:46 - I call this one update text
1002:49 - this one is going to need self for the
1002:52 - parameters besides self we are also
1002:54 - going to need a value
1002:56 - this value we need because we are
1002:58 - calling this update text from the slider
1003:01 - via the command
1003:04 - this is going to be self dot update text
1003:08 - what this optic text is doing let me
1003:11 - demonstrate right away I want to print
1003:13 - the value
1003:14 - if I now run this again
1003:18 - a slider is going to print whatever
1003:20 - number we have inside of it which means
1003:22 - now the numbers go from 0 to 360.
1003:26 - these numbers I want to use to update
1003:28 - this num label
1003:31 - which means I can copy it and use
1003:33 - configure to update the text in there
1003:37 - I simply want to update the text
1003:39 - which is going to be an F string
1003:43 - I simply want to round
1003:46 - the value I'm getting from the slider
1003:48 - with two decimal points
1003:50 - with that I can run main.pi again click
1003:53 - on the utter and now we have the text
1003:56 - updating in the proper way
1003:59 - this looks significantly cleaner
1004:02 - righty with that we have connected the
1004:04 - VAR to the slider
1004:06 - although inside of the panel this
1004:10 - shouldn't be called rotation because
1004:12 - later on the slider panel should also
1004:14 - connect to other kinds of variables let
1004:17 - me simply rename rotation to data VAR
1004:21 - that way the slider panel becomes a bit
1004:23 - more generic
1004:24 - ready but now we have covered the first
1004:27 - bit
1004:28 - which means I can get rid of it
1004:31 - now we have to trace the changes to this
1004:33 - variable which means whenever this
1004:36 - rotation field changes we want to do
1004:37 - something
1004:39 - that is actually super easily done all
1004:41 - we need is self.the rotation float and I
1004:45 - want to run the trace method whenever we
1004:47 - are changing the value or more
1004:49 - specifically whenever we are writing a
1004:51 - new value in it
1004:53 - then I want to call a method
1004:56 - the method I want to call is going to be
1004:59 - manipulate image
1005:02 - that doesn't exist right now let's
1005:05 - create it self dot manipulate image for
1005:08 - this one we need self and we need the
1005:11 - arcs these arcs are passed into it
1005:13 - automatically whenever we are calling a
1005:15 - method using Trace
1005:17 - inside of this manipulate image we can
1005:19 - now make changes to the actual image
1005:21 - which means we have covered the second
1005:23 - part as well now we have to cover how to
1005:27 - update the image
1005:28 - essentially what we are going to do we
1005:30 - are going to take this self image and
1005:33 - then run some methods on it the pillow
1005:35 - library has lots of methods to change an
1005:38 - image
1005:39 - for example we could blurred rotate it
1005:41 - Zoom it flip it add some contrast or
1005:44 - some other effects also change the
1005:45 - brightness or the grayscale there are
1005:47 - lots of things that we can do
1005:49 - however for this one we have to be
1005:51 - careful because we don't want to make
1005:53 - changes that we cannot reverse for that
1005:56 - when we are importing the image I am
1005:58 - actually going to create a self dot
1006:01 - original and this is where we are
1006:04 - storing the image so image open Dot path
1006:07 - is going to get the original and then
1006:09 - self.image is going to be a copy of
1006:12 - self.original that way I can make
1006:15 - whatever change I want to the image
1006:16 - whereas original is going to stay
1006:19 - unchanged that way if I make too many
1006:21 - changes I can always revert back to the
1006:23 - original that is a super important thing
1006:25 - to start with now inside of manipulate
1006:29 - image first of all I want to override
1006:32 - self.image with self.original once again
1006:36 - that way I am always starting with the
1006:39 - original image
1006:40 - once I have that I can apply the
1006:42 - different changes to it for example if I
1006:45 - want to apply rotate
1006:46 - I could get myself dot image
1006:50 - and to apply rotation I want self dot
1006:53 - image and then
1006:55 - rotate
1006:57 - this method wants a single argument
1006:59 - which is going to be the rotation
1007:01 - which I'm getting from self dot rotate
1007:04 - float dot get
1007:07 - that method is going to return a new
1007:09 - image which we're now storing inside of
1007:11 - the original image all we have to do now
1007:14 - is to set this new image as the image we
1007:17 - are outputting which we have done
1007:19 - earlier inside of this resize image down
1007:22 - here
1007:24 - we essentially want to call all of this
1007:26 - again except now with a new image which
1007:30 - means I want to reuse this code as a
1007:32 - consequence I'm going to turn all of
1007:34 - this into a separate method that I
1007:37 - called place
1007:39 - image
1007:41 - which needs self and nothing else
1007:44 - although with that we have to make a few
1007:46 - more changes first of all after we are
1007:49 - resizing the image we have to call
1007:52 - self.place image to make sure that this
1007:55 - works in the first place
1007:57 - unfortunately now we have to make a few
1008:00 - more changes because of the local scope
1008:02 - of these methods the basic issue is that
1008:05 - these variables are only available
1008:07 - inside of this scope while they are not
1008:10 - available in this scope
1008:12 - which is going to cause an error so we
1008:16 - have to account for it
1008:17 - the way around it the way I approached
1008:20 - it is let me actually minimize all of
1008:22 - these methods otherwise this will get
1008:24 - confusing inside of the init method
1008:28 - before I'm creating the widgets
1008:30 - I want to create some canvas data
1008:34 - this is going to be self Dodge image
1008:37 - with which is going to be 0 by default
1008:39 - then we have an image
1008:42 - height which is also going to be zero
1008:44 - then we have a canvas with and a canvas
1008:50 - height
1008:51 - once we have those numbers inside of
1008:55 - resize image
1008:57 - every time we are resizing the image I
1008:59 - want to update the numbers I have just
1009:01 - created
1009:02 - this means all of these image width and
1009:05 - image Hive variables need to be
1009:08 - parameters which I Do by adding self in
1009:10 - front of them
1009:11 - also this image height and this image
1009:14 - width needs to have self as well with
1009:17 - that I have covered
1009:19 - the image width and the image Hive but I
1009:22 - also have to update the canvas width and
1009:24 - the canvas height
1009:25 - which means
1009:28 - I want to add another section here with
1009:31 - update canvas attributes
1009:34 - this is quite easy done all I need is
1009:36 - self dot canvas with
1009:39 - is going to be the event dot with then I
1009:42 - can duplicate this and simply change the
1009:46 - wift to right
1009:48 - with that I can minimize resize image
1009:51 - although I do have to make some changes
1009:53 - to place image image output.delete all
1009:55 - still works just fine although resize
1009:58 - image now needs to work with the
1010:01 - attributes self dot image with and
1010:03 - self.image height
1010:06 - self.mhdk is working just as before this
1010:09 - one doesn't need any changes although
1010:11 - for the image output
1010:13 - this image width divided by 2 should be
1010:16 - replaced with self dot canvas with
1010:19 - divided by two same for event height
1010:22 - this should be self dot canvas height
1010:25 - divided by two
1010:27 - this should be all the changes that we
1010:28 - have to make let's try all of this again
1010:30 - I can click on the other and there we go
1010:34 - the order still works although the
1010:36 - rotation right now doesn't work at all
1010:39 - because inside of manipulate image we're
1010:44 - not calling this place image we're
1010:46 - simply updating the image but we're not
1010:48 - setting it to the output
1010:50 - for that I simply have to call
1010:52 - self.place Image at the end of
1010:55 - manipulate image now let's try this
1010:58 - again open the image author and now the
1011:01 - rotation is working just fine
1011:04 - and with that we have the first part of
1011:07 - the rotation now I think so far this is
1011:10 - probably a bit confusing I think the
1011:13 - best way to approach this is to do
1011:15 - another example
1011:17 - inside of the parameters I want to
1011:20 - create a second attribute this time for
1011:22 - the zoom which means I want to have self
1011:25 - dot Zoom underscore float this is also
1011:30 - going to be a ctk double VAR as a matter
1011:33 - of fact I can simply copy this one
1011:35 - although the start value is well it's
1011:38 - also going to be zero but I want this to
1011:40 - connect properly so Zoom default here is
1011:43 - the start value
1011:44 - also I can get rid of this text that's
1011:46 - going to be confusing this Zoom float I
1011:49 - now have to pass into the menu which is
1011:52 - happening inside of import image in here
1011:55 - besides rotate float I also want
1011:58 - self.zoom float which means now inside
1012:01 - of the menu besides rotation I also need
1012:05 - Zoom this Zoom I want to pass right away
1012:08 - into the position frame right after
1012:10 - rotation which means zoom in here and I
1012:14 - am also going to need another parameter
1012:15 - which is going to be Zoom
1012:18 - what this allows me to do is to Simply
1012:21 - uncomment the slider panel and add in
1012:24 - the zoom in here this one should go from
1012:27 - 0 to 200. with that I have connected the
1012:31 - variable to the panel so I can minimize
1012:34 - the import image next up I have to trace
1012:37 - it for that I can simply duplicate this
1012:40 - method and change rotate float to zoom
1012:42 - float
1012:44 - with that we are calling manipulate
1012:46 - image whenever we are changing the zoom
1012:49 - float value with that I can call
1012:51 - manipulate image in here I want to have
1012:54 - the zoom this is going to work just as
1012:58 - before I want to update self.image
1013:01 - to change this one though we have to
1013:03 - import another module from the pillow
1013:06 - Library
1013:07 - this one is called image
1013:10 - Ops
1013:11 - the way you are using this is you first
1013:14 - need image Ops and then dot drop
1013:17 - this one wants two arguments the first
1013:20 - one is going to be the image which in
1013:22 - our case is always going to be
1013:23 - self.image
1013:25 - besides that it is expecting a border
1013:28 - this border we are getting from self dot
1013:31 - Zoom float dot get
1013:34 - with that we can run the entire thing I
1013:37 - can click on open image get the order
1013:38 - now we have two panels I can rotate it
1013:42 - still but now Zoom is also going to work
1013:45 - although it's not perfect Zoom it
1013:47 - stretches the image a tiny bit but this
1013:49 - is the easiest way to get zoom in pillow
1013:53 - and I guess for our purposes this is
1013:55 - good enough but you could totally update
1013:56 - this to get proper Zoom
1013:58 - I guess but it's really important to
1014:00 - understand here is that we first of all
1014:02 - copy the original to the image then we
1014:06 - are creating a new image if we are
1014:08 - rotating the image
1014:10 - then next up this rotated image we are
1014:13 - zooming if we are using the zoom that
1014:15 - way we are applying both of these
1014:17 - changes
1014:18 - now before I'm changing this video I
1014:20 - have made a couple of changes to how the
1014:22 - image is being displayed and I think I
1014:24 - should talk about those because it's
1014:26 - probably a bit confusing
1014:28 - so let's go through how the image output
1014:30 - is going to work
1014:32 - first of all when we are calling the
1014:34 - edit method we are declaring a couple of
1014:37 - basic variables we need to get the image
1014:39 - width and the image height and the
1014:41 - canvas width and the canvas height all
1014:43 - of those are zero by default that one
1014:46 - should be fairly easy after we are doing
1014:48 - that we are calling import image in here
1014:51 - we are importing the image but then most
1014:54 - importantly we are getting the image
1014:56 - ratio
1014:58 - this we only have to get once because we
1015:00 - care about the ratio of the original
1015:02 - image for the rest we're simply getting
1015:05 - rid of the import button and then
1015:06 - display the image so this we can ignore
1015:08 - for now what is much more important next
1015:10 - up is we are resizing the image for that
1015:13 - we're getting the canvas ratio and then
1015:16 - we're updating the attributes for the
1015:18 - canvas with and the canvas height
1015:20 - after we have that we are resizing the
1015:23 - image in such a way that it fits into
1015:26 - the canvas perfectly
1015:27 - finally inside of place image
1015:31 - we are getting whatever image we
1015:33 - currently have this could either be the
1015:35 - original or the manipulated image and
1015:37 - then we're getting the image width and
1015:39 - the image height we have set up here
1015:42 - this we are then turning into an image
1015:44 - TK and finally we are creating an output
1015:47 - and to get the center of the canvas we
1015:50 - are getting this canvas width and canvas
1015:52 - height and divided by two I am not quite
1015:54 - sure how confused you are by this but
1015:56 - your main exercise for this part is to
1015:59 - try to understand the logic here of how
1016:01 - the image is being displayed ideally try
1016:04 - to recreate all of this and try to do
1016:06 - all of this from scratch the logic for
1016:08 - this one unfortunately does get a tiny
1016:10 - bit more advanced
1016:11 - but well we can continue so let me
1016:15 - minimize all of this and I'll see you in
1016:17 - the next video at this point we have the
1016:19 - basic layout and some rudimentary
1016:22 - functionality which means we can rotate
1016:24 - the image and we can zoom into the image
1016:28 - from this point forward we have to cover
1016:30 - two important steps number one we have
1016:33 - to create a whole lot more variables to
1016:36 - cover all of the different options for
1016:38 - example right now we have a variable for
1016:40 - the rotation and for the zoom we are
1016:43 - also going to need one for the invert
1016:46 - after that we need three more variables
1016:48 - to cover everything inside of color
1016:50 - three more to cover these final panels
1016:55 - which means we're going to need nine
1016:56 - variables in total which means we have
1016:59 - to organize our data management a tiny
1017:01 - bit better
1017:03 - this is what I am going to start with
1017:05 - other than that we have to create a few
1017:07 - more panels for example this invert
1017:10 - panel here doesn't exist yet
1017:12 - this switch panel here we also have to
1017:14 - create and finally for the effects we
1017:17 - have to create this box here which is a
1017:20 - drop down menu for example for these
1017:23 - kind of effects
1017:24 - back in my code I want to work inside of
1017:27 - init parameters this one creates two
1017:30 - attributes right now rotate float and
1017:33 - zoom float
1017:34 - which is fine but that's not exactly
1017:37 - what I want to do since we have to
1017:39 - create quite a lot of variables this is
1017:41 - not going to be efficient
1017:43 - what I want to do instead is create a
1017:45 - couple of dictionaries
1017:47 - for example the first one is going to be
1017:50 - self dot pause vars
1017:53 - this one is going to have an entry for
1017:56 - rotate the associated value is the one
1017:59 - we have created earlier the ctk double
1018:02 - VAR with the start value of rotate
1018:04 - default
1018:05 - I can copy this one more time next up we
1018:08 - have zoom this is also going to be a
1018:10 - double bar although the default value is
1018:13 - going to be Zoom default
1018:14 - finally there's one more that I want
1018:16 - this is going to be flip this one we
1018:19 - haven't used yet this is going to be a
1018:22 - ctk string VAR
1018:25 - or the start value for this one we are
1018:28 - going to need one but it's going to work
1018:29 - a tiny bit different compared to what we
1018:31 - have done before essentially if you look
1018:34 - at settings
1018:36 - we have flip options and this is a list
1018:40 - later on when we have the effects this
1018:42 - is going to work in a similar way the
1018:44 - idea is that we have a couple of options
1018:46 - and 0 is always the default which means
1018:49 - when I assign the value I want to have
1018:51 - flip options with the index 0. this
1018:55 - would cover all of my position variables
1018:57 - with that I can get rid of these two
1019:01 - entries here although I do have to cover
1019:04 - the tracing this one also wouldn't work
1019:06 - right now to replace that let me add a
1019:09 - comment in here tracing I want to use a
1019:13 - for Loop for VAR in
1019:17 - I want to check self dot pause vars
1019:20 - dot values and don't forget to call this
1019:23 - one
1019:24 - this is going to give me all of the vars
1019:26 - this double VAR this double VAR and this
1019:29 - string VAR I want to get all of them
1019:33 - and then use the trace method the
1019:35 - arguments are going to be the same that
1019:37 - we have covered down here
1019:39 - with that we can get rid of this bit as
1019:42 - well
1019:43 - and now we are organizing our data much
1019:46 - more elegantly
1019:47 - although that being said when I am
1019:50 - running import image
1019:52 - rotate float and zoom float don't exist
1019:54 - anymore so I want to get rid of them I
1019:57 - will replace them with self.posvars
1020:00 - which means now in the menu we also have
1020:04 - to update the parameters
1020:05 - I am just going to have the position
1020:08 - variables
1020:10 - those I'm going to pass right through to
1020:13 - the position frame and here I want to
1020:15 - have to pause the vars
1020:17 - this also means inside of position frame
1020:19 - rotation and zoom should go instead I
1020:23 - want to have my position bars
1020:24 - finally when I'm creating these slider
1020:27 - panels
1020:28 - instead of rotation I want to have my
1020:31 - pulse vars in here I want to get the key
1020:34 - rotate I think that's what I called it
1020:37 - yeah rotate this one
1020:39 - or the zoom I want to have my passwords
1020:42 - dictionary with the key Zoom
1020:45 - with that the app should work just as
1020:49 - before
1020:50 - if I open the image I can still rotate
1020:53 - well I can't
1020:55 - and I do know why because inside of
1020:58 - manipulate image we are still using
1021:01 - rotate flow.get and we're using
1021:04 - zoomflow.get neither of those exist
1021:06 - anymore
1021:08 - instead I want to get my self.posvars
1021:13 - the first one is going to be rotate
1021:16 - Zoom float should be post virus with the
1021:20 - key Zoom now this should be working
1021:22 - let's try the author and now we're
1021:27 - getting another error
1021:29 - ah right I see the error I forgot the
1021:32 - get method for both of them
1021:36 - now this should be working I hope I
1021:38 - don't want to know what promise auto
1021:40 - rotate now this is working both for zoom
1021:43 - and for rotate cool
1021:46 - which means now we have the basic
1021:50 - variables and tracing for the position
1021:54 - next up I want to create another
1021:56 - dictionary with self dot color virus
1022:01 - this is going to work in basically the
1022:04 - same way that we have seen up here
1022:06 - except we are creating variables for
1022:08 - other attributes
1022:10 - also I want to indeed these key value
1022:12 - pairs that makes all of this look a bit
1022:14 - cleaner
1022:17 - borde Calaveras we have four values in
1022:21 - total we have brightness this one is
1022:24 - going to be a ctk double VAR a start
1022:28 - value for this one we're getting from
1022:30 - settings somewhere in here we have
1022:32 - brightness default this one is going to
1022:34 - be one
1022:36 - next up we have grayscale
1022:39 - this one is a ctk Boolean VAR a start
1022:44 - value for this one once again we are
1022:46 - getting from settings grayscale default
1022:49 - it's just going to be false
1022:51 - after that we have invert
1022:55 - this one is also going to be a Boolean
1022:57 - VAR meaning I can just copy all of this
1023:00 - although I do have to change the start
1023:02 - value this one is invert default
1023:06 - finally we have Vibrance
1023:10 - which is going to be a ctk double VAR
1023:14 - which also has a start value
1023:17 - which we are getting from Vibrance
1023:20 - default
1023:22 - there we go this covers all of the data
1023:25 - for the colors
1023:27 - there's one more that we need and that
1023:30 - is
1023:31 - self.effect vars
1023:34 - and for this one I don't want to bore
1023:36 - you so let me just copy it in this one
1023:39 - is going to look like this
1023:41 - we have blur contrast and effect
1023:45 - blur being a double VAR contrast being a
1023:48 - ctk intvar and effect is going to be a
1023:50 - string VAR
1023:52 - blur and contrast both have a simple
1023:54 - default value whereas the effect is
1023:58 - going to work like the flip which means
1024:00 - effect options inside of settings is
1024:03 - going to give me a list where the first
1024:05 - value is none but other than that we
1024:07 - have emboss find edges contour and Edge
1024:09 - enhance
1024:11 - I am for now simply picking the first
1024:13 - entry
1024:15 - with that we have all of our tkinter
1024:20 - variables that are going to track the
1024:21 - changes we are making to the image let
1024:24 - me minimize them what we now have to
1024:26 - figure out is how to trace through all
1024:29 - of them
1024:31 - for that you could create three four
1024:33 - Loops but that wouldn't exactly be
1024:35 - elegant instead I want you guys to try
1024:38 - an exercise
1024:40 - I want you guys to apply Trace to all of
1024:44 - the nine variables using a single for
1024:46 - Loop the one I have already created
1024:48 - pause the video now and try to figure
1024:50 - this one out
1024:55 - the way you want to approach this one is
1024:57 - you can simply add a plus to get for
1025:00 - example self dot color vars.values
1025:06 - although this by itself if I run all of
1025:08 - it is not going to work because right
1025:10 - now we are trying to add dictionary
1025:12 - values to other dictionary values which
1025:15 - isn't going to work you can only add
1025:17 - lists together and that way you are
1025:19 - getting a combined list which should be
1025:21 - giving you the answer because all we
1025:23 - have to do is convert both of these
1025:26 - dictionary values to a list
1025:30 - that way all of this is simply going to
1025:33 - work
1025:34 - although since we have three
1025:36 - dictionaries we have to do this one more
1025:38 - time plus a list of self dot effect bars
1025:43 - dot values
1025:45 - there we go with that we have one for
1025:47 - Loop that applies Trace to all of the
1025:50 - variables although in my case I want to
1025:53 - store all of them inside of a separate
1025:56 - variable that way you don't have to
1025:58 - scroll
1026:00 - let's call it combined vars is going to
1026:04 - be the list I just created
1026:06 - which I want to Loop over so for VAR in
1026:09 - Combined bars
1026:11 - then we are applying the tracing to it
1026:14 - the way you want to think about this
1026:15 - kind of logic in here is that you can
1026:18 - very easily combine lists but
1026:19 - dictionaries are much more difficult to
1026:21 - work with as a consequence it's quite a
1026:24 - common thing to convert a dictionary to
1026:26 - a list and then work with it for a bit
1026:28 - because lists are much much easier to
1026:31 - work with all right but with that we
1026:33 - have initiated all of the parameters
1026:37 - what we now have to do is to pass all of
1026:39 - them into the menu which means besides
1026:42 - the position variables we also have self
1026:44 - dot color vars and we have self dot
1026:48 - effect variables
1026:51 - to make all of that work inside of the
1026:53 - menu we need two more parameters
1026:57 - we have the color vars and the effect
1027:02 - vars the color vars I want to pass right
1027:05 - through to the color frame
1027:08 - after that I can create an effect
1027:12 - frame that is going to have self dot tab
1027:18 - effects as the parent besides that it is
1027:21 - going to get the effect variables
1027:24 - this effect frame doesn't exist right
1027:27 - now let's create it all the way at the
1027:29 - bottom
1027:30 - I want to have class effect
1027:33 - frame this one is just going to be a ctk
1027:37 - frame
1027:39 - with it under in it method as a matter
1027:42 - of fact I can copy all of this since
1027:45 - it's going to be the same
1027:48 - although the color frame is going to
1027:50 - need the color
1027:53 - vars while the effect frame is going to
1027:57 - get the effect vars
1027:59 - now this is going to work
1028:02 - with that we can work purely inside of
1028:06 - these frames because they have all the
1028:08 - data that they are going to need first
1028:10 - of all inside of the color frame I want
1028:12 - to create two more slider panels which I
1028:15 - can do very easily I just have to copy
1028:18 - the slider panel the first point is
1028:20 - going to be the rightness with the color
1028:24 - vars
1028:26 - of
1028:27 - brightness
1028:29 - the minimum for this one is going to be
1028:31 - zero but the maximum is going to be 5.
1028:35 - then I can duplicate this panel and
1028:37 - change brightness to Vibrance
1028:42 - the Calaveras variable we are looking at
1028:44 - is going to be
1028:45 - Vibrance as well which is also going to
1028:48 - go from 0 to 5. neither of these panels
1028:51 - are going to do anything right now but
1028:53 - at the very least we should be able to
1028:55 - see them although if I run the code I
1028:57 - get an error that a bracket was never
1028:59 - closed
1029:00 - this happens inside of when I'm creating
1029:03 - this list
1029:05 - which is going to be inside of init
1029:07 - parameters or this one all the way at
1029:09 - the end I forgot one bracket now let's
1029:12 - try this again we can still open an
1029:15 - image is this looking good and now if I
1029:17 - go to color we have brightness and
1029:19 - Vibrance both of which start at one I
1029:22 - can move the slider but it doesn't do
1029:23 - anything right now
1029:24 - but at the very least we can see
1029:26 - something
1029:27 - while we are here I can also work on the
1029:30 - effect frame because this one is going
1029:32 - to get two slider panels as well
1029:37 - we get one slider panel for the blur
1029:40 - which is going to have the variable from
1029:43 - effect virus with blur
1029:48 - the values here go from 0 to 3. and I
1029:51 - can duplicate this one because the next
1029:53 - one is going to be contrast which is
1029:56 - going to get the dictionary entry for
1029:58 - contrast and the values go from 0 to 10.
1030:02 - and I hope while you are watching this
1030:04 - you can see why these panels are super
1030:08 - useful I can simply duplicate them and
1030:10 - then I get a whole panel that can
1030:12 - influence one specific variable
1030:14 - all right let's try out of this we
1030:17 - should be having three panels now we
1030:19 - have position color and effects and all
1030:22 - of this is looking really good the
1030:24 - numbers also update along with it
1030:27 - I'm very happy with this one
1030:29 - which means now we have to create a few
1030:31 - more panels to cover the other kind of
1030:34 - variables this is going to happen inside
1030:37 - of the panels
1030:39 - first of all I want to create another
1030:41 - class for
1030:44 - I call it this one is segmented panel
1030:49 - let me run the final app again the panel
1030:52 - we are going to create is this one
1030:55 - it's quite simple to be honest we have a
1030:58 - label at the top and this thing here is
1031:02 - a ctk widget
1031:04 - although both of those are going to be
1031:07 - inside of a panel which is going to be
1031:10 - the parent
1031:11 - inside of this one I want to have a
1031:13 - Dunder init method
1031:16 - with self this one needs a parent then
1031:19 - we have some text next up we need a data
1031:22 - variable finally we're going to need the
1031:25 - options for this panel
1031:28 - first of all we need the super Thunder
1031:30 - init method which sets the parent to the
1031:34 - parent we have gotten from the
1031:36 - parameters after that I want to create a
1031:39 - ctk label the parent is going to be self
1031:42 - and text is going to be whatever we are
1031:45 - getting from the parameters
1031:46 - since the layout is going to be simple
1031:48 - pack here is totally fine
1031:51 - the actually interesting widget for this
1031:53 - panel is going to be ctk segmented
1031:57 - button I hope I spelled it correctly
1032:00 - it's looking good
1032:02 - this one wants to have a parent as
1032:05 - always and then we are going to need
1032:07 - values
1032:09 - these values we are going to get from
1032:11 - the parameters this is going to be
1032:13 - options
1032:14 - after we have that I want to pack the
1032:17 - widget as well I want expand to be true
1032:21 - fill should be both finally I want to
1032:25 - have pad X to be 4 and Pad y should also
1032:29 - be 4.
1032:30 - this is going to give me a segmented
1032:33 - panel we now have to figure out how to
1032:35 - call it this will happen inside of the
1032:37 - menu and since I'm importing everything
1032:39 - from the panels I can use it right away
1032:42 - this segment panel I want to use inside
1032:45 - of the position frame because in here I
1032:48 - have my position variables
1032:49 - I want to get my segment panel the
1032:53 - parent is going to be self besides that
1032:55 - the other parameters are text Data VAR
1032:59 - and options
1033:00 - let me copy them in
1033:03 - the text we can just set as whatever we
1033:05 - want I caught this one invert
1033:08 - the data variable we are getting from
1033:10 - the position vars which I called invert
1033:15 - or at least I think I did
1033:18 - if I look at the position bars in here
1033:20 - we have lip which means there should be
1033:23 - flip instead of invert the options I am
1033:26 - getting from the settings
1033:28 - I want to get flip options and add them
1033:31 - for the options
1033:33 - this should be all I need if I now run
1033:36 - all of this select the auto once again
1033:38 - we're getting an error that segment
1033:40 - panel is not defined which probably
1033:43 - means I made a typo I call this the
1033:46 - segmented panel not the segment panel
1033:49 - let's fix that one let's try it again
1033:53 - if I now try it again there we go we
1033:55 - have an invert button or panel or
1033:58 - segmented button whatever you want to
1033:59 - call it
1034:01 - although it doesn't do anything right
1034:02 - now but we can work on that in just a
1034:04 - bit
1034:06 - for now though there's one more thing
1034:07 - that I want to do and that is anytime I
1034:10 - am clicking on any field inside of this
1034:12 - segmented button I want to update this
1034:15 - data VAR for that inside of the
1034:18 - segmented panel we can add a variable
1034:21 - which is going to be the data bar
1034:25 - with that we have this segmented panel
1034:28 - I can now create another class
1034:33 - which is going to be a switch panel
1034:37 - once again the parent here is going to
1034:39 - be the panel let me demonstrate what
1034:42 - this is going to look like at the end in
1034:44 - the final app inside of color we have
1034:47 - this top panel here where we have a
1034:49 - couple of switches that either activate
1034:51 - black and white or invert color
1034:54 - not a particularly difficult panel to
1034:56 - create
1034:58 - I want self and the parent as usual
1035:00 - however now for this one I want to
1035:03 - account for an unknown number of
1035:05 - switches which means there could be two
1035:07 - there could be one there could be five
1035:08 - in here
1035:10 - I want to panel to handle all of these
1035:12 - cases as a consequence the parameter
1035:14 - here is going to be arcs or Asterix args
1035:17 - to be more specific what I am expecting
1035:20 - ultimately is a tuple and this Tuple
1035:23 - contains other tuples inside of these in
1035:26 - our two boards we have a variable and
1035:28 - then some text the variable will be
1035:31 - connected to the switch and the text is
1035:33 - going to be the name of the switch
1035:35 - inside of this Tuple you can have as
1035:37 - many inner tuples as you want this is
1035:40 - actually very easy to add although first
1035:42 - of all we're going to need Super thunder
1035:44 - in it
1035:46 - where we set the parent to the parent
1035:50 - next up we have to account for all of
1035:52 - these arcs this is going to happen
1035:54 - inside of a for Loop or VAR and text
1035:58 - inside of the arcs this is going to give
1036:01 - me a variable and a text
1036:03 - this I want to use to create a ctk and
1036:06 - ctk switch
1036:09 - the parent is going to be self as always
1036:12 - since I have the text right away I can
1036:15 - set this as the text for the switch and
1036:17 - I can also set the variable for this
1036:19 - switch as the variable I'm getting from
1036:20 - the Tuple for these sliders I also want
1036:23 - to apply a tiny bit of styling they get
1036:26 - a button color which is going to be blue
1036:29 - this blue I'm getting from the settings
1036:31 - blue
1036:33 - also
1036:34 - they are going to get an FG color
1036:39 - which will be the same as the slider
1036:41 - background
1036:42 - they're resulting widget I want to store
1036:45 - let's call it switch
1036:48 - once I have that
1036:50 - I want to
1036:52 - hack this switch widget
1036:56 - the important thing for this one is the
1036:58 - side should be left
1037:00 - other than that expand should be true
1037:03 - bill should be both and then I want to
1037:08 - have pet X of 5 and Pad y of 5.
1037:12 - this is going to cover the panel let's
1037:14 - try to use this one I am going to need
1037:18 - this inside of the color frame I want to
1037:20 - create a switch panel
1037:23 - the parent is going to be self as always
1037:26 - next up we have to cover these arcs
1037:29 - which are going to be well basically two
1037:32 - bolts
1037:33 - I can add one tube in here we need a VAR
1037:36 - and some text the text is the easy bit
1037:38 - the first one is black and white I
1037:41 - shortened this to b w
1037:43 - the variable we are getting from the
1037:46 - color vars
1037:48 - the entry name is gray scale
1037:52 - then I can duplicate all of this because
1037:55 - the next entry is going to be color vars
1037:58 - and invert the name for this part is
1038:01 - going to be invert
1038:03 - with that we have another panel let's
1038:07 - try and click on utter and color and
1038:10 - there we go we have the invert buttons
1038:14 - once again they don't do very much but
1038:16 - at the very least we have the visible
1038:18 - part
1038:19 - next up inside of the panels there's one
1038:23 - more
1038:24 - of the main panels that we have to
1038:25 - create this is going to be a class of
1038:30 - drop down panel
1038:33 - this is going to be a tiny bit different
1038:35 - because we are not going to use the
1038:37 - panel instead we will inherit from ctk
1038:41 - option menu
1038:43 - I should actually demonstrate what this
1038:45 - one is doing if I open the final app
1038:47 - again inside of effects we are creating
1038:50 - this widget
1038:52 - it's simply a drop down menu I can click
1038:55 - in here find edges Contour
1038:58 - etch enhance
1038:59 - and then you get different effects
1039:01 - applied to the image the effects apply
1039:03 - part we don't do yet but we are going to
1039:06 - create this drop down menu
1039:08 - this one works kind of similar compared
1039:11 - to the segmented panel or rather the ctk
1039:13 - segmented button in the sense that you
1039:16 - need a variable and some values
1039:19 - which means this should be fairly doable
1039:21 - it's going to be your exercise
1039:24 - create this drop down panel
1039:28 - pause the video now and try to figure
1039:30 - this one out you will have to apply a
1039:32 - bit of custom styling so play around and
1039:35 - see how far you get
1039:40 - as always we have to start with a Dunder
1039:43 - init method this one itself it needs a
1039:46 - parent it needs a data variable finally
1039:49 - we need options
1039:52 - pretty much exactly what we have done
1039:54 - for the segmented panel
1039:56 - for this one we are now going to need a
1039:59 - super init method
1040:03 - there are going to be a couple of
1040:04 - options so I'm going to do this over
1040:06 - multiple lines right away
1040:08 - the most obvious one is now we have to
1040:10 - set the master it's not going to be the
1040:12 - parent anymore because we inherit from a
1040:14 - ctk widget not from the panel
1040:17 - other than that we have to set values
1040:19 - which are going to be the options
1040:23 - once we have all of that I want to use
1040:27 - self.pack to pack the widget
1040:30 - I want to set fill to X and Pad y to
1040:35 - four
1040:36 - with that part covered we should at the
1040:38 - very least have something let's see what
1040:41 - we get when we create it I want to
1040:43 - create this panel inside of the effect
1040:45 - frame
1040:47 - once again all the way at the top
1040:49 - I want to have it drop down panel
1040:54 - for that we have to copy all of the
1040:56 - parameters parent datavar and options
1040:59 - parent is the easy one self
1041:02 - all the data variable I want to get the
1041:05 - effect of ours the key we are looking
1041:08 - for here is called effect
1041:10 - finally for the options this one we are
1041:13 - getting from the settings effect options
1041:16 - I just want to copy and paste and then
1041:19 - we should be good to go let's try
1041:21 - main.pi open image
1041:24 - otter effects and we get a drop down
1041:27 - menu this one looks pretty good we can
1041:30 - click on things and we get the right
1041:32 - option although The Styling doesn't work
1041:34 - out right now and this also doesn't do
1041:36 - anything
1041:38 - but this we can work on quite easily
1041:41 - first of all for the styling I want to
1041:44 - set an FG color to dark gray
1041:50 - after that we have to set a button color
1041:54 - then we need a button
1041:57 - hover color
1042:00 - finally we're going to need a drop down
1042:04 - FG color
1042:07 - all of these colors we are getting from
1042:09 - the settings although I did realize I
1042:12 - didn't actually create them so let me
1042:14 - paste them in at this point
1042:16 - there we go these are the three colors
1042:18 - that I want to use we have dropped on
1042:21 - main color dropped on Hover color and
1042:23 - dropped on menu color
1042:24 - drop down main color is going to be the
1042:27 - button color the button hover color is
1042:30 - going to be the drop down hover color
1042:33 - finally the drop down FG color is going
1042:37 - to be the drop down menu color
1042:39 - sorry about the colors I completely
1042:41 - didn't realize
1042:43 - let's try all of this one now if I click
1042:45 - on open image otter effects and there we
1042:48 - go this is looking significantly better
1042:51 - finally we have to connect the variable
1042:53 - to this menu so it actually does
1042:56 - something
1042:58 - What You Do by setting the variable this
1043:00 - one is going to get the data bar with
1043:03 - that we have all of the main panels
1043:07 - let's try all of this I can click on the
1043:10 - utter the rotation works and the zoom
1043:13 - also works both of us do something but
1043:15 - for the invert we get nothing next up we
1043:18 - have colors and some sliders and then we
1043:21 - have effects that works and we have blur
1043:24 - and contrast
1043:26 - so all of this is working but well this
1043:29 - video is getting quite long so for the
1043:31 - next part we are going to make all of
1043:33 - these variables actually do something
1043:35 - at this point this is quite easy to
1043:37 - implement so I'll see you there at this
1043:40 - point we have all of the panels and all
1043:42 - of the data to organize our app we can
1043:44 - actually start working to implement all
1043:46 - of the functionality I'm going to work
1043:48 - on the invert button
1043:50 - on the colors so we have brightness
1043:53 - Vibrance invert and black and white and
1043:56 - we are getting the colors like blur
1043:59 - contrast and stuff like Contours we're
1044:03 - going to apply all of that in this video
1044:06 - back in my code editor I want to work
1044:09 - inside of manipulate image this method
1044:12 - is going to organize all of the image
1044:14 - manipulation
1044:15 - we already have a couple of things in
1044:17 - here now the really important thing that
1044:20 - you absolutely have to understand is
1044:22 - that we always start this method by
1044:25 - assigning a new image this image always
1044:28 - starts with the original this image we
1044:31 - are then going to transform for example
1044:33 - we are starting by rotating it this is
1044:36 - going to give us a whole new image this
1044:39 - new image we are then using inside of
1044:42 - this line and then adding a zoom that
1044:45 - way we have a rotation and a zoom at the
1044:48 - same time this we simply have to
1044:50 - continue forever for example to add a
1044:52 - blur or to change the brightness or to
1044:54 - flip the entire thing we basically take
1044:56 - the image we have and we keep on adding
1044:58 - changes for example what we could be
1045:00 - doing to finish up the positioning is
1045:03 - the flip logic although this one is a
1045:06 - tiny bit different compared to what we
1045:08 - have done with rotate and zoom first of
1045:10 - all though I have to check if self dot
1045:13 - pause virus
1045:15 - the key I'm looking for here is called
1045:17 - lib
1045:19 - I want to get
1045:21 - the value of this variable and for this
1045:24 - one we have a couple of different
1045:26 - options
1045:27 - for example we have capital x then we
1045:30 - want to do a certain thing for now I'm
1045:31 - going to write pass besides that we also
1045:35 - have
1045:36 - that the flip could have the value of y
1045:39 - finally we could have a value of both
1045:43 - these are the values I specified in
1045:45 - settings we have x y and both these flip
1045:49 - options we are passing into the panels
1045:52 - specifically let me minimize all of this
1045:54 - in the segment panel we are passing in
1045:57 - these options which means when we are
1045:59 - clicking on one of these buttons this
1046:02 - data variable becomes the option we have
1046:04 - selected I suppose just to test this let
1046:07 - me print X I want to print Y and finally
1046:12 - I can print
1046:14 - both
1046:15 - let's try this one now I can click on
1046:17 - open image the author and now I have
1046:20 - none this one doesn't do anything but if
1046:22 - I click on X Y and both we get X Y in
1046:26 - both this is working really well
1046:29 - although I don't want to print X Y or
1046:31 - both instead I want to assign a new
1046:34 - self.image
1046:35 - this new image we are getting once again
1046:38 - from image Ops the one we have already
1046:40 - used up here except for this one we need
1046:44 - either mirror or flip mirror is going to
1046:48 - flip
1046:49 - the image in the horizontal axis which
1046:52 - means we are only going to need a single
1046:54 - argument in here which is the image we
1046:56 - already have so essentially what's going
1046:58 - to happen at this point
1047:00 - we are taking our original image then we
1047:02 - are rotating it then we are zooming it
1047:05 - and if this condition is true then we
1047:08 - are flipping it on the horizontal axis
1047:10 - this should already be working let's try
1047:12 - once again I can open the image and now
1047:15 - if I click on X we have a flipped image
1047:18 - this is working perfectly fine
1047:20 - which means next up I can duplicate this
1047:23 - line
1047:24 - get rid of the print statement the only
1047:27 - change I have to make is that this
1047:28 - mirror should now be flip
1047:31 - this is flipping the image on the
1047:32 - vertical axis
1047:34 - let's try this one
1047:37 - I can click on the author and why and
1047:39 - there we go now we have X and Y
1047:41 - separately
1047:44 - which means to combine the two I simply
1047:47 - have to run both of these methods
1047:50 - I want to get this one and this one
1047:53 - I want to mirror and flip the image if
1047:56 - both is selected which means we can try
1047:59 - this one more time
1048:00 - now we get none then we have x y and
1048:04 - both
1048:05 - and this is working perfectly fine
1048:08 - with that we can work on the next bit
1048:11 - I'm going to put it right below let's
1048:13 - work on the brightness
1048:16 - as a matter of fact let's work on
1048:18 - brightness and Vibe rinse
1048:22 - because the work in basically the same
1048:24 - way
1048:25 - although for this one we're going to
1048:27 - need another module of pillow which
1048:29 - means all the way at the top I want to
1048:31 - import
1048:33 - image and hence
1048:37 - the way this one is working is we first
1048:40 - of all have to create what is called an
1048:42 - enhancer for example if I want to create
1048:44 - a brightness enhancer
1048:47 - I have to get image enhance
1048:51 - and then write
1048:53 - this
1048:55 - this one now wants to have the image
1048:58 - by itself this is not going to do
1049:00 - anything that is going to be visible
1049:02 - however what we can do now is get our
1049:05 - image and then use the brightness
1049:07 - enhancer to enhance this one spelling
1049:12 - this correctly would also help
1049:14 - inside of this method we can now add the
1049:16 - argument
1049:18 - in my case I want self dot color vars
1049:21 - the key is going to be brightness and
1049:25 - don't forget get
1049:28 - with that this should be working let's
1049:30 - try I can click on the author this one
1049:32 - is in colors and now brightness
1049:35 - makes the image brighter or darker
1049:38 - and I can make this really bright or
1049:40 - completely black
1049:41 - now that we have covered this part we
1049:43 - can also create the Vibrance enhancer
1049:46 - because it's going to work in the same
1049:47 - way
1049:48 - I want to have image enhance
1049:51 - this one is called color
1049:55 - once again it is going to need
1049:57 - self.image
1049:59 - with that I can get myself.image the
1050:02 - Vibrance enhancer
1050:05 - and then enhance
1050:07 - for this one we need self dot color vars
1050:11 - the key for this one is Vibrance and
1050:14 - once again I want to get this value
1050:17 - this covers another important part let's
1050:20 - try it
1050:21 - hello Vibrance
1050:23 - and you can see this is working really
1050:26 - well
1050:27 - and I can also make this image black and
1050:29 - white via this Vibrance method also I
1050:32 - can combine the two I can make the image
1050:34 - more vibrant
1050:38 - also this is going to work with rotation
1050:40 - and zoom and invert all of this is
1050:43 - coming together quite nicely
1050:45 - next up we can work on the colors
1050:49 - this is going to include let me actually
1050:51 - write it grayscale and invert of the
1050:56 - colors
1050:57 - this returns to Simply getting
1050:59 - self.image the value here we're getting
1051:02 - from image Ops the one we have already
1051:05 - used a couple of times for example for
1051:07 - the zoom
1051:08 - the method we need for this one is gray
1051:11 - scale
1051:13 - as the one argument it wants the image
1051:16 - although the issue for this one is that
1051:18 - we are always applying the grayscale
1051:20 - mode
1051:21 - as a consequence we have to make sure to
1051:24 - wrap this thing inside of an if
1051:26 - statement
1051:28 - so that we only apply it if a certain
1051:31 - condition is true which in my case is if
1051:33 - self dot color vars with the key gray
1051:38 - scale
1051:39 - this is a Boolean VAR which means if I
1051:42 - get the value this is either going to be
1051:44 - true or False only if it is true do I
1051:47 - want to apply this effect
1051:49 - don't forget the colon also now I can
1051:52 - duplicate these two lines
1051:54 - because invert is going to work in
1051:57 - basically the same way I want to check
1051:59 - the invert key
1052:01 - and inside of image Ops I want to use
1052:03 - invert with self.image
1052:06 - this should be enough to activate the
1052:08 - grayscale and the invert effect
1052:10 - let's try this one open image the utter
1052:14 - color now we have black and white and we
1052:17 - have invert also this is still working
1052:19 - with the other sliders so everything is
1052:22 - going pretty well finally we have to
1052:25 - apply the blur and the contrast
1052:30 - those are special effects which means we
1052:33 - are going to need another part of pillow
1052:35 - all the way at the top I want to import
1052:38 - image filter
1052:40 - to apply this effect I want to get
1052:42 - self.image and assign self dot image dot
1052:47 - filter
1052:48 - the argument here needs to be image
1052:51 - filter
1052:53 - and then dots the kind of effect that
1052:56 - you want for example for the blur I want
1052:59 - to have a gaussian blur
1053:02 - there are different kinds of blur that
1053:04 - you can apply gaussian blur is one of
1053:06 - the really common ones this one is
1053:08 - expecting a single argument which is
1053:10 - going to be
1053:11 - self.effectivars the key blur
1053:15 - and from that I want to get the value
1053:19 - it should be all we need let's try this
1053:21 - one
1053:23 - I want to get my otter inside of effects
1053:25 - we have blur
1053:27 - and
1053:29 - this one is applying a tiny bit of a
1053:31 - blur it might even be difficult to see
1053:34 - to make this effect a bit stronger let's
1053:36 - go to menu or this one I want to look at
1053:40 - my effect frame right now blur is going
1053:43 - from 0 to 3. let's go from 0 to 30.
1053:48 - and let's see how much that changes
1053:51 - back to my other effects blur
1053:54 - now this is blurring significantly more
1053:58 - this is covering the blur next up we can
1054:01 - work on the contrast for that I
1054:03 - duplicated this line because I only
1054:06 - really have to make some minor changes
1054:07 - instead of the gaussian blur I want to
1054:10 - have what is called an unsharp mask
1054:14 - this is going to apply a contrast for
1054:18 - that the value is not going to be blur
1054:19 - it is going to be contrast
1054:22 - with this I can try the same thing again
1054:25 - effects now I have a contrast and this
1054:29 - is applying a lot of contrast
1054:31 - nice
1054:32 - there's only one more thing that we need
1054:34 - and that is the effect of ours for that
1054:38 - I'm going to use a match case statement
1054:40 - I want to match self dot effect virus
1054:45 - or this one the key is going to be
1054:47 - effect this effect is going to work
1054:50 - somewhat like the flip in the sense that
1054:53 - we have different options we want to
1054:55 - look at to get all of them you have to
1054:57 - look at settings we have none emboss
1055:00 - find edges contour and Edge enhance
1055:04 - we have to account for the letter 4
1055:06 - cases none we can simply ignore this one
1055:08 - isn't supposed to do anything
1055:10 - which means inside of the match case
1055:13 - statement I want to have one case for
1055:15 - example for emboss
1055:18 - this would be
1055:19 - the second entry inside of effect
1055:22 - options
1055:23 - if that is the case I want to get self
1055:26 - dot image and assign self dot image dot
1055:31 - filter
1055:32 - or this one we once again need the image
1055:36 - filter
1055:37 - dot all in uppercase letters m boss
1055:41 - this one doesn't expect any arguments we
1055:43 - simply have to apply it like that
1055:45 - let's try it actually
1055:47 - if I now click on open image again
1055:50 - otter I can go to effects we have the
1055:51 - drop down menu if I now click on emboss
1055:54 - we are getting nothing and I think I
1055:58 - know why I keep on making the same
1055:59 - mistake in the match case statement for
1056:02 - match I'm only getting the T kinta
1056:04 - variable I am not getting the value
1056:05 - inside of it
1056:07 - now let's try it again open image
1056:10 - otter effects now Amber should be
1056:12 - working and there we go a strange effect
1056:15 - but well it is what it is
1056:18 - this is giving us the first case which
1056:20 - means I can simply duplicate this three
1056:22 - times because besides emboss I want to
1056:25 - have find edges
1056:27 - I have Contour
1056:30 - and finally I have H and Hans
1056:34 - these are the options I've specified in
1056:36 - the settings although I did realize
1056:38 - there should be a lowercase edges to
1056:41 - apply these filters
1056:43 - we have to update the image filter
1056:46 - for example for find edges we want all
1056:49 - uppercase letters again find underscore
1056:52 - edges
1056:53 - for Contour we want Contour finally for
1056:58 - etch enhance we want to have h n and
1057:03 - more
1057:04 - let's try all of that open image
1057:07 - otter
1057:08 - effects emboss is working find edges is
1057:13 - working on tour is working and etch
1057:17 - enhance is also working although it
1057:19 - might be a bit hard to see
1057:21 - if I compare etch enhance to none
1057:24 - you can definitely tell the difference
1057:26 - with that we have applied all of the
1057:30 - effects
1057:31 - now there's one issue that I want to
1057:34 - address and that is performance let me
1057:36 - run the entire thing again and apply a
1057:38 - couple of effects so far I only really
1057:41 - ever applied one or two effects at a
1057:43 - time however if I now apply rotation
1057:45 - Zoom invert
1057:48 - some brightness Vibrance and if I come
1057:52 - to blurb you can see that everything is
1057:55 - getting really really slow
1058:00 - this is happening because we always
1058:03 - apply all of these effects
1058:06 - and Python and pillow simply aren't
1058:08 - designed for that if we wanted to have
1058:10 - something like Photoshop where these
1058:12 - effects are instantaneous then we would
1058:14 - have to add a whole lot more logic
1058:16 - there's a ton of optimization that you
1058:18 - could be doing with this but in my case
1058:21 - I want to keep it simple I only want to
1058:24 - apply for example rotation if the
1058:26 - rotation value is different from the
1058:29 - default value this one here
1058:32 - figuring out how to do that is going to
1058:34 - be your exercise
1058:37 - I want you guys to
1058:39 - only apply the effect if the value is
1058:43 - different from the default
1058:47 - most of you now and try to figure this
1058:49 - one out
1058:54 - the way you want to think about it is I
1058:57 - only want to apply the rotation if
1059:00 - self dot pause vars and rotate
1059:06 - is different from
1059:09 - this rotate default
1059:12 - only if that is the case doesn't make
1059:13 - any sense to apply the rotation which
1059:15 - means only then do I want to apply this
1059:17 - method and create a new image if the
1059:20 - value for this one is simply zero then
1059:22 - we don't have to apply the effect
1059:24 - that is literally it although once again
1059:27 - I did forget get
1059:29 - I keep on doing that sorry about it but
1059:32 - well all we have to do now is to apply
1059:35 - this logic to all of the effects
1059:39 - I only want to apply the zoom if the
1059:41 - zoom is different from zero
1059:43 - I only want to apply flip
1059:46 - if
1059:47 - self flip and get
1059:52 - is different from I want to get the flip
1059:56 - options
1059:58 - with the value 0. only if that is the
1060:02 - case
1060:03 - then I want to do any of this
1060:05 - next up for brightness and Vibrance I
1060:09 - want to get the value of brightness for
1060:12 - example and only apply all of this if
1060:16 - the value is different from my settings
1060:20 - the brightness default
1060:23 - this bracket shouldn't be there next up
1060:26 - I only want to apply the Vibrance if
1060:30 - self colors vibrance.get
1060:33 - is different from
1060:36 - Vibrance default
1060:39 - next up we have the grayscale and we
1060:43 - have the invert although those are
1060:45 - already perfectly fine because we are
1060:48 - applying this effect only if this
1060:50 - variable or this variable return true
1060:54 - those we can just leave as they are
1060:56 - although next up we have blur contrast
1060:59 - and the effects those are particularly
1061:02 - difficult to process so they definitely
1061:05 - need an if statement
1061:06 - I want to check if self dot effect virus
1061:10 - dot get
1061:11 - is different from the blur default
1061:15 - also besides that
1061:18 - I want to get the value for contrast
1061:22 - this one
1061:25 - if this effect is different from the
1061:28 - contrast default
1061:31 - only then do I want to apply the effect
1061:34 - the match case statement we can leave as
1061:36 - it is because if none of these cases are
1061:39 - true then this isn't going to do
1061:40 - anything
1061:41 - with that we should have significantly
1061:44 - better performance
1061:46 - let me run the author I can now rotate
1061:49 - it I can zoom it I can invert the thing
1061:53 - then for the color I can apply some
1061:55 - colors and this does feel much snappier
1061:59 - probably very hard to see on video but
1062:01 - definitely try yourself now that being
1062:04 - said if I apply all of the effects then
1062:07 - this is still going to get slower simply
1062:10 - because we are doing a ton of different
1062:11 - things anytime we are updating the image
1062:14 - at this point we have a really processor
1062:16 - intensive app so you have to be aware of
1062:19 - that although for our purposes this is
1062:21 - still fine which means I can minimize
1062:24 - all of this and this covers a really
1062:27 - important aspect of the app
1062:28 - at this point we have all of the effects
1062:31 - let me apply a couple
1062:34 - there we go what I want to do now is to
1062:36 - add a revert button that way I can
1062:39 - revert all of this and start from
1062:40 - scratch this revert button is going to
1062:42 - work for every single panel which means
1062:45 - in color I can change the color and then
1062:47 - revert all of the colors once again
1062:50 - since we have all of the data in place
1062:53 - this should be fairly straightforward
1062:55 - back in the code I want to have a look
1062:57 - at the menu
1062:59 - the menu itself is totally fine we don't
1063:02 - have to add anything for this one
1063:04 - however inside of the position frame the
1063:07 - color frame and the effect frame
1063:09 - I want to add another panel at the
1063:12 - bottom
1063:12 - this would be a revert button
1063:16 - this one doesn't exist right now let's
1063:19 - create it inside of the panels
1063:22 - I want to create a new class that I call
1063:25 - revert button this is just going to be a
1063:29 - button so ctk and ctk button
1063:33 - after that we are going to need a
1063:36 - thunder image method this one is going
1063:39 - to itself and apparent
1063:41 - after that we're going to need one more
1063:44 - argument
1063:45 - basically how I want to approach this
1063:47 - when I am inside of the menu for example
1063:51 - in the position frame
1063:52 - this revert button has to have access to
1063:56 - all of these variables we need rotation
1063:59 - zoom and invert
1064:01 - on top of that we have to get the value
1064:04 - for example rotation should be set back
1064:07 - to zero the value we have specified
1064:09 - inside of the settings
1064:11 - also this needs to be flexible so we can
1064:13 - use it for the position frame the color
1064:15 - frame and the effect frame
1064:17 - for example for the position frame we
1064:20 - have three different values whereas for
1064:22 - the color frame we have four the way I
1064:24 - approach this in terms of the arguments
1064:26 - first of all I am always going to add
1064:28 - self in here for the parent after that
1064:31 - I'm going to do roughly the same thing I
1064:34 - have done for the switch panel
1064:36 - which means we have a couple of two
1064:38 - bolts that always have a variable and
1064:41 - then some other information for this
1064:43 - revert button I want to add a tuple
1064:46 - with for example
1064:48 - the position vars and rotate
1064:53 - after I have that I want to set the
1064:55 - value I want it to set once we're
1064:58 - clicking on this button which is going
1065:00 - to be rotate
1065:02 - default
1065:03 - also all of this is going to be over
1065:05 - multiple lines because we have a couple
1065:07 - of values in here
1065:09 - besides the POS vars I also want to get
1065:12 - the zoom which has a zoomed default
1065:17 - finally
1065:18 - I want to have
1065:20 - the lip the default value for this one
1065:23 - is going to be flip
1065:25 - options with the value 0. these are the
1065:30 - values I want to set also let me clean
1065:32 - this up a tiny bit that looks a bit
1065:34 - better
1065:35 - I suppose if I organize it like this
1065:37 - this is the most readable these things
1065:39 - are a bit subjective
1065:41 - but now I have to create some kind of
1065:43 - logic to capture all of these arguments
1065:46 - this is going to happen inside of panels
1065:48 - This one is going to need an Asterix and
1065:50 - then arcs you could name it whatever you
1065:53 - want but arcs is what people usually
1065:55 - call it
1065:56 - once we have that first of all I have to
1065:59 - create super thunder in it
1066:02 - set the master to the parent
1066:06 - also we're going to need some kind of
1066:08 - text let's call it revert
1066:11 - also we have to pack this revert button
1066:16 - since all of these panels are simply
1066:18 - using pack this one for example we can
1066:21 - use pack for this one as well with the
1066:24 - one difference that I want to set the
1066:26 - side to bottom to give it a tiny bit of
1066:30 - padding I want to have pad Y and set
1066:32 - this to 10. this should actually already
1066:35 - work let's try I can open
1066:38 - main.pi again and now at the bottom we
1066:41 - have revert it doesn't do anything right
1066:43 - now but at the very least we have
1066:45 - something
1066:47 - what we now have to figure out is how to
1066:49 - get the variables via this arcs and then
1066:51 - update the value
1066:53 - to demonstrate what we have inside of
1066:55 - arcs let me just print it if I now run
1066:58 - main.pi again open image otter
1067:01 - here you can see we have a tick and
1067:04 - tavar somewhere in our memory and then
1067:06 - we have the value for example this first
1067:09 - entry
1067:10 - is the rotation variable and rotate
1067:12 - default is to zero
1067:15 - this is going to bring us to the
1067:17 - exercise
1067:20 - when clicking on the button
1067:23 - get the variables and set the value to
1067:28 - the default
1067:30 - pause the video now and try to figure
1067:32 - this one out
1067:37 - first of all we have to make sure that
1067:40 - we can run some kind of function when we
1067:43 - are clicking on this button or when the
1067:44 - user is clicking on the button for that
1067:47 - I want to have command
1067:49 - I will call the method I want to call
1067:51 - revert
1067:54 - to create this one I need to Define
1067:56 - revert without any custom parameters
1068:00 - next up we have to make sure that we
1068:02 - have access to the arcs inside of the
1068:05 - revert method which we don't have right
1068:07 - now to account for that I want to create
1068:09 - an attribute
1068:11 - let's simply call it the arcs this is
1068:13 - going to be arcs with that I can use
1068:17 - them inside of a for loop I want for VAR
1068:21 - and value in self dot arcs what this is
1068:25 - going to give me let me print it I want
1068:28 - to print the VAR and I want to get the
1068:31 - value
1068:32 - let's try it again open image otter by
1068:36 - default we can't see anything but if I
1068:38 - click on the button we are getting
1068:41 - the variable and the value
1068:44 - that is looking really good which means
1068:48 - now back in the revert button I can
1068:51 - simply use the VAR and then set the
1068:55 - value
1068:56 - we are targeting the VAR then we are
1068:59 - using set and then we assign the value
1069:01 - to the VAR that's literally it
1069:04 - I can get rid of the exercise text back
1069:07 - in main.pi run on of this again
1069:10 - change a couple of values
1069:13 - and now if I click on revert
1069:15 - we are back to normal
1069:17 - although there's one more change that we
1069:20 - do have to make you might have seen it
1069:22 - already these numbers here don't work
1069:24 - out anymore let's have a look what's
1069:26 - going wrong
1069:27 - back in the panels the revert button is
1069:31 - working just fine so I can minimize it
1069:33 - but if I open the slider panel
1069:36 - the issue for this one is that we are
1069:39 - only updating the text the text to
1069:41 - display what number we have when we are
1069:43 - moving the slider from this command
1069:47 - if we're updating the value in any other
1069:49 - way this method is not going to be run
1069:52 - as a consequence the number doesn't
1069:53 - update
1069:55 - to a code for that we have to make a
1069:57 - couple of changes
1069:58 - first of all I want to store the data
1070:00 - VAR inside of an attribute
1070:03 - which means
1070:04 - self.datavar is going to be datavar once
1070:08 - I have that I want to use tracing data
1070:11 - VAR dot Trace I want to check when the
1070:15 - value is changing then I want to call
1070:18 - Self dot update text
1070:20 - because of that we have to update this
1070:24 - update text I don't want to have value
1070:26 - anymore instead I want to have arcs
1070:29 - because once again when we are calling a
1070:31 - method using the trace method then Trace
1070:34 - is going to automatically add a couple
1070:36 - of arcs although we're not going to use
1070:38 - them but you do have to add a parameter
1070:40 - because of this logic we don't need this
1070:44 - command anymore
1070:46 - or this simple reason that the variable
1070:49 - is still attached to the ctk slider
1070:52 - which means when we are using the slider
1070:54 - this data VAR is going to be updated
1070:57 - although to be a bit more consistent
1070:58 - here with the naming let me call it
1071:00 - self.datavar
1071:01 - which means what is going to happen when
1071:05 - the user is using the slider the slider
1071:08 - updates the variable because of this
1071:10 - update
1071:11 - this Trace method is going to be
1071:13 - triggered which triggers this method
1071:18 - which is then going to update the label
1071:21 - on top of that what is much more
1071:23 - important when I'm now clicking on
1071:25 - revert button and we are updating the
1071:28 - value inside of this for Loop
1071:31 - this update text is also going to run it
1071:34 - is going to run every time we are
1071:36 - updating the variable
1071:37 - although before we can run it I have to
1071:39 - make one more change this bit here is
1071:42 - not going to work anymore because we
1071:45 - don't have value
1071:46 - instead I want to get
1071:49 - self.datavar dot get
1071:52 - now all of this should be working let's
1071:55 - try
1071:56 - I want to open the image get the otter
1071:59 - apply rotation all of that is still
1072:01 - working just fine and now if I click on
1072:04 - revert we are all back to 0 and 0.
1072:07 - with that we have the proper Logic the
1072:10 - last one we have to do is to use this
1072:12 - revert button for the other frames as
1072:16 - well
1072:16 - for example the color frame needs a
1072:19 - revert button let me copy in the values
1072:22 - actually otherwise you have to watch me
1072:23 - type for ages I want to have these for
1072:26 - two bolts color bars and brightness with
1072:29 - brightness default then we have
1072:30 - grayscale invert Vibrance all with the
1072:34 - default value
1072:35 - finally for the effect frame I want to
1072:38 - have the revert button again with self
1072:42 - after that
1072:44 - the two builds I want to pass in this
1072:46 - one are these ones
1072:49 - let me format them a tiny bit better
1072:53 - there we go we have effect verse blur
1072:56 - blur default effect was contrast
1072:58 - contrast default and effect was effect
1073:01 - effect options 0.
1073:03 - this should be all we need now we can
1073:06 - try the app open the auto once again
1073:09 - rotation and zoom and invert should
1073:12 - still work just fine this is looking
1073:14 - good next up color I want to have black
1073:17 - and white more brightness and more
1073:19 - Vibrance
1073:20 - now I can click on revert and well back
1073:22 - to normal
1073:23 - finally I want to apply some blur and
1073:26 - some contrast and find edges
1073:29 - now you can't see anything anymore so I
1073:31 - want to revert all of this and we are
1073:33 - back to the others
1073:35 - perfect
1073:36 - with that we have the app itself the
1073:40 - last thing we have to figure out is how
1073:41 - to export the image and then we have
1073:43 - finished the entire thing
1073:45 - we are nearly done with the app at this
1073:48 - point let me apply some changes I want
1073:50 - to have a rotation and brightness
1073:53 - Vibrance doesn't really matter what it
1073:55 - is what I now want to do is to work on
1073:58 - the export
1073:59 - or this one we have two panels I can
1074:02 - type a name let's call it weird
1074:06 - otters
1074:06 - I can also select jpeg or PNG
1074:09 - depending on what I select I am getting
1074:12 - a preview of the file name importantly
1074:15 - for this one the user can type is space
1074:17 - in the input field but when we are
1074:19 - outputting it we're getting an
1074:21 - underscore
1074:22 - this isn't actually necessary for
1074:24 - Windows but I think it's a nice thing to
1074:26 - add here other than that I can click on
1074:28 - Explorer select a folder
1074:31 - and then I get a preview of the folder
1074:33 - this can also be changed for example if
1074:36 - I didn't want a desktop or
1074:38 - anything in here I could simply type
1074:40 - whatever I want although this is not
1074:43 - what I want I want to work on the
1074:44 - desktop
1074:46 - once we have all of that we can work on
1074:48 - the export although for now let's simply
1074:50 - work on the panels and let's see how far
1074:52 - we get back in the code I want to work
1074:55 - inside of the menu for this one we
1074:58 - already have a position frame a color
1075:00 - frame and an effect frame I want to add
1075:02 - one more which is going to be the export
1075:05 - frame
1075:07 - this just as before is going to be a ctk
1075:09 - frame
1075:11 - as a matter of fact I can literally just
1075:14 - copy most of the stuff from the effect
1075:17 - frame because they're all quite similar
1075:20 - with this we have an export frame we do
1075:23 - have to make sure that we are attaching
1075:24 - it to the menu though also we have to
1075:26 - create it which means export frame self
1075:30 - dot Tab and export
1075:34 - although this one is not going to get a
1075:37 - tkinter variable
1075:38 - which means the effect vars we can
1075:42 - simply remove at least for now
1075:44 - with that we have to populate this
1075:47 - export frame with a couple of panels
1075:50 - this is going to happen inside of the
1075:52 - panels I want to minimize everything in
1075:55 - here
1075:56 - first of all let me put it below this
1075:59 - switch panel I want to create a class
1076:01 - that I called file name
1076:05 - panel this is going to be just another
1076:08 - panel
1076:09 - in here I'm going to need a thunder init
1076:12 - method this one will need itself it will
1076:15 - need a parent
1076:17 - and then we need two more things I call
1076:20 - them a name String and if file string
1076:25 - the name String is going to account for
1076:27 - the name the file string will be the
1076:29 - file ending this could either be jpeg or
1076:32 - PNG
1076:33 - I will create those in just a second
1076:35 - although first of all I want to run
1076:37 - super Thunder init and set the parent to
1076:41 - the parent
1076:43 - now we have to figure out how to get the
1076:45 - name String and the file string so far
1076:48 - we created all of the variables in the
1076:51 - app
1076:52 - specifically inside of the init
1076:55 - parameters
1076:57 - all of these are important but for this
1077:00 - particular case we don't need to go that
1077:02 - far we can create these variables in the
1077:05 - export frame for this one I want to have
1077:09 - self.name string this one is going to be
1077:12 - a ctk
1077:14 - string
1077:16 - VAR
1077:18 - without a default value besides that I
1077:21 - want to have a self.file string which is
1077:25 - also going to be a ctk string VAR
1077:28 - although this one is going to get
1077:30 - default value of jpeg
1077:34 - also I should add comments here to
1077:36 - organize all of this a bit better let's
1077:38 - call this section the data because next
1077:41 - up I also want to create widgets
1077:44 - the first widget we already have is the
1077:47 - file name panel let me paste it in
1077:50 - we need self we need self
1077:53 - dot name String and self dot file string
1077:58 - with that we have the T kind of
1078:01 - variables for this one
1078:03 - although those I want to turn into
1078:05 - attributes which means self Dot
1078:09 - file string is going to be the file
1078:12 - string self dot name String is going to
1078:15 - be the name String
1078:18 - although name String should come first
1078:20 - that just feels better you don't have to
1078:22 - do it once we have the data I want to
1078:24 - create the widgets we are going to need
1078:27 - is ctk entry
1078:30 - which is going to need self
1078:33 - then we need a text
1078:35 - variable which is going to be self dot
1078:40 - name String after way of that I want to
1078:44 - pack the entire thing I want to fill X
1078:48 - I want to have pad X of 20 and Pad y of
1078:53 - 5.
1078:54 - and let's actually run the entire thing
1078:56 - to see if all of this is working and now
1078:59 - click on open image otter export and
1079:01 - there we have one panel with an entry
1079:03 - field we can also type in here although
1079:05 - it doesn't do anything at this point
1079:07 - next up I want to create two check boxes
1079:12 - to draw all of this
1079:14 - this is going to be the panel on the top
1079:18 - right now we have an entry field the
1079:21 - entry field we created here besides that
1079:24 - I want to have a frame below which is
1079:27 - going to contain two check boxes for
1079:31 - that we have to create a frame
1079:35 - we're just going to contain the two
1079:36 - checkboxes
1079:38 - I want to start by creating the frame
1079:40 - which is going to be a ctk frame
1079:44 - self is going to be the parent also I'm
1079:46 - going to set the FG color to trends
1079:50 - air rent next up I want to create a ctk
1079:54 - and ctk check box the frame will be the
1079:58 - parent
1079:59 - the text for this one is going to be
1080:01 - jpeg I guess I want to assign this to a
1080:05 - variable let's call it the jpeg check
1080:09 - next up I want to get my jpeg check and
1080:13 - pack the entire thing
1080:15 - site needs to be left because I want to
1080:18 - create a second one and they're supposed
1080:19 - to be next to each other I want to set
1080:21 - fill to X finally expand should be true
1080:27 - with that we have one check button I
1080:29 - want to duplicate all of this because
1080:32 - besides jpeg check I also want to add
1080:35 - PNG check
1080:37 - the text for this one is going to be PNG
1080:40 - although other than that the pack method
1080:43 - is going to work in exactly the same way
1080:45 - finally I want to pack this Frame by
1080:50 - setting expand to True fill to X and Pad
1080:57 - X to 20.
1080:59 - with that we should have the two
1081:01 - switches let's try this one
1081:04 - otter export and there we go
1081:08 - right now we can activate both we are
1081:12 - going to work on that in just a second
1081:14 - before that I want to add one more thing
1081:18 - let me reopen the drawing one thing I
1081:20 - forgot all the way at the bottom of the
1081:22 - widget is some kind of preview
1081:25 - so when we are typing into the field and
1081:28 - select one of the boxes the text field
1081:30 - is going to give us a preview of what
1081:32 - the final text is going to be like
1081:35 - this text I want to store in an
1081:37 - attribute let's call it output it is
1081:39 - going to be a ctk label
1081:43 - self will be the parent and text is
1081:46 - going to be nothing
1081:47 - this output text I want to pack right
1081:50 - away without any arguments for the pack
1081:53 - now with that I can run all of this and
1081:57 - we're not going to see it but there's a
1081:59 - tiny bit more space at the bottom of
1082:01 - this panel
1082:02 - which means at the very least we know
1082:04 - that this output exists but well we're
1082:07 - going to work with it
1082:09 - also as always I want to add a few
1082:11 - comments here to organize all of this
1082:13 - better
1082:15 - let's call this one the check boxes or
1082:18 - file format
1082:20 - finally I want to have the preview text
1082:24 - what I now want to work on is to connect
1082:26 - this name String to the output
1082:29 - which basically means that in the name
1082:31 - String we could have a value like I
1082:34 - think I call it weird otter earlier this
1082:38 - inside of the output should become weird
1082:43 - water
1082:45 - later on when we account for the logic
1082:47 - for these switches here this is going to
1082:50 - become dot PNG or JPEG but this I'm
1082:54 - going to not work on for now to get that
1082:57 - I want to get myself dot name string and
1083:00 - use Trace once again
1083:03 - I want to check if this value changes if
1083:06 - that is the case I want to run
1083:08 - self.update text
1083:10 - which means once again
1083:12 - I need a method called update text with
1083:16 - self and the arcs
1083:19 - in this method I want to check if
1083:22 - self.namestring dot get actually exists
1083:25 - if it doesn't there's no point doing any
1083:27 - of this
1083:29 - if that is the case I first of all want
1083:31 - to get my text which is going to be self
1083:34 - Dodge
1083:36 - name String dot get
1083:39 - although right now this might have some
1083:42 - white space for example we could have
1083:44 - weird water and I want to get rid of
1083:48 - this bit here almost specifically I want
1083:51 - to replace it with an underscore
1083:54 - to get that I want to add one more
1083:56 - method which is called replace
1084:00 - this replays wants two arguments the
1084:02 - first is the character we want to
1084:04 - replace which in my case is an empty
1084:06 - character the second argument is the
1084:08 - character we want to replace the value
1084:10 - with which in my case is an underscore
1084:12 - once we have that I simply have to get
1084:15 - my output the text we have created up
1084:17 - here and then configure it
1084:21 - and set the text to the text we just
1084:24 - created
1084:25 - with that I can run main.pi click on
1084:28 - open image the utter
1084:31 - export now I can type in here
1084:34 - we are getting some text on top of that
1084:37 - if I now type weird Auto we're getting
1084:41 - an underscore between the two words
1084:43 - that is a really good start we have
1084:46 - covered the first bit
1084:47 - next up we have to work on the check
1084:50 - boxes right now we can check both of
1084:53 - them which is not what I want
1084:56 - to account for that
1084:57 - let me actually put them right next to
1085:00 - each other we have jpeg check the widget
1085:02 - and then PNG check also a widget and
1085:05 - below that we are packing them
1085:07 - this way it's easier to compare the two
1085:10 - this is important because both are going
1085:13 - to get the same variable which is going
1085:15 - to be self dot file string
1085:19 - this right now would get us some weird
1085:22 - results
1085:23 - you make all of this work properly we
1085:25 - are going to need an on value and an off
1085:27 - value
1085:29 - basically for the jpeg Widget the on
1085:33 - value is going to be jpeg while the off
1085:36 - value is going to be PNG
1085:39 - whereas for the PNG check the on value
1085:43 - is going to be PNG
1085:46 - while the off value
1085:48 - will be
1085:50 - JPEG that way self.file string can
1085:54 - either be jpeg or PNG and it will
1085:57 - activate or deactivate one of these
1085:59 - buttons
1086:00 - although on top of that we are going to
1086:03 - need one more thing and that is a
1086:06 - command
1086:07 - the command I want to create
1086:10 - is going to be a click although this
1086:12 - click is going to itself and a value
1086:16 - the value we are going to get when we
1086:18 - are calling the command because of that
1086:20 - we will need a Lambda function
1086:22 - I want to use Lambda self dot click
1086:25 - because of that logic I can now pass in
1086:28 - an argument
1086:29 - for the jpeg widget button I want to
1086:31 - have jpeg as the argument for the PNG
1086:35 - widget I want to have PNG
1086:38 - and this is a really long line
1086:41 - I hope you could follow along but now we
1086:44 - are going to call the method click
1086:46 - either with jpeg or with PNG all I need
1086:49 - for this one is self dot then the file
1086:54 - string and set this to the value we have
1086:57 - specified
1086:58 - the value we are getting from click it
1087:00 - could either be jpeg or PNG
1087:03 - after way of that I want to call
1087:05 - self.update text again without any
1087:09 - arguments
1087:10 - that way we are going to update all of
1087:12 - this although before that let's actually
1087:15 - try all of this open image
1087:17 - otter export and now JPEG and PNG
1087:22 - will only ever active if the other is
1087:25 - inactive
1087:26 - the reason why that is working is
1087:28 - because they have these on and off
1087:30 - values
1087:31 - which means when we are setting file
1087:33 - string to jpeg then jpeg is activated
1087:36 - for this one and off for the other
1087:38 - switch and then the other way around for
1087:40 - PNG
1087:41 - finally the last thing that we have to
1087:43 - work on is update text should also give
1087:46 - us the file ending we already have the
1087:48 - text I want to add a tiny bit at the end
1087:52 - I want to get self dot file string dot
1087:56 - get and that is literally it although I
1087:59 - forgot one thing there needs to be a DOT
1088:01 - between the two which means
1088:04 - I simply want to add a string dot
1088:07 - between the two
1088:09 - with that we should be good to go if I
1088:11 - now run main.pi one more time
1088:14 - otter export by default nothing is going
1088:17 - to be visible however once I type some
1088:19 - text we get JPEG and we get PNG
1088:24 - also if I add a space multiple times
1088:27 - this is working just fine
1088:30 - cool with that we have the first panel
1088:33 - this was the more complicated one
1088:36 - I can minimize it now next up we are
1088:39 - going to need a class file path panel
1088:44 - once again this is going to be a panel
1088:46 - we are going to need it under init
1088:50 - method with self we need a parent and
1088:54 - then we need a path string
1088:57 - this path string I want to create inside
1089:00 - of the export frame
1089:03 - once we have that
1089:04 - inside of the file path panel I want to
1089:07 - open a file dialog and then select a
1089:09 - folder
1089:11 - all of this is going to be your exercise
1089:14 - what I want you guys to do is this bit
1089:17 - here number one I want you guys to
1089:19 - create a path string variable in the
1089:21 - export frame and pass it to this widget
1089:24 - we already have the parameter so this
1089:26 - you should be using next up add a button
1089:29 - and an entry field to this widget
1089:32 - finally when you click on the button you
1089:35 - should get a file dialog that will
1089:36 - return the path as a string I have
1089:39 - already done this earlier so check this
1089:40 - bit out
1089:41 - finally the entry field should display
1089:43 - the return path
1089:45 - I suppose I should show you the final
1089:48 - thing is going to look like
1089:52 - this
1089:54 - pause the video now and try to figure
1089:56 - this one out
1090:01 - let's work on it together
1090:03 - first of all number one we have to
1090:05 - create a path string variable this
1090:07 - happens inside of menu I want self.path
1090:12 - string this is going to be ctk stringvar
1090:16 - without any default value
1090:18 - once we have that I want to create a
1090:21 - file path panel
1090:23 - this needs self for the parent and then
1090:26 - self.path string
1090:29 - with that we can work inside of the
1090:31 - class
1090:32 - the entire first bit is covered
1090:35 - although I should also add this super
1090:38 - thunder in it method with the parent as
1090:42 - the parent so that we have some
1090:45 - functionality
1090:46 - besides that I also want to turn the
1090:49 - path string into an attribute meaning
1090:51 - path string is going to be the path
1090:53 - string
1090:54 - next up and let me reorganize all of
1090:57 - this a tiny bit
1090:59 - I want to add a button and an entry
1091:01 - field
1091:02 - which means I want to have a ctk button
1091:05 - with self as the parent the text I
1091:08 - called open
1091:09 - explorer that is all we need for now and
1091:13 - I want to pack this thing with a pad y
1091:15 - of 5.
1091:17 - besides that I want to have a ctk entry
1091:20 - widget with self this I want to pack
1091:23 - right away as well I want to set expand
1091:26 - to True fill to both
1091:30 - finally pad X should be 5 and pet y
1091:34 - should also be 5. this covers the second
1091:37 - bit
1091:39 - what I did forget was the colon after
1091:41 - the download method and I think at this
1091:44 - point it's a good idea to check if all
1091:45 - of this is even working
1091:47 - since we can see some widgets there is
1091:49 - at the very least something inside of
1091:52 - export we now have open Explorer and an
1091:54 - entry field although neither is doing
1091:56 - anything right now
1091:57 - for that we have to work on the third
1092:00 - part
1092:01 - all of this is going to happen inside of
1092:03 - a method I want to open file dialog
1092:09 - this one itself and no other argument
1092:12 - what this one is going to do is going to
1092:14 - be quite similar compared to the image
1092:17 - import for this one we're getting a file
1092:20 - dialog and ask open file
1092:23 - although for this one we have to import
1092:25 - from decanter file dialog this I want to
1092:28 - copy and paste at the top below my
1092:31 - custom tkinder import
1092:34 - now we can use it I want to get my file
1092:37 - dialog dot ask this one is called
1092:41 - directory
1092:43 - and at this point I realized I didn't
1092:45 - teach you this bit you only knew about
1092:48 - where is it ask open file
1092:51 - the difference between these two is that
1092:53 - ask open file is asking for a specific
1092:55 - file whereas us directory is only
1092:58 - looking for a folder sorry about that I
1093:00 - should have mentioned it but other than
1093:02 - that this one is working in the same way
1093:05 - this open file dialog I want to call
1093:07 - whenever we are pressing the button
1093:09 - which means the button is going to get a
1093:11 - command self dot open file dialog
1093:15 - let's try that one
1093:18 - I can click on open image
1093:20 - otter export and open Explorer and there
1093:23 - we go we are opening a file dialog what
1093:26 - is really important about this one is
1093:28 - that now we are clicking on select
1093:29 - folder we are not selecting a specific
1093:31 - image anymore
1093:33 - you can tell because in the desktop we
1093:36 - cannot see the images we created earlier
1093:38 - there's no Auto or weird Auto in here
1093:40 - because right now we are only looking at
1093:43 - folders not files
1093:45 - which is perfect for my purposes
1093:49 - the last thing I have to do is to
1093:51 - capture the string or the path that is
1093:53 - being returned by this ask directory
1093:55 - all I have to do for that is self.path
1093:58 - string dot set and then whatever we get
1094:02 - returned from us directory
1094:05 - to connect this to the entry widget I
1094:07 - want to set a text variable and this
1094:10 - should be self dot path string
1094:14 - this is going to cover the third bit of
1094:16 - the exercise
1094:18 - let's try out of that I want to open the
1094:20 - image Auto export open Explorer I want
1094:24 - to select my desktop and there we go I
1094:27 - have the path to my desktop
1094:29 - on top of that I can type a name in here
1094:32 - weird otter with the file ending and
1094:36 - with that I have a file name and a path
1094:38 - so for the next video we can export this
1094:41 - image
1094:42 - I'll see you there Friday this is going
1094:45 - to be the last video for this project
1094:47 - let me apply a couple of changes I want
1094:49 - to have rotation Zoom invert and let's
1094:53 - add a bit of Vibrance and blur
1094:56 - now I have a changed image this I want
1094:59 - to export for that we already have the
1095:02 - name panel or the name I want to go with
1095:05 - last
1095:07 - otter I want to export a JPEG file then
1095:10 - I want to open the Explorer save all of
1095:12 - this on the desktop and what I want to
1095:14 - do for this video is implement the save
1095:16 - button which means if I click on Save we
1095:20 - have the file exported
1095:22 - which means if I open the folder for the
1095:24 - desktop now we have the last order this
1095:27 - is then finishing up the project
1095:30 - I guess you could Implement some kind of
1095:32 - message that the image was saved but you
1095:34 - can work on this yourself it's not that
1095:36 - important for this project
1095:38 - back in the code I want to work inside
1095:40 - of my app class because this one
1095:43 - contains the image itself
1095:45 - to export it I want to create another
1095:48 - method I call this one export image
1095:52 - this one is going to need three
1095:53 - arguments besides self obviously we need
1095:56 - a name we need a file and we need a path
1096:00 - all three of those we are getting from
1096:03 - the menu because in the export frame we
1096:07 - have a name String a file string and a
1096:09 - path string
1096:10 - those we want to use to export the image
1096:14 - the way I want to use them is I want to
1096:16 - create an export string this is just
1096:20 - going to be an F string where I am
1096:23 - connecting the path
1096:26 - then a slash then I am adding the file
1096:30 - name
1096:31 - after that I have a DOT and then we have
1096:34 - the file ending
1096:37 - I suppose the best way to demonstrate
1096:38 - what this one is doing is to actually
1096:40 - call Export image
1096:42 - this we can do by going into import
1096:46 - image the method
1096:48 - because this one creates the menu all
1096:50 - the way at the bottom this is going to
1096:52 - get another argument which will be self
1096:54 - dot export image
1096:57 - with that inside of the menu
1097:01 - we can add another parameter which is
1097:04 - going to be export image this export
1097:07 - image I want to pass right through to
1097:10 - the export frame
1097:11 - I just have to copy it in now we are
1097:13 - good to go for the menu with that in the
1097:16 - export frame we can have the export
1097:20 - image as another parameter
1097:23 - although the issue right now is that we
1097:24 - don't have a button that can execute
1097:26 - this method this I want to create inside
1097:29 - of panels
1097:31 - let's do it below the revert button
1097:34 - let me add a tiny bit of white space I
1097:37 - want to create a class that I'm calling
1097:41 - save button
1097:43 - this is going to be a ctk button meaning
1097:46 - ctk and button we are as always starting
1097:50 - with a Dunder init method itself and we
1097:53 - need a parent
1097:55 - after that we also want to capture the
1097:58 - export image method
1098:00 - finally to make the export image work we
1098:04 - have to get the three
1098:07 - string vars name String file string and
1098:10 - path string
1098:11 - which means for the parameters I want to
1098:13 - have a name String a file string and a
1098:18 - path string
1098:21 - once we have that I can get this super
1098:24 - thunder in it method pass in the master
1098:27 - which is going to be the parent
1098:29 - next up we have to specify some kind of
1098:33 - text
1098:34 - I simply called this one save
1098:37 - for the last thing we are going to need
1098:39 - a command
1098:40 - I call this one self dot safe
1098:44 - this method we can create right away
1098:45 - Define save with self and nothing else
1098:50 - this method is supposed to execute
1098:53 - export image although for that it needs
1098:56 - to have access to it via the attributes
1098:59 - to achieve that I want to create an
1099:01 - export image attribute which is going to
1099:04 - get the export image method
1099:07 - that allows me to self.export image and
1099:11 - call this thing although now we are
1099:13 - going to need three arguments inside of
1099:16 - main.pi
1099:17 - we can see the actual method we need the
1099:20 - parameter for a name for a file and for
1099:22 - the path
1099:24 - I approach this by creating three more
1099:25 - attribute
1099:27 - self.name string is going to be name
1099:30 - String and self dot file string is going
1099:34 - to be the file string finally self.path
1099:38 - string is going to be the path string
1099:42 - that's why I have access to everything I
1099:44 - need all I have to do now is get
1099:46 - self.name string also do not forget the
1099:49 - get
1099:50 - then we need self.file string dot get
1099:54 - and for last one self.path string dot
1099:57 - get
1099:59 - this is going to give us the button with
1100:02 - that back inside of many.pi we can at
1100:06 - the bottom of the widgets create the
1100:07 - save button
1100:10 - this one itself for the parent then we
1100:13 - are going to need the export image which
1100:16 - we have it is the export image we're
1100:19 - getting this from the parameters
1100:21 - after that we need self. name String
1100:24 - then self dot file string
1100:28 - and self dot path string although while
1100:31 - I am looking at it there's one important
1100:34 - thing missing we're not placing this
1100:36 - button this we can change quite easily
1100:38 - all we need is self dot pack
1100:41 - decide importantly here needs to be
1100:44 - bottom
1100:45 - besides that I want to have pad y being
1100:48 - 10.
1100:50 - but with that we have the panels and
1100:53 - inside of export frame we also have the
1100:56 - save button if I run main.pi I can open
1101:00 - an image click on the author then inside
1101:03 - of export I can type some text choose
1101:08 - whatever file ending I want open the
1101:10 - Explorer get the file and now on the
1101:13 - bottom we have a save button if I click
1101:15 - on it
1101:17 - nothing is happening
1101:20 - and I can also tell you why it is
1101:23 - because I am not printing the export
1101:25 - string let's start off this again by
1101:27 - actually printing the export string so
1101:29 - we can see something
1101:31 - sorry about that export some gibberish
1101:34 - open Explorer select folder now save
1101:39 - and there we go the path you can see
1101:41 - printed right now is a combination of
1101:43 - the path the name and the file path is
1101:46 - the first bit all of this bit here next
1101:51 - up we have the slash this we are adding
1101:53 - or this one then we have the name this
1101:56 - one's quite straightforward finally we
1101:58 - are adding a DOT and the file itself the
1102:01 - dot is this one the file is this one
1102:04 - this is all we are going to need to
1102:07 - export the image
1102:09 - the last command that we are going to
1102:11 - need for this one is going to be self
1102:13 - dot image dot save this one simply wants
1102:17 - to have an export string the one we just
1102:20 - created
1102:22 - since we also have the file ending it is
1102:24 - either going to export a PNG or JPEG
1102:27 - file depending on what the user
1102:28 - specified
1102:30 - and well this is all we need if I run
1102:33 - this app again click on the author I can
1102:36 - make a few more changes let's say for
1102:39 - this one I want to have some really
1102:41 - vibrant authors that are inverted
1102:45 - I want to export let's call them the
1102:47 - Disco
1102:48 - otters
1102:49 - on the desktop also this should be a PNG
1102:52 - file if I now click on Save
1102:54 - nothing happened at least on the surface
1102:58 - however if I open the desktop we have
1103:00 - some discorders also this is a PNG file
1103:03 - and it looks like we applied all of the
1103:06 - effects
1103:07 - which means this is working just fine I
1103:10 - guess you can work a bit more on all of
1103:12 - the logic here to maybe clear the fields
1103:14 - but I think for all practical purposes
1103:16 - we have finished this app

Cleaned transcript:

in this tutorial we will create a BMI app that can work with metric and imperial units an iOS theme calculator that also has a light mode and a Photoshop inspired app that can change the brightness Vibrance rotation scale and lots more of any image to make them I will use tkinter the default user interface framework in Python and I will cover all of it before making the apps I start with the basics things like buttons sliders and text then I go over how to create pretty much any kind of layout including responsive and scrollable ones finally I cover styling which will include animations themes and scaling images by the end of this video you should be able to create basically any kind of user interface in Python and if you enjoyed this video check out my paid course where I cover 7 additional apps a responsive weather app an iOS timer a map viewer a paint app a stock market tracker a snake game and a QR code generator you can get the course for about 15 dollars and buying it helps me massively to create these larger videos and well with that I hope you enjoyed this tutorial alright so let's get started with tkinter and already I want to start by making one app that is going to be very simple but it is going to look something like this in here we are converting miles to kilometers we have an entry field we can type any kind of number and if you convert it you get the output in kilometers a very simple app but it is going to cover all of the basics of tkinter although let's talk about these Basics first to make any kind of appendique Kinder you need three major components the first one is called widgets if I show the app again a widget for example could be a button it could be some text it could be an entry field all of these are widgets tkinder has quite a few of them you're going to learn all of them although for now I'm only going to cover three different ones text an entry field a button and another bit of text besides that we have layout this one determines how the widgets are arranged on the window for example in the app you can see here we have a topdown Arrangement where we have three different rows and then inside of the middle one in here we have two different columns one for the entry field and one for the button this would be a very simple layout obviously you can make much more complex ones finally we have Style style for example determines the color of the button the font of the text the size of this text and so on we could also set the background color and lots of different things all of this is inside of the style if you understand these three main components you are going to have a fairly easy time designing whatever kind of app you want to create and Decanter that being said each of these parts can be quite extensive and I have lots of videos on every single one of them and to understand them in detail it is going to take you some hours now to get started with this app here I am going to skip over a lot of the details that I will cover in future videos so let me explain how you can follow along for this video there are three ways you can approach this I would recommend you to follow along is to download the code and then just play around with the code and follow along as I create this app from scratch that way you're not going to get too lost and you can just play around and change some individual values and see what happens besides that you can also follow from scratch and don't worry too much about the details because at this stage you don't really need to understand every single bit you just need to have a very basic overview of how tikente works with all of the individual bits finally you can also skip this video and go straight into the separate parts you are not going to miss anything although I guess if you follow this video you have a tiny bit of a head start to see how the different parts connect with each other but just to emphasize for this video you don't have to understand every single bit of tkinter I am just going to cover the really Basics and over the next couple of videos we're going to flesh out all of this in a lot of detail so just relax follow along and if you understand even 10 you already have a really good start so let's jump in and let's create an app here I have a completely empty python file and to get started I want to import tkinter and this is usually abbreviated as TK besides that I also want from tkinder import ttk inside of ttk we have all of the widgets that we actually want to use while TK gives us the basic logic once we have that we can create a window or the main window we put everything else on this we create with TK and then TK this we have to call is going to return an object that I want to store inside of a window variable for this one you do want to be careful here with what letters are uppercase and lowercase basically everything is lowercase besides the second t with this we have a window although if I run the app now nothing is going to happen although we don't have a crash that's usually a good start we actually see something we have to call what is called the main Loop let me add another section here called run and I want to call the main Loop method on the object we just created now if I run this we have a basic window and on this window we can already make some changes for example I can get the window and set a title this is just a string let me call it demo if everyone is now in the top left we have demo besides that we can also set the size of this window this we do with window dot geometry in here again we are going to need a string this string wants a width and a height separated by an X for example in my case I want the app to be 300 pixels wide and a 150 pixels high if it runs now we have a much smaller app next up I want to create the first widget this let me add another section here called title and the widget I want to create is called a label this label I want to store in a variable let me call it title label label in tkinter is just a fancy word for text and this label we create with ttk dot label in here we need a couple of arguments a really important one is we need to set a master and the master is basically the parent which in our case is going to be the window the way you want to think about it is that this label needs to be in some kind of container and the only container we have right now is the main window after that I want to create some text so the actual text this label is going to display in my case I want to display myodes to kilometers and with that we have a label widget although if I run the app now we cannot see any kind of text the reason for that is that we need another kind of method to place this label on this window decanter has quite a few of those but I'm going to use the simplest one it's called pack now if I run this again we can see miles to kilometers although what I am quite unhappy about is the font size this one we can also change by adding another font named argument and in here we need a string then we need the font and the font size the font size in my case is 24 and the font I want to use is called calibri now for once again we have a much larger piece of text what you can also do is add something like bold in here that one would give me bold text next up I want to create the input field if I run the app again the input field is going to be this area here for this one I want to have an entry field next to a button although what is really important here is that both of these widgets are inside of a larger container so essentially if we have to create three different widgets here but let's go through it step by step first of all I want to create what is called a let's call it input brain this is going to be ttk and frame this like the label is going to need a parent or a master which again is going to be the window which means I want to set the master to window besides that the frame doesn't need anything else now I have a frame that I can put witches into and I want to put an entry inside of this Frame and a button the entry we create with ttk and entry this one now also needs a master but the master now is going to be this input frame which means input frame in here Order button I want to have ttk and button and once again the master is going to be the input frame although the button is going to need a second argument and that is going to be the text let me call this one convert this will be the text the button is going to display what we now have to do is take both of these widgets place them inside of the frame and then place the frame itself inside of the window and that is going to happen the same way we have placed the label using the pack method which means I want to get my entry widget and I want to pack it or place it with the pack method this I also want to do with the button which means button dot pack with that we have these two widgets inside of the input frame finally I want to get the input frame and pack it on the main window if I run this now we can see we have an entry field and a convert button let me move this a bit to the side and the way you have to understand this this input frame here is a frame around these two widgets and this we have placed using the pack method and what pack does is it places widgets below each other we first have the title label this is the first one here and then we have the frame this is the second one here and inside of the frame we have these widgets here we have an entry widget and we have a convert button since those are also placed with the pack method here they are on top of each other I hope that makes sense once again if you don't understand this don't worry too much about it I will explain all of this in a lot more detail although now I have a problem I want this entry widget and this button next to each other for that we can add an argument inside of pack and this I want to do for both the entry widget and the button the argument I want to add is called side and the side here is going to be left if I run this now we have the widgets right next to each other what you can also do in here is set some padding so pad X could be 10 pixels for example and if I run this now we have a bit of a gap between the entry field and the button this area here a similar thing I want to do to the input frame in here I'm going to set padding for the yaxis this one could be let's say 10 pixels and now we have a bit more space on the top and the bottom because of this pad white 10 pixels here we have a bit more space above and below this Frame now finally we need one more widget and that is going to be the output in here I want to have an output label this like the title label is going to be ttk and label this one is going to be inside of the window container which means the master is going to be the window and for now I'm going to set some text let me call it output this output label we now have to pack on the window so we can see it and there we go we have output all the way at the bottom although for this one I don't really like how small the font is as a consequence I'm going to steal the font from the title label and paste it in here and remove the Bold part with that we have output that looks kind of similar to the title except a bit less bold for this pack method I want to set a bit more vertical padding let's say five pixels and with that we have our basic app now I can add a number in here and click on the button but nothing is going to happen for that we have to add a bit of functionality the most important one is inside of this button whenever a user is pressing the button I want something to happen and for that we want to add the command argument this one wants to have a function let me call it convert this is going to be a function and this function we have to create I want to Define convert it doesn't need any arguments and then here we could for example print convert if I now run this again and I click on convert we can see convert in the bottom because of this print statement here what you really want to be careful here is that you only want to pass a function in here you do not want to call this function the function is going to be called by the button itself so be careful with that one next up whenever I'm pressing the button I want to get the content of this entry field and there are two ways of getting this the first one the easier one is we can get the entry widget itself and then run the get method if I run this again I can type some text in here let's say 10 and now if I click on convert we get 10. that's a pretty good start but that's not usually the method you want to use to get values from a widget it's not particularly efficient you will learn later why instead what you want to do is create a separate variable that holds the value of this entry widget and tkinder has specific objects for that for example in my case I want to create an entry integer this accurate with TK and int VAR and make sure to call this one this is going to create a separate variable that can store and update values and this I want to connect to this entry widget using the text variable which I want to set to entry integer anything we're adding inside of this entry field will be stored inside of this entry integer also whenever we're updating this entry integer we're going to update the content of this entry field although this isn't what we are going to do for this video once you have that you can inside of the convert method instead of Entry I want to get the entry integer although the get method still works just fine if I run this again I can type a number in here I can click on convert and we're going to have the same result so far this wasn't particularly useful but where this system becomes much more powerful is labels can also have their own variable for example since I want to change the output label to the result of this conversion I want to create another ticket variable this I called the output string and this I create with TK and string VAR again don't forget to call it now this variable is going to work kind of like the invariable except it is going to store a string instead of an integer also I just realized I kind of messed up the naming convention here this shouldn't be entry in like this this should be entry int like so let me fix this right away I want to have entry in here and enter it all the way at the top but back to the output label now we have a variable that can store the data for a label this I want to connect to this output label once again for that we need a text variable the text variable here is going to be the output string and let me put all of this over multiple lines so it's a bit easier to see like so now if I run this you will already see some difference and that is let me scroll down a tiny bit when we created this output label we have set a text but after assigning this text variable here we cannot see any more text inside of the app the reason for that is that it takes variable overwrites whatever text is inside of the label and this we can use to update the label dynamically for example when I am pressing the button I want to get the output string and I want to set a new value the new value could be let's say test for now if I run this again and I click on the convert button we now have testing here with that we are able to get data and update the widgets so now we can combine all of that to actually make the app work first of all I want to get the mile input this is what we're getting from the entry widget so this line here I can just copy it in here like so with that we have the miles this I want to convert to kilometers let me call it km output to turn miles into kilometers we need the miles itself so mile input and multiply it with 1.61 one mile is always 1.61 kilometers and this kilometer we want to Output in the label like so and now if I run this again I can type in a 10 in here convert this and we get 16.1 I can do this multiple times let's say a 2 and we get 3.22 I can also add large numbers in here this is still going to work just fine let's try one more time and again this is looking really good and with that we have some basic functionality so with about 37 lines of code we have a functioning app that at the very least does a basic thing although if I run this again this doesn't look very good right now the problem for tkinter is that the default starting methods are very limited but to account for that tkhinter has external modules that you can work with the one that I'm going to use I want to import with ttk and bootstrap this is another module that you have to install and that is going to happen either in the terminal or on the Powershell for example if you are on Windows you want to type pip install ttk bootstrap and run this again in my case this isn't going to do anything because I already have this installed and on Mac OS you would type pip3 install TDK bootstrap you would have the same result with that we can use all of this and the way you will use this is you are importing ttk bootstrap as ttk basically what's going to happen is that ttk bootstrap takes all of the gtk widgets and adds more styling options which means I can simply comment out this one here we can already see an update if I type A Tenon here we can convert and this entire thing already looks much better that's a really good start what we can also do instead of setting the window with tk.tk we can get ttk dot window run this again and now we have to expand the window a tiny bit and we get the same kind of styling although what we can do now is we can set a theme name and in here we have a lot of different themes we could choose from for example the one you have seen earlier is called Journal if I run this again and expand the app we're going to fix this later now we have a different kind of app and while most of what you see is a different button color but the rest still works just fine a dark color you could use here would be called Darkly and this one is going to look something like this although this doesn't change any kind of functionality there we go this is still looking pretty good and with that we have a basic tkinter app we have covered styling we have covered widgets we have covered layouts and we have covered functionality all of the basics of tkinder although over the next couple of videos I will flesh out all of this in a lot of detail and we're going to start by talking about all of the widgets that you have available I'll see you there let's get started by creating a basic window with some widgets that is going to look like so in here we have one large text box where I can write some texts over multiple lines I also have another widget and that is a single line entry so in here I have one line of text besides that I have a button that if I press it it is going to print something you can't see it right now but it definitely works finally there's one more element this bit of text here is also what we are going to add although I jumped ahead a tiny bit before I start coding I do want to cover a tiny bit of theory the most important part is that widgets are the building blocks of T kinder which means anything you see like a text a button a checkbox any kind of menu or any kind of frame is always going to be a widget the best way to think about it is anything you see in a graphical user interface is going to be a widget and understanding widgets is incredibly important to understanding any GUI framework as a matter of fact any framework you are going to use in any language is going to work like that you always Place widgets in such an arrangement that you get some kind of interface it doesn't really matter if you use tick hinder react or something like flutter in the most basic sense they work in the same way although there are lots of other differences but they all use widgets inside of tkin term we have two sets of widgets one is called TK widgets and we have ttk widgets they do sound fairly similar and they are but ttk widgets is what you actually want to use the original TK widgets were made in the original part of tkinter they do work and we are going to use some of them but most of the time they do look quite outdated all of them were made in the 90s and The Styling really doesn't look proper anymore ttk widgets however haven't added much later and work in the same way but look much better and have some extra functionality which is why we are going to use those primarily and that is all we need to get started so let's jump into the code and let's have a look at all of this here I have a completely empty python file and the very first thing that I do have to do is to import T kinder this is usually abbreviated as TK and once we have that I already want to execute the code just to see if we're not getting an error and I don't which is a good sign that means I have tkinter installed if you're getting an error you probably want to check how to install the Kinder with that covered I want to create a window and this window we create with TK and then uppercase t and lowercase k and this we have to call what this is going to return is the actual window that we can place everything else in which means I want to store this inside of another variable let me call it window when you look online you see quite a few different names for this kind of variable a lot of people call it root or you see app quite often I prefer to use window but it really doesn't matter choose whatever you think is best but once we have that we do have a window that we could show however if I run the code now we can't see anything the reason for that is that we need one more method and let me add another label here and let's call it run what we have to do to actually see something is we have to get the window the one we just created and call Main loop on it and don't forget to call it as well now if I run it we can see a basic app you can also resize it all of this works pretty well although it doesn't do very much right now and let's talk very quickly about what main Loop is doing it does a couple of things the main Loop has two major functionalities the first one is it updates the GUI that way if you write some text or update any kind of widget you actually see the result besides that the main Loop is also checking for events this means without the main Loop there wouldn't be any way to check for button clicks Mouse movement closing the window or anything the user could potentially do all of this combined means that our app couldn't run without the main Loop which is why we always have to call it but other than that it is pretty straightforward although there is one thing that you do want to consider this main Loop here runs until we are closing the application which means if I write something afterwards let's say print hello and run the code again we can see the window but we can't see this print hello only when I close the app we get hello which means the code is stopped on this line here and only when we close the window then we get to the next line in most instances this isn't going to be an issue but sometimes you do want to be aware of it alright with that we have a basic window and there's already a couple of things that we can do for example we could add window dot title and this is going to be method so we want to run it and in here we can add a string that changes the name of the app in this case I'm going to call it window and widgets if I run this again and expand the app a tiny bit we can see window and widgets all the way in the top left another thing that you can do is set the geometry this is another method so window dot geometry in here you can do a couple of things the most basic one is that the width and the height of your app at least when it starts and this you do with a string again and tkinder expects a string with the width then an X and then the height kind of a weird format but it is what it is for example if you wanted to have an app that is 800 by 700 pixels you want 800 x 700. actually let me change this to a 500 so you can see it a little bit better running this again now we're getting another app that is 800 pixels wide and 500 pixels tall the numbers we specified here and here later on we are going to learn a few more methods to influence the window but for now I don't want to get into too much detail because it's a tiny bit more advanced what is much more important is that we want to create widgets that is going to be the actual lifeblood of our application and remember what I said earlier we have TK widgets and we have ttk widgets and just to get started I want to create a TK widget one that we are going to see fairly often is called TK dot text this is a multiline text input although when we are creating it we have to give it at least one argument we have to tell it what its Master is in our case the master is going to be the window the main application so Master is going to be the window the way you want to think about it is that the master is basically the parent when we are creating this text box where do we want to put it in my case I want to put it right on the window for now don't worry too much about it we are always going to place widgets on the window but later on when I talk about layouts we're going to change this quite a bit just don't worry too much about it this is all we need to create a basic text input box although if I run the code now we can't see anything the reason for that is that this line here only creates a widget and tells what the parent is we don't actually place it in a visual manner for that we need one more method and tick enter has quite a few different ones the simplest one is called pack if I run this and run the entire app now we can see a text box and this one can work over multiple lines so in here I can write as much as I want this always works when we get started we are creating One widget with this line here and this widget has a master which is the window which means this TK text is going to be a child of this main widget here and what pack is doing if I draw the entire thing this one here is the main window the one we created here and we have placed the widget in the middle of the top this is what pack is doing it takes a widget and it places it in the middle on the top you can customize this quite a bit but for now I'm not going to worry too much about it and with that you can create and place a basic widget although in practice this is not exactly what you see what you see much more often is that people store this widget in separate variable and then called pack on this variable separately which means I want to create another variable let me call it text and this variable is going to contain the widget meaning I want to get rid of this pack and on the next line I want to call text Dot pack the result is going to be the same although now I do have access to this widget with the text variable which I am not going to use for this part but in later tutorials this is going to be really useful and this is what you see most of the time in tkinder when you are creating and placing widgets and with the basic logic covered let's talk about ttk widgets those are the widgets you actually want to use most of the time and to use those we first of all want to import them properly to use them easily this happens with from tkinter import ttk ttk is just another submodule of tkinter so you can just import it from tikenter and that's all you need after that you are using ttk widgets like you would use TK widgets for example I want to create a label and this label I create with ttk DOT label like we have done for the text we have to set the master and this once again is going to be the window which essentially is going to be the parent besides that for the label we need a text argument in my case I want to go with this is a test with that we have a label and this label I want to pack on my window if I run the code now we have a text widget this one doesn't do very much but it will display some text and this is also a very good illustration of what the pack method does if this one here is the window so we have a window like so what pack is doing is it takes a widget and it packs it all the way on the top like a stack so text was our first widget and then we had the label widget that we placed right below and since we called pack on the text first number one here this one is on top and the label had number two so this one is right below which means if I place those two around and create a label first like so we should have this widget all the way on the top if I run this again they can see we now have the text on the top I hope it makes sense so far I am not going to go into any further depth in terms of layouts until we get into the proper layout section for now all you really have to understand is that we are using pack to place widgets on the window so that is a label let me actually rename the comment here ttk label and this I want to call TK text there are two more widgets that I do want to cover in this section the first one is called ttk entry this is a single line entry widget let me save it under entry and this we are creating with ttk and entry in here once again as always we have to set a master which is going to be the window and once we have that I want to get entry dot pack now if I run this again in the bottom we have another entry widget and in here we can write a single line of text if I press enter nothing happens but at the very least it is working and finally I want to create a ttk button let me save it in a variable called button and this button I create with ttk DOT button in here once again as always we need a master which is going to be the window and besides that we need a text for the button this I get with text like for the label and let me call this one a button this button we have to place on the window with the pack method and if I run this we have a button that we can press so this one is working pretty well although this button doesn't actually do anything right now to make it do something we have to add another named argument in here and this named argument is called command this one wants to have some kind of function for example this could be a button function this button function is just a regular python function so all the way at the top I want to create the button function I don't need any arguments and in here I just want to print a button was pressed and now if I run this and I press on the button we get a button was pressed which means every time we are pressing this button we are executing this function the function we have created up here and what is super important to understand here is that this is just a function you do not want to call it that would cause an error the reason why you don't want to call it is you only want to call this function when you are pressing the button so the button itself calls this function so with that we have the basic widgets these are the widgets you are probably going to use most of the time now with that what I want you guys to do is an exercise and then we can finish this part what I want you guys to do is add one more text label and a button with a function that prints hello the label the one you are creating here should say my label let me put this one in quotation marks like so and this label should be between the entry widget and the button those two we have created here the label I want to be between those two and all of this should be fairly straightforward so pause the video now and try to figure this one out let's get started with the label that's the easier part the label I want to let me add the exercise label here and I want to call this the exercise label this is once again just going to be ttk dot label and in here we need a master which is going to be the window besides that I want to have a text and the text should say my label the one I specified in the exercise with that I have to widget and this widget so the exercise label I want to pack on the window if I run this now you can see I have my label all the way at the bottom the issue is this my label should be between the button and the entry widget so we have to move it since we know that Pax respects the order of our code what we want to do is to move this text label between the entry and the button like so that way we are placing the first label all the way in the top below there we have the text then we have the entry then we have the exercise label and then we have the button which means the exercise label is between the entry and the button so let's run all of this again and there we go my label is between the entry widget and the button which means all we have to do now is to create the exercise button this I want to store in the variable I called exercise button and this is going to be ttk dot button inside of it as always I need a master which is going to be the window besides that I want to have some text the text here doesn't really matter let me call this one the exercise button and just to see that this is working let me place the exercise not the label but the button on the window and if I run this now you can see all the way at the bottom we have the exercise button that is a really good start now we just have to create a function that makes this button print the word hello I want to create the exercise button function doesn't need any arguments and what I want to do in here is to print the word hello inside of the button I have to add the command argument and this is going to be the exercise button function once again remember you do not want to call this you just want to pass the function in here the button itself is going to call this function and now if I run this and I press on the exercise button we get the word hello with that we have covered the absolute basics of tkinter now there's one more really quick thing that I do want to cover and that is inside of the button the function you pass in here doesn't necessarily have to be a function by itself it could also be a Lambda function I'm going to duplicate this line here and comment out the original and I'm going to replace this exercise button function with a Lambda function inside of this function all I really want to do is to print the word hello the result is going to be the same meaning if I run the code now and I press on the exercise button we get the word hello which means that these two lines here are identical although you probably want to use the second one because this one is much easier to use since we only want to do something fairly simple a Lambda function here would be perfectly fine also if you're not sure about Lambda function this is probably something you want to look into for a tiny bit at least for any kind of GUI Lambda functions are pretty important especially for buttons but well with that we have the absolute basics of the kinder so far our app is pretty static so in this part I want to get widget data and change widgets and for that we have to cover a couple of things the first part is that there are two major ways to get data from a widget the first one is called tkinder variables this is the one you want to use most of the time although this one is a tiny bit more advanced so I'm going to cover it in the next few parts for now we're going to use the get method lots of widgets have fairly obvious data that the user would want to get hence we have a dedicated method for it the best example here is the entry widget if we run the get method on it it is going to return the text inside of that widget and that is the easiest way to get data from a widget so let's play around with that and once we have that we can change the widget with that data alright once again I have a completely empty python file and the first thing I want to do is to import the Kinder SDK and since I do want to use the nicer widgets I also want from tkinter import ttk and once we have that I want to create a window this I want to store in a window variable and this we create with TK and TK finally to see something I want to run the entire thing and this I do with window.main Loop like so and if I run this thing now we can see we have a basic window that we can work with on top of that I also want to change the title which I do with window.title this I called getting and setting widgets let me run this again and you can see we have a much better title so with that I want to create some widgets that we can work with I want to create a label I want to create an entry widget and I want to create a button and this could already be a pretty good exercise for you see if you can remember what was done in the last part and create the label an entry and a button and see if we can figure this one out all right let's get started by creating a label and this we get with ttk and label once again we need a master and this is going to be the window for the content or the text of this widget I want to set some text it doesn't really matter what it is just choose whatever you want in here finally I want label dot pack this is going to be the label besides that we have the entry which we're getting with ttk and entry in here we just need a master so I can copy from the label and paste it in here and finally I want entry dot pack for the button we need ttk dot button the master once again and we need a text and this could be the button to show the button I want to pack that button and with that we have the three widgets let me run the code and this is looking pretty good I have some text I can write something in the entry and I can press the button so this is working really well now what I want to do is when I'm pressing the button I want to add a command and this is going to be the button function inside of this button function whenever I press the button I want to get the content of the entry widget so let's create that function for that all the way at the top I want to have a button function it doesn't need any arguments and in here I want to get the content of the entry this entry here so how can I get that and for that we have the get method all we really need is entry dot get this is going to return the content of the entry widget so if I print it I can run the entire thing again and now if I press the button nothing happens the reason for that is that nothing is inside of this widget but if I write some text and print and press on the button again we get if I write some text whatever I've just written this works with literally any kind of text and now if I press the button without any content you can see we have an empty line so this is working just fine this get method here for a couple of widgets is the easiest way to get the information however you do have to be really careful here because lots of widgets do not have a get method the label for example doesn't have such a method so if I run label and press on the button we're getting an error the error being that label object has no attribute get so this would not work here I gotta change it back to entry because this is the only one that really works amongst all of the widgets that we have right now so with that we can work on the next part and that is to change widgets let's talk about that bit every single widget in tkinter has a config method and this is what you're using to update the method at least in a very basic way for example inside of the label we can use the config method to update the text this one should be fairly straightforward and since this is so simple there's a shorthand in tkinter this one looks like that we're getting the widget and then kind of like indexing we are passing in a named argument in this case text the same text we have used up here and then we can assign whatever new value we want to assign to it the same thing we have done up here both of these methods are identical you can basically choose whatever you prefer so let's play around with them back in the code whenever I'm pressing this button here I also want to update this label for that let me add another comment here update the label I want to get my label and I want to run the config method inside of this I want to change the text of the label and this let's for now go with some other text that is all we need let me run this entire thing and now if I press on the button we get some other text so this is all we need here now what you do see fairly often is that some people use config other people use configure the result is going to be the same so if I press on the button again we get also some other text right now both are working just fine but I think at some point config is going to be removed so you probably want to use configure most of the time that being said this kind of thing here is not really what you would want to use instead you would go with label and then text and then you can assign the new value so in here I can set some other text and comment out the line we've just created and run the entire thing again and now if I press on the button we are getting the same result which means those two lines here are equivalent they do the same thing and since this one here is a bit more concise I think this is what you would want to use but once again it really doesn't matter whatever you prefer and now that we do have that we can connect updating the label and getting the content of the entry widget so what I want to do is I want to update the label to whatever text is inside of the entry widget and for that I don't want to print the entry widget so let me get rid of the print statement here instead I want to save the content let's call it entry text as another variable and the value here is just going to be a string and this string I want to use down here or my label and this should be all I need if I run the entire thing again I can print a new label and now if I press on the button we get a new label this also works multiple times so some other text I press the button we're getting some other text with that you can get information from a widget and you can update an existing widget and that is basically all you have to know for the basics although for now this is quite limited I guess what I could be covering is that besides the text there are quite a few attributes that you could Target for example what you could do is you can get the entry and there is the state the state determines if the widget is enabled or disabled if I left it like this after I press the button the entry widget would not work anymore let me actually try if I now write in here let's just call it test and I press the button the entry widget is going to be disabled which means I even if I click on it nothing is going to happen although we did update the label so it is still working but after we're pressing the button it is disabled if you want to know all of the possible things you can do with a widget all you have to do is call the widget you want to look at and then the config let's call it configure method without any arguments this is going to return all of the options if you print that you get what is being returned so let me press on the button and close and expand this a tiny bit in here you can see all of the options you can work with for example I have used the text and I have also used this state if I can find it really quick down here so text and State and well there are quite a few more throughout this entire series I'm going to cover basically all of them for now don't worry too much about them I'm going to comment out this part to not make it confusing and that was quite a bit of information so let's do one more exercise and then we can finish this part what I want you guys to do is to add another button that changes the text back to some text the one that we have seen in the original on top of that after the button was pressed the entry widget should be enabled again when we're pressing this button here the entry widget is disabled when we are pressing the other button the one you are going to create it should be enabled again and pause the video now and try to add this new button with the edit functionality and see if we can figure it out let me start by adding the exercise button this is just going to be another ttk dot button with a master being the window or the text I just want to add let's call it the exercise button finally we need a command and the command once again is going to be a function I'm going to create it right here below the exercise let me call this one the reset function it does need any arguments and in here I want to do a couple of things but they're going to come in a bit so I'm going to add pass for now this function I want to call when I press the button so reset function and also don't forget I want to pack the exercise button on the window if I run the entire thing now I have never button that I can press but nothing happens that is the functionality we can work on now there are two things we have to cover number one we have to change the text back to some text let's work on that I want to get my label once again and in here I want to change the text and the text I want is some text that should already reset the label so let me run it and I can write some other text and press the original button and there we go we have some other text however now if I press the exercise button we go back to some text the problem we have is that the entry widget still doesn't work that fortunately we can change quite easily I want to get the entry widget in here I want to Target this state and this state I want to set to enabled I can run the entire thing again I can write whatever I want in here I can press the button and now the entry widget is disabled but if I press the exercise button we have some text again and I can work with the entry widget again and write something else and now once again if I press the button we go back to the enter widget disabled and we have updated the label and this I can do as often as I want and with that we have added a fair bit of interactivity to our app it's not very much but at the very least it's a start although in the next part we're going to make all of this significantly more powerful in this part we are going to cover TK enter variables and this is what you probably want to use most of the time to make widgets interact with each other tkinder has a bunch of inbuilt variables and those are designed to work really well with widgets what that means is that these can be automatically updated by a widget and they can also update the contents of a widget but fundamentally we are still talking about basic data structures like string integers or booleans for this part I am primarily focusing on a string just to keep things simple but well so far this probably doesn't make too much sense so let me give an example let's say we have a label and an entry and both of those should always have the same text whatever I'm writing inside of the entry is also going to be the text of my label coincidentally that is actually what we are going to make let me show you actually the project we are going to build is going to look something like this in here whatever I write in the entry is going to be the text of the label so those two widgets are very closely connected and this we couldn't do so far but we can do it quite easily using a tkanta variable basically how it works is we are creating a string variable so a ticket a variable that stores a string and this variable automatically gets the value of the entry and it automatically sets the value of the label that way both of those are always going to be connected it's not part of the slide but a stringvar also sets the value of the entry so if you had two entry widgets they could also be connected using a string variable I think all of this is going to be much easier to understand when we actually implement it so let's have a look at this encode and let's see how far we get here is a nearly empty python file I have imported tkinter and ttk with that covered I want to create a window and I want to run the window this we have seen a couple of times by now I want to create a window variable and in here TK and TK I guess while we're here I also want to set the title of this thing to tkinter variables once we have that I want to run the main Loop and if I execute all of this we can see a basic window it doesn't do very much right now but it's a start so with that I for now want to create two different widgets I want to create a label and I want to create an entry widget and once again if you want to practice create and pack them on the window yourself but in my case both of those are going to be ttk one is going to be a label the other is going to be an entry although besides that both need the same Master which is going to be the window the label however needs some kind of start text let me call it label for now it doesn't really matter we are going to change it very soon anyway and once we have that I want to pack the label and I want to pack the entry and let me add a tiny bit of white space run the entire thing and there we can see we have a label and an entry field although they are not connected right now and for that we need a teak and a variable this I want to create in a separate section in here I want to have a t cantare variable this you create with TK and then you need the name of the variable you want to create the one I want to create is going to be a string variable and this you have to call it's a separate object this object I want to store inside of a separate variable I'm going to call this one a string VAR and besides a stringvar you also have an INT VAR you have a double VAR and you have a Boolean VAR depending on what value you need but stringvar is what I'm going to use for this video for the next part when we talk about the buttons I'm going to use other kinds of variables as well how this is going to work is that this string bar is going to contain some kind of string and when we pass this into the label it is going to overwrite whatever the text is so for example if inside of this string VAR we have a low then this hello would overwrite the text on top of that we can also connect the string VAR to the entry and this would mean that the entry widget overwrites this string bar which means this widget and this widget have to be connected to this string VAR and for that we have another named argument it is called text variable both a label and entry have the same one so in here I want to pass in the string VAR and that is actually all we need if I run the code now you can already see one change let me expand the window a tiny bit we used to have a label here and it disappeared the reason why it disappeared is because the string VAR doesn't have any value right now so the label does exist but it's empty so we can't see it however if I start typing in here you can see the label text again and the reason why this is working is that both the entry and the label share the same data and this is a very powerful system what you can also do is let me create another entry I can just copy this one and call this entry 2 and entry 2. and if I run the code now again we have two entry Fields if I type in the first one the second one is also updated and if I update the second one the first one is also being updated the reason for that is that these three widgets all share the same string or string variable and that way whatever sn1 is going to be in the other as well and that is a really powerful way to connect different widgets it's super super useful what you can also do is set a start value for this string VAR this you do by adding one argument that is called value in here we can set basically whatever you want for example in my case I want to go with start a value now if I run this again we have start value as the start value for all of the fields and for the label although I can still change them to whatever I want in this case though I don't want to use the start value but this is something you could do on top of that what you can also do if I get rid of enter widget 2 and instead create another button this is going to be ttk button with Master being the window and for the text let's go with button this button I have to pack and if I run the entire thing now we can see we have a button it doesn't really do anything right now for that I want to create another function let's call it button function again we don't need a parameters and in here I want to print the content of this string variable and this we can do quite easily because the string variable has a get method which means all I have to do is add the command named argument for my button and pass in the button function and now I can run the entire thing again and let me type and test it here the label still updates and if I press on a button we also get test we can also write something else and if I press the button again we get write something else finally there's one more thing that I do want to cover and that is you can also set the value of any of these variables let's say after I press a button I want to set the value of this string VAR to button pressed this I do with stringvar and set and in here I just want to add the value I want to set it to button pressed in my case if I now run this thing and let me write just test test test and if I click on the button we get button pressed and you can also see this is updated in the entry and in the label as well because these two share the same data and with that we have taken the variable although I think it might take you a couple of minutes to get your head around it but once you understand it it's super useful and really powerful to connect different widgets and ultimately a much better system than using get basically any widget in tkinter either has a text variable or just a variable we're going to see quite a few more in the next section but before we get to that I want to do some exercises specifically I want you guys to do this I want you guys to create two entry fields and one label that should all be connected via a string variable also set the start value of test and well that should be all you need and pause the video now and try to implement all of this let's get started by creating another TK string VAR this I want to assign to the variable let me call it exercise VAR and in here we already want to set a start value now this you could do in two different ways you could either get the exercise bar and set it to the string test or you could set a start value so in here the value is going to be test both of those are going to get you the same results so let me stick with this one it's a bit more concise once we have that I want to create two entry fields and one label and there should be one label so let's say entry one and entry two since they are both going to be identical I can just do this by copying the text I want to have ttk dot entry then Master is going to be the window and the text variable is going to be the exercise VAR and then I also want to pack both of them although this should be one and this should be two finally I want to create a label and let me call this the exercise label and I am very bad at spelling exercise but for this one we need TDK and label Master is going to be window I'm going to say that a lot we don't actually need a text here all I really care about is a text variable and this is going to be the exercise of r finally I want to pack this label and with that we should actually be good to go if I run the code now you can already see we have two entry widgets and a text or a label widget and all of them have tests if I change the test in either of the entry widgets we get something else once again this is working because they all share the data which means if you update one you update all of them and with that we have string variables it's super powerful Concept in the next part we will talk about buttons and then there this system is going to become even more powerful so I'll see you there in this section we are going to create some buttons specifically we are going to create this app here we have the normal button this one we have already seen then we have checkbox buttons and we have radio buttons how they work in detail I'll explain while I make this section but these are the main buttons we are going to work with so there are three major kinds of button we have a button a check button and a radio button and a really important thing here is that to use them properly you are going to need teak into variables there's stuff I have covered in the last section but well let's Jump Right In and let's have a look here I have a new python file and I already have some imports and I'm creating the basic window the last thing I need is I have to run the entire thing and this I do with window dot main Loop which means if I run the entire thing now we can see we have a basic window I do want to make two minor changes first of all I want to create a title and I call this one just buttons besides that I also want to set the geometry of this app there's no particular reason for it I just think it looks better I want to set the width to 600 and the height to 400. if I run this now we have a slightly larger window which means now we can work with the buttons and let's start with the most basic button this one we have already seen let me just create it again I want to have a button and this I get with ttk DOT button once again we need a master and this is going to be the window now I have used this named argument here quite a bit and you don't actually have to use that instead what you can do is just pass in window or whatever Master you want to have for this widget as the first argument in here the first argument is always going to be the master that way you don't have to write so much besides that for the button you need some text for the name of the button let's say a simple button finally we have to pack the button so we can see it and there we go we have a simple button that we can click on although right now since the button doesn't have any function attached to it it doesn't do anything that we can change quite easily and let me put the function right below the button so I keep everything organized I want to create a function let's call it button function in here we don't have any parameters and I just want to print e basic button this I now have to attach to this button via the command so in here I want to pass in the function if I run the entire thing now I can click on the button and we can see a basic button besides that instead of using a proper function here you could also use a Lambda function like so so Lambda and print and we have a basic button running this again once again I can click on the button and we get the same result once again if you don't understand Lambda functions definitely check out a dedicated video for it it's really important to understand for gui's I am going to use it quite a bit you might be wondering what if you have a function let me return to button function what if you have a function with parameters How Could You incorporate that because when we are calling the function here we can't call this function so we couldn't pass in arguments if you understand how functions work this should be quite easy I'm going to cover this in the next section in a bit more detail for now just think about it and maybe you can figure it out already it's not that difficult but well this is all we need for the basic button we have seen all of this already so there shouldn't be anything new so far although there's one more thing that we can do and that is the button can also have a text variable let me create one as a separate variable I once again want to have a TK and is string VAR don't forget to call it and I want to assign it let's call it button string and this we can pass in here for the button string if I run the entire thing now we have an empty button the reason for that is that this button string is now overwriting the text and since there's nothing inside of the string VAR we have a button without any text so it looks like it's just a basic button that we can change by setting a basic value for the string bar I'm going to call this one a button with string VAR and let me fix the typo there we go if I run this now we have a button with stringvar and this is basically all you need for a basic button it really doesn't do that much more later on when we talk about layouts and styling there's going to be a bit more but for the basic button this is pretty much all you are ever going to need so with that we can come to the next kind of button and that is a check button this one let me create a basic check button I'm going to call it check this one we create with ttk and check button in here as always we're going to need the master which in my case is always the window then we have the text like the normal button I want to call this one check box one and that is all we need for now so let me pack this checkbox and see what we get there we have checkbox one and in here I have a checkbox I can click and unclick this also I click this quite fast away if I restart this by default we have this other kind of value which is I guess neutral besides that we have on and off but once we click on it we can't go back to the neutral position another argument you can pass in here is command and this works like in the normal button meaning you could just add any kind of function you want in my case I'm going to go with Lambda and just print check button this function is going to be run every time we are pressing on this check button let me run this again and now anytime I am clicking on the checkbox we get check button which is pretty useful and now you might be wondering how could we get the value or in other words how do we know if this check button is on or off we couldn't do something like check dot get if I run this and click on the checkbox we get the check button object has no attribute get quite unfortunate so we couldn't use that one let me undo all of this and I just want to print the word check button to store and check the value of check we need a tkinter variable here I want to have a check VAR the value here is actually quite openended we could for example use a TK string VAR the one we have already seen and this we now have to connect to this checkbox and that we do I guess I could put all of this over multiple lines so it's a bit easier to read like so a checkbox doesn't have a text variable instead we have just a variable and this is going to work the same so in here I want to add my check VAR the reason why it's not called text variable is because this variable doesn't set the text of this checkbox instead the check bar is going to store the value if this box is ticked or not and that I can now check so whenever I'm clicking on this box I want to get my check bar and now I can use get if I run the app now you can see we already have one difference and that difference is that this box right now is not neutral anymore instead it is empty or unticked and if I click on it we get one or we get zero and those values since we can only store string vars is going to be a string I guess I can demonstrate this the value we get returned I want to put inside of type and if I run this again click on the checkbox we're getting a string returned it only looks like we get zeros and ones but we are storing them inside of a string variable so they are being converted to a string although that doesn't have to be because we could instead of a string VAR use an INT VAR the result is going to be the same if I run this thing now and click on checkbox we still get zeros and ones however now if I use type on what we're getting returned once again what we're storing now are integer values and that should illustrate quite well that we are working with different data types we have an invar for the tkinter variable and we have a string bar while those two are different the most basic thing you have to understand is that we're just storing basic data types of python inside of slightly more complicated containers that's all that's happening here you could also add in here a Boolean VAR and if I run this we have the same result except now we're getting Boolean values and this might be the data type that makes the most sense here so if I run the same thing again we're getting true or false depending if this thing is ticked or not and this is why it is really important to understand taking their variables to work with buttons or the check button if you want to check the value you basically always need a tkinter variable for Simplicity for this one I want to keep on working with an integer variable this one let me run this again we are always getting once or zero although we could change that because inside of this we have what is called an on value and we have an off value and those well I think they're quite selfexplanatory on value is the value that's being returned when this value is turned on or when the box is checked this in our case should be a number because we are working with integer for the storage let's say the on value could be 10 and the off value could be 5. if I now run the entire thing again I can click on the checkbox and we get 10 and 5 depending if it's on or off or checked or unchecked and if you want to change the start value you would have to work inside of the intvar so in here if I set value to 10 and run it typing again now the Box by default is checked cool so this is working quite well which means now we can work on the Third Kind of button and that is going to be a radio button or rather radio buttons because you basically always want to use multiple I want to start by creating Radio 1 and this we get with ttk DOT radio button for this once again we need a master which is going to be the window and then we need text and this I want to call radio button one since I do want to have two radio buttons I'm going to duplicate this and change to 1 to a two both for the name and for the variable and now I just want to pack Radio 1 and Radio 2 so we can actually see them like so and if I run the entire thing now we have two radio buttons but now you can see something weird let me restart the entire thing so I can explain what I'm doing right now both radio button 1 and radio button 2 are unchecked but if I click on either of them all of a sudden both are being ticked so something weird is happening here this super important thing you have to understand about radio buttons is that each of the widgets has to have a value that is going to be just another named arguments so in here we have a value the value here could be basically anything let's say for the first button I want to have a radio 1 and for the other button I want to have the integer 2. now if I run this again I can click on each button and they don't trigger together anymore if you don't set a value the default value is going to be zero and if you have the same default value for every single radio button tikinder gets a bit confused you basically always have to set a custom value here now other than that you can use this radio button like the buttons we have seen already which means you could also add a command like so and this once again could be just a function or a Lambda function let me go with Lambda because all I want to do is print something and there's something I want to print is the value of this radio one and once again I want to put all of this over multiple lines so things are a tiny bit easier to read like so we once again have the problem that we couldn't use Radio 1 dot get if I run this and click on radio button one we get that the radio button object has no attribute get instead what we have to do is kind of the same thing we have done for the check variable we once again have to create another let me call this one a radio VAR we have to create a t kinter variable and for this one we have a bit of a problem because the value for this one is a string and the value for this one radio button 2 is an integer the best way for that I find is to use a string VAR and this one is going to convert any kind of integer into a string and that way you can work with it and this you have to set as the variable or this radio one button so radio VAR there we go and now you can use the radio VAR and get the value meaning if I print the entire thing and I click on radio button one we get radio 1. that is the value we specified in here for the value so far we basically have a check button what makes radio buttons different is that the idea is you have this takened a variable in multiple radio buttons let me add it for this button here radio button two I want to have a variable as well and this is going to be the same radio variable which means that this radio button and this radio button are both connected to this radio bar here which by default isn't particularly useful if I run the entire thing again I can click on one and we always get radio 1. where this system becomes really useful is when I get the radiovar from somewhere else let's say all the way in this button function I want to print radio VAR and get the value if I now run the entire thing again I can click on radio button 1 and click on the button we get radiovar again and if I click on radio button 2 we get 2 or the value inside of radio button 2. and the really important thing here is if I reorganize everything a tiny bit the basic idea of a radio button is that only one button is ever activated meaning we could have multiple buttons and only one of them would ever be true and then the value is going to be stored inside of this ticket variable and we could get it for example with a button a checkbox is different to that because inside of a checkbox you can have multiple values that are ticked or unticked whereas for a radio button only one value is ever ticked I can actually demonstrate this as well if I wanted to create a second checkbox let me create one right below I want to have check two and let me be consistent with the naming here this check should be a one and a one here check 2 is going to be another ttk check button the master is going to be the window the text is going to be check box 2. and let's say for the command I want to have another Lambda function that for now it's just going to print test and all of this I also have to pack so check two dot pack if I run this again now for the checkbox we can have multiple values and each of those are essentially selfcontained whereas for the radio button we only have one value ticked this is quite different although that being said if you really wanted to you could connect those two check buttons quite easily using the check bar for example if I click on check bar instead of printing something I could also get check VAR and then set the value to the off value let's say a 5. this would be 5 in this case I can now run this and right now checkbox one is ticked but if I click on checkbox 2 checkbox one is not ticked anymore and I can retick it and click on checkbox 2 checkbox one will always be false that way you can connect these two buttons if you want to but by default they are not connected whereas for radio buttons they are always connected although the connection here happens via the tkanta variable and then here sometimes you can get into minor problems for example if I set the value to 1 for both of them and run the typing again if I now click on one of them both are going to be ticked because they both have the same value what basically happens is ticket that checks what is inside of the string variable right now this could be a one and then it checks if this value is identical to the value inside of each widget if it is it's going to check this radio button if it is not it is not going to check it so if these values aren't unique you are going to have some slightly weird Behavior something you do want to keep in mind but other than that this is kind of all you need for the radio buttons so with that we have radio buttons we have check buttons and we have the basic buttons with that I want to do an exercise and then we are done and the exercise here is going to be a tiny bit more extensive let me copy and paste it in it's going to look like so I want you guys to create another check button and two radio buttons and they are going to be very connected for the radio button each radio button should have the value A or B if you click on either of the radio button you are printing the value of the check button the one you're going to create in a second and also if you take either radio button you're also unchecking the radio button so as soon as you click on the radio button you get the value of the checkbox and you uncheck the checkbox and then for the check button if you tick the check button you print the currently selected value for the radio value also you want to use a t Kanda Boolean value for the check button try to implement all of this yourself and see how far you get first of all I want to create the radius and let me call this exercise radius so it's a bit easier to read now in here I want to have exercise Radio 1 and I want to have exercise radio 2. both of those are going to be created in basically the same way I want to have ttk and radio button the master as always is going to be the window then we have text and in here let me call them radio and this is going to be radio a and Radio b that way we have a bit of an indication if we're working with a or b to actually get that value we have to set well the value and this one is going to be either a or it is going to be B to store this value we need a tkinter variable let me call this the radio string and this one is going to be TK string VAR I'm going to use stringvar because A and B are both going to be strings if they were zero or true or false this would be a different kind of teak inter variable Auto stringvar is the one you're probably going to use the most besides that I want to create a function that we can work with and this let me call it radio function in here no parameters and basically what I want to do when I'm clicking on either of these I first of all want to set a command so I'm connecting them with the radio function like so when I'm calling this function however I want to get the current value of the check button and I also want to untick the current check button the problem we have right now is we don't have a check button so we have to create that one first I want to create an exercise check and this is going to be ttk and check button in here we need a window the text is going to be the exercise check and this one is also going to need a variable and this one is going to need an on and an off value and we don't have to set an on on off value because 0 and 1 is perfectly fine here and there's one thing I did forget because we are not placing anything on the window right now which I can do with exercise Radio 1 dot pack then exercise Radio 2 dot pack and then the exercise check dot pack and that is some atrocious spelling before I'm running this I want to add paths inside of the radio function so we're not cutting an error writing this now we can see we have a few more things so something is definitely working we now just have to give it some proper functionality and the first thing we are going to need now is to actually add ticket into variables so we can work with all of this the exercise radio already has a string variable although I didn't connect it to it this we can do all the way at the end we need a variable and a variable is going to be the radio string the one we created here and let me put the entire thing like so we have our data we have the widgets and we have the layout I think that system makes the most sense besides the radio string I also want to have a check and this is going to be a Boolean value because remember in the exercise we want to use a t content variable for booleans which means in here I want to have TK and Boolean VAR this Boolean VAR I now want to place inside of my exercise check and here I need a variable and this is going to be the check Boolean variable with that I can access the value inside of my radios and inside of my check buttons which means I can finally work on the radio function in here I want to get the value of the check button that is currently selected and I'm just going to print it so we're going to keep things simple I want to get my check Bool and I want to get the value and that is all I need for that part if I now run the entire thing again and I click i1 radio a on Radio b we are getting false and that seems correct because the exercise check is not checked right now if I do check it and click on either radio A or B we're getting true so this is looking pretty good next up I want to set the value of the check button to false that way it's not going to be checked this I do with checkpool and set and in here I want to pass in false if I run this again now I can click on the exercise check and if I click either on radio A or B it is going to be unchecked so that is going to cover the first part of the exercise for the next part we have to work on the check button and we only really have one bit left and that is that ticking the check button prints the value of the radio button value that is going to be so simple we can do all of this inside of a Lambda function so in here I want to have Lambda and this is going to print the radio string and I want to get the value the last thing I need is this should be command and this is going to be very hard to read let me put all of this over multiple lines like so I assume you have a much better monitor than I do so you probably don't have to do this but in my case I want this to be visible on even smaller monitors so I'm a bit more constrained there we go this is a bit easier to read we have our exercise Radio 1 Radio 2 and the check and the check now has a Lambda function that prints the current value of the radio buttons so I can run the entire thing and now if I click on let's say radio a I have the exercise to check and I can do this for B and we get B this is working pretty well and with that we have the different kinds of button at least the basic ones that you can work with in tkinder on top of that I think you have a pretty good understanding at this point about teak and their variables I am going to keep on using them quite a bit so definitely make sure that you have at least a basic idea about how they work there's one more topic I do want to cover and that's going to be a shorter one and that is functions with arguments inside of a button and the keynote among you might have seen we have already fixed all of this because when we called The Print function this one here we literally called a function with an argument and this one was only executed when we are actually pressing the button which means with this Lambda here we can call functions with arguments inside it's literally as simple as that although alternatively you could also create a function that returns another functions and have arguments via that so let's explore both of those here I have a python file if I execute this you can see we have a basic tkinder window it doesn't do anything right now but I want to add two widgets let me add a comment here I want to have an entry this once again we get with ttk DOT entry this one is going to need the window as the master and I want to pack this entry widget besides that I need a button this I get with ttk DOT button and here we need the window as the master and for the text I just want to have button this button I also want to pack if I call this pack and execute it we get an entry widget and a button and basically what I want to do is this button should have a command that enables us to call some kind of function let me call it the button function and this button function needs to have an argument the argument is going to be the content of this entry widget to get the content we could use get here but I want to do this properly so I'm going to create an entry string and this is going to be a TK string VAR variable and let's set a start value to test this entry string I now want to pass into this button function when we are calling this function although the function doesn't exist right now so let's create it all the way at the top I want to create a button function this now does need to have a parameter let's call it the entry string all I really want to do in here is to print a button was pressed on top of that I also want to print entry string dot get with that we have a basic setup and try to think ahead if I were to execute all of this what would we get I suppose the best way to find out is to actually run this program meaning if I execute the code we can see in the bottom left we already have a button was pressed and test which is if I move this widget to the side this is what we have gotten from this function the problem is we got it without pressing the button on top of that if I press the button as much as I want nothing is going to happen so let's talk about what the problem here is the problem with this line right now is that python executes the code from the top to the bottom like so that should be fairly obvious and when it comes to this line here it sees a function and since we are calling this function with this bit here python is executing all of this which means we can see a button was pressed and we can see the value of this string variable here the issue then however is that this function is going to return none because we don't Define a return value as a consequence the value that this command is going to get is a none which doesn't do anything we don't get an error but when python tries to execute anything here it's getting command none and simply nothing is going to happen as a consequence of all of this we can see these two values when we are starting the program and afterwards nothing happens when we press the button and well there are two ways to fix this issue the easiest one the one that you are probably going to use basically all the time is you just wrap this function inside of a Lambda function this Lambda here tells python to only execute this code when we are pressing the button the reason why this works is that this Lambda function by default is not being called and then the Lambda function itself returns this function and then this is what the command value sees which means now if I execute the code we can't see any value and if I type in here and press on the button we can see a button was pressed and test and I just saw I made a mistake because this entry widget needs to have the text variable like so and this should be the entry string now let's try this again now we can see test inside of the entry widget and if I press button we can see a button was pressed and test on top of that if I change the value in here to something else and press the button again now we get a button was pressed and something else meaning this is working quite well and if you understand return values and functions this should be fairly straightforward although you could make it more explicit so let's say that you really do not want to use a Lambda function and you insist on using a function that you can call like this if you insisted on doing that you would have to create two functions wrapped inside of each other let's start with the outer one let me call it outer function and this one is going to have a parameter let's call it parameter inside of this function we're going to Define another function and this one I'm going to call the inner function this one doesn't have any parameters and this function is actually going to execute the code and here I want to print a button was pressed and on top of that I want to print the parameter which in this case is going to be this entry string which means we can run the get method on it once we have that all I have to do is to return the inner function and with that down here I can call the outer function and this should still work meaning if I run the code now nothing happens that's a good start and if I click on the button we can see a button was pressed and test and if I change the text to something else this one is also going to work when we come to this line here python is going to execute this function so we are executing all of this inside of this function we are creating another function this one is going to get a simple string and print it that one's quite easy and it also gets the value from the parameter which is the one we created down here the important part is this return in a function because this is what's being returned to the command argument so when we press the button this is what we actually get once again if you understand functions and how they exchange values with return this should be fairly straightforward so I hope that was helpful and most of the time you don't really have to think about it too much if you want to call a function with an argument you just use Lambda and then the function you want to call with the argument in this case the entry string that way all of this works perfectly fine let's talk about event binding first of all what does that even mean and events can be lots of different things the most common one are keyboard inputs although an event can also be a widget getting changed in which you're getting selected or unselected or a mouse click motion or wheel all of these are different kinds of events and what is super useful is that these can be observed and used for example you could run a function when the user is pressing a button that is the main idea of an event and events are very easy to use basically all you have to do is to bind an event to a widget this could for example look like this we have a widget and then we use the bind method and then we have the event and the function the event format is always going to be modifier type and detail for example if I wanted to check alt and the a button I would go for ALT key press and a and once we have that we can run whatever function we want to use so that's all we need let's have a look at all of this here I have a tikenter file and I already have a couple of things if I execute all of this you can see we have a text field we have an entry widget and we have a button although there's no interactivity right now nothing is going to happen and what I want to add is a couple of events there are quite a few I am just going to give some random examples but let's get started slowly and let's do a basic example I want to get my window so the main widget and on this I want to run the bind method in here we need an event and we need a function for the function I'm going to keep it simple and just use a Lambda function and this one is just going to print n event for the event we have to get the proper format and this is always going to be a string inside of that string we need the modifier we need to type and then we need detail the example I gave in the slides was if you want to check for the ALT key a key press and then the a button there's just one more thing that we have to do and that is this thing needs to be enclosed in a smaller than and greater than sign it's a bit weird I don't know why it's necessary but you kind of need it every single time also this is key press with an uppercase p with that I can run the entire thing and if I have the window selected and I press alt and a we are getting an error and that is that Lambda takes zero position arguments but one was given which means when we are calling this function here tick enter automatically inserts one argument in there which we do have to capture that we can do quite easily with Lambda we just have to add event here and now this should be working again with the window selected I can press alt and a and now we get an event yes I can do multiple times and with that we have keyboard input and just for detail let me print this event to see what we get so I want to print the event if I run this entire thing now and I press alt a we are getting an event that has a couple of attributes for example it tells us what the current character is it tells us the position on the widget and that's kind of all we really need this bit here is the only really important part if you understand this system here it is pretty straightforward and there are quite a few different events that you could be working with there's a very good website that accounts for all of them that one looks like this I'm going to add a link in a second and in here if you scroll down you have a list with all of the events you could possibly work with and well in here you have for example the F keys you have the keypad and well you have lots of other things that you could be working with that is basically all you need to understand the basics so with that in mind let's play around with this a tiny bit more and let's create some more events although before that there's one important thing that this event right now checks if we are anywhere on the window and pressing alt and a however I could also change this to only work with the button and I just realized that I changed the naming Convention of the button here a tiny bit let me fix that this should be button properly spelled both is fine I just want to keep things consistent now we have an event that is connected to the button so what does that mean and I think it's best to explain this when I actually run the app here we have the app and if I now anywhere on this window press alt a nothing happens however if I press on the button and now I press alt a we get the event back if I click inside of Entry I press alt a nothing happens what you have to understand here is that if we are clicking on the button tikenter selects that button and only if that is the case we are running events on this widget and if we don't have the widget selected we are not running any kind of event on it so that's an important thing to understand here a really good way to visualize all of this is to use window.bind and in here we can check for one event that is called motion and now for this one I want to create a separate function let me call this one get position once again remember you do not want to call this function instead I want to create it get position and this one needs to have one parameter it always needs the event and what I want to do in here is to print an F string that is getting us the X position and this we can get with event.x and besides that I also want to have y and this is going to be event dot y let me use some semicolons in here that way this is going to look a bit cleaner and now every time I am moving the mouse tikanta is going to tell me the position of the mouse so let me run the entire thing and show my mouse now you can see wherever I am on the window we have the position of the mouse if I go all the way to the top left we have 0 and 0 roughly here and all the way in the bottom right we have 599 and 499 which is basically the window Dimension 1 and with this you can get the mouse position wherever you are on the tkinder widget which can be super handy however one important thing you do have to understand here is that right now we're doing all of this on the entire window if I change this to only work with the text so the text field we created up here and run the entire thing again if I keep my mouse on the bottom of the window nothing is going to happen only if I start to hover over the text widget we can see the position and this stops once I leave the text widget depending on what widget you bind the event to you are going to get different results well obviously I guess the way you have to understand this is that TK enter only checks the event on the currently selected widget although the window is always selected another useful thing to consider is that you don't necessarily always need this entire format sometimes for example you just want to check for any kind of key press you don't really care about what specific key or what modifier you just want to check any kind of key press if that is the case let's actually check for it I want to get my window I want to bind an event and in here I just want to check for a key press nothing else if that is the case you could just add key press and don't worry about the modifiers so let me add Lambda event and I want to print a button was pressed I can run this now and now if I press any of the buttons we get a button was pressed and I'm still getting the input when I move the mouse all of this is working just fine I suppose we could make this a bit more elaborate by turning this into an F string and in here we can get event and character if I run this now I can press any button and we can see what I have pressed that way you can always capture anything on the keyboard let me move this key press right below here so the entire thing is a tiny bit more organized finally there's one more thing that I do want to cover let's say we want to check if the user has selected the entry field and then we want to run some code this we can also do I want to check my entry widget and in there I want to bind an event that is called focus in and this once again is going to be a Lambda event and I just want to print entry field was selected and before I run this let me comment out all of this so we can see a bit easier what's going on so if I run it and now if I select the entry field we are running this statement here which gets us an entry field was selected I can do this multiple times so if I click on the button and return to the entry field we get the entry field was selected I can still use it as normal but now every time I select it I get a function that I can use for whatever purpose this also works the other way around with Focus out and then here I have an entry field was unselected let's try this one now and now I have to field selected and I have the field unselected pretty simple but very very powerful once again check out the website it covers all the options that you could ever need so any kind of event is going to be covered in here and you just have to look for what you need let me put the list actually all the way on the top here so it's very easy to find you can also find it in the notes to this part and alright there's one more thing that I want to do and that is going to be an exercise and upon is going to be I want you guys to print Mouse wheel when the user holds down shift and uses the mouse wheel while the text is selected the text being this text box here and for that you will need the website so check it out and then try to figure out this kind of event pause the video now and see if we can figure it out obviously we have to start by getting our text widget in here I want to bind an event for the event we need a smaller and greater than symbol and now we have to figure out how to combine shift with the mouse wheel let's open the website for that in here first of all we need a modifier the modifier is going to be shift so that one is easy I'm going to start by adding shift in here then I need to Dash and now I have to figure out the mouse wheel for that let me use a text search I want to have a mouse wheel there we go this one is very easy to get which means all we have to do now is add a mouse wheel here and then we are good to go I can then add another Lambda function with event and all I want to do is to print Mouse wheel like so and this should be all we need if I run the code now and I use the mouse Wheel by itself nothing happens but if I hold down shift and use the mouse wheel also nothing happens because my mouse isn't over the text field but if I'm over the mouse field and I use the mouse wheel we get mouse wheel meaning this is working really well and this is basically all you have to know about events it really isn't that complicated the main issue here I think most of the time is figuring out the proper format for the event but if you play around with this for a bit it should be fairly simple in this part we are going to learn about two new widgets they're called combobox and spinbox and let me show you what we're going to make it's going to look like this this is the app for this part and a combo box is basically a drop down menu in here I can select different items and then I can also get the item and place it for example inside of a label is spinbox is this kind of selection menu entry thing where I always have predefined values this could ever be a number or it could be a letter or literally anything else so this is what we are going to create and it's not that hard to make all you really need is a basic widget and you have to assign a list of values to this widget and also you can connect a teak into a variable to select this widget and use it for basically anything else that is all we need so let's jump into some code and let's have a look at this here we are in the code and I already have a few lines of tkinder code if I execute all of this we can see a basic window by now all of this should be fairly familiar and I want to start by creating a combo box this we do with ttk DOT combo box in here as always we are going to need a master which in my case as always is going to be the window on top of that like any other widget I want to assign the widget to a variable let me call it combo once we have that I can pack this combo box fix my typo and run the code and there we can see a drop down menu although right now it doesn't have any values to get the values we need some kind of list let me create one let me call it items and this is just going to be a list and I think for the demo I used ice cream I had pizza and I had Rocco Lee you might notice I am recording all of this right before lunch but this list I now want to assign to this combo box and this we do well we can do it in a couple of different ways the one you probably want to use is by going with values and then here assign the items if I run the code now and I select the drop down menu we can see the different items in here this one is working pretty well alternatively besides disk values you could also use either config or configure and then here you can set the values to whatever the items are like so this line and this line do the same thing which means I could comment out the first one run this again and we have the same items in the drop down menu as always I would recommend this one here because it is more concise but both options are perfectly valid besides that what you can do is to create a ticket variable let me call it the food string and this one is going to be a TK string VAR and this stringvar you can assign to this combo box with a text very bill I want to assign the food string although if I run the entire thing by default nothing is going to happen which means the box is empty when we start the app the reason for that is that we don't set a starting value for this food string that is quite easily changed all you have to do is set a starting value and I want to get the items and select let's say the first one that way on Startup the selected item should be ice cream let's try and there we go we have ice cream in here and we could select something else still this works just fine and for the basics of a combo box this is basically all we need although there's one more really cool thing that you can do and that is events for a combo box like we have seen in the last part you can get the combo box like any other widget and bind an event to it and then run a function and the combo box has one special event that is unique to it and this you call with a double smaller than and a double greater than symbol and in here you have to type in combo box selected what this does is it executes a function every time we are selecting any kind of item inside of it let me create a Lambda function with an event in here and I just want to print test anytime we are selecting an item inside of this combo box so if I run the code now and I select Pizza we get test I select broccoli we get test this one is working just fine I guess something slightly more useful here we could get the food string and then get the value that way we are going to print whatever value is being selected so right now we have ice cream then we have pizza and then we have broccoli that way you can extract the values from this combo box quite easily as always using the TK enter variable with get is the best way to get any kind of value and pass it around it's fairly simple and this you can now connect for example to a label and this is going to be ttk and label with the window as the master and this combo label I want to pack on the window if I run this we can see that we can't see anything let me add some text in here so we can see what's going on here we have a label so if I run this again we can see a label this label I now want to change to whatever is selected inside of the combo box for this one you could work with the tkinter variable the food string for example what you could do is set the text variable and set this one to the food string if I run this now we already have ice cream if I select Pizza we have pizza and if we have broccoli I have broccoli that is one way to approach it although it's quite limited because we can't influence the string so I don't actually want to do it instead what I want to do is what I'm clicking on combobox selected I want to get my combo label and I want to run config on it in here I want to set the text and the text is going to be an F string with selected value is going to be the food string and get now I can run this again by default we get a label but as soon as we select anything we get selected value pizza or broccoli or ice cream and well this is basically all we need so this is a combo box and this is pretty much all you need the main things you have to understand is that all of this is just a widget the main difference compared to other widgets is you have to create a list and assign this list to the values other than that you can use it like any other widget with a teak into a variable and then with events although there's one special event combobox selected so with that covered we can cover the next kind of widget and that is called a spin box and I realized I have combo box with lowercase C it should be an uppercase C that kind of annoyed me a spinbox works very very similar compared to a combo box which is why I covered them in the same bit you are creating it with ttk DOT spin box and in here you need a master which is going to be the window this I also want to assign to a variable I'm going to call this one spin once we have that I can pack the entire thing and run the code we have another widget that is an entry field with up and down arrows where we can select predefined values and now like for the combobox to assign actual values you have to get spin then the value and now we need some kind of list this could for example be one two three four and five if I now run the entire thing we can select between one two three four and five although since you very often work with numbers inside of a spin box there is an easier way to get lots of numbers what you have to do is to define a from and really important here you need an underscore and this is determining the start value let me set this one to a three completely random values and then you need a two and this one doesn't have an underscore let's set this one to 20. the underscore next to from here you always need and if you don't edit you're going to get an error there are some predefined values that you cannot mess with don't forget that it's a very easy mistake to make but once we have defined this from and to Value we can run the entire thing again and now if I click on up we get the values from 3 all the way to 20. another thing that you could do in here is to add an increment value this is essentially the step size for example if I set this to a 3 run the entire thing again now we are starting with a free but then we move in increments of three although here you do have to be a bit careful let me go all the way up and I do reach the highest value of 20. and now if I go down we have 17 14 and 11. so the numbers here are not consistent it's a little bit annoying basically what tikenter does it tries to go as high as it can get in terms of the two number but if it gets to 21 in our case with the increment of three it limits the maximum number to a 20. so that way we actually change the number and the increment doesn't really work anymore it's just something to be aware of it can be kind of annoying but quite workable there are two more things that I do want to cover the first one is that there is a command inside of a spin box in here for example we can use Lambda without any parameters and just print a button was pressed or I guess arrow is a bit clearer because if I run this again and I'm running this command every time I'm clicking on an arrow if you want to have a bit more control so you only want to run a function if the user presses up or down you couldn't use command but like the combo box a spinbox has special kinds of events too actually we can use Spin and bind and event with a function and the event here is once again we need a string and now two smaller than and two greater than operator signs inside of this we have increment and we have decrement increment is forget when we press the up Arrow decrement when we press the down arrow and this we can connect to a Lambda event I just want to print either up or I want to print down now I can run the entire thing again and if I press on up we get up and an error was pressed and the same with down and arrow was pressed depending on the level of control you want to have you can either use command or you can use an event both work perfectly fine finally the last thing you want to be aware of is you can use spin along with the tkinter variable for example I could create a spin integer and this is going to be TK and VAR in here you could also as always Define a start value let's go with 12. this spin integer I now have to connect to the spin box and for that I want to separate all of this over multiple lines that way you can see it a bit better in here I want to create a text variable and this is going to be the spin integer and now we have 12 as the start value and I can change it like so and this would also update the integer for example if I print the value instead of an error was pressed I want to get spin integer and get and now if I run this again and I press up or down we get the various numbers very simple to work with most of this should be quite familiar at this point and with that there's only one more thing that I do want to do for this video and that is an exercise I want you guys to create a spin box that contains the letters a b c d and e on top of that what I forgot to copy in is I want you guys to print a value whenever the value is decreased inside of the spin box so pause the video now and try to implement this one I am going to start by creating exercise letters and this is going to be a list with a b c e and e once we have that I want to create an exercise string and this is going to be a TK string VAR and then here I do want to have a start value like we have seen in the combo box with this part up here I want to get my exercise letters and select the first item once I've all of that I should probably create the exercise spin box and this is going to be ttk dot spin box in here for the master as always we have the parent and I want to have a text variable which is going to be the exercise string let me put this exercise spin on the window widget with pack and now we already have a start value the problem is let me run this again actually just to demonstrate what's happening if I start the app we already have another spin box that says a that happens because of this string VAR here however if I press up we're getting to zero the reason for that is that we haven't assigned these letters as the values for this spin box that we can do quite easily you could either get the exercise Spin and then get the values and assign the exercise letters in here if I run this now I can go up and down and we get the different letters although if you already know that you want to have this list inside of this widget you can just when you create it assign the values with the exercise letters and then I can get rid of this one here and we should have the same result so now I have the same result that is pretty good we are nearly done we have covered the first part now we have to work on the second one that I want to print a value whenever the value is decreased and this we have covered up here I only want to print a value when we are decrementing the value I want to get my exercise Spin and bind an event the event I want to bind is going to be decrement and inside of this I want to get my Lambda with an event and here I want to print the exercise string and I just want to get the value that should be all I need if I run the code now and I press up nothing happens but if I press down or I decrement we get the different letters so with that we are done and this is giving us two new widgets that are quite useful especially combobox I feel is a really commonly used widget the next widget I want to cover is a canvas and a canvas is essentially a widget that allows us to draw various shapes for example we could draw a square a circle lines text and quite a few more elements in the most basic sense what we are doing is we are recreating paint inside of tea Kinder or at the very least we have the basic tools to do so I already have prepared some code the only difference compared to what we've seen in the past is I do not have ttk I only have TK because that's all I need but if I run this code you can see we have a basic window I want to create a canvas which is one specific kind of widget this I want to store in a variable that I'm also going to call canvas and in here we need TK and can this like any other widget this is going to need a master which is going to be my window once I have that I can pack this canvas and if I run the code now we can't see anything however the widget does exist the problem is by default it's well invisible we can change that the easiest way to do so is by giving it a background in here you could choose basically any color for example I could use white in here if I run it now we can now see a white background this would work with any other color red for example would look like this there are quite a few more colors you could be using but I'm going to cover them later but now using basic names is fine and I'm going to stick with white that's I think the easiest color to work with with that all we really have to do is go through the different methods that the canvas object has for example one that I think is very simple is called create rectangle this for the first argument is going to need a tuple and this Tuple is going to determine the dimensions of the rectangle we are going to draw to make this work we need the left point the top point the right point and the bottom point let me actually use the values here for the left I'm going to go with 0 and for the top I also want to go with zero or the right side I want to have 100 pixels and for the bottom I want to have 200 pixels and now if I run this we can see we have a kind of rectangle or at least the outline of one a better way to visualize this is changing these numbers to 50 and 20 that is a bit easier to see so what we have here is a rectangle or the outline of a rectangle and this one is 50 pixels from the left this side here and we have 20 pixels from the top that's this part here the right side this one here is this line and then the bottom 200 is down here we are defining the four sides of this rectangle and the Kinder uses that to create a rectangle another option we have to make this look a bit better is a fill color and for this one again you could use basically any kind of color for example red would be fine and now we have a red rectangle with a black outline if you want to get rid of the outline you would set with to zero width here refers to the Border width if I run this now we only have a red rectangle and well basically now we have a ton of different options that we could be using the best website for that let me open it this one here it's a little bit old but it still works perfectly fine on this side you have a canvas widget and the canvas widget you can see has a ton of different options the one I have looked at already or the one we're working with right now is create rectangles you can already see in there we have canvas then create rectangle and then left top right and bottom and then the different options the different options you can find here and you can see there are a lot I could for example set the width to 10. this one gives us a very thick border and besides that I can also specify a dash in here we did a tuple that specifies what is called a dash pattern let me use some random numbers if I run this now we get a certain kind of Dash what this Dash here means is the first number the one in my case tells me how long each Dash should be and the second number two in this case is how big the Gap is which in this case is going to be twice as wide as the actual pixel if I change this to let's say four and two and run this again we now have a slightly different look this is something you have to play around with quite a bit to really get the idea you could even add more values in here let me add a one and a one run this again and now we get even weirder results but mastering the dash pattern is well something that I'm not too concerned about so do this in your own time if you are really interested another option we have is the outline this determines the color of the Border in here once again we need just a color and now we have a green outline I think at this point you get the idea with this thing it's not terribly complicated and if you go through the list it's quite easy to work with which means I can work with another one another very simple option is called canvas and create line you might already guess what this one is doing it draws a line and then here we need start X and start Y and then end X and end Y and other than that we still have basically the same options we have seen for the rectangle let's say I want to go from 0 and 0 to position 100 on X and 150 on y if I run this now you can see we have a line oh and I forgot to mention right now I've just used numbers you could also place all of this inside of a tuple you would get the same result the same applies to the rectangle you could just have the numbers and everything would still work just fine I just think using a tuple here makes it a bit easier to read and for the line we could for example use fill again let's fill this one with yellow what's a little bit hard to see yeah it's going to be very hard to see let's go with blue that is much easier to see besides that we also have canvas and create oval this one works quite similar compared to the rectangle we are specifying the left the top the right and the bottom and then TK enter is going to draw a circle or rather an oval inside of these limitations although if you have a rectangle with these Dimensions so if I go 0 0 100 and 100 we are going to have a circle like this I want to fill this one let's say with green there we go we have a circle right now but if I change this 100 to a 300 we have a oval I'm going to change this to 200 so we're not drawing too many things on top of each other also I want to turn the coordinates into a tuple to keep things a bit more consistent besides that we also have a create polygon for this polygon I'm going to do all of this inside of a tuple we always need X and Y positions so we have X1 and y1 then we have X2 and Y2 then we have X3 and Y3 and tick inter is going to connect all of them so once again let me go with a point at 0 and 0. then I want to have another point at 100 and 200 and let's say a point at 350. running this now we have a triangle because the point we have drawn consists of three points so let me visualize this our first point is 0 and 0 that is the point up here the next point is 100 and 200 which means we're going 100 pixels to the right and we are going 200 pixels down the final point is 350 so we are going 300 pixels to the right and 50 pixels down and we're ending up on this point which you could see better if I remove the drawing this point here and in here you could add as many points as you want you can also work with fill let's say fill we haven't used white yet and for another point I want to have for x 150 and you could also work with negative points let's say negative 50. okay that um it works but it's very hard to see let's go with gray there we go now we have a polygon on top of everything else there's one more basic method I do want to cover but at this point this becomes fairly repetitive I want to create an arc for the arc we basically start like we have started for the oval which means I want to put them like this for these methods we are drawing always a rectangle and then we are filling the rectangle either with a rectangle itself an oval or now an arc so a partial oval essentially to visualize this let me actually copy this circle here or the coordinates for the circle and I also want to comment out the polygon so we can see what's going on if I run the code now you can see something weird on the circle the green bit here is the circle and on top of that we have this slice cut out if I fill the arc this is going to be even more visible let's say fill with red yeah I can see by default The Arc covers one quarter of the entire Square these numbers you can specify for that you need a start point and this by default is zero which means if I run this thing now nothing changes however if I change this to a 45 now the thing looks like this the way you can understand this number is this line here is angle zero and a whole circle around this well circle is 360 degrees with this line here being 45 degrees what we have specified here for the start point and by default The Arc goes counterclockwise by 90 degrees this we can also change for that we need another argument here that is called extend by default this one is 90 so if I run it nothing changes if I however I change it to 180 degrees it looks like this we are starting here at 45 degrees and then we're going 180 degrees around the circle so this point down here is degree 225. besides that there is one more interesting argument in here and that is called Style in here we have to specify specific tkinter options this could for example be TK and now on capital letters Pi slice and let me fix the typo like so if I run this we cannot see any difference because this is the default option however what we can do is change this to Arc and if I run this now you can't see anything because the arc only draws the Border if however I change the outline which is the Border color to let's go with yellow run this again now you can see very faintly there's a yellow half circle again for this one I want to change the width to 10 so we can see it easily there we go now it's a bit more visible let me actually change the color to Red there we go now this is much more visible also I want to put all of this over multiple lines otherwise this is going to be quite hard to read there we go these are basically the main options you can work with besides Arc and Pi slice you also have chord running this gets us something like this um I am messing this up with the width let me change this to one the difference compared to a pie slice right now is kind of hard to see because we are drawing half a circle let me change this to a smaller number let's say 140 and I want to go with pi slice running this now I get part of a slice the part that chord is going to change is it's going to take away this bit here it's going to be easier if I actually use it so instead of Pi slice I want to have the chord now we can see we are not drawing this bit here anymore that's the only difference between the two and with that we have an arc and this covers another really important part besides that you can also I want to comment out everything so you can see things a bit easier besides all the shapes you can also draw a text with canvas and create text or this one you have to start with a position let me go with 0 and 0 and then a text argument this is some text if I run this now we can see some parts of a text all the way in the top left up here the problem we have with the coordinate right now is this point here 0 and 0 is this point but we are placing the center of the text which means the actual bounding rectangle of the text looks something like this which is fine in general but right now it doesn't help us too much I'm going to change these numbers to 100 and 200 and there we go now we can see this is some text and once again you can also fill this thing with different colors let's go with green now we have some green text another option we could be using is with and this specifies the width of the text if I change this to a 10. now the width of the text is 10 and tkanta tries to fit everything inside of this width which means we have a ton of line breaks and once again if you go through the list you can find a few more options but those are the main ones you could also change the font or if the text is Justified or not there are quite a few different things you can do here the last important thing that you really want to care about is you can also display widgets with a canvas which is a super powerful feature let me use it we need canvas and this is called create window for this first of all we need a position this is just X and Y let me go with 50 and 100. now we need a window argument and important here this window has nothing to do with this window up here they just happen to be called the same the idea is inside of this canvas we are creating a separate tkinder window and this we are using for drawing and drawing in widget specifically and this window once a t can't have widget for example ttk dot label and with this I realized I do actually in ttk so let me import it all the way at the top from tkinter import ttk I should check my notes a bit better for this one we now need a master which doesn't really matter but we still need it and then we need some text or the text this is text in a canvas this one we don't have to pack if I run this now we have this is text in a canvas and once again we are placing the center of this widget which is 50 pixels from the left since the text itself is wider than that we are going a bit outside of the bounding box which is totally fine to do just be aware of it and widgets for some reason aren't being clipped off they are still visible I have no idea why it's just the way it works I'm going to change this 50 to 150 and now this looks a bit better and this is actually quite interactive for example besides the label we could also use a button and this would still work you could even press on the button and execute functions all of this works perfectly fine as a matter of fact or scrolling through a window you want to use this method here for the more advanced parts we are going to see this quite a bit it's super useful and with that we basically have all that we need for the basic canvas widget I'm going to comment this one out as well and now I want to do an exercise that I think is going to be quite fun I want you guys to use event binding along with the canvas to create a basic paint app so wherever the mouse is I want to draw something so when you move the mouse around you can see a line being drawn so pause the video now and try to figure this one out for this one I as always want to get my canvas and I want to bind an event the event I'm looking for is called motion which means I am checking for a movement of my mouse and if that is the case I want to draw on canvas this function doesn't exist right now so let's create it Define draw on canvas in here remember for the parameter we are always going to need one for the event from this event we can get an X and A Y position so X is going to be event dot X and Y is going to be event dot y and these points we can use to draw on the canvas although for that I want to have one more thing and that is the brush size I'm going to use this in a bit again so I want to Define this as a global variable brush size and let's go with four now that I have that I can get my canvas and create an oval we need a left a top a right and a bottom let's say this point here is the mouse cursor I'm going to call it m around this point I want to draw a circle every time we are moving the mouse and this point is going to need four different Arguments for the left side I want to go from the mouse position and then have the brush width which in our case is going to be 4 over 2 or this number here divided by 2. that is going to give us the left position the same thing I want to do for the top for this one I want to go up by 4 over 2 and for the right side I also want to go by 4 over 2 that way the entire width of the thing is 4 pixels which is our brush size I want to get x minus my brush size over 2. the same thing for y except now we need Y which is going to be the brush size divided by 2 again or the right side I want to have X and then plus my brush size over to and finally for the bottom I want to have y plus my brush size over two that is all I need if I run the code now and I hover over the canvas widget we have a very basic drawing app it doesn't look terribly good but at the very least it is working one issue we have right now is that we are only redrawing the outline let me fill this thing with a black color and now this is already looking a little bit better I think the brush size is also a tiny bit large I can change this to a 2. and this is improving as well but well this is a very basic drawing app and you can see here if I move the mouse really fast you can see the individual points we are drawing besides that another cool thing that I realized you can do is I also want to create a canvas method with bind and this one is going to be called Mouse wheel if I'm using that I want to get a brush size adjust function I'm going to create this here and this is going to be brush size adjust as always this needs the event and for this one I want to update this brush size which means I have to create a global variable that is called brush size and when we are doing this let me print the event to see what we get if I now use my mouse wheel we're getting a couple of different arguments the one I care about is called Delta if I move my mouse bit forwards it's going to be plus 120 and if I move it towards me it's negative 120 or backwards I guess for your mouse these numbers might be slightly different but the actual number doesn't matter I only care that it's positive or negative which means I can use this inside of an if statement so if the event dot Delta is greater than zero then I want to increase my brush size let's say brush size plus equal four and else if it is negative then brush size negative equal four with that if I run this again and let me actually show my mouse that's going to make all of this a bit easier to see the drawing still works but now if I scroll forward we have a much thicker Mouse and if I scroll towards me this becomes very very small although he can see an issue I am scrolling just towards me and the number gets smaller and smaller let me actually start this again so right now the line is very thin but now I'm scrolling towards me so the line should get smaller I'm scrolling quite a bit towards me and more and more towards me and the line just gets thicker the reason for that is when we're using the brush size here or these numbers it doesn't really matter if the number is positive or negative the larger the number gets or rather the larger the absolute number becomes the larger the circle is going to be which means as far as the brush is concerned 20 is the same size as negative 20 or almost the same they are slightly different but the larger the number itself the larger the brush size this I don't like which means at the end of this function I want to get my brush size and I want to limit it between two values for that we can use minimum and this is going to pick the smaller numbers between two arguments so in here I can have my brush size and the maximum number I want to have is going to be 50. so let me run this again and now I'm scrolling forward and this is the largest size that I can have for my brush kind of hard to see but it definitely works this function I want to wrap inside of a Max function this one works like minimum except this one selects the larger number and then here I want to have a zero that way our brush can never go below zero if this number becomes negative the max always chooses the zero so now I can run this again and I can increase the size and I can decrease it and at the minimum we get this line here and that is a nice basic paint app you could play around with this quite a bit more to add colors and we are going to do that later but for now I think this is a pretty good start with the canvas app the next widget we are going to look at is called Tree View and if canvas is paint Tree View is essentially Excel or rather we are going to create a table this one is going to look like this in here we have a bunch of different entries that we can look at we could also delete entries like so and you can also select multiple entries and work with them it's a fairly straightforward table that is quite easy to work with and well that's what we're going to create once again I have some code if I execute the entire thing we have a basic window the one thing that is new are these two lists I'm going to use them to create some random names in a bit for now just don't worry about them I want to create a widget and this is called Tree View this we create with ttk.3 View as always I want to store this in a separate variable and this I'm going to call table in here we always need the master which is going to be the window and let me just pack the entire thing to see what we get by default we're getting a plain white square although if I go to the top we can already see we have some kind of top row that doesn't do anything right now that we can change inside of this the idea is that you are defining some columns for example what I want to do is I want to have a column called first then last and finally email if I run this now you can see we have three different columns although you can't see the title right now we have to add what is called headings so I want to get table and then specify a heading and now I have to get the name of the column and this is what we specified here the First Column is called first the second one last and the last is called email which means for the First Column I want to get my first column and the text in here is going to be first name and now if I run this we can see we have first name right in the middle to get it to the left side we have to add another argument inside of the original Tree View and this is called show and then here I want to add headings now if I run this we get first name on the left side by default tkinter is showing some elements on the left side or in the first columns and with this option we are disabling that cool now besides that for the last column I want to have let's call it surname and then for the email I want to have the email and with that we have different columns and then here you could add as many as you wanted and with that we can cover how to insert values into a table this we're doing with table and the insert method in here we need a couple of arguments the first one is called parent and this is usually going to be an empty string what this means is you want this item to be attached to this table and not have any intermediaries later on we're going to learn you could also attach this new item to an existing item inside of the table and then you will get the name of this item inside of the table as the parent but if you leave it empty you're going to attach it to the main table besides that we need an index and we need the actual values for the index for now let me go with zero and the values is going to be a tuple and since we have three columns first last and email we need three values in here let's call this John what is surname I want do and for the email I want to have John Doe at email.com or whatever you want to add in here if I run this now we have a first name a last name and the email so this is going to create one entry but I want to create a hundred entries so let me comment this out and instead I want to create a for Loop so for I in range 100 and I want to use these values here to create random names for that I'm going to need one more module and that is from random import choice choice we can use to pick one item from a list and this could actually be a really good exercise for you it's not going to be the main exercise for this video but try to create from these names 100 entries and add them to the table and see if we can figure this one out I want to create a first name a last name and an email the first name is quite easy I want to have Choice and then first names the same for the last names I want to choice and pick a random item from the last names for the email I want to create an F string and for this one I want to have the first name then I want to have the last name like so and then add email.com this information we can now turn into a tuple let me call it data and here we are first we have last and we have email finally I can actually get the table and insert the values once again for the parent I want to have an empty string besides that for the index well now I'm gonna go with zero and then for the values I want to have data now I can run this and we can see we have a table with a ton of different entries this is looking really good and there's one very quick layout thing that I do want to do inside of pack I want to fill and add the option here for both and then expand I want to set to true I'm going to explain those values later but if I add them we're going to fill the entire widget with entries that looks much better and obviously you could also change these values as much as you liked so for example in the demo app I don't use the first name for the email I only use the first letter of the first name so index 0 here and now we have some slightly different email addresses now let's talk about index and the best way to understand it is if I play around with the value for this one we need parent with an empty string or the index by default this is going to be 0 and for the values I want to have something that's easily visible let me go with XXXX then we have yyy and then we have z z z if I run this now all the way at the top we have the values that I just specified with this entry here if I change this index to a 1 we are placing it on the first index So Below the first element and this I can keep on doing three we have three items on top and so on the question now is if you wanted to add an element at the end of this table how could you do it I guess in our case we know there are 100 elements so I could add 101 in here and now all the way at the bottom we have the entry I just created but sometimes you don't know the end of the table and for that we can use TK and end that way the new item is always going to be inserted at the end and I just realized this needs to be or in uppercase letters like so and now this is working if I scroll all the way to the bottom now we are always at the bottom and that is what index is doing there are two more things that we have to understand we have events inside of a table and we have items and those work really well together so let me start with events there's one special event at a table or a tree view has we need two smaller than and two greater than signs and then here we have three view select this is going to be triggered every time we are selecting an item inside of the table for now let me just Lambda with event and I want to print the event that we are getting so if I run this now and I click on one and we are not getting very much as a matter of fact the event is always going to be the same no matter what we click on the event here you can basically ignore what you rather want to do is get table and then what is called selection this gives us the curly selected items so now if I click on something we get a random number and I can click on multiple items the number is always going to be a bit random so what does that actually mean if this one here is the table this table is populated with lots of items this could be one item this could be another item this could be a third item basically one item is one row of data this is the item we are going to talk about in just a bit oh well we are talking about it right now and each of those items has a specific ID this was what we have seen something like IO and then two numbers 45 for example these numbers we can use to select items from this table and this I want to do in a separate function so let me Define item select this I want to run in here so item select in here I need one argument for the event although since the event is basically pointless I'm going to add an underscore in here to indicate that I don't care about this value in here once again I want to print my table and then the selection so if I run this now I can click on various items and we get some random ID this random ID I can now use the way you use it is you want to get a table and then the item and in here you can add the table dot selection if I comment this out there is going to be one problem because if I click on this you can see we don't just have the ID we have a tuple that has one element inside of them and that is the ID the reason for that is we can select multiple items so if I select Thomson and hold shift we have a bunch of different items the way you are going to work with this is inside of a for Loop that'd be an easy way so for I in table dot selection then I can use table and item and then here I want to look at the item this I could for example print and let's see what we get if I now click on let me show my mouse again if I click on Lisa Thompson we get text nothing image nothing and then values Lisa Thompson LT Thompson and so on those are the main items although there are a few more for this video I want to keep it simple so in here I only want to show the values now if I should notice again I can click on one item and I can select multiple by holding down shift and we always get all of the different items or rather the actual values and with that we have also covered items so let me get rid of the comment and this is covering the basics of a table although there's one more thing that I do want to do I can find another event for this one we only need one smaller and greater than symbol and in here I want to look for delete if that is the case I want to delete items this delete here stands for the delete key on the keyboard so in here I want to delete items and create a function for the event again we don't care about it so an underscore and let me just print the lead so we can see what's going on if I now run the entire thing and I have the table selected and I click on delete we get delete and I want to use this to actually get rid of a value and this I think could be a really good exercise for you try to figure out this function here one method you need is called table dot Elite in here you can pass an item and this is going to delete Whatever item you pass in here and that is going to delete the selected row although you have to figure out how to actually get all of the items so positively now and try to figure this one out basically what we have to do is very similar compared to this in fact let me copy it and I again want to look at my entire selection but now I don't want to print it instead I want to get my table and delete it and then here I want to add I so now if I run this again and I can select a couple of entries let's go with those two and if I click on delete they disappear this works with as many items as I can select and they always just disappear that way we have quite a fancy table that works really well and let me try to delete all of the values inside of this table then you can see it very well that this is indeed working quite good cool so with that we can delete items inside of this table or rather rows that usually makes a bit more sense and with that we have the basics of a table now tables do get quite complicated so there's a lot more stuff that you could cover but if you got so far and you have a documentation this shouldn't be too hard let's create some sliders specifically we are going to create this app here inside of there we have a couple of Sliders and a few progress bars right now I'm dragging the top one and this one is connected to a progress bar on the bottom you can see another progress bar and another slider and those are also connected meaning I can drag the slider and influence the progress bar and also update the text besides that I can also write inside of this box over multiple lines let me add quite a few and on the right I can drag the text up and down that is going to be the project for this part and let's cover some basics in tkinter there are two main widgets to create sliders one is called the progress bar and the other is a slider and both show progress in one dimension this could either be the horizontal or the vertical axis you can Define this yourself in terms of differences the slider can be moved by the user or it can be set independently meaning you can either use the mouse or you can use something like a tkinder variable the progress bar Works a bit differently this one cannot be set by the user so Mouse input is not activated basically always need some kind of tick in the variable or something external to set it but other than that the two widgets work kind of in a similar way so let's have a look I already have a few lines ready if I execute all of this we can see we have a basic tkinder window nothing special so let's start by creating a slider a slider is called ttk and scale this I want to store inside of a variable I'm going to call it scale in here as always at the minimum we need the master which is going to be the window and once I have that I can pack this widget now I can run this and we have a basic slider I can move this around but right now it doesn't really do anything to get some interactivity we have to add a few more arguments the one that is the most useful I feel is called command and this one works like a button anytime we are clicking on the scale we are activating this command meaning in here we need a function or a Lambda function I am going to go with a Lambda function and I want to print let's say test I can now run this and if I click on the widget we can see we are getting an error the error being that Lambda takes zero positional arguments but one argument was given which means when we are calling this Lambda function ttk dot scale enters one argument automatically this we have to capture with a parameter which we can do quite easily I'm going to call it value and just to see what happens let's print this value I can run the entire thing now and if I move the slider around we can see the values that this slider has right now they start from zero and go all the way to one these are the default values and those you can change quite easily we have seen the same thing from the spin box you need from and underscore don't forget that in my case I want to set the start value to zero the end value is going to be set with 2. I'm going to set this one to 25. with that I can run the entire thing again drag this thing around and now we can see we have values from 0 to 25. works pretty well before I continue I want to put all of the arguments on separate lines otherwise this is going to be difficult to read another argument you might want to consider is called length and this one sets the length of the scale so if I set 300 in here we get a much longer slider although in terms of functionality we have the very same numbers finally we have what is called Orient and by default Orient is horizontal I can run this now and we have the same outcome however you might already see where this is going I can set this to vertical and now we have a vertical slider that still works in exactly the same way finally the last thing I do want to cover for slider is you can set a variable and this variable is just going to be a tkinter variable meaning before I create a slider I want to create I'm going to call it scale end and this is going to be TK int VAR this I can set as the value for the variable let me add scale in in here if I run this now nothing is going to happen however what I can be doing is for example set the start value of this decanter variable to let's go with 15. if I now run this we can see that the start value is 0 the N value is 25 and this value here is 15. which is already quite good at demonstrating how these two numbers work together quite well or well not numbers more like widgets you get the idea I guess there's one thing I should cover and that is that this scale end Only Stores integer values that's why it's called integer variable which means if I inside of the command Lambda function get my scale end and get the value if I now run this again I am only getting integer values in the original we had floating Point numbers so be aware that how you store this data is quite important if you really wanted to store floating Point numbers you would need a double VAR this one stores floating Point numbers now I can run this again and now we have the same output as before I guess I can stick with this one seems to work quite well although I do want to change the name here from scale end to scale load cool and with that we have all of the basics of a slider it really isn't that complicated which means next up we can work on a progress bar this we get with ttk and progress bar as always I want to store this inside of a variable I'm going to call this progress and window for the master and I want to pack the progress bar widget if I run the code now we're getting an error because this scale end should be scale float let's try it again in the bottom of the window now you can see we have a progress bar problem is I can't click on it nothing is going to happen the reason being here that there is no mouse input for a progress bar instead what you want to do is to use taking the variables and connect them via variable to this widget for example I could use scale float and now you already see we have some basic progress bar in here and if I drag this thing down and up you can see the progress changes inside of the progress bar although there's one thing that I forgot let me run the entire thing again by default we know that the slider currently is set to 15. in this 15 we have down here as well but we don't know how far this progress bar goes although we do know it starts at zero if I drag the entire thing all the way to the top we get to zero that part should be fairly obvious you might be tempted for this one to set it to argument like we've done for the scale unfortunately this one works slightly different the value you want to specify here is called maximum if I set this one to 25 I can now drag my slider all the way to the bottom and then we have a full progress bar and this way we can connect these two widgets quite well and they work really really well together these are the two arguments you basically always want to use with a progress bar although there are quite a few more and to demonstrate them I'm going to set all of this over multiple lines that way I have a bit more space the next one is called Orient and this one we have already seen in here for example I can set this to vertical and we have a vertical progress bar although it works in exactly the same way I don't want this to be vertical I'm going to set this to horizontal so now we have the starting point again we can also set what is called the mode in here we can either set determinate which is what we already have no change or we can set this to indeterminate if I run this you can see the difference between the two now we don't have a complete progress instead we just have a small bar it's kind of hard to explain but you can see it pretty well besides that we also have length this one like for the slider up here we can set the length of the progress bar let's go with 400 and now we have a really long progress bar that still works with the slider so no change there with that we have all of the main arguments that you could use for Progress bar although there's one more thing that is a little bit weird and that is that a progress bar has a couple of special methods they're called start and stop for example if I said progress dot start run the code you can see this thing starts by itself and since we are changing the number let me move it to the side let me close it actually once I click on start the progress bar is going to start some progress and this progress can also influence the variables the one we have set here because of that we are also going to change this scale here let me run the entire thing again actually you can see that when we start in the program the indicator for the slider went down automatically and it can't go any further but if I move it now the two are kind of fighting with each other so you have to be really careful when you're using start generally I wouldn't really recommend using start there isn't usually a good reason for it when you're using a progress bar you want to have some external data set that gives you the data for this progress like a download for example using the start by itself probably is never really going to be useful although besides that we also have stop although this one doesn't do very much because we are stopping this once we get started I suppose a better way of approaching this is I want to stop this progress as soon as I click on this scale this means instead of printing the value I now want to get the progress and stop it let's try this one now and now if I click on the slider the progress bar doesn't go weird anymore there's one thing I forgot and that is inside of the start method you can set a step size or rather you can determine how often this start method is updating the progress bar for example if I set 1000 in here this is in milliseconds meaning 1 000 milliseconds are one second if everyone is now nothing happens but after one second we get some minor progress so if that is your thing this is also what you could be doing although in my case I don't want to use the start method so I'm going to comment it out all right there's one more widget that I do want to cover and that is called scrolled text let me fix the typo this scroll text we have to import because it's basically a compound widget let me import it first and then you can see quite well how this is going to work to import this we need from tkinder and we want to import scrolled text all in lowercase letters once we have that just be aware that this scroll text is not a widget in itself it works rather like ttk this one contains other widgets which we can use down here I want to create another variable let's call it scroll text and now I want to get my scroll text and then Dot and uppercase as and scrolled text and this is now going to be a widget so this one needs a master once I have that I can get the scrolled text pack the entire thing and now if I run it we have a text field where I can type quite a bit let me go all the way to the bottom and there you can see on the right we have a scroll bar Works quite well this one is well quite straightforward what you really have to be aware of here is that this is not one widget basically we have a normal text widget and then on the right for the scroll bar we have a slider we could make this ourselves and later on I'm gonna have one part where we do make this thing ourselves but for now if you just want to have some simple text widgets this is how you would go on about it you can also set some custom parameters here for example you can set the width to I don't know 200 let's see what we get possibly a bit much let's say 100. there we go and you can also set the height of this thing to 20 and that doesn't do very much let's go with five so you can see it really well there we go now we have a very short text field but other than that this scroll text you would use like a text widget now I am not going to use this very much I just want to cover it so you have a basic idea of what it is in case you see it in my case usually when you create a GUI it is much more efficient to create your own scroll text which means this is not going to be terribly relevant instead I want to do an exercise and then we can finish up this part I want you guys to create a progress bar that is vertical start automatically and also shows the progress as a number on top of that there should also be a scale slider that is affected by the progress bar pretty much what we have done with these two widgets here pause the video now and try to implement this yourself let's get started by creating the progress bar that is vertical that starts automatically and that shows the progress as a number since we do have to store some data here I want to create let me call it the exercise and this could be an integer this as always is going to be an INT VAR with no starting value once we have that I want to create an exercise progress bar and this we get with ttk and progress bar what a master we need the window then for the orientation to be vertical I need to set Orient to vertical besides that I also have to declare the variable for this widget which is going to be the exercise integer with that I can fix the typo and pack this widget let's see what we get that's looking pretty good although it doesn't do anything right now for that I want to get exercise progress and start the entire thing running this again now we have an automatically starting progress bar that covers most of the first bit so we got so far this bit here next up we have to show the progress as a number which means we are going to need a label with ttk and label the master is going to be the window besides that we are going to need a text variable which is going to be the exercise integer don't forget to pack this label and let's see this is looking really good cool I'm quite happy with this although here you can see one quite weird thing and that is that this number is well a floating Point number we have point zero I don't actually know why tkinder is doing that but when you're using an integer variable and set it as the text variable and the original number is a floating Point number like what we get from a progress bar then tick interp stores it as a floating Point number but rounds it down it's kind of weird but this is basically never going to be an issue so not too much to worry about this covers the entire first part for the next bit we have to create another slider that is affected by the progress bar let's call this one exercise scale and we need ttk and scale the master is going to be the window and in here I want to have a variable which is going to be the exercise integer this exercise scale I now want to pack I can now run the entire thing and now we can see we kind of have a problem that is the slider is always all the way on the right the reason for that is that the default values for a slider are between 0 and 1. to fix that all we have to do is set a from argument for the slider which I want to set to zero and a two argument to let's go with 200 and let's see what change that is going to make now we can see that the slider goes all the way to the halfway point and if we change this to 100 we can see that all of this is working as intended there we go this is looking really good and with that we have the basic sliders inside of tkinter the last change that I do want to make is I want to set the orientation of the original scale widget to horizontal that way this thing doesn't look as cramped anymore and this is what you have seen in the demo more or less in this part we are going to cover something slightly more advanced and that is frames and parenting frames are just another widget but you wouldn't really use them by themselves instead use them to create better layouts and for the better layouts you are going to need parenting let's talk about it so far for the parent we have always used the window itself but that is very often not what you want for example if we are going to create a menu you want to have every single menu item to have the actual menu as the parent or if you have a tap entry you want to have every single widget inside of the tab with the parent being the tab we're going to cover both of those cases in the next two parts so I'm going to go into a bit more detail but for both you need more control over what the master is what we're going to cover for this part is a complex layout or a slightly more complex one because what you can do is you can create a container widget and use that to organize your widgets and then you can place the container widget somewhere on the window the container which it here is going to be the frame this one is called ttk frame and this is an empty widget how you are going to use it is you are placing other widgets inside of it and then you place the frame that way you are placing all of the widgets inside of it as well which is really powerful to create more complicated layouts for now we're going to keep it fairly simple but in the next major section we're going to cover layouts in a lot of detail so don't worry about too much for now what you should take away from this part is how parenting Works once again here we are in the code if I run all of this we have an empty window that has a custom size 600 by 400 pixels what I want to start with is I want to create a frame this I want to store in a separate variable and this we create with ttk DOT frame this one like any other widget is going to need a master which in this case is going to be the window once we have that I can pack this thing and if I run it we can see that we can't see anything the reason being that frames are invisible that being said there's one way to visualize how a frame is going to look like right now the window has this certain size this I want to comment out if I run the code now we can see something like this we basically only have the top control buttons I can extend it but by default we have this size here this happens because tkinter or the window tries to have the size of the widgets inside which right now is an empty widget with no size so we get something like this but for frame we can set the width let me go with 10 and we can set the height in here I want to go with 20. if I run this now we have a very small window I guess the numbers here are a bit small let's go with 100 and 200 that is looking a bit better we have a width of 100 pixels and we have a height of 200 pixels the numbers we get here and here another way you could visualize a frame which I think is even better is you could set a border with border with and this I'm going to go with 10. although by default you're not going to see anything also there shouldn't be a typo in there border with like so this is looking better now we have a border width but the Border has no color so it's invisible for that we have to set a relief and for the relief we have a couple of inbuilt options the one I'm going to use is called TK and Rich all in uppercase letters if I now run this we get the frame we have seen earlier except right now it has some kind of Border thingy the default for the relief is flat with this one you don't see anything besides that we have raised and we have sunken those look like this or like this it basically starts to look like a button another option is called Groove like so and this one I guess is even better let's stick with this one the relief option you're not going to use too often because most of the Styles here look quite outdated and later on we're going to learn better ways to style it now we can actually start the interesting bit and that is the parenting or I guess a more appropriate name in tkinder would be Master setting right now the master was always the window so the first argument we placed into any widget was always the window which we created all the way at the top this does not necessarily have to be the case what we could for example do is create another label or it could be any widget you create this always in the same way ttk label in this case and now for the master I want to set the frame other than that I want to have text and this I want to call label in frame you also still need to pack this label and if I run this now we can see a couple of things happened the first one is that we have the label inside of the frame however besides that the width and the height of the frame have changed we don't have something like this anymore instead we have well just this size here so what happened well the issue you have to understand here is that ttk primarily tries to set the size of a widget by its children in this case the frame only has one child and that is the label and that overwrites the width and the height if you don't want that there is an option to disable that you will get the frame again and the option is called pack and proper gate this is a method so we have to call it and then here we can either set faults or we can set true if you set true we are setting the size of the widget by its children if we set false we get the original size meaning we are using the width and the height we have used for this tkinter widget you can also set multiple children inside of one frame for example I could create another button and this one is also going to have the frame as the master for the text I'm gonna go with button in a frame I want to pack the button and there we go now we have a button inside of it and you can't see we are cutting off the button a tiny bit meaning that TK enter constrains the size of these widgets quite a bit let me increase the width of this widget to 200 now this looks a bit better and that's kind of all you need to set the master to something other than the window you have created right now this doesn't seem too useful but let me demonstrate one instance where this could be powerful let's call this example I want to create another label let's call it label 2. this label is going to have the window as the parent and for the text I want to have label outside frame this label to I now want to pack and now we can see that the label is outside of the frame which is giving us quite a bit of space in here however now if I get the original frame and only pack it after label 2. if I run this now we can see we have the label on top and below that we have the frame itself with the widgets inside of that frame let me move it to the side this label here is all the way on the top and below that we have all of the other stuff this Frame here and all of the children of the frame what is even more powerful and what we are going to learn more about later let me return frame.pack to its original place so this thing is going to look like so again you can also inside of Pack set aside by default this side is always the string top but it doesn't have to be you could also set left for example let's see what this gets us and now we have the frame on the left side with the label outside of the frame being on the top this however we can also set to the left side and that gives us two widgets right next to each other with this system you can create pretty powerful setups and again we're going to learn much more about this later but for now this is all I want to cover for this bit Let's do an exercise and then we are done what I want you guys to do is to create another frame with a label a button and an entry widget and place it to the right of the other widgets pause the video now and see if you can figure this one out let's start by creating I'm going to call this the exercise frame this is going to be ttk and frame this one has the parent of window I am not going to pack it just yet instead I want to create a label a button and an entry widget since those are not going to be doing anything right now I am not going to store them inside of a variable I am just going to create ttk label the parent is going to be the exercise frame and the text is going to be label in frame 2. right after creating this I want to pack it as well I can copy this one now instead of a label I want to have a button the other arguments can stay identical and finally I want to have an entry widget this one doesn't have a text argument once I have all of those I want to get my exercise frame and pack it running this now we are getting a couple of other widgets all the way on the top right Adobe I realized the text here this one shouldn't be labeled this should be button in frame 2. let's run this again and this is looking pretty good although the last thing that we do have to do is that when I'm packing the exercise frame I want to set aside and decide should be left although this one has to be a string and now we have another widget to the right of it this one doesn't have a border around it so it looks a bit different but it's basically the same thing we have done in the original frame and this kind of system you can push quite a bit for example you could have one widget inside of a frame which is inside of another frame which is inside of the window but once again all of this we are going to cover in much more detail in just a few sections in this section we are going to cover tabs let's have a look this is what we are going to create we have a basic set of widgets inside of one tab then we have another tab with some other widgets the widgets in here work as expected and you can just play around with them this is what we're going to create and the widget we need is called ttk notebook the way this is going to work is that we want to set a couple of children to this notebook this is almost certainly going to be a frame and each frame is then going to become a tab since you can add lots of widgets to a frame you can use that system to make widgets visible or invisible it's honestly a fairly simple system here's the code if I execute all of this we have a basic window and I want to create a tab widget or rather I want to create a notebook let me call it notebook and the widget we need is ttk and node book this one is going to have the window as the parent I can pack this notebook right away although by default we can't see anything The Notebook by itself is going to be invisible the only thing you are going to see are the tabs inside of it since we don't have any tabs right now nothing is going to be visible which means I have to create a couple let me call it tab 1 and this is going to be ttk and frame what apparent I now want to set the notebook while we are here I want to create a second tab I'm going to call it Tab 2 and this one also has the parent as The Notebook with this I can run this again we still can't see anything what we now have to do is inside of the notebook we have to add and this is going to be tab 1 and this wants to have a text this text is going to be the name of the tab I'm going to call this one tab 1 then I can duplicate it and change this 1 to a two and now we should be seeing something there we go we now have two tabs which means you can just Place widgets inside of either of the frame and then they are going to be visible inside of the respective tab for example inside of tab 1 I'm going to add a tiny bit of white space I'm going to call this tab one inside of tab 1 I want to create a label with ttk and label this one is tab 1 for the master and for text I want to have text in tab 1. don't forget to pack this widget and with that we can see we now have some text in the first tab although Tab 2 doesn't have anything right now but we certainly have a good start in the demo inside of the first tab I also had a button let me call it button one ttk and button with tab 1 as the parent and the text is going to be button in tab 1. besides that I also have to pack this button and now we have text and we have a button inside of tab number one tab number two still doesn't have anything all of that is going to happen inside of tab 2. in here I want to create Label 2 which is going to be ttk and label with Tab 2 as the parent the text is going to be I guess text in Tab 2 makes the most sense here this Label 2 I also want to pack I have text and a button in the first Tab and in tab number two I have tab 2. so this is working quite well there's also going to be an entry let me call it entry 2 and this is going to be ttk and entry inside of Tab 2 and there's nothing else in here and entry 2 and pack and now we have the stuff you have seen in the demo honestly this wasn't very difficult all of these watches work like anything else if you understand how to set the master this system should be really really simple or at least I hope it is which means we can already do a challenge what I want you guys to do is to add another tab with some buttons and text inside let's say with two buttons and one label to be a bit more specific possibly now and try to figure this one out I want to start by creating another frame this I'm going to store inside of tab exercise and it's going to be a ttk and frame with the parent being The Notebook inside of that I want to create button exercise one with ttk and button the parent being tab exercise and the text could be button one it doesn't really matter what it is this button exercise one I also want to pack and with that I can just copy the entire thing and add another button here all I have to do now is change to one to a two the one in the name or the text should also be a two that is going to give us the buttons besides that I want to copy this one more time I want to create a label which I get with ttkn label this is going to be label there we go now we are packing this one as well with this we have all of the widgets and the frame to put them inside next up I want to get the notebook and add my tab exercise like we have seen up here which means besides that I need a text and this is going to be tab exercise let's try this one now and there we go we have tab 1 we have Tab 2 and we have tab exercise with button one button 2 and the label that's pretty much it I hope you can see how this system is fairly straightforward there shouldn't be too much that can go wrong I guess the one thing you want to be aware of is that this Frame here or these frames here are not going to be packed themselves for that we're using this add method for completion here you don't actually have to set the notebook as the parent for example if I change this notebook to a window and run this again we get the very same outcome although all of these other widgets do need the frame as the parent I just think that in the notebook as the parent makes the most sense here but choose whatever you want in this case it doesn't make too much of a difference let's talk about menus in tkinter you are creating a menu with TK menu be aware here we are using TK not ttk but other than that the widget is fairly straightforward however there's one thing you have to understand to create more complex menus and that is that you are always using multiple TK menus and you Nest them sometimes you can Nest quite a few of them at the same time and this can get a bit confusing and a bit complex let me give you an example if you want to create a simple menu you will place a TK menu inside of another TK menu and then this sticker menu becomes an option now what does that mean let's say we have our normal application the entire window is the blue frame here inside of there we have TK menu this is the main menu this would be just a normal top bar like you've seen in basically any other application inside of that we are placing another item and this would be the TK menu this would now be one of the entries inside of this menu but other than that both of these are just TK menu widgets the red menu though can now have a couple of extra options meaning here we actually have items we can pick from I hope that makes sense you could make all of this even more complex because you could place for a sub menu a menu inside of a menu inside of another menu for this example I kept the colors constant the main menu is the yellow one inside of there we have a red Sub menu or one item inside of the main menu inside of that menu we have another menu this would be one of the items in here inside of there we could have other entries like so and we could even have other menus in here this would still work the system overall can get quite complicated but well once you understand the basic logic this really isn't too difficult as long as you understand the nesting principle let me actually demonstrate what we are going to make it's going to look like this we have a menu with a couple of entries and inside of one we have a sub menu on top of that we also have a checkbox in here that we can check and uncheck finally there is a separate menu button it's basically a button with a menu although it works like a menu and that is all we need let's have a look at this in code once again I have a few lines of code ready if I execute all of this we have a plane ticket window it doesn't do very much in here I want to create a menu this we create with TK and menu like any other widget this is going to need a parent which in my case is going to be the window on top of that this widget I want to store inside of a variable that I'm going to call menu while this menu is just another widget we are not using the pack method on it instead to turn it into the menu of the window you would use window configure and then you would set the menu to the menu if I run this now we can't see anything the reason for that is that this menu by default is invisible we can only see the children inside of it since we don't have any children right now we can't see anything but that we can change quite easily let's start by creating one sub menu I want to create TK menu again although now the parent is going to be the menu the one we just created this one up here this I want to store as well in the variable I'm going to call this one the file menu the name is basically arbitrary with this we have an entry but if I run the code we still can't see anything the reason for that is that we need one more line of code we need to get our menu and then the method add Cascade for this one we need two arguments first of all we need what is called the label this is the text you are going to see I'm going to call this one file besides that we need a menu entry this is the file menu we just created and now we should be seeing something there we go in the top left we now have file although if I click on it we just see something empty that is doing some weird stuff there are two reasons why this is happening the more important one is that this file menu doesn't have any entries right now to give it some we have a couple of different options the one you are going to use the most is the method add command this one like at Cascade has a label let me call this one new and then we have a command this one could be any function in my case I'm going to set a Lambda function that is going to print new file like so and now if I run this again I can click on file and we have a new entry if I click on that we have a new file printout that's pretty good although if I click again on file you can see we have this separator thing if I click on that we are creating another window that is kind of weird although the menu still works but this isn't the desired Behavior to fix that when we are creating the file menu we have to add one more argument and that is called tear off by default this one is true and that means you can tear away the menu and have it as a separate window I do not want this Behavior so I'm going to set this to false running this again now inside a file we only have the menu entry this is looking like a proper menu and let's go through the entire thing again just to make sure all of this makes sense we have the entire main window up here that is the entire window that one should be fairly obvious at this point inside of that thing we have a menu this is the entire menu bar up here for that you need to menu widget itself and on top of that you have to run window configure and set the menu as the menu inside of that we have right now one menu or one sub menu that is called file menu this is the file we have created here for that we need another TK menu and we have to get the original menu and add Cascade then inside of this file menu let me clean this up a bit inside of this file menu we can add different entries with for example add command there are a couple more entries but at command is the one you probably want to use if you got this far the worst part about understanding menus is basically over because now we could run this at command a second time besides new let's say I also want to have open which is going to print open file let's run all of this again inside of the file menu I now have new and open let's still both do a command oh this is working quite well and I guess besides at command there are a couple more methods you could use a really simple one is called add separator don't forget to call it if you run this one we now have a separator between the menus this one doesn't really do anything but it's a nice way to separate the menu entries to get all of the entries this website here is pretty good because if you scroll down you have a couple of basic options and below that you have all of the methods you could use for example we have used add command and we have used ad separator there's also a radio button a check button those are quite obvious I think and you can also delete and do quite a few more things but I want to keep it simple if you want to go into more depth check this out in your own time I want to create another Sub menu this I want to store in a separate variable let me call it the help menu this again we create with TK menu once again menu is going to be the parent and tear off I want to set to false like the one we have created up here this submenu I now have to attach to the main menu which means I want to get my main menu then I want to add Cascade the label here is going to be help and then the menu is going to be the help menu I can run this now and there we have a second menu item this one if I click on it doesn't do anything because there are no entries but file still works just as before this one I want to have one item let's copy the add command from the file menu except this one should be for the help menu in here for example the label could be help entry and this one just prints help it doesn't really matter what it is and this we have already seen a couple of times so if I run this we now have a second menu besides file menu this one is pretty straightforward let's do something a bit more interesting for this help menu I now want to add a check button this is going to work basically like the normal check button that you have seen in the buttons a couple of sections ago although first of all we need a label and this label I just called check since we're working with a check button in here we can set an on value that I want to set to on and we have an off value that I want to set to off these two values we have to store somewhere for that I want to use a tkinter variable I'm going to call this one help check string value the value here is going to be TK and a string VAR this variable I now want to set for this check button so variable is going to be the help check string that should be all we need let me run this and if I click on help now we have to check entry I can click on it and now we have this entry checked I can click on it again and it disappears cool once we have that we can always get the value from inside of this tkinder variable for example inside of this add command instead of printing help I want to get help check string and get the value let's try all of this inside of help I still have the check entry I can click on it and it still works and now if I click on help entry we get either on or if I unselect the check I get off so this is working pretty good with that we have created some basic menus and once again the main difficulty here is the nesting that we always Place one menu inside of another menu but they are the same widget besides that we can also create a menu button this is a separate widget that is called ttk and menu button this as always is going to need a master in my case this is going to be the window and we need a text like any other button I'm going to call this one the menu button on top of that this needs to be stored in a variable menu button is a good name here I think for this button we need the normal pack method because this one functions well like a button menu button and pack and now we have a menu button although if I click on it nothing happens right now because we don't have any entries that being said once you get this far you can just add TK menus to it let me create one TK menu in here the parent is going to be the menu button and tear off is also going to be false this I want to store let me call it button Sub menu once we have that we basically want to do what we have done here we want to set the sub menu to the parent menu via configure which means I want to get my menu button I want to run configure and here I want to set the menu to my button Sub menu let's try this one now and now if I click on the button we still can't see anything the reason for that now is that this button Sub menu doesn't have any entries although that we can change very easily all we need is the button Sub menu I want to add a command for this we need a label with entry one or whatever you want to add and we have a command that is going to be Lambda in my case that is going to print test one if I now fix the typo and run this this should be working now we have entry one I can click on it and we also get entry one besides that we could also add a check button for this one we can just leave it like so I guess I can call it check one I can run this now and now we have a check button in here that I can click on works like any other menu it's kind of similar compared to the menus you've seen before but not that much the main difference is that now you have a menu button and for this one you have to configure the menu to be the proper menu oh and what I forgot this configure you could simplify a tiny bit this is what we have seen earlier besides this line you could get the menu button in here you could get the menu and the value of this menu could be this button Sub menu the result would be the same if I run it we still have the same outcome choose whichever you like more it's really up to you both are equivalent we are nearly done although I want to do an exercise this exercise I want to place before we are setting the menu to the window I want you guys to add another menu item to the main menu like file menu and help menu you should create another menu the one difficulty for this one is that this new menu you're going to create should have one sub menu a menu inside of the menu you are going to create for that you want to read this website the one I just talked about I want to start by creating an exercise menu this is going to be TK and menu in here that parent is going to be the main menu and tear off I want to set to false just to make sure that we have one entry in here I want to get this exercise menu and add a command for the label I just want to have exercise test one this is actually all we need you don't have to specify a command if you don't want to or don't need to finally to see this menu we have to get the main menu and we have to add Cascade like we have done here and here we need a label this one I called exercise the menu is going to be the exercise menu with that I can run the entire thing and now we have the exercise menu with exercise test one and I can see I have a typo this should be exercise like so with this we have covered the first part of the exercise the next one is a bit more interesting I want to add a sub menu to this Sub menu meaning we have a sub Sub menu this Sub menu I want to store another variable I'm going to call it exercise Sub menu although this one once again is just going to be another TK menu with menu being the parent and tier of being false the way you have to think about it is that this exercise Sub menu we want to add to the exercise menu like we've added the exercise menu to the main menu which we have done with ADD Cascade which means I want to get my exercise menu and add Cascade once again we need a label let's call it more stuff besides that we also need a menu this is going to be the exercise Sub menu now if I run this inside of exercise we have more stuff and this one doesn't do anything right now because it has no entries but that we can change very easily for this exercise Sub menu I want to add a command like I have done for the exercise menu which means I can copy the exercise menu at command and change this to exercise Sub menu with a new label some more stuff now I can run this and if I now click on exercise more stuff we have a sub Sub menu this could then be literally anything once again the nesting here is the complicated bit but all we have really done is we have the main menu all the way on the top this is where everything else goes in inside of this menu we are adding one exercise menu for that we are creating a TK menu widget and we are using add Cascade on the parent menu to create this menu item although this add Cascade we can do on any menu item for example on this exercise menu we have added another Sub menu and I'm fully aware that this can be kind of confusing definitely go through this slowly and make sure you understand every level of nesting although with that we have finished the menus in this part I'm going to talk more about how to change the window so far we only really changed the title and the size of the window but we can do quite a bit more we can for example change the opacity the position the full screen status and the title bar and quite a few more things although all of this is really simple so let's Jump Right In and let's have a look once again I have the basic setup that we have seen multiple times by now I can execute this and this is what we get so far we always change the window title and the window geometry for the window geometry we always specified the width and the height of the window which right now is 600 by 400. let me run the window again 600 by 400 specifies the width and the height of the window although you can extend this a tiny bit inside of this string you can also add the position of the window this you do by adding a plus then you give the left position of the window another plus and then the top position if you add numbers in here you are going to place the window or the top left of the window and then the rest is going to follow for example if I change these numbers to 0 and 0 I now have a window starting in the top left if I change the left number to 100 we now have a slight Gap to the left side finally I can change the top number to 200 and now we have even more space to the top you're probably not going to use this very much but in some circumstances it can be really useful what you do want to use much more often however if I run this again by default we always have this feather here or the logo of tkinter this you can also change although for that you need a specific kind of file it's called an Ico or Ico file inside of the file folder here are all of the Python files I have used so far besides that we also have a file called Python and this if I show you the properties is an Ico file this is what you need for the title bar once you have that all you have to do is get the window and I can bit map and now you need to file name in my case this is python dot Ico now I can run this again and now on the top left we have the python symbol instead of the tkinter symbol if you look online you can find lots of websites that convert a PNG or JPEG file to an Ico file it's completely free and very easy to do and it does make quite a difference in terms of how your app is going to look so I would definitely recommend designing your own logo although well it can be something quite complex besides that we have a few more let me call it window attributes for this one for example we could set a window Min size for this we need a weft and a height a tkinter can never be smaller than these two numbers for the width let's say I want to have a minimum number of 200 or the height I want to have a minimum height of 100. I can now run this thing again and if I scale the window this is the smallest I can scale it too it never goes smaller than that we also have a maximum size let's say for this one I want to have 800 by 700. I can run this again and now I can only scale the window to this size here let me move it a bit further to the top like so this is the maximum I can scale it to there's one more entry that's useful here and that is called window and resizer Bill for this one you can specify if the app can be resized either in the X Dimension or in the Y Dimension or horizontally or vertically for example if I set X to true and Y to false we are only able to scale the app in the horizontal Dimension let's try this one and now if I scale the app left and right this one works as before however I cannot scale it up or down this one simply doesn't work it's very hard to see but well try it yourself most of the time you are not going to use this or the max size they are quite rare however the minimum size I would always set because if you don't set it the user could minimize your app to size of 0 and 0 which would look very strange besides that you can also get screen attributes so this green new app is running on the two important aspects you want to know here are the width and the height of the screen your app is working in this you would get with window and W info underscore screen with don't forget to call it this is a method this method is going to return the wift of your screen not the app the actual display this I want to print and if I run this I get 1536 this is the width of my monitor I can duplicate this the same thing is going to work with the height linear can run this now and the height of my monitor is 864 pixels this information very often can be surprisingly useful for example the exercise we are going to do in a couple of minutes is going to be about starting the window in the center of the screen and if you know geometry and this information this is quite easy to do but let's first do some other things in here I want to set some window attributes and I realized the naming here is not ideal this is actual window attributes whereas this one was rather window let me rename this to window sizes that's much more appropriate the reason for that is that a window has actual attributes for example in here we could set the alpha value for this one you can set one additional value and this value has to be between 0 and 1. with 1 being for transparency and 0 being the app being completely invisible let me set this to 0.5 run this again and now we can see we have a transparent window works pretty well if I set this to a 1 we have the proper window and if I set this to 0.1 we get a barely visible app besides that we can also set top most if you set this value to true you can run the entire thing again and let me change the transparency back to one if I run this again you can't see any difference the app still works just as before however if I now bring in the folder you have seen a second ago this folder is always behind the window even if I have it selected it's always behind the window we just created and this happens because of this topmost being true it sets the window we currently have on top of any other window besides that there are a few more attributes but those can cause problems for that I want to add a security event all I really want to do is add window dot bind and I want to check if I am pressing the escape button if I am doing that I want to run a Lambda function that quits the window which I can do with window.quit so if I run this now I have a window open if I click on escape the window disappears the reason why I want that is because some of the attributes can make it impossible to close the window one example for that could be window attributes and in here one option you can use and they always start with a dash I don't exactly know why but you just have to add it you could disable the entire window for this you have a Boolean value that is either true or false the default here is false but if you set it to true the window is going to be disabled let me run it and now no matter where I click on the window nothing is going to happen the only way I can close the window is by pressing on Escape because of this line here but the window itself doesn't do anything finally another thing that you can do is to set the window to full screen if you have set this one and you start the app it is going to start in the full screen mode although if I run this right now we're going to get an error there we go the reason being that this part here we cannot set the full screen because we have a Max width and a Max height and this is smaller than my monitor the problem is this one here let me disable it and on top of that I also want to disable the disabling of the window and also I want to disable topmost because we don't need them right now and I want to focus on the full screen now if I run this note here in the top right we don't have any menu items or title bar so we can only close the window if we press on Escape and this we can do because of this line if we didn't have it we would have to use the task manager to close it which is kind of annoying but with that we have the basic window attributes there's one more thing that I do want to cover and that is let's call it the title bar also I want to comment out the full screen so we can see what's going on like so now for the naming what I want to do now is this thing here is I think called a title bar this you can also hide that you do with window and over write read Direct I have no idea why it's called like that but if you said true in here you don't see any title bar anymore which makes it kind of annoying to close the app so we have to close it via the event but this is super useful to create nicer looking apps because if you don't have the title bar you have much more options in terms of styling the problem is if you have something like this you also are not able to resize the app which is well a problem for that tkinder has another widget that you can use it is called ttk and size grip for this one I want to set the master to the window and I want to store it inside of a variable that I call grip this grip we could for example pack now but this is not what you would want to do but if I do it we have this kind of app here and if I use it I can drag the window again although right now I can only move it left or right or scaled in the horizontal axis because of this resizable if I comment it out run this again now I can properly resize the app and the position here is very awkward for this thing but we could change that although for that we need a different kind of layout method we're going to cover those in much more detail in the next major section but what you would use for this one is called place in here you can specify a relative X position which is going to be 1.0 and a relative y position which is also going to be 1.0 finally you want to set an anchor and this is going to be south east or SE in short if I run this now we have this size bar in the bottom right and this is much better now we can resize this window the way let me place it like this the way place is going to work is we have the entire window and we start at position 0.0 and all the way on the right we have 1.0 and any point in the middle here we can choose from this works either on the horizontal axis or on the vertical axis and those you get with relative X or relative y if we get 1.0 for both we end up in the point in the bottom right and this is where we are placing this size grip the anchor is going to set which point you are placing the way you want to think about it is that there's a rectangle around this widget and by default we are placing the top left or the North West Point we however want to set the south east point so the bottom right point should be in the bottom right corner I'm not going to go into too much detail we're going to cover all of this in much more detail in just a bit but this is all you need to create a window without a title bar which can be super powerful with this we have all the methods for a basic window and this gives you a ton of control over how you want to style your app or it is going to give you much more control later on in terms of what you want to do all right with that I want to do an exercise and the exercise I am going to place right here below the window creation because what I want you guys to do is to start the window in the middle of the screen so pause the video now and see if you can figure this one out first of all I want to declare some variables I want to get my window with and this could be any number I'm going to go with 1400. this by the way is going to overwrite this 600 here as a matter of fact I want to comment out this geometry here entirely besides that I want to have a window height this I want to set to let's go with 600. besides that I need to know my display width and my display height both of those I am getting from this down here so I can just copy them I want to get my window info screen with and the window info screen height that is all the information we are going to need once we have that we can declare a variable for the left point and for the top point of our window and the way you want to think about it this one here is going to be the entire window we are working with this one has this display width and this display height inside of this display we want to add our app right in the middle the problem is when we are placing this window we are placing this top left point and for this top left point we have to figure out the left and the top position for that first of all I want to get the center of my display roughly this point here this I get by dividing the window width by 2 and the window height by 2. that way I get exactly to this point once I have that point I can simply subtract half my window width and half my window height and then I get to this top left point let's start with the left side I want to get my display with and divide it by two from that I want to subtract my window with and also divide this by two that is all we need the same thing for the top except for this one I want to get my display height divided by 2 and subtract my window height also divided by two once we have all of that I can actually set window and the geometry for this one I now want to create an F string in here we need the with x the height the width is going to be the window with and the height is going to be the window height after that we have to add a plus and now we need the left point and another plus with the top point those are the two points we have just created here and here which means now if I run all of this we are getting an error the error you can see down here we have a bad geometry specifier but the numbers look kind of okay the problem here is that tkinter is expecting integers but we got floating Point numbers python always creates a floating Point number whenever you divide two numbers this we can fix quite easily all we need is to wrap all of this inside of an integer function and then we're going to convert the float into an integer so now if I run this there we go we have our app right in the middle of the window and with that we have covered all of the really basic parts you need to know about taking the widgets and the window so for the next major part we can work on the layout layouts are one of the most important part of any GUI framework they can also be one of the most annoying Parts because it's probably going to be a very common thing for you that you want to place a widget in a very specific spot but somehow you just cannot place it there which is a very frustrating thing to work with so let's talk about layouts and what you can do in tkinter there are three major methods that you have to be aware of the most common one is called pack this one takes a window and lets you stack widgets in a certain direction by default you are going from the top to the bottom which means the first widget is all the way on the top in the middle and then you place other widgets below it while you're doing that you can also customize things quite a bit for example you can tell widgets to take up the entire horizontal space or the entire vertical space or both as well that also works besides that you can also stack widgets in different directions for example you can go from left to right right to left or bottom to top other than that pack is fairly simple and well that's kind of all you have to know about it we're going to do a lot of examples later on with this one the next layout method is called grid this one works by creating a grid over the window and this grid you are then using to place widgets in a certain position with a certain size this could for example look like this like this like this and you can also Place widgets on top of each other with an overlap like so this system gives you a ton of flexibility you could for example change the height of each row or the width of each column grid is generally the system you want to use if you want to create really complex layouts again we're going to do a ton of examples later on finally we have the place method this one is kind of the simplest because you just take a window and you place widgets with a certain position you can also change the size and this one is fairly straightforward you always have an X and A Y position and you're using that to place the widget with that we have the three major tools that you are going to use and what is super important that you have to understand is that you can combine these layout methods very easily as a matter of fact this is what you have to do to create any kind of complex layout for that though you do want to be aware of a couple of things the most important part is that you are going to rely very heavily on parenting and frames that way you can combine different layouts and keep them organized basically what you are going to do is you are placing one layout inside of a frame and then you are placing that frame that way you keep everything much more modular and much easier to maintain Let's do an example this is going to be our main window this I want to separate into two parts for that I am going to use pack we have a frame on the left that is a bit more narrow and a larger one on the right inside of the left one I want to use the grid method like so to place a couple of other widgets like so this could for example be a simple menu with a couple of vertical sliders inside of the right frame I want to place a couple of widgets like so I can place them wherever I want since I am using place with that I have created a fairly complex layout that is still quite maintainable because each part Works inside of a frame and it makes it very easy to change things we never create a layout that's too complicated what you can also do is mix different layouts inside of the same frame for example you could place another widget on top of a grid that way you can basically create any kind of layout so with that we have the basics that you need and let's do a couple of examples although I really want to emphasize for this part I only want to have a couple of very basic examples over the next couple of videos we are going to expand on all of this quite a lot as always we have a super basic window if I run all of this we have a simple window it doesn't do anything right now inside of this one I want to create two widgets let me call it widgets I want to have label one and I want to have label two I'm creating both with ttk label the parent or the master is going to be the window the text is going to be let's say label and this could be label 1 or label 2. on top of that there's one more thing that I do want to do when we are creating the label we can style this very easily by giving it a background for this we can just choose plain name colors like red or besides that we can also use blue that makes it much easier to see what's going on these widgets I now want to place somewhere on the window and for that we have the different layout methods the easiest one is pack this one we always use by getting a widget let's say label one and packing it in the simpler sense you don't need any arguments and I can just pack label 1 and label 2 if I run all of this we have label 1 and label 2. although in here you can specify a couple of different things for example you could specify the site one could be left and this always has to be a string or decide could be right if I run this now we have the label on the left and on the right still in the middle though we could also use bottom here also works just fine and if we have the left side for both widgets we are stacking them on top or to the right of each other again besides that you can also tell a widget to expand and this is either true or false by default it is false if I set it to true however the widget is going to take up the entire available space which means in our case the entire available space on the xaxis is this space here although we have Label 2 which takes up this vertical space here which means the entire space to which it can take up is this width and this height to make this even more visible we can use the fill argument for this one we can either use x y or both and this one tells the widget if it is going to fill the entire available space let me run this actually then you see what I mean there we go now label one is going to fill the entire available space whereas if I only set this to X we only filling the horizontal space if I set this to Y we are only filling the vertical space you can do that with the other widget as well if I expand this or I set expand to true now we are splitting the entire window by two which means tick enter is quite smart about it if you have two widgets that are expanding they are intelligently separating the space that is available and let me set this to fill both and then we get something like this this is one way to place widgets besides that we have the grid method what a grid we have to start with some basic setup we have to get the window and then we need column configure and we need I think you can already see where this is going we need row configure or this one we are determining first of all the index of the row and then we need a weight let's go with one for now with this we have created one column I can create a second one by duplicating this line and setting this to a one and let me add a third one with the index two and to wait for this one could be let's say two with that we have three different columns although the final column is twice as wide as the other columns so if I draw the entire thing we have one column here that has a width of one we get a second column also with the width of one and then we have a final column and this is as wide as the other two columns combined the same thing we can do for the row in here I want to have a first row of the index 0 and a weight could also be one this information we can now use to get our label let me use label one and use the grid method in here we have to specify a row let's start with zero and a column this one I can set to 1. if I run this now we have the label in some position it's kind of hard to tell what's going on although if I draw on this we have roughly one column here one column here and then we have the wider column here with the width of two the reason why this is so hard to see right now is because the label only takes up the minimal amount of space so the space it needs to display the text but this we can change as well and the argument we need here is called sticky this one tells it to which border the widget is going to stick and this one needs Compass directions for example I could place it here just North that way the widget is always going to stick to the top part of the cell I can also add another Direction solve that's why it sticks to the North and the South and if I add all of the directions then it's going to stick to all four sides and now you should see a bit better what's going on we have column 0 column 1 and then column two with column 2 being twice as wide as column one and two if I add Label 2 in here this is going to be even more visible for this one I still want row 0 but now I want column 0 as well now I can run this one again and there we go now we have label one and label 2 and an empty column this I can make even more complex by adding another row and this one is going to be Row one if I run this now we can see we have split the entire thing in half what I can also do is Place Label 2 and make it take up this entire space for that I have to tell it to occupy this column here and this column here this I do with the column span method although first of all we have to change row to one column to one and then we need column span I want to tell the widget to span two columns and everyone is now we can see we have level 2 occupying two columns once again I will go into much more detail later on but if you understand this system you understand ninety percent of it it doesn't get that much more complicated the final layout method we have is called place but this one again I want to have one widget and I want to place it although this should be a Dodge we need an X position and we need a y position for Simplicity let's start with X being 0 and Y being 0 as well if I place this now you can see we have label one in the top left what you have to understand about this one is that when we are placing the widget the actual position we are placing is the top left this position here with the entire window being a coordinate system that goes like so and so the one thing that can be kind of confusing here is that if you want to go downwards you have to increase y the higher this number is the further down we go in computers basically any kind of layout always works like that if you only know high school geometry this can be kind of confusing but you get used to it quite fast if you do any kind of game development they use the same system although X is a bit easier if you want to go further right you have to increase X this one should be quite straightforward let's say I want to say x to 100 if I run this now this distance here is 100 pixels the same thing I can do for y if I set this to 200 we have 200 pixels from the top we know in our case the window has a size of 600 by 400 which means if I set the Y position to something like 380 we should have label one almost at the bottom and there we go this looks pretty good you can actually also specify a few more things in here you have the whiffed I could for example set this to 200 and you have the height this I could set to let's say 100 and now for renders we can well only see part of the widget that's because it is so far down if I set this to 200 now this is more visible we now have a widget that is 100 pixels from the left this number here it is 200 pixels from the top that is this number here and it has a width of 200 and a height of 100. with that you can place a widget basically wherever you want and all of these numbers are absolute so we always have pixel positions you can however if I am placing Label 2 with the place method again use relative numbers for this one you would use relative X and relative y what you have to understand about this one is that now we don't have pixel positions instead what we are doing for this one is this one here is the entire window and we are declaring that the top left point is position 0 and 0 for x and 0 and 0 for y the bottom right position this one here is going to be 1.04 X and 1.0 for y which means if we have relative x 0 and relative y being 0 as well we are going to be in the top left position this point here let's try this one let's try and there we go Label 2 is in the top left position if I change this to 0.5 and 0.5 now label 2 is roughly in the middle or to be more specific we are placing a top left point this one is right in the middle of the window I can actually demonstrate this by reducing the size of this thing they can see this Label 2 is always in the middle even if we change the size of the window this however doesn't apply to label one because for this one we only have pixel positions generally when you're using place you want to use relative positions you can also set the relative with let's say if this one is one now the widget is taking up the entire space like so although keep in mind here we are cutting off the widget a tiny bit this one here is the entire width of the window and widget one is going to have the entire width as well however we cannot see this part here because the widget is starting on this position so some bits are cut off to change that we would have to change what is called the anchor this is the point you're actually placing if this one here is the widget we are always placing this point and then the rest of the widget is going to follow by default we always place the North West Point but we could also place the South West Point or the South East Point North East Point besides that we could also place the center let's drive this one if I place in here this has to be a string I place the center now we are placing the center of the widget and we are filling the entire window width we could also change this to South East and there we go now we are placing only the right point which means if I move this a bit to the side the point we are placing is the south east meaning this point here is right in the middle of the window and then the entire weft is going to be something like this which means once again we are cutting off some parts you can play around with this a lot and I would recommend you to do so but this is all you have to know for the basics and well these are the three major ways to place elements inside of a window over the next couple of videos I'm going to go into a lot of detail for this video I'm not going to add an exercise instead I would recommend you to go over all of this and make sure you at least have a very basic understanding of how this is going to work ideally create a few more labels and just place them wherever and see if you can work with all of them at least reasonably okay in this video we are going to cover the pack layout method in tkinter the project we are going to make by the end of this video is going to look something like this it's nothing too complicated but definitely enough to understand the basics of this layout method let's talk about it in the most basic sense Pac works by stacking widgets in a certain order by default we are stacking widgets from the top to the bottom which means the first widget is all the way on the top and then with widgets always below that you can already tell here we have a couple of ways to customize this for example we can tell the widget to take up all of the horizontal space or all of the vertical space like so to create these kind of effects you have three different arguments that you have to understand the most important one is the site this one determines which side the widget is added to the options here are fairly straightforward we have left we have right we have top and we have bottom with top being the default argument besides that we have expand that is true of false this one determines the vertical or horizontal space in which it can occupy can here is the key word because expand only determines how much space a widget potentially has it doesn't tell you how much space it is actually going to use fundamentally what you have to understand is that in tkinder we have a disconnect between the space in which it can occupy for example this widget for here could theoretically occupy this entire space but the widget itself might only occupy this area here we have to specifically tell the widget to actually occupy all of this additional space here it doesn't do it automatically for that we have one more argument and that is called fill this one determines how much space to which it is actually going to occupy the arguments we can use here are X Y both and none none being the default argument this one tells the widget to be as small as it possibly can however if we specified X and here we would tell the widget to take up all of the horizontal space which would make the widget look something like this if you understand these three arguments you can use Pac really well although there are two more arguments that you do need to understand both of those are for the padding those two are incredibly easy and I'll cover them at the end don't worry too much about them so let's go into a bit more detail for the site again we have left right top and bottom and this determines the direction of the widgets or rather how we are stacking these different widgets the four options we have are top bottom left and right I don't think I have to explain all of this too much it should be fairly straightforward let's get started by playing around with this argument here I have some basic tkin Tech code I am importing tkinter I have a basic window with a title and a geometry and I'm running the main Loop that way if I run the entire thing you can see a basic window on top of that I have created a couple of widgets most of them are labeled with some basic text and a background that way it's easy to see what's going on finally I have a button that doesn't do anything you cannot see any of these widgets because I am not placing them on the main window but this I want to do by adding another section that I'm going to call layout for this one I want to place all of the labels using the pack method I have label 1 Label 2 Label 3 and the button if I run this now you can see we have the basic pack order we start all the way from the top and we are going downwards with each widget taking up the minimum amount of space in this packing order we can customize let me select all four of them and in here I want to specify a site by default we have top if I run this one we cannot see any difference however if I change this to let's say left now the widgets are being placed from the left and we're going further to the right with the first widget being placed all the way on the left the next widget is to the right of it and then so on the same is going to work with right and finally we also have autumn there we go this should be quite straightforward you can also combine different sides meaning not all of those have to have the same side for example the first label could have decide right and if I do that we get some slightly weird outcome I'll talk about this later for now just ignore it with that we have the basics of the site next up we have the expand method this can be either true or false this one determines how much space which it can occupy again can is the really important word here also the widget only expands in One Direction let's talk about this one once again we have a window and we are placing One widget and then we are placing the second widget this is the one we have seen already what you might assume here is that expand expands this widget all the way left and right but that is not the case because the width of a widget is not set by expand if the side is top or bottom instead we would only set the height of the fourth widget or in other words height is set by expand but only vertically in this example and I'm pretty sure this is kind of confusing and for that I have made a couple more slides the most important thing you have to understand in tkinter about layouts is that there are two kinds of space this space in which it can occupy and the space which it will occupy by default in which it will only be as big as the content it needs to cover for example if we have a label the label widget is only as big as the text it needs to display but that being said even by default the widget can occupy much more space than that for example here we have another window and we have a couple of widgets inside all of these widgets will only occupy the space that they need to display the content for example if all of these are labeleds we would have a space to cover the space of some text this is the space the widget is going to occupy this is actually what we have already seen if we return to the app and let me change the bottom here to Top Again like so when we place all of these widgets by default they are only taking up a tiny amount of space you can see this via the background the widget essentially is always only as big as the text the exception here is the button this one is a tiny bit wider but not that much so by default this is the size we get for every single widget however all of these widgets can occupy more space the amount of space that can occupy determines on the side right now our site is top which means we are placing the widgets in a downward Direction so top is our current site with that the witches could occupy the entire width of the container which in this case right now is the window the same is going to be the case for the bottom side in either case widgets are going to occupy the entire width of the container and expanse is going to tell them to take up all of the available space in that direction for example if we add one more widget here and set expand to true for this one then it's going to take up the entire rest of the available space but only in the current direction that we are working in which is this downward Direction meaning the widget is going to take all of the remaining vertical space and on top of that it is also capable of occupying the entire horizontal space and just for completion sake here when the site is top or bottom widgets can be as wide as the entire container and the expand method determines the height of the widget if the site is left or right then the widget can be as high as the container and expand determines the width I hope all of that makes sense this is definitely something we have to play around with here we are back in the code and I want to add the expand method to label one by default expand is simply false if I run it like this we're not going to see any difference however if I said expand to true then the first label is going to occupy basically the entire vertical space we are starting all the way at the top here and we're going all the way to the bottom second here is fairly intelligent it knows if there are other widgets and those need to occupy their space as well but other than that we are occupying the entire height of the window we are telling the first label to occupy as much space as possible and the other widgets take up the minimum amount of space which is exactly the space they need to display the text although that being said as you can see in here all of these widgets still are very small all we are telling them now for example for the first label that this widget can take up all of this space but we are not telling it to actually fill this entire space which means we have a ton of space around the first table but we're not filling that we're going to cover that in just a bit on top of that we can also set multiple widgets to expand being true and tick interp separates the space here intelligently although right now this is kind of hard to see I think a better way to illustrate this is if I set the first and the last widget with expand being true now you can see we have the first widget covering the entire almost the first half and the bottom also gets the same amount of space like so in between we have the other two widgets only covering the minimum amount of space and this is also going to work with the other directions for example if I change top to left then we can see if I expand this a tiny bit we now have the same issue again the two middle widgets only occupied the minimum amount of space whereas the first table takes up as much space as it can same with the button like so this however doesn't feel particularly satisfying because we need one more argument to make all of this work properly for that we have the film method this one can be X Y both or none and this determines if it which it will occupy the available space by default this is going to be none which is telling the widget to only be as large as it needs to be to cover the content if we set this to X we are telling the widget to cover the entire horizontal space if we set this to Y we are covering the entire vertical space and when we set this to both we are covering the entire space that is available let's have a look at this one once again we are in the code I want to set this back to top so it's a tiny bit easier to see what's going on for the first widget now I want to specify a film method the one you probably want to use most of the time is called both and if I specify this one now my first label covers the entire space it can potentially take up I could set this to X only then we are covering the entire width and if I set this to Y then we are covering only the entire height for this one I want to keep it at both the same we can do for the button let's say for this one I want to fill this thing in the y direction there we go we have a button that covers the entire available height and now I can also demonstrate that widgets by default cover the entire width even if we don't use expand for example for Label 2 if I set fill to both we can see that the label didn't grow in the vertical Direction but now covers the entire width of the window which means if I only set this to Y we're not going to see any difference because the widget doesn't have any available space it could take up although if I set this to X we can see the entire width is being occupied so these are the three major arguments you have to understand site expand and fill and I don't think they are particularly difficult although since this is really important I want to add an exercise in here and I want you guys to recreate this kind of layout pause the video now and see if you can copy this I guess let me move it a bit to the side so we can see what we have already there we go now pause the video and try this one yourself what we can see here is that the first label and the button at the end only occupied the minimum amount of space meaning those don't have expand whereas Label 2 and the last of the labels are occupying as much space as they can which means those two get expand finally Label 2 doesn't have any fill because the widget itself is very small whereas all of the other widgets do fill up the available space shouldn't be too hard to replicate the site remains identical for all of them although for label 1 pack should not be true so I'm just going to remove it although fill is going to be both if I run this again now we have the first label all the way in the top and this is already a good starting point so first label is done Label 2 however is going to need quite a bit of work this one is not supposed to be filled but I do want to expand the entire thing I'm going to set it to true and there we go now we have Label 2 with a ton of white space around it if I compare it to the goal this is looking pretty good next up we have to work with label three in this one I also want to expand so expand is going to be true and I want to fill this one as well both let me run this again now and we are almost there this is starting to come together quite well the issue we have right now is that the button is way too tall that happens because expand is true for the button let's remove it let's try this again and we are nearly done the last thing we have is that the button doesn't fill the entire width like we have done in the goal the reason for that is that right now the button only fills the vertical space but I want it to fill the horizontal space and now we can try this and there we go we have replicated the entire window of the exercise if you could figure this thing out yourself you are understanding about 90 of the pack method the rest is going to be fairly simple the last two arguments inside of pack are two kinds of padding the first argument is either pad X or pad y or both I guess this one creates space around this widget which means we are essentially creating a larger box around this widget and filling the box with empty white space it is not going to be visible besides that we have iPad X or iPad y this one creates padding inside of the widget which means that we are expanding the widget itself or in practice we're not filling the entire space with white space instead we are expanding the widget let's play around with this one as well in the code I think that's going to explain all of this much better for label 1 I want to add pad y if I set this to let's say 50 pixels now we have something that's very hard to see to make this a bit more visible for Pack 2 I want to set fill to both that way we can see where label one ends and label 2 begins let me run this again there we can see what this pad y has done is I created padding around the top and the bottom of the widget that way we have a bit of space and the larger number gets the more white space we have the same thing you could also do for pad X if I set this let's say to a hundred now we also have a ton of white space on the left and on the right of the widget all of this is padding I think this one is fairly straightforward besides that we also have iPad Y and iPad X although for now I only want to cover iPad y because conceptually this can be a tiny bit complicated to understand let me run the code again now we can see that the widget is quite a bit larger we are covering this bit of extra space this happens even though label 1 doesn't have any expand method the reason why it occupies more vertical space is because of this iPad y we are essentially pushing the widget to be a bit larger by the amount of padding we specify this is in contrast to pad X this one creates white space around it I hope you get a difference here most of the time you are only really going to use pad X because iPad y you don't really need to have much if you understand expand and fill they basically fulfill the same task that is going to leave us only with one more thing to cover and that is that you can combine different sides inside of the pack method although if you're doing that the order of the pack holds really really matters on top of that usually you don't want to combine different sides I'm going to cover this in the next video but using frames to organize a layout is much much cleaner first of all to make this as easy as possible to see I want to remove the padding and instead set expand to true for all of them and also fill both for all of them this I also want to do for the button like so now if I run this we have four identically sized widgets but let me change the top for the site for the first widget to left if I run this now we can see that the first label takes up a huge amount of space and why is that let me put the widget to the side here the main thing you have to understand is that the first time you're calling Peg with a certain kind of site this side is going to get priority which means right now the first label is going to try to occupy as much horizontal space as it possibly can then it sees these other widgets here but all of them are set to top which means the horizontal space is going to be ignored as a consequence they only get as much space as they need to display their text you can see here the largest label is this one the last of the labels this one occupies the most amount of space and this one determines the width of all of these widgets that is the reason why this label gets this much horizontal space and since there's no other widget in the vertical axis it occupies the entire height of the window after that the other widgets only get this remaining amount of space and they will divide the space between the three of them once again you can be really fancy with this kind of system but most of the time you want to use frames to organize out of this and that's going to be much cleaner again I'm going to cover this in the next video although this is something that you want to practice which means we can do another exercise here is one window that is a tiny bit more complex try to create this one yourself and see how far you get you probably have to experiment quite a bit but it's certainly doable if you could follow along so far first of all I want to set top to all of the sides if I run this again now all of the widgets occupy the same amount of space next up for Label 2 I have set the site to left what this one is doing is let me move this window a tiny bit to the side sees that we have three widgets that occupy the top Direction and since the first site that we are looking at is top it starts with that this means taken that tries to get the entire height of the window and separate it into three different areas we have one we have two and we have three they can already see this determines the height of our widgets besides that teak inter sees that we have one widget that has left however this one comes after the top which means tkinter tries to push this first label as far as it can but I can only push it up to this first line here because we have two other widgets with the top side this constrains the height of the first label this also determines the height of label 2. this is the entire height finally for the width like so thickener knows that there's no other widgets inside of our sides that occupies any horizontal space so Label 2 tries to take up as much space as it can the only constraint is last of the labels this one needs to have the minimum amount of space to occupy last of the labels the bit of text here which sets the maximum width of Label 2 to this point here and with that we have the basic layout the last thing we have to do if I show it again we had some padding around the first label this is quite easily done I want to have pad X for 10 and Pad y I've set this one to 10 as well if I run this again now here's what I created in the exercise and once again this kind of setup can work but most of the time it is much easier to use frames to make all of this much easier and that's going to be the next video I'll see you there in this video we are going to cover pack along with frames to create more complicated layouts in t Kinder what we are going to create is going to look something like this we have a fairly complicated layout that has lots of individual elements that come together quite well this is quite easy to do if you know how to combine pack with frames although for all of this to work you should already know how pack works and how frames work along with parenting check out the previous videos for more detail but I will assume you know at least the basics just to reiterate using pack along with frames is going to make it much easier to create more complicated layouts basically what you want to do is always create single Direction layouts with the only exception that some of these items are frames that contain their own layout for example we could have one window like this and then here we have one frame a normal widget and another frame note here that this entire widget only goes in a single direction there's nothing else in there however inside of the first frame we have two widgets and inside of this Frame we again only have a single Direction but if you combine the two we are already creating a slightly more complicated layout this we can make even more complex by adding another layout inside of the final frame and this one could be a normal widget and another frame and in this final frame we could add a few more widgets as well with this system we are able to create really complicated layouts without worrying about the pack sides too much and again if you don't know what pack sites are or why that can be a problem check out the previous video that explains all of this in quite some detail and just for comparison here is the widget we are going to make this one has one frame all the way at the top then we have a widget here and at the bottom we have one larger frame and this one consists out of two frames one that goes like this and the second one that goes like so all of the layouts inside of this widget are single Direction layouts which makes them much easier to handle that was quite a bit of talking let's have a look at all of this in code alright here I have a really basic setup if I execute all of this we can see a basic window although on top of that I do have quite a few widgets there are four labels and two buttons all of which have the window as the parent right now or the master to be more specific this I already want to change the first two labels should have one frame as their parent and the final three should have another frame as their parent to keep all of this organized I want to have slightly more detailed comments let's get started by creating a top frame for this I want to have a top frame and this I create with ttk DOT frame this one is going to have the parent or the master of the window but then label 1 and label 2 are going to have the master as the top frame this is already giving us the first part that we need to make all of this work this I can now use to create another section here I'm going to call this layout actually let's be a bit more specific and I'm going to call this the top layout I want to get my label one and I want to pack this without any other Arguments for now the same I want to do for Label 2 and now if I run this we can see that we cannot see anything even though we have used pack the reason is that we haven't packed this Frame or the top frame to be more specific which means we do have labels inside of the top frame but the top frame itself isn't placed anywhere which is the reason why we can't see anything to fix that we also have to get the top frame and pack this one now if I run this we can see two labels this I can now use for example for label 1 and label 2 to fill the sides and I'm going to add both in here if I now add this we can't see much of a difference the only difference that we can see really is that Label 2 has become a bit wider it became the same size as the first label the reason for that is that right now both of these labels are constrained by the frame width and the frame is only as wide as the widest widget which is the first label in this case that again we can fix by also adding fill and both for the top frame and now let's have a look now it covers the entire width of the window by the same logic I could use expand here and set this to true now we can't see anything but that being said we know that this top frame here is going to occupy the entire height of the window the reason why we can't see it is that we don't expand level 1 or label 2. if I expand the two like so we can see we have both labels covering up the entire window this is the first part next up I want to place label three which again is just going to be now available with some text and a background color this is not going to have a parent so window can remain although I'm going to add a comment here for the middle widget tikenta doesn't care very much if you combine labels or frames or any other kind of widget which means I can also add the middle layout here and simply get my label 3 and pack this thing if I now run this we have another label all the way at the bottom this one since we didn't specify any fill or expand argument it is only going to occupy the minimum amount of space it needs to display the label or the text itself however if we set expand to true now we get some slightly more interesting Behavior what tikenter is doing now is it says that we have a top frame and label three those are the only two widgets inside of the window this window here which we know because both of these have window S10 master because of that tkinter is separating the entire vertical space into two parts this one here and this one here I hope this already makes it quite easy to see why using parenting here is really useful because what we can do now for example for label 1 and label 2 inside of the top frame we could for example set the site to left and now we get this kind of layout which already is quite a bit more complicated and doing this kind of thing without parenting would be kind of a nightmare next up I want to create the bottom frame for this one I want to create a variable bottom frame which is going to be ttk frame as well the parent here is going to be the window however for label three button and button 2 the master is going to be the bottom frame once we have that we can create the bottom layout for this one I first of all want to place my button and for now I'm just going to use pack and nothing else the same thing I want to do with button 2 although between the two I want to have label 4. which I also need to pack with this we have the three widgets finally we have to pack the bottom frame as well bottom frame dot pack like so now if I run this we can see we have the other three widgets at the bottom although if I compare this to the demo we have to get a slightly different layout here I first of I want to change the side to left like so and now if I run this these three labels are right next to each other the problem is they're not expanding for that actually let me show it again right now we're telling tkinter to look at this top frame here and to take up as much space as possible then to look at this widget here and to take up as much space as possible and then we have this final frame here and this one doesn't get any expand so it's only as large as it needs to be that I want to change which I do with expand and this I want to set it to true if I now run this we have a slight Improvement inside of the window layout we have One Direction and we are separating this into three parts because we have three widget this one here this one here and this one here that compete for space because of that we have three equally sized spaces this one this one and this one the problem in the bottom one frame is that these widgets are not being told to expand so they only take a minimum amount of space this we can also fix very easily I just want to add expand being true and now we can't see any difference the reason for that if you check out the last video if you missed it is that pack only works in One Direction right now our side is from left to the right so we are going this way and expand only expands the widget in the current direction meaning it tells the first button to take up as much space as possible same for the label and same for the final button and then this one here is going to be the size of the frame to make it take up even more space we once again need to fill argument and this I want to add to all of the widgets and now if I run this this is looking much better now we're telling both the frame and all the widgets inside the frame to occupy as much space as they can and fill the entire space as well although what I also want to do if I compare this to the demo again we have a bit of padding around this this area here I also want to add which if you use frames is very easy to add all we have to do inside of the bottom frame I want to add pad X is 20 and Pad Y is 20. if Iran is now we have a bit of padding around this and with that we have a couple of basic ways to create more complicated layouts it doesn't really get that much more complicated you essentially always create a single frame and then you pick widgets in One Direction inside of this Frame and if you combine enough of these you end up with slightly more complicated layouts and those are also much easier to understand and to implement now you could replicate all of this by using the side very cleverly in tkinter to get really complicated layouts the problem with that approach though is that this really often ends up with very complicated layouts that are really hard to maintain which is why I would recommend to always stick with one directional layouts and then add frames to create greater complexity that's basically all you need all right and with that I want to do an exercise and then we're done with this part what I want you guys to do I want you to create three more buttons and another frame the frame should be on the right side inside of the bottom frame this bottom frame here and the buttons inside of this extra frame should be stacked vertically inside of it the result of all of this should look something like this the buttons should be here let me put it a bit to the side and pause the video now and try to figure this one out yourself we have to get started by creating a few more widgets this I want to do all the way at the top I'm going to call those the exercise widgets first of all in here we need an exercise frame this once again is just going to be another ttk.frame with the parent being the bottom frame this is going to be the only difference compared to what we have done here and here because for both of those the frame always at the window as the master this Frame here has another frame as the master which is perfectly fine to do after that I want to create button three and this is going to be ttk dot button with the exercise frame as the master the text can just be button free this should be a string though and I should also fix my typo I can copy this two times it should be button four at button five both for the variable and for the name that is going to be all we need to create the different widgets now we have to place them this I want to do all the way after the exercise comment in here first of all I want to place the buttons I have button three button 4 and button five all three of those should be packed since the stacking order is going to be vertical I can just leave the default argument which is the top side although I do want all of the buttons to occupy as much space as they can which means I only said expand to true and fill to both sides once I have that I can place the actual frame and this I called the exercise frame I want to pack this one as well and if I run this let's just see what happens we are getting something the problem we have right now is that this pack is very small it only occupies this area here to fix that we have to do a couple of things first of all I only want single Direction layouts which means the site here should be left like so and let's see what we get now now it places this thing in the middle that's a good start besides that I also want to set the fill and this could either be y there we go or it could be both both work perfectly fine I tend to prefer both because it just works most of the time but once again both here are perfectly valid finally what you could also do is set expand to true and that's going to make these buttons a tiny bit wider with this expand being true we are telling this Frame here to divide the space into four equal parts we have number one number two number three and number four and all four of those have the same width with that we have created quite a complicated layout in the next video we are going to cover grids this one is going to be even more powerful so I'll see you there in this video we are going to learn about the grid layout what we are going to make is going to look like this I am fully aware this looks horrible but that's not the point of this lesson what I want you guys to do is to understand how to create a grid and how to place elements in here let's talk about how it works when we are using the grid method we are creating a grid inside of this grid we can determine the number of rows and columns on top of that you can also set the width and the height of each column or row you can see this one quite well for example this cell here s is certain amount of width and a certain amount of height this you can set yourself quite easily once you have that you can place widgets in columns and rows and on top of that you can also specify how many cells in which it is going to occupy for example this could look like this like this or like this where you have one widget overlapping with another widget in the most basic sense this is a very simple system however there's one limitation you need to be aware of like with pack grid only determines how much space at which it can occupy but not how much it will occupy and this difference is important inside of the pack method we had the fill argument inside of a grid we are using sticky this one works like this this could be one cell inside of our table and we can specify to which border the widget is going to stick in here we have north east south and west and this we used to place a widget inside of here by default a widget is always going to be right in the middle however if we for example specify sticky North then the widget is going to stick at the top this would look something like this note here that the size of the widget hasn't changed however when we Define two arguments in here like North and South in that case the widget is going to retain the width but is going to occupy the entire height of the cell let me clean this up a tiny bit our widget is going to stick to the north and to the South which means the height of the widget is going to occupy all of this however the width of the widget is going to be determined by the content for example if we have a label with some text then the width of the text is going to determine the width of the widget although if we specify all four directions North South East and West let me clean this up a bit if we have all four directions we are telling the widget to stick to all four sides of this cell and that way we have one widget that is quite large or well as large as the cell it's in that is quite a bit of stuff to cover so let's Jump Right In and let's have a look at some examples here I have some very basic code if I execute all of this we can see that we have an empty window that window we're getting from these lines here and we are running main loop on the window we created besides that we have quite a few different widgets but right now we're not packing them so they are not visible we have four different labels and each of them has a background color besides that we have two buttons and we have an entry widget all of these I want to place using the grid method for that first of all I have to define a grid for that you take the container and you run two methods the first one is called column configure this is going to create one or multiple columns for now I only want to create one at least on this line of code this needs two arguments first of all is the index and the index here is going to be column 0. then we need what is called the weight and this is going to determine how wide this column is for now I'm going to set it to 1. once we have that I want to duplicate this thing and change the 0 to a one with that we have two columns I want to duplicate this thing another time and change the column to a row the index now being 0 and the weight being 1. with this what we created is is is our window and we have two columns one and two this is what we're getting from here besides that we have one row this is what we are getting here I want to place a widget to place label one I have to get the widget label one and then use the grid method I have to specify row and I have to specify a column for both of those we have to use the index numbers we specified earlier meaning the column could either be 0 or 1. let me set it to zero for now the row right now always has to be zero because we only have a single row with that we are placing label one let me run the code and there we go we have one label the same thing we can do with label two I'm going to copy this entire line change label one to label two the row I'm not going to touch the column I'm going to change to 1. if I run this now we have label 1 and label 2. and here we already have the first issue that being that the cells we are specifying let me draw them on here we have column one and we have column two and the two are separated roughly here besides that we have one row the issue we have right now is that there's a ton of white space both around label one and label two and this comes back to the issue that is kind of annoying in tkinter and that is that these cells only create a space for the widget but we're not telling the widget to occupy that entire space as a consequence we are ending up with a huge amount of white space sometimes you want that but most of the time you probably don't so let's get rid of it to get rid of it we need the sticky argument in here we have to specify north south east or west the order of the letters here really doesn't matter and let me just run it like this now this is looking much better we are telling the widget to stick to all four sides although I guess I jumped a bit ahead for now let's get started by just specifying North if I run this now the widget sticks all the way to the top of the cell I can do this with the other sites as well for example if I specify sticky to West for the first widget and then I also add sticky with East then we can see we have each of the widgets on the side of the window although I guess if I flip this around with east and west now we can see where the borders of these cells are although that's not usually how you would use sticky instead most of the time you specify two sides for example East and West tells the widget to span the entire width of a cell you could also specify North in here and then we are sticking the entire thing to the top you do have to play around with this a tiny bit but eventually It's Gonna Come quite handy although most of the time you just specify north south east and west you are occupying the entire cell and you are done that is basically the fundamental thing you have to understand about grid layouts I guess what we can do is create a few more rows and columns and then play around with this quite a bit more I want to have three columns in total 0 1 2 and 3. and already if I run this after creating more columns you can see the layout has changed because now we have column 0 column 1 column two and column three so the space we have for each column is going to be less what you can also do is change the weight of each column for example if I change this to a 2 then we have even less space let me add a higher number so you can see this a bit better we still have 0 1 2 and 3 columns but the final column is going to be much wider than the other columns I can demonstrate this quite well by placing label three this one is going to be in row 0 but column three and I want this to go from east to west there you can see we have a really wide label we can actually make it even easier because these three lines are basically identical they all have the same weight we just want to specify a different index for that we can also add a tuple in here for the index and just call this 0 1 and 2. like we have done before and this is going to give us the same thing which means I can get rid of this now we are creating three columns with the index 0 1 and 2 all with a weight of one and then we have a final column with the index free and this is much wider so if I run this we are getting the same thing the majority of the time you are going to have columns or rows that have the same weight and then using tuples for that is much easier to read for the rows I also want to have multiple I have one two and three or well four rows in total but you get the idea and like with the columns I can also change the weight let me change this one to a three now if I run this all of our stuff is at the top because this is where the original row zero was this one here is row 0 and before we had the other rows this was the only one but now we have a ton of stuff down here so all the existing elements we had were pushed upwards but these cells I can now use quite easily for example let's go with label two instead of row 0 I want to place this one at row 1. if our one is now it is a bit further down and let me change sticky to north south east and west then you can see this a little bit better there we go this is looking pretty good this could also be column two or it could be row 2. like so the system here I hope is quite easy to understand it really doesn't get that complicated so we can cover the next part and that is either column span or row span let's start with roseban since I do have quite a few rows that I'm not using roseban is telling the widget how many rows it should occupy by default this is one if I run this we are not seeing any change however if I change this to A2 now we're occupying two rows and if I change it to a three we are occupying all of the rows let me draw this actually in this widget right now we have four different rows this one here is row zero then we have roughly here Row one row two and the rest is Row three this one is much taller than the other rows because we have given it a greater weight and this row span is telling the widget to occupy this starting cell then another cell and then another cell those numbers are 1 2 and 3 for the argument the same thing you can also do with the columns let's use level three for that I want this thing to be in row one and the column for now should be column zero also I want to have north south east and west so if I run this now we have label three on the left side however I want to specify column span this widget should span three columns if I run this now we have a much wider widget that is overlapping with label 2. to make this even more visible we can cover one additional concept that is two different kinds of padding if you have watched a pack video this should be familiar we either have pad X or pad Y and this is going to expand the space around the widget to give some space between the current widget and any neighboring widgets meaning pet X or pad y create space around the widget besides that we have iPad X or iPad Y and this one is expanding the border of the current widget it essentially makes it larger back in the code to make this Label 3 here visible we want to add pad X let's say 20 and Pad y let's go with 10. although before that I want to fix the typo let's try it now there we go there is quite a bit of space in the X and the yaxis although on the xaxis this side we have a large amount because pad X is twice as large as pad y and if you changed pad y to iPad y we can see well not much of a difference but let me add a much larger number in here a hundred third virtual visible there we go basically what happened now is that this used to be row 0 then we had Row 1 Row 2 and then down here Row 3 originally Label 3 occupied this height here but because of iPad why we are pushing the widget up and down by quite a bit or not really pushing we are rather expanding it quite a bit what you want to be careful about here is that this is shrinking other cells label one in particular has become much smaller so do be careful with this one I only want to use pad y with 10 pixels like so this is much cleaner what can also be really useful let me Place label 4 with the grid method you can place elements in the corner for example this label 4 I want to have in the bottom right corner for that I will need to roll that is the maximum which is Row 3 and I want to have the maximum column which is also number three running this now gets me label 4 but not in the ideal position Instead This widget should be in the bottom right here for that we can use sticky I want this to stick to the South East if I run this now there we go the label is all the way in the bottom right even if we resize the window it will always be in the bottom right I guess I didn't mention it but the grid always scales along with the window which lets you make really cool stuff I think at this point this is becoming quite repetitive ultimately using grid is quite simple it really doesn't get that complicated that being said there's one thing that can be kind of annoying grit has a tiny bit of a uniformity issue which means when you have cells with content their width is not what you would expect let me do an example let's say we have a grid like this and we want to place two widgets one and two inside of this example we have 0 1 2 and 3 columns they all have a weighting of one let me use a color like this they have one one one and one they are all supposed to be equally wide the issue is if this cell here is empty and this cell here is empty then tkinter is going to make the existing cells with content wider than they are supposed to be there is a formula to calculate the exact numbers but most of the time you don't need that because you don't want this Behavior at all because it's well inconsistent and kind of annoying but let me demonstrate this issue first I want to comment out the third column and I also want to comment out all of the other rows besides the first one besides that I also want to comment out what we have done for Label 2 3 and 4. that way I can focus on one specific thing I already have label one with a grid and this one occupies the first row and the first column I am just going to copy this and change column 0 to column 2. if I run this now you can already see the issue quite well this column here and this column here they have the same width but this one here in the middle is much less wide I guess much less white is a bit of an exaggeration but it is less wide than the other two the reason for that is if a column or a row has a widget in it he Canta is going to give it a bit more space that being said though you can fix this one quite easily all you have to do is add one more argument and that's called uniform in here you are supposed to add a string and you can give different columns is similar uniformity in practice though you are hardly ever going to use it most of the time I just had an a for every single row or column like so and then every single row or column have a uniformity I can run this now and now we have all the columns having the same size or a uniform size this is still going to work with the weighting and that way you have much more expected Behavior with that I can get rid of Label 2 and uncomment everything else like so this stuff here I want to uncomment as well like I have done this stuff here all of those are going to get uniform also I want to change the weight of column with index 3 to a two and now if I run this we got something that looks very much like the example I had earlier that one looked like soap and we are definitely getting there that is leaving us just with the exercise and then we are done with this video what I want you guys to do is going to add the buttons and the entry field as a reminder the demo app I had looked like this you have to add this button and this button and the entry field try to figure out in which row and which column they are and see if you can place them as well shouldn't be too difficult so pause the video now and try to sort this we know that button one is very easy to place because we have row 0 and we have column three this button is in the top right it has to have these values or button two this one here I know we have one row here and we have one row here and besides that we have one column here another column here and that brings us then to this cell which means this one is going to be column two and row 2. let's start by placing those two and then we can work on the entry field I want to start by placing button one with the grid method for this one I know that the row is supposed to be 0 and the column needs to be three if I run this now we have the button in the top right but the button doesn't fill the entire available space this we do by using sticky and adding north south east and west which is what I am always using but you could change the numbers here around as you want this could be north east south west it really doesn't matter tikanta just cares about the numbers being present in there I can duplicate this slide now and button two I want to place in Row 2 and column 2. let's see this is looking pretty good finally we have to place let me open it again we have to place the entry widget this one is a tiny bit more tricky for example we know that this button here is on row 2. which makes all of this row number three the issue is the entry is not perfectly centered in here that would be roughly this line instead what I have done for the entry is I have taken up Row 2 and 3 and place the entry widget in the middle of that which places it roughly here which means we want to have column number three but then for the row we want to start on two but occupy two rows in total that should be fairly easy to implement I want to get my entry widget I want to place it using grid the row is going to be 2 and the column is going to be 3. like so if I run this now we have the entry widget right next to the button to push it down I want to add a row span it should occupy two rows if I run this now there we go this entry field is now in the position we had before you could make this a bit more explicit by adding sticky to it although that would give us a really large entry field like so that's a bit weird because entry only allows one line of input but it certainly works in this case though I don't want to add sticky in here I guess we can add sticky or east and west like so that I think is a bit better with that we have all of the basics of the grid method I hope it wasn't too bad if you understand grid you understand the most common layout method in tkinter this one especially from a complex layouts you are going to use all the time in this video we are going to cover the place layout method what we are going to create is going to look something like this once again not a particularly pretty app but it definitely teaches you quite a bit on top of that this one is quite flexible and here you can see a couple of different effects I'll explain them as we go along so let's talk about place widgets are placed by specifying the left the top the width and the height of the widget this is a very flexible system also I think a fairly simple one to understand although when you are placing widgets you can do this in two ways you can either use absolute or relative values let's start by talking about absolute values for this we once again have a window or any kind of container it doesn't really matter and this container right now is 400 pixels wide and 800 pixels tall if we want to place a widget inside of this we would have to specify at least two but ideally four values these four the values we absolutely have to specify are these two values here those are crucial with these points we are placing the left and the top of the widget which is this point here in this particular example the top left of the widget is 100 pixels from the left side and 200 pixels from the top besides that we can also specify the width and the height of the widget these numbers are optional if you don't specify them the widget is going to have the size of its content let's do another example we have a widget all the way at the bottom for this one we once again would have to get the top left point this one has zero pixels from the left and from the top we have something like let's say 500 pixels the widget is about let's say 200 pixels tall and it has the entire width of the window or the container which is 400. and that's it I hope the system makes sense besides that we have a relative values for this again we have a window or any kind of container but instead of specifying a specific width or height instead we separate this thing into a coordinate system that starts from zero and goes all the way to one and this we do both for x and for Y which means that this point in the top left always has the coordinate 0.0 and 0.0 1 4 Y and the other for x the bottom right point of the container then is 1.0 and one point for both axes that way if you want to place a widget you would have to do it like this instead of specifying a specific distance like we have done here we are telling the widget or the left side of the widget to be 10 of the width of the widget or at 20 from the top of the widget we can also do this with the width and the height for example we can tell the widget to have 40 percent or ten percent of the width or height of the container other than that the system works in exactly the same way so if we do another example for this widget the left position is still going to be zero let's put a zero here for the top position this one is going to be a bit larger let's say this one would be 0.6 the height of the entire widget would be I don't know let's say 0.2 finally the width of this thing is going to be a one because I want this to cover the entire width of the container once again that's basically it for the basics of place it well is quite simple so let's have a look at all of this in code I already have a few lines of code ready if I execute all of this all we can see is a basic window the reason for that is that these widgets are not being placed on the window let's create a layout then I am going to start with label 1 and this I want to place using the place method for this one we at the very least need X and Y coordinates and let me use some really simple numbers X being 0 and Y being zero if I run this now we can see label 1 in the top left I guess I should talk about the widgets we have we have three labels label one two and three they all say the same thing basically they just have different background colors red blue and green besides that we have a button since we only have one button I guess I can rename this just a button there we go now if I run this again we can see label 1 in the top left the reason for that is that the entire container the window in this case is going to be a coordinate system that goes something like this with the origin point being up here or rather more specifically up here this point is 0 and 0 if you want to go further to the right we have to increase X and if you want to go downwards we have to increase y so plus Y and plus X if you are only familiar with high school math this might be a tiny bit confusing because in high school math if you want to go up you have to increase Y which we are not doing in this case which can be a tiny bit confusing you will get used to it quite fast and well all we have to do now is play around with these values for example if I change X to 100 and Y to let's go with 200. if I run this now we can see a difference what we have is X being 100 meaning we have a distance of 100 pixels between the left side of the container this side here and the left side of the widget this distance is 100 pixels other than that we have y and this tells us that from the top of the container to the top of the widget we have 200 pixels of a difference what we can also do is set a width and a height for example the width could be 200 actually let's go with 300 so we have different numbers and for the height I want to go with 50. let's run this now and there we go the widget is much wider and a tiny bit taller by default a widget is only going to take up this space it needs to display the text which by default would be something like this but if we specify numbers for width and height we are setting the width in this case to 50 and the height is going to be 300 that's very hard to read sorry about that we can play around with the numbers here quite a bit for example X could be 300 y could be 100 and let's say for the width we have 100 and for the height we have 200 and now we get a different kind of witch that is all the way on the right to understand the numbers here we know that the entire widget is 400 pixels wide this thing is 400 pixels and we are placing the left side 300 pixels from the left side of the window this distance here is 300 pixels on top of that we are setting the width of the widget to 100 pixels meaning this distance here is going to be 100 as a consequence the widget ends exactly on the right side of the container after that for y we have 100 meaning this distance here is 100 and then we are setting the height to 200 so this one here is 200. all of that I think should be reasonably straightforward with that we have covered the absolute positioning besides that we can place Label 2 and for this one I want to use relative positions this we do in a similar way we still have to specify X and Y values except now they're called relative X or Rel X and relative y or Rel y in here just to get started I can again set 0 and 0. running this now we can see Label 2 all the way in the top left although now I don't specify pixels instead if I set this to 0.5 and let's set y to 0.2 the top left position of the widget this point here is exactly in the middle of the window meaning we have 0.5 to the left and 0.5 to the right 0.5 like so and then from the top we have 20 but I think it's not too difficult to understand if we use different numbers let's say 0.2 and 0.1 we should be a bit closer to the top left we can also specify the width and height in a relative way this we do with relative width or with relative height for this one let's say I want to have 40 of the width of the container and let's say 50 of the height and difference now we have a much larger container I think the numbers here are fairly straightforward I well I don't think the system is very difficult so it shouldn't be too hard to understand but drop a comment if you think it's super complicated what we can do as an exercise to make this a bit more interesting is I want you guys to place label three labor free should be positioned using absolute numbers meaning we have x y we have the width and we have the height and label three should be exactly in the same position as Label 2 meaning you have to convert these numbers to X and Y positions possibly now and see if you can figure this one out are to convert these numbers you have to know the size of the container which in our case is the window for example for X we have to convert 400 by 0.2 which is going to be 80. Y is 0.1 of 600 which is just 60. the width is 40 of 400 which is 160 like so and height is 0.5 of 600 which is 300. that should be all if I run this now we can see level 3 covering all of label 2. that looks pretty good and well with that we can see that relative and absolute positioning works pretty well together although that being said you do want to use relative positioning I can demonstrate why quite easily here we have the app again right now this is looking really good but once I start to move the window around we get some massive differences the problem here is that Label 2 is relative let me move it to the side like so the only widget that scales along with the window is label 2. this one here it scales along with the widget because we are always using relative values whereas label 1 and level 3 have absolute positioning so those two do not move regardless of what the window is doing if you wanted to scale those you would have to update the value every time you are changing the size of the window which would be kind of a pain in ninety percent of the cases you want to use relative positioning because this one is much more flexible there's one more case that I do want to cover I want to place this button and where I want to place it let me run the app again the button should be in the bottom right corner of the window down here this I can't really do right now although we can get started once again I want to get my button I want to use the place method and I want to use relative positioning let's set relative X to 1 and relative y to 1 as well if I run this now we cannot see the button the reason is that we are placing the top left of the button in this corner here but then the rest of the widget goes in this direction and this direction meaning the button is this yellow outline which is just outside of the window but we just cannot see it this obviously is a problem so we have to learn about another argument that we can control what is called the anchor when we're using the place method the anchor controls which point is placed by default if this one is the widget we are setting the top left point but this you can customize and here we have all the points you can use the default here is North West which is telling tkinter to place the left and the top of the widget which is giving us this point that's the default one that being said we could also tell tikenta to place the south east of the widget and then we will place this point here besides that you could also tell tikenter to place the center of the widget then you will place this point if you know the grid method this should look fairly familiar let's play around with it for my button I want to set the anchor and that is atrocious spelling that looks much better we need a string and I want to place the South East Point running this now now we can see the button this one works as always it's a button to see a bit better what's Happening Here I am going to place the center now we can see we can only see the top left area of the button the reason for that is we are placing the center of the button in the bottom right of the window or the container to be more specific that way we can only see the top left and the rest is cut off I do want to cover one extra case and that is using the place method along with a frame I want to create a frame with ttk and frame the master here is going to be the window after that I want to create two widgets one is going to be a frame label which is going to be ttk and label with the window as the master and the text could be frame label on top of that I want to give this thing a background color which we can set to Yellow that's the one we haven't used yet besides that I'm going to duplicate the entire line and change frame label to a frame button this is going to be ttk and button enter button is not going to have a background color also this should be frame button to be a bit more consistent what I now want to do is to place this Frame using the place method and also add these two frame labels inside of this Frame and for that I have already seen one problem and that is that this label and this button need to have the master as the frame because I want to place those two inside of the frame this I want to do in another section I'm going to call this one layout frame layout looks good first of all I want to place the frame itself which I do with the place method and this one I want to have the relative X position of 0 and the relative y position of 0 as well that way it's in the top left the width I want to have 0.3 and the relative height is going to be 1. that way if I run the entire thing we can't really see it but the frame we have just created is going to cover an area roughly this size and I am very very bad at drawing straight lines inside of this I want to place the frame label and the frame button I will start with the frame label I'm going to use place again for relative X I want to have 0 relative Y is also going to be 0 meaning this label is in the top left and besides that I want to cover the entire width so relative width is 1 and relative height is going to be 0.5 and there we go we have a frame label that covers one third of the window what you really have to understand here is that place always works relative to The Container which in this case is the frame right now the width of the frame is this width here which means when we are specifying relative width of one water frame label we are telling this Frame label here to cover this entire width the width of the container if the frame label had the master as the window then it would cover the entire width of the window what you want to keep in mind here the parent or the master is incredibly important for layouts but once we have that I also want to place the frame button this one should take up the bottom half of this container relative X should still be zero but relative y should be 0.5 the other numbers I think can remain The Identical and that is looking pretty good we have separated the space in half and I can even drag the window around this is still working just fine cool I'm really happy with that on top of that for this button here the one we created earlier I want to set the anchor to Southeast so all of this looks a bit better ready with that we have covered all of the basics of the place method all we have to do now is an exercise and then we are done what I want you guys to do is this one here create a label and place it right in the center of the window the label should be half as wide as the window and beat 200 pixels tall also give it a background color to make it a bit nicer to look at which color you want to choose is entirely up to you I am going to start by creating an exercise label this is going to be ttk and label the parent here is going to be the window text is going to be the exercise label finally I want to have a background color let's go with orange this exercise label I now want to place a position here has to be right in the center of the window which means I want to have a relative X being 0.5 and relative y should also be 0.5 running this now we get the exercise label although it's not perfectly centered the point we have centered is the top left of the widget what I want to do is to place the center of the widget right in the middle of the window for that I have to set the anchor to Center and I am somehow unable to spell anchor that's right now and there we go this is looking much better finally we have to set the width and the height of the label it should be half as wide as the window and 200 pixels tall which means the relative with is going to be 0.5 enter height is going to be 200. I can run this now and this is looking pretty good on this line I realized I didn't mention but you can combine these values quite easily so you could for example set the relative width and the height in pixels they work together really really well the same could also be done with X and Y for example I could set X to I know 200. and I think since the entire window is 400 pixels wide this is still putting us in the middle of the window you do want to be careful using this though because if you now resize the window like so things start to get a tiny bit weird so just keep that in mind there's one important issue that you have to understand about tkinter layouts and that is the widget's sizes because that can be a tiny bit tricky let's talk about it indicator every widget can have a custom size however what you also have to understand is that this size will always be overwritten by the layout methods you basically have two places where you can add a size of a widget but one is prioritized for example if we have something like this we are creating a label this label has some text but much more important we are giving this label a whiffed this specific width in this example is going to be 50. really important here this is not pixels TK enter uses a really weird measurement system where this 50 is the width of 50 characters it's kind of weird but don't worry too much about it what is much more important for now is that we have two different kinds of width way after with I've just talked about and then we have the width of the pack method because in here we're telling the widget to fill the entire horizontal space as a consequence tkinder has to decide is it going to use this with here or this width here and the default answer for tkinder is going to be this one here tikenter always relies on the inbuilt layout methods as the main layout tool so if you have two different kinds of width the actual width you are going to get is the one from the inbuilt layout method now this might seem quite simple and most of the time it is but in some cases this can cause problems with the layout which is why I want to talk about it I already have a couple of lines ready if I execute the entire thing we have an app with two labels inside both labels have a background color I am importing tkinte at the top then I'm creating a window after that we are creating two labels and after that we are placing both labels using the pack method finally we are running main Loop to see the window all of this should be fairly simple and now we can start working on the layout itself or more specifically I want to give Label 2 a custom width label 1 is going to be a reference so I'm not going to change this which should make it a bit easier to see what's going on both labels are right in the middle of the window if I now change the width of Label 2 with the with parameter I can give this a width of 50. if I run this now you can see we have a much wider label too also what I really want to emphasize here is that the entire width of the window is 400. this with here is 400 and this is in pixels however this with here of the label is this Dimension here and this very obviously is not 50. pixels that is not the unit we are using instead what the Kinder is using is 50 whiffs of a character it's a very strange measurement you are not going to use it that much anyway so I'm not going to go into much detail but just be aware we are not using pixels all right but with that we have a custom width what we can also do inside of Label 2 when we are packing it we can set the fill and this determines the actual size of the widget if I in here set this to X and run this again we can now see that the second label covers the entire width of the window which means that this for the X here covers the entire window while this width here is simply being ignored in practice you could just remove it and this is what you probably want to do 99 of the time you simply want to use the layout methods to create the size of a widget because that way the entire system is going to be responsive and while using hardcoded numbers can be a problem for example if I remove this fill here we can see our label has a certain width again but now if I resize the window this doesn't change we always have the same width of the label which is going to be a problem if the window gets too small or if the window gets really large this is a general thing you want to understand for layouts you basically always want to have flexible layouts otherwise things can break very very easily with that covered I want to do one more thing right now we looked at the pack method but we also have to look at the grid layout for that one I want to give my window a couple of columns and a couple of rows let me start with the column with column configure I'm going to create two columns 0 and 1. both are going to have a weight of one and I'm going to set the uniform to a this I can now duplicate and I want to have a row configure I also want to have two rows with 0 and 1 with the same weight and same uniform argument that way we have four cells with an identical size inside of this one I now want to place my label 1 and label 2 which means label 1 dot grid this one I want to place in row 0. and column zero I can duplicate this entire line change label 1 to Label 2 and this one should be in row 1. now if I run this we can see we have two different sizes for the labels this once again happens because of this width here however I can overwrite this quite easily if I for example for Label 2 said sticky to north south east and west we now have the label covering the entire cell so once again the inbuilt layout method is overwriting the custom width we have set inside of the widget if you were using the place method the same thing would happen this can be fairly confusing and frustrating at times so I hope this helped another important part of the Kinder is the stacking order this one determines which widget is on top of another widget so in here I can place different widgets on top of each other especially when you use the Grid or the place layout method this can become quite important because for both of those layout methods it's very easy to place the widgets on top of each other so you need to be able to control which widget is on top of the other for that the most basic thing you have to understand is that widgets always placed on top of other widgets when they are created really important here not when they are placed for example we have two labels both are TDK label and nothing else the arguments here really don't matter and then we are using the grid method to place them once again I am ignoring the arguments here but just imagine they are on top of each other in this case Label 2 is going to be on top but this is because we are creating Label 2 after we are creating label one if we switch this around then label 1 would be on top of label 2. the grid method itself doesn't have any influence on that it's kind of confusing to be honest but well it is what it is on top of that you can also raise witches to the top of all of the widgets or on top of another widget for this video I have something slightly more complex ready if I execute this I have two labels label one and label two on top of that I have two buttons in the bottom right we have arrays label one and race label two later on those are going to control which label is on top although right now they don't do anything inside of the code I am importing tkinter I am creating a window then I'm creating four different widgets I have two bits of text and two buttons button one and button two after that I have a layout section in here I am placing the two labels using the place method the arguments here are basically random the one important thing is that those two labels are overlapping with each other that way I can show you which label is on top of the other besides that we have the buttons and the only important thing here is that both buttons are in the bottom right that I achieved with relative y being 1 and relative X being 1 or 0.8 that way both buttons are in the bottom right with button one being a bit further to the left the anchor here is really important that way we're placing the origin point of the widget in the bottom right of the widget with that covered we can start talking about the actually important part and that is that right now we have label one being below level 2. the reason for that is that we are creating label one before label two I can demonstrate this by creating Label 2 before label one now if I run this we have label one in front of label 2. however the layout method so place in this case has no impact on this whatsoever if I place Label 2 before label 1 we get the same outcome and if I place Label 2 after label 1 we still get the same result in my case I want to start with label 1 and then create label 2. this means that Label 2 is on top of label one Now to control the stacking order you have a couple of different approaches the easiest one is called lift for example after I'm creating the widgets label 1 and label 2 remember here Label 2 is on top right now so we have Label 2 on top but I could get my label one and then run the lift method on it this elevates label 1 on top of all of the other widgets alternatively I could get labeled 2 and then run the lower method on it that way we are lowering Label 2 below all of the other widgets so let me add both in here so you can see them in the code a bit easier we have lift and we have lower besides that what we can also do let me comment out left and lower for now inside of the button let's say for label one for now I want to add a command this command is going to be a Lambda function because it will be very simple I want to get label 1 and what I could do is simply run the lift method if I now run this again note here label one right now is below Label 2 but if I click on raise label 1 we can see label 1 is on top of label 2 and what we can also do if I copy the command here now for race Label 2 I could get Label 2 and lower it so now if I run this again and now if I click on raise Label 2 we are lowering label 2. the naming here doesn't really make sense but I'm going to change this anyway in a second so lift and lower you can use quite well besides that you could also use TK rays and that does the same thing as lift let me add it for both and now if I run this again we can raise label 1 or race label 2. and that way we can control which widget is on top of the other you might be wondering now what is the difference between lift and TK rays and quite honestly I have no idea they seem to be doing the exact same thing so you can use whichever one you prefer it really doesn't make much of a difference so with that let's do an exercise I want you guys to add a third label and a third button meaning label three here and button number three the command for button number three should raise the third label all the way to the top pause the video now and try to implement this one yourself this should be a fairly simple thing to implement because all we have to do is duplicate Label 2 change this one to label three I also want to change the text to label 3 and for the color we can go with blue after that I want to create button number three with button number three this one should be race label three and for this one I want to have Labor 3 and then TK race with that covered I have to cover the layout for both the label and the button for label three I once again want to use the place method and here for the arguments I do want to have a different position so we can see this a bit easier the numbers I went with X being 20 y being 80 the width is a hundred and eighty and the height is simply 100. finally I want to place button number three for this I want to copy button 2 change it to button number three the only change I'm going to make here is relative X should be 0.6 if I run your typing now we're getting an error because I have some weird typo in here let me fix that like so and that is looking much better now let's try this there we go now we have label three for this one if I click on raise label one now we have label one all the way on the top the same thing we can do with label two and then we have label three so one of this is working quite well and you can very easily control which label is on top this would also work with literally any other widget I am simply using labels because they are the most easy to work with and I can visualize easily what's going on now there's one more thing that I do want to cover and that is that both for TK rays and lift we can add one argument and that is called Above This by default TK race puts a widget all the way on top of all of the other widgets but if you want to have a widget only on top of another widget you would use Above This for example for label 1 when I'm clicking on TK race I want to only elevate it on top of label 2. so if Label 3 is on top then label 1 would not be elevated all the way to the top it would still be below the third label I hope that makes sense let me illustrate actually so now we have Label 3 all the way on the top if I click on raise Label 2 we have Label 2 all the way on the top and now if I click on raise label 1 we have label 1 all the way on the top although more specifically label 1 is now only going to be on top of label 2. if I raise Label 3 all the way again and now erase label one again nothing is going to happen because label 1 already is on top of label 2. I hope the logic makes sense here if you think about it for a couple of seconds it should be fairly straightforward I supposed to illustrate this a bit better if I raise Label 2 all the way to the top and now I raise Label 3 on top of it now if I click on Race table 1 the green bit is going to be on top of the red bit but below the blue bit so Ray stable one there we go label 1 is on top of label 2 but below level 3. the above this argument would also work with lift I can run this again and we would have the very same outcome once again I don't really know what are two different methods for the same thing but choose whatever you want it really is up to you a really important aspect of tkinter is toggling widgets what that means in practice is something like this we have a label and I want to talk that meaning I'm switching it on or off or visible or invisible whatever you want to call it this is actually quite simple if you know what you are doing in tkinder so let's talk about it inside of tikinta you don't really hide or show widgets instead what you're doing is you are removing or adding widgets to the layout chances are you already know how to add widgets this either happens with pack Grid or place but all of these methods also have the opposite for example for the pack method we have pack for get and this one does the opposite of the pack method it removes a widget all of this can also be done while the app is running and if you know how to use it you can hide and show witches quite easily I already have a couple of lines of code ready I am importing decanter I am creating a window and I'm running the entire thing so this is what we're getting but now we have to cover a couple of things for every single layout method we have to look at the actual layout method and how to do the opposite and let's get started with the place method this one I think is the easiest one to understand we first of all have to create a button let me call it ttk and button with the window being the parent and the text is going to be toggle label finally this one is going to get a command that I'm going to call toggle label place we're going to create this one right away under the place method so all of this is a bit easier to put together toggle Place method no need for parameters and for now I'm just going to add paths in here finally I want to add the button and let's use the place method for that since the button isn't going to do anything besides being clicked on the position here doesn't matter let's go with X being 100 and Y being 50. so now if I run the entire thing in the top left we have a button although I guess it's a bit too far down let's change this to 10 and 10. like so now we have a button in the top left that I can click on but nothing's going to happen to make something happen we need another widget I'm going to call this one label but it's going to work with any widget and in here I want to create TDK label with the parent being the window and the text is going to be a label and this label I want to place in the center of the window which means label dot Place relative X is going to be 0.5 relative Y is going to be 0.5 and the anchor is going to be the center let me fix my typo really quick and if I run this now in the middle of the window we have a label what I now want to do is if I click on toggle label this label should ever be hidden or shown I'm going to start by simply making this label disappear this is going to happen inside of this function to achieve that all we have to do is get the label and then Place forget this is going to remove this label here and well then we can't see it anymore so now if I click on toggle label the label disappears although the problem is if I click on it again nothing is going to happen because well we can only really forget it once this doesn't work a second time but the basic logic is in place here we have a widget that's visible in the first place and then we make it invisible but to make this actually interesting we want to have a proper toggle functionality and for that I want to create another variable I call this one label visibility by default this one is simply a Boolean value of true this I want to update inside of this function which means this needs to be a global variable so Global label visibility I should probably rename this a tiny bit let's call it label Visa bill that is making much more sense and essentially what I want to do if I'm clicking this button I'm going to check if the label is visible or not which means if label visible if that is the case I want to forget this label besides that I also want to get label visible and set it to volts once I have that I can create an else statement and now if I'm running this function here I know the label is not visible because label visible is false if that is the case I want to set label visible back to True finally all I have to do is run this method here again I am reattaching the label to the window or to any kind of container this would also work with frames which means I can simply copy this entire line here paste it in there and now if I run the entire thing I can click on toggle label the label disappears and I can click on it multiple times and now we make it appear or disappear and this is basically all you need to toggle a label or literally any kind of widget so for example this label here could also be a button now we have a button and this one would still work just fine although I'm going to keep it being a label and this is the basic logic that you have to understand besides place we also have grid so let's work with this one next I now want to work on the grid for this one first of all we have to create a couple of rows and columns which means I want to get my window and run column configure I want to have two rows zero and one that have the same weight let's go with one and I also want to set Yoon form to a so they are the same size like so besides that I am duplicating the entire line and change the column to a row although I only want to have a single row so this isn't going to be a tuple it's just going to be a zero with that in place I want to create a label and a button exactly the same thing I have done here as a matter of fact I'm going to copy all of this and paste it in here and uncomment the entire thing the button is going to be basically identical the only thing that's going to change is I'm not going to use place instead I'm going to use grid the button is going to be in column 0 and row 0. for the label I still have label visible being set to true I am creating a label but I'm not using the place method to place it instead I'm going to use grid the label I'm going to place in column being 1 and row being 0. if I run the entire thing now we are getting an error that we are using a function that doesn't exist right now let me remove it and run the entire thing again there we go we have toggle label right next to elabel although nothing is going to happen if I click on the button for that we have to create the command once again this one is going to be toggle label except now we're using grid the basic logic here is going to be the same as in place but let's create the function itself Define I called this one toggle label grid only for parameters and then here we are going to do the same thing we have done up here but for good practice let's do it from scratch and if you want to practice yourself try to do all of this yourself all you need here are grid and grid forget but in my case I want to start by creating Global label visible that way we can change this variable here from inside of the function if the label is visible I want to get my label and I want to run grid underscore forget besides that I want to set label visible to true this we can already test if I run the entire thing now and I click on toggle label the label disappears although if I click on it a second time nothing is going to happen that is the functionality we have to work on right away so else I want to set label visible back to true and then I have to run this grid method here one more time so I can just copy it paste it in here and now this should be working let's try if I now click on toggle label the label disappears if I click again nothing is going to happen so something went wrong I can already see the problem this label visible here should be false now let's try it again if I click on toggle it disappears if I click again it reappears this is looking really good cool with that we have the grid method and this basically works in the same way the displays method here is going to work and both of those are working really well because the layout isn't really affected by other widgets so where we are placing the label isn't really affected by the placement of the button each of those either have their unique positions like in place or their own unique cells like in the grid this is going to be different for the final layout method and this is going to be for pack for this one once again I want to copy the button and the label place them in here and uncomment them and those I simply want to place using the pack method also let me get rid of this command here so we're not going to take an error if I run the typing now we get the two widgets right next to each other what is really important to understand here is that the position of this label is influenced by this button the pack method always places widgets on top of each other and this is kind of a problem when we're using pack for get let me demonstrate and then you're going to see how this is going to work although I want to make some changes this button I want to have all the way at the bottom of the window so I'm going to pack it after the label and the label I am going to set to expand to cover the entire window if I run the entire thing now the label is basically in the middle of the window and the button is all the way at the bottom now we can work with this if I press on the button I want to run a function which means I have to use command again and I want to toggle label pack for this we have to create another function toggle label pack once again no need for parameters and in here I can already demonstrate what the problem is going to be if I simply run label and pack forget try to predict what is going to happen but well let me run the entire thing and now if I click on toggle label the button is going to be all the way at the top the reason being that originally the label covered all of this space and then the button was placed at the bottom here but since we got rid of the label this entire thing here disappeared and the button is now all the way at the top and this is going to be a problem that we have to account for and accounting for that is going to be your exercise what I want you guys to do is to fix the code so the button stays at the bottom pause the video now and try to figure this one out as a tip here try to use a widget that is by default invisible righty this solution here is if I run the entire thing again by default we have two widgets we have a label and we have a button with the label taking up this entire space here what I want to do is create a third widget and this one is going to cover the same space as the label although it is not going to have any content this could either be a frame or a label without any text both would be fine in my case I'm going to work with a frame and this Frame is only going to be placed when the label is invisible that way the button has something to be stacked below but let's Implement all of this step by step first of all I want to create another widget this is going to be the frame this is simply going to be ttk and frame and the parent here is going to be the window we're not going to place this one right away instead inside of the toggle label pack function I want to once again set the label visible as a global variable and now I can use the if statement again if the label is visible then I want to pack forget the label I also have to set label visible to false but now what I also want to do is to get the frame and pack this one on top of that since the frame is supposed to take up the entire space that the label has taken I want to set expand to true so expand is going to be true and now if I run this I can click on toggle label and we have the same problem and the issue here right now is when we are placing the widgets this label Here Comes as number one and then we are placing the button number two so in the original widget we had the label something like this position and then we add the button below this position here and the button moved all the way to the top once removed this label here the problem now is that once we're adding this frame with the pack method we are adding it below the button so the label is going to be here which for our purposes is not going to be useful we have to find some kind of method to place the frame on top of the button and this we can do quite easily because the pack method has another useful feature that is called B4 we can tell the frame method to pack a widget before a certain other widget the widget we want to pack the frame before is the button and now if I run this again I can click on toggle label and the button stays all the way at the bottom the reason for it is that now we have created this Frame here and packed it before the button so it is going to be in this position if you play around with this this should become fairly obvious although most of the time when you're hiding or showing widgets you want to use either place or a grid because this tends to get a tiny bit more complicated but let's finish it and then we can wrap up this video I want to have else I first of all want to get the frame again and now run pack or get this Frame should only be there when the label is not visible once the label is visible it is going to take up the entire space of this Frame which means I also have to get the label back which I'm doing with the pack method and this one needs expand being true and also we have to use before again I want to have this labeled before the button and finally label visible is going to be true let's run this one and now if I click on toggle label this one is working really good so with that we can toggle widgets hope that was helpful in this video we are going to combine the different layout methods in tkinter what we are going to make is going to look something like this here we have a fairly complex UI that also scales along with the window this is what we're going to create and for that we're going to use Place pack and grid they all work together really well for all of this later on when we can style things this is going to look actually good but we are definitely making progress and before I jump in I do want to talk about the layout here it's quite important to understand on the most fundamental level we are separating the UI into two parts which is going to be two frames one is here and one is here both of those are placed with the place method inside of the left container this one here we are mostly using the grid method for example here's one row here's another row and here's a row at the end and then we have a couple of columns they are three in total you can see this quite well with the sliders they are on the left and on the right column although that being said in the bottom there is one frame that covers the entire width of the column inside of that one we are using the pack method to place these two check boxes finally the entry widget here at the bottom it's kind of hard to see this one is placed using the place method that way it's always at the bottom in the middle after that we have this entire area for this one I am using the pack method to create these two areas with each area being one frame and inside of the frame we are creating another directional layout that is just going to contain a label and a button I already have a few lines of code and I realized the title I didn't change from grid this should be combined layout but other than that we have a window that's 600 by 600 pixels although there's one thing I already want to do and that is I want to get my window and set a minimum size like so the minimum size should be 600 by 600 that way the window cannot be too small which would end up looking very strange once we have that we can start by creating the main layout widgets I call them for this one I have a menu frame and I have a main frame both of those are going to be ttk and frame with the parent being the window those two I now have to place and this I do let me add another comment Main Place layout I'm going to use the place method to place these two frames for example I want to have the menu frame I want to use place and now I have to specify an X position a y position a width and a height since I want a menu frame always to be on the left side x is going to be 0 and Y is also going to be 0. you could use relative values here but since we are using 0 it really doesn't matter it's going to give you the same result although for the width I do want to get the relative width this is going to be 0.3 in my case and finally for the height I want to have a relative height that is going to be 1. if I run this now we can't see anything because frames by themselves are invisible although we can make this visible by creating a ttk label with the parent being the menu frame and this one is going to have a background of red this I want to pack right away and in here I'm going to set expand to true and fail to both if I run this now we can see the entire area of the menu frame with that we can create the Mainframe and the Mainframe is going to take up the entire remaining space which means for place I want to set e relative X position and this one is going to be 0.3 I know I have to use 0.3 because the width of the menu is also 0.3 that way those two start on the same point the Y position though is still going to be zero both of the widgets are supposed to start on the top of the window after that I want to have a relative width and this is going to be 0.7 the number here should be obvious with the width and the height we have a total number of one so we are covering the entire rest of the window finally I want to have a relative height and this one is going to be 1. to visualize this I want to copy the label and change the background color to yellow and the master is going to be the main brain let's try this one now and there we go we have covered the entire area of the window I can also resize this and this is looking pretty good I guess if you make the window too large the left side is going to become quite large but I'm not going to worry too much about it let me comment out those two lines I'm going to reuse them in a bit for some debugging just to see what we are doing next up I want to create the menu layout widgets I guess we could just call this menu widgets for those I have to create quite a few different widgets to save some time let me just copy them in we have to create all of these widgets we have three buttons button one button two and button three then we have two sliders slider one and slider two then we have a toggle frame and inside of this toggle frame we have two toggles toggle one and toggle two both of the toggles are just going to be check buttons I guess just to get started I can comment out the toggle frame so we only have a couple of buttons and a couple of Sliders these I want to place now now I want to create the menu layout since I want the menu to have the grid layout I have to create the columns and the rows which I Do by getting my menu frame and then creating column configure I want to have three columns which means I'm going to create a tuple with 0 1 and 2. the weight I'm going to set to 1. besides that I want to create a row configure and I want to have three and four rows in total all of which have the weight of one once I have that I can actually place things for example I can get menu button one and I want to use the grid method the button here should be in row zero column 0 as well and let's just see what we get we get an error because I have made a typo this should be column configure let's try it now and there we go we can see button one in the top left the button doesn't cover the entire area for that we are going to need the sticky argument and I want a button to stick to the north south west and east of the container or the cell and now if I run this we have button one in the top left finally I want this button one to be a tiny bit wider for that I'm going to set the column span to two it's going to be very hard to see right now but this button is now going to span two columns once I have that I can duplicate the line and now I want to place button 2. this button is going to be on row 0 but on column 2. it is only going to span one column though and I want to stick the widget to all four sides of the cell let's run this one now and there we go we have button one and button two with button one being much wider than button two if I expand the window you can see this much better to really make these columns and rows consistent I want to add the uniform argument uniform and I'm going to set the argument here to a it doesn't really matter what it is as long as those two identical strings now if I run this we can actually see that button one is twice as wide as button two that looks much better after that I want to place menu button three this is again going to use the grid method I want to set the row to 1 and the column to zero column span is going to be free and sticky is going to be north south east and west with that we are creating a button that spans the entire second row the result is going to be three buttons in this kind of layout next up I want to place the sliders these two sliders here both already have the orientation of vertical that's why they're going up and down and just to demonstrate I want to have the sliders here and here which means I want to get my menu slider 1 and I want to use the grid method again the row should be number two here and column is going to be zero I want the row span to be 2. and finally I want to set sticky to all four sides so north south east and west running this now gives me one of the sliders although I don't like how close this is to the buttons to account for that I want to set pad y to let's say 20 pixels and now we have a bit of a distance between the two which I think looks much better this I can now duplicate because I want to place slider 2. or this one I want to have column two and Row 2 can stay the same in fact all of the other arguments can also remain identical if I run this now we have both of the sliders this is looking really good with that we can place a slightly more complicated layout and that is the toggle layout the one I have created here and commented out for now this one is going to be one frame and the frame consists two toggle or two check buttons to be more specific in terms of my layout though I can work with these separately for example I first of all want to get my toggle frame and use the grid method to place it I want this one to be in row number four and the column is going to be zero although I want this frame to span the entire width of the container so column span is going to be free what I also shouldn't forget is I want to set this to Sticky with north south east and west just to be sure and if I run this now we can't see anything the reason is again frames are invisible we can use the ttk label again I created earlier I now want to set the toggle frame as the master run this again and there we can see we are covering the entire bottom bit so I want to comment this out again and now I want to use this area to place these two toggle buttons for that I am going to use the pack method I want to get my menu toggle one and pack the entire thing since I want both of these toggles next to each other I want to set this side to left and I want to set expand to Rue this line I can now duplicate and change toggle 1 to toggle 2. and let's see what we get that is looking really good we have both of the toggles right next to each other I hope here you can see how it is really easy to combine different kinds of layouts we have created the main layout using the place method then we have created a grid inside of one of the frames and inside of this grid we have created another frame with the pack method that way using containers gives you a ton of power finally what I want to do is I want to place the entry let me call it entry layout for this entry this entry doesn't exist right now actually I want to create it when I'm importing all of the widgets here I want to create an entry widget and this I do with ttk and entry the parent is going to be the menu frame this entry I now want to place using the place method since I want this entry widget to be in the middle at the bottom I want to use relative X being 0.5 then relative Y is going to be 0.95 and I want to set the relative width to 0.9 if I run this now we get something slightly weird or well if you understand place this should be familiar right now we are placing the top left point and this one is right in the center of the container right here the reason we get that is because we haven't update the anchor for that we have the anchor argument and I want to place the center of this entry widget let's try it now and this is looking much better this entry widget is now always going to be all the way on the bottom of this container you could have also used another row inside of row configure to place the entry widget using the grid method although in my case I just want to demonstrate that you can combine different layout methods although that has its limits you couldn't combine a grid and a pack method for example if I wanted to comment out this one here and use entry dot pack without any arguments run this we're getting an error the error message we get is cannot use geometry manager with pack inside the reason is we already have the grid method in here this though only applies to entry place is perfectly fine ready next up we can create the main layout unfortunately for that we need a few more widgets so let me add another section called main widgets and I'm going to copy in the widgets I am going to need like so I have one more frame that I called entry frame one inside of this Frame we have a label and a button alt label one and button one both are super super simple the one notable feature here is that both of them have the parent or the Masters entry frame one this one here this we're doing two times one time here and one time here entry Frame 2 main level 2 and button two are basically identical to the first one which means what I want to do if I run the entire thing again over this entire space here I want to use the pack method to create two large areas one could look like this and one is going to look like this both of these are going to be frames inside of each frame we are going to place the label and then we are going to place the button which means we have to get started by placing entry 1 and entry 2. for that I want to get entry one and use the pack method since I want both of these frames next to each other I want to set the side to left other than that I want to set expand to true so we are covering the entire horizontal space and I want to set fill to both this I can now duplicate and set entry 1 to entry 2. all of the arguments though can stay identical this if I run this again is not going to be visible because once again frames are invisible but I can once again use these two labels to make all of this visible the master for the first one is going to be entry frame 1 and the master for the second one is going to be entry frame 2. if I run this now this is looking pretty good although I do want to have some padding between the two I want to create pad X I went with 20 here and I want to create pad Y which I also set to 20. now if I run this again we have a bit of padding around them ready with that finally I can get rid of these two labels at the end and instead place all of these labels and buttons I'm going to start with main label one the side is going to be the top since that is the default argument I can just leave this empty although I do have to set expand to true and Bill to both this line I can duplicate again because now I want to place main button one this one up here this is also going to get expand true and fill both let's try it actually there we can see we have the label and the button what I don't like is that those two are right next to each other to account for that I'm going to give the button pad y of 10 pixels now we have a tiny bit of space between the two with that all I have to do is copy all of this duplicate it and I can just change main label one to two and Main button one to two the result is going to look like this and with that we have a fairly complicated layout that is well working quite well obviously we have no functionality but in terms of layouts this is basically as complex as taking the widgets are going to be now that being said all of this is still not particularly manageable because we have a ton of different sections and this isn't Pleasant to work with but all of this is going to be much easier managed when we are using classes and this is going to be the next video but if you want to challenge yourself a really good exercise could be to convert all of this to a classbased approach see if we can figure this one out although if you can't do it don't worry too much about it I'm going to cover all of this in the next video I'll guess I'll see you there let's talk about using classes in tkinter and what we are going to make is going to look something like this this is the same layout we have seen on the last part except now we are using classes to organize all of this which is making the entire app significantly more manageable let's talk about it and then we can Implement all of this the most important thing that you have to understand is that we are basically always taking some kind of widget usually a frame but it doesn't have to be and then we're adding widgets to this Frame and then in the end we are placing this Frame somewhere on the window that way we can organize lots of widgets very very easily if you understand basic tkinter this shouldn't be too difficult to implement although to make all of this work let me show you my setup here I have two python files open on the left side we have classes dot Pi this is what I'm going to work in on the right side we have the previous code from the last video this is the same layout or the same app except that we are not using any classes so what we're going to do in this video is convert all of this into class based approach that way I can switch between the two and illustrate what's going on now first of all we have to import the basics this I can just copy straight away I want to import tkin to SDK and I also want to have ttk now that we have that I want to create a class I'm going to call this app but you can name this whatever you want this app is going to become the window essentially this bit here is what we have to turn into a class the really important thing here that might be a little bit complicated is that this app is going to inherit from tk.tk which means that the app here is going to be the main window let me implement it straight away this app is supposed to inherit from TK dot TK in the function based approach this one here we have stored this object inside of the window variable in the classbased approach we are storing the object itself once we have that I want to call a Dunder init method for now this one just needs self and nothing else in here there's one really important thing that we have to do before anything else and that is to call Super and thunder in it this ensures that this TK functionality works properly although besides that we don't have to add any arguments so this one can stay as it is with these lines of code we basically have replicated this one line of code here so far we have just become less efficient but what we can do now is get self and for example set the title the title could be something like class based app this would be the equivalent of this line here let me expand it a tiny bit like so in the function based approach we got the object which we called window and then we called the title method on it this we can simplify here a tiny bit because the object itself is well self and we can still call the method on it because we inherited the entire object and this is one method of it to illustrate how all of this is going to work let me go all the way down in the functional approach and run window.main Loop in the classbased approach this would be self dot main Loop without any arguments with that approach we can simply create an instance of this object and run it and if I execute the entire code now we can see we have a window that also has the same title class based approach there you can see it better although right now our app is one class that is a lot easier to manage not for now but it is going to be much easier so besides that I want to also duplicate these two bits here which means inside of window I want to get self and I want to set the geometry of this class or this app to duplicate this I want to have the same Dimension 600 by 600. I can run this again and there we go we have a larger window the same I can do if I duplicate this line I can set the minimum size here for this one we just want two numbers with 600 and 600. that way if I run this again I cannot make the app smaller than 600 by 600. and with that we have copied all of this here to set up our window although I do want to make some minor changes and that is I want to set the title and the geometry from the arguments that we pass into the class when we create the instance of it which means inside of app I want to pass in a title let me call it a class based app and then I want to add a tuple with the with and the height which in my case is 600 by 600. which means I have to update all of this a tiny bit to account for these arguments here which I think could be a fairly good exercise for you try to update the code to account for these arguments most of you now and see if you can figure this one out first of all we have to add two more parameters to a niche I want to have a title and I want to have let's call it size the title is very easy to change because this one is just a string which means inside of title I can pass in the title the geometry is going to be a tiny bit more difficult although not very much we basically have to figure out how to turn this Tuple into a string in my case I am using an F string which means I want to add an F in here and the first argument is going to be size and zero the second one is then going to be size and one and now we should be good to go I guess one more thing that we could be doing is right now minimum size is static we can also update this one although we would use the same numbers we have used with geometry so size 0 and size 1. which means if I run this now we cannot see any difference although what I can do is change these numbers let's say to 200 and 400 and now we get a different kind of window although I don't actually want to do that and I think with that you can already see some advantages with just one line of code we can call the entire window and pass arguments into it so when we actually use the app this one is much easier to understand than these four lines here and this is only going to become more advanced for the next bit I want to work on the menu let me show this again here's the app what I want to work on is the left side this bit here in the original code I move this to the side we have a menu the menu is all of this bit here a couple of widgets all of those are inside of a menu frame this menu frame here or rather we are creating it here we are placing it here and then we're adding widgets here on top of that further down there we are adding the layout of the widgets further down here which all things combined is really annoying to manage we basically have a huge amount of code that is really really disorganized this I can change very easily by creating another class that I want to call menu this menu is going to inherit from ttk and frame basically what we are going to start with is we are going to recreate this Frame here except now we are not storing ttk frame inside of a variable instead we are creating a whole new object inside of this like with the app we have to create a Dunder init method this one is going to need itself and on top of that we are also going to need a parent or a master because inside of the init method I want to call the super Thunder init method and this one is going to need one argument and that is the master or the parent the way you have to understand this is that this init method is basically the same as calling the object by itself and for that we always have to pass in the master which in this case is going to be the window with that we have basically created another frame this we can now use inside of the app the way this is going to work let me add a couple of comments here I want to create widgets and besides that I have the main setup all the way at the bottom I am running the app the widgets right now we only have self dot menu which is going to be the menu although don't forget when we are calling this menu here we have to pass in the parent and this could be an interesting exercise for you try to figure out what the parent is the parent in this instance is self because the app is tk.tk what we called window in the functional approach and in the functional approach we sort all of this inside of the window variable and passed this inside of the frame in the classbased approach let me move this a bit to the side app itself is the window so this app we are passing into the menu that way this menu is going to have this app as the master although if I run all of this we can't really see very much there are two reasons for it number one this menu right now is just a frame and frames are invisible although even if they were visible we couldn't see them because we're not placing this Frame anywhere on the app right now there's a parent or a master but we don't actually position the frame inside of the parent which means there are two things we have to work on number one I want to create a label that actually illustrates where the menu is for that I simply want to create a ttk and label like so the parent here once again has to be self I don't actually want to have text in there instead what I want is a background this one can be read right now right after creating this label I want to use the pack method and in here I want to set expand to true and fill to both that way this label is going to fill the entire frame with a red color and let me move this a bit further to the right so we can see the entire thing right with that we should be having a menu that's at least visible although if I run this again we still can't see anything because we have to place the frame itself and this can happen inside of this class as well because all we have to do is get self and now we can run for example pack or we could run grid we could run whatever we want to keep it simple for now I want to run the pack method if I run this now we can see all the way in the top we have a tiny red bar this we can set to expand being true and we can set fill to both and now if I run this this Frame is covering the entire window although in the original if I expand this a tiny bit more when we are placing the menu frame this happens here we are using the place method with all of these arguments meaning I can just copy them move this a bit further to the site again and now instead of Peg call the place method this one has X being 0 and Y being zero so menu is always on the left side it covers 30 percent of the width of the window and it covers the entire height I can run this again and there we go now we have the same position for the menu why this approach is really useful is I can now minimize the menu and inside of the app this is what I'm actually working with the entire menu is simply one entry I don't have to worry about all of these different Snippets that are in different places the entire menu is in one spot which makes it much easier to work with although right now the menu doesn't have any content so we have to work a bit more on this and let me move this a bit further to the right there we go inside of the menu I want to create all of these menu widgets these ones here for that I'm going to create a separate method I'm going to call this one Define create widgets this one itself and nothing else and in here I want to create all of these widgets so let me copy them we have menu button one two and three we have two sliders we have a toggle frame this one is a frame in itself and this one has two children menu toggle one and two and finally we have a frame all of these I want to copy and paste them in here and also fix the indentations there's one more change that we do have to make and that is that all of these buttons and Sliders don't have a menu frame as the parent instead I want to change all of the menu frame to self because all of these buttons should have this many frame as the parent with the exception of menu toggle 1 and menu toggle 2 because those two are supposed to be a child of the toggle frame meaning those we don't actually have to change besides that the entry I forgot to change this isn't many framed this should be self with that all I have to do is call this method self dot create widgets and now I can run this and we can't see anything again this happens because we're only creating widgets we're not placing them on this Frame for that I want to create another method I guess we can call this one create layout no custom parameters again and what I want to do now is replicate basically this here including this one as well as you can see in here we are using the grid method to place all of these elements which means first of all what we have to do a bit further up we have to create the grid for the menu this I have done here with these two lines of code so let me start by copying those two and once again I have to fix the indentation I move this thing a bit further to the side so we can see what's going on I want to first of all create the grid for this I can minimize the create widgets method I want to get this Frame here and I want to set columns and rows on this which means instead of the menu frame I want to get self although the rest can stay identical which means next up I can place the widgets for this once again I can copy all the stuff I have done here all of this and I can place it in here once again we have to fix some indentations like so and now we can work with this and now we have a tiny problem all of these widgets are only available inside of create widgets they are in the local scope of this method inside of here which means I couldn't access them inside of this create layout method I guess there are two ways you could approach this problem number one you could change all of these variables to attributes so for example you would turn this variable into an attribute using self and then down here you would use self.entry.place that would be one approach although in my case I don't want to go with that one so let me undo everything instead I'm going to be a tiny bit lazy here copy all of this and then place it inside of create widgets that way we are doing all of this inside of one method and we are staying within the same scope not the cleanest approach and if you had a more complex app this would probably be something you want to work on more but for this simple app this is totally fine at the very least let me add some comments here I want to create the widgets then I want to create a grid and then I want to place the widgets and with that I want to get rid of this TDK label here because we don't need it anymore now I can run the entire thing and there we go we have the entire menu still works just as before except now all of this is inside of one class and this finishes the menu which means I can minimize this and now we can see menu is simply one entry that is much easier to work with and if we wanted to work with it we could simply open this and then change all of this and do whatever change we want to make which makes maintaining all of this much easier so in comparison here's the original we had just code for the menu here here here here here here and this was very difficult to separate from the main widget for example so with that we are making some good progress next up I want to create main if I run this again main is this main area here this one is actually really simple because what we want to do again is we have main.frame here just another frame this one we are putting on the window using the place method again so this we can start on right away I want to create another class and this one I called Main once again this has to inherit from ttk dot frame and let me move this a tiny bit further to the side in here like for the menu we are going to need a Dunder init method that gets self and it gets apparent spelled correctly as well like so and don't forget super underscore underscore init and pass in the parent in here this is the same thing we have done for the menu so if I open the init method of the menu we had all of this next up to actually see the main menu I want to run the place method again although I can copy this from the original video we are calling this place method here which means inside of the init method of main I want to call self and place and then place the widget in this position to make sure that we can't see this I want to once again create ttk label with self as the parent with background being red and with the pack method setting expand to true and fill to both with that I can simply create this main method inside of the app right below the menu itself let's call it main is going to be Main with self as the parent and if I run this now we can see the main frame let me minimize the menu and get rid of TDK label here we definitely know this is going to work which means with that let me show the app again we can start working on the actual entries these things here this one once again is going to be one frame inside of the frame we have one label with a background and then we have a button below or that I want to add a tiny bit more code inside of main I first of all want to create a frame so I can just call it frame and this is going to be ttk and frame the parent here is going to be self inside of this Frame I want to have a label and a button so let me create a label variable then I want to use ttk and label with the frame being the parent text is going to be let's say test one and the background color is going to be red after that I want to create a button and this is going to be ttk and button with the frame as the parent text is going to be I call this one test one as well although let's call it button that Pro makes a bit more sense these two buttons we now have to get inside of the frame and this Frame we have to place inside of the Mainframe let's start with putting these two widgets inside of the frame for that I'm going to use the pack method so label dot pack expand should be true and fill should be both yes I can now duplicate because the button is going to work in the same way with the only difference that the button has padding y being 10 pixels finally I want to get the frame and pack this one as well although for this one I want to set the site to left actually I can copy all of this from the original in here we are placing all of this if I find it really quick we are placing the main layout here we have entry frame one and entry frame two all of this I want to copy like so so let me move all of this to the site again and I want to use this pack method with all of these arguments and with that this should be working let's try now and there we go we can see the entry inside of the main frame we are making a lot of progress now this is starting to become a tiny bit messy because this Frame here could be its very own class and this incidentally is going to become your exercise I want you guys to get this Frame here and turn it into a separate class along with all of its children so it should be a frame class with a label and a button on top of that I want you guys to set the color the label and the button via the arguments which means you should be able to use the init method of this new class to set the text of the label the text of the button and the background of the label and pause the video now and try to figure this one out yourself let's get started first of all I want to create a new class and this one I called entry as always we have to inherit from ttk and frame inside of that we need the dunder init method in here we need self as always then we need a parent then we need three more arguments we need the label text we need the button text and we need to label background these three arguments we need to cover the second part of the exercise with that inside of the init method don't forget to call this super init method and then here you want to add the parent this entry frame here is going to be this Frame which means inside of it we can do all of this as a matter of fact let me cut out all of this and delete the frame and instead I want to paste all of these things in here now we have a label a button we are placing the label and the button and then we are packing the frame although for this to work we have to make some changes first of all label and button have not the frame as the parent instead self is the parent now or the layout this can stay exactly as it was before although for the frame itself we don't want to pack the frame we want to pack self because remember self is a frame that we can pack on the parent with that we can already create a entry frame in here the one argument we have to pass in here for now is the self although all the other arguments we are not using right now so let me simply pass in one two and three it doesn't really matter right now I can run this now and there we go we have the very same result and this is actually super useful because now I can duplicate this entry widget run this again and now we have two entry fields or frames I can do this multiple times and there we go we have lots of different fields in my case though I only want to have two but I hope you understand the principle here although next up we have to actually cover these three parameters and they are very easy to work with because all of them are going to be a string the label text is going to be the text for the label this one here which means in there I want to pass in the label text the same thing for the button I don't want to have a string button instead I want to have the button text finally let me add the comma here for the background we don't want to have hardcoded red instead we want to have the label background with that I now have to pass in proper arguments in here let's say for entry 1 I want to have entry one then for the button I want to have button one spelled correctly and for the background I want to go with green let me duplicate all of these and paste them into the second entry and let's call this entry two button to and for the color let's go with blue let's try this again and there we go now we have widgets that work perfectly fine and now I hope you can see the value of this approach because this makes it really easy to create lots of widgets that are selfcontained for example for the entry we are only having one entry here but this entry contains a huge amount of stuff if I compare this to the original functional approach we created the frame here we created some widgets here and then we could set the layout here and this was kind of messy because in there we had the second frame and all of this was really hard to follow whereas in this approach we simply have one frame that contains it all and we are placing it wherever we need it and with that we have the entire app that is much more manageable because now we have logical parts to it that we can work with whenever we need and this is what you want to use most of the time as soon as you have any kind of complexity in your app this approach is vastly Superior in this part I want to talk about a really important part of T Kinder and that is creating custom components what that means is to use tickhinder or literally any GUI framework efficiently you need to be able to create your own components for example when we use the classes in the last bit we have created a couple of custom widgets one example was the entry widget what we created looked like this and what is really important here is that this entire thing was one frame that we customized so we gave it a label with a background and a button and once we have that we could create this multiple times so we had another label and another button besides that we also created this entire side panel as a separate widget I suppose I should look at all of this in code straight away here's the code of what we just covered before and all of this gives us this kind of app the really important thing you have to understand here is that we are creating custom widgets this entry here inherits from frame and adds more stuff to it so this Frame here this we can do multiple times we have one frame and we have another frame this one here both of these were very easily created we did all of that inside of Main in here we can simply create one entry and another entry I could duplicate this again add entry free button free and for the color I could go with green if I run this thing now we have a third entry widget with this kind of system we can create more complex layouts fairly easily and also keep them more manageable which is why it is really important that you understand how to use all of this I'm going to practice it in this video as well but definitely play around with this in your own time although more importantly for this video what I also want to cover is that there are two ways to create custom components the first one we have already seen is by using classes inside of a class you inherit a widget and you add custom parts to it this can create really complex layouts but the downside is if you end up with too many small bits you might have a ton of classes which would be a bit annoying to manage to account for that we have the second approach and that is a more functional approach all we are doing in here is we are creating a widget inside of a function and then return the widget this is a bit more limited in terms of what we can do but the upside is we can create lots of small components inside of a class basically what you want to do for any more complex component you want to use a class but inside of this more complex component you want to use the functional approach to create simpler bits all of this is going to make much more sense when we actually make the app speaking of which what we're going to make is going to look something like this in here we have a couple of custom components the most important one is each of those rows is One widget and all of those are made using classes inside of this we have three columns we have a label we have a button and then we have this kind of thing with an entry and a button for this final bit here I want to use the functional approach for the simple reason that this isn't particularly complicated we simply have a frame with two widgets inside it wouldn't really Merit using a whole class but I also don't want to create too much of a layout inside of the class itself in the init method but well let's jump into the code and let's have a look at all of this once again I already have a couple of lines of code ready if I execute the entire thing we have a basic window with a title but not much else with that we have to figure out how to create this kind of thing what I want to start with is that these rows are always one widget and this I want to create by using a class which means I want to get started by creating a class and this I want to call segment I guess is a good name this has to inherit from ttk dot brain inside of this I want to create a Dunder init method this one itself we need a parent on top of that we need a label text and we are going to need a button text that way I can customize the entire thing quite a bit easier for reference once again inside of each segment I have a label and I have a button once I have that I can actually create the widget itself for that we first of all have to run this super init method and set the master to the parent with that we basically have a frame and essentially what I want to do inside of the global scope I want to create all of the widgets the important Point here is I only want to call the segment and T Kinder almost specifically the class itself should take care of everything else all I want to pass inside of the segment is the parent which is the window that I want to have a label text let's go with label and I want to have a button text button and that is it I don't want to do anything else inside of the global scope the entire logic of this widget should be inside of this segment that way we have one component that takes care of everything and we don't have to think about it too much what this allows us to do is duplicate this a couple of times and we have different widgets that can do different things for example in this case we would have different labels let's say button and click or hello and test it doesn't really matter what you place in here the important thing that you have to understand is that we are creating a custom component that contains a huge amount of logic to get started in all of this inside of the segment class I want to create a grid layout for that I want to get self and row configure although for this one I want to have row 0 with a weight of one and that's basically it although with that I can duplicate the entire thing change the row to a column instead of a zero I want to have 0 1 and 2. I want to have three columns that all have the same weight on top of that I also want to set uniform to a or it doesn't really matter what it is but with this all of the columns are going to have the same size almost specifically the same width inside of this I can now create a TDK label and I can create a ttk button both are going to need fairly similar arguments the first one is the parent that is going to be self besides that we also need text this text we already have because we have the label text and we have the button text for the label I want to have the label text or the button I want to have the button text after I have that I want to use the grid method to place both of the widgets the label is going to be in row 0 and column 0 as well all of this I can copy as well because the button is also going to be in row 0 but column is going to be one if I run the entire thing we can see that we well cannot see anything the reason for that is that this segment is not being placed on the window which means we have created a component but we are not placing it for that we need well a placement method and this once again we can do inside of the component itself all I have to do inside of the init method is self and then use one of the layout methods I'm going to go with pack with that we can see the different layouts although right now all of this looks a tiny bit weird so not ideal yet first of all I want to set this to expand being true and fill should be both now if I run this this is starting to look a little bit better although I need a few more widgets to make all of this look halfway decent that we can do very easily because to create more widgets all I have to do is duplicate this segment and we get more widgets although I'm going to change the text here so we can see a bit better what's going on I will just add random words in here it really doesn't matter what you add here it's just for illustration anyway let's say exit and now we have five different segments this still isn't terribly visible because there's so much white space in here the reason for that is that both of the label and the button only take up the minimum amount of space that they need to display the text that we can change by using this sticky argument and I want to set sticky to north south east and west now if I run this all of this starts to come together much better what you can also do is inside of this pack method set pad X to 10 pixels and Pat y should also be 10 pixels if everyone is now we have a tiny bit of white space between the widgets and that is basically it I don't want to repeat myself too much here but what we have done is we have created a custom component called segment and inside of the segment we have a ton of logic that way inside of the global scope this bit here we can simply create one component and this component creates something much more complex in the app just imagine if we didn't have this kind of setup we would have to create this code up here five different times and if we wanted to update any individual bit let's say this hello here we would have to go through a lot of code just to find this one part which would be really annoying to work with but in our setup here all of this is very easily manageable which is why you really have to understand this now this is one way to create this kind of layout system there is another way though what we have done for now is we have used a class based approach to organize our widgets but this we don't have to do we could also use a functional approach let's have a look at this one by translating our classbased approach to a functional one back in the app I want to all the way at the top create a function I'm going to call this one create segment this one is going to need three different arguments we need the parent we need a label text and we need a button text for the Keen it among you those are the same parameters we have used here we don't need self because we're not using a class inside of this function we are basically trying to recreate all of this and then return the result basically what that means is I want to create a frame which is just going to be ttk and frame at the end of the function I want to return that frame which essentially means that we are taking this Frame here except now we are keeping it by itself although first of all we have to set a master for the frame which is going to be the parent we are passing into the function this parent here next up we have to create the layout this grid layout here I suppose I could just copy the entire thing paste it in here and fix the white space we don't have self anymore instead we want to set the frame with rows and columns after that I want to create some widgets I suppose I should be a bit better here with the comments what we have done in the class based approach was also creating widgets that way all of this is a bit easier to read in my case I want to copy all of this and paste it inside of the functional approach now we have a ttk label and a ttk button although once again we don't have self anymore instead I want to parent them to the frame the frame we created up here with that we have the same thing we created inside of the segment here which means now that we are returning it we can simply use it which means all of this here I want to comment out and if I run this we can't see any widget anymore and let me minimize the class now you can see roughly the entire app instead of using a segment I want to create segment and for the arguments I have to get the parent the label text and the button text these three arguments if I run this now we still can't see anything because what we have done inside of this function is create a widget but we are not placing it this we could have done inside of the segment very easily because in here we could simply run self.pack this unfortunately we cannot do inside of the frame because we are returning the frame we couldn't place it right away although what we can do since this function here is returning a widget we can on it run a layout method like Pac for example and this pack could be expand true and fill both like so another runders we can see we have one widget although since we only have one all of this looks a bit weird but what I can do now is simply copy all of this let me add some white space uncomment it and instead of a segment I want to use my function create segment since we're using the same arguments all of this should still work also don't forget we have to add the pack method to all of them like so and now if I run this we have the same result although I did forget one thing and that is the padding for x and for y let me copy it from the segment class and paste it inside all of them so we get exactly the same result now if I run this we have exactly the same result and we have done all of this by using either a function or a class both would be fine in this instance because we are creating something fairly simple but once again I want to emphasize if you want to create more complex layouts having either something like this or something like this let me uncomment it is much easier to understand and to maintain than having a ton of widgets that you all create manually for future videos I am going to rely a lot more on custom components so this is an important thing to understand which means Let's do an exercise and I hope you can still keep up all we have to do is an exercise and then we are done what I want you guys to do is create a smaller widget inside of the segment class using a function or a method specifically inside of this segment class I want you guys to use a function to create another widget like we have done up here instead now don't use a function use a method inside of this class what you should be doing is create a container that has an entry field and a button stacked on top of each other the button should be set via the parameters and all of this should be inside of the third column of this segment as a reminder we are creating three columns and right now we are only using column 0 and column 1. at the end of this out of this should look something like this we have an entry field and we have a button for all of my buttons I use the text exercise but this should be more customizable pause the video now and try to figure this one out yourself alright let's get started I want to work inside of the segment again although first of all what I should do is comment out all of these functions because I only want to work with the segment class inside of this one I want to create a method let me call it create exercise box for this one we need two arguments we need self like for any method and then I want to have some text this is going to be the button text now inside of this method we have to create a frame like we have done up here with create segment we always start by creating a frame in this Frame we are returning at the end although this Frame while being ttk and frame has a parent of self or a master to be a bit more specific at the end of this method I want to return this Frame although before we are doing that I want to create a ttk entry this one is going to have the parent of frame and besides that I want to have a ttk button this one has frame as the parent but also text is going to be the text that we are getting from the parameters this text up here we are passing in here once we have that we have to place both of these widgets inside of the frame and this I want to do with the peg method since both of the widgets are supposed to be on top of each other I don't need a side but I do want to set expand to true and fail to both and that is all I need inside of this method with that I can minimize it now inside of the widgets I can call Self dot create exercise box and add the text in here for now let's go with exercise if I run the entire thing now we still can't see anything because once again I forgot that we have only created a widget we haven't placed it yet for that we need the grid layout method so grid I want to have a row 0 and column should be 2. on top of that I want to set sticky to north south east and west and that should cover it all meaning if I run this now here we have a pretty good looking result we have an entry field and we have an exercise button I hope you can see the value of this because now inside of this class when we are creating the widgets we have all of this in a fairly logical layout we are creating a label a button and then an exercise box now this exercise box could be a separate class that would be perfectly fine but since it is so simple it's only four lines of code you don't really have to do that it's kind of an Overkill which means in this case simply using a method to create something slightly more complex is perfectly fine and much easier to maintain although there's one more thing I do want to do and that is that right now we always use exercise for the text for the button but this I want to have a bit more customizable so when I'm creating this segment I want to have another parameter and that is going to be the exercise text this exercise text I'm going to pass into this function like so and now when I'm creating all of these segments I have to add one more argument let's go with test just to see if this is working and there we go now we have test for all of these buttons I could change this the first one could be test the next one could be something else then we have one two three we could also have an empty button or we could have end it doesn't really matter but now we have different kinds of text in here and everything is still very easily maintainable all of the customization happens in here and this is very easy to see and very easy to understand and if you want to make changes you have all of this contained inside of one class that is maintainable and very easy to work with a really important part of any app is responsive layout what that means is let me run the app that we are going to create it is going to look like this right now we have an app with a couple of items stacked on top of each other so far nothing special however if I increase the size of this widget we are at some point getting another kind of layout and if I go even further we have a different kind of layout which means depending on the size of the window we get different kinds of layout which is really important because I want the app to look good on basically any size and some layouts simply don't work on a certain kind of size for example if I make this a bit smaller again this kind of layout here only really works on very small windows while this one here would only really work on a white window so I have to create different kinds of layouts now that being said implementing all of this in tkinter isn't the easiest thing to do the reason for that is that tkinter doesn't have inbuilt tools to create responsive layouts which basically means that we cannot update an existing layout instead what we have to do is we have to create a separate layout for every Windows size or at least for the layouts that we want to create so for this example I have created three different layouts let me actually show you I think that's going to be useful here's the code that we are going to create over the course of this video all the important stuff is inside of the app class basically what you have to understand is that we have three methods one for create small layout create medium layout and create large layout inside of them we are simply creating a frame we are adding widgets to this Frame along with the layout method and then we are packing the frame also before that we are forgetting the previous frame that way if we go from the small layout to the medium layout we are not creating extra widgets the really important part of logic happens inside of another class this one is called size Notifier what this one is doing is it checks the size of our window order with to be more specific and if we reach a certain threshold like 300 or 600 or 1200 then this class is going to call the functions we are passing into it or the methods in this case which are going to be create small layout create medium layout or create large layout all you really have to understand is that we are creating three separate layouts and we are displaying each layout depending on the minimum size of the window that's all that's happening here as a matter of fact let's talk about it really quick what we are doing in the most basic sense we are setting different breaking points for the minimum width of a layout so for example if the width of the windows 300 we want to have a small layout if the width is 600 we want to have the medium layout and if the width is 1200 we want to have the large layout and whenever the window resizes we are checking the width and if the window is crossing a new threshold if that is the case we are building a new layout and for getting the previous layout that is literally the entire logic although to implement it we do need a couple of things the major difficulty that we actually have to face is in this step here by default we can use event binding to check when the window is resizing the problem is this event is going to run on every resizing of the window which is a problem for us because we only really want to check if the width crosses a certain threshold so for example we want to check if the width of the app roses 300 we do not care if it goes from 350 to 400 that is completely irrelevant to us we only care if we go from 299 to 300. that is the major difficulty that we have to implement the rest is actually fairly simple but I guess let's jump straight in and let's create all of this to get started all I have are the Imports for tkinder and ttk the reason for that is that all of the app is going to be handled by classes the most important one is the app class this one has to inherit from TK and TK inside of that I want to call the dunder init method with self and I also want to have a parameter for the start size should be fairly obvious what this one is doing inside of the init method I know what to create is super thunder in it method although this one doesn't need any arguments next up I want to create a title for the app which I called responsive layout after that I want to get the geometry of the app this one is going to set the starting size the starting size we are getting from the parameters this one is supposed to be a tuple with the width and the height this I have to convert into a string which I'm doing with an F string I want to get start size and the index number zero that is going to be the width then I want to do the same thing so start size except now I'm getting the first Index this is going to be the height once I have that I want to run self dot main Loop to actually run the app and this should be all we need to get started I can now create an instance of this app so app is app or the starting size I went with 400 by 300. if it runs now we have a basic window what I now have to figure out is how to get the size of this window when we are resizing it for that we need a certain kind of event before the main loop I want to self dot bind and event and the event we're looking for don't forget the smaller and greater sign what we're looking for is called configure this kind of event triggers every time a widget resizes or changes the position just to illustrate what's happening let me pass in a Lambda function don't forget the event all I want to do is print the event if I run this now you can already see in the bottom we have an event that is called configure this event gives us the X and the Y position of the window along with the width and the height so for example you can see right now we have a width and a height of 400 by 300 the exact same thing we have passed into the app on top of that if I am resizing the window you can see we get a different kind of width and height and if I change the position of the window we get a different X and Y position but now we do have a tiny bit of a problem or at least something to be aware of if I'm resizing the window again you can see for the width we get lots of different numbers let me try to find a Breaking Point what you can see in here we are running a new event on every change of the window and I got a width of 977 988 999 1005. and in just a bit I want to run a function to build a new layout when we are passing a certain kind of threshold for example our threshold could be 1000 pixels which means if we go from 999 to 1005 we want to build a new layout but only at this point if we go from 977 to 988 I do not want to build a new layout which means we have to add some code that we only Built a new layout if we are crossing a certain kind of threshold all of the logic I have put into a separate class this class I called size node TEF fire there's no need for inheritance and in here I want to have a Dunder init method when itself as always then I want to have the window which is going to be the main window or in our case this app here finally I want to have what I called a size dictionary for now don't worry about it I'll explain in just a second first of all I want to get self.window as an attribute which means self.window is going to be window next up I want to turn the size dictionary into an attribute as well size dictionary itself is going to be size dictionary the basic idea is that this size dictionary is going to have key value pairs like any dictionary the key is going to be the minimum size of the layout and then the value is going to be the function that creates this kind of layout let me implement it right away actually we're going to create an instance of this class inside of the app we don't have to store it in a variable so we can just create it straight away I want to have a size Notifier the window is going to be self and the size dictionary is going to be a dictionary I want to have for the key a minimum size which I set to 300. the associated value is going to be a method for example if our minimum width is 300 I want to create a small layout this one doesn't exist right now so let me create it right away I want to create a small layout we need self and nothing else for now so I don't get an error I'm going to add pass in here the code we are going to write inside of size Notifier really is just going to check if we are crossing this number and then we're going to call this function although to make this a bit more practical I want to have two different layouts at least for now I want to create one at 300 the small one and then I want to have at 600 pixels a medium layout this one doesn't exist right now as well meaning I have to create medium layout with self and pass that means inside of the size Notifier if I am printing self dot size dictionary I am getting a dictionary I don't need the window right now that has a key of 300 then a method and another key of 600 and then another method this is a good start but I do want to do one more thing and that is I want to order this dictionary right now it is already ordered we are starting from a small number like 300 and going to a large number to 600. however what we could have is a dictionary like this where we are starting with the larger number this would be a massive problem later on so I want to order this dictionary right away this is actually quite simple all I need is dictionary comprehension in here I want to create a new dictionary with key value pairs next up I need 4 and key and Val u in now I want to size dictionary and get the items with this we would essentially copy the dictionary that we already have so if I run this we can't see any difference to sort all of this I have to sort what is being returned from this items here this I can do very easily with this sorted function now if I run this we have a dictionary that is sorted we can get to the next part and that is going to be running this event here or binding it to the window this I want to do inside of the size Notifier I want to cut it out and paste it in here although for this to work I have to add self.window.bind because we want to check the size of the window not the size of this size Notifier which wouldn't work because it's not a widget and let me clean up the white space a tiny bit like so the reason why I want to have this event binding inside of the size Notifier is because I want to connect it to a method of this class the method I called check size or rather self dot check size and this is going to be just another method important here we need self and we need the event just to check if this is working I want to print the event this should already work if I run this now we can already see we have one event printed out if I resize the window we get lots of events so things are still working just fine Wicket already get started to create different kinds of layout I guess for now what I could do is I could print small layout for the small layout and I could print medium layout for the medium layout so we can see a bit better what's going on these two methods I can already call quite easily for example when I'm checking the size I could get self dot size dictionary with a key of 300 and then don't forget to call it if I run this now I get small layout anytime I am changing the layout this self.size by 300 is going to return this create small layout method the brackets afterwards are calling this method importantly here when we are passing the method into the other class we're not calling it we're just passing the method around which is totally fine to do what we now have to figure out is when to call which method so when do we call the 300 method and when do we call this 600 method for that we need a couple of things first of all I want to get the window width this one is really easy because all we need is event dot with next up I want to have a variable that tracks which sizes I have already checked I call this check size by default the value here is none also let me get rid of this function call here now the logic that I want to implement is for minimum size in self dot size dictionary I want to toggle through all of the minimum sizes inside of this size dictionary I can print right away what we're getting minimum size if I run this now we get 300 and 600. the way I am going to use this is I want to have the Delta size this is going to be the window with minus the minimum size and let me print right away what we're getting we get 100 and minus 200. what these numbers mean is by default this window has a width of 400 and we have two breaking points one at 300 let's say this is roughly here at 300 and we have another point at 600. let's say this one is broadly here 600. this Delta is going to give us either this distance here or this distance here which is going to be 100 and minus 200. this information is really useful because all I really have to know is what the smallest positive number is once a number goes negative I know my window size this point here doesn't reach the next minimum size but if the number is positive I am greater than the smaller minimum size so in this case we have two options 100 and negative 200. this negative 200 tells me that I haven't reached the next minimum size but since this number here is positive I know I have exceeded this minimum size which is this 300 here and since my window is 400 right now we're on this point we know we have reached this minimum size but not the next one all I really want to check is if Delta is greater or equal than zero if that is the case I want to get my checked size and set it to the minimum size since Delta is becoming negative once we don't reach the next minimum size this checked size here is going to give us the proper minimum size there's one thing we still have to do and that is I want to check if the checked size is different from self dot current minimum size this is an attribute that doesn't exist right now but I do want to create it let me copy it and inside of the init method I want to create a current minimum size by default this can be done it doesn't really matter what it is also this should be size inside of this if statement I want to set self dot current Min size to the checked size checked size like so this statement here is really important because this one actually tracks if we have a change in our minimum size which means in here we can now run self dot size dictionary and I can pass in self dot current minimum size and this I want to run now if I run this we get small layout and nothing happens if I just move it a tiny bit although if I moved a bit further we get medium layout and if I go back to small layout this is working really well however there's one problem already and that is if I go too far to the left we get none the reason for that is if our window is smaller than 300 pixels we are well trying to get the index on this dictionary of a number that doesn't exist as a consequence this one here is going to throw an error the best way around that that I found is to set a minimum size that is as large as the smallest size here so in our case I want to set the minimum size of the window to 300. that way we can never have a smaller layout than the smallest layout that is quite easily added here I'm going to do this inside of the init method I want to get a minimum height and I want to get a minimum width the minimum width is actually the easier bit for the simple reason that I already have myself dot size dictionary and I only want to get the first key from it for that I have to turn the entire dictionary into a list on this list I want to get the first item that is literally all we need so next up we have to work on the height for the height I simply want to copy what we are getting when we are creating the app in my case that is going to be 300. one way to get that is first of all I want to get the window or to be a bit more consistent self.window although in this case window and sales.window refer to the same object it doesn't matter which one you choose this one has a method called W info underscore with this is a method so don't forget to call it although let me print it right away minimum height and well let's see what we get we are getting one and that is going to be a bit weird we know that the minimum height of the app when we are starting it is going to be 300. so why is this minimum height going to give us one that is very strange the reason for that is that ticking that can be a tiny bit weird so what it creates and when it places a layout there's a tiny bit of delay at this point here when we are creating the size Notifier we have created the widgets but we haven't placed them properly yet as a consequence the size of the app is going to be one to account for that we have to call Self dot update this is going to put everything in place and afterwards you can call the W info.wiff or hide and then you get the proper numbers so if I run this now we are getting an error because size Notifier doesn't have an update method instead what we need is self dot window dot update now if I run this we are getting 400. and I just realized that is the width not the height I typed in with this should be height like so now if I run this we get 300 that is much better ah sorry about that with that I can get rid of the print statement here and once I have these two numbers all I have to do is get self.window and set a minimum size the minimum size here is going to be the minimum width and the minimum height let's try this one now I have the app and I can move it to be wider and taller but this is the smallest it's going to get all we have to do now is create different kinds of layouts we're already calling them so inside of these two methods we have to create all of the layouts that we are going to use or while the two layouts that we want to use for this small layout I want to have self dot frame which is going to be ttk and frame the parent here or the master is going to be self inside of that I want to create four labels and to save you watching me type I'm going to copy paste things into here like so we have ttk labels four times they all have cells dot frame as the parent then I'm setting the text to be label one they all have a different kind of background and afterwards right away I'm calling the pack method water pack Method All I'm really doing is I'm setting expand to True fill to both and then I'm giving them some padding there's literally nothing complicated going on right now the last thing that we have to do in here is self.frame and pack this entire frame for that I want to set expand to true and I want to set fill to both and now if I run this we can't see any kind of layout and this is a little bit weird because we are creating a layout here and we're also placing it on the window so this should be working now if I scroll down a tiny bit we are calling this method inside of this line the problem is if I add a print statement in here let me call it test I run this again nothing happens which means that this method here isn't being called and that's the problem right now the reason why it is not being called is because of this self.window update if I comment this one out run this again now we can see our app basically this self.window update causes this self.configure not to run I'm not exactly sure about the reason why but we can overcome it quite easily by moving this configure before the Windows update now if I run this there we go this configure is run before the update as a consequence it runs when we are starting the app and with that we can see our layout with that I can minimize size Notifier and now we can start working on the other layout for the medium layout I do need quite a few lines of code I think the best way for this is to Simply copy paste everything like so and then let me explain it really quick we are once again creating a frame although this frame has a grid layout which means we need a column configure and a row configure in this case we have two columns and two rows after that we are packing the frame on the main layout so we can see it and after that I am creating four different labels these labels have the same arguments that I used up here for the minimum layout and here you can see a minor problem in tkinter and that is well we have to create all of these widgets again there's no efficient way to copy widgets from one master to another right now we have a very simple layout so this isn't too much of a problem but if you had a more complex layout this would be quite a bit of work so well it's quite unfortunate but we have to work with it other than that we are using the grid layout method four times to place each label inside of one cell I'm also adding some padding but well that isn't very much and with that let's try the entire thing I have the small layout and if I increase the size of the app we get something very strange also a key error and well we have to cover a couple of things here the first one let me close this and get rid of the error message the first problem we have is that once we create the medium layout we are not discarding the small layout that is quite an easy thing to fix all I want to do for that is create self.frame as an attribute in the init method this is going to be tdk.frame as well with self as the master this self.frame I want to pack right away self.frame dot pack we can set it to expand being true and fill being both as well although this one doesn't matter very much because as soon as I create I have a small or medium layout I want self.frame dot pack underscore forget this I want to do for both the small and the medium layout essentially what is going to happen when we are starting the app we are creating a frame by default this Frame is going to be empty however once we are creating this small layout we are removing this Frame and then creating a new frame for the same variable or while attribute this is important because if we now create a medium layout we can use the same attribute to forget the current layout and then create a new one that way if we go back to a small layout like this one here we can once again forget the layout and create a new one with that we should be making some progress although still not ideal so now if I increase the size we get something very briefly like so but we're getting a key error none this problem happens down here in the size Notifier more specifically all the way down here there's some kind of problem with self.current size let's print it actually I want to print self.current minimum size now if I run this by default we get 300 that's a good start but if I resize the app we get something really strange we basically have an infinite Loop let me close all of this we had some kind of infinite Loop where we kept on getting 300 and 600. and the issue here is let me find it really quick this window.bind is being run whenever any kind of widget changes size or position as a consequence this is also going to be run when we are placing ttk.label also this is going to be run on self.frame the reason why this is a problem is because all of these labels here all of these labels and this Frame as well they also get the configure event and since they can change the size we basically end up with the problem that this widgets here or more specifically the grid layout method changes the size as a consequence of this change in size we are calling check size which in turn once again calls this function here which once again calls the grid method the result is we are creating an infinite Loop where nothing is going to work anymore and ticket gets really confused fortunately this is really easy to fix inside of check size I want to add one more if statement this if statement is going to be the event dot widget should be self dot window I only care about this event and only if that is the case I want to run all of this now if I run the code again I can resize the window and now this is working perfectly fine and we can change between different layouts this is looking good and with that we are done we have different kinds of layout and well we can move between them although I would really recommend you to go over this in your own time especially this kind of logic here can get a bit tricky but well the exercise is going to be I want you guys to create a third layout where all of the widgets are next to each other for that purpose I use grid but you could use whatever you want it doesn't really matter and this layout should appear once the window is wider than 1 200 pixels pause the video now and try to implement this yourself alrighty first of all we are going to need another layout method I'm going to call this one create large layout and we need itself as always and here once again this is going to be quite a bit of typing so I'm going to just copy it for my notes it's going to look like this and it's fairly similar compared to create the medium layout we are forgetting the previous frame then we are creating a new frame with a column and a row although now we have four different columns and just one row this Frame we're packing right away and after that we're creating four labels that all once again have the same arguments after that we are using the grid layout method to place all of these labels although now we're using column 0 1 2 and 3 and row is always going to be zero now we have to figure out when to call this and for that I want to minimize all of these methods so things are a bit easier to see when we are calling size Notifier we are passing in a dictionary it's probably better to put this dictionary over multiple lines like so that way it's quite a bit easier to read to this I want to add another entry 1200 that's the minimum width and I want to create large layout and with that we are done I can now run this I have a small layout I have a medium layout and I get a large layout that's basically all we need I guess what you could do if you have your own app you could simply use the size Notifier and use it for your own purposes this one is quite reusable and works really well a really important part that I haven't covered yet is scrolling which is going to look like this we have a canvas and on this one we have custom scroll bars that go up and down or left and right now this really doesn't look too impressive but what we eventually can do with this is something like this where we can create a frame that is scrollable although for now we're going to keep it simple and let's start with some Theory in teak and there are there are three widgets that can be scrolled we have canvas text and Tree View the canvas is the most useful one since this one can display other widgets we will cover that in the next part but for now let's get started with the basics I am importing tkinter I am setting up a window and I'm running main Loop the result is going to look like this on this I want to start by creating a canvas this I want to store in a variable that I call canvas and canvas we create with TK dot canvas in here we need to parent or to master which is going to be window and just so we can see it I want to set a background with a white color this canvas I want to pack right away so canvas dot pack I'm going to set expand to through and fill to both now if I run this we can see the entire background is white I guess for now I can change the background to red that is a bit easier to see we can definitely tell the canvas covers the entire window but that's not actually what we want instead what I want is that the canvas is larger than the window for that we need one more argument and that is called scroll region this creates a larger canvas that we can use for scrolling for this we need four arguments we need the left the top the right and the bottom the left and the top are basically always zero and zero that makes it very easy to navigate for the right I want to set 2000 and for the bottom I want to have 5 000. for comparison here the window itself is 600 by 400 pixels so the canvas now is going to be quite a bit larger although if I run the entire thing we can't see any kind of difference first of all we only have a red color for the canvas right now which isn't particularly helpful to actually see some scrolling we need content for the canvas in my case I want to the most important one create a line this line is supposed to go from the top left all the way to the bottom right which means when we are creating it I want this to start at 0 and 0 for the left at the top the right is going to be 2000 and the bottom is going to be 5000. with that we have the exact same numbers that we have used here although for a line the first two are the starting position and the last two are the end position other than that I want to fill this one with a color let's go with green and then I also want to set the width so it's a bit easier to see let's go with 10. now if I run this one we have a line although we can only see one part of the line but that we can work on besides the line I also want to create a couple of rectangles for that I'm going to use a for Loop let's say for I in range and I want to create a hundred rectangles to create a rectangle I need canvas and create underscore rectangle this one is going to work kind of like the line for each rectangle we have to specify a left a top a right side and a bottom side besides that I also want to have a fill which is supposed to be a color which means we have to create five different variables we need a left side we need a top side we need a right side we need a bottom and we need a color all of these numbers are actually fairly simple but since I do want to have random numbers I need to import two things I want from random import rant int and choice Rand int is going to give me the positions so left top right and bottom basically all I want to do is run in from 0 to 2000 or from 0 all the way to the right or the top I want to have Rand int with 0 and 5000 so all the way from the top to the bottom for the right side I want to have the left side plus a random amount let's say rant end with 10 and I think 500 is what I went with finally for the bottom I want to have the top plus rant end 10 and 500. for the color I want to use choice and choice needs a tuple with a couple of color arguments and here I want red I want to have green I want to have blue I also want to use yellow and let's go with orange with that I can run the entire thing and now we can see at least parts of some rectangles and with that I can also change the background of this canvas to White and we can still see things or at least we can see the line for now we didn't get lucky to see any kind of rectangle but they are definitely there if I run this again now we can see them with that we can cover the actually important part and that is a scroll bar this grow body Kinder is just another widget we create this with ttk and scroll bar this one is apparent let's go with window and I also want to store all of this inside of a variable let's call it scroll bar for the scroll bar we need one argument right away that you basically always want to pass in and that is Orient for this one you have horizontal or you have vertical horizontal is the default one but I want this to be vertical with that covered I want to place this thing right away and place was deliberate because I want to use the place method this is basically what you always want to use for scroll bar because this allows you to set relative X to 1 and relative y to zero with a relative height of 1 and an anchor of North East that way this crowbar is always on the right side of the window so I can run this now and on the right side we have a scroll bar although right now it doesn't do anything now this scroll bar Works kind of like a slider what that means in practice is we can give it one more argument that is called command this command wants to have a function you could pass a normal function in here but most of the time you want to do one specific thing you want to get a scrollable widget like the canvas and then get the Y view method this y view method is basically designed to work with a scroll bar if I run this now you can't really see any difference on the scroll bar but if I move the scroll bar we now have some scrolling which is a good start to actually see the progress inside of the scroll bar we want to have the canvas and we want to run configure the argument we need now is called y scroll command this I want to set to scroll bar dot set now if I run this we can see the scroll bar is working and we can use it to move around in the canvas this is working really well and basically what you have to understand let me draw this actually we have a canvas that is what we created here and then we have a scroll bar that is what we created here those two are going to influence each other the scroll bar is going to give us one size of the canvas and this we are doing with this command and canvas.y view this picks one part of the scroll region however we also have to go the other way that the canvas influences the scroll bar and this happens down here with the scroll command is equal to scrollbar.set this tells the scroll bar how tall the widget is and which section we currently have you need both of these parts to make all of this work efficiently but once you have it you are basically done so let me run this again and we basically have all we need for the basic scroll logic there's one more thing that we can do and that is let me put it above the scroll bar Mouse wheel scrolling for that I want to get my canvas again and I want to bind an event the event I want to look for is called Mouse wheel be careful here the W has to be uppercase once we're doing that I want to call a function and this could just be a Lambda function don't forget the event here and for now let me just print the event itself now if I'm over the canvas with my mouse and use the scroll wheel we get an event that we can work with on this event what I care about is this Delta if I move my mouse with away from me this is a positive number if I move it towards me this is a negative number I think it is always 120 but your results May Vary depends on your mouse and your operating system I think but the number itself here isn't really that important the way you are going to use it is by targeting the canvas and then calling the Y view underscore scroll method this one tells the canvas to scroll in a certain direction and for this we need two arguments we need the amount and we need the units the units is kind of weird you basically need a string that is called units and you never use anything else so just always pass units in there the amount is the much more important bit for example in here I could simply add 20. although this might be a bit large if I now run this and I use my Mouse as a scroll wheel we are scrolling quite a bit although this only works one way in my case what I want to do I want to get the event I want to get the Delta and I want to divide this by 60. remember here event Delta was either positive or negative 120. if I divide this by 60 I am getting 2. which seems like a reasonable number but just play around with this whatever feels good is fine here however now we need one more thing if I run this again and are you scrolling we are getting an error and that is not actually the error I was expecting because I had a typo now let me try this again if I now use the scroll wheel we get expected an integer but got a floating Point number basically what you have to understand here is that tkinder for the scroll always wants to have an integer so now if I run this again I can use scrolling and now this works perfectly fine with my mouse wheel if you want to change the direction of the scrolling you would just add a negative here depending on what operating system you are used to you properly know different scrolling behaviors for some people if you scroll away from you on the mouse wheel you want to go up other people want to go down I prefer that if I go towards myself I am scrolling down and if I scroll away from me I'm going up but this is a choice you have to make but with that we have all of the basics of using a scroll wheel to move along a widget it really isn't that difficult so with that I want to add an exercise I want you guys to create a horizontal scroll bar and this one should be at the bottom and with that you are scrolling left and right on the canvas on top of that I want you guys to add one more event that the user can scroll left and right by holding down control and the mouse wheel control or command if you're on a Mac positively now and try to figure this one out yourself first of all I have to create a new scroll bar let me call it the scroll bar bottom this is going to be ttk and scroll bar the parent is going to be the window and Orient for this one is going to be horizontal although since this is the default argument you could just ignore it entirely let me place this one right away I want to get this scroll bar and use the place method for this one I want to have relative X being 0 and relative y being 1. on top of that I want to have the relative with being one and the anchor should be the south west let's run the entire thing and something definitely went wrong ah I see this shouldn't be scroll bar this should be scroll bar Bottom now if I run this this is looking much better all the way to bottom now we have another scroll bar there is a tiny overlap between the two scroll bars down here and for an actual app you would want to take care of this but in my case I'm not worrying too much about it with that let's work on the functionality we need a command argument and this command argument we have seen here before we still want the canvas except now we don't want why view instead we want to have x view I can already run the entire thing click on the scroll bar you can't really see it at least on the scroll bar but in the canvas you can see we can go left and right to make it visible in the scroll bar I want to have the canvas and I want to run configure now instead of Y scroll command I want to have X scroll command and for this I want to have my scroll bar dot bottom and use the set method with that I should basically be done now I can use the scroll bar on the horizontal axis the vertical one still works perfectly fine and this is looking really good finally I want to cover the second part of the exercise let me move it below because in here I want to have canvas dot bind and I think the only difficult part was to figure out how to combine the control or command with the mouse wheel on Windows this would be control and mouse wheel I believe on Mac OS it's actually the same keyword but let me know if that's wrong and then I'll help you next up we have to call a Lambda function or well some kind of function but Lambda is best here I guess I can just copy the entire thing I want to have a Lambda function for this one we need an event and then we have to call canvas and not y view but x view and scroll the other arguments though can stay identical with that we should be done let's run this and now I can use my mouse wheel to go up and down and if I will control I'm going left and right this is working quite well and this is going to cover all of the basics of scroll bars at least for the canvas with that I want to comment out all of this stuff because there are tumor widgets that I do want to cover the first one is the text widget this we create let me start in a variable TK dot text the master is going to be a window and I want to pack this right away text Dot pack with expand being true and fill is going to be both if I run this now we have a text box I can type in this but other than that we have no scroll bar to make a scroll bar work I want to add some content to this text box this I can do with a for Loop for I in range let's go from 1 to 200. these numbers I want to use with text Dot insert and now I need two arguments I need a position or rather a start index and then I need some text that I actually want to write the text is the easier bit I just want to have an F string that says text with the current index so I the index itself is going to be the starting position I already talked about it but basically in here tikenter expects something like 1.0 with 1 being the starting line and 0 being the character on that line since we do have the numbers from 1 to 200 we can simply turn this into an F string and put this as I now if I run this we get a whole bunch of numbers that's a good start although I do want to have some line breaks those we create with a slash and the letter N now to run this this is looking much cleaner we can already scroll around here by simply using the mouse wheel so this is the default Behavior although we don't have a scroll bar but this we can add quite easily afterwards I want to have another scroll bar let me call it scroll text and this is going to work basically identical compared to the canvas in fact I could simply copy all of the code here and paste it here if I comment it out I want to rename scroll bar in all of the places to scroll bar text and let's go through it step by step first of all for the scroll bar we are creating it we are setting it to the window we have an orientation and then we have the command right now the command is for the canvas instead this one should be for the text other than that the text widget also has a y view method so we can leave this one as it is next up we have to tell the scroll bar that it is being set by the text widget for that I want to get rid of the canvas and replace it with text for this one I want to have configured then the Y squirrel command and now I want to set scrollbar text Dot set that's all we need here finally I have to place the scroll bar itself and I want to have this one all the way on the right which is what I already have here so if I run the code now we have a scroll bar if you understood this for the canvas this one should be fairly straightforward which means I can comment out all of this and then cover the final one tree View for this one I have quite a few lines already let me just paste them in and uncomment them I am creating a table and this table has two headings we have one for the first name and one for the last name then I have a bunch of random first names and a bunch of random last names then I'm creating a for Loop that creates 100 items that I'm inserting into the table finally I am placing or packing the entire table so if I run this we have a table I already covered treeview in quite a bit of details so check that bit if you're confused about all of this it shouldn't be too difficult once I have that I can simply once again copy the scroll bar from up here paste it in here and remove the comment and let's go for this step by step I guess first of all we have to create a scroll bar widget and this one I'm going to call scroll bar table this week rate with ttk.scrollbar the parent is the window and orientation should be vertical next up for the command I don't want to have text.yview I want to have table dot y view that's the name of the widget we just created or at least the variable we are storing it in next up we have to configure the scroll bar itself for that I want to have the table and this one has to configure y scroll command with scroll bar table and set this is going to set the position of the scroll bar itself oh well to position and the size finally I want to get scroll bar dot table and place it on the window for this I already have all of the arguments here so if I run this now we have a scroll bar for this table as well and that is it the really important part here is that you understand how to use scroll bars with the canvas because this is the one you are actually going to use quite a bit but it's generally good idea to understand all of them although I think if you understand one of them you understand them all another really important part for layouts are scrollable widgets and this is what we're going to work on we have a widget and we can scroll through it this is also quite flexible so if I extend it like so at some point We Can't Screw anymore because the window itself is larger than the list like with the responsive layouts decantera doesn't have an inbuilt tool for scrolling which is kind of a pain but what we can do is have a scroll wheel on a canvas on top of that we can also add widgets to a canvas if we combine those two we can create scrollable widgets but this isn't the most straightforward process and well you have to be very specific in terms of what you are going to do for example in the widget that we are going to create this one here you always use the pack method now you can use any kind of layout but you always have to create some custom solution that is going to make much more sense when you actually Implement everything once again I have a basic setup for the code and just as a reminder I want to create a canvas and this canvas is going to hold a widget for that I want to create a canvas with TK dot canvas the parent is going to be the window and let's say for the background color I want to go with white this canvas I want to pack right away I want to set expand to true and fill to both running this gets me a white background on this I now want to place a widget this I can do with canvas and create window this one at the minimum needs two arguments we need a position and we need a window a window is basically the name for the widget we want to place I want to place the widget at a position 20 and 50 completely random numbers for the window tick enter does expect a widget like ttk dot label for this one again we need a parent or a master I usually set this to the canvas but it actually doesn't matter now we need a text and the text is going to be let's say a label if it runs now we have a label the master here doesn't really matter I can set this to window and it would still get the same result now this isn't a picture it's an actual widget I can for example place a button and this button is here and I can even press it it works like any other widget which is super useful because that way I can add some scrolling mechanic and then I have a scrollable container although all of this does get a bit more complex so I'm going to do all of this inside of a class let me get rid of the canvas and instead create a new class I call this one a list frame it is going to inherit from TDK dot frame and we need a thunder init method this one itself it needs a parent then I want to have text Data finally I want to have an item height basically how this one is going to work I'm going to create a new variable to store it in list frame seems fine this is going to be list frame this one needs three arguments the parent is going to be the window or could be anything is really up to you then we need some Text data for that I have a list of some random entries this one is literally just a list with a couple of tuples inside and those are random strings this is going to be our Text data and finally I need the item height this is going to determine if I run the entire thing again the item height is going to be the height of one of those entries they are always going to span the entire width of the container so this we don't have to set ourselves you can also see here we have for the first entry label and button and this is this label and this button for the height I went with 100 but you can always choose whatever looks best inside of the init method the first thing we always need is a super Thunder init method for this one we need a master which is going to be the parent right after that I also want to pack this list frame which I do with the pack method this is going to be expand set as true and fill is going to be both since we're just working with a frame any layout method is going to be fine here I'm just working with the simplest one to not over complicate things once we have that I want to get my widget data this is going to tell me some basic things that I need to make all of this work for that first of all I want to turn the text Data into an attribute so self.text data is going to be text not text list but text Data next up I want to know how many items I have this I called self dot item number this item number we are getting from the text list this one down here I simply want to know the length of this list I have one two and so on items which means all I have to do is use the length function and then pass Text data in here finally I want to have one more attribute and that is going to be the list height this is going to be the height of the entire list this I get with self dot item number and multiply it with the item height next up I can create the actual canvas that I want to use for scrolling this is going to be self.canvas and then here PK dot canvas the parent is going to be self and just so we can see something I want to set the background to red this self.canvas I want to pack right away and I'm going to use the expand method this should be true and fill should be both let me run it straight away and now we can see we have a canvas that covers the entire window it's a pretty good start on this canvas we are now going to place another frame I called this one the widget frame although a better name would be the display frame essentially what is going to happen we are going to place all of our widgets inside of this Frame and then this Frame we're going to draw on this canvas I think that's going to be quite difficult to understand so let me explain what I'm implementing it I want to have self.frame and this is going to be ttk dot frame the parent is going to be self and now I want to use self dot canvas dot create underscore window once again we need to position and we need a window the window is quite simple I want to use self.frame the position actually is also very simple because I want to have 0 and 0 as a starting point so the top left of the canvas that being said if I'm running all of this we can't see a difference however what I can do now is give this self.frame a child let's work with ttk and label the parent here is going to be self.frame and the text is going to be a label I want to pack this right away without any arguments now if I run this we can see label all the way in the top left not terribly visible right now but you get the idea at least it's working one change we can already make is that we are placing the center of the widget right now to make that a bit better I want to place the anchor and the anchor is going to be North West now if I run this we can see a label in the top left that's much better although now things are getting a bit weird we have this self.frame but we are never using a layout method to place this Frame instead we are drawing it with the create window method and that is creating some bits that are deviating from what you used to know about tkinter the most important one is that this great canvas is now giving the space for the frame which means I could set the width here to whatever number I want it wouldn't matter so the width of 200 is not going to make a difference I could also set for the label fill to both we still couldn't see anything the reason for that is let me remove them actually because they would be confusing when we run create window great window tries to find Dimensions that are just large enough to display the widgets inside which right now is just large enough to display this label although you could customize this you can set a rift let me go with 200 and you can set a height let's go with 400 in here so if I run this now we can see a difference if I expand the window a bit the frame with this label is 200 pixels wide and it is 400 pixels tall and this we can already use because I know for example the hype is going to be the list height itself although I want to place all of this over multiple lines so it's a bit easier to see like so that is much better basically what you have to understand now is when we are creating this Frame I want the frame to cover the entire canvas but since we can't use pack Grid or place we have to do a bit of math here ourselves although the math is going to look as complex as this one it's really not hard the first part we already have because the height of the list is going to be self dot list height if I run this now we can see we have a longer widget here that goes up to this point for the width I want to cover the entire width of the window so right now this would be 500. let me change this to 500 and there we go the label covers the entire window although if we resize the window this breaks but that we can work on for now I'm going to leave this at 500 but later on we're going to make this flexible what is much more important for now we have to make this canvas scrollable as well right now the canvas is as large as the container so this TDK frame up here but if you want to make this scrollable it has to be larger as a consequence we have to give this a scroll region this one wants four arguments it wants the left the top the right and the bottom the left and the top are going to be 0 and 0. those are really easy for the right side I want to have the width of the list which right now is going to be 500. and the bottom is going to be the height self and list height I should probably explain this in a bit of detail we have a list frame which is just going to be a frame this is the parent of all of this inside of that we have a canvas and this canvas is going to by default cover the entire frame like so that being said I want this canvas to be larger which I'm doing with this line here the width right now is hard coded so the width is always going to be 500 but the height this part here can at least in theory be larger than the window itself it might be something like this this entire canvas I want to fill with a widget which is this create window this should fill the entire canvas and then we are scrolling on it instead of creating a label I want this to be a bit more flexible I want to cycle over this text Data here which is going to be a for Loop for item in Text data let's make this self.txt data on top of that if I run the entire app again what we have is we have the index then we have one bit of text and then we have a button the number here we are getting from the for Loop for that I have used the enumerated method the numerate with that we are returning an index and the item let me actually print what we get I want to print the index and I want to print the item and I realized I made a fairly significant typo this should be scroll region talking and typing is really not easy there we go we are getting the index and the content of the text Data this is the information we have gotten down here this I now want to turn into a proper widget and then place it on this Frame since that is going to become a tiny bit more complex I want to store all of this inside of a method I'm going to call it self dot create item I want to paste in the index and the item this I now want to create I want to Define create item we need itself we need an index and we need the item I first of all want to create a new frame this is simply ttk and frame the parent here is going to be self dot frame next up I'm going to create a grid layout this is simply going to be frame and row configure we have only one row so this is zero and weight is going to be one then I can copy the entire thing and change this to column configure I want that to be five columns so zero one two three and four all with the same weight on top of that I want to have the uniform argument and set this to a once I've that I can actually create the widgets this one is quite straightforward I wonder if ttk dot label the master is going to be the frame text is going to be the index I want to have a label for the index this is what we are creating right now then I want to have another label for well label and then I want to have a button and this button covers a whole bunch of columns to display the text here I simply am going to use an F string and pass the index in here on top of that I want to use the hashtag symbol next up I want to place this widget using the grid layout method the row is going to be 0 and the column is also going to be zero this I now want to duplicate the text is not going to be the index instead I want to have the item and the item has two parts because it is a tuple we have label and button in this case I only care about the one with the index 0 which would be label or thing the first item this I want to be in row 0 and column 1. finally I want to create one more widget and that is going to be ttk and button the text here is going to be item and 1 and the column will be column two on top of that I want to have column span this button is going to span three columns finally the button is going to be sticky to north south east and west with that we have a frame and this Frame I want to return this is going to give me a widget I can minimize this if I run this now we can't see anything the reason for that is that this method returns a widget but we're not placing it on this Frame but that is very easily done by using the pack method this should be expand being true bill being both then I want to have a bit of padding for why this is going to be 4 and 4 pad X this is going to be 10. now if I run this we're getting an error because I forgot an equal sign there we go now we can see actual widgets although I cannot scroll right now and I move the mouse wheel and I don't have a scroll bar and if I resize this thing you can see that we don't actually have scrolling we just displayed a whole bunch of items but it's at the very least a starting point what I want to start with now is some actual scrolling and for that I'm going to use the mouse wheel all I have to do for that is create another section here for the events this is still inside of the init method let me minimize the create window part to get mouse wheel scrolling I want to get self dot canvas and then bind the Mouse wheel although there's going to be one issue that we have to be aware of let me just run a Lambda method with the event and print the event if I run the app now and I have my mouse over the widgets and use the scroll wheel nothing is going to happen however if I extend the app and use the scroll wheel over the red bits we can see scroll wheel the problem that we have right now is that this canvas.bind is only working for the canvas but once we're adding widget to the canvas with create window tkinter sees this as the mouse being active on this widget not on the canvas itself which is why the event doesn't work this however you can fix quite easily with bind all this adds the event to all of the children of the widget as well so now if I run this with a mouse on all of these widgets I can use the scroll wheel wherever I am which means now I can create the actual Lambda function what we need here is self dot canvas dot y view underscore scroll this one needs an amount and a unit once again for the unit tkinder just wants to have a string that says units for the amount you basically want to choose what works best with your computer what I have used is negative integer and then event dot Delta divided by 60. now if I run this I can use the scroll wheel and go up and down this is working really well although once again if I make this thing larger well I guess it still works but if I make it full screen we get some very strange Behavior although we are making progress for the next part I want to make sure that the list covers the entire width of the canvas right now all of this is hard coded when I'm creating the window it is 500 and when I'm creating the scroll region this is also 500. but we do know how to get the width of a widget we need in this case self and W info underscore either with or a height in this case with also don't forget to call it if I now run this again we can see the same result because by default the window is 500 pixels but this would still work even if we have different numbers this I also want to paste in for the with for the list or Brava create window if you're honest again now although now if I run this well we can't see anything the reason for that is that this W info dot with is one by default let me actually print it if I print this you can see what I'm talking about I want to print self.w info with don't forget to call it once again and if I run this we are getting one as a consequence the widget we are creating is all the way on the left here and it is one pixel wide so not very helpful to account for that I want to bind the configure part again so self dot bind and in here I want to have configure this is going to run every time we are updating the size or the position of this container this list frame here it is also going to run when we are creating the widget for the first time meaning we can use this to update the size of all of this and make this work again since we are going to use a couple of lines of code here I want to create a separate method I got this one self dot update underscore size let's create this right away I want to have update size remember here we need self and event for the parameters we need self and event in here I want to get self.canvas again and run create window one more time with essentially the same arguments all of these here I want to pass into this one and now if we run this this is going to work again because essentially what is happening now when we are creating this bit here it changes the width to one so we can't see it but this configure is going to call this update method once when we are creating the layout which is going to draw on top of this create window and that way we can only see the updated canvas and this one has the proper size I'm not actually quite sure why W info.wiff Works in here but not in here tkinder can be a bit weird with that if you play around with this you will eventually understand this but it's more of an art than a science to be honest what we can do is simply get rid of this thing here this is still going to work now we also have scrolling and more importantly if I resize the window we are covering the entire wift because every time that we are resizing the window we are calling this method here with configure and configure is going to update the width of this create window the weft is always going to be the full height of the container that way the frame we are going to place this one here is going to cover the entire width of the canvas also I want to get rid of the comments here because we have a ton of logic I want to keep this a bit more organized although we are almost done we have the basic widgets and they work very well the one problem we have right now is if I make the container really large I can keep on scrolling and now this starts to look weird the basic problem we have if I make the smaller again if the actual container is larger than the list this kind of logic starts to break so we have to account for that that isn't terribly difficult and all of the logic happens inside of update size let me minimize the init method so all of this is a bit easier to see the issue here is the height we have a list frame and this would be something like this it's just a frame nothing else inside of there we have a canvas and instead of the canvas we have a frame this Frame could either be let's say this tall or it could be this tall if the list is longer than the container this one is perfectly fine we have enormous scroll logic and everything just works the problem is when we have a list that is shorter than the container so the height here is what's causing the problem what we have to do to fix that is if this list is smaller or well shorter than the entire container I want to stretch the list to cover the entire height also I want to disable scrolling because it shouldn't be possible if the list doesn't even cover the entire container all we have to do for that is set a custom height right now we always set the height from the init method this height here however if the list doesn't cover the entire height of the container I want to have the height of the container as the height of this window which means if self dot list height is greater or equal then self.w info not with but height if that is the case I want height to be self dot list height this is basically what we already have but this height I want to have in here although for now this isn't going to make a difference so the same problem is going to come up again and here we're getting an error because if this condition is false we are not accounting for it but that we're going to work on right away if the container so w info dot height is taller than the list if that is the case I want the list to stretch out over the entire height of the container which in practice means the height should be self.w info and height with that I can run your typing again and now if I maximize it the list now covers the entire container although if I scroll up we still get some weird scrolling behavior all we have to do for this one I want to get self dot canvas and then unbind all the events for this one is going to be the Mouse wheel this is going to be the opposite of bind all quite obvious I think so for the canvas earlier we used canvas and bind all for the mouse wheel if the container is taller than the list I want to unbind this so now if I run this this is looking still pretty good I can maximize this and now if I scroll well I can't scroll anymore that way we are simply covering the entire frame with a list and this looks quite responsive the problem now is if I make this small again I still cannot scroll because I remove the binding but that we can fix quite easily all you have to do is copy this entire line and if the list is taller than the window height I want to bind this event again like so if you're doing this multiple times tikkinder simply ignores The Binding chords so we can do this multiple times without a problem with that we are pretty much done now I can scroll I can maximize the window and I can't scroll anymore if I minimize this again I can scroll again this is working really well with that let me minimize everything so things are a bit easier to see we are pretty much done although I do want to do an exercise this is really important what I want you guys to do is to add a scroll bar to all of this first of all we have to create the widget for the scroll by itself this is going to happen inside of a niche in here let's say before events I want to create a scroll bar this should be an attribute so self Dodge let's call it scroll bar this we create with ttk and scroll bar the parent is going to be self Orient should be vertical next up I want to place the screw bar this I do with self dot scrollbar dot place the positions here are going to be Rel x 1 Rel y 0 meaning we are on the top right and I want real height to be 1. with that we're covering the entire vertical space finally we have to set the anchor to Northeast with that we should be having a scrolled bar let's run the code and there we go on the right side we have a scroll bar although it doesn't do anything and on top of that it's overlapping with the buttons so this isn't ideal for this project I'm not going to worry too much about it but in an actual project you want to have a better system here for example the entire container would be its own frame and then you place a scroll bar to the right of it using the pack method that way it wouldn't be overlapping with that we have a scroll bar now we have to connect it to the widget itself or more specifically to the canvas this canvas here this requires us to add two more basic bits first of all when we are creating the scroll bar it needs to have a command whenever we are clicking on it and this command is going to execute self.canvas dot y View that way the scroll bar is going to influence the canvas let's try now I can click on the scroll bar and move the canvas this is working really well although we can't see it in a scroll by itself for that we're going to need another line of code what we have to do is to set self DOT cam this dot configure in here we need to command y scroll command this is going to influence the scroll bar depending on where we are on the canvas for that we need self.scrollbar dot set and with that I can run the entire thing and now you can see the scroll bar only covers the appropriate amount and this is working pretty well although you are going to notice here the cameras has one slightly annoying thing if I move the scroll bar really fast you are going to see this you can see we get some graphical glitches and that is because sometimes the canvas doesn't keep up with the drawing which unfortunately is not something we can really deal with it's just a problem of tkinder although if you just use the mouse wheel this isn't happening with that we have a scroll bar but there's one more thing that I do want to do that is if we maximize the window and we can't scroll anymore the scroll bar should disappear because it's not needed for that we don't need a net anymore instead I want to work inside of update size in here the if statement is what really matters this if statement triggers if we can scroll and this if statement triggers if we cannot scroll if we cannot scroll I want to hide the scroll bar which we do with self.scrollbar DOT lace underscore forget with that if I run the entire thing again and I expand the window at some point the scroll bar will disappear this is looking good although if I make the window smaller again this robot doesn't reappear which is what we have to work on next and this happens inside of this if statement here all we have to do is place the scroll bar again this is what we have done inside of the init method this line here I can just copy it paste it in here and now we should be good to go let me run the entire thing there we can see the scroll bar again this is working pretty good now if I make the window larger let's full screen it actually now the scrubby disappears and we can't scroll at all however if I make the window smaller again a scroll bar reappears I can make the window even smaller and this is still working really good I suppose there's one thing I should mention if you place or use any layout method on a widget multiple times tkinder is going to override the previous layout method meaning if we call place twice the last call is going to overwrite the previous one let's talk about using multiple windows in tkinter what we're going to make for this bit is going to look something like this inside of this app we have three buttons If I click on the top one open main window we are opening another window this is a completely separate teak in the window and inside of this one we can create any kind of layout although in my case I stuck with a simple one but this could be much more complex in this window you can also close inside of the window itself like so or if I open it again I can also close it inside of the main window like so besides that you can also create a more focused window for example sometimes you only want to ask a user a yes or no question for that tick enter has a more dedicated option that looks something like this in here you can click either yes or no let's click on no and then it disappears the input you can also capture and then use for whatever purpose and tick enter has a couple of options for that we're going to explore all of them but let's talk about it in a bit more detail first and then we can jump into the code inside of the Kinder you have two options for extra windows the first one is called a message box and these are more specialized windows for example if you want to create an alert or a yes or no dialog you would use a message box besides that you have top level and this is going to create a whole new window inside of that window you can create any kind of layout and use any widget you want I already have a couple of lines of code ready if I execute all of this we have a window and we have a couple of buttons although none of the buttons do anything right now we are importing tkinder up here we are creating a window here we are creating three buttons here and then we are running the main Loop all of this at this point should be fairly straightforward but now I want to actually make these buttons do something and I'm going to start with button number three this is going to create a yes no window I want to trigger all of that inside of a function so let me add a command method I call this one ask yes no this function we have to create and I will do that all the way at the top Define ask yes no there's no need for parameters and in here just to test if this is working let's print test if I run the entire thing now and I click on create yes in the window we can say test that's a pretty good start what I now have to figure out is how to create an actual message box in here and for that we have to import something else from tkinder what we need all the way at the top is from tkinter import what is called a message box all in lowercase letters inside of this message box we have a couple of objects that we could use for a well message box the option you have just seen is called message box dot ask question inside of this one you have to add two strings the first one is for the message box title let's call it title for now besides that for the second argument we need a string for the body let me call this one body like so and now if I run this and I click on create yes in the window we can see we have another window with title body and then I can click yes or no let me click on yes and it disappears and that is basically it although I suppose there's one more thing you have to understand and that is that all of this here Returns the answer which means I can store what is being returned in a separate variable and then print answer and now if I run this again I click on create yes in the window and if I click on yes we can say yes in the bottom and if I click on no we can see no that way you can use this one here to get the actual user input and that's kind of all you have to know if you got this far all you really have to know is that there are different kind of methods you can use to create a simple message box and there's a really good website to explain all of them let me open it right away it is looking like this and then here you can see all of the options you can work with the one I've just used is called ask question besides that I could ask okay cancel I could ask yes no I could ask yes no cancel I could also show just an info or a warning or an error and well these are all very simple Windows let's play around with a couple of them but this shouldn't be too difficult yeah I'm back in the code and I want to comment out what I've just done so this part here besides that I want to get my message box and show info for this one I want to display some information and now if I run this click on the button we have some information for the title but no actual text this happened because we need two arguments in here one for the title and one for the body of the text like we have done up here let's change this one right away I want to call this one the info title the second argument is going to be here is some information now if I run this again and I click on the button now we have here some information besides that we can get rid of show info and show an error if I run this again we have an error message looks basically identical except now we have an X here and with that we have basically all we are ever going to need for these simple boxes let me add the link to the website here so you can find it yourself it's super useful with that we have covered the simple Windows next up let's create some more complex ones I am going to minimize the ask yes no function and create another one this one I'm going to call create window doesn't need any parameters and in here I want to create a whole new window that can do basically anything a normal tkinder window can do for that we need a new widget this is called TK top level this is going to return an object that works kind of like the window in the sense that you can just add other widgets to it and then they are going to be displayed let me store this in a variable actually let's call it extra window and just to get started let's actually run this function when we are pressing this button here which means on this button I want to have a command that is creating the window if everyone is now and I click on open main window we have another window and this one let me move it to the side doesn't really do anything right now the only thing we can really see is that we have multiple windows as the title for both of them but this we can change so let me close all of this and what we can do with this window is basically the same that we can do with this window down here for example we could get the extra window and set the title to extra window and we could also get the geometry and set this to let me use a larger number let's say 800 by 300. if I run this now and I click on open main window there we go we have another larger window that we can work with although let's use smaller numbers so this isn't getting too large what I used in demo is 300x400 but these numbers are entirely up to you on top of that what you can do is create other widgets and place them in here for example what I have done is I created ttk label and the parent here has to be this extra window so extra window and then we can add some text for example a label and this I want to pack right away running this now I can click on open window and we have a label inside of this extra window I could do this in another time except now I want to use a button let me run this again and there we go we have a label and a button although with the wrong text in there let me change it right away this should be a button and just to finish the demo here what I have done what you've seen in the opener I have created another label and this is going to be in never label and for this one pack I have set expand being true now if I run this entire thing I can click on open window and there we go we have another window you could also use a grid method or place method in here it works like any other widget in tkinder finally what I want to cover is how to destroy this window and there's one very easy way if I run this again I click on open main window and I can simply close this window by clicking on the X up here and then it disappears but besides that I also want to be able to close the window by clicking on this close main window which we can't do right now for that I want to create another function close window no need for parameters once again and this close window I want to call on the middle button which means this one is going to need a command like so and all we really have to do now is somehow get this variable let me use it right away extra window although this wouldn't work right now and I have to call the destroy method on it the reason why this is not going to work right now is because in this extra window only exists inside of the scope of this create window function to fix that we can simply declare it as a global variable extra window and now it is available everywhere which means this function here should already work I can open this window and move it to the side and if I click on close main window it disappears with that you should know how to use multiple windows it really doesn't get that much more complicated although there's one exercise I really want to do and that is that this kind of approach is not really ideal because it gets kind of messy you're creating a ton of local variables inside of a function and you work with lots of widgets this doesn't really feel organized what you should rather do is create an extra class let me call it extra right away and put all of this stuff inside of this extra class and that is going to be your exercise so this extra class should be a top level widget and contain all of these widgets and then you're creating this extra widget when you're calling the create window function pause the video now and try to implement this one first of all this extra has to inherit from TK Pop level with that we are recreating this line here although for that to work properly we have to call an init method that has self and nothing else inside of that we have to call this super Thunder init method although it doesn't need any arguments now we have recreated this entire line let me start by copying the title because all we have to know is called self and then the title the same thing we have to do for geometry meaning I can copy this one as well except for the class we have to run self and geometry and with that we should already have a basic window which means I can comment out all of this stuff here and instead I want to assign the extra class to the extra window that way this one here is still going to work let me run the entire thing now and if I click on open window we can see we have an extra window that's a pretty good start so next up we have to create all of these widgets here which is going to be very simple I just have to copy them and remove the comment and fix the indentation besides that now the parent isn't going to be the extra window it is just going to be self that didn't go particularly well this is looking much better now the label the button and the other label are all children of the extra widget which means I can try all of this again I can click on open window and there we go we have an extra window and what is even better now is that the entire extra window is inside of a separated class that way when I'm calling the function all of this is very easy to work with and if you had the entire app so all of this one here as well inside of a class you wouldn't even need Global you can simply turn this extra window into an attribute and then work with this in any kind of method the final part that you need to create good looking apps is styling for styling tkinder has a couple of different options the first one is the inbuilt styling tools for that we have the widget options and we have the style object widget options you should already have seen for example when I'm giving a label a background that is a widget option the next one is external themes this basically means your importing a set of graphics and certain Styles and you apply them to all of your widgets finally we have external modules these are literal external modules that people have made that build on top of tkinter and they are giving you a ton of extra functionality and extra styling which are incredibly useful now unfortunately there's one issue I really have to talk about and that is that the inboard styling tools and the external themes just aren't very good there are a couple of reasons why they are quite bad actually the most obvious one is that I just don't look particularly good but besides that they're also quite annoying to work with and you don't have that many options I am going to go over them but I will not use them too much most of what I'm going to use are the external modules because those are actually really good and significantly more powerful so let's talk about external themes and tick interest in build styling tools for that I already have a couple of lines of code ready I am importing tikkinder I am creating a window I am creating a label and a button finally I'm running the window and that's literally it running all of this is giving me an app like this it's probably a bit large let me make it smaller let's say 400 by 300 that is looking a bit nicer what you can already do is add a bit more styling when you are creating either the label or the button for example what you have already seen is a label can have a background and this is a background color for example this could be white Adobe I suppose that's quite hard to see let's go with red that's definitely visible in here you have a few more options for example you could also update the foreground color let's make this one white if you spell this correctly this is also going to work like so now we have a label with white text and a red background color let me move all of this over multiple lines so it's a bit easier to read another option you have for customization is called the font this one well it determines the font the important thing here is this needs a tuple this Tuple should contain two parts we have the font and the font size if font size is really easy this is just a number that determines the size of the font let's go with 20. the font is the actual style of the text this one needs a string with the name of a font style to get all of the fonts what you have to do is from the Kinder you want to import something else this something else is called font once you have that you can print font dot families and don't forget to call it if you run a code now you can see all of the fonts that you could be using let me pick one at random let's go with jokerman on your system you probably have different ones but just choose whatever you want in here Joker man and there we have a font that's definitely visible if you install external font themes they would also show up in the list so we can extend this quite easily for the text there are two more things that I do want to cover the first one is called justify for this one we have the options right left and Center what this one is doing I think is quite obvious it justifies the text however if I run this right now the result would not be visible but the simple reason that right now the text box is this wide exactly as wide as the label because of that it wouldn't really matter if you put the label on the right on the left or right in the middle since the label covers the entire area of the background you are not going to see a difference either way however what we can do when we are specifying the text we can add a line break in here with a dash and an n and then type on another line if I run this now we have text that is centered if I change the center to left we have left Center text and this would also be right there we go now we have right center text although if you only have one line of text let's say only a label you wouldn't really want to use justify instead you would rely on the layout methods those make it much easier to place the label in a certain position although you can certainly combine different ways of making all of this work it's entirely up to you with that we have a whole bunch of style methods inside of the widget that's a pretty good start although if I run this this still doesn't look terribly good I guess we have quite a few options but they are still Limited but with that we are going to run into some problems for example I have a button if I want to style the background of this button with background and red if I run this now we would get an error we have unknown option background on top of that let me comment out the print statement at the top this one's getting a bit annoying if I run this now we are just getting in the error that button has no option background the same would apply to foreground it's not available which is very very annoying what is even worse if you look online for example for this website here you might have Googled how to give a button a background color and you found this you'll scroll down a tiny bit and you find a code snippet like this we can see we have foreground and background so maybe the problem in my code was that I used background but BG was the proper name let's try that one back in my code I want to use BG let's go with yellow but if I run the code now we get unknown option BG so what's the issue here you might have already seen what the difference is just check out this code and then try to figure out what the difference is the difference is that this person is only importing everything from tikhinter there are no ttk widgets and this is something I talked about all the way in the beginning in tikenter we have t k widgets and we have ttk widgets ttk widgets is what I have used most of the time and those are the much more modern widgets TK widgets I have used sometimes like text for example these TK widgets can use this kind of styling but they do look much more outdated while the ttk widgets look more modern but have a different kind of styling unfortunately a lot of websites online have written these tutorials a long long time ago so this tutorial here probably wasn't updated in just about a decade possibly longer I would definitely not recommend any of the courses be careful with that one so how can we style a button for that we need a whole new concept that is called style what that means is we have to create a style object let me save it inside of a variable right away we want to have ttk and style don't forget to call it this is going to give you a styling object that can apply styles to every single widget inside of tkinder I can actually use this right away we can use style dot theme underscore use body argument I want to use clam if I run this now we get an error on an option BG because I didn't get rid of this background now let me try this again and there you can see the button is looking a tiny bit different that is because of this clamp theme if you are on a Mac or Linux system this might not work to figure out what themes are available on your system you want to print style and theme underscore names don't forget to call it if I run this now on my system I have a native clam alt default classic Whistler and XP native let's use classic for the theme use and there we have a really old style button I think the theme they are using is Windows 98. however all of these Styles aren't very good so I'm not going to use any of them instead what I want to do is I want to have style and configure the style I'm currently using in here we need first of all a string of the widget we want to update and then we can set for example the background color choose something like let's say green the name of each widget always starts with a T and then the name of the widget for example a button would be a button t button would style all of the buttons in your app meaning now if I run this we have a button with a green background color it's kind of hard to see but it's definitely there I think if we change this to foreground this is much more visible there we go now our button has a green text in here we can also set the font let me copy it from the label I want to have jokerman and 20 like so now if I run this we have a button with custom text what you can also do is add custom styles for every widget for that you would have to add another kind of text whatever you want let's say new and then Dot and then t button this would create a new style for a button but you could apply it specifically to a widget if I run the code now the button would have the default style we would only get the styling back if I set a style for the button and this would be new DOT t button now for runders we have our styling back this style configure here is actually a lot more powerful for example right now we only have the text of the button colored but what if I wanted the text color to be different when I'm pressing the button or when I have pressed the button we can create a style dot map in here first of all we have to Target a certain kind of element in my case this is going to be new DOT t button after that we have to Target one kind of attribute this could for example be the foreground but now we are assigning this a list this list is going to be full of tuples inside of each Tuple we have the state and then the option for the color in this case for example if the button is pressed I want a button to be red however if the button is disabled then I want a button to be yellow if everyone is now and I press the button you can see the button is red if I inside of the button set this state to disabled then the button color would be yellow and we can't click on the button because it's disabled inside of the map you can then add more arguments let's say besides the foreground I also want to have a background color and I am very bad at spelling background for this one once again I want to have a list if the button is pressed then I want to have a ring background color another option here would be if the button is active I want it to be blue I should add a comma and now if I run this you can see that we have a couple of different background colors for the button they are quite hard to see because we are styling the background behind the button it's um well not ideal once again this kind of styling is really annoying to work with and very soon we are going to find much much better ways to work with all of this in fact let's do an exercise and then we are done with this bit what I want you guys to do for the exercise I want you guys to add a frame with a width and a height and give it a pink background color pause the video now and try to figure this one out first of all we have to create a frame this is going to be frame is equal to ttk dot frame the parent is going to be the window on top of that I have to give this thing a height and a width I'm going to use completely random numbers for width let's go with 100. finally I want to pack this entire thing if I run the code now we can't see anything because frames by default have no color the frame now is kind of similar to the button in the sense that we couldn't just add a background with pink in here we would just get an error instead what we have to do I'm going to cut this one out inside of the style we have to configure a new widget which means I have to use style dot configure for the widget I used to have t button but now I need T frame once I have that I can set the background let's go with pink if I run this now we have a pink frame with that we have covered The inbuilt Styling methods for tea Kinder this video is already getting a tiny bit longer so let's finish it here and for the next video we are going to cover different kinds of themes another way to style a tkinter app is to use themes basically what that means is tkinder has lots of external themes that you can import and those themes are going to style every single element of your app it sounds very simple and these themes are generally fairly easy to use however you might remember a couple of videos ago I talked about that external themes just aren't very good to illustrate why let me show you a list of all the available Tech inter themes here is a list of all the teak inter themes if you scroll down you can see preview colors and while some look okay I guess this one here looks fine there are some more I guess this one is passable but most of these themes look really old and outdated for example using this one here would just seem like you're making a Windows 98 app same for this one same for these down there most of these themes just don't look good at all on top of that the styling here is very limited for example if you want to change any of these options here for this theme you could maybe change some minor things but most of these are hard set so you're kind of stuck with whatever you download which somewhat defeats the point of styling because you want to have your own app I wouldn't recommend any of these but I do want to cover if you've seen some other people's code what is broadly considered the best looking theme if I go all the way down is called Azure if I search for it we have Azure and we have Azure dark this we can get from GitHub let me open it really quick in here you can see we have a fairly good looking theme it also tells you how to use it and this is quite a nice theme to work with to use it you first of all have to download it which you can do up here you have to click on code and then download zip this is going to download the entire thing and this theme you have to unpack if I open my download folder here we have Azure ttkv Main this I want to extract all to the current folder and then we get this folder here Azure ttk main theme and then there we have a couple of things although the only thing that we really care about is this theme folder here because in there we have a dark a light theme and then some extra information inside of for example light what we really have in here are a bunch of images for example here we have the radio accent which is a blue dot same with 40 on accent this is just a button which is also telling you why this is quite Limited in terms of customization but at the very least we have a good looking theme in my case what I have done I went to the main folder and copied the entire thing after that I have another folder this one has an app I'm going to open this in a second but I want to paste all of this in here this is going to take a second there we go and rename it to let me just call it azure inside of this Azure we now have the theme inside of the theme we have dark and Light what I should have mentioned this Azure TCL is really important also if you're using this for your own app you have to include a license I that's just good practice let's open the app and let's Implement all of this the app I have just opened is what we created earlier this slightly more complex layout although I do want to change the name this shouldn't be class based app anymore let's call it theme based app using the theme is actually incredibly simple all we have to do inside of the init method of the main window so wherever you create tk.tk you want to do two more things before you create any kind of widget you want to use the theme for that you want to use self or whatever your main window is then TK and then call inside of this you need two arguments the first one is called source this tells the kinder to import something the next argument now is going to need a path the path that we want is inside of azure and azure.tcl this is the file we want to import which means the folder I want to go for is called azure in there I want to have Azure dot TCL if I run this now we can't see anything but we're not getting an error message that's what I was looking for to actually use this beam we have to use self again then dot TK and then call now we need two arguments again the first one is called set beam after that we have to decide between a light theme and a dark theme if I use the Dark theme now we can see some major Improvement although it's not perfect yet let me expand it a tiny bit you can see most things work okay but we have to change a few things the sliders are the worst part right now but things are definitely getting better the main issue we have right now is inside of I think all of this happened inside of menu inside of there we have create widgets and further down there we have the menu slider one and menu slider two both of those are ttk scales the problem we have with this theme right now is that we are sticking them to all four sides this is causing a problem the theme only really works if you stick the slider either on the horizontal or on the vertical axis but not both now if I run this this fixes a slider and that's looking much better sometimes when using external themes you have to be a tiny bit careful although besides that instead of the Dark theme you could also use a light theme and there we go we have a different kind of theme that probably looks a little bit better I know it's quite subjective I guess one more thing that we can do is all of the buttons look quite close together they should have a tiny bit of padding that is very easily done inside of create widgets we are placing all of the buttons here all we have to do is give them a tiny bit of pad X let's go with 4 and Pad y should also be four now if I run this again now we have a tiny bit of padding between the buttons and if I increase the size of this window here we go this is looking much better and that's kind of it for themes all of the themes work either in this way or in a very similar way and while this can give you some decent results I really wouldn't recommend using it number one for this theme you either have a light color or a dark color and that's all you can really do for customization on top of that since all of these elements are simply images this also slows down performance you notice this in particular when you try to resize the app let me show my mouse actually and let me try to resize the app really fast you can see the thing really struggles and cannot keep up at all and I think that's really bad user experience as a consequence while themes can be a good way to get started I just wouldn't recommend using them at all they are much better ways to style your app there's one important topic that I want to cover before I continue and that is colors so far I always use the tkinter default colors those are for example red white blue pink orange yellow I think they're about 10 in total which well is quite limiting to create any color that you want you would use what is called hexadecimal value system it sounds complicated but it really isn't that bad hexadecimal numbers go from 0 to F that is going to sound confusing but the numbers look like this we go from 0 all the way to 9 and then we continue with a b c d e and f with zero being the lowest number and F being the highest number basically just imagine that these letters here are numbers in this kind of numbering system the reason for that is that with the system you can express a much greater range of values with fewer numbers you see it quite often actually when you work with computers to turn this into color you have to combine three of these numbers with the first value standing for red the second one for green and the final one for blue this might look something like this we have 0 8 and F this means that we have zero amount of red because zero is the lowest value and in this case it means we have the absence of red next up we have d8 this one is roughly in the middle of the system which means we have more or less 50 of green color although this is not an exact number here finally we have F and this F stands for blue and is the highest number in here which means we have one hundred percent of the blue color finally to indicate that we are using hexadecimal numbers you want to add the hashtag symbol in front of this if you add this into tkinder as a string T Kinder is going to recognize this as a color let's have a look for the code I am importing tkinder and ttk I am creating a window then I'm creating three labels and place them right away using the pack method finally as always I'm running main Loop so we can see the app this is giving us an empty window because none of the labels has any text although they don't need any kind of text because I only care about the colors here to give it a color as always we need for example a background for this so far we always use something like red with that we have a red background color however now that we have learned about hexadecimal colors we can set the background to the color I used was hashtag 0 8 and F if I run this now we are getting a very bluish color this should make sense because we have no amount of red and we have a huge amount of blue that way you would expect this color here to be quite blue although since we do have a certain amount of green that's the eight this is not going to be a complete blue I can actually demonstrate this if I copy all of this I could for example change the 8 to an f and the F to a zero what would we expect now for the color well if I run this again we are getting a pure green because for this one we have no red and we have no blue the only color that we have is green and we have the full amount of green so with that system you could create basically any kind of color now it's going to be really annoying to just experiment with each of these values and nobody actually does that instead what people are doing is they use some kind of editor and they all have some kind of Color Picker in build for example here I am in Photoshop if I click on the color you can see down here we have a hexadecimal color system although this one looks a tiny bit different compared to what I have just used instead of three colors we have six colors let's talk about that one really quick hexadecimal color values are always either three or six digits long the one we have just seen looked like this we have one digit for red one digit for green and one digit for blue besides that we could also specify two digits for each color two for red two for green and two for blue this second system here is a lot more precise because we have twice as many values for the red color for example as would have in this system which gives you well a whole lot more options when you use basically any color editor online this is the system they are using they basically always have six colors but you don't have to use it if you have a simple app this system here is perfectly fine back in Photoshop you can see right now we have FF so we have a pure red color and then 0 0 for green and zero zero for blue if I move around you can see these colors change and you can create basically any kind of color value in total I think this gives you about 16 million options definitely enough for any kind of style that you want if you don't have Photoshop you don't have to worry because Google has a Color Picker inbuilt as well in here you can simply move a color around and get basically any kind of hex value that you want this is the value you're always looking for which means I could literally just copy the value from this return to my code editor and paste the color in here run the code and there we go we have the same color we just created which makes all of this quite efficient because you can now pick literally any color that you want Let's do an exercise on this one I want you guys to create a brownish color using hexadecimal values you could use a Color Picker for that although just to practice the system try to figure out the numbers without using an editor it should be fairly easily doable but both approaches are going to be fine pause the video now and try to figure this one out let me copy the final label here and place it below the exercise for this one I want to work with just three digits let's start with f 0 and 0. this is going to give us a pure red because we only have F and then 0 for green and zero for blue which means we have a pure red this we now have to make darker to get some kind of brown the best way of doing that is by increasing the amount of green instead of zero let's go with an a if I run this now this is giving us a bit of an orangey color if I reduce the amount of green let's say 2 is 6. this is definitely getting brownish although right now it's more of a dark orange if I put this to a green we are definitely getting closer I guess if I increase this a tiny bit more to a five this gets close enough to at least a light brown and if I reduce the amount of red from an F to let's say c this is very much a brown color doing all of this inside of Google gives you much easier results you can just click on a brownish color here something like this and you have a lot of different brown tones you could work with before I move on there are two more things that I do want to cover and that is white and black right now we always set a color but how can we get a white and a black color those two are really easily done I can just copy this black is the absence of all colors which means 0 0 and 0. running this gives us a black color and a white color is the opposite we have every color 100 available which means f f and f with that we have white if you have the same color value for every color you always get some shade of gray let me duplicate this if I change 0 0 and 0 to 888 we're getting a grayish color with that we have covered all of the colors let's talk about styling modules so far I mostly talked about stuff that you shouldn't do in teak hinder in terms of styling this is going to change now because external modules are really good to add style and to use it easily these external modules build on top of the Kinder and improve certain parts of it most of them are styling but they also add a few more extra functionalities custom tkinter and ttk bootstrap are the really common options I'm going to start with custom tkinter because this is what I think is the best option for tkinter in terms of styling it's also the one I really like to use custom taken that works by using the same widgets as ttk but it lets you customize all of them easily on top of that there are also some additional widgets and every single widget has a dark and a light mode that way you can basically create any kind of style that you want before I jump into the code there's one more thing I do want to cover and that is that custom tikkinder has a really good documentation decide with all of the code is looking something like this although if you scroll down you can already see some demos for the dark and the light mode all of these elements are dynamically generated meaning you can customize a lot of different things here on top of that if you go down a tiny bit further you have the documentation in here on the right side you have all of the different widgets and all of the elements of custom tkinter if I for example click on ctk label there we have an example of the code we have all of the arguments and then we get a bit more information this is literally all we need and here you can see for example we can set the text the width the height the corner radios a foreground color a text color and a font and all of this is very easily implemented I suppose the best example here would be ctk button on the right this is just a simple Button as you can see here you can customize every single element of this button quite easily if you contrast this with standard tkinter well you have to create a style object and in there you have to create a map none of this is necessary here you could simply set a foreground color a hover color a border color a text color a text disabled color basically whatever you want there are lots of different options in here so let's actually create a basic custom teakinter app although for that first of all we have to install custom t Kinder because it doesn't come with python by default but that once again we either need the Powershell or The Terminal depending if you are on Windows or on Mac OS in my case I'm using the Powershell so I need pip install custom tkinter although in my case I already have this one installed so it's not doing anything if you were using Mac OS this would be pip free install custom tkinter here we have a completely empty python file the reason why I have nothing ready is because we are not going to use any of the tkinter widgets we have used so far instead I want to import custom tkinter this is going to be kind of annoying to write I usually abbreviate this as ctk the best comparison here is that all of this is fairly similar to TDK in the sense that inside of this ctk module we have a ton of widgets that we can use for example we can use this to create a window this is going to be another window that I want to store in a variable and then here we need ctk and then CT or upper score and then K and lower score don't forget to call this once we have that we can run the entire thing with window.main Loop if I execute the entire thing we already get a window that is looking significantly better a really important thing that you do have to understand is that this ctk window inherits from the tkinter window as a consequence we have all of the default arguments we could use for the window for example we could set a window dot title let me call it a custom tkinter app that is some terrible spelling that looks better if I run this thing now and increase the size we have a custom tkinter app although I just realized there's another typo in there that is looking better besides that we can also set window dot geometry in here as always we need a string with a number let's go with 600 by 400. running this now we get a much larger window with that we have a window next up we can create some widgets for example if we want to create a label I want to store this in a variable all we need here is ctk and then ctk with label just like with ttk we need the master which in my case is going to be the window after we have that I can set some text this can be a ctk label this is going to return a widget and this widget I have to place on the window with some kind of layout method let's go with pack if I run this now we have a ctk label so far we have some very basic functionality this ctk label gives us a ton of options for customization just for reference here is the documentation what we could set for example is the corner radius the foreground color and the text color I guess the foreground color here isn't the perfect name this is essentially the background color for this one we can either use a tuple with a light and a dark color or we can use a single color that is called transparent all the colors here we would either use hexadecimal color or one of the inbuilt tkinter color names which means I can set an F G color and set this to red if everyone is now we have a red background color on top of that I can set a text color let's go with white here with that we have a white label also I'm going to put all of this over multiple lines that's going to make everything a bit easier to read another useful thing that custom ticket has that ttk actually doesn't have is Corner radius this one determines the corner radius I think that's quite obvious if I set this to a 10 we now have rounded corners for this label with that we have a label next up let's create a button this we create with ctk and then ctk button what you always have to be aware of you have C and T in capital letters and then the K is a lowercase letter now this button like the label is first of all going to need a master which is going to be the window then we need some text I'm going to call this one a ctk button this button I want to pack if I run this now we have a ctk button we can click on it but nothing is going to happen this button now is very easy to customize for example if we now set an FG color or this one let's use an hexadecimal color we can use f f and 0 with that we get yellow on top of that we can set the text color and for this one just to stick effects of decimal colors I want to have a black color so I'm going to go with 0 0 and 0. now we have a yellow button although if I hover over it we get this dark blue that we can also change although again I want to do all of this over multiple lines so it's a bit easier to read to change the hover color we need well have a color for this one I want to have a slightly darker yellow we started with FF and 0 to get a darker yellow this should be let's go with a a and 0. if I run this now I can hover over it and we get a darker yellow other than that the button works like in TDK which means we can add a command this could for example be a Lambda or literally any function but in this case I just want to print e button was pressed I forgot the semicolon now this should be working and if I click on the button we get a button was pressed now that we can execute a command we can work on something really cool in custom t Kinder and that is to change the theme between light and dark mode by default custom TK enterp uses the default theme of your system in my case if I run the entire thing again if I show you the settings for Windows like this right now my system setting is dark if I set this to light things will need a second to load but now you can see the app automatically switched to a light mode if I go back to dark Banks need a second again and there we go we have a dark Style app again which is really cool for custom tkinter because it already knows if the user has a dark or a light mode and it and it adjusts for that although you can customize this yourself if you want your app to run in light mode or in my case I want the app to run in light mode once I press the button all you have to do is get ctk set appearance underscore mode you can either set light or you can set dark dark is the one we already have so I want to have light now if I run this and I click on the button we have light mode although if I click on it again nothing is going to happen what is even better is that every single color you can specify usually isn't one color but a tuple of colors let's say for the label if we have a dark mode I want this to be red but if we have a light mode I want this to be blue what you simply do in this way you have a tuple the first argument is the light color the second argument is the dark color which means if I run this again right now we have the dark mode so the color is red for the label but if I click on cdk button now the label foreground color is blue because we have the light mode this system works with every single color for example for the text color I can have white for the dark mode and I can have let's go with black for the light mode if I now click on the button now we have black text and a blue background color exactly what we specified in here if you understand all of this so far you understand the basics of custom tkin term all you really have to do is look at the documentation and then pick and choose whatever widget you want on the right side you have ctk widgets the one I just used was ctk then we have ctk button and ctk label we also have a ctk frame that works like a ttk frame although this one has a background color besides that we have a text box we would have a switch although there's no image we would have a scroll bar also no image let me find one with an image we have a slider this one also doesn't have an image okay some bad luck but let's play around with a few more this system here doesn't really change if you found this series so far you already know how to use all of this let's say for the next part I want to create a frame this one is going to be ctk and frame although I forgot ctk dot ctk frame but this one as always we need a master which is going to be the window if I pack this Frame now you can see this already has a background color if you don't like it you can simply set the FG color to transparent that way it disappears this Frame is going to work like any other frame we have seen so far which means you can add elements in here let's say I want to add a slider in there this we create with cdk and ctk slider the parent now is going to be the frame and let's pack it right away slider.pack there we go now we have a slide end here and this one works like any other slider just to visualize that this is indeed inside of a frame let's remove the background color now we can see that there's a slight background behind the slider if I'm adding some padding let's say pad X is 20 and Pad Y is also 20 now all of this is much more visible what you can also do is combine custom tkinter with standard tkinter for that though I have to import import tkinter SDK and I want from the counter import TDK it is totally fine to combine ttk widgets with custom tkinter widgets although most of the time the ttk widgets especially when you put them right next to the custom TK inter widgets they start to look really bad so generally I wouldn't recommend doing it however what you might want to do is use the T content variables those work perfectly fine with the custom taken that variables for example for the label I can create a let's call it a string VAR which is going to be TK and string VAR order value here we could set a custom string this string VAR we can set as the text variable for the label so string VAR exit in here and now we get a custom string for the label although strictly speaking custom tkinter also has inbuilt TK inter variables we get those by simply using ctk and then we can use stringvar invar and so on which means if I have ctk instead of TK we're not going to see a difference right now the ctk and the TK variables are identical although that might change in the future if you are using teak into variables and using custom tkinter use the custom teak into variables with that we have all of the basics of custom tkinter it really doesn't get that much more complicated which means we can do an exercise and then we are done what I want you guys to do is going to look something like this all the way at the bottom we now have an exercise switch this one looks absolutely horrible but if you can make it look this horrible and custom tkin term you definitely know how to change a lot of different things which means you have to look at the documentation use the custom tkin test switch and then make it look something like this pause the video now and try to implement this one yourself we have to create a custom tkin test switch although first of all let me add an exercise text in here I want to create a switch and this we create with custom tkinter and then ctk switch this one first of all needs a master so window is the default argument here next up I want to have some text this is going to be the exercise switch to get started this is all we need which means now I want to pack this switch I have made an error and you can already see I made a typo the K here should be lowercase which means CT lowercase k now let's try this and there we go now we have a basic switch that by default is looking pretty good we want to make this thing look absolutely horrible so let's talk about how to customize this thing and to customize anything accustomed to kinder the first step should always be look at the documentation here's the documentation I still have the slider open but I want to look at ctk switch this one here this one has a huge amount of arguments we could be working with I actually only used a small amount of them you could make this look even worse I guess we can start with the colors I want to have a FG color of red don't forget the comma Now if I run this we get some bits of red to get the other color we need what is called progress color this in my case I want to be pink now we have red or we have pink I guess FG color sometimes he is a bit misleading it's basically the background color but you get the idea also if you wanted to you could add a tuple in here with red for the dark mode and let's say blue for the light mode if I run this now we have red as a default but if I change this to the light mode now this is blue so once again a tuple always works here to get the light mode color besides that if you want to change the color of the actual button you want the button color I'm not sure if button is the proper name but you get the idea in my case I change this one to Green now we have a green color for the button although if I hover over it it becomes white that I also want to change and for that we have the button our color I set this one to Yellow now if I run this again and I have over it it's yellow you can already see we have a ton of customization here all of the colors can be changed and this wouldn't really be doable if we used a theme because this one relies much more heavily on images so those couldn't be easily changed what we can also do since all of this is dynamically generated Wicket set is switch with if I set this to 10 you should already be able to see what's going on now we have the width of the thing being much more narrow and if I click on it nothing is going to happen although if I change this to let's say 60 now you can see we have a much wider switch you can also set this switch underscore height to let's say 30 and now you have a huge switch thingy if you want to make this thing look really horrible you can set the corner radius and this changes the corner radius of the button if I set this to a 2 now we get a very thin slider although it all still works perfectly fine I just made a mistake I just realized when we set the corner radius we are setting the corner radius both of the button and the corner radius of the background these Corners here at this corner as well so with that we have custom decanter or at the very least the basics of custom tea Kinder if you know ttk already using custom decanter is really easy basically all you have to do is replace ttk and then the widget with custom TK and then ctk and then the widget name on 90 of the time this is all you have to do to understand custom TK enter a little bit better I want to convert a ttk app to a custom tkinter app the app I want to convert is the more complex layout app I created earlier if I run this we get this app here I want to convert all of this to the custom tkinder style this isn't going to be very difficult and it's not going to take very long because of that I want this to be an exercise right away I want you guys to convert the app to use custom tkinter it really shouldn't be too hard so pause the video now so pause the video now and try to figure this one out to make sure we are not using any default decantera functionality I am going to comment out the import for tkinter and ttk instead I want to import custom tkinter as ctk if I run this now we are going to get a lot of error messages we have to go through this thing one by one and fix things starting down here I want to change the title from class based app to classbased app with ctk with that we have to look at the app itself so the main app or this one I don't want to have tk.tk instead I want to have ctk dot ctk that is actually all we need inside of the app because this one doesn't actually do very much next up I want to work on the menu for this one we are inheriting from a frame this I want to change to ctk and then ctk frame inside of the init method for this one we just have basic stuff so this can stay as it is although inside of create widgets we have to make a couple of changes first of all the buttons are very easy to update instead of ttk I want to have ctk and then ctk button for the menu slider we cannot use scale anymore this one doesn't exist in custom tkinter instead what we are using for this one is called a ctk slider which means I want ctk and ctk slider after that we have toggle frame this is going to be a frame so ctk dot ctk frame inside of there we have a menu toggle 1 and menu toggle 2. check button doesn't exist in custom tkinder but we do have a checkbox and that's basically the same thing I want to get rid of those and use ctk and then ctk check box and that should be all we need finally we have an entry widget this one does exist in custom tkinder so I want to have ctk Dot ctk and entry the rest is just layout all of this can stay as it is because it works with custom tkinder like it would work with TDK I can minimize the menu we should be done with this one and that's the most amount of work inside of main we have one frame this I want to change to ctk and then ctk frame the rest in here can stay identical finally we have the entry in here as always I want to change the TDK frame to ctk frame inside of this one we are using a label this we can change very easily to ctk dot ctk label the same for the button this should be ctk dot ctk button with that we should be nearly done although if I run this now we get one error message and that is that Orient inside of the menu doesn't exist the reason for that if I open the documentation a ctk slider we don't have Orient instead we have orientation a very easy thing to change instead of Orient we want to have orientation let's try this now next up we have a typo There's No ctk Label I once again made a typo let me minimize the menu the error message happened inside of entry in here this should be ctk lowercase k let's try this now there's one more error message and that is that custom decanter for label doesn't have background although if I remove this one it should be working now there we go although well it's not ideal yet we do have a couple of things that we want to work on most importantly the sliders aren't great yet but that is very easily fixable all we have to do if I minimize the app and to entry inside of the menu when we are placing the sliders that happens down here I want to remove the East and West now if I run this the sliders are looking much better and let me increase the size a tiny bit here this is all coming together much better although right now the sliders do look quite a bit thin if you want to make them a bit wider you can do that quite easily all you have to do is go to the sliders and in here set a width let's go with 15 possibly a bit too thin I guess 20 is better yeah this one looks much nicer if I maximize the entire thing it still works next up for the buttons I want to have a tiny bit of padding which means when I'm placing the button using the grid method all I really have to do is to add pad X of 4 and Pad y of 4. with that we have a bit of padding and we are starting to run a bit out of space but I hope you see the potential of custom tkinder because all of this is starting to look much better than defaulty kinder most importantly it is really easy to change all of the elements you see here can be customized and if you have a bit of experience you can actually create pretty sophisticated guis with that that actually look modern another useful tool to customize tkinder is called ttk bootstrap this one like custom tkinter is an external module that you have to install ttk bootstrap is an external module that has really good theme support what that means is well for custom tkinter we customized every widget individually or TDK bootstrap instead we are creating one theme and applying this theme to every single widget while this means that we have a bit less control it makes it much easier to style widgets although before we can use it we have to install it as always this either happens in the Powershell if you're on Windows or in the terminal on Mac OS to install it in my case on Windows I would need pip install TDK bootstrap if you're on the code now we get a short message and then we have it installed if you're using Mac OS you would use pip 3 install ttk bootstrap and that would happen in the terminal the code I am going to start with is looking like this we are doing the usual Imports in window creation the really important bit is this we have a label and then three buttons finally we are running the entire app so nothing special if I run this code we can see we have a basic app with three buttons and a label to style this we have to import ttk bootstrap which means import ttk boot strap and just by importing TDK bootstrap we are already applying a new theme to our app meaning if I run the code now we can already see we have much nicer looking buttons although to actually use ttk bootstrap what you usually see is that people import it as ttk the reason for that is that tdga bootstrap basically works like ttk in the sense that all of the important widgets like label button and so on exist inside of it and we are just accessing them except if we are using ttk bootstrap they all look much nicer because of that we don't need the Kinder ttk at all if I run the entire app now everything still works as before there's only one change that you absolutely have to be aware of and that happens on this line here when we are using ttk bootstrap we don't want to use tk.tk instead we want to use ttk Dot window if I run this now we can see we have a different kind of title bar with a custom icon but other than that not much has changed the reason why we need this window is because with that we can add one more argument and that is called theme name this is where the actual magic happens for ttk bootstrap because in here we can for example add Darkly run the code now and they can see we have applied a custom theme to the entire app another thing that we could be using is called Journal if I run this now we have a completely different style if you want to know all of the available custom themes you have to look at the website there's a full list let's have a look at that one actually the website is looking like this and in here you have lots of explanations in terms of what you can do we can already see a couple of styles here although to find all of the Styles at the top you have to go to themes in here you find one theme that is called litera this is the default theme on the left side you can see light themes and dark themes let's have a look at all the light themes and here we have Cosmo we have flatly we have journal litera and a few more quite a few more actually besides that we also have the dark themes here we have solar Darkly Cyborg and again a few more all of these themes you can use immediately on top of that if you want to create your own theme you would have to go to ttk Creator and in here you have an app that you can use to create your own custom theme I'm going to cover that in the next part although before that there are a few more basic things we have to cover the most important part is if you look at this app here you can see we have lots of different styles we have primary secondary success and so on and all of these are different colors inside of a theme but right now if I return to my code and run the entire thing all of the buttons have the same color for example I might want to have the first Button as red then another button could be let's say a warning the final button could be some kind of green button how could I get these colors to learn how to do that the best way is to start with the documentation here we are again the important part you want to look at now is called getting started the installation we have already covered next up there is a tutorial this covers all you have to know about ttk bootstrap since the entire module isn't terribly difficult this is quite a short page which means this could be a really good exercise read through this website and try to understand how to style individual elements using ttk bootstrap so pause the video now and try to figure this one out I guess a quick solution here would be using the boot style covers just about everything this allows you to give certain widgets a certain kind of style for example One widget could have the Style's success another widget could be info and well you have quite a few more themes if you scroll down a bit more you can see all of the themes here you have primary secondary success info warning danger light and dark all of these can be passed into the boot style to get a certain kind of color how you pass it in there you can do in two ways you can either import from ttkbootstraps.constance import everything or if you go a bit further down you can use a string that looks something like this the module is really flexible here so choose whatever you like the recommended option you can see it down here is the dash this one here this is the one I'm going to use as well in this one you always specified the color first and then if you want to have only the outline or the full color I haven't covered this yet but you can see it up here quite well we can either have a button with a solid color or a button only with the outline the Sonic color is the default the outline you get if you add outline in the style with that we have all we need although I guess one more thing that I do want to cover to actually get a preview of how all of this is going to look you can look at themes and I'm looking Journal right now which is a light theme in here we have Journal you can see we have the primary secondary success info and all of the other colors that way you have an idea of how this is going to look in the end so here I am back in the code and let's start by coloring in the first button I need the boot style with a string let's call this one danger now if I run this the first button has a different color now it's orange instead of the default red if you only want to have the outline you would add a dash and then outline now if I run this we only have an orangey label around it and if you hover over it like so then you can see the full orange color for the warning you can add a boot style of warning that is horrible spelling that looks better now the warning is more yellowy finally for the green one I wonder if a boot style that is called success running this one gives me a green button while I only use buttons these kind of styles would work with literally any widget if I return to the documentation you can see we for example have a checkbox we have a progress bar we have a slider we have a toggle down here we even have a calendar we will learn about that later and we have scroll bars all with these colors here every single aspect of the app will be styled appropriately all you have to do is use the bootstrap ttk module and then use the normal widgets that way you already get all the Styles you want I guess on top of that you have to set the boot style but that's a fairly small task since all of that is fairly simple we can do one more thing here's the app we created earlier with the more complex layout and I want you guys to style this entire thing using the TDK boot style module make sure to use a couple of different colors and pause the video now and implement this one yourself for this one I want to comment out from tikenter import TDK instead I want to import ttk boot strap as ttk just by doing that the app already looks quite a bit better although we can make a few more changes first of all inside of the app I don't want to use tk.tk instead I want to use ttk dot window doing that gives me a much smaller app but well we're getting a different title bar although once we have that inside of this super dot init method we can now set a theme name this theme name could for example be Darkly Ebon I usually like quite a bit or to stick with what we have already seen we could use Journal this one would look something like this other than that we don't really have to make too many changes because we are still using ttk and the regular widgets although I guess what we could be doing when we are creating the menu not the init but in create the widgets for example for the buttons I could use different styles for example I could have a boot style for menu button one that could be Danger that makes the first button orange I could use boot style for the second button let's call this one success now we have a green and an orange button for the third button I want to have let's use dark and out line running this one we are getting a third button although I don't really like the styling here but well you can see different kinds of styles I think adding a tiny bit of padding here would make a lot of difference when I am using the grid method to place all of the buttons I want to add pad X off for and Pad y of four like so and this is a minor Improvement I think this is looking a little bit better although the outline here doesn't work too well I'm just going to remove it like so this is definitely looking better next up we can also change the menu slider once again for that we need a boot style let's use one we haven't used yet for example back in the app one that I haven't covered yet is called info we also haven't covered secondary let's use those two the first slider should have the style info the second one should have this style secondary if I run this now we get two sliders one that is dark blue the other that is more grayish after that we can style the check button I'm only going to cover one because this is probably starting to get repetitive and here now we have one check button being blue the other still being red I think you get the idea so I'm gonna stop this but I think the app already made quite a bit of progress although there are a couple things you want to be aware of the most important one is that you still have the basic ttk widgets which you see in particular here for the entries both of those are just labels with a background and titigate bootstrap doesn't style those if you wanted to have a better color here you would have to use a hexadecimal code to make a similar style compared to these buttons here which certainly is doable a really cool part of ttk bootstrap is to create custom themes this is very easily done because TDK bootstrap gives you this kind of app where you can pick an existing theme let's say Journal I have already used and simply change any part of it for example you could give it a different main color let's go with blue you could give it a different background the default is white let's change it to a really horrible green there we go you can literally change whatever you want this is also very easily imported into any app you're using to get started there's only one thing you really have to do you start by using either the Powershell or The Terminal the command you need you can find in the documentation let me open it really quick here's the website for ttk bootstrap you want to go to themes and in there is creator this one gives you a command pythonm ttk Creator this one opens this program here let me copy it and return to the Powershell and simply paste the command in here if a run is now we can see we have the app you have just seen a really important part do not close the Powershell or The Terminal this would close this program here as well once you have it you can simply give your theme a new name let me show my mouse folder of this actually in the top left you can set a name I'm going to call my theme custom after that I can set a base theme let's go with simplex it really doesn't matter what you're starting with with this one you can now basically very easily change whatever colors you want let me use some colors that are very easily visible here we have a pink color for primary and for the background I want to use a visible color let's go with pure black that is going to be really annoying to see I guess we should make this a tiny bit less black let's go with a darkish gray definitely an improvement but this is absolutely something you have to play around with for a bit all I really care about for now is that you can see how easy this thing is to use to use it all you have to do is click on Save and then you get the message the theme custom has been created although nothing else fortunately that is because we don't need anything else because with that you can use this custom theme like any other theme in ttk bootstrap for example here is the app we styled in the last part the theme name we got here inside of the app class we use Journal so far if I change this to custom run the app again here we have the theme I just created it's literally as easy as that to use the theme other than that what you can also do in the top left you can set reset to get back to the starting point if you really don't like what you created you can also Import and Export your theme all of that works really easily so with that we can create our own themes there's one more thing that I want to cover for ttk bootstrap and that is some extra widgets that come with this module the app we are going to create is going to look something like this in here we have a couple of elements the top part is a scrollable widget this one comes by default so you don't have to create it next up we can show a toast this one gives you a toast in the top right after that we have a tooltip then we have a calendar where we can pick a date and get the date this one only prints the date but you get the idea after that we have a better looking kind of progress bar finally we have what is called a meter this one is looking really fancy all of these switches we are going to create in this bit to get started I already have a couple of imports at the top I am importing tikenter SDK and ttk bootstrap note here I am importing TDK bootstrap sttk not tkinter after that we have the window and we are running the entire thing finally we are using the Darkly theme with that we can start creating some widgets the first one is called scroll frame which creates a scroll level frame to understand this one in detail I would recommend to read the documentation let's open it actually once again here I am on the website of ttk bootstrap and you want to look at API in here we have a couple of extra parts that are really useful the one I want to look at right now is called scrolled module and here we have scrolled frame and scroll text scrolled frame is the one I really care about this one gives you no picture that's very annoying but it gives you some code snippet on how to use it first of all you have to import a specific subpart of ttk bootstrap although this one is basically just a frame so you can create it like any other frame you can pack it on whatever container you want and then the important part is you want to populate it with some kind of Widget the only thing you have to do is set the parent or the master of these new widgets as the container widget you just created then these widgets are going to show up inside of it back in the code the first thing that I have to do is from ttk bootstrap dot scrolled I want to import scrolled frame if you run a code now we cannot see an error that's a good sign that I didn't make a typo now with that I want to create let me call it a scroll frame this is going to be a scrolled frame as always this one is going to need a parent which in my case is going to be the window I am going to pack this straight away using the pack method for now let's set expand to true although if I run this all we can really see is a scroll bar since we don't have any widgets yet this isn't going to do very much to account for that I want to create a whole bunch of widgets this I do with a for Loop for I in range 100. I want to create a ttk label and I want to create a ttk button both of those have this grow frame as the parent which means scrolled frame is going to be the master and after that I want to create a text that is going to be an F string that shows us the number which is going to be I this I we're getting from the for Loop for the text I think I chose label with I and then button with I after that we have to make sure that we are packing these widgets and then they are going to show up let's run this now and there we go now we have a scrollable thing that we can work with I should have probably said fill to both so this thing actually covers the entire window now if I run this here we have scrolling that works for all of the elements although you can't see if I scroll really fast the graphics here really aren't working too well so I would generally recommend to create your own scrolling system I have covered this earlier on if you skipped it I suppose what you can also do for the label and the button in the pack you can set fill to X that way they are covering the entire horizontal space now the reason why I would recommend to create your own scrolling logic is because all of this is quite Limited for example what if you wanted to have if I'm drawing this if you want to have some kind of setup where you have one widget covering this amount of height and then you have one widget on the left for the label and then the button on the right this unfortunately you couldn't easily do inside of this setup something you might want to try is create a separate frame with ttk and frame and the scroll frame as the master the label and the button would then be parented to this one which means here I want to have the frame and then I want to set this side to left finally I want to pack the frame if I run this now this is kind of working although you can see we're not filling the entire space we could try to set fill to X or to both although if I do that all we're doing is setting the frame on the left side you might be thinking this is going to be fixed when we set expand to true but it doesn't we still get the same result this happens because of the drawing logic here to get proper scrolling logic you unfortunately have to create your own kind of widget but okay next up we get a much more useful widget and that is called a toast a toast is a small notification for example in the bottom right of the window you can get a message with some extra information this is what a toast creates this one we once again have to import like the scrolled frame we do this with ttk bootstrap dot toast import toast notification I can already see there's a table here but other than that this is okay to use this widget we first of all have to create it and store it inside of a variable let me call it toast and toast notification this one doesn't have a master but we do need to set a title let's call it this is a message title besides that we also need a message itself I'm going to call one this is the actual message finally I want to put all of this over multiple lines because we need one more argument in here that would be the duration this tells you how long the toast is going to be on the window the number you need to specify is going to be in milliseconds meaning if you want two seconds you would need two thousands one second is one thousand milliseconds that is all you need to get started the way you are using it is you get the variable that stores the widget and then run show underscore toast if I run the app now you can see in the bottom right we have this is the message and it disappears after two seconds although you can see that the entire app disappeared after we have used this is a bug that happens if you use this show toast by itself if I remove it we are back to the normal window essentially what you want to do is to run this toast only if the user presses a button or does a certain kind of action only then you are calling it I want to add ttk and button the window is the master for the text I want to have show toast finally the command is the important bit here this is going to be toast and show underscore toast I want to pack this widget straight away without any arguments because we don't need too many now if I run this we have another button show toast if I click on it we now have the message and now the window doesn't disappear anymore when the toast disappears this covers the basics I guess we can cover a few more arguments in here but other than that this doesn't become any more complicated we can set a boot style in here this could for example be dark let me run it now and show the toast now this is dark we could also set this to warning and now we get a yellow kind of button or well not button but a warning the one thing you want to be careful about is that this boot style here doesn't support outline if I run this again click on show toast we now get an error that this thing doesn't have an attribute create outline frame Style you can only use the color there's no other style available I'm going to stick with dark I think this one generally looks the best finally there's one more important thing and that is you can set the position you have X petting y petting and then the start position the start position is the really important one in here you can set something like North East North West South East or Southwest these positions would refer to the different corners of your screen for example Southwest would be the corner down here Southeast would be down here we have Southeast South West then we have North East and we have North West these are the different Corners you can start with and then you are using X padding or white padding to get a bit of offset for example if you want to start with the Northeast you would add an e in here and then you would use these numbers to get an offset let's actually play around with that for X padding and Y padding I want to start with zero so we can focus on the corner I want to start with North East if I run this again now I click on show toast now the message is in the top right if I set this to North West run this again click on show toast now it's in the top left I'm going to stick with Northeast and for the numbers I now want to have 50 and 100. this means if I show the toast we have a hundred pixels from the top and 50 pixels from the right that covers everything there has to know about toast if you want to read up on it you can look at the documentation you can find this here you want to look at the toast module and this has a couple more arguments as opposed to one I didn't cover is the alert this one plays a sound if you are playing it by default it is false and I think that's a better way to go on about it but if you want your program to be annoying do play a sound ready next up we can create a tool tip this is going to be a very simple message that shows up once we hover over a certain element like a button for example in fact let's create a button right away with ttk and button the master here is going to be window for the text I want to have tool tip button to make this a bit more fancy I want to set a boot style let's call it warning this button I want to pack right away if I run the app now we have a yellowish orangeish button I think the entire thing starts to be a bit crammed so I'm going to add a bit of vertical padding pad Y is going to be 10 for both of the buttons running this now this is looking a little bit better this button I now want to have a tooltip once we hover over it for that we need one more widget this we get from the top as before we need from ttk bootstrap although now we need tool tip and we want to import dual tip this is going to give us the widget also I'm going to minimize a couple of things here so the entire thing is a bit easier to read all we have to do for the tool tip is we have to create an object from the class so call the class itself in here we have to set a master and the master is going to be the element that we want to have the tooltip attached to in my case that is this button here so the master is the button then we need a certain kind of text it doesn't really matter what it is let's say this does something if I run this now I can hover over the button and we get this does something if I go away from it it disappears right now this doesn't look too great but we can style it using boot style for example what you could be doing is use light in here now we have some other kind of color I think using danger here might be a bit better let's try this one yeah it kind of works now the boot style for tooltip has one specific thing and that is called inverse if you attach that one and hover over it now you get the colors inverted if we didn't use this we had red text and I think a black background with the inverse we get white text and a red background inverse is the only styling you can use though you couldn't use outline this one doesn't exist if I use it we're getting an error but I think inverse works really well here there are three more widgets that we have to cover the next one is a calendar this is going to be another widget we have to import in a custom kind of way like the ones we have used here although for this one we need from ttkbootstrap.widgets from this one we want to import date entry this date entry I want to create and store in a variable right away let's call the variable calendar the value is going to be date entry this one doesn't need any arguments besides the master after I have that I want to pack it right away with some vertical padding pad y let's go with 10. if I run this we now have a calendar that shows the current date if I click on the calendar I can even select other kinds of dates I can go further wherever I want and if I click on the date we get to the current date if I select one we get the new date here and we can extract this one quite easily as well to do that let me create a button I want ttk dot button the window is going to be the parent text is going to be get calendar date the command is going to be some kind of command to print the current date this could be a function but in my case I'm going to add all of this into a Lambda function what I want to do is I want to print the calendar inside of this we have an entry widget this we have to Target and on this one we can use the get method the calendar is basically a compound widget the compound here is an entry widget and a frame with a bit of content all we really care about is the entry itself once we have that I can simply pack the button run this entire thing and now if I select a certain kind of date let's say the 1st of December 2022 I can get the calendar date and we get the 1st of December 2022. I suppose one thing to be aware of here the calendar has the date first then the month and then the year if you are American and you're doing the calendar wrong just be aware of that the month is the middle part not the first bit that covers the calendar next up we can create a progress bar although in TDK bootstrap this is called a flat gauge once again we have to import this one this module lives inside of the widgets besides the date entry I want to import the flood gauge once I have that I can use it I want to store all of this inside of a variable that I call progress and here we need ttk and blood gauge first of all we need a master which is going to be the window besides that we can also set a text in here I will call this one progress so that we have something after that I want to pack this progress with some vertical padding there you can see we can see something but this doesn't look too great yet what you want to be aware of for this flood gauge is that it needs a lot of horizontal space in my case I want to fill the X and there we go now we can see this progress properly although right now all we can see is a plain background to make it actually work we need a tkinter variable let me create this one at the top I want to have I'm going to call this a progress integer this is going to be a TK end VAR with a default value of 50. this value we now have to attach to the progress which we can do by setting a variable progress integer if I run this now there you can see we have some proper progress bar if you update this integer the value in here is also going to update for example what you could be doing is to create another slider with ttk and scale the parent is going to be window we want to go from 0 to 100 with the variable of progress integer I want to pack this one right away if I run this now I can use this slider to update the progress bar which is working pretty well this flat gauge also accepts a few more arguments I will put all of the arguments over multiple lines so this is a bit easier to read one obvious argument we can use here is boot style this could for example be info now we get a different kind of color well not that different we could also use danger now it's red other than that the really interesting argument in here is called a mask this one is overwriting the text by default let me call this one mask for now if I run this now we can see mask so this isn't too useful however what you can do if you add curly braces in here ttk bootstrap is going to add the variable number in here right away which means if I run this now we get mask 50 and if I play around with the slider we get numbers here updated right away which means I could for example add a percentage sign afterwards and this makes it very easy to get a percentage as well as a visual indicator in terms of where you are on the progress those are the main arguments obviously you can read up on it on the documentation I haven't opened this one let's do it right away inside of the documentation you want to look at the widgets module in here we have Floodgate if I open this one you can see a nice preview and if you go a bit further down you can see all of the arguments you could be using there are quite a few actually we are very nearly done there's only one more widget that I really want to cover and that is the meter this one looks like this in here we have lots of different things that we could be using all of these arguments this is going to be your exercise what I want you guys to do is to figure this widget out yourself in my case I have a meteor that's something like this it's a red color we have a full circle and we can see the numbers straight away try to read through this page and see if you can implement this one yourself back in the code the first thing that we have to do is to import the widget since it happens inside of the widgets from here I want to import meter now that we can use it all the way at the bottom I want to add a meter I'm going to store it inside of a meter variable and we create it with ttk and meter since we are going to use quite a few arguments I'm going to start over multiple lines right away the first argument as always is the master which is going to be the window but now this is all we need so I'm gonna pick this thing run this and there we go we have a meter that right now doesn't do anything to actually use it we have to first of all create an amount total I want this to be a hundred this is the maximum value after that we want to have amount used this is the starting value and the minimum is always zero let's say for this one amount used should be 10. running this now we can see we already have a basic start that being said if I'm trying to click on it nothing is going to happen to make something happen we have to set interactive to true now I can click on it and move this thing around other than that you have lots of different arguments you could be using for example we have the meter type this could be either full that I believe is the default alternatively you can use semi with that you get a semicircle that otherwise still works the same you can also customize the text or add a subtext let's go with some other text now we get some other text although the functionality doesn't change you can also set the boot style this works with literally every widget I used danger for this one this is giving us a red color these are the basic arguments I think you want to use most of the time although there are quite a few more you could for example set the stripe thickness you could show the text or not show the text you could set the media thickness and lots of other things you can work with you have a ton of options in here and well with that we have covered quite a bit of stuff and this video is getting a bit long so let's finish it here a really important part of good looking user interfaces are animated widgets so what we're going to make is this app here inside of that I have a button if I click on it we have an animated sidebar this has a button and it has a text field where I can write over multiple lines if I write too many lines we get a scroll bar all of this is quite easily implemented on top of that we can also do all of this in light mode we have the same sidebar although now it's looking a bit brighter but with the same functionality so let's cover some Theory first into Kinder you can create animated widgets but you do not have prebuilt components for it as a consequence you have to make your own systems for that you need two major Concepts the first one is the after method this one allows you to call a function after a certain amount of time this you combine either with the layout methods or with configure those can update the position the size the text the color of any widget should go into a bit more detail widgets can be updated in real time using either configure or the layout methods for example if you're calling a layout method multiple times the current one overwrites the previous one if we are calling button Place once with X being 10 and Y being 50 and then call it again with 210 only the second one will be displayed the previous one will simply be removed that way you can update the position and the size of a widget in real time on top of that you can use configure to update the text the font the colors and all the stuff you can update inside of configure I'm gonna play around with this in just a second but there's one more thing I do want to talk about and that is when you're animating widgets you want to use place at least when it comes to the layouts for the simple reason that only plays can give you pixel by pixel positions imagine using the grid method for animations inside of the grid you can only specify the current cell we are working in you couldn't move a widget by one pixel to the right only place can do that so we have to use it for animations that being said you could totally use grid for animations it just wouldn't look good this gives us a couple of Concepts I want to practice already I am using custom tikenter to make all of this look good but all of this would also work with the normal ttk apps after that I'm creating a window and I have one button the one notable thing about this button is that for the X position which we are placing with the place method we are storing the position inside of a variable and this we're passing in here we're going to work with this position in just a second finally we are calling window.main Loop to run the entire app which means if I'm doing that we have a window with one button that doesn't do anything right now to influence it I need to run some kind of function which I'm doing when the button is pressed let's call the function move button this function we have to create move BTN there are no need for parameters and in here we we can use the place method or the configure on the button to update the button itself let's start with the place method itself because I want to move the button to the right every time we are pressing it since I want to use button X for that I need to be able to influence this variable in my case I'm going to set it as a global variable using the global keyword once I have that I want to Simply increase button X by let's say 0.05 every single time we're pressing the button to make sure that this is working let's print button X as soon as we are pressing the button now if I'm pressing the button we get 0.05 0.06 some weird stuff with floating Point numbers but that isn't going to make a difference this number we can now use inside of the place method let me actually copy it I want to place the button one more time with this button X the difference now compared to the original is that button X becomes larger every single time let's try it now if I click on toggle sidebar it always moves a tiny bit further to the right the numbers are quite large and we only move when we are clicking but this is the first step to understand animations besides relative X and relative y you could also work with relative height let's say I guess we can use button X in here again if I run this now every time I'm clicking the button gets a tiny bit larger I think I should set button X for the starting height as well I wonder if real height is going to be button X now if I run this we start with a much larger button and every time I click the button gets larger it moves to the right you could also just use X and Y here that would be perfectly fine all of the animations work either with absolute or with relative numbers that would cover the layout methods besides that we can also use config or rubber configure for example what we could be doing is declare a couple of random colors let's say red yellow pink and green every time we are clicking on the button I want to give the widget a new color for that I need some Randomness which means from random import choice every time I'm clicking the button I want to get a color let's call it color and the value is going to be choice of colors that way let me print it really quick I want to have my color and I click on the button we get one of the colors okay we just got really unlucky in the beginning I'm going to add a few more colors in here so we have a bit more variety like so now for runders we get much more randomness that we can use to configure the button for example we could run button dot configure the argument in here since we're using custom tkinter would be FG color to get the actual button color and this I want to set to the color if I run this thing again and now if I click on the button and move away from it we can see we get different colors after every single click if you were using normal tkinter this FG color wouldn't work you would need to use the default styling options which are quite limited which is why I'm using custom tkinter it makes all of this much easier but well with that we can update a widget in real time what we now have to figure out is how to make tikinta do all of the work for the animation for us for that we have to learn One More Concept that concept is after and after can call a function after a certain amount of time this one would look like this it always has to be part of the window we specify two arguments the amount of time and then the function we want to call the amount of time here is in milliseconds since 1 000 milliseconds are one second this number here would be one second what is really important is that this can be circular a function that is called with after can contain after itself in this case we could have a function like this after one second we are calling this function here then we are printing test and then we are running the function again as a consequence this function will run forever let's play around with this one actually I want to create another function I will call this one infinite print it doesn't need any parameters in here I simply want to print I suppose infinite is appropriate in here this I want to start whenever we are pressing on the button meaning if I run this now the button only prints infinite but what we can do now is run window after then we need the time and the function we want to call let's say after one second so 1000 milliseconds I want to run infinite print again if it runs now I can click on toggle sidebar we get infinite once and after one second we get it again and again and again and again this is never going to stop for animations one second is quite long but you could set this to even one millisecond now if I click on it we get a whole bunch of infinites I suppose 100 milliseconds is a good middle ground here while we are doing this infinitely right now you could also control this for example with an if statement to keep on using button X we could check if button X is smaller than 10 and only then run this to make that work we have to update button X for that I want to set button X as a global variable again and then increase it by a certain amount button X Plus equal let's say 0.5 only if the if statement now is the case I want to print infinite and to make sure that we see what's going on I also want to print button X let's run this one now if I click on the button we get infinite but only up to 9.5 then the thing stops with that all we have to do is combine this function with this function to get an animated button which is bringing us to one exercise already I want you guys to animate a button so that it moves to the right side of the window after we are pressing it if you combine this function and this function this should be fairly easy to do pause the video now and see if we can figure this one out first of all I want to work inside of this function here for that when I'm pressing the button I want to call the move button function on top of that I don't want to change the height of the button meaning I'm just going to remove the relative height both inside of the function and when I'm creating the button in the first place that way we're only focusing on one bit at a time with that we can actually counter the animation inside of the move button for now I am declaring a global button X I am increasing button exit and then I'm calling button.place so if I run this we are moving the button a tiny bit to the side and we're also changing the color I guess we should remove this one because that would be quite confusing the issue we have right now is after we're clicking the button nothing happens but instead what we want to do is call this function one more time or well not just one more time but until we are reaching the right side of the window for that I want to use the after method I want to run window and then after I want to get an update every 100 milliseconds and I want to call move button with that I can run this thing and we get some kind of Animation it's really choppy right now and it doesn't stop the choppiness we can fix very easily all we have to do is reduce this number and this number I only want to update the position by 0.01 units and I want to update this thing every 10 milliseconds if I run this now this is a much smoother animation to control it a little bit better what we can do is use an if statement that if button.x let's say is smaller than 0.9 only if that is the case I want to call the after method if I run this now the button is going to move we have to wait a tiny bit at some point it should stop there we go now it's stopping on the right side of the window this isn't perfect but I think for now it's good enough so that covers basic animations obviously this doesn't look very good so let's make a good looking animated widget what I want to create is some kind of slide panel I want to create something like this where we can click on a button and then we have a side panel this doesn't have to be on the right it could also be on the left it's quite flexible this first of all has to inherit from ctk and frame I forgot this cdk at the beginning that way we are simply creating a frame when I'm calling the Thunder init method we now need a couple of arguments the obvious one is self and we need a parent other than that we need a start position and an end position the animation will then move between these two once we have that as always we need the super init method and we have to set the master to the parent I forgot the brackets here after that I want to create some general attributes basically what that means I want to store the start position as the start position as an attribute the same I want to do for the end position end position like so other than that I need the width of this thing self.wift the width I want to generate automatically this is going to be the window I want the widget to start here at position 0.0 for the simple reason that by default the side panel should be on this side if however the user clicks the button I want this thing to slide to left let's say to position 0.3 the demos you have seen was the panel moving to the right but in this case I want to move to the left this thing is flexible though both would work just fine with the same widget but first of all we need to generate the width and the width we get from this distance here that number we get with the start position minus the end position and all of this and needs to be absolute the reason why this needs to be absolute let me print the with self.wift and create a widget this by the way needs to happen before we create a button animated widget I want to create an animated panel which is going to be the slide panel for this one the master is going to be the window the start position is going to be zero and the end position is going to be 0.3 although this one has to be negative running this now we get an error because I am incapable of typing this should be an uppercase t now if we run this we get 0.3 this is a proper width but if we didn't use absolute numbers in here we would still get 0.3 but if we used other numbers this might be a negative number for example if I want to start my widget on 0.7 so somewhere on the right side and then move it to one then we will get a negative number since this would create a negative width we would get some weird results as a consequence always use absolute values in here also spell them correctly that tends to help with that we get positive numbers the floating Point weirdness here you can just ignore it's not going to make a difference so with that we have a proper width which means we can actually place the thing I'm going to use self.place let me add a comment here as well I want to get relative X that would be self dot start position relative y would be zero then we have the relative width that would be self dot with and finally I want to have relative height which for now would be one now if I run this we have a sidebar all the way on the right it's kind of hard to see right now but it is the brighter stuff here all of this to make sure that this is a bit more visible I want to set an F G color to let's go with red now if I run this this is much more visible on top of that to move the panel to the left side I want to change these numbers back to zero and negative 0.3 that way now the panel starts on the left because the start position is zero so this selfestar position is zero with that we need a few more things all of these numbers are for the animation itself so animation logic first of all we have to track the position Itself by default this will be the start position this will become important in just a bit besides that I want to toggle self dot in start position by default this should be true this is going to be a switch and it is going to track if our budget is in stock position or not in the start position if it is in a stock position we want to move towards the end position if it is not in a stop position we want to move towards the start position which basically means this thing is going to determine the direction we can use this right away actually because I want to create another method that I call animate with itself and nothing else in here and all I want to do is if self dot in start position then I want to self dot animate or Ward if that is not the case meaning else I want to run self Dot and made backwards these two methods are what actually creates the animation so let's start with animate forward Define animate forward what I want to do in here is first of all I need an if statement if self dot position is greater than self dot end position I should probably draw while doing all of this this one here would be our window a bit squashed a start position right now is this point zero this would be our start position or rather this one here besides that we have the end position the end position right now is somewhere here negative 0.3 that is a horrible three that's looking better finally we have a position this position here at the start this is on the start position meaning it's here this position I'm going to move a tiny bit further to the left every time we are calling animate forward however I am only going to do that until we reach negative 0.3 for that we have this if statement here we are only going to move the position to the left until we are reaching the end position if that is the case though I want to update self.position and reduce it by 0.008 the number here is very subjective it basically determines the animation speed just choose whatever you think looks good once we have that we can run self dot place again let me copy the numbers actually from up here because we can reuse quite a bit for the X position we now don't need start position we just want the position relative y relative width and relative 5 can stay identical finally what we are going to need is self dot after I want to run another function after 10 milliseconds the function I want to run is self dot animate forward with that we should already have something let me run the entire thing again and now if I click on toggle sidebar we are moving the button to the right and that is because the button still gets the move button function this I want to change I want to get my animated panel in here I want to run a method the method I want to run is this animate which means animated panel dot animate now let's try this again if I now click on toggle sidebar this thing is moving to the left although if I click on it again nothing is going to happen and to make it a bit easier to see what's going on let me update these numbers here let's say to 0.3 and 0.1 now if I run this again this thing is much more in the middle and if I move it to the left now it only moves up to 0.1 I hope you can follow logic here I am going to stick with the original numbers like so and now we can keep on working on this first of all once we are reaching this position which means an else statement will be triggered I want to set self dot in start position to false that way once we're clicking on the button again we would run animate backwards this we now have to create Define animate backwards this one also doesn't need any parameters besides self and now we have to do basically the same thing we have done here as a consequence I can just copy the entire code and paste it in here and make some updates first of all self dot position we only want to run if the number is smaller than self.n position actually this should be this start position the reason for that let me draw all of this actually again we have the window one more time and again we have to start position at zero and the end position at negative 0.3 right now the position when we are calling this method here is going to be on negative 0.3 and we want to move it a bit further to the right every time we are calling the method however we only want to call it until we reach the starting position this line here that is covered with this if statement if that is the case I want to increase the start position by the same amount you could use a different number in here but you probably don't want to after that you're calling Place although after now is animate backwards instead of forwards finally if that is not the case anymore in start position should be true again with that we should have a basic animation if I now run this I can toggle this and we have an animated sidebar that's looking pretty good although right now it doesn't look very good let me run it again all we get is a red frame that we can move but it doesn't have any content and well generally I want to make this thing look a bit better first of all I want to have a gap between the frame itself and between the surrounding this I do with relative Y and relative height for example I could set the relative height to 0.5 0.05 and then the relative height is going to be 0.9 running this now we get a gap between the top and the bottom while the frame itself is still in the middle besides that for the start position we can increase this by a tiny amount let's say 0.1 now if I run this again we have that's quite a large gap let's go with 0.05 it's looking a bit better the toggling itself still works although we have to make a few more updates here the problem if I run this again once I click on toggle sidebar we are covering the entire height so this we can change already I want to copy all of these numbers here and now when I'm calling place in here and in here so animate forward animate backwards I want to have these updated numbers that way it's looking a bit better although there's a small jump in the beginning and that is because of this we are setting the position to zero because we're in start position from the parameters but not from the updated value here we can fix that by setting self.start position and now this is much smoother that being said I think this is a tiny bit large let's go 0.04 that's looking a bit better once again you can play around with these numbers it's entirely up to you they're quite subjective what is much more important though I don't want to have a red background color instead I want to minimize the side panel and work with the animated panel what is really important to understand now is that this side panel is simply a frame which means we can place any other widget inside of it and it would still work the same for example I could create a ctk and ctk label with the parent being the animated panel after that I can set some text let's call it label one like so and this I want to pack right away although any other layout method would also work just fine I want to set expand to True fill to both and on top of that I want to add a bit of pad X let's go with 2 and Pad y with 10. if I run this now we have label 1 covering the entire frame the rest still works just fine I can do this again and change it to label 2. run this again and now we have two labels in here the same thing would also work with another widget let's say with a button I simply call this one button if I run this now we have a button all the way at the bottom although the padding here looks a bit weird especially X padding doesn't work particularly well in here but why padding I think still works just fine yeah that looks okay on top of that for this button I want to remove the corner radius so I'm going to set it to zero now this is looking much better finally One widget that we can use that I don't think I have used yet is called ctk and then ctk text box this is a text box with the parent being the animated panel and this I want to pack as well with expand being true and fill being both now if I run this we have a text box that we can type in although the background color here doesn't really fit to update that we have to set inside of the widget the FG color the colors here should cover both the light mode and the dark mode the colors we need are this now if I run this we have no more background color so this is looking much better although this might be very hard to see and it's a tiny detail but in the bottom left we have a sharp corner like this whereas in the top left we have a round corner this happens because now this text box has sharp corners and is overshadowing the frame unfortunately we cannot cut this off but what we can do is set vertical padding so pad Y and set it to 10. now we have a rounded Corner because the text box widget only reaches to this point here we have a text box that works over multiple lines it's looking pretty good we can still use it just fine we're making a lot of progress on top of that since we have two different colors we could also update the theme so what I could be doing is ctk and then set appearance mode to light and I can run it again and we still have the same outcome with colors that look consistent the animation once again still works just fine although I do prefer the dark mode but choose whatever you like with that we are nearly done yes one more thing that we have to do and that is to make this slide panel a tiny bit more flexible so if I run this again I can click on the button and all of this works just fine however I want a system to work a tiny bit different what I want to have is that by default this panel here is all the way on the right and not visible to the user only once we click toggle sidebar then it should be on the right side like so this by the way if I run the demo again this is what I want to have at the End by default I can't see anything on the right only if I click on toggle sidebar we get the cipher window and then I can remove it again so by default it shouldn't be visible for that we have to make a few updates although none are too difficult as a consequence we can add a second exercise what I want you guys to do is to update the panel so it moves in from the right you would have to figure out a couple of things but pause the video now and see if we can figure this one out first of all I want to update the positions my start position should be 1.0 so the app is invisible and the end position should be 0.7 if I run the app now we can't see anything because the actual frame now is roughly here what is even better if I click on the button this still works just fine which is a really nice start which means now we can work a bit more inside of the button to fix some minor things first of all when I'm running this thing you can see on the right side we are losing the Gap this one is very very narrow to account for that for the end position I also want to add let's say 0.04 now if I run this again we have the Gap back although again it's a bit large let's make this smaller say 0.03 that I think looks better once again these numbers are fairly subjective just choose whatever you like we have a pretty good app this is working just fine I guess the one thing you want to be aware of here is that the starting position always has to be to the right of the end position because in our case animate forward reduces the amount and animate backwards increases the amount which means forward in our case is always left and backwards is always going to the right although this video is already getting quite long so this you can Implement yourself it shouldn't be too hard another really important part for good looking user interfaces are images in tick interim you can add images to some widgets labels buttons and canvas is what you're going to use most of the time that being said for images that scale properly you will need to create a logic yourself so the scaling logic doesn't come with tkinder that is something you have to make yourself on that note what I have mentioned yet what we're going to create is going to be this one here we have two buttons one with TDK and one with custom tkinter and then we have a raccoon and this raccoon we can't scale and it's always going to cover the appropriate area this kind of logic you have to make yourself it doesn't work by default now before we can do all of this we have to do one more thing and that is we always need a pillow library to use images pillow is the default python image Library this one you have to install on your own first of all this you do either of the Powershell or The Terminal in my case this is the Powershell what you have to type is PIP install hello this is going to install quite a few things obviously if you're on a Mac and using terminal this would be pip free install hello once you have that we can start working on some code for the starting setup I am importing tkinter and ttk on top of that I am importing custom tkinter we are going to use both because they have slightly different setups for importing images after that we're creating the basic tkinter window and then we are running the main Loop the end result is going to be a basic window before we can start properly we have to do one more thing and that is we want from pil import image and image TK pil is the pillow we just installed for some reason the input here is a different name compared to the import in the Powershell or The Terminal pil stands for python image library and some are for a PQ to call it pillow I don't understand it either it's quite weird but this is how you would import it inside of pillow you have one really important object and that is called image you basically always use that one and image has a custom teak and a variant that is called image TK on that note I have made a really long tutorial on pillow itself it's on YouTube you can watch it for free you can use pillow for all sorts of things like scaling images changing colors adding text and well lots of other things so check it out if you are interested although for this video I just want to import an image to make that work first of all I need to cover our folder structure right now I have one folder and this folder contains the code the code file here is called images in this folder I have three more images I have python dark hyphen Lite and raccoon those are the images I want to import for the import first of all we need to import the image itself so image let's call it origin nil this we get with image dot o pen and now we need to file path since I want to import let's start with the raccoon I want to import raccoon and the file ending here is jpeg with that we have an image so I can run the code we're not getting an error that's looking pretty good now I have to figure out how to get this image on a widget for that first of all we need a widget to get started I just want to create a label and this can be ttk label the parent is going to be window the text could be let's go with raccoon and let's pack the label there we go we have raccoon a label can also take an image although what we cannot do is simply pass in the original image in there we will get an error that the image specification must contain an odd number of elements I don't know what that specifically means but basically what tkinder wants is a image TK not an image we can account for that quite easily I want to store this in another variable I'll call it image TK this image Decay we create with image TK dot photo image you only need one argument that is the image original with that we can pass an image Decay into the image and it should be working there we go the problem we have right now is that the image is way way too large for reference the raccoon has a size of six thousand by four thousand while our window is only 600 by 400 so we can only see a very small part of this window right now but we can resize the image this we do when we are importing the image this image here is returning an image object this image object has a couple of methods the one we care about right now is called resize resize wants a tuple with a new size and a new width let's say for now I want to cover the entire window with the image this will be 600 by 400. with that we have the raccoon covering the entire image although if I resize the window this breaks quite fast but at the very least we do have a start unfortunately though you basically never want to use an image inside of a label for the simple reason that you cannot resize the image if the window changes you always have the same image size depending on what you get from here to change that you need quite a bit more logic so I am going to cover that later on let me get rid of the resize and comment out the label running this again we have a plain window but we do have an imported image before I expand the logic on how to use images I want to cover buttons because buttons are very easily usable with images let's say I want to create a button this is going to be ttk dot button the parent here is going to be the window and for text we can go with a button this button I want to pack right away now we have a button this button can also accept an image I could add imhdk now we have the raccoon again but remember the raccoon is way too large but the raccoon is not what I want to add to this button instead I want to import a different image that image is going to be python dark which we get with image dot open the name of the file is called python underscore dark dot PNG important here we have a different file ending because python dark has Alpha values so we need a PNG this once again we have to convert let me call it python dark TK for that we need all of this I can simply copy it like so and paste in Python dark this python dark TK I now want to use for the button like so and this is still way too large although I guess a little bit better since the button isn't going to change size for this one it is fine to Simply resize the button here and then you don't have to worry about it anymore in my case I want to resize the button to a size of let's go with 30 by 30. now we have a button with a python logo to see the text again we need a compound argument if I for example set right here we now have a button and then the logo to the right this can also be left and then we have the image to the left of the button for a bit more spacing you could do a tiny bit of a hack here and simply add some spaces for the button and now we get a bit more spacing between the two however if I duplicate all of this and change the button to let me call it a button ctk because I want to create ctk dot ctk button for that one we are getting an error that photo image object has no attribute create scaled photo image once again I'm not quite sure what that means but the concept you have to understand is that you couldn't use an image TK this one here inside of a ctk widget instead what you would need to do is create a separate ctk image if you get with ctk and ctk image this is what you have to pass into is ctk widget if you want to have images I'm going to store this one in an image ctke variable the reason why this is different is because for custom tick enter we always need a light image and we need a dark image those we have to import separately but other than that we are using it the same way how you usually want to do this let me put it over multiple lines actually what you can do with the input here is simply use image open as the argument for example I could paste image open python dark in here and then for the Dark theme I want to have python light this might look confusing here basically you want a dark image for the light theme and the light image for the Dark theme for the simple reason that light image has a light background so you want to have a dark image and then the other way around it's going to work the same with that we have an image cdk and this is what you want to pass into this image now I can run this and there we go we have a python logo for a button that is bright right now if you were using custom tikkinder and had a light and a dark theme this would also cover the Dark theme although since I am using tkinter by itself this isn't really applicable but it would definitely work with that we can actually cover how to use tkinter with images the major problem that you have in tkin type of images is that images do not scale by default we could have as large or a small of a window or any kind of container the image unless you add some custom code is not going to update which would break any kind of layout really fast to account for that we have to add an image to a canvas and then use the canvas Dimension to update the size of the image that we can do in real time although we have to figure out a few Mappy things in here it's not going to be too bad although once we have that we can add an image to a container and always make the image scale to that container and before I start I want to create a different kind of layout I want to have a grid where those two buttons are on the left and then on the right we have the actual image for that I'm going to put it up here I want to create a grid layout I want to get window dot column configure in here I want to have 0 1 2 3 in total four columns that all have a weight of one and I want them to be uniform like so so uniform is equal to a besides that I only want to have one row so row is just going to be zero uniform we can just ignore for that the image Imports can stay the same although for the buttons we have to update them because we're using pack but now we have a grid as a consequence I want to put both buttons inside of a frame I'm going to call this button frame and this is ttk dot frame with the window as the parent both of the buttons are going to be mastered to this button frame finally I want to place the button frame using the grid method I want column to be zero I want the row to be 0 and then I want to have sticky with north south east and west if I run this again now there we go we have the two buttons all the way in the top left I think to make this look a tiny bit nicer we can give both a bit of vertical padding let's say 10 pixels now there's a bit of space between the two with that I can create the canvas for the image this is simply going to be a canvas so TK dot canvas the parent is going to be the window and for now this is all we are going to need this canvas I want to place right away canvas dot grid this is going to be column one column span is going to be free we are covering all of the remaining columns finally row is going to be zero also I want this to be sticky to all four sites if I run this now we can't see anything because we don't have a background color which I can change quite easily background let's set it to red and there we go now we can see the canvas itself however the canvas doesn't cover everything perfectly for example at the bottom here we have this very thin line same on the right side and we would have the same on this side and this side as well this we have because of the border of the canvas we can get rid of it though all we have to do is set BD to zero then we need High light thickness and set this to zero as well finally the relief should be rich with these numbers the canvas is now going to cover the entire area and we have no border also let me set this to Black so it looks a bit better there we go on this canvas we can now add an image this we do with canvas dot create image for the arguments here we need an X and the Y position I'm going to set it to 0 and 0 which is the top left and then we need an image this needs to be a TK image which in my case for the raccoon I have image TK image Decay now if I run this we can see one eye of the raccoon what we could also do in here is set the anchor by default we are placing the center anchor like this but I want to place the North West now we can see a top part of the image again but it doesn't do very much the way you have to think about it is that the entire image starts here and then goes really really wide to the right and to the bottom I believe the numbers were six by four thousand so much larger than our window to account for that we have to dynamically resize the image I don't want to create the image right away instead I want to do all of this inside of a function this function I'm going to trigger every time we are changing the size of the window this we get with canvas dot bind in here we need on figure this is going to trigger every time the size of the canvas changes if that changes I want to run a function this simplest for the image is stretch image you're going to see in a second what this one is going to do but let me create it first of all all the way at the top I want to create stretch image in here since we are working with an event we need one default argument and that is the event what we are going to do in here is we are going to get the size of the canvas and then we are going to scale the image to that size finally then we can actually place the image for that though first of all we need to get the windows size or more specifically let me call it size we want to get the width and we want to get the height the width is going to be event dot with and the height is going to be event dot height if I print both of those numbers we have with and we have height now if I run this we are calling this function and if I resize the image we get updated numbers so this is working quite well just to make sure now the thing is really narrow and very very small but now it's much larger so the numbers seem to be pretty accurate these numbers we can now use to create an image although what is really important you already want to have one image imported and you only resize it when you resize the entire window you do not want to reimport the image every single time you are resizing the window that would be really inefficient in my case though I already have one image imported this is what I want to work with I want to store all of this inside of a new variable I'm going to call this resized image we need the image original and then resize it since resize wants to have a tuple with a width and a height this is quite easy because we already have width and height although this is still just an image but we need an image TK we need another variable that we call it resized TK this is going to be image PK dot photo image the same thing I have done down here except now the one argument is going to be the resized image finally this we can place on the canvas for that all we need is canvas dot create image the start position here is going to be 0 and 0 the image I want to place is resized EK finally the anchor is going to be North West now if I run this we only get a black background color so something didn't go well the problem is that the image TK this line here always has to be in the same scope as the main Loop or wherever you call it in our case an easy fix here would be to set resize TK as a global variable resized TK and now we can see the raccoon so just to reiterate we have our window in the global scope and we're also calling window.main Loop in the global scope because of that the image Decay needs to be in the global scope as well they always have to be in the same and once again I have no idea why but with that we have the image of a raccoon and if I resize the window the raccoon resizes with it because we are updating the size of the window every single time we're updating the canvas which is working but you can see a limitation here we are stretching the raccoon quite a bit to account for that I want to create a second function I'm going to call this one fill image this one is not going to resize the image instead we are going to fill the entire image and we're going to cut off parts of the image that don't fit what we are going to do for this one let me explain it first before I create a function let's say this one here is the canvas and the image might be as large as this bit here inside of this function if the image is larger than the canvas we're going to cut off this bit and this bit that way the raccoon is going to keep the same aspect ratio later on we will create a third function that will keep the raccoon always inside of the canvas but for now let's fill the entire canvas for that once again the one parameter I need is the event I want to have Global resized PK now in here we first of all need to get the current ratio of the event or off the canvas the same thing this we get I want to store it in a variable canvas ratio all we need here is event dot with divided by event dot height this number is really important and we need it both for the canvas and we need it for the image we have imported this image here this we can also get quite easily I want to store it in a variable let me call it image ratio to get the width and the height we need image original dot size this is returning a tuple with the width and the height which means the width is going to be zero and this I want to divide by the height so size 1. if I print all of this image ratio this one we get 1.5 that number we get if I open the folder again the raccoon has a size of 6000 by 4000 pixels dividing six thousand by four thousand gets us 1.5 this number is really important because it tells us how we are going to scale the image itself for some context here let me do all of this actually on a separate surface imagine we have a perfect square where all sides are one if that was the case and we would divide the width by the height we would get one this is telling us that we have a perfect square if we have some kind of rectangle with a width of Two and a height of one in that case we would divide two by one which would give us two which tells us that the larger that this number gets the wider the entire thing is by the same logic if we have a really narrow container something like this where we have a height of 1 and a width of 0.5 that is a horrible five 0.5 then we would do 0.5 divided by 1 which would be 0.5 which means the smaller this ratio becomes the more narrow our container is going to be this applies both to the canvas and to the image itself this information we can use so in our case we know the ratio of the image and of the canvas what we want to do imagine this one here is the canvas or C in short this we want to compare with the image itself or the aspect ratio of the image let's say this could be something like this this would be I for image if the canvas has an aspect ratio of let's say 1.8 with the image having aspect ratio of 1.5 we know that the canvas is wider than the image if that is the case I want to scale the width of the image to the width of the canvas which right now would simply stretch out the image so this wouldn't be particularly useful however since I know the aspect ratio of the image I can simply use the weft and then combine it with the aspect ratio to get a new height of this image even if I resize the entire canvas I would fill the entire width and then the top and the bottom part of the raccoon so the parts that are outside of the image are simply going to be cut off I hope all of this makes sense the math here isn't particularly difficult but you have to get your head around it I think if I Implement all of this this is going to make a bit more sense what I really want to figure out is I want to get the coordinates of my image which means ultimately I want to get a whiff for the image and I want to get the height of the image although for these images first of all I want to know if the canvas ratio is greater than the image ratio if that is the case we know that the canvas is wider than the image if that is the case I want the width of the image to be the event with that way we are filling the entire width of the canvas there's one thing that t can do is a bit fussy here and that is that we always need to have integers a very easy thing to account for once we have that width let's say for some imaginary numbers the width of the canvas could be 800. on top of that we know that the image ratio is 1.5 these two numbers we can now use to calculate the new height of the image all we have to do for that is rearrange this formula here initially we got the canvas ratio but now we want to have the height this height here this we get by getting event dot with or the width of the image itself this width here and then divided by the image ratio this also needs to be an integer let me remove the white space this information we can now use because with that we can create a resized image which is going to be the image original and then I want to resize it with the with and the height after that we can create a resized TK which is just going to be image TK dot photo image with the resized image finally there's one more thing we have to cover we still want to get canvas and create image although now for the X and the Y position we want to place the image right in the middle of the canvas all we really have to do is get event dot width that is the width of the canvas and divide it by two decanter or the canvas more specifically wants to have an integer this we can do again for the Y position I simply want to divide the height of the canvas by two finally besides that I'm going to set an anchor the anchor is going to be the center once we have all of that ideally over multiple lines so it's easier to read we can place the image itself the image is going to be resized TK now if I run this we can see the raccoon and the raccoon scales with the canvas because I forgot to actually call fill image whenever we are resizing all of this now if I run off this again we are getting an error because by default this if statement here is not true to account for that let me change it to else with with being one and height being one as well so we get at least something with that we can't see anything however if I make this less tall there we go we can now see the raccoon at least on a certain aspect ratios but if I make this smaller at some point it disappears that happens because this if condition doesn't apply anymore because in the else statement the canvas is narrower than the image this is what we have to account for as well for that let me copy the width and the height now I need these numbers here for this one we now want to have the image covered the entire height of the canvas which means the height is simply going to be the event dot height for the weft I want to get the height once again and multiply this with the image ratio this should be multiply not plus with that all of this should be working now we can see the raccoon and the raccoon works just fine we're never scaling this one we are simply cutting off parts that are outside of the canvas this is looking pretty good border math year if you really want to understand this I would recommend to go over this a couple of times basically you always want to imagine that you are scaling a canvas and then you are fitting an image inside of it when you're hearing this the first time it can be quite confusing so definitely go over this in your own time the math really isn't hard it's just some logic that you have to grasp with that we are nearly done there's one more thing that I want to do in this case the raccoon is always going to be fully visible and we are scaling it in such a way that we never cut off anything but the aspect ratio itself stays identical this is going to be reasonably similar compared to what we have done here with fill image which means it's going to be your exercise I want you guys to create a third scaling Behavior to always show the full image without cutting off parts the video now and try to figure this one out you can reuse a lot of this since I am going to reuse quite a bit I am simply going to copy the entire function paste it in here and rename it to show full image this function I want to call right away down here inside of configure I want to show the full image inside of the function Global can stay the same the current ratio we also need and all of the stuff down here is also going to stay identical which means the only part we have to change is this bit here specifically we have to get new numbers for the width and the height for all aspect ratios the way you have to think about this one we once again check if the canvas ratio is larger than the image ratio which means that the canvas is wider than the image for example if this one here is the canvas the image would be something like this what we have done before is we have scaled the width of the image to here and then use that number to calculate the new height of the image this I want to change now instead what I want to do to show the entire image I want to scale the height to only be as tall as the canvas itself this number I am then going to use to calculate the width of the image which means for this one I want to have a new height the height is simply going to be event Dot height with the with simply being the height multiplied by the image ratio we can try this one right away if it's like this we have the entire image but now if I go even further now we have a black background and we can see the entire raccoon which only leaves us the last bit here or this one I want to start with the width because now the canvas is narrower than the image in this case the width is going to be the event dot width order height I want to get the width and divided by the image ratio that should be all we need with that we have the entire raccoon and we can always see the entire raccoon regardless of aspect ratio and well the raccoon updates automatically this image in all of its forms so these three functions work slightly differently but once you have them you can place the canvas in any kind of container and the size would always scale that way you can use the image wherever you want which is what makes it actually useful let's talk about image animations what we are going to make will look something like this I can click on a button and we have a star if I click on the button again the start disappears the important part is that we have animation for this star to create something like this you already know most of the steps if you can import images and animate widgets you know the basics although there are some problems let me go through them number one for these kind of animations you have to import a lot of images so far we may have imported one or two images for this one they are going to be a lot more that very neatly brings me to the folder structure this one looks like this we have one python file this one contains the program we are going to make other than that we have four folders and all of them contain images for example inside of yellow we have a whole bunch of stars what we're going to do is we're going to play one star after another and if we do that fast enough we have an animation in case you're wondering here the first image is only white because Windows is weird the image here is actually empty going through the images is actually not that hard we just have to configure a button what is much more important is how can we import all of this I guess you could write 30 import statements but that would be kind of a pain because we also have other folders We have the black folder here we have a black star then we have a dark folder and here we have another kind of animation and then we have the light folder here's one more animation if you were to import every single file manually you would have to write a lot of code which means I want to find some smarter way of doing that for part number two we have to organize State Management this is going to toggle if the button has been pressed and goes forward with the animation or if the button was already pressed and we have to run free animation backwards while doing that we also have to make sure we are preventing interruptions so what happens when the user is pressing a button while the animation is playing in my case I'm going to prevent any kind of button click other than that it's just basic animation logic so let's have a look in my case I am relying on casted T Kinder because this one is slightly more complicated but all of the logic would also work for ttk the reason why I'm using custom tkinder is because well it looks much nicer but and if you can use this with custom tkinter you can also use it with normal T Kinder other than that I'm importing from pil image so we can have images then we are creating a basic window and we are running main Loop the result is going to look like this a basic window to stay consistent one thing I forgot is the comment to say run before the main Loop now for the button I want to have a dedicated class class let's call it animated button for this one I'm going to inherit from ctk button I forgot this cdk first of all this is the button we want to work with so far I only really inherited from frames but you could inherit from any widget and add specific bits to it in here we want to create a Constructor so done there in it method this one needs four arguments in total or while parameters self as always definitely the parent after that we need a light path and we need a dark path those are for the light images and the dark images because remember in custom tkinter when we are creating images we have to account for a light and a dark theme which means you always need two kinds of images I guess if you want to be lazy you could have the same image for the dark and the light image but that wouldn't look as good what we have to do in here first of all is run this super Dunder init method the master is going to be the parent besides that we want to have some text what you put in here really doesn't matter let's say a button or rather a animated button once we have that we can place the entire thing using the pack method or while any kind of layout method here is fine I'm going to use pack because it's easy with expanding true the button is going to be right in the middle with that I can create the animated button I can add in the window as the parent then I need two paths although for now I'm just going to add none and none because we have nothing for the paths if everyone is now we have an animated button although this one doesn't do anything right now that is bringing us to the first part that we really have to care about we want to write a method that Imports a whole folder or rather folders because what I want to do in here is I want to add self then I want to have the light path and the dark path the argument I'm expecting here is a path to a folder so if I reopen the folder again we have the python file here and what I'm expecting is for example yellow or black or dark or light any of these folder names is what I'm expecting just to be explicit here I want to have for the light theme I call this one black for the Dark theme so the second argument I want to have yellow once we have the actual images we can play around with the colors here but they all work in the same way in here we have to figure out how to work with that first of all though I want to Loop over both of these paths which is very easily done for path in then a tuple with the light path and the dark path if I print the result path while also making sure that I'm running this method in the init method self dot import folders with the light path and the dark path this method needs to be run before the Super method that is really important you will see later on why although if I run this now we get black and yellow now we have to figure out how to get the folder contents from this path for that we are going to need another module that module is called OS however I don't just want to import OS instead I want from OS import walk what walk is doing is if you give it a folder name it gives you the content of a folder for example what I could be doing instead of printing the path I can print walk and then the path if I run this now we get a generator object that didn't go as planned but if you convert this thing to a list then you can see what's going on this is looking much better let me extend this a tiny bit we are getting two lists this list here for a light path and this list here for the dark path you can actually see for the first argument we are getting black and we are getting yellow those are the folder names for each list there are actually only three arguments the first one is the folder name this one we don't care about because we already have that next up we have an empty folder for both of them if there were any subfolders inside of these folders the names of these folders would be in this list since we don't have any subfolders we can entirely ignore this one as well it's simply not relevant for us however afterwards we have a long list with all of the files inside of this folder this is what we actually care about on top of that you want to be aware of the order here in my case I'm starting with zero zero zero zero zero zero one then two three and so on on some operating systems I think in particular for Mac OS this order might be messed up I'm going to show you later how to account for that but it's definitely something you want to be aware of it can mess with your animations quite a bit although another really important thing to mention is that what we are getting in here are just file names all of these are strings they are not files they're not images we just get a string of a file name we still have to do the actual import but that comes later first of all though I want to add another for Loop or let's call it data in walk path the result is going to be if I print the data we have the stuff I've just shown you although we can be a bit more elegant here since this walk path is returning three things we can unpack them right away inside of the for Loop we get the folder name we get sub folders and then we get the let's call it image data all we care about is image data this is what I want to print so if I run this we get all of the image names to indicate that I don't care about the folder name I will replace this one with an underscore a subfolder I also don't care about so this one is going to be a double underscore next up the image data if I print this again we absolutely have to make sure that this data is sorted it always says to start with zero zero zero zero and end with zero zero zero and two nine with the numbers going from the lowest to the highest you might get this by default you might not and you really want to make sure for that I want to create a new variable I'm going to call it sorted data in here we want to use sorted what I want to sort is the image data but to be a bit more specific here I want to set a key because if we just passed in the image data let me show one entry I want to print image data and then the one with the index one also let me comment out this bit here so we're not getting an error if I just print one we get this bit here and this is a string if we use this with sorted python wouldn't really know what to do with it because if you compare different strings it's not really clear which one is smaller and which one is larger instead what I want to do is only get the last five digits if I then turn this into a number python can sort it from the lowest to the highest and obviously if you have different file names the logic here would be different it very much depends on what kind of system you have in my case I created these with After Effects and this is the default name so I can't really change that let's first of all only get the number here with this one item we first of all have to get rid of the dot PNG that we can do using the split method and I want to split this wherever we have it dot like so if I run this now we're getting a list with two items returned I only care about the first one which means I can use indexing here to only get the first one with that we get image and light zero zero zero one since we can do indexing on strings we can use indexing here once more I want to go from negative five all the way to the end if everyone is now we are just getting the number itself although if I print the type of what we are getting we are still getting a string which means we have to convert all of this to an integer and now we are just getting a number you can see we're getting a number because python removes all of the zeros which means this logic here is what we actually want to use let me uncomment sort it put this over multiple lines now for the key I have to use a Lambda function the Lambda function will always get one let's call it item this item is now going to be my image data which means I can copy all of this paste it in here and replace image data with item then I can comment all of this out fix the white space here on top of that we have to remove this one here we only use that to get one item from the image data this we don't need anymore now if I run this we're not getting an error that's a pretty good sign but just to be sure let me print sorted data the result is still going to go from 0 all the way to 29 although now I think if you are on a Mac the result here should now be a properly sorted list with that I can get rid of the print statements this one and this one and we have sorted data this is still not enough because now we need the full path you might be wondering now don't we already have that from this image data the answer is not quite let me print it actually again if I print sort it data what we get is a file name but this is not a path what we have to do instead is first of all for the full path we need the folder name then Plus then a slash and then we need the image name fortunately we have everything we need the image names we are getting from this list here the folder name is I have a light path or dark path which we are getting from the path although since we have quite a few of them I want to store all of this inside of a list let me change full path to full path data and now we are going to use list comprehension I first of all want to get the path this is either light path or dark path in our case this would be black or yellow after that I want to add a slash and then I want to add one of these file names I guess we can use item again so I want for item in sorted data with that if I print the full path data we are now getting actual paths we go into the black folder and in there we have image zero zero zero then black image001 and so on this is what we actually need although we have to get all of this out of this for Loop so we can use it a bit more efficiently for that I want to have another variable I'm going to call this one image paths this for now is going to be an empty list and once I have full path data I'm going to append that image paths dot append bold path data with that after we are finishing the for Loop let me minimize it actually I want to print image paths this is not going to give us two long lists full of image paths the first one is all of this and the second one is all of this this is a good start but I want to modify this a tiny bit ideally I'm going to have a list let me draw it here inside of this list I want to have lots of two builds each Tuple should contain one dark image path and one light image path so one in here and one in here then I want to have another Tuple with two more of those so that would be this image here or this image path and then this image path here I want to assign a new value to my image path the value I want to assign is zip and then I want to unpack the image paths let me print actually what we get this might be a bit complicated image paths what we now get is a zip object that's not particularly helpful but we can turn this into a list and now we can see what's going on what we're getting now is one long list and this list is full of tuples one Tuple contains the first image for the dark image so black image000 and then the light image so yellow image 0 0 and 0. then we have another Tuple here and this continues forever we keep on having more and more two builds this makes it very easy to work with this data which is exactly what I wanted also in case you're wondering here zip is a function that zips together two lists in a way that you take the first item from the first list and the first item from the second list and then you combine those two into one Tuple zip is expecting two arguments which should be two lists which we get by unpacking image paths because this one contains two lists with that we have all the data that we need so now we can turn all of this into actual ctk image objects those I also want to store in a list so we're going to continue by creating ctk images which is going to be another empty list we are almost done actually this is the much easier part what I want to do now is for image path in image paths let me print what we get image path we are simply getting a tuple with the light images and the dark images or however you want to call them the naming here doesn't matter terribly much what I want to do with that is I want to create a ctk image this I do with cdk and ctk image this is what we need in custom tkinder to store image data inside of this we need a light image and we need a dark image since in my case the first item inside of the image path Tuple is the light image this is what I'm going to assign here which means we can now use image dot open and pass the path in here which would be image path 0. I should probably put all of this over multiple lines otherwise this will be difficult to read we are using image open on the first item now we are doing this on the second item as well or the one with the index one once we have that all we have to do is get ctk images and append the ctk image with that we are going to have one long list with all of the cdk images this is what I want to return so return ctk images then we can close this method and never worry about it again and this was by far the most difficult part of this tutorial if you got so far the worst part is definitely over once we have the imported folders I want to store the return value inside let's call it self dot frames just to make sure this is working let me print self dot frames and we are getting a list of objects this doesn't tell us very much right now but at the very least we are getting something I guess you can tell here we are getting ctk images so that's a pretty good sign once we have that we need actually to create a bit more stuff in here so let me create a proper section that I call animation logic setup besides the frames we also need what I call a frame index this by default is going to be zero later on I'm going to explain the animation logic but for now this is what we're going to use to pick one item from the frames that we want to display we can actually already use this when I'm setting up the button instead of the init method I can also add an image this image is going to be self dot frames and since this is a list I can use indexing I want to get self dot frame index in here and once again this should be over multiple lines otherwise I'm cutting off some text if I now run this there should be an image you can see there's an empty space but nothing more the reason for that is that the first image is completely empty this is why you can't see it however what we can do now if I change the frame index from 0 to let's say 20 . now we can see one star if I increase the number to 21 we get a slightly larger star if I go to 26 okay it is going to be very hard to see but if I go to let's say four we get a very small star the differences between these images is so small it's really hard to see if you see them by themselves for now just trust me this is definitely working next up we need self dot animation length this is going to be the length of self dot frames although from that I want to subtract 1. the reason for that is imagine if we had a list right now with three items the list would be 0 1 and 2. this would be three items however if I want to use indexing it would always be the length minus one the final item would be the length of the list so three minus one this is going to be really important for this animation length because I only want to go up to this final item but then I want to stop so I have to know what is going to be the final index of the list which I'm going to call length it's not exactly accurate but I think I get the idea there's one more thing that we need and that is self dot animation status this is going to be a tkinter variable almost specifically is ctk string VAR this one is going to have the value of start by default now why do I want the animation status to be a string VAR well the reason here is because with that I can use tracing so self dot animation status and I can use trace and anytime I'm updating the value so I'm writing in it I want to run a certain kind of method this method is going to be animate let's create this one right away I want to have nmate what is important here besides self we also need unpacking and arcs because every time we are using trays we got some default arguments although in our case we don't really care about them for now I'm going to add pass in here because there's one more function that I want to create that is going to happen inside of this super init method because I only want to start the animation when I'm clicking on the button which means this one needs a command the command function is going to be self and I called this one trigger animation I'm going to create this one above animate so trigger animation with self and nothing else in here we are going to the State Management which means we are updating animation status for example if self.animationstatus dot get which would right now get us start if that is the case so if this is equal to start then I want to set self dot frame index to zero so we are starting on the first frame of all of the images on top of that I want to set self dot animation status with the set method 2 for Ward which basically means that we want to start at 0 and move the animation forward besides that I also want to check if self.animationstatus dot get is equal to end if that is the case I want to get self.frame index and set this to self dot animation length other than that I want to set self dot animation status with the set method to backward since with this we are updating the tkinder variable with forward or backwards this animate is going to be triggered now we can check for different things for example what I could be checking for is if self dot animation status dot get is equal to forward if that is the case I want to play the animation which in this case means I want to get self dot frame index frame index like so and increase the value by 1. which means that this number here self.frame index when we use it first time gets the first image which we are using down here with the image this I want to increase to 1 2 3 4 all the way until the end of the animation frames if I go through them fast enough we are going to have an animation which means I can use this now with self.configure I want to update the image the image is going to be self taught frames in here self dot frame index let me run this actually if I now click on the button we get a very small star this is because we are only calling this animate once so we only go from frame 0 to frame 1. we will need self dot after after 20 milliseconds I want to run self.animate again with that if I click on this now we have an animation and then we are crashing since we are running this method here forever at some point we are going to run out of frames or more specifically we have a larger index than the length of the list which is giving us the error or more specifically we get list index out of range to account for this we need an if statement if self dot frame index is smaller than self dot animation length only then do I want to update all of this if I try this now and click on the button we have an animation that's looking pretty good if that is not the case so else I want to set self dot animation status using set to end that is telling us once we get to the end of all of this I want to have a new status because I know the animation has finished if we're done pressing again this is stepping here with run and we would set the animation status to backwards by now this wouldn't do anything because inside of animate we only have this bit of code here meaning we're only running any kind of Animation if the status is forward to account for that we need a second one that checks self dot animationstatus dot get is equal to end if that is the case I want to do very similar things compared to what I've done here although not exactly let me start by copying it and now I want to set self.frame index and reduce it by one every time we are calling this configure still works just fine although for this if statement I only want to do all of this if self.frame index is greater than zero this part is still fine although in the else statement if we are finishing the animation I want to set the status back to start if I'm running all of this now I can click on an animated button and now we are almost done the animation works but we always go to the end and then back to the start the reason for that is that we only want to do this if the status is backward now if I run this this goes forward and now nothing happens but if I click on it again we're now going backwards yes I can do multiple times still works just fine on top of that when I'm creating all of this I can get ctk set appearance mode and switch all of this to light mode we are now getting a different kind of Animation or while the same kind of Animation just different colors if I open the folder again we are importing yellow this is the dark images this one is all yellow and then black has the same animation just in completely black although besides that we also have dark this one has a hard animation either for white or for the dark path which means if I add in here light and dark we importing those folders and now we get a heart that we can also animate although I think there should be the other way around dark and Light that is definitely looking better if I remove the appearance mode I guess it kind of works let me stick to yellow and black I think those look a bit better although I had this the other way around earlier this was black and yellow there we go now we have the yellow animation again cool with that we have made a lot of progress although there's one challenge I have for you I want you guys to create another animation and this one should run forever that means we go from frame 0 all the way to the end once we reach that point we're going back to the start and then once again we go from zero to the end that way the animation will keep on starting over and over again try to implement this one I want to keep all of the logic contained inside of a method I will call this one infinite animate no need for custom parameters this I also want to trigger when we are pressing the button to check if this is working let's print infinite if I now click on the button we get infinite that's a good start now we have to figure out the logic for that self.frame index and increase it by one once I have that I want to use configure again I want to update the image the value is going to be self dot frames with the index of self dot frame index finally I have to run self dot after I want to update this after 20 milliseconds and call Self dot infinite animate again if I run this one now we get the first animation but then we are crashing because we are running out of list indexes again to account for that we need one more line of code basically what I want to do I want to update self.frame index and I want to set it to zero if self dot frame index is greater or equal than self dot animation length however if that is not the case else I want to keep self.frame index as self.frame index the way you want to think about it is if we have a list with 0 1 2 3 and 4 items self.frame index is going to start here and it's going to jump to this one then to this one then to this one then to this one and if we get to this point here this if statement is going to trigger and it is going to put self.frame index back to the start that way the animation will go on forever let's try this one now if I click on the button we get a continuous loop although I think because of the equal sign here we are skipping the last frame let's remove it and play this again there we go you can't really see a difference but well there's one more frame in the animation now and with that we have animations obviously you can make all of this a lot more fancy but this should be a really good start in this tutorial we are going to work a bit more with colors we already know how to color in the background of any app especially if you use custom TK enter this should be fairly easy however what we don't know is how to color in the title bar this one so far always had one color it was either white or black and unfortunately there's no easy way of changing it we actually have to use Python to Target windows and then tell it to give it a custom color and this is only going to work on Windows so we also have to make sure that if we're running the code on Mac OS or Linux we're not crashing the entire app and that is giving us quite a few things to work with so let's Jump Right In here we are in a code editor and first of all we have to import tkinter now in this case I'm going to work with custom tkinter but this would also work with the normal decanter what I want to do is import custom tkinter as ctk after that I want to create an app this we get with ctk and ctk I guess while we are here we can also give this a geometry of let's say 300 by 200 the number here doesn't really matter and after we have that I can run main Loop to start the app with that I'm getting a small window that isn't looking too terrible and I do have some control over the colors most importantly to set the background color when I'm creating the app with ctk and ctk I can set an FG color this could for example be red if a run is now we have a red background color you could also use hexadecimal values for that you need a hashtag and then let's say ff00 and FF and that would give you a pink color just as a reminder FF stands for the red color 0 0 is for the green color and the final FF is for the blue color which means in our case we have a full amount of red and a full amount of blue and combine these two colors and there's no green whatsoever and the result of that would be pink however now we have one important thing that we can't do and that is to change the title bar color how can we do that to get started we have to import a couple of things I want from C types import win dll then by ref then size off and finally C underscore int all of those modules are quite specific the one we really care about is wind dll because this is giving us access to some system level functionality of Windows and that we can use to color in the title bar and for that we will need a couple of steps first of all we have to Target the current window because right now what we're doing is we are talking to Windows directly and what we want to do first of all is to get our current window this you usually store in a variable called hwnd which is standing for the window handle and that window handle you get with win dll then user32 get parent or get parent make sure you spell this right the G and P should be uppercase this is a method so we have to call it we have to add one argument and that is app W info underscore ID and this is also a method basically what is going to happen this app W info ID is giving us the current ID of the window we have open the app we just created and this ID we are using to get the current window handle this is what Windows as an operating system sees so this is what we are now storing in the variable with that we have access to the window which means next up we can actually change the title bar color and this we do with win dll and WM API and then uppercase the WM set window attribute this method wants four arguments the first one is going to be the window handle this we just got so HW and D next up we will need one argument that tells us what attribute we want to address because this set window attribute can Target quite a few things to give this a bit more context here is the windows documentation for this method we have dwm set window attribute and in there we can Target quite a few different attributes for example in there we could Target the Border color the caption color the text color and well quite a few more things most of those we are basically just going to ignore I'm going to add a link to this website but it's not going to be too important back in the code all we really have to do is add a 35 in there this is the attribute for the title bar color next up we will need the actual color and you might be tempted to Simply add something like red unfortunately that would not work instead we need a very specific kind of color and this is called hexadecimal color let me store it in a separate variable actually I will call this one the title bar color and this is going to be a weird format we start with 0 then an X then 0 0 and then we can add a color that looks something like this except it's inverted which means we are adding two digits for the blue color then two digits for the green color and then two digits for the red color for example if we want to have pure red this would be 0 0 then 0 0 again and for the red color f f once again we are using hexadecimal values which means zero is the absence of the color and F is the full amount of the color you might be wondering now what kind of value is this even because we have a bunch of numbers but in a couple of strings so is this a string or a number the answer is this is an integer if I simply print the type of the title bar color and comment out the dwm set window attribute and run all of this we're getting a class integer what we're creating with this one is a special kind of integer although we don't have to worry too much about it this color we now want to use but we have to convert it and for that we have pyrav and C underscore int to use them we first of all have to use buy ref and this one wants the argument with C underscore end and this one wants the actual color title bar color and let me put all of this over multiple lines that's why it's a bit easier to read there's one more argument we need to make all of this work and this one is fairly Technical and it's always going to be the same what you need is size off and this one wants the argument C underscore int at this stage don't worry too much about it just always add it and then you're good to go but now if I run the app we get a red title bar color that is because in the title bar color string we have the full amount of red we have no green and we have no blue if we change this to an FF for blue and 0 0 for red run out of this again we get a blue title bar color what you can also do let me copy all of this and paste it right below if you target attribute number 36 then you target the color of the title bar text which means if I run this now we can't see the text anymore the bit up here is gone oh well it's not really gone it's just the same color as the background however if I give this another kind of color let's say the title text color this would have to be the same format that we have used up here let me copy it actually and let's say for the color I want to have no amount of blue I want to have the full amount of green and just a bit of red so let's go with Nine and Nine and this color I want to use for the text color and if I run this again we get some greenish looking color that is because we have the full amount of green and some red with that you can change the title bar color and you can change the text of the title bar color it's not terribly elegant but it certainly Works however there's one major issue that we have to address all of this code is only going to work on Windows and let me get rid of the white space if you try to run this code on Mac OS you would get a crash because python couldn't import win dll this one is exclusive to Windows as a consequence we want to add a tiny bit more code that if we are running all of this on another operating system that would cause an error we are simply skipping this part of the code which means we want to add a try and an accept statement and this I have covered earlier in the python introduction we basically need two important keywords they are called try and accept I hope you remember those two in fact this is going to be your exercise I want you guys to make sure that this code would run on any operating system which in effect means that if you're running this on anything other than Windows we are simply skipping this line and all of these lines pause the video now and try to figure this one out you might have to go back to the python introduction but see how far you get first of all we have to wrap all of this import into a try statement which means I want to try to import this like so and when I'm using try I also have to use accept in this case I simply want to add pass to all of this I am telling python to try to import all of this stuff if we are on Windows this is going to work so python is going to be happy and run this line however if we are on Mac OS this is not going to work and as a consequence we're going to end up with the accept statement and in there we simply have a pass so this is not going to do anything that is going to be the first part we do however need a second part if we'll have the code like this we would skip this line so the code would work up to that point this bit here would also work however now python would try to run this code on any operating system and since we don't have windll we would get an error as a consequence all of this also needs to be wrapped in a try accept statement let me indent it and I will need Rye at the end of all of this since we're using try once again I will need accept and once again I want to accept pass we are telling python to try this entire block of code and check if it is working or not if it is working everything is good and simply continue however if it is not working simply don't do anything which we're doing with accept pass I can run the entire thing again we are getting our current APP however now if you run out of this on Mac OS although it would have the standard colors so at the very least we have something and with that we have covered another really important part about styling hello in this part we are going to create a BMI calculator for this one you can change the weight and the height and then you get your body mass index it's a fairly straightforward app I guess the one extra thing I added here was you can change this to Imperial units and then use ounces and inches it really isn't anything complicated in here I am just using custom tkinter with some basic sliders and buttons and then the formula for BMI is also really simple and before I jump in really quick here is the folder I'm going to work with let me make it a bit larger we have BMI and there we're going to write a code right now it's entirely empty besides that we have settings.pi this is going to cover the colors and the font sizes and stuff like that finally we have mt.ico and this is to hide the icon of the app that is all we need so with that let's jump into some code here's my code editor ifbmi dot Pi open and I have settings.pi inside of settings.pi we have a couple of basic information about the text sizes and then some colors finally we have the title hex color this one is also a color but it works slightly differently so what we're going to start doing is create a basic window using custom tkinter and color it all with one shade of green this shade of green here in particular for that first of all I want to import custom tkinter as ctk and after that I want to create a class I got this one the app and for this one I want to have ctk and ctk this class app is going to need a thunder in it method with self and nothing else the first we want to do in here is some kind of window setup yes as always means to call the super Thunder image method we can call straight away an F G color which is going to be green that is going to be this green color here although right now I don't have my settings available for that inside of pmi.pi I want from settings import everything just to make sure this is working I am going to call Self dot main Loop inside of the app after that I'm going to create an instance of the app with that if I execute the code we can see we have a small window that has a greenish background what I want to do now is to write the title and the icon this I do with self dot title and set a title to an empty string with that I don't have a title anymore next up to hide the icon I want to use I can bit map and for that we are going to use Mt dot Ico that is the blank file we have inside of the folder I am importing this one with this line and now if I run the code we don't have anything at the top left anymore meaning this error here is completely empty although right now when I'm starting the window the window is quite small for that I want to use self.geometry and give my window a start size of let's say 400 by 400. if everyone is now this is looking much better on top of that since this isn't a flexible layout I want to self dot resizable I do not want to allow resizing the window which means in here I want to add faults and false this means the window cannot be resized so if I try to click on the corners nothing's going to happen the main reason why I don't like resizable for these small apps is simply because there isn't that much to fill the content if we are something this simple and we resize it all of the elements just become really small relative to the Windows size although I guess if you wanted to add more elements you could fill the space a bit more efficiently but if you don't do it it's just starting to look a bit silly but right we are very nearly done the last thing we have to do and this I want to do in a separate method I want to change title bar color this is going to be a method so I have to create the method here and this one is self and nothing else what I want to do in here let me add pass for now I want to change the color of the title bar and since I covered this earlier this could be a really good exercise although there's one additional thing I do want to add this will only work on Windows but I do want you guys to make sure it does not crash on Mac OS pause the video now and try to implement this one it shouldn't be too difficult first of all we have to import a couple of things all of those we are getting from C types specifically I want to import win dll by ref size off and finally C underscore int when dll however only exists on Windows meaning if we tried this line here on Mac OS we would be getting an error for that I want to use try spreading it correctly would also help try like this meaning we are trying to run this code however if we are getting an error then we are using accept and if that is the case I simply want to run pass meaning we're not doing anything once we have that I can work inside of the method and once again in here I also want to run try because if we couldn't import this line up here then we definitely cannot run this line here so both need to have try and here I want to get H and WD and this I get with win dll dot user32 dot get parent this one needs one argument which is self.w info underscore ID and do not forget to call this one next up we have to get what is called a dwmw a underscore attribute and this is simply 35. next up we need a color and the color we already have this we have inside of settings this color here it does look very strange but I added a comment here the hex order is 0 then x 0 0 this you can entirely ignore after that we have the blue colors the green colors and the red colors so the green color that I want is this one here which is the same that I have up here for the background color although in my case all I have to do is copy title hex color paste it in here and then I'm good to go finally I have to get win dll then bwm API dot now comes the long name uppercase d w m then set window attribute inside of this one we now need HW and D then we need dwma attribute finally we need buy ref C underscore int of the color for the last element we want to have size off and then here C underscore int the last argument is quite technical so you don't have to worry about it but basically what we're doing in here just to recap when dll dwm API and then set attribute sets one specific attribute of a window inside of this one we're getting the current window then we have to Target one specific attribute and the one we are targeting is the number 35. this targets the color of the title bar and then we are giving it a color with this line here the way this is working is a bit more cryptic but that's just how it works but well with that we are done so let me run the entire thing and I am getting an error that after this try statement I am not adding an except that is very easily fixed except and pass if I now run this we don't see a difference so something went wrong most likely in this line here because this one's really long and I can see the error this should be a lowercase C now if I run this there we go now we have a completely green window with that I can get rid of the exercise text and minimize the app for now although there's one more thing that I want to do this app here should be wrapped inside of an if statement and that if statement is going to be if done their name is equal to the string Thunder Main only if that is the case I want to create an instance of this app if I run the code now we're not going to see a difference but if you have multiple files this is generally what you should do that way we don't accidentally run some code in some other file like in settings for example although in this case there's no real code to run here we're just storing some data but it's got practice so I am going to include it in this part we're going to create the four widgets that are visible inside of the app meaning we're going to create the title for the BMI text then we have the weight buttons after that we have the slider for the height and finally in the top right we have the metric Imperial button for now they are not going to do anything but at the very least we are going to have a pretty good start I want to keep on working inside of my class app in here before we can create any kind of widget we have to create a layout in my case I have used a grid layout although we only have a single column which means I can run column configure I have a column with 0 and the weight is going to be 1. the rows are going to be much more important in my case I have four rows 0 1 2 and 3 all with a weight of one on top of that I have set uniform to a the way the app is going to work if this is the entire window we have four rows one two three and four the BMI text is going to cover the top two buttons the white buttons are going to be in this one here and finally the height slider is in the bottom one all the way at the end the Imperial metric button is going to be in the top right and this one we are placing with place not with the grid layout since you can combine them this isn't a problem we have the layout meaning I can minimize the class app and now create all of the widgets each of them is going to get their separate class first of all I want to have class let's call this one the result text since this one is only going to be a label I want to inherit from ctk label although this one like any other class we're going to create is going to need an init class in here we need self and for now we need a parent we have to call the super Dunder init method to initialize the parent the most important argument in here is the master which is going to be the parent to get something in here for now I want to give this some text let's go with 22.5 once we have that I want to place this result text right away using the grid method we are in column 0 and row 0 as well since I do want this widget to span two rows I need a row span of two finally sticky is going to be north south east and west this should be all we needed to get started with this text meaning now I can add another section in here let's call this one the widgets I want to create my result text I need the parent in here which is going to be self other than that there are no arguments needed let me run the code now and there we can see 22.5 right in the middle that's a decent start but well it is very very small for that though we can make a few updates inside of settings we have a font and a main text size I want to use those two to create a font and then this font should Define how large the text is I suppose for this one to keep things a bit more organized I can create a font inside of this result text this I have to do before the Super init method in here I want to create a font this I create with ctk and then ctk font this font is going to need a family and a size both of those we're getting from the settings the family is going to be the font this one here next up we need the main text size for the size let me copy it the size is going to be the main text size all we have to do now is send the font of the text to the font we just created and now if I run this again this is looking much better there's one more thing that I do want to do inside of the font I want to set a weight the weight should be bold and now if I run this again this is looking significantly better with that we have to resolve text and next widget is going to be the weight input this one is going to inherit from CT k for aim as always we need a Dunder init method this one itself enter parent first of all in here I want to call the super Dunder init method the master needs to be the parent and I guess while we're here I can also set an FG color which is going to be white this white we are getting from the settings I'm using this right here after that I want to place this widget as well with the grid I want to use column 0 and the row is going to be 2. also sticky should be north south east and west with that we should be seeing something after creating an instance of this class which means I want to create the weight input itself as the one argument for the parent run this entire thing again and there we go this isn't looking terrible although it needs a bit of refinement most importantly when I'm using the grid method I want to add a bit of padding for the horizontal and the vertical I want to use 10 pixels each and now this is looking a bit cleaner and what I'm looking at is I can see I forgot one thing it's probably very hard to see on your computer but the color of the text is slightly darker than the color of this box this is because when I created the text I did not set a color that we do with text color and this one should be white as well now if I run this both the text and the Box have the same color inside of the weight input we now have to create a layout for all of the buttons as a reminder here is the final app what I want to create for the layout is once again I'm going to use grid we have one row and then we have a bunch of columns we have column 0 column one column two column three and column four the easy part in here I want to use row configure the index is zero the weight is going to be one and uniform let's set this one to be simply because I have used a up here also I don't need the class app right now I just want to work inside of the weight input next up I have to work with the column configure I have to create five columns so let me duplicate this a couple of times so that we have 0 1 2 3 and 4 5 columns in total the middle column should be the widest one so this one is going to get a weight of three column one and three are for the small buttons I like to keep them at one however column 0 and column four need a weight of two so they are twice as wide as the columns one and three once again to illustrate what this means column 0 and 4 are these large buttons here they get a weight of two each next up we have one and three these are the smaller buttons so they only get a weight of one finally the text in the middle is going to be column two this one needs to be the widest which means this one's going to get a weight of three and I am incapable of drawing a free this is giving us the layout so now we have to create the widgets or the buttons whatever you want to call it I guess it's not all buttons so let me just call it widgets the most important widget in here is going to be the label this one will be a ctk and ctk label self is going to be the parent for the text for now let me just write in 70 kilogram this label I want to place right away so label dot grid row is going to be 0 column is going to be 2 and with that if I run the entire thing we can see something very very faint but there is a very faint 70. it's tiny and basically white so we have to change the styling here first of all the text color should be I think I call this black if I go to settings we have black here so now let's run this and this is definitely more visible on top of that I also want to create a font like I have done before this is going to be ctk and ctk font we need a family and a size both we already have inside of the settings the font size I want for this one is the input font size for the family I simply want to use my font now once I have that I want to set the font to the font I just created and this is looking much more visible let me change this once again a better comment here would be the text because now we can add the buttons there are four buttons that we need let me start with one I want the minus button this is going to be ctk and ctk button the parent is going to be self and the text for this one is simply going to be a minus this one is also going to need a font and for the font here we can simply reuse the font we created earlier which means font is going to be font where we are here we can also set the text color to Black let's add this minus button to the layout right away using the grid method this one should be all the way on the left meaning the row is still going to be 0 and the column is also going to be zero if I run this now we are getting an error that this black is not defined this should be an all uppercase letters black now if I run this this is feeling a bit better but I guess I can already see some problems we first of all have the completely wrong colors and if I hover over this the hover color is also wrong also this button is a bit too wide first of all I want this button to cover the entire height of the container for that I need sticky and the argument I want in here is north and south now if I run this again the button is going to cover the entire area although that's also not exactly what I want instead what I want to do is give this a padding of 8 both vertically and horizontally so pad X is 8 and Pad Y is 8. and this is looking much better although the colors still don't work for that inside of the button I need to add a few more arguments first of all I have to set an FG color this FG color I termed light gray this once again we get from the settings light grain here now if I run this again this is looking significantly better however if I hover over this we're getting a really ugly color so the last thing we have to do is we have to set a hover color the hover color is simply going to be Gray this is the gray we're getting here is slightly darker shade of gray so now if I run this again we have a hover color that works and well this is looking really good although that being said there's one more thing that I did add and that is a corner radius I have set this one to six although this one is going to be very difficult to see but I think it definitely makes the entire thing look a bit nicer although this corner radius here I should add to the settings which means inside of the settings let me edit here I want to have button Corner radius and it should be six this I now want to copy and replace the 6 with the button Corner radius the result is going to be the same but now we can change the styling from inside of the settings so with that we have the minus button once I have that I can simply duplicate these lines and create the plus button the only difference here really is that the minus should be a plus for the text and when I'm placing this button using the grid method the column is going to be 4. now if I run this one we have a plus and a minus button that both look pretty solid meaning now I can copy this entire thing one more time because now I want to have let's use the plus button again I want to have a small plus button this one is still going to show a plus sign however since we're placing it on column three it is going to be smaller meaning now if I run this we have a smaller plus button this is almost working but this covers the same height as the bigger plus button to account for that I simply remove this sticky argument run this again and there we go now this plus button is much more squareish which is looking better on top of that I want to change the padding from 8 to 4. and with that we have a much nicer looking button there's just one more button that we need so I'm going to duplicate all of this one more time because now we have the small minus button the only two changes that we have to make is change the plus to a minus and the column shouldn't be free it should be one and now if I run this again we have all four buttons meaning now I can hide the weight input and work on my next class this is going to be the height input this one once again is going to inherit from ctk frame and then here I want to have an init method that takes self parent and that's all that we need for now and here as always I want to have the super init method I want to set the master to the parent and the FG color to white after that this is getting a bit repetitive I want to use the grid method row is going to be free and column is going to be zero also we need sticky north south east and west and Pad X should be 10 and Pad y should be 10. this should be giving us a container although I do have to create an instance of this class meaning inside of the app below the height input I want to have the height input with self now if I run this we have the final container that's looking pretty good we now just have to fill the swing since this layout is pretty simple we can stick with the pack method so I can jump straight to creating the widgets I want to create two widgets in here I first of all want to have a slider this I create with ctk and ctk slider the parent here is going to be self as usual and that is actually all I want for now once I have that I want to pack this slider the most important argument in here is the side because I want to place this on the left side I also want to fill the entire horizontal space and I want to set expand to Rue also for a bit of padding I want to set pad y to 10 and Pad X to 10. if I run the app now this isn't looking terribly bad although we definitely have to work on the styling inside of the slider I want to set a few more things and I am going to work over multiple lines because there are quite a few in there also I want to use named arguments so let me set the master to self and then we can work on the rest first of all I have to change the button color and this one should be green the green here should be in all uppercase letters now if I run this the button that we can drag on the slider let me show my mouse the button that we can show is going to be green although if we hover over it it defaults to this ugly bluish color to get rid of that one we have to set a button hover color the button have a color I set is gray and now I have a green button by default and if I have over it it becomes a lightish gray next up I want to set the progress color and this one should be green as well what this one is doing is it colors the left side of the slider so this side here is now green the last thing that we have to do is to change the f g color and this one I have set to light gray this one updates the right side of the slider so this side here it's now light gray that is giving us the slider although I also want to have some text let me name this the output text this is simply going to be a ctk and ctk label although I can already see my typo there should be uppercase t in here once again the master is going to be self and for now the text is let's go with 1.80 this output text I want to pack right away I want to set the site to left as well and Pad X I want to have 20 pixels of padding now if I run this one we can once again we have the same issue we have to text earlier the text here does exist but it's really hard to see and it's also very small but that we can work on first of all I want to set a text color to Black and now with that this is much more visible also I realized there should be a meter at the end like so and now we get 1.8 meters besides that I have to create a font and so far I always created a separate variable but we don't actually have to do that I can do it straight in here so I can simply create c t k and font with the family being the font and the size is going to be I call this one the input font size enough around this we have a much larger font that covers the height input so there's only one more thing to do I call this one the class unit Switcher what this one is going to do let me run Define lab again this one is going to be the text all the way in the top right here by default it's going to say metric and it's going to be a bold text with the same font but a smaller font size what is really important about this one is that it's not placed using the grid method but rather the place method this is really important to know because this final widget is going to be your exercise I want you guys to create that text in the top right the only important things that you have to know for this one is that inside of settings we are using the same font so calibri but now we have a switch font size for the text color go with dark green that is all you have to know so pause the video now and try to figure this one out yourself first of all we have to figure out the inheritance for this one I'm going to use a ctk label simply because the entire widget is just going to be some text inside of the init method in the class way after yourself and then get a parent this parent we can use in this super in Niche method because in here we have to set a master which is the parent on top of that just to see something for now I'm going to set the text to metric now we have to figure out how to place this kind of widget and importantly here we cannot use the grid method or well we could use it but it wouldn't give us the right result instead I want to use the place method for this one I want to use relative values which means I want to set relative X relative Y and then I also have to create an anchor the way you want to think about it is that this one here is the entire app the position I want for the widget is going to be roughly somewhere here so I have to figure out how to get this widget in the top right with a tiny bit of padding also remember the sizing here for relative numbers so relative X for example would go from 0 all the way to 1.0 and for relative y we're also going from 0 to 1.0 these numbers we can use quite easily to create padding ourselves because the place method doesn't have padding the way I approach this is I said relative X to 0.98 and relative y to 0.01 finally I have set the anchor to North East and this should be a string basically I have set the anchor to North East which is this point here then relative y 0.1 gives me almost a top so almost this line here except a tiny bit of difference this would be 0.01 that's why we get a tiny bit of padding at the top a similar thing I have done for productive X I am going almost to the right side but not quite so if this line here is zero I'm going almost to the end but not quite 0.98 leaves this tiny bit of space and now with that I simply have to create an instance of this app let me call it in here unit switcher with self and now in the top right we have our metric text that is a really good start although we have to work on styling a tiny bit more first of all I want to update the text color and this one I believe I called it dark green inside of settings this dark green that's looking good let's try this one and there we go we have a dark green text besides that I have to create a font which is going to be ctk and ctk bond the family is still going to be the font on uppercase letters this size is going to be inside of settings I have a switch font size I want to use that one and the weight for this one is going to be bold now if I run it again there we go in the top right we have the metric text and with that we have all of the widgets now this video is getting a tiny bit longer but I did want to cover all of this in one go so now we can work on actual functionality for this part we're going to start implementing the logic for well the entire app which means if I now press on any of the buttons or use the slider we are updating the BMI number for now I'm only going to use metric numbers in the next video I'm going to cover how to use Imperial numbers or rather how to make the user think they are using Imperial numbers but let's focus on the basic logic for now once again here we are in the app and now I have to start thinking about how to implement the entirety of the logic for that first of all inside of the app we have to add another section before the widgets because to make any kind of logic work here we have to account for the data so I want to store some data in here I want to create three different variables the first one is going to be the height and this is going to be an integer this accurate with ctk and int bar don't forget to call it and then here I want to set a start value of let's say 170. also I just realized this should just be invar without the ctk in front now if I run this this is working again besides the height end we also need a weight although this is going to be a float which we are creating with ctk and then double VAR for a start value here I want to go with 65 kilograms finally I want to have self.bmi string this is going to be ctk and is string VAR this one does not have a starting value but what we can do now is run a method that I call Self dot update BMI this we have to create let me do it on top of change title bar color I call this one update BMI for now I will not need any custom parameters and what I want to do in here is first of all I need to get the height in meter oh and I should mention the formula for BMI is the weight divided by the height squared and by default in all of this the units you would be using are kilogram and meter the 65 here is totally fine for the weight however for the height we have 170 right now this would be 1.7 meter for any American viewer watching this I hope you understand the units just drop me a comment if this is too confusing and I'll explain more basically the way you want to think about it if you never encountered metric units is one meter is a hundred centimeter and the unit we're using in the height in so far is centimeter on top of that one kilogram is going to be 1 000 Ram although this one we don't really need because kilogram is much easier to use how these numbers relate to inches and pounds I will cover in the next video for now don't worry too much about it the most important thing for now is we have to get our height in meter this is super easy to get all I want is self dot my height integer and importantly here I want to get right now this would get me the value of 170. which would be centimeters to convert this to meter I simply have to divide it by 100 and then I'm done next up I want to get my weight in kilogram this I get with self dot weight float and get since we are already using kilogram this one is totally fine by itself finally we can calculate the BMI result for this I want to have my weight in kilogram and divide it by my height in meter although this one needs to be squared and as soon as I have that number I can simply update my BMI string using set and pass in the BMI result this will give me the proper value inside of this BMI result however there's one problem we have right now this BMI string is not connected to this result text we could update it as much as we want it wouldn't be visible to account for that when I'm creating my result text in this line here I want to pass in self dot Emi string and now inside of the result text we need another parameter which is going to be the BMI string and this BMI string I have two instead of the super init method set as the text very Bill like so in here I want to have my PMI string and now at the very least we should see some kind of different starting text let me run the entire thing well we can certainly see a change the problem is that this number here has way too many decimal points to fix that I simply have to round this result this I can do using the round function the second argument here would be how many decimal points we have I think two are totally fine here now for run this this is looking much better now we get a proper result now the issue is I can use the slider and the buttons they don't do anything right now to fix that we have to connect the height integer to the height input and the weight load should be connected to the weight input let's get started with the height integer this I want to do inside of the height input I want to also pass in self dot height integer now once we have that inside of the height input we need another parameter let's call it the height int this height integer I now want to set inside of the slider as the variable so in here height integer if I execute the code now you can see that by default the slider is all the way on the right the reason for that is that by default this slider goes from 0 to 100 which isn't ideal to account for that I want to add a from and to parameter I want to go from let's say 100 centimeters so one meter should be the minimum if you are below that the formula doesn't help anyway two let's go with 250. this is 250 centimeters I I think that's a bit taller than eight feet so very few people are going to be larger and if they are a BMI formula would not apply to them anyway so now if I run this we can see the slider is slightly to the left so this would be 170 this would be 100 and this would be 250. we have the basic slider with a height integer now the problem with that if I run the entire thing again I can move the slider as much as I want it is not going to influence anything for that let me minimize the height input again because what we can do inside or rather after the starter I can add what I called Racing for the basic logic here essentially all we have to do is whenever this height or the weight changes then we want to call this method here and this would update the text the functionality for that is inbuilt into tkinter we are getting this with for example for the height integer using the trace method there are two arguments we need in here do we want to run a function or a method whenever we are reading the value or when we are writing on the value in my case whenever we change the value so when we are writing on this variable I want to run a method which is going to be self dot update BMI there's one more thing you have to be aware of and that is if you run a method using this Trace method tick enter automatically adds a couple of arguments into it as the second argument those usually capture with star arcs and then you just completely ignore them meaning no if I run this again I can update the height and we are updating the value for our BMI so next up we can do the same thing for the buttons which means for this one as the second argument I want to pass in self dot weight load so now I can minimize the app to have a bit more space and I want to work inside of my weight input I have to get the weight load in here as a parameter so the entire thing doesn't crash and we have the weight float available inside of the class that's a good start however now we have a problem each of these buttons does something slightly different we have to figure out some kind of system how to make every button change this weight float slightly differently for example if I click on the minus button I want to reduce the weight by one kilogram however if I click on the small minus button I only want to reduce the weight by 0.1 kilogram for the plus and the small plus button the same thing just in a positive direction since this is going to be a bit of extra logic I'm going to create a separate method let's call this one the update weight method besides self I also want to have let's call it the information by default this is going to be none for now all I want to do is to print the information now how this is going to work is each of those buttons is going to get one method this method here and then we're using that to pass information in for example for the minus button I want to add a command and this command is going to be a Lambda function although this Lambda function is simply going to call Self dot update weight the reason why I'm using lambdar is because this allows me to add an argument when I'm calling this method what I want to pass in here is a tuple with two values the first one is going to be minus the second one will be large the reason is this is a minus button so we have minus and this is a larger button so we have large that's literally all of this then I can copy this entire line paste it in here because now we have the plus button meaning this minus should be a plus next up we have the small plus button so I can paste this in again this should be a plus button and it is a small button finally for the small minus button I want to pass in the command line again this should be minus and small way of that let me run the app and now if I click on the large button we get plus large plus small minus small and minus large that way within one method we have all of our buttons inside of this method I first of all want to get an amount so by how much do I want to update this value this will be one if info 1 is going to be large this large only exists inside of the minus enter plus button these two buttons here they have large and large if I have either of them I want to change by one kilogram however if I don't so else then the amount should be 0.1 this would cover these two buttons here once I have that I can simply check if info 0 is equal to let's start with Plus then I want to self and set the value what the new value is going to be is self dot weight load dot get Plus the amount however if that is not the case so else I can simply duplicate this line and the plus should be a minus I hope these lines here make sense basically all we are doing is we're getting the current amount of the weight and then we are either adding or subtracting the amount we have specified here although I think I've realized this attribute self.weight float does not exist right now all we have is this parameter but we're never turning it into an attribute let's do this right at the top so self dot weight float is weight float now this should be working if I click on any of the buttons nothing is happening although if I print self.weight float dot get let's see what's happening if I now click on the small Plus we can see at the very least this is working and yeah we do have the proper values here and don't worry too much about all the floating Point numbers here they are not going to make a difference they just look weird but to a computer they're totally fine all of this here is working totally fine meaning we can minimize it but when I am opening the app again or the class app nothing is going to happen so why is that and well we're looking at it right now we haven't set a tracing for the weight meaning I want to duplicate this line when I'm updating the weight load using Trace as soon as the value updates I want to call the update BMI method so now if I run this and I click on Plus we are once again updating the BMI value it's looking really good also the slider still works just fine now this video is getting a bit longer and I can't think of a good exercise I guess what you should be doing is definitely understand how this tracing method here works and why it is important it's a really important thing to understand because this one allows us to work inside of these widgets by simply passing in any of these variables and as soon as we are making any kind of change all of that will be captured by these two tracing methods that keeps all of this much more organized so definitely have a look and see how this works at this point we have a reasonably working app which means I can click on the buttons to get a higher weight and I can also move the slider to get a different kind of height on top of that we get an updated BMI number all of that is working just fine however what we don't have is the weight and the height being updated which makes the app feel a bit weird and this is what I want to work on now for now I'm just going to work with metric units but later on we will also add the switch the one up here to switch to Imperial units as always I'm starting in bmi.pi and we have to work Ivan side weight input or height input depending on what we want to start with let's say I want to start with the height input the order here really does not matter what we have to do inside of this one we have to update this output text here for that I have created another text variable I called it self dot output string this is going to be a ctk and string VAR without any starting value although inside of the output text I want to set this as the text variable meaning text variable is going to be self and output string if I run the thing now we can see that we can't see the text anymore so this text here is gone to make it reappear I want to create another method I call this one update text besides self we are also going to need an amount so what amount do we want to set for the height for now let me simply print the amount the way we are going to use this is inside of this slider I'm going to add a command let me do it all the way at the top the command is going to be a function which is going to be self and update text since the command for the slider automatically inserts one argument which is the amount on the slider we get the amount here right away if I run this now and move the slider I'm getting the current height that's looking really good once again we are getting a huge amount of floating Point numbers so all of this but well we can simply ignore it it doesn't matter for our purposes this number I now have to convert to meters for example if I get 182 centimeters this is what I would be getting from a slider not centimeters but just 182 and that I want to convert to 1.82 and meters all of this needs to be one string for that first of all I have to convert the amount to a string let's call it text string and all I'm going to do is turn the amount into a string also while we're here I want to turn the amount itself into an integer that way we get rid of the floating Point numbers they are going to be a bit annoying once we have that I want to have the meter and the centimeter and the conversion here is really simple because for example if we have once again 182 this would be the string right now I simply want to get the first digit this works reliably because my slider only goes from 100 to 250 meaning we go from 1 meter to 2.5 meters it is literally not possible to be below 1 meter or greater than 10 meters which means this first digit is always going to be the meter to get this one I want to get the text string and simply get the first element which isn't going to be 1 but a zero next up for the centimeters I want to get my text string again and now I'm going to go from the first element all the way to the end with that I have my meter in centimeter so now I simply have to update self dot output string using the set method and then here I have to add an F string the F string needs the meters meter in here then I want to have a DOT after that I want to have the centimeters and finally I want to add the units so meter at the end with that I can run the entire thing again by default we can't see anything I will fix that in just a second but if I move the slider we can see the meters being properly updated that's looking really good to see the text right when the app is starting we simply have to call this method somewhere after we have created this output string let me do it right after self dot update text and really important in here we have to add the amount if we are calling update text inside of a slider this amount is added automatically but if we don't do it and just call it by itself we have to edit manually this fortunately is quite easy to do because we know the current height we're getting this from the height int let me copy it paste it in here and all I have to do is get and then we should be good to go now if I run this we can see 1.7 meter by default and I can update this this is working just fine with that we have finished the height input now we can work on the weight input for this one we have to follow is somewhat similar logic compared to what we have done in the height input which means this label here is going to get a text variable once we have that we can use update weight we already have a method for that to update the number as well since this should be reasonably straightforward it's going to be an exercise I want you guys to update the text to display the current weight pause the video now and try to figure this one out first of all I once again am going to need another output string which is going to be ctk dot stringvar this we now have to connect to the label which we can do very easily I want to have a text variable which is going to be self dot output string with this output string we don't actually need to text anymore I can simply get rid of it I should also do the same thing for the height input just to keep things a bit cleaner this text 1.8 meter we don't need any more back to the weight input now that we have this output string and we have connected it to the label if I run the app we shouldn't see any text anymore and we don't that's working just fine next up we have to work inside of update weight to actually update the text label and for that I want to call this method right when the app is started which means after I've created this output string I want to call self.update White if I run this we are going to get an error this error happens down here because right now info is going to be none and we are trying to get the index on none which doesn't work to fix that error I have to put all of this stuff here inside of an if statement that if info exists only then do I want to do all of this and with that I can run this again we still can see the text but at the very least the app isn't crashing anymore however what I can do now after the if statement set the output string what I want to have in here is some kind of string that looks like let's say 80.1 kilogram the weight I already have because I have the weight float which means I can get rid of this string here replace it with an F string I want to get myself dot weight underscore float and let's just see what happens we are getting the name of the ticket variable because I forgot the get method if I run this now and click on the button this one is working just fine for full kilograms however if I click on the small buttons this seems working up there we go now we have way too many numbers after the decimal point although this we can fix fairly easily all we have to do is round the weight let's say with one decimal point now if I run this the kilogram buttons so the larger buttons still work perfectly fine and on top of that the small buttons should also be working totally fine now and this is looking really good although there's one thing I have to add and that is the kilogram afterwards now if I run this we have kilograms although the rest of the buttons still work just fine all right and with that I can minimize or before I want to get rid of the exercise text and let me add a comment here for output logic now I can minimize the weight input fix the white space and we have covered another important part to finish the app I want to activate the button up here so we can switch between metric and imperial units for now we only work with metric ones so meter and kilogram but obviously for Americans and British people this isn't going to work the logic fault of this one isn't complicated I just have to talk about a couple of formulas to convert kilogram to pounds and ounces and meters to inches and feet shouldn't be too difficult let's Jump Right In back at my code there's one thing I want to do inside of the app to get started and that is I want to add one more variable to my data I guess we can do it right at the top I want to create self dot metric and this is a Boolean which I create with ctk and Boolean VAR the default value here should be true this metric Boolean we're going to pass into the white input and the height input to change the units and into the unit switcher to control it let's get started with the unit switcher and here I want to pass in the metric Boolean with that I can minimize the app for now and work on the unit switcher because in here we are going to have some important logic we have to start by adding a second parameter I got this one the metric pool this we have to turn into a parameter right away self dot metric pool is going to be metric pool what we now have to figure out is how to turn this unit switcher into a button which actually is quite simple all we have to do is use bind so we have to use events the one event I care about is called button this is simply a mouse button click if that is the case I want to run a method that I called change units this one doesn't exist right now let's create it right away change units and here we need self and we need the event although the event we are going to ignore entirely in here we have to do two things number one we have to change the metric rule meaning if it is currently true then we want to set it to false and vice versa this is very easily achieved all we have to do is get self dot metric boole and then set it with a new value since we only have true or false we are working with Boolean values the new value is simply going to be not self dot metric Bool dot get if this value is true right now the not is going to turn it into false and if this value will be false then not would make it a true value that way we can have the entire logic in a single line of code which is quite handy next up we have to update the text that is also going to be fairly simple I want to check if self dot metricpool dot get if this is true then I know I am using metric units which I can use with the configure method to update the text to metric however if that is not the case else I want to configure the text as well let me just copy it except now the units are going to be Imperial with that we should already have a basic start let me run the app and now if I click on Metric we get Imperial if I click on Imperial we get metric we essentially created our own button with that I can minimize the unit switcher and not worry about it again although the white space here does annoy me back in the app I now have to work either on the weight input or on the height input let's get started with the height input in here I have to pass in the metric boole and for that let me minimize the app again and work on the height input we are now going to need another parameter metric rule this one absolutely has to be an attribute let's do that right at the top self dot metric pool is going to be the metric Boolean although we are not going to use it anymore inside of the init method we are only going to care about it inside of update text because in here I only want to do all of this if metric pool is true so if self.metric pool dot get if that is the case I know I am using metric values but if that is not the case so else then I'm using imperial units for that I have to figure out feed and inches right now we have the centimeters inside of our amount for example the value we start with is a hundred and seventy and this would be centimeters these 170 centimeters I now want to convert to inches the formula to get an inch from centimeters would be one centimeter divided by 2.54 that's literally it it's not terribly difficult next up to get two feet we have to get one inch and divide it by 12. these are all the units that we are going to need all of this can actually be done in a single line of code how I approach this first of all I want to get the amount and divide it by 2.54 this would simply give me the inches but what I can do now is to use diff mod and then add a second argument which is going to be a 12. for example right now we are starting with 170 and 170 divided by 2.54 would be almost 67. what div mode is then doing is divide this entire thing by 12. so divided by 12 which would be giving us a 5 and then point let's say almost 0.7 both of these numbers we are getting separately which is literally all we need to convert centimeters to feet and inches as a matter of fact to make sure this is working let me print feed and inches now if I run this again I have to click on metric to get imperial units and now if I move the slider we are getting some units the text doesn't update anymore but at the very least in the bottom you can see that this seems to be working just fine to actually make it visible I want to duplicate this line here because I want to set the output string but this isn't going to be meters and centimeters anymore instead I want to have my feet the short end units for this is a single quotation mark which is going to confuse python so we have to add the Escape character this one here ensures that we can only see the quotation mark or the single quotation mark after we have that I want to add the inches and for this we need a double quotation mark and just to make sure that this isn't confusing to python I want to add the Escape character as well way of that we should be seeing something if I now go to metric and update all of this we can see that well we get a whole bunch of numbers the issue once again is we have a huge amount of numbers after the decimal point to account for that I want to wrap both of those into an INT function and now let's try this again I have to click on Metric to get Imperial and now I get the feet and inches this is going to give us the basic logic so we have a good start however you might have already noticed there's one problem I can update the meters individually and if I now click on Metric I get Imperial however the meteors right now are still visible only once I update the slider do I get to the feet and inches so the issue is only when I'm moving the slider do I run this method here you get the different kind of units if I simply click on the unit switcher nothing is going to happen let's work on this one next this is going to happen once again inside of the app in here I want to use tracing one more time I want to get my metric Boolean and once again I want to trace and check if the value is changing if that is the case I want to call a method I called change units this one doesn't exist right now let's create it right away change units in here we need self and we need the arcs although once again I'm going to ignore them entirely inside of this method I want to run a method on the height input which isn't possible right now because I didn't turn this instance of the class into an attribute although that I can change quite easily I want to have this as the height underscore input now I can access this self dot hide input the method I want to use is called update text I believe I called it let's check inside of height input I have this update text method this is what I want to use this one wants one argument and that is the current height which we do have available inside of this height integer let me copy it and simply pass it in here with the get method with that this should be working now I can still update the height but if I click on Metric I now immediately get the imperial units I can still update them just fine and if I return to metric I am back to meters with that we have finished the height input so next up we can work on the weight input for this one like for the hive we first of all need another parameter which is going to be the metric Boolean this we have to pass into it when we create the instance so in here self dot metric pool and let me minimize the class app so I have a bit more space first of all I want to turn the metric pool into an attribute self dot metric pool will be the metric Boolean after that I don't need the dunder init method anymore because the entirety of the logic is going to happen inside of update weight in here I still want to check if the info exists however now the amount I want to have a bit more flexibly what that means is I want to check if self dot metric bull is true and only if that is the case I want to increase the amount by one or by 0.1 it also be the sensible units for kilogram however if that is not the case I want to use Imperial units once again the units for this one would be pounds and ounces for that once again we have to talk about units I am once again starting with one kilogram or 0.1 kilogram and I'm not really going to convert them instead what I'm going to do is I'm going to increase the pounds by one pound one pound is 0.453592 kilogram a g at the end to get two ounces we simply let me write ounce in here all we have to do is get one pound and divide it by 16. since the units are actually fairly simple all I really have to do in here is get my amount and by default this is going to be one pound which would be 0.453592 kilogram this I only want to get if info 1 is equal to large which should be a string if that is not the case so else I want to get this same number and divide it by 16. with that I'm either getting one pound or one ounce except I'm expressing them in terms of kilograms and grams that is actually the entire trick for how this logic is going to work I am always working in metric units like kilograms or meters and centimeters except for the front end I'm converting these numbers either to metric units or to Imperial units because of that this logic here can stay exactly identical we simply change the amount that we are working with however at the bottom we have to make a few more updates because right now we are only working with metric units to update this one I want you guys to do an exercise I want you guys to do some research and get the proper output for both metric and imperial units meaning we either want to have kilogram this we already get and if we're using imperial units I want to display the pounds and the ounces parts of you now and try to figure this one out the first step that we have to do is we have to check if we are using metric or imperial units which we get with self dot metric Bool dot get if that is the case I know I'm using metric units so this line here can stay identical if that is not the case and I forgot the if statement here if that is not the case so else then I want to use imperial units which means what we now have to figure out is how to get the pounds and the ounces the function we can use here is divmod once again however for that we will need just the ounces which we don't have right now because this is what we are trying to get although once we have the answers we simply have to divide them by 16 and then the remainder will be the ounces that are left now how can we get the answers first of all well for that I want to add another variable let me call it the raw ounces for that first of all I want to get the current weight so self dot weight load and get this would get me the kilogram to turn this into pounds I want to multiply this with 2.20462 and just in case you're confused if we have one kilogram this would be 0.45 pounds this is what we have done here however what we do down here is the reverse so we have one pound and that is going to be 2.2 kilogram also I forgot the G here that needs to be there with this we would have the pounds to get to the ounces we have to multiply this by 16 because remember they are 16 ounces inside of one pound with that we have all the ounces that we need and this is what I want to use div mod with once I have that I can simply get my output string and set a new value for this one we need an F string we first of all want to have the pounds with lb afterwards then a white space and then we get the ounces the short end for that is Oz now let's try this if I now click on Imperial we can still see the kilogram but if I click on a button we now get something else once again the issue is that the rounding here creates way too many numbers to fix that I want to turn both of these numbers into integers and now let's try this again I click on Imperial and now if I click on a button this is looking much better so I can change the answers and the kilogram with that I can get rid of the exercise text we don't need it anymore in fact I can minimize update weight entirely the last thing that I have to do inside of the app when I am calling change units I also want to update the weight input for that I first of all have to create an attribute self dot weight input is going to be one instance of the class now that I have that inside of change units I want to get self dot weight input the method I want to call if I scroll down a tiny bit is simply update weight this works because inside of here we are only updating the units if we have information but by default this is none so if we call it the method by itself without any arguments it is simply going to run this bit down here which is all we need meaning in here update wait with that we should be done I can now click on plus and minus 40 kilogram I can update the height in meters and now if I click on Imperial we get pounds and ounces and we get feet and inches all of those we can update quite easily this seems to be working just fine and we also get the PMI updated so with that we have finished another app let's get started by working on the calculator you can see the result already it is very much inspired by the iOS calculator although for the most part let me show my mouse I can simply add any kind of calculation in here and I would get a result I can also clear the entire thing and on top of that I have the plus and minus button from the iOS calculator and the percentage sign other than that it's well a calculator there are two major changes compared to the original calculator the first one is on the top we now have the formula that we have typed in which I think is really annoying that this doesn't exist in the original calculator this is quite easy to add the other change I made is that besides the dark mode we also have a light mode it works in exactly the same way but if your system settings are light then you're going to get a much brighter calculator which fits much better into the system overall all of this will be covered in this section and there really isn't terribly much that is complicated to work on the one slight complication is that we have to create a lot of buttons and most of these buttons have some slight difference in functionality for that we're going to work quite a bit with inheritance but I'll talk about that more when we get to it for now I want to set up a basic window but before we get to that I want to talk about the folder we have because this one is slightly more elaborate before that I'll be starting with is going to look something like this in here we have calculated.pi and settings.pi in terms of python settings.pi is going to contain already quite a bit but all of these are just settings so what the calculator will look like and where the buttons are going to be I'll shake it up on in just a second the entirety of the logic though is going to be inside of calculated.pi right now this one is completely empty besides that we have empty.ico I'm using this one to hide the icon that's literally all it does finally we have one folder called images if I open this one in here we have four Images one for division and one for the inversion I think this is we always have one for dark mode and one for light mode the reason why we need those four buttons is because the character doesn't exist in the normal alphabet as a consequence when I'm creating these buttons I would have an image and then use this image for the button that covers the setup let's have a look at all of this in code here you can see calculated.pi it is completely empty besides that I have settings let me scroll to the top and here we do have quite a bit more I start with some basic sizing information this is giving us the app size and how many rows and columns I have after that we have some text information so the font and the font size then I have a tiny bit on styling and all of that is fairly simple the really important bit here are these three dictionaries because they contain the position and some additional information about the buttons for example this entry here is for the button number two this button should be in column 1 Row 5 and span one cell or this entry here for example this is for the multiplication button this one is in column three Row 3 it shows the character X for multiplication but the operation is going to be multiplication that's this sign here I'll explain all of that later finally all the way at the bottom we have a huge amount of colors this part should be fairly straightforward now inside settings.pi we are not going to add any logic all of that is going to be inside of the calculator speaking of let's create a basic window this I want to do with custom tkinder which means I want to import cast term T Kinder s c d k once I have that I want to create a class that I called Chi Q later you could call it whatever you want but I guess calculator makes sense here this one needs to inherit from ctk and c t k first of all in here we have to create a dender in it method with self but no other parameters finally the first argument we always need is the super Dunder init method to initiate the parent with that we have a basic object but to see the actual window we have to add one more line this would be self and Main Loop don't forget to call it with that we're going to have a window that we can at the very least see all we have to do is create an instance of this calculator with that we have a basic window this one looks pretty good although I do want to customize this quite a bit while I'm doing this I also want to be conscious of light and dark modes meaning for now if the system settings are light then I want to have a whiteish background if the system settings are dark then I want to have a black background for that first of all we have to detect if the user is using a light mode or a dark mode for that we have to import dark the detect we can use this one let me put it above the calculator I want to print dark detect and then the method is dark don't forget to call it now if I run the code I get true because in my case I'm using the dark mode however if I go to my system settings and I switch from dark mode to light mode and return to my code I can run this thing again and now this is going to be false which means I now am aware if the user is using dark mode or a light mode in my case I'm going to stick to dark mode but I will switch around quite a bit back in here I want to go back to dark mode to account for all of this inside of the app I want to add a second parameter that I called is dark with that I can simply pass all of this into the calculator and then I know if the user is using dark mode and light mode and I can account for that inside of this class although before that I want to add one more if statement this if statement is going to check if the name is equal to Dunder Main only then do I want to create an instance of the calculator the result is going to be the same but that way we prevent any kind of code not inside of this file to cause some accidental errors once we have that we can actually come to customizing the calculator itself let me put all of this inside of a setup section and in here we have to add quite a few more things number one I want to set the appearance to dark or light depending on is dark if this is dark is true then I want to call the dark mode if it is false then I want to call the light mode besides that number two I want to set the f g color and set this to white or black depending on the light mode or the dark mode these two colors you can get from the settings because all the way at the bottom we have black and white black is pure black white is not perfect White if you understand the hexadecimal colors here you can see that this is almost perfect white but not exactly these two colors you should be using number three get the start window size from the settings and disable window resizing to start window size you can get also from settings in here finally number four hide the title and the icon I want you guys let me resize this a tiny bit this stuff here should disappear these four things should be fairly straightforward as a consequence this is going to be an exercise pause the video now and try to implement this one yourself number one for this one I need ctk and then set underscore appearance underscore moat this one is expecting either dark or light which means if I run it like this we get light mode if I run it with dark we get the dark mode this entry I want to make dependent on is Stark which I do with an F string I want to have dark if is dark is true if that is not the case else then I want to have light let's try this one and it's looking pretty good next up I want to update the FG color this has to happen inside of the super internet method in here I need an FG color since we have a color for the light and the dark mode we need a tuple in here the first argument is going to be for the light mode the second for the dark mode which means with a tuple white and black I can run this again and we're getting an error because white is not defined that is happening because we're not importing settings that we can change quite easily I want from settings import everything if I fix my typo this should be working there we go now you can see the background color is completely black before this was a dark gray number three I want to set the start window size and also disable window resizing to set the start size I want to use self dot geometry this one wants a string something like 400 times 600. however inside of the settings we have a tuple with the app size let me copy this one right away actually to get this one I want to replace the 400 with curly brackets in here I want app size and the entry zero then I can copy all of this and replace the 600 with app size and one now if I run this we have a much larger window besides that I want to disable window resizing this I get with self dot resizer bill the arguments here are false and false those cover the horizontal and the vertical axis now if I run this let me show my mouse I can try to resize the window it simply doesn't work for the final part I want to write the title and the icon the title is the easier bit for this I need self.title and an empty string running this again now on the top left we don't have a title anymore to hide the icon we need self and I can bid map this is going to import an icon that we're going to set as the icon for the app for this one I have empty dot Ico if I run this one now there we go in the top left we have nothing anymore which looks significantly cleaner this also covers the exercise let me get rid of all of the comments because they are getting a bit tedious that is much better for the final part if I run the app again I want to color the title bar because right now this bit up here looks a bit weird it doesn't fit at all with the rest of the app which means I want to create another method that I called title bar color for the parameters we need self and I want to pass is dark in here in here we can now run some code to color the title bar however for that we have to import a few more things also since this is only going to work on Windows I want to wrap all of this inside of a try statement that way on a Mac we at least don't get an error I want from C types import Wind dll by ref size off and finally C underscore int however if we're getting an error so accept then I want to run pass so nothing at all with that inside of title bar color the method I want to create another try statement because in here I can now run the code to color the title bar for that first of all I want to create a variable that iOS call hwnd this we get with win dll user 32 and then get parent to get the parent we need the ID of the current app which we get with W info underscore ID do not forget to call this one next up we need to dwm dwa underscore attribute which is simply going to be 35. the one important difference here in the earlier tutorials I always add a single color well we still have a single variable but this variable now is either going to have the hex color for let me open inside of settings we have either the dark color or the light color which means we have to add an if statement in there I want to copy the title bar hex colors I want to get dark but only if is Stark is true if that is not the case else then I want to get title bar hex colors with the light color well I think that's what I called it yeah light color that gives us all we need which means finally I have to call win dll dwm API now we get to the long one capital d w m set window attribute for this one we want to Target the window which is awnd then I want to get the dwma attribute after that I have to add the color except I have to convert it a tiny bit for that we have five ref then C underscore end and this one is getting the color for the last argument we need size off and then C underscore int that should be all we need for this one although the last bit is we have to add an accept statement which is not going to do anything with that all I have to do now is called self title bar color and pass is dark in here if it runs now we're getting an error that is because I forgot the if statement in here now if I run this again this is looking much better on top of that what I can do I can set this is Stark to false to check the light mode so if I run this now we have the light mode although I want to keep on working with the dark mode which still is working just fine with that I can minimize everything because this covers the first part we have our window now that we have a basic window we can start working on the elements that are actually visible there are going to be quite a few what I want to start with let me type a tiny bit in here actually let's say something like this what I want to start with I want to have this text here and this text here although for now they are not going to do anything I just want to have the basic widget later on they will become Interactive back in my code I want to keep on working inside of the calculator the first thing I have to do in here is I have to create a layout because without that we can't add any widgets I want to use a grid layout in fact let me talk about how this is going to work the grid layout is going to be well a grid for this app I want to have seven rows and I want to have four columns The Columns should be fairly straightforward we have column 0 column one column two and column three for the rows this part here is also quite easy to understand this would be row number six five four three and two after that and those columns you can't really see we have these columns here one is looking something like this for the main output this would be row number one and finally we have all the way the top row number zero those numbers I'm actually getting from the settings if I scroll up here we have main rows and Main columns those I want to use to create all of these columns and rows dynamically although for that first of all I have to start with self and row configure what I ultimately want to get in here is zero one two three four five and six all with the same weight of one also I want to have uniform and set this to a the thing that I have to create dynamically is this list here for that I'm going to use the range function and pass my main rows in here I think that's what I called it main rows I'm using this variable here this by itself is not going to work because row configure is expecting a tuple or a list whereas this range is going to give us a range object but this we can convert to a list or a tuple and then we have the proper outcome with that I can duplicate the line because besides a row I also want to have a column the only difference now is going to be that I'm not going to use main rows instead I will be using main columns or at least that's what I think I called it yeah main columns I can now run the app and well we can't really see a result but now we have a grid that we can work with to organize the text I want to create a separate class which means I want to minimize the calculator and create a class that I called output label since this is just going to be a label I'm going to inherit from ctk label other than that we need a dender init method and this one for now is just going to be self and parent after that as always we need this super in Niche method first of all I want to set the master to whatever the parent is after that I want to set the text so we can see something let's say I'm just going to type one two three in here next up we have to place this output label since we're using the grid layout this has to be a grid in here we have a column which is always going to be zero after that I want to set the column span which is going to be 4. after that we have to specify the row and the row has to be more flexible because this output label we are going to use twice once for the formula and then for the actual output as a consequence we cannot hard code the row this we have to get from the parameters which means I want to add the row in here and pass it to the grid method once we have that inside of the calculator I can start creating some basic widgets although later on we're going to create a huge amount of widgets as a consequence I want to have a separate method to create the widgets I'll call it create widgets so I need a method called create widgets with self and nothing else in here for now I'm going to create the labels or to be a bit more specific the output labels for this one I want to create an output label with for now I will need a parent and a row the parent is always going to be self the first label is going to be in row 0. after that I want to have the exact same output label except this one should be in row 1. with that if I run the app we can see we have one two three twice although the positioning here is not ideal if I draw this one in we have one cell here and we have a second cell here just imagine that I'm able to draw straight lines the first minute I want to do is I want to move this one two three here the first one to the bottom right it should be somewhere here the other one two three this one here should only be moved all the way to the right which means it should at the end be somewhere here that way later on once we have larger font sizes they are properly filling the entire available space in a proper way also to achieve this kind of thing this is going to be your exercise I want you guys to update this class so you can control on what corner the label is going to be I suppose I should be adding this in text the exercise is going to be update the class so you can control which corner the label is attached to pause the video now and try to figure this one out the argument that we need inside of self.grid is called sticky this one tells the label which side to stick to in here for example we can set this to e and then our text is going to stick all the way to the right however since I want each label to stick to a different site I want to set this via the parameter let's call this one the anchor this I want to pass through to the Anchor now for both of these we need one more argument in here for the first output label let me actually add a comment here this is going to be for the formula this one should stick to the south east or the bottom right whereas the result should only stick to the east side now if I run this again you still can see much of a difference but well we will be getting there we make this a tiny bit more visual the first cell would be something like this well the second cell would be looking roughly like this before I'm continuing I'm going to get rid of this text here we don't need it anymore on top of that I want to set some horizontal padding of 10 pixels that way the text isn't completely attached to the right side anymore what we have to do now is add a font so a text here looks significantly better unfortunately we couldn't just create a font inside of the output label for one because these two labels need a different font because they're different text sizes on top of that later on I want to reuse the font for the formula for the buttons as well as a consequence I want to create my fonts inside of the create widget method that way I can pass them into the output labels and later on into the buttons the first bond is going to be I call this one the main font because this is what I'm going to use the most we are creating this one with ctk and ctk bond in here we need a family and we need a size the family we're getting both from settings the family is always going to be the font I can pass this one in here next up for this size I want to use the normal font size this in here and then we're good to go this main font I'm going to use for the formula and for all of the buttons besides that I want to have a result Bond or this one I can simply duplicate this line here because most of it stays the same the one difference is that I now want to use the output font size instead of the normal font size that is giving me two fonts and those I want to pass into the formula which is going to get the main font the output label for the result is going to get the result font once we have that inside of the output label we now need one more parameter that I called the font this font we now have to pass into the Super init method in here font is equal to font now if I run this again that is time to come together much nicer the last thing that I want to do is that right now both the output labels are simply displaying text one two three this has to become a tiny bit more interactive although for now we're not going to use it for that inside of the initi method before I'm creating the widgets I want to add another section that I called Data in here I'm going to create two string variables first of all I want to create self dot result string this is a string so ctk string VAR the default value for this one should be a string of zero this is what we should be seeing by default after that I can duplicate this because next up I want to have another string VAR or the formula although this one for the default value has simply nothing basically later on when we have actual functionality the results string is going to get the result we see from any kind of calculation and the formula is going to well give us the formula these two string vars I now want to pass into these output labels and set them as the text variable for each of the label which means for the output label for the formula the final argument is going to be self Dot formula string whereas for the result label we need self dot result string because of that we will need one more parameter let's call it the string VAR this string bar I want to set as the text variable which is going to be the string VAR with that if I run all of this again we can see 0 for the result and nothing for the formula to make sure this is working let me add test for the formula and we have test so this is definitely working also because of the text variable this text is now redundant meaning we can get rid of it entirely to make all of this a bit cleaner with that we have finished the output label which means I can minimize everything because this covers a really important part next up we can start working on the buttons this is going to be a larger section now that we have the labels we can start working on the buttons for that we need quite a bit for the simple reason that we have a lot of different buttons just to go for them really quick we are going to have these number buttons here those are going to give us the numbers from 0 to 9 and the DOT besides that we have the math buttons those are divide multiply minus and plus and the result button I also added in here at the end we have these are called the operator buttons those are clear invert and percentage sign all of these work in slightly different ways so we have to account for that on top of that what is also quite important is that for the division button and the invert button we have images instead of text this we also have to account for as a consequence I will create quite a few different classes for the buttons and then work with that should be a really good practice for inheritance but let's Jump Right In and let's have a look at all of this back in calculated.pi I first of all want to get rid of this white space because it annoyed me now since we're going to create quite a few different buttons I'm going to store the logic in a separate python file meaning I want to with control and N create a new file and save this one with Ctrl and S this file I'm going to call buttons dot Pi we are still going to use custom tkinter but we only need one class which means I want from Custom tkinter import ctk button this is the only part of custom decanter I am going to need although besides that I am also needing from settings import everything to get started in here I want to create a class that I called button it should also start with a capital letter this one since we are simply going to create a button I want to inherit from ctk and button importantly here you do not have to add ctk at the beginning because now we are importing a ctk button straight away for this one first of all I want to have a thunder init method this one itself we need a parent we need some text then we need a column and a row separated by a comma and that is all I'm going to use for now I should also specify for now I am going to create this AC button and the percentage sign those are going to be basically the simplest buttons that we are going to have to create those inside of this thunder in the method for the button I have to call Super and thunder init as always in here I will need quite a few different arguments so let me use named ones I want to have the master which is going to be the parent next up text is going to be text that is all we need for this super init method to place the button I want to call Self dot grid this one is going to get column with call and row is going to be the row we are simply passing these two parameters in here and here besides that I also want to make sure that the button sticks to all of the sides which means I want to use sticky and north south east and west this is going to give us an incredibly simple button that we can use which means back in calculated.pi I want all the way at the top below custom decanter from buttons I want to import for now only the button if I run the code now this is not crashing so at the very least we know that this is kind of working which means now inside of the calculator I can minimize the init method and the title bar color we also don't need instead I want to create the AC button which is going to be the clear button let me type it like this that's a bit clearer this is going to be simply a button which is the button we just created for this button we're going to need a bunch of arguments to cover all of these parameters let me copy them actually and paste them in here we definitely want to use named arguments because later on they're going to be a lot more arguments in here first of all the parent is easy this is going to be self for the text for now I simply want to have AC the column for this one is going to be zero the row is going to be 2. with that if I run the code we are getting an error because I stopped using the keywords this should be column this should be row not a stratus and there we go we have the first button it doesn't do anything right now but at the very least we have something although there's already one thing I do have to change because the text the column and the row I want to get from the settings this is really important I want to work with this operator dictionary in here we have the clear button and this has the column the row the text and if we add an image it would also have an image path the clear button doesn't have one but the invert one does have one this kind of setup is really important because I want to make sure for The Styling and the layout of my button all of this is organized separately that way I can make any kind of change in here and it would be reflected inside of the calculator or anything more complicated you do want to separate the logic and the layout makes it much easier to work with a more complex program all right I want to get the operators use the operators inside of my button as a matter of fact let me put all of this over multiple lines so it's going to be easier to read first of all I want to get the operators in here the button I'm working on is clear this one here this is going to give me another dictionary inside of this dictionary I have the keys column row and text I want to have the text then I can copy all of this for the column instead of text this should be call finally for the row the text should be row if I run this now we cannot see a difference because we have used the same data but now inside of settings I could make an update here and it would be reflected in the app just to test this let me rename AC to something run the calculator again and now we get something meaning all of this is at the very least working but now obviously if I run this again this button doesn't look very good we have to make a few more changes here inside of the button we have to do a couple of things a very easy thing to work on is to set a corner radius this corner radius we're getting from the settings in here we have styling I want to get my styling this is another dictionary inside of this styling we have Corner radius with that if I run this again now we have no more Corner radii another important thing is I want to add a font this font we already have which means I can set this to font and get my font via the parameters this I can do because inside of the calculator we have created two fonts all the way up here I want to use the main font for this button as well which means I can copy it for this button I want to set a font to my main font now if I run this we have a much better looking text what we now have to work on is the color for that I want to have another parameter and let me explain how the colors are going to work inside of settings at the bottom there are a whole bunch of colors the color we will use for now is dark gray this is the color I generally want to use for the operator buttons we have a foreground color we have a hover color and we have a text color these colors are always going to be two birds for example for the FG color we have this Tuple here one is for the light mode the other is for the dark mode this applies to all of the colors we always have a tuple with two different colors which means when I'm assigning the color here I can simply pass in a default argument with dark gray although this by itself isn't going to do anything I can run the code again we cannot see this color do account for that when we are running the super init method we have to add quite a bit more for example if I want to get the FG color I want to get from my settings I want to have the colors paste this in here this colors is a dictionary all of this stuff here I now want to get one entry in here which is going to be dark gray this dark gray I am getting via my color this one up here so all I have to do is pass this into this dictionary with the color with that I am inside of another dictionary in here I want to get the FG which is the foreground color which means another dictionary with FG and now I can run the calculator again and there we go this is looking much better if I hover over it we still get a bad color but at the very least we're making progress on top of that if I now switch to the light mode meaning if I set a stark to false we also get an updated color although we do have to work on a text color let me revert this and now we can keep on working inside of buttons and make a few more changes besides the FG color I also want to set the hover color and the text color which is fairly easy to do I want to have the hover color which is going to be the same thing we have done before all of this except now we don't want to use FG instead I'm going to use hover hover in here without any white space and now if I run this again show my mouse the basic color still works if I have over it basically the same thing just a tiny bit brighter but it certainly works finally I want to have the text color which once again is going to be basically identical I want to copy this one and now this shouldn't be hover this should be text or at least I think that's what I called it yeah and here we have text now if I run this this is still looking good other should also work this is looking nice you can mostly see this when I switch to the light mode meaning this one should be false again now this button is much more visible I still want to use the dark mode and with that we have one of the buttons at least to an extent the problem we have right now is that this button doesn't do anything which is not ideal for a button to account for that to get started inside of the button I want to have let me put it right beside text I want to pass in a function which the button is then going to call to connect this one to the button we have to give this button a command which is going to be the function with that we just going to need a function we can pass into this button since this is going to be the clear button I want to create one method inside of the calculator which are called clear this will not get any parameters and for now I simply want to print Lear once we have that inside of this button I want to add another named argument the function is going to be self.clear really important here do not call this function we just pass in the function around we're not calling it yet this is only going to happen once we click on the button in fact let's try this one now if I click on the AC button we can see clear inside of the code editor so this is working quite well this is going to give us one button there is a second button we can create right away I call this button the percentage button if I run the entire thing again the button I want to create now is this one here since this should be reasonably easy this is going to be your exercise I want you guys to create the percentage button and you have all you need pause the video now and try to figure this one out for the percentage button we are going to use the same button class meaning I can just copy all of this and paste it in here we just have to make some updates the most important one or the most visible ones are the text the column and the row this information if I look inside of settings we can get from the operator dictionary because in here we have percent to access all of that all we have to do inside of the button I want to replace this clear with percent if I run this now we have the percentage button also works with the hover so this was really easy to add the main font we are also going to use the only other change that we have to make is this function because well this button is not going to clear the calculator it is going to let's call it the percent which needs cell for now and in here we're going to print percent once again this button isn't going to do anything for now we are just working on the UI I have to replace clear with percent and then test all of this I have the AC button this one still says clear and the percentage button says percent alrighty with that we have two buttons definitely some progress at this point we have two buttons this one and this one both of those are using text next up I want to create this invert button here and this one is different because it uses an image instead of text for that I'm going to create a separate class although for the most part it is going to be quite similar compared to the other buttons let's Jump Right In and let's have a look at this one back inside of calculated.pi let me run this again we have two buttons not a bad start but we need a bit more inside of buttons.pi I want to create another class which I called image button this one once again has to inherit from ctk button we need it under image method with self we need a parent and then well we are going to need a lot of the stuff up here as a matter of fact let me just copy it all in terms of changes this one does not need a font but we do need an image this image we're going to create inside of the calculator which means we don't have to create it in here once we have all of that I have to create a super Dunder init method with the usual stuff as a matter of fact I can copy all of the stuff I created up here and simply paste it down here with that I can get rid of the font but I do have to replace it with an image which is going to be the image we're getting from the parameters also let me put it up here so if the styling all together once we have that I want to place this button using the grid method which once again is going to be very similar compared to this grid method so I can simply copy the entire thing and we don't have to change very much while I'm here I did realize I forgot one thing and that is inside of settings if I go up a bit we have a gap this Gap I haven't used right now but I do want to use it which I can do by adding pad X is going to be styling and this one I called Gap at least I think I did yeah Gap this is going to be pad X and will also be pad y which I want to do both for the image button and for the normal button this one up here they both got this kind of padding it's not going to be visible for now but later on it is going to be this tiny black line between the buttons with that I can minimize the button and now for the image button we are basically good to go what we have to do now is actually use this button which is going to happen inside of the calculator.pi file in here first of all I have to import this button which means image button with that we can use it if I run this we can certainly import it the program doesn't crash now inside of the calculator I don't need the init method instead I want to work inside of my create widgets in here I want to create the invert button this button is going to be an image button but before we can create that we have to create the invert image which is going to be is ctk and ctk image importing this is actually going to be your exercise I want you guys let me type it import the image and create the image button there are way too many typos in here image and see this is looking much better I want you guys to import the image and then create an image button in the appropriate Place pause the video now and try to figure this one out yourself ready first of all we have to import the invert image for that inside of ctk image we need two things we need the light image and we need the dark image both of those we are getting by using image dot open although this image we don't have available right now we're getting that all the way from the top let me put it below here I want from pil import image that way I can import images with that image.open the file path I am getting from this settings the one we are looking for right now is this one here inside of the operators I want to get invert this is going to give me another dictionary this dictionary has image path I want to get my operators I want to get the invert dictionary inside of this dictionary I have the image path meaning now we are in here which in fact is going to be another dictionary which has light and dark for the light image this is going to sound a bit counterintuitive I want to have the dark image on top of that for the dark image I want to have if I copy all of this I want to have the light image the way you want to think about it is that light image is the image for the light mode since we have a white background for this one we want to have a dark image whereas for the dark image so the image for the dark mode we have lots of black so for the actual image we want to have the light image now we have to figure out the image button for that we need all of these parameters the color can stay dark gray this one is totally fine for the parent I want to have self text we can simply leave MD like so for the function for now this should be over multiple lines we want to create another method I call this one invert once again no need for any parameters and for now I just want to print invert the function is going to be self dot invert next up we have to column the row and the image the image is the really easy bit because this is what we just created invert image column and row we are getting from the settings in here I want to get operators invert this one has column and row although this I can simply copy from the other buttons I have operators they shouldn't be percent this should be invert the same I can do for the row this should be in Verge and row with that we should be having something working let's try with that we have a button I can click on it we get invert and we also get the hover effect on top of that we check the light mode I want to set this dark detect to false once again run this again and there we go this also works in light mode meaning I can go back to dark mode and this is looking really good there's one more change that I do want to make and that is that this text right now is not really necessary however if I go to the buttons and don't set a text here run this again we get ctk Button as the default text which is well not ideal we do need this text in here however what we can do we can set a default argument for the text but for that to work we have to put the text all the way at the end and now we can set a default empty string this text needs to be at the end because we have a default value whereas for these we don't once we have that we have a default value so inside of this image button I can get rid of the text which is looking a tiny bit cleaner the result is still going to be the same with that I can get rid of the exercise and we have our image button you might be wondering now if I look at the buttons the normal button and the image button look really similar they are roughly 80 identical so why didn't I use the button as the parent for the image button and that is a really good question what I've could have done for example is combine these two classes where the button gets an image argument which by default is going to be none and after the init method I can check if an image exists and if that is the case I want to run self.configure and set the image to the image we get that way we could have skipped this entire bit however this didn't work in custom t Kinder whenever I tried this I get some weird Behavior around the images which might be fixed in the future but right now this is some behavior that is there that's why I'm creating two separate classes for the next button though we are going to inherit from this button to create the number buttons but that's going to be the next bit I'll see you there at this stage we have three buttons which is a start but didn't get us very far so for this bit we are going to create all of these number buttons that is a terrible square but we're going to create these buttons here for that we are going to use the base buttons we have created and then use inheritance to create the other buttons that way we don't have to start entirely from scratch also it's a really good way to practice inheritance let's have a look at this one here I am back in my code I want to work inside of the buttons and let me minimize everything I want to create another class I have caught this one a num button really important here this num button is going to inherit from the button the one we created a tiny bit earlier this one here in fact let me open both then I can explain a bit better what's going on as always we are going to need the dunder init method in here this one needs a couple of parameters now self is the usual one after that I need a lot of the parameters that we created up here in fact let me just copy all of them we have parent text function column row font and color there's one change that I already want to make that is inside of color these buttons shouldn't be dark gray instead they should be inside of settings I have the colors they should be light gray let me copy this color here I can paste it in there and now we have a light gray color already this covers the entirety of the color inside of the init method we need Super Thunder init what is really important to understand now is that this thunder in it is going to call this init method as a consequence we have to get all of these parameters and find a value for them we're going to put all of this over multiple lines for the parent we want to use the parent or the text we want to use the text or the function for now we just want to use the function column is going to be the column row is going to be the row bond is going to be the font and color is going to be the color in this case since we simply duplicated all of these parameters this might seem quite mundane but what this is already giving us is all of this styling here basically what is happening when we are calling this init method we are taking all of these parameters we're going to create them in just a bit and then we are going to this init method inside of this one we are adding Arguments for all of these parameters after that we are going to create the actual button which means for example this color here light gray would now be this color here so instead of dark gray we get light gray because of that these three colors here are now going to give us a light gray instead of a dark gray color I hope all of that makes sense inheritance can be a tiny bit tricky especially at the start let's actually create the buttons and then this should make a bit more sense first of all I have to import the num button I think that's what I called it yeah this num button here inside of the calculator not in the init method but inside of create widgets I now want to create all of the number buttons for that I want to look at settings in here we have num positions for each num position we have a value and then a dictionary the dictionary contains a column a row and a span most of the buttons only span a single column with the exception of the zero button this one spans two we cannot account for this just yet but we will cover that in just a bit for now I just want to go over this dictionary and use the column and the row to place all of the buttons for that inside of the calculator I am going to need a for Loop for the number and the data in num positions this is the dictionary here on this I want to get the key and the value which I'm getting with items the key I am storing a num the value inside of data meaning the data is going to be this dictionary here once I have that I can create a num button the number now is going to need all of the parameters I have set up here color has a default value so we can just ignore this one but for all the other values we need parent text function call row and font font is the easiest one let's start with this one I simply want to use the main font parent is also going to be really easy this should be self for the text I simply want to use the num because num is 0 to 9 or a DOT the function we don't have just yet for now let me add a Lambda function in here that is going to print the text so at the very least we have something for the column if I look at the dictionary inside of data we have column and row which means I can get data and column I can do the same thing for the row which is going to be data and row with that we have a number button if I now run the code we can see we have a whole lot more buttons this is getting much more efficient however we do have quite an obvious problem there is a big gap in here this exists because the zero button should cover two columns like so which we can't account for just yet to achieve that inside of buttons we have to update this num button so it is accepting another parameter which I'm going to call Span in this span we have to use inside of this grid method here which means we have to figure out how to get this span into this init method and then from this ended method we want to go into this grid here on top of that we have to make sure that when we are creating the normal button which we've done earlier for The Operators we are not getting an error we know that all of the operator buttons don't care about span they always have one we really have to make sure that we're not breaking these buttons all of this is going to be your exercise I want you guys to get the zero button to span two columns on top of that make sure that you don't break existing buttons also let me fix that typo that looks much better pause the video now and try to figure this one out you will need inheritance let's work backwards for this one first of all inside of grid we have to add one more argument let me put it right after the column we need a column span for most buttons in fact all buttons except the zero this is going to be one however for the zero it should be 2. as a consequence this can't be hard coded this needs to be span this span I'm going to get from the parameters I will put this one all the way at the end we want to have a span value once we have this parameter inside of num buttons we already have the spam button here so we can add span and span in here with that this is going to be passed into this span argument and then this span argument is going to span two columns however now if I run the calculator we are getting an error that nondefault argument follows default argument this we can fix quite easily I can move span in front of the color although we are going to get another error that button in it is missing one required position argument Span in this error we are getting up here this button and this button as well the button for percentage and clear they now both want an argument for this span which we don't have to fix this you can approach this in two ways you could either add a span of one in here when you're creating the button however since they both have one this wouldn't be ideal instead what I would recommend is simply add a default value here of one with that these buttons should still work but now we're getting another error that when we're creating these num buttons we're not giving them a span argument which we can do quite easily because inside of settings we have a span value which means span is going to be data and span now if I run this here we go all of this is working perfectly fine now also I haven't clicked on any of the buttons yet we are getting an error here so we do have to work on that as well the text here shouldn't be text it should be num now if I run this we get well we always get nine something definitely went wrong here which doesn't matter so much because we have to create a custom function here anyway since I want to capture the input I want to create a method I call this one num press this one itself and it needs a value for now once again I simply want to print the value this nump press I now want to use as the function here although this should be self Dot numpress this however is going to give us an error if I run the code now we are getting calculated.numpress that's the method we just passed into the number button is missing one required position argument value which means we are passing in the function which right now is numpress the one I just created this one the problem is that numpress is expecting one value this value however we are not getting inside of this function to fix that we can use Lambda I want to get Lambda and then my function with that I can pass n parameters just to test this let me add test in here if I now run the code I can click on off the buttons and I'm always getting test that's looking pretty good what I can also do is pass the text in here the text for now we simply used for the button text but we can also pass it into the function and now I am getting the proper output for all of the buttons that is looking significantly better when we are passing in the numpress function we are passing it in here and from this function we are creating a Lambda function meaning we are wrapping the function inside of a Lambda function that way we can add parameters in this case the text all of this is going to create a new function which we are then passing into the command of the actual button that way we can create a function with parameters that is only going to be called when we are pressing the button or rather when the user is pressing the button so with that we have another major part which means I can minimize the calculator and finish up this section to finish up the layout I want to create the orange buttons they are mostly going to work like the number buttons which means we have to pass in a function and this function gets one argument which is going to be the Plus for the plus button the minus for the minus button equal for the equal button and so on the one difficulty is that these four buttons here are simple buttons whereas the division button has to be an image button but other than that there isn't going to be anything new so let's Jump Right In and let's see how far we get back in the code let's go to settings and let's see what we have what I now want to create are all of these math buttons the information for that is inside of the dictionary math positions we have a dictionary with the key being the operator so divide multiply minus equal and plus the value attached is a dictionary that has a column a row a character an operator and an image path although the only image we have is for the division button from that inside of buttons.pi below the number buttons I want to create the math button this one has to inherit from but turn as well because primarily this math button is going to work kind of like the number button the only difference that for the number button inside of the function we are passing in the text which means the text for the button is going to be the same as the text for the function for the math buttons this is not going to work because if I look at settings what the button is supposed to say is going to be inside of the character x minus equal or plus distributed text for the button however what we actually pass into the function is going to be inside of the operator as a consequence we can kind of copy this but we have to make some updates since this should be quite doable we can do an exercise right away I want you guys to create the math buttons the only important thing here is that you have to separate the character and the operator once you have that also all the buttons with a four Loop inside of calculator dot pi in calculator and create widgets there should be another for Loop somewhere here for the math buttons try to figure this one out also for now don't worry about the image I will cover that after the exercise first of all I need a Dunder init method as a matter of fact I will need most of this so I can simply just copy it all and then we can work on it the first minute I want to do is to update the color because I know that all of these buttons should be orange also they don't have a span value because they're all simply occupy a single cell meaning I can get rid of span entirely that is looking better the final change that we have to make I'm going to put this right next to text besides the text for the button I also want to have an operator this operator I'm going to pass into the function which means now we have a separation between a text so what the button looks like and the operator so what the button actually does other than that we are good to go for the math button there really wasn't that much to do in here so now inside of the calculator first of all all the way at the top I have to import the math button once I have that class I want another for Loop for let's call it operator and data once again in the dictionary I have called math positions don't forget to call items on this one that way we get the key value pairs I want to create a math button this math button is now going to need all of these arguments let me copy them and paste them in here first of all the font is super easy it is going to be the main font we have done this a couple of times by now parent is also going to be easy tap on is going to be self after that we need text operator function column and row most of these are fairly easy if I open settings inside of the dictionary which is data in our for Loop we have column row character and operator also I realized in this one that I have duplicated data a tiny bit these operators here and the keys for the dictionary are identical meaning we could use either one it really doesn't matter I suppose what I could be doing is simply get rid of the operator then all of this is going to be a bit cleaner with that we're getting the actual operator from the keys which is good because I call them the operator but now inside of the text I want to have data this value I called character or at least I think I did we are using this character here also note for the division we don't have anything right now but that's okay we will fix that in just a second for the operator we're just going to use the operator the function we don't have right now so below the number press I want to have another function that I called math press like number press this one needs self and a value although again I simply want to print the value that we are getting for now this function I'm going to pass in here self dot math press finally we have the column and the row this is information that's quite easy to get we need the column and we need the row with that we should be having some buttons and this is looking pretty good let me move it to the side at the very least we have multiply minus plus and equal and you can also see these buttons do print the required value the one thing that doesn't work right now is the division button this part here is looking very sad right now for that we are going to need an image button to create this one let me get rid of the exercise text and minimize all of the stuff we have so far what I want to do now is use this image button and then create another math button that can take an image this is going to be another class I call it this one math image button this one has to inherit from the image button this one is going to be quite similar compared to the math button so let me copy all of it then we have something to work with the major difference is that this math image button is going to need an image let me create a parameter by removing the font because we don't need that one anymore in fact we can't use it because the image button doesn't have a font we don't need font anymore instead now we have to pass in an image which is going to be image to understand what is going on we once again have to make sure that this super knit is targeting all of the parameters of the image button in knit method in there we have a parent this one we have we need a function this one we also have we need column and row those we also have we need an image this we have text we don't need because we have a default argument and color we do need because we want to have a different color which we do have which means now we have a MAV image button we just have to figure out how to create it in the for Loop all of that is going to happen inside of the calculator although once again first of all I have to import my math image button I don't need the init method also I can minimize all of these buttons so this is a bit easier to see inside of this for loop I now want to check if I want to create a math button or a MAV image button this sounds very much like an if statement now I just have to figure out the condition which is fortunately quite simple if I look at settings the thing that makes this division entry unique is it has an image path all of the other entries simply have none for the image path since none is going to evaluate to false inside of an if statement all I have to do is instead of this if statement check my data and then the image path which is telling me if this is true I have an image however if that is not the case so else I don't have an image meaning I just want to create a math button just to test this let me add a pair statement in here run this again the calculator still works just fine but now we have nothing in here because this is what we singled out with the if statement this I now want to replace with a math image button this one to get the parameters let me copy it from the buttons in here I need all of these and once again we need a parent and this parent is simply going to be self I realized I didn't get rid of the text let's remove it right now in fact inside of the buttons this text here shouldn't exist at all I have to remove it from the parameters and from the init method that's much better next up the operator is simply going to be the operator the function is going to be self dot math press next up we have the column this in fact these two entries I can copy from the math press let me paste them in here like so and the final thing we need is an image since for this one we have a slightly larger line I want to create this in a separate variable I'm going to call this one the Divide image which is going to be ctk ctk image we as always going to need two arguments we need a light image and we need a dark image both of those we are getting with image dot open and then a file path this file path we are going to get from inside of settings we have image path which is going to be another dictionary with light and dark entries this we access with data inside of here we have an image path for the light image so the image for the light mode I want to have the dark image because remember light image means we have a bright background so we want to have a dark image without this we wouldn't have any contrast the same thing I want to do for the dark image with the one difference that now we want to have a light image this is giving us the Divide image this I'm passing into the image and now I can run this thing and there we go we have the division button I can also click on it and we get divide with that we have all of the buttons working on top of that I can now minimize the calculator I want to test if this is also working with light mode which I can check by adding faults into the calculator run this now and there we go now we are getting a dark image for this button although it still also works but once again I want to use the dark mode with that I can minimize all of the classes and we have made a ton of progress this covers the entirety of the layout now that we have the entire layout we can start working on the logic of the calculator which means I can type some numbers and actually get a result unfortunately for all of this we have to cover quite a bit of logic I think this is best done when I jump right in and explain it while we are doing it the logic here does get a tiny bit more advanced fortunately we can work entirely inside of the calculator that works because we don't need the init method we also have all of our widgets we have these methods here numpress is giving us all of the numbers math press will give us the math buttons and then we have clear percent and invert these are all of the buttons of the calculator which is quite handy I don't have to worry about the buttons or the settings although as a reminder there's one important thing in terms of data that we have to be aware of inside of the init method we have a result string and a formula string result is going to show the results and formula out the formula that was a very pointless sentence sorry but basically what we want to start with is when I'm pressing the button I want to show the number inside of the result string this is actually quite simple all we have to do inside of the nump press instead of printing the value I want to update self dot result string and then set this to the value if I run this now let me move this to the middle I can click on all of the numbers and this is looking really good well really good is relative because right now we only ever get a single number so how can we get multiple to achieve that I want to create another entry inside of my data I'm going to need a list I call this one let's call it the display nums this is simply going to be a list what we're now going to do inside of numpress we are not going to set the value of the result string instead we are simply going to get the display nums and append the current value although I really want to make sure that I am only working with strings here that is really important meaning when I'm getting this value I want to convert it to a string right away let's see what this is going to give us I want to print self dot display nums now if I click on the buttons I get a list that gets increasingly longer this list I now want to convert to an actual number let's do this with a variable I want to have the full number for this we need a string and then the method join really important here this string needs to be empty inside of this join we need a list which we have this is our display nums I want to print the full number now if I run this let me move it to the side I get a number that becomes increasingly large I can also have the dot and this is looking good which means now I can set this full number as my value for self.result string like so with that I can click on all of this and I'm getting a pretty good result I can also use the dot and then at some point the number gets too long but well I'm not too concerned about that now that we have that I can minimize numpress and work on my math press as a reminder in here we are going to do our math operations the very first thing that I want to check in here is that we actually have a number let me actually return to the print statement let's say we have the calculator these buttons here for equal plus minus multiply and divide that should only be possible to use once we have a number for example if I have a 6 then I should be able to use these numbers however if we don't have a number they shouldn't be available or at the very least when we are pressing them they shouldn't do anything for that I first of all want to get my let's call it the current number this is going to be the same thing I have done inside of numpress I can literally just copy it now I want to check if the current number exists if that is the case let's for now print do stuff also I want to print the current number just so you know what's happening if I now click on the X we can't see anything because we get an empty string that well doesn't do very much but if I now click on 66 and now I'm minus we get 66 and do stuff and you can see here we have two empty Fields this is this empty string which means we know that this is working inside of the current number we now have to figure out what to do with these values the thing that I started with is another list inside of the init method I want to have self dot let's call it the full operation which is going to be an empty list when we get started with that I can also minimize the init method because these are the only two lists that we are going to need basically what I want to do if we have a current number I want to get my self dot goal operation and then append the current number that way we're getting the current input besides that what I want to do I want to get self.fully operation again and then append the value which in this case is going to be the operation to demonstrate what's happening let me print self dot full operation I want to type on 56 then multiply it now we get 56 and multiply if I now click on 3 and plus we get some decently looking results but it's not perfect at the very least we can work with this but we do have to make some updates first of all I want to start with another if statement that if the value is different from equal only then do I want to do some math operations if that is not the case let me add an else statement right away I want to print result the logic here should be quite obvious if I run the calculator again these four buttons here for divide multiply minus and Plus data to actual math operations however the equal sign should simply give us the result the logic for this one is slightly different this is why I'm separating the two if however we don't have the equal sign then I want to append the current value besides that I also want to get my display nums and then clear the list which is simply going to empty all of it that way we don't get duplicate values in fact let me print self dot not display nums but full operation that's the one we care about right now I can now get 12 and plus which gives me 12 and plus which looks like a decent operation but now if I go to 34 and minus now we are separating all of this properly the way you have to understand this this is quite important so let me cover it in a bit more detail we are always starting with a numpress at the end of it in terms of data we are getting display nums this could for example be a list with one and two both are going to be strings but this one doesn't matter right now once we have that and we are pressing MF button if there is a current number which we do have right now we'll be running this bit here which is going to give us another list inside of this list we are combining these values which right now would give us a 12. after that if we don't have an equal sign we get to this bit here which is going to append the value this could be a plus with that we have another list what is really important now is this line here this is going to clear the display numbers which means we're getting rid of this one and this 2 in our case as a consequence the next time we are clicking on the number press we are adding new numbers in here those could for example be three and four could be as many numbers as you want after that if we press on this again we are now combining these two numbers add them in here and after that we are adding the value once again so we get 34 and then we would get minus which is then going to give us a really clear operation that we can work with that is literally all that I wanted the issue we have right now is that the result cannot be seen but that we can fix quite easily what I want to do is if we are clicking on any of the math operators I want to get myself and my result string and set this to an empty value that way we can't see anything in the result to account for that I want to get self dot formula string and set this value what I want in here is a string then join I want to join self dot full operation what this is going to give us I can type in some numbers in here and now if I had multiply we get the operation I can also add more numbers or as long as I want this is working pretty well although what I don't like right now is all of this is really close to each other to fix that I have to add a space I should have mentioned this earlier the value you add inside of this string is what will be between the characters if it's an empty string it is simply going to be a tiny bit of space which looks much cleaner although you could add I don't know XXX in here now this is going to look horrible now we get XXX a whole bunch I simply want to have an empty value also I should be adding comments in here let's call this one update data and this one should be update output with that we are getting the value so next up I want to work on the result the really important question you might have for this one is let's say we have some kind of string that is 12 plus 43. we can print this but how would we get the result the answer here is one special function inside of python that is called eval let me run this one actually if I type any kind of number then I can use these buttons here if I now click on equal we get 55. this 55 is 12 plus 43. eval is simply going to evaluate some code and then give it a result I mentioned this in the introduction to python but this eval you have to use very very carefully if for example you allow the user to type some text then they could execute some code using this eval which would be a huge security risk in our case though we are making a calculator the security here isn't terribly important also we don't have user input so this shouldn't be an issue if however you're making a database for a website then this is definitely something to keep in mind so with that we can evaluate a formula which means we have to actually get our formula let's create another variable that I call formula this needs to be a string so I want an empty string with the join method and all of my operation is inside of this full operation attribute let me simply paste it in here I can run this now I can click on some math numbers so I get an operation and now if I have a number here I can click on equal we are getting the math operation this is looking quite good to get the result all I have to do is use eval and then we should be good to go for example if I have 56 minus 32 and click on eval and we're getting 24. that looks accurate this result I want to store the result is going to be eval of the formula once I have that I want to update my output I want to clear the full operation list finally display nums should have the value of the result and nothing else these three things are going to be reasonably straightforward meaning they are going to be your exercise pause the video now and try to figure this one out you're working entirely inside of this else statement I'm going to start by updating the output this is going to be quite similar compared to what we have done up here in fact let me simply copy it I want to first of all update the results string using set although now I don't want to empty it instead I want to get the result for the formula I could use this full operation here but I don't really like that because I already have the formula up here and there shouldn't be a space for this one with that we should be having a working output meaning now I can type 2 plus 3 and then equal and we're getting five also we're getting the formula however there's no space between the values this I can fix quite easily all I need is a space in here eval doesn't care about that whatsoever which means now let's say six minus five is going to be one and we have a nice looking formula this is going to update the output besides that to cover these two bits here I want to update the data this once again is going to be somewhat comparable to what we have done up here I'm going to copy these two values first of all the full operation I now want to clear that way once we start typing again we're getting completely new values although to retain the result we have gotten I want to get my display num and set this to a new list that has a single entry which is going to be the result although this result right now is going to be a number but I only want to work with strings what this means if I now type 2 plus 3 get my equal now I can type on multiply and then you can already see we now have inside of the formula 5 multiplied let's say by 9 and we get 45 from this I can keep on working minus 31 and we get 14. which is going to give us a basic working calculator meaning I can now get rid of the exercise text and we are nearly done there's one thing I want to cover that isn't exactly breaking but very annoying if I run this again and I type something like 8 divided by two if that is the case we are getting the correct result but this point zero is well entirely pointless also it might be confusing to some people so I would rather get rid of it on top of that if I run all of this again if I have something like 8 divided by 7 we are getting a really really precise result but that isn't really necessary I would rather round this so it doesn't get too confusing which means inside of this bit here I want to add a tiny bit more logic let's call this one format the result for this I first of all want to check if the result is a floating Point number because only then do we get the weird Behavior this I can check with if is instance in here we need two arguments the first one is the value we want to check in my case this is going to be the result besides that the second argument is going to be the data type we're checking this result against which in this case is going to be a float which means all of this is going to check if the result is the data type load and this is going to return either true or false let's try this actually if this is the case I want to print float now if I type 5 divided by 2 and get the result we are getting float the result here is looking really good but this isn't given for example if I divide this by three we're getting some very strange Behavior once again which I want to account for the result you have just seen is we have too many numbers after the decimal this is the first problem the second problem is that we have an integer is formatted like a float which means we get stuff like 4.0 these two cases we have to address separately to account for them I want to start with if the integer is formatted like a float to check for this kind of behavior if we have stuff like 4.0 python actually has another inbuilt method it is called if I want to check my result and the method here is called is underscore integer this is basically checking a number if it is an integer or not which means if we have a floating point value with 4.0 this is going to be true if that is the case I want to get my result the value I want to assign is integer of the result to explain this one right now when we are getting this result here we might be getting something like 4.0 let me write it in here 4.0 inside of this if statement we are then checking if this is a floating point value or not since we do have a DOT and a decimal value we know that this is a floating point value however this is statement here is going to check this value and see that it's simply dot 0 so we can simply ignore it this is actually an integer and because of that we're going to force it to be an integer which will remove anything after the decimal point and we simply get the number so I can run this again and now 8 divided by 2 is simply giving us 4. that is feeling much better for the other case we can identify this with an else statement so let me get rid of this text here if this else statement is true we know we have an actual floating point value I'm going to keep the logic simple for this one I am simply going to assign a new value to the results this new value is going to be the rounded value of the result with let's say three values after the decimal point with that I can get rid of this comment as well and now we should be good to go if I now type 8 divided by 7 get the result I get 1.143 now this logic is quite crude and not ideal because sometimes a user really wants to have precise results but well this is something you can work on yourself it shouldn't be too hard to implement for the next part we are going to account for the free operator buttons so clear percent and invert but other than that we are basically done now that we have the basic logic of a calculator we only have to account for these three buttons here to explain what they are doing let me type some numbers in here like so AC is simply going to clear the calculator to get a value back again we can now use this plus and minus button all that this one is doing is it gives us minus or plus so it inverts the current number the percentage sign divides the current value by a hundred that way we are getting well the percentage these are the three buttons we are going to create and they are not terribly difficult let's Jump Right In here I'm back in the code and I want to work inside of clear percent and invert Lear is by far the easiest one let's start with that one all I have to do in here is clear the output and clear the data I want to get myself dot result string and set this to a zero this is our default value for the result string besides that self dot formula string should simply be an empty string I also want to clear the data which is going to be self dot displaynums dot clear don't forget to call it besides that self Dot full operation this should also be cleared with that we have one part covered I can now type some numbers in here get the result if I now click on AC everything disappears that was quite easy I can now hide this method and not worry about it again next up we have to do either percent or invert let's start with invert this is the slightly more difficult one we first of all have to get the current number I want to get the current number this we get an empty string then join and then self dot display nums this is the same thing we have done inside of math press this button like the math buttons is only going to work if we have a number so if current number then we want to invert something Bishop makes sense because if we have 0 as the default value this isn't going to do anything plus and negative 0 is just going to be zero if we have a number however I want to check if it is positive or negative this is going to be an if statement to do an example let's say instead of display nums we have 1.5 because of join this is going to become 1.5 as a string this number I now have to turn into a floating Point number that way I can check if it is positive or negative hence inside of this if statement I want to create a float from my current number if this resulting number is greater than zero then I know this is positive however if that is not the case else then I have a negative number what we now have to figure out is what to do with these results right now we have this case here our value is positive so how can we turn it negative for this one you do have to be careful because the number we want to make negative is this one here the value we are working with right now all of this is only temporary this is what we created here this is not the actual number that the calculator is working with what we ultimately have to do is add another value in here at the beginning this value has to be a negative and this we can do quite easily all we have to do is get self dot display nums and then insert a value this value has to be inserted at index 0 and the value we want to add is a minus to test this one in the else statement I'm going to add a pass and also what we have to do is we have to update the output which we do with self dot result string I want to set this and once again I need dot join and self.d display nums let's try this by now if I simply click on invert nothing is going to happen this is because it only works if we have a number inside of display nums let's say if I click on 8 and 9. now if I click on negative we get Negative however if I click on it again nothing is going to happen but at the very least we do have a start this line here is working we now to figure out this one to explain how we need to approach this one let's do another example we now have to create a negative number the important thing here inside of display nums we have to start with a negative number the numbers afterwards don't really matter let's say one and two what this join is going to give us is negative 12. because of this if statement here we know that this is going to be negative so we are working inside of this else statement which means now we have to figure out what to do in here the answer for this one is actually quite simple we simply have to remove the first item from display nums and then we are good because that way we are turning a negative number into a positive number which means we're getting simply rid of this minus literally all I want to do is delete self dot display nums the value with the index 0. with that I can run this again let me type in 56 now now if I click on invert it's minus if I click on it again we get plus and this keeps on working also if I clear the calculator I can do one plus three if I now click on the result this is also going to work so this is looking quite nice we have covered invert next up we have to work on percent this one is going to be your exercise figure out what to do with this button as a reminder the actual functionality here is divide the current value by 100. pause the video now and try to figure out this one to get started with this one I have to check if we have any kind of numbers inside of display nums this is going to be kind of similar compared to what we have done with invert however for this one I don't want to get the current number I simply want to know if there's something inside of display nums or not which means I simply want to check if self.d display nums or not only if that is the case I want to create a current number this has to be a float off I need to use join and now the display nums several display numbers to be accurate you might be wondering now why am I doing this this way you might be tempted in here to type something like current number is going to be float and then the actual value and then check if or a number this unfortunately would not work let me get rid of it and demonstrate this on a separate code editor I am printing a value and the value I'm printing is the float value of some kind of string for example in here this could be one two three point four five this will be working just fine the problem is if this float is completely empty I am getting a value error which would crash the entire thing and with this kind of setup I'm avoiding that anytime I'm creating the current number which I want to turn into a float right away but I can only do this if the display nums so the list is not empty although once I have that I can convert this number I got this one the percent number this is simply going to be the current number divided by 100. also let me add some comments again I want to get the percentage number once I have that I want to update the data and output I have to start with self dot display nums what we now have to figure out is how to turn this percent number back into a list so we can keep on working with it also I realized there's a typo this is much better actually let's first test if this is working I simply want to print percent number if I now run this again I can click on 6 and then press send and we get 0.06 I can also clear this and three plus six is equal to 9 and percent again gives me 0.09 I can also click on this again multiple times but this doesn't do anything that we're going to work on in just a second what we now have to do is turn this percentage number back into display nums list that way we can keep on working with it to achieve that we need list string and then percent number the way you want to think about this this percent number could be 0.06 which is going to be a floating point value if we're turning this into a string like so we didn't achieve very much however a string is some kind of list in a very primitive sense which means when we are putting it into the list function all we're doing is we are separating each value with a comma and then we have a list around it that way we get the list from the number the last thing that we have to do now is to update our result so result string dot set this is going to be a string again with join self Dodge display nums and then we should be good to go let's try if I now click on 9 then the percent this is working and since I turn the result into display nums again I should be able to click on it again and now we get increasingly smaller numbers also if I click on AC this returns everything back to normal and this is still looking pretty good cool with that I can get rid of this exercise command and other than that we have a calculator in this tutorial we're going to create an image editor you can see the result right here I can click on open image and import an image the one test image I have right now is called Otter if I open this one you can see we have the image this is by the way also responsive so I can resize it quite easily but much more importantly on the left side I have quite a few different options the first one is rotation this one rotates the image I can also zoom in or invert the image and revert all of this besides that I can change the color for example the brightness or the Vibrance I can also use black and white or invert after that we have effects and here I can set some blurriness or some contrast and I can work with extra options like Contour is going to be really visible and all of those options also work together for example if I use blur with this one you're not going to see anything so you do have to be careful here but for example if I return to color I can make all of this black and white or remove the invert then it becomes White finally I can export the image I can give it a file name let me call it dark water I can select a file path open Explorer I want to save it on the desktop so I select the folder and finally if I click on Save we have exported the image which means now if I open my desktop I have dark otter besides the normal author meaning this has worked also I can close the image and open another image for example the dark otter and then work with this image literally any image is fine so you can do whatever you want in here for this kind of project we are going to need the pillow Library which we have already used to some extent but for this video I'm going to go into much more detail now I am not going to cover everything I will only talk about the parts that we actually need that being said if you're interested in pillow I have made a whole separate video on YouTube that talks about all of the library in detail check this one out if you're interested but all of that is a couple of videos in the future for now I just want to create a basic window before I start with that I want to have a look at the folder this one is going to look like that let me increase the size a bit we are starting with two files we have main.pi and settings.pi main.pi contains the entirety of the logic settings contains the settings let's Jump Right In and let's see what we have right now main.pi is completely empty besides that we have settings.pi this one contains a couple of elements not terribly much all of this stuff here are the default values that we are going to need much later for example we have the default value for rotate which is going to be 0 degrees besides that we have a couple of colors and this space shouldn't be there these are the colors for the styling of the app I am not going to go too crazy on The Styling because I want to focus on the actual logic but obviously you can apply your own Styles here it's quite easy to do with that let's create the basic app by the end of this video I want to have something like this a basic window with one button in the middle it should be really easily done for that first of all I have to import custom tkinter as ctk once I have that I want to create a class that I usually call app which inherits from ctk then we need it under init method with self and nothing else once we have that we can set up the window the most important thing in here is going to be super and then Thunder init without any arguments also for this app I want to keep the styling a bit simpler which basically means I always want to use the dark mode this I get with cdk and set the appearance mode with dark as the only argument in here besides that I want to run the app so we have something this I achieve with self dot main Loop after that I can create an instance of the app run the code and we are getting a basic window this isn't looking too bad with that covered I want to add a tiny bit more styling first of all I want to set a starting size which I get with geometry the starting size here should be 1000 by 600. let's see how that looks this seems fine besides that I want to update a title which I do with self.title I got this one the photo editor and there we can see in the top left we have photo editor for this app I am not going to color in the title bar because this one just seems fine although I do want to set a minimum size which I get with self.min size this one wants two arguments for the width and the height which I want to set to 800 and 500. which means if I run this now let me show my mouse I can resize this window however I can only make it this small later on when we have all of the widgets if the app gets smaller than this it's going to look really weird with that covered I want to create a layout once we have that layout I can create my widgets the One widget I want to create for now is some kind of import button although to be a bit more specific here this import button is going to be another widget which is going to be a frame with a button but first of all we have to think about the layout for that let me draw a tiny bit this is going to be the entire window once again imagine I can draw straight lines what I want to create right now is going to be a simple button right in the middle this we could achieve with basically any kind of layout method Place grid and pack would all work for this one however later on I want to have another kind of layout I want to have a panel on the left roughly here besides that I want to have a main panel in this area here for the image as a consequence our layout has to account for this button here and for this more elaborate layout although it's not that much more elaborate basically all I have done is I have used the grid layout to create one row and two columns the rows I get with row configure we only have a single row so row 0 with a weight of one the more important one is the column let me duplicate it actually right away those two columns are going to have different sizes the left one so column 0 is going to have a weight of two the right one column one is going to have a weight of six that is all we need for now in here which means now we can work on the import button or rather the frame with a button this import button I want to create in a separate file simply because later on mannaut Pi is going to contain a ton of logic for the image manipulation which means I want to create a new file with Ctrl s and save this as let's call it image widgets don't forget dot pi inside of this file I'm going to contain the widgets for the image import and the image output for both of them we have to import custom t Kinder as ctk with that I can create another class this one is going to be called image import we're just going to inherit from cdk and ctk frame this one is going to be fairly straightforward I want this Frame to cover the entire window on top of that it should contain a single button right in the middle the button should say open image this should be fairly straightforward so it's going to be your exercise create this widget and then call it inside of main.pi the result should look something like this possibly now and try to figure this one out first of all we have to create a thunder init method this one itself and we need a parent once we have that we can call Super right away the only thing we have to add in here is Master needs to be the parent next up we have to place this widget which we do with self dot grid this one wants a column which is going to be zero however since I have specified two columns and I want my widget to span both of them I have to add column span answer this to two row is going to be super easy it's simply going to be zero finally I want to have sticky with north south east and west that way this widget is going to cover the entire window let's try it actually backend main.pi I want from image widgets and I want to import everything also I should fix my typo this is looking much better what I can do now down here under my widgets I can create this image import let me paste it right in we only need one argument which is sell for the parent if a run is now we can see that well we can't really see anything that is because this app here and this image import have the same background color we can change that though by setting FG color of the image import to something like red now if I run main.pi again we have a completely red app which means all of this is working that's a good start all we have to do now is that the button with ctk and ctk button the parent here is going to be self text is going to be open image that is all we need for now although we do have to place this button this we can do with the pack method by simply setting expand to true now if I run main.pi again we have a button right in the middle on top of that if I resize the window this button is always going to stay in the middle which is perfect for my purposes before I finish this video there's one more thing that I want to do let me run the app again when I'm clicking on open image I want to run a function however I want to contain all of the logic for the image inside of the app which is going to be a tiny bit of a problem because I want to contain all of the logic in here but the image import widget is going to call the function as a consequence I want to create the function in here I call This One Import image this one is going to need self and a path although for now we are simply going to print that path the path we're going to get in the next video it's going to be the file path towards an image this import image I now want to pass into the import image widget which I do with self dot import image the naming here arguably isn't ideal but this one here is a class whereas this is a method inside of the app class so now inside of image widgets I need another parameter let's call it the import function I can also get rid of the exercise text and create an attribute with import this shouldn't be Fung this should be Funk or function which is going to be the argument we just got after we have that this cdk button is going to need a command which is going to be a separate method I call this one the open dialog let's create this one right away Define open dialog inside of this method we have to create some kind of path for now we cannot really do that so let me simply ADD test in here besides that I want to import the image which I do with the import function meaning I want to call it with the path I just created this means now inside of main.pi I can run this method here when I'm clicking on this button let's try it if I now click on open image I can say test in the bottom left meaning this is working perfectly fine with that we have a really good start so in the next video we can work on importing the image now that we have a basic window I want to figure out if I click on the button how can I get this dialog on top of that if I open an image like this author how can I display this image which means we have to create an opening dialog and a canvas to display the image this shouldn't be too difficult to do let's Jump Right In back in my code inside of the class the issue right now is that this import image is simply printing a path later on we actually want to import an image for that though we have to create a proper path right now inside of the image import we always have test for the path this I want to change right away instead what I want to have in here is some kind of file dialog then this file dialog is going to return the path that I want to use for that tick enter has all we need although we do have to import something what we have to import is from tkinter import file dialog this is going to be a file dialog that can open a file or rather give us a path to a file to use it we have to get file dialog and then ask open file all in one word also don't forget to call it what this one is going to do if I run may not Pi again I can now click on open image and we get a file dialog on top of that if I open this order I can double click on it and now we are printing something else this is what we're getting from the path this path here is what we are printing right now most of the information in here isn't really important the only thing we really care about is the name because this one contains the file path to the image this is what we actually want to get which is quite nice because this part we can get very easy it's inside of the name of this path which means when I'm opening the path I want to get all of this which is going to return the object you have just seen this object has one attribute called name this name contains the actual path which means now if I run all of this again I can click on open image now I'm getting the proper path to the image of the author with that I can minimize the image import class and focus on main.pi what I now want to figure out is how to actually use this path to import an image for that first of all we're going to need the pillow Library which you usually use with from pil import image this I can now use to create an attribute let's call it self dot image which we are getting with image dot open the argument we have to pass in here is the path once we have that python is going to import the image and store it inside of an attribute that I called image we can actually test if this is working right away I can do for example self dot image dot show and then python over our pillow is going to show the image let's try I can click on open image otter and now I have to wait a bit and there we go python has opened the image meaning this is working just fine although this isn't actually what I want to do let me get rid of it instead I want to display this image inside of tkinder now for that we are going to need another widget I put this inside of the image widgets in here all the way at the bottom I want to create another class which is going to be image output let me minimize the image import because we don't need this one what is really important and what I talked about in the past is that to display an image in tkinder you want to use a canvas which means this image output is going to inherit from the canvas since the canvas is a part of tkinder we have to import this one separately as well which means besides the file dialog I want to have the canvas first of all inside of the class I as always want a Dunder in it method with self and parent there are two things I want to do in here the first one is super Thunder init and set the master to the parent besides that I want to use self dot grid and place the Grid in row 0 and column one also sticky should be north south east and west on top of that just to make sure that we can see this canvas I want to change the background to Red also I realized I forgot row 0 here once I have that back inside of main.pi I have to figure out something else let me run the app to demonstrate right now we have the image open Button if I click on it I can select an image but now this image open still sticks around which would be annoying to display anything else as a consequence I want to get rid of this image import which could actually be a pretty good exercise for you I want you guys to hide the image import widget pause the video now and try to figure this one out first of all we have to figure out how to Target this image import we do have an instance of it but to Target it we have to store it inside of an attribute I call this one image import now that we have this attribute I can get self dot image import and now to hide it I need Grid or get let's try this one I can now click on open image click on the other and now the import button disappears which means this part is already done next up after hiding the import I want to create self dot image output this is going to be the widget I just created this image output here I can place it all the way at the end add cell for the parent and now let's run it and let's see what we get if I click on open image the author now we can see we have the canvas on the right side although I don't like the border around it to get rid of this one inside of the image output class we have to add a few more arguments in here those are BD is equal to zero then we have highlight thickness which is also going to be zero and finally relief should be rich let's try all of this I can click on open image and the author again and now we have a plain red background although this red color is not exactly what I want instead I want to have this color this is the same color as the background for custom tkinter which means now if I run all of this click on the utter we can't see a difference although the canvas is still there it just has the same color as the background this ensures that when we add an image later on it looks like the image is just by itself although that being said this color here should be inside of the settings let me put it all the way to top I got this one the background or rather the background color this should be this color here and I want to replace it with background color I can copy the color in Here and Now inside of image widgets all you have to do is from settings import everything with that I should have the same results like so this one is still working the last thing that we have to figure out is how to put the image on the canvas and for that there's one really important thing to understand you might be tempted to place this image inside of the image output something like as a second argument self dot image this would be possible but that's not what I want to do instead I want to make sure that the image only stays inside of the app since there are going to be a lot of changes to the image later on I really want to make sure that the logic stays contained which for now means that this image output is not going to get the image itself instead what I'm going to do is I'm going to create another method that I called resize image for now this image doesn't need any arguments I simply want self in here and what is going to happen at the end of this method is self dot image output dot create image discrete image we can use on any canvas and since our image output this one here simply is a canvas we can use this method and with that we're going to place the image there are three arguments we need to place in here we need x y and the image or more specifically we need an image TK X and Y for now can just be 0 and 0. although I will change those later on image Decay we don't have right now we simply have the image but this we have to convert for it to work properly with t kinder to create that although at the top besides image I also want to import image TK once I have that after I'm importing the image I want to create self dot image underscore TK this is created with image TK then dot photo image the only argument we have to pass in here is self dot image with that we have an image TK which we can set as the image for the canvas all we have to do now is call this method here which I'm doing at the end of the import method self dot resize image if I now run all of this again I can click on open image click on the other and we can see we have one part of the author this isn't working perfectly yet also if I resize all of this we're getting some weird Behavior but at the very least we can open a file dialog and we can import the image from this dialog for the next part we are going to make all of this look much better which means the image is going to fill the entire available space and also resize with the window we now have an image however the image we have doesn't look anything like the final thing which means for this part I want to make sure we can see the actual image and also if I'm resizing the image the image is being resized as well for that we have to add quite a bit of logic to update the image and to place it properly although the entirety of the logic I have covered in an earlier video on how to use images in tkinter I am basically going to use all of that so if you want to have a lot more detail check out that video here I'm back in the code and let me demonstrate what we have right now I can click on open image open the author and now you can see that what we have is an ideal I suppose what we can start with is to place the image right in the center of the canvas roughly here for that though I have to work inside of resize image and in here what I'm placing 0 and 0 I need to know the size of my canvas the best way to get that is to use an event although this event I can't easily get right now I'm simply calling resize image in here this I don't want to do anymore instead what I'm going to do is when I'm creating the image output I will insert this resize image method into it as an argument self dot resize image what this is going to do inside of the image widgets in image output first of all I have to create a resize image method and this resize image method I want to call anytime I am creating or resizing this image which we can get with self dot bind the event here is called configure if that is the case I want to get my resize image method which means we are now going to call this method here and we get the size of the canvas via the event as a matter of fact let me print the event and let's see what we get if I now run all of this again open the image and the other we can now see at the bottom we have configure event we have an X in the Y position those we don't care about but then we have a width and a height this is the width and the height of the canvas we could use that for example with event dot with and then divide it by 2 for X for y this is going to be event Dot height divided by 2. now if I try this and I click on open image we get something that looks significantly better also if I resize the image this will always stay in the middle although since we're not getting rid of the previous images we get a lot of weird stuff behind but at the very least we have a start also let me get rid of this print here that's going to be annoying first of all this resize image we are now going to call when we are creating this image output and when we are resizing it which means whenever we are resizing the window this resize image will be called the issue with that is that we are creating new images but we don't discard the old images as a consequence we end up with way too many images and this is eventually going to tank performance to account for that I want to get myself dot image output and then delete with the argument the string all this gets rid of anything on the canvas which means now once again I can get the other and now I can resize this thing and this is looking significantly better with that we can place the image what we now have to figure out is how to resize it for that we're going to need quite a bit of logic and once again for the entirety of the logic that you need here check out the dedicated video I will go over it briefly but for the full detail check out that video I suppose let me start with the biggest problem if I open the image again we want the image to always be fully visible which isn't the case right now I can go a bit further to the right and we can see more of the image so only with this do we show the entire image however if I make the image smaller we are cutting off some bits which means what I have to figure out is how can I not cut off certain parts for this one I have to know the aspect ratio of the image and of the canvas for example if this is the canvas if I have an image that looks something like this in this example the image would be taller than the canvas but less wide as a consequence when I'm resizing the image I want to scale the height down so that the entire image would end up something like this however the other side is if this is the canvas again I could also have an image that looks something like this in this example I would want to scale the width of the image to fit into the canvas as a consequence we want to start by figuring out if the image is wider or taller than the canvas for that we will need the aspect ratio both of the image and of the canvas let's start with the image we have the image up here and I want to get self dot let's call it image ratio to get the ratio all I want is the width divided by the height both of these numbers we can get quite easily the width we get with self dot image dot size this is going to return a tuple I want to have the one with zero that's the width the height is going to be the entrance with one so a one in here let's try this one I want to print self dot image ratio if I now run this I can open an image and we get 1.5 this means that the image is one point times as wide as it is tall this specific number here doesn't matter but I do have to know it which means I don't need a print statement anymore but instead now I have to figure out the aspect ratio of the canvas which I can do inside of a resize image I want to get the current canvas ratio let me store this inside of a variable as well canvas ratio and this number I get with event dot width divided by event dot height basically the same operation we have done up here except we're getting our width and our height via different methods once we have that order resizing I now want to get a width and a height of the image although for that I first of all have to check if the image is wider or taller than the canvas for that we can use the canvas ratio for example I can check if the canvas ratio is greater than self dot image ratio this means the canvas is wider than the image if that is the case I want to get a new image height which is going to be the event DOT type in the case we have right now this one here is this version here what is really important to understand is that the canvas the yellow area is wider than the image as a consequence I want to scale the image in such a way that the top and the bottom touch the top and the bottom of the canvas which means they have the same height which I am achieving with this line here or at the very least for now I'm simply getting the height of the canvas but later on we're going to use the image height to resize the image which means all I have to figure out now is the image with this is very easily done because I have the image ratio for example for this image I know it is always one point times as wide as it is tall since I have the height I can simply get the image height and multiply this with self dot image ratio with that we have a new height and a new weft this we can now use to resize the image before we are placing it I am going to store this in a separate variable resized image this is going to be self dot image dot resize this method wants a tuple with the new width and a new height which in my case is going to be the image with and the image height with that we have a new image this image we now have to set as the TK image the one we created earlier but now we have a new image which means self dot image PK is going to be the same line I have used earlier let me just copy it and paste it in here although I don't want to have self.image now I want to have the resized image with that we have a start however we only cover one of the cases we need an else in here else like so we have to cover the canvas is taller than the image which means in here we're going to need an image with and an image height once again figuring out these two numbers is going to be your exercise figure out these two numbers once you have that all of this should be working and we can display an image pause the video now and try to figure this one out for this one if I open the drawing again the case we're working with right now is this one here which means the image is wider than the canvas as a consequence we want to scale the image to such a degree that we are covering the entire width of the canvas and then the height comes as a consequence so to get started I want to set the image width to the width of the canvas which can do very easily this is simply going to be event.wift from that I can also get the height I simply have to get the image with now for this one I know that the image is always one point times as wide as it is tall this we can also flip around which we simply do by dividing the image with with self dot image ratio these two operations here are doing the same thing we simply move them around a tiny bit with that we have an image with and an image height for all aspect ratios let's try this one now I can click on open image the author and now we're getting an error that float object cannot be interpreted as an integer the issue here is that when we are resizing an image the resize method wants integers for both the image width and the image height but right now when we're doing some of these operations we're going to end up with floating Point numbers that fortunately is very easy to fix I simply have to get all of these results and then wrap them inside of an INT function now if I try this again I can click on image utter and we have an otter what is really important now if I resize all of this we are almost okay we're getting a tiny bit of an error but most of this is working the error I got is that this event height is an attribute so I cannot call it let's try it now it should be working there we go we have the others and they're always looking pretty good this seems like the appropriate scaling Behavior with that I can get rid of this comment here for the exercise minimize all of the methods and we have covered another really important aspect there's one more thing that we have to work on before we can work on the actual input buttons If I open all of this again we do have the image but we don't have a close button which I want to add for this video this is a very easy thing to add let's Jump Right In back in my code I want to start by creating a widget for the close button this I want to do inside of the image widgets might not be the perfect position but I think it's good enough we are only showing the close button when we are showing an image so I think it fits in here quite okay this is going to be another class that I have called close output for The Inheritance here we are only going to need a ctk button although this button is going to need a thunder image method we need itself and I want a parent now we're just going to place it to place it we need this super thunder in it method Master is going to be the parent the text for this one is simply going to be an X after that I want to use the place method to place the button in the top right for that I want to use relative x with 0.99 and then relative y with 0.01 finally I want to set the anchor to North East this should give me a button that I can see all the way in the top right of the window which means inside of main.pi after I have imported the image I have created all of this stuff here I now want to create the self dot let me call it close button this will be the close output button we just created and we just need self in here as the one argument let's try this one I can click on the other and there we go we have a button in the top right it doesn't do anything right now but we have something although it looks pretty bad but that we can work on inside of the widget I want to update the text color which should be Pure White this white we're getting from the settings this right here after that what is even more visible is the FG color this I want to be transparent besides that I also want to set a custom height and a custom width both of those are going to get the same number which means the width is going to be 40 and the height is going to be 40 as well since we are having a bunch of arguments I'm going to put all of this over multiple lines that is much easier to read Also let's try it before I continue just in case I made a mistake if I now click on open image and the author now on the top right we have a button that looks much better what I now want to add is a corner radius with zero and finally I want to have a hover color which I have set to close red now if I try this one I can click on open image the auto once again and now I have a close button in the top right cool with that we have the close button but it doesn't do anything right now for that I want to create another method I call this one close edit this one itself and nothing else I want to hide the image and the close button this is going to be your exercise and it's going to be somewhat similar compared to what I have done here oh also I forgot we want to recreate the import button essentially I want to hide the image output and the close button and then show the image import button again that way we can import another image pause the video now and try to figure it out yourself to get started I want to hide the image and the close button since I have the attributes for both I can simply Target self dot image output and then use Grid or get for the image output I also want to use forget except this one has to be Place forget because we're using the place method to place it or the other part to recreate the import button I want to create self dot image import is going to be this is the same line we have used inside of the init I want to copy this one here and assign it to image import with that we're getting rid of the image and the close button although this one should be image output it should be the close button and we are recreating the import this is almost working except there's one thing missing we are never calling this close edit right now we have this close button but there's no command which means it doesn't do anything but that we can add quite easily we need a command in here this one is going to need some kind of close function this close function we don't have available but we can pass it into the widget so I want to get the close function from the parameter now back inside of main.pi this close button when we are creating it needs cell for the parent and on top of that we need self Dot close edit that way we are calling this method let's try now I can open the image open the others we can see the authors and if I click on X we are back to open image I can click on this one and open another image and this one seems to be working just fine with that we can open and close the editor and that finishes another major part of this project at this point we have the image this is the first major part done which means now we can start working on the menu this one contains quite a few different parts I will be going through them step by step the one I'm going to start with now is this main panel here this is a custom tkinder widget that is a container that has different panels it's really easy to implement let's have a look at this one back in my code editor I want to create another widget for this container since this is going to be a larger project I am going to create a new file I will save this one as menu dot pi first of all as always we need to import custom t Kinder as ctk this allows me to create another class which I called menu what makes this one special is that for the inheritance we are using ctk tab View this is basically a frame with tabs although other than that we need the dunder init method with self and the parent and later on we're going to add more but that's enough for now after that we need Super init and set the master to the parent last step I want to place this menu right away using grid with row being zero and the column being 0 as well on top of that I want to set sticky to north south east and west with that we have a menu let's use it right away inside of main.pi for that first of all we have to import it which means from men you import menu this I will create inside of import image because in here we are first of all closing the input button and then we are creating the image editing stuff so the image output and the close button besides that I want to create a third thing which is going to be self dot menu for that I am going to use the menu class I've just created the one argument we need for now is sell for the parent on top of that for close edit I should get rid of the exercise in fact I should get rid of all of the text we don't need that anymore like so what I want to do inside of this method now is to hide this menu as well just like I have hidden the image output and the close button which means in here self dot menu dot grid underscore forget then everything should be working let's try I get the usual menu and now we get some slightly weird Behavior but at the very least for now we have a container so something is happening although right now there's an issue and that is these columns are not properly represented let me run the entire thing again really quick you can see here that roughly the image on the right this with here is roughly as large as this width here which is not what I specified earlier these two lines don't seem to work properly anymore that is because I have to specify uniform and set this to some kind of string it has to be the same for both of them if I now run this click on open image and an image now this is looking much better all right with that we have the proper menu so let me minimize all of this now we can work inside of the menu first of all what I want to create in here are the tabs those you create using self and then the add method the one argument you want for this one is the name of the tab for example the first one that I want is called position let's try this one if I now click on open image and an image we can see position this is going to be the only tab for now although in my case I want to have four tabs I want to have the color I want to have effects and finally I want to have export let's try this one one more time and there we go now we have four tabs that we can toggle between so now we have to figure out how to attach a frame to any of these tabs I am going to start with the class position frame which is going to be just a ctk frame this one is going to work like any other frame we have created so far which means we need self and a parent after that called super Thunder init and set the master to the parent once we have something like this inside of the menu I can create the widgets well now I just want to create a position frame although now when we are setting the parent we are not using self instead we are using self dot Tab and then the tab we want to attach the widget to which in this case is going to be position although if I were to run this you wouldn't really see a difference because this widget here is going to look identical to the background of the menu we can change that by setting the FG color to something like blue and to really make sure that this is working let me duplicate the entire class and change position to let's say alert is the second one this one is going to work in basically the same way except for now I'm going to change the background color to Green finally for the position frame I want to add a duplicate and change position to color with the parent being the color tab not the position let's try all of this now I can run the app again click on open image click on utter and now we can see that nothing happened the reason for that is that these two frames position and color also need to be placed like any other widget for them I can simply use pack because they're supposed to fill the entire area which means I want to set expand to true and fail to both let me duplicate this one and now let's try this again click on open image otter and there we have a completely blue tab if I click on color it's entirely green effects and Export don't have anything yet so they are empty but at the very least this is working with that I can set the background color for both of them to transparent and now I have to figure out what to add inside of these frames since that is going to be quite a bit of logic in and of itself I have created another python file that I have saved as panels dot pi the way you want to think about it if I open the finished project and open image really quick basically what we have right now is a frame for each of these tabs what we now have to create are these panels here these are going to be reusable components for example this slider box here and this slider box here are the same class the only difference between them is that I inserted different arguments as a matter of fact inside of color we have two more slider boxes these two here and inside of effects we have two more all of these sliders are the same class I simply use different arguments to customize them although besides them we have other widgets like this one here or like these toggles or like this box here all of these we have to create for now I'm simply going to start with this slider box this is going to be a fairly simple one although for now it's not going to do anything but that I am going to work on in the next part I want to work inside of the panels in here I have to first of all import custom tkinter as ctk once I have that I want to create a class that I called panel this one has to inherit from ctk and ctk frame first of all in here we are going to need to done their init method with self and the parent we have done this multiple times by now after that super Thunder init with master being the parent finally I want to use self.pack this one should set fill to X on top of that I want pad y to be 4 and iPad y to be 8. this will create a fairly basic panel that doesn't do much by itself also I forgot one more thing I want to set an FG color in here which is going to be dark gray this is the dark gray that I'm getting from the settings this dark gray although for this to work I have to add from settings import everything let's try to use this one right away inside of menu dot Pi I want from panels import everything with that inside of the position frame I want to create a simple panel with self as the parent now let's try to use this one open image order and there we have a simple container which is ideal because in here we could now write a sliders some text we could add switches basically whatever we wanted the idea basically is that this panel is going to be a parent class and from this I'm going to create the actual panels that you are going to see for example the one I will be using the most is the slider panel this one is a child of the panel which means inside of the image method after self I have to specify a parent also I now want to specify some kind of text to display what kind of box we are going to have Adobe I am still going to need Super init or this one I have to set the parent to the parent because remember this parent here refers to this parent which is going to set the master what we are now able to do inside of the slider panel I can for example create a ctk and ctk label self is going to be the parent the text I can now set from the text the one I've specified inside of the parameter just so we can see something I want to pack this thing right away once I have that inside of menu I don't want to have a panel anymore instead I want to have a slider panel beside itself for the parent this is going to need some kind of text let's add test in here once again I can run this open image order and now we can see we have one panel that says test that is working really good which means now we can create all of the stuff for an actual slider panel in here as a reminder what this is going to look like let me open the final thing I want to create this slider box here or this one here they're the same creating this layout is going to be your exercise I want you guys let me clean this up a tiny bit I want you guys to recreate this slider box most of you now and try to figure this one out let's get started in my case I used a grid layout which means I want to start with a layout we need self.row configure I have zero and one rows that both have a weight of one the same thing I want to do for the column configure which means we have two rows and two columns with that this ctk label shouldn't use pack anymore instead we need grid and this text I want to have in the top left which means column is going to be 0 row is going to be zero and let's stick with that for now besides that I want to have a second piece of text that for now is simply going to say 0.0 I should do all of this actually this is going to be the text box and because of these two lines here we have basically created this kind of layout the first item I have set in here is the first ctk label which is going to occupy this top left cell here this is 0 and 0. these numbers next up I want to create another ctk label that should be 0.0 in the top right which means we are still going to be in row 0 but column should be 1 now let's try those two I can click on open image again utter and now we get test and 0 and 0. however I want to make one more change this test should be all the way on the left roughly here while this 0.0 should be all the way on the right roughly here to achieve that I can use sticky a title text for this box should stick to the west side is 0.0 should only stick to the east which means the right side let's try this one again now and that is an improvement but now I think the issue is that both of these text labels are far too close to the Border this I can fix as well by using some padding both of these labels should get pad X of 5 and now we should have a good result there we go I am happy with this one you could probably add a tiny bit more padding but well experiment around finally I want to add ctk and ctk slider order parent I'm going to set self here and then we can place this using the grid method right away row should be one column should be zero and since I want this slider to span the entire wift column span should be 2. let's try this one open image click on the order again and there we have a slider that's not looking bad at all although a few tiny more changes I want to set sticky to East and West so we are covering the entire horizontal space although just like with the labels I want to add a tiny bit of horizontal padding now let's try this again open image otter and well this looks basically identical but now we have a bit more control over it also we can try to add for the slider a bit of vertical padding let's go with five as well I think that's going to make the entire thing look a bit more open yeah I do like this one better although the difference is quite minor all right what we can do now inside of position frame rename this label to rotation what this allows us to do if I open the entire thing again we now have the rotation text box this one is looking pretty good oh although there's one thing that I did forget inside of panels or in this slider I want to set an F G color which is going to be slider PG from settings this color here what this one is going to do is make the slider background a tiny bit brighter so it's easier to see the change once again is not very pronounced now we have the actual box for the slider what is even more important now we have the rotation box this is this slider panel but now I can duplicate this because the second box I want is called Zoom what this one does if I rerun everything we now have a second box that can work independently so with that we have made a ton of progress although unfortunately neither of those do anything so this I do have to work on although before we get to that there's one more change that I would like to make there is right now no padding between the menu and the image which seems a bit cramped so I want to add a tiny bit of padding both for the menu and for the image for the menu when I'm using the grid method to place it up here I want to add pad Y which is going to be 10 and Pad X is also going to be 10. besides that inside of the image widgets the image output in the grid method I also want to add pad X and such as to 10 pad Y is going to be the same finally I can run my DOT Pi again the otter now the entire thing looks a bit more spacious so next up we can make all of this actually work now that we have the basic layout we can start working on the actual functionality of this image editor what I want to start with is the rotation which means this rotation slider actually rotates the image to make this kind of thing work we are going to need a couple of things most importantly to understand the basics is that this rotation slider is going to be connected to a custom taken to a variable and when this variable changes we are going to update the image in a certain way for this particular case we're going to rotate the image but this could also later become a zoom or it could become an invert or any of the color or effects but let's do all of this in code this is going to be much easier to understand once again I am inside of main.pi what I want to do in here is first of all I want to create another method that I called init rameters which one itself and nothing else for its own parameters what I want to do in here is to initiate the parameters that are going to track the data for the image manipulation later on there will be quite a few in here but for now I simply want to create self dot rotate and this is going to be a float this is going to be an object ctk and double VAR this one is also going to have a start value which I set with the value a start value I am getting from the settings this rotate default here is what I want I can copy it and use it for the value with this we have some kind of way to track the value of the rotation of the image by default it's going to be zero now once we have that we want to do a couple of things number one we want to connect the VAR to the slider which means this rotation needs to be accessible or rather changeable from inside of this slider panel so we have to somehow get it in there once we have that number two we need to trace changes to the VAR which means once this slider panel is changing the variable we want to do a certain thing finally number three we want to use the VAR value to change the image which in this case means anytime we're moving the slider we're updating the VAR and then we're updating the image so let's go through this one by one number one we have to connect the VAR to the slider although before we can do that we have to call this method this is going to happen inside of init before we are creating the widgets I want to self dot init parameters I suppose we can do this right at the top it makes a bit more sense there with that I can minimize the init method because now I want to work inside of import image the reason for that is that the menu needs to have access to this self.rotate float that way let me pass it right in self dot rotate float that way inside of menu the class I can create another parameter let's call this the rotation the rotation I want to pass right through to the position frame which means the next argument in here is going to be the rotation with that inside of the position frame I have the rotation available and now I can pass this into the slider panel rotation for this one that way the slider panel has access to the rotation which means inside of the panels I can work inside of the slider panel although first of all I have to give this another parameter the rotation what this allows me to do for example I can set the text well I can remove it right away and instead get a text variable which is going to be the rotation I can do the same thing for the slider although this one is going to be a variable which is also going to be the rotation with that when we're moving the slider the text should also update let's try this one actually I can open the image and now if I click on rotation we get something so definitely we're making progress although the number here is way too precise also let me comment out the zoom for now because this one is going to cause an error well now I want to keep on working inside of the rotation they had too much of problems actually the first one is that this ctk slider I think goes from zero to one which is fine for a starting value but I want this to go from 0 to 360. as a reminder a full circle so a full rotation starts at zero and then goes all the way around to 360. which means the slider let me do this over multiple lines right away the slider is going to need two more arguments we need from and underscore this should start at zero and then go to and this should be 360. which means now we should get the numbers from zero this is a good starting point and I can go all the way to 360. although the problem now is that the number is way too precise we don't need this many numbers before we can get to that we have another issue this zero and the 460 are only unique to this particular slider panel if I want to create another slider panel for example for the zoom the numbers might be different as a consequence these numbers cannot be hard coded although that is very easy to change I want to add another parameter or rather two parameters that are Min value and max value ROM is going to be the Min value 2 is going to be the max value for the slider with that back in menu I can add two more arguments that are going to be 0 and 360. that way this slider panel becomes actually a reusable component where we have a name a variable and then a start and an end value later on for the zoom panel we can simply copy it and add different numbers and then we have a completely new panel before we can work on that we have to update this ctk label the issue once again is that the numbers we are getting from the text variable are much too precise to fix that I want to round them but for that we have to add a tiny bit more logic first of all I want to get access to this ctk label by turning it into an attribute let's call it the num label this is simply going to be the widget we just created after that I want to place it with the grid method so self.num label so far this is going to be the exact same result although this one is not going to get a text variable instead I am just going to set the text which is going to be self dot rotation dot get by default this one is going to be zero with that let me run the code again we are getting an error this isn't going to be self this is just going to be the rotation now let's try it again there we go now we have rotation and the number on the top right doesn't do anything because we are simply getting the value of the rotation but then not using it this one here doesn't do anything right now for that I want to create a separate method I call this one update text this one is going to need self for the parameters besides self we are also going to need a value this value we need because we are calling this update text from the slider via the command this is going to be self dot update text what this optic text is doing let me demonstrate right away I want to print the value if I now run this again a slider is going to print whatever number we have inside of it which means now the numbers go from 0 to 360. these numbers I want to use to update this num label which means I can copy it and use configure to update the text in there I simply want to update the text which is going to be an F string I simply want to round the value I'm getting from the slider with two decimal points with that I can run main.pi again click on the utter and now we have the text updating in the proper way this looks significantly cleaner righty with that we have connected the VAR to the slider although inside of the panel this shouldn't be called rotation because later on the slider panel should also connect to other kinds of variables let me simply rename rotation to data VAR that way the slider panel becomes a bit more generic ready but now we have covered the first bit which means I can get rid of it now we have to trace the changes to this variable which means whenever this rotation field changes we want to do something that is actually super easily done all we need is self.the rotation float and I want to run the trace method whenever we are changing the value or more specifically whenever we are writing a new value in it then I want to call a method the method I want to call is going to be manipulate image that doesn't exist right now let's create it self dot manipulate image for this one we need self and we need the arcs these arcs are passed into it automatically whenever we are calling a method using Trace inside of this manipulate image we can now make changes to the actual image which means we have covered the second part as well now we have to cover how to update the image essentially what we are going to do we are going to take this self image and then run some methods on it the pillow library has lots of methods to change an image for example we could blurred rotate it Zoom it flip it add some contrast or some other effects also change the brightness or the grayscale there are lots of things that we can do however for this one we have to be careful because we don't want to make changes that we cannot reverse for that when we are importing the image I am actually going to create a self dot original and this is where we are storing the image so image open Dot path is going to get the original and then self.image is going to be a copy of self.original that way I can make whatever change I want to the image whereas original is going to stay unchanged that way if I make too many changes I can always revert back to the original that is a super important thing to start with now inside of manipulate image first of all I want to override self.image with self.original once again that way I am always starting with the original image once I have that I can apply the different changes to it for example if I want to apply rotate I could get myself dot image and to apply rotation I want self dot image and then rotate this method wants a single argument which is going to be the rotation which I'm getting from self dot rotate float dot get that method is going to return a new image which we're now storing inside of the original image all we have to do now is to set this new image as the image we are outputting which we have done earlier inside of this resize image down here we essentially want to call all of this again except now with a new image which means I want to reuse this code as a consequence I'm going to turn all of this into a separate method that I called place image which needs self and nothing else although with that we have to make a few more changes first of all after we are resizing the image we have to call self.place image to make sure that this works in the first place unfortunately now we have to make a few more changes because of the local scope of these methods the basic issue is that these variables are only available inside of this scope while they are not available in this scope which is going to cause an error so we have to account for it the way around it the way I approached it is let me actually minimize all of these methods otherwise this will get confusing inside of the init method before I'm creating the widgets I want to create some canvas data this is going to be self Dodge image with which is going to be 0 by default then we have an image height which is also going to be zero then we have a canvas with and a canvas height once we have those numbers inside of resize image every time we are resizing the image I want to update the numbers I have just created this means all of these image width and image Hive variables need to be parameters which I Do by adding self in front of them also this image height and this image width needs to have self as well with that I have covered the image width and the image Hive but I also have to update the canvas width and the canvas height which means I want to add another section here with update canvas attributes this is quite easy done all I need is self dot canvas with is going to be the event dot with then I can duplicate this and simply change the wift to right with that I can minimize resize image although I do have to make some changes to place image image output.delete all still works just fine although resize image now needs to work with the attributes self dot image with and self.image height self.mhdk is working just as before this one doesn't need any changes although for the image output this image width divided by 2 should be replaced with self dot canvas with divided by two same for event height this should be self dot canvas height divided by two this should be all the changes that we have to make let's try all of this again I can click on the other and there we go the order still works although the rotation right now doesn't work at all because inside of manipulate image we're not calling this place image we're simply updating the image but we're not setting it to the output for that I simply have to call self.place Image at the end of manipulate image now let's try this again open the image author and now the rotation is working just fine and with that we have the first part of the rotation now I think so far this is probably a bit confusing I think the best way to approach this is to do another example inside of the parameters I want to create a second attribute this time for the zoom which means I want to have self dot Zoom underscore float this is also going to be a ctk double VAR as a matter of fact I can simply copy this one although the start value is well it's also going to be zero but I want this to connect properly so Zoom default here is the start value also I can get rid of this text that's going to be confusing this Zoom float I now have to pass into the menu which is happening inside of import image in here besides rotate float I also want self.zoom float which means now inside of the menu besides rotation I also need Zoom this Zoom I want to pass right away into the position frame right after rotation which means zoom in here and I am also going to need another parameter which is going to be Zoom what this allows me to do is to Simply uncomment the slider panel and add in the zoom in here this one should go from 0 to 200. with that I have connected the variable to the panel so I can minimize the import image next up I have to trace it for that I can simply duplicate this method and change rotate float to zoom float with that we are calling manipulate image whenever we are changing the zoom float value with that I can call manipulate image in here I want to have the zoom this is going to work just as before I want to update self.image to change this one though we have to import another module from the pillow Library this one is called image Ops the way you are using this is you first need image Ops and then dot drop this one wants two arguments the first one is going to be the image which in our case is always going to be self.image besides that it is expecting a border this border we are getting from self dot Zoom float dot get with that we can run the entire thing I can click on open image get the order now we have two panels I can rotate it still but now Zoom is also going to work although it's not perfect Zoom it stretches the image a tiny bit but this is the easiest way to get zoom in pillow and I guess for our purposes this is good enough but you could totally update this to get proper Zoom I guess but it's really important to understand here is that we first of all copy the original to the image then we are creating a new image if we are rotating the image then next up this rotated image we are zooming if we are using the zoom that way we are applying both of these changes now before I'm changing this video I have made a couple of changes to how the image is being displayed and I think I should talk about those because it's probably a bit confusing so let's go through how the image output is going to work first of all when we are calling the edit method we are declaring a couple of basic variables we need to get the image width and the image height and the canvas width and the canvas height all of those are zero by default that one should be fairly easy after we are doing that we are calling import image in here we are importing the image but then most importantly we are getting the image ratio this we only have to get once because we care about the ratio of the original image for the rest we're simply getting rid of the import button and then display the image so this we can ignore for now what is much more important next up is we are resizing the image for that we're getting the canvas ratio and then we're updating the attributes for the canvas with and the canvas height after we have that we are resizing the image in such a way that it fits into the canvas perfectly finally inside of place image we are getting whatever image we currently have this could either be the original or the manipulated image and then we're getting the image width and the image height we have set up here this we are then turning into an image TK and finally we are creating an output and to get the center of the canvas we are getting this canvas width and canvas height and divided by two I am not quite sure how confused you are by this but your main exercise for this part is to try to understand the logic here of how the image is being displayed ideally try to recreate all of this and try to do all of this from scratch the logic for this one unfortunately does get a tiny bit more advanced but well we can continue so let me minimize all of this and I'll see you in the next video at this point we have the basic layout and some rudimentary functionality which means we can rotate the image and we can zoom into the image from this point forward we have to cover two important steps number one we have to create a whole lot more variables to cover all of the different options for example right now we have a variable for the rotation and for the zoom we are also going to need one for the invert after that we need three more variables to cover everything inside of color three more to cover these final panels which means we're going to need nine variables in total which means we have to organize our data management a tiny bit better this is what I am going to start with other than that we have to create a few more panels for example this invert panel here doesn't exist yet this switch panel here we also have to create and finally for the effects we have to create this box here which is a drop down menu for example for these kind of effects back in my code I want to work inside of init parameters this one creates two attributes right now rotate float and zoom float which is fine but that's not exactly what I want to do since we have to create quite a lot of variables this is not going to be efficient what I want to do instead is create a couple of dictionaries for example the first one is going to be self dot pause vars this one is going to have an entry for rotate the associated value is the one we have created earlier the ctk double VAR with the start value of rotate default I can copy this one more time next up we have zoom this is also going to be a double bar although the default value is going to be Zoom default finally there's one more that I want this is going to be flip this one we haven't used yet this is going to be a ctk string VAR or the start value for this one we are going to need one but it's going to work a tiny bit different compared to what we have done before essentially if you look at settings we have flip options and this is a list later on when we have the effects this is going to work in a similar way the idea is that we have a couple of options and 0 is always the default which means when I assign the value I want to have flip options with the index 0. this would cover all of my position variables with that I can get rid of these two entries here although I do have to cover the tracing this one also wouldn't work right now to replace that let me add a comment in here tracing I want to use a for Loop for VAR in I want to check self dot pause vars dot values and don't forget to call this one this is going to give me all of the vars this double VAR this double VAR and this string VAR I want to get all of them and then use the trace method the arguments are going to be the same that we have covered down here with that we can get rid of this bit as well and now we are organizing our data much more elegantly although that being said when I am running import image rotate float and zoom float don't exist anymore so I want to get rid of them I will replace them with self.posvars which means now in the menu we also have to update the parameters I am just going to have the position variables those I'm going to pass right through to the position frame and here I want to have to pause the vars this also means inside of position frame rotation and zoom should go instead I want to have my position bars finally when I'm creating these slider panels instead of rotation I want to have my pulse vars in here I want to get the key rotate I think that's what I called it yeah rotate this one or the zoom I want to have my passwords dictionary with the key Zoom with that the app should work just as before if I open the image I can still rotate well I can't and I do know why because inside of manipulate image we are still using rotate flow.get and we're using zoomflow.get neither of those exist anymore instead I want to get my self.posvars the first one is going to be rotate Zoom float should be post virus with the key Zoom now this should be working let's try the author and now we're getting another error ah right I see the error I forgot the get method for both of them now this should be working I hope I don't want to know what promise auto rotate now this is working both for zoom and for rotate cool which means now we have the basic variables and tracing for the position next up I want to create another dictionary with self dot color virus this is going to work in basically the same way that we have seen up here except we are creating variables for other attributes also I want to indeed these key value pairs that makes all of this look a bit cleaner borde Calaveras we have four values in total we have brightness this one is going to be a ctk double VAR a start value for this one we're getting from settings somewhere in here we have brightness default this one is going to be one next up we have grayscale this one is a ctk Boolean VAR a start value for this one once again we are getting from settings grayscale default it's just going to be false after that we have invert this one is also going to be a Boolean VAR meaning I can just copy all of this although I do have to change the start value this one is invert default finally we have Vibrance which is going to be a ctk double VAR which also has a start value which we are getting from Vibrance default there we go this covers all of the data for the colors there's one more that we need and that is self.effect vars and for this one I don't want to bore you so let me just copy it in this one is going to look like this we have blur contrast and effect blur being a double VAR contrast being a ctk intvar and effect is going to be a string VAR blur and contrast both have a simple default value whereas the effect is going to work like the flip which means effect options inside of settings is going to give me a list where the first value is none but other than that we have emboss find edges contour and Edge enhance I am for now simply picking the first entry with that we have all of our tkinter variables that are going to track the changes we are making to the image let me minimize them what we now have to figure out is how to trace through all of them for that you could create three four Loops but that wouldn't exactly be elegant instead I want you guys to try an exercise I want you guys to apply Trace to all of the nine variables using a single for Loop the one I have already created pause the video now and try to figure this one out the way you want to approach this one is you can simply add a plus to get for example self dot color vars.values although this by itself if I run all of it is not going to work because right now we are trying to add dictionary values to other dictionary values which isn't going to work you can only add lists together and that way you are getting a combined list which should be giving you the answer because all we have to do is convert both of these dictionary values to a list that way all of this is simply going to work although since we have three dictionaries we have to do this one more time plus a list of self dot effect bars dot values there we go with that we have one for Loop that applies Trace to all of the variables although in my case I want to store all of them inside of a separate variable that way you don't have to scroll let's call it combined vars is going to be the list I just created which I want to Loop over so for VAR in Combined bars then we are applying the tracing to it the way you want to think about this kind of logic in here is that you can very easily combine lists but dictionaries are much more difficult to work with as a consequence it's quite a common thing to convert a dictionary to a list and then work with it for a bit because lists are much much easier to work with all right but with that we have initiated all of the parameters what we now have to do is to pass all of them into the menu which means besides the position variables we also have self dot color vars and we have self dot effect variables to make all of that work inside of the menu we need two more parameters we have the color vars and the effect vars the color vars I want to pass right through to the color frame after that I can create an effect frame that is going to have self dot tab effects as the parent besides that it is going to get the effect variables this effect frame doesn't exist right now let's create it all the way at the bottom I want to have class effect frame this one is just going to be a ctk frame with it under in it method as a matter of fact I can copy all of this since it's going to be the same although the color frame is going to need the color vars while the effect frame is going to get the effect vars now this is going to work with that we can work purely inside of these frames because they have all the data that they are going to need first of all inside of the color frame I want to create two more slider panels which I can do very easily I just have to copy the slider panel the first point is going to be the rightness with the color vars of brightness the minimum for this one is going to be zero but the maximum is going to be 5. then I can duplicate this panel and change brightness to Vibrance the Calaveras variable we are looking at is going to be Vibrance as well which is also going to go from 0 to 5. neither of these panels are going to do anything right now but at the very least we should be able to see them although if I run the code I get an error that a bracket was never closed this happens inside of when I'm creating this list which is going to be inside of init parameters or this one all the way at the end I forgot one bracket now let's try this again we can still open an image is this looking good and now if I go to color we have brightness and Vibrance both of which start at one I can move the slider but it doesn't do anything right now but at the very least we can see something while we are here I can also work on the effect frame because this one is going to get two slider panels as well we get one slider panel for the blur which is going to have the variable from effect virus with blur the values here go from 0 to 3. and I can duplicate this one because the next one is going to be contrast which is going to get the dictionary entry for contrast and the values go from 0 to 10. and I hope while you are watching this you can see why these panels are super useful I can simply duplicate them and then I get a whole panel that can influence one specific variable all right let's try out of this we should be having three panels now we have position color and effects and all of this is looking really good the numbers also update along with it I'm very happy with this one which means now we have to create a few more panels to cover the other kind of variables this is going to happen inside of the panels first of all I want to create another class for I call it this one is segmented panel let me run the final app again the panel we are going to create is this one it's quite simple to be honest we have a label at the top and this thing here is a ctk widget although both of those are going to be inside of a panel which is going to be the parent inside of this one I want to have a Dunder init method with self this one needs a parent then we have some text next up we need a data variable finally we're going to need the options for this panel first of all we need the super Thunder init method which sets the parent to the parent we have gotten from the parameters after that I want to create a ctk label the parent is going to be self and text is going to be whatever we are getting from the parameters since the layout is going to be simple pack here is totally fine the actually interesting widget for this panel is going to be ctk segmented button I hope I spelled it correctly it's looking good this one wants to have a parent as always and then we are going to need values these values we are going to get from the parameters this is going to be options after we have that I want to pack the widget as well I want expand to be true fill should be both finally I want to have pad X to be 4 and Pad y should also be 4. this is going to give me a segmented panel we now have to figure out how to call it this will happen inside of the menu and since I'm importing everything from the panels I can use it right away this segment panel I want to use inside of the position frame because in here I have my position variables I want to get my segment panel the parent is going to be self besides that the other parameters are text Data VAR and options let me copy them in the text we can just set as whatever we want I caught this one invert the data variable we are getting from the position vars which I called invert or at least I think I did if I look at the position bars in here we have lip which means there should be flip instead of invert the options I am getting from the settings I want to get flip options and add them for the options this should be all I need if I now run all of this select the auto once again we're getting an error that segment panel is not defined which probably means I made a typo I call this the segmented panel not the segment panel let's fix that one let's try it again if I now try it again there we go we have an invert button or panel or segmented button whatever you want to call it although it doesn't do anything right now but we can work on that in just a bit for now though there's one more thing that I want to do and that is anytime I am clicking on any field inside of this segmented button I want to update this data VAR for that inside of the segmented panel we can add a variable which is going to be the data bar with that we have this segmented panel I can now create another class which is going to be a switch panel once again the parent here is going to be the panel let me demonstrate what this is going to look like at the end in the final app inside of color we have this top panel here where we have a couple of switches that either activate black and white or invert color not a particularly difficult panel to create I want self and the parent as usual however now for this one I want to account for an unknown number of switches which means there could be two there could be one there could be five in here I want to panel to handle all of these cases as a consequence the parameter here is going to be arcs or Asterix args to be more specific what I am expecting ultimately is a tuple and this Tuple contains other tuples inside of these in our two boards we have a variable and then some text the variable will be connected to the switch and the text is going to be the name of the switch inside of this Tuple you can have as many inner tuples as you want this is actually very easy to add although first of all we're going to need Super thunder in it where we set the parent to the parent next up we have to account for all of these arcs this is going to happen inside of a for Loop or VAR and text inside of the arcs this is going to give me a variable and a text this I want to use to create a ctk and ctk switch the parent is going to be self as always since I have the text right away I can set this as the text for the switch and I can also set the variable for this switch as the variable I'm getting from the Tuple for these sliders I also want to apply a tiny bit of styling they get a button color which is going to be blue this blue I'm getting from the settings blue also they are going to get an FG color which will be the same as the slider background they're resulting widget I want to store let's call it switch once I have that I want to hack this switch widget the important thing for this one is the side should be left other than that expand should be true bill should be both and then I want to have pet X of 5 and Pad y of 5. this is going to cover the panel let's try to use this one I am going to need this inside of the color frame I want to create a switch panel the parent is going to be self as always next up we have to cover these arcs which are going to be well basically two bolts I can add one tube in here we need a VAR and some text the text is the easy bit the first one is black and white I shortened this to b w the variable we are getting from the color vars the entry name is gray scale then I can duplicate all of this because the next entry is going to be color vars and invert the name for this part is going to be invert with that we have another panel let's try and click on utter and color and there we go we have the invert buttons once again they don't do very much but at the very least we have the visible part next up inside of the panels there's one more of the main panels that we have to create this is going to be a class of drop down panel this is going to be a tiny bit different because we are not going to use the panel instead we will inherit from ctk option menu I should actually demonstrate what this one is doing if I open the final app again inside of effects we are creating this widget it's simply a drop down menu I can click in here find edges Contour etch enhance and then you get different effects applied to the image the effects apply part we don't do yet but we are going to create this drop down menu this one works kind of similar compared to the segmented panel or rather the ctk segmented button in the sense that you need a variable and some values which means this should be fairly doable it's going to be your exercise create this drop down panel pause the video now and try to figure this one out you will have to apply a bit of custom styling so play around and see how far you get as always we have to start with a Dunder init method this one itself it needs a parent it needs a data variable finally we need options pretty much exactly what we have done for the segmented panel for this one we are now going to need a super init method there are going to be a couple of options so I'm going to do this over multiple lines right away the most obvious one is now we have to set the master it's not going to be the parent anymore because we inherit from a ctk widget not from the panel other than that we have to set values which are going to be the options once we have all of that I want to use self.pack to pack the widget I want to set fill to X and Pad y to four with that part covered we should at the very least have something let's see what we get when we create it I want to create this panel inside of the effect frame once again all the way at the top I want to have it drop down panel for that we have to copy all of the parameters parent datavar and options parent is the easy one self all the data variable I want to get the effect of ours the key we are looking for here is called effect finally for the options this one we are getting from the settings effect options I just want to copy and paste and then we should be good to go let's try main.pi open image otter effects and we get a drop down menu this one looks pretty good we can click on things and we get the right option although The Styling doesn't work out right now and this also doesn't do anything but this we can work on quite easily first of all for the styling I want to set an FG color to dark gray after that we have to set a button color then we need a button hover color finally we're going to need a drop down FG color all of these colors we are getting from the settings although I did realize I didn't actually create them so let me paste them in at this point there we go these are the three colors that I want to use we have dropped on main color dropped on Hover color and dropped on menu color drop down main color is going to be the button color the button hover color is going to be the drop down hover color finally the drop down FG color is going to be the drop down menu color sorry about the colors I completely didn't realize let's try all of this one now if I click on open image otter effects and there we go this is looking significantly better finally we have to connect the variable to this menu so it actually does something What You Do by setting the variable this one is going to get the data bar with that we have all of the main panels let's try all of this I can click on the utter the rotation works and the zoom also works both of us do something but for the invert we get nothing next up we have colors and some sliders and then we have effects that works and we have blur and contrast so all of this is working but well this video is getting quite long so for the next part we are going to make all of these variables actually do something at this point this is quite easy to implement so I'll see you there at this point we have all of the panels and all of the data to organize our app we can actually start working to implement all of the functionality I'm going to work on the invert button on the colors so we have brightness Vibrance invert and black and white and we are getting the colors like blur contrast and stuff like Contours we're going to apply all of that in this video back in my code editor I want to work inside of manipulate image this method is going to organize all of the image manipulation we already have a couple of things in here now the really important thing that you absolutely have to understand is that we always start this method by assigning a new image this image always starts with the original this image we are then going to transform for example we are starting by rotating it this is going to give us a whole new image this new image we are then using inside of this line and then adding a zoom that way we have a rotation and a zoom at the same time this we simply have to continue forever for example to add a blur or to change the brightness or to flip the entire thing we basically take the image we have and we keep on adding changes for example what we could be doing to finish up the positioning is the flip logic although this one is a tiny bit different compared to what we have done with rotate and zoom first of all though I have to check if self dot pause virus the key I'm looking for here is called lib I want to get the value of this variable and for this one we have a couple of different options for example we have capital x then we want to do a certain thing for now I'm going to write pass besides that we also have that the flip could have the value of y finally we could have a value of both these are the values I specified in settings we have x y and both these flip options we are passing into the panels specifically let me minimize all of this in the segment panel we are passing in these options which means when we are clicking on one of these buttons this data variable becomes the option we have selected I suppose just to test this let me print X I want to print Y and finally I can print both let's try this one now I can click on open image the author and now I have none this one doesn't do anything but if I click on X Y and both we get X Y in both this is working really well although I don't want to print X Y or both instead I want to assign a new self.image this new image we are getting once again from image Ops the one we have already used up here except for this one we need either mirror or flip mirror is going to flip the image in the horizontal axis which means we are only going to need a single argument in here which is the image we already have so essentially what's going to happen at this point we are taking our original image then we are rotating it then we are zooming it and if this condition is true then we are flipping it on the horizontal axis this should already be working let's try once again I can open the image and now if I click on X we have a flipped image this is working perfectly fine which means next up I can duplicate this line get rid of the print statement the only change I have to make is that this mirror should now be flip this is flipping the image on the vertical axis let's try this one I can click on the author and why and there we go now we have X and Y separately which means to combine the two I simply have to run both of these methods I want to get this one and this one I want to mirror and flip the image if both is selected which means we can try this one more time now we get none then we have x y and both and this is working perfectly fine with that we can work on the next bit I'm going to put it right below let's work on the brightness as a matter of fact let's work on brightness and Vibe rinse because the work in basically the same way although for this one we're going to need another module of pillow which means all the way at the top I want to import image and hence the way this one is working is we first of all have to create what is called an enhancer for example if I want to create a brightness enhancer I have to get image enhance and then write this this one now wants to have the image by itself this is not going to do anything that is going to be visible however what we can do now is get our image and then use the brightness enhancer to enhance this one spelling this correctly would also help inside of this method we can now add the argument in my case I want self dot color vars the key is going to be brightness and don't forget get with that this should be working let's try I can click on the author this one is in colors and now brightness makes the image brighter or darker and I can make this really bright or completely black now that we have covered this part we can also create the Vibrance enhancer because it's going to work in the same way I want to have image enhance this one is called color once again it is going to need self.image with that I can get myself.image the Vibrance enhancer and then enhance for this one we need self dot color vars the key for this one is Vibrance and once again I want to get this value this covers another important part let's try it hello Vibrance and you can see this is working really well and I can also make this image black and white via this Vibrance method also I can combine the two I can make the image more vibrant also this is going to work with rotation and zoom and invert all of this is coming together quite nicely next up we can work on the colors this is going to include let me actually write it grayscale and invert of the colors this returns to Simply getting self.image the value here we're getting from image Ops the one we have already used a couple of times for example for the zoom the method we need for this one is gray scale as the one argument it wants the image although the issue for this one is that we are always applying the grayscale mode as a consequence we have to make sure to wrap this thing inside of an if statement so that we only apply it if a certain condition is true which in my case is if self dot color vars with the key gray scale this is a Boolean VAR which means if I get the value this is either going to be true or False only if it is true do I want to apply this effect don't forget the colon also now I can duplicate these two lines because invert is going to work in basically the same way I want to check the invert key and inside of image Ops I want to use invert with self.image this should be enough to activate the grayscale and the invert effect let's try this one open image the utter color now we have black and white and we have invert also this is still working with the other sliders so everything is going pretty well finally we have to apply the blur and the contrast those are special effects which means we are going to need another part of pillow all the way at the top I want to import image filter to apply this effect I want to get self.image and assign self dot image dot filter the argument here needs to be image filter and then dots the kind of effect that you want for example for the blur I want to have a gaussian blur there are different kinds of blur that you can apply gaussian blur is one of the really common ones this one is expecting a single argument which is going to be self.effectivars the key blur and from that I want to get the value it should be all we need let's try this one I want to get my otter inside of effects we have blur and this one is applying a tiny bit of a blur it might even be difficult to see to make this effect a bit stronger let's go to menu or this one I want to look at my effect frame right now blur is going from 0 to 3. let's go from 0 to 30. and let's see how much that changes back to my other effects blur now this is blurring significantly more this is covering the blur next up we can work on the contrast for that I duplicated this line because I only really have to make some minor changes instead of the gaussian blur I want to have what is called an unsharp mask this is going to apply a contrast for that the value is not going to be blur it is going to be contrast with this I can try the same thing again effects now I have a contrast and this is applying a lot of contrast nice there's only one more thing that we need and that is the effect of ours for that I'm going to use a match case statement I want to match self dot effect virus or this one the key is going to be effect this effect is going to work somewhat like the flip in the sense that we have different options we want to look at to get all of them you have to look at settings we have none emboss find edges contour and Edge enhance we have to account for the letter 4 cases none we can simply ignore this one isn't supposed to do anything which means inside of the match case statement I want to have one case for example for emboss this would be the second entry inside of effect options if that is the case I want to get self dot image and assign self dot image dot filter or this one we once again need the image filter dot all in uppercase letters m boss this one doesn't expect any arguments we simply have to apply it like that let's try it actually if I now click on open image again otter I can go to effects we have the drop down menu if I now click on emboss we are getting nothing and I think I know why I keep on making the same mistake in the match case statement for match I'm only getting the T kinta variable I am not getting the value inside of it now let's try it again open image otter effects now Amber should be working and there we go a strange effect but well it is what it is this is giving us the first case which means I can simply duplicate this three times because besides emboss I want to have find edges I have Contour and finally I have H and Hans these are the options I've specified in the settings although I did realize there should be a lowercase edges to apply these filters we have to update the image filter for example for find edges we want all uppercase letters again find underscore edges for Contour we want Contour finally for etch enhance we want to have h n and more let's try all of that open image otter effects emboss is working find edges is working on tour is working and etch enhance is also working although it might be a bit hard to see if I compare etch enhance to none you can definitely tell the difference with that we have applied all of the effects now there's one issue that I want to address and that is performance let me run the entire thing again and apply a couple of effects so far I only really ever applied one or two effects at a time however if I now apply rotation Zoom invert some brightness Vibrance and if I come to blurb you can see that everything is getting really really slow this is happening because we always apply all of these effects and Python and pillow simply aren't designed for that if we wanted to have something like Photoshop where these effects are instantaneous then we would have to add a whole lot more logic there's a ton of optimization that you could be doing with this but in my case I want to keep it simple I only want to apply for example rotation if the rotation value is different from the default value this one here figuring out how to do that is going to be your exercise I want you guys to only apply the effect if the value is different from the default most of you now and try to figure this one out the way you want to think about it is I only want to apply the rotation if self dot pause vars and rotate is different from this rotate default only if that is the case doesn't make any sense to apply the rotation which means only then do I want to apply this method and create a new image if the value for this one is simply zero then we don't have to apply the effect that is literally it although once again I did forget get I keep on doing that sorry about it but well all we have to do now is to apply this logic to all of the effects I only want to apply the zoom if the zoom is different from zero I only want to apply flip if self flip and get is different from I want to get the flip options with the value 0. only if that is the case then I want to do any of this next up for brightness and Vibrance I want to get the value of brightness for example and only apply all of this if the value is different from my settings the brightness default this bracket shouldn't be there next up I only want to apply the Vibrance if self colors vibrance.get is different from Vibrance default next up we have the grayscale and we have the invert although those are already perfectly fine because we are applying this effect only if this variable or this variable return true those we can just leave as they are although next up we have blur contrast and the effects those are particularly difficult to process so they definitely need an if statement I want to check if self dot effect virus dot get is different from the blur default also besides that I want to get the value for contrast this one if this effect is different from the contrast default only then do I want to apply the effect the match case statement we can leave as it is because if none of these cases are true then this isn't going to do anything with that we should have significantly better performance let me run the author I can now rotate it I can zoom it I can invert the thing then for the color I can apply some colors and this does feel much snappier probably very hard to see on video but definitely try yourself now that being said if I apply all of the effects then this is still going to get slower simply because we are doing a ton of different things anytime we are updating the image at this point we have a really processor intensive app so you have to be aware of that although for our purposes this is still fine which means I can minimize all of this and this covers a really important aspect of the app at this point we have all of the effects let me apply a couple there we go what I want to do now is to add a revert button that way I can revert all of this and start from scratch this revert button is going to work for every single panel which means in color I can change the color and then revert all of the colors once again since we have all of the data in place this should be fairly straightforward back in the code I want to have a look at the menu the menu itself is totally fine we don't have to add anything for this one however inside of the position frame the color frame and the effect frame I want to add another panel at the bottom this would be a revert button this one doesn't exist right now let's create it inside of the panels I want to create a new class that I call revert button this is just going to be a button so ctk and ctk button after that we are going to need a thunder image method this one is going to itself and apparent after that we're going to need one more argument basically how I want to approach this when I am inside of the menu for example in the position frame this revert button has to have access to all of these variables we need rotation zoom and invert on top of that we have to get the value for example rotation should be set back to zero the value we have specified inside of the settings also this needs to be flexible so we can use it for the position frame the color frame and the effect frame for example for the position frame we have three different values whereas for the color frame we have four the way I approach this in terms of the arguments first of all I am always going to add self in here for the parent after that I'm going to do roughly the same thing I have done for the switch panel which means we have a couple of two bolts that always have a variable and then some other information for this revert button I want to add a tuple with for example the position vars and rotate after I have that I want to set the value I want it to set once we're clicking on this button which is going to be rotate default also all of this is going to be over multiple lines because we have a couple of values in here besides the POS vars I also want to get the zoom which has a zoomed default finally I want to have the lip the default value for this one is going to be flip options with the value 0. these are the values I want to set also let me clean this up a tiny bit that looks a bit better I suppose if I organize it like this this is the most readable these things are a bit subjective but now I have to create some kind of logic to capture all of these arguments this is going to happen inside of panels This one is going to need an Asterix and then arcs you could name it whatever you want but arcs is what people usually call it once we have that first of all I have to create super thunder in it set the master to the parent also we're going to need some kind of text let's call it revert also we have to pack this revert button since all of these panels are simply using pack this one for example we can use pack for this one as well with the one difference that I want to set the side to bottom to give it a tiny bit of padding I want to have pad Y and set this to 10. this should actually already work let's try I can open main.pi again and now at the bottom we have revert it doesn't do anything right now but at the very least we have something what we now have to figure out is how to get the variables via this arcs and then update the value to demonstrate what we have inside of arcs let me just print it if I now run main.pi again open image otter here you can see we have a tick and tavar somewhere in our memory and then we have the value for example this first entry is the rotation variable and rotate default is to zero this is going to bring us to the exercise when clicking on the button get the variables and set the value to the default pause the video now and try to figure this one out first of all we have to make sure that we can run some kind of function when we are clicking on this button or when the user is clicking on the button for that I want to have command I will call the method I want to call revert to create this one I need to Define revert without any custom parameters next up we have to make sure that we have access to the arcs inside of the revert method which we don't have right now to account for that I want to create an attribute let's simply call it the arcs this is going to be arcs with that I can use them inside of a for loop I want for VAR and value in self dot arcs what this is going to give me let me print it I want to print the VAR and I want to get the value let's try it again open image otter by default we can't see anything but if I click on the button we are getting the variable and the value that is looking really good which means now back in the revert button I can simply use the VAR and then set the value we are targeting the VAR then we are using set and then we assign the value to the VAR that's literally it I can get rid of the exercise text back in main.pi run on of this again change a couple of values and now if I click on revert we are back to normal although there's one more change that we do have to make you might have seen it already these numbers here don't work out anymore let's have a look what's going wrong back in the panels the revert button is working just fine so I can minimize it but if I open the slider panel the issue for this one is that we are only updating the text the text to display what number we have when we are moving the slider from this command if we're updating the value in any other way this method is not going to be run as a consequence the number doesn't update to a code for that we have to make a couple of changes first of all I want to store the data VAR inside of an attribute which means self.datavar is going to be datavar once I have that I want to use tracing data VAR dot Trace I want to check when the value is changing then I want to call Self dot update text because of that we have to update this update text I don't want to have value anymore instead I want to have arcs because once again when we are calling a method using the trace method then Trace is going to automatically add a couple of arcs although we're not going to use them but you do have to add a parameter because of this logic we don't need this command anymore or this simple reason that the variable is still attached to the ctk slider which means when we are using the slider this data VAR is going to be updated although to be a bit more consistent here with the naming let me call it self.datavar which means what is going to happen when the user is using the slider the slider updates the variable because of this update this Trace method is going to be triggered which triggers this method which is then going to update the label on top of that what is much more important when I'm now clicking on revert button and we are updating the value inside of this for Loop this update text is also going to run it is going to run every time we are updating the variable although before we can run it I have to make one more change this bit here is not going to work anymore because we don't have value instead I want to get self.datavar dot get now all of this should be working let's try I want to open the image get the otter apply rotation all of that is still working just fine and now if I click on revert we are all back to 0 and 0. with that we have the proper Logic the last one we have to do is to use this revert button for the other frames as well for example the color frame needs a revert button let me copy in the values actually otherwise you have to watch me type for ages I want to have these for two bolts color bars and brightness with brightness default then we have grayscale invert Vibrance all with the default value finally for the effect frame I want to have the revert button again with self after that the two builds I want to pass in this one are these ones let me format them a tiny bit better there we go we have effect verse blur blur default effect was contrast contrast default and effect was effect effect options 0. this should be all we need now we can try the app open the auto once again rotation and zoom and invert should still work just fine this is looking good next up color I want to have black and white more brightness and more Vibrance now I can click on revert and well back to normal finally I want to apply some blur and some contrast and find edges now you can't see anything anymore so I want to revert all of this and we are back to the others perfect with that we have the app itself the last thing we have to figure out is how to export the image and then we have finished the entire thing we are nearly done with the app at this point let me apply some changes I want to have a rotation and brightness Vibrance doesn't really matter what it is what I now want to do is to work on the export or this one we have two panels I can type a name let's call it weird otters I can also select jpeg or PNG depending on what I select I am getting a preview of the file name importantly for this one the user can type is space in the input field but when we are outputting it we're getting an underscore this isn't actually necessary for Windows but I think it's a nice thing to add here other than that I can click on Explorer select a folder and then I get a preview of the folder this can also be changed for example if I didn't want a desktop or anything in here I could simply type whatever I want although this is not what I want I want to work on the desktop once we have all of that we can work on the export although for now let's simply work on the panels and let's see how far we get back in the code I want to work inside of the menu for this one we already have a position frame a color frame and an effect frame I want to add one more which is going to be the export frame this just as before is going to be a ctk frame as a matter of fact I can literally just copy most of the stuff from the effect frame because they're all quite similar with this we have an export frame we do have to make sure that we are attaching it to the menu though also we have to create it which means export frame self dot Tab and export although this one is not going to get a tkinter variable which means the effect vars we can simply remove at least for now with that we have to populate this export frame with a couple of panels this is going to happen inside of the panels I want to minimize everything in here first of all let me put it below this switch panel I want to create a class that I called file name panel this is going to be just another panel in here I'm going to need a thunder init method this one will need itself it will need a parent and then we need two more things I call them a name String and if file string the name String is going to account for the name the file string will be the file ending this could either be jpeg or PNG I will create those in just a second although first of all I want to run super Thunder init and set the parent to the parent now we have to figure out how to get the name String and the file string so far we created all of the variables in the app specifically inside of the init parameters all of these are important but for this particular case we don't need to go that far we can create these variables in the export frame for this one I want to have self.name string this one is going to be a ctk string VAR without a default value besides that I want to have a self.file string which is also going to be a ctk string VAR although this one is going to get default value of jpeg also I should add comments here to organize all of this a bit better let's call this section the data because next up I also want to create widgets the first widget we already have is the file name panel let me paste it in we need self we need self dot name String and self dot file string with that we have the T kind of variables for this one although those I want to turn into attributes which means self Dot file string is going to be the file string self dot name String is going to be the name String although name String should come first that just feels better you don't have to do it once we have the data I want to create the widgets we are going to need is ctk entry which is going to need self then we need a text variable which is going to be self dot name String after way of that I want to pack the entire thing I want to fill X I want to have pad X of 20 and Pad y of 5. and let's actually run the entire thing to see if all of this is working and now click on open image otter export and there we have one panel with an entry field we can also type in here although it doesn't do anything at this point next up I want to create two check boxes to draw all of this this is going to be the panel on the top right now we have an entry field the entry field we created here besides that I want to have a frame below which is going to contain two check boxes for that we have to create a frame we're just going to contain the two checkboxes I want to start by creating the frame which is going to be a ctk frame self is going to be the parent also I'm going to set the FG color to trends air rent next up I want to create a ctk and ctk check box the frame will be the parent the text for this one is going to be jpeg I guess I want to assign this to a variable let's call it the jpeg check next up I want to get my jpeg check and pack the entire thing site needs to be left because I want to create a second one and they're supposed to be next to each other I want to set fill to X finally expand should be true with that we have one check button I want to duplicate all of this because besides jpeg check I also want to add PNG check the text for this one is going to be PNG although other than that the pack method is going to work in exactly the same way finally I want to pack this Frame by setting expand to True fill to X and Pad X to 20. with that we should have the two switches let's try this one otter export and there we go right now we can activate both we are going to work on that in just a second before that I want to add one more thing let me reopen the drawing one thing I forgot all the way at the bottom of the widget is some kind of preview so when we are typing into the field and select one of the boxes the text field is going to give us a preview of what the final text is going to be like this text I want to store in an attribute let's call it output it is going to be a ctk label self will be the parent and text is going to be nothing this output text I want to pack right away without any arguments for the pack now with that I can run all of this and we're not going to see it but there's a tiny bit more space at the bottom of this panel which means at the very least we know that this output exists but well we're going to work with it also as always I want to add a few comments here to organize all of this better let's call this one the check boxes or file format finally I want to have the preview text what I now want to work on is to connect this name String to the output which basically means that in the name String we could have a value like I think I call it weird otter earlier this inside of the output should become weird water later on when we account for the logic for these switches here this is going to become dot PNG or JPEG but this I'm going to not work on for now to get that I want to get myself dot name string and use Trace once again I want to check if this value changes if that is the case I want to run self.update text which means once again I need a method called update text with self and the arcs in this method I want to check if self.namestring dot get actually exists if it doesn't there's no point doing any of this if that is the case I first of all want to get my text which is going to be self Dodge name String dot get although right now this might have some white space for example we could have weird water and I want to get rid of this bit here almost specifically I want to replace it with an underscore to get that I want to add one more method which is called replace this replays wants two arguments the first is the character we want to replace which in my case is an empty character the second argument is the character we want to replace the value with which in my case is an underscore once we have that I simply have to get my output the text we have created up here and then configure it and set the text to the text we just created with that I can run main.pi click on open image the utter export now I can type in here we are getting some text on top of that if I now type weird Auto we're getting an underscore between the two words that is a really good start we have covered the first bit next up we have to work on the check boxes right now we can check both of them which is not what I want to account for that let me actually put them right next to each other we have jpeg check the widget and then PNG check also a widget and below that we are packing them this way it's easier to compare the two this is important because both are going to get the same variable which is going to be self dot file string this right now would get us some weird results you make all of this work properly we are going to need an on value and an off value basically for the jpeg Widget the on value is going to be jpeg while the off value is going to be PNG whereas for the PNG check the on value is going to be PNG while the off value will be JPEG that way self.file string can either be jpeg or PNG and it will activate or deactivate one of these buttons although on top of that we are going to need one more thing and that is a command the command I want to create is going to be a click although this click is going to itself and a value the value we are going to get when we are calling the command because of that we will need a Lambda function I want to use Lambda self dot click because of that logic I can now pass in an argument for the jpeg widget button I want to have jpeg as the argument for the PNG widget I want to have PNG and this is a really long line I hope you could follow along but now we are going to call the method click either with jpeg or with PNG all I need for this one is self dot then the file string and set this to the value we have specified the value we are getting from click it could either be jpeg or PNG after way of that I want to call self.update text again without any arguments that way we are going to update all of this although before that let's actually try all of this open image otter export and now JPEG and PNG will only ever active if the other is inactive the reason why that is working is because they have these on and off values which means when we are setting file string to jpeg then jpeg is activated for this one and off for the other switch and then the other way around for PNG finally the last thing that we have to work on is update text should also give us the file ending we already have the text I want to add a tiny bit at the end I want to get self dot file string dot get and that is literally it although I forgot one thing there needs to be a DOT between the two which means I simply want to add a string dot between the two with that we should be good to go if I now run main.pi one more time otter export by default nothing is going to be visible however once I type some text we get JPEG and we get PNG also if I add a space multiple times this is working just fine cool with that we have the first panel this was the more complicated one I can minimize it now next up we are going to need a class file path panel once again this is going to be a panel we are going to need it under init method with self we need a parent and then we need a path string this path string I want to create inside of the export frame once we have that inside of the file path panel I want to open a file dialog and then select a folder all of this is going to be your exercise what I want you guys to do is this bit here number one I want you guys to create a path string variable in the export frame and pass it to this widget we already have the parameter so this you should be using next up add a button and an entry field to this widget finally when you click on the button you should get a file dialog that will return the path as a string I have already done this earlier so check this bit out finally the entry field should display the return path I suppose I should show you the final thing is going to look like this pause the video now and try to figure this one out let's work on it together first of all number one we have to create a path string variable this happens inside of menu I want self.path string this is going to be ctk stringvar without any default value once we have that I want to create a file path panel this needs self for the parent and then self.path string with that we can work inside of the class the entire first bit is covered although I should also add this super thunder in it method with the parent as the parent so that we have some functionality besides that I also want to turn the path string into an attribute meaning path string is going to be the path string next up and let me reorganize all of this a tiny bit I want to add a button and an entry field which means I want to have a ctk button with self as the parent the text I called open explorer that is all we need for now and I want to pack this thing with a pad y of 5. besides that I want to have a ctk entry widget with self this I want to pack right away as well I want to set expand to True fill to both finally pad X should be 5 and pet y should also be 5. this covers the second bit what I did forget was the colon after the download method and I think at this point it's a good idea to check if all of this is even working since we can see some widgets there is at the very least something inside of export we now have open Explorer and an entry field although neither is doing anything right now for that we have to work on the third part all of this is going to happen inside of a method I want to open file dialog this one itself and no other argument what this one is going to do is going to be quite similar compared to the image import for this one we're getting a file dialog and ask open file although for this one we have to import from decanter file dialog this I want to copy and paste at the top below my custom tkinder import now we can use it I want to get my file dialog dot ask this one is called directory and at this point I realized I didn't teach you this bit you only knew about where is it ask open file the difference between these two is that ask open file is asking for a specific file whereas us directory is only looking for a folder sorry about that I should have mentioned it but other than that this one is working in the same way this open file dialog I want to call whenever we are pressing the button which means the button is going to get a command self dot open file dialog let's try that one I can click on open image otter export and open Explorer and there we go we are opening a file dialog what is really important about this one is that now we are clicking on select folder we are not selecting a specific image anymore you can tell because in the desktop we cannot see the images we created earlier there's no Auto or weird Auto in here because right now we are only looking at folders not files which is perfect for my purposes the last thing I have to do is to capture the string or the path that is being returned by this ask directory all I have to do for that is self.path string dot set and then whatever we get returned from us directory to connect this to the entry widget I want to set a text variable and this should be self dot path string this is going to cover the third bit of the exercise let's try out of that I want to open the image Auto export open Explorer I want to select my desktop and there we go I have the path to my desktop on top of that I can type a name in here weird otter with the file ending and with that I have a file name and a path so for the next video we can export this image I'll see you there Friday this is going to be the last video for this project let me apply a couple of changes I want to have rotation Zoom invert and let's add a bit of Vibrance and blur now I have a changed image this I want to export for that we already have the name panel or the name I want to go with last otter I want to export a JPEG file then I want to open the Explorer save all of this on the desktop and what I want to do for this video is implement the save button which means if I click on Save we have the file exported which means if I open the folder for the desktop now we have the last order this is then finishing up the project I guess you could Implement some kind of message that the image was saved but you can work on this yourself it's not that important for this project back in the code I want to work inside of my app class because this one contains the image itself to export it I want to create another method I call this one export image this one is going to need three arguments besides self obviously we need a name we need a file and we need a path all three of those we are getting from the menu because in the export frame we have a name String a file string and a path string those we want to use to export the image the way I want to use them is I want to create an export string this is just going to be an F string where I am connecting the path then a slash then I am adding the file name after that I have a DOT and then we have the file ending I suppose the best way to demonstrate what this one is doing is to actually call Export image this we can do by going into import image the method because this one creates the menu all the way at the bottom this is going to get another argument which will be self dot export image with that inside of the menu we can add another parameter which is going to be export image this export image I want to pass right through to the export frame I just have to copy it in now we are good to go for the menu with that in the export frame we can have the export image as another parameter although the issue right now is that we don't have a button that can execute this method this I want to create inside of panels let's do it below the revert button let me add a tiny bit of white space I want to create a class that I'm calling save button this is going to be a ctk button meaning ctk and button we are as always starting with a Dunder init method itself and we need a parent after that we also want to capture the export image method finally to make the export image work we have to get the three string vars name String file string and path string which means for the parameters I want to have a name String a file string and a path string once we have that I can get this super thunder in it method pass in the master which is going to be the parent next up we have to specify some kind of text I simply called this one save for the last thing we are going to need a command I call this one self dot safe this method we can create right away Define save with self and nothing else this method is supposed to execute export image although for that it needs to have access to it via the attributes to achieve that I want to create an export image attribute which is going to get the export image method that allows me to self.export image and call this thing although now we are going to need three arguments inside of main.pi we can see the actual method we need the parameter for a name for a file and for the path I approach this by creating three more attribute self.name string is going to be name String and self dot file string is going to be the file string finally self.path string is going to be the path string that's why I have access to everything I need all I have to do now is get self.name string also do not forget the get then we need self.file string dot get and for last one self.path string dot get this is going to give us the button with that back inside of many.pi we can at the bottom of the widgets create the save button this one itself for the parent then we are going to need the export image which we have it is the export image we're getting this from the parameters after that we need self. name String then self dot file string and self dot path string although while I am looking at it there's one important thing missing we're not placing this button this we can change quite easily all we need is self dot pack decide importantly here needs to be bottom besides that I want to have pad y being 10. but with that we have the panels and inside of export frame we also have the save button if I run main.pi I can open an image click on the author then inside of export I can type some text choose whatever file ending I want open the Explorer get the file and now on the bottom we have a save button if I click on it nothing is happening and I can also tell you why it is because I am not printing the export string let's start off this again by actually printing the export string so we can see something sorry about that export some gibberish open Explorer select folder now save and there we go the path you can see printed right now is a combination of the path the name and the file path is the first bit all of this bit here next up we have the slash this we are adding or this one then we have the name this one's quite straightforward finally we are adding a DOT and the file itself the dot is this one the file is this one this is all we are going to need to export the image the last command that we are going to need for this one is going to be self dot image dot save this one simply wants to have an export string the one we just created since we also have the file ending it is either going to export a PNG or JPEG file depending on what the user specified and well this is all we need if I run this app again click on the author I can make a few more changes let's say for this one I want to have some really vibrant authors that are inverted I want to export let's call them the Disco otters on the desktop also this should be a PNG file if I now click on Save nothing happened at least on the surface however if I open the desktop we have some discorders also this is a PNG file and it looks like we applied all of the effects which means this is working just fine I guess you can work a bit more on all of the logic here to maybe clear the fields but I think for all practical purposes we have finished this app
