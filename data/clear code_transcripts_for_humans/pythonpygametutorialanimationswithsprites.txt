With timestamps:

00:00 - in this tutorial we are going to make
00:01 - basic sprite frame animation and PI game
00:04 - and to illustrate the principle we're
00:06 - going to take this little frog and
00:07 - animate it which should be a quite
00:09 - straightforward thing to do and to do
00:11 - all of this we are going to use sprites
00:13 - and PI game which I just did it tutorial
00:15 - about in the last video so check this
00:17 - one out if you are completely new to PI
00:19 - game and how I'm going to start with is
00:22 - this that as usual we start with
00:24 - importing PI game and sis then we have a
00:27 - general setup with initiating PI game
00:29 - creating the clock or rolling the frames
00:31 - per second with the clock then we have
00:33 - our main display surface which are still
00:35 - called screen then we have our game loop
00:39 - down here and redraw all the stuff the
00:42 - one slightly more advanced thing is that
00:44 - we already have a class called player
00:46 - that for now just draws surface it fills
00:49 - the surface then it gets the rectangle
00:51 - and it positions the rectangle on the
00:53 - screen and then light it down here we
00:56 - are adding this sprite to a sprite group
01:00 - and then we draw this one in the main
01:01 - game loop so what we're getting for this
01:04 - one is a plain rectangle it doesn't
01:06 - really do anything and I just put it
01:09 - here to save some typing if you want
01:11 - more details about this check out the
01:12 - last tutorial so the animation is going
01:14 - to happen in this class and before we
01:16 - program this let's talk about how
01:18 - animations work because that's quite
01:20 - important an animation by itself is
01:22 - actually really simple all you need are
01:25 - different images of the different stages
01:26 - of the animation so in our case for
01:29 - example
01:30 - all we have are 10 pictures of the
01:31 - different frames of the frog animation
01:33 - and if you play these fast after each
01:36 - other our eye perceives this as a moving
01:38 - motion which is basically what any kind
01:40 - of two-dimensional animation is it just
01:42 - draw lots of frames after each other and
01:44 - you play them fast enough so our eye
01:46 - interprets this as a movement basically
01:49 - any movie before 3d was made in that way
01:51 - although 3d movies do work in different
01:54 - ways but that's a topic for a completely
01:56 - different thing but that already
01:57 - illustrates what we need for our sprite
01:59 - to animate it essentially all we need is
02:01 - that we need to import lots of different
02:03 - images into our class and then cycle
02:05 - through them at a certain pace and it is
02:08 - important to control how fast the
02:10 - animation is going to run
02:11 - we are going to see that in just a
02:13 - second and we are going to talk about
02:14 - how to control the speed of the
02:16 - animation it honestly isn't all that
02:18 - hard first step is to get all the
02:21 - animations into our class what I'd say
02:24 - the first step is to get rid of the
02:26 - existing stuff we have because we don't
02:28 - need it yeah we just don't really need
02:31 - it and I'm going to start with creating
02:35 - self-taught sprites which is just going
02:38 - to be an empty list and into this list
02:42 - are gonna load 10 images and I already
02:45 - copied all of these is going to look
02:47 - like this so you don't have to watch me
02:49 - type all of this by hand all we do is we
02:52 - take this group and we're gonna pen one
02:55 - thing and that's gonna be the image we
02:57 - are loading in and I'm gonna have
02:58 - pictures 1 to 10 and all of these images
03:01 - are in the same folder as the script
03:03 - otherwise you would have to add some
03:05 - stuff in the beginning to get the proper
03:07 - path towards your picture and now we
03:10 - have 10 images in our sprite class now
03:13 - we need to figure out a way how to
03:15 - select a certain one at different steps
03:17 - of the animation and the first step
03:19 - towards that is what I'm going to call
03:22 - current sprite and by default this is 0
03:27 - and you're gonna see in a second why
03:29 - this one becomes important right now
03:30 - actually so when I select the actual
03:33 - image for this sprite I want to take it
03:37 - self-taught sprite good sprites with
03:41 - this entire group and I want to select
03:43 - one of these which is gonna be the index
03:45 - and that's going to be this sprite so
03:48 - later on we're gonna increase this
03:50 - number incrementally and then just cycle
03:51 - through these one by one so I just want
03:55 - to select self dot current sprite so
03:59 - right now we're just selecting the first
04:01 - sprite so by default this is going to be
04:04 - our first standard image and now we're
04:07 - for image now we just need to rectangle
04:09 - around it but self-direct equals self
04:12 - dot image dot cat right this works
04:16 - just as before and now we need to
04:18 - position this rectangle with self dot
04:21 - rect thought and I place the top left
04:24 - but places however you
04:25 - and it's gonna be position X and
04:30 - position Y so now when we initiate this
04:34 - kind of class we get a picture and let's
04:38 - actually try this it should be working
04:40 - already except I made a typo now it
04:45 - should be working
04:46 - exactly now we can see a picture of a
04:49 - frog and it's moved too far to the right
04:54 - so let me move it I think it will just
04:58 - change to 10 and 10 it should look
05:01 - better yeah exactly
05:03 - this looks better so we can see it's 10
05:05 - pixels from the left at least roughly
05:07 - but it is quite a bit further from the
05:09 - top the reason for that is it has a lot
05:12 - of empty space above the Frog it was
05:14 - like that in the original piece of art
05:15 - and I didn't really change it but it
05:17 - doesn't matter too much okay
05:19 - now with a frog let's start at animation
05:22 - and to animate it we need the update
05:25 - function so dev update and self as usual
05:31 - and to get to started all we need a self
05:34 - dot current sprite and this needs to be
05:40 - plus equals one so on every frame we
05:43 - just increase this number by one and
05:45 - then select whichever sprite we are
05:47 - using so we start with this one then we
05:49 - come to this one this one this one and
05:51 - so on
05:51 - so now we have an updated current sprite
05:54 - but we also need to make sure it self
05:56 - dot image gets updated as well so self
05:59 - dot image equals self dot sprites but
06:05 - self dot current image the reason for
06:10 - that is that when we initiate this class
06:11 - it uses number zero for the current
06:14 - sprite but when we update current sprite
06:16 - it already picked one so we need to pick
06:18 - the image again this would get us a
06:20 - start but we run into an error message
06:22 - really fast but at some point we reach a
06:25 - number that's higher than this one and
06:27 - Python doesn't find the item that list
06:29 - anymore so what we need is that if self
06:33 - dot or and sprite is greater or equal
06:37 - than the
06:38 - of self-taught sprites then we wanna
06:44 - self dot currents fried currents pride
06:50 - back to zero and if we're running this
06:53 - thing down this should be working
06:56 - except it's not that's one thing I
06:58 - forgot we are not calling this update
07:01 - method which we have to do down here
07:04 - with moving sprites dot update and again
07:13 - this update I have explained in the
07:14 - previous tutorial and quite a bit more
07:16 - detail but basically what happens here
07:18 - is that when you call update on this
07:20 - group it is going to call the update
07:22 - method on each sprite in that group and
07:25 - if you run this now now it should be
07:28 - working except you can already see why
07:30 - this isn't working
07:30 - it is way too fast and also plays
07:33 - automatically it doesn't play on button
07:35 - press so let's work on these two things
07:39 - the first one is going to be just
07:42 - pressing a button and having it start
07:44 - there
07:44 - and to get that one done I first create
07:49 - some kind of input for the button so if
07:53 - event dot I equals Pi game dot d down
08:02 - what we want to do now is take our layer
08:08 - and I think I just call it animate we
08:13 - want to run a function that animates all
08:15 - for once so let's add this to this class
08:20 - now and so I create a animate and just
08:26 - itself and there are different ways to
08:29 - organize this the way I went with is
08:31 - that this entire thing only runs when we
08:38 - have if self dot is animating
08:46 - equals to true and this true is going to
08:50 - be said in deep animate method so self
08:53 - thought is animating equals true and by
08:59 - default is animating is false and I
09:01 - going to create this one up here
09:03 - it's animating because false and let me
09:09 - invent all of this and yeah looks good
09:13 - so basically what happens here is that
09:16 - by default self the animating is false
09:18 - so when pipe wants to update all of this
09:21 - it looks like this is false by default
09:24 - so all of this is not being run when we
09:27 - start the code it just picks the first
09:29 - sprite and then displays it as an image
09:30 - fair enough only when we press the
09:33 - animate function and is animating a set
09:36 - to true so on that frame it is going to
09:38 - start running this animation and we can
09:41 - actually try this now and we get an
09:43 - error event I PI game and that's an easy
09:49 - fix
09:50 - if I run the game now if I press any
09:53 - button now it runs perpetually and
09:55 - there's no way for me to stop it but I
09:57 - only want to play the animation once
09:59 - when I press the button so let's
10:01 - implement this now and the easiest way
10:05 - to implement this is in this if
10:07 - statement because this one already tells
10:09 - us if the animation has finished running
10:11 - because we know if the current sprite is
10:13 - greater than whatever index this one
10:16 - here is at then the animation has
10:18 - finished
10:18 - so once self current spray is greater
10:21 - than the length all we need is to self
10:24 - dot is animating equals defaults so what
10:31 - basically happens now is that self the
10:33 - currents pride if this has gone through
10:35 - all of these then we sets after
10:37 - animating back to false so this one
10:40 - stops running and we go back to the
10:42 - first pride so let's try it now
10:45 - and yeah reverse button only runs once
10:50 - so this one's working and that brings us
10:54 - to the final part that we need to slow
10:56 - down the animation so it actually looks
10:57 - halfway decent and there are lots of
11:00 - different ways to get this one done and
11:02 - you could do something quite fans are
11:05 - using Piegan the time that get takes and
11:07 - make specific timers but I felt this is
11:10 - way too complicated and overthinking the
11:12 - problem quite a bit what we can do
11:15 - instead is something much simpler that
11:17 - gets you basically the same result and
11:19 - basically what I'm going to do is use
11:21 - the IMP method to round numbers down
11:24 - basically think of it like this we want
11:27 - pygame to paint the first picture not
11:29 - just on one frame but on let's say three
11:31 - to four frames and then the second one
11:33 - also on three to four frames and the
11:36 - problem we have right now is that pygame
11:38 - increase current spread by one but how
11:41 - we're going to change this is that
11:43 - instead of adding one we're only going
11:46 - to add something like 0.2 or 0.25 or 0.5
11:50 - so current sprite isn't going to
11:52 - increase as fast anymore and then we use
11:54 - this current sprite to pick from the
11:56 - sprites we use the in function return'
11:59 - this number in to an end which basically
12:01 - means that python is going to round it
12:02 - down to the next number so if we
12:06 - incremented current sprite by 0.2 we
12:09 - would end with 1 1.2 1.4 1.6 1.8 and
12:13 - then 2 but if we want the Internet
12:16 - anything from 1 to 1.8 it's going to
12:18 - become 1 and anything from 2 is going to
12:21 - become 2 and then from 2 we can do the
12:24 - same process again and this way we
12:27 - basically keep on playing the same frame
12:28 - numerous times so let's implement this
12:31 - and I think is gonna make much more
12:33 - sense so for current sprite instead of
12:36 - incrementing this by 1 I want to
12:38 - increment this by 0.2 which for now
12:42 - isn't going to work because - cannot
12:45 - pick the 0.2 index of self-taught
12:48 - sprites so we need to change this one to
12:51 - end
12:52 - [Music]
12:54 - of the current sprite so if this one now
12:58 - is 0.2 so zero plus zero point two is
13:01 - going to be zero point two if the in
13:03 - method gets his hand on it it's going to
13:05 - turn to zero point two into zero and you
13:09 - can get the index zero of this number
13:11 - but when this one runs again and we get
13:13 - to zero point four and this one is still
13:15 - going to turn into zero and it's only
13:18 - going to turn into one after five frames
13:20 - and that's basically it
13:23 - if I run the game now now we have a much
13:27 - slower animation and that's all you
13:29 - really need to do and now if you change
13:32 - this number you can get the animation
13:33 - speed that you want and you can even
13:36 - make this even more adaptable let's just
13:39 - call it speed and then we're going to
13:42 - call it speed here and then down here
13:46 - update speed and I'm gonna put zero
13:48 - point let's say the five gonna be a bit
13:53 - faster now we have a bit fast animation
13:56 - and it looks so much better but if you
14:00 - wanted a fast animation you could put
14:02 - this down to 0.5 or if you're gonna go
14:04 - crazy you could put something like 2 and
14:06 - that's gonna look weird we can barely
14:09 - see it or incredibly slowly but a thing
14:14 - 0.25 seemed like a good middle ground
14:17 - yeah that seems nice I hope this was
14:20 - useful and I'll see you around

Cleaned transcript:

in this tutorial we are going to make basic sprite frame animation and PI game and to illustrate the principle we're going to take this little frog and animate it which should be a quite straightforward thing to do and to do all of this we are going to use sprites and PI game which I just did it tutorial about in the last video so check this one out if you are completely new to PI game and how I'm going to start with is this that as usual we start with importing PI game and sis then we have a general setup with initiating PI game creating the clock or rolling the frames per second with the clock then we have our main display surface which are still called screen then we have our game loop down here and redraw all the stuff the one slightly more advanced thing is that we already have a class called player that for now just draws surface it fills the surface then it gets the rectangle and it positions the rectangle on the screen and then light it down here we are adding this sprite to a sprite group and then we draw this one in the main game loop so what we're getting for this one is a plain rectangle it doesn't really do anything and I just put it here to save some typing if you want more details about this check out the last tutorial so the animation is going to happen in this class and before we program this let's talk about how animations work because that's quite important an animation by itself is actually really simple all you need are different images of the different stages of the animation so in our case for example all we have are 10 pictures of the different frames of the frog animation and if you play these fast after each other our eye perceives this as a moving motion which is basically what any kind of twodimensional animation is it just draw lots of frames after each other and you play them fast enough so our eye interprets this as a movement basically any movie before 3d was made in that way although 3d movies do work in different ways but that's a topic for a completely different thing but that already illustrates what we need for our sprite to animate it essentially all we need is that we need to import lots of different images into our class and then cycle through them at a certain pace and it is important to control how fast the animation is going to run we are going to see that in just a second and we are going to talk about how to control the speed of the animation it honestly isn't all that hard first step is to get all the animations into our class what I'd say the first step is to get rid of the existing stuff we have because we don't need it yeah we just don't really need it and I'm going to start with creating selftaught sprites which is just going to be an empty list and into this list are gonna load 10 images and I already copied all of these is going to look like this so you don't have to watch me type all of this by hand all we do is we take this group and we're gonna pen one thing and that's gonna be the image we are loading in and I'm gonna have pictures 1 to 10 and all of these images are in the same folder as the script otherwise you would have to add some stuff in the beginning to get the proper path towards your picture and now we have 10 images in our sprite class now we need to figure out a way how to select a certain one at different steps of the animation and the first step towards that is what I'm going to call current sprite and by default this is 0 and you're gonna see in a second why this one becomes important right now actually so when I select the actual image for this sprite I want to take it selftaught sprite good sprites with this entire group and I want to select one of these which is gonna be the index and that's going to be this sprite so later on we're gonna increase this number incrementally and then just cycle through these one by one so I just want to select self dot current sprite so right now we're just selecting the first sprite so by default this is going to be our first standard image and now we're for image now we just need to rectangle around it but selfdirect equals self dot image dot cat right this works just as before and now we need to position this rectangle with self dot rect thought and I place the top left but places however you and it's gonna be position X and position Y so now when we initiate this kind of class we get a picture and let's actually try this it should be working already except I made a typo now it should be working exactly now we can see a picture of a frog and it's moved too far to the right so let me move it I think it will just change to 10 and 10 it should look better yeah exactly this looks better so we can see it's 10 pixels from the left at least roughly but it is quite a bit further from the top the reason for that is it has a lot of empty space above the Frog it was like that in the original piece of art and I didn't really change it but it doesn't matter too much okay now with a frog let's start at animation and to animate it we need the update function so dev update and self as usual and to get to started all we need a self dot current sprite and this needs to be plus equals one so on every frame we just increase this number by one and then select whichever sprite we are using so we start with this one then we come to this one this one this one and so on so now we have an updated current sprite but we also need to make sure it self dot image gets updated as well so self dot image equals self dot sprites but self dot current image the reason for that is that when we initiate this class it uses number zero for the current sprite but when we update current sprite it already picked one so we need to pick the image again this would get us a start but we run into an error message really fast but at some point we reach a number that's higher than this one and Python doesn't find the item that list anymore so what we need is that if self dot or and sprite is greater or equal than the of selftaught sprites then we wanna self dot currents fried currents pride back to zero and if we're running this thing down this should be working except it's not that's one thing I forgot we are not calling this update method which we have to do down here with moving sprites dot update and again this update I have explained in the previous tutorial and quite a bit more detail but basically what happens here is that when you call update on this group it is going to call the update method on each sprite in that group and if you run this now now it should be working except you can already see why this isn't working it is way too fast and also plays automatically it doesn't play on button press so let's work on these two things the first one is going to be just pressing a button and having it start there and to get that one done I first create some kind of input for the button so if event dot I equals Pi game dot d down what we want to do now is take our layer and I think I just call it animate we want to run a function that animates all for once so let's add this to this class now and so I create a animate and just itself and there are different ways to organize this the way I went with is that this entire thing only runs when we have if self dot is animating equals to true and this true is going to be said in deep animate method so self thought is animating equals true and by default is animating is false and I going to create this one up here it's animating because false and let me invent all of this and yeah looks good so basically what happens here is that by default self the animating is false so when pipe wants to update all of this it looks like this is false by default so all of this is not being run when we start the code it just picks the first sprite and then displays it as an image fair enough only when we press the animate function and is animating a set to true so on that frame it is going to start running this animation and we can actually try this now and we get an error event I PI game and that's an easy fix if I run the game now if I press any button now it runs perpetually and there's no way for me to stop it but I only want to play the animation once when I press the button so let's implement this now and the easiest way to implement this is in this if statement because this one already tells us if the animation has finished running because we know if the current sprite is greater than whatever index this one here is at then the animation has finished so once self current spray is greater than the length all we need is to self dot is animating equals defaults so what basically happens now is that self the currents pride if this has gone through all of these then we sets after animating back to false so this one stops running and we go back to the first pride so let's try it now and yeah reverse button only runs once so this one's working and that brings us to the final part that we need to slow down the animation so it actually looks halfway decent and there are lots of different ways to get this one done and you could do something quite fans are using Piegan the time that get takes and make specific timers but I felt this is way too complicated and overthinking the problem quite a bit what we can do instead is something much simpler that gets you basically the same result and basically what I'm going to do is use the IMP method to round numbers down basically think of it like this we want pygame to paint the first picture not just on one frame but on let's say three to four frames and then the second one also on three to four frames and the problem we have right now is that pygame increase current spread by one but how we're going to change this is that instead of adding one we're only going to add something like 0.2 or 0.25 or 0.5 so current sprite isn't going to increase as fast anymore and then we use this current sprite to pick from the sprites we use the in function return' this number in to an end which basically means that python is going to round it down to the next number so if we incremented current sprite by 0.2 we would end with 1 1.2 1.4 1.6 1.8 and then 2 but if we want the Internet anything from 1 to 1.8 it's going to become 1 and anything from 2 is going to become 2 and then from 2 we can do the same process again and this way we basically keep on playing the same frame numerous times so let's implement this and I think is gonna make much more sense so for current sprite instead of incrementing this by 1 I want to increment this by 0.2 which for now isn't going to work because cannot pick the 0.2 index of selftaught sprites so we need to change this one to end of the current sprite so if this one now is 0.2 so zero plus zero point two is going to be zero point two if the in method gets his hand on it it's going to turn to zero point two into zero and you can get the index zero of this number but when this one runs again and we get to zero point four and this one is still going to turn into zero and it's only going to turn into one after five frames and that's basically it if I run the game now now we have a much slower animation and that's all you really need to do and now if you change this number you can get the animation speed that you want and you can even make this even more adaptable let's just call it speed and then we're going to call it speed here and then down here update speed and I'm gonna put zero point let's say the five gonna be a bit faster now we have a bit fast animation and it looks so much better but if you wanted a fast animation you could put this down to 0.5 or if you're gonna go crazy you could put something like 2 and that's gonna look weird we can barely see it or incredibly slowly but a thing 0.25 seemed like a good middle ground yeah that seems nice I hope this was useful and I'll see you around
