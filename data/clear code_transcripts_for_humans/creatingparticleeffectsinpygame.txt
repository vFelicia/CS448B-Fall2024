With timestamps:

00:00 - hi there for this tutorial we are going
00:01 - to be creating particle effects
00:03 - and before we get into specific code
00:05 - let's first talk about the logic behind
00:07 - these particle effects
00:08 - because it's actually quite simple what
00:11 - we are effectively going to do is to
00:12 - create a class that has one list
00:14 - and this list is storing all the
00:16 - individual particles and then this class
00:18 - has three different methods
00:20 - one method is to create particles that
00:22 - are going to end up in the list
00:23 - and all of these particles also have
00:25 - specific attributes this could be the
00:27 - direction this could be the size this
00:28 - could be a lifetime this could also be
00:30 - their color
00:31 - lots of different things that we could
00:32 - do in there the second method is there
00:34 - to destroy the particles once they reach
00:36 - a certain criteria
00:37 - like them becoming too small or moving
00:39 - outside of the screen
00:40 - and lastly we have an emit method and
00:42 - this one puts the first two methods
00:44 - together
00:44 - in the sense that it cycles through the
00:46 - list and moves all the particles and
00:47 - adds the visual effects to them
00:50 - and that's really all that's needed for
00:52 - the different kind of particle effects
00:54 - so let's jump right into the code
00:57 - so here we are in a really basic setup
01:00 - for pygame
01:01 - and if you don't understand what this
01:02 - means check out this video
01:04 - and i explain all of this but to get
01:07 - started
01:08 - i'm going to create a new class for our
01:10 - first particle project
01:12 - and for this one i'm going to click
01:14 - class
01:15 - and i call this one particle
01:18 - prince pill
01:22 - it doesn't need to inherit anything so
01:24 - we can just go to define and
01:26 - init and when we initiate this class all
01:30 - we need
01:30 - is self.particles and this for now is
01:34 - just going to be an empty list
01:36 - but basically what we are going to do
01:37 - later on is add particles to this list
01:40 - and then move them
01:41 - and draw around them and with that
01:44 - covered
01:44 - we are going to need three more methods
01:46 - and let me just write them out
01:48 - the first one is an emit method
01:52 - let me just right pass him for now it
01:55 - moves and draws the particles
02:00 - then we have another method that is
02:02 - called add
02:04 - particles and
02:07 - this one is well it has particles
02:12 - and then we need one more and that is
02:14 - delete
02:16 - particles
02:19 - and what this one is doing is it deletes
02:22 - particles after a certain time
02:24 - and this one is really important
02:31 - for the simple reason that if we didn't
02:32 - delete our particles after a certain
02:34 - amount of time we would end up with a
02:36 - crazy amount of elements on our screen
02:38 - and our game would be slowing down
02:40 - so this method is quite important
02:43 - but effectively what we are going to do
02:47 - is we always start with this add
02:48 - particles method
02:50 - and this one adds a particle to our
02:53 - self.particles list
02:54 - and then emit goes through all of the
02:57 - particles inside of this list and moves
02:59 - them around a tiny bit and then draws
03:00 - them
03:01 - and while emitting we also check for
03:04 - certain particles if they get too small
03:06 - and then we delete them if they are too
03:08 - small and that way we ensure that we
03:10 - will never have too many particles on
03:11 - the screen at one time
03:13 - so we have to start with our add
03:15 - particles method
03:17 - and i do want to call this method all
03:19 - the time very very often so every couple
03:21 - of milliseconds
03:23 - and to do that i am going to create a
03:25 - custom event
03:26 - so i call this one particle event
03:31 - and this one is pie game dot user
03:35 - event plus one
03:38 - so we are effectively creating a user
03:40 - event that we can use now event loop
03:42 - and trigger this every few milliseconds
03:45 - so for that
03:46 - i set a timer with pygame.time.set
03:50 - timer then i need our particle event
03:55 - and then the amount of time in
03:56 - milliseconds i want to pass between each
03:58 - call of the event
04:00 - in my case i went with 40 but you could
04:03 - make this longer or shorter depending on
04:04 - what you need
04:05 - i'll show you once we have our first
04:07 - particle setup ready alright
04:09 - now in the event loop i want to check if
04:12 - event dot type is
04:16 - equal to particle event
04:19 - and if that is the case i want to
04:21 - trigger
04:22 - this add particles so to make that work
04:25 - i first have to create an object from
04:27 - the class so let's call this
04:30 - particle one is equal to
04:33 - particle principle
04:37 - and then inside of this event particle
04:41 - one
04:43 - dot add particles
04:46 - there we go so what this basically
04:50 - achieves is that
04:52 - these lines call an event every 40
04:54 - milliseconds and then when this event is
04:57 - being called
04:57 - we are calling this method so we are
05:00 - adding a particles
05:01 - so now we have to actually write some
05:03 - code to add particles to it
05:05 - and really all we have to do is that we
05:08 - are creating a point with an x in the y
05:10 - position a direction
05:11 - and a certain radius and then later on
05:14 - in the emit method
05:16 - we are just drawing all of these points
05:18 - and put a circle around them
05:20 - so well really simple actually but okay
05:23 - let's get to it i want to start with
05:26 - creating
05:27 - a x position
05:31 - and for now i just put this in the
05:32 - middle of the screen so i put this
05:34 - at 250 and do the same thing for y
05:38 - position
05:39 - and it's also going to be 250. so any
05:42 - particle we are going to create is going
05:44 - to start
05:44 - right in the middle of the screen then i
05:47 - want to create a radius
05:50 - and they are all going to be 10 at least
05:52 - for now
05:54 - and then i want to create a direction so
05:57 - i create
05:57 - direction and for now the direction is
06:00 - just going to be
06:01 - -1 so this would mean all the particles
06:03 - we are creating are just going upwards
06:06 - and that is effectively it what we need
06:08 - for our
06:09 - basic particle now all i want to do
06:12 - is to create a particle
06:15 - circle and this one is just
06:19 - well it's a list that has another list
06:22 - with position
06:25 - x and position y
06:28 - then we have the radius and then we have
06:31 - the direction
06:32 - so really all we're doing in here is
06:35 - adding all of these different variables
06:36 - into one list to make it easier to work
06:39 - with
06:40 - but we're not creating anything
06:41 - particularly new and once we have all of
06:43 - that
06:45 - i get self.particles
06:48 - and append our particle
06:52 - circle and that's all we needed for the
06:55 - add particles part
06:57 - so now we can actually look at emitting
06:59 - them
07:00 - so the first thing i want to check is if
07:02 - there's anything
07:04 - inside of the self.particles so we have
07:06 - something to animate
07:07 - and for that i can just go with
07:09 - self.particles
07:11 - and any list that has more than one
07:13 - entry is going to evaluate to true so
07:16 - self.particles once we have any particle
07:18 - in here
07:18 - is going to get to true and if not we're
07:21 - not doing anything
07:22 - and then i want to cycle through all of
07:24 - the particles
07:25 - so for particle in self.partic
07:30 - kills so effectively if there's any
07:32 - particle
07:33 - inside of softer particles we want to
07:35 - work with all of them
07:37 - and there are three things i want to do
07:39 - with the particles
07:40 - number one is i want to move the
07:41 - particle number two is i want to
07:44 - shrink the particle and number three is
07:47 - i want to actually draw
07:48 - a circle around the
07:52 - particle so let's work on them step by
07:55 - step
07:56 - first off we have to move them so we
07:58 - have to influence this position x and
08:00 - position y
08:02 - so first i'm going to target them so
08:04 - this is particle
08:06 - zero and for now i'm just going to move
08:08 - the y position so position
08:10 - dot y and this would be zero for this
08:13 - entire thing
08:14 - and then one for position y and this i
08:17 - want to move in the direction that we
08:18 - created
08:19 - so this is particle
08:23 - and this would be zero one and
08:26 - two so this is our direction so plus two
08:29 - so effectively what happens here is that
08:31 - we are taking the y position
08:32 - and adding minus one or whatever is in
08:35 - our direction
08:35 - to it so effectively right now we're
08:37 - moving it
08:39 - next up is we want to shrink it so we
08:41 - want to take this radius and make it
08:43 - smaller
08:44 - so again i want to go particle and this
08:47 - time
08:47 - 1 for the first element in this list and
08:50 - this time i want to get minus
08:51 - equal a very small number and i went
08:54 - with
08:55 - negative 0.2 but you can experiment
08:58 - around with this quite a bit
08:59 - all right now we're making this radius
09:02 - smaller
09:02 - on every single time this frame here is
09:04 - running so effectively our circle is
09:06 - going to be smaller
09:08 - and now all that's left to do is to
09:10 - actually draw all of this
09:11 - and since i want to draw a circle i'm
09:13 - going to go with pygame.draw.circle
09:16 - and now we need a couple of attributes
09:18 - the first one is on what surface to draw
09:20 - on
09:21 - in my case that's easy the screen then
09:23 - we need a color
09:25 - and i just used the pie game color
09:28 - attributes
09:29 - and i'm going to make them white white
09:32 - and now for the circle we need two more
09:35 - attributes
09:36 - first we need to center position and
09:38 - then we need the radius
09:41 - so the radius is actually super simple
09:43 - that's gonna be our particle
09:46 - one the one we have created and shrunk
09:48 - in here
09:49 - now for our center position we are going
09:52 - to need an x in the y position
09:54 - and fortunately we have them this is our
09:56 - position x and position y
09:58 - so all we have to do in here is particle
10:04 - zero and there's one more thing we need
10:06 - to do
10:07 - when we create a radius around the
10:09 - circle this has to be an integer
10:11 - but right now for us this is going to be
10:13 - a float because
10:14 - subtracting negative 0.2 from a number
10:17 - is going to create a float
10:19 - so we have to put in around here
10:22 - and there we go now in our game loop
10:27 - i can just call particle one
10:31 - and call the embed method and
10:34 - right now this should be working for a
10:36 - very short amount of time so let's try
10:40 - and there we go we get an error that we
10:43 - are creating
10:44 - a negative radius so the problem is here
10:47 - that from our radius we subtract a very
10:49 - small amount all the time
10:51 - but this radius has to be positive so
10:54 - after our code runs for about a second
10:56 - this one is going to get negative
10:57 - and the entire thing crashes but we can
10:59 - fix that quite easily
11:01 - and for that we have our delete
11:02 - particles method and really all i want
11:04 - to do in here
11:05 - is that if a particle gets to 0 i want
11:08 - to delete it
11:09 - but the method how i'm going to achieve
11:10 - this is going to be slightly different
11:12 - so let me explain so first let me get
11:15 - rid of all of this
11:17 - and the first thing i want to do is i'm
11:19 - going to create a copy
11:20 - of our self.particles and i call this
11:24 - list particles copy
11:27 - and now i'm going to use list
11:29 - comprehension
11:30 - and what i want to do is particle for
11:34 - particle in self.particles
11:38 - so right now we would take our
11:40 - self.particles list with all the
11:42 - elements inside
11:43 - and just make a one-to-one copy for it
11:46 - but
11:47 - i don't want to make a one-to-one copy
11:48 - instead what i want to do
11:50 - is only choose the particles that have a
11:53 - radius
11:53 - that is greater than one so into this
11:55 - list comprehension
11:56 - i'm going to add an if statement and
11:59 - it's going to be if
12:00 - particle one
12:04 - so the radius is greater than
12:07 - zero so effectively what we're going to
12:09 - do is recycle through the entire
12:11 - self.particles list
12:13 - but only copy particles that have a
12:15 - radius greater than zero
12:17 - and once we're done with that we just
12:19 - set our self.particles
12:23 - equal to our particle
12:27 - copy list and that way we are going to
12:30 - get rid
12:31 - of all of the particles that are getting
12:33 - to zero
12:35 - and now again up here when i cause
12:37 - several particles
12:39 - before we're updating all the particles
12:41 - i want to check
12:43 - self.delete particles so that before we
12:46 - get into any of this we delete all the
12:48 - particles that have a radius of smaller
12:50 - than zero
12:52 - so now let's try the entire thing again
12:56 - and there we go we have a very
12:59 - basic particle system now obviously this
13:02 - doesn't look particularly good
13:03 - but if we just make some changes this is
13:06 - going to look much better
13:07 - the first one is the direction of minus
13:09 - one is a bit too slow
13:11 - so let's make this to negative five ah
13:13 - now let's try again
13:15 - and this is already looking a bit better
13:17 - but i think it's moving too
13:19 - fast so instead of going with
13:22 - particle event 40 so we spawn this every
13:24 - 40 milliseconds
13:26 - let's go with 150
13:29 - and now this is already getting a bit
13:32 - better
13:33 - but i think now it is moving actually a
13:35 - bit too fast so let's set this
13:37 - to lower number and there we go this is
13:40 - already looking quite a bit better
13:42 - so this is really the most basic kind of
13:45 - particle system
13:47 - if you have gotten this far you have
13:48 - understood basic particle system
13:51 - all we have to do now is to make
13:52 - adjustments to this to make it look a
13:54 - bit better
13:56 - so let's make it look better so the
13:58 - first thing i want to do
13:59 - is to not spawn this at a specific
14:00 - position and instead i want to spawn it
14:02 - at our mouse position
14:04 - so for that i have to get
14:07 - pygame.mouse.get
14:08 - pause and this is giving us the x and
14:11 - the y position of our mouse
14:13 - and from this position i just want the
14:15 - first one so the x position
14:18 - and then same thing for y but now i want
14:20 - the first one
14:21 - so now if i run this now our particles
14:23 - should follow our mouse
14:25 - and this is already looking quite a bit
14:26 - more interesting
14:28 - so we are making some pretty good
14:30 - progress
14:31 - next up i want to make the direction a
14:34 - bit more random
14:35 - and since we need a random number i have
14:38 - to import the random module
14:42 - and now for the direction instead of a
14:44 - fixed number
14:45 - i want random randint
14:49 - and this is going from negative three to
14:51 - three
14:52 - and now if i run this this should go
14:55 - into different directions
14:57 - so now it's going up and down
15:00 - which is well looking quite a bit better
15:02 - i think but okay
15:05 - now instead of just moving all of these
15:06 - particles up and down i want to move
15:08 - them also to the left and to the right
15:10 - and to do that i just have to copy this
15:12 - line so this is the line where we just
15:14 - moved it up and down
15:15 - and now instead of just targeting the y
15:18 - position we also target the x position
15:20 - and if i were to run this code right now
15:23 - we would get well a slightly weird
15:26 - effect but
15:27 - it doesn't look too bad actually but not
15:29 - what i wanted i want the particles to go
15:31 - in a random direction
15:32 - but this doesn't work right now because
15:34 - both move in the same direction
15:37 - so this direction is fixed for both x
15:39 - and y
15:40 - and what i need is that this direction
15:45 - has two axes so i'm going to put it
15:50 - into brackets and i'm going to have
15:52 - direction x and direction
15:56 - y and this is going to be direction x
16:01 - and this is going to be direction y
16:04 - so really now instead of having one
16:06 - direction with a random number we have
16:08 - two directions for each axis
16:10 - and then when we are using the numbers
16:12 - we want to use
16:14 - zero and one and now let's try this
16:18 - entire thing again
16:20 - and there we go now we have a random
16:23 - particle being emitted from the position
16:25 - of our mouse
16:26 - and now we can increase the speed again
16:29 - and see how it looks after that
16:31 - let's set it to 50.
16:35 - and there we go now we have a particle
16:37 - around our mouse
16:39 - that works quite well so this would be
16:41 - our very basic particle principle
16:45 - and well if you have understood this you
16:47 - could even do all the other parts
16:49 - yourself
16:50 - because they're not fundamentally
16:51 - different but let's go through them
16:55 - and the first one is going to be our
16:56 - neon cat so for the
16:58 - uncat we are basically going to follow
17:00 - the same principles
17:02 - but there are going to be two major
17:03 - differences the first one
17:05 - is that we don't have one emitter we
17:07 - have five emitters working at the same
17:09 - time
17:10 - and each of these images is going to
17:12 - emit a particle with a different color
17:14 - and the second difference is that we
17:16 - don't have a circle anymore
17:18 - we have a rectangle and i guess there's
17:20 - also a third difference that we put in
17:22 - nyan cat image on the screen
17:24 - but that doesn't really count because
17:25 - it's super simple
17:27 - all right let's jump right in so here we
17:29 - are back in our code
17:30 - and since we are going to reuse a lot
17:34 - of this stuff i'm just going to copy our
17:36 - entire class
17:38 - and rename it to
17:41 - particle neon
17:44 - and besides that let me minimize this i
17:47 - also want to import the image of our
17:49 - neon cat
17:50 - so for that i'm going to create a new
17:53 - variable
17:53 - neon surface and this is going to be
17:55 - pygame dot
17:57 - image dot load and the image is called
18:01 - neon underscorecat.png
18:04 - and i'm going to add convert alpha to it
18:08 - so we convert the image to a better
18:11 - format for pi game so our code is able
18:13 - to run faster
18:14 - but alright now we can actually work on
18:16 - our particles for the neon cat
18:18 - so we are still going to keep our
18:20 - self.particles
18:22 - but besides that i also want a new
18:23 - attribute that i called self.size
18:26 - and i have set this one to eight so this
18:29 - is going to be the width and the height
18:31 - of each particle we are going to create
18:34 - all right to omit we are going to come
18:36 - later
18:37 - first of all we are going to work with
18:39 - add particles
18:41 - and effectively what i'm going to do is
18:43 - i'm going to give it
18:44 - a couple more arguments you can pass
18:46 - into it
18:47 - and this is going to be an offset and a
18:50 - color
18:51 - so the offset is going to offset our
18:53 - particle when it's being spawned in the
18:55 - y direction by a certain amount
18:57 - so we could have a particle that is a
18:58 - couple of pixels above the mouse screen
19:00 - or below the mouse screen
19:02 - and the color is the color of the
19:03 - particle that one well it's quite
19:05 - obvious
19:06 - and now let's go through it i still want
19:08 - to get the x position of our mouse
19:10 - so this one stays exactly the same but
19:12 - for the y position
19:13 - i want to add the offset so this one
19:16 - gets
19:17 - less offset so if we don't get the exact
19:21 - most position in the y
19:22 - axis we add or subtract something from
19:24 - it and
19:25 - next up all of these things can go
19:27 - because we don't need them anymore
19:29 - and same for this one actually because
19:33 - instead
19:34 - i want to create a particle
19:37 - rectangle and this one is going to be
19:39 - pie game direct
19:40 - so a perfectly normal wrecked object for
19:42 - pie game and for this we need an x
19:45 - position
19:45 - a y position a width and a height
19:49 - and these two arguments are super easy
19:51 - because we have to find them
19:53 - up here so i'm just going to copy
19:55 - self.size
19:56 - and paste them for the width and the
19:58 - height so this one
19:59 - is the easy part but now we need to
20:01 - figure out where to spawn them
20:03 - and here you could be time to just type
20:06 - position
20:07 - x and position y
20:10 - and this would kind of work it wouldn't
20:13 - be wrong
20:14 - but the problem is that a rectangle is
20:16 - always spawned in the top
20:17 - left but we want to put this on the
20:20 - center
20:21 - so i have to move it a tiny bit more and
20:24 - what i want to do
20:25 - is self dot size over 2
20:29 - so that from the top left position we
20:31 - are moving this thing to the left by
20:32 - half of its size
20:34 - and thereby we are spawning the center
20:36 - of the point and then we have to do the
20:38 - exact same thing for the y position
20:40 - and now we're good to go so now we have
20:42 - created a particle rectangle
20:45 - and this is what i'm going to add to
20:48 - our self.particles but there's one more
20:52 - thing we need and that's the color
20:53 - so instead of just passing in the
20:55 - particle rectangle
20:56 - i'm going to pass in a tuple with the
20:59 - particle rectangle
21:01 - and the color and that is basically it
21:04 - what we needed for this one
21:05 - and this allows us to call this add
21:07 - particles multiple times
21:09 - and change the offset and the color and
21:11 - that way we can create multiple
21:13 - particles at the same time
21:15 - and let's actually do that so i go
21:17 - further down
21:19 - back to our particle event and in here
21:22 - let me comment out particle one and
21:25 - instead what i want to do
21:27 - is let's go with particle 2 i'm going to
21:30 - name this
21:31 - dot at particles
21:35 - and in here i can set an offset and a
21:38 - color
21:39 - and let's just start with a really
21:40 - simple one and let's start with an
21:42 - offset of
21:42 - 0 just to illustrate the principle and
21:46 - then i want a color
21:47 - and i'm going to go with pygame.color
21:49 - again just to keep it simple
21:51 - and for the color i am going to go with
21:56 - let's say let's say red so this is going
21:59 - to be really similar
22:00 - to the particle one we have created
22:02 - earlier
22:03 - but obviously we have to create before i
22:06 - forget
22:07 - our particle 2 equals
22:12 - particle neon
22:15 - [Music]
22:16 - and then in our game loop let's comment
22:19 - out
22:20 - this one and let's actually call the
22:22 - emit method
22:23 - it wouldn't work just now but
22:26 - just to have it ready okay
22:30 - now with all of that stuff covered we
22:32 - can work on the emit method
22:35 - and this one is going to stay quite
22:37 - similar with some notable changes though
22:39 - so all of this part here stays exactly
22:41 - the same
22:43 - but now we don't want to move this thing
22:46 - in a y direction at all
22:47 - so this line can just go entirely we
22:50 - also don't want to shrink the particles
22:52 - anymore so this line can go as well
22:54 - and now for the x position
22:57 - we just want to target the actual
23:00 - rectangle
23:01 - so this particle wrecked and i want to
23:04 - move this entire thing
23:06 - by let's say two pixels to the left on
23:08 - every single frame
23:09 - and with that covered all we have to do
23:12 - is to draw the result
23:14 - and we're still painting on the screen
23:15 - but now for the color
23:17 - we are going to go with particle
23:22 - one so this is going to be this part
23:24 - here the color
23:25 - and then we can get rid of all of
23:29 - this part here and just call
23:32 - particle zero
23:35 - so again the particle rect we have
23:37 - created earlier and now with this we are
23:39 - almost done i just realized i made two
23:41 - mistakes
23:42 - this one shouldn't be draw it should be
23:44 - wrecked and for the particle zero
23:46 - we also want to target the x so we don't
23:49 - just want to target
23:51 - the particle rect we want to target the
23:53 - x position of this rectangle
23:55 - so now all of these lines should be
23:56 - correct but there's one more thing we
23:58 - have to talk about
23:59 - and that is this delete particles
24:02 - because
24:02 - right now our delete particles it looks
24:05 - for particle one greater than zero
24:07 - so right now it looks at this color but
24:09 - this color could never be
24:11 - smaller than zero or at least a
24:12 - comparison wouldn't make sense
24:14 - so we have to do something else and what
24:17 - i want to do instead
24:18 - is look at our particle rectangle and
24:21 - look at the x position
24:24 - and only keep the particle if the x is
24:26 - greater than zero
24:27 - because if it's smaller than zero it's
24:29 - going to be outside of the screen
24:31 - and if that is the case it's not going
24:32 - to be visible anyway so we don't have to
24:34 - draw it
24:35 - so we can get rid of it and all right
24:38 - now all of this coverage let's try and
24:41 - there we go
24:42 - we're getting a red particle moving to
24:45 - the left so it does a pretty good start
24:48 - now pygame is going to give me a
24:51 - slightly annoying message
24:52 - that these two should be integers so
24:56 - let's oblige and let's put integer or in
24:59 - around it to turn them into integers and
25:02 - now let's try this again
25:03 - and now we don't get a warning anymore
25:05 - and there we go now we have our red
25:06 - particles
25:07 - so now we have one particle all we have
25:10 - to do now
25:11 - is to work with this line here quite a
25:13 - bit or copy it a couple of times
25:15 - and change the color and the position so
25:18 - what we can do now
25:19 - is let me put this one to negative
25:23 - 20 and now it is always going to be
25:27 - slightly above our mouse cursor
25:29 - and let me actually change this to 100
25:32 - so we get what this means
25:35 - [Music]
25:36 - so now we can see our mouse cursor is
25:38 - significantly below the particles
25:40 - and now all we have to do is call this
25:43 - method six times
25:44 - for each color and let me start in the
25:47 - middle that makes the math the easiest
25:49 - so i'm gonna start with negative four
25:51 - and that is going to be
25:52 - the yellow color so this one is going to
25:55 - be slightly above the mouse cursor
25:57 - and then slightly below the mouse cursor
25:59 - at position 4
26:00 - we are going to create green particles
26:03 - then one layer outside of that we go to
26:08 - -12 and this one is going to be
26:11 - orange and then we go to plus 12 below
26:14 - the cursor
26:15 - and this one is going to be blue and
26:18 - then
26:18 - at minus 20
26:22 - and plus 20 we create either a red
26:25 - or a purple particle
26:29 - and let's trial of this so now
26:32 - we are getting a rainbow so that's
26:36 - pretty workable and
26:39 - here you can see there's a gap between
26:42 - each of these
26:43 - so let me show this
26:47 - and this is because the particles don't
26:48 - spawn fast enough or they are moving too
26:50 - fast you can adjust either of these
26:53 - i'm going to go with how often we spawn
26:56 - the particles
26:57 - so let's change this one to 40 and see
27:00 - how that looks
27:02 - and it's getting a bit better there's
27:05 - still some gaps
27:07 - so let's change the speed of it to
27:10 - negative
27:10 - one and let's try this now
27:14 - and there we go this looks much better
27:18 - there are still some gaps but for now
27:19 - i'm not going to worry about them
27:21 - okay we are almost done the last thing
27:24 - we have to do
27:24 - is to draw our cat so
27:28 - for that i'm just going to create a new
27:31 - method
27:31 - that i call draw neon cat
27:35 - it doesn't need any parameters and all
27:37 - we're going to do in here
27:38 - is to create a rectangle around the cat
27:42 - so neon surface dot get
27:45 - rekt and we put the center
27:48 - to where our mouse is so pygame dot
27:51 - mouse
27:52 - dot get pause and once we have that
27:56 - we just use screen dot blit and neon
27:59 - surface
28:00 - and neon wrecked and then
28:04 - in our mid method i'm just going to call
28:07 - self dodge draw neon cat
28:11 - and then we should be good to go so
28:12 - let's try
28:14 - and well it's a bit large but i guess
28:17 - you get the principle
28:21 - i think i made the particles a bit too
28:24 - small
28:25 - so let's work on that really fast
28:28 - so for the particles i went with eight
28:30 - so far let's
28:31 - turn it up to twelve and then when we
28:35 - spawn them
28:36 - this is going to be negative six
28:39 - negative eighteen and
28:42 - negative thirty and then we
28:45 - get all numbers and positive so 18
28:49 - and 30. and now let's try this again
28:54 - [Music]
28:56 - and there we go this feels much better
28:59 - and you do have to be aware if i move
29:01 - the cat around randomly on the screen
29:03 - this kind of breaks so you do have to be
29:06 - careful about how you use it
29:07 - but if you only move very slowly this
29:10 - creates a very nice effect
29:12 - that looks pretty cool so alright
29:16 - this finishes the nyankat and for the
29:18 - final one
29:19 - we are going to create a couple of stars
29:22 - around our mouse
29:24 - so we actually going to spawn images
29:26 - instead of just drawing with pygame
29:28 - and all of this is still going to be
29:30 - incredibly similar compared to the
29:32 - particle we have created in the
29:33 - beginning of this video
29:35 - but now instead of drawing circles
29:36 - around each point we are going to blit
29:38 - an image on this position but that is
29:41 - basically the entire difference so let's
29:43 - jump right in and let's see how this
29:44 - works
29:45 - so here i'm back in my code and now what
29:48 - i want to do
29:49 - is to copy our original class again
29:52 - and let me rename it
29:56 - to particle star
30:00 - and before i do anything else
30:04 - i am going to create particle
30:08 - 3 and create the actual object from
30:10 - particle
30:12 - from particle star
30:16 - and then in our particle event
30:20 - i'm going to call particle
30:24 - 3 dot at particles
30:29 - and then in our actual game loop i want
30:32 - to call
30:32 - particle 3 dot emit
30:36 - so exactly the same for now as we have
30:39 - done with the original particles
30:41 - but i'm going to make quite a few
30:43 - changes now so again let's go for it
30:45 - step by step
30:47 - i am still going to keep self.particles
30:50 - but now i'm going to add self.surface
30:53 - and this is going to be an image of our
30:55 - star
30:56 - meaning i have to import an image so
30:59 - pygame.image.load
31:01 - and the image is called star.png and
31:04 - again
31:05 - i use convert alpha to turn it into a
31:08 - file that pygame can work easier with
31:11 - now we need two more things the first
31:13 - one is self dot with
31:15 - so we have to know when we create the
31:16 - particles how wide our surface is going
31:19 - to be
31:20 - so i want to know our self.surface dot
31:24 - get correct
31:27 - and then i want the whiff and i want to
31:30 - do the same thing for the height
31:32 - so just copy the entire thing and change
31:34 - width to height
31:36 - so now we have the basic attributes that
31:38 - we need to create a couple of particles
31:40 - that are going to be rectangles
31:42 - and then later on we use those
31:43 - rectangles to bleed the surface on each
31:45 - rectangle
31:47 - again i'm going to start working with
31:48 - add particles
31:50 - and here we still want to get our x
31:52 - position from our most position
31:54 - but again if we were to just use this
31:56 - position our mouse would be on the top
31:58 - left of the star not in the
32:00 - center so we have to subtract something
32:02 - and what we have to subtract
32:03 - is self dot with
32:07 - divided by two and the same for the y
32:10 - position
32:11 - so self dot height divided by two
32:15 - next up the radius we can just get rid
32:17 - of because we're not going to need it
32:18 - anymore
32:20 - and direction x and direction y i'm
32:22 - going to keep
32:23 - and there's one more thing i do want to
32:24 - add and that's a lifetime
32:27 - and this one is going to be a rant in
32:29 - between let's say four
32:31 - and ten so this is going to be how long
32:34 - our star is going to live
32:36 - but all right that's all we needed all
32:38 - we have to do now
32:39 - is to create a particle rect
32:43 - and this one again is going to be pygame
32:44 - dot rect
32:46 - and we are going to use position x
32:50 - position y and
32:53 - self dot with and self dot
32:56 - height and the particle circle we can
32:58 - just get rid of because we don't need it
33:00 - anymore
33:01 - and now when we are appending the
33:02 - particle i want to get
33:05 - our particle particle
33:09 - rect i want to get the direction
33:12 - x and the direction y and i need the
33:16 - lifetime and well that is basically it
33:19 - so now we can look at the emit method
33:20 - again
33:21 - and make the changes we need to do and
33:24 - it's not going to be that many actually
33:26 - so we're going to start with particle.x
33:29 - and
33:29 - now instead of 1
33:32 - i'm going to change this to x
33:35 - and this one is going to be y so
33:38 - we are targeting this particle rectangle
33:41 - and targeting the x and the y position
33:44 - and with that we have to add either the
33:46 - direction x
33:47 - or the direction y so this is going to
33:50 - be
33:52 - particle again
33:55 - for x is going to be 1
33:58 - and for y it's going to be 2. and then
34:02 - we have to look at the lifetime
34:03 - to kill off the particle at some point
34:05 - so if look at particle 3
34:07 - and i'm just going to subtract 0.2 again
34:10 - but you could change this number to
34:11 - whatever you want it
34:12 - just see what feels good and now this
34:15 - entire line we can get rid of
34:17 - and replace it with screen dot split
34:20 - because now we want to blit an image and
34:23 - what we want to blit
34:24 - is self dot surface and the position we
34:26 - want to get
34:27 - is particle zero
34:31 - so this particle zero that we're moving
34:32 - around is just a rectangle
34:34 - and this rectangle has the same
34:36 - dimensions as our surface
34:38 - so we can use it to put the surface in
34:40 - the place of the particle or the
34:42 - rectangle of the particle
34:43 - and that would basically be it the last
34:46 - thing we have to do
34:47 - is get our particles again and work with
34:49 - this if condition
34:51 - and what i want to look for is the
34:53 - lifetime here so particle
34:55 - 3 and if it's greater than 0 we are
34:58 - going to keep it
34:59 - and with that we should be good to go
35:02 - so let's try and we are getting
35:06 - an arrow that lifetime this should be
35:09 - random dot
35:10 - rending now let's try this again there
35:12 - we go
35:13 - and we have stars around our mouth
35:15 - screen
35:17 - so that's basically it and again
35:20 - python complains about an implicit
35:22 - conversion so i'm gonna put
35:24 - integer around the position when we are
35:27 - going to create our
35:30 - rectangle so now let's try this again
35:34 - and there we go the warnings anymore and
35:36 - we have our stars
35:38 - that disappear and work perfectly well
35:40 - so i hope you found this helpful
35:42 - and i'll see you around

Cleaned transcript:

hi there for this tutorial we are going to be creating particle effects and before we get into specific code let's first talk about the logic behind these particle effects because it's actually quite simple what we are effectively going to do is to create a class that has one list and this list is storing all the individual particles and then this class has three different methods one method is to create particles that are going to end up in the list and all of these particles also have specific attributes this could be the direction this could be the size this could be a lifetime this could also be their color lots of different things that we could do in there the second method is there to destroy the particles once they reach a certain criteria like them becoming too small or moving outside of the screen and lastly we have an emit method and this one puts the first two methods together in the sense that it cycles through the list and moves all the particles and adds the visual effects to them and that's really all that's needed for the different kind of particle effects so let's jump right into the code so here we are in a really basic setup for pygame and if you don't understand what this means check out this video and i explain all of this but to get started i'm going to create a new class for our first particle project and for this one i'm going to click class and i call this one particle prince pill it doesn't need to inherit anything so we can just go to define and init and when we initiate this class all we need is self.particles and this for now is just going to be an empty list but basically what we are going to do later on is add particles to this list and then move them and draw around them and with that covered we are going to need three more methods and let me just write them out the first one is an emit method let me just right pass him for now it moves and draws the particles then we have another method that is called add particles and this one is well it has particles and then we need one more and that is delete particles and what this one is doing is it deletes particles after a certain time and this one is really important for the simple reason that if we didn't delete our particles after a certain amount of time we would end up with a crazy amount of elements on our screen and our game would be slowing down so this method is quite important but effectively what we are going to do is we always start with this add particles method and this one adds a particle to our self.particles list and then emit goes through all of the particles inside of this list and moves them around a tiny bit and then draws them and while emitting we also check for certain particles if they get too small and then we delete them if they are too small and that way we ensure that we will never have too many particles on the screen at one time so we have to start with our add particles method and i do want to call this method all the time very very often so every couple of milliseconds and to do that i am going to create a custom event so i call this one particle event and this one is pie game dot user event plus one so we are effectively creating a user event that we can use now event loop and trigger this every few milliseconds so for that i set a timer with pygame.time.set timer then i need our particle event and then the amount of time in milliseconds i want to pass between each call of the event in my case i went with 40 but you could make this longer or shorter depending on what you need i'll show you once we have our first particle setup ready alright now in the event loop i want to check if event dot type is equal to particle event and if that is the case i want to trigger this add particles so to make that work i first have to create an object from the class so let's call this particle one is equal to particle principle and then inside of this event particle one dot add particles there we go so what this basically achieves is that these lines call an event every 40 milliseconds and then when this event is being called we are calling this method so we are adding a particles so now we have to actually write some code to add particles to it and really all we have to do is that we are creating a point with an x in the y position a direction and a certain radius and then later on in the emit method we are just drawing all of these points and put a circle around them so well really simple actually but okay let's get to it i want to start with creating a x position and for now i just put this in the middle of the screen so i put this at 250 and do the same thing for y position and it's also going to be 250. so any particle we are going to create is going to start right in the middle of the screen then i want to create a radius and they are all going to be 10 at least for now and then i want to create a direction so i create direction and for now the direction is just going to be 1 so this would mean all the particles we are creating are just going upwards and that is effectively it what we need for our basic particle now all i want to do is to create a particle circle and this one is just well it's a list that has another list with position x and position y then we have the radius and then we have the direction so really all we're doing in here is adding all of these different variables into one list to make it easier to work with but we're not creating anything particularly new and once we have all of that i get self.particles and append our particle circle and that's all we needed for the add particles part so now we can actually look at emitting them so the first thing i want to check is if there's anything inside of the self.particles so we have something to animate and for that i can just go with self.particles and any list that has more than one entry is going to evaluate to true so self.particles once we have any particle in here is going to get to true and if not we're not doing anything and then i want to cycle through all of the particles so for particle in self.partic kills so effectively if there's any particle inside of softer particles we want to work with all of them and there are three things i want to do with the particles number one is i want to move the particle number two is i want to shrink the particle and number three is i want to actually draw a circle around the particle so let's work on them step by step first off we have to move them so we have to influence this position x and position y so first i'm going to target them so this is particle zero and for now i'm just going to move the y position so position dot y and this would be zero for this entire thing and then one for position y and this i want to move in the direction that we created so this is particle and this would be zero one and two so this is our direction so plus two so effectively what happens here is that we are taking the y position and adding minus one or whatever is in our direction to it so effectively right now we're moving it next up is we want to shrink it so we want to take this radius and make it smaller so again i want to go particle and this time 1 for the first element in this list and this time i want to get minus equal a very small number and i went with negative 0.2 but you can experiment around with this quite a bit all right now we're making this radius smaller on every single time this frame here is running so effectively our circle is going to be smaller and now all that's left to do is to actually draw all of this and since i want to draw a circle i'm going to go with pygame.draw.circle and now we need a couple of attributes the first one is on what surface to draw on in my case that's easy the screen then we need a color and i just used the pie game color attributes and i'm going to make them white white and now for the circle we need two more attributes first we need to center position and then we need the radius so the radius is actually super simple that's gonna be our particle one the one we have created and shrunk in here now for our center position we are going to need an x in the y position and fortunately we have them this is our position x and position y so all we have to do in here is particle zero and there's one more thing we need to do when we create a radius around the circle this has to be an integer but right now for us this is going to be a float because subtracting negative 0.2 from a number is going to create a float so we have to put in around here and there we go now in our game loop i can just call particle one and call the embed method and right now this should be working for a very short amount of time so let's try and there we go we get an error that we are creating a negative radius so the problem is here that from our radius we subtract a very small amount all the time but this radius has to be positive so after our code runs for about a second this one is going to get negative and the entire thing crashes but we can fix that quite easily and for that we have our delete particles method and really all i want to do in here is that if a particle gets to 0 i want to delete it but the method how i'm going to achieve this is going to be slightly different so let me explain so first let me get rid of all of this and the first thing i want to do is i'm going to create a copy of our self.particles and i call this list particles copy and now i'm going to use list comprehension and what i want to do is particle for particle in self.particles so right now we would take our self.particles list with all the elements inside and just make a onetoone copy for it but i don't want to make a onetoone copy instead what i want to do is only choose the particles that have a radius that is greater than one so into this list comprehension i'm going to add an if statement and it's going to be if particle one so the radius is greater than zero so effectively what we're going to do is recycle through the entire self.particles list but only copy particles that have a radius greater than zero and once we're done with that we just set our self.particles equal to our particle copy list and that way we are going to get rid of all of the particles that are getting to zero and now again up here when i cause several particles before we're updating all the particles i want to check self.delete particles so that before we get into any of this we delete all the particles that have a radius of smaller than zero so now let's try the entire thing again and there we go we have a very basic particle system now obviously this doesn't look particularly good but if we just make some changes this is going to look much better the first one is the direction of minus one is a bit too slow so let's make this to negative five ah now let's try again and this is already looking a bit better but i think it's moving too fast so instead of going with particle event 40 so we spawn this every 40 milliseconds let's go with 150 and now this is already getting a bit better but i think now it is moving actually a bit too fast so let's set this to lower number and there we go this is already looking quite a bit better so this is really the most basic kind of particle system if you have gotten this far you have understood basic particle system all we have to do now is to make adjustments to this to make it look a bit better so let's make it look better so the first thing i want to do is to not spawn this at a specific position and instead i want to spawn it at our mouse position so for that i have to get pygame.mouse.get pause and this is giving us the x and the y position of our mouse and from this position i just want the first one so the x position and then same thing for y but now i want the first one so now if i run this now our particles should follow our mouse and this is already looking quite a bit more interesting so we are making some pretty good progress next up i want to make the direction a bit more random and since we need a random number i have to import the random module and now for the direction instead of a fixed number i want random randint and this is going from negative three to three and now if i run this this should go into different directions so now it's going up and down which is well looking quite a bit better i think but okay now instead of just moving all of these particles up and down i want to move them also to the left and to the right and to do that i just have to copy this line so this is the line where we just moved it up and down and now instead of just targeting the y position we also target the x position and if i were to run this code right now we would get well a slightly weird effect but it doesn't look too bad actually but not what i wanted i want the particles to go in a random direction but this doesn't work right now because both move in the same direction so this direction is fixed for both x and y and what i need is that this direction has two axes so i'm going to put it into brackets and i'm going to have direction x and direction y and this is going to be direction x and this is going to be direction y so really now instead of having one direction with a random number we have two directions for each axis and then when we are using the numbers we want to use zero and one and now let's try this entire thing again and there we go now we have a random particle being emitted from the position of our mouse and now we can increase the speed again and see how it looks after that let's set it to 50. and there we go now we have a particle around our mouse that works quite well so this would be our very basic particle principle and well if you have understood this you could even do all the other parts yourself because they're not fundamentally different but let's go through them and the first one is going to be our neon cat so for the uncat we are basically going to follow the same principles but there are going to be two major differences the first one is that we don't have one emitter we have five emitters working at the same time and each of these images is going to emit a particle with a different color and the second difference is that we don't have a circle anymore we have a rectangle and i guess there's also a third difference that we put in nyan cat image on the screen but that doesn't really count because it's super simple all right let's jump right in so here we are back in our code and since we are going to reuse a lot of this stuff i'm just going to copy our entire class and rename it to particle neon and besides that let me minimize this i also want to import the image of our neon cat so for that i'm going to create a new variable neon surface and this is going to be pygame dot image dot load and the image is called neon underscorecat.png and i'm going to add convert alpha to it so we convert the image to a better format for pi game so our code is able to run faster but alright now we can actually work on our particles for the neon cat so we are still going to keep our self.particles but besides that i also want a new attribute that i called self.size and i have set this one to eight so this is going to be the width and the height of each particle we are going to create all right to omit we are going to come later first of all we are going to work with add particles and effectively what i'm going to do is i'm going to give it a couple more arguments you can pass into it and this is going to be an offset and a color so the offset is going to offset our particle when it's being spawned in the y direction by a certain amount so we could have a particle that is a couple of pixels above the mouse screen or below the mouse screen and the color is the color of the particle that one well it's quite obvious and now let's go through it i still want to get the x position of our mouse so this one stays exactly the same but for the y position i want to add the offset so this one gets less offset so if we don't get the exact most position in the y axis we add or subtract something from it and next up all of these things can go because we don't need them anymore and same for this one actually because instead i want to create a particle rectangle and this one is going to be pie game direct so a perfectly normal wrecked object for pie game and for this we need an x position a y position a width and a height and these two arguments are super easy because we have to find them up here so i'm just going to copy self.size and paste them for the width and the height so this one is the easy part but now we need to figure out where to spawn them and here you could be time to just type position x and position y and this would kind of work it wouldn't be wrong but the problem is that a rectangle is always spawned in the top left but we want to put this on the center so i have to move it a tiny bit more and what i want to do is self dot size over 2 so that from the top left position we are moving this thing to the left by half of its size and thereby we are spawning the center of the point and then we have to do the exact same thing for the y position and now we're good to go so now we have created a particle rectangle and this is what i'm going to add to our self.particles but there's one more thing we need and that's the color so instead of just passing in the particle rectangle i'm going to pass in a tuple with the particle rectangle and the color and that is basically it what we needed for this one and this allows us to call this add particles multiple times and change the offset and the color and that way we can create multiple particles at the same time and let's actually do that so i go further down back to our particle event and in here let me comment out particle one and instead what i want to do is let's go with particle 2 i'm going to name this dot at particles and in here i can set an offset and a color and let's just start with a really simple one and let's start with an offset of 0 just to illustrate the principle and then i want a color and i'm going to go with pygame.color again just to keep it simple and for the color i am going to go with let's say let's say red so this is going to be really similar to the particle one we have created earlier but obviously we have to create before i forget our particle 2 equals particle neon and then in our game loop let's comment out this one and let's actually call the emit method it wouldn't work just now but just to have it ready okay now with all of that stuff covered we can work on the emit method and this one is going to stay quite similar with some notable changes though so all of this part here stays exactly the same but now we don't want to move this thing in a y direction at all so this line can just go entirely we also don't want to shrink the particles anymore so this line can go as well and now for the x position we just want to target the actual rectangle so this particle wrecked and i want to move this entire thing by let's say two pixels to the left on every single frame and with that covered all we have to do is to draw the result and we're still painting on the screen but now for the color we are going to go with particle one so this is going to be this part here the color and then we can get rid of all of this part here and just call particle zero so again the particle rect we have created earlier and now with this we are almost done i just realized i made two mistakes this one shouldn't be draw it should be wrecked and for the particle zero we also want to target the x so we don't just want to target the particle rect we want to target the x position of this rectangle so now all of these lines should be correct but there's one more thing we have to talk about and that is this delete particles because right now our delete particles it looks for particle one greater than zero so right now it looks at this color but this color could never be smaller than zero or at least a comparison wouldn't make sense so we have to do something else and what i want to do instead is look at our particle rectangle and look at the x position and only keep the particle if the x is greater than zero because if it's smaller than zero it's going to be outside of the screen and if that is the case it's not going to be visible anyway so we don't have to draw it so we can get rid of it and all right now all of this coverage let's try and there we go we're getting a red particle moving to the left so it does a pretty good start now pygame is going to give me a slightly annoying message that these two should be integers so let's oblige and let's put integer or in around it to turn them into integers and now let's try this again and now we don't get a warning anymore and there we go now we have our red particles so now we have one particle all we have to do now is to work with this line here quite a bit or copy it a couple of times and change the color and the position so what we can do now is let me put this one to negative 20 and now it is always going to be slightly above our mouse cursor and let me actually change this to 100 so we get what this means so now we can see our mouse cursor is significantly below the particles and now all we have to do is call this method six times for each color and let me start in the middle that makes the math the easiest so i'm gonna start with negative four and that is going to be the yellow color so this one is going to be slightly above the mouse cursor and then slightly below the mouse cursor at position 4 we are going to create green particles then one layer outside of that we go to 12 and this one is going to be orange and then we go to plus 12 below the cursor and this one is going to be blue and then at minus 20 and plus 20 we create either a red or a purple particle and let's trial of this so now we are getting a rainbow so that's pretty workable and here you can see there's a gap between each of these so let me show this and this is because the particles don't spawn fast enough or they are moving too fast you can adjust either of these i'm going to go with how often we spawn the particles so let's change this one to 40 and see how that looks and it's getting a bit better there's still some gaps so let's change the speed of it to negative one and let's try this now and there we go this looks much better there are still some gaps but for now i'm not going to worry about them okay we are almost done the last thing we have to do is to draw our cat so for that i'm just going to create a new method that i call draw neon cat it doesn't need any parameters and all we're going to do in here is to create a rectangle around the cat so neon surface dot get rekt and we put the center to where our mouse is so pygame dot mouse dot get pause and once we have that we just use screen dot blit and neon surface and neon wrecked and then in our mid method i'm just going to call self dodge draw neon cat and then we should be good to go so let's try and well it's a bit large but i guess you get the principle i think i made the particles a bit too small so let's work on that really fast so for the particles i went with eight so far let's turn it up to twelve and then when we spawn them this is going to be negative six negative eighteen and negative thirty and then we get all numbers and positive so 18 and 30. and now let's try this again and there we go this feels much better and you do have to be aware if i move the cat around randomly on the screen this kind of breaks so you do have to be careful about how you use it but if you only move very slowly this creates a very nice effect that looks pretty cool so alright this finishes the nyankat and for the final one we are going to create a couple of stars around our mouse so we actually going to spawn images instead of just drawing with pygame and all of this is still going to be incredibly similar compared to the particle we have created in the beginning of this video but now instead of drawing circles around each point we are going to blit an image on this position but that is basically the entire difference so let's jump right in and let's see how this works so here i'm back in my code and now what i want to do is to copy our original class again and let me rename it to particle star and before i do anything else i am going to create particle 3 and create the actual object from particle from particle star and then in our particle event i'm going to call particle 3 dot at particles and then in our actual game loop i want to call particle 3 dot emit so exactly the same for now as we have done with the original particles but i'm going to make quite a few changes now so again let's go for it step by step i am still going to keep self.particles but now i'm going to add self.surface and this is going to be an image of our star meaning i have to import an image so pygame.image.load and the image is called star.png and again i use convert alpha to turn it into a file that pygame can work easier with now we need two more things the first one is self dot with so we have to know when we create the particles how wide our surface is going to be so i want to know our self.surface dot get correct and then i want the whiff and i want to do the same thing for the height so just copy the entire thing and change width to height so now we have the basic attributes that we need to create a couple of particles that are going to be rectangles and then later on we use those rectangles to bleed the surface on each rectangle again i'm going to start working with add particles and here we still want to get our x position from our most position but again if we were to just use this position our mouse would be on the top left of the star not in the center so we have to subtract something and what we have to subtract is self dot with divided by two and the same for the y position so self dot height divided by two next up the radius we can just get rid of because we're not going to need it anymore and direction x and direction y i'm going to keep and there's one more thing i do want to add and that's a lifetime and this one is going to be a rant in between let's say four and ten so this is going to be how long our star is going to live but all right that's all we needed all we have to do now is to create a particle rect and this one again is going to be pygame dot rect and we are going to use position x position y and self dot with and self dot height and the particle circle we can just get rid of because we don't need it anymore and now when we are appending the particle i want to get our particle particle rect i want to get the direction x and the direction y and i need the lifetime and well that is basically it so now we can look at the emit method again and make the changes we need to do and it's not going to be that many actually so we're going to start with particle.x and now instead of 1 i'm going to change this to x and this one is going to be y so we are targeting this particle rectangle and targeting the x and the y position and with that we have to add either the direction x or the direction y so this is going to be particle again for x is going to be 1 and for y it's going to be 2. and then we have to look at the lifetime to kill off the particle at some point so if look at particle 3 and i'm just going to subtract 0.2 again but you could change this number to whatever you want it just see what feels good and now this entire line we can get rid of and replace it with screen dot split because now we want to blit an image and what we want to blit is self dot surface and the position we want to get is particle zero so this particle zero that we're moving around is just a rectangle and this rectangle has the same dimensions as our surface so we can use it to put the surface in the place of the particle or the rectangle of the particle and that would basically be it the last thing we have to do is get our particles again and work with this if condition and what i want to look for is the lifetime here so particle 3 and if it's greater than 0 we are going to keep it and with that we should be good to go so let's try and we are getting an arrow that lifetime this should be random dot rending now let's try this again there we go and we have stars around our mouth screen so that's basically it and again python complains about an implicit conversion so i'm gonna put integer around the position when we are going to create our rectangle so now let's try this again and there we go the warnings anymore and we have our stars that disappear and work perfectly well so i hope you found this helpful and i'll see you around
