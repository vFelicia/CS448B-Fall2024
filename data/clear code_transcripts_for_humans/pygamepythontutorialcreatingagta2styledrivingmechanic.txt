With timestamps:

00:00 - hello in this tutorial we are going to
00:02 - create this it's a pretty
00:04 - straightforward top-down driving game
00:06 - where we can press the space button and
00:08 - we start the car and it drives and we
00:10 - can press left and right to move the car
00:12 - left and right and we have fairly decent
00:14 - driving mechanics for the car not
00:16 - perfect but it's working for basic
00:18 - driving mechanic and most importantly we
00:22 - are going to use vectors to derive the
00:23 - car which is a whole new topic and
00:26 - Piegan that I'm going to talk a little
00:27 - bit about let's jump right in and this
00:30 - is a topic that is getting a little bit
00:32 - more advanced than pygame so if you are
00:34 - completely new to the program you
00:36 - probably want to check out these two
00:37 - videos at the very least a basic
00:39 - introduction to PI game and an
00:41 - introduction to sprites and PI game both
00:43 - are really helpful for you to understand
00:45 - what's going on in this video and
00:46 - besides that I also made a video about
00:48 - rotating stuff in PI game which I'm also
00:51 - going to use in this video so these
00:53 - videos are going to help on more
00:54 - specifics so here we have a very simple
00:57 - setup for pi game and we already have
00:59 - one sprite class that I have called the
01:01 - car and this is going to be our main car
01:03 - and for now it doesn't do much it just
01:06 - gets a surface that are called original
01:08 - image that imports an audio PNG that is
01:11 - in the same folder as the code they put
01:13 - this original image on an image so that
01:15 - I was practice the surface and what I
01:17 - forgot to add here is self-direct it's
01:20 - after image don't get rekt and center I
01:24 - think I put it at at size 6 and 40 and
01:27 - friend at 60 so basically what happens
01:30 - is that we are importing an image
01:32 - putting this image on the screen and
01:33 - putting a rectangle around the screen
01:35 - it's essentially a simple sprite class
01:36 - and the only reason I separated these
01:39 - two lines is because we need to rotate
01:41 - this surface and whenever we rotate
01:43 - something in PI game it loses a bit of
01:45 - quality and to prevent a quality loss we
01:48 - split these two two different files that
01:50 - we can rotate one and safety image in
01:52 - another surface
01:53 - I explained the entire logic in another
01:55 - video check this one out if you want
01:56 - more details on this but besides that
01:59 - our code so far doesn't do anything
02:00 - because right now we are not using the
02:02 - class whatsoever and we're not even
02:04 - drawing a background image let's start
02:06 - with that one actually the first way I
02:08 - want to do is import a background image
02:09 - and that's already giving us the track
02:11 - we want to drive on and I've got this
02:13 - one
02:14 - b:g track and this is PI game image load
02:19 - and I caught the file track dot PNG and
02:24 - this PNG file I'm just going to put as a
02:27 - backward picture so screen clip BG track
02:33 - beyond this code track and I'm gonna put
02:37 - this on the top left of the screen and
02:41 - we already have our racing track
02:44 - obviously nothing's going to happen if
02:46 - we don't drive on it it's just a picture
02:47 - but that's not the important part the
02:50 - important part is our car itself and for
02:53 - now let's just create the car and put it
02:56 - on the screen and then we can worry
02:57 - about actually moving it and first thing
03:00 - I want to do is to create our new car
03:03 - I'm going to graders with car and
03:05 - actually doesn't need a width and height
03:08 - that was the leftover so that's only to
03:12 - create the car now we need to put this
03:14 - car into a class and I'm going to call
03:17 - this cars and this is per game don't
03:21 - sprite dot group single and then car
03:28 - store add car so this is a pretty basic
03:31 - setup for a group we first create a
03:33 - sprite object and we create a group and
03:35 - then we add the sprite object to the
03:37 - group and now in our game loop we need
03:41 - cars to draw and on what surface you
03:45 - want to draw on the screen and with that
03:48 - we can see our car on the screen it's
03:50 - quite large right now we're going to
03:52 - work on that in just a bit
03:53 - there's first one more thing that we can
03:55 - simplify this thing quite a bit because
03:58 - I really need is to put this car into
04:01 - this group single because whatever is
04:03 - being passed into here is automatically
04:05 - added to this group and once we have
04:08 - that we can get rid of these two lines
04:09 - and call this car and car and this
04:14 - simplifies the entire code quite a bit
04:16 - and it's much easier way of writing all
04:18 - of this so if I run the code now we get
04:20 - the very same result and with that one
04:22 - done let's actually work on the car
04:24 - movement and rotation
04:25 - and I'm going to start by just rotating
04:27 - the carb if I press left and right and
04:30 - after that's done we're going to get to
04:32 - moving the car
04:32 - so let's rotate the car and there are
04:35 - couple more attributes I need to do this
04:37 - the first one is self-taught angle and
04:40 - by default this is going to be zero so
04:43 - this is the angle the car is going to be
04:45 - looking at and the second one is self
04:47 - dot I call this rotation speed and this
04:52 - is effectively how fast the car can
04:54 - rotate and let me write this an all
04:56 - lowercase letters and I went with 1.8
05:00 - you can go with the lower or higher
05:02 - speed just experiment with the code and
05:04 - see what it looks good and this one
05:06 - right here people need that it's self
05:07 - dot direction and by default this is
05:10 - none and this is the attribute that we
05:12 - are going to influence with our keyboard
05:14 - input which is going to happen down here
05:18 - in the event loop and what I want to do
05:21 - is if event dot type is equal to PI game
05:25 - thoughts key down so if you press any
05:28 - button down and then if even dot key
05:32 - it's equal to PI game dot okay right and
05:40 - we also want one four key left and then
05:47 - we want to do the same thing when we
05:48 - lift the key up again and I'm going to
05:50 - add code to all of these in just a bit
05:52 - so key up so now we need to add code to
05:55 - these four different lines to actually
05:58 - give some indication of what the car
06:00 - needs to do when we press a button and
06:02 - here's the logic I came up with our
06:03 - direction can take three different
06:05 - values 1 0 and minus 1 if it's 1 then
06:10 - the cars going to rotate right if it's
06:12 - minus 1 the cars going to rotate left
06:13 - and if it's 0 it's not going to rotate
06:15 - at all and whenever we press the right
06:18 - key on our keyboard we're going to add
06:20 - one to our direction and when we left up
06:23 - the right key we're going to subtract
06:24 - one from it and then the opposite logic
06:26 - for key left and the major reason for
06:29 - that is that if you press both left and
06:31 - right you're going to get 0 so the cars
06:33 - moving in a straight line
06:34 - and now let's implement all of this and
06:36 - the one mistake I make this shouldn't be
06:38 - none the ship is
06:39 - obviously so now let's go for the step
06:42 - by step the first thing I want to do is
06:44 - only press key right I want to add one
06:46 - to this direction
06:47 - and to get to this attribute we first
06:49 - need to target the group itself and then
06:52 - the sprite inside of this group single
06:54 - so what we need is car dot sprite and
06:57 - this is something that only works for
06:59 - single groups if you have a normal
07:01 - sprite group this is not going to work
07:03 - because all in a single group can you
07:04 - target the sprite inside of the group
07:06 - but now we have the object itself so now
07:08 - we can just go direction and what I want
07:11 - is classical one and then four key left
07:14 - we have the exact opposite that we want
07:17 - minus equal one and then four key right
07:22 - we want minus one so we do the opposite
07:24 - and then four key left we want plus one
07:29 - again so with this logic what's
07:31 - basically going to happen if we press
07:33 - key right is gonna be one and if we lift
07:35 - up Q right again it's gonna get minus
07:37 - one so this direction is going to be
07:39 - zero again so effectively when we press
07:41 - key right the cars going to move right
07:43 - if we lift up the right key again the
07:45 - cars going to move straight again
07:46 - because Direction is zero and with that
07:49 - one we actually have to implement some
07:50 - logic that if this direction has
07:52 - different values we are getting
07:53 - different directions and for that I need
07:55 - to define a new method a called set
07:59 - rotation it needs serve as always as an
08:02 - argument and in here we are going to
08:04 - need quite a few different if statements
08:06 - and the first one is if self dot the
08:10 - erection is equal to one so we're going
08:13 - to move right then self dot angle is
08:16 - going to be minus equal itself thought
08:18 - rotation speed and the reason why this
08:21 - is negative is because pygame rotates
08:24 - counterclockwise so if you want to go
08:26 - right you have to go negative if you go
08:27 - left you have to go positive and going
08:30 - left is exactly what we are going to do
08:31 - next so self dot direction is negative
08:35 - one then we want to add towards our
08:38 - angle but for now our angle is just a
08:41 - value we have to apply this value to our
08:44 - image and this is going to come next
08:48 - karna go self dot image is equal to PI
08:53 - game transform dot bro to zoom and again
08:59 - for the entire rotation stuff I've made
09:01 - a separate video for this if you're
09:03 - confused about the logic here check out
09:05 - the other tutorial is going to help
09:06 - immensely to explain all of this in much
09:08 - more detail
09:09 - alright this rotor zoom takes the
09:12 - surface and it gives us new surface that
09:14 - we're going to store on the image and
09:15 - then this image is going to be shown to
09:17 - the user in the end and the surface I
09:19 - want is self thoughts or regional image
09:23 - and next up we need the amount of
09:26 - rotation which is softer angle so self
09:29 - dot and go and then since row tourism
09:32 - can both rotate and scale we need to
09:34 - scale which in our case is going to be
09:37 - 0.25 and with that we would already be
09:40 - getting a car that is rotating left and
09:42 - right and is much smaller but there's
09:45 - one more line we need and that is self
09:46 - direct self image get rekt and the
09:54 - center is going to be self directed
09:57 - center basically what this line is for
10:00 - is that whenever we rotate something in
10:02 - pygame we change the focal point so the
10:04 - point will be rotated around and to keep
10:06 - it in the center we take the center from
10:08 - the last rectangle and applied to direct
10:10 - angle we create from this new image but
10:13 - with that one we have a rotation so if I
10:16 - create an update method now and go with
10:21 - self dot set rotation and in the code I
10:28 - also need to card update and now this
10:33 - should be working so let's try it and we
10:35 - have an error because I have a typo so
10:39 - let's try to get now and we have another
10:42 - typo because we copied the line okay and
10:46 - now I pressed right we move to the right
10:49 - if I press left we move to left so this
10:51 - is a good start but now II to cover
10:53 - another subject now let's say when I
10:56 - press space I move the car forwards in
10:58 - the direction that is facing right now
11:00 - and for that we need vectors and I
11:03 - haven't covered vectors yet but they are
11:05 - quite important for game development so
11:07 - let's talk about 2d vectors effectively
11:10 - what they are is a line in a 2d space so
11:13 - you start from one point and you end up
11:15 - in a different point and they only
11:17 - really have two major attributes one is
11:19 - the magnitude so how long the line is
11:21 - and then you have an angle so what
11:23 - rotation you have and then this entire
11:25 - vector can be expressed with two numbers
11:27 - how far you go in the x-direction and
11:29 - how far you go in the y-direction and
11:31 - then this vector does consists of these
11:33 - two numbers and this vector you can use
11:35 - in lots of different circumstances and
11:36 - there are lots of inbuilt functions into
11:39 - PI game to make use of it quite a bit
11:40 - the way we are going to use it is that
11:43 - we are going to rotate this vector in a
11:45 - certain direction which ever the car is
11:47 - facing in my press space we want to move
11:50 - the car in direction this vectors facing
11:52 - but this is only a very basic
11:54 - application of vectors check out other
11:56 - tutorials there's lots more stuff you
11:58 - can do with vectors they are incredibly
12:01 - powerful but in our case we just want to
12:03 - move the car so let's implement all of
12:05 - that so here I'm back in my code and let
12:08 - me close the rotation method because we
12:10 - don't need it anymore and they had two
12:12 - more attributes I want to add to it the
12:14 - first one is the actual vector and this
12:16 - is going to be self thought I called it
12:20 - forward and to create a vector and
12:23 - pygame put it PI game dot math the
12:25 - vector 2 so this is a two-dimensional
12:29 - vector and the two-dimensional vector
12:31 - has two attributes and X and the y
12:33 - coordinate so basically how far'd must
12:35 - in our resulting space and how far moves
12:37 - in the vertical space and the my case I
12:39 - want to go with zero and minus one and
12:42 - what this means is that we don't move on
12:44 - your horizontal space and in the
12:46 - vertical space we're going upwards
12:47 - because minus 1 and PI key must always
12:49 - upwards and the reason I've chosen those
12:53 - two is because when I run the game by
12:55 - default or a car is pointing upwards and
12:57 - that's literally the only reason and
13:00 - besides that I also want one attribute
13:05 - are called active and by default this
13:07 - one is false and when this one is true I
13:10 - want to move the car forwards so this is
13:12 - basically direction
13:13 - if this one is true when I move a
13:15 - certain amount of pixels in this
13:16 - direction and the first we need is some
13:18 - input to make this true which happens
13:20 - again down here in the event loop and
13:22 - what I want to do is if event dot T is
13:25 - equal to PI game dot k space and if that
13:32 - is true then I want card dot sprite dog
13:34 - active is equal to true and then when we
13:41 - lift up the key then it's going to get
13:43 - to false so all that happens is if you
13:46 - press space then active becomes true if
13:48 - we lift up space then it becomes false
13:50 - again so the car is only going to drive
13:52 - when we press the spacebar once we lift
13:54 - the space bar the car stops moving it's
13:57 - not the most realistic kind of car
13:58 - mechanic but it's a basic start now we
14:02 - need to give our car a method that it
14:05 - moves in the direction of the vector and
14:06 - for that we are going to need a couple
14:09 - of wings let's go for them step-by-step
14:10 - the first one is a method I called get
14:16 - rotation and this one itself as usual
14:19 - and this method is to rotate this vector
14:21 - in the direction the car is facing so I
14:24 - may use this rotation here we only
14:26 - rotate the picture of the car but to
14:28 - move it in a certain direction we also
14:30 - have to rotate this vector by the same
14:32 - amount and then it's going to look quite
14:34 - similar so if self dot row tation is
14:41 - equal to 1 then we want to move this
14:45 - vector to the right and this happens
14:48 - with self dot forward dot rotate IP and
14:56 - I pee standing this vector in the same
15:01 - spot and it just needs one argument and
15:03 - it's by how much we want to rotate it I
15:05 - want to rotate this thing by self dot
15:08 - rotation speed and that's all we need to
15:11 - rotate the vector to the right now if I
15:13 - copy this we the same logic for the left
15:16 - so if this one is minus 1 and this also
15:19 - to be negative because we're moving it
15:21 - left and that's literally all we need to
15:23 - rotate this vector this one here now we
15:26 - two actually
15:27 - this vector to our car and for that I'm
15:30 - going to use another method that I
15:32 - called excel rate
15:35 - Osen itself as usual and aletan here is
15:39 - if self-protective so if it's true then
15:42 - self dot rec center plus equal self dot
15:48 - forward and that is all we need so now
15:51 - in our update method I want to add a
15:54 - self dot get rotation and self self dot
16:01 - accelerate and now let's try this and we
16:06 - get an error because this shouldn't be
16:07 - rotation this should be direction I am
16:11 - making it a ton of type is today so
16:13 - let's try it again and here we go if I
16:16 - type now we are moving upwards and we
16:19 - have a very weird movement dynamic it
16:22 - kind of works but not really and this
16:24 - can be fixed quite easily so let me
16:26 - explain what is happening right now when
16:29 - we applied a vector the numbers inside
16:31 - of the vector of really small so we have
16:33 - 0 and minus 1 and if you rotate them
16:36 - they might get even smaller so minus 1
16:38 - might become something like minus 0.5
16:40 - and since we are still moving in pixels
16:42 - this would not move the car at all and
16:45 - that is because for pygame these numbers
16:47 - are so small that it basically doesn't
16:48 - register them so just ignores them so
16:51 - for quite a few numbers the rotation is
16:53 - going to be ignored because the numbers
16:54 - are too small but this can be fixed
16:56 - really easily
16:57 - all we need is to multiply a vector by
16:58 - basically any number I went with 5 and
17:02 - if I run this code now we have our car
17:05 - mechanic this is actually working quite
17:07 - well and yeah this works as intended so
17:12 - it's not the most perfect car mechanic
17:14 - and there are a couple of bucks in there
17:16 - but it's a pretty good beginning to get
17:18 - started on car mechanics so I hope that
17:20 - was helpful and let me know if you have
17:22 - questions about it

Cleaned transcript:

hello in this tutorial we are going to create this it's a pretty straightforward topdown driving game where we can press the space button and we start the car and it drives and we can press left and right to move the car left and right and we have fairly decent driving mechanics for the car not perfect but it's working for basic driving mechanic and most importantly we are going to use vectors to derive the car which is a whole new topic and Piegan that I'm going to talk a little bit about let's jump right in and this is a topic that is getting a little bit more advanced than pygame so if you are completely new to the program you probably want to check out these two videos at the very least a basic introduction to PI game and an introduction to sprites and PI game both are really helpful for you to understand what's going on in this video and besides that I also made a video about rotating stuff in PI game which I'm also going to use in this video so these videos are going to help on more specifics so here we have a very simple setup for pi game and we already have one sprite class that I have called the car and this is going to be our main car and for now it doesn't do much it just gets a surface that are called original image that imports an audio PNG that is in the same folder as the code they put this original image on an image so that I was practice the surface and what I forgot to add here is selfdirect it's after image don't get rekt and center I think I put it at at size 6 and 40 and friend at 60 so basically what happens is that we are importing an image putting this image on the screen and putting a rectangle around the screen it's essentially a simple sprite class and the only reason I separated these two lines is because we need to rotate this surface and whenever we rotate something in PI game it loses a bit of quality and to prevent a quality loss we split these two two different files that we can rotate one and safety image in another surface I explained the entire logic in another video check this one out if you want more details on this but besides that our code so far doesn't do anything because right now we are not using the class whatsoever and we're not even drawing a background image let's start with that one actually the first way I want to do is import a background image and that's already giving us the track we want to drive on and I've got this one bg track and this is PI game image load and I caught the file track dot PNG and this PNG file I'm just going to put as a backward picture so screen clip BG track beyond this code track and I'm gonna put this on the top left of the screen and we already have our racing track obviously nothing's going to happen if we don't drive on it it's just a picture but that's not the important part the important part is our car itself and for now let's just create the car and put it on the screen and then we can worry about actually moving it and first thing I want to do is to create our new car I'm going to graders with car and actually doesn't need a width and height that was the leftover so that's only to create the car now we need to put this car into a class and I'm going to call this cars and this is per game don't sprite dot group single and then car store add car so this is a pretty basic setup for a group we first create a sprite object and we create a group and then we add the sprite object to the group and now in our game loop we need cars to draw and on what surface you want to draw on the screen and with that we can see our car on the screen it's quite large right now we're going to work on that in just a bit there's first one more thing that we can simplify this thing quite a bit because I really need is to put this car into this group single because whatever is being passed into here is automatically added to this group and once we have that we can get rid of these two lines and call this car and car and this simplifies the entire code quite a bit and it's much easier way of writing all of this so if I run the code now we get the very same result and with that one done let's actually work on the car movement and rotation and I'm going to start by just rotating the carb if I press left and right and after that's done we're going to get to moving the car so let's rotate the car and there are couple more attributes I need to do this the first one is selftaught angle and by default this is going to be zero so this is the angle the car is going to be looking at and the second one is self dot I call this rotation speed and this is effectively how fast the car can rotate and let me write this an all lowercase letters and I went with 1.8 you can go with the lower or higher speed just experiment with the code and see what it looks good and this one right here people need that it's self dot direction and by default this is none and this is the attribute that we are going to influence with our keyboard input which is going to happen down here in the event loop and what I want to do is if event dot type is equal to PI game thoughts key down so if you press any button down and then if even dot key it's equal to PI game dot okay right and we also want one four key left and then we want to do the same thing when we lift the key up again and I'm going to add code to all of these in just a bit so key up so now we need to add code to these four different lines to actually give some indication of what the car needs to do when we press a button and here's the logic I came up with our direction can take three different values 1 0 and minus 1 if it's 1 then the cars going to rotate right if it's minus 1 the cars going to rotate left and if it's 0 it's not going to rotate at all and whenever we press the right key on our keyboard we're going to add one to our direction and when we left up the right key we're going to subtract one from it and then the opposite logic for key left and the major reason for that is that if you press both left and right you're going to get 0 so the cars moving in a straight line and now let's implement all of this and the one mistake I make this shouldn't be none the ship is obviously so now let's go for the step by step the first thing I want to do is only press key right I want to add one to this direction and to get to this attribute we first need to target the group itself and then the sprite inside of this group single so what we need is car dot sprite and this is something that only works for single groups if you have a normal sprite group this is not going to work because all in a single group can you target the sprite inside of the group but now we have the object itself so now we can just go direction and what I want is classical one and then four key left we have the exact opposite that we want minus equal one and then four key right we want minus one so we do the opposite and then four key left we want plus one again so with this logic what's basically going to happen if we press key right is gonna be one and if we lift up Q right again it's gonna get minus one so this direction is going to be zero again so effectively when we press key right the cars going to move right if we lift up the right key again the cars going to move straight again because Direction is zero and with that one we actually have to implement some logic that if this direction has different values we are getting different directions and for that I need to define a new method a called set rotation it needs serve as always as an argument and in here we are going to need quite a few different if statements and the first one is if self dot the erection is equal to one so we're going to move right then self dot angle is going to be minus equal itself thought rotation speed and the reason why this is negative is because pygame rotates counterclockwise so if you want to go right you have to go negative if you go left you have to go positive and going left is exactly what we are going to do next so self dot direction is negative one then we want to add towards our angle but for now our angle is just a value we have to apply this value to our image and this is going to come next karna go self dot image is equal to PI game transform dot bro to zoom and again for the entire rotation stuff I've made a separate video for this if you're confused about the logic here check out the other tutorial is going to help immensely to explain all of this in much more detail alright this rotor zoom takes the surface and it gives us new surface that we're going to store on the image and then this image is going to be shown to the user in the end and the surface I want is self thoughts or regional image and next up we need the amount of rotation which is softer angle so self dot and go and then since row tourism can both rotate and scale we need to scale which in our case is going to be 0.25 and with that we would already be getting a car that is rotating left and right and is much smaller but there's one more line we need and that is self direct self image get rekt and the center is going to be self directed center basically what this line is for is that whenever we rotate something in pygame we change the focal point so the point will be rotated around and to keep it in the center we take the center from the last rectangle and applied to direct angle we create from this new image but with that one we have a rotation so if I create an update method now and go with self dot set rotation and in the code I also need to card update and now this should be working so let's try it and we have an error because I have a typo so let's try to get now and we have another typo because we copied the line okay and now I pressed right we move to the right if I press left we move to left so this is a good start but now II to cover another subject now let's say when I press space I move the car forwards in the direction that is facing right now and for that we need vectors and I haven't covered vectors yet but they are quite important for game development so let's talk about 2d vectors effectively what they are is a line in a 2d space so you start from one point and you end up in a different point and they only really have two major attributes one is the magnitude so how long the line is and then you have an angle so what rotation you have and then this entire vector can be expressed with two numbers how far you go in the xdirection and how far you go in the ydirection and then this vector does consists of these two numbers and this vector you can use in lots of different circumstances and there are lots of inbuilt functions into PI game to make use of it quite a bit the way we are going to use it is that we are going to rotate this vector in a certain direction which ever the car is facing in my press space we want to move the car in direction this vectors facing but this is only a very basic application of vectors check out other tutorials there's lots more stuff you can do with vectors they are incredibly powerful but in our case we just want to move the car so let's implement all of that so here I'm back in my code and let me close the rotation method because we don't need it anymore and they had two more attributes I want to add to it the first one is the actual vector and this is going to be self thought I called it forward and to create a vector and pygame put it PI game dot math the vector 2 so this is a twodimensional vector and the twodimensional vector has two attributes and X and the y coordinate so basically how far'd must in our resulting space and how far moves in the vertical space and the my case I want to go with zero and minus one and what this means is that we don't move on your horizontal space and in the vertical space we're going upwards because minus 1 and PI key must always upwards and the reason I've chosen those two is because when I run the game by default or a car is pointing upwards and that's literally the only reason and besides that I also want one attribute are called active and by default this one is false and when this one is true I want to move the car forwards so this is basically direction if this one is true when I move a certain amount of pixels in this direction and the first we need is some input to make this true which happens again down here in the event loop and what I want to do is if event dot T is equal to PI game dot k space and if that is true then I want card dot sprite dog active is equal to true and then when we lift up the key then it's going to get to false so all that happens is if you press space then active becomes true if we lift up space then it becomes false again so the car is only going to drive when we press the spacebar once we lift the space bar the car stops moving it's not the most realistic kind of car mechanic but it's a basic start now we need to give our car a method that it moves in the direction of the vector and for that we are going to need a couple of wings let's go for them stepbystep the first one is a method I called get rotation and this one itself as usual and this method is to rotate this vector in the direction the car is facing so I may use this rotation here we only rotate the picture of the car but to move it in a certain direction we also have to rotate this vector by the same amount and then it's going to look quite similar so if self dot row tation is equal to 1 then we want to move this vector to the right and this happens with self dot forward dot rotate IP and I pee standing this vector in the same spot and it just needs one argument and it's by how much we want to rotate it I want to rotate this thing by self dot rotation speed and that's all we need to rotate the vector to the right now if I copy this we the same logic for the left so if this one is minus 1 and this also to be negative because we're moving it left and that's literally all we need to rotate this vector this one here now we two actually this vector to our car and for that I'm going to use another method that I called excel rate Osen itself as usual and aletan here is if selfprotective so if it's true then self dot rec center plus equal self dot forward and that is all we need so now in our update method I want to add a self dot get rotation and self self dot accelerate and now let's try this and we get an error because this shouldn't be rotation this should be direction I am making it a ton of type is today so let's try it again and here we go if I type now we are moving upwards and we have a very weird movement dynamic it kind of works but not really and this can be fixed quite easily so let me explain what is happening right now when we applied a vector the numbers inside of the vector of really small so we have 0 and minus 1 and if you rotate them they might get even smaller so minus 1 might become something like minus 0.5 and since we are still moving in pixels this would not move the car at all and that is because for pygame these numbers are so small that it basically doesn't register them so just ignores them so for quite a few numbers the rotation is going to be ignored because the numbers are too small but this can be fixed really easily all we need is to multiply a vector by basically any number I went with 5 and if I run this code now we have our car mechanic this is actually working quite well and yeah this works as intended so it's not the most perfect car mechanic and there are a couple of bucks in there but it's a pretty good beginning to get started on car mechanics so I hope that was helpful and let me know if you have questions about it
