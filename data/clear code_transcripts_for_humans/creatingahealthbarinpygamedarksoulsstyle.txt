With timestamps:

00:00 - in this tutorial we are going to be
00:02 - creating health bars in pie game
00:04 - and here's what we are going to be
00:05 - making we will make two health bars
00:07 - the first one is going to be a very
00:09 - static one so
00:10 - it just displays the amount of health
00:12 - you have in a bar
00:14 - but the second one is going to be
00:15 - animated meaning that when you gain or
00:17 - lose health it shows you how much you're
00:19 - gaining how much you are losing
00:21 - and both of these are quite easy to
00:22 - implement so let's jump right in
00:26 - all right so here we are in a very basic
00:28 - setup of pie game
00:30 - and really nothing happened so far if i
00:32 - run
00:33 - this code so far all we can see is a
00:36 - plain window
00:36 - with a white square in the middle it
00:38 - happens to be a pie game sprite
00:40 - but it doesn't need to be the only
00:42 - reason i'm using a pie game sprite is
00:44 - because you would usually use that for
00:46 - main player
00:47 - and a main player would have the health
00:49 - bar so this is why i'm using this
00:51 - but the helper would also work without
00:53 - this kind of class but okay
00:55 - let me close this and let's go for this
00:56 - code really quickly
00:58 - so we're importing pi game and cis we
01:00 - are initiating pi game
01:02 - then we are creating our screen so our
01:03 - main window in my case it's 800 by 800
01:06 - pixels
01:07 - but it's completely irrelevant what
01:08 - dimensions you have choose whatever you
01:10 - want in here
01:11 - then we are creating a clock and then we
01:13 - are creating a player
01:15 - so this player class i can explain that
01:17 - in a second
01:18 - but we are basically creating a group
01:20 - single and instead of that we are
01:21 - creating the player class
01:23 - so nothing complicated after that we
01:26 - have our game loop
01:27 - that doesn't do anything right now we
01:29 - are checking for closing the game
01:31 - then we are filling the screen and we
01:33 - are drawing and updating our player
01:35 - then we are drawing the entire thing and
01:37 - then we control the frame rate
01:39 - so all of this is super basic pie game
01:42 - and if i open our player class in here
01:46 - also nothing difficult is happening we
01:48 - start by inheriting from the sprite
01:50 - class
01:51 - then we are initiating the entire thing
01:53 - we use the super method to get the
01:55 - attributes of the sprite class
01:57 - and then we are creating an image and a
01:59 - rectangle so what the sprite class
02:01 - always needs
02:02 - and then i fill the rectangle so that we
02:05 - have a white square in the middle
02:07 - but you could also add a picture in here
02:08 - or really add all the code for your main
02:10 - player
02:12 - but none of that matters for me so i
02:13 - just filled it with a white color
02:16 - and after that we have the update method
02:17 - that right now doesn't do anything
02:20 - but we do need it because down here we
02:22 - call playerupdate
02:24 - but all right so this is a very basic
02:27 - setup
02:28 - so let's create a basic health bar the
02:30 - one without animations
02:32 - and the logic for that one is actually
02:34 - remarkably simple
02:36 - effectively the health bar only has to
02:37 - be as large as our health is
02:39 - because that's what it indicates and the
02:41 - health bar also is just a plain
02:43 - rectangle so we can use pygm's rec class
02:45 - for it
02:46 - so really all we have to create is a
02:48 - rectangle with the width
02:50 - of our health and then depending on how
02:52 - much health we have
02:54 - this bar becomes longer or shorter
02:55 - because its width is defined by our
02:57 - player health
02:59 - then that's really all we need so let's
03:01 - implement all of this
03:03 - so here i'm back in my code and i first
03:06 - have to create some new attributes
03:08 - the first one is going to be self dot
03:10 - current
03:12 - health so this is the amount of health
03:15 - we want to track
03:16 - in my case i just choose 200 but this is
03:19 - basically random
03:21 - then i want to have another attribute
03:23 - that is self.maximum
03:26 - health so the amount of maximum health
03:29 - we can have
03:30 - and in my case i have chosen one
03:32 - thousand but again this number you can
03:34 - choose basically whatever you want
03:36 - and then i need another attribute that
03:38 - is self dot
03:40 - health bar length
03:43 - so this is going to be in pixels how
03:45 - long our health bar is
03:47 - and in my case i've chosen 400 so it's
03:50 - about half as long as the entire width
03:52 - of the screen
03:54 - so these are the very basic attributes
03:56 - we need
03:57 - but there's one more attribute that we
03:59 - do need that right now
04:01 - our health by length is 400 pixels so
04:03 - that's a distance
04:04 - but then we have our maximum health that
04:06 - could be 1000
04:07 - and our health that is 200 so these two
04:11 - measure our health and this one measures
04:13 - a distance
04:14 - so there's some kind of disconnect that
04:17 - we have to make them relate to each
04:18 - other in some way
04:20 - that when we get to a maximum half of
04:22 - 1000 our alpha should be 400 pixels long
04:25 - and then when our health is 500 this one
04:28 - should only be 200 pixels long
04:30 - so we have to make sure that these two
04:32 - attributes relate to this one
04:34 - so we have to convert our health to the
04:35 - health bar length
04:37 - but this one is quite easy to get and i
04:40 - call this attribute
04:41 - self dot elf ratio
04:45 - and to get it all we need is self dot
04:48 - maximum health divided by self dot
04:51 - elf bar length and this one would
04:55 - convert
04:55 - our health to a distance of the health
04:57 - bar length
04:59 - you will see in a second what this means
05:00 - specifically but for now
05:02 - just take it as it is so now we have
05:05 - some health
05:06 - but we don't have any way to influence
05:08 - our health
05:09 - so all of these numbers are completely
05:11 - static which obviously
05:13 - is not great so to fix that i'm going to
05:15 - create some more methods
05:17 - that can add or subtract health and the
05:20 - first one is called
05:21 - get damage and then here i want our self
05:24 - that always is necessary
05:26 - and then i want an amount so how much
05:29 - damage we are going to take
05:31 - and in here what i want to do is if
05:35 - self dot current health
05:38 - is greater than zero then i want
05:41 - self.current health minus equal
05:45 - the amount of damage that we would
05:47 - receive
05:49 - and we can also add ifself.c
05:53 - is smaller or equal to zero then
05:57 - self.currenthealth
05:58 - is equal to zero just to make sure we
06:00 - don't go below zero
06:02 - but obviously in a real game if you come
06:04 - to this state the player is dead
06:06 - but well for now doesn't really matter
06:10 - so now we have our damage and then we
06:12 - also need
06:13 - our get health and this one works the
06:17 - same way
06:18 - so we have self and we have amount
06:21 - and if self dot current health
06:24 - is smaller than self dot maximum health
06:29 - then self dot current health plus equal
06:32 - amount and if
06:35 - self dot current health is greater or
06:38 - equal to
06:39 - self dot maximum health then i want self
06:43 - dot current health to be equal to
06:47 - self.maximum health
06:50 - so really all that happens in these two
06:53 - methods
06:54 - is that we ever add or subtract from our
06:56 - current health
06:57 - and if it's below zero we set it to zero
07:00 - or if it's greater than our maximum
07:02 - health then we set it to the maximum
07:03 - health so effectively
07:05 - all we are doing is we add or subtract
07:07 - and we keep it within a bound of zero
07:09 - and our maximum health
07:11 - and with that covered we need some way
07:13 - to call
07:14 - these two methods so we can actually
07:16 - test our health bar
07:17 - and in my case all i'm going to do is to
07:20 - check if we're pressing up or down on
07:21 - our keyboard
07:22 - but in a real game obviously you would
07:24 - want to trigger them in different ways
07:26 - like if the player is hit by an enemy or
07:29 - something like that
07:30 - so in our event loop if event
07:33 - dot type is equal to
07:37 - pi game dot key down
07:41 - and if event dot e
07:45 - is equal to pygame dot
07:48 - a up then i want to call
07:53 - our player group i want to target the
07:56 - sprite
07:57 - and then what to call get health
08:01 - and in here you could add in basically
08:03 - any number i'm going to go with 200
08:08 - and now i just copied the entire thing
08:11 - let me do it
08:12 - properly
08:17 - and this is going to be a down and it's
08:20 - going to be
08:21 - get damage so
08:24 - with that one covered we have a way to
08:26 - call
08:27 - our health bar so now we can close this
08:30 - entire thing
08:31 - and never look at it again and same for
08:34 - these two
08:35 - just for simplicity so the code doesn't
08:38 - look too messy so
08:40 - now we can actually get to creating our
08:42 - health bar
08:44 - and i am going to create a new method
08:46 - for that then i'm going to call
08:48 - basic health
08:51 - and needs self as usual and then in the
08:54 - update method
08:55 - i'm also going to call self dot
08:58 - basic health and in here the actual
09:01 - logic is remarkably easy
09:04 - all we have to do is use pygm draw.rect
09:08 - so we are drawing a rectangle and now we
09:11 - need a couple of attributes
09:12 - the first one is on what surface we want
09:14 - to draw in my case that's going to be
09:16 - screen
09:17 - so our main display surface then we need
09:20 - a color
09:21 - so 255 0 and 0 a basic rgb 2 before red
09:26 - and now we have to create a wrecked
09:28 - object all inside of brackets
09:31 - and the first two attributes are the x
09:32 - and the y coordinate so in my case i
09:34 - just go with 10 and 10.
09:36 - so we are 10 pixels from the top and 10
09:38 - picks from the left
09:39 - super simple stuff and now we need the
09:41 - width and the height
09:44 - and the width is the actually
09:45 - complicated part well it's not really
09:47 - complicated but that's the really
09:49 - interesting part but the height is
09:51 - incredibly easy so let's start with that
09:52 - one
09:53 - because all i want is this thing to be
09:54 - 25 pixels high
09:56 - that's all we needed so the one last
09:58 - thing
09:59 - is that we have to figure out our width
10:02 - and
10:02 - really all i want to have in here is our
10:05 - self
10:06 - dot current health although this would
10:09 - not work well it would work but it
10:11 - wouldn't work properly
10:12 - so let me actually run this thing and
10:14 - let's see if it works so
10:15 - this is working but we can go basically
10:18 - as far as we want
10:20 - well we can't go below zero but it can
10:22 - get as long
10:23 - or while it can get very very long
10:24 - outside of the screen
10:27 - which we don't want we want the maximum
10:28 - health to be 400
10:32 - so what i want is to divide this thing
10:34 - by itself
10:35 - dot our health
10:38 - ratio so that when our maximum health
10:42 - for example
10:43 - is 1000 we would divide it by such
10:45 - number that we get to 400
10:47 - in the end our maximum health so now
10:50 - let's try off this again
10:53 - and now i can't go further than this so
10:55 - and i also can't go less than zero
10:57 - so this seems pretty good
11:01 - but obviously there's something missing
11:04 - that i want to have a white bar
11:05 - around this or well you could have it i
11:07 - think it looks fine by itself already
11:09 - but let's have a white bar around it
11:13 - and for that i'm just going to create a
11:15 - new rectangle so pygame.draw.rect
11:18 - we need the same attributes except this
11:21 - time it's white so 255
11:23 - 255 and 255
11:26 - and for the rectangle this time
11:29 - i want the same x and y coordinates
11:33 - but for the width i want self dot
11:36 - health bar length and the same height
11:40 - but now i'm going to add another
11:42 - attribute that's going for the width of
11:44 - this thing
11:45 - which i'm going to set to 4. and let's
11:48 - run this again
11:49 - there we go now we have a proper area
11:52 - around it
11:53 - and this looks like a pretty useful
11:54 - health bar
11:56 - and just to explain what happened here
11:59 - if you call pygame.direct and you add a
12:02 - line with attribute in the end
12:04 - then pygame is going to draw an empty
12:05 - rectangle just with the line width
12:07 - so this is what we have done here but
12:10 - with that
12:11 - we have our basic health bar so this is
12:14 - already
12:14 - a really useful basic health bar
12:18 - but obviously it doesn't look
12:20 - particularly good
12:21 - so let's create a more fancy one that
12:23 - looks better
12:24 - and for that we are going to need quite
12:26 - a bit more logic
12:28 - so let me explain what's going to happen
12:31 - in the most basic sense we are
12:34 - effectively going to create
12:35 - two rectangles for our health bar
12:38 - the first health bar is pretty much the
12:40 - basic health bar we have already seen
12:42 - so this is just the health but it
12:44 - accounts for how much health we have
12:46 - but then we are going to have a second
12:49 - health bar that shows us the difference
12:50 - between the current health
12:52 - and the health we want to get to and
12:54 - this one is going to be animated
12:56 - and how it animates is that we have two
12:58 - points of health
13:00 - we have our current health and we have
13:01 - our target health
13:03 - and that on every cycle of our game loop
13:05 - we're going to subtract
13:06 - or add a tiny amount to go from our
13:09 - current health to our target health
13:12 - and since the second health bar is on
13:13 - top of the first bar it's going to look
13:15 - like our entire health burst
13:16 - transitioning
13:17 - but this isn't actually what's happening
13:20 - but
13:20 - that's the basic logic let's actually
13:23 - implement all of this
13:24 - so here i'm back in my code and first of
13:27 - all
13:27 - i have to add a couple more attributes
13:31 - the first one and let me put them in the
13:33 - proper place a self.target
13:36 - health and let's set this one for now
13:40 - to 500 and then at the bottom
13:43 - i want self dot alph
13:46 - change speed and i'm going to set this
13:50 - to 5. so this one is going to be how
13:53 - fast our health changes
13:56 - and this is all we need in terms of
13:57 - attributes but
13:59 - in our get damage and get health we have
14:01 - to make some updates
14:03 - because now we don't want to change the
14:05 - current health we want to change our
14:06 - target health
14:08 - so let me copy target health and change
14:11 - all of this
14:11 - to target health
14:16 - so that when our player is hit or gets
14:18 - health we are changing the target health
14:21 - and our current health is going to catch
14:22 - up to the target health
14:24 - so we never actively change our current
14:26 - health we only ever change the target
14:28 - health
14:29 - but okay now we can close those again
14:31 - and for our basic health
14:33 - to keep this one working i would also
14:35 - have to change this to target health
14:38 - but i'm going to comment this out anyway
14:41 - because we're not going to use it
14:42 - anymore
14:42 - but just in case you want to use it make
14:44 - sure this is target health not current
14:45 - health
14:47 - okay let me minimize this as well and
14:49 - now i want to create
14:51 - another method that i
14:54 - called advanced
14:58 - health and in itself as usual and
15:01 - nothing else
15:02 - and now no update method let's call self
15:05 - dot advanced elf
15:09 - so in here we are going to need a couple
15:13 - of things
15:13 - so let me go through them step by step
15:16 - first of all i'm going to create two
15:17 - variables
15:18 - the first one is going to be transition
15:20 - [Music]
15:22 - with and this one is going to be zero
15:26 - and i want to have a transition
15:29 - transition
15:31 - color and this one is going to get an
15:34 - rgb tuple
15:36 - and by default i'm going to make it red
15:39 - and let me explain what this means
15:41 - you remember earlier when i said we are
15:43 - going to create two health bars
15:46 - this one transition color and transition
15:48 - with are going to be the width and the
15:49 - color of the second health bar
15:51 - the one that is supposed to be animated
15:53 - but by default our transition bar should
15:55 - be invisible
15:56 - and to make it invisible is to give it a
15:58 - width of 0
15:59 - and a color of red so the same as our
16:02 - actual health bar
16:03 - so effectively what is happening is that
16:05 - our second health bar
16:06 - is always technically on the screen
16:09 - except that when there is no change to
16:10 - the health it's not visible
16:12 - but we do need variables nonetheless but
16:14 - now we come to the actually interesting
16:16 - bit
16:17 - we calculate the difference between our
16:18 - current health and our target health
16:22 - and this is going to be an if statement
16:24 - that if self
16:25 - dot current health current health
16:30 - is smaller than self. target health
16:34 - and we want to do something and what we
16:37 - want to do
16:38 - is self dot current health plus equals
16:41 - self dot elf change speed
16:45 - so really what happens is if our current
16:47 - health is smaller than the target health
16:49 - we want to add a certain amount to our
16:51 - current health
16:52 - in this case it's going to be five and
16:54 - this keeps on happening
16:55 - as long as the current health is smaller
16:57 - than the target health
16:59 - and while that is the case i want to
17:01 - influence our transition
17:03 - width so this one here by default it's
17:05 - zero
17:06 - but when there's a difference between
17:08 - current health and target health
17:09 - this has to be different from zero and
17:12 - this one
17:13 - should be an integer so i put all of
17:15 - this in there and really all i need is a
17:17 - difference between our target health and
17:19 - our current health
17:20 - so this one is just going to be self dot
17:24 - target health minus self dot
17:27 - current health and as always we have to
17:31 - divide it just like the basic health bar
17:33 - by our health ratio so i'm gonna put all
17:37 - of this
17:37 - again into brackets
17:41 - and divide it by self.health
17:45 - ratio so this entire line is giving us
17:48 - the width between our current health and
17:50 - our target health
17:51 - and makes it relative to the health bar
17:54 - and then for the final bit
17:56 - we have to change the color of the
17:57 - transition bar so right now it's red
18:00 - and in this case we are gaining health
18:02 - so i want to make this green
18:06 - so transition color
18:09 - is going to get an rgb tuple that
18:13 - is plain green so zero 255 and zero
18:18 - and this is all we needed for adding
18:21 - health
18:22 - now i can copy the entire thing
18:26 - and add the logic if we are losing
18:29 - health
18:29 - so if our current health is greater than
18:31 - our target health
18:32 - and if that is the case instead of
18:34 - adding our health speed
18:36 - we are subtracting it or health change
18:38 - speed and this line here actually
18:40 - remains
18:41 - exactly the same and this would still
18:43 - work for the simple reason
18:44 - that rectangles can have a negative
18:46 - width so in this case i'd say our target
18:48 - health is 500 and our current health is
18:50 - 800
18:51 - and this thing would be negative 300. it
18:54 - would just go to the left instead of to
18:56 - the right
18:57 - and the last one we need is to change
18:59 - the color to
19:00 - yellow so this would be 255 for red 255
19:04 - for green
19:05 - and we'll leave blue as zero so this rgb
19:09 - tuple would end up as yellow
19:11 - and with that part covered we are
19:13 - actually almost ready
19:15 - so really all we have to do now is to
19:17 - use all of this information
19:19 - and create two rectangles from it and
19:22 - the first rectangle is
19:23 - basically the same that we have created
19:25 - earlier so really similar to
19:27 - this line here except this time i don't
19:29 - want the line to become too long
19:31 - so i'm going to create the rectangle
19:32 - first by itself and then i'm using the
19:34 - rectangle to draw the actual health
19:36 - indicator
19:37 - so i'm going to create a health
19:40 - rect variable and this one is going to
19:43 - be pygame.rect
19:47 - and in here we again need an x and the y
19:49 - coordinate
19:50 - for the x i'm going to go with 10 and
19:52 - for the y i'm going to go with 45
19:55 - so it's slightly below the original
19:56 - basic health indicator
19:58 - and then again we have the width and the
20:00 - height the height
20:01 - again is just going to be 25 because
20:04 - this one is super easy
20:06 - and for the width we have to do the same
20:08 - thing we've done earlier
20:10 - so it's going to be self dot
20:13 - current health divided by
20:16 - self dot alph ratio
20:20 - but now we are going to need another
20:23 - health bar
20:24 - and that's going to be the transition
20:27 - bar rectangle and
20:30 - here again i'm going to create a pie
20:32 - game.rect
20:34 - and now we need a couple of attributes
20:36 - so we need the x and the y coordinate
20:38 - then we need the width and the height so
20:41 - let's go through them step by step
20:43 - we know why this one is the easiest this
20:45 - one's going to be 45
20:47 - exactly the same as our health bar and
20:50 - the same applies to the height this has
20:51 - to be
20:52 - 25 so the height and the y are super
20:54 - easy to do
20:56 - but now for the x we need to make a
20:57 - slight change that we don't want this
21:00 - bar to start at the beginning of the bar
21:02 - we want it to start wherever our health
21:04 - bar ends
21:06 - and this one we can do with alpha rect
21:09 - dot right so that this bar
21:12 - is always supposed to start with our
21:14 - actual health bar ends and this is going
21:16 - to be the right of the health bar
21:18 - and this one we can target super easily
21:20 - and finally we need our width
21:21 - and this is what we calculated here so
21:23 - this is always going to be
21:24 - this transition width so all i have to
21:27 - do in here
21:28 - is transition with
21:31 - and with that we have our two rectangles
21:34 - so now all that's left to do
21:36 - is to actually draw the two so i want
21:39 - pygame
21:40 - dot draw dots rect
21:43 - it's going to be screen then i want the
21:46 - color
21:46 - for the actual health bar it's going to
21:48 - be 255 0
21:50 - and 0. so it's going to be red and then
21:53 - i have the health bar
21:55 - wrecked so this is our actual health bar
21:59 - then i have pygame.draw.rect it's going
22:02 - to be screen
22:03 - and this time we are drawing the
22:04 - transition rectangle so this one is this
22:06 - transition color
22:08 - so i just copy it and since we are
22:10 - sitting this at every stage
22:12 - it's going to have different colors and
22:14 - now for the actual rectangle this is
22:16 - going to be
22:16 - transition bar rectangle and now
22:20 - finally i want to create the same
22:23 - outline again that we created for the
22:24 - basic health so the white frame
22:26 - around it and for that i need
22:28 - pygame.draw.rect
22:29 - it's going to be screen it is going to
22:32 - be white so 255 255 and 255
22:36 - and now i have to create a new rectangle
22:38 - that's going to be 10 pixels from the
22:40 - left
22:41 - 45 pixels from the top it is going to be
22:44 - self dot elf
22:47 - bar length and that is 25 pixels high
22:51 - and again we need a pixel frame of 4.
22:54 - so this line here is exactly the same
22:58 - as this line here except now it's a bit
23:02 - further down
23:05 - but all right let me run this
23:09 - and see if it's working so we don't get
23:11 - an error message and this already looks
23:13 - pretty good
23:16 - so now i can go up and down and even in
23:18 - the process
23:19 - looks pretty good
23:22 - and since i fixed our self.basic health
23:26 - this one should also work
23:27 - so let's try both of them together
23:31 - and yep looks pretty good
23:35 - arguably the health change is quite slow
23:38 - so you might want to
23:39 - speed this one up a tiny bit but i think
23:42 - by itself this one seems pretty good
23:45 - so hope that was helpful and i'll see
23:47 - you around

Cleaned transcript:

in this tutorial we are going to be creating health bars in pie game and here's what we are going to be making we will make two health bars the first one is going to be a very static one so it just displays the amount of health you have in a bar but the second one is going to be animated meaning that when you gain or lose health it shows you how much you're gaining how much you are losing and both of these are quite easy to implement so let's jump right in all right so here we are in a very basic setup of pie game and really nothing happened so far if i run this code so far all we can see is a plain window with a white square in the middle it happens to be a pie game sprite but it doesn't need to be the only reason i'm using a pie game sprite is because you would usually use that for main player and a main player would have the health bar so this is why i'm using this but the helper would also work without this kind of class but okay let me close this and let's go for this code really quickly so we're importing pi game and cis we are initiating pi game then we are creating our screen so our main window in my case it's 800 by 800 pixels but it's completely irrelevant what dimensions you have choose whatever you want in here then we are creating a clock and then we are creating a player so this player class i can explain that in a second but we are basically creating a group single and instead of that we are creating the player class so nothing complicated after that we have our game loop that doesn't do anything right now we are checking for closing the game then we are filling the screen and we are drawing and updating our player then we are drawing the entire thing and then we control the frame rate so all of this is super basic pie game and if i open our player class in here also nothing difficult is happening we start by inheriting from the sprite class then we are initiating the entire thing we use the super method to get the attributes of the sprite class and then we are creating an image and a rectangle so what the sprite class always needs and then i fill the rectangle so that we have a white square in the middle but you could also add a picture in here or really add all the code for your main player but none of that matters for me so i just filled it with a white color and after that we have the update method that right now doesn't do anything but we do need it because down here we call playerupdate but all right so this is a very basic setup so let's create a basic health bar the one without animations and the logic for that one is actually remarkably simple effectively the health bar only has to be as large as our health is because that's what it indicates and the health bar also is just a plain rectangle so we can use pygm's rec class for it so really all we have to create is a rectangle with the width of our health and then depending on how much health we have this bar becomes longer or shorter because its width is defined by our player health then that's really all we need so let's implement all of this so here i'm back in my code and i first have to create some new attributes the first one is going to be self dot current health so this is the amount of health we want to track in my case i just choose 200 but this is basically random then i want to have another attribute that is self.maximum health so the amount of maximum health we can have and in my case i have chosen one thousand but again this number you can choose basically whatever you want and then i need another attribute that is self dot health bar length so this is going to be in pixels how long our health bar is and in my case i've chosen 400 so it's about half as long as the entire width of the screen so these are the very basic attributes we need but there's one more attribute that we do need that right now our health by length is 400 pixels so that's a distance but then we have our maximum health that could be 1000 and our health that is 200 so these two measure our health and this one measures a distance so there's some kind of disconnect that we have to make them relate to each other in some way that when we get to a maximum half of 1000 our alpha should be 400 pixels long and then when our health is 500 this one should only be 200 pixels long so we have to make sure that these two attributes relate to this one so we have to convert our health to the health bar length but this one is quite easy to get and i call this attribute self dot elf ratio and to get it all we need is self dot maximum health divided by self dot elf bar length and this one would convert our health to a distance of the health bar length you will see in a second what this means specifically but for now just take it as it is so now we have some health but we don't have any way to influence our health so all of these numbers are completely static which obviously is not great so to fix that i'm going to create some more methods that can add or subtract health and the first one is called get damage and then here i want our self that always is necessary and then i want an amount so how much damage we are going to take and in here what i want to do is if self dot current health is greater than zero then i want self.current health minus equal the amount of damage that we would receive and we can also add ifself.c is smaller or equal to zero then self.currenthealth is equal to zero just to make sure we don't go below zero but obviously in a real game if you come to this state the player is dead but well for now doesn't really matter so now we have our damage and then we also need our get health and this one works the same way so we have self and we have amount and if self dot current health is smaller than self dot maximum health then self dot current health plus equal amount and if self dot current health is greater or equal to self dot maximum health then i want self dot current health to be equal to self.maximum health so really all that happens in these two methods is that we ever add or subtract from our current health and if it's below zero we set it to zero or if it's greater than our maximum health then we set it to the maximum health so effectively all we are doing is we add or subtract and we keep it within a bound of zero and our maximum health and with that covered we need some way to call these two methods so we can actually test our health bar and in my case all i'm going to do is to check if we're pressing up or down on our keyboard but in a real game obviously you would want to trigger them in different ways like if the player is hit by an enemy or something like that so in our event loop if event dot type is equal to pi game dot key down and if event dot e is equal to pygame dot a up then i want to call our player group i want to target the sprite and then what to call get health and in here you could add in basically any number i'm going to go with 200 and now i just copied the entire thing let me do it properly and this is going to be a down and it's going to be get damage so with that one covered we have a way to call our health bar so now we can close this entire thing and never look at it again and same for these two just for simplicity so the code doesn't look too messy so now we can actually get to creating our health bar and i am going to create a new method for that then i'm going to call basic health and needs self as usual and then in the update method i'm also going to call self dot basic health and in here the actual logic is remarkably easy all we have to do is use pygm draw.rect so we are drawing a rectangle and now we need a couple of attributes the first one is on what surface we want to draw in my case that's going to be screen so our main display surface then we need a color so 255 0 and 0 a basic rgb 2 before red and now we have to create a wrecked object all inside of brackets and the first two attributes are the x and the y coordinate so in my case i just go with 10 and 10. so we are 10 pixels from the top and 10 picks from the left super simple stuff and now we need the width and the height and the width is the actually complicated part well it's not really complicated but that's the really interesting part but the height is incredibly easy so let's start with that one because all i want is this thing to be 25 pixels high that's all we needed so the one last thing is that we have to figure out our width and really all i want to have in here is our self dot current health although this would not work well it would work but it wouldn't work properly so let me actually run this thing and let's see if it works so this is working but we can go basically as far as we want well we can't go below zero but it can get as long or while it can get very very long outside of the screen which we don't want we want the maximum health to be 400 so what i want is to divide this thing by itself dot our health ratio so that when our maximum health for example is 1000 we would divide it by such number that we get to 400 in the end our maximum health so now let's try off this again and now i can't go further than this so and i also can't go less than zero so this seems pretty good but obviously there's something missing that i want to have a white bar around this or well you could have it i think it looks fine by itself already but let's have a white bar around it and for that i'm just going to create a new rectangle so pygame.draw.rect we need the same attributes except this time it's white so 255 255 and 255 and for the rectangle this time i want the same x and y coordinates but for the width i want self dot health bar length and the same height but now i'm going to add another attribute that's going for the width of this thing which i'm going to set to 4. and let's run this again there we go now we have a proper area around it and this looks like a pretty useful health bar and just to explain what happened here if you call pygame.direct and you add a line with attribute in the end then pygame is going to draw an empty rectangle just with the line width so this is what we have done here but with that we have our basic health bar so this is already a really useful basic health bar but obviously it doesn't look particularly good so let's create a more fancy one that looks better and for that we are going to need quite a bit more logic so let me explain what's going to happen in the most basic sense we are effectively going to create two rectangles for our health bar the first health bar is pretty much the basic health bar we have already seen so this is just the health but it accounts for how much health we have but then we are going to have a second health bar that shows us the difference between the current health and the health we want to get to and this one is going to be animated and how it animates is that we have two points of health we have our current health and we have our target health and that on every cycle of our game loop we're going to subtract or add a tiny amount to go from our current health to our target health and since the second health bar is on top of the first bar it's going to look like our entire health burst transitioning but this isn't actually what's happening but that's the basic logic let's actually implement all of this so here i'm back in my code and first of all i have to add a couple more attributes the first one and let me put them in the proper place a self.target health and let's set this one for now to 500 and then at the bottom i want self dot alph change speed and i'm going to set this to 5. so this one is going to be how fast our health changes and this is all we need in terms of attributes but in our get damage and get health we have to make some updates because now we don't want to change the current health we want to change our target health so let me copy target health and change all of this to target health so that when our player is hit or gets health we are changing the target health and our current health is going to catch up to the target health so we never actively change our current health we only ever change the target health but okay now we can close those again and for our basic health to keep this one working i would also have to change this to target health but i'm going to comment this out anyway because we're not going to use it anymore but just in case you want to use it make sure this is target health not current health okay let me minimize this as well and now i want to create another method that i called advanced health and in itself as usual and nothing else and now no update method let's call self dot advanced elf so in here we are going to need a couple of things so let me go through them step by step first of all i'm going to create two variables the first one is going to be transition with and this one is going to be zero and i want to have a transition transition color and this one is going to get an rgb tuple and by default i'm going to make it red and let me explain what this means you remember earlier when i said we are going to create two health bars this one transition color and transition with are going to be the width and the color of the second health bar the one that is supposed to be animated but by default our transition bar should be invisible and to make it invisible is to give it a width of 0 and a color of red so the same as our actual health bar so effectively what is happening is that our second health bar is always technically on the screen except that when there is no change to the health it's not visible but we do need variables nonetheless but now we come to the actually interesting bit we calculate the difference between our current health and our target health and this is going to be an if statement that if self dot current health current health is smaller than self. target health and we want to do something and what we want to do is self dot current health plus equals self dot elf change speed so really what happens is if our current health is smaller than the target health we want to add a certain amount to our current health in this case it's going to be five and this keeps on happening as long as the current health is smaller than the target health and while that is the case i want to influence our transition width so this one here by default it's zero but when there's a difference between current health and target health this has to be different from zero and this one should be an integer so i put all of this in there and really all i need is a difference between our target health and our current health so this one is just going to be self dot target health minus self dot current health and as always we have to divide it just like the basic health bar by our health ratio so i'm gonna put all of this again into brackets and divide it by self.health ratio so this entire line is giving us the width between our current health and our target health and makes it relative to the health bar and then for the final bit we have to change the color of the transition bar so right now it's red and in this case we are gaining health so i want to make this green so transition color is going to get an rgb tuple that is plain green so zero 255 and zero and this is all we needed for adding health now i can copy the entire thing and add the logic if we are losing health so if our current health is greater than our target health and if that is the case instead of adding our health speed we are subtracting it or health change speed and this line here actually remains exactly the same and this would still work for the simple reason that rectangles can have a negative width so in this case i'd say our target health is 500 and our current health is 800 and this thing would be negative 300. it would just go to the left instead of to the right and the last one we need is to change the color to yellow so this would be 255 for red 255 for green and we'll leave blue as zero so this rgb tuple would end up as yellow and with that part covered we are actually almost ready so really all we have to do now is to use all of this information and create two rectangles from it and the first rectangle is basically the same that we have created earlier so really similar to this line here except this time i don't want the line to become too long so i'm going to create the rectangle first by itself and then i'm using the rectangle to draw the actual health indicator so i'm going to create a health rect variable and this one is going to be pygame.rect and in here we again need an x and the y coordinate for the x i'm going to go with 10 and for the y i'm going to go with 45 so it's slightly below the original basic health indicator and then again we have the width and the height the height again is just going to be 25 because this one is super easy and for the width we have to do the same thing we've done earlier so it's going to be self dot current health divided by self dot alph ratio but now we are going to need another health bar and that's going to be the transition bar rectangle and here again i'm going to create a pie game.rect and now we need a couple of attributes so we need the x and the y coordinate then we need the width and the height so let's go through them step by step we know why this one is the easiest this one's going to be 45 exactly the same as our health bar and the same applies to the height this has to be 25 so the height and the y are super easy to do but now for the x we need to make a slight change that we don't want this bar to start at the beginning of the bar we want it to start wherever our health bar ends and this one we can do with alpha rect dot right so that this bar is always supposed to start with our actual health bar ends and this is going to be the right of the health bar and this one we can target super easily and finally we need our width and this is what we calculated here so this is always going to be this transition width so all i have to do in here is transition with and with that we have our two rectangles so now all that's left to do is to actually draw the two so i want pygame dot draw dots rect it's going to be screen then i want the color for the actual health bar it's going to be 255 0 and 0. so it's going to be red and then i have the health bar wrecked so this is our actual health bar then i have pygame.draw.rect it's going to be screen and this time we are drawing the transition rectangle so this one is this transition color so i just copy it and since we are sitting this at every stage it's going to have different colors and now for the actual rectangle this is going to be transition bar rectangle and now finally i want to create the same outline again that we created for the basic health so the white frame around it and for that i need pygame.draw.rect it's going to be screen it is going to be white so 255 255 and 255 and now i have to create a new rectangle that's going to be 10 pixels from the left 45 pixels from the top it is going to be self dot elf bar length and that is 25 pixels high and again we need a pixel frame of 4. so this line here is exactly the same as this line here except now it's a bit further down but all right let me run this and see if it's working so we don't get an error message and this already looks pretty good so now i can go up and down and even in the process looks pretty good and since i fixed our self.basic health this one should also work so let's try both of them together and yep looks pretty good arguably the health change is quite slow so you might want to speed this one up a tiny bit but i think by itself this one seems pretty good so hope that was helpful and i'll see you around
