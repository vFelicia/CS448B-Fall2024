With timestamps:

00:00 - hello in the first two parts of this
00:03 - tutorial series we made this game which
00:06 - worked reasonably well and you have
00:08 - quite a lot of features but there are a
00:09 - couple of things missing and I'm going
00:11 - to add them in this video and it's two
00:13 - things in particular I want to work on
00:14 - number one is the collision mechanic
00:17 - because in the game there are some
00:18 - collisions that don't work quite right
00:20 - just yet and I'm gonna show you in a
00:21 - second just what I mean and number two
00:23 - is that there is no sound which does
00:25 - improve things quite a bit once you add
00:26 - it and that's basically it so let's go
00:28 - through them one at a time and let's
00:30 - start with the collision the main
00:33 - problem we have right now is that while
00:34 - the collision with the paddles from the
00:36 - left and the right works perfectly fine
00:37 - if you have a pedal from the top of the
00:40 - bottom the collisions break down and let
00:42 - me visualize this so here we are back in
00:44 - the normal code and check out the
00:46 - previous tutorials to get to all of this
00:47 - and all I'm going to do for now is go to
00:51 - the line where we have created our
00:52 - player and make the pedal quite a bit
00:55 - wider so I add for any pixels and move
00:58 - it for any pixels to the left if we run
01:03 - the code now we have a really wide pedal
01:05 - and if the ball hits it from the top or
01:08 - the bottom we get something like this
01:10 - where the ball just weirdly wobbles up
01:12 - and down same if we hit it from the top
01:14 - it just doesn't really work and the game
01:16 - kind of breaks and let me talk about
01:18 - what happens here basically the problem
01:20 - happens in this line because all we do
01:22 - is check if any collision has occurred
01:24 - and if that's the case we multiply the
01:26 - direction of the ball by minus one
01:28 - meaning we are reversing the direction
01:30 - and this works if you hit a pedal from
01:32 - the left or the right but if the ball
01:34 - hits the paddle from the top this
01:35 - doesn't work anymore and let me explain
01:37 - this in terms of frames so on the first
01:39 - frame the ball hits the player pedal on
01:42 - the top and so direction is being
01:44 - reversed however on the next frame the
01:46 - ball is still colliding with the pedal
01:48 - and as a consequence the ball direction
01:50 - is being reversed again and this
01:52 - continues to happen until the ball
01:54 - reaches the bottom of the player pedal
01:55 - which looks terrible and kind of breaks
01:57 - the game at some points and fixing all
01:59 - of that needs a bit of logic and I've
02:01 - made a dedicated video to just talk
02:03 - about collisions and I am NOT going to
02:05 - talk too much about theory in this video
02:07 - but check out the other video if you
02:09 - want all the details on collisions
02:10 - but to fix all of this let me first turn
02:14 - both of these if statements into
02:16 - separate parts so we have two if
02:18 - statements that each check one of the
02:21 - pedals
02:21 - so if collide rect of the player and we
02:26 - also move the pedal so both of these if
02:28 - statements are equivalent to the first
02:30 - if statement except we have not put them
02:32 - on separate lines and let me at the top
02:34 - two : all right here we go
02:36 - the first thing I want to do is check
02:38 - the direction of the ball when it is
02:40 - colliding with the rectangle so boys
02:42 - relaxed and for this one has to be a
02:44 - positive and for the opponent has to be
02:48 - negative
02:48 - and let me add an end for both of them
02:53 - that's really important so now we have
02:56 - changed both of these data checks to
02:58 - conditions the first one is that the
03:00 - collision has happened between the ball
03:01 - on the player and the second one is that
03:03 - the direction of the ball has to be
03:04 - positive in case of the player and
03:06 - negative and case of the opponent moving
03:09 - that the ball is either moving to the
03:10 - right or to the left and this should
03:12 - make some intuitive sense now let's say
03:14 - on this line if the ball is colliding
03:16 - with the player then this can only
03:18 - really happen if the ball is moving to
03:19 - the right if the ball is moving to the
03:21 - left we don't really want to hit a
03:22 - player at all so if I run this code now
03:25 - we should already see some improvement
03:27 - so if I right now we are seeing some
03:31 - improvement that the ball doesn't wiggle
03:32 - as much but there's still some problems
03:34 - happening here but we can work on them
03:36 - and the first line I want to add is if
03:40 - the absolute value of ball door right -
03:46 - player toward left is smaller than 10
03:51 - and if that's the case we want to move
03:54 - the X direction of the ball and I've
03:56 - explained this line in particular on the
03:57 - other video in quite a bit more detail
03:59 - but basically all it does is we first
04:01 - check if a collision has occurred and
04:03 - then we check what side the collision
04:05 - has occurred and this line can only be
04:08 - true if the player pedal has been hit
04:10 - from the left and as tennis a tolerance
04:12 - for how much wiggle room we have and if
04:14 - that's the case we just want to think we
04:16 - already had so just reverse the
04:17 - direction of the ball and if we
04:20 - implement the same thing or our opponent
04:23 - when you do digs
04:24 - other way so will he bought off left and
04:27 - has to hit the right of the pedal and
04:29 - has to be the opponent not the player
04:32 - it's so opponent or right
04:34 - yeah looks right so if I run this code
04:36 - now our boss should not be colliding
04:38 - with the top or the bottom at all so if
04:40 - the ball hits from the top it should
04:41 - just entirely ignore the pedal and let's
04:44 - try this and here we go and it's
04:48 - completely ignored so the ball goes
04:49 - right through our pedal so that's a good
04:51 - start
04:52 - but we want more than that we want the
04:54 - ball to actually collide and bounce off
04:56 - the top or the bottom of our rectangle
04:57 - and that we can also add quite easily
04:59 - and we need an L if statement and the
05:02 - same logic as with this line just for
05:05 - the top on the bottom now so we need
05:07 - ball dot bottom - player top and also
05:17 - has to be smaller than 10 and if that's
05:20 - the case we want to reverse yeah why
05:24 - speed but another problem here that we
05:27 - also want to check if ball speed Y is
05:30 - greater than 10 so at the balls moving
05:33 - downwards and hits the player at the top
05:35 - and it's kind of same logic that we have
05:37 - used up here and again if that sounds
05:39 - confusing check out the other video it's
05:41 - much better explained in there right now
05:44 - we just need to copy this line again and
05:47 - instead of Paul dough bottom we change
05:50 - to balls on top and play at bottom and
05:53 - now Y has to be smaller oh and this
05:56 - isn't ten this is zero and all of that
06:00 - point done this should actually be
06:02 - working so let's try it and yep here we
06:07 - go we do have a collision from the ball
06:09 - and it's moving up and down and the same
06:12 - thing again and even if I move the
06:14 - paddle a little bit it still is working
06:15 - and yeah
06:17 - there we go with that one done we just
06:20 - have to copy all of this to our opponent
06:23 - that this works in the same way there
06:25 - and both of button and
06:28 - opponent top and the rest is fine and
06:32 - this one should be opponent at bottom
06:35 - and that's pretty much it and now we
06:38 - have proper collisions for both of the
06:39 - paddles which is quite an improvement
06:42 - the only thing left to do is remove all
06:46 - of this that we have enormous size
06:48 - player pedal again and if I run this now
06:50 - this should look as normal but now the
06:53 - difference is if I've of the pedals has
06:55 - been from the top or the bottom and then
06:58 - the game doesn't break so this is a nice
07:01 - improvement and that brings us to the
07:04 - second point to add sound to all of this
07:06 - and adding some time per game is
07:10 - actually fairly simple there are two
07:12 - steps to it on the first type you have
07:14 - to import the sound and in the second
07:16 - step you have to play the sound in
07:17 - certain parts of your code and in my
07:19 - case I have two different sounds one is
07:21 - called pong Devas called score the score
07:24 - song has been played whenever squad was
07:25 - being achieved so if the ball has gone
07:27 - too far to the left or too far to the
07:28 - right and the pong sound is going to be
07:30 - played whenever the ball is collided
07:32 - with either the pedals or the top or the
07:34 - bottom of the screen so let's implement
07:36 - all of that and here I am back in my
07:38 - court and at the bottom where we
07:40 - initiated all of the other variables I'm
07:43 - gonna add another part and it's going to
07:45 - be sound and I have two files that I
07:48 - want to store on variables
07:49 - the first one is pong sound and to
07:53 - import sound into Paganini pygame
07:55 - thought mixer table sound and make sure
07:58 - the S is capitalized and emanate a name
08:00 - of the file which in my case is pong
08:02 - thought OGG and then for the score sound
08:06 - I copied this entire line just changed
08:10 - it to score and the name of this one is
08:12 - also called score and as always make
08:15 - sure that both of these files are in the
08:17 - same directory as your code otherwise
08:19 - you would have to give more specific
08:20 - direction towards them so now we have
08:23 - covered the first step that we have
08:24 - imported our sound now we just need to
08:26 - play it in certain parts of our code and
08:28 - this happens in our code all the way up
08:31 - here and bore animation and the easiest
08:34 - one is this line here when the ball IVA
08:36 - hits the top or the bottom of the screen
08:38 - and what I want to do is PI game
08:41 - mixer got sound dot play so this is to
08:46 - play a sound and now we just need to
08:47 - tell Python what sound to play which in
08:49 - my case is pong sound and now we need
08:52 - this kind of thing in all of these
08:54 - different cases and then we have our
08:56 - sounds so I start with on the ball
08:59 - clicks of the player and when the ball
09:01 - collides with the opponent that is all
09:05 - the pong sounds now I need when the
09:08 - score is being achieved so this one
09:10 - please score sound and then the same for
09:15 - the other score and that is pretty much
09:19 - it if I play the sound now it should be
09:22 - working but there's a problem to death
09:24 - that is when we play this game right now
09:26 - all of the sounds are being delayed by a
09:28 - couple of milliseconds which does sound
09:30 - really really strange and let me explain
09:33 - why this happens basically pi camp tries
09:36 - to account for really slow computers so
09:38 - before it plays a sound it tries to
09:40 - buffer the sound and only place the
09:41 - sound once it's fully buffered which
09:44 - avoids broken sound on very slow
09:45 - computers but also delays the sound by
09:47 - quite a bit and we need to specifically
09:50 - turn this kind of thing off so when to
09:51 - reduce the buffer size and that is
09:54 - really easily done so here I'm back in
09:56 - my code on the line where we initiate PI
09:58 - game and what we need to do is to
10:00 - initiate a part of PI game specifically
10:01 - so we want to look at PI game dot mixer
10:04 - and the line is called pre in it so at
10:09 - one PI game initiates out of it it gets
10:11 - some specific information on how to
10:13 - initiate the mixer module and there are
10:15 - few arguments we don't we need to worry
10:16 - about the first one is the frequency
10:18 - that was 44100 by default you just don't
10:22 - worry about this one then we have
10:23 - precise this one is -16 by default also
10:26 - don't worry about this then we have two
10:28 - channels and this one is 2 by default
10:30 - and we can just leave it as it is and
10:32 - now we come to the important part and
10:34 - that's the buffer size and by default
10:36 - this one is 4096 and the high value
10:38 - causes the delay here so we have to
10:40 - change it to a smaller value let's say
10:42 - 512 and once we have that one we can run
10:46 - the game and this should work perfectly
10:47 - fine
10:50 - [Music]
10:56 - okay cool
10:57 - but you do want to be aware of that this
10:59 - value should not be too small and let's
11:01 - make it really small let's say we're
11:03 - gonna make it six before if you play
11:06 - this now it is going to sound terrible
11:11 - but that's basically it
11:14 - if I return this to five eleven twelve
11:15 - and we have a proper working game and
11:17 - yeah hope that was helpful and I see you
11:20 - around

Cleaned transcript:

hello in the first two parts of this tutorial series we made this game which worked reasonably well and you have quite a lot of features but there are a couple of things missing and I'm going to add them in this video and it's two things in particular I want to work on number one is the collision mechanic because in the game there are some collisions that don't work quite right just yet and I'm gonna show you in a second just what I mean and number two is that there is no sound which does improve things quite a bit once you add it and that's basically it so let's go through them one at a time and let's start with the collision the main problem we have right now is that while the collision with the paddles from the left and the right works perfectly fine if you have a pedal from the top of the bottom the collisions break down and let me visualize this so here we are back in the normal code and check out the previous tutorials to get to all of this and all I'm going to do for now is go to the line where we have created our player and make the pedal quite a bit wider so I add for any pixels and move it for any pixels to the left if we run the code now we have a really wide pedal and if the ball hits it from the top or the bottom we get something like this where the ball just weirdly wobbles up and down same if we hit it from the top it just doesn't really work and the game kind of breaks and let me talk about what happens here basically the problem happens in this line because all we do is check if any collision has occurred and if that's the case we multiply the direction of the ball by minus one meaning we are reversing the direction and this works if you hit a pedal from the left or the right but if the ball hits the paddle from the top this doesn't work anymore and let me explain this in terms of frames so on the first frame the ball hits the player pedal on the top and so direction is being reversed however on the next frame the ball is still colliding with the pedal and as a consequence the ball direction is being reversed again and this continues to happen until the ball reaches the bottom of the player pedal which looks terrible and kind of breaks the game at some points and fixing all of that needs a bit of logic and I've made a dedicated video to just talk about collisions and I am NOT going to talk too much about theory in this video but check out the other video if you want all the details on collisions but to fix all of this let me first turn both of these if statements into separate parts so we have two if statements that each check one of the pedals so if collide rect of the player and we also move the pedal so both of these if statements are equivalent to the first if statement except we have not put them on separate lines and let me at the top two all right here we go the first thing I want to do is check the direction of the ball when it is colliding with the rectangle so boys relaxed and for this one has to be a positive and for the opponent has to be negative and let me add an end for both of them that's really important so now we have changed both of these data checks to conditions the first one is that the collision has happened between the ball on the player and the second one is that the direction of the ball has to be positive in case of the player and negative and case of the opponent moving that the ball is either moving to the right or to the left and this should make some intuitive sense now let's say on this line if the ball is colliding with the player then this can only really happen if the ball is moving to the right if the ball is moving to the left we don't really want to hit a player at all so if I run this code now we should already see some improvement so if I right now we are seeing some improvement that the ball doesn't wiggle as much but there's still some problems happening here but we can work on them and the first line I want to add is if the absolute value of ball door right player toward left is smaller than 10 and if that's the case we want to move the X direction of the ball and I've explained this line in particular on the other video in quite a bit more detail but basically all it does is we first check if a collision has occurred and then we check what side the collision has occurred and this line can only be true if the player pedal has been hit from the left and as tennis a tolerance for how much wiggle room we have and if that's the case we just want to think we already had so just reverse the direction of the ball and if we implement the same thing or our opponent when you do digs other way so will he bought off left and has to hit the right of the pedal and has to be the opponent not the player it's so opponent or right yeah looks right so if I run this code now our boss should not be colliding with the top or the bottom at all so if the ball hits from the top it should just entirely ignore the pedal and let's try this and here we go and it's completely ignored so the ball goes right through our pedal so that's a good start but we want more than that we want the ball to actually collide and bounce off the top or the bottom of our rectangle and that we can also add quite easily and we need an L if statement and the same logic as with this line just for the top on the bottom now so we need ball dot bottom player top and also has to be smaller than 10 and if that's the case we want to reverse yeah why speed but another problem here that we also want to check if ball speed Y is greater than 10 so at the balls moving downwards and hits the player at the top and it's kind of same logic that we have used up here and again if that sounds confusing check out the other video it's much better explained in there right now we just need to copy this line again and instead of Paul dough bottom we change to balls on top and play at bottom and now Y has to be smaller oh and this isn't ten this is zero and all of that point done this should actually be working so let's try it and yep here we go we do have a collision from the ball and it's moving up and down and the same thing again and even if I move the paddle a little bit it still is working and yeah there we go with that one done we just have to copy all of this to our opponent that this works in the same way there and both of button and opponent top and the rest is fine and this one should be opponent at bottom and that's pretty much it and now we have proper collisions for both of the paddles which is quite an improvement the only thing left to do is remove all of this that we have enormous size player pedal again and if I run this now this should look as normal but now the difference is if I've of the pedals has been from the top or the bottom and then the game doesn't break so this is a nice improvement and that brings us to the second point to add sound to all of this and adding some time per game is actually fairly simple there are two steps to it on the first type you have to import the sound and in the second step you have to play the sound in certain parts of your code and in my case I have two different sounds one is called pong Devas called score the score song has been played whenever squad was being achieved so if the ball has gone too far to the left or too far to the right and the pong sound is going to be played whenever the ball is collided with either the pedals or the top or the bottom of the screen so let's implement all of that and here I am back in my court and at the bottom where we initiated all of the other variables I'm gonna add another part and it's going to be sound and I have two files that I want to store on variables the first one is pong sound and to import sound into Paganini pygame thought mixer table sound and make sure the S is capitalized and emanate a name of the file which in my case is pong thought OGG and then for the score sound I copied this entire line just changed it to score and the name of this one is also called score and as always make sure that both of these files are in the same directory as your code otherwise you would have to give more specific direction towards them so now we have covered the first step that we have imported our sound now we just need to play it in certain parts of our code and this happens in our code all the way up here and bore animation and the easiest one is this line here when the ball IVA hits the top or the bottom of the screen and what I want to do is PI game mixer got sound dot play so this is to play a sound and now we just need to tell Python what sound to play which in my case is pong sound and now we need this kind of thing in all of these different cases and then we have our sounds so I start with on the ball clicks of the player and when the ball collides with the opponent that is all the pong sounds now I need when the score is being achieved so this one please score sound and then the same for the other score and that is pretty much it if I play the sound now it should be working but there's a problem to death that is when we play this game right now all of the sounds are being delayed by a couple of milliseconds which does sound really really strange and let me explain why this happens basically pi camp tries to account for really slow computers so before it plays a sound it tries to buffer the sound and only place the sound once it's fully buffered which avoids broken sound on very slow computers but also delays the sound by quite a bit and we need to specifically turn this kind of thing off so when to reduce the buffer size and that is really easily done so here I'm back in my code on the line where we initiate PI game and what we need to do is to initiate a part of PI game specifically so we want to look at PI game dot mixer and the line is called pre in it so at one PI game initiates out of it it gets some specific information on how to initiate the mixer module and there are few arguments we don't we need to worry about the first one is the frequency that was 44100 by default you just don't worry about this one then we have precise this one is 16 by default also don't worry about this then we have two channels and this one is 2 by default and we can just leave it as it is and now we come to the important part and that's the buffer size and by default this one is 4096 and the high value causes the delay here so we have to change it to a smaller value let's say 512 and once we have that one we can run the game and this should work perfectly fine okay cool but you do want to be aware of that this value should not be too small and let's make it really small let's say we're gonna make it six before if you play this now it is going to sound terrible but that's basically it if I return this to five eleven twelve and we have a proper working game and yeah hope that was helpful and I see you around
