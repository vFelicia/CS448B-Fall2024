With timestamps:

00:00 - hello there in this video we will talk
00:02 - about frame rate independence and delta
00:04 - time in pygame
00:06 - now this isn't a topic that's easy to
00:09 - visualize but for what it's worth here's
00:12 - what we are going to make in this
00:13 - tutorial
00:14 - a sprite that moves left and right with
00:16 - a rotation and an animation
00:19 - now that's not anything impressive but
00:21 - the special thing about it is that this
00:23 - animation runs at basically any frame
00:25 - rate
00:26 - which is something that is really
00:28 - important for basically any video game
00:31 - now before we can talk about how to
00:33 - create this
00:34 - let's talk about some theory first
00:37 - if you make any kind of game you want it
00:40 - to be consistent at all times and for
00:42 - every device
00:44 - but the problem is that players have
00:47 - very different kinds of devices
00:49 - so some players have really good
00:51 - computers other players have really old
00:53 - and weak ones
00:54 - and in practice that means that you
00:56 - might have one player with a really good
00:58 - pc that runs your game at 600 frames per
01:01 - second whereas another player might have
01:03 - a really old computer that can only run
01:05 - 30 frames per second
01:07 - and you want both of these players to
01:09 - have the same experience in your game
01:12 - and also even on the same computer there
01:15 - might be different parts of the game
01:17 - that might be more demanding than others
01:19 - for example an elder ring this is
01:21 - actually an issue right now where the
01:23 - game runs really smoothly inside of a
01:25 - dungeon but if you are inside of the
01:27 - overworld the game tends to slow down
01:30 - once in a while
01:31 - which is something players are really
01:33 - unhappy about
01:35 - so what you really have to make sure is
01:38 - that you always account for any kind of
01:40 - frame rate and let's do some math on
01:43 - this to illustrate what the problem here
01:44 - is
01:46 - we have different frame rates or frames
01:49 - per second
01:50 - we have 10 30 60 120 and 600
01:54 - and then we also have some kind of
01:56 - object that moves at a certain pixel
01:59 - speed per frame in my case it's always
02:01 - going to be 10. so this could for
02:03 - example be a player that moves 10 pixels
02:05 - to the right on every single frame and
02:08 - this could either be different devices
02:10 - or the same game in different
02:12 - circumstances
02:14 - so like i have said just now elden ring
02:16 - might be running 60 frames inside of a
02:18 - dungeon but in the overworld we might
02:21 - only get 30 frames which would be a very
02:24 - different experience
02:26 - so essentially what we have to do is
02:29 - multiply and then we get different
02:31 - pixels per second in terms of movement
02:35 - and here you can already tell the
02:37 - massive differences that if our frame
02:39 - rate is 10 we're moving at 100 pixels
02:42 - per second
02:44 - but if our frame rate is 600 we are
02:46 - moving 60 times as fast which would
02:50 - essentially break any kind of game so
02:54 - these differences here are a terrible
02:57 - problem for your game and if you didn't
02:59 - account for them the game would
03:01 - essentially be unplayable
03:03 - so
03:04 - how can we fix that and there's one easy
03:08 - ish solution
03:09 - and that is
03:11 - that you can limit the maximum frame
03:13 - rate elton ring actually does that that
03:16 - without a mod ellen ring at the most
03:19 - runs at 60 frames per second
03:22 - but this approach has two major
03:24 - downsides
03:25 - number one
03:26 - is that it does not account for the game
03:29 - running below the target frame rate so
03:32 - if you are dropping down to 10 frames
03:33 - per second this approach would break
03:36 - down
03:36 - and besides that possibly even more
03:39 - important is that you want a high frame
03:41 - rate because it will make the game look
03:44 - and feel much better so if you have a
03:46 - higher frame rate you will draw
03:48 - significantly more frames for the game
03:51 - which will look much smoother
03:53 - and on top of that you will also check
03:55 - player input physics collisions much
03:58 - more often
03:59 - which will give a more responsive feel
04:01 - to the game
04:03 - so limiting the frame rate by itself
04:05 - isn't good enough there's one more thing
04:07 - that we do need and elm ring does this
04:10 - one as well and what it does is it uses
04:12 - delta time for consistent speed at all
04:15 - frame rates now what does that mean
04:19 - essentially
04:20 - delta time is the time difference
04:22 - between the current and the previous
04:24 - frame
04:25 - so literally how long it took our
04:27 - computer to draw the current frame
04:30 - and this information then
04:33 - we're going to multiply with any
04:34 - movement inside of our game
04:38 - and that will make the game run smooth
04:41 - at literally any frame rate
04:44 - it sounds a bit like voodoo magic but it
04:46 - works really well
04:48 - and let's do some math to illustrate
04:50 - what's happening
04:51 - let's say we have a game that runs at 60
04:53 - frames per second
04:55 - and from that we get a delta time of 1
04:58 - over 60 or
05:00 - 0.01666 and so on
05:03 - and this we're going to multiply with
05:05 - our movement and our frame rate so if
05:08 - again we get our movement at 10 and our
05:11 - frame rate at 60
05:12 - we get a movement of 10.
05:15 - and this by itself doesn't sound too
05:17 - impressive but now let's do a second
05:19 - example that we have 30 frames per
05:21 - second
05:22 - now for this one our delta time is going
05:25 - to be 1 over 30 or
05:27 - 0.033 and 3.
05:30 - now if we do the same math again with a
05:32 - movement of 10 a frame rate of 30 and a
05:35 - delta time of
05:36 - 0.03 we are also getting 10.
05:40 - so our pixels per second outcome is
05:42 - identical for two different frame rates
05:46 - and as a matter of fact
05:48 - i can do the same math for all our
05:50 - previous examples
05:52 - and we would always end up with 10
05:54 - pixels per second regardless of the
05:56 - frame rate which is exactly what we
05:59 - wanted
06:00 - now before we are going to implement
06:03 - this there are a couple of things you
06:05 - have to be aware of
06:06 - first of all
06:07 - when you use delta time you have to
06:10 - multiply any movement with it so
06:12 - literally any movement any rotation any
06:15 - animation
06:17 - literally anything that moves needs
06:19 - delta time
06:21 - and besides that you are also going to
06:23 - need much larger numbers to move things
06:26 - that's arguably quite a simple thing to
06:28 - implement but if you move 10 pixels per
06:31 - second it really isn't all that much
06:34 - so just keep that in mind
06:36 - now we are almost there the last thing
06:38 - we need is that in pi game there are two
06:41 - different ways to get delta time the
06:43 - first approach is to use clock.tick
06:46 - and this one you have probably already
06:48 - seen in pygame it is usually used to
06:51 - limit the frame rate but it also returns
06:54 - our delta time so we can get it from
06:57 - here
06:58 - and this is a very easy way
07:00 - but it's also not as precise as it could
07:03 - be
07:04 - and you do want precision in your game
07:06 - it's generally a good thing to include
07:09 - so i generally wouldn't really recommend
07:11 - using this approach a better one would
07:14 - be to use the time module in python
07:17 - and this one is already included in
07:19 - python so you should already have it
07:22 - and i'm going to explain the code in
07:24 - just a second but essentially
07:26 - this is a slightly more complex but is
07:28 - significantly more precise approach so
07:31 - this is the one we are going to go with
07:34 - and there is going to be another issue
07:37 - but let's jump into the code
07:39 - and let's actually implement this and
07:41 - see how far we get
07:44 - so here we are in a very simple setup
07:48 - let's actually run it and see what we
07:50 - get
07:51 - all we can see right now is a rectangle
07:53 - moving left to right literally nothing
07:55 - else
07:57 - and let's go over this code before we
07:59 - start working with delta time
08:02 - at the top we are importing the usual pi
08:04 - game stuff and debug
08:06 - and debug is this file here i have
08:10 - actually made a whole video about how
08:12 - this works but basically all it does is
08:15 - this in our game loop we can call
08:18 - the debug function and pass in any kind
08:21 - of string to display it right on the
08:23 - window so for example i could write test
08:27 - run this
08:28 - and we can see test in the top left
08:31 - it literally doesn't do anything else it
08:33 - doesn't influence the game whatsoever
08:35 - it's really just there to show some
08:37 - information so if you don't understand
08:39 - this one don't worry about it
08:42 - now for the more important stuff
08:44 - we are initiating pygame and we are
08:46 - creating a clock and a screen
08:49 - after we have done that we are creating
08:51 - a rectangle with a speed and this speed
08:55 - we are using further down here to move
08:57 - the rectangle so what is happening down
09:00 - here
09:00 - is we are grabbing the x part of the
09:02 - rectangle and adding the speed to it
09:06 - and once we have that we are just
09:08 - drawing the rectangle this is some very
09:10 - basic stuff in pi game this shouldn't be
09:12 - difficult at all
09:13 - and then besides that we have our event
09:16 - loop and then we have down here we are
09:19 - updating the window and we are limiting
09:21 - the frame rate to 60 frames per second
09:24 - and now to actually demonstrate where
09:26 - the problem is right now our frame rate
09:29 - is defined down here
09:31 - and this gives us this kind of speed if
09:33 - i were to run it
09:35 - so if i set this to a very low number
09:37 - let's say 10
09:39 - and if i run this again
09:41 - now our game is running significantly
09:44 - slower
09:45 - and i could also set this number to
09:46 - something really high if i run it again
09:49 - now
09:49 - it's way too fast
09:51 - so both of these extremes would break
09:54 - the game
09:55 - and now basically what we want to do
09:58 - when we are running this line here we
10:01 - want to multiply our test speed with dt
10:05 - short for
10:06 - delta time
10:09 - and for that to work we have to get
10:11 - delta time
10:12 - and there are two ways of getting it
10:14 - let's start with the easier one and this
10:16 - one we get from clock.tick
10:19 - and usually in this approach the tick
10:22 - method for the clock is all the way at
10:24 - the top
10:26 - and for this one we can just save the
10:28 - value in dt
10:31 - and before we actually use it let me
10:33 - comment out the dt down here
10:36 - and let's just print what we actually
10:38 - get from dt
10:40 - so what i'm doing right now i'm just
10:42 - passing this variable into the debug
10:45 - method
10:47 - so if i'm running all of this
10:49 - we can see we get 16 17 sometimes
10:53 - now what does this number mean
10:56 - the tick method essentially gives us the
10:58 - milliseconds since the previous frame
11:01 - and this is the math i have done earlier
11:04 - so if you divide one second divided by
11:06 - 60
11:08 - you get 0.0166
11:11 - and then you continue with a lot more
11:13 - sixes
11:14 - and what the tick method is giving us is
11:16 - this 16 essentially and remember here
11:19 - they are 1000 milliseconds in one second
11:23 - now the problem we have with this right
11:24 - now is that we want this value in
11:27 - seconds we don't want this in
11:29 - milliseconds
11:30 - so a number we actually want is this
11:33 - entire thing we don't just want it 16 or
11:36 - 17 we want a
11:37 - 0.016 something
11:39 - and this we can get quite easily all we
11:41 - have to do is divide this value by 1000
11:46 - and now
11:47 - i can uncomment dt
11:50 - and now this should be working much
11:52 - better so let's run it again
11:55 - and now we get zero movement for the
11:58 - simple reason that now our test speed is
12:01 - way too low
12:03 - so let's change this to something like
12:05 - 200 and now this should be working
12:09 - so now we are getting a movement again
12:11 - that is well
12:14 - you can't really see a change so far
12:17 - but now what i can do
12:20 - is
12:20 - for this frame right here
12:22 - i can set this to something like a 10.
12:25 - and now if i run this again
12:27 - the rectangle is moving at the same
12:29 - speed except now the frame rate is well
12:31 - much worse but the speed itself doesn't
12:34 - change and that's the important bit
12:36 - and well with that we have gotten delta
12:39 - time
12:40 - now this approach has one problem
12:43 - and that is that it's not exactly
12:45 - precise
12:47 - and since we're working with very small
12:48 - numbers you do want precision
12:51 - so a better way would be to use the time
12:54 - module in python and let's do this
12:56 - straight away
12:58 - now to use this we have to import the
13:00 - time module
13:01 - and this one is already installed with
13:02 - python so it should work by default and
13:06 - what we basically want to do before we
13:08 - are starting the while loop i want to
13:10 - get previous
13:13 - time
13:14 - and what i want to get in here is time
13:16 - dot time
13:19 - and this is giving us our current time
13:22 - and then inside of our while loop let me
13:25 - comment out the previous clock.tick
13:27 - i want to get my delta time is going to
13:30 - be now my time dot time
13:33 - minus the previous time
13:37 - and after that is run
13:39 - i want to set my previous time to time
13:42 - dot time
13:45 - and with this approach we always get the
13:47 - time between the different frames
13:50 - it's ultimately quite simple and let me
13:52 - add another space
13:54 - so now let's run all of this
13:56 - and now you can see we have a
13:58 - significantly longer and much more
14:00 - precise number
14:03 - which is exactly what you want now the
14:06 - problem is that our rectangle is not
14:08 - moving whatsoever
14:10 - and well
14:12 - now you can see it's moving a tiny bit
14:14 - but why is this thing not moving or
14:16 - moving so inconsistently
14:19 - and the answer here is that our frame
14:22 - rate is too high
14:24 - and that is not the problem that happens
14:26 - because of time.time so if i comment all
14:29 - of this out again
14:33 - and
14:34 - uncomment the previous approach and
14:36 - change this to something like 600.
14:39 - now if i run this
14:41 - we get the same result
14:43 - essentially the problem we have right
14:45 - now
14:46 - is that all of this
14:48 - breaks if our frame rate is getting too
14:50 - high
14:52 - now you might be asking why is that the
14:55 - case and that's a very good question
14:57 - let's talk about it that's just going to
14:59 - be a tiny bit more theory
15:01 - basically the problem is
15:03 - that when we use delta to move we are
15:06 - always moving with floating point
15:07 - numbers but with pygame when we are
15:10 - placing a rectangle
15:12 - we always have to place an integer
15:15 - and well
15:16 - what does that actually mean
15:18 - let me give an example
15:20 - if we move with pure integers let's say
15:23 - 5 pixel
15:24 - and this could for example be the
15:26 - rectangle we have just used and we want
15:28 - to move this rectangle to the right by 5
15:31 - pixels
15:32 - if that was the case on the first frame
15:35 - we would have 5 pixels then 10 pixels
15:37 - then 15 and then 20. this one works just
15:41 - as expected so this one is totally fine
15:45 - now where the system does break down is
15:48 - when we have a floating point number
15:50 - let's say 4.5
15:52 - so technically this should be
15:55 - 90
15:57 - of the original speed so this is also a
15:59 - rectangle
16:01 - that we want to move to the right by 4.5
16:04 - pixels
16:06 - the problem is now when we use this
16:09 - pixel information on a rectangle pygame
16:12 - always has to place a rectangle in an
16:15 - integer position because it's pixel
16:17 - information and as a consequence this
16:20 - 4.5 would be truncated meaning that this
16:24 - 0.5 would be omitted
16:27 - and as a consequence
16:28 - when we move it by 4.5 pixels we would
16:31 - only get 4 pixels and then our next
16:33 - frame we get to 8 pixels then to 12
16:35 - pixels and then to 16 pixels
16:38 - so even though it's supposed to be at 90
16:40 - percent of the speed of this initial
16:43 - rectangle it is actually moving much
16:45 - slower
16:47 - and even worse
16:49 - if our framerate can fluctuate quite a
16:51 - bit
16:52 - this number might get lower or higher
16:54 - which is making our movement very
16:56 - inconsistent
16:58 - and then what happened in our actual
17:01 - code let me go back to it so in this one
17:04 - here
17:05 - if i run it again we still get basically
17:08 - zero movement sometimes we get a tiny
17:10 - bit of movement
17:12 - and let's actually visualize the
17:14 - information that this rectangle here is
17:17 - getting so let's print this test speed
17:20 - multiplied by delta time
17:22 - and let me use
17:24 - time.times so we get more precise
17:26 - information
17:28 - and now let's run this again
17:31 - and now the number we get is 0.2
17:34 - and a long number
17:36 - now pi game essentially sees 0.2 for the
17:39 - most part and truncates this to a zero
17:42 - so the rectangle doesn't move at all now
17:45 - very rarely this number gets just large
17:47 - enough to pass a one very very rarely
17:51 - and this is why sometimes this rectangle
17:53 - is moving but most of the time it
17:55 - doesn't
17:56 - so i hope that explains the issue now
17:59 - more importantly
18:01 - how do we solve it
18:03 - and the answer here is essentially that
18:05 - we don't move rectangles by themselves
18:08 - at all
18:09 - instead we are storing the information
18:11 - in a separate variable and then set the
18:13 - rectangle to the position of that
18:15 - variable
18:16 - sounds complicated it really isn't that
18:18 - bad
18:19 - so below my test rect
18:21 - i want to set let's call it test
18:24 - rect
18:25 - position
18:27 - and by default this is going to be test
18:30 - rect.x
18:32 - and now in our game loop
18:35 - i want to get my test rect
18:38 - position
18:39 - and this one is going to get test speed
18:42 - multiplied by delta time
18:46 - and now for the test rect position
18:49 - i want to set this test right position
18:53 - for the x part of the rectangle
18:55 - and important here this should be equal
18:57 - not plus equal so now if i run all of
19:00 - this
19:02 - now we have a very smoothly moving
19:04 - rectangle this feels much better and
19:06 - this works at literally any kind of
19:08 - frame rate so right now our frame rate
19:11 - is literally unlimited
19:14 - so this is working really well although
19:16 - there's one more thing that i would like
19:18 - to do that this test rack position
19:21 - should get a rounding
19:23 - and the reason for that is
19:25 - let's say right now this test track
19:27 - position
19:28 - is
19:29 - 1.6
19:30 - if we were to just pass this into the
19:33 - position of testrec.x
19:35 - pygame would turn this 1.6 just into a 1
19:40 - and it would essentially remove this 0.6
19:44 - now the problem is this isn't as precise
19:46 - as it could be because the more precise
19:48 - location here in terms of pixels would
19:51 - be a two
19:53 - so we don't want to truncate this value
19:55 - instead we want to turn it into the
19:57 - integer that's closest which this case
19:59 - is two and for that we're using round
20:03 - although in practice you don't really
20:05 - see that much of a difference so for all
20:07 - of this now well we get essentially the
20:10 - same outcome
20:11 - but now this is looking really smoothly
20:15 - so with that
20:16 - we have a very basic setup on how to use
20:20 - delta time and basically any kind of
20:23 - frame rate
20:24 - now the question is how do you actually
20:27 - implement this in a more complex project
20:30 - and for that we have the second example
20:33 - and the more complex example is going to
20:36 - be this one
20:37 - so if i run this code here
20:40 - we can see a pirate that's moving left
20:42 - and right that rotates and that has an
20:44 - animation
20:45 - which is basically all the stuff you
20:47 - want to do in a game
20:49 - and if i close this
20:51 - we have a couple of lines of code that
20:54 - should all make sense
20:56 - i guess let's go really quickly over the
20:58 - main parts here
21:00 - we are importing the usual stuff plus
21:02 - time
21:03 - then we are setting up the pygm window
21:05 - just we have done before
21:07 - then we are creating a sprite i'll
21:09 - explain this one in just a second
21:12 - after we have done that we are creating
21:14 - a group and placing one instance of this
21:17 - sprite inside of that group after that
21:19 - we are starting our while loop and we're
21:21 - getting delta time with time.time
21:24 - basically what i've just explained
21:26 - then we have our event loop we are
21:28 - filling the screen then we are updating
21:31 - and drawing the spread group and finally
21:34 - we're updating the window and limiting
21:36 - the frame rate so all of this should be
21:38 - fairly simple
21:40 - but now we have the same problem that if
21:43 - i change the frame rate to basically
21:45 - anything besides 60 this entire thing
21:48 - breaks so at 600
21:51 - this thing becomes basically
21:54 - unplayable
21:55 - and if i set this to something like 5
21:59 - it becomes incredibly slow
22:02 - so this is what we have to work on
22:06 - and for that we have to update our
22:08 - sprite so let's have a look at this one
22:10 - first
22:11 - we are starting with our indeed method
22:14 - and in here we first import a couple of
22:17 - frames and set a frame index
22:20 - and this one will be used to pick one of
22:22 - these frames we are actually doing this
22:25 - straight when we set the image but we're
22:27 - also doing this down here
22:30 - in the animate method
22:32 - and this one here would be a really
22:34 - simple way to animate a sprite if you
22:36 - have no idea how this one works check
22:38 - out my introduction to pygame it
22:40 - explains all of this in quite some
22:41 - detail
22:42 - once we have that we are setting self
22:45 - direct and this one is in the mid left
22:48 - of the window
22:50 - and then besides that we have a couple
22:52 - of attributes for the rotation the
22:54 - direction the move speed and the
22:56 - animation speed so this is basically
22:58 - what moves and rotates and animates our
23:00 - sprite
23:02 - and how these things are going to be
23:04 - used is a bit further down here
23:08 - so besides our animate method we also
23:10 - have a move method that right now
23:14 - just moves the rectangle to the right in
23:16 - a direction by a speed
23:18 - and then if this rectangle gets too far
23:20 - to the right or too far to the left
23:23 - we are changing the direction
23:26 - and for the rotation
23:28 - we are simply increasing the rotation
23:31 - and then we're using pygm transform row
23:33 - to zoom to rotate this image
23:37 - and then in our update method
23:39 - we are well calling these three methods
23:42 - here
23:43 - and now basically all we have to do is
23:46 - apply delta time to all of these methods
23:50 - and for that first of all we have to
23:52 - make delta time available inside of the
23:54 - update method
23:56 - which is quite easily done
23:58 - so when we call the update method i want
24:01 - to pass in delta time in here and for
24:04 - that to work
24:06 - the update method needs another
24:07 - parameter that i am also going to call
24:09 - delta time
24:11 - and now each method that moves anything
24:15 - needs a delta time argument and since we
24:18 - have now an argument we have to create
24:21 - some more parameters
24:22 - that are all going to be called delta
24:24 - time
24:25 - and let's just run the code to make sure
24:27 - nothing went wrong cool still works
24:30 - and let me set
24:33 - the frame rate let's say to 600 so it's
24:36 - a bit easier to see what's going on
24:38 - so right now all of this is going to be
24:40 - way too fast
24:43 - and the most obvious problem right now
24:45 - is the move method so this one works way
24:49 - way too fast
24:51 - and in here
24:53 - we could just multiply this line with dt
24:57 - which right now would well
25:00 - make the movement basically zero
25:03 - and that's the problem i just talked
25:05 - about that pi game is truncating this
25:07 - number so anything like 0.2 would become
25:11 - zero so our movement would be a zero
25:15 - and to fix that i want to create another
25:17 - attribute in the init method that i have
25:20 - called self.position
25:22 - and this one is going to be
25:23 - pygame.math.vector2
25:26 - that needs to be capitalized
25:29 - and the position at the start is going
25:31 - to be self.rect.top
25:34 - left
25:35 - essentially the top left of this
25:37 - rectangle
25:39 - now we are not going to move this
25:40 - rectangle instead we are going to move
25:43 - the position so self dot pause
25:47 - dot x
25:48 - is going to be plus equal
25:50 - all the stuff we have just done
25:52 - and now the rectangle x position
25:56 - is going to be
25:58 - self.x
26:00 - with the slight modification that this
26:02 - value is going to be rounded
26:06 - and right now our rectangle is only
26:08 - moving left and right but if you also
26:11 - had vertical movement you could just add
26:14 - a y to both of these values and you
26:17 - would address this part as well
26:21 - so now if i run
26:22 - this we can see we still don't have much
26:26 - of a movement but now the reason is that
26:28 - our move speed
26:29 - is very very low so if i set this to
26:32 - something like 200
26:34 - now it should be working
26:36 - and there we go even though we have a
26:39 - move speed of 200 this thing is moving
26:41 - at a reasonable pace
26:43 - and just to see if this is working with
26:45 - other frame rates as well
26:47 - let's change this to let's say a 30.
26:50 - and let's try this again
26:53 - and now we have the same move speed
26:55 - except now the difference is our
26:57 - rotation and our animation are much much
27:00 - slower
27:01 - but the move speed does not
27:04 - change so with that we have addressed
27:07 - the first part now next up i guess we
27:10 - can work on the rotation
27:12 - and all we have to do in here
27:14 - is to move the rotation plus equal one
27:16 - multiplied by delta time and now we also
27:21 - have to increase the rotation number
27:24 - let's say 50.
27:26 - and now if we run all of this
27:29 - we have a movement and the rotation is
27:31 - significantly slower even though our
27:34 - frame rate is still at 600
27:37 - and well this is working really well
27:39 - now the last thing we have to address is
27:41 - animate
27:43 - and this one also is kind of simple
27:45 - because all we have to change is the
27:47 - animation speed here
27:49 - and this one i'm just going to multiply
27:52 - with delta time
27:53 - and now we also have to increase the
27:56 - animation speed here
27:58 - so let's set this one to
28:00 - 5. and now
28:05 - it may be a tiny bit too slow but i
28:08 - think generally you get the idea this is
28:10 - working really well
28:12 - and well with that we have our basic
28:16 - setup and we can try this as well
28:19 - so
28:20 - here we have our clock.tick
28:22 - and let's set this to 30.
28:26 - and now we still have a similar speed
28:29 - except now the entire thing looks a bit
28:30 - choppier actually to illustrate this a
28:33 - bit better
28:34 - let's set our frame rate to 1.
28:38 - and now you can see that everything is
28:41 - very slow
28:42 - but we still keep the same speed the
28:44 - same animation speed and the same
28:46 - rotation
28:47 - except now we have very very few frames
28:51 - i guess a bit better would be something
28:53 - like five
28:56 - and there you can see it's significantly
28:58 - better so now our animation movement
29:01 - rotation speed is the same except we're
29:03 - doing it with much fewer frames
29:08 - and all right so with that we have
29:12 - basically covered all you need to know
29:14 - to understand delta time and how to
29:16 - apply it to pygame
29:18 - so i hope that was helpful and i will
29:20 - see you around

Cleaned transcript:

hello there in this video we will talk about frame rate independence and delta time in pygame now this isn't a topic that's easy to visualize but for what it's worth here's what we are going to make in this tutorial a sprite that moves left and right with a rotation and an animation now that's not anything impressive but the special thing about it is that this animation runs at basically any frame rate which is something that is really important for basically any video game now before we can talk about how to create this let's talk about some theory first if you make any kind of game you want it to be consistent at all times and for every device but the problem is that players have very different kinds of devices so some players have really good computers other players have really old and weak ones and in practice that means that you might have one player with a really good pc that runs your game at 600 frames per second whereas another player might have a really old computer that can only run 30 frames per second and you want both of these players to have the same experience in your game and also even on the same computer there might be different parts of the game that might be more demanding than others for example an elder ring this is actually an issue right now where the game runs really smoothly inside of a dungeon but if you are inside of the overworld the game tends to slow down once in a while which is something players are really unhappy about so what you really have to make sure is that you always account for any kind of frame rate and let's do some math on this to illustrate what the problem here is we have different frame rates or frames per second we have 10 30 60 120 and 600 and then we also have some kind of object that moves at a certain pixel speed per frame in my case it's always going to be 10. so this could for example be a player that moves 10 pixels to the right on every single frame and this could either be different devices or the same game in different circumstances so like i have said just now elden ring might be running 60 frames inside of a dungeon but in the overworld we might only get 30 frames which would be a very different experience so essentially what we have to do is multiply and then we get different pixels per second in terms of movement and here you can already tell the massive differences that if our frame rate is 10 we're moving at 100 pixels per second but if our frame rate is 600 we are moving 60 times as fast which would essentially break any kind of game so these differences here are a terrible problem for your game and if you didn't account for them the game would essentially be unplayable so how can we fix that and there's one easy ish solution and that is that you can limit the maximum frame rate elton ring actually does that that without a mod ellen ring at the most runs at 60 frames per second but this approach has two major downsides number one is that it does not account for the game running below the target frame rate so if you are dropping down to 10 frames per second this approach would break down and besides that possibly even more important is that you want a high frame rate because it will make the game look and feel much better so if you have a higher frame rate you will draw significantly more frames for the game which will look much smoother and on top of that you will also check player input physics collisions much more often which will give a more responsive feel to the game so limiting the frame rate by itself isn't good enough there's one more thing that we do need and elm ring does this one as well and what it does is it uses delta time for consistent speed at all frame rates now what does that mean essentially delta time is the time difference between the current and the previous frame so literally how long it took our computer to draw the current frame and this information then we're going to multiply with any movement inside of our game and that will make the game run smooth at literally any frame rate it sounds a bit like voodoo magic but it works really well and let's do some math to illustrate what's happening let's say we have a game that runs at 60 frames per second and from that we get a delta time of 1 over 60 or 0.01666 and so on and this we're going to multiply with our movement and our frame rate so if again we get our movement at 10 and our frame rate at 60 we get a movement of 10. and this by itself doesn't sound too impressive but now let's do a second example that we have 30 frames per second now for this one our delta time is going to be 1 over 30 or 0.033 and 3. now if we do the same math again with a movement of 10 a frame rate of 30 and a delta time of 0.03 we are also getting 10. so our pixels per second outcome is identical for two different frame rates and as a matter of fact i can do the same math for all our previous examples and we would always end up with 10 pixels per second regardless of the frame rate which is exactly what we wanted now before we are going to implement this there are a couple of things you have to be aware of first of all when you use delta time you have to multiply any movement with it so literally any movement any rotation any animation literally anything that moves needs delta time and besides that you are also going to need much larger numbers to move things that's arguably quite a simple thing to implement but if you move 10 pixels per second it really isn't all that much so just keep that in mind now we are almost there the last thing we need is that in pi game there are two different ways to get delta time the first approach is to use clock.tick and this one you have probably already seen in pygame it is usually used to limit the frame rate but it also returns our delta time so we can get it from here and this is a very easy way but it's also not as precise as it could be and you do want precision in your game it's generally a good thing to include so i generally wouldn't really recommend using this approach a better one would be to use the time module in python and this one is already included in python so you should already have it and i'm going to explain the code in just a second but essentially this is a slightly more complex but is significantly more precise approach so this is the one we are going to go with and there is going to be another issue but let's jump into the code and let's actually implement this and see how far we get so here we are in a very simple setup let's actually run it and see what we get all we can see right now is a rectangle moving left to right literally nothing else and let's go over this code before we start working with delta time at the top we are importing the usual pi game stuff and debug and debug is this file here i have actually made a whole video about how this works but basically all it does is this in our game loop we can call the debug function and pass in any kind of string to display it right on the window so for example i could write test run this and we can see test in the top left it literally doesn't do anything else it doesn't influence the game whatsoever it's really just there to show some information so if you don't understand this one don't worry about it now for the more important stuff we are initiating pygame and we are creating a clock and a screen after we have done that we are creating a rectangle with a speed and this speed we are using further down here to move the rectangle so what is happening down here is we are grabbing the x part of the rectangle and adding the speed to it and once we have that we are just drawing the rectangle this is some very basic stuff in pi game this shouldn't be difficult at all and then besides that we have our event loop and then we have down here we are updating the window and we are limiting the frame rate to 60 frames per second and now to actually demonstrate where the problem is right now our frame rate is defined down here and this gives us this kind of speed if i were to run it so if i set this to a very low number let's say 10 and if i run this again now our game is running significantly slower and i could also set this number to something really high if i run it again now it's way too fast so both of these extremes would break the game and now basically what we want to do when we are running this line here we want to multiply our test speed with dt short for delta time and for that to work we have to get delta time and there are two ways of getting it let's start with the easier one and this one we get from clock.tick and usually in this approach the tick method for the clock is all the way at the top and for this one we can just save the value in dt and before we actually use it let me comment out the dt down here and let's just print what we actually get from dt so what i'm doing right now i'm just passing this variable into the debug method so if i'm running all of this we can see we get 16 17 sometimes now what does this number mean the tick method essentially gives us the milliseconds since the previous frame and this is the math i have done earlier so if you divide one second divided by 60 you get 0.0166 and then you continue with a lot more sixes and what the tick method is giving us is this 16 essentially and remember here they are 1000 milliseconds in one second now the problem we have with this right now is that we want this value in seconds we don't want this in milliseconds so a number we actually want is this entire thing we don't just want it 16 or 17 we want a 0.016 something and this we can get quite easily all we have to do is divide this value by 1000 and now i can uncomment dt and now this should be working much better so let's run it again and now we get zero movement for the simple reason that now our test speed is way too low so let's change this to something like 200 and now this should be working so now we are getting a movement again that is well you can't really see a change so far but now what i can do is for this frame right here i can set this to something like a 10. and now if i run this again the rectangle is moving at the same speed except now the frame rate is well much worse but the speed itself doesn't change and that's the important bit and well with that we have gotten delta time now this approach has one problem and that is that it's not exactly precise and since we're working with very small numbers you do want precision so a better way would be to use the time module in python and let's do this straight away now to use this we have to import the time module and this one is already installed with python so it should work by default and what we basically want to do before we are starting the while loop i want to get previous time and what i want to get in here is time dot time and this is giving us our current time and then inside of our while loop let me comment out the previous clock.tick i want to get my delta time is going to be now my time dot time minus the previous time and after that is run i want to set my previous time to time dot time and with this approach we always get the time between the different frames it's ultimately quite simple and let me add another space so now let's run all of this and now you can see we have a significantly longer and much more precise number which is exactly what you want now the problem is that our rectangle is not moving whatsoever and well now you can see it's moving a tiny bit but why is this thing not moving or moving so inconsistently and the answer here is that our frame rate is too high and that is not the problem that happens because of time.time so if i comment all of this out again and uncomment the previous approach and change this to something like 600. now if i run this we get the same result essentially the problem we have right now is that all of this breaks if our frame rate is getting too high now you might be asking why is that the case and that's a very good question let's talk about it that's just going to be a tiny bit more theory basically the problem is that when we use delta to move we are always moving with floating point numbers but with pygame when we are placing a rectangle we always have to place an integer and well what does that actually mean let me give an example if we move with pure integers let's say 5 pixel and this could for example be the rectangle we have just used and we want to move this rectangle to the right by 5 pixels if that was the case on the first frame we would have 5 pixels then 10 pixels then 15 and then 20. this one works just as expected so this one is totally fine now where the system does break down is when we have a floating point number let's say 4.5 so technically this should be 90 of the original speed so this is also a rectangle that we want to move to the right by 4.5 pixels the problem is now when we use this pixel information on a rectangle pygame always has to place a rectangle in an integer position because it's pixel information and as a consequence this 4.5 would be truncated meaning that this 0.5 would be omitted and as a consequence when we move it by 4.5 pixels we would only get 4 pixels and then our next frame we get to 8 pixels then to 12 pixels and then to 16 pixels so even though it's supposed to be at 90 percent of the speed of this initial rectangle it is actually moving much slower and even worse if our framerate can fluctuate quite a bit this number might get lower or higher which is making our movement very inconsistent and then what happened in our actual code let me go back to it so in this one here if i run it again we still get basically zero movement sometimes we get a tiny bit of movement and let's actually visualize the information that this rectangle here is getting so let's print this test speed multiplied by delta time and let me use time.times so we get more precise information and now let's run this again and now the number we get is 0.2 and a long number now pi game essentially sees 0.2 for the most part and truncates this to a zero so the rectangle doesn't move at all now very rarely this number gets just large enough to pass a one very very rarely and this is why sometimes this rectangle is moving but most of the time it doesn't so i hope that explains the issue now more importantly how do we solve it and the answer here is essentially that we don't move rectangles by themselves at all instead we are storing the information in a separate variable and then set the rectangle to the position of that variable sounds complicated it really isn't that bad so below my test rect i want to set let's call it test rect position and by default this is going to be test rect.x and now in our game loop i want to get my test rect position and this one is going to get test speed multiplied by delta time and now for the test rect position i want to set this test right position for the x part of the rectangle and important here this should be equal not plus equal so now if i run all of this now we have a very smoothly moving rectangle this feels much better and this works at literally any kind of frame rate so right now our frame rate is literally unlimited so this is working really well although there's one more thing that i would like to do that this test rack position should get a rounding and the reason for that is let's say right now this test track position is 1.6 if we were to just pass this into the position of testrec.x pygame would turn this 1.6 just into a 1 and it would essentially remove this 0.6 now the problem is this isn't as precise as it could be because the more precise location here in terms of pixels would be a two so we don't want to truncate this value instead we want to turn it into the integer that's closest which this case is two and for that we're using round although in practice you don't really see that much of a difference so for all of this now well we get essentially the same outcome but now this is looking really smoothly so with that we have a very basic setup on how to use delta time and basically any kind of frame rate now the question is how do you actually implement this in a more complex project and for that we have the second example and the more complex example is going to be this one so if i run this code here we can see a pirate that's moving left and right that rotates and that has an animation which is basically all the stuff you want to do in a game and if i close this we have a couple of lines of code that should all make sense i guess let's go really quickly over the main parts here we are importing the usual stuff plus time then we are setting up the pygm window just we have done before then we are creating a sprite i'll explain this one in just a second after we have done that we are creating a group and placing one instance of this sprite inside of that group after that we are starting our while loop and we're getting delta time with time.time basically what i've just explained then we have our event loop we are filling the screen then we are updating and drawing the spread group and finally we're updating the window and limiting the frame rate so all of this should be fairly simple but now we have the same problem that if i change the frame rate to basically anything besides 60 this entire thing breaks so at 600 this thing becomes basically unplayable and if i set this to something like 5 it becomes incredibly slow so this is what we have to work on and for that we have to update our sprite so let's have a look at this one first we are starting with our indeed method and in here we first import a couple of frames and set a frame index and this one will be used to pick one of these frames we are actually doing this straight when we set the image but we're also doing this down here in the animate method and this one here would be a really simple way to animate a sprite if you have no idea how this one works check out my introduction to pygame it explains all of this in quite some detail once we have that we are setting self direct and this one is in the mid left of the window and then besides that we have a couple of attributes for the rotation the direction the move speed and the animation speed so this is basically what moves and rotates and animates our sprite and how these things are going to be used is a bit further down here so besides our animate method we also have a move method that right now just moves the rectangle to the right in a direction by a speed and then if this rectangle gets too far to the right or too far to the left we are changing the direction and for the rotation we are simply increasing the rotation and then we're using pygm transform row to zoom to rotate this image and then in our update method we are well calling these three methods here and now basically all we have to do is apply delta time to all of these methods and for that first of all we have to make delta time available inside of the update method which is quite easily done so when we call the update method i want to pass in delta time in here and for that to work the update method needs another parameter that i am also going to call delta time and now each method that moves anything needs a delta time argument and since we have now an argument we have to create some more parameters that are all going to be called delta time and let's just run the code to make sure nothing went wrong cool still works and let me set the frame rate let's say to 600 so it's a bit easier to see what's going on so right now all of this is going to be way too fast and the most obvious problem right now is the move method so this one works way way too fast and in here we could just multiply this line with dt which right now would well make the movement basically zero and that's the problem i just talked about that pi game is truncating this number so anything like 0.2 would become zero so our movement would be a zero and to fix that i want to create another attribute in the init method that i have called self.position and this one is going to be pygame.math.vector2 that needs to be capitalized and the position at the start is going to be self.rect.top left essentially the top left of this rectangle now we are not going to move this rectangle instead we are going to move the position so self dot pause dot x is going to be plus equal all the stuff we have just done and now the rectangle x position is going to be self.x with the slight modification that this value is going to be rounded and right now our rectangle is only moving left and right but if you also had vertical movement you could just add a y to both of these values and you would address this part as well so now if i run this we can see we still don't have much of a movement but now the reason is that our move speed is very very low so if i set this to something like 200 now it should be working and there we go even though we have a move speed of 200 this thing is moving at a reasonable pace and just to see if this is working with other frame rates as well let's change this to let's say a 30. and let's try this again and now we have the same move speed except now the difference is our rotation and our animation are much much slower but the move speed does not change so with that we have addressed the first part now next up i guess we can work on the rotation and all we have to do in here is to move the rotation plus equal one multiplied by delta time and now we also have to increase the rotation number let's say 50. and now if we run all of this we have a movement and the rotation is significantly slower even though our frame rate is still at 600 and well this is working really well now the last thing we have to address is animate and this one also is kind of simple because all we have to change is the animation speed here and this one i'm just going to multiply with delta time and now we also have to increase the animation speed here so let's set this one to 5. and now it may be a tiny bit too slow but i think generally you get the idea this is working really well and well with that we have our basic setup and we can try this as well so here we have our clock.tick and let's set this to 30. and now we still have a similar speed except now the entire thing looks a bit choppier actually to illustrate this a bit better let's set our frame rate to 1. and now you can see that everything is very slow but we still keep the same speed the same animation speed and the same rotation except now we have very very few frames i guess a bit better would be something like five and there you can see it's significantly better so now our animation movement rotation speed is the same except we're doing it with much fewer frames and all right so with that we have basically covered all you need to know to understand delta time and how to apply it to pygame so i hope that was helpful and i will see you around
