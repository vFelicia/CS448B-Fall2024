With timestamps:

00:00 - hello there in this tutorial you will
00:02 - learn about the tiled level editor we
00:05 - are going to create a bunch of different
00:06 - levels in different styles we will use
00:08 - terrains to create levels more
00:09 - efficiently and at the end we will cover
00:12 - how to import the level data into pygame
00:15 - and all of that should be fairly
00:17 - straightforward however before we get
00:20 - into all of this let's talk about what
00:22 - tiled is and what problem it solves
00:26 - tiled is a level editor that allows you
00:28 - to import graphics and then place them
00:30 - in such a way that you end up with a
00:31 - level of a game
00:33 - for example we could load this graphic
00:35 - of a title set into tiled and then
00:38 - inside of tiled we can pick specific
00:40 - parts of it and place it to build a
00:42 - level
00:43 - and i guess to visualize this a bit more
00:46 - here we are entitled already and in the
00:49 - middle you can see my level that i'm
00:50 - building right now and on the right we
00:53 - have some graphics that i can pick from
00:55 - and basically all i'm doing is pick
00:57 - different graphics and use them like a
00:59 - brush to create my level
01:01 - that is the main idea of tiled
01:04 - and since tiled supports a bunch of
01:06 - different export options it is basically
01:09 - supported by any major game engine or
01:11 - framework
01:13 - i will cover how to do it for pygame but
01:15 - if you look around you find the way to
01:17 - do it for basically any other game
01:19 - engine as well
01:21 - and tiled has actually been used for
01:22 - commercial games shovel knight axiom
01:25 - verge and carrion are probably the
01:27 - biggest ones but there are quite a few
01:28 - more as well
01:30 - it is a very powerful piece of software
01:34 - to use tiled we have to install it and
01:37 - this you do from the website which is
01:39 - looking like this
01:40 - and in here all you have to do is click
01:42 - on download
01:44 - and then click on download again
01:47 - and in here you could pay any amount of
01:50 - money you want and i would recommend you
01:52 - to pay at least a bit because a lot of
01:54 - work went into it but if you don't want
01:57 - to you don't have to you can just click
01:59 - on no thanks just take me to downloads
02:02 - and then you can download whatever
02:03 - version applies to you
02:05 - in my case i am using the installer for
02:08 - windows 64-bit and chances are that you
02:12 - have the same version so if i click on
02:14 - download we get to a new website and we
02:16 - are downloading the program in my case i
02:19 - have already done this so i'm going to
02:20 - delete it but well in your case you want
02:23 - to finish the download and then install
02:25 - it
02:26 - and once you finish installing you can
02:28 - open the program like any other program
02:31 - and once you open it you can see
02:33 - something like this
02:35 - and
02:36 - in your version you probably see the
02:38 - same thing just a little bit brighter
02:41 - the reason why mine looks different is
02:42 - because i well made it darker and to
02:46 - make it look like mine
02:48 - all you have to do is go to edit
02:50 - preferences and in here there's theme
02:54 - and we want to change the base color
02:56 - and then here you have a brightness
02:58 - slider on the right side
03:00 - and in my case i put it down to
03:03 - something a little bit darker
03:05 - and i think this is looking
03:07 - significantly nicer
03:10 - all right now what can we do in here and
03:14 - right now we can see a bunch of options
03:16 - in the top left
03:18 - and to understand what they do we have
03:21 - to cover some basic functionality of
03:24 - tiled
03:25 - and the best way i think to think about
03:26 - it is in terms of painting
03:29 - because essentially what we are doing is
03:31 - painting a level and there are three
03:33 - elements that you want to be aware of
03:35 - the first one is the canvas so the
03:38 - element we are painting on entitled that
03:40 - is the map and this is what we can
03:42 - actually create here already we are
03:45 - going to create this one in just a
03:47 - second actually
03:48 - but then for painting you need two more
03:51 - elements you need colors and you need
03:53 - brushes
03:54 - and the colors entitled are essentially
03:57 - the tile sets
03:59 - this is where we are going to take
04:00 - elements from and place them on the map
04:03 - which is our canvas
04:05 - and then the brushes are the selection
04:07 - tools entitled that we can use to select
04:09 - different tile sets
04:11 - but basically all we want to do for now
04:14 - is to create
04:16 - let me show my mouse i want to create a
04:19 - new map
04:20 - so i click on it and now we get a few
04:23 - more options
04:25 - at the top we are getting map
04:28 - orientation tile layer format and tile
04:31 - render order and most of the time you
04:34 - only really want to care about the
04:36 - orientation
04:37 - because if you open this one you get 4
04:41 - different options we have orthogonal
04:44 - isometric isometric staggered and
04:46 - hexagonal
04:47 - and these options are to create
04:49 - different styles for our game orthogonal
04:52 - is essentially the default where you
04:54 - have square tiles where you can place
04:56 - different elements
04:58 - so games like mario or zelda use this
05:00 - kind of style
05:02 - isometric is this 45 degree top down
05:05 - look games like simcity when it was 2d
05:08 - had that style of final fantasy tactics
05:10 - had the same style and the third style
05:13 - is hexagonal and if you think of
05:15 - civilization that's a hexagonal style
05:17 - it's fairly rare but well you can't
05:20 - create it entirely
05:22 - now in our case i want to stick with
05:24 - orthogonal although later on we are also
05:27 - creating an isometric tile set those two
05:29 - are the really common ones
05:31 - and for tile layer format we have
05:34 - different versions and fertile render
05:35 - order we also have a few more options
05:37 - but none of those really matter you just
05:40 - want to leave them as they are
05:42 - but then when we look below we have a
05:46 - few more options
05:48 - we have map size on the left and we have
05:51 - tile size on the right
05:53 - and basically what that means
05:56 - is when we are creating our map we are
05:58 - creating a map
06:00 - that consists of tiles so the map is the
06:03 - larger canvas and inside of this canvas
06:06 - we have individual elements that look
06:09 - something like this
06:11 - let me draw a couple more we are
06:13 - basically covering
06:14 - the entire map with tiles
06:17 - and right now our map is 35 tiles wide
06:21 - and 32 tiles high
06:23 - that is the information you get here
06:26 - and then each individual tile is 110
06:30 - pixels wide and 64 pixels high
06:33 - and these numbers mean that each tile
06:35 - inside of the map is
06:37 - 110 pixels wide and 64 pixels high
06:41 - and for those numbers you do want to be
06:44 - really careful especially the tile size
06:47 - because when we're importing a tile set
06:49 - we have to work with a specific size
06:52 - and if you mess up the sizes you can get
06:55 - into a lot of problems
06:57 - actually let's have a look at this in
06:58 - photoshop right now
07:01 - and all right here we are in photoshop
07:05 - and this is the graphic we are going to
07:07 - use in just a second
07:09 - now for this graphic
07:11 - let me zoom in a tiny bit
07:13 - and basically how it works is that all
07:16 - of this is composed of different tiles
07:19 - and each tile
07:21 - would be something like here we have one
07:23 - tile
07:24 - here we have another tile and here we
07:27 - have a fertile
07:29 - and this we are going to continue for
07:31 - the entire tile set
07:34 - that's why it's called a tile set it's a
07:36 - set of different tiles it's amazing how
07:38 - that works
07:39 - and the size of these tiles in the
07:42 - graphic has to be the same size as the
07:44 - tiles in our map if they don't line up
07:47 - you end up with a lot of problems
07:50 - and in our case each tile is 128 by 128
07:55 - pixels
07:56 - so that is the size we want to have for
07:58 - the tile size in our map
08:02 - and when you open any kind of tile set
08:04 - the first thing you do want to check is
08:06 - the size of each tile it's usually 16 by
08:09 - 16 32 by 32 64 by 64 or 128 by 128
08:14 - although basically any size could be
08:18 - viable here you really have to check all
08:21 - right back to tiled
08:22 - and what i want to do in here is create
08:24 - tile size with 128 and 128
08:28 - and you can actually tell now that we've
08:31 - changed the tile size we get a new
08:32 - number down here and that's the size of
08:34 - the entire map
08:36 - and this number we are literally just
08:38 - getting by multiplying the width of the
08:40 - map with the width of each tile size
08:43 - i guess we can make this really clear by
08:46 - changing each of those to one
08:48 - and
08:50 - one tile and we get 128 by 120.
08:54 - but let me undo all of this
08:58 - that is looking good all right finally i
09:00 - can click on ok
09:02 - and here you can see the actual menu of
09:05 - tiled
09:06 - now before we actually implement
09:08 - anything let me go through the different
09:10 - panels you can see right now
09:12 - the most important element the one in
09:14 - the middle this one here is called the
09:16 - map and this is essentially our canvas
09:19 - if i stay in the drawing analogy this is
09:22 - where we are going to create our level
09:24 - the next really important thing is on
09:27 - the right here we have layers
09:30 - and we have tile sets higher sets is
09:33 - going to be the colors we are going to
09:35 - use later on and we can create a new
09:37 - tile set here we are going to do that in
09:39 - just a bit
09:41 - layers are basically different layers
09:43 - you can draw on so if you want to put
09:45 - one element on top of another element
09:48 - that's what you would use layers for
09:50 - the next important element are these
09:53 - elements here all the way at the top
09:56 - specifically this row here
09:58 - these are essentially our brushes
10:02 - the one we have selected right now this
10:04 - one here is called a stamp brush that's
10:06 - like the default brush but we also have
10:08 - a fill brush this one here and we have
10:11 - an eraser and well that one erases stuff
10:15 - and those you would use to place tiles
10:17 - on the map like you would use a brush to
10:20 - paint colors on a canvas
10:22 - and then next up on the left side you
10:24 - have one panel with information right
10:27 - now it's for the map but it could also
10:28 - apply to tiles it really doesn't matter
10:31 - all that much but well if you really
10:33 - want to look up some information about
10:35 - the tile
10:36 - here is where you would find it
10:39 - and one more really important thing we
10:42 - can see right now we have untitled tmx
10:45 - all the way in the top and this is one
10:47 - tab
10:48 - and every single map and every tile set
10:50 - you open is going to be another tab that
10:54 - should be making sense in just a bit
10:55 - when i actually use it
10:57 - but what i want to do for now is to save
10:59 - this file and this you can do either
11:02 - under file and save or with control s
11:06 - and if i click on that i get to my
11:07 - folder setup
11:10 - and in here i have three folders i have
11:13 - code data and graphics and i want to go
11:16 - to data and then here i have tmx
11:19 - and i want to give it a name let's call
11:22 - it basic
11:24 - and if i save it now the name has
11:26 - changed to basic.tmx
11:29 - let's actually create a tile set so we
11:31 - can draw on this entire thing and for
11:33 - that
11:36 - i have to click on new tile set the
11:38 - element here all the way on the right
11:41 - and if i click on it i am getting
11:43 - another dialog
11:44 - and at the top we have a name and a type
11:49 - and for the type we can select based on
11:51 - the tileset image and based on a
11:53 - collection of images
11:55 - right now i want to stick with tileset
11:57 - image
11:58 - and if you have this one selected you
12:00 - have another dialog below and then here
12:02 - we have to browse for an image which i
12:05 - do want to click on and in here i want
12:07 - to select my tiles
12:10 - and click on open and now i have the
12:13 - path towards it
12:15 - before i can click on save as there are
12:18 - a few more options i do want to consider
12:21 - the more important ones here are tile
12:23 - width and tile height
12:25 - and those refer to the size of each tile
12:28 - inside of this tile set
12:31 - this is basically what we looked at in
12:33 - photoshop just a few minutes ago
12:36 - and this number you really want to be
12:38 - equal to this number here that way our
12:41 - graphics and the tiles in our map have
12:44 - the same size
12:45 - if they don't match up you are very
12:48 - likely to end up with problems although
12:50 - sometimes you do want it to be the case
12:52 - i will cover that later
12:54 - especially for isometric tiles this is
12:56 - becoming important but right now we just
12:59 - want them to be equal so we don't have
13:00 - to worry about it
13:03 - besides that we have margin and spacing
13:07 - and these are options you would be using
13:09 - if there are gaps in your tile set
13:11 - which is a fairly common thing but in my
13:14 - case they don't exist so i can leave
13:16 - those at 0 and 0.
13:20 - with all of that covered i want to click
13:22 - on save as
13:24 - and now i have to save a new file and
13:27 - right now i'm in the tmx folder i want
13:30 - to go up one folder and to my tsx folder
13:33 - and then here i want to save my tiles
13:37 - and once i do that i get a new tab and
13:40 - this one you can see all the way up here
13:42 - tiles.tsx
13:44 - and if you want to return to the tile
13:47 - map you have to go to the initial tab
13:50 - and now in here you can see all of the
13:52 - tiles of the graphic
13:56 - and if you want to move around here you
13:59 - have a couple of different options
14:02 - let me show the mouse again so if you
14:04 - want to navigate this you could either
14:06 - use these scroll bars but that's kind of
14:08 - inefficient
14:10 - usually what you do is hold the middle
14:11 - mouse button and then pan around that's
14:14 - much easier
14:16 - and if you wanted to zoom in and out
14:18 - you can use control and the mouse wheel
14:21 - that's basically what you want to use
14:24 - most of the time
14:26 - and then besides that you can click on
14:28 - every single tile and well select
14:31 - individual elements
14:33 - although you cannot use them in this
14:35 - menu instead what we have to do
14:37 - [Music]
14:39 - is to return to basic.tmx
14:43 - in here now
14:45 - all the way on the right
14:47 - you can see in the tile sets
14:49 - we have our graphic
14:52 - and inside of this you can use the same
14:55 - navigation options so if i hold ctrl and
14:59 - scroll out
15:00 - i am making all of this smaller so it's
15:02 - a bit easier to see
15:04 - and now in here you can see all of the
15:06 - tiles
15:08 - you can also hold the middle mouse
15:10 - button and pan around in here
15:13 - and now basically what you are going to
15:16 - do you are selecting the stamp brush the
15:19 - one i have already selected or you could
15:21 - press b for the same result and then you
15:24 - select one tile that you want to draw
15:26 - let's say this grass tile and now on the
15:29 - map i can just draw
15:31 - all of this wherever i want
15:35 - obviously this one is looking terrible
15:38 - so let me undo all of this
15:41 - and instead
15:42 - i want to place just a couple of grass
15:45 - tiles and then select other tiles to
15:49 - create a proper
15:52 - outline something like
15:55 - this
16:00 - right now this is a very slow process
16:03 - but we will learn about more efficient
16:05 - tools later on but this allows us to
16:10 - basically place elements wherever we
16:12 - want on our map
16:14 - and what you can also do is select
16:16 - multiple elements inside of the tile set
16:19 - for example if i wanted to place all of
16:22 - these parts here i can select all of
16:25 - them if i now go
16:26 - into my map i can place all of them
16:29 - wherever i want i can also drag them
16:32 - like any other brush although that
16:34 - admittedly looks horrible
16:36 - let me undo it actually
16:38 - let me keep those
16:40 - and by the way in this map you also have
16:42 - the same navigation options so if i hold
16:45 - the middle mouse button i can pan around
16:47 - if i hold ctrl and use the mouse wheel i
16:50 - can zoom in and zoom out
16:53 - and now the other brushes you have the
16:55 - next really important one is the bucket
16:57 - fill tool
16:58 - and this one well it fills the entire
17:00 - surface so let me select one of the dirt
17:03 - tiles this one here
17:06 - and then if i select anything on the map
17:08 - and click we are filling the entire area
17:11 - with dirt
17:14 - and this you could do with literally any
17:15 - other tile
17:16 - and this one is context aware so it
17:19 - checks for similar tiles that's
17:21 - something you do want to be aware of
17:23 - for example if i zoom into the grass
17:25 - style here
17:27 - the fill tool only fills
17:29 - identical tiles if we have a different
17:31 - tile
17:32 - they would not be filled
17:35 - and then the next important brush or
17:38 - weld tool is the eraser and this one you
17:40 - can use to erase things
17:42 - fairly obvious i suppose
17:44 - and i would really recommend you to
17:46 - practice all of this
17:49 - i guess a good idea would be to create
17:51 - your own map from just using all of
17:54 - these tiles so pick a couple of random
17:56 - ones and then try to draw an actual
17:59 - usable map and see how far you get
18:05 - all right let me get rid of all of this
18:09 - and let me show my mouse actually i
18:11 - think that's going to be better
18:13 - i first of all want to use the bucket
18:15 - fill tool and fill the entire area with
18:17 - dirt
18:19 - then i am going to zoom in
18:22 - select the
18:24 - stamp brush
18:26 - and now i have an outline and this i can
18:29 - fill as well
18:31 - oh yeah i didn't mention the fill tool
18:33 - selects identical tiles if they are in
18:36 - an enclosed space
18:39 - and now i have my grass area and now we
18:41 - come to the slightly more boring bit i
18:43 - have to create all of the outlines
18:46 - that would look something like this
18:48 - i am probably going to speed this part
18:50 - up because it is fairly monotonous
19:03 - all right and there we go
19:07 - we have
19:08 - well something very basic
19:10 - but this could be something you actually
19:13 - see in the game
19:17 - and you might have noticed this is a
19:20 - really slow and annoying process
19:23 - and later on we are going to learn a
19:25 - better way of doing this
19:27 - that is what terrain sets are for but
19:30 - for now this is the basic what you are
19:32 - going to need
19:34 - although now
19:36 - imagine you want to place something on
19:39 - the right
19:40 - here like this plant
19:43 - if i place this plant somewhere on the
19:46 - level let's say here
19:47 - we have a problem that you can see the
19:50 - background
19:53 - let me zoom in a bit more here you can
19:55 - see the background and this looks well
19:58 - kind of ugly
19:59 - so what i want is to place this plant on
20:02 - top of the grass let me undo it and to
20:06 - place something on top of each other we
20:09 - need layers
20:10 - and right now we only have one layer and
20:13 - if i double click on it we can rename it
20:15 - let's call this one the ground
20:19 - and to create a new layer i have to
20:21 - click on this symbol here
20:23 - and here we have a couple of options
20:25 - higher layer and object layer are the
20:27 - most common ones and i want to create a
20:30 - new tile layer
20:32 - and this one also needs a name let's
20:34 - call it plants and
20:37 - rocks
20:38 - and let me spell it properly
20:41 - and now
20:43 - i can select the plant again
20:45 - if i plant it it's on top of the ground
20:49 - and if i
20:51 - hide this layer it disappears
20:54 - i can do the same thing for the ground
20:56 - with the obvious result
21:02 - and this way i can place elements around
21:05 - wherever i want
21:10 - and these layers here are really
21:12 - important to create more complex levels
21:17 - for the bigger projects i made and tiled
21:19 - i usually have something like 7 or 8
21:21 - different layers
21:23 - and in here you do have to be really
21:26 - careful which layer you are drawing on
21:28 - it happened to me really often
21:30 - that i think i'm on one layer and then i
21:33 - end up drawing on another layer so for
21:35 - example if i have ground selected and i
21:37 - draw something i would end up with
21:39 - something really horrible which i didn't
21:42 - want
21:44 - and all i really want to say is be
21:46 - careful what layer you are on it's very
21:48 - very easy to forgot what layer you are
21:49 - working on just keep it in mind
21:52 - all right now when i am placing let's
21:56 - use something more recognizable like
21:58 - this rock
21:59 - i do have a couple more options let me
22:01 - zoom in a bit more to see it better
22:04 - there we go
22:05 - now right now when i'm placing this rock
22:07 - we always have the same rock
22:09 - although if you look at the top at these
22:14 - four elements here
22:15 - you can either flip the rock with these
22:18 - two
22:19 - or you can rotate the rock with these
22:21 - two
22:22 - and if i click on this one here
22:25 - i have a rotated rock if i click on the
22:27 - other
22:28 - i have rotated the rock in the other
22:30 - dimension vertically
22:33 - and this i can also do for the other
22:35 - side as well and if you just use those
22:37 - two buttons
22:38 - you already get very different looks
22:42 - which can be a nice way to make your
22:43 - game look a bit more varied
22:47 - and then besides that you can also
22:48 - rotate the entire thing by 90 degrees in
22:52 - this case i guess same result but you
22:54 - get the idea
22:56 - and there's one more really useful
22:58 - button and that's this random mode here
23:00 - the little symbol of the dice
23:03 - if i click this nothing seems to change
23:07 - because for this one to work i have to
23:09 - select multiple elements so let me
23:11 - select all of these bits here all the
23:14 - plants and rocks
23:17 - and now if i return to my map you can
23:19 - already see the result let me zoom out a
23:22 - bit
23:24 - every time i go to a new tile we get a
23:26 - different element that is a random
23:28 - selection of these selected items here
23:32 - and those i can just now draw on the map
23:34 - and we get something completely
23:36 - randomized
23:38 - and if you don't like one specific
23:40 - randomized item
23:42 - you can just click again and you get
23:43 - something else
23:45 - it's super useful
23:49 - and what you can also do
23:51 - if you want to have some elements being
23:53 - more common
23:54 - let's say in my case i want your plants
23:56 - to be really common and just once in a
23:59 - while have a rock
24:02 - this you can also do but we do have to
24:05 - return to the title set
24:07 - so in the tab i want to click on
24:09 - tiles.tsx
24:11 - and move to
24:13 - these elements
24:16 - and if i select any of them
24:20 - on the right side now we have the
24:22 - properties panel and we have a couple of
24:24 - options
24:25 - we have id that's the number of the tile
24:28 - set that's not really important we can
24:30 - set a type ourselves also not something
24:32 - we care about we have width and height
24:35 - also something we don't really want to
24:37 - care about and then we have probability
24:40 - and right now it's one and that is the
24:42 - one we are going to care about
24:46 - because what we can do in here is set
24:49 - this to a different number
24:51 - let's say in this case i want to set
24:53 - this to
24:54 - 0.1
24:56 - and if i click on the next element now
25:00 - this bush here this one still has the
25:03 - one so if i only selected those two
25:05 - elements in random mode
25:07 - this small bush is 10 times more likely
25:10 - to spawn than this larger bush or tree
25:12 - or whatever it is
25:14 - let me save it and return to the tile
25:17 - set
25:18 - and if i now select only those two tiles
25:20 - here
25:22 - and render mode is still activated i get
25:25 - lots of smaller bushes and only very
25:29 - rarely a larger one
25:33 - and that is the idea behind this
25:36 - probability
25:37 - and you can also select multiple
25:39 - elements and give them one probability
25:42 - so i want to give all of them a
25:43 - probability of one
25:46 - and all the rocks get a probability of
25:50 - 0.25 let's say
25:53 - and now if i return to this tile set
25:55 - select all of these elements again
25:58 - if i now draw them okay that's a bit
26:00 - hard to see let me go to another area
26:03 - if i now draw them we get a lot of plans
26:06 - and
26:07 - very very occasionally a rock but it is
26:09 - fairly rare
26:12 - there we got a few more alright this
26:14 - seems to be working just fine
26:16 - and with that we covered all the basic
26:18 - parts of a tile set if you just want to
26:21 - create some basic things this is all you
26:23 - are ever going to need it really isn't
26:26 - that hard although there are a few more
26:28 - elements entitled that i do want to
26:30 - cover
26:31 - the next one is objects
26:34 - and there's actually a whole tab next to
26:35 - layers objects and right now we don't
26:38 - have any objects
26:40 - and basically what objects do
26:43 - there are just other graphics that you
26:45 - can place on the map except that objects
26:48 - can have any size and you can place them
26:50 - wherever you want meaning they are not
26:53 - bound by this tile set you can just
26:55 - place them wherever you feel like they
26:56 - should be
26:58 - and especially if you have some more
27:01 - recognizable elements like a castle or a
27:03 - tree
27:04 - you do want to use objects
27:06 - and well to create them we first have to
27:09 - import them and this happens again
27:12 - by clicking on this new title set here
27:14 - and this time
27:16 - we don't want a tileset image we want a
27:18 - collection of images
27:20 - and those need a custom name
27:24 - let's say in my case i want let's call
27:27 - it objects
27:29 - now i click on save as
27:31 - now i'm back in my tmx folder and i want
27:34 - to go one fold up go to tsx and then
27:37 - here i want to save them with the tiles
27:40 - and i click on save and now i have a
27:42 - whole new window and this one looks very
27:44 - similar compared to the tiles except
27:47 - it's empty
27:48 - and the first thing that we have to do
27:51 - is to import some graphics into it
27:54 - and for that i need my folder this one
27:57 - here and if i go to graphics besides
28:00 - tile sets we also have objects and then
28:02 - here i just have a couple of random
28:04 - images
28:06 - and those i want to drag into tiled
28:09 - if i do that i can see my castle and if
28:11 - i zoom out
28:13 - i can see all of the elements
28:15 - and right now they all look like they
28:18 - have the same size
28:19 - but if i click on the castle for example
28:22 - you can see it's quite a large image and
28:25 - if i click on the mushroom it's much
28:27 - much smaller
28:29 - so all of these images have very very
28:31 - different sizes
28:33 - which is completely different compared
28:35 - to these ones here they are all
28:36 - identical in terms of size
28:39 - and you could also set the probability
28:41 - this one works in the same way but
28:43 - besides that there isn't really that
28:45 - much of a difference
28:46 - but now if i return to my tile map
28:50 - i get under tile sets another tab this
28:53 - one is objects
28:55 - and let me zoom out
28:56 - again
28:58 - in here
29:00 - i could select this castle for example
29:03 - and place it although if i am trying to
29:06 - do it you get something weird
29:08 - that
29:09 - the tile i have selected and where i
29:11 - place the castle have no relation to
29:13 - each other which is kind of annoying
29:17 - and the reason here is that the castle
29:19 - is just way too big for the tile so tile
29:21 - doesn't really know what to do with it
29:24 - oh that was one too much there we go
29:27 - now to account for that we have to
29:29 - create a new layer which we do here
29:32 - and now we don't want entire layer we
29:34 - want an object layer
29:36 - and now we have to rename this new layer
29:39 - and let me call it objects
29:42 - and now we have a new layer but more
29:44 - importantly if you look all the way at
29:46 - the top
29:47 - the icons we used before like the stamp
29:50 - brush or fill have all been grayed out
29:53 - meaning we cannot use any of these here
29:57 - and instead we have gotten a whole new
30:00 - set of tools all of these here
30:04 - and the one you are going to use the
30:06 - most is this one here
30:09 - this is basically the stamp brush for
30:11 - objects
30:13 - and this one is called insert tile
30:15 - now if i select this one and now go back
30:18 - to my title set now i can place the
30:20 - castle
30:21 - wherever i want
30:23 - it's in the center of my mouth
30:25 - and it is not constrained by the tile
30:27 - set i can move it around wherever i want
30:30 - and this applies to all of them
30:32 - so i can place some mushrooms some trees
30:38 - power doesn't really matter
30:40 - and all of this is done with this brush
30:43 - here or this tool whatever you want to
30:45 - call it
30:46 - besides that the other really important
30:48 - one is select object and this one well
30:50 - it selects objects so i can select this
30:52 - one this one this one and so on
30:56 - and also if you click on it twice you
30:58 - get different options
31:00 - the first one the one with the arrows
31:02 - allows you to
31:03 - scale the object you have
31:06 - if you click on it again
31:09 - now you can rotate the entire thing
31:14 - and more importantly
31:16 - if you look at the layers
31:18 - there we have objects as well and in
31:20 - here you can select all of the objects
31:24 - that we have created earlier
31:27 - and for each object we can set a name
31:30 - and a type those you can see here on the
31:33 - left side
31:35 - and let's say what i want to do i want
31:37 - to select all of my castles so i hold
31:40 - shift and click on all of them
31:42 - and i want to give each of them the name
31:45 - castle
31:46 - and type is going to be building
31:50 - and
31:51 - if you now look
31:53 - on the right side
31:55 - we have now
31:56 - a name and a type for each castle
32:00 - we can do the same for the towers as
32:03 - well
32:04 - those ones are going to be name
32:06 - power and type is also going to be a
32:09 - bill
32:11 - thing
32:14 - and besides that
32:17 - we have some trees
32:20 - and let's call them trees
32:23 - or just tree
32:25 - and
32:26 - type let's call it vegetation
32:31 - and then we have a ton of different
32:34 - mushrooms
32:36 - and let's call those mushroom
32:40 - and type vegetation
32:44 - and what you may be seeing that after
32:46 - you have given them a name you can
32:48 - always see the name on top whereas in my
32:50 - case they only show up when i select
32:53 - them
32:53 - this you get under view
32:56 - and show object names
32:59 - for you i think it may be for all
33:01 - objects in my case it's only for
33:03 - selected objects
33:05 - generally views is really really useful
33:09 - and well this is
33:12 - basically the start of what you would
33:15 - need to use objects and titles together
33:18 - i did forget two trees
33:21 - let me call them tree and vegetation
33:25 - there we go
33:26 - now we have all of the objects
33:28 - now there are a couple more these four
33:32 - here
33:33 - we have insert rectangle insert point
33:36 - insert ellipse and insert polygon
33:40 - and those well they do what the name
33:42 - implies if i select the shape one
33:45 - and draw now
33:47 - we are getting a rectangle
33:50 - if i select one of the points i can
33:52 - place some points
33:54 - if i select any lips i can place any
33:57 - lips
33:59 - and the polygon allows me to draw a
34:02 - polygon like this
34:05 - and then you could use edit polygons to
34:08 - manipulate each of these polygons if you
34:10 - really wanted to
34:12 - and you do want to give all of them a
34:14 - name as well
34:16 - so let me select all of the markers and
34:18 - let's call them
34:20 - name marker and type
34:23 - let's call it a shape
34:26 - then we have the rectangle
34:30 - and this one is also going to be a shape
34:33 - and we have the ellipse and the polygon
34:36 - those are both going to be type shape
34:39 - except for
34:40 - the ellipse
34:42 - it's going to be an ellipse and for the
34:44 - polygon
34:46 - i want to have a polygon there we go
34:52 - now these elements you can import into
34:55 - any kind of game engine but obviously
34:57 - right now they don't have any kind of
34:59 - graphic associated with them
35:02 - what you would rather do is import the
35:04 - geometry so you can get all of these
35:07 - points here let me draw actually that
35:09 - should be better
35:11 - so what you would import later on is the
35:14 - geometry like these four points for the
35:17 - rectangle
35:18 - and those you can then use to draw
35:20 - whatever you want inside of it
35:23 - so if you want to check if the player
35:25 - enters a certain area this kind of shape
35:27 - is really useful
35:29 - same for the markers like one of those
35:32 - you can use them to place certain
35:33 - elements like the main player if you
35:35 - want them in a certain spot like a
35:37 - starting position for example
35:39 - now one more thing that you could be
35:41 - doing is to insert text and
35:44 - let me return the mouse this is this
35:46 - button up here
35:48 - and if i click on it
35:50 - we can place some text let's place it i
35:54 - don't know here
35:56 - and right now this is a very small text
35:58 - box
35:59 - so what i want to do is to increase the
36:01 - width and the height of it
36:04 - let's say something like 400 by 400.
36:08 - the problem is the text is just
36:10 - generally very small
36:12 - and i guess another thing i can do is
36:15 - change the text in there let's call it
36:18 - my awesome level map
36:22 - and if you want to change the font size
36:25 - you would go to font you can also expand
36:27 - it and in here we can increase the font
36:30 - size quite nicely
36:33 - so it actually shows up
36:35 - on the whole level
36:40 - yeah i guess that works
36:44 - and then you can also move this text
36:47 - around
36:49 - like any other element
36:51 - now the only limitation with text is
36:53 - that importing it into pie games seemed
36:55 - to be kind of impossible or at least i
36:57 - didn't find a good way of doing it
37:00 - meaning that this would mostly be
37:02 - something used to annotate ideas in your
37:04 - level
37:05 - but maybe you find a way of doing it but
37:08 - with that we have covered all the
37:09 - fundamentals of tile
37:11 - now there's one more thing i do want to
37:14 - cover that is kind of important and that
37:17 - is let's say i take this castle and this
37:20 - tower here and i moved the tower in
37:23 - front of the castle
37:25 - now you can see let me zoom in a bit
37:28 - the tower is in front of the castle but
37:31 - if i move the tower a bit further up the
37:33 - tower is now behind the castle
37:35 - so they are drawn intelligently to
37:38 - figure out which element is on top of
37:39 - which other element
37:42 - that was a really weird sentence
37:44 - you get the idea that we get some kind
37:47 - of fake 3d that is really useful and
37:51 - how we are getting this is when you
37:53 - create a new map let me create a new one
37:55 - so new and map
37:57 - this is the tile render order this one
38:00 - right down here
38:02 - and in our case we are drawing elements
38:04 - right and down meaning the further down
38:07 - element is the higher it is drawn in
38:10 - terms of well drawing
38:14 - you could change it but there's very
38:16 - little reason to do so
38:19 - alright with that covered
38:21 - we are
38:23 - basically done if you just want to
38:24 - create a basic map this is all you are
38:27 - ever going to need
38:30 - and the games i've made so far like
38:32 - zelda and super mario were made in just
38:35 - this style that's basically all i did
38:38 - although there's one really useful tool
38:42 - entitled that you do want to use as well
38:45 - to work more efficiently
38:46 - and that is terrains
38:49 - now how terrains work is getting a bit
38:51 - more complex
38:52 - so
38:53 - let's explain what they are and what
38:55 - they do
38:57 - so let's talk about terrains and
39:00 - basically terrains are special tiles
39:02 - that react to their surroundings
39:05 - and what does that actually mean let's
39:07 - do an example
39:09 - say you have this kind of case here
39:12 - where you want to figure out what this
39:15 - tile is going to be
39:18 - and this one should be fairly obvious
39:21 - you want to draw the tile that connects
39:24 - these two like this
39:26 - with everything else being just dirt
39:29 - and this means if you know this tile
39:32 - here this tile here and i guess you know
39:35 - that this tile and this tile are empty
39:38 - you already know what tile needs to be
39:41 - in here
39:43 - you want to have the corner tile set
39:47 - and this is something we have done
39:48 - manually so far but tiled can also do it
39:51 - because it's a fairly easy process
39:55 - and this is what we are going to create
39:58 - however to create a terrain we have to
40:01 - talk about something else because there
40:03 - are different ways to create one let's
40:06 - go through them actually
40:07 - overall there are three different ways
40:09 - to create terrain tiles
40:12 - the first one is you look at the corners
40:14 - and this white rectangle right now is
40:17 - one tile
40:19 - and on this tile we want to check all of
40:21 - the corners these four here
40:24 - and if this tile borders on another tile
40:27 - so let's say we have another tile here
40:30 - all the way to the right
40:32 - and then for these tiles we know that
40:33 - this top one here is grass
40:36 - and the bottom one is dirt
40:40 - and if we have them connecting corners
40:42 - on the other tile so we know that on
40:44 - this right tile set we also have grass
40:48 - in the top left and we have dirt in the
40:52 - bottom left
40:54 - if that is the case we know we want to
40:56 - connect these two tiles here
41:00 - and that's the first case the second one
41:03 - is we are looking at the edges
41:05 - so instead of looking at the corners we
41:07 - now look at each of these connecting
41:10 - points
41:12 - meaning if we have a tile to the right
41:15 - again like so
41:17 - we only look at if this tile here and
41:22 - this tile here are identical
41:24 - say if both of those are grass tiles
41:28 - then we want to connect them and we
41:29 - don't really care what happens around
41:31 - the edges
41:33 - and finally
41:35 - we have corners and edges and this is a
41:38 - terrain set that does get really
41:39 - complicated because we are checking all
41:42 - of the corners these four here like we
41:45 - have done in the corner set and we are
41:47 - also checking all of the edges
41:49 - like so
41:51 - which means if this tile set has a tile
41:54 - to the right
41:56 - we have to check three different points
41:59 - for example if the bottom right of our
42:01 - tile is grass
42:02 - the middle one is
42:05 - dirt
42:06 - and the top one is water
42:09 - we are only going to connect the tile to
42:11 - the right if this also has water on the
42:13 - top left
42:14 - dirt in the middle on the right
42:17 - and then grass in the bottom left
42:19 - meaning for this kind of tile set we
42:22 - have to have a pretty complex setup
42:25 - and for this video i am only going to
42:27 - cover corners and edges for the simple
42:30 - reason that creating a corner and title
42:32 - set takes forever you're going to see
42:34 - very fast that creating title sets can
42:37 - be a really really long process
42:40 - but let's actually have a look at this
42:41 - in practice
42:44 - all right here we are back in tiled and
42:48 - i have two tile sets that are simplified
42:50 - that i want to use
42:52 - meaning i want to create a new tiles
42:55 - so i click on new tile set on browse and
42:58 - then here i have terrain corner and
43:00 - terrain edges
43:02 - and let's start with edges that's the
43:04 - easier one
43:05 - and all of these other attributes can
43:07 - stay the same
43:08 - so save as and i want to save all of
43:12 - this in another tsx file
43:15 - and let's leave terrain edges that one
43:17 - seems totally fine
43:19 - and now we have a new tile set and then
43:23 - here again we could just select
43:25 - individual images
43:27 - it's the same format we have seen here
43:29 - where we have just a couple of tiles
43:34 - so if you want to go to the level
43:37 - you could pick the terrain edges and
43:39 - just start drawing on it not on the
43:41 - objects layer but on this one
43:43 - so you could just create tiles here this
43:46 - one is just the same
43:49 - but i want this to be automatic
43:52 - and for that in the terrain edges
43:55 - i want to select this terrain set symbol
43:58 - here
43:59 - if i click on it we get a new panel on
44:00 - the right and in here we have to click
44:03 - on the plus at the bottom
44:05 - and now we can see what i just talked
44:07 - about we have a new corner set a new
44:09 - edge set and a new mix set which
44:11 - combines the corner and the edges
44:14 - and now to see if you paid attention
44:17 - is the tile set we need a corner set or
44:19 - an edge set try to think about it for a
44:22 - second
44:26 - the tile set we are going to need is an
44:28 - edge set so let me click on that
44:31 - let me zoom in a tiny bit on this tile
44:34 - set here for example
44:36 - if we look at this tile here the outline
44:39 - would look something like this
44:41 - and what we are looking for
44:43 - is if there is a connection here
44:45 - here here or here or i guess in this
44:49 - case we want to make sure that there's
44:50 - no connection on this tile here
44:52 - but you can already tell
44:54 - we don't check the edges like so
44:58 - and this is where we need the edge set
45:02 - if we're to use
45:04 - this tiles here
45:06 - for this one we do check the corners
45:09 - there it would be different
45:11 - but this is not what we worried about
45:13 - right now we want to create an edge set
45:17 - and first of all we have to rename
45:20 - things but
45:21 - so the terrain set i want to call i
45:24 - guess these are pipes
45:26 - i can't really tell what they are could
45:28 - also be a path doesn't really matter
45:31 - and then inside of the terrain set
45:34 - we have to give this red thing a name as
45:36 - well and i want to call it yellow
45:40 - and we could create more than one in
45:42 - here we are actually going to do that in
45:44 - just a bit but for now we just keep that
45:46 - one
45:47 - and now
45:48 - if you hover over the tiles you can see
45:52 - a red
45:53 - thingy
45:54 - and what we have to do
45:56 - is tell tiled
45:58 - where we want these elements to be and
46:00 - you can already sell how this is working
46:02 - so i know for this tile it connects on
46:04 - the left and at the bottom this is where
46:06 - i'm placing the dot thingies
46:08 - and this i have to do now for every
46:11 - single one of these tiles
46:13 - although this one leave out for now
46:16 - you're going to notice in a second why
46:18 - but all the other elements i just want
46:20 - to keep on drawing
46:23 - different points
46:26 - and there i just made a mistake i'm
46:27 - going to fix that in a second
46:29 - and for those individual tiles here they
46:32 - only connect in one way this one here
46:36 - and now i have to fix one error and
46:39 - that's this part here and for that i
46:41 - click on erase terrain
46:43 - and click on the point i want to erase
46:46 - and now we have all of the corners the
46:49 - green stuff here you can just ignore and
46:52 - this part we are going to add in just a
46:54 - bit
46:55 - but now
46:57 - i want to save this terrain set
46:59 - and go back to my basic tile and now
47:02 - nothing has changed but if i click on
47:05 - terrain set
47:06 - now we have pipes and in there i can
47:08 - select yellow
47:10 - and let's put all of this on a new tile
47:13 - layer
47:14 - and let's call this one pipes
47:16 - oh and now also importantly in the top
47:18 - left we have the terrain brush selected
47:22 - and what i can do now is just draw a
47:25 - pipe
47:26 - wherever i want and it always connects
47:30 - just fine
47:34 - and this is working really well so this
47:37 - is obviously looking horrible but it
47:39 - does work really well
47:43 - although let me undo all of it it does
47:45 - look pretty bad i just want to have a
47:47 - more simple one
47:49 - and let's just draw it like a simple
47:52 - circle
47:56 - now what do you want to be aware of
47:58 - if i return to the tile set
48:00 - right now we didn't use this tile set at
48:02 - all but if i add it as well
48:06 - just the corner and now return
48:09 - and draw another circle
48:11 - it works the same it works the same but
48:13 - now we get a sharp edge and there we get
48:16 - a sharp edge as well
48:18 - and what basically happens here let me
48:21 - return and start some drawing
48:24 - let's say we're looking at this tile
48:26 - here
48:26 - and this tile here
48:30 - and if you look at those two in
48:31 - isolation
48:32 - you can tell that from tile's
48:34 - perspective those are identical they
48:37 - both connect on the right and at the top
48:41 - meaning for tiled it doesn't really know
48:43 - when to place which of these
48:45 - meaning tiled is going to randomly
48:47 - select one of them
48:50 - and that is what we have seen in here
48:54 - where sometimes we are placing a round
48:57 - corner
48:58 - like here and here and sometimes we're
49:02 - placing a sharp corner like here and
49:04 - here
49:06 - and those are being selected randomly
49:10 - and this right now is fine if this is
49:13 - what you are looking for but this
49:15 - sometimes can cause a lot of problems we
49:18 - are going to see a case like that very
49:19 - soon actually
49:21 - but this is the basic idea of a terrain
49:24 - tile set
49:27 - ah this one is generally super useful
49:32 - so i guess let's continue to the other
49:34 - kind of tile set this one is even more
49:36 - useful and that is going to be a corner
49:39 - set
49:40 - and for that we actually have to import
49:43 - another tile set
49:45 - and that tile set is basically this
49:47 - style set here except in simplified
49:51 - so let me reveal the mouse i want to
49:54 - create a new tile set and this has to be
49:56 - a tile set image and from here i want to
49:59 - browse and create a terrain corner and
50:02 - this i want to open
50:04 - and everything else can stay the same
50:07 - and this i want to save as in my data
50:10 - as tsx terrain corner this one is just
50:14 - fine
50:16 - and now in here i've added some text to
50:18 - illustrate what we are going to work on
50:22 - and for now we are just going to focus
50:25 - on this part up here the problem bit you
50:28 - can ignore for now i'll get to that one
50:30 - in just a second
50:31 - but
50:32 - really all i want to do in here is
50:35 - create another terrain tile set
50:38 - let me show my mouse again and for that
50:41 - i have to click on the plus and in there
50:43 - i want to create a new corner set
50:46 - and this one let's call it
50:48 - round
50:50 - not proper spelling ground there we go
50:53 - and in here if you look at this tile set
50:57 - and compare this one to the edges for
51:00 - the edges we only had a single kind of
51:03 - tile it was always this yellow pipe
51:06 - thingy
51:07 - but for this one we have two different
51:09 - kinds of tiles we have dirt and we have
51:12 - grass
51:13 - so inside of this terrain set we need
51:16 - two terrains
51:17 - we need first of all some dirt
51:20 - and then i want to click on this plus
51:22 - down here
51:24 - and this allows me to add a second
51:26 - terrain
51:27 - and that is going to be the grass
51:30 - and
51:31 - well
51:32 - once we have that we can follow the same
51:35 - process
51:36 - except now we are filling in the corners
51:40 - so for example let's do this tile here
51:42 - together
51:44 - i know that this corner this corner and
51:46 - this corner are all supposed to be for
51:48 - dirt and then this grass corner here is
51:51 - going to be this corner for grass
51:54 - and now this we have to do for all of
51:57 - the other tiles as well
52:00 - and i think this could be a really good
52:02 - challenge for you right to add all of
52:05 - the terrains for this title set here and
52:08 - ignore the problem with and see how far
52:10 - you get
52:14 - all right let's do it together and let
52:17 - me start with the grass but it doesn't
52:19 - really matter in which order you start
52:22 - and all of these grass tiles i have to
52:25 - go through those those and those
52:28 - and that should cover all of them
52:31 - now with the dirt selected i can select
52:34 - all of the dirt tiles
52:37 - these corners here
52:39 - all of those this this this and this
52:42 - and
52:43 - in here we have the same issue again
52:46 - where we have two tiles if i select all
52:48 - the corners here
52:50 - where these two
52:52 - rectangles here to tiled are identical
52:55 - meaning it's going to pick one of them
52:57 - randomly which in our case is perfectly
52:59 - fine because they are well essentially
53:02 - identical so if you pick one of them
53:05 - randomly we don't really have to worry
53:07 - about it too much
53:10 - although what we can actually do if i go
53:12 - back to the selection box here
53:14 - and select this tile
53:16 - the probability is still going to work
53:19 - so if i set this to 0.2
53:22 - and return to my terrain then this tile
53:25 - here is going to be placed much less
53:28 - often
53:29 - so that is really really nice but all
53:32 - right with that we have our terrain set
53:36 - so i want to save it and return to my
53:39 - basic tile set
53:41 - and now in here i want to create a new
53:44 - tile layer so we have some empty space
53:47 - to work on and let's call it floor
53:49 - and this i want to be below the pipes
53:53 - and i guess for now let me just hide
53:57 - everything else
53:59 - and now we have some space to work
54:01 - and i want to look at my terrain set and
54:04 - now besides the pipes i have ground and
54:06 - inside of ground we have dirt and grass
54:10 - and now if i try to draw with my dirt
54:13 - nothing happens
54:14 - and if i drop my grass nothing happens
54:16 - either
54:17 - so
54:18 - what is the problem here although the
54:21 - pipes if i draw those they still work
54:24 - just fine
54:25 - so what's the issue here
54:27 - and well if i go back to terrain corners
54:32 - what you have to understand here is that
54:34 - all of these tiles work in relation
54:36 - either to grass or to dirt
54:38 - so
54:39 - tile basically needs some kind of
54:41 - starting position
54:43 - which we don't have right now
54:46 - and all that really means in practice if
54:49 - i go back to my basic set i want to look
54:51 - at my title sets and my terrain corner
54:54 - and we basically have to fill the entire
54:57 - map with one of these tiles here
55:00 - in my case i want to pick the basic dirt
55:03 - tile
55:04 - and to make sure here you actually pick
55:06 - from this terrain set
55:08 - you could also by mistake use any of
55:10 - these and that wouldn't work
55:12 - because to tilt
55:14 - this third set here zoom in
55:17 - this third set here
55:19 - and this dirt set here to us look
55:22 - identical
55:23 - to terrain they are completely different
55:25 - things
55:28 - they just happen to have the same
55:30 - information but tiled needs some kind of
55:32 - starting point so we have to pick one of
55:35 - these tiles here it doesn't really
55:36 - matter which but once you have done that
55:39 - you can go to a terrain set click grass
55:42 - and now we can draw on here
55:46 - and we are getting proper shapes
55:49 - this is looking quite nice
55:51 - and of course we can also use dirt and
55:54 - draw over all of this
55:56 - add some insets
55:58 - and create islands or really whatever
56:00 - you want
56:02 - and well with that
56:04 - we have our basic set
56:07 - that's kind of it to be honest in terms
56:10 - of simplicity so let me create
56:13 - some basic tile sets here
56:17 - that look a bit more like an actual game
56:23 - i guess let me here one as well
56:26 - just so you can see what's going on
56:31 - so with that we have some basic terrain
56:34 - sets
56:35 - that really wasn't all that difficult
56:38 - now
56:39 - the problem is that this is still a very
56:42 - simple tile set and there are quite a
56:44 - few things that could go wrong
56:47 - and
56:48 - i guess let's have a look at this tile
56:50 - set here
56:52 - to see what could go wrong
56:54 - and i think it's best to just add these
56:57 - tiles here so i want to add some dirt
56:59 - tiles
57:01 - all of these
57:03 - and besides that
57:05 - i want to place some grass in these
57:08 - styles here
57:10 - and with that we do have a terrain set
57:12 - that looks good on the surface but this
57:14 - terrain set is very broken
57:17 - and if we use it you can see that pretty
57:20 - fast
57:22 - so now
57:23 - if you want to add some more grass and
57:25 - place this here we get something weird
57:27 - let me zoom in
57:30 - and i guess we can draw on this as well
57:32 - that should help a bit as well
57:34 - essentially what we are seeing here is
57:36 - that tiled is not sure what to place
57:39 - when it's placing a tile like this
57:42 - where we have grass on the bottom and
57:44 - dirt at the top so sometimes we get a
57:47 - large tile like this or we get a smaller
57:50 - tile like this one here
57:52 - and the same issue happens on the other
57:54 - side as well so sometimes we have this
57:57 - small green tile other times we have
57:59 - this larger green tile
58:01 - so
58:02 - what's the issue here and to understand
58:06 - what's going on we have to return back
58:09 - to our terrain corner set here
58:11 - and
58:12 - what you probably want to look at
58:14 - is this tile here
58:16 - and this tile here i think that
58:19 - illustrates the problem the best if you
58:22 - just look at those tiles i think you can
58:24 - understand the problem
58:26 - to child these two are identical both
58:30 - have grass on top
58:32 - and dirt at the bottom
58:35 - meaning tiled is just going to pick one
58:37 - of them randomly
58:39 - and since those two tiles look very
58:41 - different this is not going to work and
58:44 - as a consequence we are getting
58:46 - the problems we have encountered
58:49 - and this is not an isolated problem for
58:52 - example this tile here is identical to
58:55 - this tile up here
58:57 - and since those two are looking very
58:59 - different this is just going to cause
59:01 - more problems
59:02 - as a consequence you do have to be very
59:05 - careful how you place tiles
59:08 - and this sadly is just a thing you have
59:10 - to get used to it does take a lot of
59:12 - practice to create good terrain sets so
59:15 - let me get rid of all of this
59:17 - and back in the terrain set let me undo
59:19 - all of this
59:21 - that's looking better
59:23 - cool
59:24 - now
59:25 - one way you can approach this is if you
59:28 - look on the right there we have patterns
59:31 - and this is actually incredibly useful
59:34 - because in here you can tell what tiles
59:37 - have been covered
59:40 - essentially what this thing is tells you
59:42 - what tiles you need for proper working
59:44 - terrain
59:46 - and right now we have all of these so
59:49 - the terrain set is working but if i
59:51 - erase let's say this tile here
59:55 - then tiled is going to tell me it still
59:57 - needs this one by highlighting it
60:02 - and if i
60:04 - undo it now it disappears
60:08 - so this pattern here is really useful to
60:11 - see what terrain sets you are still
60:13 - going to need
60:15 - what it doesn't tell you is if you have
60:17 - a certain terrain tile twice for example
60:20 - we have two red terrain sets and this
60:23 - isn't reflected here at all
60:26 - and the problem we had earlier down here
60:28 - is that we did had a duplicate
60:30 - and one of the duplicates wasn't fitting
60:33 - in the terrain set
60:34 - and that's just something you have to be
60:36 - really careful about it's well one of
60:38 - the major problems with terrain sets
60:41 - but this is essentially a simple terrain
60:43 - set for corners
60:45 - now
60:46 - what you also want to be aware of is
60:48 - that this is still very simple what you
60:51 - could do in this terrain site here where
60:53 - i took the graphics from
60:55 - we have quite a few more elements we
60:58 - have let me actually create the terrain
61:00 - so i want to create a new corner set and
61:03 - let's call this one ground two
61:06 - and in here we have
61:09 - dirt and
61:11 - we also have
61:13 - rest
61:14 - and besides that i guess this is sand
61:17 - and this would be pavement
61:19 - so i want to add sand and i want to add
61:23 - pavement
61:26 - now if you want to create a terrain set
61:28 - for these four options you have to do a
61:32 - lot of work because if i look at
61:34 - patterns you have to cover all of these
61:37 - different options to have a working
61:39 - terrain set
61:40 - which would be taking you a lot of work
61:43 - and not all of these options are
61:45 - included in here so you would also need
61:47 - some photoshop to create new tiles
61:50 - i guess the effort here would be
61:52 - justified if you're creating a really
61:54 - large game and
61:56 - you would reuse the tiles all the time
61:59 - if you make a smaller game this would be
62:01 - way too much work
62:03 - so just keep that in mind
62:06 - and on the topic of really complicated
62:09 - work
62:10 - you could let me create another terrain
62:12 - set and this time it's a mixed set
62:15 - and let's call this one just test
62:17 - doesn't really matter
62:19 - and in here i want to create another
62:22 - terrain
62:23 - let's call them test 1 and test 2. it
62:26 - doesn't really matter what they are and
62:29 - now if we look at patterns it gets even
62:31 - worse because for these we have nine
62:34 - different
62:36 - edge tiles that we have to take care of
62:38 - so if i were to draw them in terrains
62:41 - for test one
62:43 - in here
62:45 - i would have to cover nine different
62:49 - points for each tile
62:51 - which would end up incredibly
62:54 - complicated and this you would really
62:56 - only do if you're working on a very very
62:58 - complicated tile set that you want to
63:00 - use for a fairly complex game
63:04 - but in my case this really isn't
63:06 - anything i would want to engage in
63:09 - so let me ignore all of those
63:12 - and
63:13 - well if you have to work with them
63:15 - just be prepared you have to put a ton
63:17 - of work in there
63:19 - also another thing you want to take care
63:20 - of is in the style set
63:23 - these third tiles here and these are
63:26 - different if you look at them in detail
63:27 - because those have a texture those don't
63:30 - so this would make the entire thing even
63:32 - more complex
63:34 - and i guess all i'm really trying to say
63:36 - is
63:37 - mostly stick to simple terrain sets it
63:39 - gets really complicated really fast
63:45 - all right and now with that let me make
63:48 - the other tiles visible again
63:51 - and i guess
63:54 - now for the pipes i want to get rid of
63:56 - those
63:57 - and create some tiles that work a bit
64:00 - better with the stuff we have
64:02 - so let me select the pipes and i want to
64:05 - create some yellow tiles
64:08 - that
64:09 - let's say they start something like this
64:13 - and we go down here and here
64:17 - and
64:18 - something like this okay this does look
64:20 - horrible i just want to cover the entire
64:22 - map of pipes so things are looking
64:24 - halfway okay
64:26 - and while with that we have corner and
64:28 - edge terrain sets
64:30 - and if you really want to you can also
64:32 - use ground and test although you would
64:35 - have to put a lot of work into making
64:36 - these well work
64:40 - but i hope you understand the principle
64:42 - if you make something really complicated
64:44 - this is incredibly useful
64:47 - and with that
64:49 - we
64:50 - have been making some pretty good
64:52 - progress
64:53 - there are two more topics that we do
64:55 - have to cover first of all how to export
64:57 - something and second of all isometric
64:59 - tiles
65:00 - i guess we could start by exporting
65:03 - something because we already have this
65:04 - tile and this is what i want to use in
65:06 - pygame and well you have quite a few
65:10 - options most of them either in export
65:12 - export s and export as image
65:15 - export s is usually the place where you
65:17 - want to start so if i click on it we are
65:21 - seeing an exposed dialogue and here i am
65:24 - in my folder setup
65:25 - and i want to create a new folder let me
65:28 - call it export
65:30 - and if i open this one
65:33 - i have quite a few different options to
65:35 - export something
65:37 - the one that is usually the default i
65:40 - think is tilemap file so we're just
65:42 - exporting a tmx file but you can also
65:45 - use csv gamemaker json javascript lua
65:48 - and game maker
65:50 - and those are some really popular game
65:52 - engines so if using one of those you can
65:54 - totally export it in the file format
65:56 - that works for you
65:58 - although in my case i am going to use
66:00 - tmx so i can click on save and we have
66:04 - an exported file
66:06 - and if i open the file explorer and here
66:10 - we have export and we have basic dot tmx
66:14 - now this basic.tmx and
66:18 - this dmx here are essentially the same
66:21 - file i think they are literally actually
66:23 - the same file so exporting tmx and just
66:26 - saving it
66:27 - pretty much gives you the same result
66:29 - most of the time
66:30 - if you use export s
66:32 - you would probably use something like
66:34 - csv or json and let me demonstrate what
66:37 - csv does
66:39 - for this one i can save again
66:41 - and if i now open the folder we can see
66:44 - four csv files and they all start with
66:47 - basic and an underscore and then the
66:49 - name of the layer
66:51 - and let me click on basic floor
66:54 - and now we can see a ton of numbers
66:58 - now what does all of that actually mean
67:02 - and
67:04 - let's do this by example for now keep in
67:06 - mind this 27 in the cell a1
67:11 - and if i return to tiled we only want to
67:14 - look at the floor layer
67:18 - and in here we have this
67:21 - rain corner tile set
67:24 - and the tile that we have in the top
67:25 - left right now is a simple dirt tile set
67:28 - this one here
67:30 - and if you click on this in the top left
67:32 - you can see id 27
67:35 - the same 27
67:37 - that we have in the csv export and this
67:40 - is what we are actually exporting
67:43 - and
67:44 - basically what is happening is that
67:46 - tiled assigns an id to every single tile
67:50 - inside of this map
67:52 - and the id is coming from each
67:54 - individual tile set meaning if i opened
67:57 - terrain corner
67:59 - and select this third set here we have
68:02 - id 27 and this is what gets exported as
68:06 - csv data
68:08 - and this information is generated by
68:10 - tiles starting at top left
68:12 - and then giving an increasingly larger
68:14 - number to each tile
68:16 - and you really want to be aware of here
68:19 - that we are literally only exporting a
68:22 - number we are not exporting a position
68:24 - we are not exporting an image all we
68:26 - have is the id number of each tile and
68:29 - even worse this id tile is not unique
68:33 - which means if i look at this id tile
68:36 - this corner here has the id 8
68:39 - and if i go to terrain edges
68:42 - i can look around and i'm probably going
68:44 - to find id8 again meaning this id here
68:48 - is not unique
68:51 - which would be quite a big problem if
68:54 - you're trying to import it by just using
68:56 - the id
68:58 - so just keep that in mind
69:00 - i guess you could find out the position
69:03 - though and how that would work let me
69:06 - open the csv data again
69:08 - if you want to find out the position of
69:10 - any of these tiles let's say the
69:12 - position of this top left tile here
69:15 - you would essentially look at the row so
69:18 - row 0 here or row 1 and then the column
69:21 - and from that you can figure out where
69:24 - this tile is supposed to be placed and
69:26 - this works for any of these id points
69:31 - i have actually made an earlier tutorial
69:34 - on tiled and in there i have used csv
69:37 - data
69:38 - if you want to check this one out it
69:40 - goes over how you would do this in
69:41 - practice in pygame although it really
69:44 - isn't the most straightforward process
69:47 - so not recommended by me but right this
69:51 - is basically how you would export things
69:54 - most of the time
69:55 - now what you can also do is export as
69:58 - image and if i click on that we are just
70:01 - exporting what we are seeing right now
70:03 - as one image
70:05 - and well you can select a couple of
70:07 - extra things in here i don't care about
70:10 - them i just want to export and if i now
70:13 - open the file explorer again
70:15 - under
70:18 - emx i can find the basic export and this
70:22 - is information you can also use in any
70:24 - kind of game
70:26 - most of the time when i use this option
70:27 - i want to have a floor for the game that
70:30 - isn't really doing anything except move
70:32 - along with the player
70:34 - so just having one floor for the entire
70:36 - game is usually quite a nice thing to
70:39 - start your game with
70:40 - but you could also use tmx data here
70:42 - this would work just fine i'll show you
70:44 - in a second how that would work
70:47 - and well that is basically all you are
70:51 - going to need for exporting data
70:52 - entitled and well next up we can start
70:56 - working on isometric tiles let's have a
70:58 - look at that
70:59 - all right now before we start coding
71:02 - there's another kind of tile set i want
71:04 - to cover and that is isometric tiles
71:08 - and those are like you see here this 45
71:11 - degree angle tiles that do work slightly
71:14 - differently
71:16 - but we can create them quite easily in
71:18 - tile so i suppose we can jump right in
71:21 - and let's have a look at this
71:23 - here i'm back in tiled and i want to
71:26 - create a whole new map for that i go to
71:28 - file new and new map
71:31 - and in here
71:33 - instead of organelle we need isometric
71:36 - and the map size is still perfectly fine
71:39 - you can essentially choose whatever you
71:42 - want in here
71:43 - however for the tile size we have to do
71:46 - something different
71:48 - and let me open up the graphics for this
71:51 - part they are going to look like this
71:54 - we're going to import them
71:55 - in a tiny bit
71:58 - and each of those graphics they are all
72:00 - individual graphics and they're all 111
72:03 - by 128 pixels wide and high
72:07 - and
72:08 - what we need in the tile map for the
72:12 - file size is something different than
72:14 - the size of each individual graphic
72:16 - now the width can stay identical so i
72:19 - want 111 in here
72:22 - however for the height we want half the
72:26 - height of this tile height the reason
72:29 - for that is that all of these have to
72:30 - overlay each other so we want to cut
72:34 - some parts off and depending on the
72:37 - graphic you might need some different
72:39 - things if you have your own isometric
72:42 - tile set you definitely want to play
72:44 - around with this but in my case i want
72:46 - 128 divided by 2 which is 64.
72:51 - and now i can click on ok
72:53 - and now we have an isometric tile set
72:56 - and this i do want to save
72:58 - and let's save it in the same folder and
73:01 - let's call it iso
73:03 - and this now is going to be an isometric
73:05 - tile set you can see it quite well
73:08 - although if i try to use any of the tile
73:10 - sets we have so far it just looks very
73:12 - weird so this is no good
73:16 - we need another kind of tile set or well
73:19 - we need different graphics that work
73:21 - with this kind of tile set map setup
73:26 - and for that
73:28 - we have to create a new tile set and
73:30 - this one is a collection of images
73:33 - and let me save this one as iso graphics
73:36 - that is not how you spell that graphics
73:39 - there we go
73:41 - and save as i want to go to my tsx
73:45 - folder and then here isographics
73:48 - and now again i have an empty folder
73:52 - however if i open my graphics i can just
73:55 - select all of them and drag and drop
73:57 - them in here
73:58 - and now i have all of my graphics
74:02 - available in here and they all have the
74:04 - same size that is important
74:07 - and just to be specific here they all
74:10 - have a width of 111 and a height of 128.
74:14 - however
74:15 - if i return to the iso tile set
74:19 - each of those tiles is going to be half
74:21 - as high as that so now we have a
74:23 - difference between the size of each tile
74:25 - on this map
74:27 - and of the graphics
74:30 - now in practice this really isn't going
74:32 - to make that much of a difference but if
74:34 - i now select the
74:37 - iso graphics those
74:41 - you probably have a bit more space on
74:42 - your screen than i do but here we have
74:44 - all of them
74:45 - and now basically all you have to do is
74:48 - pick different tile sets and place them
74:50 - this is going to work in just the same
74:52 - way so i can just place all of these
74:58 - let me fill in the gap
75:01 - this does actually also work with the
75:02 - fill tool so i just pressed f
75:05 - select it
75:07 - there we go
75:10 - and i guess let me get rid of this part
75:12 - here looks a bit silly
75:17 - and what you have to understand about
75:20 - isometric tiles is height
75:22 - so right now this might be our lowest
75:25 - layer let's call this one the floor
75:28 - and if i want to put anything on top of
75:30 - them i would need another layer on top
75:32 - of that
75:33 - level one
75:35 - and in here i think what i did earlier
75:39 - was pick a couple of brick ielts
75:42 - and just place them around
75:44 - like so and that way you can make the
75:47 - outline of a house
75:50 - i am really not good at placing these it
75:53 - does take some effort
75:56 - i think actually i used this tile
75:58 - at the beginning this one is
76:01 - looking a little bit better
76:04 - and with that we have the first level
76:07 - now we need level
76:09 - two
76:10 - and we can do the same thing
76:12 - and just draw more things on top
76:15 - it really isn't that much more
76:18 - complicated than that
76:19 - and unfortunately in child
76:22 - we don't have auto tiling
76:25 - or isometric tiles which does get a
76:28 - little bit annoying once in a while
76:30 - because this can be very labor intensive
76:33 - but well definitely does work and once
76:35 - you have this it's well an isometric
76:38 - tile set
76:39 - let me not show the grid and this is how
76:41 - it would look in the game which i think
76:43 - is looking really really good
76:45 - and well with that finally we can
76:48 - actually start importing all of this
76:51 - into pygame
76:52 - now in my case
76:54 - i am only going to import this tile set
76:57 - here and let me make all of this
77:00 - visible there we go
77:03 - and i guess let me put the plants and
77:05 - rocks on top so they can be seen
77:10 - this is what i am going to import into
77:13 - pygame now you could also import this
77:16 - one here although the logic would be
77:18 - slightly more complex because you have
77:20 - to account for the isometric tiles
77:22 - but i'm gonna focus on just the most
77:24 - straightforward one
77:27 - so let's talk about how to import tiled
77:30 - into pygame and fundamentally there are
77:33 - two different ways
77:35 - the first is the more manual way where
77:38 - you are importing some csv or json data
77:41 - and this would only give you the id of
77:43 - every individual tile
77:45 - but from this id you could select
77:47 - specific images and then put all of this
77:50 - into pygame
77:51 - it is possible i have actually done it
77:53 - myself in an earlier tutorial you can
77:55 - check that one out if you want to
77:57 - understand the logic
77:59 - problem is this is a really really
78:01 - extensive process that takes forever and
78:04 - there is an easier way
78:05 - and the easier way is called pi tmx
78:08 - which is a whole python module that
78:10 - takes care of all of this for us
78:13 - which is a much easier way of doing all
78:15 - of this which is why i'm going to use it
78:18 - now to use it we have to install the pi
78:20 - tmx module
78:22 - and to achieve that we need either the
78:24 - powershell or the terminal in my case
78:27 - powershell and type pip install pi tmx
78:32 - if you're on a mac with a terminal this
78:34 - is probably going to be pip 3 install pi
78:38 - tmx
78:39 - but in my case windows pip installed pi
78:41 - tmx is fine and i have it installed it
78:44 - only takes a second it's a really small
78:46 - module
78:49 - and once we have that we have all we
78:51 - need to start coding so let's have a
78:54 - look at all of the code we have
78:57 - alright so here we are in just about the
79:01 - simplest code you can have for pygame
79:03 - for a start if i run the code
79:06 - we get a plain black window that doesn't
79:08 - do anything which is perfect for our
79:10 - purposes
79:12 - and now to get started with using pi tmx
79:15 - we have to import the module
79:17 - and
79:18 - here we only want one very specific part
79:22 - and basically what we want is from high
79:25 - tmx dot util underscore igame
79:30 - import load
79:32 - underscore pygame
79:36 - and pytmx basically has a couple of
79:39 - different sub-modules for different
79:41 - gaming modules
79:43 - and pygame is one of them and this is a
79:46 - really neat function that allows us to
79:48 - work very very efficiently with pygame
79:51 - and tiled it's super useful
79:54 - although if you don't use pygame there's
79:56 - also a more general one that you could
79:58 - use as well it's really up to you but in
80:01 - my case i want to use load pi game and
80:04 - now what we first of all have to do is
80:06 - to load our tmx file and this i want to
80:09 - store in a variable that i call tmx data
80:12 - and all i have to call is load pi game
80:15 - and then here i need the name of the
80:17 - file or well the path to the file
80:19 - and in my case i want string i go up one
80:22 - folder then i go into the data folder
80:26 - in there we have tmx and inside of the
80:28 - tmx folder we have basic dot emx
80:34 - and if i run the code now we will still
80:37 - can't see anything but we don't get an
80:39 - error so we know that this path here is
80:41 - working
80:42 - as a matter of fact what we can do is to
80:45 - print what we get so tmx data
80:48 - and we are getting a tilemap object
80:52 - still not particularly helpful
80:54 - but something more useful that we can do
80:57 - is put this in a dir method and if i run
81:00 - this code now
81:02 - we can see
81:04 - all of the properties and methods that
81:06 - we have available
81:07 - and if you look at this list you can
81:09 - already tell pretty well what is useful
81:13 - in here
81:14 - we can for example
81:16 - get a layer by name
81:19 - or we can get all the visible layers we
81:22 - can also get all of the objects all of
81:26 - the layers
81:28 - and quite a lot more there's a ton of
81:30 - stuff you can work with in here
81:32 - and even more you could add a whole
81:34 - layer to the tmx file or a whole tile
81:37 - set it's really up to you there's a lot
81:39 - of stuff that you can do
81:42 - so
81:43 - how can we make sense of all of this
81:46 - information and i think the best way is
81:49 - to think of it like this right now
81:51 - we have a map or a tmx data file and
81:56 - this is going to be the broadest
81:58 - information or the general container for
82:00 - all the other elements
82:03 - what we want from this most of the time
82:06 - is some kind of layer we want for
82:09 - example one layer for the tiles
82:14 - and we could also want a tile
82:17 - for the objects
82:20 - so we have to figure out some ways to
82:22 - get the layers inside of tmx data and
82:26 - for that we have a ton of different ways
82:30 - i guess the most obvious one
82:34 - is
82:35 - emx data dot layers
82:38 - and let me print what we get
82:43 - and i don't care about the window
82:46 - if i run this we get ground floor plans
82:50 - and rocks pipes
82:52 - and objects
82:54 - and on top of that we also get
82:56 - information what kind of layer we have
82:59 - for example ground is a tile layer
83:02 - whereas objects is an object group so
83:05 - you already can tell quite well what you
83:07 - are getting in here
83:09 - and i guess let me add a comment here
83:12 - let's call it get layers
83:16 - and this would be get all layers
83:19 - now besides that we can also get tmx
83:22 - data dot visible
83:26 - layers
83:28 - and if i
83:30 - print that one
83:33 - now we're getting a generator object but
83:36 - it basically contains the same
83:38 - information we have here so what i can
83:41 - do let me cut it out
83:44 - and for layer in
83:47 - what we just got and print
83:50 - layer
83:52 - if i print this now
83:54 - we get basically the same formation we
83:56 - had earlier so we have ground floor
83:58 - plants and rocks pipes and objects the
84:00 - same thing we had in here it's
84:03 - essentially the same formation with one
84:04 - twist if a layer is invisible entirely
84:08 - it's not going to show up in here
84:10 - so let me return to tiled
84:13 - and right now all of the layers are
84:15 - visible which you can see here with the
84:17 - eye symbol
84:19 - and let's say i want to make ground
84:22 - invisible since we are not using it
84:24 - anyway
84:25 - and now really important
84:28 - this little star in the top left has to
84:30 - disappear meaning we have to save it if
84:32 - we don't save this file it's not going
84:34 - to show up when we import it into pygame
84:36 - which i think makes sense
84:40 - and let me run the code again
84:42 - and we still don't care about this
84:44 - now there's no ground in here anymore we
84:47 - are only getting the visible layers
84:51 - and let me add a comment here get
84:53 - visible layers
84:56 - another thing you can get is tmx data
85:01 - dot
85:02 - layer
85:04 - names
85:06 - and if i print that we are only getting
85:09 - the layer names
85:12 - although this time we are getting a
85:13 - dictionary but this one is fairly
85:15 - similar compared to all layers there is
85:18 - quite a bit of redundancy in here
85:21 - so i'm not going to cover it in too much
85:22 - detail there's one more i do want to
85:24 - cover and that is
85:27 - dmx dot data dot get
85:29 - layer
85:30 - by
85:32 - name and then here we need one argument
85:34 - and that's the name of the layer
85:37 - and one layer that we have is called
85:39 - floor for example
85:41 - and now if i put all of this into a
85:43 - print statement
85:46 - and run out of this again
85:48 - we are just getting the title layer
85:50 - floor all the way at the end
85:54 - so let me add comments
85:56 - this is get one layer by name
86:00 - and we want get all layer names
86:04 - as dictionary
86:06 - now there's one more thing that i do
86:08 - want to cover and that is that sometimes
86:12 - you do only want the object layers
86:16 - and this you can get with tmx data dot
86:19 - object groups
86:21 - and this is going to return an iterable
86:24 - so we need a for loop let's say for obj
86:27 - in dmx data dot object groups and then
86:31 - here i want to print my obj
86:34 - and let me comment out all the earlier
86:36 - stuff
86:37 - so things are a bit easier to see
86:40 - if i run this now and close this again
86:43 - we have one layer that is an object
86:45 - group and that is called objects
86:49 - which is what we have entitled as well
86:52 - so let me add a comment here and let's
86:55 - call this one get
86:57 - object layers
87:00 - and those are
87:02 - essentially all the different ways you
87:05 - would be getting different layers either
87:07 - tile layers or object groups or object
87:10 - layers it's the same thing
87:12 - meaning if i return to my drawing
87:16 - now we basically got the tiles and the
87:18 - object layers so all of these are mostly
87:21 - tiled layers and this one here is the
87:24 - object groups which is bringing us one
87:27 - step closer to actual objects that we
87:29 - can work with
87:31 - what we now have to figure out is inside
87:33 - of the tile and the object layer we want
87:36 - to get individual tiles that's the next
87:39 - major step
87:41 - and for that let me add
87:44 - another section let's call it get tiles
87:47 - and objects
87:49 - actually let's just focus on tiles now
87:51 - because tiles and objects do work
87:53 - slightly differently not that much
87:56 - and just to keep things simple i want to
87:59 - get my floor tiles let me copy this one
88:02 - and let's call it my layer
88:06 - and this is going to be my floor
88:09 - layer
88:10 - and besides that i'm going to comment
88:12 - out everything else
88:15 - now what happens if i print
88:18 - the layer
88:20 - we are getting
88:22 - not something that is particularly
88:24 - useful because what we want in here is
88:27 - dir which is a surprisingly useful
88:30 - function alright now
88:32 - what we get as the properties and
88:34 - methods for a layer
88:38 - all of the stuff that we have in here is
88:41 - going to be useful to us
88:43 - and tiles is pretty much the most
88:47 - important one that you are going to work
88:48 - with the most
88:50 - let's have a look what this one does
88:53 - i want to print
88:55 - layer dot tiles
88:57 - and this is a method so we need brackets
89:00 - and let's see what we get
89:03 - we get a generator so let's loop over
89:06 - this one
89:08 - i want four tile in layer.tiles
89:12 - and
89:13 - print the tile
89:16 - if i now run this
89:18 - what we get
89:20 - is
89:21 - an x in the y position let me go all the
89:23 - way to the top
89:27 - there are quite a few
89:29 - we have a very large tile set
89:31 - basically what we get here you can see
89:33 - where it's starting
89:34 - we first of all have an x position and
89:36 - this is for the tile
89:38 - then we have a y position
89:41 - and then we have a
89:44 - surface
89:45 - so we are getting three bits of
89:47 - information
89:49 - that is actually all we need and i am
89:52 - going to use all of this information in
89:54 - just a bit but this is pretty much all
89:56 - you are ever going to need
89:59 - now how you would actually use this in
90:01 - pygame is not by looking at the entire
90:04 - tile instead you would
90:06 - for x y and surface
90:09 - in layer.tiles
90:12 - and then you want to print x you want to
90:14 - print
90:15 - y and you want to print
90:18 - this surface
90:19 - if i run this now
90:21 - we are getting the x position the y
90:24 - position and the surface
90:26 - although be aware here x and y position
90:29 - refers to the tile inside of the map not
90:32 - an actual x and y position
90:34 - to get that we would have to multiply it
90:36 - with the size of the tile set
90:39 - which in this case is going to be 128
90:43 - so this would give us the actual
90:44 - position on the map
90:47 - and once you have that information you
90:49 - can just use it that's basically it but
90:51 - let's have a look at some other things
90:52 - in here
90:55 - besides layer tiles you can also call
90:58 - layer dot data
91:01 - and this is going to return csv
91:03 - information
91:04 - let me
91:06 - print it and i think this is going to
91:08 - return an iterable no it actually
91:09 - doesn't
91:10 - cool so here you can see how the csv
91:14 - data would look like not particularly
91:17 - useful in this case because tiles is
91:19 - much more useful but you could be
91:21 - working with it
91:22 - although let me comment this one out
91:24 - because it well it's very space
91:27 - consuming
91:29 - now besides that you have layers dot
91:31 - name and this one
91:34 - should be fairly obvious
91:36 - and this should just be layered name and
91:39 - we get floor the name of the layer
91:42 - and we can also get layer dot id
91:46 - and this is going to return us the id of
91:48 - the layer
91:49 - you don't really use id very often name
91:52 - as well but i just wanted to mention it
91:55 - but basically this is all you are going
91:58 - to need to get different tiles
92:00 - most of the time you are just going to
92:02 - use dot tiles and you get all the
92:04 - information you could ever want
92:08 - so this is get all the
92:11 - information
92:14 - and well with that we have different
92:16 - tiles
92:18 - now besides that
92:22 - we also have to get
92:24 - objects
92:25 - and for this one let me comment out
92:29 - this one here
92:31 - and i want to create a new variable and
92:33 - let's call this one object layer
92:36 - and for this one i want to get my tmx
92:39 - data and again
92:41 - get
92:43 - a
92:44 - layer
92:45 - by
92:46 - name
92:48 - and this time i think i called this
92:50 - layer objects
92:52 - let me print the object layer and see
92:54 - what we get
92:57 - and we get a tiled object group objects
93:00 - so this is going to contain all of our
93:02 - objects
93:06 - all right now when we print dir
93:10 - and the object layer
93:13 - we are getting the window again this is
93:15 - getting a bit annoying but in here we
93:18 - have a ton of things that should look
93:20 - fairly familiar we have for example the
93:23 - id
93:24 - and we have the name of the layer and
93:26 - some things that i think are fairly
93:27 - obvious for example we could append
93:29 - something we could clear the entire
93:31 - layer we could also remove certain
93:34 - elements it's quite obvious what happens
93:36 - with these we also check if it's visible
93:38 - or not
93:39 - but the one thing that we don't have in
93:41 - here
93:42 - is some way to actually get all of the
93:44 - objects so if you read through this
93:46 - there's nothing that says get objects or
93:49 - something like this
93:50 - the reason for it is that we don't need
93:53 - to
93:54 - because
93:55 - this object layer
93:57 - can be iterated over all i have to do is
94:00 - for obj
94:02 - in my object layer
94:04 - and then print
94:06 - obj
94:08 - if i run this
94:09 - we are getting
94:11 - all of the objects in the game
94:14 - and there's actually another way to get
94:16 - this so let me comment out all of this
94:20 - and what i want to do is tmx data dot
94:23 - object
94:25 - that's horrible spelling objects there
94:27 - we go
94:28 - and this is returning the same
94:30 - information
94:31 - as
94:33 - this bit here
94:35 - meaning we can run a for loop so for obj
94:39 - in all of this
94:40 - and print
94:42 - obj again
94:45 - and we are getting exactly the same
94:47 - result
94:50 - so two different ways of getting the
94:52 - same outcome now i tend to prefer the
94:55 - first approach
94:56 - because this one is a bit more
94:58 - deliberate in terms of how it works
95:00 - especially if you have more than one
95:02 - object layer this one tends to make a
95:04 - bit more sense
95:06 - for obj let me run the dir method
95:10 - and now we are getting a ton of
95:12 - information
95:13 - and this is all the stuff we need to
95:15 - access an object
95:17 - and the really important attributes in
95:19 - here are x y and image image being the
95:23 - surface for this object
95:27 - and once we have that we
95:29 - basically have well all we need
95:33 - although there are a few more things
95:34 - that could also be useful to you
95:36 - for example we have rotation we have
95:39 - width we have height we have id we could
95:42 - get the name
95:43 - and there is also the type
95:46 - and those also tend to be quite useful
95:49 - but image x and y are the really
95:52 - important ones
95:54 - oh also there's s points
95:56 - when we are working with the shapes this
95:58 - one is becoming really important
96:01 - but essentially all we are going to do
96:04 - is obj.x
96:07 - then obj.y
96:09 - and obj.image if i run this
96:12 - we are getting the x the y position and
96:15 - the image or the surface
96:17 - now these at the bottom here don't have
96:19 - an image because they are the shapes but
96:21 - if i scroll up
96:23 - we are getting a bunch of surfaces
96:26 - for example the first one that's the
96:28 - castle it's an image that's 768 by 768
96:32 - pixels
96:33 - and this one is in the position of these
96:36 - two coordinates
96:39 - and well with that we have all we need
96:44 - i guess there's one more thing that we
96:46 - do have to cover and that is the s
96:48 - points
96:51 - what i want to do is inside of this for
96:53 - loop i only want to get my shapes
96:56 - let me return to tiled actually
96:59 - and in here you can see all of my
97:01 - objects
97:02 - and what i want to do is only get the
97:05 - objects with the type shape
97:08 - and this could be a good exercise for
97:10 - you
97:11 - try in the for loop
97:14 - to only get the objects that have the
97:17 - type shape
97:19 - and i guess when you have that print the
97:21 - objects doesn't really matter what you
97:23 - do
97:27 - all right
97:28 - basically all you have to do is if
97:31 - obj.type
97:33 - is equal to shape
97:35 - and this has to have an upper case s
97:39 - and if that is the case i want to print
97:42 - the object
97:44 - so now if i run this
97:46 - we are only getting the different
97:49 - objects that are going to be shapes
97:52 - and in here the marker is the easiest
97:54 - one so let's work with this one first
97:58 - i want to add another if statement
98:00 - that if
98:01 - obj.name
98:03 - is equal to
98:05 - marker
98:07 - and now if that is the case i want to
98:09 - print obj if i run this again now we are
98:12 - only getting the markers
98:15 - and for reference
98:17 - here we are back in tiled
98:19 - and if i scroll in a tiny bit the marker
98:22 - is this tiny thing it's basically just a
98:25 - point on the map that doesn't really do
98:26 - anything besides that so all we would
98:29 - ever want from this is an x and a y
98:31 - position
98:33 - and this we will get with obj.x
98:36 - and obj.y
98:38 - meaning if i run this we're getting all
98:40 - of these points
98:42 - and this could for example be the
98:43 - starting position for a player
98:45 - or really whatever you want in here it's
98:48 - a fairly generic position
98:50 - and that is all you would really want to
98:52 - do with the markers they do have height
98:55 - and width and image in them but all of
98:58 - them return none or zero so it's not
99:00 - really useful
99:02 - now the more interesting object is if
99:05 - obj dot name
99:08 - is equal to
99:10 - the rectangle
99:13 - and let me comment out the markers so
99:15 - things are a bit easier to read
99:18 - and let me print
99:20 - the
99:21 - obj in here
99:23 - and this rectangle does have x and it
99:26 - does have a y position
99:28 - if i run this we are getting this
99:30 - information here if i go to tiled
99:33 - we are looking at this rectangle here
99:36 - right now
99:37 - and you can see
99:39 - we have
99:40 - the same
99:42 - position
99:44 - and besides that we could also get the
99:46 - width and the height
99:47 - let's actually do that one
99:50 - so i want to copy this again i want to
99:52 - get the width and i want to get
99:56 - the height
99:57 - if i run it now
99:59 - we are getting more information and if
100:01 - you just want to draw a rectangle this
100:03 - is basically what you would use
100:07 - although you could also object as
100:10 - underscore points
100:12 - and run this
100:14 - and this one would return all of the
100:17 - corner points of this rectangle
100:19 - which i guess could also be fairly
100:21 - useful although using those four bits of
100:24 - information is probably more useful
100:26 - now besides that let me comment out this
100:29 - one here
100:31 - we could look at if obj dot name
100:35 - is equal to
100:37 - ellipse
100:38 - and let's check if this is working so
100:42 - get my object
100:44 - and
100:46 - this should be a comparison operator
100:48 - there we go now we have the ellipse
100:51 - and this one
100:55 - is going to return
100:57 - the same information we have seen
100:59 - earlier
101:00 - now unfortunately there's no radius in
101:02 - here so if you wanted something round
101:05 - you would have to use the height and the
101:08 - width and then use that to create
101:10 - something round yourself
101:12 - sadly there's no easy way to create a
101:15 - rectangle here i guess you could use if
101:17 - it's a perfect circle either the width
101:19 - or the height as the radius
101:22 - but well that is
101:24 - all that is to that one and finally we
101:27 - have if obj
101:30 - dot name is equal to
101:33 - only gone
101:36 - and in here
101:38 - we can print the object again although
101:40 - that isn't going to do too much we're
101:41 - getting the same information again
101:43 - the one important thing here is as
101:46 - points
101:48 - and if you run this now
101:50 - we are getting
101:51 - the points
101:52 - and here it is very important that those
101:55 - are the bounding box of the rectangle
101:59 - they are not the actual polygons for
102:02 - that let me duplicate this line you
102:04 - would just need points
102:07 - so if i run this now
102:10 - these points here are the actual points
102:12 - of the polygon these points here are the
102:15 - bounding rectangle and let me visualize
102:17 - this entirely
102:20 - we are looking at this object right now
102:22 - and s points
102:25 - returns this
102:27 - bounding box
102:29 - here
102:32 - whereas if you just use points you're
102:34 - getting these five points here
102:38 - very different information
102:42 - but with that
102:44 - we have covered all of the different
102:46 - shapes that you could ever possibly work
102:48 - with as a matter of fact we have covered
102:51 - everything that you would need for the
102:54 - basics to use pi tmx and pygame that's
102:57 - kind of all you need
103:00 - so i guess with that in mind let's
103:02 - actually use it and most of the time you
103:06 - want or at the very least should use a
103:09 - sprite class
103:10 - meaning i want to create a tile
103:13 - and this one inherits from pygame dot
103:16 - sprite dot sprite
103:20 - and this one needs a dunder init method
103:23 - here we need self as always then we need
103:26 - a position
103:27 - and then we need a surface
103:30 - and now in here we need self dot image
103:34 - that's going to be the surface and we
103:36 - need self.rect
103:38 - and for self.rect we get
103:40 - self.image.getunderscorerect
103:44 - and we want to place the top left
103:47 - wherever the position is
103:49 - and this is then just about the easiest
103:52 - kind of sprite class you can create
103:54 - yourself
103:56 - oh i did forget we do need super
103:59 - and the dunder init method
104:04 - and then here i guess we can pass in the
104:06 - groups the class should be part of and
104:08 - this should also be
104:10 - a parameter for the ended method
104:13 - so now this is actually the most simple
104:17 - kind of sprite class
104:19 - i have been recording for a while sorry
104:20 - about that
104:22 - okay now
104:23 - when we are creating the init stuff for
104:26 - the actual python code so this part here
104:29 - i want to create a sprite group or
104:32 - whatever you want to call it and this
104:34 - one is just going to be pygame dot
104:36 - sprite dot group
104:39 - and now in the game loop all the way at
104:42 - the bottom
104:44 - i want to call
104:45 - sprite
104:47 - group dot draw and i want to draw on my
104:50 - screen
104:52 - and now all we have to do is add sprites
104:55 - to this group and then we can draw it
104:58 - and just thinking of it if none of what
105:01 - i have just said makes any sense check
105:04 - out my introduction to pygame that is
105:06 - going to help you a lot
105:08 - now i basically want to cycle through my
105:12 - tmx file and populate all of this with
105:14 - different tiles
105:16 - and i suppose let me put all of this at
105:19 - the bottom and add a fresh section here
105:23 - now first of all i want to cycle through
105:27 - all of my
105:29 - layers
105:30 - and this i usually do before layer in
105:34 - tmx starter dot
105:37 - layers
105:38 - and now i have to separate my tile
105:42 - layers from my object groups
105:44 - and as far as i could find there wasn't
105:47 - really a good way of doing it
105:50 - and there are two ways to approach this
105:54 - first of all you could check if layer
105:56 - dot
105:57 - name that is not how you spell that
106:00 - is in and now you write some strings
106:03 - like floor
106:06 - and
106:07 - lance and rocks
106:10 - and i think another one was pipes
106:13 - so this way you're selecting specific
106:15 - layers and you yourself know that there
106:18 - are tiles inside of these layers
106:20 - which i suppose works but really isn't
106:23 - the ideal approach because it's very
106:25 - manual
106:26 - although i suppose there are also
106:28 - situations where you do have titles you
106:30 - don't want to be shown
106:32 - and in that situation this approach
106:34 - would be quite useful
106:36 - however another approach would be to
106:38 - check the different attributes because
106:40 - tire layers and object groups have
106:43 - different kind of attributes and we can
106:45 - go with that
106:46 - and i know that the tire layer has the
106:48 - data attribute so i can check
106:51 - if has utter i want to check my layer
106:56 - and i want to check for data
106:59 - and if that is the case i want to print
107:02 - my layer if i run the code now
107:05 - we are getting an error because
107:09 - i didn't comment out everything properly
107:13 - now let's try this again there we go
107:16 - now we are
107:18 - only getting the tile layers and in here
107:22 - also i do not want to work with ground
107:25 - because this one is invisible
107:27 - so what i could also do is instead of
107:29 - layers look at visible layers
107:33 - so now if i run this
107:35 - we are only getting the visible tiled
107:37 - layers
107:38 - and now what we can do in here is what
107:41 - we have done
107:42 - in here
107:44 - so we're using layer.tiles and we're
107:46 - getting x y and the
107:49 - which means i want for x y
107:54 - and surface
107:56 - in layer dot tiles
108:01 - and now that i have that information i
108:04 - need to convert these x and y positions
108:07 - to actual positions we can use
108:10 - which means in my case
108:12 - i just want to multiply
108:14 - the entire thing with 128
108:17 - this i want to do both for x and y
108:22 - and all of this should be
108:24 - in the position
108:26 - variable
108:28 - and now with that i can get my tile
108:31 - position
108:32 - should be the position
108:34 - the surface should be the surface
108:37 - and groups
108:39 - should
108:39 - be
108:41 - my sprite
108:43 - group
108:44 - and now if i run this
108:47 - we can actually see something
108:49 - now there's a bit of a problem let me go
108:51 - to tile to visualize what's wrong here
108:54 - basically what we are seeing in the game
108:58 - is
108:58 - this part here more or less
109:02 - which isn't ideal because we don't have
109:05 - a camera set up yet
109:07 - so we can't see all of the actually
109:08 - interesting stuff
109:10 - but i guess an easy way to fix this is
109:13 - if i use my floor i can
109:16 - draw some grass
109:19 - so let me draw some here
109:21 - [Music]
109:24 - so we have something a bit more
109:25 - interesting to look at and i guess we
109:27 - can also draw some dirt
109:29 - and then for plants and rocks i want to
109:34 - was it in objects yes so let's place
109:37 - in the objects
109:39 - i want to place a castle here a tree
109:42 - here here and here
109:45 - i know a couple of mushrooms we could
109:47 - place randomly
109:49 - it's really up to you what you want to
109:50 - do and now really importantly don't
109:52 - forget to save
109:54 - so this actually shows up in the game
109:56 - and now if i return
109:58 - and run this again
110:01 - now we can at the very least see the
110:02 - ground we can't see the castle yet
110:04 - because we didn't cover objects
110:07 - but at the very least something is
110:08 - working
110:10 - and well for the objects
110:13 - all we really need here since our case
110:15 - is fairly simple is for obj in tmx dot
110:20 - data dot
110:22 - objects i can just reuse my tiled and
110:26 - then here we need a position
110:28 - we need a surface and we need groups
110:32 - and this i think could be a good
110:33 - exercise for you
110:35 - right to figure out the arguments for
110:37 - these three parameters and see how far
110:39 - you get
110:41 - if you paid attention this should be
110:43 - fairly easy
110:47 - all right let's go through together
110:49 - first of all we need the position
110:52 - and the position here is going to be
110:55 - obj.x and obj dot y
111:00 - and important here
111:01 - this is not on a tile set so both the x
111:04 - and the y position is just information
111:06 - we can use straight away which makes it
111:08 - very easy to work with
111:11 - meaning
111:12 - the position we have already covered
111:16 - next up we need the surface and this one
111:19 - we can just put straight into the
111:22 - argument because all we need is obj dot
111:26 - image
111:28 - although this is going to cause problems
111:30 - in just a second but we'll cover that in
111:32 - a bit and for groups i want to have my
111:35 - sprite group
111:37 - now if i run this we will get an error
111:40 - because we have a non-type
111:42 - that for some objects we don't have an
111:45 - image
111:46 - so what we can do i suppose that's the
111:50 - easiest if obj
111:53 - dot image exists
111:55 - then we want to create a tile and now if
111:57 - we run this
111:58 - we can see the castle it's a bit
112:00 - stretched out so this isn't looking too
112:03 - great but at the very least it is
112:04 - working and that's all i'm caring about
112:06 - for now the mushrooms do look much
112:08 - better
112:09 - and in here using obj.image
112:12 - really isn't the cleanest way ideally
112:15 - you would want to have clear names for
112:17 - your different objects
112:20 - and let's have a look at this entire to
112:22 - really visualize what i mean
112:25 - here again we have all of our objects
112:28 - and ideally every single object has a
112:31 - name and a type that makes it really
112:34 - easy to work with them
112:36 - so right now this one here should be
112:39 - a castle
112:41 - and this should be a building
112:45 - and all the other stuff is
112:48 - type
112:49 - vegetation
112:52 - and the name
112:54 - for these trees should be
112:57 - three
112:58 - and then all the other elements are
113:02 - mush rooms
113:07 - and this is looking much better so when
113:09 - you work with objects really make sure
113:11 - to name things consistently it's very
113:13 - easy to forget
113:15 - all right now back to the code
113:18 - what you want to do in here is more
113:20 - something like if obj
113:22 - in either buildings
113:25 - or in vegetation
113:28 - so if i run this we can't see the castle
113:31 - because i think this was building
113:34 - there we go
113:36 - and now if that is not the case so else
113:40 - then i am working with the shapes
113:46 - and for those the title class isn't
113:49 - really going to work so i'm going to do
113:52 - this slightly differently
113:54 - let me get rid of this and copy
113:57 - all of this here instead
113:59 - and then i want to go into the game loop
114:03 - and on top of the group
114:05 - i am going to draw all of these shapes
114:10 - straight on the screen
114:12 - so what i first of all want to check if
114:14 - the object type is
114:17 - inside of shapes
114:20 - we are working with all of these objects
114:23 - here
114:25 - and just to make sure we can actually
114:27 - see them
114:29 - let me move them all on the screen or at
114:31 - least some of them on the screen
114:36 - there we go this is definitely going to
114:38 - be visible
114:39 - and again don't forget to save really
114:41 - important
114:42 - now in here i want to check actually i
114:45 - can copy
114:47 - all of this here
114:49 - make my life a bit easier
114:52 - and let me uncomment all of this
114:57 - and let me put these things after each
114:59 - other
115:00 - all right so
115:01 - now
115:02 - we have all the information we need
115:08 - to draw markers rectangles ellipses and
115:11 - polygons
115:13 - now markers are the easiest ones and we
115:15 - already have the x and the y position so
115:18 - what we could be doing for example is
115:20 - pie game dot draw dot circle
115:24 - and for this one we need a surface which
115:27 - in my case is screen
115:29 - then we are going to need a color let's
115:31 - say for this one we can use red
115:34 - then we need the center which we have
115:37 - that one is going to be
115:38 - obj.x and obj.y
115:43 - and then we need a radius let's say in
115:45 - this case we can go with five
115:48 - and let me comment out or delete these
115:51 - two points
115:53 - and comment out all the other stuff so
115:55 - we're not spamming too much text
115:58 - and now if i run this we can't see
116:01 - anything
116:02 - for the simple reason that this should
116:04 - be shape instead of shapes so here we
116:07 - can see one point and there we have
116:08 - another point
116:11 - obviously this isn't too useful but i
116:14 - think you get the principle
116:16 - now next up we have the rectangle
116:18 - and i think the easiest way to work with
116:21 - this is to turn this into an actual
116:23 - rectangle so
116:25 - pygame.rect
116:26 - and then here we need left top width and
116:29 - height
116:30 - and if you look below we have all of
116:32 - these points
116:35 - so obj.x is the left side
116:38 - obj.y is the top and this is horrible
116:43 - spelling
116:44 - then obj.weft
116:46 - is the wift and obj.height
116:50 - is the eighth
116:52 - meaning now i can get rid of all of
116:54 - these points
116:55 - and call pygame.draw.rect
116:58 - i want to screen again
117:00 - this one i want to be
117:02 - yellow
117:04 - and i want to have my rectangle
117:07 - so if i run this
117:08 - we can see the rectangle as well
117:12 - next up we can work on the ellipse
117:16 - and for this one basically what i want
117:18 - to do is pie game dot
117:21 - raw dot
117:23 - ellipse
117:25 - and in here we first of all need a
117:27 - surface which is my screen then we need
117:29 - a color which in my case let's go with
117:32 - blue
117:33 - and now we need a rectangle and the
117:36 - rectangle let's create it separately
117:38 - again
117:39 - is going to be pygame dot rect
117:42 - and for this one i can just copy
117:45 - all of this stuff we used for the
117:47 - rectangle and just paste it in here
117:50 - and now we have a rectangle so i can run
117:52 - this again
117:53 - and we get the rectangle we created
117:57 - and finally we have the polygon
118:00 - and for the polygon i only really care
118:03 - about the points
118:05 - so if i run this just to see what we get
118:08 - we have all of these points
118:11 - we basically get a list and the list
118:14 - contains point objects and each point
118:17 - has an x and a y attribute
118:20 - and those we have to extract first of
118:22 - all
118:25 - and for that
118:26 - let me get rid of all of this
118:28 - i want to create a points variable
118:30 - and i'm going to use list comprehension
118:33 - to extract all of the points
118:35 - and for now i want point for point
118:39 - in obj dot points
118:43 - and i don't want the point itself
118:46 - instead i want to have a tuple that
118:48 - contains point dot x and point dot y
118:53 - and if i print these points now and run
118:57 - all of this
118:59 - i get a list full of tuples with the x
119:01 - and the y position
119:04 - and this i can use for pygame.draw.
119:09 - polygon
119:12 - and polygon only wants three different
119:15 - arguments it wants a surface which in my
119:17 - case is screen
119:19 - then for the color something we haven't
119:21 - used yet let's go with green
119:25 - and points is going to be points
119:27 - so if i run this
119:29 - we can see on the right side the shape
119:31 - we have seen earlier
119:33 - and well that is pretty much all you are
119:37 - ever going to need so i hope that was
119:40 - helpful and i see you around

Cleaned transcript:

hello there in this tutorial you will learn about the tiled level editor we are going to create a bunch of different levels in different styles we will use terrains to create levels more efficiently and at the end we will cover how to import the level data into pygame and all of that should be fairly straightforward however before we get into all of this let's talk about what tiled is and what problem it solves tiled is a level editor that allows you to import graphics and then place them in such a way that you end up with a level of a game for example we could load this graphic of a title set into tiled and then inside of tiled we can pick specific parts of it and place it to build a level and i guess to visualize this a bit more here we are entitled already and in the middle you can see my level that i'm building right now and on the right we have some graphics that i can pick from and basically all i'm doing is pick different graphics and use them like a brush to create my level that is the main idea of tiled and since tiled supports a bunch of different export options it is basically supported by any major game engine or framework i will cover how to do it for pygame but if you look around you find the way to do it for basically any other game engine as well and tiled has actually been used for commercial games shovel knight axiom verge and carrion are probably the biggest ones but there are quite a few more as well it is a very powerful piece of software to use tiled we have to install it and this you do from the website which is looking like this and in here all you have to do is click on download and then click on download again and in here you could pay any amount of money you want and i would recommend you to pay at least a bit because a lot of work went into it but if you don't want to you don't have to you can just click on no thanks just take me to downloads and then you can download whatever version applies to you in my case i am using the installer for windows 64bit and chances are that you have the same version so if i click on download we get to a new website and we are downloading the program in my case i have already done this so i'm going to delete it but well in your case you want to finish the download and then install it and once you finish installing you can open the program like any other program and once you open it you can see something like this and in your version you probably see the same thing just a little bit brighter the reason why mine looks different is because i well made it darker and to make it look like mine all you have to do is go to edit preferences and in here there's theme and we want to change the base color and then here you have a brightness slider on the right side and in my case i put it down to something a little bit darker and i think this is looking significantly nicer all right now what can we do in here and right now we can see a bunch of options in the top left and to understand what they do we have to cover some basic functionality of tiled and the best way i think to think about it is in terms of painting because essentially what we are doing is painting a level and there are three elements that you want to be aware of the first one is the canvas so the element we are painting on entitled that is the map and this is what we can actually create here already we are going to create this one in just a second actually but then for painting you need two more elements you need colors and you need brushes and the colors entitled are essentially the tile sets this is where we are going to take elements from and place them on the map which is our canvas and then the brushes are the selection tools entitled that we can use to select different tile sets but basically all we want to do for now is to create let me show my mouse i want to create a new map so i click on it and now we get a few more options at the top we are getting map orientation tile layer format and tile render order and most of the time you only really want to care about the orientation because if you open this one you get 4 different options we have orthogonal isometric isometric staggered and hexagonal and these options are to create different styles for our game orthogonal is essentially the default where you have square tiles where you can place different elements so games like mario or zelda use this kind of style isometric is this 45 degree top down look games like simcity when it was 2d had that style of final fantasy tactics had the same style and the third style is hexagonal and if you think of civilization that's a hexagonal style it's fairly rare but well you can't create it entirely now in our case i want to stick with orthogonal although later on we are also creating an isometric tile set those two are the really common ones and for tile layer format we have different versions and fertile render order we also have a few more options but none of those really matter you just want to leave them as they are but then when we look below we have a few more options we have map size on the left and we have tile size on the right and basically what that means is when we are creating our map we are creating a map that consists of tiles so the map is the larger canvas and inside of this canvas we have individual elements that look something like this let me draw a couple more we are basically covering the entire map with tiles and right now our map is 35 tiles wide and 32 tiles high that is the information you get here and then each individual tile is 110 pixels wide and 64 pixels high and these numbers mean that each tile inside of the map is 110 pixels wide and 64 pixels high and for those numbers you do want to be really careful especially the tile size because when we're importing a tile set we have to work with a specific size and if you mess up the sizes you can get into a lot of problems actually let's have a look at this in photoshop right now and all right here we are in photoshop and this is the graphic we are going to use in just a second now for this graphic let me zoom in a tiny bit and basically how it works is that all of this is composed of different tiles and each tile would be something like here we have one tile here we have another tile and here we have a fertile and this we are going to continue for the entire tile set that's why it's called a tile set it's a set of different tiles it's amazing how that works and the size of these tiles in the graphic has to be the same size as the tiles in our map if they don't line up you end up with a lot of problems and in our case each tile is 128 by 128 pixels so that is the size we want to have for the tile size in our map and when you open any kind of tile set the first thing you do want to check is the size of each tile it's usually 16 by 16 32 by 32 64 by 64 or 128 by 128 although basically any size could be viable here you really have to check all right back to tiled and what i want to do in here is create tile size with 128 and 128 and you can actually tell now that we've changed the tile size we get a new number down here and that's the size of the entire map and this number we are literally just getting by multiplying the width of the map with the width of each tile size i guess we can make this really clear by changing each of those to one and one tile and we get 128 by 120. but let me undo all of this that is looking good all right finally i can click on ok and here you can see the actual menu of tiled now before we actually implement anything let me go through the different panels you can see right now the most important element the one in the middle this one here is called the map and this is essentially our canvas if i stay in the drawing analogy this is where we are going to create our level the next really important thing is on the right here we have layers and we have tile sets higher sets is going to be the colors we are going to use later on and we can create a new tile set here we are going to do that in just a bit layers are basically different layers you can draw on so if you want to put one element on top of another element that's what you would use layers for the next important element are these elements here all the way at the top specifically this row here these are essentially our brushes the one we have selected right now this one here is called a stamp brush that's like the default brush but we also have a fill brush this one here and we have an eraser and well that one erases stuff and those you would use to place tiles on the map like you would use a brush to paint colors on a canvas and then next up on the left side you have one panel with information right now it's for the map but it could also apply to tiles it really doesn't matter all that much but well if you really want to look up some information about the tile here is where you would find it and one more really important thing we can see right now we have untitled tmx all the way in the top and this is one tab and every single map and every tile set you open is going to be another tab that should be making sense in just a bit when i actually use it but what i want to do for now is to save this file and this you can do either under file and save or with control s and if i click on that i get to my folder setup and in here i have three folders i have code data and graphics and i want to go to data and then here i have tmx and i want to give it a name let's call it basic and if i save it now the name has changed to basic.tmx let's actually create a tile set so we can draw on this entire thing and for that i have to click on new tile set the element here all the way on the right and if i click on it i am getting another dialog and at the top we have a name and a type and for the type we can select based on the tileset image and based on a collection of images right now i want to stick with tileset image and if you have this one selected you have another dialog below and then here we have to browse for an image which i do want to click on and in here i want to select my tiles and click on open and now i have the path towards it before i can click on save as there are a few more options i do want to consider the more important ones here are tile width and tile height and those refer to the size of each tile inside of this tile set this is basically what we looked at in photoshop just a few minutes ago and this number you really want to be equal to this number here that way our graphics and the tiles in our map have the same size if they don't match up you are very likely to end up with problems although sometimes you do want it to be the case i will cover that later especially for isometric tiles this is becoming important but right now we just want them to be equal so we don't have to worry about it besides that we have margin and spacing and these are options you would be using if there are gaps in your tile set which is a fairly common thing but in my case they don't exist so i can leave those at 0 and 0. with all of that covered i want to click on save as and now i have to save a new file and right now i'm in the tmx folder i want to go up one folder and to my tsx folder and then here i want to save my tiles and once i do that i get a new tab and this one you can see all the way up here tiles.tsx and if you want to return to the tile map you have to go to the initial tab and now in here you can see all of the tiles of the graphic and if you want to move around here you have a couple of different options let me show the mouse again so if you want to navigate this you could either use these scroll bars but that's kind of inefficient usually what you do is hold the middle mouse button and then pan around that's much easier and if you wanted to zoom in and out you can use control and the mouse wheel that's basically what you want to use most of the time and then besides that you can click on every single tile and well select individual elements although you cannot use them in this menu instead what we have to do is to return to basic.tmx in here now all the way on the right you can see in the tile sets we have our graphic and inside of this you can use the same navigation options so if i hold ctrl and scroll out i am making all of this smaller so it's a bit easier to see and now in here you can see all of the tiles you can also hold the middle mouse button and pan around in here and now basically what you are going to do you are selecting the stamp brush the one i have already selected or you could press b for the same result and then you select one tile that you want to draw let's say this grass tile and now on the map i can just draw all of this wherever i want obviously this one is looking terrible so let me undo all of this and instead i want to place just a couple of grass tiles and then select other tiles to create a proper outline something like this right now this is a very slow process but we will learn about more efficient tools later on but this allows us to basically place elements wherever we want on our map and what you can also do is select multiple elements inside of the tile set for example if i wanted to place all of these parts here i can select all of them if i now go into my map i can place all of them wherever i want i can also drag them like any other brush although that admittedly looks horrible let me undo it actually let me keep those and by the way in this map you also have the same navigation options so if i hold the middle mouse button i can pan around if i hold ctrl and use the mouse wheel i can zoom in and zoom out and now the other brushes you have the next really important one is the bucket fill tool and this one well it fills the entire surface so let me select one of the dirt tiles this one here and then if i select anything on the map and click we are filling the entire area with dirt and this you could do with literally any other tile and this one is context aware so it checks for similar tiles that's something you do want to be aware of for example if i zoom into the grass style here the fill tool only fills identical tiles if we have a different tile they would not be filled and then the next important brush or weld tool is the eraser and this one you can use to erase things fairly obvious i suppose and i would really recommend you to practice all of this i guess a good idea would be to create your own map from just using all of these tiles so pick a couple of random ones and then try to draw an actual usable map and see how far you get all right let me get rid of all of this and let me show my mouse actually i think that's going to be better i first of all want to use the bucket fill tool and fill the entire area with dirt then i am going to zoom in select the stamp brush and now i have an outline and this i can fill as well oh yeah i didn't mention the fill tool selects identical tiles if they are in an enclosed space and now i have my grass area and now we come to the slightly more boring bit i have to create all of the outlines that would look something like this i am probably going to speed this part up because it is fairly monotonous all right and there we go we have well something very basic but this could be something you actually see in the game and you might have noticed this is a really slow and annoying process and later on we are going to learn a better way of doing this that is what terrain sets are for but for now this is the basic what you are going to need although now imagine you want to place something on the right here like this plant if i place this plant somewhere on the level let's say here we have a problem that you can see the background let me zoom in a bit more here you can see the background and this looks well kind of ugly so what i want is to place this plant on top of the grass let me undo it and to place something on top of each other we need layers and right now we only have one layer and if i double click on it we can rename it let's call this one the ground and to create a new layer i have to click on this symbol here and here we have a couple of options higher layer and object layer are the most common ones and i want to create a new tile layer and this one also needs a name let's call it plants and rocks and let me spell it properly and now i can select the plant again if i plant it it's on top of the ground and if i hide this layer it disappears i can do the same thing for the ground with the obvious result and this way i can place elements around wherever i want and these layers here are really important to create more complex levels for the bigger projects i made and tiled i usually have something like 7 or 8 different layers and in here you do have to be really careful which layer you are drawing on it happened to me really often that i think i'm on one layer and then i end up drawing on another layer so for example if i have ground selected and i draw something i would end up with something really horrible which i didn't want and all i really want to say is be careful what layer you are on it's very very easy to forgot what layer you are working on just keep it in mind all right now when i am placing let's use something more recognizable like this rock i do have a couple more options let me zoom in a bit more to see it better there we go now right now when i'm placing this rock we always have the same rock although if you look at the top at these four elements here you can either flip the rock with these two or you can rotate the rock with these two and if i click on this one here i have a rotated rock if i click on the other i have rotated the rock in the other dimension vertically and this i can also do for the other side as well and if you just use those two buttons you already get very different looks which can be a nice way to make your game look a bit more varied and then besides that you can also rotate the entire thing by 90 degrees in this case i guess same result but you get the idea and there's one more really useful button and that's this random mode here the little symbol of the dice if i click this nothing seems to change because for this one to work i have to select multiple elements so let me select all of these bits here all the plants and rocks and now if i return to my map you can already see the result let me zoom out a bit every time i go to a new tile we get a different element that is a random selection of these selected items here and those i can just now draw on the map and we get something completely randomized and if you don't like one specific randomized item you can just click again and you get something else it's super useful and what you can also do if you want to have some elements being more common let's say in my case i want your plants to be really common and just once in a while have a rock this you can also do but we do have to return to the title set so in the tab i want to click on tiles.tsx and move to these elements and if i select any of them on the right side now we have the properties panel and we have a couple of options we have id that's the number of the tile set that's not really important we can set a type ourselves also not something we care about we have width and height also something we don't really want to care about and then we have probability and right now it's one and that is the one we are going to care about because what we can do in here is set this to a different number let's say in this case i want to set this to 0.1 and if i click on the next element now this bush here this one still has the one so if i only selected those two elements in random mode this small bush is 10 times more likely to spawn than this larger bush or tree or whatever it is let me save it and return to the tile set and if i now select only those two tiles here and render mode is still activated i get lots of smaller bushes and only very rarely a larger one and that is the idea behind this probability and you can also select multiple elements and give them one probability so i want to give all of them a probability of one and all the rocks get a probability of 0.25 let's say and now if i return to this tile set select all of these elements again if i now draw them okay that's a bit hard to see let me go to another area if i now draw them we get a lot of plans and very very occasionally a rock but it is fairly rare there we got a few more alright this seems to be working just fine and with that we covered all the basic parts of a tile set if you just want to create some basic things this is all you are ever going to need it really isn't that hard although there are a few more elements entitled that i do want to cover the next one is objects and there's actually a whole tab next to layers objects and right now we don't have any objects and basically what objects do there are just other graphics that you can place on the map except that objects can have any size and you can place them wherever you want meaning they are not bound by this tile set you can just place them wherever you feel like they should be and especially if you have some more recognizable elements like a castle or a tree you do want to use objects and well to create them we first have to import them and this happens again by clicking on this new title set here and this time we don't want a tileset image we want a collection of images and those need a custom name let's say in my case i want let's call it objects now i click on save as now i'm back in my tmx folder and i want to go one fold up go to tsx and then here i want to save them with the tiles and i click on save and now i have a whole new window and this one looks very similar compared to the tiles except it's empty and the first thing that we have to do is to import some graphics into it and for that i need my folder this one here and if i go to graphics besides tile sets we also have objects and then here i just have a couple of random images and those i want to drag into tiled if i do that i can see my castle and if i zoom out i can see all of the elements and right now they all look like they have the same size but if i click on the castle for example you can see it's quite a large image and if i click on the mushroom it's much much smaller so all of these images have very very different sizes which is completely different compared to these ones here they are all identical in terms of size and you could also set the probability this one works in the same way but besides that there isn't really that much of a difference but now if i return to my tile map i get under tile sets another tab this one is objects and let me zoom out again in here i could select this castle for example and place it although if i am trying to do it you get something weird that the tile i have selected and where i place the castle have no relation to each other which is kind of annoying and the reason here is that the castle is just way too big for the tile so tile doesn't really know what to do with it oh that was one too much there we go now to account for that we have to create a new layer which we do here and now we don't want entire layer we want an object layer and now we have to rename this new layer and let me call it objects and now we have a new layer but more importantly if you look all the way at the top the icons we used before like the stamp brush or fill have all been grayed out meaning we cannot use any of these here and instead we have gotten a whole new set of tools all of these here and the one you are going to use the most is this one here this is basically the stamp brush for objects and this one is called insert tile now if i select this one and now go back to my title set now i can place the castle wherever i want it's in the center of my mouth and it is not constrained by the tile set i can move it around wherever i want and this applies to all of them so i can place some mushrooms some trees power doesn't really matter and all of this is done with this brush here or this tool whatever you want to call it besides that the other really important one is select object and this one well it selects objects so i can select this one this one this one and so on and also if you click on it twice you get different options the first one the one with the arrows allows you to scale the object you have if you click on it again now you can rotate the entire thing and more importantly if you look at the layers there we have objects as well and in here you can select all of the objects that we have created earlier and for each object we can set a name and a type those you can see here on the left side and let's say what i want to do i want to select all of my castles so i hold shift and click on all of them and i want to give each of them the name castle and type is going to be building and if you now look on the right side we have now a name and a type for each castle we can do the same for the towers as well those ones are going to be name power and type is also going to be a bill thing and besides that we have some trees and let's call them trees or just tree and type let's call it vegetation and then we have a ton of different mushrooms and let's call those mushroom and type vegetation and what you may be seeing that after you have given them a name you can always see the name on top whereas in my case they only show up when i select them this you get under view and show object names for you i think it may be for all objects in my case it's only for selected objects generally views is really really useful and well this is basically the start of what you would need to use objects and titles together i did forget two trees let me call them tree and vegetation there we go now we have all of the objects now there are a couple more these four here we have insert rectangle insert point insert ellipse and insert polygon and those well they do what the name implies if i select the shape one and draw now we are getting a rectangle if i select one of the points i can place some points if i select any lips i can place any lips and the polygon allows me to draw a polygon like this and then you could use edit polygons to manipulate each of these polygons if you really wanted to and you do want to give all of them a name as well so let me select all of the markers and let's call them name marker and type let's call it a shape then we have the rectangle and this one is also going to be a shape and we have the ellipse and the polygon those are both going to be type shape except for the ellipse it's going to be an ellipse and for the polygon i want to have a polygon there we go now these elements you can import into any kind of game engine but obviously right now they don't have any kind of graphic associated with them what you would rather do is import the geometry so you can get all of these points here let me draw actually that should be better so what you would import later on is the geometry like these four points for the rectangle and those you can then use to draw whatever you want inside of it so if you want to check if the player enters a certain area this kind of shape is really useful same for the markers like one of those you can use them to place certain elements like the main player if you want them in a certain spot like a starting position for example now one more thing that you could be doing is to insert text and let me return the mouse this is this button up here and if i click on it we can place some text let's place it i don't know here and right now this is a very small text box so what i want to do is to increase the width and the height of it let's say something like 400 by 400. the problem is the text is just generally very small and i guess another thing i can do is change the text in there let's call it my awesome level map and if you want to change the font size you would go to font you can also expand it and in here we can increase the font size quite nicely so it actually shows up on the whole level yeah i guess that works and then you can also move this text around like any other element now the only limitation with text is that importing it into pie games seemed to be kind of impossible or at least i didn't find a good way of doing it meaning that this would mostly be something used to annotate ideas in your level but maybe you find a way of doing it but with that we have covered all the fundamentals of tile now there's one more thing i do want to cover that is kind of important and that is let's say i take this castle and this tower here and i moved the tower in front of the castle now you can see let me zoom in a bit the tower is in front of the castle but if i move the tower a bit further up the tower is now behind the castle so they are drawn intelligently to figure out which element is on top of which other element that was a really weird sentence you get the idea that we get some kind of fake 3d that is really useful and how we are getting this is when you create a new map let me create a new one so new and map this is the tile render order this one right down here and in our case we are drawing elements right and down meaning the further down element is the higher it is drawn in terms of well drawing you could change it but there's very little reason to do so alright with that covered we are basically done if you just want to create a basic map this is all you are ever going to need and the games i've made so far like zelda and super mario were made in just this style that's basically all i did although there's one really useful tool entitled that you do want to use as well to work more efficiently and that is terrains now how terrains work is getting a bit more complex so let's explain what they are and what they do so let's talk about terrains and basically terrains are special tiles that react to their surroundings and what does that actually mean let's do an example say you have this kind of case here where you want to figure out what this tile is going to be and this one should be fairly obvious you want to draw the tile that connects these two like this with everything else being just dirt and this means if you know this tile here this tile here and i guess you know that this tile and this tile are empty you already know what tile needs to be in here you want to have the corner tile set and this is something we have done manually so far but tiled can also do it because it's a fairly easy process and this is what we are going to create however to create a terrain we have to talk about something else because there are different ways to create one let's go through them actually overall there are three different ways to create terrain tiles the first one is you look at the corners and this white rectangle right now is one tile and on this tile we want to check all of the corners these four here and if this tile borders on another tile so let's say we have another tile here all the way to the right and then for these tiles we know that this top one here is grass and the bottom one is dirt and if we have them connecting corners on the other tile so we know that on this right tile set we also have grass in the top left and we have dirt in the bottom left if that is the case we know we want to connect these two tiles here and that's the first case the second one is we are looking at the edges so instead of looking at the corners we now look at each of these connecting points meaning if we have a tile to the right again like so we only look at if this tile here and this tile here are identical say if both of those are grass tiles then we want to connect them and we don't really care what happens around the edges and finally we have corners and edges and this is a terrain set that does get really complicated because we are checking all of the corners these four here like we have done in the corner set and we are also checking all of the edges like so which means if this tile set has a tile to the right we have to check three different points for example if the bottom right of our tile is grass the middle one is dirt and the top one is water we are only going to connect the tile to the right if this also has water on the top left dirt in the middle on the right and then grass in the bottom left meaning for this kind of tile set we have to have a pretty complex setup and for this video i am only going to cover corners and edges for the simple reason that creating a corner and title set takes forever you're going to see very fast that creating title sets can be a really really long process but let's actually have a look at this in practice all right here we are back in tiled and i have two tile sets that are simplified that i want to use meaning i want to create a new tiles so i click on new tile set on browse and then here i have terrain corner and terrain edges and let's start with edges that's the easier one and all of these other attributes can stay the same so save as and i want to save all of this in another tsx file and let's leave terrain edges that one seems totally fine and now we have a new tile set and then here again we could just select individual images it's the same format we have seen here where we have just a couple of tiles so if you want to go to the level you could pick the terrain edges and just start drawing on it not on the objects layer but on this one so you could just create tiles here this one is just the same but i want this to be automatic and for that in the terrain edges i want to select this terrain set symbol here if i click on it we get a new panel on the right and in here we have to click on the plus at the bottom and now we can see what i just talked about we have a new corner set a new edge set and a new mix set which combines the corner and the edges and now to see if you paid attention is the tile set we need a corner set or an edge set try to think about it for a second the tile set we are going to need is an edge set so let me click on that let me zoom in a tiny bit on this tile set here for example if we look at this tile here the outline would look something like this and what we are looking for is if there is a connection here here here or here or i guess in this case we want to make sure that there's no connection on this tile here but you can already tell we don't check the edges like so and this is where we need the edge set if we're to use this tiles here for this one we do check the corners there it would be different but this is not what we worried about right now we want to create an edge set and first of all we have to rename things but so the terrain set i want to call i guess these are pipes i can't really tell what they are could also be a path doesn't really matter and then inside of the terrain set we have to give this red thing a name as well and i want to call it yellow and we could create more than one in here we are actually going to do that in just a bit but for now we just keep that one and now if you hover over the tiles you can see a red thingy and what we have to do is tell tiled where we want these elements to be and you can already sell how this is working so i know for this tile it connects on the left and at the bottom this is where i'm placing the dot thingies and this i have to do now for every single one of these tiles although this one leave out for now you're going to notice in a second why but all the other elements i just want to keep on drawing different points and there i just made a mistake i'm going to fix that in a second and for those individual tiles here they only connect in one way this one here and now i have to fix one error and that's this part here and for that i click on erase terrain and click on the point i want to erase and now we have all of the corners the green stuff here you can just ignore and this part we are going to add in just a bit but now i want to save this terrain set and go back to my basic tile and now nothing has changed but if i click on terrain set now we have pipes and in there i can select yellow and let's put all of this on a new tile layer and let's call this one pipes oh and now also importantly in the top left we have the terrain brush selected and what i can do now is just draw a pipe wherever i want and it always connects just fine and this is working really well so this is obviously looking horrible but it does work really well although let me undo all of it it does look pretty bad i just want to have a more simple one and let's just draw it like a simple circle now what do you want to be aware of if i return to the tile set right now we didn't use this tile set at all but if i add it as well just the corner and now return and draw another circle it works the same it works the same but now we get a sharp edge and there we get a sharp edge as well and what basically happens here let me return and start some drawing let's say we're looking at this tile here and this tile here and if you look at those two in isolation you can tell that from tile's perspective those are identical they both connect on the right and at the top meaning for tiled it doesn't really know when to place which of these meaning tiled is going to randomly select one of them and that is what we have seen in here where sometimes we are placing a round corner like here and here and sometimes we're placing a sharp corner like here and here and those are being selected randomly and this right now is fine if this is what you are looking for but this sometimes can cause a lot of problems we are going to see a case like that very soon actually but this is the basic idea of a terrain tile set ah this one is generally super useful so i guess let's continue to the other kind of tile set this one is even more useful and that is going to be a corner set and for that we actually have to import another tile set and that tile set is basically this style set here except in simplified so let me reveal the mouse i want to create a new tile set and this has to be a tile set image and from here i want to browse and create a terrain corner and this i want to open and everything else can stay the same and this i want to save as in my data as tsx terrain corner this one is just fine and now in here i've added some text to illustrate what we are going to work on and for now we are just going to focus on this part up here the problem bit you can ignore for now i'll get to that one in just a second but really all i want to do in here is create another terrain tile set let me show my mouse again and for that i have to click on the plus and in there i want to create a new corner set and this one let's call it round not proper spelling ground there we go and in here if you look at this tile set and compare this one to the edges for the edges we only had a single kind of tile it was always this yellow pipe thingy but for this one we have two different kinds of tiles we have dirt and we have grass so inside of this terrain set we need two terrains we need first of all some dirt and then i want to click on this plus down here and this allows me to add a second terrain and that is going to be the grass and well once we have that we can follow the same process except now we are filling in the corners so for example let's do this tile here together i know that this corner this corner and this corner are all supposed to be for dirt and then this grass corner here is going to be this corner for grass and now this we have to do for all of the other tiles as well and i think this could be a really good challenge for you right to add all of the terrains for this title set here and ignore the problem with and see how far you get all right let's do it together and let me start with the grass but it doesn't really matter in which order you start and all of these grass tiles i have to go through those those and those and that should cover all of them now with the dirt selected i can select all of the dirt tiles these corners here all of those this this this and this and in here we have the same issue again where we have two tiles if i select all the corners here where these two rectangles here to tiled are identical meaning it's going to pick one of them randomly which in our case is perfectly fine because they are well essentially identical so if you pick one of them randomly we don't really have to worry about it too much although what we can actually do if i go back to the selection box here and select this tile the probability is still going to work so if i set this to 0.2 and return to my terrain then this tile here is going to be placed much less often so that is really really nice but all right with that we have our terrain set so i want to save it and return to my basic tile set and now in here i want to create a new tile layer so we have some empty space to work on and let's call it floor and this i want to be below the pipes and i guess for now let me just hide everything else and now we have some space to work and i want to look at my terrain set and now besides the pipes i have ground and inside of ground we have dirt and grass and now if i try to draw with my dirt nothing happens and if i drop my grass nothing happens either so what is the problem here although the pipes if i draw those they still work just fine so what's the issue here and well if i go back to terrain corners what you have to understand here is that all of these tiles work in relation either to grass or to dirt so tile basically needs some kind of starting position which we don't have right now and all that really means in practice if i go back to my basic set i want to look at my title sets and my terrain corner and we basically have to fill the entire map with one of these tiles here in my case i want to pick the basic dirt tile and to make sure here you actually pick from this terrain set you could also by mistake use any of these and that wouldn't work because to tilt this third set here zoom in this third set here and this dirt set here to us look identical to terrain they are completely different things they just happen to have the same information but tiled needs some kind of starting point so we have to pick one of these tiles here it doesn't really matter which but once you have done that you can go to a terrain set click grass and now we can draw on here and we are getting proper shapes this is looking quite nice and of course we can also use dirt and draw over all of this add some insets and create islands or really whatever you want and well with that we have our basic set that's kind of it to be honest in terms of simplicity so let me create some basic tile sets here that look a bit more like an actual game i guess let me here one as well just so you can see what's going on so with that we have some basic terrain sets that really wasn't all that difficult now the problem is that this is still a very simple tile set and there are quite a few things that could go wrong and i guess let's have a look at this tile set here to see what could go wrong and i think it's best to just add these tiles here so i want to add some dirt tiles all of these and besides that i want to place some grass in these styles here and with that we do have a terrain set that looks good on the surface but this terrain set is very broken and if we use it you can see that pretty fast so now if you want to add some more grass and place this here we get something weird let me zoom in and i guess we can draw on this as well that should help a bit as well essentially what we are seeing here is that tiled is not sure what to place when it's placing a tile like this where we have grass on the bottom and dirt at the top so sometimes we get a large tile like this or we get a smaller tile like this one here and the same issue happens on the other side as well so sometimes we have this small green tile other times we have this larger green tile so what's the issue here and to understand what's going on we have to return back to our terrain corner set here and what you probably want to look at is this tile here and this tile here i think that illustrates the problem the best if you just look at those tiles i think you can understand the problem to child these two are identical both have grass on top and dirt at the bottom meaning tiled is just going to pick one of them randomly and since those two tiles look very different this is not going to work and as a consequence we are getting the problems we have encountered and this is not an isolated problem for example this tile here is identical to this tile up here and since those two are looking very different this is just going to cause more problems as a consequence you do have to be very careful how you place tiles and this sadly is just a thing you have to get used to it does take a lot of practice to create good terrain sets so let me get rid of all of this and back in the terrain set let me undo all of this that's looking better cool now one way you can approach this is if you look on the right there we have patterns and this is actually incredibly useful because in here you can tell what tiles have been covered essentially what this thing is tells you what tiles you need for proper working terrain and right now we have all of these so the terrain set is working but if i erase let's say this tile here then tiled is going to tell me it still needs this one by highlighting it and if i undo it now it disappears so this pattern here is really useful to see what terrain sets you are still going to need what it doesn't tell you is if you have a certain terrain tile twice for example we have two red terrain sets and this isn't reflected here at all and the problem we had earlier down here is that we did had a duplicate and one of the duplicates wasn't fitting in the terrain set and that's just something you have to be really careful about it's well one of the major problems with terrain sets but this is essentially a simple terrain set for corners now what you also want to be aware of is that this is still very simple what you could do in this terrain site here where i took the graphics from we have quite a few more elements we have let me actually create the terrain so i want to create a new corner set and let's call this one ground two and in here we have dirt and we also have rest and besides that i guess this is sand and this would be pavement so i want to add sand and i want to add pavement now if you want to create a terrain set for these four options you have to do a lot of work because if i look at patterns you have to cover all of these different options to have a working terrain set which would be taking you a lot of work and not all of these options are included in here so you would also need some photoshop to create new tiles i guess the effort here would be justified if you're creating a really large game and you would reuse the tiles all the time if you make a smaller game this would be way too much work so just keep that in mind and on the topic of really complicated work you could let me create another terrain set and this time it's a mixed set and let's call this one just test doesn't really matter and in here i want to create another terrain let's call them test 1 and test 2. it doesn't really matter what they are and now if we look at patterns it gets even worse because for these we have nine different edge tiles that we have to take care of so if i were to draw them in terrains for test one in here i would have to cover nine different points for each tile which would end up incredibly complicated and this you would really only do if you're working on a very very complicated tile set that you want to use for a fairly complex game but in my case this really isn't anything i would want to engage in so let me ignore all of those and well if you have to work with them just be prepared you have to put a ton of work in there also another thing you want to take care of is in the style set these third tiles here and these are different if you look at them in detail because those have a texture those don't so this would make the entire thing even more complex and i guess all i'm really trying to say is mostly stick to simple terrain sets it gets really complicated really fast all right and now with that let me make the other tiles visible again and i guess now for the pipes i want to get rid of those and create some tiles that work a bit better with the stuff we have so let me select the pipes and i want to create some yellow tiles that let's say they start something like this and we go down here and here and something like this okay this does look horrible i just want to cover the entire map of pipes so things are looking halfway okay and while with that we have corner and edge terrain sets and if you really want to you can also use ground and test although you would have to put a lot of work into making these well work but i hope you understand the principle if you make something really complicated this is incredibly useful and with that we have been making some pretty good progress there are two more topics that we do have to cover first of all how to export something and second of all isometric tiles i guess we could start by exporting something because we already have this tile and this is what i want to use in pygame and well you have quite a few options most of them either in export export s and export as image export s is usually the place where you want to start so if i click on it we are seeing an exposed dialogue and here i am in my folder setup and i want to create a new folder let me call it export and if i open this one i have quite a few different options to export something the one that is usually the default i think is tilemap file so we're just exporting a tmx file but you can also use csv gamemaker json javascript lua and game maker and those are some really popular game engines so if using one of those you can totally export it in the file format that works for you although in my case i am going to use tmx so i can click on save and we have an exported file and if i open the file explorer and here we have export and we have basic dot tmx now this basic.tmx and this dmx here are essentially the same file i think they are literally actually the same file so exporting tmx and just saving it pretty much gives you the same result most of the time if you use export s you would probably use something like csv or json and let me demonstrate what csv does for this one i can save again and if i now open the folder we can see four csv files and they all start with basic and an underscore and then the name of the layer and let me click on basic floor and now we can see a ton of numbers now what does all of that actually mean and let's do this by example for now keep in mind this 27 in the cell a1 and if i return to tiled we only want to look at the floor layer and in here we have this rain corner tile set and the tile that we have in the top left right now is a simple dirt tile set this one here and if you click on this in the top left you can see id 27 the same 27 that we have in the csv export and this is what we are actually exporting and basically what is happening is that tiled assigns an id to every single tile inside of this map and the id is coming from each individual tile set meaning if i opened terrain corner and select this third set here we have id 27 and this is what gets exported as csv data and this information is generated by tiles starting at top left and then giving an increasingly larger number to each tile and you really want to be aware of here that we are literally only exporting a number we are not exporting a position we are not exporting an image all we have is the id number of each tile and even worse this id tile is not unique which means if i look at this id tile this corner here has the id 8 and if i go to terrain edges i can look around and i'm probably going to find id8 again meaning this id here is not unique which would be quite a big problem if you're trying to import it by just using the id so just keep that in mind i guess you could find out the position though and how that would work let me open the csv data again if you want to find out the position of any of these tiles let's say the position of this top left tile here you would essentially look at the row so row 0 here or row 1 and then the column and from that you can figure out where this tile is supposed to be placed and this works for any of these id points i have actually made an earlier tutorial on tiled and in there i have used csv data if you want to check this one out it goes over how you would do this in practice in pygame although it really isn't the most straightforward process so not recommended by me but right this is basically how you would export things most of the time now what you can also do is export as image and if i click on that we are just exporting what we are seeing right now as one image and well you can select a couple of extra things in here i don't care about them i just want to export and if i now open the file explorer again under emx i can find the basic export and this is information you can also use in any kind of game most of the time when i use this option i want to have a floor for the game that isn't really doing anything except move along with the player so just having one floor for the entire game is usually quite a nice thing to start your game with but you could also use tmx data here this would work just fine i'll show you in a second how that would work and well that is basically all you are going to need for exporting data entitled and well next up we can start working on isometric tiles let's have a look at that all right now before we start coding there's another kind of tile set i want to cover and that is isometric tiles and those are like you see here this 45 degree angle tiles that do work slightly differently but we can create them quite easily in tile so i suppose we can jump right in and let's have a look at this here i'm back in tiled and i want to create a whole new map for that i go to file new and new map and in here instead of organelle we need isometric and the map size is still perfectly fine you can essentially choose whatever you want in here however for the tile size we have to do something different and let me open up the graphics for this part they are going to look like this we're going to import them in a tiny bit and each of those graphics they are all individual graphics and they're all 111 by 128 pixels wide and high and what we need in the tile map for the file size is something different than the size of each individual graphic now the width can stay identical so i want 111 in here however for the height we want half the height of this tile height the reason for that is that all of these have to overlay each other so we want to cut some parts off and depending on the graphic you might need some different things if you have your own isometric tile set you definitely want to play around with this but in my case i want 128 divided by 2 which is 64. and now i can click on ok and now we have an isometric tile set and this i do want to save and let's save it in the same folder and let's call it iso and this now is going to be an isometric tile set you can see it quite well although if i try to use any of the tile sets we have so far it just looks very weird so this is no good we need another kind of tile set or well we need different graphics that work with this kind of tile set map setup and for that we have to create a new tile set and this one is a collection of images and let me save this one as iso graphics that is not how you spell that graphics there we go and save as i want to go to my tsx folder and then here isographics and now again i have an empty folder however if i open my graphics i can just select all of them and drag and drop them in here and now i have all of my graphics available in here and they all have the same size that is important and just to be specific here they all have a width of 111 and a height of 128. however if i return to the iso tile set each of those tiles is going to be half as high as that so now we have a difference between the size of each tile on this map and of the graphics now in practice this really isn't going to make that much of a difference but if i now select the iso graphics those you probably have a bit more space on your screen than i do but here we have all of them and now basically all you have to do is pick different tile sets and place them this is going to work in just the same way so i can just place all of these let me fill in the gap this does actually also work with the fill tool so i just pressed f select it there we go and i guess let me get rid of this part here looks a bit silly and what you have to understand about isometric tiles is height so right now this might be our lowest layer let's call this one the floor and if i want to put anything on top of them i would need another layer on top of that level one and in here i think what i did earlier was pick a couple of brick ielts and just place them around like so and that way you can make the outline of a house i am really not good at placing these it does take some effort i think actually i used this tile at the beginning this one is looking a little bit better and with that we have the first level now we need level two and we can do the same thing and just draw more things on top it really isn't that much more complicated than that and unfortunately in child we don't have auto tiling or isometric tiles which does get a little bit annoying once in a while because this can be very labor intensive but well definitely does work and once you have this it's well an isometric tile set let me not show the grid and this is how it would look in the game which i think is looking really really good and well with that finally we can actually start importing all of this into pygame now in my case i am only going to import this tile set here and let me make all of this visible there we go and i guess let me put the plants and rocks on top so they can be seen this is what i am going to import into pygame now you could also import this one here although the logic would be slightly more complex because you have to account for the isometric tiles but i'm gonna focus on just the most straightforward one so let's talk about how to import tiled into pygame and fundamentally there are two different ways the first is the more manual way where you are importing some csv or json data and this would only give you the id of every individual tile but from this id you could select specific images and then put all of this into pygame it is possible i have actually done it myself in an earlier tutorial you can check that one out if you want to understand the logic problem is this is a really really extensive process that takes forever and there is an easier way and the easier way is called pi tmx which is a whole python module that takes care of all of this for us which is a much easier way of doing all of this which is why i'm going to use it now to use it we have to install the pi tmx module and to achieve that we need either the powershell or the terminal in my case powershell and type pip install pi tmx if you're on a mac with a terminal this is probably going to be pip 3 install pi tmx but in my case windows pip installed pi tmx is fine and i have it installed it only takes a second it's a really small module and once we have that we have all we need to start coding so let's have a look at all of the code we have alright so here we are in just about the simplest code you can have for pygame for a start if i run the code we get a plain black window that doesn't do anything which is perfect for our purposes and now to get started with using pi tmx we have to import the module and here we only want one very specific part and basically what we want is from high tmx dot util underscore igame import load underscore pygame and pytmx basically has a couple of different submodules for different gaming modules and pygame is one of them and this is a really neat function that allows us to work very very efficiently with pygame and tiled it's super useful although if you don't use pygame there's also a more general one that you could use as well it's really up to you but in my case i want to use load pi game and now what we first of all have to do is to load our tmx file and this i want to store in a variable that i call tmx data and all i have to call is load pi game and then here i need the name of the file or well the path to the file and in my case i want string i go up one folder then i go into the data folder in there we have tmx and inside of the tmx folder we have basic dot emx and if i run the code now we will still can't see anything but we don't get an error so we know that this path here is working as a matter of fact what we can do is to print what we get so tmx data and we are getting a tilemap object still not particularly helpful but something more useful that we can do is put this in a dir method and if i run this code now we can see all of the properties and methods that we have available and if you look at this list you can already tell pretty well what is useful in here we can for example get a layer by name or we can get all the visible layers we can also get all of the objects all of the layers and quite a lot more there's a ton of stuff you can work with in here and even more you could add a whole layer to the tmx file or a whole tile set it's really up to you there's a lot of stuff that you can do so how can we make sense of all of this information and i think the best way is to think of it like this right now we have a map or a tmx data file and this is going to be the broadest information or the general container for all the other elements what we want from this most of the time is some kind of layer we want for example one layer for the tiles and we could also want a tile for the objects so we have to figure out some ways to get the layers inside of tmx data and for that we have a ton of different ways i guess the most obvious one is emx data dot layers and let me print what we get and i don't care about the window if i run this we get ground floor plans and rocks pipes and objects and on top of that we also get information what kind of layer we have for example ground is a tile layer whereas objects is an object group so you already can tell quite well what you are getting in here and i guess let me add a comment here let's call it get layers and this would be get all layers now besides that we can also get tmx data dot visible layers and if i print that one now we're getting a generator object but it basically contains the same information we have here so what i can do let me cut it out and for layer in what we just got and print layer if i print this now we get basically the same formation we had earlier so we have ground floor plants and rocks pipes and objects the same thing we had in here it's essentially the same formation with one twist if a layer is invisible entirely it's not going to show up in here so let me return to tiled and right now all of the layers are visible which you can see here with the eye symbol and let's say i want to make ground invisible since we are not using it anyway and now really important this little star in the top left has to disappear meaning we have to save it if we don't save this file it's not going to show up when we import it into pygame which i think makes sense and let me run the code again and we still don't care about this now there's no ground in here anymore we are only getting the visible layers and let me add a comment here get visible layers another thing you can get is tmx data dot layer names and if i print that we are only getting the layer names although this time we are getting a dictionary but this one is fairly similar compared to all layers there is quite a bit of redundancy in here so i'm not going to cover it in too much detail there's one more i do want to cover and that is dmx dot data dot get layer by name and then here we need one argument and that's the name of the layer and one layer that we have is called floor for example and now if i put all of this into a print statement and run out of this again we are just getting the title layer floor all the way at the end so let me add comments this is get one layer by name and we want get all layer names as dictionary now there's one more thing that i do want to cover and that is that sometimes you do only want the object layers and this you can get with tmx data dot object groups and this is going to return an iterable so we need a for loop let's say for obj in dmx data dot object groups and then here i want to print my obj and let me comment out all the earlier stuff so things are a bit easier to see if i run this now and close this again we have one layer that is an object group and that is called objects which is what we have entitled as well so let me add a comment here and let's call this one get object layers and those are essentially all the different ways you would be getting different layers either tile layers or object groups or object layers it's the same thing meaning if i return to my drawing now we basically got the tiles and the object layers so all of these are mostly tiled layers and this one here is the object groups which is bringing us one step closer to actual objects that we can work with what we now have to figure out is inside of the tile and the object layer we want to get individual tiles that's the next major step and for that let me add another section let's call it get tiles and objects actually let's just focus on tiles now because tiles and objects do work slightly differently not that much and just to keep things simple i want to get my floor tiles let me copy this one and let's call it my layer and this is going to be my floor layer and besides that i'm going to comment out everything else now what happens if i print the layer we are getting not something that is particularly useful because what we want in here is dir which is a surprisingly useful function alright now what we get as the properties and methods for a layer all of the stuff that we have in here is going to be useful to us and tiles is pretty much the most important one that you are going to work with the most let's have a look what this one does i want to print layer dot tiles and this is a method so we need brackets and let's see what we get we get a generator so let's loop over this one i want four tile in layer.tiles and print the tile if i now run this what we get is an x in the y position let me go all the way to the top there are quite a few we have a very large tile set basically what we get here you can see where it's starting we first of all have an x position and this is for the tile then we have a y position and then we have a surface so we are getting three bits of information that is actually all we need and i am going to use all of this information in just a bit but this is pretty much all you are ever going to need now how you would actually use this in pygame is not by looking at the entire tile instead you would for x y and surface in layer.tiles and then you want to print x you want to print y and you want to print this surface if i run this now we are getting the x position the y position and the surface although be aware here x and y position refers to the tile inside of the map not an actual x and y position to get that we would have to multiply it with the size of the tile set which in this case is going to be 128 so this would give us the actual position on the map and once you have that information you can just use it that's basically it but let's have a look at some other things in here besides layer tiles you can also call layer dot data and this is going to return csv information let me print it and i think this is going to return an iterable no it actually doesn't cool so here you can see how the csv data would look like not particularly useful in this case because tiles is much more useful but you could be working with it although let me comment this one out because it well it's very space consuming now besides that you have layers dot name and this one should be fairly obvious and this should just be layered name and we get floor the name of the layer and we can also get layer dot id and this is going to return us the id of the layer you don't really use id very often name as well but i just wanted to mention it but basically this is all you are going to need to get different tiles most of the time you are just going to use dot tiles and you get all the information you could ever want so this is get all the information and well with that we have different tiles now besides that we also have to get objects and for this one let me comment out this one here and i want to create a new variable and let's call this one object layer and for this one i want to get my tmx data and again get a layer by name and this time i think i called this layer objects let me print the object layer and see what we get and we get a tiled object group objects so this is going to contain all of our objects all right now when we print dir and the object layer we are getting the window again this is getting a bit annoying but in here we have a ton of things that should look fairly familiar we have for example the id and we have the name of the layer and some things that i think are fairly obvious for example we could append something we could clear the entire layer we could also remove certain elements it's quite obvious what happens with these we also check if it's visible or not but the one thing that we don't have in here is some way to actually get all of the objects so if you read through this there's nothing that says get objects or something like this the reason for it is that we don't need to because this object layer can be iterated over all i have to do is for obj in my object layer and then print obj if i run this we are getting all of the objects in the game and there's actually another way to get this so let me comment out all of this and what i want to do is tmx data dot object that's horrible spelling objects there we go and this is returning the same information as this bit here meaning we can run a for loop so for obj in all of this and print obj again and we are getting exactly the same result so two different ways of getting the same outcome now i tend to prefer the first approach because this one is a bit more deliberate in terms of how it works especially if you have more than one object layer this one tends to make a bit more sense for obj let me run the dir method and now we are getting a ton of information and this is all the stuff we need to access an object and the really important attributes in here are x y and image image being the surface for this object and once we have that we basically have well all we need although there are a few more things that could also be useful to you for example we have rotation we have width we have height we have id we could get the name and there is also the type and those also tend to be quite useful but image x and y are the really important ones oh also there's s points when we are working with the shapes this one is becoming really important but essentially all we are going to do is obj.x then obj.y and obj.image if i run this we are getting the x the y position and the image or the surface now these at the bottom here don't have an image because they are the shapes but if i scroll up we are getting a bunch of surfaces for example the first one that's the castle it's an image that's 768 by 768 pixels and this one is in the position of these two coordinates and well with that we have all we need i guess there's one more thing that we do have to cover and that is the s points what i want to do is inside of this for loop i only want to get my shapes let me return to tiled actually and in here you can see all of my objects and what i want to do is only get the objects with the type shape and this could be a good exercise for you try in the for loop to only get the objects that have the type shape and i guess when you have that print the objects doesn't really matter what you do all right basically all you have to do is if obj.type is equal to shape and this has to have an upper case s and if that is the case i want to print the object so now if i run this we are only getting the different objects that are going to be shapes and in here the marker is the easiest one so let's work with this one first i want to add another if statement that if obj.name is equal to marker and now if that is the case i want to print obj if i run this again now we are only getting the markers and for reference here we are back in tiled and if i scroll in a tiny bit the marker is this tiny thing it's basically just a point on the map that doesn't really do anything besides that so all we would ever want from this is an x and a y position and this we will get with obj.x and obj.y meaning if i run this we're getting all of these points and this could for example be the starting position for a player or really whatever you want in here it's a fairly generic position and that is all you would really want to do with the markers they do have height and width and image in them but all of them return none or zero so it's not really useful now the more interesting object is if obj dot name is equal to the rectangle and let me comment out the markers so things are a bit easier to read and let me print the obj in here and this rectangle does have x and it does have a y position if i run this we are getting this information here if i go to tiled we are looking at this rectangle here right now and you can see we have the same position and besides that we could also get the width and the height let's actually do that one so i want to copy this again i want to get the width and i want to get the height if i run it now we are getting more information and if you just want to draw a rectangle this is basically what you would use although you could also object as underscore points and run this and this one would return all of the corner points of this rectangle which i guess could also be fairly useful although using those four bits of information is probably more useful now besides that let me comment out this one here we could look at if obj dot name is equal to ellipse and let's check if this is working so get my object and this should be a comparison operator there we go now we have the ellipse and this one is going to return the same information we have seen earlier now unfortunately there's no radius in here so if you wanted something round you would have to use the height and the width and then use that to create something round yourself sadly there's no easy way to create a rectangle here i guess you could use if it's a perfect circle either the width or the height as the radius but well that is all that is to that one and finally we have if obj dot name is equal to only gone and in here we can print the object again although that isn't going to do too much we're getting the same information again the one important thing here is as points and if you run this now we are getting the points and here it is very important that those are the bounding box of the rectangle they are not the actual polygons for that let me duplicate this line you would just need points so if i run this now these points here are the actual points of the polygon these points here are the bounding rectangle and let me visualize this entirely we are looking at this object right now and s points returns this bounding box here whereas if you just use points you're getting these five points here very different information but with that we have covered all of the different shapes that you could ever possibly work with as a matter of fact we have covered everything that you would need for the basics to use pi tmx and pygame that's kind of all you need so i guess with that in mind let's actually use it and most of the time you want or at the very least should use a sprite class meaning i want to create a tile and this one inherits from pygame dot sprite dot sprite and this one needs a dunder init method here we need self as always then we need a position and then we need a surface and now in here we need self dot image that's going to be the surface and we need self.rect and for self.rect we get self.image.getunderscorerect and we want to place the top left wherever the position is and this is then just about the easiest kind of sprite class you can create yourself oh i did forget we do need super and the dunder init method and then here i guess we can pass in the groups the class should be part of and this should also be a parameter for the ended method so now this is actually the most simple kind of sprite class i have been recording for a while sorry about that okay now when we are creating the init stuff for the actual python code so this part here i want to create a sprite group or whatever you want to call it and this one is just going to be pygame dot sprite dot group and now in the game loop all the way at the bottom i want to call sprite group dot draw and i want to draw on my screen and now all we have to do is add sprites to this group and then we can draw it and just thinking of it if none of what i have just said makes any sense check out my introduction to pygame that is going to help you a lot now i basically want to cycle through my tmx file and populate all of this with different tiles and i suppose let me put all of this at the bottom and add a fresh section here now first of all i want to cycle through all of my layers and this i usually do before layer in tmx starter dot layers and now i have to separate my tile layers from my object groups and as far as i could find there wasn't really a good way of doing it and there are two ways to approach this first of all you could check if layer dot name that is not how you spell that is in and now you write some strings like floor and lance and rocks and i think another one was pipes so this way you're selecting specific layers and you yourself know that there are tiles inside of these layers which i suppose works but really isn't the ideal approach because it's very manual although i suppose there are also situations where you do have titles you don't want to be shown and in that situation this approach would be quite useful however another approach would be to check the different attributes because tire layers and object groups have different kind of attributes and we can go with that and i know that the tire layer has the data attribute so i can check if has utter i want to check my layer and i want to check for data and if that is the case i want to print my layer if i run the code now we are getting an error because i didn't comment out everything properly now let's try this again there we go now we are only getting the tile layers and in here also i do not want to work with ground because this one is invisible so what i could also do is instead of layers look at visible layers so now if i run this we are only getting the visible tiled layers and now what we can do in here is what we have done in here so we're using layer.tiles and we're getting x y and the which means i want for x y and surface in layer dot tiles and now that i have that information i need to convert these x and y positions to actual positions we can use which means in my case i just want to multiply the entire thing with 128 this i want to do both for x and y and all of this should be in the position variable and now with that i can get my tile position should be the position the surface should be the surface and groups should be my sprite group and now if i run this we can actually see something now there's a bit of a problem let me go to tile to visualize what's wrong here basically what we are seeing in the game is this part here more or less which isn't ideal because we don't have a camera set up yet so we can't see all of the actually interesting stuff but i guess an easy way to fix this is if i use my floor i can draw some grass so let me draw some here so we have something a bit more interesting to look at and i guess we can also draw some dirt and then for plants and rocks i want to was it in objects yes so let's place in the objects i want to place a castle here a tree here here and here i know a couple of mushrooms we could place randomly it's really up to you what you want to do and now really importantly don't forget to save so this actually shows up in the game and now if i return and run this again now we can at the very least see the ground we can't see the castle yet because we didn't cover objects but at the very least something is working and well for the objects all we really need here since our case is fairly simple is for obj in tmx dot data dot objects i can just reuse my tiled and then here we need a position we need a surface and we need groups and this i think could be a good exercise for you right to figure out the arguments for these three parameters and see how far you get if you paid attention this should be fairly easy all right let's go through together first of all we need the position and the position here is going to be obj.x and obj dot y and important here this is not on a tile set so both the x and the y position is just information we can use straight away which makes it very easy to work with meaning the position we have already covered next up we need the surface and this one we can just put straight into the argument because all we need is obj dot image although this is going to cause problems in just a second but we'll cover that in a bit and for groups i want to have my sprite group now if i run this we will get an error because we have a nontype that for some objects we don't have an image so what we can do i suppose that's the easiest if obj dot image exists then we want to create a tile and now if we run this we can see the castle it's a bit stretched out so this isn't looking too great but at the very least it is working and that's all i'm caring about for now the mushrooms do look much better and in here using obj.image really isn't the cleanest way ideally you would want to have clear names for your different objects and let's have a look at this entire to really visualize what i mean here again we have all of our objects and ideally every single object has a name and a type that makes it really easy to work with them so right now this one here should be a castle and this should be a building and all the other stuff is type vegetation and the name for these trees should be three and then all the other elements are mush rooms and this is looking much better so when you work with objects really make sure to name things consistently it's very easy to forget all right now back to the code what you want to do in here is more something like if obj in either buildings or in vegetation so if i run this we can't see the castle because i think this was building there we go and now if that is not the case so else then i am working with the shapes and for those the title class isn't really going to work so i'm going to do this slightly differently let me get rid of this and copy all of this here instead and then i want to go into the game loop and on top of the group i am going to draw all of these shapes straight on the screen so what i first of all want to check if the object type is inside of shapes we are working with all of these objects here and just to make sure we can actually see them let me move them all on the screen or at least some of them on the screen there we go this is definitely going to be visible and again don't forget to save really important now in here i want to check actually i can copy all of this here make my life a bit easier and let me uncomment all of this and let me put these things after each other all right so now we have all the information we need to draw markers rectangles ellipses and polygons now markers are the easiest ones and we already have the x and the y position so what we could be doing for example is pie game dot draw dot circle and for this one we need a surface which in my case is screen then we are going to need a color let's say for this one we can use red then we need the center which we have that one is going to be obj.x and obj.y and then we need a radius let's say in this case we can go with five and let me comment out or delete these two points and comment out all the other stuff so we're not spamming too much text and now if i run this we can't see anything for the simple reason that this should be shape instead of shapes so here we can see one point and there we have another point obviously this isn't too useful but i think you get the principle now next up we have the rectangle and i think the easiest way to work with this is to turn this into an actual rectangle so pygame.rect and then here we need left top width and height and if you look below we have all of these points so obj.x is the left side obj.y is the top and this is horrible spelling then obj.weft is the wift and obj.height is the eighth meaning now i can get rid of all of these points and call pygame.draw.rect i want to screen again this one i want to be yellow and i want to have my rectangle so if i run this we can see the rectangle as well next up we can work on the ellipse and for this one basically what i want to do is pie game dot raw dot ellipse and in here we first of all need a surface which is my screen then we need a color which in my case let's go with blue and now we need a rectangle and the rectangle let's create it separately again is going to be pygame dot rect and for this one i can just copy all of this stuff we used for the rectangle and just paste it in here and now we have a rectangle so i can run this again and we get the rectangle we created and finally we have the polygon and for the polygon i only really care about the points so if i run this just to see what we get we have all of these points we basically get a list and the list contains point objects and each point has an x and a y attribute and those we have to extract first of all and for that let me get rid of all of this i want to create a points variable and i'm going to use list comprehension to extract all of the points and for now i want point for point in obj dot points and i don't want the point itself instead i want to have a tuple that contains point dot x and point dot y and if i print these points now and run all of this i get a list full of tuples with the x and the y position and this i can use for pygame.draw. polygon and polygon only wants three different arguments it wants a surface which in my case is screen then for the color something we haven't used yet let's go with green and points is going to be points so if i run this we can see on the right side the shape we have seen earlier and well that is pretty much all you are ever going to need so i hope that was helpful and i see you around
