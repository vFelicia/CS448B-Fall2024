With timestamps:

00:00 - hello there in this tutorial we are
00:02 - going to be creating an animated button
00:03 - in pygame
00:04 - and unfortunately creating a button and
00:06 - pygame is more complicated than it
00:08 - really should be
00:10 - but in this tutorial i cover a couple of
00:12 - important bits for example how to create
00:14 - an elevated animation how to make sure
00:16 - the button only triggers once
00:18 - and how to set up the entire thing so
00:21 - let's start with the logic of how this
00:23 - button is going to work
00:24 - and in here we have three major
00:26 - components that we need to understand
00:28 - the first one is the text the second one
00:30 - is the top racked and the third one is
00:32 - the bottom right
00:34 - and let's go through them one by one the
00:36 - text is literally just a string that we
00:38 - put on top of the button
00:40 - so this one really doesn't do all that
00:42 - much
00:43 - then the top rack is basically the top
00:45 - part of the button
00:47 - and this one is going to carry a ton of
00:48 - logic i'll cover that in just a bit
00:50 - but in the most basic sense it's like
00:52 - the top color of the button
00:55 - and finally we have the bottom racked
00:57 - this is also going to be a rectangle
00:59 - and this one is well if you had an
01:01 - actual button it would be the side
01:03 - so this one is essentially there to show
01:05 - the elevation of the button
01:07 - it really doesn't do all that much else
01:09 - so these would be the three things we
01:11 - can actually
01:12 - see and we're gonna draw them in just a
01:14 - second
01:15 - but now we have to cover two more
01:17 - important bits that are really important
01:19 - to make this work
01:20 - number one is we have to create a click
01:22 - logic and number two
01:24 - is we have to be able to move the button
01:26 - and to get the button click logic
01:28 - all we really have to do is to check
01:30 - between a collision between the mouse
01:32 - and one of the two rectangles and the
01:34 - one thing we really have to be careful
01:36 - here
01:36 - is that we are only triggering a click
01:38 - once
01:39 - you're going to see in a second what
01:41 - that means and to get the elevation
01:44 - logic
01:44 - all we really have to do is to move the
01:46 - top rack a little bit up
01:48 - and then limit the bottom rack by a tiny
01:50 - bit
01:51 - so with that we have the basic logic so
01:53 - let's get into the code and let's
01:55 - actually implement all of this
01:57 - alrighty so here we have a super simple
01:59 - setup for pygame
02:00 - this would be the most basic setup or
02:03 - almost the most basic setup you could go
02:05 - with
02:05 - so if i run this code all we really can
02:08 - see
02:08 - is well a white background so just to go
02:11 - through it
02:12 - really quick i am importing pie game and
02:16 - cis at the top
02:17 - then i set up a couple of main things
02:20 - so we have the pie game display surface
02:23 - we're setting up a caption here and then
02:26 - we are creating a clock
02:27 - so all of these should be very basic
02:29 - things
02:30 - and the only thing that we really add
02:32 - towards this
02:33 - is a font and this is just the basic
02:36 - font that pi game has inbuilt
02:37 - this is why we added none in here and in
02:40 - my case i have added a font size of 30
02:43 - although you could have gone with a
02:44 - larger one just check with your own
02:45 - project to see what works for you
02:48 - and then we have our game loop and this
02:51 - one
02:51 - right now doesn't really do anything the
02:54 - only substantial thing we do in here
02:55 - is to draw a white-ish background color
02:59 - so all of this so far really really easy
03:02 - and nothing really happens here so far
03:04 - so let's actually make something happen
03:06 - and how i want to approach this is i
03:08 - want to create
03:09 - a class that i'm going to call button
03:11 - it's going to need an
03:12 - init method that
03:15 - needs self and a couple more arguments
03:18 - so let's go through them one by one
03:20 - the first one i just want to have a text
03:22 - so this is just going to be a string
03:25 - then i want to have a width and a height
03:27 - ideally spelled correctly that tends to
03:30 - help
03:31 - so those are the width and height of the
03:32 - button and then we have a position
03:35 - so the position is going to be
03:38 - an x and a y position
03:42 - so we can actually place the thing
03:43 - somewhere on the screen so what we would
03:45 - be passing in here later on would be a
03:47 - tuple
03:48 - with these two coordinates so um yeah
03:51 - you could organize this differently it
03:52 - doesn't really matter
03:54 - and this is the basic stuff we are going
03:56 - to need for now
03:57 - so now let's start to define some basic
04:00 - points in here
04:01 - first of all i want to create the top
04:03 - rectangle
04:04 - because this one is going to carry a ton
04:06 - of logic
04:08 - and i want to put this into its own
04:09 - attribute so self.top rect
04:12 - and then i use pygame dot rect to
04:15 - create a rectangle and in here we could
04:18 - approach the arguments in two different
04:21 - ways
04:21 - we have to specify x y width and height
04:25 - so this is usually how you specify it
04:28 - although
04:28 - if you check the documentation there's
04:30 - also another way
04:32 - that you could insert a tuple with the
04:34 - position
04:35 - and another tuple with the width and the
04:38 - height
04:38 - and this is what i am going to go for so
04:40 - this is going to be slightly different
04:42 - from what i usually do but not that much
04:44 - and well the reason for it is that this
04:46 - is much simpler
04:47 - because we already have a tuple with the
04:49 - position it
04:51 - is literally just this bit
04:54 - here that we are passing in there so
04:57 - very very simple
04:59 - now next up we have to specify the width
05:02 - and the height
05:02 - of this rectangle and this is also
05:04 - information that we
05:06 - have because all we need are these two
05:09 - bits here
05:10 - and we pass them in here so yeah
05:13 - also super simple stuff so
05:16 - all i have to add in here is the width
05:19 - and the height
05:20 - of this rectangle and height
05:24 - that's how you spell that cool so with
05:26 - that we do have a rectangle
05:28 - and there's one important thing i do
05:30 - want to emphasize here that when we are
05:32 - using
05:32 - this position we are placing the top
05:35 - left
05:36 - so if i draw this here's our rectangle
05:38 - that we just draw
05:40 - and the point we are placing is this
05:42 - point up here
05:43 - so just keep this in mind you could
05:46 - change it
05:46 - but i think this is generally the
05:48 - easiest way to place something
05:49 - although center would also not be a bad
05:52 - point but we are placing this point
05:54 - just keep that in mind all right so with
05:56 - that we have our top rectangle
05:59 - now next up i want to give this thing a
06:01 - color
06:02 - and for this i just declare another
06:03 - attribute i call this self
06:05 - top color and in here i am just going to
06:08 - use a string with a hexadecimal value
06:11 - which in my case is 475
06:15 - f77 and i got this from an artist online
06:20 - but okay so with that we have our top
06:22 - rectangle
06:23 - next up i want to create some text so
06:26 - let's add another comment with text so
06:28 - we know what we're doing
06:30 - and in here we first have to create a
06:32 - surface with the text so i want
06:34 - self text let's call it surface
06:38 - and this one to render a text we first
06:40 - need our gui font
06:42 - so gui font then i want render
06:45 - and now in here we are going to need
06:48 - three bits of information
06:49 - first of all we need the actual text so
06:52 - this is the text
06:53 - that we have specified earlier in here
06:55 - so
06:56 - this bit now next up we have to specify
06:59 - if this is supposed to be anti-aliased
07:00 - or not which in my case i do want to do
07:04 - because we are not using pixel art
07:06 - and finally we have to specify a color
07:08 - and for that
07:09 - again i'm going to use a hexadecimal
07:11 - color so ff
07:12 - ff and ff and this is pure white
07:16 - so a pure white text for our text
07:18 - surface
07:19 - cool so now we have a surface and to
07:21 - place it i want to get
07:22 - another rectangle so i'm going to call
07:25 - this text rect
07:26 - and for that all we want to do is to get
07:29 - the surface
07:30 - the text surface and then use get
07:34 - rekt and in here we have to figure out
07:37 - where to place it
07:38 - and well let me illustrate this
07:42 - so we know that this top rectangle is
07:44 - going to be
07:45 - this kind of rectangle and when we have
07:48 - our text
07:49 - all we want to do is to place this thing
07:53 - right in the center of it and that's a
07:56 - bit of information that we can use
07:57 - very easily so all we have to do is to
08:00 - specify
08:01 - this center here when we place this
08:03 - rectangle and then get
08:05 - self top rectangle
08:09 - and then get the center from that so
08:12 - when we are getting this rectangle
08:14 - we are picking this rectangle at the top
08:16 - and just placing the center of one
08:18 - into the center of the other that's
08:20 - really all we have to do
08:22 - and with that we have a basic setup
08:26 - for button so now let's actually draw
08:28 - the thing
08:29 - and i called this draw
08:32 - it's going to be another method that
08:34 - needs self and in here i just want to
08:36 - draw the top rectangle
08:37 - and the text itself so let's start with
08:39 - the top rectangle
08:41 - so for that i need pygame.draw.rect
08:44 - and in here we first of all need our
08:46 - display surface so this is going to be
08:48 - screen
08:49 - which in turn is the display surface we
08:52 - have specified
08:53 - early on that's all that's happening
08:55 - here next up we have to create a color
08:58 - and we already have a color it is this
09:00 - top color up here
09:01 - so we have to pass this in there and
09:04 - next up
09:05 - we need the actual rectangle we want to
09:07 - draw which we also have it's this top
09:10 - rectangle so we want to pass this in
09:12 - here
09:13 - and for now this is all we need although
09:15 - i am going to add a little bit towards
09:17 - this in just a second
09:19 - now with that covered we have to display
09:21 - the text as well and for that we need
09:23 - screen
09:24 - dot blit because now we are placing a
09:26 - surface we are not drawing a rectangle
09:29 - so this is why these two lines are
09:30 - different
09:31 - and in here we are going to need a text
09:33 - surface
09:34 - and a text rectangle both bits of
09:37 - information we already have
09:38 - so i want self.text surface and i want
09:41 - self.text rect
09:43 - so with these two bits we basically have
09:46 - all we need to draw
09:47 - this basic thing so with all of that
09:50 - covered
09:50 - let's actually create an instance of
09:52 - this button
09:54 - so let's call this one button1 and this
09:56 - button is just going to inherit
09:58 - button itself and now in here we have to
10:01 - specify a couple of things
10:03 - first of all the text itself and for
10:05 - that i'm just going to go with
10:07 - click me but really any text is fine
10:10 - here now for the width i went with 200
10:14 - and for the height i went with 40 and
10:17 - finally for the position
10:18 - i want to place this thing roughly in
10:20 - the middle so our entire surface is 500
10:23 - by 500 pixels
10:25 - so let's go with 200 and 250 and with
10:28 - that we have created our basic button
10:31 - now all i want to do is to draw it by
10:33 - calling this method
10:34 - so in our game loop all i want to do is
10:37 - button one
10:38 - and draw it and now let's run this and
10:41 - we have clickme it doesn't do anything
10:44 - right now but this we can work on in
10:46 - just a bit
10:47 - but first of all i want to style this a
10:49 - tiny bit because
10:50 - right now it has very sharp corners but
10:53 - instead i want it to look
10:54 - more like this and have more rounded
10:57 - corners
10:58 - so something like this that was terrible
11:00 - drawing i apologize
11:02 - so let's actually work on that and
11:05 - fortunately
11:06 - our draw method can do this very easily
11:09 - all we really have to do here
11:11 - is to specify a named argument called
11:13 - border
11:14 - radius and this one is going to need an
11:16 - integer
11:17 - and for this one i want to go with 12.
11:20 - so now let's run this and here we have
11:23 - some more rounded corners
11:24 - now the slightly annoying thing is that
11:26 - you can see the pixels here quite
11:28 - a bit so i guess you would have to play
11:30 - around with the border radius to make
11:32 - this look nicer
11:33 - um but i guess for now it's fine and
11:35 - with that
11:36 - we have the basics covered to just
11:38 - display a button but well it doesn't do
11:40 - anything right now and that is going to
11:42 - be the next step we will work on that we
11:44 - make this button clickable
11:47 - and for that really all we have to check
11:49 - is the collision between our mouse
11:50 - position
11:51 - and our top rectangle and then once we
11:54 - have that we want to run some code
11:57 - and this is literally the basic logic
11:59 - that we have to run here
12:01 - now there's one complication that we do
12:03 - have to be aware of
12:04 - that if we were to just check the
12:06 - collision and the mouse button press
12:08 - then we would trigger this button
12:10 - multiple times even though the user
12:11 - would only click it once
12:13 - and this is something i'm going to
12:14 - demonstrate in just a second it's a
12:16 - minor problem and we can fix it quite
12:18 - easily but it is something to be aware
12:20 - of
12:20 - but let's jump back into our code and
12:23 - let's have a look at this
12:24 - so here i'm back in the button and i
12:26 - want to add another method
12:28 - that i called check click
12:33 - potentially not the greatest name but
12:35 - well it's fine
12:36 - and the first thing i want to get in
12:37 - here is the mouse position
12:39 - and i'm going to call this mouse pause
12:41 - and to get the mouse position all we
12:43 - need is pygame dot
12:44 - mouse dot get underscore pause
12:48 - and with that we would get the mouse
12:50 - position so print mouse pause
12:52 - and then in our drawing method i want to
12:56 - call
12:56 - check click and now if i run this
13:00 - and you look at the terminal you can see
13:02 - our mouse position
13:03 - so if i go to the top left it's going to
13:04 - be basically 0 and 0.
13:07 - if i go to the bottom right we get 500
13:09 - and 500
13:11 - okay close enough oh you will get 499
13:14 - and 499 because we start at zero
13:16 - so what i first want to do is to check
13:18 - if this mouse position
13:20 - is overlapping with this top rectangle
13:24 - and all we need for that is if self.top
13:28 - rect
13:28 - is collide point
13:34 - with our mouse position so all that
13:37 - collide point does is that it takes a
13:39 - rectangle and it checks if this
13:41 - rectangle is colliding with a single
13:42 - point
13:43 - so this one has to be an x in the y
13:44 - position which fortunately
13:47 - we have and if that is the case
13:50 - for now let's just check if this works
13:52 - we want to print
13:53 - let's call it overlap and i am really
13:55 - bad at typing
13:56 - okay so now if my mouse is hovering over
13:59 - the button we get overlap
14:01 - so that's a pretty good start but now we
14:04 - don't just want to check an overlap we
14:06 - also want to check if the mouse button
14:08 - was pressed
14:09 - and this we can also check very easily
14:12 - and this would be done with pygame dot
14:14 - mouse
14:16 - dot get pressed and this one is going to
14:20 - return a tuple with three elements
14:22 - and each of these elements is one of
14:24 - your buttons of the mouse
14:25 - so the left mouse button the middle
14:27 - mouse button and the right mouse button
14:29 - and let me actually print this thing
14:31 - just to demonstrate what it does
14:34 - so now if i hover over the button you
14:36 - can see false thoughts and faults but if
14:38 - i click my mouse
14:39 - you can see one true if i click the
14:41 - other one you can see the other true
14:43 - and if i click my middle mouse button
14:44 - you can see the middle true and if i
14:46 - press
14:47 - all three you can see true true and true
14:50 - so this is something that we
14:51 - can use
14:54 - and in my case all i really want is to
14:57 - get
14:58 - the index zero so this would be the left
15:00 - mouse button
15:02 - and then all we want to do in here is to
15:05 - use this in an if statement
15:07 - so if my mouse is inside of this
15:09 - rectangle and if i'm pressing this
15:11 - button
15:12 - then i want to do something and in my
15:15 - case i just want to print
15:16 - click but in here in an actual project
15:20 - this obviously would be much more
15:21 - complicated depending on what you would
15:23 - like to do
15:24 - but here's actually a problem i talked
15:26 - about earlier and let me demonstrate
15:29 - so let's say you want to click this
15:30 - button and run code only once
15:32 - however if i click it we are running
15:35 - this
15:35 - six times and the problem here is that
15:40 - pygame runs this code 60 times a second
15:44 - so you think you might have pressed this
15:45 - down once really fast
15:47 - but for pygame your reactions are
15:49 - incredibly slow and what pygame
15:51 - perceives
15:52 - is that you have pressed on the button
15:54 - for six frames of the game
15:56 - so you would have run this code six
15:58 - times which
15:59 - obviously we don't really want to do
16:02 - so we have to add a little bit of logic
16:04 - here to only run
16:06 - this code if the button was released
16:08 - which i think is the easiest way
16:10 - and for that we have to specify another
16:13 - attribute and let me do this right at
16:15 - the top so in here
16:17 - i want to have a couple of let's call it
16:20 - core attributes
16:23 - and the first one is going to be self
16:25 - dot pressed
16:27 - and by default this one is going to be
16:29 - false
16:30 - and now in this code we are going to set
16:34 - this
16:34 - self.pressed to
16:37 - true because we indeed have pressed it
16:42 - so this right now wouldn't really do
16:44 - anything
16:45 - but what we can do now is
16:48 - if the player stops pressing the button
16:50 - so if this one
16:51 - doesn't evaluate to true anymore only
16:53 - then do we actually want to run the code
16:56 - so in here we want to print
17:00 - the click but this by itself
17:04 - wouldn't really work because we first
17:06 - have to check if self.pressed
17:09 - is actually true and only then do we
17:12 - want to run this
17:14 - and after it has run we want to set
17:16 - self.pressed
17:19 - back to false
17:22 - and now let's try this again so i have
17:24 - to code and now if i click it it only
17:27 - runs
17:27 - once and i can do this multiple times it
17:29 - works pretty well
17:31 - cool so let's go for the logic of what
17:35 - happens here
17:36 - and i think let's do this step by step
17:39 - so we start in step number one we get
17:42 - the mouse position this one i think is
17:44 - super easy to do so we don't really have
17:46 - to add it here
17:47 - next up we check in this step here
17:50 - if our mouse position so this bit here
17:54 - is colliding with the top rectangle so
17:56 - if we actually have our mouse on top of
17:58 - the button
17:58 - which also i think is a very
18:00 - straightforward thing
18:02 - next up we are checking if the player is
18:04 - pressing the mouse button
18:07 - and if that is the case we want to set
18:09 - self.pressed
18:10 - to true so that we know the button was
18:13 - pressed but it doesn't really matter how
18:15 - often it was pressed it is always going
18:16 - to be set to true
18:19 - but now we want to check if this
18:21 - condition is not true anymore
18:23 - and this one here is true so basically
18:25 - we want to check if the player has
18:27 - pressed the button
18:28 - but is not pressing it anymore so then
18:31 - this else statement is going to run
18:34 - and in here we are going to check if the
18:36 - player has pressed the button in the
18:37 - first place
18:38 - so if this condition here was triggered
18:40 - and only if that is the case we are
18:41 - actually going to
18:42 - print our code and then set press to
18:45 - false again
18:47 - so with this logic we ensure that our
18:49 - button is only going to be pressed once
18:52 - or in other words we are only going to
18:53 - run the code once the player releases
18:55 - the button
18:56 - so with that we have our basic button
18:59 - logic
19:00 - and well all that's really left to do
19:03 - is to add some visual elements to it to
19:06 - make it look a bit nicer
19:08 - so this is going to involve two parts
19:10 - number one
19:11 - if the player is hovering with the mouse
19:12 - over the button i want to change the
19:14 - color
19:15 - and number two is i want to add the
19:16 - bottom part of this button
19:18 - so that we can have a downward motion
19:20 - that simulates how a button press would
19:21 - work which i think looks quite nice and
19:24 - well let's actually jump right into the
19:26 - code i think
19:27 - doing this explains better than any kind
19:29 - of theory
19:30 - so here we're back in our code and let's
19:33 - start by adding the hover color
19:35 - that i think is the easier part and well
19:38 - all we really have to do is down in our
19:41 - check click
19:42 - we have to look for
19:45 - this part here that if the mouse is
19:47 - hovering over the button
19:49 - and if that is the case i just want to
19:51 - change the self.top color
19:53 - to something else and in my case i'm
19:56 - using a hexadecimal value again
19:58 - which in my case is d7 for b4b
20:04 - you're going to see in a second what
20:05 - this one is going to look like actually
20:07 - let's do it right now
20:08 - so now if i run this still looks the
20:10 - same but now if i hover over this
20:12 - it's going to be red now the problem is
20:14 - if i move outside of this button
20:16 - the color stays the same so to fix that
20:20 - all we have to do is if this condition
20:22 - is not true anymore
20:24 - i want to add another else statement so
20:27 - if our mouse has left the button
20:29 - and if that is the case i want to return
20:34 - myself.top color back to what it used to
20:36 - be so the color we have specified
20:38 - earlier here
20:40 - and well that is literally all we have
20:42 - to do so now let's try this again
20:44 - and now i have a hover color this one is
20:47 - very easy
20:48 - and everything else still works the same
20:50 - so this is quite nice
20:52 - so with that we are going to come to the
20:55 - slightly more complex part
20:57 - that i want to add the bottom part of
20:58 - the button so we are simulating the
21:00 - downward press
21:01 - and for that we are going to need a
21:03 - couple of different elements
21:05 - so first of all when we create this
21:08 - button
21:09 - i want to specify an elevation and this
21:13 - is going to be how high the button is
21:15 - so if i were to draw this let's say this
21:18 - is the top part of our button
21:20 - and this would be the sides of the
21:23 - button
21:24 - then the elevation is going to be how
21:27 - high
21:28 - this bit here is going to be this is a
21:30 - number you really don't want to make too
21:32 - large
21:33 - in my case i went with something like
21:34 - six if you make this number too large
21:37 - this is going to look very very strange
21:39 - so this is the first element we are
21:41 - going to need
21:42 - and when i create the core attributes i
21:45 - want to get myself
21:46 - elevation is going to be elevation
21:51 - but here's going to be the problem that
21:53 - when i press the button
21:55 - i want to set this elevation to zero and
21:58 - after i have released the button
21:59 - i want to set it back to what we have
22:01 - passed in here
22:02 - now the problem is if we were to set
22:04 - this value to zero we would lose the
22:06 - original value we have specified
22:08 - so to fix that i'm going to add a second
22:12 - let's call it dynamic elevation
22:16 - and this for now is just going to be
22:17 - elevation as well
22:19 - but essentially what's going to happen
22:21 - is that when we actually move the button
22:22 - we're only going to change this value
22:25 - and then once the player has released
22:26 - the button we are going to set this
22:28 - value
22:29 - back to this elevation and that way the
22:31 - elevation we specify earlier under the
22:33 - code is not going to be lost
22:35 - this should make a lot more sense in
22:37 - just a bit and now there's
22:38 - one more bit of information that we are
22:40 - going to need
22:42 - and here the problem is that
22:45 - i want to move this top rectangle
22:47 - slightly up
22:48 - in the code when the button is not being
22:50 - pressed so when it's elevated
22:52 - so i want to move this thing up by a
22:53 - couple of pixels
22:55 - but for that i really want to keep the
22:57 - original y position
22:59 - and just to make it easier to work with
23:00 - i'm going to specify this
23:02 - as its own attribute so let's call this
23:04 - original
23:06 - y position but
23:09 - really all that is going to be is pause
23:12 - and one so the y position we have
23:15 - inserted when we created the instance of
23:17 - this class
23:18 - and all right so with that we have all
23:20 - the basic parts that we are going to
23:22 - need to make this button look fancy
23:24 - now before i forget when i create the
23:27 - instance of this button
23:28 - i now also have to add
23:31 - the elevation and in my case i went with
23:34 - six
23:35 - and i would really recommend to not make
23:37 - it larger than that because that would
23:39 - start to look very very silly
23:41 - but okay so now we have all the basic
23:45 - elements we need
23:46 - although there's one more bit that we do
23:48 - require
23:49 - and let me put it right below the top
23:51 - rectangle
23:52 - because we actually want to draw the
23:54 - bottom part of the button
23:56 - so i've called this the bottom
24:01 - rectangle and then here all we need is
24:04 - self.bottom
24:05 - underscore rectangle or rect and this
24:08 - one again is going to be pygame.rect
24:11 - and for now i'm going to place this in
24:13 - the exact same position
24:14 - as the top rectangle but the position
24:17 - here doesn't actually matter all that
24:18 - much because we are going to change this
24:20 - in just a bit
24:21 - all i really want to do is to create
24:22 - this rectangle in the first place
24:24 - because we are going to use it in just a
24:26 - second
24:27 - but the actual dimension of position
24:28 - really doesn't matter all that much
24:30 - for the x and the y position i do want
24:32 - to have the width
24:33 - and for the height for now i just go
24:35 - with elevation but again
24:37 - this part really doesn't matter okay
24:40 - and next up i want to give this a color
24:42 - so i call this
24:44 - bottom color and in here once again we
24:47 - have
24:47 - one more hexadecimal color which in this
24:50 - case is 354
24:52 - b5e and alrighty
24:55 - now we have finally finished the init
24:57 - part of this code so let me minimize it
25:00 - and then we don't have to worry about it
25:01 - anymore
25:03 - and now we actually come to the
25:05 - interesting part
25:06 - because when i want to draw all of this
25:08 - code i want to
25:10 - specify the elevation logic that's
25:14 - probably a good name and here's how this
25:16 - entire thing is going to work
25:17 - before we draw this button here we want
25:20 - to lift it up
25:21 - ever so slightly by whatever we
25:22 - specified in the elevation
25:25 - so well all we have to do in here is to
25:27 - get our self.top
25:30 - rectangle and get its y property
25:33 - so we move it up and down and i want to
25:36 - place this
25:37 - in the original y position so
25:41 - original y position but i don't just
25:44 - want to put it in that position i want
25:45 - to subtract the elevation
25:47 - so self dot dynamic
25:50 - elevation so minus this point here
25:54 - and that way we are moving the button up
25:57 - ever so slightly before we draw it
25:59 - now why have i done that well the idea
26:02 - here is
26:03 - that this dynamic elevation we can
26:05 - change by default it's going to be six
26:07 - or whatever you specify but if we were
26:10 - to press the button
26:11 - we could change this value to zero or to
26:14 - any other value to be honest
26:15 - so that we only elevate the button if we
26:17 - don't press the button
26:19 - but if we do press a button this value
26:21 - becomes zero so the button isn't
26:23 - elevated
26:24 - anymore and for now let us print this
26:27 - and well you can't really see anything
26:29 - but what you can see now is that the
26:30 - text is slightly further down
26:32 - and this happened because we moved up
26:34 - the button by itself by a couple of
26:36 - pixels
26:37 - so we do know this is working and
26:39 - everything else still works
26:41 - so let's actually implement the rest of
26:42 - the logic for the button itself and then
26:44 - we are going to fix the text
26:46 - all i want to do is when the button is
26:49 - being pressed
26:51 - so when we are in this bit here then i
26:53 - want to get self
26:54 - and set the dynamic elevation back to
26:57 - zero
26:58 - so now let's try this and now we can see
27:00 - that our
27:01 - button is going to be moved down ever so
27:03 - slightly
27:04 - the problem now is it stays down so once
27:07 - we release it it's not going to make a
27:08 - change
27:09 - and that we can also fix very easily
27:11 - when we go to this else statement
27:14 - and we move outside of the button i want
27:16 - to get self
27:17 - dot dynamic elevation is back to self
27:21 - dot elevation so this value is going to
27:24 - be six
27:24 - whatever we specified earlier and this
27:26 - value right now is zero
27:28 - and we're overwriting it so now let's
27:30 - try this
27:31 - and i click it and once i leave it the
27:34 - button
27:34 - goes back to where it used to be so this
27:37 - one is already working quite well
27:39 - cool now next up the text
27:42 - makes this whole thing look quite weird
27:45 - so
27:46 - i want to update the text position as
27:47 - well and for that all we need
27:49 - is self dot text rect get the center
27:53 - again
27:54 - and now move the center once again to
27:56 - the top rect
27:57 - dot center and this is pretty much the
28:01 - same logic that
28:02 - we have used in here
28:05 - where we just take the center of the
28:07 - text and move it to the center of the
28:09 - top rectangle
28:10 - so now when i do this
28:14 - we can see that we are getting
28:19 - the down click button and i did just
28:22 - realize
28:23 - that this line should rather be in this
28:25 - else statement
28:26 - that once we have stopped pressing the
28:28 - button down now it should be in here
28:30 - so now let's try this and yeah this
28:32 - feels much better
28:33 - so we don't want to elevate the button
28:35 - once we leave with the mouse
28:36 - we want to elevate it once we stop
28:38 - pressing the button sorry about that
28:40 - so alright this does make much more
28:43 - sense although
28:44 - actually here's one problem that if we
28:47 - were to press down this button
28:49 - and now with the mouse button still
28:51 - being pressed move outside of this
28:53 - the button would have a slight bug
28:56 - so i hope this makes sense so if you
28:59 - follow along try this yourself
29:00 - keep the button pressed and move outside
29:02 - now there's nothing that triggers
29:04 - this button being moved up again so as a
29:07 - matter of fact
29:09 - we have to add this line of code to both
29:12 - sides
29:13 - so that we're lifting up the button once
29:15 - the player stops pressing the button
29:17 - or if the player moves the mouse outside
29:20 - of the button
29:21 - so if we have both codes we can either
29:23 - press the button
29:24 - it comes up again or we can move the
29:26 - button outside and it also moves again
29:28 - so um i hope that makes sense sorry that
29:31 - was a little bit confusing
29:32 - but alright now we have finished that
29:34 - part
29:35 - and now all we have to do is to actually
29:38 - visualize the bottom right part
29:40 - and well this one is also actually not
29:43 - that difficult to do
29:45 - because all we have to do here is to get
29:47 - our self.bottom
29:49 - rectangle and now i want to specify
29:52 - its mid top so
29:55 - let me just draw this thing really quick
29:58 - so now here we have the button
30:02 - and we are moving this point and now the
30:05 - question is where do we want to move
30:06 - this point and in my case
30:09 - i want to move it to the exact position
30:12 - where our
30:12 - top rectangle has its top point
30:16 - so we are moving the bottom rectangle
30:18 - exactly below
30:19 - the top rectangle so right now
30:22 - both buttons are right on top of each
30:25 - other
30:26 - and to achieve that all we have to do is
30:29 - to get
30:30 - our self dot top rectangle and get mid
30:33 - top again
30:34 - so right now these two buttons would be
30:36 - right on top of each other
30:37 - however now we can change a tiny bit to
30:40 - make all of this work
30:41 - because now i want to get my bottom
30:44 - rectangle
30:45 - again and this time i want to change the
30:48 - height of this button
30:50 - and all we are doing in here is when we
30:52 - get
30:53 - the red button we are extending it ever
30:55 - so slightly downwards
30:57 - and that way we are making it look like
31:00 - the button has a bottom bit
31:02 - and that's really all that's happening
31:04 - here and since we're doing that
31:06 - the height we have specified up here
31:10 - really doesn't matter because we're
31:11 - overwriting it anyway but we did have to
31:14 - specify it here
31:15 - because we're changing the rectangle
31:16 - here so we didn't need to specify it
31:18 - earlier
31:19 - but the actual height doesn't matter so
31:23 - with that all i have to do in here is to
31:26 - get
31:29 - self.toprekt.height
31:30 - so right now we're just copying the top
31:32 - rectangle but what we want to do now
31:34 - is to get plus self dot
31:37 - dynamic elevation
31:42 - so effectively all we're doing is we are
31:43 - copying the top rectangle and adding
31:46 - a little bit of height at the bottom and
31:48 - now if this number is 6
31:49 - we have a bottom part but if this number
31:51 - is 0 we don't have a bottom part
31:54 - it's as straightforward as that now if
31:57 - we were to run this
31:58 - we couldn't see it and the simple reason
32:00 - is that we are not drawing this button
32:02 - so let's do that again i need
32:05 - pygame.draw.rect
32:06 - i have to specify screen then i have to
32:10 - specify a color
32:11 - which fortunately i do have and then i
32:15 - need a rectangle
32:16 - which i also have it's self dot bottom
32:19 - rect
32:21 - and now finally i need to bought a
32:23 - radius and this one i
32:25 - also have and now let's try this
32:29 - now we have a bottom and this bottom is
32:31 - defined
32:32 - by this dynamic elevation so if i press
32:35 - the button and it goes to zero
32:36 - the bottom part disappears and if i
32:39 - unpress it
32:40 - it goes away so with that we have a
32:43 - button that actually works really well
32:45 - so i hope that was helpful and let me
32:47 - know if you have any questions

Cleaned transcript:

hello there in this tutorial we are going to be creating an animated button in pygame and unfortunately creating a button and pygame is more complicated than it really should be but in this tutorial i cover a couple of important bits for example how to create an elevated animation how to make sure the button only triggers once and how to set up the entire thing so let's start with the logic of how this button is going to work and in here we have three major components that we need to understand the first one is the text the second one is the top racked and the third one is the bottom right and let's go through them one by one the text is literally just a string that we put on top of the button so this one really doesn't do all that much then the top rack is basically the top part of the button and this one is going to carry a ton of logic i'll cover that in just a bit but in the most basic sense it's like the top color of the button and finally we have the bottom racked this is also going to be a rectangle and this one is well if you had an actual button it would be the side so this one is essentially there to show the elevation of the button it really doesn't do all that much else so these would be the three things we can actually see and we're gonna draw them in just a second but now we have to cover two more important bits that are really important to make this work number one is we have to create a click logic and number two is we have to be able to move the button and to get the button click logic all we really have to do is to check between a collision between the mouse and one of the two rectangles and the one thing we really have to be careful here is that we are only triggering a click once you're going to see in a second what that means and to get the elevation logic all we really have to do is to move the top rack a little bit up and then limit the bottom rack by a tiny bit so with that we have the basic logic so let's get into the code and let's actually implement all of this alrighty so here we have a super simple setup for pygame this would be the most basic setup or almost the most basic setup you could go with so if i run this code all we really can see is well a white background so just to go through it really quick i am importing pie game and cis at the top then i set up a couple of main things so we have the pie game display surface we're setting up a caption here and then we are creating a clock so all of these should be very basic things and the only thing that we really add towards this is a font and this is just the basic font that pi game has inbuilt this is why we added none in here and in my case i have added a font size of 30 although you could have gone with a larger one just check with your own project to see what works for you and then we have our game loop and this one right now doesn't really do anything the only substantial thing we do in here is to draw a whiteish background color so all of this so far really really easy and nothing really happens here so far so let's actually make something happen and how i want to approach this is i want to create a class that i'm going to call button it's going to need an init method that needs self and a couple more arguments so let's go through them one by one the first one i just want to have a text so this is just going to be a string then i want to have a width and a height ideally spelled correctly that tends to help so those are the width and height of the button and then we have a position so the position is going to be an x and a y position so we can actually place the thing somewhere on the screen so what we would be passing in here later on would be a tuple with these two coordinates so um yeah you could organize this differently it doesn't really matter and this is the basic stuff we are going to need for now so now let's start to define some basic points in here first of all i want to create the top rectangle because this one is going to carry a ton of logic and i want to put this into its own attribute so self.top rect and then i use pygame dot rect to create a rectangle and in here we could approach the arguments in two different ways we have to specify x y width and height so this is usually how you specify it although if you check the documentation there's also another way that you could insert a tuple with the position and another tuple with the width and the height and this is what i am going to go for so this is going to be slightly different from what i usually do but not that much and well the reason for it is that this is much simpler because we already have a tuple with the position it is literally just this bit here that we are passing in there so very very simple now next up we have to specify the width and the height of this rectangle and this is also information that we have because all we need are these two bits here and we pass them in here so yeah also super simple stuff so all i have to add in here is the width and the height of this rectangle and height that's how you spell that cool so with that we do have a rectangle and there's one important thing i do want to emphasize here that when we are using this position we are placing the top left so if i draw this here's our rectangle that we just draw and the point we are placing is this point up here so just keep this in mind you could change it but i think this is generally the easiest way to place something although center would also not be a bad point but we are placing this point just keep that in mind all right so with that we have our top rectangle now next up i want to give this thing a color and for this i just declare another attribute i call this self top color and in here i am just going to use a string with a hexadecimal value which in my case is 475 f77 and i got this from an artist online but okay so with that we have our top rectangle next up i want to create some text so let's add another comment with text so we know what we're doing and in here we first have to create a surface with the text so i want self text let's call it surface and this one to render a text we first need our gui font so gui font then i want render and now in here we are going to need three bits of information first of all we need the actual text so this is the text that we have specified earlier in here so this bit now next up we have to specify if this is supposed to be antialiased or not which in my case i do want to do because we are not using pixel art and finally we have to specify a color and for that again i'm going to use a hexadecimal color so ff ff and ff and this is pure white so a pure white text for our text surface cool so now we have a surface and to place it i want to get another rectangle so i'm going to call this text rect and for that all we want to do is to get the surface the text surface and then use get rekt and in here we have to figure out where to place it and well let me illustrate this so we know that this top rectangle is going to be this kind of rectangle and when we have our text all we want to do is to place this thing right in the center of it and that's a bit of information that we can use very easily so all we have to do is to specify this center here when we place this rectangle and then get self top rectangle and then get the center from that so when we are getting this rectangle we are picking this rectangle at the top and just placing the center of one into the center of the other that's really all we have to do and with that we have a basic setup for button so now let's actually draw the thing and i called this draw it's going to be another method that needs self and in here i just want to draw the top rectangle and the text itself so let's start with the top rectangle so for that i need pygame.draw.rect and in here we first of all need our display surface so this is going to be screen which in turn is the display surface we have specified early on that's all that's happening here next up we have to create a color and we already have a color it is this top color up here so we have to pass this in there and next up we need the actual rectangle we want to draw which we also have it's this top rectangle so we want to pass this in here and for now this is all we need although i am going to add a little bit towards this in just a second now with that covered we have to display the text as well and for that we need screen dot blit because now we are placing a surface we are not drawing a rectangle so this is why these two lines are different and in here we are going to need a text surface and a text rectangle both bits of information we already have so i want self.text surface and i want self.text rect so with these two bits we basically have all we need to draw this basic thing so with all of that covered let's actually create an instance of this button so let's call this one button1 and this button is just going to inherit button itself and now in here we have to specify a couple of things first of all the text itself and for that i'm just going to go with click me but really any text is fine here now for the width i went with 200 and for the height i went with 40 and finally for the position i want to place this thing roughly in the middle so our entire surface is 500 by 500 pixels so let's go with 200 and 250 and with that we have created our basic button now all i want to do is to draw it by calling this method so in our game loop all i want to do is button one and draw it and now let's run this and we have clickme it doesn't do anything right now but this we can work on in just a bit but first of all i want to style this a tiny bit because right now it has very sharp corners but instead i want it to look more like this and have more rounded corners so something like this that was terrible drawing i apologize so let's actually work on that and fortunately our draw method can do this very easily all we really have to do here is to specify a named argument called border radius and this one is going to need an integer and for this one i want to go with 12. so now let's run this and here we have some more rounded corners now the slightly annoying thing is that you can see the pixels here quite a bit so i guess you would have to play around with the border radius to make this look nicer um but i guess for now it's fine and with that we have the basics covered to just display a button but well it doesn't do anything right now and that is going to be the next step we will work on that we make this button clickable and for that really all we have to check is the collision between our mouse position and our top rectangle and then once we have that we want to run some code and this is literally the basic logic that we have to run here now there's one complication that we do have to be aware of that if we were to just check the collision and the mouse button press then we would trigger this button multiple times even though the user would only click it once and this is something i'm going to demonstrate in just a second it's a minor problem and we can fix it quite easily but it is something to be aware of but let's jump back into our code and let's have a look at this so here i'm back in the button and i want to add another method that i called check click potentially not the greatest name but well it's fine and the first thing i want to get in here is the mouse position and i'm going to call this mouse pause and to get the mouse position all we need is pygame dot mouse dot get underscore pause and with that we would get the mouse position so print mouse pause and then in our drawing method i want to call check click and now if i run this and you look at the terminal you can see our mouse position so if i go to the top left it's going to be basically 0 and 0. if i go to the bottom right we get 500 and 500 okay close enough oh you will get 499 and 499 because we start at zero so what i first want to do is to check if this mouse position is overlapping with this top rectangle and all we need for that is if self.top rect is collide point with our mouse position so all that collide point does is that it takes a rectangle and it checks if this rectangle is colliding with a single point so this one has to be an x in the y position which fortunately we have and if that is the case for now let's just check if this works we want to print let's call it overlap and i am really bad at typing okay so now if my mouse is hovering over the button we get overlap so that's a pretty good start but now we don't just want to check an overlap we also want to check if the mouse button was pressed and this we can also check very easily and this would be done with pygame dot mouse dot get pressed and this one is going to return a tuple with three elements and each of these elements is one of your buttons of the mouse so the left mouse button the middle mouse button and the right mouse button and let me actually print this thing just to demonstrate what it does so now if i hover over the button you can see false thoughts and faults but if i click my mouse you can see one true if i click the other one you can see the other true and if i click my middle mouse button you can see the middle true and if i press all three you can see true true and true so this is something that we can use and in my case all i really want is to get the index zero so this would be the left mouse button and then all we want to do in here is to use this in an if statement so if my mouse is inside of this rectangle and if i'm pressing this button then i want to do something and in my case i just want to print click but in here in an actual project this obviously would be much more complicated depending on what you would like to do but here's actually a problem i talked about earlier and let me demonstrate so let's say you want to click this button and run code only once however if i click it we are running this six times and the problem here is that pygame runs this code 60 times a second so you think you might have pressed this down once really fast but for pygame your reactions are incredibly slow and what pygame perceives is that you have pressed on the button for six frames of the game so you would have run this code six times which obviously we don't really want to do so we have to add a little bit of logic here to only run this code if the button was released which i think is the easiest way and for that we have to specify another attribute and let me do this right at the top so in here i want to have a couple of let's call it core attributes and the first one is going to be self dot pressed and by default this one is going to be false and now in this code we are going to set this self.pressed to true because we indeed have pressed it so this right now wouldn't really do anything but what we can do now is if the player stops pressing the button so if this one doesn't evaluate to true anymore only then do we actually want to run the code so in here we want to print the click but this by itself wouldn't really work because we first have to check if self.pressed is actually true and only then do we want to run this and after it has run we want to set self.pressed back to false and now let's try this again so i have to code and now if i click it it only runs once and i can do this multiple times it works pretty well cool so let's go for the logic of what happens here and i think let's do this step by step so we start in step number one we get the mouse position this one i think is super easy to do so we don't really have to add it here next up we check in this step here if our mouse position so this bit here is colliding with the top rectangle so if we actually have our mouse on top of the button which also i think is a very straightforward thing next up we are checking if the player is pressing the mouse button and if that is the case we want to set self.pressed to true so that we know the button was pressed but it doesn't really matter how often it was pressed it is always going to be set to true but now we want to check if this condition is not true anymore and this one here is true so basically we want to check if the player has pressed the button but is not pressing it anymore so then this else statement is going to run and in here we are going to check if the player has pressed the button in the first place so if this condition here was triggered and only if that is the case we are actually going to print our code and then set press to false again so with this logic we ensure that our button is only going to be pressed once or in other words we are only going to run the code once the player releases the button so with that we have our basic button logic and well all that's really left to do is to add some visual elements to it to make it look a bit nicer so this is going to involve two parts number one if the player is hovering with the mouse over the button i want to change the color and number two is i want to add the bottom part of this button so that we can have a downward motion that simulates how a button press would work which i think looks quite nice and well let's actually jump right into the code i think doing this explains better than any kind of theory so here we're back in our code and let's start by adding the hover color that i think is the easier part and well all we really have to do is down in our check click we have to look for this part here that if the mouse is hovering over the button and if that is the case i just want to change the self.top color to something else and in my case i'm using a hexadecimal value again which in my case is d7 for b4b you're going to see in a second what this one is going to look like actually let's do it right now so now if i run this still looks the same but now if i hover over this it's going to be red now the problem is if i move outside of this button the color stays the same so to fix that all we have to do is if this condition is not true anymore i want to add another else statement so if our mouse has left the button and if that is the case i want to return myself.top color back to what it used to be so the color we have specified earlier here and well that is literally all we have to do so now let's try this again and now i have a hover color this one is very easy and everything else still works the same so this is quite nice so with that we are going to come to the slightly more complex part that i want to add the bottom part of the button so we are simulating the downward press and for that we are going to need a couple of different elements so first of all when we create this button i want to specify an elevation and this is going to be how high the button is so if i were to draw this let's say this is the top part of our button and this would be the sides of the button then the elevation is going to be how high this bit here is going to be this is a number you really don't want to make too large in my case i went with something like six if you make this number too large this is going to look very very strange so this is the first element we are going to need and when i create the core attributes i want to get myself elevation is going to be elevation but here's going to be the problem that when i press the button i want to set this elevation to zero and after i have released the button i want to set it back to what we have passed in here now the problem is if we were to set this value to zero we would lose the original value we have specified so to fix that i'm going to add a second let's call it dynamic elevation and this for now is just going to be elevation as well but essentially what's going to happen is that when we actually move the button we're only going to change this value and then once the player has released the button we are going to set this value back to this elevation and that way the elevation we specify earlier under the code is not going to be lost this should make a lot more sense in just a bit and now there's one more bit of information that we are going to need and here the problem is that i want to move this top rectangle slightly up in the code when the button is not being pressed so when it's elevated so i want to move this thing up by a couple of pixels but for that i really want to keep the original y position and just to make it easier to work with i'm going to specify this as its own attribute so let's call this original y position but really all that is going to be is pause and one so the y position we have inserted when we created the instance of this class and all right so with that we have all the basic parts that we are going to need to make this button look fancy now before i forget when i create the instance of this button i now also have to add the elevation and in my case i went with six and i would really recommend to not make it larger than that because that would start to look very very silly but okay so now we have all the basic elements we need although there's one more bit that we do require and let me put it right below the top rectangle because we actually want to draw the bottom part of the button so i've called this the bottom rectangle and then here all we need is self.bottom underscore rectangle or rect and this one again is going to be pygame.rect and for now i'm going to place this in the exact same position as the top rectangle but the position here doesn't actually matter all that much because we are going to change this in just a bit all i really want to do is to create this rectangle in the first place because we are going to use it in just a second but the actual dimension of position really doesn't matter all that much for the x and the y position i do want to have the width and for the height for now i just go with elevation but again this part really doesn't matter okay and next up i want to give this a color so i call this bottom color and in here once again we have one more hexadecimal color which in this case is 354 b5e and alrighty now we have finally finished the init part of this code so let me minimize it and then we don't have to worry about it anymore and now we actually come to the interesting part because when i want to draw all of this code i want to specify the elevation logic that's probably a good name and here's how this entire thing is going to work before we draw this button here we want to lift it up ever so slightly by whatever we specified in the elevation so well all we have to do in here is to get our self.top rectangle and get its y property so we move it up and down and i want to place this in the original y position so original y position but i don't just want to put it in that position i want to subtract the elevation so self dot dynamic elevation so minus this point here and that way we are moving the button up ever so slightly before we draw it now why have i done that well the idea here is that this dynamic elevation we can change by default it's going to be six or whatever you specify but if we were to press the button we could change this value to zero or to any other value to be honest so that we only elevate the button if we don't press the button but if we do press a button this value becomes zero so the button isn't elevated anymore and for now let us print this and well you can't really see anything but what you can see now is that the text is slightly further down and this happened because we moved up the button by itself by a couple of pixels so we do know this is working and everything else still works so let's actually implement the rest of the logic for the button itself and then we are going to fix the text all i want to do is when the button is being pressed so when we are in this bit here then i want to get self and set the dynamic elevation back to zero so now let's try this and now we can see that our button is going to be moved down ever so slightly the problem now is it stays down so once we release it it's not going to make a change and that we can also fix very easily when we go to this else statement and we move outside of the button i want to get self dot dynamic elevation is back to self dot elevation so this value is going to be six whatever we specified earlier and this value right now is zero and we're overwriting it so now let's try this and i click it and once i leave it the button goes back to where it used to be so this one is already working quite well cool now next up the text makes this whole thing look quite weird so i want to update the text position as well and for that all we need is self dot text rect get the center again and now move the center once again to the top rect dot center and this is pretty much the same logic that we have used in here where we just take the center of the text and move it to the center of the top rectangle so now when i do this we can see that we are getting the down click button and i did just realize that this line should rather be in this else statement that once we have stopped pressing the button down now it should be in here so now let's try this and yeah this feels much better so we don't want to elevate the button once we leave with the mouse we want to elevate it once we stop pressing the button sorry about that so alright this does make much more sense although actually here's one problem that if we were to press down this button and now with the mouse button still being pressed move outside of this the button would have a slight bug so i hope this makes sense so if you follow along try this yourself keep the button pressed and move outside now there's nothing that triggers this button being moved up again so as a matter of fact we have to add this line of code to both sides so that we're lifting up the button once the player stops pressing the button or if the player moves the mouse outside of the button so if we have both codes we can either press the button it comes up again or we can move the button outside and it also moves again so um i hope that makes sense sorry that was a little bit confusing but alright now we have finished that part and now all we have to do is to actually visualize the bottom right part and well this one is also actually not that difficult to do because all we have to do here is to get our self.bottom rectangle and now i want to specify its mid top so let me just draw this thing really quick so now here we have the button and we are moving this point and now the question is where do we want to move this point and in my case i want to move it to the exact position where our top rectangle has its top point so we are moving the bottom rectangle exactly below the top rectangle so right now both buttons are right on top of each other and to achieve that all we have to do is to get our self dot top rectangle and get mid top again so right now these two buttons would be right on top of each other however now we can change a tiny bit to make all of this work because now i want to get my bottom rectangle again and this time i want to change the height of this button and all we are doing in here is when we get the red button we are extending it ever so slightly downwards and that way we are making it look like the button has a bottom bit and that's really all that's happening here and since we're doing that the height we have specified up here really doesn't matter because we're overwriting it anyway but we did have to specify it here because we're changing the rectangle here so we didn't need to specify it earlier but the actual height doesn't matter so with that all i have to do in here is to get self.toprekt.height so right now we're just copying the top rectangle but what we want to do now is to get plus self dot dynamic elevation so effectively all we're doing is we are copying the top rectangle and adding a little bit of height at the bottom and now if this number is 6 we have a bottom part but if this number is 0 we don't have a bottom part it's as straightforward as that now if we were to run this we couldn't see it and the simple reason is that we are not drawing this button so let's do that again i need pygame.draw.rect i have to specify screen then i have to specify a color which fortunately i do have and then i need a rectangle which i also have it's self dot bottom rect and now finally i need to bought a radius and this one i also have and now let's try this now we have a bottom and this bottom is defined by this dynamic elevation so if i press the button and it goes to zero the bottom part disappears and if i unpress it it goes away so with that we have a button that actually works really well so i hope that was helpful and let me know if you have any questions
