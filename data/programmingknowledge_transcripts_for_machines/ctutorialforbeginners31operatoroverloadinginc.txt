hello guys in this video I'm going to teach you about operator overloading in C++ so we all know that C++ has some operators which we can use to perform some uh algorithmic task or you can perform some comparison task from these operator so for example we have some of these kind of operator which you can see here so we have this plus operator equal to operator minus or estx or this black back slash percentage and we also have these comparison operators in C++ and by these operator we can use this operator to for example we can use this plus operator to add two integer values or two double values or two float values right so we can use it like this we have two integer for example X and Y we can use this plus operator to add these X and Y and store it into this Zed uh variable and this is also equal to operator and an equal to operator we use it for assigning the value so these are the some of the inherent uh properties of these operators so C++ s def find that we can use plus to add two values or equal to to assign the values but for example we can we have some values or we have some object which we want to add for example so for example I have this class called vector and I want to add the two object of uh this class okay so I will Define two vectors like this Vector one which has object uh V one and second uh class object back two and I want to add these V one and v two and assign it in the third Vector called V 3 is it possible uh using C++ well when I compile it and when I see it it's it will give me an error because C++ doesn't know that there is a class called Vector so C++ libraries doesn't have these kind this class this class is user defined class right so it doesn't know if we use plus it has to add these two uh two object of the class okay so we can use a concept called operator overloading and Sim it's same as method overloading what is Method overloading we can Define two functions of same name and these two functions can perform two different tasks but but they can have the same name and this is called op uh function overloading in the same way we can use operator overloading to perform the same or perform two different tasks from from a same operator for example I want to add these two object I can do this whenever I uh can def I Define uh a operator which can be overloaded so let's see how we can do this so for example I want to add two Vector values which are the cartisan values and I will give you an example so for example I want to add these two cartisan values for example 4 comma 2 and 2 comma 2 I can do it in in mathematics done by like this so 4 + 2 which is 4 + 2 is equal to 6 6 right and this Y 2 + 2 here 2 + 2 is equal 4 so I want to add these two ctis value using a class and I want to use plus operator for that and I want the result like this can we do this let's see uh if we can do this by operator overloading we can certainly do that by oper operator overloading so let's see I have defined this class called Vector it has two public member variable which are integer X and Y and I have this default Constructor which uh doesn't take any values in it okay so what I'm going to do is I am going to Define one more Constructor so I will overload this Constructor so this is the default Constructor and I will overload this Constructor this is the same concept as function overloading right so we can use the same Constructor of same name to perform two different task and I can write int a comma int B so what it's doing it is initial I'm initializing this Vector Constructor by two values A and B and these two A and B the value of a and b i will assign to X and Y so X is equal to a and Y is equal to B okay so this is simply doing this okay and now how we can Define operator overloading so whenever you want to Define operator overloading what you need to do is first of all you need to make a prototype of this and operator uh overloading returns when you define operator overloading it Returns the same class as uh your class so we are in vector class so we it will return operator Vector right and then we specify that we want to do Operator overloading by the keyword called operator and then just after this operator keyword we need to give the operator from for which you want to operate uh overload this so for example we want to overload plus operator okay and we want to add these two ctis in values with this plus operator so I will use plus you can use some other operators like minus here or this percentage here or any other operator which you can see here or any other operator which uh exist in C++ you can use all these operator instead of this plus which I'm using in this case Okay and then I will pass uh argument here which will be the class okay so I will write con and the class class object so I will just copy the name of the class and I will use this address of the class okay so this is the Prototype of operator so we want to overload plus right now in order to define or uh write the source for this operator what we can do we can just we also need okay we can just uh copy this uh prototype from here and just outside your class we can Define this here right so I will just copy this and paste it here and I will write definition of this function or operator okay and because I have already told you in the last video we need to give the scope for this operator right right so we need to give this class of the operator in which class exist and then these two double colon which are scope resolution operators right so now you know that this by seeing this Vector colon colon you know that this operator is a part of this class which is a vector class okay now we can write the definition of uh in this uh Vector function so I will copy the same class here and I will name it as uh temp so I created a temp object of this class and what I want to do I want to do the addition of the two vectors using this so I will use temp do X this one which is a member variable of the class is equal to is equal to X+ temp or param which I have to pass here p a m parameter okay so which whatever parameter we will pass which will be uh object or an object of this Vector we can use it like this dot X okay so what this is doing this is also an object of class vector and this is also an object of class Vector right and whatever we pass here we want to add it to our temporary object which is this one okay similarly I want to do the same for the Y variable y member variable so I will do y y and Y because we have two coordinates right and what I want to do next because this is expecting the uh Vector object return I will return this temp like this so return temp like this okay so what what this code will do it will just add the parameter which you pass here to the temp and it will return okay and this operator will over I mean addition operator will be overloaded by this one okay now how to use this in the class so in the same way I can Define two object of a vector class so V one and I'm going to use this Constructor which takes two integer values okay so I will pass two integer values I'll pass first coordinate here so 4 comma 2 here okay 4 comma 2 so I'll pass 4 comma 2 and I I will make second vector and I will pass my second value here so Vector 2 and my second value is 2 comma 2 for example right and I can add these two values in a third Vector so I will say vector result and I can add these two vectors like this result is equal to vac 1 plus W two okay and this will now not give you an error because we are we already told uh the our C++ libraries that there exist a plus operator which is able to add two classes or two object of the class Vector okay now we can U display the result for example like this see out and how we want to display the result let's see see out and we can say in the quotes the result is and in the bracket we want to give first of all the X so I will say result dot X okay and then I want to give the comma so I will give this once again and double quotes I we'll say comma and then the value of y okay so result dot y okay so now result dox and result doy will contain the addition of these two 6 comma 4 in our case Okay and then once again I will use this bracket to close it and I will use end L to end the line and first of all we forgot this okay so now this will show the result like this let's uh try to compile and check whether it it's okay or not so this is showing the error let's see what's the error is okay so this spelling of const is wrong it should be like this I will explain you what this const mean what is the um I mean purpose of using this const but for now just uh take it as it is okay I will recompile my program once again and yeah same spelling once again okay so our program runs successfully or compil successfully and let's try to run this and you see the result is 6a 4 so we have successfully added two Vector object using this plus operator in C++ okay so in the same way you can subtract or you can use all the operators which you have in C++ to overload you can overload equal to or double equal to or estx or whatever we have in C++ we can overload okay so I hope you have understood the basic concept of operator overloading and I hope you have enjoyed this video please RIT comment and subscribe and by for now