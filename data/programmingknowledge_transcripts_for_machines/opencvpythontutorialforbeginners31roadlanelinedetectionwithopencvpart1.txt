hey guys welcome to the next video on open CV tutorial for beginners using Python in the last videos we have learned some important concepts in open CV now in this video and the next few coming videos I'm going to create a simple project which uses most of these concepts which we have learned in the previous videos so what we are going to do is we are going to create a very simple lean detection system so first of all we will start with a still image you can see there is an image which contains this road and this road contains lanes so what we want to achieve is we want to detect these lanes on which our vehicle is traveling so first of all we will do this with this image and gradually we will move towards the video frames so first of all we will see how to detect these lanes in this image and then we will see how to detect these lanes in the moving video so let's get started so I have created this new project in my pycharm IDE you can use any other editor of your choice and first of all obviously you just need to install OpenCV python package and matplotlib package once you have done that I will create a new file here so I'm going to just right click here and create a new file and I'm going to name this file as detector dot py file so here we are going to import a few packages for example matplotlib so matplotlib dot PI plot as PLT so let's say as PLT also we are going to import the CV to package and we are going to import numpy so an import numpy and be in the next section what we are going to do is we are going to simply load an image so I'm going to create an image variable so image is equal to CB 2 dot I am Reed and we are going to read our image which is the road image so Road dot jpg now in the next line we are going to convert this image into the RGB format because we are going to load this image using matplotlib so I'm going to just write once again image so I'm going to overwrite this image variable with the converted image so CB 2 dot CVT color and the source is our image so this is the variable and then CB 2 dot color from BG are to RGB right so this is what we want to use now in the next line what we want to do is we want to load our image using PLT dot I am show method and at last we are going to just say PLT dot show so this is how we are going to just load our image so I'm going to right click on this file and then run this script and you can see this road dot jpg image is loaded now on this plot you also see these values and one things to observe here is horizontally these values goes from 0 to 1200 something and vertically normally in the graphs you will see that values increases from the bottom to top but in matplotlib this value goes from top to bottom right so 0 is at the top and then the maximum value will be at the bottom so this is a one thing to note because we are going to define our region of interest and that will be based upon these values now in the next step we want to define our region of interest so once again let me just run this code once again and one thing to notice here is this Lane in which our vehicle is traveling is parallel so there are two parallel lines and eventually they are going to merge here right so all the lanes on which the vehicle travels have the same pattern so this Lane and this line are parallel to each other and they're going to merge at some point so it's not merging but it seems to be merging at some point so we can define our region of interest from this point to this point and from this point to this point so this region of interest will be the triangle so this region of interest we are going to define for our vehicle will mask any other obstruction for example this is also one lane line for us it's not important because this is the other side of the lane so here the vehicle will come in the opposite direction so this is our region of interest so it will mask out this lane line or any other lines or distortions which we have in this picture we are going to just mask them and we are going to just concentrate on this triangle so let's do this first so first of all we are going to find out the shape of the image so I'm going to just print and then we are going to just say image dot shape and also we are going to just define the height and width of the image so I'm going to just say okay so let's print this value and let's see what happens so what's at zero and what's at one so you can see it print 704 as our height and one two seven nine as the width so this is what I'm just taking from this image shape method so it's going to return this kind of tupple so at 0th index there will be height and at the first index there will be the width and as I said it starts from zero to 704 from top to bottom and horizontally it goes from zero to 1279 from the left hand side to the right hand side right so once we have the width and height we can define our region of interest so we are going to define our variable called region of interest vertices and here we are going to provide some values so we are going to provide three points which will be the three points of our region of interest so as I said that our region of interest we want is this point which is the left bottom corner this point which is the right bottom corner and somewhere in the middle of this image so here so in the image because the vertical height starts from zero so I'm going to just say 0 comma height and the second point will be the half of the width and half of the height which will be the center of the image so I'm going to just save it divided by 2 comma height divided by 2 and this will be inside these parentheses and the third point will be the next corner so this will be width and then the height so let us try to see these point in our matplotlib window so the first point here is 0 comma 704 which is this point the second point is somewhere here which is the half of the height and half of the width and the third point will be here which is width comma height which is 700 comma 1 to 79 which is this one right so this will be our region of interest now we are going to define one function to mask every other thing other than our region of interest so I will just define this function deff region of interest and this is going to take two parameter first will be the image and second will be the vertices so vertices and inside this function let me just minimize this terminal also so you can see the function so inside this function in the first step we are going to define a blank matrix that matches the image height and the width so this will be the easy step we are going to define a variable called a mask and we are going to use n P dot zeroes like method which is going to take one parameter which will be our image matrix now in the next step we are going to just retrieve the number of color channels from the image this will be the easy step also so channel count and then we are going to just say image dot shape and at the second index we are going to find out the channels because we have seen that image dot shape is going to give you three values height width and the channel count so this channel count is coming from this index now in the next step what we are going to do is we are going to create a match color with the same color channel counts so I'm going to just say match underscore mass underscore color this will be our variable and then we are going to just take 255 comma and then multiply it by the channel count so let's multiply it by the channel count so this is going to create a match color with the same color channel counts now in the next step we are going to fill inside the polygon using the fill poly method because we have our region of interest and we want to mask every other thing other than our region of interest so we are going to just say CB 2 dot fill poly which is going to take few arguments first will be our mask second will be the vertices which we are providing using the second argument and the third argument will be our match mask color variables so we are going to pass this variable as the third argument and in the next step we are going to just return the image only wear the mask pixel matches so I'm going to just say masked underscore image is equal to CB 2 dot bitwise and so we are going to just apply bitwise and using this bitwise and method and the first argument here will be the image and the second argument is the mask which we got using this zeroes like method right and in the last step we are going to just return this so I'm going to just write return this masked image and that's it so we are going to just apply our region of interest on the image using this method and then we are going to just get our image which contains region of interest and any other thing will be masked so now it's time to use this method so we are going to just use this method using this variable I'm going to just define a variable called let's say crop the image or masked image whatever you want to write here so let's say crop the underscore image and then we are going to just use this function which is region of interest function which takes this argument so because we have already read our image in the image variable we are going to pass this as the first argument and the vertices is simply our region of interest variables so this region of interest variable we are going to pass using numpy dot array method and let's split this line so we will be able to see what I'm doing inside this NP dot area method so first of all the first argument will be our region of interest variable which is this one region of interest vertices so in the square bracket we are going to just pass region of interest vertices and the second argument here will be and P dot in 32 so NP dot in 32 and now we are going to just show this image using our mat plot live window so let's run this code and let's see what happens when it runs and there is a problem here so let's see what the problem is so you can see this problem is coming from this line and most probably this region of interest has some problem so you can see we have passed this first element as the tupple second element as the tupple and the third element also we need to pass as a couple and that's why it's giving us the problem so I have just fixed it and let's see what happens when we run this code again and you can see our image is now masked with our region of interest so we have defined our region of interest from this point to this point to this point so now we have only this region of interest so we will be able to easily find out this lane line and this lane line inside our region of interest and any other distraction will be masked now right so this is the first step which we have achieved which is masking our image and just applying our region of interest on the image in the next step we are going to see how we can apply the edge detection and find out the lane lines on the image so this we are going to see in the next video so I will see you in the next video