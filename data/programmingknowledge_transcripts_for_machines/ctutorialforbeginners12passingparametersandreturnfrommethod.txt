hello guys welcome once again in the last video I've shown you how to declare a method in C and how to use this method in C now in this video I'm going to show you how you can pass parameters in the methods and how to return values using methods so if you have followed last video I have shown you how to declare this method which was returning nothing so we have the return type void and it has no parameters and parameters goes inside these two brackets okay so now suppose a user want to enter the values and on the basis of those two values he want to get the addition okay so let's make this uh program a little more interactive what I'm going to do is I'm going to pass two parameters in this sum so I will pass two integer which is no1 and int N2 so these this is called parameter passing okay or this these are called parameters in the method so we have we have declared two parameters in this method method definition okay now in addition we want that this sum will give us the addition and it will not print this here but it will return something to us and which is the addition so I will just delete this line because we have already declared these two parameters here and what we want to do is we want to return this addition okay and as soon as we return something we need to give this return type here okay so this is called return type if you are returning something in our case we are returning integer that's why I have written here integer and these are called parameters and we are using two parameters right now but you can you you can pass multiple parameter 3 four or any number of parameters in a function okay this is return and these are parameter okay now for example I want that user should enter these two number and then addition is shown to him so what I will do here is I will declare two integers and num one 1 is equal to 0 comma num 2 is equal to 0 okay and I want that users should pass them so I will just write this these two lines and I think you know this that this console Runner console. write will print this enter a first number and then this console. read line takes the input and then this this convert 2 in32 will convert this uh line to an integer and pass it to this integer this all I have shown you in the previous video so there's nothing complicated here right I'm just asking the user that he should enter two numbers and now what I want to do is I want that these two numbers are passed to the sum function because this some function can take two parameters so we I will pass these two integers number one comma number two so I have passed two integers right and I want to show the sum to the user so I will just copy this line which I was earlier using inside the function and I will paste it here okay so what you can do is you can either use this function directly here and this will show the result or you can just say in add is equal to this E1 which is a instance of uh class example one which is my class here if you can see here right and because it is returning the sum of these two numbers we can store this sum inside this integer right because if what it will do it will take these two numbers it will add this numbers and it will return this addition to this and this addition can be stored inside this other integer and we can print this now I will run the program once again and now we can just give two numbers 234 second number 500 and we have the sum of these two numbers right and now this program has become little bit interactive that user can enter these two values and whatever the values user has entered the result is shown accordingly okay and then you can use the sum method multi multiple times in your in your main method whenever you need this sum okay so this is how you pass parameters and how to how you can return value in cop so this parameter passing is called pass by value now in the next video I will show you how to pass by value and how to pass by reference in C sh and I will also show you if you want to Output or if you want to return more than one value how can you return multiple values in C in a function okay so stay tuned and please RIT comment and subscribe and bye for now