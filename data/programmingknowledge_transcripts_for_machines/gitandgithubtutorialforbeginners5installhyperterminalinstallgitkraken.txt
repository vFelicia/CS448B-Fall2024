hello everyone this is varsha and welcome to programming knowledge so in today's tutorial we will understand about the architecture of kit also we're going to install the hyper terminal i'm going to explain you how to install the hyper terminal also we're going to know about the git cracking what is it and how is it used i will explain you that also so let's get started okay so before we start the architecture of kit in the previous tutorial we learned how to actually commit a file how to push a particular file into our repository github repository so just like have a quick demo of it so what i'm going to do is right now let's create a file in f drive okay so i'm creating a new folder over here and i will name it as test okay and we are using the git bash so i'm going to right click over here and here there comes an option of kit bash here i click on click get bash so this is our account our github account so first we will create a repository over here so i'm creating a new repository i will name it as repo and click on create repository i have explained in detail how to create a repository in the previous tutorial i'm just giving a quick recap of what we learned so this is the git bash command that we have over here the terminal we have so here first we'll create a folder so to create a folder we will write touch and file one dot txt and our folder is created over here this is the folder that is created now once the folder is created let's see the status of it so let's write git status i have explained in detail about all these commands in the previous tutorial if you want i will give the link of the previous tutorial in the description box you can have a look at it now the git status says that it is not a git repository so if you want to push any file to the git repository you need to first turn the folder to the git repository so for that first we're going to write git init and it says that initialize empty git repository in the folder so now here you see we have a dot git folder and if you can't see you can go on view and here you can tick on the hidden items once you tick you can see that there is dot git folder over here which means that this folder this test shepard folder is now a git repository okay so once you have written git in it now let's say let's see the status again so i'm going to write git status and here it says on branch masters here there are two files that is the untrack files and the tracked files that is there i explained in detail about it in the previous tutorial so it's better that you go and watch the tutorial that so now this is the untracked files that we have we need to track it so how do we track it for that there is a command which says git add and i'm going to write a dot which means all the files that is present in this folder that is the test repo folder will be tracked but if i want to track a particular file so i'll just write file1.txt and press enter and there you see let's write git status and there you can see that it is turned in green now and it says no commit cs changes to be committed now this is a tracked file now and this was the untracked file that is the file1.txt which was in red color and now it's in green color okay so now this file has been dragged after it's dragged let's commit this file so i'm writing git and commit git commit and dash m and here i'm going to write first comment so here it says that the file has been committed it says one file change zero insertions due to zero deletions okay now we have committed this file with the message i have written the message over your first comment after commit we are going to write git remote and after remote we're going to write add origin and here we're going to place the http this is the https link that we have right this url needs to be placed over here so i'll place this and press enter so now we can push our file for that we can write get push and dash u origin master and there you see our file has been pushed so let's check this out now and there you see we have file1.txt okay so this is the entire process which we learnt in the previous tutorial this is what we learned now let's understand about the architecture of the git now this is the entire architecture of git you can say this that this is the entire life cycle of a file that is present in the folder the git folder that we created in the f drive right the folder uh test repo and there was a file one dot txt that was present right now and we were writing git dot git add and we were committing it we were pushing it right so this is the entire life cycle of a file but also this is the git architecture that we have okay so now we have the working directory first then we have the staging area or the cache area then we have the local repository or the committed area and then we have the remote repository so our main target is to move our files from the local repository to the remote repository okay this is the main target that we have the remote repository is the github repository that we have this is the github repository this is the github repository right this is the repo repository that we have so our main target is that we need to move our files to this repository over here the life cycle goes this way that we have first the working directory we have the staging area we have the local repository or the committed area and then the remote repository so when our file that is the file1.txt is in the working directory we are working on it okay so what was the first command that we wrote do you remember the first command was the touch file dot txt that is we created a file after that we wrote git status in which it said that it is not a git repository the folder is not a git repository after that we saw that once the folder is not a git repository we don't get in it and after writing git init it showed that the folder is now a git repository after knowing that it is a gateway positive we wrote git add do you remember we wrote git add that is we were adding the files to the staging area from the working diary to the staging areas before the file was untracked but by writing git add the files became dragged and it came to staging area or the cache area so once it is staged in the staging area after that we committed it to the local repository or the committed area for that we have written git commit uh dash m and there was a message that is the first commit message that we had written away after it goes to the committed area we need to move it to the remote data so moving into the remote area we say that we need to push a file to the remote repository for that we write git push dash u origin master okay so this is the entire process similarly if you want to pull what we'll do is we go to the remote repository we write a pull command and our uh and our file is pulled to the local repository okay so this is the entire working area or the working life cycle of a file first it is in the working directory then it goes to the staging area after going to the staging area it goes to the local repository or the committed area and then it goes to the remote repository so this is the entire architecture of kit now since we are done with the architecture of kit let's install the hyper terminal now you must be thinking what is hyper terminal like for example when we code a program for python we use a python right so when we code a program for java we use eclipse or intellij idid so these are different different ids right similarly for our terminals we have the cmd that is the basic terminal we have git bash we have a hyper terminal also there are very many difference between the git bash and the hyper terminal okay and hyper terminal is mostly used by many of the developers also nowadays because a hyper terminal comes up with a lot of customization like you can have plugins you can have so many things it is highly customizable regarding the format the font size the font color also that has a lots of themes like uh in visual studio right you have a lot of theme like it should be dark light so you have so many themes and hyper terminal also compared to the git bash the hyper terminal is quite fast okay so i would recommend you to use the hyper terminal but if you are comfortable with the git bash terminal then go for it the commands won't change like similarly you write a program it is system.out.println in intellij idea or an eclipse is the same right similarly the commands won't change but the terminal that i'm using is the hyper terminal for the entire tutorial and if you want you can use the git batch there are no issues so let's move to the installation part so if you're installing hyper i will give the link in the description below so you can have a look at it if you click on that link you will be navigated to this page now if you're having mac os click on this if you have windows click on this so i'm having windows so i will be clicking on this version so now here you can see that the hyper setup that is exe file is being downloaded over here so i will now click over here okay so this is the hyper terminal that you have over here it is similar to the git bash but it has a lot of features as compared to git bash so i would recommend to download the hyper terminal but if you're really comfortable with the git bash you can go with it so this is the hyper terminal that you have now there's one thing that you need to do so now if you're a mac os user you don't really need to do this but if you're using windows you need to change the log file that is the config file over here so for that you need to go to edit go on preferences and over here just ctrl a and delete the entire thing now i will be giving this link of a github account you need to copy this uh entire log file that you have over here and you need to paste it over there this is for the windows users only i will copy this and paste it over here and ctrl s i'll close this now and i will close this as well now okay so here you can see we have installed the hyper terminal so this is the uh folder that we created the test shipper folder if i right click here i can see that open hyper here so i'll click on open hyper here so now if i uh write touch file file to dot tx and then if i write git status here it sees on branch master your branch is up to date but there is an untracked file over here so now if you write git add and a dot so all the files are tracked if i write get status again and that says that changes to be committed now get now if you want to commit it you can write git commit and dash m and after that your commit message that is the first commit or something whatever you want to write you can write over here after committing we can add our remote origin and after writing our remote origin we have to push the file so this is the entire process you can use the entire process by in the hyper terminal as well if you're using the git bash it's the same process if you're using the hyper terminal it's the same process so once you have downloaded the hyper terminal now if you did not download the git you need to download the git also so this is the link of the git i have downloaded already before uh you must have seen the downloading the installation tutorial before that i had given in that tutorial i had already downloaded git so if you have not you can download it we have the mac os we have the line linux and we have windows also so this is the link of it i will give the link of this in the description box as well okay so this is all for the installation part for the hyper terminal and now coming to the uh now coming to the next software that is the git cracking now see here i have a very nice kit gui tool now you must be thinking what is this kit kraken why is it used uh how is it used and stuff let me tell you that the reason why we are like we are using the get kraken is that there is so much in it like it really speeds up the workflow in addition also there are a lot of boards it actually gives a visualization of git that we're using in git there are a lot of concepts like branching and log and stuff and merging your files and push and pull and also when you're working in a community when you're a software developer in a company you work with a lot of people so who is pushing the code who is pulling the code who is uh you know uh who is editing the code who is doing what at what time you get to know everything visually like here you can see this is the dashboard that you can see right so these are the dashboard which shows the visualization of the entire there is a local remote pull request there are 93 pull requests that were done also there is local remote and issues or issues that were raised also now if you have like a github account you have a git lab account you are using the jira software you're using the trello you're using jira cloud also there are so many things you need to integrate all these right so you can integrate all these things also in the software now see uh let me open it i have downloaded already i really like the gui of this software so i would recommend you if you're working as a software professional in a company you can use this okay so this is the entire gui that you can see over here now if you have hosted repositories like the github or the the github the git lab or the big bucket or any of thing that you're using you can use it away or you can open a repository you can clone a repository you can start a local repository and also there are a lot of tutorials regarding this on youtube so you can use this tutorial you can you can use the software efficiently while you're working in a company so let me show you the dashboard of this like i already have a screenshot of some dashboards like here you can see there is an entire dashboard visualization of everything like who is merging the code who is using the code who is actually fixing the bugs and stuff so you can have this entire visualization by using this kit kraken software also there are a lot of things like what are the changes needed what are in progress what are the pull requests made the completed things that we have done who has completed and what has complete uh what projects has been completed also there is a lot of documentation updated list you can see there are so many people added over here so these are the kitkat and bows that you can use while using this software so there's a lot of advantage of using the software and that's the reason why i actually introduced this software now um this is all for this tutorial and in the next tutorial we're going to learn something different so stay tuned and please like share and subscribe this video and also ring the bell icon so that you don't miss out any of the updates thank you