hey guys they come for programming knowledge in this video we'll be looking at classes in C++ but before that let's first discuss a small concept which I'd missed in the previous video that is how to use pointers when using such collective datatypes here if you see we have the student structure which were defined in our previous video I have just added one single function to print the details of storage and here I have created a student with the name Tony age 10 and then the maths of distance now if you want to create a pointer it's just similar to the way you do for a primitive data type you just put star bit here and then you put a TR equal to the address of the student now if you want to access a particular feature because in primitive data types we did not have features right we just hide data so if we did start PTR this was enough but in case of the object we have so many features we have two functions and then we have three variables how do we access these things separately well star won't work here and we have a special operator known as the arrow operator well what discuss this basically allows us to access separate features of an object and the way you define oh I drop return is by using a minus sign and this greater than symbol together so if you combine them that looks like an arrow so that's from where the name comes well if you want to use it you just say Peter that is the name of the pointer the arrow symbol and then the feature you want access so let's say I want access a name so if I just put name and then execute this I will be getting a name over here so age also works the same way if I just put age and then try to execute this I will be getting the age and if I want some function let's say the average function I can just do that from here so if I put average and then call that function I'll be getting the average over here so that's how you use pointers the only difference is that instead of star you are now you're going to use this arrow symbol and this is a very important concept as we will see in a minute this be using a lot when using classes so now let's dive into classes well the way you work with classes and structures remain the same so if you want to change this definition to a class definition you just remove the structure Cree word and then put class over here so this now becomes a class well the dot operator and then the way you work with pointers this ad or symbol all these things remain the same so you don't have to do anything so now let's do something like still then dot print details now if we try to execute this particular function we will be getting an error so let's see what that is it says that this particular name is private well if at all there is any difference between a class and structure that is this thing a structure is public in nature and then class is private well it's not a big deal we can change public to private and private to public we will just talk about that in a minute but what is public and private well in objectoriented programming when you are creating objects or when you are creating such collective data types we don't want everything to be accessed by the outside agent or the user let's say so if you are creating a student data structure and the purpose of this particular data structure or this particular object this just to store the details and then show the details then you don't want the user to manipulate the details right so if I do the axis of this marks to the particular user he can manipulate the values inside head same with the name and age also so if you don't want some of your features to be public in nature that is you don't want some of the features to be accessible by the user you can put them in the private section so how do we put that you just need to put private over here and put a colon over here so in a class everything by default as in this particular definition so if you want to make a structure into a class you just need to remove this class and put structure over here now this particular entity is just like a class you will be getting the same error when you executed a class and if you want to create a class into a structure if you want to change a class infrastructure what you just need to do this you need to change everything to public now if you change it you will be getting the output just like we got in case of a structure so that's very cool there is no difference between a class and structure although we don't use such access specifiers these are called access cache files because they are specifying the access of this features right so we don't use them in structures but just by convention you can use them there's no restriction on that but we generally don't use we just use them with glasses so can you have multiple access specifier inside a class well you can so these just define different features to be either public private so there's one more thing called protected which we won't be seeing in this particular video because we better understand it when discussing about inheritance but for now we'll just discuss about public and private so as I told you these things become private and I want only the ring details function to be public so I'll put public over here so whatever is below private becomes private and whatever is below public becomes public in nature now I can access print details without any issues but I cannot access all these things then how can I actually create an object with these features that is a one the objects name to be torn eh to be ten and marks to be distance how do you do that if I don't have the access of this per variable itself well for that you can define another function in the public section you can say something like while said detail something like that these are more specifically called setters these are called setters but satyrs are used only for a single variable so if you want to assign variables at a time when creating the object itself you generally use something called constructor well constructor is basically a special function which is used to create the memory when you are creating an object of this type so let's say you're creating an object of this class student you need memory to all these three variables so constructor takes care of that particular memory requirement and you don't have to explicitly define a constructor although you can and many people use constructor to assign variables when you are declaring them so in our case we are declaring these variables right which I private in nature so in case you want to declare them by with creating you can either use a setter function or many people just use constructors for that so the way you define constructor is it doesn't have a return type so you just need to omit the return type in you should not give me a return type and then the name should be the same name as a stool so over here you have student as our class name so that should be there and then you will just define it just like a normal function and here you can pass in parameters and all you have different names for that so if you have a normal constructed definition like this this is called a general constructor and then if you have parameters inside that let's say string name and then int age so this is called a parameter s console there are different names I encourage you to look that up but for now we will use this particular parameter s constructor and here we will pass in another variable the marks variable and now there is an issue if you see the objects attribute or the objects which are called name is clashing with this particular name well you can change it so that you don't have an issue like this but as I told you when discussing the pointer just know that that's going to play a very important role in classes and that says where this comes into play this is basically pointed it is called this pointer only so if we just put this you can see that it is bold it indicates that it's a property of the compiler it's a reserved keyword this is basically a pointer which will point to the current object itself so let's say I have 10 students and then I am working on the 7th string so if I use this pointer then I will be accessing the 7 student details not any other student details so just basically points to the current object which is getting used and then we use it just like we did in case over on pointer so this and then this particular are cymbal which is called the higher operator and then the variable names are name equal to name you could change this age equal to age and this marks equal to Marx well if you don't want to use this particular definition you can always rename this and this won't be a issue but just to explain the importance of this particular pointer and this IRA operator I just took this particular example but you're free to use whatever way is convenient for you many people tend to use this particular definition and here when we are creating you just need to pass in when creating itself so here if you put parentheses and then pass in your variables so name equal to Toni and that the age is something 10 and then the marks will you need to create another variable for mark so max and we'll push back all these things inside this particular new variable you don't need s over here because this is an independent variable now we just created a new variable in our memory and here you just need to pass in Max and now if you just remove all these things this should work as expected so if we now run this you will be getting the output just like we got in a case of structures and now you have successfully implemented an objectoriented design so something is private something is public you are not giving access to everything and all these are basically features of objectoriented programming so now let us see another very important function which is a special function called the destructor well this is not used much but since it's the part of objectoriented programming we'll discuss it quickly it's basically the same thing as a constructor it is defined by the compiler itself it's a default thing a destructor what it does is it will scrape out the object from the memory so if you are running out of scope so let's say we had defined this object inside an if block so once the block has been executed that variable is out of the scope rate so once anything gets out of the scope it's going to be scraped out of the memory so that's when a destructor is called so you want the destructor to do something else you can just do that by putting this tight symbol and that you define the destructor with the same name as a class and again you don't put any return type for the destructor and it does not even take any parameter so you cannot pass any parameters to destructor you cannot call the destructor from anywhere you can just see what it does so if you just call this destructor let's say I'm being scraped something like that you will be seeing this when the object gets out of the scope so we will just put something over here if some condition 10 equal to 10 this is going to be true so all these things will be executed over here we'll put something like then we put a new line also for differentiate so if you now execute this you will see all this details and then it says I'm being scrapped and then done that is because one staff block has been executed that particular object has been removed out of the scope that then it should be ready to be removed out of the memory too so we just remove that thing from the memory that's why this message is printed and then you have this done which is outside the if block which indicates that this has been scraped before coming over to the statement so that's the use of destructor if you want to see when the object is getting removed from the memory you can use destructor we will again talk about this when we are discussing about inheritance but constructor is mostly used to actually pass in parameters when we are declaring a particular object something like this so now how do most people use classes in C++ well mostly people don't use classes in the way we used over here we wrote the class definition and the main function everything in a single file right so people generally don't tend to do that people generally use multiple files in that program so you have one particular file only executing a main program and then you have multiple objects so you don't put all the objects in a single file you create multiple files for holding the objects and then if you have want to use this particular class let's say the student class you just included just like this particular vector so what you do include and then you put the student over here student dot H that's an extension we'll be seeing how to create this and here instead of angular braces you need to put this coach so this indicates that this is something from this particular directory and not from the compiler so these things are available in the compiler that's why we are putting this angular braces and here you are putting this to indicate that this is from this particular directory or this particular project so you have two files when declaring such classes so what to do is you have one header file where you declare the skeleton of the class and then you have one CPP file which is just like this one which will hold the definition of this class so how do you substrate that so let's say I want a particular function to be defined in a separate file so let's just say this particular function called to be defined in a different file so how do you do that we just need to put a semicolon over here so this is just like a function prototype which we had discussed and let's assume that this is another file so this class is in some other file you just did something like hash includes student dot H and then if you want to define this particular function the way you do that is you just define this function normally I say this is just a normal function it it doesn't have anything to do with this class you just defined it so let's say I'm called and something like that you just define it like this and then over here to define that this particular function is specifically designed to this particular class or this function should be available only to this particular class what you do is you just put in this classname and then you put two colons over here so this will indicate that this particular function is to be used only with this class that is the student class now you cannot use called directly you need to call it using the student class so if you want to use that so you can say something like s dot called and it will work normally so that's okay we don't have the student with heads right now so we don't need these things also so if you run this okay this type over here okay so here you can see I am called that s from this particular function which we just defined that this called function over here and here this is the message from the destructor that is I'm being script so that's how we actually use classes but this particular ID which is the code blocks ID provides an easier way to create classes you don't have to define all these things that is you don't have to create two files and then put them it will neatly organize everything and give it to you so how do you use that where you go to file you go to new and then you create a class over here so you have class name so you just give some name that's a student and then here are in place of arguments you just leave it so it has a destructor virtual destructor all these things you don't have to understand all these things right now you can just ignore them but will understand what all these things are in later videos and now if you just click on create you can see that the new class has been created do you want to add it to the current project if you just say yes and then just okay over here and then you will see that in headers you will have an include folder inside which you will have student dot H so here if you see it just has the definition just increase the font size here you can see just has a definition you don't need this this is basically the virtual district and we'll talk about that later and here you have a constructor and you have protected and private you don't need protected also as I told you we'll be discussing about that when we are discussing inheritance and you have some special commands over here so what this roughly means is that once a particular class has been included in the memory and if it's again trying to include it you don't do that because we are using two files so let's say I'm using function from this particular file so when I don't want this particular function to again include it so here you can see hash includes student dot H so when I am doing it multiple times I don't want this particular class to be loaded into my memory multiple times so this particular guard block but as it's called this is called a guard lock God lock what this will do is it will take care of this particular issue it won't allow this class to be included in the memory multiple times and here you just declare the skeleton so here if you see if you want to create this particular class again we'll just create a small version of that so it will just have an age let's say in age and in public you will have a setter function we will just say set H or you and directly use it inside over here so in age you can just say and private I prefer private to be in a beginning but it's up to you the order doesn't matter I just put private in the beginning and then public at the end protected in the middle so that's how I use classes but it doesn't matter you can use it the way you prefer and now you just need to define this constructor in the student or CPP file we don't need this virtual construct I just deleted that and here you just define it normally so age is something private but you can access private variables inside a class so you can say something like this H equal to H and here if you want to use this class let us just remove this class because I already do so remove this and if you want to include that student class you just say hash include' and then student dot hitch and now all these things work fine well we don't have everything over here so we need to redefine it so let's quickly do that student s ten and if you execute this what do we have here it says yeah because we forgot to put the parameter over here it is in H and C we did not get any error so that's how we generally use classes if you want to create another class go here new and in class and you can create another class so people generally tend to use classes like this you have neatly structured thing over here so you have a main dot CPP over here and here the student or CPP goes inside the source file so that you don't get confused so everything the header files which I talked about the student dot H or anything class header files are basically class name dot H and all these things go inside this intro folder and the definition file which is basically class name dot CPP all those things go inside the source folder and main file will be outside and you can use that main file to execute the prover everything starts from the main file generally named that has made dot CPP where the execution starts and we include all our objects like this using this particular syntax that is you pass in the class name dot H file using this particular quotes and the guide block which we just talked the word this one this basically takes care of multiple allocations of memory of this particular class so that's all about classes in the next video we'll make another one of our projects through our previous project was the tictactoe game well will again make another game in the next video because I think games are fun to make and then we can learn a lot from them so in the next video we'll make another game by using all these concepts of objectoriented being billed and happy coding