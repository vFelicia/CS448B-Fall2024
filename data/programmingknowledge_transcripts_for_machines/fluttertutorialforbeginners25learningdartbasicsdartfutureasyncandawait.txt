welcome to programming knowledge so in this video we are going to discuss about asynchronous operations and dot okay so the question that arises is why a synchronous operations so the answer to that would be a synchronous operation select your program keep running while waiting for another operation to finish okay so let's say for example we want to store data in our server so this type of operation doesn't execute instantly but might take some time depending upon the internet speed or size of data etcetera so if we don't use a synchronous operation user will have to wait until our program is interacting with the server which will create a bad user experience so to prevent that we use a synchronous operations and for this purpose dart provides us three special keywords to use they are future a sink and a weight so first we are going to discuss about future ok so our future represents the result of an asynchronous operation and can have two states only either uncompleted State or completed State so how this works is when we call an asynchronous function it returns a uncompleted future and then future is waiting for the functions a synchronous operation to finish or throw an error and soon as it finishes or throws error the future state changes from uncompleted to completed ok so let's take an example and the key word future we have capital F in it ok so let's say we have a future method a future function we call it switch user data and what it basically does is with return future dot delayed okay so this means that using this delayed method we can delay the process for sometimes that is equivalent to sleep in multithreading in Java or in any other common programming language I mean objectoriented programming language okay so then we have another class called duration and it takes all the time parameters that is seconds minutes hours days okay so for now suppose we assume that our program will take two seconds to interact with the server so I'll give it a seconds and that is two that means I this will wait for two seconds and then start executing okay and we are doing this because we have assumed two seconds to be the time of our program to be interacting with the server okay so after this we have an unnamed function which contains the code that will be executed after this delay of duration two seconds and simply I wanna print data okay so this is our function now we can also specify the return type of the future okay now over here in this first user data I have a return keyword but it is not actually returning any data it is simply printing the word data that means I am not returning anything and if I am not returning anything then we all know the keyword which is void which means this function will not return any data now I'll comment this out for now okay now after that I will call this method set user data and after that I can say have a print statement switching user data okay so now let's try running this okay so now you can see we have fetching user data first and then data but actually according to the convention we have first called fetch user data which is this method so this should be printed first so that means our delay function is working fine and that is how the asynchronous functions work that means over here if there is a delay of 2 seconds it will not wait for 2 seconds to execute the rest of the code it will directly start executing the rest of the code and as soon as this finishes and the future states become completed and it hardly affects the rest of the execution of the program so then this function is called an asynchronous function ok that means our program is still running and not caring about the completion of this function means the completion of execution of this function ok so this is how we use futures ok so the next thing that we are going to discuss is a sink and a weight so these keywords provide a declarative way to define a sync function and use their result ok so let's say this function remains same and instead of printing data now it actually returns something and which is eventually a string okay so means after 2 seconds data will be returned ok now if it is returning string I need to change this to string okay and now after that over here I will create another method which is string and I'll call it user message okay anything that we like and then what it basically does is where data is equal to fetch user data means we are calling this method okay and then I am simply printing this or simply returning a string because we have a string return type here return data and now in our main method all we'll do is we remove all these things and we write print user msg okay now over here you can see it is giving us an error so all we can do is surround return side quotes and do string interpolation okay so now dart will infer that it is a strength so now let's try running this and see what is the output okay so as according to doc convention the output should be data but instead of that we are getting a future of string that means as I earlier said if we execute our future it returns a future and that is in uncompleted state and it is expecting to be completed or thrown error okay so now over here you can see what basically happened was that this function was executed and as this is a synchronous operation it didn't wait for this function to finish and returned the data and why and since this this was not yet finished it returned the uncomplete state of future and that is why we are getting such type of output okay so this is what we call a uncompleted future okay now completed whew has a proper accurate value okay so I hope you are understanding what I am trying to say and now to prevent such type of error what we need to do is we will use the asynch and await keyword okay so what a weight keyword basically does is that it will wait for this function to execute or basically it will wait for this functions future to be of completed states okay and then this a weight function is giving an error over here and that is because a weight function never goes without a sync function okay a sink and of it always go together okay if we write a wait and don't write a sync it will give us an error however whilst versa will not give an error and and that is because a sync is just allowing that function to use of it and then if we don't use of it then that is not a problem but if we use a wait and we have not allowed that function to use of it then that thing will give us a problem okay I hope you are understanding these things now as you can see this is now a synchronous function and over here also you have seen ah a synchronous function but the difference between these two are synchronous functions were this a synchronous functions a function returns a future while this a synchronous function is returning a string and that is why we are getting our error over here because asynchronous functions always return our future okay so instead of string this will now be future string so now it is a future string and since it also will now return over here uncompleted state of future and we want a completed state of future that means we want some actual result we will use a weight over here also and now since this is using a weight we need to give a sink over here keep in mind a sink as always after the ending parenthesis and before the opening curly braces okay so now let's try running this program and now instead of getting this instance we should be able to see this data being printed so let's see and you can see as soon as the execution is completed it waits for two seconds and then data is being printed so it is waiting for two seconds because over here we have used of it which is making the program stop for two seconds until this has a completed state of future and the same goes over here so this were all the basics about future are synced and away okay so I hope everything was clear thank you