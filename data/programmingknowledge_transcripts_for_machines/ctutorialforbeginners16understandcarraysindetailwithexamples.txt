hey guys welcome to programming knowledge in this video we'll be looking at erase so till now we have been working with programs where we already knew the number of inputs right so we knew the space required for our programs to work and all the stuff so let's consider a program where we don't know how many inputs we need to store so something like this this is a code snippet which is basically taking in records let's say student records so every student has a name and age and then the user gets filtered how many records he wants to enter and then we are going to take in the records now if you run this program you can see that the program doesn't so if I say I want to enter 3 records it's going to take in 3 records so a1 to c3 so you can see that the records are taken successfully but if you look at this more closely you see that those records are not getting saved anywhere right those things are just getting overwritten every time now there is no way that we know how many records the user is going to enter it it completely depends on the user so how are we actually going to store all the records we can only store the last record in this way but all the previous records are getting lost rate so how can we tour all the data so that no data is lost and also we don't limit the number of records and the user gets to enter as many records as you want so it turns out that you cannot define the number of variables or know the space you want at runtime but you can define a collection of space in Wrentham so let me illustrate to you what I mean so let's say the user wants to enter some number of records let's say 5 records so if you consider this white space as the computer's memory so what will be effectively doing this will be creating collections of variables so we have two variables over here right so we have one name and then you have an age right so what you'll be doing is instead of creating different variables like name one name two and so on we will be creating a collection of variables something like thirst and then inside this collection what we will be doing is we will be separating this collection I mean we'll be creating partitions inside this collection so let's say the user wants to enter fire records so what we do is we create a collection and then make five partitions into it so you have five partitions over here so all of them are obviously they are of the same size and then age also you will be giving five partitions so like this right so now what happens is once the user gets to enter the records you will be entering into that particular area which is assigned for every particular record so let's say for the first record you entered the data into the first box and then for the second record you enter it into the second partition for the third record you enter it in the third partitions and so on so this particular kind of process you will continue so that you can enter all the records and then you can also access this records by just accessing the partitions right so this is how arrays work well arias literally mean collection of objects and that is what it means in programming too so what you are basically doing is intro love creating n number of variables you will just create this memory space which is capable of holding a number of variables and you create partitions into it so once you create partitions you can add data into it and then it you can retrieve it you can perform operations on it just like variables so basically you can think of array is a collection of variables but it's not actually a collection of variables it's just a collection of memory so if you take this particular array if you take the size of this particular array you will see that it is nothing but the number of elements inside it so in this case five into the size of each element a type inside this so the size of each integer is 4 bytes so this this particular array is going to be 20 bytes so you can see that array is nothing but just a collection of memory or you can say collection of variables and then you can add and retrieve it as you like so let's see how to implement this particular ideology in programming so to implement an array of what you need to do is you need to declare an array so how do we declare an array in C++ we don't have to do anything we just need to put square brackets so that this particular variable is addressed as an array by the compiler and then inside this particular brackets you need to specify the number of items array should be capable of holding so in our case we are going to get the number of Records right so if you give n records you are going to have n names and n ages so the size of our area is nothing but the number of Records right so what you do is you just mention the size inside the square brackets so for h2 you are going to do the same thing so eight records and then over here what we'll be doing is instead of name we'll be accessing the partition now how do we access the partition of an array so for accessing the I H partition or the IH segment of the array or you can say the I 8 variable which is stored inside the collection you need to access it as the name of the array so again name and then inside pair of square brackets you need to specify the index where this particular index is nothing but I minus 1 so let's say you want access the first partition of theory so for the first partition you need to give index as I minus 1 which is equal to 0 so for the second one you need to view the index of 1 and so on so for the end partition you will be effectively giving n minus 1 as your index so that is why if you remember I generally start loops from 0 because it it becomes easier to work with arrays if you are working with loops which are starting from 0 because of this particular rule because the index of an array starts from 0 so I don't to separate one from the counter every time I can directly in access the partition by just calling the counter now to access the particular partition you don't have to do anything you just need to put the square bracket over here and then access the partition so since I'm using a counter over here I'm directly going to access it by the counter and the same thing over here too right now how do they retrieve it well retrieving also follow the same rules so you need to pass the erase name and then the index which is nothing but I minus one if you want to access the partition so let's say we ask the user to retrieve some record let's say which record or do you want to retrieve and then the user in terms of my code so let's say entra code so he wants to put it Reeve the entry code so we'll be getting the enth record as our input and then what you need to do is you just need to access the nth record as the N minus one it's the same rule and then put an M and then that goes in for the h2 we just need to access it by n minus 1 and then if you done it so let me just put the end line over here so here you can see that if I enter some records let's see a 1 B 2 C 3 and then if I want to retrieve the second record you see that the name is B and then digester so that's how it is as a recap arrays are nothing but a collection of memory or you can say collection of variables where you can store and riku variables as you wish so now what all variations can you do with an array well it turns out that you not only can store collection of variables but you can store collections of collections too so that is basically the dimensions of an area so dimension basically means collection of collections so basically if I am saying that an array is one dimension so if I say that array is one dimension it basically means justing it it holds the collection now if I say that an array is twodimensional then what it means it it holds a collection of collections so how do we define this we just put a little bit of square brackets over here and then define the second dimension so this is nothing but a matrix if you're familiar with fishes you have some array of numbers and so 1 2 3 4 5 6 8 9 so if you observe this this whole thing is a collection and three such collections form this particular matrix so how can you define this you can just define this as a 3 cross 3 array right so if you say this particular thing is a matrix so let's say this is matrix M which is equal to this thing so if this particular matrix is this one then it is nothing but a 3 cross 3 matrix right and the way it is defined in the memories you have this particular collection where inside each collection you have 3 items so 1 2 3 is one collection 4 5 6 is another collection and then 7 8 9 is another collection and all three form the overall collection so this is how your variable mat is actually defined in the memory well you don't have to always take in input inside an array from the user you can even define the inputs so how do we define it well to define inputs you just need to put a pair of curly braces and then define your data so let me just clear this and we'll take some generic examples so let's see our array this a 3 cross 3 array so let's just define that matrix which we talked about so how do we define them first we find an overall collection and inside this collection they are going to be three collections so one collection is 1 2 3 and then you have the second collection as 4 5 6 and then the third collection as 7 8 9 so this overall makes 3 by 3 matrix so if you want actually you can access it using loops so for INT i equal to 0 is less than 3 I plus place and then you need to run another loop for accessing the inner collection so for in J equal to 0 J is less than 3 J plus plus you can just show that element so a of I comma J right it's just your space over here and then a new line after you so that it looks like a matrix if I run this so I forgot to put a come over here yeah so here you can see how 3 cross 3 matrix is defined well you can have collections of collections of collection so that is basically a threedimensional array you can go up to any dimension in it is more limited you can have as many collections of collections and it completely depends upon your problem so mostly we tend to use this kind of collection which is the matrix and then the single dimensional array which is nothing but just a collection of data well another point you note that is these collections cannot contain mixed data that is you cannot have both integers and strings in one body so in an array what happens is that particular array will contain data or will contain a collection of data of only that particular datatype you cannot change the data type or you cannot have mixed data inside one particular collection so that's how you work with arrays in C++ you can also pass in arrays to a function but always erase will be passed as a reference not acceptable you so if you I create a function over here let's say in funk which just takes in the array so int a and then you need not define the dimensions if it's just a single dimension you can just leave it as a square bridge and if it is multidimensional then you need to define the last dimension of the array so let's say you are passing a 3 dimensional array so then you need to define the last dimension which is the third dimension and certainly you cannot omit this dimension and if you are passing this particular area which is a 2dimension area you need to pass the second dimension which is three you can leave this or you can define this it really doesn't matter but if you are passing summary which is not single dimensional then you need to pass the large dimension of that particularly so now let us just define this function let's say a point I will do anything we just stopped print the first element of the array so is zero zero this is the first element and then what we'll do is we will change the Tilghman so we change a zero zero equal to five right and then I will just return some things let's say we'll skip this written we'll just make this void so this so void function right now if I call this function so if I just have fun and then pass him a and then we when printing the first element after running this particular function so let's just put in lemons over here so that we can differentiate between the output so one over here and then one over here and now if I run this particular program you will see that the value of a 0 0 was 1 which is nothing but this particular element and then if I change that value over here I could change it over here too so in the main thing also it change so that experience that arrays are not passed by value by they are passed by reference so arrays don't get copied when you pass them to a function but that changed in a memory so what you're essentially doing is you are just passing a pointer will be discussing pointer at a later stage but what first point is basically meanors they are nothing but those are variables which carry addresses will discuss more about pointers at a later age but for now this is how we use erase and C++ and in the next video we'll make our first programming project right so it is going to be a very small project they'll try to understand all the concepts which we learnt till now it's going to be really fun project and you can share with your friendship so looking forward for that particular project and see you in the next video till then happy coding