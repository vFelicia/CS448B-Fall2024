so hello guys welcome to the programming knowledge so today we'll be learning about linked lists the basics of linked lists like what is the meaning of linked lists how do you apply linked lists what is the difference between arrays and linked lists and why are we using linked lists so before you begin learning about linked lists I would like to give you a little representation of what linked list looks like okay so for example as you an array so how do you operate an arrays so in array usually you have these type of boxes what you see in the diagram like all the elements are linearly connected to each other right all the elements are linearly connected to each other and each of these elements contain each of these positions contain elements like let's say one here one is here two is here food is here do you hear five six so this is what an array looks like like you first declare an area obviously you know how to declare an array int a r of n where n is the size of the array so what the disadvantage of array is basically that you already define the size of the array you already define the size of the array and then you cannot extend the size of the array or you cannot either smaller the size of array array remains exact of the same size so that is the main disadvantage of errors disadvantage of arrays so to encounter this problem what we basically do is we you'd linked list so what linked list looks like so let me show you an example so in linked list we have two fields in each of the elements okay this is one element right this is another element and let us say we have four now three elements in our linked list right each of the elements have two data parts and also you should be knowing that each of these elements will have an interest so let us say the our first element has an address 100 second element has an address 200 and third element has an address 300 so and now let's let's the first element have element has one second element has element two third element has element three and what we have over here is that these elements are connected to each other in this way so as you can see first element is connected to second elements again is connected to third element so now you would argue how are these elements connected so solution to this problem is that the second problem this second this second part contains address of the second node so in this case first element is pointing to the second element and the elders of second element is as you can see it's 200 Alturas of second element is 200 so this 200 is being stored in the it is part of the first element so now let's put 200 over here 200 and also this 300 this 200 this second element is connected to the third element and this 200 is stored in this so now let's put 300 over here and looking at the third element what we have over here is that there is no element next to it we have only three elements so we store null in this case so there is so it is pointing to nowhere so this is the basic representation of linked lists and the beauty of linked lists is you can increase the element size and linked list dynamically so that is the main advantage of this and also if you look into this figure what you would observe that in order to access or traverse this array we only need address of the first element if we have the address of the first element we can traverse through each of the elements one by one right so now let's to get to the coding part of it and then yeah let's do some coding okay so here I have my desktop window and let me just write brief cold okay so now the main question is how are you going to store this element and address of this structure address of this node so the answer to this problem is we'll be using a structure a structure of structure of elements right a structure of so this will be this is an entire structure this is a second structure and this is our third structure so what we do is we define a structure first HTR UCT let's call it node and so we have defined a structure so this structure has two data parts two parts it has the first one is storing the data and second one is storing an address of an another node so how do we write encode is int Delta so this will basically store the data int data so this is our data right this is our data and now let's define and node star link so this is the most important step so this is the second part which stores the this link stores the address of the second node and that is why we use node star so this is node so it stores it is a pointer to a node to the next node so that is how we write it and one more thing I want to show to you is we need another element called head to traverse the all the elements so what we'll have one more node star which will look like this way so this will be your head this will be called head this what this will do is it will basically point to the first element and it will store only the address of the first element so let this store 100 so this is of type I mean these both have same types so this is only storing the entrance part of the first node not storing any data because this is our first element and this is how they're connected right so now let's define an old star the old star head so if you notice I have done this global declaration which is fine so this line this line node star head corresponds to this element right and initially when there are no elements in our list what you have is head is equal to null so head is pointing to nowhere so initially we have nothing in our head so this is water element will look like so this is our head initially and let's call it head and initially it has nothing in it it contains nothing null head is equal to null so we have defined it over here head is equal to null so head contains nothing right now now what we want to do is let's insert our first element insert our first element so how do you do that in order to insert an element movie no red tote basically has two parts okay so let us do it again so first part and the second part the first part stores the data so let's store some data ok first the first process is to just create a node so let's create a node so if you look at the left side how we create a node is we use this command called node star space and let's call it something like let's call it first node let's call it first node so node star fi rst node is equal to you know because we're creating a new node so this is the main command so this is important unit to know this command to create a new node and now the first thing what we do is you know obviously let's say we're inserting one so in the data part of this you will insert one which is this way this element contains one right so how you do this over here so you this uses command called f irst first node and then arrow of data so let's put data or here da TF is equal to let us say it contains one so this is the command to initialize this right and also we know head is pointing to null so now so now that we have done this and since this is the last element right so in this case we have only one element and this is the last element so what we have to do is initialize this to null initialize this to null so that we know that there are only one element in our list so how do we do that in a similar way f irst first node of here we use link now first node of length is equal to a new LL so very simple so now we have done almost we have done this now the only part remaining is connecting this node to the this node let's say our node has an address of let's say 500 right and now what you have to do is instead of this null we have to store 500 very simple so there will be no nail right now let's here it is this there is no null but we'll store 500 in this so that we are connected in this way so how do you do that you simply say head is equal to fi rst head is equal to first node which makes sense so head is pointing to the first node so head will contain the address of the second node because head is of type pointer so it is equal to first node and now let's print it which is si out first node is just f irst of first notice first node of data so this should print one so now let's try running this program okay as you can see I can see first node is equal to one printed on my device right so this is working right so this is fine and now what we are going to do is we are going to extend this list extend this list okay so now let's erase this stuff extend this left add one more element at the beginning or let's add one more element at the end of the list or let's add one more element to the beginning of the list so you have an understanding so in that case what is supposed to do is will create okay so we're supposed to create a one more node in between head and the first node so this will be a second node right and let's say this will have an address of like of let's say 1,000 so what I now need to do is pointer head to this variable and head points to this variable so that now this will not contain 500 anymore but this will head will be pointing to our first element which will be 1000 which makes sense and let's say this will store 2 right and now this needs to store 500 because this is a third element and this is how it will be so you can see head is pointing to this this is pointing to this so how do we do that it's very simple what we do is let's create a second node okay let's call this one second node for reference second node okay this is a second node so we'll just copy this line so as you can see I've created a second second node over here let's rename this to second node second node and also you know that second node of data is equal to obviously two you've seen it and now what you need to do is second nail second node of link is equal to head of link because initially head is pointing to this element initially we know head is pointing to this element head is pointing to the third element so head of Link is equal to this element so now we need to connect this so what we do is second node of link is we will do head of link which makes sense and so what we have done is we have connected this till now you connected this so when we say so when we write this command second node of data is equal to second or data is written as to second node of link is the second node of link is equal to head of link so initially we have this connection great head of link is equal to this so now we connected this way so second node of link is equal to head of link and now we need to connect head to the second node connect head to the second node how do you do that very simple free right head is equal to second order and just so now let's just try to print see out so now let us try to print both the elements first and second element how do you do that so for printing first element let us put Z out okay now let's print first element is equal to Sophia no what's first element first element is first element is our f irst first node of data which is fine and let's print similarly second node and let me put second over here and now let's run this so you can see the output this is our first element and this is the second element so our program is versing working so this is it for the this lecture and this is the basic understanding of how linked lists works and in later on and the videos will be seeing how to insert an element at the beginning of the linked list how to insert a tenth position of a linked list how to delete an element in the mingling list will all be see in the next lectures so thank you everyone for watching