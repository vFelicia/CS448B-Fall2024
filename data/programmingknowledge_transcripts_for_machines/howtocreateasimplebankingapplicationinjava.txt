so so I guess this is the right time to begin our project our project number one is a simple banking application okay so till now we have covered only the loops uh some basic basic concepts of the Java and we are not right now uh Deep dive into the oops concept and that will be doing after this project once we complete this project so this project is simply a console based project uh so no GUI into the interaction will be there in this project once we move into the advanced section of the Java where we'll be seeing some Java applets or swing there we can convert this project into the GUI based project okay so so for till now uh I will be doing all this stuffs inside the console okay so for this I have plan what I have planned I will write down the points URL so first we will display a one welcome welcome message to the user okay welcome message to user okay so that is our the first first call okay and okay and then let me just get here okay for second number oh second will be looking into the give me a we are giving five options to the user okay so first option will be uh something known as deposit where user can deposit the money inside this bank account okay and then after that the third option second option will be something known as withdraw okay where user can withdraw the money from his account okay then the third uh feature we will be carrying is get previous transactions okay so here in this feature uh user will uh get to know what what is this previous times the actions what you have done in the past transaction okay and uh again one more feature is there that is not not a feature it it basically uh your menu which shows to the user okay so here we are showing the menu to the user according to that by seeing that when new user will give input to our program and program will behave according to that input okay so when to the user okay and uh at last we will execute execute our code okay so these are some steps that we will be following uh following inside this project okay at first user came and see the welcome message okay and then based on the user input we'll be performing some functions okay that is deposit withdraw that previous and vaccine show the menu and execute our code okay so I hope you understand the overview of the project so let me just get into into my IDE and I will creating the new class name as banking application oops sorry linking application okay and let me increase the font size yes and I will include my public static wall with me okay and inside main uh this project required input from the user so that's why I had to import the scanner class also and I will be using this new keyword scanner so system Dot in so okay basic stuff now I know we have the not covered started oops concept so that's why you will at some point you will not get some concept so bear with me I will be telling you what those concepts are okay so this is pretty much about the setup okay and now since we are doing all this uh let me show you all this deposit with action show menu and execute our code all this functionality in a one place so I guess this is the right time to introduce you with the oops concept known as method okay so I will oops of method and class okay so I will create another class known as the banking uh bank accounts which is more appropriate I guess AWC over your bank account okay okay so this is nothing but I have created one another class name as bank account where I will be covering all those functionality in inside this class and we will create one object of this blank bank account class inside this banking application class okay uh oops I have written this class inside class that is okay now it's okay okay so this is one class our public class and inside which our main method is there and this is another class where we'll be covering all these functionalities which are required in our uh project okay so inside this uh I will show you how this class and objects steps are created so bear with me and for first uh functionality of our project is deposit so we will be covering that first okay for so you you so you are pretty much aware about this for depositing the value uh something money inside our account we we need one variable which is known as balance because we are updating that balance after deposit occurs inside our account okay and we will require another variable normal name as previous transaction which will hold the value value and the information about the transaction that happened in inside past recently okay so I will be creating those two variables name as balance and another one as previous transaction okay and now I will create one method uh so this method doesn't return anything so that's why I have written void uh I know you are not getting some concept what is wired what is ain't okay not in in you know what is it is right and void and my method name is deposit okay and my method is going to accept one way when when parameter that is amount okay amount so method is nothing but one particular instruction of the lines of codes which will execute uh which will you will require again and again for the execution and then those setup instruction you are right inside of one method and you will call that method again and again to perform that task okay so we will be covering in depth about the methods what are the types in the oops concepts for but for now uh you know you know what is methods okay uh we will be creating one method known as deposit and inside that method I will be writing now uh if I want to deposit my money I have to check uh whether my amount that is uh given by the user and this is the parameters that this method will be accepting this method will accept amount that which is given by the user to deposit inside a bank account okay so I will be checking whether my amount is not equals to 0. okay so this uh if the user user inputs a given input as zero so that doesn't make sense because 0 cannot be added inside the bank account okay that doesn't make any sense so we are checking on base basically base condition over here whether my amount amount which is a given input by the user should not be equals to the zero okay if it is not equal to 0 this uh if condition is evaluated at true and inside that uh I will update my balance okay so my I will tell balance is equal to Plus amount okay I will update my balance variable and I will have also updated my previous transaction variable as amount okay and so that tells that my previous transaction which then by the user is the amount that means the deposit to the bank account okay so this is pretty much about this and of the project okay so in this video we'll be discussing about the functionality which is withdraw and the get previous transaction so we will be implementing the two methods so for the one method is for the Vedra and one method is for the previous transactions okay so I hope you have watched the previous videos where we will be implemented our deposit function method and now in this video we'll be covering our withdraw and get previous transaction functionality okay so okay before we get into code think about it uh whenever I want to withdraw some money from my account got changes and first of all what I have required as the input to this method okay so let's think about it so for this I will be requiring one amount that is the amount of money that I want to withdraw from my account so the amount is the parameter which will be passing through the withdrawal functions and again one base condition should be there okay so think about it one what what will be the best condition again the same base condition uh like we have done for the deposit method that is amount should not be equal to the zero because deposit depositing the zero rupees or the zero dollars from an account doesn't make any sense okay so we'll be implementing that also and I guess this is a bit pretty much stuff that we have you want to do inside the withdrawal function okay so let's just get and implement this we draw method okay since our method is doesn't returning anything that's why the return type should be avoid uh void avoid is the return type there are many different types as such as int uh care strings are there uh method is doesn't returning anything it it is just performing some basic math calculation and it will returning some value to the user okay not value it is performing some task okay so withdraw I will name this as withdraw and as we have discussed it will accept one parameter known as amount amount of money that we have to we draw a formal account okay and again one of the base condition should be base condition should be there that my amount should not be equals to the zero if it is equal to zero that doesn't make any sense okay and inside this uh I will update my balance because after we're drawing some money my when that amount that much amount of money should be deducted from a balance that for my account balance okay so balance minus amount okay and now after that I I also have to update my previous transaction as amount okay minus amount okay so I guess this is pretty much that we have to do inside the withdrawal functionality and after that we will be performing another functionality that is get previous transaction so this I have writing the previous generation previous and action we have to implement that method inside this class name as bank account okay and so since previous get previous transaction it doesn't return anything so that's why I will write void as the return type and I will write get previous transaction okay uh wait guys okay so sorry for the introduction guys okay so where we are avoid get previous transaction reaction okay so this method uh doesn't require any parameters and it doesn't return anything okay so inside this I will write one if condition if my previous standard action value is greater than 0. okay when the value will be uh will have to press the previous election will be greater than uh 0 when we have done any deposit uh in our account okay so in that case I will print deposited and I will concat it with previous interactions value okay and uh again one else if condition should be there to check else if my the value of the previous transaction it's less than zero in that case when we draw means one withdrawal should be there for my account so in that case I will write sorry with drawn be drawn the amount should be there and one thing I will do here is math Dot abstract okay and I will pass it to the value of the previous transaction so you'll ask me what we have done here what is this map.aps right and we are passing uh three ways of the actual value to it okay so this is the enable class inside the Java so here you can if you hover over the cursor over here you can see Java dot line language package inside which math class is there and one abs abs method should be there inside that math class if you if I click here and here you can see public static int areas so what this uh method does it will accept one parameter okay so as you here you can see it is accepting one parameter which is integer a and it is returning something uh in in format okay so what it does is uh since the value of the previous election is less than zero that is the negative one like minus something known as minus 50 or guess minus 400 so we don't want this values to be reflected in our console because negative values should not be there inside any account okay so we are doing this match dot abstract function and it will convert that negative value inside the positive to its corresponding positive value that is equal to it will convert the minus 50 x 50 and uh minus 400 as 400 okay so this is the work of the max dot abstracts abstract function okay or method uh then here I will write else if both the condition will not get satisfied in that case I will write no transaction is occurred no transaction it's upgrade okay so I guess this is pretty much about the previous transaction method where we will checking if the value is greater than zero that is a deposit deposit method is getting run inside our application and if the value is less than zero that is withdraw is done inside our bank account if nothing none of this statement get executed then else will execute and it will show that no transaction is occurred inside our account okay so this is pretty much about the withdraw and get previous function so today in this video we will be covering uh our next functionality of the project that is the show many projects so this is the main uh method which will hold the all uh functionality of our banking application it will call all those methods which you have uh which we have written in our previous videos that is withdraw our previous transaction and the deposit and it will perform all those functionality of our project I guess okay banking application okay so in this video we will be writing this show menu method okay so for this I will cover I will write another method name show menu and this may this method will doesn't require any parameter and it doesn't return anything okay yeah so inside this menu show menu show menu function where method will uh basically do all those printing part printing stuff inside that console okay so for that uh I will be carrying one uh declaring one character okay now so character variable name is option and I will initially write his ads slash Studio okay so that represents null okay again uh oh I I guess I have declared the scanner class over here so that is inside this main uh another class so I have to I guess I have to declare one scanner I guess scanner SC is equals to new scanner system dot in okay let's go I have imported this kind of over here and now uh I have to create that console step here okay now so I will just oops sorry I will just sound one thing that is to welcome Plus cost name so this time uh IntelliJ IDEA is telling me that hey what is customer name you have it doesn't have declare it anywhere okay so for that uh I will be creating one variable over here that is of type this is customer name so that is of type string because customer name is in string format and I will write same customer name and one more thing I will be requiring is as customer ID okay and I will also declare it as a spring customer ID Okay so whenever the object of this class is created uh I I want the user to give me the customer name and the customer ID so that I can print that name and the customer ID over here okay so for this one more concept was there of the book of oops object of object oriented programming language that is Constructor so what basically Constructor does is it will get automatically called whenever the object of the class is created okay whenever I create the object of the class the Constructor is getting called and the Constructor name should always base as same as that of the class name okay so what is the class name bank account and this Constructor should accept the two parameters that is the customer name and the customer ID so that we can print that customer name and customer ID inside the console okay and so the name should be in the format of string string names and I will write string CID that is the customer I okay don't worry about this Constructor for deal for just now uh know that whenever we create the object of that class the Constructor get automatically called okay so this line number 15 to 17 and inside this Constructor whatever I write it will get automatically called whenever we create object of this background class okay so whenever I create this uh update of this class I just want to assign the customer name uh as the C name which is given input by the C name by the user and I just want that customer ID should be equals to the CI okay so that is pretty much about this Constructor I guess and now we can move to the towards our show menu function and start again this okay so I will write again one South statement over you should be there and I will write your your ID is this and I will write customer ID okay so after this I want a new line should get painted on the console so for that I will write this out hit empty nothing should be there so that the new line should be there and which looks nice okay and again I want one option number a so we have discussed over here the options of that our application that is deposit we draw we address and reaction at the show menu okay so we will be covering that over here we will write check balance okay uh then again one more functionality should be there that is B Dot deposit if the user want to get put deposit some money inside this account and again C is retro withdraw and again one more shout man and now option number D to get the previous strand transaction okay and now last option if either want to get exit from this hour application you want our user to click key so that we can exit from our application and so now one thing you you should notice this show menu method show will display all the these steps inside the console okay and we don't want the user to get uh multiple times click on this run button run button and execute over this code again and again so we can what we can do is we can provide one uh Loop to the user wherein user can look iterate or iterate this functionalities or use this functionalities again and again as much time you want and whenever a user has done with all the application uses and then simply user can type e to exit from our application okay so for this I will be using one do while loop and inside do I will just first of all I will print one statement so it will look nice okay and then one more sound statement should be there which will tell the user to enter the option okay enter the option and after that one more sub statement should be there this line number 60 and line number 62 is just you for the getting the console such a nice look okay and after that I will be doing option is equals to scan s is the object sorry SC Dot next Dot carat index 0. and I will be doing two I guess I can't do this here and let it be we will cover in the next upcoming video so in this way in this part I have taken one uh input from the user at the string and I will be returning the first character of that string okay uh so I have declared here the character as a layer of option and I'm storing that user input inside this option and so user can input e d e c a b a b c d e any option that you either want that gets stored inside this option variable okay so now inside this I will create one switch and so for switch I will be passing option as the parameter so we have covered switch I hope you guys remember this how switch works and how what is switch okay so we'll be carrying one case for first case we will be passing a we will be writing the functionality if the user clicks a that is the check balance okay for that I will come inside this case and I will first of all print this line okay so this line is basically just to give that nice look to our application okay so again inside that I will write Sound system.out.pin Table and I will simply print balance it's and I will contact it with balance okay and at last I will be printing again this just to give our application a nice look and I will print one sub statement so that one extra line should be there between the switch next case okay so after that this is pretty much about the check balance I will just write foreign but the next case we have case number B if these are given as B and I will just copy this statement over here just to give it oops sorry copy oh sorry guys me okay and what is the BP part uh B part is the deposit okay so when the user gives input as B we have to deposit the amount inside our account okay so it's out go either enter the amount to deposit okay so after this I will again print this line so that it will look nicer in our application okay now what I can do is int amount I will declare one variable nameless amount and using strot next end I will receive that in input from the user and I will call deposit method inside this and we will pass that amount value to the deposit function deposit method okay and after that I will just print One new line and I guess that that is pretty much we have to do inside this case number B right so what I have done uh and printed this on the console and I have taken one input from the user and showed it inside the amount variable and I have passed that amount variable to the deposit method and we have written this deposit method over here here you can see and this deposit method will update the balance of the in our account and update the previous transaction value also okay so after that moving forward to the case number c k c okay so what is Case C withdraw okay so we have to implement the withdrawal functionality over here so I will just simply uh copy this and paste code paste it over here enter the amount to withdraw okay after that again I will create one variable name amount two because amount is declared above already declared about SC Dot next int and for doing the withdraw stuff we have written one method withdraw and we will accept one parameter name is amount so we are passing that amount that that this should be withdraw from our account and then again I will simply just print a new line so that it looks nice in the console and I guess this is pretty much we have to do inside this case okay so our next case is case D and let me just look what we have to do AST that is the previous time the action uh we have to perform the previous time vaccine inside this case and again I will just copy this because this is step that I required every time okay and inside this I don't require this because I don't need to print anything inside the console or getting input from the user that's why and inside this I will call the get previous transaction method and this call will be uh go to here to a this method get creation reaction and this method will check this condition and according to that it will print that corresponding statement okay over here so okay so I guess this is the pretty much we have to do inside this case and after that I will just print One new line and I will break this condition okay now I have to write again one more condition that is the E condition that is in exit condition what if the user write e okay so in that case user want to get exit from this Loop so they will simply just print this statement and after this statement we will do break okay and this is all we have handled all those cases and we will sorry one default case which will handle and inside default case uh we should do print something like when we'll get a default condition get hit when the user will enter uh doesn't enter a b c d e and other characters okay so in that case we just have to print invalid option please try again okay and I will simply create this okay so I guess this is pretty much we have to do insert the switch okay so we have implemented this switch after that I will write while because this is this do while loop and inside while I will check the options value should not be equals to character P because if it is a e that that means user don't want to use our application anymore any more and you don't want to exit our phone or application okay so this is pretty much about the show menu I guess we have done let me just zoom out so that you can see whole method inside one View okay I guess this is and one one pretty simple mistake was there inside this method I want you to think about it and let me know today we are containing our project number one that is banking application and in this video we will finishing it okay so in our previous video we have discussed about the show menu functionality of our application and I have to told you over there when there is mistake is there inside this method that is what if we are checking the cases for the this letter that is uh capital letters capital a capital b capital c capital D and the capital E okay one minute okay so where we are uh I told you that one mistake is there inside this code that is we are checking this case case for the capital letter set is capital a capital a Capital C D and E and what if the user is entering this small small letters okay so that is a b c d e uh because this switch switch is comparing that case using the Sky asci value of that characters okay so the Sky value of the capital A and as a capital small a are different so that's why user will doesn't know what is happening why the code is not getting run for the case number a because either I entered the small letters okay instead of entering this capital letter so this is the problem so what we can do whether the user will enter that characters in in a small letter or the capital letter and we are showing that inside the option option variable we will convert that input into capital letters okay so what we can do is there is one uh inbuilt class inside Java which is character and which has one function that to upper case and this will accept one character and which is which character is options okay so what this will do let me just increase the font size so that you can see clearly this will uh get that options input from this option and it will conver apply the two uh apply not apply it will pass that options or the letter whether it is in a small or capital letter to the upper case method and uppercase method will return the capitalize form of that character okay so let me just show you this implementation of this here you can see the public static method Etc inside the Java this is the document uh inbuilt methods which are written inside the Java and here you can see what we what it is returning it is returning to uppercase of that character okay so I guess this will remove the problem that we have inside our application and let me just okay so now I guess we have done all the part that we have we want to do inside our bank account class and we have implemented all the functionalities inside this and now we have to run this and we know from uh where our program will get executed inside this main method okay so inside that this is class banking application and this is class bank account so both classes are different and all our functionalities are written inside this bank account class and we now we have to tell this Bank application class that there is a bank account class is there and we have to create one object of that class okay so how to create the object of the class we will simply write bank account don't worry for time being just remember uh be with me uh I will cover all those classes first class object inside all upcoming queries inside that oops Concepts okay a bank account and we will give a name to the object okay so let me just write as Bank One whatever you can you can simply give your name also okay overages it doesn't make any sense okay but normal convention is that you should give object name as so that's you can understand by looking at the object name what we have done inside this okay so we'll create a new bank account and here you can see intelligent idea is telling me that this object will require one two parameter that is C name and CID so I have in the previous videos I have told you that this is the Constructor which accepts a c name and CID and I have told you that whenever you create an object of the class it it calls the Constructor of the class and we have written our Constructor over an error discussion to accept the two parameters so that's why we have to give two parameters to this program so let me just give the customer name as xyl you can give your name also as a customer name if you want and again second parameter is CID so let's suppose customer ID is let's suppose one zero one okay this is the customer ID okay uh this is pretty much that we have to do and we can now the object is created for that class name bank account okay so using that object we can call any method written inside the bank account class okay so what whatever written inside this is why deposit void withdraw void Gateway send action world show menu so one thing you tell me or you you decide which method I can call so that all the functionality of our application will be done inside that so I think there is only one method which uh which is there show menu method and which will Implement all these functionalities of our application here itself okay so I will call that method using the object name so for calling that method we will write object name that is bank 1 Dot now you can see show menu is there so many okay so this will call that show menu uh method okay inside this okay so I guess this is pretty much that we have to do inside this project so I hope and this will run let me just run this okay it's running and now here you can see it is asking me the enter the number of terms you want in the series uh wait I guess this running the previous sorry sorry guys this is running the previous class Java class I guess and now I have to run this Java class itself ah yes now see here you can see welcome XYZ your ID is zero one how this is doing uh we are passing x y z and zero one to this class Constructor and this Constructor is assigning that c name and CID value to the customer name and customer ID is over here okay and those customer IDs and customer name are getting printed in on the console here customer name and custom ID so I hope you guys are getting this and now it is asking for the option uh so let's suppose we have to check the balance and deposit the balance and withdraw the previous transaction okay so we'll go one by one okay I will type A okay so we will check first of all let me check the error that we have rectified over here okay if I give small a and if I hit enter the check button should be there so heat was selling invalid option should be invalid option is there uh because I guess this is not working here all right why it is not working I don't get it okay let it be uh I will Rectify this error and let you know in the upcoming videos okay uh for time now being we will give the capitalized inputs to the other application okay capital a so now here you can see balance is zero it's showing balance is zero because we don't have any uh done uh deposit or withdrawal from our account and initially the value of the balance variable that we have declared over here is 0 okay that's why it is printing 0 in this console okay uh okay now let me just increase the size of the console uh and now if I do B B what is the B deposit uh enter the amount that you want to deposit let's suppose I have to deposit 1000 rupees or thousand dollars in my account okay and then if I hit enter uh now 1000 rupees or thousand dollars I uh deposited in my account now if I do option A that is view balance now here you can see balance is thousand previously it was telling that balance is zero now the balance is 1000 okay uh one second guys so now we have checked the balance that is 1000 so we have implemented the check balance and deposit now if I want to withdraw money from my account I have to give input as C P America C and uh okay now it suppose not thousand five hundred and now if I check the balance for checking balance um balance is hundred and now at last I want to check the previous suggestion that I have done d so here you can see if I type D withdrawn 500 that is the thing that I have done previously so that is withdrawal for the 500 from the account okay so I guess we have implemented all those checks now at last I have to implement e if I press enter now here you can see process finished with exit code 0 that is our code will get ended and you will get out of this main method okay so this is pretty much about this project I hope you have enjoyed this project and you know upcoming tutorial series we will be starting oops concept from the onwards videos okay thank you for watching this video