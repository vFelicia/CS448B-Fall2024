hey everyone today we're gonna do something different we would use classes in order to make a pie game program rather a game so i would try to build a collision game i would have this man and if he hits the bricks falling from above the game is over simple okay so in pi game we have a sprite module for working with classes sprites are objects if you don't have much idea about classes and objects in pi game basically they are a convenient way of grouping data and code into a single entity sprite module is a very good way of working with classes in python so for the algorithm what i would do is i would first have a man class that would be of the sprite type and i would also have a brick class now both of them must have the init function where i'd load these images and get their rectangular surfaces then we would have the move function in both the classes we would move the man by giving key inputs from arrow keys and the movement of bricks would be programmed and the initial position of the bricks would be randomly picked by the random module now using the sprite module i would check in the game loop if there is a collision between these two image objects if there is i would display the text kmover okay now let's start writing the code for it so let me write the basic code quickly i'll import pi game then i'll initialize it i'll write pi game dot in it then i'll set up my screen right screen spy game dot display dot set mode and the screen size is 500 comma 500 then i'll set the caption i'll write by game dot display not set caption and the caption let it be collision game okay now for the while loop i'll write while true for events in bygame.event.get event.get if events.type equals pygame.quit i'll call the quit function by pie game i'll fill my screen with some color i'll write screen dot fill white and i'll update this let me use the flip uh function i'll write pi game.display.flip and i'll yeah that's the basic code now let's write the main code let's get to the main functions of our game now since i said i'd be working with random module because i need the bricks to be falling from randomly falling from anywhere so i'll import random module 2 i'll write import random okay then i'll have my clock object i'll write clock equals by game.time.clock that's my clock object to set up the frame rate later and i would need to set up the speed variable for the movement of bricks this is just the initialization we'll use this later you'll get an idea why we have initialized it here and i also need to display that text game over so i set up the font i'll write font equals pi and that will be georgia and 60 as the font size cool so i have these variables initialized so let's get to the two classes i talked about the brick and the man class so let me define the brick class first i'll write class brick so that's how you define a class and by python and since i want to inherit the sprite class i'll write pi game dot sprite which is the module dot sprite which is the class okay sprite is the class in this sprite module okay so it might be confusing in the beginning but just try to think and understand you'll get a hold of it okay now i'll have this init function i'll define in it i'll write def underscore underscore init underscore underscore and self okay so i'll inherit this sprite class so i'll write super dot init super dot in it it's away in python how we inherit the classes base classes okay so now i'll load my image i'll write self.image equals spy game dot image dot load you should have a little basic idea of classes in python otherwise it might be too much for you to handle for now because we are already working with pie game that is new for you and then we are again having a new thing that is classes so you might not get comfortable with it so please try to understand the classes first and then get to the pi game code fine so i'll write self dot image equal spy game dot image dot load so my image is in collision folder it's just how we displayed an image in pye game earlier just the difference is that right now we are doing this in a function inside a class okay then i'll transform i'll scale this image of mine i'll write self.image equals pygame.transform.scale self image what i need to transform what i need to scale is the self image and i need to scale it to size 40 comma 40. okay then i need to get the rectangle so i'll write self.rect these are just variables but of brick class so that's how you write it i'll write self.rect equals get red i got the rectangular surface and i need to define the center so my center would be randomly picked for these bricks falling from above so i've used random dot round end 40 comma 500 minus 40 i've kept margin of 40 either side just so the boundaries and uh the bricks don't collide they don't overlap okay and yeah then i'll define the move function for the movement of the bricks how they have a motion right they are falling from above so i'll do it i'll write self.reg self.trek.move in place and the arguments are 0 comma speed so my speed was 5 and i'm just giving a speed in the y direction because i want it to fall from above and there should not be any movement along the xaxis the brick is just falling from above directly towards the ground and move in place what this move in place does is from an object's coordinates it moves it with respect to that position uh what the speed we have mentioned okay so like if the coordinates right now are 400 comma 400 and i've mentioned zero comma speed as the move in place arguments after this function is called the final coordinates would be 400 comma 405 okay i hope you get what i'm trying to say and i'll put in some conditions that once the brick has traveled the entire screen and not hit the man okay then what should what should happen i'll write if self.shrek.top is greater than 500. now i just quickly wanted to show you what this wrecked top and dot center means which coordinate of the entire rectangle i'm talking about you can see it in this picture so i hope you get the idea what is dot top which coordinate i am talking about and what is dot center there are two different coordinates of the rectangle okay now if it is so if the rectangle stop coordinate is greater than 500 that is it is out of the screen now now i should reallocate this top coordinate to zero and the center should be randomly picked again okay again i have kept a margin of 30 and 100 over here so that things don't overlap okay cool now i'll have my man class again i'll write class man very similar to the above class and pi game dot sprite dot sprite okay then i'll have my edit function again i'll write self in the argument with the super keyword i'll inherit the sprite based class and again load the images but i'll load that image of scared man now it is in the collision folder so accordingly i've mentioned the path then i'll scale this i'll write ikm.transform.scale self image 100 comma 150 okay and i'll write self dot rect equals self dot image dot get check to get the rectangular surface and define its center it's just the initial coordinates of the image that i've loaded of the scared man let it be 200 comma 420 okay and then i'll define the move function how my how the man moves okay so since i'll be taking inputs from keys the arrow keys from the keyboard i'll again write keys equals to pycam.key.getrest so i hope you remember this was a sequence this is a boolean sequence that contain the state of all the keys on the keyboard if it is true then that key is being pressed now i'll check if keys by game dot k underscore left then i'll write self.track dot move in place minus five comma zero so i want to move it towards the left okay so i'm subtracting we discussed this earlier in earlier programs that if we want to move left will decrease it decrease its coordinates okay so i'll decrease it by five and if keys by game dot k underscore right self.trek dot move ip five comma see okay so if it is if i if i press the right key if the user has pressed the right key the man will move towards right with five by five units okay now i'll declare objects of this man and brick class m1 i'll write m1 equals man and b1 is equals to brick so this is how we declare objects in python of a class so these are my two objects okay and now i'll have a variable bricks i'll write equals pi game dot sprite dot crop so i'll declare this bricks to be a group okay so what a group is it's a sprite module functionality it's a container class to hold and manage multiple sprite objects okay now to this group i'll add b1 okay so this is a brick scrub okay and to that i've added p1 that object that brick object okay now i'll have another class in which i'll put everything all the objects that i've declared okay now all sprites equals pygame.sprite.group again this is another container class okay and i'll add m1 and b1 to this group you'll get it in a minute why i have declared these groups okay bricks and all sprites now let's get to the vile true loop now for entity in all sprites screen dot blit entity dot image comma edit dot rect entity dot move okay what i have done is i'll traverse all that is there in the all sprites group that is why i've declared all sprites variable because i need to put each of those objects on the screen so that is how i've done it i'll write screen dot blit entity dot image ndt.rect so i've got that image on that rectangular position on the screen okay now ntd.move i've called on to that move function in the respective classes and according to the move function my objects would move my images would move and i'll also now is the main part i'll check if that sprite objects collide with any of the other object okay so i'll write if pi game dot sprite because it is a sprite module function dot sprite collide any it's a simple test if a sprite intersects anything in a group okay so m1 comma bricks okay m1 is the man we have only one man but we'll have a number of bricks okay and then if it is so if this returns true then i'll render the font that i declared above i'll write text equals spawn.trender what is my message it is game over i want antialias to be true and the color let it be orange fine then i'll get this on the rectangle so text direct equals text dot get rect center that will be 500 double slots to 500 okay so i got this text at the center of the screen and i'll use split again to get this text on the rectangle i'll use dot flip function so that i can update this and just so i can visualize this text i can see this text that the game is over i'll use this time module i'll write time dot sleep for two seconds so that i can see that the game is over and then i'll quit okay otherwise you'll just see the game over text is blinking and going away and the screen goes away okay that wouldn't look good so i will also need to import time module i'll write import time yeah that's it so i'll also need to set up the frame rates i'll write clock.tech and 4d let the frame rate be 40 okay now let's play this game and let's see if everything works properly as we have defined now when i run this i can actually see the bricks falling from above i can move the man using the left and right arrow keys i guess the speed is a little slow so let me change the frame rate to 60 so that the game becomes a little fun to play and a little complex so the bricks are now falling faster and when the man and the brick collides the game is over i have this text and the screen goes away automatically after two seconds cool so this was it for this program and you can also think about how you'd gradually increase the speed so you can think of levels for that you might need to declare some user events please think about it please look for what you can do and this was it for the program thank you