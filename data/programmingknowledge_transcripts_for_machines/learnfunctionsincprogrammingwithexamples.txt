and in this video guys we're going to discuss and i'm going to teach you how to implement functions in our c program so basically guys a c function is a selfcontained block of statements that can be executed repeatedly whenever we need it so if you think about it it is just you know a group of statements that we could um call and we could use repeatedly within our c program so in this particular video guys we're going to discuss the benefits of using the functions in c program we will also discuss two types of functions in c also the parts of function the function prototype the function definition and of course we're going to discuss also how to call a function inside our c program and lastly we will implement a basic program to illustrate the addition of two numbers using user defined function so if you're excited guys please make sure to watch the full video you will learn more in this particular video tutorial and by the way guys if you are new here in our youtube channel and you like content about programming so go ahead make sure to subscribe and press the notification bell so you'll get updated whenever we have a new upload regarding different programmings or different topics so we have topics python java javafx c programming and many many other topics regarding programming so now let's try to talk about benefits of using function in c so there are a lot of functions that you know we could associate in using function inside rc program so the first one is modularity so when we are using functions it could provide modularity in our code so it means that we could you know define different functions we could uh readily call our functions and we could call this particular function if we need it or we need to execute certain statements and of course guys the function also provides you reusable call me it will save us a lot of space and you know it could be our code could be you know read more readable by using this particular function feature so that's readable or usable code and then in large programs debugging and editing tasks is easy with the use of functions so functions uh make it easy for us to implement our programs so the program can be modularized into smaller parts that's what i have said earlier that we could you know develop a certain module inside our c program and then we can call that particular module or statements or group of statements if we need in a particular situation and number um the the next one is separate function independently can be developed according to the need so so for example guess we could group our statements depending on the need or you know depending on the the function or or the purpose of that statement so we could group that statements and uh place it inside our c function so actually guys there are two types of functions in c so the first one is let me type it here type of functions we have the first one built in function okay so builtin function um of course the system provided these functions and stored in the library therefore it is called um library functions so we have like we are using scanf printf str strc py um crlwr strc mp cr then sdr cut and many more functions that are already available for us whenever we try to run a program so from the previous tutorials we have used the printf so as you can see this particular function we did not implement this the system provided it for us the printf and this particular function will let us display um certain um objects or statements that we want is we want to display inside our c program so to use this functions you just need to include the appropriate c header file so that's why we have here the include statement at the top of our program so basically we're including all the necessary function that we could use inside our c program and of course guys the the second type of method is what we call the userdefined functions userdefined functions okay so userdefined userdefined functions these are the functions that are defined by the user at the time of writing the program so that's basically us or the programmer that you know define the functions okay and then of course the same with the builtin function we could you know really use this particular functions inside rc program now there are there are also parts of our function in c programming language we have the function declaration we also have the definition and we also have the function call so this is basically the actual flow of the function we have the function declaration declaration and then we have the definition we have of course the function called if you want to use that particular function so we have here for example syntax for function declaration so we could um this will be the function declaration this is just an example guys on how you can declare a certain function so the syntax for that is data type and then function name and then of course open and close parenthesis and then in here you can specify the parameter list okay or the variables that we want to use inside this particular function so our example of that is like this in which is the data type and of course addition which is the uh name of our function so addition and then the return type is int and then of course the list of parameters and in this case we don't have any parameter in this particular function addition so we also have the function definition this is actually what um the actual function would look like so this will be function declaration or i mean function definition okay so we could uh this the basic syntax to this is return type and then the function name and then function arguments and then curly braces so it should include the close or open and close curly braces and then inside here is the body of the function or simply the statements that we want to execute inside this particular function so whenever we want to call this function this will be the statements that that you know would be executed inside this particular function so in order for us to call a function inside our c program we just need to specify the method name and of course we need to supply parameters if there's a if there are any and we would also need to specify the return type of our function so now let's try to implement a simple program that you know that could uh illustrate the addition of two numbers um using user defined function so we have here the main function right and then in here after the main or after the closing curly brace of our main function we could create we could create our own function right here let me close this first so you can you know see better so we could add a function here returning the total of two numbers okay so we could declare it like this in and then addition open and close cur uh parenthesis and then open and close curly braces and of course guys as i've said this is this will be the body of our function so in here we could um define local variables okay so local variables so for example we have in num one it was 10 and then num 2 equals 5 right so these are local variables meaning these are the variables that are declared and defined inside the addition method or function okay so we can say here return and then num1 plus num2 okay so that's the statement that we want to execute when whenever we try to call the addition method where i mean function so inside our main function we could call this um method addition so we could declare a variable here in answer and then we could say answer equals and then the addition so basically whatever the return value of this addition method it will be assigned into our answer variable and of course we could print or display this particular value so we could say the total of two numbers yes and then the format specifier just you know percent d and then the answer which is the answer variable okay so we could you know build and run our application application and then we have here the output the total of two numbers is 15 okay so that's how the function works and as you can see here we have defined our function with the statements inside our c function to return the total of the number one in number two and then inside our main function we have declared the answer and then the type is in of course because the in is should correspond to the return type of this particular function and then answer equals the addition and then the last thing that we need here is to display the total of two numbers and in this case 10 and five which makes it you know the value or the output is 15. so we're going to learn how to use c function arguments or parameters inside our function so from the previous tutorial we have learned how to define and declare our function inside our c program and of course we have learned how to use the basic syntax to create a function and implemented a simple function that could add two numbers okay so as i've said guys in this video we're going to focus on the function arguments or function parameters so while calling a function the arguments can be passed to a function in two ways so there there are two ways on how we could pass the parameters or the arguments into the function so the first one will be call by value and the second one is call by reference okay so in call by value way the actual parameter is passed to a function and then new memory area created for that particular past parameters and then it can be used only within that function and the actual parameters cannot be modified in the call by value uh way of you know passing the the argument into our function while call by reference so instead of copying a variable an address is passed to a function as parameter and then we could use the address operator which is the ampersand symbol i know if you're already familiar with this so address operator is used in the parameter of the called function and of course the changes in the function reflect the change of the original values so we could uh understand this better if we try to implement our function by you know creating a simple project or simple application that could demonstrate the call by value or call by reference so first let's try to create a program that would pass the argument us or it could call by value so the first thing that we're going to need is of course to it's actually the same with the program or i mean function that we have created from the previous tutorial but the difference is that in this particular video we're going to use parameter or argument so the first variable that we're going to declare here is the answer so the type is in and then we have the variable name num1 so the value is 5 and then in num2 and then the value is okay and of course guys we could declare the function so for example we could um create the function right after this closing curly brace of our main function so the first thing of course is the return type and in this case in and then the name of our function which is addition and we could say here in a and in b basically it means that this particular function would accept two parameter in b and uh int a okay and then in here we could return the value or the total value of this two parameters so a plus b okay and of course guys we could declare the function right here so we could you know add the function declaration here function declaration so you could say here in addition and then this particular function is going to take two parameters in num1 and in num2 so as you can see here guys this is only the function declaration okay and this is the function definition function definition again this is function declaration declaration and function definition so now we could try to call our function by value so for example you can say here answer and then it was um addition which is the method or the function that we have created here and then we could pass along the values of num1 and num2 okay so let me explain this first for you so it would be clear for you so we have here the parameter num1 num2 as i've said in call by value the actual parameters cannot be modified because num1 and num2 is it won't change um even if we you know change the parameters here between a and b so the value of num1 and num2 would not change even if we try to modify this in a and b inside our addition function so the actual parameter is passed to a function and then new memory will be created for our parameters e uh in a n in b okay and of course um we could display here the result so printf and then of course the statement the addition or you could say the total of two numbers yes and then the format specifier percent d and then the variable answer okay and then we could you know clean and build our application or build and run and it should display the output something like this the total of two numbers is 15 okay so you get the point this is the calling of function by value okay now if we want to try to call a function by reference as i've said we're going to use the ampersand symbol so ampersand symbol or it is the address operator and we're going to use that in our parameter of the called function so let's uh let's try to implement a function that you know could call by reference and you should see by now how you how uh the call by reference and call by value is different so the same thing we're going to declare the method here the return type is in and then the name is addition and then it's going to take two parameters with type in okay and then we could also use this in answer and then the same value for example and now guys instead of just using this num1 and num2 we could add the address operator the ampersand symbol or the address operator in c programming so basically guys uh we're sending or we're passing the address of this particular variable into our function so so whenever we change this value inside our function it's going to reflect the value of our num1 and num2 okay so um we have here the ampersand or address operator and then we call the um function right here and then display the answer and of course we need to add the asterisk symbol for this variable here or the argument and then one for the other variable b so this means that it is the operator that is used as a pointer to a variable so it's going to point the address to that particular value of num1 or num2 so of course we need to add this also in here and of course for our variable okay and then as i've said if we want to change the value of num 2 here in inside our function we could do that and it's going to reflect the changes of this num2 and num1 variable okay and of course we could still use the asterisk symbol here and let's try to run our program for now so build and run and it's going to answer or it's going to the output this way the total of two numbers is 15. okay so let's try to modify the um num1 and num2 okay for example inside this particular function we're going to change the value of our variable a so instead of 5 it's going to like maybe okay so we could do that by using this particular um variable argument we could add here the um variable a and then we could say six then semicolon semicolon at the end and we could try to display the value of our a so the value of a and then percent d and it should you know the variable a correspond to the variable num1 right so we could copy and paste this so notice that num1 equals to five here okay so let's see what's the output of this so build and run our program so as you can see we have here the the output the total of two numbers is 16 and the value of a is six but as you can see here a corresponds to the num one right num one so we have here num one plus the five and then we change the value of num1 by using the the reference of variable a and then we set it to six that's why we're getting six here and then the total of our addition is six okay so i think that's all there is to it guys for this tutorial and if you have questions please let me know in the comment section below and again guys thank you for watching and see you in the next video