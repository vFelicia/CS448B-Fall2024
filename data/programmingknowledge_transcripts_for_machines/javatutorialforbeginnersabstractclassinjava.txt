hello and welcome back to another video of the tutorial Series so today we'll be covering abstract classes in Java so a class which is declared as an abstract keyword is known as the abstract class in Java and it it can have abstract and nonapstack methods and methods with body okay so before learning the abstract class let's understand the abstraction in Java first okay so what is abstraction abstraction is a process of hiding the implementation details and showing the only functionality to the user okay so so it is a it's nothing but another way to it shows the only essential things to the user and hides the internal details for example sending sms where you type the text and send the message you don't know how the internal processing about the message delivery is done you just only see one tick that that tells you that the message is sent successfully so abstraction displays the very important role over there so so there are several several ways where you can achieve the abstraction uh first one is the abstract class and second one is interface so in this video we'll be covering abstract class and in our upcoming video we will be covering interface okay so abstract class in Java a class which declares an abstract is known as abstract class it can have the abstract and nonabstract methods okay so there are some points that you need to remember while learning the abstract class in Java an abstract class must be declared within an abstract with an abstract keyword okay if you want to declare an abstract class you have to use the abstract keyword before that class implementation okay and it can have abstract and nonfstack Method and inside the abstract class you can declare uh abstract as well as the nonabstack methods and it cannot be in in instantiated okay what is instant instantiated we will discuss and it can have Constructor and static methods also and it can have final methods which will force the subclass not to change the body of the method okay and what is final keyword we have to discussed in our uh past videos and there are some rules uh for the Java extra class and abstract class must be declared with an abstract keyword as we have discussed and now we will see when abstract methods in Java one example will try to understand it by example uh let me uh create one class abstract class okay let me increase my font size okay now yeah I will create one class abstract class bike and inside this I will create one abstract method abstract void run okay so now inside my this public class I will write uh before that this class is extends the by class we are trying to achieve inheritance over here okay so inheritance also we have covered in our past videos if you haven't checked that video go and check first inheritance and void run and inside this I will simply print running my bike okay and now I will declare my main method now inside this I will create one object of that bike class obj one which is okay and not on the it's abstract class and now if I try to call that run method over here yes now if I run this class we'll see what is the expected output by running my bike okay so when you declare this void run and now this abstract class is extending that byte class and when when you declare run and we have already declared one here you can see is implemented in abstract class and here you can see implements methods in bike okay so here we have declared this void run method as an abstract an abstract method doesn't have anybody we have to uh declare that body inside one of this child class and that's why here we it is right it it's written as is implemented in abstract class if you click here the cursor will come here and if you hover over here it implements method in the bike if you write here yes that's why my running my bike is getting printed or printed on the console and next up uh we'll see when the real life scenario of the off an abstract class okay um okay let me get into my IDE and okay okay let me just think of one example okay we'll see one example I will just comment this out because I don't need this and this one also okay uh now this is not extending the bike class anymore okay now I will create one abstract class name is sheet okay and inside this I will write abstract void draw okay and now uh I will create one more class over here sorry class rectangle which is extends the class shape and inside this class I will write the implementation for out of that draw method and I will simply print print what should I print rectangle is drawing and okay and now if I come inside my public class and I will write my main method okay and inside my main method I will create one variable of the shape class obj1 by referencing to the rectangle okay and now inside this I will write obj1 Dot bj1 Dot draw okay and now if I run this rectangle is drawing okay so this is one real life scenario we can you can create one shape class and you can write a number of the uh rectangle is there square is there triangle is there and you can try to implement that method inside that same different classes with a different implementation and you can call those uh methods inside the public class using the object of that respective classes okay and now when we will see example of the class having constructed data members and methods okay so first of all let me clear this first previous example okay now I have to clear this also okay now to understand this I will create one more class which is abstract one sorry extract class bike and inside this I will create one Constructor of this class inside Constructor I will simply print by case created okay and out after that I will create one abstract method abstract void run and I will create one known abstract method also void change gear and inside this method I will write gear change it okay and now I will create one more class uh any BMW random extends the by class and now inside this I will write I have to implement here you can see it it's showing some errors what is the error BMW class must be either declared with abstract or the implement the abstract world run method in the bike because when we declared a method as an abstract we have whenever we whenever that class is inherited by any of its subclasses then the implementation of those abstract methods should be there inside this child classes so we have to implement this run method inside this okay now in if I write running safely okay and this is pretty much about this and inside this I will create one object of the bike class bike obj1 it's equals to new BMW okay and after that I will write obj1 Dot run and obj one dot change gear and now if I run this the expected output should be a bike is created uh why why first bike is created getting printed because when we when the program execution reaches at the line number 19 uh the object of that bike class is created and inside the bike class we have declared one Constructor which is printing bike is created that's why the first line which is printing bike is created and after that obj1 dot run and the exam control flow of the code will go inside this abstract void run method and this abstract world run method is implemented inside the BMW class and we have implemented it as running safely that's why running safely is getting printed on the console and after that obj1 dot change gear is executed and inside the change gear method we have written gear change that's why gear change is getting printed on the console so this is the pretty much idea behind the abstract class in Java so I hope you got some idea of the optional class so in upcoming videos we'll be covering interfacing interface in Java this is another way to achieve the abstraction in Java so thank you for watching this video