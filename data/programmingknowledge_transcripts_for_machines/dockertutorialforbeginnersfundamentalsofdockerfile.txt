hey guys welcome to the next video on docker tutorial for beginners in this video we will talk about basics of docker file so first of all what is a docker file so docker can build images automatically by reading the instructions from the docker file and a docker file is a text document that contains all the commands a user could call on the command line to assemble an image now as i have previously told you you can use docker file and then once you write your instructions in the docker file you can build your docker file to produce a docker image and when you run the docker image it's called the docker container so let's see how we can create a docker file and then we will see how we can build our docker file to make an image so right now i'm in my home directory so here i'm going to create a directory called d1 let's say and then i'm going to cd in this d1 directory and right now it doesn't contain any files or folders so let's create our docker file in this d1 folder so i'm going to just write touch and then docker file so by convention we usually name our docker file as docker file with the capital d and this docker file doesn't contain any extension so it's without any extension so let's create this file so now i have this docker file in my deven folder right so now i'm going to open this docker file in any editor you can use the editor of your choice right from the nano vim or any editor i like to use the visual studio code editor so i'm going to use that so i'm going to just write code and then i'm going to just write dot which is going to open the current directory in my visual studio code so here i have this docker file right now in visual studio code there are many extensions you can install related to docker that's why i like to use this visual studio code and straight away when i open this docker file in my visual studio code i can see this popup which says docker extension is recommended for this file so you can click on this install button or you can just install this docker extension from this extension option here also so you can just search for docker here and then it will give you the most popular docker extension right so just choose the most popular one from here and i'm going to just install this docker extension and once this extension is installed it's going to help you with your docker files and docker commands in general okay so there are bunch of keywords which you can use inside your docker file and each keyword means something so we will start with the arg keyword so this arg keyword we can use to provide any argument as the name suggests and i'm going to explain this arg in detail after the other keyword which is from so here what i'm going to do is i'm going to just write version here and version equals i'm going to give here is 20.04 so version here is the name of the argument and 20.04 is the value of the argument now after this we are going to use another keyword which is from now this from defines the base image used to start the build process so there are many base images which you can find on the docker hub and we are going to use one such base image which is ubuntu and then after colon you can choose which version of ubuntu base image you want to have so here uh as i have defined this arg is equal to 20.04 so we are going to fetch the ubuntu 20.04 from the docker hub as our base image so how we can use this argument with this from uh keyword you just need to use this dollar symbol and then inside these curly brackets you just need to pass your argument so my argument name is version so i'm passing this argument here this means that we want to fetch the ubuntu 20.04 image from the docker hub now this from instruction supports variable that are declared by any arg instruction that occurs before the first from and an arg declared before the from keyword is outside of the build stage so it can't be used in any instruction after from so now once we have the image we are going to use one more keyword which is the run keyword so this run is the central executing directive for the docker file so this run you can use to run commands using the docker file so for now i want to run inside this ubuntu base image apt get update command and also i'm going to give the flag y for yes and now let's move to the next command so the next command i'm going to use here is the cm d command so the cmd command can be used for executing a specific command within a container so let's say i just want to run the bash inside the container so i'm going to just use these square brackets and with the double quotes i'm going to just write bash here so this is a very basic docker file now let's see how we can just use this docker file to build some image so i'm going to open the terminal inside my visual studio code editor and as i can see i'm in my d1 directory which i have created and here i have this docker file right so now let's list out what are the docker images we have on our system so i'm going to just write a sudo docker images command to list out all the images and now i want to run or build this docker file and create an image so right now we have hello world and i want to create one more image using this docker file so to build a docker file you can give a command build so just write sudo docker build and then dot so when you run this docker build command the current working directory is called the build context and by default the docker file is assumed to be located in this directory but you can also specify the directory path using a flag called hyphen f that we will see a little bit later but just give this command for now which is sudo docker build space dot so now you can see that when we run this docker build command the build is run by the docker demon not by your cli so the first thing a build process does is to send the entire context to the docker daemon and that we can see here sending build context to the docker daemon now in most cases it's best to start with the empty directory and then you start adding your docker file in that directory now when you run this docker build command you will also see that these layers are fetched from your base image from the docker hub and also you will be able to see which step is executed so the step one out of four is this arg step step two is the from step and at this step it's going to pull the base image from the docker hub and you have some intermediate layers here which are created and then we have used this run command which in itself has created its own layer and it has installed the updates using this updates command and at last we have given this cmd command so now let's give the docker images command once again so i'm going to just give sudo docker images command and now you're going to see uh this ubuntu base image which is fetched from the docker hub and you have this image which doesn't have any name or tag because we haven't provided any name or tag to our docker image and this only have this image id which you can see here also which is successfully built this image id so using this image id you know that your image is created here now let's say you are in some other directory other than the directory in which your docker file is there so for building a docker file from some different directory you use the hyphen f flag so what you do here you just use sudo docker build and then hyphen f and then you just give the path to your docker file so when you give this command and then you need to provide the context also so you need to create this context inside this current directory so when you give this command it's also going to give you the same result so because we have effectively given the same command so we don't need to modify our image so once again when you give the docker images command it's going to show the same image because your image is not modified and you haven't changed your context which is your current directory now as you can see we don't have any name and tag to our image so if you want to provide the repository name and the tag for your image what you can do is you can give this docker build command and then give the hyphen t flag so using this hyphen t flag you can specify the repository and the tag at which you want to save your image so let's say i want to give the repository name as my underscore app and the tag which i want to give here is let's say one so after the colon you can provide the tag also here so when you run this command and don't forget to provide this context which is dot which is the current directory and then press enter it's going to just create the same image and you will see here an extra step is shown here which is tagged with my app colon 1. so at this step also you will observe that docker is smart enough to know that you want to create the same image from the same docker file and you haven't changed your docker files so it's not going to change your image or create or recreate your image once again because we haven't changed our docker file right we have just give the repository name and the tag so now when you give this command docker images then you will see that the repository name is my app and the tag associated with it is one so this is how you can give the repository name and the tag now if you will observe here we have our base image also here which is ubuntu 20.04 so in future if you create different dockerfile and it requires the same ubuntu docker image and the same tag which is 20.04 then your docker build command will be smart enough to know that and it's not going to pull this image from the docker hub again because you already have this image on your local pc so as i said we have fetched this ubuntu image and the version for it is 20.04 here in the version if you don't know the version you can always write the latest so just write latest here and it's going to just fetch the latest version of the base image you want to have so let me just save this file with the latest version and then run the same command with hyphen t my app and the tag will be the same and the context will be the same and now you will see that it's going to fetch the latest version of ubuntu here and now when i give this docker images command you will see the tag latest here instead of 20.04 which was this more specific version i wanted right so latest is the latest version which will be available on the docker hub for this base image so those are some of the basics of docker files we are going to learn about docker files in the upcoming videos also so stay tuned and i will see you in the next video