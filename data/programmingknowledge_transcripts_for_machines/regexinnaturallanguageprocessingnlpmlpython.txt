hello guys welcome to this tutorial and this one we are going to talk about physics or regular expressions it's a very important tool to have in your natural language processing journey we're going to use it a lot and it's very very important they can't tell you how much important is first let's take a look at the definition according to Wikipedia and we do have expression regex or rigid expression sometimes called rational expression is a theoretical computer science and formal language theory a sequence of characters that define a search pattern usually this pattern is then used by string searching algorithm let's find our find and replace operations on string or for input validation so a long search word this is a sequence of characters ahead pattern characters that can define and find patterns in text replace them and search for them so what's my ability to do in this very busy physics is covering the regex functionality in python and there is expands and the grouping of the matrix and an important thing to mention here is physics is not a python thing it's already implemented in all the languages and basically every every language try to implement reduce in it so it's not only in Python it's found in all the programming languages so first of all it's in Portuguese library from Python and this physics module is in your module in Python there was the re module you might find other tutorials in put on re this is also the regular expression library but wizard is a new one and it's going to replace re eventually so it's pretty used this one so let's define the text this is the tweet basically hello guys this is my first tweet and as you see here we have some hashtags and we need to extract them our main feature or our main goal in there is to attract the B hashtags from the text so first of all let's see the first function we are going to deal with is find all find the all function is a function that you pass a shrink or a regular expression and it find it inside some kind of text so it's search for the hash tags inside tweet and it finds all the hash tags like if you count them there's one two three four five and six and these are the six hash tags that can be found and fixed but what if we search for another like MLB going to find it and these these operations does not have anything interesting in them actually string functionality already do this with without any headache or Frederick's but let's keep doing we will know later how to use the power of Frederick's there's a function called sub which is basically the same offered place in the string except that it accepts regular expression and it can go further than just replacing some text in the strength so we passed the string that we want to substitute we're going to change and you want to change it by what they the string that you want to change it so here we basically change all the hashtags into an underscore and you can see here all the hashtags has been translated to an underscore and there is a function called split this is pretty much the same as the restraining the split function but it also accepts regular expressions so it will come in handy when we introduce the regular expressions over in our veterans so let's take a look at the regular expressions or button these are the veterans here the regular expression pattern and this is its functionality like for example a to z or a suit in line you basically tell the regular expression that you search for our character in the characters from A to Z and these are in small letters in lowercase so he will only search for the lowercase characters the dot operator the operator basically search for any character except for the new line here the /w match any word character like you all the characters from A to Z either small other cases or lowercase it match either of them and all the numbers and the underscore the the inverse of this is the d /w but in an uppercase basically any character that does not mention here like all the characters that are not 8z and 0 to 9 and underscore like apt for example or hashtag and in this kind of stuff backstory is the boundary between the words physically spaces the fact the /s match any single white character like a space for a new line or return or any of these if you make an S in our case it matches any nonwhite character and these are the backslash T backslash n backslash R these are all the newline and the tab characters that's using your normal files a backslash D basically is a decimal number it's just for any digits from 0 to 9 the anchor here searchform that matches the start of the string and the lower sign matches the end of the string so so let's make use of these three good expression like for example here we will find all the hashtags followed by /w small the /w basically is any character so we are going to search for any hashtag followed by one character in the tweet so when you run this so you can find that it catches all the hashtags and the following characters so you can see here that we have mood for now we have one word one hashtag forward by a character if we add on the capture so we will have two characters if we had three and so on but what if you want to make it like generic like for example a character or more through this there is the repetition cases there's a liquor exhibitions actually for this kind of stuff also like you can see the question mark basically what's what this exhibition tell is that it's going to search for are you be and why what can be there or not so the character that is followed by question mark is optional it can be there or not the asterisks make the character right before it it will be appearing zero or more times so the difference here is that it will only appear once ordered una beer like it's only once or nothing and the Asterix here tools that we are going to have either a character and we cannot have a character we can have multiple characters the blood sign tells that are going to have one or more deaths so we cannot we cannot have zero character of the why you have to have at least one character so these view three a wild card you can you can say that because you don't have to specify specific number of characters of course except for this one you have to have one character but what if you say for example you need to have three exactly characters the for example for the digits for example so this one says we need a digit and we need to have three of them there's also different cases where you have like fruits number three or more or three to five these is basically you know like growing by number you need a specific number of values so let's go and try to extract the hashtags once more so we now say that we need the hashtag followed by one or more character so that is that's it that's how the the hashtags of course you can have hashtags like more complex like for example having a hyphen or something so this is the basic way of extracting idea hashtags also we can extract the words in the same fashion like for example you search for a character or more which is basically the words notice here the exclamation mark is not it does not appear here and we have here at explanation mark and also we have a comma and they does not appear here so this is basically only extract the words inside your text so let's do some operation if we need for example to substitute all the hashtags with a hashtag word capital hashtag word this will be useful in the national language processing for example if you need to like replace specific characters or specific patterns of specific words to remove them like in this case for example fee we need to change the hashtags into a a hashtag word so you can see you see how to use it using the sub function you define the regular expression and then you use the words or the expression also that you can replace them by in this expression we change all the white space into the underscore and basically all the non characters like exclamation mark and the comma and all these can serve or change it into underscore as you can see so another key concept to talk about is the grouping character like for example here let's say that we want to search for Python but with a lower case for a upper case so you can use this expression which is basically the square pieces here use the square braces here means any of the inside capsules like you have you can have B capital or be small and you can you see there for example you have Ruby that ends either with Y or E this for example mean all the vowels you can have any unfolds this for example match all the numbers from 0 to 9 this matches all the character from A to Z and lower case this matches all the character from A to Z bugs upper case this match all the characters small lower case and upper case and number and if we use anchor here inside this square pieces so this means any characters except for these characters so it match any except for the royals here also it match a except for in dishes so let's see a simplification on them here we have some text the graph language I love to write and by what a cool language button is and the Pyramids of Giza are so huge you can see here that here we have Python start with B Y and B Y also is a shortcut for Python and here we talk about Python but here we talk about the Burmese so what if we need to do like for example X classification that this side whether or not this input text is about pythons talking about Python so it going to be in our interest or not so let's take a look at this for the text in text we're going to loop in this text ray and for each text we will have a regular exhibition that finds all the Python text versions so let's walk through this expression first we have the Python word this is the character this is the expression that we talked about video so this will match Python either with B capital or a small letter and this is our character here the or operation can be used also with regular expression so you can use multiple expressions and the expression will match either of them so now we have also another expression which is basically matched by the by word either be capital for P small but this this expression need to be ended with the boundary as you can recall the backslash B here means a boundary of words so backslash B here means that this will be a word and will not have any following text so for example the pyramids here it's B Y but it has four main characters so this is not a boundary this is a words here characters so it does not it will not be matching here so if the Python detected they going to print this interesting because this is a phrase that they're interested in else we are not going to print as we're going to print on so here you can see that the Python is a great language is interesting it is indeed have a Python inside it this I love to read in by interesting what's a cool language Python is but you can see here that the pyramids is not it does not mention any of these regular expressions as you can see so another examples let's see some examples on the regular expression for example here we have some text for this example we search for regular word but only in the font of the text like the very first character so here's the regular expression for this search for the regular that is only at the beginning of the text so we have to layer again we have first one here and we have the second one here but we're also only interested in this one we need to capitalize this one so let's see the output of this cell and you can see here this bigger expression the first character got capitalized of the later one was not changed that backslash came here you can see here because this string have multiple lines so the backslash n because it's lies so let's see you can search for a number for example here we need to search for a year so it's almost 2020 so happy new year so we'll search for any digits that have four of them like for example it's almost 2020 Happy New Year for all of you for example so let's see what the elbows will be it will only parse the number that is that has three digits at full digit story so it's the year here let's see another example here we need to change the numbers inside the text into just the word number you can change here any character between zero and nine one or more of them will be changed by the word number and this is pretty useful when we come later into sentiment analysis and text classification as we will talk about this later actually but it's very useful to have inside your tools so let's take a look at another case here for example see we have this text we extract the email from the text and we also need to know the details of the email okay like for example here we need to extract from this text the username and the company so let's take a look at this expression we're going to use search function of the regular expression and what search does basically it's allowed us to extract group of the regular expression notice here that we use the odd before the string to emphasize that this is a row string like but to them if we have any characters inside it do not deal them like for example the backslash N and a backslash R and all these kind stuff do not treat them as a newline character just treat them as normal character it's a wrong string let's take a look at the expressions of ad the parenthesis here emphasizing group so this is a group one and this is a group 2 sorry this is a group 2 so what we are searching for here is we search for any basically a character or dot and notice here that we the backslash dot here to emphasize that this is a literal dot because if you use a dot without a backslash here we said any week it's like we're saying basically any character but we use the slash to emphasize that we search for the explicitly leap dot the death star dot and also we are going to add the because the username may have so the username in half I or a dot for any character and one or more of them okay so this would be followed by a at and then we will have the address here and basically the address or the company will be the same as the username so inside the email address and this result will be saved in a match and in this match you can have the group function which basically return the whole expression the this whole expression and there is a group one which basically return the first group which is the first parentheses and group two which is returned the second parentheses or the second group so let's take a look at the output and you can see here it returns the the match group which is basically the whole regular expression that we match it and then the first group which is the username and the second group which is the company so that's pretty much it for this video so let's recap what we have done so far we have we now know how to define regular expression have to search for a battery inside of text and how to process text patterns and how also to extract useful information from text and in the next video we are going to start making a handson project where we are going to extract useful information from tweets so see you guys in the next one