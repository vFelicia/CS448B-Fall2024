hey everyone in this video we will make our first video game the snake game if you haven't heard of it then it's a game where there's a snake you move it around the screen in order to eat the food you should not bite yourself while going in several directions and also you should not collide with the boundaries simple let us think through how we would carry out all this and try to write an algorithm so i have this list of steps that we would need to carry out to make the snaking okay cool our snake must have an initial position you get that right it should it should have a start position so let's define that it should also have a body it can be done using a list basically it would be a few rectangles at consecutive coordinates i hope you can imagine that the body of the snake would be nothing but a few rectangles arranged in line one after the other we would also define the food position which would be randomly picked every time the snake eats the food cool so for random picking of the spot we would also need the random module then we would also keep track of the score and increase the size of the snake whenever it eats the food fine we would define a game over function whenever the snake touches the boundaries or bites itself we would show game over on the screen also we would need to handle the movements of the snake by key inputs we would use the key module here cool so these are the seven parts we would need to build and then we would put them together to make this snake game work so first we will initialize the snake's start position initial position also let me define the rate at which the snake moves the refresh rate fine then this is the clock object that we would use for the frame rate now according to the second point of the algorithm let the snake have a body we would need a body for this thing basically the snake's body would be consecutively arranged rectangles on the same line as i said before i have initially taken two rectangles you can take more a smaller initial size would help you notice the increase in size of the snake after it eats the food for the food we have this random coordinates taken then they are multiplied by 10 because we want no overlapping with the edges so that the snake doesn't go very close to the edges as we are going to set a condition of the game over if the snake touches the edges i have taken this food boolean so that i can decide when to increase the size of the snake you will understand this when we make use of it and then the score variable is set to zero now i have this find a function for displaying the score on screen just like we displayed text on screen created a font rendered it used rec to get the text on surface then use split this was just getting the text but the main part is in the game loop that is incrementing the score every time the snake eats the food after this i have the game over function i'll define the game over function this two is just for getting the text in the mid screen once the game is over once the game over conditions are met they are also defined in the game loop cool this time dot sleep is used to pause the program for two seconds and quit automatically once the game is over according to the next step in the algo we need to handle movements of the snake for that i have taken two variables the ir which decides what direction to move in presently let it have an initial direction and dir underscore next which keeps the track of the input given now we have the game loop the events loop we saw the little program of the key module in the second video for example that even sloop is pretty similar to this one i have set the variable next underscore dir as the pressed arrow key so when i press up the next dir becomes up and similarly for left it becomes left and now i have two sets of conditions now this set of condition updates the current direction if the current one isn't a complementary arrow key please understand this means if the arrow key press is down while the snake is going up no changes will occur as right now while traveling along the y axis the only next possible move can be in the x directions same with the rest of the directions like if you are traveling in the x direction okay in the x axis you cannot reverse your direction cool and this condition now is for moving the snake just as we move the object in the last video depending upon the key pressed the coordinate of the snake's position is changed then we would try to increase the length of the snake every time it eats the food so i would insert every coordinate the snake travels through and pop all except the time when the food and snakes coordinates overlap okay i hope you got that this time i would change food to false so that i can pick a new spot for drawing the once i've done that then again i set food to true also when snake and food coordinates overlap the snake eats the food i will increase the score great we are almost done here all i am left with is the drawing my f is drawing my figures and setting up the game over conditions let me draw the snake it is quite obvious we would repeatedly draw the rectangles using a for loop and this is to draw the food now there are three game over conditions touching boundaries along x axis that is going because beyond 0 to 600 minus 10 i have written 600 minus 10 so that you can understand that it is the size of the screen minus the size of one block of the snake's body okay similarly for the yaxis it's the second condition and the third condition is when snake bites its own body okay it's same like overlapping with the food coordinates here it's just that we have taken a for loop and the game over function will be called if the snake's first block overlaps with any of its rest of the body coordinates okay that's why i have started with the i've started with the first position not the zeroth position of of the list okay cool now the show score is called all the time i want to see the score score on the screen all the time and then we have updated it use the dot update and use the tick to set the frame rate cool let's run this program and check if everything works fine what all we need to check is if the snake moves freely then if the fruit is respotted once eaten at a random spot also we would check that the game conditions game over conditions are working fine we would also check that the snake size increases every time it eats the food so let's run this and check out this four or five conditions so now if i run this i can see my snake moving in several directions eating the food food is getting respotted cool and yeah the score is also getting updated and let me see if it gets bumped into a wall the game should be over before that you can see that the snake is longer in size than it was before cool so let me bump it into a one wall yeah the game is over cool and the screen also went away after my game was over so this game can be more enhanced you can print why the game was over or you can put in some music when the game is over using the mixer module make a different function and call it in the game over function this was the very basic snake game made by pygame thank you