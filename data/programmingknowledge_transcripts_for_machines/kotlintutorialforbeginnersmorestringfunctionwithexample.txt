in the previous video we were discussing about string functions and in this video we are going to continue with the discussion okay so uh in the previous video we have discussed about the uh the the length function the get index function the subsequence function and the compare to function okay so in i think that should be clear to you okay so now next is the equals function so the equal function it indicates whether some object is equal to the other object or not okay so it is just like the comparison operator equals to equals to okay so what i'll do is i'll just okay so you can guess the written type of the the function is boolean okay because it returns that whether it is equal to or not so when i uh say a equals to equals okay so it is equals and i say b b and when i when i run this so you can guess the output the output is false because they are not equal okay so as you can see here the output is false because they are not equal and when i do c nd c and i compare it with d and again when i run the program now the output must be true because they are equal ok no it is false why it is false okay so i have done some mistake i have to compare c with f okay sorry so yeah when i compared c with d the data type is only not same one is string and other isn't so there is no chance of them being equal so it is true now what happens when i uh change one index in the string so you can see the output is false so it is only true when both string are equal in each and every manner possible now it is having some suggestion now we will go to it and plus press alt plus enter it is suggesting that we should replace it with equals to equals to sign as i already mentioned that it is nothing but the comparison operator equal to equal to okay moving on to hash code the hash code returns a hash code value for the object okay so you might be wondering what uh what the hashcode is i'll suggest just go to the google type hashcode of a string and you will get to know okay so i want the hash code of let's say string c so so i'll just type c dot core okay and when i run this program i'll get the hash code for c string so as you can see in the output screen the hash code for c string is this okay then as let's say i want hash code for all the strings possible okay so i'll just mention all the strings a b c and f we have four strings a b c and f okay so when i run this program it gives the hash code for all these string now if you note that these two values are negative and these two values are positive so why is that the hash code could be positive negative or any value okay it's just a representation okay so now next is the plus operator plus function so what the plus function does is okay when i use the plus function let's say i have print ln a plus b now the a plus b is another string okay so i can make another function used on this string also so i can use the plus function again also okay and it's the plus function is not restricted to string only so i can use the plus function and use any data type you can i can use here d also okay so when i run this program so you can see the addition of all this a b c and d so it gives like hello this is a coder and my age is 19. okay so what there is a mistake that there is no space given because i have not given any spaces here here or here if i give spaces here then it would be a perfect code so that was all about the plus function now instead of using dot plus i can also do that i just i can just do a plus b plus c okay and when i run this program i can find that it gives hello this is a coder and my edge now this is string con concatenation okay it it is nothing but uh it just contained the string it means that it puts three two or three string or many string together and make it a new string okay so plus function returns a string obtained by concat concatenating the string with the string representation of the given other object okay so that was all about the plus function next is the two string function so we have already uh talked about the the two string or two end or two all the data type conversion function so it is nothing but suppose i have a i have a integer that has a value that is a phone number okay so okay okay a is already defined i'll just give it name as phone okay so i want to store this in a string so what i can do is i can just write phone and then dot tostring to string so what it does is it converts the phone this into a string so when i print this when i go ahead and print this then you can expect the result it is a string so you you can see nothing in the result the result would be same the output is just the number itself but it is a string okay so two string function uh returns a string representation of any object okay then there is last index function the last index function returns the index of the last character in the character sequence and minus one if it is empty so i have here like like i in these two string i'll try c and f so what i'll do is i'll just go to the end and yeah so i'll print the last index of c first okay so i'll just type c dot last index okay and i'll also print the last index of f and now i'll run this program meanwhile i'll go to the c and f strings now as we can see in the output the first one is 13 and the second one is 12 so the last index which is this so this is 0 then 1 2 3 4 5 6 7 8 9 10 11 12 and 13 so the index of the last character is 13 in this string and the index of last character is 12 in this string f so it just returns the index of the last character okay so now you must have no doubt in the last index function okay the next is index of function so the index of function returns the index within its string of first occurrence occurrence of a specified character starting from the specified start index okay so index of function has three parameters basically the first is the string so that is a b or c whichever string i am providing it second is the start index okay so from which index i should be looking for the character so suppose i will just explain it and third is the ignore case uh just ignore that so it is just telling the uh it should be false okay so uh okay it is a boolean you know case is brilliant so the basically what is in index of so i i'll say that index of i and string in string b okay and starting start index is 0 so it will give the third eye okay and when i'll give the start index of three value three so it will give me this i okay so i'll just go ahead and use the function so i'll print in string b i can do what was that index of okay and now i'll mention the character which uh which are of which index i am finding so i'll mention the character as i okay and then i'll mention the uh start index okay so note that it is giving a red i in red so why is that because i i haven't mentioned the character in single quote okay so i should only mention the character or character in single code and string in double quotes okay so then i'll mention the string start index so i'll mention the start index at zero at first and the ignore case as false okay so now i now i'll go ahead and run this program so the output of this is 2 so i'll go to the b string and so at 0 1 2 at index 2 there is an i ok so now what if i start with an index three and see what is the output okay i'll start with index three and run this program so i can see in the output that the result is the output is five so i started with this this index and this is the third index then fourth index is empty and then fifth index is has an i so the answer is the i is at the fifth index starting from the third index okay so it just found the first i from the start index and ignore the rest of it so i'll just find d from any index okay so finding d from n index doesn't change anything okay because d is only mentioned one time it it matters when d is uh when the start index is after 11 okay after 12 because d is at the 12th index so the index of just gives the index of the mentioned character from any index okay so i hope all the functions should be clear to you by now okay so thank you for watching this video in the next video we will be covering functions thank you