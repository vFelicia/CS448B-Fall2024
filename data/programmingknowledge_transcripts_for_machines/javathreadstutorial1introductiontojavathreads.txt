hello guys welcome to this course on introduction to threads in Java now what are the objective of this course the first objective is to give you the overview of threads in Java and this video is all about that in the next video we will see how to create our first application which uses threads and we will get familiar with the Java thread syntax and API and when we have the knowledge of how to create threads in Java we will move to little advanced topics in Java threads like multithreading synchronization or thread rules and some of the advanced topics now first of all we need to know the difference between multitasking and multithreading now what is multitasking multitasking refers to the computer's ability to perform multiple jobs concurrently and one of the examples you can say is your UNIX system or your operating system itself so for example your computer can run different processes like you open Google Chrome you open PDF viewer or you open some presentation you want to see a video in some media player so these are all different processes and the ability of your computer to handle these different processes or different tasks is called multitasking right now on the other hand a thread is a single sequence of execution within a program and we will see what this means in the later slides but I will give you an example of thread for example your computer is running some browser for example Google Chrome and this is considered to be a process so Google Chrome is a program right now whenever you want to open multiple tabs these tabs are working in parallel right and to achieve that you can say these tabs are working on the treads right so a thread is a single sequence of execution in a program so you can say different tabs in your browser are different threads and your browser itself is a program so multithreading refers to multiple threads of control within a single program for example multiple tabs and each program can run multiple threads of control within it as I have given you an example of this browser now what is the difference between concurrency and parallelism now consider you have one CPU in your computer and you want to run two processes now how your CPU manages this is using concurrency so your CPU allocates the priority to the processes and whichever process have the more priority at the given time of interval it is executed first so whenever your CPU have some you know time to execute the second program and it has the priority it runs the second then the first then the second so it utilized the full capacity of your CPU now in the other case for example you have two CPUs and you want to run two processes you can run one process on a single CPU right so process one on CPU one and process two one CPU two and these processors are independent of each other so this in this case we can say this is parallelism and this is concurrency right now two terms one is process and one is thread and what is the difference between threads and processes once again I give you the example of the CPU so you have single CPU and as I have given you an example in earlier slides your CPU can run different processes for example process one is your PDF view or some kind of PDF your process two is your media player process three is your browser for example google chrome process for is some kind of presentation is running on it right so these are different processes running on it so what is a process and executing instance of a program is called process so process one process to process three and process four so these are the executing instances of a program now a thread is a subset of a process so for example we take the process 3 which is running Google Chrome and this process can run different threads for example different tabs are running on the basis of different threads right so a single process for example google chrome is running different tabs for example different threads right so a thread is a subset of a process now threads shares the address space of the process that created it so processes have its own address space so this process have its own address space this process have its own address space and other processes also have their own address space but multiple threads share the address space of a process so different threads in this process will share the address space of this process right so this is the difference between processes and threads now there are threads good for so there are different situation in which threads are good so first of all to maintain the responsiveness of the application during a longrunning task so for example you write a program which collects some data from some device and you want to give this data on the basis of requests from client for example right so you want to collect the data in parallel with the catering of the clients request so in this situation you can use threads right second is to enable the cancellation of separable tasks for example you are collecting data with two devices and you no longer want the data from one device so you want to cancel this task right but you don't want to you know cancel the task which is collecting the data from the first device right so you can cancel this thread using you know some piece of program or code right now the next is some problems are inherently parallel so you cannot do anything about this for example I have given you the example of tabs right you want to run two tabs or two videos in two different tabs of your browser and both are running in parallel so how will your browser handle this you it can create a thread for that right next is to monitor the status of some resource for example your database or some API is and system demands it like your swing applications in Java demands it right so these are the situation in which you can use threads now what is an application thread so as we all know that whenever our Java program is created its run on the JVM which is Java Virtual Machine right so whenever we execute a java application the JVM which is Java Virtual Machine creates a thread object whose task is to define a main method and it starts the thread as we all know every Java program has at least one main program and only one main program so whenever you create or whenever you execute this program your JVM creates the threads whose task is to define this mean method right now the thread executes the statements of the program one by one until the method returns or this thread dies right now in the last how we can create multiple threads in our program so each thread has its private runtime stack and if two threads execute the same method each will have its own copy of local variable the method uses however all threads see the same dynamic memory okay so two different threads can act on the same object and the same static field corn currently now how we can create the threads in Java this we will see in the next video programmatically how we can create the Java threads by writing some program right but basically there are two ways to create our own thread object one is sub classing from the thread class so there is a thread class in Java and then instantiating the new object of this class okay so sub classing from a class called thread and we will instantiate a new object of this class and then we can create the thread or otherwise there is an interface called runnable so implementing this runnable in interface will create a thread also but in both cases we need to call this method call run which should be implemented right so this run should be implemented in both cases and this is what we are going to see in the next video how we can create our first program using threads so that's it for this video I hope you will see the next video also so please rate comment and subscribe and bye for now