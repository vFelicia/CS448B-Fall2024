hello guys welcome to the next video on Java programming tutorial for beginners in this video we will see what is an exception in Java and how we can handle exceptions in Java using try catch block so first of all what is an exception by the official definition an exception is an event which occurs during the execution of the program which can disrupt the normal flow of the program's instruction ok so let me give you an example for example I declare an integer variable and I initialize it by some value for example 100 okay and then I divide it by 0 and we all know that whenever some integer is divided by 0 it gives us infinity and Java program is not able to handle this situation right so let's try to print something for example this out and I'm going to print this line after the Declaration of this variable like this so when I run the program if I see this that means this declaration is valid for me right because this initialization is successful and I will be able to see this line if I will not be able to see this line that means the initialization fails so I'm going to save this program and I'm going to run my program and you see in the console the exception in thread mean occurs and Java gives us the location of the exception or error and this is at line 6 which is this one right and which exception occurs here are automatic exception occurs so this infinity is not handled by the Java okay now in these situation where Java is not able to handle this exceptional situation what we can do is we can catch this exception by using a trycatch blocks so normally how we can write the trycatch block just write try and then this curly braces and and the curly brace and after that you need a catch so catch and in the brackets you give the situation which you want to handle and in here in the catch you can print the situation or you can do whatever you want to do after handling the exceptional situation okay so now I'm going to place my code inside this try catch block okay and here is the exception we want to handle so this code is throwing this exception called arithmetic exception okay so we want to handle this here so just write arithmetic exception and then give the variable name okay and in here you can even print this value of the exception which is thrown which is this exception exactly but let's run the program and then see what happens so now when I run the program I can see this line printed that means the exception is thrown but it's caught by this try catch block and then we come to the next line of code and we are able to print this line now in order to handle the situation after the exception so for example we want to know which exception is thrown by this try catch block inside this we can handle this situation of exception for example I want to print this exceptional situation so this arithmetic exception will handle this infinity situation and we can print it using this II object of automatic operation so we to print this exception we can just write system.out.print line and II okay and let's save this program and run it once again and now we can see this exception is printed this is due to this line okay and then our normal program execution is happening which is printing this line okay now in this trycatch block you can add multiple catch block so you can handle multiple you know exceptional situations okay so for example I can do something like this I'm catching this exception and automatic as exception and I want to handle one more exception which is the general kind of exception I don't know what kind of exception this is this so I will use this general exception okay and then I'm going to print this okay and now also it's going to execute the same program in the same way but in the case of exception other than this exception which is this one this code is going to execute okay so now let's add some more exceptional situation so for example I will declare a variable which is an array outside my trycatch block and inside my trycatch block I want to print the third element of the array we know that the initialization of array is with index two so third element is out of scope of this array right so let's print this and I'm going to declare it as variable B because a is already here okay and I'm going to print here the value of B 3 so the value of B at index 3 okay and I'm just going to write and plus okay this I want to execute now let's see what happens I'm going to save this program and run this and it's going to give me this automatic up or exception once again due to this line so let's let me comment this line for now okay and let me save this once again and run the program once again and now you can see this exception different exception is thrown and which is caught by this bigger exception or the exception which has more priority for example okay so this exception which is array index out of bounds exception is handled by this general exception here which is this line okay so if you don't believe me let's comment this code and this code here okay so and let's run the program once again and you see the same exception so it is caught by this exception okay you can even do just copy this exceptional condition here and paste it here okay and then it's going to give the same result which is array index out of bounds exception okay so exception class is a general class if you don't know which exception is thrown by your code you can use this exception otherwise if you know that your code can you know through our automatic exception or array index out of bounds exception then you can you know handle the specific exception and always remember that you can add multiple catch blocks with your try block okay so one catch block to catch block you can even handle three catch block and in this situation for example I want to handle this array index out of bound and when you do something like this it's going to give you this error bubble here and it says unreachable catch or let me save the program and run it and let's say what it says it's unreachable catch block why because this general exception class has more priority than this array index out of bounds exception so this should come at the last okay so when I do something like this I'm going to cut this and I'm going to paste just below this array out of bound exception here then my error will be gone so always remember this exception class should go at the last okay and other exception like arithmetic or index out of bound will be above it because they have the lesser priority okay and it's this exception is more general exception you want to handle okay so in this way exception works in Java and you can handle exceptions using try catch block in this video we will see what is finally block in Java and how we can use it with try catch block in Java so first of all what is a finally block the finally block always executes when the try block exists okay so generally you you use finally block when you want to add a trycatch block with your code okay and the property of finally block is it always executes whether your exception occurs or it doesn't occur it doesn't matter what the code does it throws exception or it throw exception this finally block is always executed so using this finally block you have always the chance to release your resources okay so let me give you an example in the last video we have seen that we can use a trycatch block something like this and this is the code which throws an exception because any integer which is divided by zero will give an infinity and then Java will throw an exception for that and which exception is throws it throws arithmetic exception right now to add a finally block to a try/catch block what we can do is we can just write finally and then in the curly braces you can close it okay so this is how you add finally block to your pry cache block and the property of this is it's always executed so for example I can print something here for example finally called okay and let's add this print message here and here we can say catch called okay and let's save the program and run the program and in here you see here it gives you this finally called message right and when I just scroll a little bit above it prints catch that means this code throws an exception and then this line is printed and then it prints the exception which is which have occurred and then at the end when the exception is thrown and caught by this catch block at the end this finally will execute okay and this makes sure that you can release all your resources or this can be used to you know do the final book whatever you want to do after the exception or even if the exception doesn't happen then also you can use in most of the situations okay so it's a good practice to use finally with your trycatch block okay and there is only one situation where this finally block will not be called and this situation is when you call a system dot exit method inside your try block so for example I do something like this system dot exit with some integer here for example 1 and I will comment this code and when I run the code then what happens see nothing happens why because we have called system dot exit and it exits from the program and this is the only situation where this finally will not be called in any other situation if the exception is thrown is if the exception is not thrown finally will be called okay now to understand this situation in a better way let's create a method for example public static void or let's return integer here and let's say return int okay let's save this method only return integer okay so and inside this I'm just going to copy and cut this code which I have in the main and paste it here okay and in the last at the last what I want to do is I want to return some integer so for example I want to return the value of a right so I want to declare this a outside my try block okay and for example we don't divide this hundred by zero so it's valid situation and we want to return a right so in here I want to delete this and I will return a OH and for example it throws an exception and it goes here I want to return a here also and in here also I want to return a okay so in finally block I want to return in this situation we will see later but for now I want to do something like this and in here I just want to call my system out so this out and in here I just want to call my return int method okay inside this okay so let's run the program and let's see what happens so I'm running the program and it returns one hundred and 100 is printed here and then finally block is called after the try block returns so even if your function returns this finally block will be called okay so it doesn't matter if you return from try block generally you would think that you are returning from here then after return no code will be executed but for finally it's an exception finally will be executed even if you are returning in the try block or even in the catch block also so let's divide it by 100 or divide this by zero not here but for example two it here a is equal to eight divided by zero okay so it will throw right so it will go here and then exception code will be called and then let's see what happens so save the program and run the program and once again we can see catch is called so it throws an exception it goes here and it first of all it calls this finally block which prints this message finally called and then only we or be able to see this hundred which is returned by this return so it doesn't matter if you return from the try block or catch block finally will be called in that situation also now there is one more situation which can occur for example I want to return from the finally block also so for example right now I have assigned a is equal to hundred right and in the finally block I can override my return value for example I can do something like this a is equal to thousand or five thousand okay and then I can return a now what will be returned from here will it return 100 or will it return five thousand let's see what will happen so let me do this after this here and what I'm going to do here I will save this program and I'm going to run it and you can see that finally over writes your return value also okay so OH ideally it should return 100 if you don't return from finally right so I don't want to return from finally I will save it and it will return hundred like this okay but when you return from finally and you want to change the value which you want to return in finally then finally will overwrite your earlier return value for example five thousand so I will save this and run this and it will return five thousand okay so in this way you can use finally with your trycatch block and always remember it's a good practice to use finally with your mikage blog so always try to use it whenever you use try catch blocks so I hope you have enjoyed this video please rate comment and subscribe and bye