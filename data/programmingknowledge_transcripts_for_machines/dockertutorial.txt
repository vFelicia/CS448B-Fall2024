so first of all what is Docker so Docker is an open source project that automates the deployment of applications inside software containers by providing an additional layer of abstraction and automation of operating system level virtualization on Linux so that is the definition which is available on Wikipedia but really what is docker so Docker provides a uniformed wrapper around a software package and this wrapper is called Docker container which you can ship or build and inside these containers you can run any app anywhere now Docker containers are similar to shipping containers now as you all know in the shipping container the container size is always same regardless of the content inside the container so these container can fit on all trucks or ships or trains regardless of the content inside the container in the same way Docker packages a software into standardized unit for development shipment and deployment so let me give you a real world example so let us say I developed a node.js application which depends upon some version of node.js and it uses some database and it's dependent on some shared Library let's say and I want to give this software to the devops guy or let's say to my colleague to run it on his computer or on the QA system or on the cloud by devops or in the production system so I don't really care where it runs I just care that it should run when somebody tries to run my software now if Docker is not present or any containerized system is not present the normal procedure will be that I give my software to my colleague or the devops guys and he has to install all the dependencies and for example node.js version and the database system exactly like a system on which I have tested my software now if you will just use Docker to containerize your system you just need to package your system into a Docker container and you can just give this Docker container to your colleague or the devops guys and he will just run this Docker container on the cloud or a QA machine or any other production system wherever he wants to run it and he can just run your software without worrying about all the dependencies or the environment setup which your software depends upon so nowadays Docker is becoming more or less a standard for the containerizing systems and you can find Docker containers everywhere on Linux operating system or Windows operating system or in the data center clouds serverless application and so on now let's compare Docker container versus virtual machines so containers and virtual machine have similar resource isolation and allocation benefits but Docker containers and virtual machine functions differently because containers virtualize the operating system instead of hardware and containers are more portable and efficient so when you talk about virtual machines you can see this diagram on the right hand side so virtual machines or VMS are an abstraction of physical Hardware turning one server into many servers and it is made possible by the hypervisor which allows virtual machines to run on a single machine so each virtual machine or VM includes full copy of operating system so let us say this is your server and on the server you have your hypervisor and on top of your hypervisor you can run different virtual machines so this is virtual machine one Virtual Machine 2 virtual machine 3 which have this operating system one operating system two and operating system three or you can have the similar operating system in all the three virtual machine let's say now the important thing to note here is each virtual machine includes full copy of operating system the application necessary binaries and the libraries which takes up to tens of GBS of memory and that is the reason that virtual machines can be slower now on the other hand in the container and you can see on the left hand side this diagram so containers are an abstraction on the app layer that packages the code and dependencies together so you have your server and then you have your host operating system and then on top of your host operating system you can run your Docker engine and the containers are the abstraction at the app layer that packages the code and dependencies together so multiple containers can run on the same machine and share the same OS kernel with other containers but each container runs as isolated process in the user space as a result container takes less space than virtual machine and usually container images typically takes tense of megabytes in size in comparison to the virtual machine which which can take up to let's say several GBS of memory also containers can handle more application and require fewer virtual machines and operating system now when we talk about Docker containers versus virtual machines the idea is to use containers and virtual machines together so the containers and the virtual machines can be used together which provides a great deal of flexibility in deploying and managing your apps now let's talk about the docker architecture so whenever you will install Docker the docker engine will be installed on your system so Docker engine will contain Docker CLI Docker Daemon and the docker registry now there is something called Docker Hub which is a cloudbased service where you can share your applications automate the workflow and assemble apps for the components now when you talk about Docker two things are really important and these are Docker images and Docker containers so first of all what is Docker container so a container is a standard unit of software that packages up your code and it's all dependencies so the application runs quickly and reliably from one environment to the other environment now when you create your Docker container which is essentially a unit of your software it can run everywhere regardless of the kernel version regardless of the host distro the only condition is that the container and the host architecture must match and you can run anything inside your containerized solution so if it can run on your host then it can run on your container that is if it runs on a Linux kernel it can run now let's talk about Docker container images so a Docker container image is a lightweight Standalone executable package of software that includes everything needed to run the application that is code your runtime your system tools and the system libraries and the settings so the container images becomes container at run time and in case of Docker containers images becomes containers when they run on Docker engine so images turns into container when these images runs on your Docker engine now it's important to note that your Docker image is not a virtual hard disk or vhd it's not a file system it uses Union file system and it's only a readonly layer also the docker images does doesn't have any state so when your Docker images runs as Docker container inside the docker engine and when you stop these running containers these images will not have or will not save any state so they are stateless so basically an image is a tar file which has a hierarchy and an arbitrary depth and that's how it fits into your Docker registry for example Docker Hub or any private Docker registry so this was a brief introduction about Docker in this video we are going to see how we can download and install Docker on our Windows 10 operating system so let us get started first of all open your favorite browser and search for Docker but before installing Docker desktop application on our Windows operating system let's see what are the system requirements for installing this application so before going to the docker doc to com website I'm going to search on my browser install Docker Windows which will open this link from docs dot docker.com forward slash Docker for Windows and this link I'm going to put in the description of the video also so you can also see all the description here and from here you can click this button which is going to redirect you to the downloads page but before that let's see what are the system requirements for downloading this application so as you can see here for installing Docker on your Windows operating system you need to have at least Windows 10 64bit Pro Enterprise or education version and hyperv and containers Windows feature must be enabled and some other requirements are 64bit processor with second level address translation 4GB system RAM and bios level hardware virtualization system must be enabled in BIOS settings so if you don't have Windows 10 64bit pro version or Enterprise or education version then also you can install Docker on your Windows operating system but the procedure will be little different so for that you can go to suspended products and tools and then go to this tool which is called Docker toolbox which is now a legacy for legacy operating systems so here you can just click on the install toolbox on Windows button I'm going to just open this link in the next Tab and here you can follow the procedure of installing Docker toolbox on your other window Windows operating system for example if you have Windows 10 home version or if you have Windows 8 or Windows 7 then you can install Docker toolbox so first of all how to check which Windows 10 version you have if you have Windows 10 operating system running so for that what you can do is you can just right click on this Windows button and then click on run and then just type when were w i n v e r and then click OK which is going to open this kind of window and here you can find the Windows 10 version you are running so as you can see here I'm running Windows 10 pro version also the second requirement was so let's see the second requirement which is hyperv and containers Windows features must be enabled so how to verify that so to check that the simple procedure is just right click on your toolbar Windows toolbar and then click on task manager so once this task manager opens you just need to go to the performance section and then you need to verify this section which is called virtualization it needs to be enabled by default it is enabled on your Windows 10 operating system so you don't need to do any extra thing unless you have manually disabled this feature so now I am going to click this button which says download from Docker Hub and here you will see this web page first so first of all you need to create a Docker ID if you haven't already have a Docker ID you can just click on this sign up a link here which will open this kind of web page and here you can create your Docker account which requires a Docker ID email address and password and you need to just agree these terms and conditions so once you have your Docker ID which I already have I'm going to sign into my Docker account which is going to redirect me to this page which is the downloads page and from here I can just download this Docker desktop application for Windows also if you have searched for Docker and if you have opened this main website from Docker which is docker.com you can just click on get started and then click on download desktop for mac and windows which will also redirect you to the same page and you can see welcome my Docker ID is shown here so in order to download this desktop application you need to have your Docker ID you and you need to log in to the docker website in order to download this executable file so let's just click on this button which is going to start the download of this executable file I have already downloaded this executable file so I'm going to cancel this installation and you can see on my downloads folder I already have this Docker desktop installer which is around 856 megabytes so I'm going to just double click on this executable file and I'm going to just start the installation so I'm going to minimize this browser and you can see the installation has been started so the first window here is the configuration so I'm going to just leave everything as default and then click OK which is going to unpack all the files the installation procedure is straightforward I guess you just need to click some buttons and Docker will be installed out of the box and now you can see after few seconds I can see this Docker desktop icon on my desktop and you can see this message which says installation succeeded so I am going to just click close And log out button which will log me out of Windows 10 operating system so I need to log in once again so now I have logged in to my Windows 10 operating system once again and immediately after logging into my Windows 10 operating system I can see this window which says hyperv and container features are not enabled do you want to enable them for Docker to be able to work properly I will say OK which is going to enable all these features I thought they are already enabled somehow but according to Docker it wants to enable them once again let's say and now I will click on this Docker desktop icon from here which is going to start the docker desktop application and I can see this message which is hyperv service vmm is not available if you have enabled hyperv just restart your computer now so I'm going to restart my computer and I will then try to just start Docker application once again so now I'm going to click on this Docker icon once again and you will see on your toolbar here you can see Docker is starting so it will take some time to start docker and I can see this message which says Docker desktop is running so I can open Powershell and start hacking with Docker or Docker compose also when you click on this Docker icon here you can see bunch of options here for the documentation Docker Hub Switch to Windows containers and all other settings here so one thing I will recommend here is to sign in with your Docker credentials which you have already created and I'm going to sign in with my Docker credentials and after signing in you will be able to see your Docker ID and the sign out option so let's get started with Docker so first of all you can start the command prompt I'm going to just type CMD which is going to show me this option which is command prompt and here you can just type docker hyphen version or hyphen V will also work and you can see the version which we have installed now let's also check if Docker is working with the docker Hub perfectly fine or not to test this you can just run Docker run hello hyphen World okay so just run this command this is the most popular command to test whether Docker is running or not or it's able to fetch all the images from Docker Hub or not so I'm going to just run this command and when I run this command you can see this kind of output so you can see on the first line it says unable to find image hello world latest locally so it didn't find this image locally so it has pulled this image from the docker Hub repository so you can see in the next line latest pulling from library hello world and once the pull is complete and you can see the status downloaded the new image hello world and then the latest version of hello world and then it says hello from Docker that means everything is working fine with your Docker and it's able to run your Docker images and this is the first Docker image we have run which ran successfully few more commands I can show you here for example you can also say docker images and then press enter and you will see the list of all the images you have on your system so we have just downloaded this Docker image which is hello world image so this is how you can download and install Docker on your Windows 10 operating system in this video we are going to see how we can download and install Docker on our Mac operating system so let's get started so first of all open your favorite browser and search for Docker and the first link which will appear here will be from docker.com so we are going to click into this link and then straight away you can see this button get started or this button gets started so you can click on one of these buttons and then you will be able to see this button which says download Docker for mac and windows so I'm going to just click on this button which will redirect me to the docker Hub website now in order to download the docker binary you need to have a Docker account so if you haven't created a Docker account you can just click on this sign up link here and then just fill your basic details like Docker ID email and password and create your Docker ID and Docker account and once you have your Docker ID and Docker account you can just log in with your Docker account here on this website so I'm going to just give my Docker credentials first is the docker ID and then second is the password and now I'm going to just sign into this Docker Hub website which will allow me to download this Docker desktop for Mac so I'm going to just click on this download link here which will start the download of the docker now once this docker.dmg file is downloaded I'm going to just click on this docker.dmg file and I'm going to minimize the browser and you can see this DMG file is opening first of all and once this window opens you just need to drag this Docker icon to your applications so it's that simple to install a Docker on your Mac operating system so once Docker is copied into your applications folder you can close this window and open Docker from here or you can just go to the launch pad and you will be able to see this Docker icon here so you can just click on the docker icon which is going to start the docker on your Mac operating system so just wait for few seconds and now you will see this message which says Docker is an app downloaded from internet are you sure you want to open it so I'm going to just say open and in the next step I can see this window which asks me to give some privileged access so I'm going going to just click on OK and then I'm going to give my Max password and now you can see Docker desktop is starting on my Mac operating system and you know you can see this Docker icon on top of your Mac desktop so I will wait for this Docker desktop to start and once this Dockers desktop starts we will start testing if everything is working fine in the meantime I can also give my Docker ID and password to login to the docker using this Docker desktop application so let me give my Docker ID and the password and then I'm going to just say login and you can see I am logged in with my Docker ID into this Docker desktop application and now I can see this message which says Docker desktop is now up and running so what we are going to do next is we are going to just open the terminal so I'm going to just search for terminal and then I'm going to open the terminal and once my terminal is open I can just just check the docker version by just giving this Docker version command and then press enter and I can see this long message and here the version information is displayed and then the API version is displayed and all the other information about my Docker is displayed here also when I give Docker info command so let me just clear this terminal once again and then I'm going to just give Docker info command and it's going to give me bunch of information about Docker and Docker engine and the status of Docker engine let me clear this terminal once again and now I'm going to test a Docker by giving this command so I'm going to just say Docker run hello world and then press enter which is going to fetch this hello world image from Docker Hub if it's not already present on my Mac locally and once this image is pulled it's going to just display hello from Docker that means everything is working fine and you can start working with Docker now one more command you can use here is this command which is Docker images which is going to show you the list of images which are present on your Mac operating system and you can see I only have one image right now which is Hello World which I have fetched just a few seconds ago and you can see this Docker icon here so when you click on this Docker icon you can do lots of thing for example if you want to restart your Docker then you can just click on on this if you want to Quick Quit the docker desktop then you can click here and there are lots of settings and updates and references settings you can do from this Docker desktop icon and there are lots of other settings you can do from this window or this menu from here so this is how you can download and install Docker on your Mac operating system in this video we are going to see how we can download and install Docker on our Ubuntu operating system so let's get started so what I'm going to do is I'm going to open my favorite browser and then I'm going to search here Docker install Ubuntu and the first link which will appear here will be from docs.docker.com I'm going to put the link in the description also so I'm going to click this link which is the official documentation of installing Docker engine Community Edition on your Ubuntu operating system so here you can see the prerequisite of installing Docker on your Ubuntu operating system so you can see the OS requirements and right now I have this version which is 18.04 LTS version and if you have the older version of Docker or Docker IO or Docker engine installed you can use this command to uninstall previous versions of docker now to install Docker you can just scroll little bit down and they have the very good documentation of installing Docker on your Ubuntu operating system so we are going to just copy these commands and paste it on our terminal and will be will be good to go so the first command is sudo apticate update so I'm going to just copy this command and I'm going to just open my terminal here and then just paste this command and then give my ubuntu's password and then just press enter which is going to update all the repositories and then I'm going to just copy the second command in a meanwhile so this is the second command and in the second command we install the packages to allow the app to use the repository over https so let's just copy this command and go to a terminal and then let me just clear the terminal and now I'm going to just paste this command and then press enter which is going to start the installation I'm going to press Y and then press enter and in the meantime we are going to copy the third command which is to add docker's official gpg key so for that you need to have curl and curl we are installing using this second command so when the second command is finished you will have curl on your system and then we can just give the third command so hopefully that is complete so let's clear the terminal once again and then paste the third command and its ok so we will move to the next command which is to verify that you now have the key with the fingerprints so I'm going to just copy this and then paste it here and verify this and you will see the similar result which is also shown here when you give this command so now we will move to the next command which is to install the docker Repository so for Ubuntu you need the first option here which is x8664 so I'm going to just copy this command once again and then go to the terminal clear this terminal and then paste this command and then press enter which is going to install the docker repository and then in the next step we are going to update the repositories once again before installing Docker so here you can see the next command which is to update the repositories again and then we are going to just install the docker so after update we are going to install the latest version of Docker engine which is the community version so for that we just need to give this command which is going to install docker CE and Docker cecli and containerd Dot IO so I'm going to just copy this last command and then paste it to the terminal so clear the terminal just paste this command and then just wait for the installation to complete so it's that easy to install Docker Community Edition on your Ubuntu operating system and if you want to install a specific version of these packages you can give these commands so when you give this command apt cache medicine Docker minus CE you will see a different version of Docker which are available for your Ubuntu operating system so from here you just need to take the version and then replace this placeholder for the version string with the actual version of whatever tool you want to install so for example if you want to install the version of Docker CE for example we need the latest version of the docker CE then you can just copy this and then just replace this place all the string by ah this string okay same you can do for the docker cecli so once this command is finished I'm going to once again clear the terminal and we are going to run this command which is sudo Docker run hello world in order to test whether everything is working fine or not and here I'm going to just write sudo Docker run hello hyphen world and then press enter and I'm going to give my ubuntu's password and you can see when you run this command it prints hello from Docker so first of all what happens is because we are running this Docker command for the first time it's going to find the docker locally and if it's not found then it's going to pull your Docker image from the docker Hub and then execute this hello world image which is going to print this kind of output so if you see this kind of output that means Docker is running on your system and also you can check the docker images now so you can just give this command sudo docker which is going to list out all the docker images you have on your Ubuntu operating system so that's how you can install Docker on your Ubuntu operating system in this video we will talk about how does Docker works and we will see some commands related to Docker and Docker images so as I have told you in the earlier videos also you can build your Docker images that holds your applications using Docker files and then you can create your Docker containers from those Docker images to run your applications and then you can share your Docker images via Docker Hub or via your private registry now if you want to see this Docker flow in the form of a diagram you can see this diagram here so you can create a Docker file which we are going to see how we can create a Docker file in the later videos so Docker file is a file from which you can build your applications into Docker images so what happens is you pull some images which are already there on the docker Hub and you use those images with your application and you write all that code or that script inside your Docker file so how will your application run inside a container you write everything in a Docker file and then you build your Docker file which will create a Docker image and when you run your Docker image it will be converted to a Docker container now let's see some commands related to Docker so the First Command which I want to show you is the docker search command so you just write Docker search and then you give your options for example whatever image you want to fetch from your Docker Hub you can just write that image name for example I just write Ubuntu here so you can search all the images which are there related to Ubuntu on Docker hub using this command so Docker search Ubuntu so when you give Docker search Ubuntu you will see this kind of result in the form of a table and the First Column here is the name the second column here is the description third is the number of stars and if the image have more number of stars then its more popular also you have the column for official so if you see uh ok under official for a particular image so for example this first image with the name Ubuntu is the official image on Docker hub and you can also see some description here so clearly this first image which is an official image also is the most popular image on Docker Hub about Ubuntu now let's see some options which are related to Docker search so I'm going to just write docker search here and then I can give the filter option which we use to filter our results so I'm going to just write a filter here so let's say we want to filter our result on the basis of stars and image have on the docker Hub so I can just write Stars here is equal to 3 and then the name of an image I am searching for so for example I'm searching for Ubuntu here so I will just write Ubuntu and this example will display the images with the name Ubuntu and which have at least three stars so I'm going to just press enter so you can see all the result of the images which have at least three stars now if you give here let's say number of star is equal to 100 so it's going to search for all the images which have at least 100 stars now if you want to give more than one filter you can add this this filter option once again so you can just write hyphen hyphen filter and then the next filter so the first filter we have here is for the stars and the second filter I have added here is for the official image so I just want all the images which are official so that's why I have just given this filter which is is official is equal to true and then I am going to just press enter and I will only see the official images which are present on the docker Hub and which have more than 100 stars in a similar way I can also search for automated image which are not official but which are there by some users which are there on Docker Hub right so it's going to show you all the images which are not official but automated now there is this option which is called No trunk also which is going to show you the description without truncating this description so right now you can see in the description you see this description and these three dots so that means this description have more content in the description so I can just give this option which is no trunk which is not going to try truncate there's a description it's going to show you the full description here so sometimes this ah option can get really messy if the description is really large so just use it wisely now instead of this hyphen hyphen filter you can also simply write hyphen f for the filter option so either you can just give the full filter option or you can just give hyphen f for the filter and the result will be the same now the next command which I'm going to show you here is the docker images so I'm going to just write Docker images and this command we use to list out all the local images you have on your host so when you give this command Docker images it's going to give you all the images which you have on your host as I said and right now I only have one image which is hello world image which we have pulled in the previous videos when I have shown you how to install Docker on your various operating system so right now I only have one Docker image which is hello world now there are some options which are related to Docker images so we are going to see all those options one by one so with this Docker images option you can give the name of the image now let's say I give here the option Java so you can list the images using the name or the tag so when you give this Docker images Java command it's going to search all the images related to Java and you can see there is no image which is related to Java on my host machine so let's pull the Java image from the docker Hub so I'm going to just write Docker here and then pull so the pull command you can use to pull an image or a repository from Docker Hub or from your private repository so I'm going to just pull the Java image from the docker Hub so you can see when you give this Docker pull Java command it's going to pull always the latest tagged image from the docker Hub and in the output also you can see using default tag so the default tag is always the list test tag that's why it's going to pull the latest Java image so now you can see this Java image with the latest tag is downloaded on my host so let me clear the terminal and now I'm going to give the docker images command once again so docker images and now I have the Java image with the tag latest and the hello world image with the tag latest so now I can use the docker images and then the name of the image also so I can search based on the name of the image also so I can just write Docker images Java which is going to just give me the images which are related to Java I can also search with the image name and the tag so let's say I want to search for the Java image which have the tag let's say 8 which is not present on my host so it's going to give you the empty result without any image if you give the tag which is present so the latest tag is present on my host so it's going to give you the Java image with the latest tag so let me give the docker images command once again and you can see by default in the result you will see the name of the repository or an image then the tag of that image and then the image ID this ID is very useful when you have a multiple image related to let's say Java so you can use this image ID to remove that image or work with that image so that's why this ID is important also you can see when this image is created and the size of the image so the different images with different tag have different sizes so sometimes you want the images with the less size or sometimes you want the images which have the full feature so in that case you can use different kind of image with different tag which suits your requirement for your application in this video we will talk about basics of Docker file so first of all what is a Docker file so Docker can build images automatically by reading the instructions from the docker file and a Docker file is a text document that contains all the commands a user could call on the command line to assemble an image now as I have previously told you you can use Docker file and then once you write your instructions in the dockup file you can build your Docker file to produce a Docker image and when you run the docker image it's called the docker container so let's see how we can create a Docker file and then we will see how we can build our Docker file to make an image so right now I'm in my home directory so here I'm going to create a directory called D1 let us say and then I am going to CD in this D1 directory and right now it does not contain any files or folders so let's create our Docker file in this D1 folder so I'm going to just write touch and then Docker file so by convention we usually name our Docker file as Docker file with the capital D and this Docker file does not contain any extension so it's without any extension so let's create this file so now I have this Docker file in my D1 folder right so now I'm going to open this Docker file in any editor you can use the editor of your choice right from the Nano Bim or any editor I like to use the visual studio code editor so I'm going to use that so I'm going to just write code and then I'm going to just write dot which is going to open the current directory in my visual studio code so here I have this Docker file right now in Visual Studio code there are many extensions you can install related to Docker that's why I like to use this Visual Studio code and straight away when I open this Docker file in my visual studio code I can see this popup which says Docker extension is recommended for this file so you can click on this install button or you can just install this Docker extend attention from this extension option here also so you can just search for Docker here and then it will give you the most popular Docker extension right so just choose the most popular one from here and I'm going to just install this Docker extension and once this extension is installed it's going to help you with your Docker files and Docker commands in general okay so there are bunch of keywords which you can use inside your Docker file and each keyword means something so we will start with the ARG keyword so this ARG keyword we can use to provide any argument as the name suggests and I'm going to explain this ARG in detail after the other keyword which is from so here what I'm going to do is I'm going to just write the version here and version equals I'm going to give here is 20.04 so version here is the name of the argument and 20.04 is the value of the argument now after this we are going to use another keyword which is from now this from defines the base image used to start the build process so there are many base images which you can find on the docker Hub and we are going to use one such base image which is Ubuntu and then after colon you can choose which version of Ubuntu base image you want to have so here as I have defined this ARG is equal to 20.04 so we are going to fetch the Ubuntu 20.04 from the docker Hub as our base image so how how we can use this argument with this from a keyword you just need to use this dollar symbol and then inside these curly brackets you just need to pass your argument so my argument name is version so I'm passing this argument here this means that we want to fetch the Ubuntu 20.04 image from the docker Hub now this from instruction supports variable that are declared by any ARG instruction that occurs before the first from and an ARG declared before the from keyword is outside of the build stage so it can't be used in any instruction after from so now once we have the image we are going to use one more keyword which is the Run keyword so this run is the send Central executing directive for the docker file so this run you can use to run commands using the docker file so for now I want to run inside this Ubuntu base image aptget update commands and also I'm going to give the flag y for yes and now let's move to the next command so the next command I'm going to use here is the CMD command so the CMD command can be used for executing a specific command within a container so let us say I just want to run the bash inside the container so I am going to just use these square brackets and with the double quotes I am going to just write bash here so this is a very basic Docker file now let's see how we can just use this Docker file to build some image so I'm going to open the terminal inside my visual studio code editor and as I can see I'm in my D1 directory which I have created and here I have this Docker file right so now let's list out what are the docker images we have on our system so I'm going to just write a sudo docker images command to list out all the images and now I want to run or build this Docker file and create an image so right now we have hello world and I want to create one more image using this Docker file so to build a Docker file you can give a command build so just write sudo Docker build and then dot so when you run this Docker build command the current working directory is called the build context and by default the docker file is assumed to be located in this directory but you can also specify the directory path using a flag called hyphen f that we will see a little bit later but just give this command for now which is sudo Docker build space dot so now you can see that when we run this Docker build command the build is run by the docker Daemon not by your CLI so the first thing a build process does is to send the entire context to the docker Daemon and that we can see here sending build context to the docker Daemon now in most cases it's best to start with the empty directory and then you start adding your Docker file in that directory now when you run this Docker build command you will also see that these layers are fetched from your base image from the docker Hub and also you will be able to see which step is executed so the step one out of four is this ARG step step 2 is the from step and at this step it's going to pull the base image from the docker Hub and you have some intermediate layers here which are created and then we have used this run command which in itself has create created its own layer and its has installed the updates using this updates command and at last we have given this CMD command so now let's give the docker images command once again so I'm going to just give sudo Docker images command and now you're going to see this Ubuntu base image which is fetched from the docker Hub and you have this image which doesn't have any name or tag because we haven't provided any name or tag to our Docker image and this only have this image ID which you can see here also which is successfully build this image ID so using this image ID you know that your image is created here now let's say you are in some other directory other than the directory in which your Docker file is there so for building a Docker file from some different directory you use the hyphen f flag so what you do here you just use sudo Docker build and then hyphen f and then you just give the path to your Docker file so when you give this command and then you need to provide the context also so you need to create this context inside this current directory so when you give this command it is also going to give you the same result so because we have effectively given the same command so we don't need to modify our image so once again when you give the docker images command it's going to show the same image because your image is not modified and you haven't changed your context which is your current directory now as you can see we don't have any name and tag to our image so if you want to provide the repository name and the tag for your image what you can do is you can give this Docker build command and then give the hyphen T flag so using this hyphen T flag you can specify the repository and the tag at which you want to save your image so let's say I want to give the repository name as my underscore app and the tag which I want to give here is let's say one so after the colon you can provide the tag also here so when you run this command and don't forget to provide this context which is dot which is the current directory and then press enter it's going to just create the same image and you will see here an extra step is shown here which is tagged with my app colon 1. so at this step also you will observe that Docker is smart enough to know that you want to create the same image from the same Docker file and you haven't changed your Docker file so it's not going to change your image or create or recreate your image once again because we haven't changed our Docker file right we have just gave the repository name and the tag so now when you give this command Docker images then you will see that the repository name is my app and the tag associated with it is one so this is how you can give the repository name and the tag now if you will observe here we have our base image also here which is Ubuntu 20 3.04 so in future if you create different Docker file and it requires the same Ubuntu Docker image and the same tag which is 20.04 then your Docker build command will be smart enough to know that and it's not going to pull this image from the docker Hub again because you already have this image on your local PC so as I said we have fetched this Ubuntu image and the version for it is 20.04 here in the version if you don't know the version you can always write the latest so just try it latest here and it's going to just fetch the latest version of the base image you want to have so let me just save this file with the latest version and then run the same command with hyphen T my app and the tag will be the same and the context will be the same and now you will see that it is going to fetch the latest version of Ubuntu here and now when I give this Docker images command you will see the tag latest here instead of 20.04 which was this more specific version I wanted right so latest is the latest version which will be available on the docker hub for this base image so those are some of the basics of Docker files we are going to learn about Docker files in the upcoming videos also till now we have learned the basics of Docker files and how we can create Docker images using Docker files now in this video we are going to learn about Docker containers so as I have told you earlier when you run an image it's called a container so in the last video we have created this Docker file and we have already built our Docker file to produce an image so let's list out the docker images which we have created in the last video so just give the command Docker images here and this was the image which we have created we have named our image as my app and the tag which we have given to our image is one here now this is the image ID so let's see how we can run this image to create a container now in order to list out all the running containers you have the command which is called sudo Docker PS which is going to give you the list of all the running containers so right now we don't have any running container now if you want to see the list of all the container including running or thus exited containers then you can give the command with the flag hyphen a and it's going to give you the list of all the containers you have on your system so it is going to give you the list of all the running container as well as if they are exited and if they are no more running then also it is going to give you the list of all the containers so you can see I have ran this hello world container two months ago right and right now the state status of this container is exited that means it's not running so this is how you can see the list of all the containers now to run a container what you need is a command called run so you just write sudo Docker run and then you can give with this run command some options for example and then you give the name of the image so it requires the image in order to run a container and then you can give some commands so you can give some commands with the docker run image and also you can give some args here okay so let me just write args right so this is the basic syntax of a Docker run command so let's say we want to run our Docker image which is my app right so let me just once again give this Docker images command and I want to run this image so to run a container you just need one thing which is the docker image so you can just write sudo Docker run and then the image ID so this is the image ID of this repository which is my app so let's say we want to run this image so I'm going to just take the image ID of this image and then I'm going to just press enter and as soon as I press enter it's going to run the container and exits immediately so when I run this Docker run image ID command then it's going to run and it's going to exit immediately right so when you give this Docker PS command so let's list out all the running containers right so all the running containers still you will see there is no running container but when you give this command with hyphen a flag which means we want to see all the containers then it's going to show you that it ran this container with this image so we ran the container with this image and this is the same image which we have used in this Command right and it was exited about a minute ago right so it ran and it exited immediately now here one more interesting thing to note here is when you run the container with the Run command dot automatically generates a container name with a string of randomly selected numbers and letters so if you are wondering what this name is this is just a automatically generated name which is generated by Docker for you now if you want to give a specific name to your Docker container there is a flag for that so we are going to run the docker run command for the same image and this time what we are going to do is we are going to give some name to our container so before the image ID I'm going to just provide this name flag and then I can give the name to my container so the name I have given here is my Ubuntu container to my container and let's give the same command with this flag and once again you don't see any output here on the terminal but as I have told you it has just ran the container and exited immediately so when we give the docker PS hyphen a command once again you will see this time that now our container name is my Ubuntu container right so this was the container which ah we ran earlier and this time ah with the last Docker run command we have given the name to our container and the image was this one so image is unchanged but we have created a new container with the name my Ubuntu container right and the command which we ran is bada bash command which is coming from this line of Docker file now when you run your Docker containers it's run in two modes one is attached mode or in the foreground and other is in the detached mode or in the background and by default Docker runs the container in the attached mode that means it's attached to the terminal session where it displays the output and the message so if this Docker file has some commands or some output related to this Docker file then it is going to show you the output in the terminal when you run the container with the docker run command but because we don't have any output associated with the docker file it doesn't show any output right now if you want to run your Docker file in the detached mode what you can do here is you can give the hyphen D flag that means you want to run your container in the detached mode so just give hyphen D and then I'm going to give the same command here and let's see what happens and you can see it's going to give you this message which says error response from the demon conflict the container name this is already in use right so this container we have already defined so you cannot create this container with the same name so you need to give the different name here so let's say I am going to just give my Ubuntu container 2 now okay and then I have also given this hyphen D command to run it in the detached mode and now you will see that there is an output which is printed here and this is the container ID ID of your container now if you have observed here in the previous command where it has thrown this error it has this long container ID now when you give the docker PS hyphen a command you will see in the container ID some part of this container ID is shown so for example I can see here up to this part of the container ID is shown but in the background the container ID is so much bigger right so now when I give the docker p s hyphen a command once again I can see one more container which is created and the container ID you can see it is going to show you the starting few values of the container here until I think until D so using this ID also you can delete or work with your container or you can take the full ID of the container and work with your container okay so this ID will also work or in the short form or the first few uh letters of the ID will also work which is shown here now we have seen that how we can run our Docker container in the detached mode and as I told you that by default Docker runs the container in the attached mode or in the foreground right now let's see how we can run our container interactively so Docker allows you to run the container in interactive mode that means you can execute commands inside the the container while it's still running so let's see how we can run our Docker container interactively so now what I'm going to do here is I'm going to just create a new container let's say it's container 3 my Ubuntu container underscore 3 and I don't want to run it in detached mode instead I want to run this container in the interactive mode so here I can give hyphen i t flag which means that we want to run our container in the interactive mode and the image name is same which we have created using this Docker file so let's see what happens when I run this command like this so when I run this command like this you will see the bash shell which appears here and this is what I was expecting so now as you can see here in this Docker file when we have created this image the last command which we wanted is this bash command and it has just given us this bash command shell in the last right so this is how you can run your container in the interactive mode now when I open the new terminal so let this terminal be like this and let me open the new terminal in the visual studio code you can open the new terminal by just clicking on this plus button or you can open your default terminal on your operating system also you can see I'm in the second terminal and here I'm going to give this sudo Docker PS command without hyphen a that means I want to see only the running Docker containers and then I'm going to provide my pass word of my operating system and this time you will observe that when I give this Docker PS command is going to give me some output because now the container which I have created which is my Ubuntu container 3 is still running in the other terminal as you can see we have running bash shell in the docker container so this bash shell is running inside our container right so when you uh just give some LS command you will see the file system directories here inside your containers you can also give for example up time so as the name suggests the uptime command will give you the time for which the system has been up or running right and as we have seen in the last video we have only given this bash command so our container is not doing much it's just opening The Bash shell now there are many interesting things which you can do with your Docker run command and that we are going to see in the next videos also I want to show you uh some more commands related to Docker run and Docker in general so now what I am going to do is I'm going to switch to my terminal so I'm going to open my default terminal on my Ubuntu operating system also I'm going to open my browser and I'm going to just search for Docker Hub I want to show you how this Docker Hub looks like so the first link here is hub.docker.com and when you click on this link you will see this webpage here from where you can just sign in with your Docker ID which you have created earlier or you can search for some images so let's say I'm going to search for an image called busy box and then press enter and you will see an official image of busy box and as you can see you will see the tag here on the top which is going to show you if it's official it's going to show you it's an official image and otherwise it's going to show you verified or the other information associated with the image so the most popular one and the official one is this one so I'm going to just click on this base image and here I will see some more information related to this image so if I want to just pull this image on my PC I can just give this Docker pull busy box command so let's do this and I'm going to show you how we can use the docker run command with the busy box image which we are going to pull so I'm going to just write docker pull busy box here and then press enter and I'm going to just give my ubuntu's password which is going to just pull the latest tag image of the busy box right so if you don't provide any tag after colon then it's going to pull the latest image so now let's run the docker images commands so I'm going to just give images and now you can see this busy box image is there so you can run the docker run command with the images you have in this list also so till now we have seen how we can run the docker run command with the container which we have created but you can also use this Docker run command with the base images also for example busy box or Ubuntu 20.04 or Ubuntu latest version and I have pulled this busy box base image because it's very small in size you can see it's only around 1.22 megabytes so if you want to quickly test something with some Linux terminal or Linux operating system busy box is the image to go so now as I told you you can use this Docker run command with the images you have in your local PC so you can just give a Docker run and the name of your image which is busy box here and then you can do something with it so you can just write Echo so it means that we want to run the echo command inside our busy box container when it runs and let's say we just want to print hello world here so I'm going to just write hello world and then press enter and it's going to run this busy box image as the container and it's going to print or execute whatever command you have given after this busy box command right so basically what this means is we are running Echo inside our busy box container also when you give the docker PS hyphen a commands so let's give this Docker PS hyphen a and you will see this busy box command also so you can see this busy box and what command it has Ran So we have we ran Echo hello world and it was created 42 seconds ago and it was exited right so status is existed now let's say you just want to work with the BusyBox shell what you can do you can just give the same command but instead of giving this Echo you can run it in the interactive manner using this i t flag and then you can just tell that you want to run the shell so just write sh which is going to run this container and open the shell inside the container right so let's give this command and when you give this run command with the ID flag it attachs us to the interactive TTY in the container right so because we are running the sh command after this run command so it's going to open the shell inside your or busy box container and here again you can run your basic commands or whatever you want to do inside the container so we are not working inside our operating system we are working inside our container now in order to exit from the container you can just give this exit command and you will come out of this container now the last thing which I want to show you before just finishing this video and that is how we can remove some container so now we ran so many commands and we have so many containers and as you can see we have so many dead container that means all the containers are exited and they are not running anymore so when you give this Docker PS command you can see only one container is running and all the other containers when you see using hyphen a are exited so let's say you want to remove some of these containers so let me clear the terminal and let me just give this Docker PS hyphen a command so let's say I want to remove this container and this container so there is a very simple command which is called RM so you can just write sudo and then the docker command and then just give RM and then after that you can give the container ID of the container so let's say I want to just give this container ID of the container so just copy and paste this container ID and then press enter and if you see the container ID in return in the output that means this container is removed so once again when you give the docker PS hyphen a you will see that this container is already removed right so in the same way you can remove multiple containers using this RM command so you can just give container ID space container ID 2 space you can give multiple container ID in this manner and it's going to remove all the container IDs which you have given after the RM command so so right now we want to remove two containers and as I said if you see the container ID in the output that means that container is removed and in my case as I can see this container is removed but the container with this ID is not removed means the container with this ID is not removed because it's running right so if the container is running and if you want to remove it you need to stop this container first and then you can remove the container so as I have shown you this container is running here so I I can either just give this exit command or I can stop the container let's see how we can stop the container using a command called stop so let's say I want to just stop this container so I can just give the command Docker stop just write Docker stop and then the name of your container so my container name is this one so I want to stop this container and then press enter and if you see the container ID in the output that means this container is stopped so when you give this Docker PS without hyphen a you can see there is no container running anymore and now in the list of all containers you will see this container and now when you give this Docker RM with this container ID it is going to give you the output that means this container is successfully removed okay so you use stop command to stop the container and then you can use RM command to remove the container in the last few videos we have seen the fundamentals of using Docker files Docker images and Docker containers now in this video I want to give you a concrete example of using the docker container so I'm going to give you a real world example of how you can really use Docker containers and how these Docker containers are really useful in certain situations so we are going to compile and run a C plus plus program inside a Docker container now you might say that compiling and building a C plus plus program on your host operating system is also easy so why do we need a container so consider a situation in which you have a seek plus program and you want to compile a C plus plus program with different version of GCC let's say now it's really hard to maintain different version of GCC on your Linux or Windows operating system but using Docker containers it's really easy to use and compile your program in different GCC versions using Docker containers Also let's say you want to develop a c plus program which works on multiple operating system or you want to compile your C plus program for a cross platform application so Docker containers are really useful for C plus plus cross platform development with containers with containers you can choose a target with a platform that runs completely different operating system other than your host operating system or the system on which you are developing so let's say you are just working on your Windows operating system but you want to compile your C plus plus program on a LX operating system or any special version of Linux operating system you can do it easily with the docker container so let's start with our example so as you can see on my visual studio code I have opened a Docker folder and inside this Docker folder I have this directory D1 which we have created in the previous video and now I am going to create a new directory inside this Docker directory and I'm going to name this directory as D2 and now I'm going to just go inside this D2 directory so let us go inside this T2 directory and here inside this D2 directory I am going to create a new CPP file let's say so you can use Touch on the terminal or you can just click on new file here and then just create a new CPP file with the extension CPP I am going to name my file as main dot CPP and as soon as you create a CPP file inside your Visual Studio code editor it's going to give you the suggestion for the C plus plus extension so I am going to install this C plus plus extension so now this C plus plus extension is installed and this C plus plus extension is going to help me to work with the C plus plus file inside my visual studio code editor so what I am going to do here is inside my uh main.cpb file I am going to just write a very simple program here with just prints hello Docker container so normally what you will do on your host machine if you have a g plus plus or GCC you can compile your C plus plus program using G plus plus right so you can see I have this main.cpp so I can compile this program using G plus plus hyphen o and then the executable file name which I want to create let's say I want to just give the name test to my file and then my main dot CPP file right so I'm going to just press enter which is going to create this executable file you can see here also I am going to do LS here also so you can see this executable file and now you can just run this test executable file or binary file using this command dot forward slash and the name of your binary file and it's going to print hello Docker container and I want to create a Docker container and I want to compile my C plus program inside my Docker container and I want to run my C plus plus program inside my Docker container this is what I have done in my host machine not inside my Docker container right so let me just clear the terminal and inside my D2 directory where my C plus plus file is there or my CPP file is there I am going to create a Docker file so I am going to just right click and I'm going to just create this talk a file here and then press enter and I can remove this test binary file because I do not need it for my Docker container now if you don't know which base image you want to use so for example if you want to use GCC to compile your C plus program you can go to Docker Hub and search for GCC here and when you search for GCC you will be able to find the official GCC image here you can see Docker official image or let us just press enter and see what result it gives so you can see the official image is this one with this official image tag and it has more than 10 million downloads so I'm going to just click on this GCC link and you can see when you just scroll down what are the tags you can use with gccu also you can see how you can pull this GCC base image using Docker so the name is really simple GCC so what we are going to do is we are going to just write from and then our base image I'm going to use here is GCC now the version or the tag I want to use here is the latest or you can choose the tags which are available here so you can choose 10.2.0 or 10.2 or from all these tags which are available here you can also go to tags section and see the more specific tags you want to use for your C plus plus program so now once we have the base image the next step is to copy our current folder which contains our CPP code into the docker image under the file system where we want to copy this so for copying our local files into the docker image we use this copy command OK and as you can see it suggests us ah that we need to provide the source so Source in our case is dot because we want to copy all the files from the current folder and the destination will be the destination inside the file system of your Docker image in our case it's GCC so in GCC base image file system you will find this path which already exists there so you can just write user forward slash SRC which is already there inside the file system of GCC base image okay so as I said this command is going to copy all the files which are there in your local directory to this directory inside your Docker image okay now if you want to copy some specific file then you can do this also you can just write main dot CPP and then you can copy a specific file into the folder which should already exist inside your image which you are using right so for now for Simplicity I would just want to copy all the files from the color current directory to user forward slash Source forward slash the directory which we are going to create so let's say we want to create this directory where we want to copy all the file CPP test let us say so this path already exists in the file system and this is the folder name which we want to create and copy our local files to this folder in the docker image right now we are going to define the work directory so we can just use this work dir keyword to define the working directory in which you want to work now okay so because because we want to work inside this directory because we are copying our C plus plus file inside this directory we are going to set our work directory as this one that means when you run any command it's going to run inside this directory which you set as work directory now in the next step I want to run the command which will compile the C plus plus program using this main dot CPP so now I can just give the G plus plus command then hyphen o as the flag and let's say I want to name my binary as test and the file name which I want to compile is mean dot CPP so this run command is going to compile my C plus program inside my CPP test directory under user Source folder right now in the next step I am going going to give the command using CMD which will be the command which I want to run inside the container so this is going to run the program output from the previous step into our container so this works like this as you have already seen in the last video also so if you want to run your binary you can just give dot forward slash and the name of your binary which is test right so this binary is going to be run using this CMD command inside our container so that's it that's how you can create this Docker file to compile your C plus program and run it now let's build our Docker file to create an image for that you can just give sudo Docker than your build commands so build and then the build context and then you can provide hyphen T to provide the name of your image I'm going to name my image as CPP underscore test for example and then you can also give the tag to your image let's say I want to provide the tag one to my image okay so this is going to create a Docker of image using the docker file so you can see it has pulled the base image in the first step then copied our files from the local directory to the directory which we have defined and then it has set the work directory and then in the next step it has compiled our C plus plus program and in the last step we have set the test binary to run when we run our container so now let's list out all the images you can just give Docker images command for that and you will see that this repository is created about a minute ago and this is the image ID for that image right so now we want to run our container using this image so for that we have seen in the last video we can give sudo Docker run command and then I'm going to give the hyphen hyphen RM flag and this RM flag causes Docker to remove automatically the container if it already exists so if the container which we are going to run already exists then it's going to remove that container and then it's going to rerun that container so this command is handy when you want to just run only one container at a time and then I'm going to give this i t flag with hyphen so I T flag for running this container in the interactive mode and then your image so you can give this image name CPP test here or image ID also you can give so I am going to give the image name which is CPP underscore test with the tag so tag we have provided is one okay so here as I said you can give the image ID or the repository name and the tag and then when you run this Docker container it's going to print hello Docker container that means we ran the test binary inside our Docker container right now as I said you can change this tag instead of latest you can choose the version of GCC you want to use for compiling and running your C plus programs so that's why this Docker and Docker containers will help you to just cross compile in cross platform applications now let's say you want to compile your C plus plus program using the C language compiler instead of GCC okay so we want to compile our program using C language compiler instead of GCC so let me clear this terminal and let me go One Directory up here and I'm going to create a new directory so I am going to just write I am kdir ah D 3 and inside this D3 directory what I want to do is I want to just have the same CPP file so I will just copy this cpv file into the D3 directory also and then we are going to create a Docker file inside this D3 directory so let us create this Docker file here so now let's move to the docker Hub website and let's search for C Lang if we have something related to C language compiler on Docker or not so I am going to just write C Lang here and as I remember there is no official a base image for C language on the docker Hub so what we can do we can use the base images we already have on our system and then we can install the C language compiler on that base image so I'm going to just give this sudo ah Docker images command and from these images let's say we will use this Ubuntu latest or Ubuntu 20.04 to compile our C plus plus program inside the Ubuntu base image using the C language compiler okay so what I am going to do is I am going to just write this kind of Docker file I am going to explain you all the steps one by one so we want the base image Ubuntu with the tag latest because we already have downloaded or pulled this image in the previous videos so we do not need to pull it once again now in the next step I am running apt get Y update and apt get install update to update apps on the base image so that's what you do when you want to install any software on your Ubuntu operating system so this command is going to update the apps on the base image now in The Next Step using this apt get hyphen y install C language command we want to install C language on our base image which is Ubuntu right The Next Step are relatively easier because we have seen these steps in the other Docker files also so we want to copy all the files in the current directory into this directory inside our base image and then we want to set the work there which is the same where we have copied our c plus files and then to compile your C plus plus program using C language you can just replace the GCC with C language plus plus and the rest of the command will look like same as you have seen in the case of GCC also so you can see G plus plus hyphen node test main dot CPP and here also you can give this command the only thing I want to change here is the main dot CPP the file name here okay because our binary name is test we are going to just run this binary using this command so this is going to run inside or container okay in the D3 folder I have created this Docker file to compile my C plus plus program using C language and I'm going to run this now so let me clear the terminal once again so now let's build our Docker image using this Docker file file so for that I need to go inside the D3 directory and then I'm going to give the docker build command with the context or in the current directory and then hyphen T to give the name of my image so let's say I want to give the name to my image as C language underscore CPP and the version or the tag which I want to provide here is let us say 1.0.0 okay so let's build our image using this command so now as you can see the build of this image is successful with the name c language underscore CPP and the tag 1.0.0 so let's run the container for this image using the docker run command so I'm going to just provide sudo docker run oops by mistake I pressed Ctrl C that's why it breaked so let me just give this command once again and then give this image name with the tag 1.0.0 so we want to run our container using this image so let's press enter now and as expected we see Hello Docker container that means we successfully ran this binary file which is compiled using C Lang in our container and the output is printed now let us say you want to change something in the output so instead of let us say hello Docker container I just want to print hello World here okay so I will just save this program and then I can just build it again but this time I will build it with the different tag so let's say I just did the minor change so I will just change the tag as 1.0.1 so let's build this image which is going to be built really fast and now let's run this image using this Docker run command but don't forget to change the tag because I have changed the tag for the image also to 1.0.1 so here also I am going to change the tag for the image and then press enter which is going to run this program and it prints hello world so how simple is this so this is how you can compile and run your C plus plus programs using Docker containers so as I said I just wanted to give you a real world example same thing you can do for your Java programs or any other programs which you want to run in different environments in this video we are going to see how we can do Port mapping between your Docker container and your host machine so let's say you have some kind of a server and that server listens on some particular Port so you need to expose your Port from your Docker container so the outer world will be able to interact with your server so in this video we are going to take an example of a node.js server the same Concepts you can apply on any other kind of server it can be a nginx server it can be a python flask or our Django server or any other kind of server so let's start with our example of dockerizing our node.js web app so what I'm going to do is I'm going to just create a new directory for me so I'm going to just write mkdir D4 and then I'm going to go inside that the for directory and here I'm going to create a new node.js app so for initializing my app I'm going to just write npm init and then hyphen Y and then press enter which is going to create uh package dot Json file inside my D4 folder now for This node.js Server I will be using Express so I need to install Express locally for this app so if you already know something about node.js or npm you can easily install the npm package using npm install and the package name in our case X its Express which is a very popular node.js package or npm package so I am going to just write Express here and then I am going to give this save flag here so it is going to be installed inside my directory and this Express will be added as the dependency in my package.json file so let me press enter which is going to install this Express package in my directory you can see this new directory is created which is node modules and this new dependency is added in my packet.json which is Express so now let's create our server.js file so if you can see in our packet dot Json file the main entry point right now is the index.js you can change it to a server dot JS and let us create this server.js file server dot JS here and then press enter which is going to create this server.js file so we are going to write a very simple node.js code which is going to use express and it's going to just print hello world whenever somebody will make a get request to This Server so I'm going to just uh copying and pasting this code because this code is available everywhere and it's very simple so what I have done I have just imported ah this Express and then I have created these two variables one is the port variable which will be exposed via a browser or a via the rest request and then we have the host here which is basically the local host and we have one get request here so whenever somebody makes a get request to the server we are going to just send hello world so very simple node.js server code and we are going to run this code let me clear this terminal so I'm going to just write node and the name of my server file which is server.js and when I just run this server.js using node.js is it's running like this and it's printing on which host and ports it's running so let's open our browser and we are going to just uh open this URL which is 0.0.0.0 uh colon the port number on which we have started this node.js server and I I'm going to just press enter and it just prints hello world which is the expected result right so now we want to dockerize our node.js server so let's see how we can dockerize our node.js server so for that I'm going to just close this app or stop this app and now I'm going to create a new Docker file so let's just create this Docker file by just giving this command which is touch Docker file now I'm going to go inside my Docker file and here inside my Docker file I'm going to use the node base image so when you go to the docker Hub there is an official base image for node.js and that is what we are going to use so I am going to just try it from and the base image will be node and the version of node we are going to use is a version 12 so you can use the latest tag also here which is going to give you the the latest version now in the next step I am going to define the working directory using the work their keyword and we are going to Define this work there in the user forward slash SRC for slash app folder and now this should be work data right so like this okay so we have defined our working directory inside this working directory we are going to ah copy our code and then we are going to do all the stuff now ah let us copy uh all the files which are there in our current folder to this Docker image so we are going to use the copy keyword to copy uh all the files but first of all we need to copy the package.json to The Container so that we will be able to run the npm install command and npm install command what it does it just installs all the dependencies into our container right so let's first of all copy the package dot Json file so we are going to copy the package log dot Json file and package dot Json file so these two files are responsible for all the dependencies to this directory right so now we have copied the package Json files so next step is to install all the dependencies using npm install so you can just give this command run npm install now if you are working in the production environment this command can be little bit different let me just write this in the form of comment so you can just write run npm CI and then you can give this only production flag production okay so if you are working in the production environment you can give this command if you are working in the development environment then you can just do this command so npm install will install all the dependencies and in our case there is only one dependency which is Express right so via this npm install this Express npm package will be installed in our Docker image now in The Next Step once all the dependencies will be installed we are going to just copy all the files which are there in our server code so we only have this one file which is server.js but let's say you have many modules and many files inside your node.js projects so I'm going to just write copy and then I'm going to copy all the files and folders which are there in the current directory okay now next step is important and this step is we are going to expose our Port so I'm going to just write expose and we are going to expose the port which we are using in our server so we are using uh port 8080 in our server so we are going to expose this port that means that we want to expose port 8080 into our Docker container so this exposed keyword means that we want to expose port 8080 from our container to the outside world for example to our host machine and this expose is a way of documenting so it's not going to publish your port at runtime it's just a way of documenting in your Docker file that you intend to expose this port 8080 in your Docker container so exposing Port using this expose keyword is a way of documenting which Port are used but it does not actually map or open any port we are going to open and map the port using the docker run command and we are going to use a different flag for publishing our port or opening or mapping our Port later when we just build and run our our Docker now the next step here will be to run our node.js application and we all know that we just need CMD and then inside our square brackets we will just write npm and then we are going to just give this comma and then we are going to give the name of our server.js file so this will be server dot JS now here one interesting point to note here is when we are going to copy uh all the files and folders from our current directory to the docker image you can see I have used dot dot that means it is going to copy node modules also into your Docker image and we have already installed our node packages using this npm install so this is going to override this node modules folder from your image right so to avoid copying your node modules ah into your Docker image you can create a Docker ignore file so this Docker ignore file is going to prevent your local node modules or your debug logs from being copied into your Docker image so let's uh just create this Docker ignore file so to create this Docker ignore file you can just write touch dot Docker ignore in the same format which I have used so this format is recognized by Docker and whatever you write inside this Docker ignore file so let us create this Docker ignore file first of all so we have created this Docker ignore file and we want to exclude the npm modules and npm debug DOT log file from copying into our image so this means that we have added npm modules and the npm debug log file ah which will be excluded when we are going to copy the files from our local container to the docker image okay so this will avoid the overwriting of our npm modules now we are done and we can build our image so let me clear this terminal so now let's build our image by giving the docker build command so I'm going to just write sudo ah docker build hyphen T and then the image name so let us say I am going to just give the name node underscore test colon the tag you can give any tag to your image so let's say I am going to give 1.0.0 or tag to my image and then the context and then press enter which is going to just build this image and in few seconds this image will be created so let me clear this terminal once again and let's list out all the images so sudo docker images and when you see here our Docker image is created with the tag 1.0.0 15 seconds ago okay so now we are going to run our container so to run our container we can just use sudo Docker run so as I told you we want to expose this port 8080 so that ah this server can listen to the request from the outside the container right so in order to map the port we use the flag which is called hyphen P which is also called publish and hyphen p is a way of mapping a host port to a running container Port so this is our running container port and let's say we want to map this port which is running inside the container to our Local Host machine and we want to let us say give the port 3000 in our Local Host machine and which is going to be mapped to port 8080 so if you specify this expose the port and if you specify this publish flag to map the ports then the service in the container is accessible from anywhere even outside the docker so this means that we want to expose port 8080 from our container to the port 3000 inside our host machine and now let's give the name of our image which we want to run which is node underscore test colon 1.0.0 okay and let us ah run this Docker container and this gives me error and the error is obvious because instead of using npm I should have used node okay because we have started our server using node command not npm npm we used just for installing our packages and man managing our packages right so let's rebuild our image once again and once our image is rebuilt we are going to just run our container so now our container is running and we can see the same output now we might be confused or you might be confused that we are exposing the port 8080 and when we go on this URL on our browser so let's go to this URL on our browser and let's see if it works or not so it's not going to work because we have mapped the port 8080 to the port 3000 on our local machine so this is the port on the container on your Docker container and this is the port which it will listen on your local machine so we want to listen on Port 3000 on our host machine so instead of port 8080 you can give Port 3000 and it's going to print hello world right so this is how this port mapping work so this will be the port which will be available on your local host and this is the port you have exposed inside your Docker container so let me just stop this container so I am going to go to the next terminal and I'm going to just write sudo Docker PS to list out all the running containers and this container is running so I'm going to just use the container ID from here just copy the container ID and then sudo and then the container ID which is going to stop this container so now this container is stopped and you can see uh in this terminal also that we are out of the container right so now let us say let me just ah clear this terminal and now let us say we want to map to the port 8080 itself on our host machine also from our Docker container so this is the port on the docker container and we want to map this port to the same port on our host machine if it's available then it's going to run fine so let's run this command and now this time when you go to the browser on Port 3000 obviously you will not get anything because we have mapped uh the port 8080 to our host machine now and now uh when you give port 8080 it's going to give you hello world if you want to run this server in the detached mode as I have told you you can use hyphen D so that this node just will run in the detached mode that means it will run in the background so this is how you can expose the HTTP Port you can also expose the TCP port and the UDP Port from your Docker container so let me ah just stop this container so I am going to just stop this container first of all and let me show you how you can expose the UDP and the TCP ports so let us say you are running a application and and in this application you are doing some TCP communication or the UDP communication so for mapping the TCP port and the UDP Port you uh can use the flag hyphen p and then you can use this kind of notation so the port which you want to expose from your container let's say I'm just exposing Port 80 and forward slash TCP so in case you want to expose the TCP Port you just need to write forward slash TCP after the port which you want to expose from your container and this will be the port you want to expose to the host machine so this port will be available on your host machine from this port to your container so this is the mapping right for UDP you just write forward slash UD P right so the flag is hyphen P you just need to write forward slash TCP or forward slash UDP to expose the UDP or the TCP flag you can expose multiple ports also by using this hyphen P flag so its not that you just can use only one hyphen P flag you can use multiple hyphen P Flags to expose multiple ports from your container to the host machine so this is how ah put mapping Works in a Docker I hope you have understood this concept so in this video we are going to talk about Docker Hub so what is Docker Hub so Docker Hub is a service provided by Docker for finding and sharing your container images with your teams or with the general public so as you can see I'm on this website which is Hub Dot docker.com and here I can sign in at the time of downloading the docker on your operating system you might have created a Docker ID for you and the password for you so you can log in with that Docker ID and password so once you are signed in with your Docker ID and password you will be able to see this kind of web page here you have this explore option where you can explore all the other rep repositories you have this repository option and under this repository option you will be able to see and manage your repositories which you have created and which you have pushed into your Docker registry here you also have the option for organization which we are not going to cover in this video and also you have all these General uh account related stuff here right now let's talk about the pricing a little bit so you can see uh for public repository Docker Hub is absolutely free and that's what we are going to be using but if you are working in an organization or you want to create some private repositories for your Docker images then you can choose one of these options which are provided here also it's not necessary that you need to use Docker Hub as a Docker registry you can create a Docker registry you have this documentation which you can use to create a Docker registry I know Google Cloud provide a Docker registry or a GitHub or nowadays also provide these kind of Docker Registries so you can create your own registry if you want you don't need a Docker hub for just managing your images right so right now you can see I don't have any image on my Docker Hub account so to start with I have this very simple Docker file which I want to convert to the docker image and then I want to push that image to my Docker Hub registry so let me list all the docker images on my operating system right now I don't have any image so let's build one image so I'm going to just write sudo Docker build dot hyphen T and the name of the image I'm going to just name my image as hello and then press enter which is going to just create this image I have this hello world image which is created five seconds ago right so now let me just also quickly run this image to see everything is working so I'm going to once again write sudo Docker run hyphen hyphen RM hyphen i t and the name of the image which is hello and then press enter and it prints the content of my main dot CPP that's what it's doing so that's a very basic minimal image the size is very small that's why I have done this and once you have all these images let me just clear the terminal and then let me just move this terminal little bit up and let's just list all the images once again so now I have this image hello and I want to push this image to my Docker Hub registry so in order to push this image first of all you need to log in with your Docker ID into your Docker terminal most probably you are already logged in but if you are not you can just give this command which is a sudo docker login and if you want to log out then you can just write log out here right so let's give this command which is a sudo Docker login and then give your username here I'm going to provide my username and then you need to provide your password so let me quickly provide my password and then press enter which is going to log me in the docker so you can see login succeeded and now I can just push my images to my Docker Hub registry so first thing we generally do in order to push the image to the registry is we just tag it so we can give this command which is a Docker and then tag and then the name of your image my image name is hello you can also take the image ID and then give the space and then give some tag to your image so right now because I want to push my Docker image to this Docker Hub account and which has the username code bind I will just first of all write code bind here and then forward slash and then you can give the name of your image I will just leave it as hello and then you can give the tag of your image so I'm going to just give the tag one 0.0.0 so this tag is useful whenever you want to just let us say keep working on your image and you want to update the image and want to adjust version your image into multiple versions so you have the track of all these versions right so I'm going to just tag my image I'm going to press enter and then I will once again list all the images and now you can see I have this image which the this name and I have the tag 1.0.0 right now once you do that you are ready to push your image to the docker registry the command is very simple sudo Docker push and the name of your Docker file which is codebind forward slash hello in my case you also need to give the tag here 1.0.0 and then you can just press enter which is going to push your image to your Docker Hub registry so just wait for some seconds and you can see it's pushed so I am going to go to my Docker Hub webpage and then refresh this web page and now I can see this image which is available here and also you will be able to see that this image is a Public Image so it's not private so anybody on Docker can see your image right also when you click on this image you will be able to see more information about the image so here you can give the little description for your image and also you can even write the readme for your image what it is doing and what's the purpose of this image right so here is the general information about the image you can also see this tags ah section where you will be able to see the tags related to your image I only have one tag here and the size of this image is around 746 kilobyte right and also you can see how you can pull this image so you can just pull this image using Docker pull code bind forward slash hello and then you need to use this tag you can just copy this and then pull this image also also you have the build section this is for the auto automation so if you are using GitHub or bitbucket automation system then you can directly push your image from the GitHub or bitbucket into your Docker registry you also have the collaborator Tab and then web hooks also and then you have the settings related to your Docker image right so you can make it private if you want and also you can delete your image from this section right so let's say I just want to pull this image I will just copy this text and then I will just write sudo and then paste this test text which I have copied which is a Docker pull and the name of my image with the tag and it's going to pull this image if it's already not there on your operating system so this was the simple demonstration using which you can create your images and then push your images to the docker Hub and then manage your images using the docker Hub so I hope you've enjoyed this video and I will see you in the next video