hey guys little program acknowledged in this video we'll be talking about inheritance and see business well inheritance in C++ or any programming language it is not different from what we know about the inheritance right so what do we know about inheritance if predecessors shared some of his properties with the successor so say a father has a green eye and maybe the son will also have a green eye because of inheritance of genes right but that is what we know about inheritance then in programming there is no difference in the function it darisha parent class and there are Chinese classes which inherits some properties from the parent cluster that is what you need in streets in programming and we will see how to do that in C Christmas now why do we need in irritants we'll say I have a class so here I have an animal class so I have some properties in the private section and I have some properties in the public fiction and now I want to create ten elements well it's pretty easy like so since we know but it is what we can do this we'll just say animals you will eat 10 yo created ten animals now let's say I want to create ten tigers and Kate dogs also and they all have these similar properties but the only difference is that the tiger will also have an inner method called roux which will print roaring and similarly a dog will have pie right so how do we do that well if you think you are copying the classes and then creating two different classes for tiger and top and then the fraternities in the similar way then I prom it will work but an efficient way would be don't inherit the properties from these animals well if you see I didn't talk both are animals with so both have species named both have an H both eat put sleep but the only difference is that the tiger woods and the dog perks so if you can take advantage of all these properties from fun class and I had whatever extra features you want to add then that solves a problem of creating a subclass rate so what I mean is say I have the class tiger and then I have some method like public void rule and then this is this going to print out truly mother consumer now see it I want this table to have all the properties of an animal it should have a species name it should have some age and then it should eat it to sleep because those things so you can just pop it down but an efficient way would be to inherit them and how do we inherit something well we'll just put this golden over here and then put public animals and we'll talk about what this means right so for now this is how we can inherit the properties of an animal and now if you create a tiger you will have the properties of the animal as well as the title so I can do TDOT eat which is basically defined in this animal class it is not defined in the style class and I can also do t dot Road what is also valid now if you're under string does not mimic type yeah that's because I did not use using namespace STD booboo lose that and now here you can see eating and Treviso eating this from this thing from animal class and roaring us from the tiger tails well if you want to create a dog it is very similar you can this to class talk of the sick animal and here you can just say public why but it says party on a consider then right so now if you run this when you didn't eat all objects so you can do that from there's a dog D and D don't eat it on park because the notice for the tiger thing you can say D done by and I had done this you will get similar results you'll see eating and then bite so dot effect went enough inheritance you can take advantage of all the features which are defined in the painting class or you have something called basically different names for this would be some language its consumer class and then it's also called as a base class it's called a painting class and there are many names and then this one also has signal new so this is called a child class and then this is corridor and inherited class or something so basically we'll just stick with parent child because that switched ontology and that's how inheritance works and she presents that simple and now we just talk about these things and uh we also see how to take full advantage of inheritance in later videos because it's not a fun video topic inheritance is very fast and then there are many I xx of individual so we'll see what these things are in this video we see how two basic inheritance in this video and then we'll see how to do multiple inheritance and all those kinds of complex stuff and later video 3 so first of all talking about this this will specify wait to inhale and this class will specify from from here to here so this is to bear and this is from vessel we just write it down this will specify fair it tiger do I have to hear it and the other one from fear do I have to do so other things we are specifying what we are seeing this you create a class title which will inherit all the properties which it can delete it well there are some restrictions we'll talk about that but this statement this particular line means to create a class title which will inherit whatever it can generate from this class which is uneven and put everything in the public section so that is what it means so public makes it doesn't mean that everything is going to inherit it is going to go into the public it means that whatever it inherits just inherit a structure so if you see here you have private and publicly so when you are inherited it as a public inheritance what you are doing this you are just maintaining the structure so a private anyway doesn't like in Harrogate so if you have anything else that is going to get into that section and public things will go into the public section then you can do private here you can do something like private what this will mean is it doesn't maintain the structure it will just put everything inside the private section so all everything it inherits go to the private section and these methods are long not accessible from here to now if you run this ok I rented in the tiger class so let's just make dog as private and now if I try to run this I will be getting a dated right because I have made it private inheritance that means whatever I can inherit I'll put everything in the private section something like this will be created instead of memory and these two things will go inside here private doesn't need it so Pilate members don't get in unit 8 they're private to that particular class what get inherited this public and protected so remember protected classes well we talked about protected very briefly over there because we know that protector is better understood in irritants so we'll talk about that not well protected is basically when you have something which you don't want to share with objects but you want them to be inherited this I I don't want species and age to be access from objects of this class well create an animate object I don't want the species and age to be I just from that object but I want those things to be inherited so at that point of time I will make these two things as predicted members who protected means I cannot access with an object but I can inherit them so what I can do here is instead of private so let me just do this I can just protect the rear so and now actually these two things go inside tiger and tofu if I do something the public here well I told you it maintains two structures right so if I do public here and then I'll just put it under the method its oh no it said age which is basically said they'd so H then this age you can see here age is actually coming here which is basically not defined in the sky Douglas but it got inherited from this protect Utley f1 in this animal so if I do this is equal to weight it is going to work and what we can do here is I'll just read Tiger TV and if I t dot sorry T dot set each to something like ten and then we can also do till date so say int gate age written nature and if we try to print that each so fantasy out TDOT age sorry do you don't get age and if I look in the console you will be symptom which were set here and that age is actually derived from this animal classified and now if I try to create something like animal or even tiger if I put tiger dot age I won't be able to access it so if I do T dot a is equal to 10 I'm getting error so it says if we look in the debug console it says that any animal age is protected so that means that I cannot change that it is like a private member to the object but it's like a public member for the inheritance so that that's what protected it so this is for the privates of this I did you change this is for the private thing but protected it means that it can be inherited cannot be accessed by objects public means that it can be accessed with objects as well as it can be inherited into other dresses so that's all about basic inheritance in C++ so again I said he kept this will specify weight to it so if I don't protect it here what is going to happen if I do protected here everything is going to go inside the protected function so why do we want to do that so let's say I want to create another thing member for knowledge say tiger baby it's the baby of discharge so if I want to inherit something from this I can do something like this public either which is completely I don't know what is happening something from here is going to get in in detail insert the tiger and something from Tiger is going to get inherited inside this class which is called tiger baby and that is how inheritance works and that's how it boosts your programming right so the next video we will talk about other types of inheritance and how to effectively inherit something and we'll talk more about how constructors and destructors work in putting them happy coding