hello guys welcome to the next video on JavaFX tutorial for beginners in the last video we have started creating a calculator in Java FX using modelviewcontroller design and we have created a few classes like main controller model class and we have created our main dot effects I will design something like this now in this video we are going to complete this functionality for the calculator okay so in the last video we have created this main controller the Java and model dot Java classes right so first of all we are going to link our F XML file with this Amin controller class so go to your scene builder and on the left hand side just choose this last option which says a controller and in here just choose the class for the controller so in our case it's application dot mean controller class right now just select all the buttons on which you can see the numbers so these are the buttons from 0 to 9 don't choose the operator buttons right just choose the buttons which has numbers on it ok so choose all the numbers and then go to code here on the right hand side and go to on action and choose the action process number okay so process number this is the method which we have created in the last video if you go to the main controller class this was the method we have created right that's why you can see this process number method or in own action in the same way just choose all of your operator so this one this one this one this and this these five are our operators so select all these operators and once again here choose this time process operators right so for numbers we are going to use the function called process number and for operators we are going to use this method called process operators so linking is complete for the controller and effects ml file now let's go to our Eclipse IDE and first of all we are going to go to our model or Java class and in here we will complete this calculate method so this is the easiest part so what we are going to do is we are going to add a switch statement here and as a key we are going to provide our operator okay so based on the operator we are going to decide what action we want to take so operator can be plus minus or multiplication or division right so let's say our operator is plus so what we are going to do is we don't need this break here we are going to take this number one plus number two and we are going to return this okay so just do something like this okay in the same way we will do the same for a minus multiplication and division so this is for this is for multiplication and this is for division okay so for it's simple number one number two for multiplication it's also simple number one Astrix number two for division first of all you need to check if your number two is zero right if your number two is zero then it will going it's going to give you infinity so let's just check if number two is equal to zero then we are going to return zero from here okay otherwise we are going to return the division right now in the default case if the operator doesn't match any case then in the default case we are going to return zero okay so in the default case just return zero so this is how our or calculate method in the model class will look like okay now let's go to the main controller dot Java class and in here first of all we are going to define the label and we can name our label as for example result okay and in here above this label we are going to provide this tag which is at the rate FX ml and what this is going to do is it's going to tag our F XML file with the label and just import this label from here which is Java FX label okay and also import this F XML from here okay so this is not going to show you the error same we are going to do for our method like this now we are going to define three variables first will be a long number one and we are going to initialize this by zero okay the second variable will be a string so it will be a string and we will name it as operator okay and we will initialize it by a blank string and third variable will be a boolean string variable so private boolean start and we will initialize it with true value okay now first we will determine whether this flag is set or not in our process number method so go to your process number method and just write if start then what we are going to do we are going to first of all set our label as blank so just write result dot set text is equal to blank and then we will set our flag which is starred to false okay now outside this if condition what we are going to do is we are going to create a string variable and we will call it as value and then what we are going to do is we are going to create a bracket and inside the bracket we are going to write this code which says in the bracket button then outside the bracket even dot get source and outside the bracket you will just write dot get text okay and what this is going to do this is going to just take the button text so for example we have text on the button seven eight nine or all these numbers okay so this button event dot ket source takes the button text and then transfer it into this variable okay and just import this button from here so button class something like this okay and it's going to clear your errors now in the next line what we are going to do is we are going to set so just take this result and then dot set text so just set the text and what we are going to do we are going to take the output from the label so just take set text result dot get text so get text plus the value okay something like this so that's it for this method and in the process operator method what we are going to do is first of all we will just take the input from the button text same as we have done in process number so this value will be your operator right and then what we are going to do is we are going to check if this value is equal to right so just right if this value dot equals and this value is equal to this equal to cymbal okay and we will check the negative scenario so if this value is not equal to this equal to symbol we will check if the operator which we have defined here is empty or not so just right if operator dot is empty and we will check the negative scenario here then we will return so just write return here otherwise we will just equate our operator is equal to the value we have right so operator is equal to value and the number one which we have declared here number one we will equate by taking the text from the result right so just number is equal to long because we need to convert this text from string to long so just write long dot parse long and in here just take your result label name dot get text and after setting this number we will set this result is equal to null so set text and set text as a blank empty string now if the button which is pressed is the equal to symbol then we will go to else condition okay so in the else first of all we will check if the operator is empty in this case we will check the positive scenario so keep in mind here we are checking if the operator is not empty and here we are checking if the operator is empty right and then in the next line what we are going to do is we are going to take the second numbers we are going to define a long number two is equal to same line as this long dot Pass long and then take the value from the get tag from the label okay and now we will call our calculate method in the model right so for that we need to declare this model object in our main controller class okay so in here just add model model is equal to new model and now we will take this model object from here and we can call the calculate methods model dot calculate right and in here you can provide the first number which we have assigned the value of first number from here right and the second number we have from here and the operator we have in this operator variable okay so this will give you your output so we can assign this output to a variable so just call a float variable called output Pro from here and this output we can set on our label so our label variable is result so just call our label variable dot set text and then in here just call string dot value off and then just pass your output here okay and just for cleaning what we can do is we can just assign operator is equal to blank string and start variable which is our this variable start is equal to true and now let's run our code so run it and when I click some number it shows me some error let's see what error is it's giving me error from this line and this result is giving me some error so I think I forgot to link this result variable in our scene builder right so just copy this Rezo variable which is our label variable remember go to the scene builder and select your label inside your stack pane and go to the property in the code section and as a FX ID you just need to give this result here right so choose the result save your code once again so save it and after saving go to eclipse and in here right click on your project and refresh your projects so that we don't have any error and our F XML file is synchronized with our project and then run it once again and now what we are going to do we are going to add something for example 88 plus 12 is equal to hundred okay so we are getting the result right for example you want to subtract something 45 minus 5 is equal to 40 okay or we want to divide something 9 divided by 3 is 3 or we want to multiply something 50 multiplied by 50 2500 okay so our calculator is running now so this is how you can create a simple calculator in JavaFX using MVC I hope you have enjoyed this video please rate comment subscribe and bye for now