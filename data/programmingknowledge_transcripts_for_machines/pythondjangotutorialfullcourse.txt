in this tutorial we would talk about Django so Django is in a python based web framework so in this tutorial we will learn about what requirements we need to have on our machine to run Django so what tools and code editors we require to have so that we can run Django on your local machine so before I start I would like to show the content we are going to be covering in this video so first we will discuss about Django uh by the official documentation of the Django then we will talk about the tools and code editors what we require them and why we need them and then we will talk about how the steps to install Django so these are the steps how we can install Django and how we can start or create a Django project and a Django app on our local machine so Django is a high level python web framework that encourages rapid development and clean pragmatic design so it was built by experienced developers it takes care of much of the hassle of web development so you can focus on writing your app without needing to reinvent in the beat it's free and open source in that Django is usually based on MBT pattern model view template so this I'm referring to the official documentation of the Django so it says there is a model layer so model layer if it is used for structuring and manipulating the data of your web application so the m stands for model and this model layer is used for structuring and manipulating the data of the web application the next we have is the view layer and the view is is responsible to encapsulate the logic responsible for processing a user's request and for returning the response so all the business logic is is encapsulated inside the view layer and it is responsible for building the logic and how the user can request and how you response to that particular request so this is all about in The View layer so next we have is the template layer so template layer provides a designer friendly syntax for rendering the informations how you want to present the data to the user so the all the frontend part that is htmlc is the JavaScript is is there in the template layer so how you can design your frontend Parts how you can want to show that the data or you should show that design your page to the user is all defined inside the template layer before we create a Django server on a local machine and we run it on and open machine you can go to the official website of the Python you can move to downloads and according to your operating system you can download Python and uh when uh please make sure one thing here that when you have downloaded the python and when you run the installer what you have to do is you will get a window like this on your screen and it says like install python 3.6.2 a 64bit version what you need to do is make sure to enable this option that add python 3.62 to power so because this would add Python 3 point any version you are using that is type python 3.x the X could be 3.5 3.6 3.7 3.8 to the path and you can access python via command line I will show this you yeah I would open the command line yeah this looks better with a good font size so what I want you to do is now when you have installed python on your local machine you just need to type python it says yeah it says python 3.8.1 after it's downloading downloading installing python to your path and running python from the command line you can move to sqlite studio and the sqlite studio is used to interact with the sqli database where initially we are going to work with sqli database in Django so you can this is this provides you a graphical user interference so you can click on this link download Windows binary open and Link so I'm opening this link in the new tab so what you can do according to your operating system you can download the file from here and install it on your machine next what you can do is install visual studio so visual studio code is the code editor we are going to use for this series we are going to use visual core Studio because the best part of this is that it has an integrated terminal inside it so I can show you this thing like we this is the virtual Studio code and like we if we are doing some projects so we can interact with the visual studio code as well now the the third part like we have the A and the B part and in the third third part we are going to see steps to install Django so what you can do is open your command line I would recommend you to run this command paper and python base package manager so it helps you to install packages and libraries externally a y command name so what you need to type is pipe install Django so this will install Django new machine but like I have already installed Django on my machine so it might tell me the requirement already satisfied because I have already installed Django on my local machine so to check this what you can do I would recommend you to type python so python has been run by a command line and now type import Django then next you can type Django Dot version so this will return with the Django version which has been sold successfully on my machine so that this look great that the angle has been installed on my machine so first what you need to do is type install Django and you need to run this command so next time we are going to work with Visual Studio code in with the integrated terminal so after opening your terminal what you need to do is move to desktop then move to the that folder CD programming uh knowledge so I am inside this folder and now I am going to run directly command so it shows me that hello.py file has been and the folder called notes are given there so what I need to do is Django admin start project this could be any project name you want to give in my project now I would run the directory command so this says my project has there is a folder called my project which has been has been installed on in the current directory and this is due to this command Django admin start project my project so oh yeah you can see that my project has been sold successfully now the Django project has been created and when if you want to start a app so as I mentioned earlier the inside this there is a manage.p WiFi so you can run this file via command line if you specify python as a prefix to this file name so in the same way we can run this manual.py file by command line if you use python as a prefix so what I'm trying to say is like you move to the oh sorry you move to the inside the Django project folder which is my project named here CD my project now what you need to do is run the directory command so there is file called manage.py you can run this file if python manage Dot py so you are able to run this file but any addition to this uh this I'm also specify something start app and you it could be my app so let me clear one thing here here so it's a bit so first I created a I I was inside my programming knowledge directory then I created a folder called my project so this is a Django project so inside a Django project I created an app which I'm specifying like this python manage.py inside the project folder I am trying to create an app with the name my app I want to tell you one thing that inside a Django project there can be multiple apps so or you can say like there can be multiple apps inside a single jungle project okay so like by using this command we are going to create a app so I would say python manage.py start app my app so when I move to my folder I would say my app so then my app has been created inside my my project folder in the same way I can do one thing extra I can do my app to oh so this also works so like what I told you that inside my Django project single Django project I have created two apps one is my app and another is my app too so what I wanted to tell you that inside a single Django tutorial you can create multiple apps so far we have moved to this now in the last one what you are going to run if you want to run the Django server on our local machine what you need to do is you should be inside your project folder and type python manage dot py run server so so this says Django version 3.0.1 using settings my product of settings starting developer somewhere at this and this is 127.0.0.1 and this is the 8000 is the port number so I want to tell you that this is your local host address till 127.0.0.1 and 8000 is your port number so either you can copy this address or you can one simply do one thing since 127.0.0.01 is your localhost address what you can type is simply type localhost and specify the port number and port number was 8 000 so this would okay now you can see the this page is being loaded here so what we can do we can quit the server with the control breaks break command I think this is any issue with this I would again run this command okay so this shows that this has been now it has been started on my machine so like so now this is so this is the so you have to use this command python manage.py run server so this has has started the server on my local machine with the address 127.0.0.1 colon 8000 so this means that that address was localhost and the port number was 8 000 I had simply type localhost column uh colon 8000 so uh the server is running successfully so the install Works successfully congratulations so though this review from here you can refer to Django documentation tutorial for polling app Django Community I wanted to tell you that uh uh like uh in the previous tutorial I told you like we were going to move with the request and the response part but uh before this I wanted to show you that uh I like I want to discuss a very important topic with you and that was about virtual environment so and to only want to only want to focus on this topic only in this lecture because this topic has its own unique importance and value because it has a it has a good Concept in itself and you need to have a good knowledge about virtual environment how you can work with virtual environment variables so because uh this would really help you like suppose you can have two cases here uh like I'm just giving you two scenarios why you need to learn about Workshop environment suppose you have made your Django project and you want to deploy the Django Project online so in order to deploy the Django pro project online you're on a server you need to have a have a record all the external libraries dependencies and packages you have used in this project in a file called requirements.txt so that the server can install those dependencies packages and libraries on on the server on the cloud I mean the server can install install that dependencies packages and libraries on the cloud then the server will install your application on the cloud and with the help of both the things and both the things gets installed then you are only able to run this application or second case you can have that when you are working in a team and there might be a possibility you want to share this code with someone else you want to share this whole project with someone else and they want to run this project on their machine or server as well but if they want to run this project or on their machine or this server server they need to have the list of those external libraries packages and dependencies you have mentioned in your project so that they can get get those dependency installed on either on their machine or on the server in order to run this particular application so uh without any further delay I again welcome you all to programming knowledge and so I my first step would be uh I have created a folder uh on my desktop with the name programming knowledge and the very first step I am going to do is create a Django project Django admin start project my first project so when I run this command so I am able to create a project inside this directory here you can see this you can even run the directory command as well so this would make sure that you have created the project now when you have made the project you would move into the project folder with the command CD my first project so I am inside the uh my project directory now so now I would create a simple I rather I would say that I would initialize a tab inside this project folder so in the you can get familiar with this command lines in my previous tutorial with the name python manage dot p y start app and you can name anything with your first app I would name this as my first so this looks good so this has created a app inside my project directory so to ensure this I would again run the directory command and it says my first have been installed so I'm going to slow with this because this has a very important concept now now I would run python manage Dot py bruh sir were now I hope the server gets started okay now it's running so either you can copy this address or you can say localhost is same as 127.2.1 I mean 127.4.4.1 now it is with the port number eight thousand so the localhost colon 8000 is same as this address so this is the same as localhost colon 8000 now I would want you to terminate this kill this for kill This Server so I would cross this and now I would open the command line again now I want to tell you how why I'm going to show this I am going I'm going to slow with this because this is a very important concept so uh now I would move to my desktop and I would move to the programming knowledge folder then I would go to the my project folder foreign folder so now so I start started the server and it was running fine so I would refresh this trade so the server won't run now I guess so it's not running so because uh I had terminated the process so okay now it looks fine so now I what I want to tell you is uh you can uh open up your command line and type install virtual world PNP this is new this packet is particularly needed to create a virtual environment so so this is requirement already satisfied because I already installed this and now I would move to my project directory I am wait create a virtual environment variable with virtual e and V e now you can give any name to this it could be my environment my first environment Django environment variable it could be any name so you can have a name of your phone so I will give it my e and V so this this process takes a minute or so so this would create a virtual environment variable so by the time it gets installed I would like to tell you something like we till now we have created uh our environment variable name now we need to in order to use this environment variable name we need to activate this and why we are doing so because this would help us to keep track record of all those dependencies and packages required in order to be mentioned in requirements.txt file so we can use them so this is a very good process uh so now so this environment has been installed and I I would activate so I would type so before this I would show you that I'm in the full program in knowledge now I am in the project ID this my EnV variable has been rationalized with the folder so you can have a look at this folder my in the scripts then there is activate so in order to activate this variable so what I need to do is I would go so this is the same as I would go my e and B slash Scripts slash activate uh activate please make sure the direction of a slash sign so you should please make a note of it so this would activate the virtual environment inside of quality yeah this looks pretty good so the Mind e and V is now working here as a virtual environment variable which will help us to keep a tracked all of our things so what I want you to do is the first thing I want to do that earlier we ran the command python manage dot p y run server and the server had started on our machine so that looked pretty simple now I would type this same command again python sorry for this python manage dot p y run server so now you see this process doesn't get started so it says couldn't import Django are you sure it is it's installed and available on your python environment variable so uh the environment uh variable did you forget to activate a virtual environment but I'm sure pretty sure the virtual environment is is activated and I I this I this time I wanted to show you this because uh I would again run this command and it would give me the same error because I want to tell you that a Django has been installed on my machine so I want to tell you one thing that Django has installed on my machine but not inside my virtual environment so I would repeat this the Django earlier had installed inside my my local machine but not inside my virtual environment so this is the same case when you might want to work with uh you when you work in a team and you might share the code with someone and he might the somebody might add an external dependency so how you can keep track that externally depends dependency has been added on your project so how will you keep a track record of those things so you will keep a track record of those things via environment variable and requirement on DxD the very next command I would tell you to install Django inside my virtual environment I would simply type pip install Django so this would install Django inside my virtual environment so I would want to repeat you so this one installed Django on my uh inside my virtual environment so yeah great so Django has been installed on a machine then the first thing you need to type is so I would like to tell you that I'm inside my project directory so Django has been installed so in order to make sure this I would type this command tip freeze requirement Dot txt so I would write direct one now you can see a file called requirements.txt has been created and I will open that file now this is the point I want to show you that in order to run this project I need Django as an external because jamungo is a python based web framework so it is an external packages or you can say dependency which python uses to make web applications so this python package Django is it needed with the version 3.0.2 in order to run this application so suppose I want to tell you so this is the now I will run the command because now I have made sure that inside my requirement PhD Django has been installed on inside my virtual environment I specified those environment variables packages depends dependency inside the file requirements.txt now I I made sure that Django has been installed my uh inside my virtual environment now I would run the command python manage dot py run server so this would start the server now you can see that inside my environment variable I ran this command and this worked so I would go to this I would refresh this page now the server has started successfully so until now we have covered till this part sorry for this so what I mean with this command suppose I want to tell you that suppose uh we are working uh on project and someone like I want to show you an example of this so these are the suppose you are working on a data science project uh and you are working on a platform like Django and someone might have come with three uh must have added these three dependencies so what you can do is you can add those dependencies suppose I'm just for an example someone was working within and added those dependencies on your project as well so you can utilize this by you can install those these dependencies your packages or by running a command I will tell you so I would first terminate this process so I would open my command line so I would go to the desktop folder then programming knowledge so now I will run the directory command so yes requirement.txt is here and I can read this file so I would type the command pip install minus r requirements.tase this so this line mean that install all those dependencies which are present inside the file requirements.txt in order to get working with this project so this would install all those dependencies so this might happen that already few of those dependencies might be already satisfied like I said this dependency is already satisfied and this might be upgraded into something or so so this is requirement already satisfied now when I came to mat plot live so it started with the process of installing those Library so what I mentioned you so they might be a case that someone might come and add a new uh package your dependency to it so you might need this in order to run the full application whole application so to keep a track record of the dependencies required you need to specify them in a file code requirement or TFT and the server does the same very same thing when you deploy your application and the server in order to run the application on cloud you need to define those dependencies which are needed to run the application so this is a very important concept and to install those you can run this command pip install minus r requirements.txt in order to run all those application so uh thank you very much so like uh I would like to show you one thing that from now we are going to work on vs code and this is my project structure and I would like to show you a graphical view of my project as well so this is my project with the name my first project I have an app named my first app and I have created my EnV and here you can see I have activated my virtual environment variable and I have created a requirements.txt file as well so if you have any doubt regarding this one if this thing seems new to you so you can refer to my previous two videos so what I'm going to show you so this is going to be very interesting tutorial from now we are going to be learning uh this is going to be very HandsOn tutorial so and it's going to be very interesting also so what I'm going to show is you is that first you define a URLs key and then we will generate a response to it so what we need to do is I would like to have a a brief overview of my structure as well so this is I'm inside my first project folder so there are various files with extension.py files so one of the bonus file here is urls.py file so like in this tutorial we are going to be working with this file so so before and the second file is settings.py file so first thing you need to do is move to your settings.py file and inside the installed apps you have to mention the app you have created with the name like this is the app which I made so you have to mention your app name inside settings.py file my first app okay and now what I'm telling you the second thing you need to do is uh like there is a your rls.py file in this in this directory so what you need to do is create one another url.py file so like this is there are two my first project so there is our holiday New York file inside the project directory because I told you that inside a single Django project there can be multiple apps so you need to create a urls.viewer file for this app as well so what you need to do click here new file URL urls.py so I have created this file and now what I'm going to tell you that there are now two urls.py file one is inside my directory my first app and one is inside my direct in my first project so I would also have graphical view to it so I'm inside my first project folder and there's you already your short pivot file inside it and now there is a URL dot py file in this folder as well okay so so you can see that now there are two URL dot Piva file one is inside this folder and one is inside this folder so what I need to mention my Django project that you need to include usg.py file which is inside my folder called my first app so first you need to to include this you would type here include and second path include and you have to mention here my first app dot urls so this is the that I mentioned that under the root directory you have to include my first app.urls so this looks pretty fine now I would Define the urls here so uh you from there you can use the first line you need to add this from django.urls import path so I would move to there from Django dot urls import path and then you need to define a list of URL patterns okay so this looks pretty same as this also because here you can see they have included this from django.urs import path as well and URL patterns is the list so this looks pretty fine here now I would Define the first path to be this but before I want to tell you that the URL will only work when there is a function call defined to that particular URL so for that what you need to do is for you what I'm going to tell you you need to add this line because this url.py is present here so you type from Dot from current directory import views so what is the importance of these two lines is that the you have to create your views here so what they mean by is that for this particular URL you have to mention a function call so I would do one thing that I would mention this path and called views Dot my function called okay and I would name this as index so Nim index is used to refer the path name so I would tell you the importance of an index uh sorry if I would tell you the importance of name how why we mentioned names on what when they are used when you and how can we use them in a blade how can we use them in the templates Okay so uh in what I'm telling you that this pad path to call fuse dot my function code this could be any function name with the name and I have given this name this url url has a specific name called index okay so now you would move to views dot POI file and Define a function my function call and this takes a request as a parameter so this is this is you have to Define this because you you are making a request to this function call and now to generate a response what you need to type is you need to type you need to import to there are two types of responses one is HTTP response and other is Json response so what you need to type is from Django dot HTTP import HTTP response as well as Json response so I think now it should work pretty fine and I have a generate a response return HTTP response of hello sorry hello world so now I would so I would first have a quick recap of this that I have first included URL dot py file first thing I did is include my app inside this then I have included the myfirst app.urf inside the my your.po file of my first project then I mentioned this path and I made a function code to this path using the views file because in the views file views.pify value you mentioned you mentioned your function call so I meant my function call and I named this particular URL as index and inside my first function called I generated a HTTP response so I think this should this should work fine now so I would say python manage dot py run server so this should work fine okay the server has started so I would okay yeah this looks pretty good so you can see you can see because I didn't mention something and I I didn't mention any any word here so it mentioned as there is a root directory so when I passed on this URL it like when I got my URL this particular URL the root directory so it called my function call inside my views.py file and I when I went to the views.py file so it had a request as a parameter and it generated HTTP response of this hello world so so this was the first thing now what you can do what you can do you can pass parameters as well so what you need to do uh I I will show you uh one thing uh for sure another thing what you can do is you can copy this line and you can name this as about and you can call this my function about and you can give this as about okay and now I'm making a path called about and Google dot my function about so it says my first app dot views has no attribute my function about so I need to Define that so I would Define this as well okay for quick or quick I'll overview I would copy this and I would generate about response okay and I would now call this function my function about so what I did here is uh I made a request to slash about from my root directory and it got my function about and I've given I gave this URL a particular name about and it went to q.py file and called this particular function and I would go back to my server so right now on the root it is generating hello world but as soon as I as I made a request to the about page so it says about response so this is pretty good so now you can understand the theory so you can also do one thing now uh what you can do is copy this line as well and name this as ADD my function or you can uh add int or you can send this simply as a views dot add now I am telling this route uh what I can mention showed you like you can also pass parameters as well so to pass integer I would type like this so I would move back to this and type and like you have to mention the end then a colon then h so this is going to be int a then into B okay and now I have to define the views dot add so uh I would go to Dev add not force parameter which is going to be request the second paragraph is going to the integer which I'm taking which was suppose I'm here 8 gaming as X or you can for Simplicity to use a then B so what you need to do is return HTTP response of a plus b so I think it should work now what I'm telling you to add two integer first one is going to be 1 and second one is going to be 2 so it should work yeah now it has it has given me two integers of one and two and it's returned in the state repeat responses in output three the one thing I wanted to show you uh will this work if I change this a Comm B to X comma y X Plus y so this is all a part of learning process so I should make sure the graph server is running yes the server is running so first test thing is I will move to this here it's working now I would move to this about yes working now I would move to add part add 4 comma 5. so this doesn't work okay so why this didn't work because I had mentioned here in the urls.py file this is I'm going to get a as a parameter then b as a parameter so what I need to be mention here that inside my views.py file I had to strictly mention this as a comma B so so make sure you be careful about this now now I will restart the server and then refresh this page now this works because I wanted to make sure because this that inside I mentioned here as a an insured mention here as quick V so input parameters to my request part would be a comma b as well so then I generated HTTP response of a plus b okay so this was look good now the first second thing you need to do you can do you create a URL so I would click quickly create this path intro the first item is going to string name and the second one is going to end with an H and I would call views Dot intro with the name particular name to this URL as intro so this looks good so this would throw because I have not defined intro in my views.vis file so I wouldn't move back to my so this time I'm going to show you a Json respawn Define intro as a function taking first parameter as a request the second as name so let me check what I have defined first so I have defined name as first and age as second the name is going to be first and age is going to be second now I would Define return a Json response so to generate it is just on a small I need to define a dictionary so dictionaries are basically key value pairs so could be my dictionary is going to be variable so with this name is going to be named here and age sorry uh age is going to be an age here and I would return a Json response here so I wanted to show you difference between the Json response so Chrome is an error because uh I think that it's an uh because I have defined views.intro now it should work particularly fine now it has started so what I am showing you I will move to intro name as Jack and age as 25 so will this work so yeah you here you can see that now it returned me and Json response and I am showing you particular like here it shows that this is a Json response with the name and age and for the you can uh show show the raw data as well so this is another this shows you how a Json object looks like and and in the Json format you have just for uh you can hear the name is Jack and the age is 25 and this is a Json object so like in this way you can create a more more URLs so basically here I covered the HTTP response as well as the Json response so so like so to generate any if we generate a request so via a URL so we generate a response to it as well so like in this tutorial we are going to basically work with templates and before I start with this tutorial I will show you that you can go to our GitHub repository and you can have the Look at Full Source Code that we were working with the previous three tutorials so you can move to this link GitHub github.com pro software development and the learn Django is the repository name so I you can have a look at the full source code you can either you can even download this repository you can download this full source code and I have mentioned below how you can run this project so like what you need to do you can either clone or clone this project or download the project extract the files then move into the project directory and then there's a file called requirements.txt I showed you in the previous tutorial in the like in the previous tutorials how you can create a requirements.txt file and why is it created so you need to install the all the packages necessary to work with the project so I would open the requirements or thp file this is these are the package required and after uh installing these packages you can type the command python match.py run server and this would run this project on your local machine so we would be working on this repository as well so after the video I'm going to push the source code you can have a look at the source code as well what changes what changes were done so this would help help you to track the code as well and you can run this project on your local machine as well so uh in this tutorial we are going to work with templates and basically I told you the Django is based on MBT pattern model view and templates so models are based with your database and Views are based on your business logic part and templates are based on like uh on front end so models are based on your database views on business logic and templates for frontend part so what you can I want to tell you that for frontend part basically we are going to use bootstrap so bootstrap is a is a world's most popular framework for building responses mobile first sites so I will show you the responsive nature of bootstrap as well because if you are making a web application and what you want to you want to Target an audience so what you want to do is that if someone is using a web application on a desktop then some other day might someone it might use on a laptop as well tablet mobile phone uh and like there are various screen sizes so you want your application to adapt that screen size to show that to adapt that screen size bootstrap is used so this would make your content responsive in nature and it would adapt to the particular screen size of the user and this will help you too for a faster development as well so it has all the predefined CSS HTML JavaScript libraries and we will be using these templates and I will show you how you can use uh how you can use Chrome developer tools to edit your your pages and you can you can be sure about how you can create your pages as well so the first thing you need to do uh like first thing you need to do like this I this as I mentioned how you can uh go with the repository and the second thing you said a second thing you need to do you need to move into your settings.p by file and uh before this you need to create a two folder one with the name templates another with the name static so templates and static are the two folders you need to do so first I would move to the my project artery so this directory same as the GitHub repository so I would create a new folder name temp lates so this is the first folder I've created templates and the second one which I'm going to create is the static so static basically is working with your static file it could be any static file so basically just for an example you have an image which is in raw image and you need to use it multiple times so you can store a raw image in your static folder so in order to display in your web page as well so two folder templates will be having your HTML files and static is going to have your raw files it could be in any form so after creating these two folders what you need to do is to add them in your directory so the first thing you need to do is you need to move to your settings.py file and one shortcut I would show you that inside vs code you can type Control Plus p and move to any file suppose I have to move to this urls.per file or models.p5 models.py file that this will be file so I would type models.poi and then take uh have give me some recommendation about and I would click on it and I would move to this file so in this way again back move to settings.wi file so this is a very interesting shortcut so under the installed apps I have mentioned my app and under the directories templates what I need to do I have to mention my current path where my templates are sold because this all this list is basically associated with the templates directly so I would type OS dot path dot join base directory comma templates so this would join my folder that I am telling that it could be any OS environment uh I would join this from base directory to the templates so this would connect with this folder so my projector is now connected with this folder the second thing I need to do is uh the same thing I need to do for the static files but this is little different so I have to first mention the list static files underscore diet quiz so this is the list and I would be using this so you can see that these are almost same thing overs.part.join based directly underscore templates and another is OS dot part dot join based directory comma static so what I can do is OS sorry OS dot path dot joint base directory comma static okay so this looks good so I will run my server so till the time uh I would show you one thing that the message was working fine and I had made some URLs like in the previous tutorial I showed you how you can make the request in the response part so uh like uh just for uh just for uh to be sure about this uh I would move to localhost colon 8000 okay so it says hello world uh and I showed you like you can create an uh URLs as well so like in this we are going to create a URL so so first thing you need to do is move to your templates folder so these are the two folders which I made templates and static so inside your templates folder you you will create a new file and name it as index dot HTML and you would you can you make this file and open this file and what you are going to do this inside your index index.html file you are basically create your first HTML page and what you are going to do is you you will move the bootstrap website and you would go to the getting started then introduction getting started an introduction and now you will first pick the starter template because this would be very helpful you would you can copy this foreign HTML so like you can see that it has the whole HTML structure and it has all the JavaScript libraries predefined as well as the CSS libraries as well and one thing that these uh CSS files as well as the JavaScript files has been kept online so anyone can use this uh CSS and JavaScript files because these are predefined in bootstrap and anyone can use bootstrap to make your web application responsive okay I would change this title to learn Django and basically I would save this file and basically the title is this what you can see above here the like introduction bootstrap GitHub dashboard software developer that this is it your title so learn Django and I would say change this hello world Django project okay okay so what you can do is you can move to your urls.py file and you can define a URL to render your page so just for example I would Define path my first page and I would call views Dot my first name so in my first page see and I would give this a name my first page so I have created a path called my first page you and I would call the function my first page from views and I have just given a short name to this URL as my first page so this is showing me an error and why is it because I have did not Define my first page function inside the views so I will move to My Views dot py file so the my first page it is taking a request as a parameter and this time like in the previous two tutorials I showed you is that I they can be various type of responses one is HTTP response Json response but this time I'm uh I'm going to render HTML page so I would say return return render request comma index.html so so this would render the HTML page and when I will move to this URL so this would show me that page so I am inside my localhost and I would say slash my first page okay so yeah so it's fantastic so what you can see that it has rendered the first page now I am showing you two shortcuts the first one is Control Plus U so this would show me the whole frontend core so this is the first shortcut you can use the uh I will repeat Control Plus U okay and the second one is you can use inspect element okay and you can see now the responsive nature of this I can show you that uh this is like Chrome developers tool and you can use this to work with the frontend part of your project it is very good okay Galaxy S5 iPhone 5 okay this shows a responsive nature laptop laptop screen so this will be laptop so what I can do is uh move to Galaxy S5 uh and I would inspect this and I would element dot Styles I would change color is equal to Red so this changes the color of this heading to red but this is uh to only to have a view of your project but as soon as I refresh it because this is temporary you do this uh you can do some temporary changes to have a look but as soon as I refresh this page this is this is vanished so and so you can use Chrome developer tools uh to have a change look at your frontend part we are going to work with templates so basically templates are HTML files and we can reuse them to render the backend logic into the frontend part so first thing I'm going to show you that the in previous tutorial we created a page so this is the page we created in the previous tutorial so I would type control U and this would uh this is a shortcut to see the frontend code so this is the whole frontend code and what noticeable we can notice from this is that this front end code will always like the same HTML structure we are going to use it in a different file as well the so we are going to like suppose in order like I will give you a practical example like uh this is an app bar and like this nav bar is going to be common in all the pages so when we move to another page so this number will remain common and this HTML structure will also remain common so what can be different the content of that page might be different from the another page and it will be different and the title can be different as well but the basic HTML structure and the nav bar and the footer will always remain common to every page because navbar is something you would help your application from to navigate from one page to another and you won't copy the narc or every time you make a new page so that so that frontend code will always be common to all the pages and we can make this with the help of these things which are extends block title block content and block I will give you a practical example how you can use it and what what is the importance of it so first inside my templates folder I would create a new file that is the first one is index.html is already there then I would create second dot HTML okay now I have created second dot HTML uh uh to I have to provide a URL to access this page as well so I would copy this path and paste it here and instead of this uh first page I would do this as second page this is my second page and I would also second page and this is I would also change this second page so to be just quick I did this so I have provided a New Paths my second page used on my second page and have the name this URL as my second page so it is showing me an error because why is it doing an error because till now I have not defined my second page Inside My Views so I would go back to my views.py so like the previous there was one of my post page which used to render an index.html I would create a second page as well my for my second page which would take request as an input parameter and would return render request comma second dot HTML so so I told you like this would I have created a second.html page in my template folder then I provided a URL then a view function to that URL as well so when I move to my page my second page okay so I'm I'm to my page but till now it's blank nothing is there in that page but what I wanted to tell you if you view the source code of the front end part uh it's still not blank so this shortcut goes by control pursue and this is the source code of the first page so you want all this thing to be common in that page as well uh okay before I do this I would uh show you one thing as well I would copy the snap bar okay I've copied the snap bar and I would paste this in my index.html okay uh please make sure this is index.html okay this is index.html uh and when I move to the my first page okay I will move to my first page my first page so this is the cutter source code of my first page and this has been uh updated uh because it has a nav bar in it as well and when I move to this page okay now this looks pretty cool okay so what I told you that inside my first page uh I have given uh a nav bar and uh what I will do one thing also I would change the title as well to make sure there is no confusion my first page okay so this looks pretty fine and pretty cool till now okay and this would this this is my first page and what I need to do this is my first page now I would move to this second.html file as well and inside my second dot HTML file what I will do I would type percent extends index.html and I would give this as a person command Okay so this would when I move to the second page so yeah this is this my second page as well and you can see this has cloned all the things which were there in the first page as well but I need to take care about one thing that my title should be different so I would move back to my index.html and inside this I have to mention the title in this way block title and because uh when I might move to another page so I would type percent block title and percent and block okay and inside my second dot HTML I would repeat this as well so just to be quick I would copy this foreign I would copy this okay this looks pretty fine so uh I would open both the pages this is my second page okay and I will open the first page as well so this is my first page and this is my second page so you can feel the difference here that within within two lines of code I cloned all the HTML structure as well as the nav bar from index.html to second one HTML and I provided two routes to them one was my first page with the name with the title my first page and another one with the title my second page so this looks pretty good and what you can do now is you want to change the content so inside index.html I would move this H1 directory inside a Content so the I would uh name that first page as well so uh I would type percent block content percent and block so when I reload my page so this is my first page so it says hello world Django project first page and when I refresh this page this is also says hello world Django project first page but I want to change this content this particular content block content so I would do one thing I would move back to the second dot HTML and I would type percent block content and again end block and I would type this given head actual heading second page extends first foreign nav bar this should work fine so see the magic now the second page extends first page with a common nav bar and this is my first page okay and this is my second page so you can feel the difference like inside my first index.html for the only thing what was the driving force uh I would open this the and show you that content of this page is here this is the actual line and this was the content of the first page and inside the second page this was the content okay but you can see the all other things are common with the title being different and the content being different everything is common so what I wanted to tell you show you that when you use the extent functionality of the template with the I think with the three or four lines of code you can clone the first page all the HTML nav bar from the first page to an another page and this will reduce your HTML code as well and this will help you to make Dynamic HTML pages in for future so what you need to do is you need to create index.html uh then uh you need to define a dynamic block title to it so okay this looks fine then you need a dynamic block content to it as well and you need to extend this in the second page as well with the help of this line okay so with the help of only four to five lines of code we were able to extend to the uh first page 2 on a second page and in this we are going to work with how you can work with how you can work with the Django templates in order to render more things on your frontend application part but this time we are going to use two things one is going to be the for Loop and one is going to be FS part and before this I will show you how you can pass variables to your frontend application frontend part of your application using the context function and how you render your variables using a dictionary so you will get to know this all this in this tutorial so let's get started with it so first thing I am going to do is going to define a path so this is basically I'm going to define a URL my third page and I would call a function views Dot my third page and I would name this as a my Third Way third page as well so I am using this naming convention so that in order you you get a you don't so you get a brief overview like this is the third page we are working on so I of course I would run my server on my machine so this is showing an error why is it so because still no I have not defined my third page function in My Views so what I'm going to do I'm going to move to my views.py file and Define my third page mistake request as a parameter and basically it is going to return and render requests and third dot HTML so basically till now I have not defined third.html yet so what I'm going to do is going to my templates folder and uh inside I'll go to second.html so I would quickly copy this and create a new file I'll paste this and I'll change this as third and even I'll change this also as third now I'll save this as third dot HTML and a hi ho this will work and I'll move to my localhost okay this server has started my third page so you can here see the title is my third page so third page extends first paid to the common nav bar so I told you how you can quickly extend one page to another another using an extent function so now I will tell you how you can extend variables uh actually you are going to extend variables to the frontend application using the context function this is going to be very pretty good and pretty easy also so what you can do you can simply create a variable I'll create a variable of a data type string with the name hello world now what I am going to do I am going to Define my dictionary and what what variable you want to pass okay just for it just to be on an easy way I'll this is a key value pay so basically basically you are passing the variable where with the name also as where so what I'm going to do I'll you have a quick overview of this so you will type context is equal to my dictionary now you are passing a new variable where so this is your variable basically this has a data on the right side value and on the key side you are naming the name which is going to be rendered on the frontend part and now what I'm going to do I am going to declare H1 heading and to initialize the value of the variable I am going to type where okay this looks good now I will refresh this page now it says hello world so this is pretty cool now what I can do also I'll have another variable great greeting and I am saying hey how are you so this would greet the user but this time I am going to pass with the name message so so this would help you to understand so this can be in any so what I'm telling greeting is unvariable of data type string so this is the value greeting and what name I'm going to pass it with the message name so when I move to the third dot HTML what I'm going to do I'm going to use message here and now this message basically has the greeting variable inside it so this would print the value on the frontend application part so say it says hey how are you so this looks pretty cool now I'm going to define a list of fruits basically Apple mango and banana and I am going to pass these fruits using key value pair so basically I am going to pass it with the name my fuse so this would pass these fruits which has a data type of list or array you can say and I am going to pass it with the name my fruits on the front end part and when I move here I'll create an unordered list using a simple for Loop so I would type okay before this I would type for each fruit and my fruits I'll team please simply end this Loop using this template and for and I am going to type type the list parameter and basically each foot is the value I'm going to print and you can see the magic here you can see apple mango banana is here and simply maybe sometime you have a large list in your back end part and you want to print it you can simply print it using a for Loop so even this you can you you could do this like this most of you we do it like for I in my fruits you can simply print I as well so this would also work okay so you can see here even this also works so this looks pretty cool we are done with the for loop as well now we are going to work with the if else part so in the views Dot py you can see I'll decree a variable it could be of any type and basically uh it could be of any type what you can do is like you can I can have a big overview this is how we use like if LF else and an F so in order to end anything you need to type if Alice else and end if so what we can do okay okay we are going to take two numbers num one comma num 2 is equal to 3 and 5. so what we are going to do and we are going to take a variable answer and that answer is going to be what we can do is answer is going to be num1 is greater than num2 so before this I would print the answer on my console so what I'm going to do is going to refresh this page this would this URL will call that views.views.py and it says false so you can here see it says false because num1 has the value 3 and the num2 has a value 5 and is 3 greater than five no so this gets the value as false and it this prints the answer on my consoles I would comment this out and I would render answer as answer and num1 as num1 okay and also numb to as num2 so this should work I'll see okay now you can see so okay this is going to be rendered so num1 is being passed as num one num2 answer now I am what I'm going to do I'm going to use an if condition if answer and I'm going to use an else part as well else and and if okay so you can see this is the same syntax I'm using so this time I'm only using an F else and and if only if answer if an answer is right this means what I mean meant in my views.py file that if this is true the num1 is greater if else it's false then num2 is greater then you will type num1 is greater than okay we can even do this like this also what we can do we'll use curly braces num1 is greater than num two so this looks good or and else part we are going to the reciprocal of it I'll change this as num two is greater than now one okay so this is my FS part and I'll move to my page and if this says 5 is greater than 3 because I had mentioned in the juice.py file okay if I change these two numbers as any random numbers I'll take such to 10 and I'll take this as seven so this will work maybe this should work but okay yeah it says 10 is greater than 7. because because uh I have created a backend logic and I'm using that backlogic in my front end part as well so in the previous I showed you 5 is greater than 3 now I'm showing you 10 of greater than 7 so you can use this backend Logic on the views.py part to render it and show it in a Content part so first thing I need to do you need to move to your settings.py file so I'll move to settings.py file and inside my settings.py file uh what you need to do you need to define a static URL which is going to be static and you need to define static files directory is equal to OS dot path dot join base directory with the static folder so what here I'm actually mentioning that I have made a static folder and here it is and inside my static folder I have two images django.png and python.png so I would be using these two images and what I'm going to show you what you need to do so this is the static folder which I'm referring which I also showed you into vs code I am showing here for a better experience for a view for view for it and inside my static folder I have two images one is Django and another is python so I'm referring to this particular static folder and to refer this particular static folder you need to move your move into your settings.v by file and you need to Define this heading so this piece of code okay so first I'll create a route so I'll move to my urls.py file and I am going to Define path my image page okay and I'm going to define a views dot my my image page and I'll give this a name is equal to my image page so this is going to be interesting okay now my image page I've defined my image page here okay and I'll Define a function inside my views my image when I have given a name here it is on my image page also so what I'm going to do I'm going to define a view okay I'll Define a view Define my image page which takes request as a parameter good and it will return and render an HTML page request and that's name is going to be image page dot HTML so this is pretty fine okay the server has been reloaded okay so this looks pretty fine till now and inside my templates folder I'll create a new template I'll click here new file image page dot HTML okay this is fine now okay now to create a image page.html what I'm going to do I am going to take a any of the pages here okay and I'll copy this quickly okay now what you need to do I'll Define this as uh okay sorry for this I'll Define this as you can Define any name image page Okay so and what you need to do I'll open this text file so this is the syntax how you can load an static image so what you need to Define you need to Define percent load static inside your Builder template so below this line I'll Define percent load static percent load static and I'll refer to this image okay I'll remove this okay from here what I'm going to tell you that this is a bootstrap and here what you need to do you will learn about images so here I'll type images so this is the responsive class of bootstrap we are going to use which will help us to make our image responsive so this is going to be very interesting so what you can do you can Define diff class is equal to container container fluid okay and what are you going what I'm going to do next uh I'll Define a row we we will be learning bootstrap in the upcoming lectures as well so this I'll give a short idea how you can create a responsive page so this is going to be interesting uh diff class is equal to row and inside a row I have a container then a row inside my container then inside my row I have a column diff class is equal to call MD 6 okay now I'm going to quickly copy this so how you can use this class so so this class image fluid response to this refers to the uh responsive CSS which has been already written inside the bootstrap to make our image responsive on multiple devices and to define the image source I'll use a curly brace that percent sign then again a person's side and inside my percent sign I'll space give space tactic and I'll Define the image name using single quotes so let me Define Django dot PNG so this look this looks pretty fine here django.png and you can Define you can give any name here okay so uh I'll just close the server then restart my server okay the server has started and as I have no issue here so I'll go to my localhost here it's running and I'll give my image page okay so this is throwing an error which says current path let me check my URL oh I didn't save this okay yes now okay now it's okay yeah here you can see so you can see the image has been successfully loaded so this looks pretty good you can also use uh in your HTML page what you can do you can also use python.png so this also works so this looks pretty fine and now what I'm going to show you Django dot PNG so I'll move to django.png and so I'll give you a brief interview so now you'll right click on this and click inspect and when you click on inspect uh so this is a container fluid then this is a row inside there is a column of width medium six that on the multiple on the medium devices it will have a width of 6 the bootstrap has a total width of 12 so we are going to learn that and this image source is this particular image so we can play with the inspector tools what we can do we can use background is equal to red let me uh sorry for this okay like this is our row so I'll type background is equal to Red now you can see a row which was also equivalent to The Container fluid as a background red and what we can do this is a column we'll align this image in the center and type margin 0 Auto okay so now you can see the image has been aligned to the center so let me check okay there might be some uh not exactly but might be some issue but we'll Rectify this in the upcoming lecture how we can resolve this so now the point is when I move to a different devices since I had used image fluid as a class I moved to Galaxy S5 you can see the nav bar collapses itself and the image is being responsive I can move to iPhone x image being responsive so this this is going to be very helpful in the responsive device design the iPhone 5 and I close this and the best part is when I refresh this page it's all gone so because that was temporary to make this permanent you need to define the CSS in your HTML page and I'll Define as margin 0 Auto okay so when I go to space refresh now this is permanent so this this is pretty cool so so today we are going to work with images so in the previous tutorial I showed you uh how to show an image and I applied some bootstrap classes uh to show that image on the HTML page so today uh before we start we are going to basically have an overview of the bootstrap grid system so in this grid system I I will show you that there are some predefined classes with extra small small medium large and extra large and this is the Syntax for them call SM call MD call LG and call Excel for respective classes and for extra extras all we only need to we don't need to Define anything with the Practical implementation we'll get to know one thing you need to observe in this that the bootstrap container has a column width of total 12 columns so what you need to do you can Define columns either in the multiple uh you need to Define them in the multiple of 12 like either uh you can Define for an example a column of width 4 then again 4 then again 4 or then 6 and again 6 because 4 plus 4 plus 4 is equal to 12 and again 6 plus 6 is equal to 12 also or if you if you want to Define any other ratio you can define a column of the width 10 and the next with the 2 because 10 plus 2 is equal to 12. and this way you can define a column width of 12 columns by defining them and giving a proportion with your with your desire what you want to give to your frontend application so this is a syntax how you can make columns plus rows so we will have some idea yeah this was a what I was explaining that the total width of the column is 12 so what you can do do like here it has been mentioned the first is of column 8 and another is of column four so this was total about 12 and this was a total width of 12 and this would help you and bootstrap manages you to help have responsive design of your application like in the previous tutorial I showed you how you can render an image using bootstrap and sorry with how you can render an image with Django then with the help of bootstrap classes how you can make it responsive so let's get started with this tutorial so I would tell you first I would go to my vs code editor then I would run my server with the command python manage dot p y run server so this would start the server on my local machine and what we can do till the times I can show you one thing so this is our template which we had made it yesterday so I would move to the local server so what you can do you uh so this is my local server so uh I would move to a route with the name I had defined in the previous two so I would go to move to my usuals.py file and my image page I had defined so I would move to that route my image page okay you can see an image had been already uploaded on this route and on this page so basically I showed you how you can see the responsive design you can uh press Ctrl shift I or you can right click and go to inspect so this will lead you to Chrome developer tools and from here you can see the responsive device design of your application like iPhone x shows this way and iPhone 6 then pixel 2 XL then Galaxy S5 so this shows the responsive design so one thing you notice as soon as I was on on a big screen the nav bar used to had expanded view but as soon as I moved to a small screen so you can see the nav bar had been collapsed so this is a beautiful nature of bootstrap so this would help you in designing your frontend application so uh today what I'm going to do I am going to define a path my image page to and in views.py file I also Define views dot my image page 2 with the name is equal to my image page 2 Okay so this looks pretty fine so inside my boost.py file I'll Define I'll quickly copy this and I'll paste it here and one changes I need to make my image page too and it will have image page 2.html as well so inside my templates I need to Define image page 2.html okay I will move to my templates folder okay so this here so this is my image.html I'll quickly copy this Ctrl I'll paste it here and image page 2. okay this looks pretty fine okay so uh till the time what I'll do I'll remove this code and I'll save it as my image page 2 dot HTML so this looks pretty fine and I will move to my image page 2 okay so it says my image page 2.html does not exist oh oh I made a mistake here so I'll renate it as image page to sorry for the error now I'll quickly refresh this page okay here it is so this is image page two so what I'm going to show you the beautiful nature of bootstrap here so this is a container fluid which you'll always mentioned then inside this container fluid I have a row then now I'm telling my bootstrap to divide this row into two columns div class okay and div class is equal to call MD 6 and I'm also defining another column of which six because I told you the bootstrap will have 6 plus 6 is equal to 12 as a column width so I'll also Define another column diff class this is going to call MD 6 and this would now this you can see it now I have a column of 2 6 6 width each and this would sum up to 12 now uh I told you yesterday that this is the syntax you are going to use because I told you that I have a static folder inside there there are two images so in order to load load images from the static folder first you will Define person load static and then you need to define the syntax with the person's static side this per person static with the image name and person again with the curly brace so I'll quickly copy this and this image fluid is in bootstrap class which helps you to make a responsive page okay in this first line I would I would put this image okay so this is the image I am going to put and one shortcut you can see I can right click here and click format document with HTML language features so what will it do it will format my source code and it will help you to better maintain the indentation of the code and in the next I'll copy this so since I'm showing you a demo uh we had done this in the previous tutorial how to load and starting image so let me give an another image that was python.png so I'll give this a name as a python dot PNG and I will move to my page and and refresh this page so you can see now I'll quickly uh I'll click inspect and I'll show you let me do this uh okay so you can see here I'll have expansion view this is my row on okay this is now you this would pretty help you to have a clear understanding understanding how bootstrap works this is my container and this is my nav bar okay this is a nav bar this is the container I go inside a row so this was my row then a column of width 6 you can the left portion is my column of 6 then this is the image okay okay this is the column of width 6 okay then I move to the second column of bit six here it is this was the second column on West 6 and this is the first column of bit six first second and that was the image but now as soon as I change my display I move to a Galaxy S5 see the magic yeah it automatically collapses the image and it helps you to make much design much responsive so you need to inspect element in order to learn about this so this is again called md6 width and this is the sixth of called md6 in the another so we are going to continue with this so so I will tell you that in this tutorial I've already defined a path with my image page 3 and already defined a function in which dot py file and only did you find an HTML page so I would directly operate on this so you can check out the code on the GitHub repository as well so what we are going to do here you can see here you can see my This Is My Views dot py file and I have already defined my image page to page 3 page four so what we are going to do we are going to start our local server which already started and inside my local server I would move to this route my image page 3 so I'll show you some interesting fact about this so this is our image page and here you can see that I have defined a row okay I have defined a row and above that I have defined a container fluid with the heading image page 3 and inside the row there are four Columns of width medium three each so here you can see three plus three plus three plus three is equal to 12 and this satisfies our basic requirement of the bootstrap column query so here it shows 12 columns so here you can see three three three is equal to 12 and as soon as I press Ctrl shift I you can see you can see okay okay and here you can see so this is the source code okay and let me click right click and click inspect yeah here it is row column width of 3 3 3 3 3 and this is on medium device as soon as I click on Galaxy S5 it will all collapse and will move up to a scrolled View and this would bring the response in nature okay let me move to the m image page four dot HTML this is we're going to be very interesting here you can see the key difference uh you need to observe a key difference here that here I had defined medium three MD I defined a class inside the bootstrap which was defined in the grid system as well I'll show you in the grid system yeah here it is this was small SM MD LG XL when I have not defined any class whether it is medium MD SM small Excel extra large I have all uh I'll I'll move to this here you can see I've defined medium in this my image page 3.html but now when I move to my image page 4 dot HTML I have not defined any class so here you can see the Gap so they are there I have not defined any class here so you can have a view for it so this is called md3 and this is only called four you can make it as three as well this is called 4 or okay so when here 4 plus 4 plus 4 is equal to 12 and now when I move to my image page 4 okay this is my image page four here you can see this is four I'll click on inspect okay uh okay I'll show you one thing this is row or four four okay but I told you that I have not defined any class here whether it is a medium small extra large now when I move to Galaxy S5 here you can see the magic now you here it also stays as four 4 and 4 so this wizard up to 12 and this was the difference I wanted to show you in the my image page4.html then here I have not defined like this is Page Three I have not defined any class here sorry in this I have defined a class in my image page 3.html I have defined a class but image page 4 dot HTML I have not defined any class and when I move to my image page 4.html this is 4 plus 4 plus 4 but as soon I move to a smaller device it Still Remains it Still Remains four four four it does not collapse so this says that if for every device we want this structure then you don't define a class then it bootstrap will automatically maintain this structure okay now we are going to do one thing one small exercise uh this is going to be a quick okay I'll Define my image page 5 okay I'll be quick with this image page 5 okay now I'll move to my templates okay I'll move to my templates this is my template I'll quickly copy this uh paste it here image page 5 dot HTML this is image page 5.html I'll quickly wrap up this content inside the row I'm already okay and I'm already left with the row and Inside My Views dot py file okay now inside my wish.pui file I'll Define my image page five I'll copy this and here you can see and this is going to be five and this is 4 okay and this is going to be 5 and I'll change the heading here so this here you can see this is the benefit of using blade template engine you can quickly Define your templates okay now I'll move to five okay now this looks fine this is this is an empty page okay but now inside my urls.py file I will be taking a string parameter with the image name okay I'll be taking a string parameter with the image name image name and inside my views.py file you know if you have any doubt regarding how you take parameter inside URL you can refer to my previous tutorial so image name is going to be in my new parameter okay and what I'm going to do I'll Define a variable image name will take this parameter image name okay let me Define this as my image my image name okay and if okay and I'll perform another operation my image name this is a simple python python function I'm using my image name DOT first what I'll do is is going I'm going to type cast this as a string parameter and use my image state name dot lore and I'll first print this my image name okay this is pretty fine okay this looks pretty fine okay now I'll move to my image page five and I'll type Django okay so here you can see I have print printed Django on my local machine and what I'm going to do I'm going to define a dictionary okay before this or maybe what we can do okay I'll take a variable where and I'll give it a default value or we can do one thing if my image name is equal to Django then where is equal to true LF my image name is equal to python where is equal to false okay however you can do or maybe uh or let me you can do one thing where is equal to false and now what I'm going to do I'm going to create a my dictionary my dictionary and I'll password as well okay now context is equal to my dictionary okay this looks pretty fine till here and I'll save this so my server is running okay now when I'll move to my image page 5.html so what I'm going to do is I'll quickly copy the image syntax here what I'm going to trying to do I'll show you that this is uh you can copy this okay okay yeah that's fine this is fine and I'll Define as 12. okay uh for your convenience you can use it as fall md12 and in another one but before this I'll type percent f r I'll use this block else I'll use this block and I'll end this with the NF person and if okay this looks pretty fine and I'll copy this and quickly paste it here okay first I need to check my backend part what was it uh I'll move my usual by Ubi file if bar is equal to true then I need to be true then I need to get the Django image if that is a good false I need to get a python image okay so this is fine and this would be python.em python.png okay so this looks pretty fine and looks interesting as well okay now I would type Django so here you can see I got the Django image and python yeah I go to python image so this looks pretty fine and uh here what I'm going to show you that this is the magic I want to tell you that I can render two images on a single route maybe I'll type Django with the capital letters okay here it is come because I had used the functions lower I'll move to my quiz.py file okay I I'll close other things and open my views.py file okay uh I had used the lower function okay if my image name is equal to Django where is equal to True else it's false okay so maybe uh when I type python with capital letters I'll get this so this looks pretty awesome you can maybe I can do also type this as capital D small Django and capital G and small o Django this also works so this is great so here I told you that with simple backend logic you can render multiple images on your frontend application today we are working we are going to work with the forms so this is a 10 tutorial if you have any doubt regarding the architecture structure of Django you can refer to our previous tutorials as well so first thing along let's get started with this so forms are made to for the user input so forms are usually made according to your demand and requirement today we will create a form and then we'll use forms uh and then what we are going to do we are going to integrate the front end part of our form we'll today we'll create a responsive form layout and then we'll integrate the back end part of of a logic with the frontend part so we are going to create a we'll see how we can integrate forms then we'll see how do we can submit forms using the one with the request method and one with post method then we will figure out the difference what the difference between the two so let's get started with this so today so this is my project so first I will run my server so I'll type python manage.pui run server and uh you I will move to my localhost so I'll refresh this page so the server will get started so here you here you can see the server has started so what we are going to do today so what we are going to do first I'll create a path the UR path path I'll create my form okay and I'll create a view with the name views Dot my form and I'll give this URL a name is equal to my form as well okay that's looks pretty fine so first I will create a form and so I'll move to my views.py file okay so here's my views dot py file so what I'm going to do so what I'm going to do and I'll Define a view Define my phone and it'll take a request as a parameter and I'll render an HTML page and what I'm going to do I'm going to type return okay return render request and I'll make an HTML page my form dot HTML so this looks pretty fine so what I need to do so I need to define a myform.html inside my template page okay I'll move to my templates so I'll create a new file my form dot HTML so this looks pretty fine so what we are going to do today what you are going to do so this is a form dot are myform.html page so I have defined a few links we can move to this link and what we can do we'll move to this line and what we can do uh we'll look how we can create responsive forms using bootstrap so this is going to be very good so we can see how we can create responsive form using bootstrap and what we are going to do so this is like a box container with an email address and a password then check me out submit we can create a form like this only and this is another one email address example select so this is a select option with the drop down Behavior so this is a text area and this is a form with an input type is equal to file so you here you can see this is input type is equal to file so why I'm telling you all this because this will make you habitual with how what kind of widgets we have to work with the form then this is all about sizing and this is uh what this uh this is Select and this is read only you can read this only note edit allowed here then read only plain text so this is how we do so this is one of the range inputs uh this is a works and with the slider Behavior then others are check box and this is disabled checkbox then default radio second default radio disabled radio and inline so we are very much decent type amount of parameters to work with and then uh this is a form group so of this form grid the form row uh I'll I'll just explain all this how you can make a form and we'll start this from scratch because this is what is going to be very one of the important parts uh and let's get uh started with designing our frontend part so first I'll do what I'll do help just simply pick any template and I'll paste this because I have to extend my index.html to my form page so I'll change this name my form okay now okay I'll remove this line okay and I'll give a heading H1 let me give an heading my form and what I'm going to do I'm going to go to my localhost and type slash my form okay so this looks the this is my form so I've defined the heading to make sure that the template is working so what I can do next is and move to this page and what you can do you can have a simple layout okay you can have any of the simplest layout let's get start with a simple one so we'll pick this okay or if you want me to I'll we'll make this from scratch okay first what you need to Define you need to define a form group so we'll Define a form group so for first we will Define the div class is equal to container fluid okay this is a container then inside this we we need to define a row then I'll Define a column called medium of size 6 or you can say with six then I need to define a form okay so this will pretty fine now what you need to Define inside of you need to define a diff classes you will form group so I'll use this div class is equal to form group okay so what do you need to do so uh I'll use an another okay uh I'll let's get a proceed with this so you can see that for two inputs there are one div classes Reform Group and another is also div classical form group so suppose we are having two inputs div class is going to form group so here you can see I have a container then a row then a call column of uh of medium with six then a form then I have two form groups this means I'm going to Define two inputs so one is input type is equal to text I'll give this ID as my text and name is equal to my text as well and I'll Define what you can see uh they have defined input type is about image email class is equal to form control so I'll Define this class to this because this class is necessary form control Okay so this looks pretty fine and I'll Define a label format form so here you can see there must Define a label label four so I'll Define a label my text my text okay this looks pretty fine and what we can do I'll go to this page okay so here it is a form so but the right now there is no such Enlightenment so I'll go to inspect okay when I move to my inspect I'll go to div class with core md6 and I'll try some CSS out here so I'll do margin 0 Auto so this looks pretty fine my forms just to the center okay I'll do this style is equal to margin 0 Auto and with the same I'll do with the heading as well so I'll try the CSS on this as well this is my heading so let's do something text align is able to Center okay this looks pretty fine and I'll give a little bit of a margin sorry I'll get margin top and I'll I'll use a relative unit and this is in terms of ram so you can simply either you can copy the CSS and this is a key shortcut you can work with this and I I'll put a style tag here and I'll paste the CSS here so this looks pretty fine so and I'll I'll right click here and I'll say format document okay this uh format document oh this is is this isn't working I'll check if something is okay and I have defined a heading and I'll do some changes okay I'm having some issue with this okay now I know this is fine right yes so I have a heading okay now this looks pretty fine and you can see I have a form with my text and I'll do the same okay I'll copy this quickly okay well I will Define some uh a text area so this is a text area so what we can do so this is a text area and we have defined rows for it for how much rows we want so we'll quickly do this okay let's do this text area class is equal to form control okay rules is equal to 3 okay before this I'll give an ID to it ID sorry ID my text area and as well as a name to it name is equal to I'll give this a name as well my text area okay this looks pretty fine and I'll close this text area so it automatically closes it and I'll Define a label for my text area and this was going to be my text okay I'll use the capital M and capital T So this looks pretty fine and when I move to my page okay this looks pretty fine so this is the form we have made and we'll now test the responsiveness of this form so what we are going to do we are going to so press Ctrl shift I or you can simply press inspect right click inspect then we'll use a layout okay now you can see the beauty of bootstrap so you can see iPhone 5 a responsive form is a hair iPhone 6 iPad okay this Galaxy S5 so this is responsive nature of a form so and this is you can see pixel 2 and here you can see this is our form being responsive so this is a beautiful nature of uh bootstrap so uh I'll move to my server here so I had defined a form using my form so this is the form we had made in the previous lecture so today what I'm going to do uh what I'm going to do so this is a I'll create a button in this form first so I'll type div class is equal to form group here you can see I have defined a form group for each input element so form group okay now uh I'll Define a button so this button should be type is equal to submit because I'm going to submit this form and uh and what I'll define a class is equal to button button primary and this would give me the default color of the button and I'll I'll type this submit as the button value to shown on the fronted part so I'll go move to this page and so this is my button I'll right click here quickly to inspect what changes I can do to make this is more responsive and better so uh I'll do margin 0 or 2 so this is the margin 0x auto used is done to Center the element so this doesn't work I'll type display block yeah this works so I'll copy this CSS quickly and uh I'll create a style element here Style and I'll quickly copy this and paste it here and this looks pretty fine so I'll refresh this page uh yeah now the button okay now yeah now the button is in the center and now uh till now I have only Define the form and two things I am missing in this form is one is the path method and another is the action so uh how you can work with these two things so we are going to cover in this tutorial first I'll go to my views.py file and then yours dot py so I'll Define a path here path submit my form and I'll what I'm going to do uh submit my form is going to be URL where I'm going to submit the form and Views Dot submit my form and name is equal to submit my form okay now this looks pretty fine so I have not defined a uh I'll Define a submit my form in method in my view file so I'll go to quickly quickly go go here Dev submit request I take request as a parameter and first I'll do return HTTP response or let me do one thing uh okay okay I'll Define my dictionary here and where one I'll Define a very one where two wire three uh what I'll do request Dot method this would be the value of my wire 3 okay uh and okay I'll do one thing I'll keep this as method and this would be request dot method okay so and I'll Define a Json response of my dictionary I'll quickly cover all this thing so what I'm going to do uh this was my form so I'll Define first action I'll Define a method here and that method first we will work with the get method and then the post method okay guys so this is the get method here and get method and post method have a difference so we'll get this in our tutorial what's the difference between the two first is the get and I'll Define an action so what I'm going to do I'm going to use the shorthand property to how to specify a URL I'll Define person URL okay a person URL and then a percent sign so you can be a little bit familiar with this so I've defined a shorthand notation first caliber is this person URL then I'll Define a name between this single quotes this is person sign then the curly braces okay I need to define the name where I have to submit and pass this form and the name should be this name is able to submit my form and I'll I need to submit my form to this route which has having the name submit my form okay so I'll go here so now I think this is pretty fine so I have defined a URL to submit my form and this form will be submitted to that okay that route now I have method defined the method as get an action is this okay now what I am having uh I'm having uh an error and that is I've not defined the value of my keys in my dictionary so what you can do okay first what I'll do I'll comment this out and comment this out okay so first I'll tell you show you one thing okay line and having an error viewers.py line 2. okay I'm having some error let me check okay no no okay now it's pretty fine sorry sorry so okay now it's fine fine okay so my form is ready to be submit so what I'm going to do first I've only made a request on method so what I'm going to do I'll make a test test okay I'll make a different value test debug now I'll submit my form now what you can see here okay uh let me I'm having some issue in my form okay depth submit my URL has been defined and Method has been get okay okay I Define the URL okay submit my form I'll do first space test debug yeah now this is a free Divine okay so now this is fine totally fine okay I I had some issues so I restarted my server now it's pretty fine okay so what I'm going to tell you that I'll quickly cover up the things I defined a URL submit my phone then uh this is my uh your URL and now I have defined the action to this URL so I'm referring here and method was get so as soon as I went to this URL a views just submit my firmware score so when I went here what I saw I returned a dictionary a Json respond only mentioning the method so this method was uh basically get method so what I got here the method is get okay so how you can derive the values so this is the weird one and required two so whatever okay so the main important thing what I'm going to do so what you can see in the get method you can see the name of the response okay uh sorry the parameters parameters which are being password so I had my text which I had put the data as test and I had my text area which I put the data's debug okay so you here you can see the name of the variables so these variables are being separated by a question mark and the route is being submit my form okay so what I'm going to do how you can use these values requests dot get and the first is my text okay and this is the variable I'm being referred and another is my text area okay now I'll do one thing so so I'm missing a comma sign so that's why it's showing me an error now this is pretty fine okay request dot okay I'm also missing a comma sign here okay now it's fine okay now I'll move to my form mind on and I'll type new data new debug now here you can see where one is not defined where one is not defined okay why is it throwing an error okay okay okay okay so this this is here uh okay I'll find new data and new debug and I'll submit this form yeah now this is pretty fine okay so uh I apologize for all the errors okay now this is pretty fine so here you can see I moved to this route submit my form and the parameters being my text which has this data new data you can see here okay this this now this is cool and then I had another parameter my text area here you can see with the values new debug now here you can see this is new debug okay and the method is get okay so so this is the difference here you can see the parameters on the upper hand so so here you can see on the route the parameters are being visible to you so this is the first property of the get method so now another thing we are going to do we are going to change this method to post okay so this is post okay now what I'm going to do request dot post so this would be post request dot post okay so this is the another change I'm going to do now the difference between the two first the method gets changed and now the variables on this route won't be visible on the post method okay so I go my phone okay I'll type some python here python Django framework now I'll submit this form okay now it says CRF verification failed because when you submit a form with the post method you need to define a CRF token so I'd quickly type percent CRF underscore token and this looks now this is fine okay so uh I'll make a submission here okay I'm in a fusing error okay a person CRF token okay uh uh I made a mistake sorry I made a mistake with the two curly braces sorry I'm very sorry for this so now this looks pretty fine so I'll go go back to my phone uh this is python python Django framework okay now this is the 20 minute error okay I'll refresh this python python jungle and now I'll submit this okay now this is fine sorry uh so here you can see uh now the variables are being not there on the route so the variable parameters are not there so that's being hidden in the post method plus you have a CRF token here here okay uh so I had some issues I restarted my server this is where one with the python vat 2 with the python Django so these are some uh what we call them as hidden characters so we'll I'll tell you how you can clean this data and this method is post so basically we work with the get method and the post method in this tutorial so guys in this tutorial we are going to work with the form but and we are going to work with the backend part only but today we are going to create a different instance of form how we can create a separate file uh forms.py file and we can store all the forms in that file and we can render the form whenever required whenever required without writing the repetition of the HTML code code so that brings some kind of a alternative solution how we can create a form and how we can submit them so let's get started with this so uh I have few links so you can have a look at these links so I've opened this links on my browser as well so this first one is this so today the we are basically going to work in something this kind we are going to create a form in this such way and I have defined below how we can fetch the clean data from the form uh that this will remove the special characters any special characters and this is the wickets widgets in the form so basically there are different types of widgets one is a text input number input email URL password hidden input date input date time time input text area then some other also check box uh radio select so there are file input so these are some like many options in the form and how you can render the form on your frontend part using uh today you are going to work with a different alternative solution so let's get started with this so what we'll do first uh I'll have a quick recap of the last lecture uh like we the first I'll open my file your story WiFi so like in the previous tutorial I showed you that we created you with two URLs one to render the form that was my form and another was the URL to submit the form so I used to render a form using my form then I used to submit that form and uh and and we used to move to this URL then we used then we had a backend logic then we had we can process the form data at this URL okay so today what we are going to do uh we are only going to create only one URL and we'll only create a one URL and work well in such a way that it will uh help us out to do both the things so first what I'll do okay okay I'll create a URL path I'll Define my form to and I'll call A View function use dot my form to and I'll Define the name to it name is equal to my form two okay so I've defined this so in such a way that you don't get confused with the previous one so today we are going to work with my form two okay now what I will going to do okay this is my app file and inside my app I'll create a new file with the name forms Dot py okay so this looks pretty fine and what we are going to do so I'm inside my forms.py file and uh I'll move to this link okay so today the very first line you need to type is from Django import forms okay so what you need to do from Django import forms okay so why I'm doing this uh I will uh this will help and first I would run my server python manage Dot py run server so this would help me to get know if there's any such error okay the server will tell me okay so from Django import forms and now you'll create a class for your form which will Define okay I I'll create a class class is equal to feedback uh with feedback form okay I'll have a small B sorry feedback form and what I'm going to do I'm going to do forms Dot form okay so this is the syntax you need to follow okay now you're we are done with this okay now I'll Define two Fields here one is the title okay and another one is subject okay so I'm going to Define and what I'm going to do I'll create a cad field since forms Dot card field okay and forms Dot card field this looks predefined okay I have defined two cat Fields here so I'll give a name sorry I'll give a label with the max length I defined label is equal to tighter okay now this is fine label is equal to we can call it as subject description subject description and I'll Define a Max underscore length is equal to 50 for this and in the same way I'll Define Max in the underscore length is equal to 200 for this okay now what I'm going to do I'm also going to add a different attribute here here you can see that uh I can also Define Wicket is equal to forms.txt input Okay so uh I'll copy this and in this way you are going to text input here for this and for this one what I'll do I'll change this to as text area okay so if I'm not wrong I'm correct with the spelling okay this is text area right so here you can see this is text area this is text input okay so I have created the form successfully so this is the uh form uh what you need to do from Django import forms class feedback form forms dot form then title with the both of them having a label of title subject decision Max lenses and the widget being the text input and the text area respectively now I'll move to my views.py file and I'll Define define my form to will take a request as a parameter and uh before uh using this what I'll do I'll type from dot forms so basically I'm referring to this file from uh forms.py import Star so you can put every form you want okay now what I am going to do I'll put a if condition if request dot method is equal to post okay LS just for the basic understanding I'm doing this request dot method is equal to get so for the same route we are going to check if the if the request method was get opposed Okay so uh if it was a get method so what I'll do I'll create form I create a form and that form was this was the name of my form feedback form okay so I have a feedback form and okay so basically this is equivalent to this okay so this is just for uh having just for and having a this is equivalent to this and what I'm going to do now I'll exit execute a pass statement here uh just uh I'm giving a pass statement till now that it doesn't show me an error and I'll have a form and what I'll do I'll return render request uh and I'll first Define in my dictionary is equal to form okay and I'll pass this form and I'll learn request and I'll make up my form 2 dot HTML okay and context is equal to my dictionary okay uh sorry I'm wrong with the syntax now this is fine but right now I have not defined my form 2.html okay so I'll go to my templates folder and I'll create a new file my form two dot HTML okay now what I'll do uh I'll extend my template so I'll have any page uh suppose uh I'll have this this is a second.html okay I'll have this page so basically right now what I'm doing okay so I'll change the title my form two okay uh what I'll do I'll create a form now that's it I'll create a form and now what I'm going to do basically I had rendered the form so I'll just what I'm doing uh I'll Define the logic when I get to the post method so Define my form two so if the request or method is going to post till now I've defined a path statement we'll Define the logic but if the method is get we'll create the form okay we will get the form from that class and then we will render that form to myform2.html using the dictionary and now Tim same simply will move to my form and simply type form dot as underscore p okay so I'll restart my server okay now this looks pretty fine so this should work now now I'll go to my localhost so the server has started and I'll go to my form two oh now you can see like the form has been made so I didn't write the HTML code so what I did I'll move to my forms.py file uh I had defined a title and subject I've already defined the text input as well as the text area then I went to My Views dot Pi views.py file if the request method was get so I had initialized the form then I had rendered on the page okay and then when I went to my HTML page then I had without writing the HTML I was able to successfully add the form using the HTML sorry using this uh by rendering the form okay so what you can see so as underscore p means as paragraphs okay so when when I move to my page so I'll uh simply click on Control Plus U so this will give me a source code so what here you can see here the form has paragraph tags p p p okay so this means form was rendered using the paragraph okay now what you can do I will type form cast table home as stable so when I move to my page now here you can see the form has been rendered using a table so table row table heading table data then table row respectively okay so this is fine right okay I'll Zoom this okay this is here you can see this had been rendered using a table okay and when I did form underscore as P so this mean it was paragraph so I'll also do this I'll refresh this page then control U so here you can see the source paragraph okay here you can see pivot paragraph and another now also one you can uh undo you can say form as UL so this would give unordered list so I'll refresh this page or say so you can here bullet marks this represents the unordered list so I simply Control Plus U now and you can see uh here you can see here is the form yes yeah here's the form you can see list has been declared list list item list item when the form has been rendered using a list so in the next tutorial we are going to continue with this and then I will tell you the basic part where we if the request method had been the post so what I'm going to tell you if the form will be submitted on so what will happen so next we will add see uh try to style up this form as well as how we can render the errors and how we can fetch the clean data and how when you can check the validity of the form so so like in the previous tutorial we were working on forms so we had made a form using of uh using a form template engine and Django so uh I had made a file name forms.py and then I had made a form so this is the look of our home then in views.py file I defined two method one was a request method is equal to post and one was the get so basically I'll give a quick overview of what we were going to do so like when I refresh this page so basically upon this URL I am making a get request and on having the get request so basically this block of code gets executed and this block of wood gets executed and this tells that I had imported the form on the top of the file from dot form import Star you can import any form so when you use star symbol so I use form is equal to feedback form so this was the feedback form which I was referring to and then I was able to render this form on my on the frontend part of my application okay so basically what we are going to do first thing we are going to do is add bootstrap class to this form so what you are going to do wherever your input is defined inside forms.py file so you need to define a dictionary which has key value pair so basically this dictionary is redefined by attributes so ATT RS is equal to this is a symbol for dictionary so it has a key pair okay basically at the left it will have a keep a key and then on the right it will have a value so basically these attributes could be anything which could be Name ID class which refers to the basic HTML syntax you follow so what I'll do I'll Define a attribute class and I'll uh give it a value of form control form control so uh most of us would be thinking why only form control as the class because this is the default class present in the bootstrap so this will make a form responsive and for the uh another text area I'll do the same okay I'll basically quickly copy this uh yes and yeah now that's fine so when I move to my page I'll uh I would see a bootstrap has been added to my form yeah here you can see the bootstrap has been added to a form but this is this isn't responsive so what we are going to do I'll go to my my form dot to HTML and I'll add a div plus it will call medium six and I'll put this form inside a div okay and and what I'm going to do okay uh to get the form on the middle of the page I'll Define a style is equal to margin 0 or 2 okay now this is fine okay yeah now this form is is in the center of the page now this is good to check the responsiveness I'll press Ctrl shift I and yeah now this looks good okay there is some issue okay yeah it's fine okay now this is formally responsive okay so this was uh till the front end part now for the back end part what if I want to submit this form to submit this form the method should be post method okay and uh I'll generate a token for this which says person CRF underscore token so a token is necessary when I uh when you submit the form via post method okay and uh this is a form which I I had rendered and additionally I need a button also button type is going to submit class is equal to ptn so this is a short form button primary this is a default bootstrap class and I'll give the submit okay okay now this is fine and I'll when uh okay so here comes the button so I'll give a bit a little bit of style to this button style is equal to margin 0 or 2 yes okay okay it is it it is it is not in the center so I'll add display block okay and what I can do okay margin 0 or 2 and 0 for the bottom so uh what I'm going to do so this is the uh uh fold hand notation which says uh on the top I'll give one ram and on the left and the right Auto and on the bottom I'll give zero so this would give yeah so it gives a margin top of one rep and on the left and right width was Auto and the bottom it was Zero okay left and right Auto top is one and the bottom is zero so this is pretty fine now so I'll make uh now I'll move to the backend card and what I told you uh when I refresh this page okay so I was making a get request on this route so when I made a get request on this router you can sit on get request on this URL so the form had rendered but what if I make a post request when I would be making a post request basically I would be submitting the form okay so when I'm going to submit the form so what I'm going to do I'll make form is equal to feedback form request dot post okay uh sorry request dot post so I'll get all the values when the form has been submitted using a post method okay okay but still I'll make a if condition to check form dot is underscore valid uh is underscore valid to make sure the form is valid and I'll make title is equal to request dot post and title okay and subject so I'll make again a same request for the subject subject is equal to request dot post and subject okay now this file is fine and I would print Title Here add print subject here okay and I'll return an HTTP response okay but still I'll make a VAR is equal to Str om submitted and I'll give plus Str request Dot methods okay so this is fine till here yeah now I'll return an HTTP response of where okay if this form is not valid what I'm going to do so what I'm going to do I'm going to render the form again but okay and I Define my dictionary is equal to this dictionary is going to be same as this one here you can see form and form okay and this is this and I'll quickly copy this okay else okay now this looks fine this code I I'll quickly uh give a quick overview is the request dot method was get to this code of this block of code gets executed in which it says I'll render the form on the front end part okay when I submit this form so this block of code gets executed which says request dot method is equal is equal to post so form is go to feedback form I'll get all the values using request dot post if the form is valid then I'll get the two values that is subject and title then I'll print the title print the subject and I have given a name variable which says form submitted by request dot method and I will return the HTTP response of where else in the form was not valid so you need to uh check the uh that if the form was not valid so I would render the form on the fronted part again okay if the foremost not valid so what I'm going to do it says I'll test app debug okay but uh okay before this I'll restart my server okay yeah now it's fine okay I'll refresh this page okay I now when I refresh this page I made a get request uh so I rendered the form of the front end part so test I'll give a title and say app debug and I'll make now submit this form okay so I have submitted the form yeah now it says form submitted post so this was a method which I had defined so when I submit that is the form so this block of 4 gets executed and here you can see that I had executed two print statement here one was a title and one was a subject so title corresponds to test and this here you can see test was title and app debug was there in my subject part so so thank you guys thank you so much I'll catch up in the next tutorial so uh you need to be very careful by the writing this code you need to be very careful about writing which if condition is coming inside which if then else then L If part so you need to have a quick uh you need to have a good uh overview on this so like in this tutorial we are going to work with the alerts in Django form so basically alert handling in forms so in this tutorial we are going to handle alerts in Django there are two types of alert one is for error and another is Success so we will fail the form so we will fill the form we will form the validate and check form for both the cases use bootstrap on the front end to render and display messages so let's get started with this so till now we had a we had made a form so this one this was our form okay on the request method and the on the uh basically uh here you can see uh on the get request we used to render the form and the post request we used to submit the form so we would apply the error handling on the post method part so basically before this I will show you some process uh the process here is about that we have alerts in bootstrap so uh what we can see alerts provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages so there are basically many types of alert so this is a primary alert uh secondary success so be here so here you can see the primary alert is in blue color success is in green color danger is in red color and uh a warning is in yellow color so uh another type of alert here you can see is like uh which are dismissable in nature so here you can see the alerts which are indismissible in nature uh have a cross button on the right hand side which can be clicked and on the refer uh on the refreshment or when when I refresh this page so here you can see this alert message comes it comes up again so basically you can cross the button and dismiss the message uh for that purpose only so let's get started with this so first we will keep try to keep it simple so if the form is valid title is equal to request.post it is subject is due to request.post subject uh what I'll do I'll create my dictionary and irrespective of the result my dictionary is going to have the form feedback form okay irrespective of the result I'll make condition okay then my dictionary of success is equal to true and in the same way my dictionary of success message is going to form submitted okay and then what I'm going to do I'm going to return this page so I'll take request as a parameter my form.2.html context is equal to my dictionary and here you can see now I have returned the my form Dot myform2.html and context will do my dictionary so basically I would move to this part uh we we would use this and here you can see the its Alert warning so it earlier just just I told you you can have a quick remember that warning is for yellow uh dangerous for red and green is for Success okay uh what you can do alert alert success and this would okay and I will display the success message here but only I would display the success message only on one condition that is percent if success is equal to is equal to true then only I will display this so I would uh this is the end of the div block and I would end the condition person and if okay there's a slight error here all right uh uh I hope now it's right so I would Python manage.pyr and server okay so I will move to my phone on the get request I uh I get request I render the form and but on the post I will check the error handling so what we can do here I will type test uh title test subject and here you can see it says form submitted okay so uh okay okay uh there was a slight error because I missed the single s here alert alert success so it could not display the background color but I would refresh this page it says the form resubmission okay okay now it's pretty fine it says form submitted so we can add a margin top to this so basically this would help us out side is equal to margin top is equal to 1 Ram okay I'm not I know it's pretty fine uh we have a margin top and on the cross button it is dissipate so this is pretty cool uh with this for the same part we can do for the error also okay but for this but what we can do uh you've moved our music.py file this would be on else condition so first we will check the error uh I did this uh first because I wanted to have a quick idea of how this works okay but if title is not okay what we can do and this is our form okay uh and we can here add P class is equal to text muted note title should be capital okay so this says note title should be capital okay okay so when we move to our form okay now uh okay I'll save it here no no no this time I would make a get request and render the form okay I think it is throwing an error okay okay okay okay let me for the timing if one pass okay now I would render the form on get request now this is fine okay so it says title should be capital okay this was just so the case I am taking here okay now if title is not is equal to title Dot Upper so this is the string class in Python which which can be checked if title is going to write upper then uh we can uh what we can do we would do the same thing my dictionary of error is equal to true my dictionary of error message is equal to title title should be in capital letters okay title should be in capital okay I hope this is fine I have a Capital C here title should be in capital and then I would uh render the page on the same part okay my form dot will do HTML okay but I would only show the error only on one condition that would be if error should be true and this then I would show a error message okay and this should be my danger class okay so I hope now you have a clear idea what's happening so I would make a get request test title test subject okay now it says title should be in capital okay and if I make a uh okay um I'll make a test Title Here like in capital test subject or we can have this in small letters no issue test subject okay so it's a form submitted now I hope guys this is very clear to you okay basically in this one what we are going to do uh we are going to then there can be multiple errors in the form so like suppose I'll add a new entry to this and the entry would be emailed okay so here it I'll give it as a title as email yeah so email is a new title to my form uh sorry uh email is the new uh field added to my form okay now uh in goose.py file I'll also request email is equal to request dot post and I'll take email as a parameter so here you can see that in my forms.py I added a new field email a forms.carab field link is able to email and in in in the very same way it was a text input okay then I requested for email okay now what I'll do uh here we were trying to see that there can be multiple errors on the page so what we are going to do I will define an error flag error flag which should be false in the beginning so what we are going to do so first if title is not equal to title Dot Upper so I'll quickly remove all this uh so what we are trying to basically try to convey the idea that there can be multiple errors so if title is not equal to title or upper then error flag is equal to true that error is there okay and errors error message is equal to title should be in capital but this time one thing I'm going to change that errors isn't is an array or what you say list dot append error message okay so this is fine in the same way what I'm going to try to do that uh so here you can see that this is an extension to the previous tutorial so what I'm trying to Define here I'll Define a regular expression drag X okay and so basically this array X is used to define the email address so here you can see a DOT symbol with the add delete symbols uh so what I'm going to do Rec X okay so basically I have my email if not so before this I need to Define and import re so this is a default library in Python to use a regular expression so what I'm going to do I have my I have imported the library records the email is there so if not drag X sorry re dot search so search is used to determine the match the regex pattern regex comma email okay if this happens then what I'm going to do yes error flag will remain true error flag will remain too and uh errors dot append error message will come but this time the error message will change the error message would be error message is equal to not a valid email address okay so basically I'm trying to convey the idea that uh there's an error sorry so I'll remove this line if not re okay so basically I'm trying to convey that idea that if the if title is not right or offer that error flag remains true error message would be this and this will be dependent this would be appended in the errors list okay yeah good then I made a logical uh I made a if condition which state logically that uh if this is not a match or a search then error flag will remain true correct an error message will be not a valid email address and that would be this would be appended in the errors list okay okay new condition would be next condition if if error error flag is not equal to true if error flag is not equal to 2 so this is the third if conditional but this all is if else condition depends on your logic part how you can make them uh to be on Easy by making in such a way if error flag is not equal to true that there was no error means error fact is not equal to true then successes will do true and success messages is equal to form submitted okay so now what I'm going to do I would render this to myform2.txtml okay but I'll I'll give a quick overview if title is not equal to title Dot Upper then then if not register search if error flag is not equal to true then this return render request my form dot to dot HTML context is go to my dictionary so this would help me out in this so uh but before this I need to update my dictionary by dictionary is equal to I'll update my dictionary my dictionary of error is equal to error flag and my dictionary of errors is equal to errors so okay so this is fine so uh so I would make a uh I would so now this would render uh my dictionary to myform2.html okay okay uh before this what we can do now I will move to my form.2.html so basically yeah in advance I have done this if uh if error is equal to True yes for error in errors you need to print this error and this for Loop will end and this if condition would end okay so I would restart my server python manage.prm server so when I make a get request to my form so here you can see an email has been added okay uh I'll make a title test okay I'll keep keep this in lowercase test title test subject test mail but this is not an valid email address so here you can see title should be in capital and not a valid email address okay I'll make this test title so I'll make this in capital test title test subject and test me but this time the title is valid but the email is not valid so it should return me only this error let's submit this form yes it says not a valid email address only so test title test subject as the user at the red mail.com so it's a form submitted so I I have gone through all the test cases my form has passed so with this you can see that how the logic works so basically uh in the template part what I'm trying to do was if error is equal to true for for error it errors so basically I'll move to my views.py file here you can see my errors was this error arrays which I had made and this was the error flag so basically even what you can do also print my dictionary so this would help you to get a better idea test title test and test mail so so it says not a valid email address okay and uh what it says yeah here you can see the dictionary is like this the errors has not available so I'll move to my server I'll make a request okay now we can see that on request our server has started okay so I'll move to the urls.py file uh I'll go to this about page yes so it says about response absolutely working fine now in the same way I'll move to my form now I can see that on making a get request to this route a valid page should render so a valid page should render and it says yeah here you can see yeah my phone okay now I'll again make a request to an my form two okay I'll simply type 2 okay yeah now here we can see a page has come okay so uh until now I've been making a request to one valid route so there was no issue but as soon as as I make an invalid route let me type something my any page any page so it says page not found because this URL never existed by any page uh my any page new page even this not existed okay let me type something like some random characters uh even this random character URL does not existed so but we can simply see here you are seeing this error because you have debug result true in your English settings file change that to that change that to force and Django will display a standard 4040404 page so basically what I mentioned here so we will be seeing how we are able to integrate our own 404 page on debug 0 to 4 so basically uh again I'll give you a use case which will help us help us to have a better understanding so what we can do deep exclude Force so here you can see don't run with debug turned on in production so like when if we are changing debug is into Force this means that we are going to be in deployment mode so our application isn't deploying the application is in deployment mode so like uh it clearly says don't run with debug turned on in production so debug is not turned on so debug is false so it says so we are are actually trying to be in deployment mode so if you are in deployment mode you have to define the host so right now I have defined star which works on all the hosts okay so I'll run my server now this is fine I'll make a request to my server yeah this is Hello World absolutely working fine in the same way about absolutely working fine uh my my first page yeah or my home to any of the pages yeah absolutely working fine but now if I'm types of random characters and move to a URL it says not from the request resource was not found in This Server let me type something as my any page new page something like this even not found so now our application was in deployment mode but as soon uh so what we can do we can create our own four zero four page so basically what we are going to do we are going to move uh to move this side bootstrap we are going to work with the Jumbotron this time so like we are going to go to templates quickly create a 404.html okay absolutely fine uh and what I can do I'll copy this paste it here change the setting to 404 error page okay absolutely fine I'll move this heading good I'll copy this code word and part I'll paste it here good yes so as page not found so I'll give a heading that the page is not found and uh I'll give a URL which says okay so what I'll do this page something I'll give give a message a page does not uh something we can give any message this page is missing or does not exist something like uh we can give it as uh sorry this page is missing or does not exist okay so this is absolutely fine uh exists okay this page is missing or does not exist and what we are going to do go to r home page yeah this is fine and I should Define percent URL single quotes percent sign so basically we have to Define in this single course which route we want to move and we'll move to your short POI file yeah and the name would be index okay okay so this is fine okay and how we would render this page so basically your this is the europe.py file of your my first app now I'll move to urs.pify of first project okay so please don't concluse yourself with these two file this is my first project this is my first app and you need to define a 404 Handler so Handler 404 says I'll quickly copy this or even you can type Handler 404 which says uh you have to Define my app name so basically our app name is here my first app dot views so basically I'm referring to the views.py file and I've defined the function error underscore four zero underscore view okay error underscore 404 underscore View so this is working fine uh so it says that my first app.views.era underscore 404 underscore view does not exist because I have not defined it so I'll move to use.viewer file and I Define error underscore 404 underscore View which takes request as a parameter and even new parameter as exception here you can see okay exception and it will return render four zero four dot HTML okay so this is working fine okay now here you can see let me have a quick check handle four zero four this is fine and my first app dot views dot error underscores and review yeah this is fine yeah yeah absolutely fine okay now what I'll do I'll move to my page yeah this is my server absolutely working fine I'll move to an about page absolutely working fine now let me move to a random URL okay it says server error for 500. nothing is missing okay something has been deleted friend request okay okay I'm really sorry for this I had missed the request parameter here okay the uh this is absolutely normal you return render request then HTML page so you return render request and HTML page okay I'll then uh the re restart my server this is working fine and I'll make a random URL request so yeah now this is absolutely fine so it says uh page not found sorry this page is missing or does not exist and go to our home page so yeah if we go to our home page and you can see this time settings dot py file debug is due to force and uh and here that's how you can render our own 404 page so one thing I would like to mention here here that uh like this this is a GitHub link and we will this is the report should we are used to work like we used to learn new Concepts but from this from now on we're going to work with on this repository that's a Django projects uh like on like in this repository Django projects we are going to start building some projects initially this repository is empty but as soon as we start making projects I'll commit the changes okay so guys this is the the link okay I'll comment the changes as soon as you build projects and I'll update the file as well uh readme file so you can instructions I'll Define the instructions how you can run the project on your local machine as well okay so let's get started with this so basically today we are going to start with the calculator app of our Django so we are going to make a calculator app so the very I'll go to my repository so I'm inside my Repository so I'll click on new terminal so what you need to do so the very first command we are going to type is Django admin start project Django projects so in the end you define your Project's name so I've defined the Django project as my projects so here you can see the Django products folder has been created so I'll move inside my Django projects okay fine so I'll have a manage.py file inside this okay yeah this is absolutely fine so I'll I'll do uh okay one thing we can do uh what I can do do if I type python manage dot py okay run server I'll do first run server so this should start the server on my local machine yes the server has started so I'll type localhost colon okay so sorry to the mistake localhost colon 8000 okay yeah here you can see the server has started localhost colonies of eight thousand uh or you can move to this as well 127.0.0.1 colon 8000 okay so yeah now I type python manage Dot py start app calculator app data app okay I hope I'm correct with the spelling yes calculator app okay so the calculator app is created okay so uh what you can do okay Django projects here you can see that our app is is at the same directory level with the management.p WiFi okay now uh one thing you can do I'll create a virtual environment here so uh you need to uh you might have to install a virtual environment package as well yeah uh so I'll type virtual A and B my EnV so this would create an environment variable uh inside the project so yes the I hope the environment variable has been created okay uh for this virtual new A and B I would uh in case it throws an error so you might have to install a virtual environment packet using pip I guess it's pip install virtual EnV it's simpler or maybe I'll update this in next video okay if it throws an error okay so you can even check out or check out on the documentation as well okay so I have created a virtual EnV so uh uh what I need to do so so now uh I'll have to activate my virtual environment my A and B slash scripts slash activate Okay you please make sure of of the direction in the slash symbol is defined okay now you can see the virtual EnV has been activated now I'll type python manage dot Pui uh uh oh sorry okay I'm really sorry for this uh what you need to do uh now uh I'll if I start my start my server it won't start so I need to Define even I can try this out python manage.us start out okay start app sorry run server so what you can see you see it could not import Django because inside my environment Django is not installed so I'll just quickly install the Django inside my environment variable pipe installed Django okay so the Django will be installed uh in the uh like it would be installed in the environment variable so by the time it I'll give you a brief overview so like basically we are going to define the template directory static files uh like now we have created the project we have created the app now we are going to create a requirements.txt file as well so this is this will be all about develop environment then like in the upcoming we are going to work with front end front end part then back end part then a error handling so basically some new some new designs as well to how we can make our app beautiful like in the frontend part responsive so we're going to cover them as well okay so let's move to this okay it's getting installed okay uh so basically uh what we we are going to do we are take the input from the user it will help us to uh we will take input from the user then we will like even the mathematical inputs can have some error we'll check check errors as like like division by zero error we check some error handing and this at that at level at that level as well okay so yeah now here you can see your uh environment has been installed and I'll type please requirements requirements Dot txt okay yeah here you can see the requirement.txt has been created so I'll move to commercial txt now here you can see it's like now if you want to do we can also do one thing uh like uh you can try Ctrl f and you can simply type quick equal equal to uh I have tried this thing like you can replace with this with greater than equal to sign like this would help you like in if if in any uh like in any other uh uh like in upcoming uh if there's any another version like 3.0.0 3.0.4 so like 3.0.4 3.0.4 so like in uh like in any future if you have a new version so this would update to that version because it has a greater than equal to sign so any version greater than equal to 3.0.4 will be updated so you can apply this to your requirements.txt file to get get updated or uh if it's if it might throw error you can revert back to this uh with the equal equal to sign okay you can simply do greater than equal to then replace with the recruit design okay you can try this out okay so because uh I have tried this one as once okay so now uh the requirement with txt file has been created now we will move to our settings.py file quickly okay this is the settings.py file okay so one thing you need to Define OS dot path dot join okay I'll Define base directory yeah good and templates okay okay yeah good and I'll Define a static URL is go to URL and you need to find static file directory as os.part.joinbase.static folder I'm going to copy this yes good yes so I'll do this I'll move into my Django projects okay so what you need to do so at this level you need to Define two folders one is templates good another is static okay so this is good okay and what we are going to do uh now what we can do we do like we are going to move to our uh uh urls.pui file Okay so you are yeah so this is include path comma include okay and you can define a path to here as calculator app include child school later see you later Okay calculator app dot URS okay so I'll run my server but okay now I'm inside my calculator app so I'll create a new file urh dot py file here so basically okay I'll do one thing yes new file URLs Dot py fine absolutely fine and from here what I can do I'll quickly copy this paste it here good and I'll Define URL patterns as well okay okay okay uh okay I'll Define from Dot sorry from dot import views so this would bind my urls.piva file to views and I'll give to use views dot index name is equal to index yes okay but I have to go to my views.py file as well yes that's why I'll Define def index request okay and Value Point from Django dot HTTP import http response athlete response yes good and return HTTP response server started okay so this should work now pythonman.py run server I hope there's no error yes okay and I'll move to calculator yeah good absolutely fine so we are right now I have created the development environment so like just for the last last few seconds I was like why I was doing something uh I was implementing it so like I'll give quick quick overview settings.viewer file you're done you all do it so what I try to do that uh like uh on the calculator app okay so basically I used to uh like in the previous tutorial I used to keep it as a blank but right right now I've done this as localhost calculator app because there might be a personality that we might be creating many apps into this single project okay so like on this calculated app route uh like if I go to this route like I here you can see character app server started but if I move to this so this is the okay okay okay slash admin okay we will be discussing about Django admin as well so I'll try to fix this error in the next tutorial uh till then you can move to Cal localhost colon 8000 calculator app so like here you can see the server has started so uh like in this uh it included the calculator app.urs and now like in this path views.index of squad and I return an HTTP response of server started okay so so like in the previous the previous lecture what we did uh we uh I will run my server python manage.py run server so basically I'll move to local rows colon 8000 yeah good so I was uh like uh now what what I'm trying to show that our project can has multiple apps so this is the root uh root app of our project so I'll clarify this like as soon as I move to Calculator app uh it says the calculator app is running so like in the last in the end of the video last video I was having some I was having error at this point like when I used to do localhost colon 8000 induced to throw me an error that it could not find the PATH okay something like 404 error page so like now what I how did I solve this I uh like a local host colon 8000 shows me the uh so the server has started and a calculator app shows the calculator app is running at this route we are going to make an app so what I did uh what I did so I'll move to my urls.py file of the Django projects good so like in this you can see uh what I did uh like uh I created a like this is my calculator app okay good now I created a new app with the name root app dot with the name root app and I link the default path to the root app.urls and I'll open the root app.url so it says path like views Dot root m is equal to root and I'll move and it returned an HTTP respond the rule the server has started so this basically this corresponder root app so I made a root app to make sure that it doesn't throw me an error on the main round okay so basically I uh why I did this because we were going to we are going to get multiple apps on this single project so when I move to my app calculator apps it says calculator app is running so absolutely fine okay now one thing we are going to do so what we can do I'll close uh close to the right yeah good okay I'll close this as well and close this as well okay but now I'm inside my settings.pify so uh I did OS dot part dot join page directory and templates basically we are going to refer to the calculator app template so I'll give a slash calculator calculator app okay so this is final calculator app is a folder which I am going to Define in templates okay so yeah here you you can see what I uh was uh what I was talking about that I created a root app and then a calculator app so this is absolutely fine now taken okay uh now I'll move inside my templates and create a new folder with the name calculator app you're good and I'll create okay so I'll I moved inside my calculator app templates now I'll move to that folder templates oh what I'm going to do I'll move to the templates folder templates yeah here it is yeah templates okay and now I'll do my inside the templates okay good and I'll create new file and type index Dot HTML okay this is fine yeah okay so I'm inside my templates calculator app index.html you're good so what I can do now is uh what I'll do I go to I'll go to the bootstrap website okay I'll go to the documentation getting started so I'll copy the base template here I'll quickly copy this paste it in my indicator HTML I'll save this file as well okay now the server has restarted so I'll go to my page and okay okay but I forgot to do one thing what I need to do I'll move to use dot py file of the calculator app and instead of this I'll return a page return render request and then index dot HTML so I'll refresh this page okay is there any error okay okay I'll refresh this page yeah it says hello word so basically it's all working fine now what we have to do like uh we have to create a footer uh like nav bar uh we have to do a responsive design as well so we'll quickly now do the work so what we can do is quickly search out for navbar okay yeah here's the navbar okay I can copy this I'll move to my index.html and remove the heading okay first I'll give a title as Django calculator app so this is going to be a single page application so uh okay uh so this is going to be a single page application which I can copy this so we don't need a form I'll cut this even I don't listen okay okay okay okay so basically I don't need the knock down also so I can cut this okay uh this uh okay first I'll type Django calculator app good and basically when I don't need this also um not even okay okay Django calculator app okay I can save this then refresh my page to see what's happening yeah uh now it's absolutely fine uh instead of this I'll give an about about okay and I'll give this an about foreign pressing Ctrl shift I yes this is absolutely working fine okay so so yeah uh we'll try to improve the uh or we will try to improve uh on this as well so uh basically for footer what we can do okay okay so okay I I went to cards okay okay we'll do one thing okay what we can do uh if classes with card card body yeah good so we are inside uh okay now we'll move to that as well so we are inside our body div class is equal to card okay so before this I need to define a container as well if class is equal to container fluid good and that class is equal to row div class is going to call md6 and then uh div class equal to yeah card then a card body would do yes card body as well okay and I'll go to the page yes entirely working fine and I'll give a style is equal to margin 0 Auto okay so this is absolutely fine I'll give us I'll give a style equal to margin 0 and auto I'll give a style as style is good margin 0 Auto so the style is in the would be in the middle and here you can see I'll Define a form inside it inside it uh and in this I quickly Define the forms okay div Clause is going to form group so basically we have to define a div class is able to form group good now we have to Define inside the and label okay so a class of form control has to be defined here so input basically I'm going to type input type is going to search because our class is equal to uh okay sorry for this class is going to form control name is equal to I'll Define this as query ID is equal to query as well okay and I hope this is and I have to define a method here method is going to get action is equal to I'll Define the action as well Okay so until the time you can keep a hash here okay I have refreshed the page and yeah so so even I have to define a margin top as well so uh this is one ram then Auto then bottom is zero so this is the forehand rotation top uh this this go then top left is the bottom then again right yeah now this is fine okay so I I have to Define two input so basically in this I'm going to Define button group button group so basically the button group would work in this way or we can do what we can do I am inside my form card body so what I can do input type is equal to submit sorry submit class is equal to form button button primary okay and I have to Define off as new input also because if the user input type is equal to reset okay okay class will go to button button primary so what we can do refresh the page okay yeah this is absolutely working fine we will try to give different colors to the butter okay and now we will add the footer okay the photo would be in the same way we are going to do this Dev class is equal to container fluid if class is equal to row depth def class is going to roll then uh well to div class we will do all 12 okay and I'll give this as I'll Define this as bucket let me do one thing I'll Define this as photo class is able to fixed bottom because I want this to be remain at the bottom of the screen okay and I'll Define as a p okay put it yes okay here you can see the footer is being displayed but the what I can do background light will this work okay okay okay okay let me check one thing now is go to background right yes number light I'm trying to give the same color to the footer as I have but okay okay I'll check this out but like we have made a raw structure to our application so now we would we would be completing it so like the first thing I would like to show you about the photo uh we had some issues in the footer like in the last tutorial so like uh right click here click on X inspect and try to do something like this is our footer so what I can do I can add a background of black uh oh no sorry black yeah now it's absolutely working fine uh the text color should be white yeah it's good and text align should be Center yeah that's really working right so we will comment the changes here so I I'll add a style here back row is equal to Black good and we'll make color is equal to White the hair color will represent a text color white good and the text align should be uh Center good good so what I want to do uh we have this class is container fluid and I'll give a margin bottom here margin bottom of at least 20 Ram to be uh to give uh like okay this would help me out like to have a screwable view downside okay so like uh now it's working fine so I'll move to the container for fluid okay this is the container fluid yes yes so like here you can see I have given a margin of 29 22 Ram 24 Ram so uh like uh I'll yeah okay I'll look into this okay uh so next thing we can do uh what we can do is uh we have about so like uh we want a image here so we'll add image class is equal to image fluid okay now I I Define a source to it source is equal to percent static okay and then a person sign an end symbol then logo Dot jpg I think this should be fine okay it is showing an error okay yeah at the top of the template you need to Define percent load static foreign load static yeah so it is three okay okay let me see like I'm in my templates static folder or the name is main.jpj sorry okay I'll move to the link and this is main Dot JP okay so we have an image here also good so like it's fine so what we can do uh like uh I'll align this button to the center and what we can do uh like uh this is button button primary so I'll give success button success and this is as button Danger okay and I'll give a style is equal to this day block okay so this would uh I'll try to uh margin 0 Auto and I'll apply the same setting to the another button as well okay so I'll refresh this page yeah okay okay what we can do okay and we give this as another road div class is equal to row good and there class is going to call md6 and what I'll do okay I'll press continue next we and the class is going to call md6 foreign okay um what we can do is we will inspect it here you can see the this is a row which is showing okay okay the problem was that my call wasn't inside the row okay so this uh now this this is fine okay my call wasn't inside the row so now it is inside the row yeah no it's absolutely working fine okay so we have two buttons submit and reset okay what why was it using the reset okay if I top I type n equation two plus three plus five okay something so the reset button would reset the text okay okay so this is absolutely we can find okay what we can do here uh we can provide uh like uh what we can provide some text at the footer thanks for using our app okay we can provide this and in the same way what we can do we'll move to the body part uh what you we can right click here so this is looks good and here you can see for the prefronted part you need to be do some like inspect and do something because unite might not be accurate at the first time okay so okay what you can do uh I'll give a class and inside my body so I'll give it here I am inside my body I'll give a whole class a background light this should work so this would yeah here you can see my body has the same color as the nav path okay so this gives me a glossy interference okay uh it might be just I want to tell you that you can give any color you want you can right click here so here you can see the background color and this you can do color inspector and try to give any color of your choice okay what you want you can give any color so this this one I am trying to keep things basic it's up to you you want to make any changes okay and now what can we can do I'll refresh this page yeah good so what we can do uh so we have basically done with this so I'll try to give a one thing I had mentioned about the margin bottom here so let me check with this okay yes this is the margin bottom yeah yeah I have increased yeah uh that's why I was saying I was increased to trying to increase the margin bottom like it would give you a flexible view down there as well because next we are going to create the about part so like uh we'll give up about block and Dev class is called md6 again I was inside my form then inside my this is the row end of the row okay then I'll have again after wrote this class is equal to row and they have class is going to call md6 I'll give a style is equal to margin 0 Auto something a good like we'll use some typography here typo graphy so we can have various things that is one thing you can use here is a display port or maybe lead as well what kind you want to use so like maybe you can use what I can do use P class is equal to display we can use display for about then we can give an HR tag it will create a line and in there we can use P class is equal to lead our calculator app can perform mathematical operations okay now I'll refresh this page yeah now okay it's it's uh like it's fine uh what we can do uh I'll give a margin top of one ram one ram then Auto zero then Auto okay and one thing I wanted to show you here that I'll give this row or maybe you can say column ID is equal to about maybe name is about as well name is equal to about and when at the top of my nav bar if I come here I'll give it a hash about because hash depends to the ID okay so basically even in the even the vs code says like I click on here I get to this ID okay so this is absolutely working fine okay and uh when I'm here I click on about I get down to here so basically this is this was an example how you can use ID with the reference tag okay okay now if I come to Ctrl shift I okay okay uh and I click on about I get to the about part okay if it can be in lengthy paragraph as well okay uh it's up to you uh uh and I'll give as a style is equal to text line is equal to Center okay uh even to The Heading also X line is equal to Center yeah good good so like we we are like almost uh done with the front end so this was the layout of our app so this was responsive you can press Ctrl shift I or you can simply right click and click inspect so this is the responsive nature of of our app so basically we can type anything two plus three and we are going to reset so this uh we we are able to implement this functionality the next part we are going to do basically we are going to add instructions block as well as Define a form submission URL to the page and then we will build the backend logic with exception handling as well okay so let's get started with this tutorial so basically what we can do uh so this will we can define a list Li class is equal to nav item okay then uh same way a anchor tag uh which is represented presented by a nav link good and hrf is equal to Hash instructions instructions okay and uh instructions instructions yeah look so this works fine so we can uh I would uh we can move to the page and see this uh okay I'll uh yes we can see here instruction has come but as soon as click because I have not defined instructions ID so uh what we can do we can move to this and we can see this row which represents the about block so I'll copy this row Ctrl C and then I press Ctrl V so I'll do this as instructions instructions okay good and I have to define a instruction ID here as well because hash instructions yeah good so I have defined the hash instructions so so I can uh so we can Define some instructions so how we can Define them what we can do we can move to bootstrap and use list list group so in this way we can run a new thing also this is a list Group which also have list group item in it so here are many you can choose any style of your uh so I'll use this one okay so what I can do uh I'll move this HR sorry paragraph and put this disk group and I'll move to the page and yeah here you can see here the instructions are defined so when I click on instructions instructions okay there might be some issues hash instructions okay there is an issue hash okay okay you don't need to define a hash inside because when I was referring here okay let me go over yeah hash instructions when I click on this I'll move to this because this ID is only instructions so there was by mistake and hash instructions so uh okay okay I'll refresh this page yeah good now I click on instructions I move to this block okay this is uh now this is working fine so we can Define some instructions here like uh plus sign we can Define uh like we can Define some instructions Plus for addition okay and simply something like star for multiplication okay uh something like uh and uh we can Define this for division okay and basically we're working in Python so we might be using a Python and this is for uh flow division floor division yeah and we can cry uh also like this four minus okay okay so basically we have defined some instruction like Plus for addition minus multiplication division flow division we can under under Define like uh something like this also uh parenthesis also we can Define okay we can Define or we can Define as brackets brackets okay or we can simply type parenthesis I think parenthesis okay so basically parentheses are used to define a priority like if you want to evaluate first that parenthesis then next so we would move to the page and I'll refresh this page okay so this looks good Plus for addition minus multiplication division flow Division and parenthesis okay so this looks fine so what we can do Define we can define a new URL here so we will try now we'll move to some backend part so so I'll move to urge.py file so I'll Define a path is equal to submit query okay and Views Dot submit query and I'll give this a name as equal to submit query okay so I will Define some single quotes here submit query okay now now this is fine now uh I'm referring to the submit query in use folder so I go to views so this is showing me an error because since I have not defined a view a submit query in My Views so they have to Define submit submit query okay and I'll take a request as a parameter and what I can do uh till now I will find past statement here okay so this looks fine and now in my HTML page I would move to my HTML page and what I can do I have an action here yes percent URL is equal to submit query yes this looks fine okay so this looks fine uh uh yeah this is submit query fine now I would move to my submit query block use dot submit query yes okay uh and I'll return uh what I can do I'll take Q as a parameter a queue as a parameter and request Dot get query because I would show one thing that inside my form I can move to the form uh yeah uh yeah here you can see that input type is going to text form control and here the name is query so you should have the same name for the get parameter as well so in my view dot UI file I'm that's why I'm so type request dot query because this refers to the same name in the form viewer referring to so what we can do so I will return an HTTP response of Q okay so this would uh this should work fine now I'll move to the page and I'll refresh this okay this is still now find two plus three star five so I should submit this yeah now this is working fine here you can see that uh I went to the route as so I'll quick quickly give a overview of this what I did so here you can see that uh first uh I defined a inside my number I give hash instructions and defined instructions block so basically you can this this one instruction Plus for addition minus multiplication division flow division parenthesis okay now then I went to urs.py file then I defined a path submit query which equals the function views.submit query the name is going to submit query then I went to the views.py file then I did request dot get query and Q is equal to this okay so return HTTP response response of Q okay so this is fine what can do also in the same way we can return a Json response as well uh for this you have to import Json response Json response and you can do Json response of Q so I'll make a get request okay uh what for this what do you need to do you need to define a Json dictionary and here you can Define q is equal to Q and uh and then I have to return a Json dictionary yeah here you can see now this isn't working as a Json object which says queue parameter and then two plus three star five okay so uh for a Json response you have to define a dictionary because then it works like a Json Json object okay so in this way we can uh Define an HTTP response as well so yeah no this is fine so we can I'll quickly do this yeah this is working fine okay so I'll move to the page okay I'll type something else minus 2 then reset button I'll copy this reset button reset button works fine I'll paste it here and submit yeah now this is working fine so basically what we are going to do we would in this tutorial what we are going to do the evaluation of query and adding a try accept Block in this tutorial this continuation of tutorial number 20 in this we would evaluate query as well as ADD try accept block so we will Implement evaluation try accept block and render to frontend part so this is going to be an interesting tutorial so let's get started with this so basically till now we had defined a submit query route and we were taking request.equate query and Q then we returned an HTT response of queue so basically what we can do I can type any method mathematical equation that is two plus three so I would submit this and it returns me two plus three so this looks good so we can move to the back back page home page index page so basically this we are making a application so basically about then instructions so you can check check response in nature as well Ctrl shift I okay and this is the nav bar and then instruction on this so uh what we can also try like if you scroll down the page what you see the nav bar is navbar we cannot see the number on the top if we scroll down the page like we are on the top of the page as soon as you scroll down the page we don't see the number on the top so this is like what you can do on the number class we can move to the navbar class and try type fixed talk so what would it do like I'll refresh this page so like a refresh this page and you can see here's a number okay and when you press Ctrl shift I so when you scroll down the page you see the number is fixed on the top so this is an additional utility off to your front end part if you want to carry on with this then is absolutely fine so I just showed you like you can fix the number on top when you scroll down the page so as soon as I remove this fixed top fix top so what I observe when I refresh this okay so number is looking on the top but as soon as I scroll it disappears so you can choose the functionality to your part if you want to use the fixed top additional utility of number okay so now we move to use dot py file so we would add a try except block try if this is successful and accept okay so this is fine so what we are going to do we are taking an answer is equal to eval a Val is an inbred is an inbuilt function in Python which takes a string as a string as a mathematical equation then evaluates it and returns an uh basically uh uh answer to that mathematical equation okay so what you can do answer is equal to a Val Q then I would Define my dictionary my dictionary so basically the queue would remain the queue okay and the uh answer would be the answer and if this operation is successfully if this tribe block gets executed so I would say error is false okay so this should work fine till now and if uh if uh uh what I can do if if this is true like what I mean to say if this operation is successful then I would return so render return render request then index.html and then I would context is equal to my dictionary okay if this is true then uh till till the time being I would say pass is equal to uh I would try to add a pass statement to the accept block because it was showing an error because uh so this should work fine okay uh now what I can do if this is true then this should work fine okay then uh like I'll move to my index.html this is a navbar navbar okay fine yeah so this is the container fluid so Dave plus is equal to rho then div class is equal to call MD six uh style would be margin Auto zero style will be margin 0 Auto okay so if this okay what I can do percent if error so basically per person if error because I am trying to say if error means if error was true so it would show the error okay so if true then I would do something else if it error is fault I mean there is no error then I would use else part to show the result then I would end this end if I would end this if else equation with NF tag okay this is uh this looks good okay so person end if if error percent else okay good so what I can do uh alert I'll move to the alert and I'll copy this and if this isn't error okay so what I can do I'll quickly if error sorry there is an error yes or you can simply type sorry error error is fine strong and to do this uh you would use Alert warning not alert Danger okay and in the else part you need to show that if that result was successfully so I'll copy this okay and I'll use alert alert success so first we are going to test our application so uh we'll move to the page I'll refresh this okay so first okay so there is some issue here with the okay div class is equal to alert okay that class is able to call md6 okay I need to check this like if error yes yes okay I'll move this equation here okay there if Clause will call md6 yes and here is the row yes yeah now this is absolutely working fine and error is showing me in green color let me check this okay yeah okay okay okay because this was answer okay yeah okay okay so let me go with this two plus three yeah two plus three is five so this looks fine okay so yes uh two plus three is equal to five so let me do perform some mathematical equation two plus three star four teen okay yeah this is good good and let me Define some equation uh let me do 2 plus 3 divided by 2 like this would divide it to 5 then 5 divided by 2 2.5 this should return 2.5 yes but if I do the same equation with the flow division that is 2. okay uh we can try some more mathematical operations like 2 to the power three yeah this is eight so what you can do so like here you can add add this like double star for exponential exponential like you can add this double star for exponential okay and in the same way you can add modernist modulus as well mod so this would uh like this sort of mod operation okay uh so basically mod operation is to to get a uh you can I'll quickly perform more operation like this is 10 modulus three so it should give one I guess yes this is one so absolutely correct so like I would quickly explain this uh so uh like we added exponential operator as well quickly explain uh five double star five so and then minus 2. so this is 25 uh okay I'll pack it quickly put places here so this is 25 minus 23 huh now there might be some error 5 okay okay I made a mistake I'm really sorry for that that was 5 to the power five if I'm not wrong that is 5 to the power 5 then minus 2 okay so the 5 to the power 5 was 3125 then minus two return three one two three basically what I meant was 5 Square so that was 5 put a double star two minus 2 that is 5 square is 25 minus 2 is 23. so basically we are tested with the application and one thing I would show then as soon as I type 1 divided by 0 uh this is an error so it should return me an error so it returned then return an HTTP response object so we'll go to the use.py file so so we'll continue this my dictionary have error is equal to true okay and in the same way my dictionary of error is equal to true so what you can do or you can define a new dictionary here error is true and I should return the same page with the context result to my dictionary yes so I have now now I will go back to the page now 1 divided by 0 yeah now this works absolutely fine that 1 divided by 0 was an error so it wrote threw me an error okay then again there is an issue with the front end part so let me check if plus is equal to yes new class if error okay if error there's an error on this front end on the front end part let me check okay then I will show this is a div okay so this difficult to call MD and this due to ends to row okay if this error then you display this row else on the else part what we can do div class is equal to row okay good then again I'll Define sorry sorry Dev class is equal to call md6 yes yes now I would close this day okay this is a div now this is a div to the call and another tip to the row and this is the container this should not be true container fluid yes now I will move to the page yeah now this is absolutely looking fine now one divided by zero so we'll quickly test the application one divided by 0 error yeah down the front end is good uh and quickly two plus three is equal to five yeah two plus three is equal to five and this is on the left okay let me check let me check this is a call md6 hit error okay okay let me move this okay let me click on inspect inspect I I am this call md6 margin 0 Auto okay let me change the view edit I'll add a laptop screen yeah this is working fine this is now this is I'm inside the row call is root mb6 child is equal to margin 0 Auto yes okay okay okay okay yes type is equal to margin 0 Auto so yes now this should work okay we'll quickly two plus three is equal to 5 well we'll type uh two plus three star four 14 are good now 1 divided by 0 error so basically you need to tackle errors when the because now we are completely done with the application here you can see like we get a error on evaluating on when we put 0 as an input uh let me type 1 minus 1 uh this should yeah return zero now absolutely absolutely fine so let me type some random words like something something has random and what does it show so that shows an error as well okay on random input so basically you can put numbers like uh you can put Google put numbers then reset it okay then again put numbers then submit here then 14 then 1 0 it will show error yeah on random text on random text it would also show error so guys you are completely done with our application so thank you guys thank you so much I'll catch up in the next lecture so basically the error on the front end part how I resolved it I'll quickly if there was an error so I made a new row particular Row for that okay so it and the call md6 was on the margin 0 Auto Center and if there is no error so I would return the answer and in the same way what you can do you can simply add Q is equal to this so basically this would return the query as well so so we can do two plus three yes so here it says 2 plus 3 is equal to 5 so so this is absolutely correct so yeah now this looks application looks pretty good so you can try out the front end part so just just try to will also try the responsive nature of this app as well so I have now Ctrl shift I uh okay so basically I'll try something 2 double star 3 okay so 2 double star is equal to 8 yeah so guys this is absolutely fine so thank you guys thank you so much I'll catch up in the next lecture so I have to uh added some exponential as modulus operator you can try out some modulus operator that 10 mod 5 10 mod 5 so this should be zero yes so thank you guys thank you so much I'll catch you in the next lecture so thank you so much hello everyone so like uh hello everyone I saw an error in this application like when we go to the index page without any query submission I see a equal to sign so actually this equal to sign is basically to do to this else part so we need to create a just a little bit different logic so what you can do uh we can do we will move to views dot POI file and here we can do result result is equal to true okay yes and I'll quickly copy this and in this part I will do result if if the error the error is false then resulted should true it will error is true then result should be false okay good now I would move to my index.html page so I would if this condition with an end a person end if and I would give this else part as if result okay so this is this looks good and this would a wider error so I'll quickly test my application when I move to the index page yes now the equal to sign has gone now I would query two plus three is Rule to submit yes 5 is good then 1 plus 0 then error should be there yeah but when I move to the index page when I move to the index page so there is no equal to sign so so this is the GitHub link of our repository you can move to this project download this project uh uh I've defined all the instructions and I would be updating the instructions soon because now we are going to working on a new app and basically we are going to work in the same repository so basically I wanted to do this because we are going to make inside a single Django project we are basically going to develop two apps so I would Define few changes how you can use two apps inside a single project so main motive would be it because we would be using the same template and I would tell you how you can use the same template and defining the other backend part so this how this way how you can use the basic template which we used in our previous app in this app as well and I would defining which changes you have to do so this would help you out so let's get started so basically in this we are going to design a Django voting app so in this app we have a a list of programming programming languages which the user in in that we would provide realtime suggestions under the search like suppose any user attacks the letter J then we would provide them suggestions the programming languages starting with the letter j such as Java or JavaScript or same in the if we type P then we would have p is the like Perl programming or programming language python so in this like COC stands for C and C plus plus so we will be providing suggestions like in the P we could also Define a suggestion under PHP as well so like in this tutorial we are going to create a voting app we are going to start with this and we vote for each programming language then we use a progress bar that how many words they have got and we then would return or render a progress progress bar on the front end part and we would update the vote for each language if we vote for more okay so let's get started with this so basically uh this is my server so the server has started okay because I have so basically I would Define some some few changes like this is my settings.py file so uh earlier it was template slash calculator app but now it is voting app because we would be referring to the templates folder so I would move to the templates folder yeah this is the templates folder so it it has two folders the one is this for calculator app and another is for voting app so we are referring to the voting app folder inside the templates so uh for the earlier app we used to refer calculator app so you need to define a change calculator app if you are using calculator app and then if you are using voting app then you need to win voting app so basically what we did we created the same HTML page okay now uh then for calculator app if you want to use then we need to define template slash calculator app if we are going to run the calculator app okay and if you want to run the voting app we need to define template slash voting app okay so this is the main uh change we need to Define so the please take care about it and I will Define this in in the repository instructions as well okay and then next okay now we'll move to urls.py file okay uh let me do one thing urls.py file of Django projects okay so basically uh when I do okay uh uh so uh this is calculator app so include calculator app dot URLs so for voting app we will do voting app include voting app dot URLs this is very simple okay so basically in the same way I'll give give a quick overview for templates we have templates folder let me again show you the templates folder yes templates for calculator app templates for voting app then urls.py file for calculator app as well and voting app as well okay now we will move to urls.py file so basically I'm clicking on new rs.pi file voting app okay so this is very similar we have done this as earlier as well so like we have uh like URL pattern path views dot index name is equal to index now if I go to views dot py file so I'll move to the views.py file or voting app okay so you uh this is a backend logic group to also working on okay uh so before this what we can do so this is the index so we can uh what we can do uh we need to generate a let me do one thing or we can do what we can do I'll run the server okay and then I'll move to voting app yeah here you can see uh like this is Django voting app Okay and like I've defined few changes I'll move to index.html file so basically when I'm moving to index.html file I'm moving to the voting app okay so this looks fine okay so I changed the title Django voting app I will find as Django voting app I'll move to the about and instructions so pick your favorite language okay so you need to Define in this and pick your favorite favorite language and vote okay and vote okay this is very simple then select your language and see result this is a basic instructions okay in the Napper I Define some changes you can see like in the nav class navbar Doc and background is dark so here you can see this navbar dock refers to this and background diagram and show this color so here you can see the number has been dark in color so to see the response in nature we can press Ctrl shift I okay okay so here you can see it's good okay we have the nav bar so it's working fine so in the about pick your favorite language select your language and see results okay so in this next like uh so basically uh we are going to Define uh and one thing we need to make sure that uh that in the form uh I had defined uh the image like I'm referring to the static folder okay let me go to the static folder this is main.jpg okay and this is main2.jpg okay so so basically in main.jpg this was referring to the calculator app and this is main2.jpg and this is referring to this coding background structure okay so basically so like uh and the good part is that index.html still exists so this is the index.html of calculator app so this is uh this is the index.html of calculator app and this is the all logic we had written if error if and result okay and here you can see here you can see the nav bar is equal to I can show you one thing the navbar light and never background is light that this is for the calculator app Okay and like in this uh uh even the image we had made also that was main.jpg so here I can try to show the similarities between that under the same rank of project we are making two apps and basically I wanted to show you one thing that we are using the same template for both the apps without writing the code as much and just making the modification Necessities we need it okay so this is also good so basically I'll just a quick hint like if we want to use calculator app you need to define template slash calculator app here okay so very quick overview the templates calculator app is there and uh the same way templates voting app is there and then both of them have index.html index.html one has a different image one has another image and background dark and background light for different respective nav bars what I have defined so in order to run the respective ad what you need to do uh you need to define template slash calculator app when you are going to run the calculator app and templates are floating app when you are going to run the voting app so let me very clear with this so it doesn't create an issue okay so basically what I wanted to do is I want you to solve uh to get uh further like a move on with the back end part also because we are going to use this readymade template which is help us in the front end time I want you to solve one coding problem here because this will help you to make a backend logic so I'll type Ctrl n like you have an array okay and it has all the elements uh like it can be any elements one two two comma three comma three comma three or something like mixed numbers as well or like four comma four comma four okay okay it might not be necessary it is sorted I'll I'll give the seven two one three four five six okay okay uh what I can do this is the array okay I'll copy this okay I'll open the page okay sorry sorry I'll open the ideally yes okay so this is the array so what I want you to do like uh I want you to uh get the uh frequency of each element okay so like uh what I want to tell you that if I do array dot count one okay so it returns three like three one is three times this is a one this is a one this is a one so three times three so like but I want you to do like uh uh like what I want you to do like basically I want you to design a data structure in such a way because this this is very necessary which sources frequency of each element in like a frequency of each element of the array it stores in itself so you want to design a data structure so so I would give you a hint like in this tutorial what you can do you can define a dictionary as a data structure in which a key will be element of array okay good and the value will be frequency okay so it might not be necessary that array should be sorted or unsorted it could be anything random number sorted unsorted that is not the case of and if a new element is added to the array you should update the frequency okay so then update the frequency update the frequency okay so you need to Define like uh when you Traverse the array for or till the time you can do one thing you can uh you can be like familiar with this or this is your array you need to define a data structure which would I am giving you a hint that you need to define a dictionary okay dictionary okay so dictionary is the data structure you are going to use so so basically key will be the element of the array and value will be the frequency so you need to find in such a way okay so you can think on this problem because this problem is very necessary for us to think on the back end part okay until time what we have seen like uh like images being changed about change and information okay I'll update the information part ahead okay like when I click on instruction this or instructions part I'll move to this and about working fine okay and uh I've changed the image as well as number so uh one instruction important instruction in order to use a calculator app you need to change here template starch calculator app and temperature template slash calculator app for calculate app and template slash voting app for the voting app okay in order to run the respective apps okay so till now we are working on voting app so we have defined temperature slash voting app so I'll catch up you in the next tutorial so like in the previous this tutorial we were working on uh like uh we were going to make a voting app so basically I gave a coding problem in the end so basically in this we are going to solve a coding problem and adding list uh list of programming languages and batches to our front end so we will check this out so just uh let's get started with this so basically I told you that you can work with the uh basically I gave you a coding problem in which I told you that you can create a like in which I told you that you can find the frequency of each each element in the array so let's solve that problem because I told you that's very necessary to solve the problem because it will help you to create a uh backend logic so basically let's start with this so basically I have an array so what you can do I have elements in it like Let It Be random elements 56 89 1 2 7 9 6 6 2 3 1 4 5 6 8 9 9 9 then 5 54 then again 56 then again 89 let it be a wrong array because it will help you to get the logic clear then seven then one again two okay so this fine this is fine so what I need to Define I need to find the like in the key part I I told you that we will be designing a data structure such that the key would be having the element the key should be element and the value should be frequency frequency of element frequency of element so basically uh what I mean by frequency of element that in this you need to find the frequency of each element okay so the the K should be element and the value should be frequency of of element present present in that array okay so I'll Define a dictionary first so my dictionary so so I can initialize the dictionary with this infrastructure you can initialize any data structure let it be a list set Str you can Define any data structure like this so this is very helpful so this is a dictionary my dictionary okay then I would Traverse the array part element in Array okay okay if if element not in my dictionary okay dictionary then you would initialize that frequency of like you have found that element and now that is not in dictionary then you need to initialize the first two frequency that the very first frequency you get that element okay okay then if element not in my dictionary then my dictionary my dictionary then here the key would be the I told you I told you as earlier the key would be element is equal to 1 else now as as soon as you keep on getting the element you need to update the frequency my dictionary this will be plus equal to 1 okay this is absolute line for element and array if element not in my dictionary if you uh if you find the first occurrence of that element you need to initialize the frequency with one else my dictionary of element plus is equal to one uh in this I would add a comment okay first occurrence initialize frequency with one okay as put every next occurrence update frequency I hope this is very clear for every next occurrence update frequency okay so this is good now now what you need to Define then what you need to Define then I will Define print star array so this is a very short notation by prints are arrogant print the elements of the array space separated okay and then uh well I'll do one thing I'll do one thing one thing I'll do one thing or to have a better View I'll print array dot sort as well Harry dot sort okay good and print my dictionary I hope there is no error so I can run this okay and now this is awesome okay uh let me do one thing uh let me do one thing I check uh let me do one thing I'll print the array again but this time I'll do add a DOT sort okay so what you can do so I'll press F5 so here you can see so I have my array here okay and now sorry for the interruption okay okay there's some issue yeah no it's fine okay so this was our array so then when I sorted the array it looked this so like here you can see the one has frequency three so here you can see the one has frequency three okay good okay now this is this is fine one has frequency three then two has frequency three times so let me check two two where is the two two as frequency three good let me take a very random element so here it is nine so let me check the frequency of nine nine one time then second time third time fourth time okay I hope nine is four times okay now when I see the sorted list because I have defined a sorted list in order that you grab easily nine nine nine nine nine the nine is four times so 9 is occurring four times so this is fine okay so this was your many main very good backend logic this is a very same same background logic we are going to do when we are working on the backend part so basically I totally like here you can take any array okay and uh you can Define the frequency like five is occurring two times yes five is happening two here one is this time 5 and 5 that means she's checking sorted array yes five is happening two times F5 is two times so this was our RF data structure we made to in which the frequency is updated and we store the frequency so like here we have this time we have used the area of integer next time we are using an array of programming languages okay so this would help us to make a backend part or logic so what we can do so I have moved to my server so we are done with the coding problem I hope you all all have got this so basically I hope you can change any values in the array okay and uh try out uh try this out okay this would basically help you out okay so so good so so then again we can see any answer then suppose like we can look for 89 which is occurring twice yeah 89 here it is twice occurring twice and we can see in the original RS 89 and 18. so absolutely works fine so let's get to our server so I'll do python manage.py run server yes okay so I'll move to my voting app I'll refresh this page okay so what we can do uh we can add batches here so here you can see there are basically different kind of batches so one is batch batch primary one you can use any batches so let me do this one batch batch success okay so I'll move to the about the section index.html so basically uh the I'll close the uh okay index.html or reverse or calculator app now now this was the voting app so let me be very clear with this so we can Define and here what you can do instead of class display flow display for 4 you can paste this and go to our yeah here you can see this is working fine and let me do some editing here so let me do add text is equal to margin zero Auto yes command zero Auto display block yeah good so here you can see the about has been uh I will try to make it a more intuitive so here you can try what I can do what I'll do I'll move to Style part and display is able to block okay and I'll add some font size font size is equal to 2 RAM I think this should be good yes good yeah here I've added about so so here you can see even in our app you can see about okay in the same way I can use the uh like something very good uh with any batch on a color batch I can use Danger good okay but what I need to do I'll Define P class is equal to okay select your select your language and see results so basically I will display uh what I can do I'll quickly copy this instead and yeah word batch batch Danger okay uh this just for the uh instructions I'm doing the ins this was instruction parts so let me go to the page yeah awesome pretty good so this is like about instructions so we are getting giving some more uh intuitive UI design to our app so basically and one thing you can do one that I have created a list of programming languages I'll give it a name as any this is a list till now so I have declared this list and uh I'll next time what you can do I'll find this as array okay good so this is a very long list of programming languages and I'll render them okay so I quickly show you how you can render then my dictionary foreign context is equal to my dictionary good dictionary absolute spelling is right so what I'll do on the top of the page uh just below the body I'll print this array okay so I'll move to my page desktop view Control Star okay let me check some yeah here you can see on the top of the page here you can see the array is there so next time we will so just I wanted to show you that we can render this array and next we would be working on the uh suggestions or also how we can provide real term realtime suggestions so we will like either we are going to provide on the frontend part or on the back end part so we'll try to what we will figure it out what we how we can provide suggestion so I've defined all the instructions uh but today I would like to make this instructions very clear like you can download or clone this project uh on by clicking on this button then you can run the command pip install minus r requirements.txt make sure you you have installed python on your machine and it has to be added to the path Okay then if you move to the requirements.txt file so here you get get this requirements these are very basic requirements you get it installed on a machine then you can then then what you can do then you can run that one python manage.py run server so this is the management.py file you need to be in this Direct tree to run the project okay good then basically there are two apps in this so basically if you want to run the calculator app you need to open this link but you need to make a simple change in the settings.py file I'll Define what you need to make a change basically you need to go to the settings.py file the Django projects and again Chango projects this is the settings.pify file and there is a templates yeah templates so inside the templates you need to change this line directory is OS dot dot part dot join page directory template slash voting app if you want to use the voting app then or or calculator app that is template slash calculator app if you want to use the calculator app okay so this look this looks good so yeah uh so these are the instructions you need to do okay so calculator app a voting app okay basically you need to change that line according to this then you can start with the app okay uh now uh today in today's tutorial what we are going to learn so basically we are going to adding uh adding suggestions during the search bar okay in this tutorial we will add list of programming language as suggestions a list of programming languages okay as suggestions to a search bar we will be we will implement this both statically and dynamically so in today's tutorial we are going to first do it static then we'll also do it dynamically also so so I'll show you the difference why we need to uh do this okay so this is the viewers.py file make sure you uh get this line from django.http import Json response or HTTP response okay so let me Define a function get query Define get query which takes a request as a parameter request as a parameter then Q is equal to request Dot get request.get yes then return HTTP response of queue so I have left this blank okay so what you need to do well what you need to do you can move to the us.py file and Define path is equal to get query then views Dot get query and the name is equal to get query so basically you will Define get query okay good so now this this is our form okay so we have not defined the action we can Define the action percent URL get query so this looks good so yes good so uh yeah now this is our form so basically we need to find suggestions during the search so we'll Define a list first we'll Define we'll do it statically so I'll tell you how uh how this works what the what is the function then uh then we will implement this dynamically so I'll tell you the difference why we should what is the difference of doing it statistically and dynamically so yeah here you can define a data list okay and you can give ID if you go to languages I hope this is fine so you can Define option value is equal to python okay uh okay you can have a option uh for the Simplicity I'll have a single right now I'll do this way option value is equal to python then what we can do option values go to python uh we can do PHP as well good right then uh we can do option option values would PHP then option value is equal to perl good then option value is going to pull then optional values will do let me have a programming okay good uh then I'll do one thing option value is equal to C C good then in the same way I'll do C plus plus okay uh then you can click on format document so you can right click on format document to get the HTML page on the right track okay then so this is the option value is equal to C plus plus uh and then uh I'll show you one thing let me type one more option as well the Java JavaScript JavaScript you're good and one more option I'll do that is Java yeah good so format document yeah good so basically uh this is the data list we have to Define but we need to track this data list to an input so we'll Define input list is equal to languages okay so basically yeah uh and we can Define class is equal to form control so this is a bootstrap class okay and I'll refresh this page yeah good so this looks good and we can do what we can do uh let me try this style the style works on this let me do one and bottom is only one ram uh let me check if the style bottom one ram good yes the the yes the style tags works on the input okay so we have a list here let me type J here so as soon as I type J I get JavaScript and Java then uh I'll I'll let the caps lock on let me have a capsule then here this works fine Java no s okay uh as I type j a v a s JavaScript is there but Java is in there okay so actually this data list Works in all the ways like a prefix suffix of substring match so let me type P here here I have got python PHP Pearl programming but you must be thinking why I've got a JavaScript this makes a substring match okay so let me type PR I get programming pH PHP py python okay because there was a single p in the end so it makes a substring match okay so to make this clear what I can do I'll show you one example okay let me do with c C C plus plus okay let me do with this with the small C a small C matches both the C C plus plus okay JavaScript as well okay so this looks good okay uh so if the user want to select uh if it doesn't if they don't write anything they can simply click on this drop down arrow they'll get all the options here okay so let me give you one example option value is equal to Django python python yes okay and uh and one option I would give you machine learning okay so this is using python as well so I format the document and I'll refresh this page so I'll type python so okay you can see here the python isn't starting and here it is in the end so it matches the subject the substring prefix or suffix so here you can see the python Django python machine learning python okay so I'll click on python I'll click submit okay uh I have not defined a get query voting app get query so okay good so here you need to Define name is equal to languages okay so I'll do python yes language is sold to python then I'll Define languages here so this should work now this should work I hope yes now it works perfectly fine so I have written a HTTP response so this is the GitHub GitHub link of our repository you can clone or download this project I have defined below the instructions how you can run the project I'll quickly give you overview uh you can move inside this directory Django projects uh then what you can do you can prep install minus r requirements.txt and then you can run the server by python manage.py file run server then when you think you need to make sure that inside Django projects there is a settings.py file and you need to take care of this line I'll show you yes this OS dot part dot OS dot path dot joinbase directly page directory templates slash voting app for the voting app and if you want to run the calculator app you need to type templates slash calculator app okay so this like this line need to be taken care of and I have defined those I have defined these instructions uh on the on the uh era as well so you can have a look okay so let's get started with the today's tutorial so like till the previous tutorial uh we made a list of languages but that was starting but now we are going to make it Dynamic so very first thing we are going to do we will move to our views dot py file and uh here you can see I have made this array Global so that this array can be rendered at any context so we will also do that so uh first what we were trying to do that we have an array of languages and Indus index functions renders the array with the name array as well okay so we'll move to our index.html and there we see that when we move to our index.html we have a input list 0 to languages and data list ID is equal to languages so that's perfectly fine so what we are going to do we are going to use ginger template so I'll show you one thing foreign language in Array okay then we would end this for Loop and for okay uh the what we are going to define a option option value is equal to each language language uh yeah good so I told you that we take only a single option tag okay then we'll move to our view.py file and then here we would return an HTTP response of Q good so let me check uh Now we move to our page then we type Ctrl shift r okay uh we would move to the index page yeah this is the index page so yeah here you can see that we have a list of programming languages good and we take anyone like let's suppose we take python and then we submit a we get a HTTP response of python so that's perfectly fine so what we can do the so this works pretty fine so we can test for anyone one more language Let me see okay okay let me see C plus plus okay good so C plus plus also works fine okay and let me do one thing when I type P I get a PHP per Delphi we already discussed how this search engine works so uh PHP good so this even works okay so uh till now we were trying to get the HTTP response uh but now we can do one thing what we can do we can make a uh we can what we can do we want to store each count of the what we do so what we can do we can make a global count then we can render that Global count uh dictionary that Global count is a data structure I already will discussed that part in the coding question also as well so I would quickly given a a overview how this would work so let me define global count uh this was going to be a dictionary data structure okay so what I'm trying to do so this this is very uh this is very this works perfectly fine okay one thing uh I would like to show you before I proceed that uh if I press Ctrl U so here you can see so the the the that uh when we used a input let's equal to languages data data list ID is equal to languages so this was the for Loop we we had used here for each language and array option value is equal to each language and for so here you can see with the how with the with the help of dynamic uh template uh basically we use Django template so uh so what we used uh we got a list of option values so this is perfectly fine so here you can see that with the help of a single for Loop we were able to generate a much more better way of generating the option values okay so this way we could generate them dynamically okay so what we can do now we'll move to a views.vi file so if we'll make if condition if Q in Global count then Global count of Q is equal to Global count of Q Plus 1. okay else uh if if the queue is already in global round then Global count of Q is equal to Global count of Q Plus 1 else for the first occurrence okay so we already also discussed this in the coding question the way we solved it or solved it first occurrence okay so so this was this for the first occurrence then Global count of Q should be initialized with one good so if it's already already there then we plus increment the value of the of the word else we what we do we initialize for the first time we initialize it for four one okay so this is very good so let me do one thing I'll move to the index.html and here what we can do we can print this till now uh okay okay but we need to do one thing okay uh what we need to do for Q and Global count Global account of Q is going to go over count of Q Plus 1 s for the first sequence Global ground of Q is equal to one okay so here you knew that we are working for the first suppress and if already exist then increment the value if already exists then increment the value okay and this was the first occurrence okay so what we can do uh we'll create a my dictionary so array would be the array and Global count Global count would be the Global count okay good so so then return we're going to render this way in the same way so I could click what we are going to do return render requests index.html so this is index.html we are going to render and the text is equal to my dictionary okay and here now we have already rendered This Global count so I hope this should work now fine pretty fine so I would refresh this page so let me do a single vote so let me choose PHP so here you can see the the dictionary has a one count of PHP so let me vote for PHP again so we are going to test this yes the quote found this to okay let me check any other languages so python is there yes python now PHP is to python one so let me to uh uh another Ruby yes by php2 python one Ruby one so in the same with C plus plus yes good absolutely fine then then uh C yes good so here you can uh let me do then again PHP so it should be three now yeah now it's absolutely three okay so uh this is but this uh I'll quick give quickly give an overview of this so for the first reference we used to initialize with one then we would increment the value okay so this is this works perfectly fine but we are noticing that we are only printing the raw dictionary here but next time we would add try to add for Progress bar with the table so I would open my project so till now we had made uh the search bar with suggestions dynamically then we used to submit the option value and then we used to store the results in the global global dictionary so this is the global dictionary we have defined here and uh I can have a quick overview or of this so here you can see this is an app bar so what we can do I'll Define a global dictionary here global count yes so here it is global count so when I run my budget I'll finish this page and let me check yes oh my server is running so I'll start my server find then manager.py run server I'll refresh this page so here you can see my C language has one vote then Perl uh uh like PHP here it has one word then python one word okay in the same way I'll give SQL one vote then I'll give vote to an SQL another word so here it is two volts so in the same way we can keep on going with the server so this is python I'll submit with the so here it is two votes so uh this uh so this works absolutely fine so the next part we are going to do is add tables with progress bar so basically what we are going to cover in this tutorial I show you here so we are going to add uh add adding a table with progress bar now we are going to render the backend data to the front end with the table and a progress bar for every language we will add a progress bar as a measure of counter vote so the progress bar is going to show the measure of count of what so like the key will have a table so then the key of the dictionary would be the uh like the name of the language and the value would be in terms of the progress bar so let's get started with this so in the nav bar the first thing we are going to do is we are going to put a li class is equal to nav item okay and here anchor class is equal to nav link and uh what what you are going to Define result okay and we are going to Define hrf tag refresh tag to the width hash result okay so we will Define a result block below so this is the uh about tag and and here you can see uh you can also add HR tag here which was missing okay now what we are going to do is this is a row okay so we have to Define in the same way we have to Define and this is a call md6 okay so in the same we have to Define this so what we can do so we can do in the same way div plus is equal to rho and then div class is able to call MD this time I will send it to the table so I would Define call md12 and now what you can do so we have a div of class called md12 so other things can be same so I'll move copy this and quickly paste it here and ID will be result and name will be result so and this would be result okay and Okay so what we can type here we can type here result in terms of progress bar Okay so result table so so let me check let's first check this if this uh so here you can see here we have a result table so okay and we'll give it a different color and this is bad bad success so we'll Define batch warning okay so yeah now it's absolutely works fine and we would give a style as well to uh we can give style is equal to margin top of one ram so we can give a margin top of one ram so yeah now this looks perfectly fine so basically what I wanted to show you that resulted table is going to be a big one so we will add a responsive table so we can we will also work on this or maybe okay we can do one thing let this view of 6 column and we have to Define this in the center and we can copy the settings this settings so that would work fine so this would give a margin top frame and this would align in the center as well okay then there is some issue okay uh style okay this should be in the column okay sorry they should go in the column then I would fit now this looks absolutely works fine so what we are going to do so first we are going to uh render the dictionary to the front end part so I'll show you how you can do this so this is a dictionary so what we can do we I would use a for Loop for key comma value in global count dot items so basically I'm referring to both the items that is p and the value and then I would end this for Loop by a person sign and again a person sign and now I would end the for Loop and for okay person sign then I can do I'll do a let's suppose this is the key then value value and then I would give a break so here you can see in the in this way we I can print the dictionary so here you can see this is my key Dash value then key Dash value then key Dash value so here I've got the key value pairs so we are going to work on this so I'll give you uh first then this these are the tables these are the tables which were in the bootstrap so we have a responsive table so I'll show you responsive yeah so here it is responsive tables so these are the responsive tables so we have this class diff classes or table table responsive then uh this is the table classes your table so this gives us a responsive table so uh we'll I'll add a table let me check one we will add the simplest one so this is the simplest table we can have uh okay so let me check where we are where we have to add this so this this is the result table okay now what we can do uh okay we can Define okay we can Define div class is equal to rho then if class is going to call md12 so I'm defining another grid for the table to keep it uh responsive so I've copy paste the table now I'll go to go back to my page and I'll refresh this so here you can see I've added the table and uh one class I have to add in the responsive table is this one that is this should be above the table classes rule to table so I'll move to the page so this is the table classes table and I have to add div class is equal to table responsive table responsive okay so this is this one is I have to add and I have to add add this div after the table tag so I have now what we can do we can do format document yeah this looks absolutely fine so I would refresh this page okay so here you can see the table is responsive when I press Ctrl shift I so here you can see we can scroll the table so if a table gets mixed so we can scroll the table so here we can see the scroll bar so let's get started with the tutorial so we basically uh first uh what we are going to do so uh first I'll clear this okay so first I'll run my server python manage Dot py run server okay so basically we are we were working on progress bar and we were supposed to add progress bar so in this tutorial today we are going to add a dynamic progress bar uh like it till the previous tutorial we had uh we are added the added a responsive table now we are going to add a progress bar so in this tutorial we are going to add a dynamic progress bar and see how we generate count of votes using progress bar so this is what we are going to do in this tutorial so let's get started with it so basically so I'll move to my server I'll run my server okay so uh to to navigate to the voting app I'll type slash voting app okay so so here's our app so we have a result table so what we can do we will make a first first let's uh add a complete a table then we will move to the progress bar quickly so this is a table okay so uh so we have to add a scope so basically we have added a table so we have to uh we have to add a scope so we shall do table header so basically we are first going to define the table header so this is the table header we are going to Define then we are going to define the table body okay so this is or this all is the header part and this all is the body part okay so let's get started so we have put that we have to add a class called uh in the scope then we'll make the header okay so let's this is so uh make sure this is uh here you can see uh there is a single row so I'll quickly explain this this is table then header then a row now we have to define the all the so this is table header is scope is going to call then ID or you can say anything Ash ID number related with this then again table head scope is equal to call then language okay language then what we are going to find table header scope is going to call then pound of words okay simply I'll type count here and uh so now I'll refresh the page here so here you can see I have a language number language and count so I'll press Ctrl shift I so here you can see it is responsible in nature okay so I have a number language and okay so this works fine so what we are going to do so first uh now next we are going to do is uh uh add data okay so we are going to add data row wise so particularly what we are going to do this is the table row okay so so first is the table data this again a table data so this corresponds to the first number then language then this is going to progress bar okay so so for this foreign so basically we have to add this all this dynamically so what I'm going to do and for so basically I'm going to add a for Loop here so follow percent for okay so basically I'll move to my views.py file uh so we are rendering a index.html using Global count okay so Global account here is a dictionary type data structure so basically what we have to do for key comma value this could be any variable name for T comma value in global count dot items okay so this would iterate in this way that first you are going to have the key then the value in global count dot items so this would do okay and now uh I'll do key then for this one value okay and for this I say for Loop dot counter so this way I'll add for Loop or Loop dot counter so I'll refresh the page okay so this works fine so let me test this I'll make a language PHP so here you can see number one language count one okay so let me do Java and I have okay uh I have some issue here the row is not coming properly okay I had to put all this inside a table row okay so now this should work fine when I refresh this page so I I hit the this URL Java so the found should become two okay yeah now it's perfectly fine now I have language PHP count one Java and count two let me add python here okay so here you can see even the dictionary is updated here uh I'll hit the route again python is three here you can see three then four so here you can see here the python is four so this looks good so we'll now add the progress bar so for the progress bar what we need to do okay so we can like these are the progress bar so we can I'll quickly give an overview on the progress bar so so here you can see uh there's a background multiple bars track bars animated so you can use the uh like use any so even here you can see toggle animation okay so here it is moving a little bit of moving stripes okay uh here you can see this is again a class subscribed colors in which you have blue green warning danger so here you can see like uh and we I get the same classes on on the button as well danger warning info corresponding through colors okay so let's add a progress bar here so let's take this one okay so to basically in the part of value we are going to add a progress bar so I'll split this uh TD table data now I'll paste the code here yeah so now uh so uh basically I'll refresh the page but right now there is no such Dynamic count so everything is full so I'll make it Dynamic so what you need to do so to uh like uh so basically here you can see I have a diff Class View to progress uh I'll quickly show you one thing and press Ctrl U so it would show how I rendered the code so this shows it where is the table bar yes here it is the table bar so here is here the data is being coming dynamically table data is one then language PHP table data PHP then progress bar and uh like this is the again coming dynamically so I would show you one thing if I inspect element okay and let me show you another group another view laptop okay so here you can see foreign the width has been reduced okay specifically I'm referring to the where my cursor is pointer so when I reduce to 50 it almost becomes half yes it is half now uh then again the way I am reducing the width the progress also reduces itself okay okay so this is good so now what we can do so so basically what I want to tell you that style should have the value here value okay and even here you can type value so this should show the value in numbers at the progress bar okay so let me refresh this page so here you can see I have one count two count six okay so let me add few more in PHP PHP okay so basically now you can see two okay and now I repeatedly hit hit this URL okay so here you can see this this has become three okay now five six then again right then just seven yeah same in the same way okay the same goes for the python I'll make a submission yeah here you can see the python has seven now okay so now eight nine ten eleven twelve thirteen fourteen fifteen sixteen Seventeen okay so this looks pretty good so even uh next functionality will try to uh we'll try to add that if you like if you know you are seeing like these are the count of words and that if there are so many languages let me add some another this C so c will have one count of vote okay then uh again uh let me do python again or Java PHP C plus plus if you want to compare these languages and if you want to sort them according to the account like if you want to see among among there are 10 languages and if you want to see top three so how we can sort them so I'll tell you how we can sort them so basically in today's tutorial what we are going to learn we are going to sorting the data by count of words in this tutorial we are going to sort the data by values in order to see the data from highest number of votes to lowest number of words okay basically we are going to see uh we are going to going to sort the data by values in order to see data from highest number of words to lowest number of votes so basically we will Implement our algorithm and we will learn how we can imply apply this on a Django project so basically we will uh before this we can uh learn something on this suppose we take a random string hello world python python programming Python Programming I hope this is fine okay so we would create a data structure dictionary uh which would store to store the frequency okay frequency of characters I hope this is fine so so what we can do for CH and S I hope this is fine if c h n d if the character is already in dictionary then I would do T of c h is equal to D of CH plus 1 so I would increase the frequency increase frequency okay else d of c h is equal to 1. okay initialize for first occurrence okay we have done this before okay so this was pretty easy so uh let me do one thing uh let me create a function defined print data d so here I will be key I will this key and D of I is value okay and I would do for I in D print I comma D of I and here's the end okay so this is a separate function and let me here print D I hope this file okay here you can see uh uh okay okay uh I made a mistake let me do print data here so I had made a function for this purpose only yes here you can see I have different characters so let me I have different characters okay H has a frequency to e one but this data seems to very unsorted data so we will sort the data okay so how do we do that so we will carry on this okay let me do one thing let me remove this I have created variable a okay so a because sort by key in ascending order okay so a is equal to sorted D dot items K is equal to Lambda we have to make a comparator function Lambda x and x of 0. so here I mean to say that I would sort by key okay and I have to Typecast this as dictionary okay sorry for this I have to type as this back to dictionary and do print data a I hope this should work so yeah now here you can see that I had shot this is this is for a uh empty space okay so this is what uh this is in ascending order by keys please check this is by Keys a is a key B is a key e is a key G is a key H is a key I is equal to key L is equal to K M N O P Q R and W Y all here are Keys it is sorted by Keys okay I hope this is fine okay let me do another thing uh let me do a sort by key in descending okay so this is going to be very much same uh I would comment this out so what I can do I can copy this and do this as we and print data B so any change I have to make here yes uh this is a reverse is equal to true I hope this is fine okay reverse is equal to true now here you can see it has sorted by keys in reverse order by key Y is a key W is equal to Key T is equal to r p o n m l all are here keys but has been sorted in reverse order okay now uh we'll do the we'll do the same uh what we can do now sort by sort by value okay so we would do the same uh we would do the same okay sorry for this I would do this as C here as C and here 2 by values what we can do I'll remove this so here one means XOXO 1 means I'll sort by values here okay so let me do run this okay I'll comment this out also so here you can see that now I have sorted my values 1 1 1 1 1 2 2 2 2 3 3 4 this is why values okay this is by values in ascending order now the very much same thing in descending order this was an ascending okay and this is now D I would copy this and in the very much same thing reverse is equal to true and I'll do print data d now here you can see that yes sorted by values in reverse order so this is what same thing we are going to implement on Django service sorry Django server okay so what we can do we would do we'll move to our page okay this is a result table and what we can do h a RF okay class is equal to button button primary any any button you can choose sort data okay we are going to sort data okay so sort data okay okay uh let me say descending sort data in descending order okay now we'll Define a URL path sort data I'll Implement a function views dot sort data and name is equal to sort data okay so I hope this is fine uh and I'll have to define a URL here percent URL sort sort data I hope this is fine and then again a percent URL and close the bracket okay so I hope this is fine and let me check check it on my server with this won't work right now actually this is throwing an error Dev sort data the request is a parameter and return pass okay let me check if uh till now is it working or not okay so I hope this should work now okay return okay okay I've made a mistake sorry I should this should be passed okay so M uh now what I I can do uh okay I'll move to the link localhost colon 8000. okay and now to the voting app slash voting app okay so here you can see sort data in descending order order I hope this is fine so what you can do uh this two what the so we are going to implement this very much same logic okay to the rendering part this should be same I guess okay this should be same so I will copy the code okay I hope this is fine and Global count is equal to Global count I hope this is fine now okay but we need to implement the uh so access the global count since uh don't confuse uh don't confuse yourself the undefining keyword Global so this is a keyword global global count so I'm accessing a variable that is global okay so global global count so what I will do I'll do Global count is equal to dictionary then again sorted okay Global count dot items okay and then we are going to sort by value key is equal to Lambda X of 1 then reverse is equal to true I hope this is fine okay okay we will test now I will test we will test this application this is python I'll submit here so python has one more two three four five six seven eight nine ten okay eleven twelve okay here you can see the python is 11 volts let me to see okay okay till now what we have not clicked on this button Okay C is three four five six okay some Java let me submit here one two three four five six okay uh Java has 10 words so we might uh soon JavaScript okay so JavaScript has nine volts okay now I'll correct sort data and descending orders okay now you can see the magic the data has been sorted when in descending order 12 10 9 7 okay so because we were able to increment the logic on the server side and get it rendered on the front end part so data has been has been sorted by values okay so uh so you can try out more in such a way okay we can do anything suppose uh I'll do Java here okay okay Java has 11 votes okay let me introduce a new plan with SQL okay SQL has one vote now SQL has four four five six twelve okay 15 17 now SQL has more votes than python so I'll do sort data in descending order again you can see the SQL is now on top since it has 17 volts so you can Implement your Logics on your server size and get it them on front end so that's a good part of the application so in the next tutorial what we are going to do so what we are going to do uh you can try out any of the applications so let me do another check python here as 13 so 14 15 16 17 18 19 20 so python has 23 votes so I'll do short data and descending order again python is back on top so in this uh I've created the new link of my repository that is Django to do app so now we are going to make app which means we will work on the database the most probably the database we are going to work is sqlite so today we will start with the todo app how we can save a data in the S uh sqlite database then how we can manipulate the data so basically we have many operations to perform like sqli database you do app create read update delete operations and moreover we can do search plus sort we can sort the data as well so we'll perform a regex search and even sort the data so in this tutorial we are going to start with the sqlite database and a todo app so so let's get started with this tutorial so I again welcome you to programming knowledge so let's get started so please make sure that this this is the new GitHub link or repository so you you get updated with the repository as well okay so uh this is my link so I I've already created a app okay uh because this is we we have already learned all this how to create a form so basically it has a todo writer to do description and a todo priority then I have an add button here uh before we add this uh we make a request to save the data we have to define a schema to how we want to add our database okay so actually there is a file called models.py file in uh so what you need to do so this is a model.py file so initially I created a class to do uh so it has model sort model so basically I need to define the schema okay so so basically uh like if in the front end of my part I have a title description and a priority so I would Define the same at the back end part so I can save my data uh on the backend part as well okay so let's get started with it so first you need to add create title title is equal to models Dot cadfield Okay so and I'll give max length is equal to 255 okay then description is going to model short text feed because this is a text field and I would give uh there's no one necessary to give a text sheet because it can have many characters as well so then the next would be title description then priority priority is equal to model short integer field because this is this is going to be integer which priority what you want to give and then create it at okay this is equal to Model start models Dot date time field date time field so this would keep the date time field this would keep the track record of whichever date you want and I want you to add one parameter Auto underscore add underscore now is equal to true okay so you can do this so my the server my server gets restarted okay there is an auto uh maybe uh Auto Now underscore ad okay let me let me restart uh models created model dot date time field no Auto now let me check uh okay got an unexpected keyword argument Auto underscore add underscope now uh did it uh did my server restart after this let me check okay yeah now it's working fine okay so it's good so Auto underscore now underscore add is equal to True okay so what we can do so we can we have created the database and now like we have created our database schema so what we can do we can proceed with the form okay so we'll move to the front end part index.html so I'll Define a form action here quickly form action or maybe a URL first or let me check view shot okay this is a submit okay so what we can do so uh okay okay this is your file to do app okay yeah so here's I'm making making a request this is the index page then I'll submit the data then in my views.pv file okay I'll create a object so make sure you import this line okay from dot models import Star okay so this would import all the database model okay uh okay let me do one thing uh okay before you create a model then you need to migrate as well so you need to type python manage dot p y make migrations okay so python manage.py so it says create model to do so I hope you can see the model has been created okay now I would do python this was the earlier command I did python manager make migrations now I would do python manager py migrate so this would uh this would migrate my data so here you can see this has been migrated so even I have my sqlite studio on so I'll refresh this data uh tables so here you can see the tables has been created so I'll quickly give you an overview so here you can see this one so this one has a todo app underscore which has five columns okay so which is ID title description priority and created ad so this was a schema which I was telling you so and these are the default Django schemas uh which are which I'll also explain in the other videos so ID title so for each object you have ID then I titled and description and a priorities and created ad okay so so what you can do you can move to to do app then what you can do now uh these are the following options so edit table delete table okay remove the database edit the database database and the you can look at the following options so next thing you need to do so we'll move to the form okay now we will move to the form and then submit the form quickly and save the data data like our todo uh item into our database okay so let's get uh let's get done with this so first you need to do object is equal to to do because yeah I had created then object dot title it is equal to request dot get I hope this is fine title okay and object dot description description is going to request dot get description description okay then object object dot priority okay I'll show you one thing that in my index.html the Sprite is the input type 0 to number okay that's why I Define the integer field corresponding to that okay object dot priority is equal to request dot get priority priority okay fine then the date will be automatically added to it corresponding to the time and the even the also the ID will be correspondingly added and I'll do object dot save okay fine then I would return the same thing object dot save turn request index.html or uh uh okay then now I must restart my server python manual.pui run server okay and in my index.html file I'll make a action percent URL submit okay now I'll make a percentage send okay so I hope I hope this is working fine okay uh let me do one thing uh what we can do okay now I should make a request test data let this be a priority number one okay so I have made a request so okay reverse is equal to okay let me check there's some issue uh person URL okay it says that this URL is not matched okay let me check okay uh by mistake I had to do this submit okay so I hope now it's fine so I'll uh make I'll make the request again test test data I'll make a test data okay and then priority is equal to one okay I hope this is fine so I made a request and then in the the page Got Loaded again so let me check if it's in my data or not so I'll refresh the data okay so let me check so uh like uh here you can see so yeah now here you can see when you click on double click on here then I have the structure then the data so this was the data has been added one ID is one title is test description is test data priority is one created at this time okay I hope this is fine so you can uh okay now I'll make another request to make sure this is absolutely okay so I'll make test data to testing application and I'll give priority to it as like suppose 100 uh one zero one three one one zero I'll give one one zero something you can give anything okay one one two something anything and I'll add so I here you can see the API has been hit now and I'll check my database so I'll uh what I'll do I'll refresh this okay and okay let me double click it to do app okay here oh okay so here is the refresh button okay now it works fine okay so here is it uh uh like uh you can get familiar with the SQL shooter even I uh so here you can see here is the refresh button also refresh selected database schema and this is the refresh table data so when I click refresh table data so here you can see the second test data to testing application with priority one one two has been added to the database so basically uh in this today's tutorial we are going to implement the list and delete operation okay list and delete operation uh on the todo app okay so so basically uh uh till the previous video we had made a small app so I'll give you a small overview so my server is running okay so I'll give you a small overview so where uh I told you so uh like where I told you like we can add a data so I'll make tests new okay I'll do a todo title uh uh let's new let me add something new title new title new description and uh to do practice five okay so I'll add this to this and when I move to my database so I'll move to the to do app underscope to do so and here I can see new title new description priority and credit has been added with id4 uh basically uh uh and the the ones which I added in last video video so I had deleted them just to try out something new on this so let's get started with this today's tutorial so today we'll be implemented delete operation okay so before this I will make a list page so so I'll list all todo's here list all todo's okay so you can give any title you want list to all todo's okay so basically uh what you can do so we'll move use bootstrap here so uh we'll move to this URL uh so this would give us the components here so here you can see so we'll quickly move to the URL and uh we can do what we can use uh either we can use card okay we can use card here okay so this looks good so so I'll copy this okay but before that what we need to do okay uh we use this was our form which worked fine so it will move to the views.py file okay till here viewer it's fine so I'll do a digital my dictionary I'll create my dictionary my dictionary and uh for all to Do's okay I'll render them to the page to do T objects dot or so I hope this is fine so so to do Dot object.org and I'll do list dot HTML and I'll give context is equal to my dictionary I hope this is fine okay so let me add a new to do and check uh new data new data new and I'll give a priority as six and I'll submit this so yes yes uh but uh okay let me check one thing I made a mistake uh okay I had in this my index.html uh I had to put this all under the block content block content okay and here's the form and I'll end this with percent and block this is why I hope this is fine percent and block will do uh okay now uh and here what can I do uh in this page list.html uh which name I had made that is all todo's so I'll do it like this all to do's okay so I hope this should work fine now the todo title is new title three new okay let me give S7 okay so here you can see I have it is showing me query set which says uh to do object four five six and let me check in my data which are this four five six so these are the three which I had uh which I had recently added these are the three okay so we would uh use a list or a card so so what you can do we can use the a for Loop here percent for each to do foreign Okay so so this is fine this has got title so I'll give each to do dot title and in the same way I'll give each to to do dot description okay each to do Dot description so this would give me the description okay and one thing I can do also let me check okay uh uh what I can do I'll give a space here and type each to do T priority I hope this is fine this this would give the priority and uh I will come to this uh refresh tag we'll create a delete operation here so I'll refresh this page so here you can see new title new description new data 6 data new new title three seven new new title threesome okay so uh so I hope uh maybe I refreshed this page so I had I hit this query twice so that's why I have to twice this data okay because I had refreshed this page so this had made another operation add operation here okay so we'll now do something uh width is this okay margin uh I'll give a margin top of one ram okay and div plus is equal to row okay Dave class is going to call MD 6 so I hope this is fine now I'll paste the card here so here you can see here I'll paste the card now and here you can see okay uh let me do this uh okay yeah and I'll give a style is going to margin I'll give a margin here margin 0 or 2. okay so I'll again replace this page so I'll so yeah now it looks uh fine okay but uh let me check something uh so so this is called md6 yeah so here what you can do if you want to increase the width you can give anything you want uh maybe uh what you can do uh I'll give classes to card and container fluid so this would take the whole width of the container okay so I hope this is fine now okay so and now we have to create a delete operation so uh I'll uh so like till now let me do one thing so I add a new title new title delete operation okay delete task something like this priority I'll give it as 78 when I add this I get this at the end okay so one thing we are missing here that is the we had made model short py we had created add operations we will even add this also so so I'll copy this and now I'll do each to do created add okay so so I'll refresh this page now here you can see I have all the created options with the timings okay so okay so today we are going to continue with the delete operation so basically we will continue delete search and sort operation on the todo app and even even in the end we'll do the update operation okay so basically we will also perform the update operation as well so uh okay in this tutorial we are going to implement and continue with delete operation and look for the other useful query set features so that is going to be very easy uh so that's going to be very interesting how we perform the create operation so basically first we will move to urls.to your file and need a delete route with ID as a parameter okay when we are done with this so we'll call views dot delete and name is equal to delete okay I hope this is fine okay uh uh so what we need uh what we need to do uh we'll move to our views dot py file okay it is throwing an error because since I have not defined a delete a function in my views.py file so what we will move to view short Piva file and find the delete function if I delete okay uh what parameter is going to take and it is going to take a request parameter request and uh basically uh this part is going to be same okay so this is going to be very much same part I'll quickly copy this so only one thing we are going to do uh since we were going to get a ID okay so object is equal to 2 2 dot objects dot get so with this ID basically this uh I'll open my table so basically match this ID okay with ID sorry for this with ID you get okay basically I'm trying to tell that match the ID here in the table with the ID you get why the URL okay by the route so basically you get the get get this object then same clip from object dot delete okay so I hope this is fine so this should work okay uh let me do one thing okay uh okay let me check yes okay so let's do one thing uh we'll move to our server okay and what we need to do okay you can copy this okay we can copy this and so this is our local server so basically what we are going to do we will move to the delete okay and we are let me check if the if they're already let me delete this one with the id4 so I'll move to my page and do delete four so maybe the fourth one should have been deleted so let me check so here is my database database so I'll refresh the table data so here you can see the uh the object with the id4 has been deleted so let me check uh let me check one thing uh let's uh take this one new title delete operation 78 okay so what id does it have so let me uh okay new title delete operation so 10 and 11. so I'll delete both of them so how you can how can I delete delete one with ID 10 okay done and delete a one with the ID 11 as well so that was pretty quick so let me move to my table and refresh this page so here you can see the 10 and 11 has been deleted but you want this operation to be performed by a button not by a direct URL so what you can do so you can move to the index.html okay uh and what we can you can do uh since uh sorry uh we'll move to the list.html since we all have all the buttons there so uh let me do this button button Danger okay and we have to Define this as delete okay and then object so basically uh we are going to Define this as delete each to do Dot ID okay so and I'll do this as delete okay so this should work fine let me refresh this page uh okay okay I should not have refresh this page let me open this list all to do's okay okay okay okay there's some issue let me check you are a zero to do app okay so let me add a todo new to do I quickly even do this also uh or maybe I have not defined in I'll move to my index.html page and inside here okay uh I have not defined let me do one thing so uh I'll Define a path list okay now use dot list okay and name is equal to list so this would list all my pages okay now I'll Define my inside my views.py file I'll quickly do this Define list and it will take requests as a parameter and do this thing okay and inside index.html I'll do percent URL list okay so this would list all to those okay let me click this okay so here you can see I have got all the todo's so let me do this uh each to do dot ID okay I made a mistake little mistake uh this should have been actually uh this should have been a value so I hope this is fine now this should have been a value I I I forgot to put curly braces since this should have been an uh value okay so this now this this would work fine so let me move to my uh okay I'll show you one example and you add a new to do to do added now okay delete this okay I'll give this a priority as 500 okay so when what happens so let me check so I have added a to do added now delete this so when I click on delete so here you can see delete 12 has been hit so it has been deleted now okay so this works fine okay so this works absolutely fine where you can delete this I can delete this one delete this one this one this one this one this one and I empty my todo list okay so even a list to do uh uh now I can add one okay uh so so uh you can move to the index page here I'll quickly quickly add the index URL as well on the add Button as well so you can add any so to do added Now new okay okay delete test and give this variety as anything and you will able to be able to delete this so I hope this works fine so basically in today's tutorial we are going to uh we have all like we have implemented the create operation read operation uh Delete operation we are left with the update operation but before the update operation I want you to have a bit familiar with this query set features on Django so basically they have this query set features are very useful to implement the backend functionality like suppose I can show you that this is the all feature we use so it returns all the objects of that database class which we have defined which we also say as model database model so it returns all the objects of the that particular class or model and uh in the same way we have also have particular things like uh filter uh values date times all Union intersection uh one thing uh one of them I would like to show you this order by so here you can see order uh yeah yeah here you can see the query set is for its it has an order by Clause like uh it will uh give you the order if you want to sort the data by a particular value you can use order by so that's pretty helpful uh so you can use order by so like uh uh what I can show you one thing like uh one is order by another is uh contains contains contains this one here yeah so this one is used to search this is particularly for for searching the data so uh what kind of data you want so this this one is contains so like if you want to uh like this is this query is particularly uh get headline where it contains this keyword so basically this is equal to this SQL equally query select where headline like this is this so basically uh you can form the search operation y contains so we are left with the update operation we'll quickly uh complete that also but before that we'll uh try to implement our uh sorting the data and searching the data by order by feature and contains by feature so this is a GitHub link and here I have defined Brothers uh so I will open a project so basically this is server title but it's uh right now it's not functional we'll Implement that so we can add a new todo like we can do order by order by feature feature to be done so this is the title okay so I'll quickly copy this and give this a priority of thousand so here you can see that particularly I have called the like uh basically I have uh this is the one I have added order my feature and this is like coming and it it has a basic functionality of delete operation as well so it has been deleted with the id19 okay so it must have been deleted so quickly I'll add in another uh order by feature to be done yeah and I I'll add this and I'll give this as a number 500 okay yeah it should find okay one thing you can see that if we have made a like it is a we have made a query to draw uh so so here you can see we have made a route where we have uh uh where it's working like an API so somewhere uh so let me do this 500 as 6 000. and let me and uh when I submit this so I will find one with the sixth option as well okay and this one is 500. so now I now I want to uh like we have the priority numbers so these are our priority numbers this one is 500 500 89 800 500 6000 and we want to be order the data according to the priority numbers so we can use order by feature so that's going to be pretty fine so what you need to do you need to Define uh in urls.pri file of to do app so what you can do you move to the path okay okay sorry for this I need my caps locks to be off uh so uh I'll Define path sort by priority or something or let me do sort data this would be fine yeah so sort by sort data sort data now I'll call a views function views.short data use dot sort data and name is equal to sort data okay sort data yeah I hope this is fine so I'll move to my use.py file Define sort data which will take a request as a parameter okay and uh so basically what I'm going to do I am going to return render request then left dot HTML okay and context is equal to context would be my dictionary okay and uh now I'll Define my dictionary okay so here you can see that when I Define my dictionary so here you can see that I would Define uh like uh all to do's all to Do's okay and now what I would be doing I would be saying to do to do dot objects dot all dot order underscope by and let me do this by uh I'll move to my models.qifi file so here you can see that I have list of parameter one is title description Priority Credit ad so let me uh first do it by uh created at okay created underscope add okay so I hope this is fine now uh This is My URL okay and now I'll move to my index.html so basically uh so uh to do description no no I have yeah so I have made a page uh let me do this as sort by uh sort data okay sort data and the URL would be percent URL link so I'll Define the URL then give me a percent sign then again and uh I would Define this as sort sort data okay so I hope this is fine I have done short data so let me go to my app and uh let me click on ADD and let me click on sort data so object has no function order by okay okay that means the let me see something I've made an error let me move to my views.vi file okay okay I made a braces here so no I think this is fine okay so let me refresh this page yeah now you can see that I have been ordered the data by date and that will uh ascending order so that is an increasing order okay so first 7th May 7th May 7th May then comes the your tenth way okay now if I want to change this feature simply I'll move to view dot py file and uh uh I'll put a negative sign here and this would be in decreasing order so now when I refresh this page here you can see 10th May 10th May 10th May 10th May is there then seventh my seventh place in the same way uh you can do with the priority number as well okay so here you can see uh I'll do the priority number so for that you need to move to your models.pophile you should be very familiar with this very same keyword now I'll give a priority here okay and now when I refresh my page my all the priorities would be increasing that is 89 500 500 500 800 6000 and this uh do a large number now when I put a negative sign here now I can see that now this would be in a decreasing order okay so I hope this is where you you are pretty much fine with this that now this is in decreasing order now it's helpful to you okay so like in this way you can uh you can uh create such operations and uh like in the next tutorial so basically I have made this by sort by priority now so you can uh change this to sort by priority okay so I hope this is uh fine now even list all to Do's you can list any of them and then then click on sort by priority you return a number within priority okay so and this is your delete operation which works absolutely fine you can delete any okay so I have deleted this one so basically in the today's tutorial we are going to continue with our todo app so basically we will perform a search query based on title so title of this uh video search data so basically what the data we have in the all to do app so basically I'll show my app so we have ADD list all to do and this is for priority so basically in list all through the Section we have all the todo's so basically I can add few more as well so let me do some like uh I added on uh let me do Django so I have it on Django and then Django priority I'll give it to number one topmost priority so here you can see I have on Django then or I'll do another one add another one python and I'll add on python again python I'll add priority again to number two okay or maybe one also so here I have added python also so basically if you want to search our todo's so we confirm search query so for that I'll refer to the query set so the one I told you which is going to be very important for this is going to be contains so I'll move to that contains contains uh contains I'll move to contains okay sorry for this contains yeah okay I am having some issue okay okay now it's fine okay so basically we have contains so yeah here you can see this one yes so object dot filter and this is the this is it this contains me this this keyword is being looked uh in this headline okay so so for if even we'll design the same thing for the title one so let's get started with this so what we can do we'll move to urs.py file and then we'll Define a path then search data then I'll Define views Dot search data okay and name is going to search data so basically I'll Define search data now what I can do so while defined in My Views Define search data and it will take a request as a parameter and we'll do what I'll try to uh then we'll perform the operation so till time I can do the path so basically people if you want to do attach the query then I'll move to my index.html page so this is Sorry by title okay so I'll give it to person URL okay search data okay so this would uh perform my query to that and then uh this is the form so here you can see so here you can see this uh I want to show you one thing okay let me do right click inspect so basically I what I'm trying to show here that uh this thing is a form okay and this whole thing you can see yeah so E Yeah so here you can see uh yeah this is a form which is being highlighted now this to do title to do title to do discussion to do priority this is a formula in itself so for that form to submit this we refer to the add button and for this form uh it has no buttons we will create a button for this form okay so sorry my title is a form in itself plus this is in a form itself in itself okay so for that what we can do we will move to that search by title search data and we'll create a button button type is going to submit a name is equal to for that we do a button type so to submit and we'll do submit or search so let me do search query okay search by search okay and now for that we can do uh class is equal to button button primary okay for that will and style and Define a style as you would display block and margin zero order okay so this would Define a button to the center okay let me do one name so it would also give a top margin here so when I refresh this page here you can see I have a search button fine now when uh when I move here so to search the to initially see see if it's working fine uh I'll Define a queue he did go to request sorry request dot get query and I'll Define a HTTP response of queue so let me move to my page I'll refresh this and I'll type cricket crime type CR so yes it gives me a HTTP forms of CRC it works fine okay now we would render the uh these two do objects uh or not uh uh front end so basically uh we can do what we can do uh we'll okay uh I want to show you one thing also uh we have contains so basically this is equal to uh even uh last time I showed you contains this one this one this one this one here okay yeah yeah I wanted to show you this thing so case sensitive containment this is contains uh so basically there is a difference slight difference between uh this this uh contains an i contains so basically here I stands for insensitive so this is case sensitive and this one is case insensitive so this this one I wanted to show you and this is equal to this SQL query where headline is percent this keyword so okay so basically this is where this is a small difference I wanted to show you between the contains and uh insensitive contains so basically there is a difference of this keyword I so we can move to our application now so what we can do so I'll Define my dictionary I'll Define a dictionary then I will return render okay then request then list dot HTML okay if you want to show the result in the list itself so basically we are referring to the same template again and again then context is equal to my dictionary this is pretty much same as above but here a difference will be so what we have all to do's okay for that we have to do dot objects dot filter okay then uh what we are going to do filter and now we are going to Define title so basically we'll move to models.py file so this is the title world we are going to use title double underscore we will Define double underscope contains is equal to Q okay so I hope this should work fine so this is we are referring to title to have this okay so let me do one thing uh I'll make a search query so if I type CR then we have Cricket okay so it match my query so let me do under list all to do so Cricket 89 so I'll Define a cricket so see this cricket cricket cricket and then 90. so this is a different form working okay absolutely fine so so this is cricket 90. then I'll Define another one click it then 91. so when I should type CR so it should return all the Crickets with 89 90 and 91 then even I have to sort by priority book okay okay okay uh sorry for this uh okay we'll work on this but uh till now we can uh this is the uh I'll clear this so basically this was short data so it referred to all to Do's so it has no filter yet okay but when we just search data so I'll do do this again uh I'll Define cricket and now I have 89 1991 okay uh so we will next time we'll try for the update operation so hey okay we will check enough for another one then let me take a type B A so basketball would be so this is basketball okay and this is ba refers to here as well so it is a reference to the ba in the basketball and football okay ba so we will Define let me do another okay you can uh type the query here as well Foo football so this would return you football only and let me type O R so this would match this regular order by order by so this works absolutely fine so uh we can do for another as well let me do DJ so it would return with Django and Pui this would return me python it's absolutely working fine so in this soap video we are going to implement the update operation so let's get started with this so basically uh I have my todo app so we click on list all to Do's so we have a uh all todo's list so basically we want to have a update operation here or edit operation so for that what we what we can do we can talk we can move to our list.html and copy this and click here edit and change this button to button warning and and here we can have the edit operation so for that I'll repeat this page so I'll have the edit operation okay fine uh for this edit operation to have the happen we have to have a url.py so basically like for the delete one we will have for that for edit edit so basically I tell you the difference between the edit and update so basically uh right now we're implementing the edit operation reviews dot edit and name is able to edit I hope this is fine so and in views then we'll move to use dot py file so here we mentioned views.edit so we'll Implement edit operation here so for that we'll Define edit Define edit I'll give requests and ID okay so and what we'll do so I'll copy this line so basically we are going to render a new HTML file known as edit.html but before that we need to find the object which we are going to do so object is going to to do so basically like in the delete operation we read this we did this uh we got the object which we have to delete so in the same way we are going to find the object which we have to edit so then my dictionary is equal to this which would give title is equal to object dot title object dot title then description description is a good object Dot description then priority is equal to object Dot priority okay so then if you want to so basically the object we want to edit will get the object then these are the properties or attributes referring to the that object and then we'll pass to edit.html okay I'll tell you why you will pass to editor HTML before that we'll move to index.html so this form was for the this form was for the submit part so we will copy this form okay then I'll copy this form I have created a new file edit.html okay okay I'll not directly copy this I'll do one thing first I'll copy the extend template so this would get me the extent template then I would remove this okay then I will do edit edit to do okay we added data whatever you want then now I'll move to index.html I'll copy this form okay then I'll copy this form and paste it here okay so I have this so I'll complete two divs so this would yeah now I've already know I'll show you one thing when I refuse this page I click on edit so I'll move to this form but still know this form is empty okay first I'll change this add button to update okay first thing I'll do this second thing I'll do this I'll change this the URL submit to URL update uh okay and let it be submit now I'll tell you one thing so I have a title here so I'll give a value is equal to title which we had rendered using the dictionary so this would I'll refresh this page so I have basketball here okay so perfectly fine in the same way I'll have the description and in the same way I'll have the priority as well priority as well to perfectly fine it would work so I'll have a priority as there okay so now what we are going to do so we have this so basically we want to update this so we can update this very easily so what we can do uh we'll move to urls.py file and Define an update operation update and I'll take an integer ID here again then again so I was telling you there's a difference between an edit and update so now we'll update this update and name is go to update okay so what we'll do uh so we will move to views.py file Define update request ID so this is particularly same this would be very much same as the submit operation okay but there would be a minute change I'll tell you so first we are not going to create a new object we are going to update the object with the given ID so this is fine second uh we'll need to create a import date time okay and updated add underscope will go to date time dot date time dot now okay and then object dot created at created add is equal to updated as so this would work fine so this is telling you that we need to First find the object we are going to update then title is title description priority then date time we will create a new date that is updated at and will assign it to the cater ad then we'll save it and then we're going to return the list.html and one thing we are going to change here is that we are going to change this to update that is ID but still uh one thing I'm missing that I have not rendered the ID from use dot previous file so I will do this now this should work fine this is by the object dot ID okay and in my edit.html this should be with curly braces so this should work fine so let me create a new to do new to do new to do now okay uh give me a priority number of 500 I'll submit here so it has been created now click on edit so new to do now is new to do now now again okay new again so hopefully we check let me check the this is yeah new to do now new to do now so yeah so now what we are going to do let me edit this and I'll type new to do now again then again okay another priority number of 505 so it throws me an error okay page not found okay let me check to in my urls.com okay this was having an issue yeah so yeah I've got a handmade so here you can see this has been changed okay new to do now again 505 had been changed so basically in the same way let me edit anyone this is Cricket 89 so I'll click on edit so this is a cricket cricket okay I'll change it to football football again new something like that so Cricket new and I'll give a priority number of 8.99 so let me check so yeah here you can see this has been updated football again new 899 Cricket new and the time had been updated accordingly so this works perfectly fine so we are almost done with the todo app so we'll catch up in the next tutorial so what we can Implement next so basically we are done with the uh all operations so basically uh uh okay because one thing I noticed here something let me check that this is basketball new 0.02 so I had only one word edit.html title description okay even I'll try to check up in this tutorial next tutorial uh there's just some minute uh so basically I'll try to update this football football uh a very huge number so this is this has been successfully updated it works perfectly fine so I'll delete this again so even the delete operation also works fine so delete delete delete delete works fine we can carry and uh we'll uh we'll do to search then uh football no not yet maybe we are not matching with oh yeah we don't have anyone so let me type DJ yeah so it works out perfectly fine so almost our operations work to perfectly fine so basically in today's tutorial we are going to connect the Django with mongodb and I will illustrate all the process how you can uh create a mongodb database and how you can connect that model DB database with your Django application so let's get started with today's tutorial the first thing we need to do we can open our code editor and then we need to type the command pip install Django so this would install the Django on a local machine and with this command we can create a Django project as well as a Django app on our machine then then I would like to tell you that till the time this is being installed on my machine what you can do yeah here you can see that it is installed in Django on my machine and you can install Django with this simple command pip install Django and then we have a mongodb plus I will show you how the we can go here you can refer to this website uh first this is the website for Django I have already told you how you can solve Django then this is the website from here you can install the mongodb Community Edition and this works as a interface with you uh with the Mongol DB database as a user interface uh very similar to phpmyadmin which is used for SQL then this is the package we are going to use this package as a very similar name jongwo the word jungle is derived from uh like uh this is used to connect Django with mongodb so jongo is the package we are going to use so let's get back to our code editor so first what you can do you can connect you to the uh connect to the Local Host server using this mongodb Compass Community Edition and you can click on the connect button then this would connect to the localhost now here you can see that it has been connected to the Local Host now what you can do you can create your own database so let's click on here uh so first okay let's continue with installation part so after installing uh after installing Django you can install if install jungle so this is the command we are going to use to connect with the package this is the package we are going to use to connect Django with the mongodb database so it's very easy so uh till the time it's being installed yeah it's a very easy process and next what we can do then we can create a Django project and then we would I will show you how you can make a migration in your app then how the how we when you can change see the changes reflected in the mongodb database so let's what we what we can do uh next what I have so then we have to make some changes in your settings.py file I'll also come to that then you can see the changes on the mongodb compass so that's very easy so let's create our Django project so I'll type Django admin start project a demo project so I'll create a project then what you can do you can open a folder and I've created this project on my desktop so here I can open it so now the project is open in my vs code so next thing you can do you will I'll navigate you to the settings.py file so you can press Ctrl dot p and if settings.pi file so this would simply directly to the settings.pr file and here you can see that there is a section for databases so we would be doing this and I will open my terminal as well so we would be connecting this so what we can do first since we have installed Django now what we can do first we'll create a database I will show you like from here you can disconnect and connect so I'll show you again very first you disconnect then you can click on connect so this would you connect you to the local news database and now click on create database and type demo database remote database and you can give a collection name a demo collection so I would click on create database so here you can just copy the you can keep this as a referral demo database so and demo collection so I'll click on create database so here you can see a database has been created and which is having a just a demo collection right now but what we can do uh we will connect to the our project and then run the app so I'll sorry run the migration so what you can do you can simply copy this and you can paste this code I'll comment this out databases so I'll put triple quotes here so this would basically comment this section typical quotes and now I would paste this you can do one thing you can remove this client part because you are right now dealing with the localhost and by default it would detect this so now you need to find your database name so I would Define my database oh sorry so my database name is this this is my database demo database so I'll move to this here and I'll type demo data base okay so this looks perfect now uh since I'm my connection is on so I type python manage dot UI make migrations and this would make the migrations in my database so so it says no change is detected so now I can type python manage.py migrate so here you can see the all the migrations are being applied so here you can see the migration has been applied now I would move to my database and I'll click on the refresh button and here you can see and I click on the demo database perfect so I have got all the migrations of the Django here in my mongodb database so this looks perfectly fine so you can create your models and then run the previous two command that is migrate and migrations and then you will get to go with this a project running so thank you guys for watching this video so I'll catch up in the next tutorial so here you can see I have made the project uh you can also do one thing you can type python manage dot UI run server so this would run the app on your local machine so you can simply copy this and you can paste this on your browser and here you can see your Django project is perfectly running so everything looks perfect so this is how I made the settings in my database this is the mongodb collections what I've got and this the project is already running but now we are trying to implement crowd operations so basically there are four card operations that is create read update and read and we are going to implement this using more ODB so first thing you can do is you can open this mongodb Compass community in addition and you can click on connect when you click on connect you can last in the last video I showed you how we created a demo database here then you can open the demo database and here you can see all the migrations the demo database has all the migrations we have done so you can refer to the previous tutorial how we connected mongodb to Django it's very simple and it's very quick enough so I can also give you a quick view uh in settings.py file you need to go into settings.py file and what you need to do here you need to make sure that this database engine is jungle and you have to install a demo you have to make a demo database and the name of that database is very much the same demo database and you have to install a package called jongo so it can be easily installed by the by attacking the command PIV install Yahoo uh for a what uh for any like if you want to see it as a demo purpose you can refer to the previous video uh now what we are going to prevent the crowd operations so we will go step by step and we will see how we can upgrade a app and then how we can implement the uh how we can implement the product operation in that app so what you can do you can simply copy this or you can type on your vs code python manage dot py start app demo app so this would uh start a demo app inside your current project directory and now what you can do uh insert uh because the time it's being created creating a demo app I can show you frozen commands uh this is the one like uh I'll show you we are going to implement a database model so this is how we make a database model we will make then we will create a super user and this is a Administration I will show you that and I'll simply show you so uh okay so let's get back to our tutorial see the demo app has been created you can see the folder here demo app and it has a file called models.py file since I have created an app demo app I need to make sure that add this application here demo app okay now what you need to do I've already connected to my database and the next thing I'm going to do I'll move to models.pi file and I need to create my models here so simply I'll create a model and I'll make create a basic model see this one uh I'll copy this and paste it here instead of this I'll do class to do uh and this is the this is instead of first name I'll type task and instead of the second last name I'll do this to description this script shun so this is the description I'm going to have task zero models.cathy and this is the description here I can increase the description to 100 perfect uh yeah perfect now I have increased the description to 100 and now what we can do uh inside my admin dot py file I can register this and for that I know to do what I need to do I need to uh first import models from dot models import everything so I from dot models import Star and here you can see that I have registered I can register a model here so I can copy this and paste it here uh yeah so here you can see uh I can uh you know import that model and register here as an admin so I can implement the credit operations so I'll simply type to do so to do is the model which I have to register and I will create a super user at the same time python manage dot py create super user so this is the type of command I have to type to create the super user so it could ask me to like the username so here you can give a username as admin you can leave this email address password you have to be give a very simple one and then again you can give a password the make sure it's an easy one just for the demo purpose and you can continue that and now so this password it seems to be too common but you type y that is yes and it will create the super user now since I created the model database model and I also registered that so now what I will do I will migrate this database python manage sorry python manage dot py make migrations and now what I'll do so here you can see it shows that create model to do now I'll migrate this python manage Dot py sorry python manage dot py migrate now I will migrate this database so yeah here you can see so I have made this and now what I am going to do I'll go to My Demo database and I'll refresh this okay so here you can see that I have got a demo app to do here here you can see demo app to do now what I'll do I'll run this app python manage.py manage dot py run server okay now the app will start at start at the Local Host so I'll move to my localhost so like we have created the model perfect we have registered it as admin perfect and now uh okay this seems to be something else sorry uh yeah now I have created an app which I told you that and then we registered the app inside and installed apps directory as well so we are going in the right direction now I'm at a localhost I'll refresh this and you can see that I have the my app successfully running now I will go to the admin slash admin so simply we refer to the documentation for the quick illustration of this and the you need to type in the username and password you had set and what you need to do then you can log in here and here you can see I have to Do's so you can add a todo here simply we are going to implement the cloud operation so to do number one so a hello world I'll type simply Type Hello World anything you can give hello world now I'll save this uh let me I'll either I'll do save and add another or I can save this yeah so this has been saved and here you can see the object says yeah this is I have the object okay so I I'm clicking on Save again yeah but now when I move to my database I click on this demo I have to do and here you can see that you have this data in the Json format so perfectly fine so here you can see that I have the data in the Json format uh since it's Momo DB okay uh I'll quickly show you yeah you can see this in the Json format so and this register you can also click on this button so this would show you in the tabular form and this will show you in the Json form so perfectly fine so let's Implement some few operations on that again now I click the todo app project and I get Google number one edited so I can save so this has been edited so when I move to my database I'll click on refresh I'll click here refresh button yeah now it says to do number one edited now simply I can add another review so to do number two number two and I'll give the same description yeah and then I can move to my database refresh I'll get another one and now I can delete one so that makes a last purpose of our project I'll delete this yes I'm sure I'll delete this and when I move to my database I found it deleted so that's perfectly for how we implement the create operations so thank you guys thank you so much for joining us in this tutorial so this was a quick purpose you can simply create a todo app and with the database