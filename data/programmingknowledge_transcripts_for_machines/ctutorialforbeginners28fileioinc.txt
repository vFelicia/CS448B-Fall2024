hey guys welcome to programming knowledge in this video we will see how to handle files using c plus now what is file handling why do we need to handle files well whenever we are running a program where if we are taking some input from the user or let's say we are even generating something which is really important and we need to store those things like let's say in our snake game when we made that we had no provision to give a high score right because every time you run the game the score starts from zero and there's no way to know what was the highest score made till date using this game right so to counter such problems where you need to store data to a hard disk not in the ram because whatever you're doing in the program in its runtime it's everything is getting into the ram right nothing is going to be stored onto the disk but you do need something on the disk so that whenever you want the data back whenever you want to read the data back you have a way to read it back you don't have to you know again ask the user to enter everything or you know miss out some important things and all those things that is why we actually handle files we write files to store data so that it will be useful in the long term now everything in c plus as we know runs on streams so whatever we are doing with the operating system with the hardware everything runs on stream so you're already familiar with one of the stream known as iostream right input output stream which allows you to access your keyboard and mouse using c plus now for files you have another stream similar to this iostream which is known as the file stream so what will filestream allow you to do it will allow you to access the hard disk of the computer so that you can write files there so you can write many types of files using file stream which we'll be discussing in a later video but today we will start with something really simple which is nothing but the ascii files ascii files are nothing but what you see every day the dot txt files right so we will be writing ascii files today using file stream so let's quickly import that hash include f stream and here in f stream you have a class called left streams right so f stream is a class and there are two other classes so let's quickly talk about them one is known as the os stream and one is known as the if stream now what is f stream f stream is nothing but a class it will give you it will allow you to create a file object with which you can read write files right but of stream and if streams are nothing but inherited classes so these are nothing but children of this parent class and the use of them is pretty straightforward of stream is nothing but the output file stream so you use this whenever you want to write out files and if stream is nothing but the input file stream which you use when you want to read files when you want to take input from the file right so these are the two classes well these are useful for fasting because in the ff stream what you need to do is you need to provide something known as flags so let me just write it down here you have something known as flag which you need to provide to the fstream class to read to get a particular functionality of the file so when you want to read in a file you put a particular flag when you want to write out a file you put a particular flag and all those things we will be talking about that later but today we'll be seeing one of such flags so basically all these flags start with something like ios you have two colons and then you have a string over here so we will be talking about this flag today which was ios app which is nothing but appending flag and we'll see what append means in a short wheel right so the this is about the classes this is just an overview we'll dig deep into it in the future videos but today we will see how to quickly write a file how to read a file and what are the different ways to read from a file right so let's start with writing out to a file so uh for that what we need to do is create an object of of stream output file stream so of stream and our object is known going to be file right now to open a file what you can do is you can just say file dot open and inside this you can pass in the file's name so i'm just going to do test.txt well this file doesn't exist i'll just explain you in a moment what this does but basically for now you can say that this file doesn't exist on my computer it will be created by this of stream class now you can either use this method the dot open method or what you can do is you can directly call the constructor so you can just you know use this constructor you can just pass in the name of the file over here and that will do the same job as file.open so this is about opening a file opening is nothing but if if that file exists on your hard drive what will do is it will just load it into the ram so whatever changes you make to that file everything will be affecting the original file in the hard disk and once you close it it will be removed from the ram so that's how of stream works and another important thing is you need to always close the file so once you open a file it's really important that you close the file well this should be it's a large technically but i'm just putting this right now so that you guys remember that whenever you need to whenever you open a file you always close the file this is a must right so it won't affect your program much but what it's going to do is it's going to clean up the ram so you don't want your files dangling around the ram right so if you don't if you forget to close this file it will be present in the ram and it will be removed only when you restart your computer so that is the reason uh it's always better to close a file once you open it and that's about creating a file or opening a file so if if this file exists if this exists where does this file go it just goes in the same directory as this main file so i have this project saved in my desktop so if i go to my desktop and open that project it's youtube so here you can see main.cpp and well i had created this file before so let me just remove that so here you have main.cpp right so this is the directory where the file is going to come now if i just run this program if i just run this i'll be getting a successful run and if i go there i'll be seeing test.txt over here so this has been created right now once i run this program and it will be created whenever you run this program basically what happens is even if it exists it will just overwrite every everything in that file so if if i write something over here so if i write something like this as a test save that close that and again run this so i just run this again go back here open up test and you can see it's blank it's gone right so that is what happens when you open a file i will tell you how to save the previous contents but for now let's just talk about creating a file what happens is even if it exists it will be overwritten and a new file will be created in the same name right and it's just like you're just deleting it and creating it again with the same name and it will be always created in the same directory from where you run the program so since i'm running it from main.cpp so here i'm at main.cpp i'm running it from here it's creating in this directory and if you go to bin debug here you will have the exe file right so i've told you how to distribute your programs so this exe file will be created every time you compile your program and if i now double click on this the test.txt will be created in this directory now this is different from this one right so when i run main.cpp it will be created in this directory when i run this debug it will be created in this directory so basically if you don't provide directory what is going to happen is it's just going to create it in the same directory and if you want to create it in some other location so let's say um let's create it inside this obj so here you have a folder called debug right so i'll create one over here so you'll just need to provide this folders name so all i need to do here is i'll just say obj slash test.txt and if i run this and i'll be getting it over here so obj test.txt right so that's how you create files in different locations and whatever it suggests is that you don't worry much about the location so you just create the files and then move it to wherever you want right that's going to be really easy so that's one way or else you can just create it in the exact location you want and work with them it's up to you but for now this is how you create a file and now let's see how to write to the file we opened this in of strip mode right so you can write to this file so how do i write this well how do i write something to the console you do something like this right so cr this is a dash this is how you write to the console and let's say new line and this is on another line this is how you write to the console and if i run this what i will be getting is i'll be getting those lines onto my console now the way you write to a file is really simple what you need to do is you just need to remove this c out and place file over here so that's how you write something to the file this operator is all that matters because both of them are streams right and this is nothing but a stream operator this output stream operator that is why what you can do is you can just use this operator to write something to the file and now i just close this file if i run this i'll be creating a file of the name test.txt inside obj well i did not remove this well basically it will be created inside object you will have these content so if i go here so this is not the file so here you can see it's empty it's inside obj and here you have test which has those contents so this is how you write the file right so this is how simple it is to write to a file you just use the stream operator to write to the file and you must have guessed it reading a file is almost similar so now let's move on to reading files i'll just delete this i don't want my structure of the project to be messed up so i'll just keep this inside the same directory and now to read from a file what i can do will before going to reading from a file let's talk about appending to file what is appending well if i not change to this content it will be overwritten right so you just seen that whenever i use oaf stream our file will be deleted and a new file will be created in its place with the same name right so if i now remove this so let's say i remove this so this is on another line is the only content if i now run this i'll be getting that thing inside this file test.txt which has only one line now how do i add something to this i cannot add something right so if i just remove this and i add something else over here so if i just remove this i just keep this the word this over here and i run this you you know that it's just going to be overwritten over here everything else would be gone i just have this over here now now how do i tackle this well there is a flag as i told you in the beginning it's the appending file how to add flag is that you just put a comma in the constructor or in the open statement so if you are using the function to open it you just do the same thing over here so you just do test.txt put a comma and write whatever i'm going to write here right so here what i'm going to do is add the appending fact so ios these two colons and then you do app which will enable the file in append mode so what happens is that it is not going to whitewash the file the things are going to remain but whatever i'm going to add now are also going to be written over there now if i do something like this is some new content being added and uh just to differentiate let's keep it on a new line because if you don't keep it on the new line it just works like c out operator right if we don't keep a new line it's just going to write it beside that so that's the thing so if i just write this save this run this build and run this sorry and now if i go to my test.txt so that that is the file i've been writing to right so if i now open this here you can see that the new content has been added and the old one is being preserved so that is about appending files and now let's talk about reading from a file well to reading to read from a file it's almost straight forward what you need to do is just remove of stream and replace it to if stream so if stream is nothing but input file stream and how do you read from the console you do this right so you have variables called string s and you just read from the console like this and to read from a file just replace scene with file and that's going to allow you to read the file and now since i have a string here what is going to happen is it's going to read word by word now if i do c out s i'll be getting the first word so what is the first word over here in my file the first word is this right so i'll be getting this over here so if i run this i'll be getting this and now if i change this to a character if i do care and now if i run this i'll be getting the first characters which is t right now how do i read the whole file so basically what happens is that whenever you write a file whenever you do file.close what's going to happen is that the newly added content after that at the end of the file you have a special character which is not visible known as the end of the file character or the eof so eof is nothing but end of file and this is a character and while this is not reached we can just keep on looping so what we'll do is we'll run a loop and after every time we get a character we'll check whether it is the end of the file character or not once you reach the end of the file character you will just terminate the loop so how do i do that it's really simple i just do well let's just keep a string variable on the outside of the loop so that we don't create it every time so here what i'm going to do is while let me just put it on new line while file dot eof so while file.tf while file.tf has not been reached so for that i need to put not so while not file.erf while not file. has been reached what i can do is i'll just read the con word inside string and i'll just print out the string on a new line right straight forward now if i don't run this what i'll be getting is i'll be getting all of it so this this is some new content being added so all these other words in my file so that's how i get word by word if i need character by character it's almost the same thing i just change this to care run this again and i'll be getting every character in my file so this is how you read character by character and if you want to read line by line it's little bit different you don't read to the end of the file what you will do is you will just read the lines one by one and read till you reach the end of the file so what you do is i'll just show you it's just string s and here what i do is get line from the file inside s and while you can get the line if you don't get the line it's going to return false if you can get the line it's going to return true and i don't need this operator too so i'll just remove that and now if i run this i'll be getting the lines so this this is some new content added and then a new line that's because of this one right so here you can see it's just reading line by line so if i want to stop it somewhere so basically what this does is it's it's called a delimiter so what it does is you you have a line right so you have this line and you have this line how is it stored in the memory you have this special character which you know about right this is the slash n so this is how it's going to be stored so this when this character is reached it will consider this whole sequence as a new line but what if you want to consider this so if i just put this character in between i want to consider this one as in one line and this whole thing as another line so that can also be done using the delimiter so what you do is you just put a delimiter like i just put a space over here so that's going to be considered as the delimiter for stopping when uh and considering the whole sequence as a line basically the default is that slash n because that's what you consider a line right so whatever if if you write something like this and then you move to the next line so when you press enter that slash n is getting added so that is what you consider as a new light but basically if you want to consider something else as a new line this is how you do it and now if you just run this i will be getting every word that is because after every word i've given a space right so and this is the uh delimiter i've given and if i put something else which is not there so if i put this thing it is not there in my file right so that character is not there anywhere so the whole thing is going to be considered as a sequence now if i run this here you can see the whole thing has been considered as one single line right so that's how you can read from files you can write to files and it's all about the text file so you can do many operations like you can read you can count how many words are there or what you can do is you can read the files and see if some data is getting stored over there or some specific word is appearing in that file or not so all these things you can do let's quickly write a small program to do that what you can do is i'll just say of stream file file dot close never forget these two things when you open a file you need to close it and let's say we'll just say let's see out enter your name and i'll get a name here so string name c name so this is just like i'm just showing you how you can use the files this is just a simple example and here i will do another thing like see how enter your page and i'll just say in age and now what i'll do is i have already opened the file right so let me just move this down here i don't want to put this file in the memory right now so once i have all this information entered i'll open the file i will write this information to the file how do i write it i'll just say a name and a name new line it's just like this yet operator right um i hope that you're getting the similarity over here and then it's h and then the age that's it i'll just do file.close and well i did not give any name to the file so let's say details.t i'll use this name i'll build and run this i'll be getting what is your name it's tony you it's your age and say okay it's too much let's say 12 and i enter that i run that program now i go here i have this details.txt i open that and here i have my details so whenever i need this information again i will be having that information and i can just read from this well basically for these kinds of information this these are nothing but details right so you have uh name 208 stuff and something like that so you you can maintain a table like that so will that kind of stuff that this is just to store text data this is just to store ascii data there is actually another way another a better way to uh you know store information like this it's it's nothing like sql if you're familiar with sql sql is nothing but a database language but for now what we can do is we have something called binary files so what you can do is you have something called that files where you can write classes now why do we need to write a class well all these things if you want you can just create a class and then you can assign particular variables for that once you have a object of that class you can directly write that object inside the dot that file and you can access them this uh details thing that's how people do it because it's really easy to access in that way because once you have this one line you need to strip that line you need to you know get that last character and all these things so that kind of things won't be necessary right so that is the only reason people use dot dad files because once you have a class once you read it inside a class you can just do well it's just like you have something like person p and once i read this inside this what i'll do is i'll just do p dot name i'll get the name p dot h i'll get the age and something like that so p dot h will give me the h so that's how people do it and we'll see how to do that in the next video and till then happy coding