hey everyone in the last video we discussed about some high game modules in brief now it's time we put that to use we would try displaying some text on pi game window let's get started i have initialized pi game as usual set up the screen and then is the new part i have used font module by pie game we have used cis font then which sticks in attributes like the font style size of font mentioning about the italics and bowls it is an option here if you are mentioning about italics and bolds but you have to mention the font style and the size of font otherwise you will get an error from cispond if you do not mention about the talix and bolts they are false by default we have a lot of system fonts let's take a look at them if you run this piece of code by game.fot.getfons you will get a list of all the fonts that are available in the system here it is you can use any of these fonts to design your text firstly i'll just walk you through the basic code after that we'll add some more functionalities so after creating a font object i declared a text variable which would create a new surface with given text rendered on it i hope you get this it would create a new surface with given text rendered on it then we call the direct class object to see the text on pikmin window last time we discussed direct class in detail i hope you get understand what is happening over here then is the infinite loop you will fill the screen with some random color use split from surface class to get the text and text checked on the window that is to draw text on extract okay after that we have event in pygame dot events which updates and runs given command until we quit okay so let's run this and see what we get so on running this code this is what we get we have the text at the extreme left of the screen but what if i need it in the center of the screen so let me change a little bit of it and see if i can bring the text in the center for that we have text rect dot center so i brought the rectangle surface to the center by using this method and i have specified the coordinates as the center of the screen i decide the size of the screen is 500 by 500 so i've divided it by 2 and we get to the center let's run this now and see what we get voila we have the text at the center now let's see what else we can do we can set a caption to the i game window we use pygame.display.setcaption we can also underline the text that we have by font.set underscore underline as true and let's run it and see what we get we have an underlying text and we have the caption pytheme text cool this was one program now let's try and move this text along the different axis on the window for that i have written a little code first i have initialized pi game then the screen with size 500 comma 500 then i have declared the font object with style times no new roman and size 30 variable letter is used to render the so created font object then i have declared a variable i that decides the speed of the text how fast the text changes its coordinates please note that right now i am moving the word long xaxis only so entering the game loop now there is a condition if i is greater than 500 that is the length of the screen we see that the length of the screen is 500 when i is greater than 500 i is equal to 0 we make i equal to 0 this means once the text has traversed complete length of the screen we want to see it appearing from left again and the time gap gap between this action is of five milliseconds i have done this using the time module of my game so pygame.time.weight 500 gives a gap of five milliseconds between these two actions then comes the win.fill so i have colored the background white with fill now comes the tricky part rather not tricky part but you would need to visualize it a little so here in blit we have used the font object and wrecked class object always but this time i have taken no rect class object as you can see but i have given coordinates i comma 0 which shows the origin because i is equal to 0 for right now so that gives me the origin the extreme left upper corner of the screen once this runs i is increased by 80. so you must infer that larger i gives more speed as this is what is giving the difference between two consecutive spots of the text okay please try to visualize this and again there is a weight of five milliseconds after we run this event loop uh between the appearance of the text at two consecutive positions there is a weight of five milliseconds i have given a weight otherwise we won't be able to visualize the text moving it would move in a flash so let's see this running uh let's see what we get and how this text moves across the screen along x axis so now let's run this and see how the text moves along the xaxis yes so this is how it moves along the xaxis we can also move it along the yaxis for that i need to interchange these two coordinates i'd make it 0 comma i now so it would move along the left side of the screen so let's run it and see if it moves along the left side so yeah it does run okay cool you can even think about how we can make this text move along the bottom of the screen or along the right side of the screen for that you might need to change the 0 to something else maybe the size of the screen the y or the x axis so think about it and this is pretty much it for this video thank you