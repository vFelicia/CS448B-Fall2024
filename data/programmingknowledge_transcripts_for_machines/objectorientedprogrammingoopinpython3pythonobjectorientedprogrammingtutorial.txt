now before starting our object oriented programming journey in Python let's discuss about what is the difference between the procedural programming and the objectoriented programming so you will have the better idea why we use objectoriented programming now traditional programming languages such as C or Pascal were called procedural programming languages or structural programming languages where the basic unit was functions now programming in these type of procedural languages involves choosing a data structure and then designing the algorithm and then translating that algorithm into a code so if this sounds little bit confusing let me try to explain it with an example so let's say you have been given a task to create a program for a passenger who wants to travel from one place to the another place using a cab service so if we think from the point of view of procedural programming what we do in the procedural programming is we create some global data structure which holds the data so here for example we create some kind of data structure which can hold the data for example in case of a cab service which cab service is it or which type of cab is it and at what location this cab is standing all these kind of data we store in a desta structure in our global environment now after storing the data we design an algorithm so let's see what kind of algorithm we can develop in the procedural programming language for our cab booking service so this is a pseudocode which I have written so first of all the passenger will open the app from which he can book a cab and then he will book cab and once the cab is booked he will wait for the cab and then once cab arrives he will sit in the cab and then he will reach to his or her destination and at the end he will pay the fare of the cab and this is the pseudocode of that algorithm and then we will translate this algorithm into actual code in procedural programming language now in these type of procedural programming languages we construct rate on creating the functions and the major drawback of using these functions is that data and operations on the data are separated that means we need a methodology to send this data to these functions so here we need to send this data which we have saved globally into these functions and these functions take this data either as argument or as a global variable and then perform some actions on this data and give you some result now these kind of functions are passive what do I mean by passive here that is these kind of function cannot hold any information inside them so once you give the data they are able to give you the result back after performing some operations but they cannot save or hold the state or the data so that if you want to use that data in some other place in your code then it will be very difficult using these kind of functions which you use in procedural programming now let's look at the objectoriented approach of doing things so in objectoriented programming languages like C++ or Java or Python the basic unit is class now if we take the same example of a passenger who wants to travel from one place to another using a cab service using objectoriented programming thinking which depends on on the creation of object we can create different kind of object for example for a cab we can create a class called cab and then we can create a class for cab driver and the third class we can create for a passenger okay so a class you can create for any reallife object it can be a car it can be a motorbike it can be a book or employee or a person so objectoriented programming allows us to create object so first of all what is a class so a class refers to a blueprint in which we can have data and methods okay so for example for our cab class what attributes this cab class can have for example a cab service which cab service we want to take what is the make of the cab it is it a Toyota or a BMW or a fox wagon cab at which location this cab is right now what is the number plate of that cab so the passenger can recognize this cab so all these things which I have written here are called data because they can hold some kind of data number plate has number plate data location have geolocation data may have the make data cap service can have data like uber or any other cab service and the other thing which at last can have are called method so earlier we have seen that we can create functions and when these functions you use inside a class they are called method ok so functions inside a class are called method now the data inside this object or class is called attributes or the member variables which can hold some data and using this class we can create object of the cab class which means we can create different or object using a same class and how to create object using classes we will see in the next video in the reallife example so don't worry if you don't understand how these things works I will give you a reallife example so you will be able to understand in a better way now what is an object an object is a software unit that combines data and methods okay so we have this data here and then we have the methods inside the class and object is able to combine both of them which is data with the methods now these object for example a cab object and the passenger object can exchange the data between them also so data is interchangeable between for example the passenger object and a cab object so let's rewind once again what we have learned about objectoriented programming so the basic unit in objectoriented programming is a class and at last refers to a blueprint which can have the data and methods now using a class we can create objects and what is an object object is an instance of a class and each object can have its own data and method and an object is able to store the state of some kind so at which location this cab is right now so this is a state and an object is able to store at that state now in procedural programming if you remember there is no relation between the data and the method right we need to provide the data to the method which are separate entities in the procedural programming language now these data members are called attributes or member variables and these functions which you define inside a class are called methods and what are some of the key differences between procedural programming language and objectoriented programming language the first is the unit in procedural programming language is function and on the other hand in objectoriented programming the unit is class the second is the procedural programming concentrate on creating functions while objectoriented programming starts from isolating classes and then they can have data and methods inside it in procedural programming language the data and the functions are separate and in objectoriented programming language data and methods are not separate they are at the part of a single object of Atlas now if all this seems to be little confusing to you don't worry you are not alone and I will try to solve this confusion in the next video in which I will tell you how to create the classes and how to use classes in Python in this video I'm going to show you how you can create your first class in Python now if you haven't seen my last video in which I have discussed what is objectoriented programming and what are classes I will highly recommend you to watch that video because this will be a continuation of that video so let's create a class in Python so for that I will create a new project so let's create a new project in PyCharm so just click on file here and then click on new project and then the project name I'm going to give here is oops and then I will just click on create and I will choose this option which says open in current window and also this option which is added to currently open the project which is going to create this project in this window itself which is already open so now you can see we have a empty project here and inside this project let's create a Python file so right click on the project and then new and then we are going to create a new file and let's create a class called car so I'm going to name the file name as car because we are going to create the car class now in order to create a class in Python you use a keyword class and then you give the name to your class so the class name in our case is car and then you give the schoolin and for example I write here a keyword called pass now when you write this keyword after the declaration of a class this means that it is a empty class you can also use this pass keyword to create an empty method so this keyword pass is used to create an empty class or an empty method now here after the class declaration let's see how we can create an instance of a class so it's really easy to create an instance of a class so let's create a first object and I'm going to name it as Ford which is a car brand and then you use your car class name and use these parentheses here okay so this here Ford is an object or you can also say it's an instance of that last car in a similar way we can create multiple objects for example Honda is another car brand and you can create the Honda object using this class car once again you can create a new object for example Audie and then you can once again use this car class to create this object so what we have done till now we have created three object from that last car now in the previous video I told you that you can associate some data with your object so let's associate some data so for example Ford we can associate attribute called speed right so we can assign the speed for example 200 here for a Honda we can assign speed let's say 220 and for Adi we can assign the speed let's say 250 so speed here is called the attribute and whenever you create an empty class using this pass keyword you can add these attributes on the fly so you can see we have added these attribute after the Declaration of the class and after the creation of the objects let's add some more attribute to these instances or the object so a car can have the color so I'm going to just write color and the food has let's say the red color and let me just copy and paste here and let's say the Honda have the blue color and we have the Adi of black color so once again color is an attribute here if you want to print these attribute you can use this print method and then for example we want to print the speed of food and the color of Ford then we can do it like this and let's run the code so in order to run this code first of all when you create a new project and a new python file you need to right click on this file and then click on run the file name whatever is your file name my file name was car so you can see now the result is printed here first is the speed and second is the color of an instance ford similarly you can print the color and speed of honda and audi objects also now if you want to change some attribute it's also possible so let's say I want to change the speed of Ford object so I'm going to use 4 dot speed once again and this time I want to assign 300 speed to this attribute let's say we also want to change the color of the food objects so I'm going to just use for dot color and this time I want to use the color blue here and let's once again we will try to print the color and speed of the object food and now you can see this result so before the speed was 200 and the new speed is 300 for the object food and before the color was red and the new color is blue for this object for now if you have followed the last video this speed and color is the data so speed and color are the variables which holds some data inside them but still we haven't added any behavior or methods to our class car and that we will do in the next video now let's create a new class because understanding classes in any language is difficult so let me give you another example so this time I'm going to create a new Python class and I'm going to name this python class as a rectangle and then press ok which is going to create this class and to create a class you already know you use the keyword and the name of the class and then the colon and we will also make this class an empty class using this path keyboard and in order to create an instance I'm going to just write correct one which is the first object using the rectangle class and then I'm going to create correct to which is the second object using this rectangle class and now what are the attributes which we can relate to the rectangle a rectangle have a width and the height so let's add the herebut and height so let me use the first object let's say height is 24 the rectangle 1 and then we are going to use the second object and once again we are going to add the height for the second rectangle let's say the height of second rectangle is 30 similarly we can add the width to the rectangle so width is equal to let's say it's 40 and right to object have the width let's say 10 so what we have done here we have created a rectangle class and then we have created two instances of the rectangle class correct one and rag2 which are also called objects and then we have added some attributes to our objects which are height and width now let's say you want to calculate the area of these two rectangles I can use the print method and then what is the area of the rectangle it's the multiplication of the height and the width right so I can use this rectangle one object and then I can call the height and width of this object and this will give me the area of the rectangle one using this multiplication operator similarly I will do the same for the object to here and let's run the code and if you remember what we need to do if we create a new Python file we need to rightclick on the file and then click on run right so once the file is running you can choose from here which file you want to run but at least once you need to rightclick on the file and just click on run whatever file name you have so you can see the area of rectangle 1 is 800 and the area of rectangle 2 is 300 so this is how you can create a very simple class in Python in the next video I'm going to show you how to add behaviors to your class that means to add methods to your class and how to use this method to manipulate this data which we have provided here in the form of attributes in this video I'm going to show you how to use init method in Python and how to use a keyword called self in Python so I will continue with the class which I have created in the last video and this was the class which we have created and we have used this special keyword passed there and pass we were using to create an empty class now I'm going to remove this pass and I'm going to add a method called init here so I'm going to just write def and then underscore underscore in it and then press enter and you can see this init method is created here so this is like a normal method with double underscore in front and back of this init keyword and you will also see the self keyword is already added as the first argument of this method now this init method serves as a constructor for the class so usually it is used to initialize some attributes or some functions because this is the first method which will be called when you create an instance of a class so here we are creating an instance of a class and this init method will be the first method which will be called when this object or instance will be created so let's check what I am saying so let's say I want to print inside this init method that the underscore underscore init underscore underscore is called and let me run this code so I will change this to car and then run this code and now when I see this result you will see this line is called three times because we have created three instance from the same class okay so every time this instance is created this print is called and that's why this line is printed three times and everything else will be printed after that whatever we were printing for example speed or color of the car will be printed after that now one important thing to notice here is I said in it serves as a constructor it's not a constructor although it would be tempting to call this init method as a constructor actually it's not a constructor but it behaves like a constructor because in it is the closest thing we are going to get in Python to a constructor because it is the first method which is called whenever an instance is created now if you are familiar with other objectoriented programming languages like Java and C++ there is a destructor also in those kind of languages with classes now Python doesn't have any destructor because python has an automatic garbage collections so you don't need a destructor in Python because python will take care of anything which should be taken care of now as I said usually init method is used to initialize something so instead of initializing the value of speed and initializing the value of color let me just comment this code first of all so I'm going to select whatever I want to comment and then I can press control forward slash to comment all the line you can also go to code and then use this option which says comment with line comment and you can see the shortcut for that ctrl + /o K so this is going to comment your lines of code and now I want to use the speed as the initialization value so after the self keyword like give the next parameter which is speed here and then the third parameter is the color here and now to print the value of speed and color I can use once again print and then first of all I'm going to print the speed and then I'm going to print the color attribute and as soon as you do this and when you try to run this program it will give you an error so let me run the program and it will give me the error it says in it missing two required positional argument which is speed and color okay so once you create an init method and provide any arguments other than self self is automatically provided by Python whenever you create an instance of a class but other than self when you write for example speed and color arguments here you need to provide those argument at the initialization of your class so here first we will give the speed inside these parentheses for example 200 and then the color for example red here okay same we need to do for the other two instantiation of the car class so let me do it for the second instance and also for the third instance and now let's run the code once again and let's see what happens so now you can see everything works fine and no error is given to us and you will also see because this print is called first you can see the speed is printed first and then the color and then this line is printed after that and that means we will get the speed color and this line three times for every instance with different values whatever values you have provided for the instantiation of your car class now usually you provide these arguments because you want to initialize the value of speed so let's try to access the value of the ford object speed and color so let me just uncomment this code and let's run this code and it will give us an error you can see this says that car object has no attribute called speed right so what is the error because we have provided these attribute speed and color but we haven't assigned these values to any attribute inside this car class earlier what we have done is we have assigned the speed value to a speed attribute and the color value to the color attribute but we have already commented those codes so how can we assign the speed and color to the car object so it turns out that you can use the self keyword and then using the self keyword you can assign the value to the current object so self is essentially the current object okay it's similar to using this in C++ or Java if you are familiar with those two languages so you use self dot and then the name of the attribute for example speed in our case is equal to whatever argument you provide for speed so we have provided the same argument which is speed is itself once again I can use self to set the value of color here so self dot color is equal to color let me remove this semicolon because it's not required and now when I run this code you will see that there is no error now so because we have now used the self keyboard to set the attributes of speed and color so we can easily access the values of the speed and color using any object of the car class so let me once again minimize this so now let's talk about the self keyword here so whenever you create a class the first argument of everyman third you need to provide this keyword self now it's not necessary to provide this same keyword which is self but it's a convention to write this self as the first parameter the first parameter can be for example ABC it doesn't matter but you need to use this ABC here also as self and it will be totally fine but it's a convention that we use the self keyword in order to indicate that this is the current object so every method you will create you need to give this self keyword as the first argument of your method inside at last now you may also observe that here when I am initializing this class instance I'm not providing any self keyword so even though in the init method I have provided three arguments I am only providing two arguments here so it turns out that you don't need to provide the first argument which is self it will be automatically be provided to your class so you just need to give the next argument whatever argument you give after the self so we have given speed and color after the self argument so we just need to provide those arguments after whatever you use after this keyword called the self so let's do the same thing with our second class which is the rectangle class and here also we have created this empty class so let's remove this pass keyword and instead of this pass keyword we will use this init method which is def underscore underscore init underscore underscore and here after the self we will provide the height as the second argument and the width as the third argument okay and then we are going to initialize the attributes height and width using this self keyword so self dot height is equal to height self dot width is equal to width okay so this is how you can initialize your attribute using this init method and now when you do this you don't need to initialize these values like this you can directly initialize this height and width using these parentheses let me provide these values let's say 20 and 60 for the first rectangle and let's say 50 and 40 for the second rectangle and when we run this code let me just change the file here and then run the code and you will see it will print the area once again here so this init method is used to initialize your attributes or whatever you want to initialize at the start of your class you will do all those initializations inside this init method in the last video we have seen how to use init method and self keyword in Python in this video also we will discuss more about init method and the self keyword so let's get started so here I have a very simple class called hello and in this class I have a method called init and I'm just instantiating this class and creating an object out of this hello class now the first question which may arise is what if I don't want to use this self keyword you can see directly that there is a red squiggly line appears here which means an error and this we can also see when we run the program so when we run the program it's going to give us this error which says in it takes zero arguments but given one now you may ask why it's saying that we have given one argument to the initialization of this hello class so as I said in the last video that self is automatically passed when you initialize a class and that's why it says that one argument is given but in it takes zero argument because here we haven't given any argument and inside these parentheses so self is absolutely important so you need to give the self now the second question you may ask is can I create multiple in it method inside a class so let's see if it's possible or not so here I'm going to give this pass keyword which means that this init method is an empty method and let me create a second init method and this time I want to add one more parameter here let's say name okay so we have provided two init methods here and let's see what happens so this is the instantiation of class where I haven't given any argument to this instantiation so I'm going to run the program and what it says it says init missing one required positional argument which is named so it turns out that it's not possible to provide multiple init methods in your Python class if you provide multiple init method in your Python class the init method which you define at last will be considered as the main init method and other will be overwritten okay so whatever init method you define at last that signature of init method will be valid and all the other init method which you will create will be overwritten by the last init method okay so let's provide the argument name here so I'm going to just provide one argument here and then run this code and it works perfectly fine okay let me just reverse this order so instead of using this init at the top I will use the init which doesn't take any parameter at the bottom now okay and we provided this argument and let's run the code and now once again we get the error which says in it takes one a positional argument but poober provided so one positional argument means that this in it only takes the self argument and nothing else but here self is provided automatically but we are providing an extra parameter here which is not required and that means this init which we have defined later is valid and this previous init is not valid so always remember it's not allowed to use multiple init method in the Python class but if you do this the last init method will be a valid init method and all the other init method will be the invalid init method now one more question you may ask here what if I want to create both kind of instances one which takes no argument here and other which takes one argument or multiple arguments here so the answer is in my previous video in which I have shown you how to provide default value to your arguments so let's say I provide a default value to my argument here now I will create two instances of the same class one takes no argument and other takes one argument and when I run this code no error appears here okay so if you want to create an init method with multiple parameters you can either use this default value for your init method parameters or what you can do here is you can use this parameter which takes a tuple so in the previous video we have seen that we can provide an argument with Asterix in front of it and this means that we can provide multiple parameters to our method here and when we run the code it's also valid we can also provide multiple parameters here and it will also be totally valid so I'm going to run the program once again and you can see it's totally valid if you want to provide multiple parameters to your init method you can use this kind of notation or you can provide the default value to your parameter or the last thing you can use is you can use for example this type of argument which takes the keyword so kW args here okay and this also we have seen when ever you use this kind of notation that means you want to provide the dictionary right key value pair so let me provide some kind of key value pair let's say name is equal to some kind of name here and then let me run the code and it's totally valid it doesn't give us any error so even though multiple init methods are not allowed in Python you can use these type of notations in order to give variable length argument in your init method now let me just remove all the parameters from here and this instantiation from here also and let's take the next question so let's say I want to remove this pass keyword from here and here I want to initialize some values so self dot name is equal to let's say we will provide some name so I'm going to provide argument called name and self dot name is equal to name here and then let's say self dot age here and we provide some value which is not taken from the argument but we provide some static value here is it allowed yes it's totally allowed right so if you want to provide some default value for your attribute you can absolutely provide that without even passing it as an argument so it's not necessary that all the attribute values you need to provide from this argument list you can provide any default or static value here which is not coming as an argument so I hope that clarifies some more details about this init method in this video we will learn how to use encapsulation in Python and capsulation is one of the most important principle in objectoriented programming so let's get started I will be using this car class and the rectangle class which we have been using in the previous videos also and let me remove these print statements because we don't want them right now now let's say we want to change the value of speed so if you want to change the value of speed you can simply take your object for example for dot your attribute name for example speed and then you can directly change it for example 300 and when I run the program it's going to print the new speed which is 300 initially we have set the speed to 200 in here we can also put let's say the speed as string which is very stupid but will it work it works you can see here and this can break the function in which the speed is used so therefore it is very important that we protect our data and only give the access to our data to the other users so encapsulation is particularly important when you want to give your code to some other people because they might want to change your code so let's see how we can encapsulate our code so to encapsulate our code we create functions so let's create our first function which is to set the value of speed so I'm going to just say set underscore speed and inside the parentheses it's going to take self as the first argument which is the default and second is the value of speed so so I can say value here right and then once we have the value of speed we can just call self dot speed is equal to value similarly we can create a get method for the speed so right now we have created the set method to set the speed and now we are going to create a get method to get the speed and in order to get the speed we don't need to pass any argument we just need to return the speed which is already said so we can just write return and then self dot speed so we have created two functions set and get these are also called setter and getter for the attribute which is speed in our case so let's use these functions instead of this kind of setting of data so first of all I'm going to call this for object dot set speed method out of this object and then I'm going to pass the new speed using this set method now in order to get the speed I can write instead of this for dot speed I can just write the for dot get speed which is going to give me the speed of this ford object so I'm going to run the code and you can see it prints the speed which we have set using the set method but still will this protect your data let's see so I am going to once again try to use for dot speed and then I will try to set the new value of speed will it be a problem no so you can see when I try to get the speed that new speed is set and we want to prevent this kind of setting of data using this equals to symbol so we need to somehow make our attribute private now if you are familiar with other objectoriented programming languages like Java or C++ they use the keywords like public private or protected in order to mark their attributes or the member variables as the private or public or protected but python doesn't have any of these keywords so how we can make our data private so let me give you first of all an example so I am going to go to this class which is hello and Here I am going to set some values so first value is for example self dot a is equal to ten second value is self dot underscore B is equal to 20 and the third value is self dot underscore underscore C is equal to 30 so we have created three member variables in this hello class one is a second is underscore B and the C is with two underscores in front of it and let's try to access all these three values so I'm going to just use the print method and then the hello object dot a and similarly I will use the sprint to get the value of dot underscore B and also dot underscore underscore C now let's try to run this program and let's see what happens and you can see here the first value which is printed here is 10 which is the value inside the a variable so this code was executed successfully now we can see here that 20 is also printed that means this code is also executed successfully but at the time of underscore underscore C when we want to use this underscore underscore C outside the class it says hello object has no attribute called underscore underscore C and this is the point so underscore underscore you can use to make your attribute private okay so this is our convention there is no keywords like private in Python that's why python uses this kind of convention in which whenever you use double underscores it makes your data private when you use single underscore that also means that it's a private variable but this is only a convention nothing stops you to change the value of underscore B or accessing the value of underscore B okay so if you truly want to make your data private then use double underscore in front of your variable when you use single underscore that means it's a partially private variable and it's only a convention okay so let's go to our car class once again and now we know that we can add double underscore in front of our variable names so we have two variables here one is speed so let's add double List underscore in front of speed and also let's add double underscore in front of this color variable to make both of them private so I'm going to change this value of speed in getter and setter also and now let's try to access this value using this ford object which is underscore underscore speed now let's try to run our program so I'm going to change the file and then run our program and you will see that it's going to give us an error and this error says the car object has no attribute called color because this variable color is private now also you will observe that the value of the speed is 300 which is set by this set function even though we have set the speed again to 400 using this underscore underscore speed but this speed is not changed right so we cannot change the speed using this underscore underscore variable because now it's a private variable and that means we cannot change the value using this variable we need to use this set function in order to change the value of the speed also if you want to use this underscore underscore color here and let's run the code this will also give you an error because this underscore underscore color is private so either you can remove this code or you can create the setter and getter method for the color also so let's create the setter and getter method for the color and now we can access the value of color using the get color method right so instead of this get speed we can just write for dot get color and it's going to give us the value of color and now you can see that there is no error and the speed here is 300 which we have set using this set speed method and color is red which is the color we have given using this argument in the constructor and this type of restricting your data access using functions is called encapsulation let's do the same thing with our rectangle class also and let's create the setter and getter method inside the rectangle class so you already know we can use this define and then we can first of all set for example set the height first of all and then we can give the value of height here and then self dot height is equal to height right and don't forget you need to give double underscore in front of your attributes in order to make them private so I'm going to do just that and let's create the get height method also so now we have created the setter and getter for the height and let's do the same for the width also so now you have made the height and width as private and we have created setter and getter for the height and weight and now in order to calculate the area we can define one more method here which is the area method so let's create the area method here and this area method is not going to take any argument we are just going to return the multiplication of the height so self dot height multiplied by self dot underscore underscore width okay which will give us the area of this rectangle and we can call this area method instead of using this kind of notation so wrecked one dot area and rect two dot area also let's run the code by changing the file name here and run this code and you can see the area is printed now so this is how you can use an capsulation in python to hide your data in the last video we have seen how to use encapsulation in python and we have also seen how we can declare private member variables in Python to declare a private member variable we use double underscore in front of your variable name and this variable becomes private but the question is what exactly is a private member variable so a private member variable is private to the class that means you can use this private member variable inside the class but as soon as you use it or access it outside the class it will give you an error so you cannot access a private member variable outside a class and the example we have already seen so here you can see I try to access this private member variable outside the class and when I run the code it says that there is no underscore underscore C attribute for this hollow object why because when you create an instance and if the member variable is private this private member variable is invisible to your object so you cannot access the private member variable outside the class but can be used this private member variable inside the class let's see so I'm going to declare one more method here and I'm going to name it as public underscore method and this doesn't take any argument but what we have learned about the methods in a class that even though you don't pass any argument to the method you have to provide at least one argument which is the self argument and what is self self is the current object so let me just print something here quickly for example public here so can we use this private member variable inside this method let's see so I'm going to just write self dot underscore underscore C and then I'm going to run this code and let me comment this line because this was giving us an error and instead we can use this public method so I can use an instance of hello which is hello dot public method and let's run the code now and you can see there is no error that means you can use your private member variables inside the class or any method of ductless now the other question is what is a public member variable like a here so a is a public member variable because it doesn't contain any underscore underscore in front of it and that means you can use this public member variable inside the class as well as outside the class so if I want to use this public member variable inside the class also I can just use self dot a and then run the code and it's totally fine it doesn't give us any error let's print the value of for those two member variables and once again run the code and it will print the value of a and C and then this message which we are printing here which is public here now the next question is how we can define a private method in that class so let's see how we can define a private method you already know most probably which is by using double underscore in front of your method name so for example underscore underscore private underscore method and then I'm going to just print something inside this method let's say private so this is a private method and how you can define a private method using these double underscore in front of the name of your private method and the restriction will be the same on the private methods also so let's try to access this private method outside the class so I have this hello instance and when I press dot here you will see there is no suggestion for this private method because PI Chum already know that this is a private method so it doesn't show this method in the suggestion when you use this object outside the class but let's try the brute force and let's try to use this method outside the class and when I run this code you will see once again you will get an error which says hello object has no attribute underscore underscore private method so private methods also you cannot use outside in the class but inside the class absolutely you can use your private methods so how to use your private methods inside that lass so you can use your private method inside the class using once again a self keyword so you write self dot and then your method name for example private method and that's how you can call your private method inside the class using cells so any method you want to call inside the class you do it once again using the self keyword as you do with your member variable and once again when I run the code now it prints private using this statement and this statement is executed when we call this private method from here so I hope this video will clarify some more doubts about the private member variables and private methods in Python in this video we will talk about Python inheritance so first of all what is inheritance in Python so classes in Python can be extended creating new classes which retains the characteristics of a base class and this process is known as inheritance now in simple words the idea behind the inheritance is that a new class can borrow the behaviors and methods from the another class now the inheritance involves two types of classes one is a superclass and other is a subclass now the subclass inherit members of the superclass on top of which it can add its own members for example any other member methods or variables so here subclass is the one who is doing the borrowing of the members and the superclass is one from which subclasses borrows these kind of member methods and variables now if this inheritance sounds to be little bit confusing to you let me give you an example so I said in inheritance there are two type of classes one is a superclass and other is a subclass now in this example I have taken polygons as a superclass and two classes rectangle and triangle as the subclasses now if you see carefully what is the relationship between rectangle and polygon and triangle and polygon so rectangle is a polygon right and the triangle is also a polygon that means the rectangle can inherit some properties from the polygon class also triangle can inherit some properties from the polygon class and the relationship between the superclass and the subclass is defined by a relationship called is our relationship so rectangle is a polygon and triangle is a polygon also that means that rectangle and triangle can inherit from the polygon class so in inheritance the subclasses have is our relationship with the super classes so let me give you one more example so as a superclass you can take an animal class and then as subclasses you can create a dog class cat class red class because all of them are animals so dog is an animal cat is an animal rat is an animal so always remember when you use inheritance there is a is our relationship between superclass and the subclass now let's take our reallife example and let me try to explain you this concept with some code so I'm going to create a new project in my PyCharm IDE and this I'm going to name it as inheritance and I will choose this option open in current bed door and also this option which says add to the current opened project which is going to create a project in the same window so now this project is created so I'm going to go inside this project and I'm going to create a new Python file here and I'm going to name this file as polygon because we are going to create a polygon class and inside this polygon dot py file let's first create a class called polygon and inside this polygon class what are the attributes which we want to add here so rectangle and triangle what are the common things which they both have they both have the width and the height so we are going to first of all create a variable called width and we will initialize it by a value none the non keyword is used whenever you want to assign nothing to your variables right in the same way I'm going to use height and I'm going to assign none to that also now what I'm going to do is I'm going to create a method here so let me define a method using d EF and I'm going to use this method to set the values of width and height and this method is going to take two argument one is the width and the other is the height right now if you remember in the last video I have shown you how to make your variable private so you use double underscore in front of your variables to make them private so I'm going to add this double underscore in front of width and height that means these two variables are private now using the set values method I am going to just set the values of the height and width so cells dot underscore underscore width is equal to width and self dot underscore underscore height is equal to height so this is the polygon class which we have created and it's a superclass in our case right and now let's define two subclasses one is a rectangle and other is a triangle so let's define other class called rectangle and inside this rectangle I'm going to define one method let's say this method is a area method and this area method is going to give us the area of the rectangle and what is the area of the rectangle the area of the rectangle is the multiplication of the width and the height similarly I'm going to define our triangle class also so let me define the triangle class here and let's say this triangle class also have this method which is area now what is the area of a triangle the area of the triangle is the multiplication of width and height divided by two so we are going to divide the multiplication of width and height by two this is the area of the triangle so now we have defined three different classes and we are saying that polygon is the superclass and rectangle and triangle is our subclasses now how we can inherit the properties of the super class which is polygon into our subclasses which is rectangle and triangle so in order to inherit from one class to another you use this parentheses and inside the parentheses you write the name of your super clasps and that means your rectangle is inheriting from the polygon class similarly when we write this parenthesis and the polygon class here that means triangle is inheriting from the polygon class now when a subclass inherits from a superclass the superclass member variables and methods are accessible also using the subclass also so let me give you an example so I'm going to create the instance of rectangle first of all so let me just write rectangle so this is the rectangle instance and let's create a triangle instance also and now once we have triangle and rectangle instance let's use this rectangle instance and when you write dot here you can see intelligence says that area is available for this object and set value is available for this object so when you use set value you can see we haven't defined the set value method inside the rectangle but because we are inheriting from the polygon class into a rectangle class all the members of the polygon class are available using the rectangle object also and what this method takes it takes the width and height so we are going to provide the width and let's say height 50 and 40 and once again we are going to use the triangle object and we use the set values and this time also let's say I'm going to provide the same values here and what does this set value method is doing it's just setting the values of width and height inside the polygon class now in order to calculate the area we can call the area method from the rectangle and the triangle class so let's just do that and I'm going to do this inside a print method and I'm going to just call the rectangle object dot area which doesn't take any argument and the same I'm going to do for the triangle object also so triangle dot area so what do you think will happen now so let's run the code and let's see what will happen so I'm going to right click on this file and I'm going to just choose run a polygon it's going to run the program and you will see it gives us an error and what is the error the rectangle object has no attribute rectangle underscore underscore width that means because this width and height are private member variables of the polygon class they are not accessible from the subclass which is the rectangle class and the triangle class so you cannot inherit the private members from the superclass into the subclass so what is the solution here so what we can do here is we can create the getter methods for the width and the height so I'm going to do exactly that so let's define a method called def get underscore width and it's going to take no argument and it's going to return the value of the width so using self we can access the value of underscore underscore width in the same way we can define a method called get underscore height here and it's also not going to take any argument but we are going to return the value of the height here so self thought underscore underscore high so now we have created the getter methods for the width and height and these getter methods are the public members why they are public because we haven't used the double underscore in front of these two methods and these two methods now we can use in place of these private member variables which we were trying to inherit in the subclass using the superclass so instead of underscore underscore width we can write self dot get width and also here instead of underscore underscore height we can use get height similarly we will do the same for the triangle class so get width and the get height dot get height now let's run the program again and let's see what happens and now when I run the code it gives me the area of rectangle using this print line statement and then it's going to give me the area of triangle which is exactly the half using this line of statement so let me once again minimize this and let's recap what we have learned so we have created a superclass and two subclasses superclasses polygons and subclasses our rectangle and triangle and in order to inherit from the superclass you just use parentheses and the name of your superclass and that means in our example rectangle is inheriting from the polygon class next what we have learned is all the public member variables or the methods are accessible from the subclass from the superclass so set value method and get value method is accessible because they are public methods but underscore underscore width and underscore underscore height are not accessible because they are the private member variables so you cannot inherit the private member variables into your subclasses now we have seen this example in which we have created two instance of the classes one is rectangle objects from the rectangle class and the other is triangle object from the triangle class and first of all we have used the set method which is coming from the polygon class it's not the part of the rectangle or the triangle class to set the values of width and height and then we have just called the area method from these two classes in order to give us the area so this set method is used to set the value so it has set the value of width and height and using this get method get width and get height this value is returned and this value is returned into the subclasses and then the multiplication of these two values gives us the area here and the multiplication of these values divided by two gives the area of the triangle here so this is how you can use inheritance in Python in this video we will discuss how to create modules in Python now in the previous videos I have already discussed briefly about builtin modules and how to import a builtin module you use an import keyword and then you use the name of the builtin module in Python builtin means this module is already present in Python so we can use these builtin module in order to perform some functionality so for example this math module helps us to perform some mathematical operations now first of all what is a module so it turns out that a module is nothing but a Python file now to prove my point let me just hover over this math module and just press control and then hover over it so right now I am pressing control and I'm hovering my mouse over this mat on the pycharm IDE and now I'm going to click it and when I click it you will see this module is nothing but a file right and inside this module we have a number of functions which we can use for example a COS function or a tan function or many different functions which we can use from this math module so a module is nothing but a Python file now if a module is nothing but a Python file why don't we create a module and it turns out that Python allows us to create our own modules so let's create our own modules and let me show you how you can create your own module and right now you can see in my project there is only one file which is hello dot py and it's empty right now now to create a module I'm going to just create a new file so right click and then new python file and this module I am going to it as my functions and then press okay and this file is created so now I have two files in my project one is my functions and other is hello dot py so let's say I want to create some functions inside this my functions dot py file so let's create some function I'm going to very quickly create some very basic functions which you already know in Python so so let's say I add function which returns the addition of two numbers and also let's create let's say multiply function so multiply and this is going to just give the product of two numbers so let's say this is our module and it has two functions now somehow I need to use these two functions from my functions dot py file into this hello dot py file now as you can see these two files are in the same directory right so I can import this my functions file using import and then the name of the file which is my functions and that's it so in order to import a module you just write a keyword called import and then you just write the name of the file without the extension py okay so you don't need to provide any extension here and then I can use this function so let's say I want to print my function which is the file name so whatever file name you give here you need to use the file name here dot you will see all the functions in the file are now visible in the other file which is hallo dot py so let's use this add function and I'm going to just give two parameters here and also let's use the multiply function from my functions files so the file name and the method name or the function name and let's give two parameters here also and that's it so it's that simple to create your own modules and import them in to other files in Python now when I run this program is going to give me the addition and the product of these two argument which I have provided here now let's say your my functions file is in some other directory so let me create a directory so I'm going to right click here and then I'm going to create a directory and I'm going to name it as dir and then click OK and now I'm going to move this my functions dot py file into the new directory so I'm going to just right click and cut from here this file and I'm going to just paste this file into the dir directory ok so let me just click OK here and as soon as I do this you will see here pycharm is intelligent enough to refactor this code and now it has given us the correct import ok so if this my functions file is in some directory then you use this type of notation so you write from and then your directory name and then import keyword and then your file name so you can see this is the directory name and this is the file name so I use from directory name import file name and when I run the code once again it's going to give me the same answer now there is one more way of writing the same notation and that is using the import so use import keyword and then write the name of your directory dot the name of your file so directory dot the file name and then you use this name in place of your my function name ok and once again when you run the code it runs fine now sometimes you might feel that this is a long name and Python have the solution for it also so it turns out that you can rename your file using a keyword called as so after the import so import directory name dot file name as and then you can provide your name for example my functions I will just name it as MF okay and now I can use this MF name instead of this big name and this will also work fine so either you can import from your file which is inside the directory using this notation or you can use this notation you can also write as in front of this notation also so from directory name import file name as whatever name you want to give here and this you can use to call your function using this dot notation now this was the easy stuff and I have just written here the two functions and then imported these two functions into the other file but what if if I have multiple classes I haven't shown you how to import files which have classes in them so let's see how to import the Python files which have classes inside them so I'm going to close these two files and in the last video I have shown you how to use inheritance in Python and we have created this class polygon and two other classes which is triangle and the rectangle class and this might be right now the perfect candidate to import into some other file so I'm going to create two more file one is the rectangle file so I'm going to just right click and create a Python file and I'm going to name it as rectangle and I'm going to create one more file with the name of triangle so rightclick new Python file and the name is triangle dot py and let me create the fourth file which I'm going to name it as main and this will be our main file in which we will import all these classes so in my polygons class I will just leave this polygons class and I will just transfer this rectangle class into the rectangle dot py file and this triangle class into triangle dot py file and also this was the instantiation of the rectangle and triangle class which we have done so I will transfer this code into our main dot py file okay so now we have a polygon dot py file in which we have the polygon class and then we have the rectangle class inside rectangle dot py and also we have the triangle class into the triangle dot py file and rest of the code we have inside the main dot py now when you go to the rectangle dot py you will see that it's inheriting from the polygon class that means we need to import polygon class into the rectangle dot py file so how to import it you can use from and then the file name which is polygon and then use import keyword and use the name of the class which is polygon and you will see that this error is gone and same we will do inside the triangle dot py file in order to import the polygon class into that triangle dot py file so this is the file name so from file name import the class name now when I go to the polygon class we don't need to import anything here because it's a superclass and there is no import needed here let's go to the main dot py file and here you will see red squiggly line under rectangle and triangle class because we haven't imported this triangle dot py and the rectangle dot py into our main dot python file so the procedure is same from your file name which is first of all rectangle import the name of the class which is rectangular same we will do for the triangle class so from the triangle file named triangle dot py and then import and then the name of the triangle class and you will see as soon as you do this the error is gone so now there is no red squiggly line under any of the code so now let's run the code so I'm going to just go to the main dot py file and I'm going to right click on this main dot py file and I'm going to just click on run mean which is going to run the program and it's going to print the result which is the area of rectangle and the area of the triangle so in this way you can import the py file which have classes inside them so this is how you create your own modules in python and import them into other Python files in this video we will talk about multiple inheritance in Python so first of all what is multiple inheritance so the ability of a class to inherit from more than one class is called multiple inheritance and in Python a class can inherit from more than one class so let's see an example which shows us how to inherit from multiple classes now I will be using this example which I have already shown you in the video where I have shown you inheritance in Python so there is a class called polygon which is a superclass and the other two classes are triangle class and the rectangle class which are the subclasses and these two classes are inheriting from the polygon class and I have also one more Python file which is main dot py and in this main dot py just importing these two rectangle and triangle class and creating an instance out of them and then setting the value of width and height and then we are printing the area of the rectangle and a triangle so if you haven't seen the last two videos just watch those videos because I will be using the same code in order to show you how to use multiple inheritance so let's get started so what I'm going to do is I'm going to create a new python file here and I'm going to name my file as a shape and I'm going to use this shape dot py to create a class called shape so let me create a class quickly and I'm going to name it as shape and this method I'm going to define a private variable called color and I'm going to initialize it with the value none and then I'm going to define the setter and getter for this color attribute so let's define those so now we have defined the setter and getter for this color attribute now if you remember what I told you about inheritance and that is whenever you want to do inheritance between a superclass and the subclass there is a is our relationship between the subclass and the superclass so rectangle is a shape and triangle is also a shape so that means we can also use this shaped lass as the super class in rectangle and the triangle classes so let's use the shape class into the rectangle and triangle class as the superclass so first of all I'm going to import this shape class from the shape file so let's import this and same I will do in the triangle class also and now how to inherit from multiple classes into our subclasses so we have already inherited from in the polygon class and in order to add one more class here you just need a comma separator and the name of your class so this is how you inherit from multiple classes you just use the parentheses and then the name of your classes separated by the comma that means the triangle class is inheriting from the polygon class as well as the shape class the same we will do in the rectangle class so I will just provide the comma here and then I will just write shape here and now I will go to the main dot py file and once you do the multiple inheritance that means all the public methods of the shape class is available in the sub classes which are triangle and the rectangle so I can use this kind of notation first of all I am going to use rectangle class to call the method called set color so I'm going to set color from here and let's say the rectangle color is red and then I'm going to use the triangle object to call the set color method once again and the color I want to provide here is let's say blue ok and in order to get those two color values we can once again write print the instance name which is rectangle dot get color and same we will do for the triangle object also so print triangle dot get color and that's it so now all the public method of the shaped lass is also available in our rectangle and the triangle classes and we can use all the public methods of this shape class into the subclasses and let's run the code and let's see what happens so the code is running and you can see it prints red and blue using these two statements so this is how you can do multiple inheritance in python in this video I'm going to show you how you can use a builtin function called super in your Python classes so let's get started so to start with I have two classes here one is the parent class and other is the child class and here parent class acts like a superclass and the child class acts like a subclass which is inheriting from the parent class now both these classes have this init function and you already know what does this init function do it is the first function which is called when an instance of a class is created and here I'm just creating the object from the child class now what do you think will happen well that this constructor will be called or this constructor will be called because we are inheriting from the parent class into the child class so let's find out so I'm going to run this code and it prints child in it that means this statement under the child class init method is executed and this method is not executed now in some cases you might want to pass some parameters also into your superclass for example I'm just going to give this example let's say I want to pass a argument called name here and then I will just print the value of name how can I call this init function using this child class instance so it turns out that there is a function called super in Python that allows us to refer to the superclass implicitly now this super function is a builtin function which returns a proxy object that allows you to refer to your superclass so let's try to use this super function so you just use the keyword super and then give these parentheses because this is a function and then this super function will return the proxy object of the superclass that means I can use this dot operator to call the init method from the superclass so this notation means super dot in it means we are calling the init method from the parent class and that means we can pass the name from here so let's just pass this near I am going to just write max here and now I'm going to run this code and now you will see that child in it is printed using this statement first of all and then using the super function the init method of the parent class is called and then this name is passed here and it prints parent in it and the name whatever name we have provided here so this super function allows us to refer to the superclass now let me show you one more thing which is called the method resolution order and you can find this method resolution order by using your class name so child last name dot underscore underscore mro so just write underscore underscore Amaro underscore underscore and this statement I'm going to use inside the print function so you can see the result what it returns so I'm going to run the code now and you can see it returns this kind of order so as the name suggests mr o stands for method resolution order and this is the order in which the methods are called inside your child class or the parent class and this order means that all the method in the child class will be executed first and then all the method in the parent class will be executed now there are some rules based upon which this order is calculated and these rules are the first rule is the method inside your subclass are always called first and then whatever the method inside the base class they will be called and the second rule is related to multiple inheritance so let me just create the second parent class and I'm going to name it as parent too and here also I'm going to just write parent 2 here and let me inherit from the parent 2 also in the child class right and let's run the code once again and now you will see this order so once again child is printed and then the parent and then prayer in 2 and then the object so the second thing on which the amaro depends upon is the order in which you inherit from the parent class or the superclass so in our example we were inheriting from the parent class first of all and then parent to and in the same order this amaro also will be decided so all the method in the child class will be executed first and then all the methods inside the parent class whatever you use first here will be executed and then whatever superclass you write after that those method inside the class or superclass will be executed next and at last this is the base object now let's try to just reverse this order and once again let's run the code and you will see that this order will be reversed so the method resolution order will tell you which class method will be executed first and then the order of all the methods from the super classes now one more interesting thing which you will observe here is this output so I said that this super function is used to refer to the super class and now we have two super classes that means multiple inheritance and you will see here that only one output is printed which is from the init method inside the parent to and this statement is not printed which is inside the init method inside the parent class so how to solve this problem so if you have multiple inheritance then you need to manually call these init function using the class name so let's say I want to call the init function first fall from the parent to class I will use parent to dot in it and then you need to give also the self as the first parameter and the second which is the name in the same way you use the second class which is parent dot init function and then first parameter is the cell and then you can pass any other name for example Tom here and let me run the code and you will see it calls first of all parent to init function and we have passed max here as the name and then it calls the parent one init function with the name Tom which is printed here also so this is how you can use super function in Python in this video we will talk about operator overloading in Python now you might already know that everything is an object in Python so when I want to know the type of this number it's going to show this kind of output and this means that is an object of the class int now when I once again want to know the type of let's say 2.0 it's an object of class float when I want to do the same operation with the string this string is an object of class string so everything is an object in Python now have you ever wondered that when you do 2 + 2 it's going to give us the addition of two numbers and when I add two strings let's say two and then I am going to use the same operator which is plus operator with the other string it's going to give me the concatenation of these two string values so the same operator plus is working differently with different type of objects the same you might have observed with the multiplication operator which is this asterisk so when I use this asterisks or multiplication operator with a string and let's say I write three here it's going to print this given string three times but the same operator when I will use with the two numbers it's going to give me the different behavior which is the multiplication of these two numbers so the same operator Asterix is functioning differently with different kind of data or in other words we can say that this Astrix operator or this plus operator are overloaded for a different kind of objects so whenever this plus operator is used with two numbers it's going to give us the sum of these two numbers and whenever this operator is used with the string it's going to give us the concatenation of these two strings so both these operators are overloaded for handling different kind of data so this is the overloading of the builtin readers now we might also think that if this is possible can we overload the operators by our custom classes so let me create a class and I'm going to name it as the number class which is going to take one argument so let me define a constructor here so underscore underscore init underscore underscore and this is going to take one argument which is the number and I'm going to just write self dot num is equal to num so this is the simple class which we have created and now I'm going to create two instances of the same class so number and I'm going to give the number one let's say here and then I'm going to create a second object of this class and this time I'm going to give the number two here so is it possible that we can use let's say + 1 + + 2 so let's try this and it's going to give us this error which says unsupported operand type 4 plus number and number so because Python doesn't know how to use this + operator with your class objects it's going to give us this error which is unsupported operand type and whatever is the operator you are using so it turns out that we can overload these kind of operators in Python by implementing some inbuilt methods in our class so we already know that whenever we want to implement a constructor in Python we use this init method so I'm going to create a very simple class and I'm going to name it as a and this will be a blank class so this is a very simple class in Python and when I use a dir function which is a builtin function with this class let's see what happens so I'm going to just press ENTER and it's going to print some methods here which are inbuilt method so here not all methods are Cybil so I'm going to assign this value of dir a to a variable a and then we will see in the right hand side in this inspector here and this is the a variable and you will see the list of all the inbuilt methods which are associated or which you can implement them so for example we have implemented the init method in order to have the functionality similar to constructor but there are other methods here too so there is a STR method or le method which is less than method or any method which is not equal to method and many other methods which we can implement here in our class so now I have given enough theory to you and let's try to see with an example how to overload an operator in Python so here I have created a class which I call circle and this takes one argument which is the radius of the circle and I have created the setter and get a method for this radius variable and in the third method I am just calculating the area of the circle using the radius and I have also used a inbuilt module which is math in order to get the value of pi so using this expression I am just calculating the area of the circle now I have created two objects of this class with two different radiuses so in the first object I have given the radius to and in the second object I have given the radius 3 and from the theory which we have learned till now we already know that this expression will not work with these two objects so when I run this code it's going to give me the error which says unsupported operand error so now we are going to overload this plus operator in this circle class now in order to overload a particular operator let's say plus you need to implement associated method in your class so with this plus operator there is a special method which we need to implement in our class and I have given the list of all the methods which is associated with the operators so with the plus operator you need to implement this special method which is underscore underscore add underscore underscore in order to overload you use this method in order to overload the multiplication you use this method so here is the operator which we want to overload and here I have given the method name which you need to implement in your class in order to overload this operator in Python so there is this list which you can use with all these operators so you can overload the mathematical operators in Python you can also overload the bitwise operators in Python like and or or bitwise right shift orbit wise left shift and also you can overload the comparison operators in python using these associated methods with these operators so now we want to overload this plus operator so we will implement this add method into our class so let's implement this add method into our class and implementing this method is really simple you just need to define a special method which is underscore underscore add underscore underscore and this add method is going to take two arguments one is self you already know and the other is the object of the other instance so this second argument is the object of the circle class and now inside this method I am going to just return first of all I will just use this circle as the constructor and what I want to do I want to add let's say the radius of the two objects which are provided one is the self object and other is the object which is provided you using this argument so I'm going to just say self dot underscore underscore radius plus the circle object radius so let's use the circle object and then dot and then underscore underscore radius so basically I'm adding the radius of the two objects one is this circle object and other is the radius of the self which is the current class so as soon as you implement this method ad using these two arguments then this operation is going to work in Python so because we have overloaded the plus operator using this ad method now this operation is going to work so let me just assign the addition of these two objects into a third variable and this variable I'm going to name it as c3 and using this c3 let's say I want to print the radius of the circle so I'm going to just use the print method and then I'm going to use the c3 object and I'm going to call our get radius method from this object and let's print the radius of c1 and c2 also so here I am going to just write c1 and here I'm going to just write c2 so we are printing the radius of all these three objects and I'm going to run the program now and you can see here the radius of the first object is two because we have provided two as an argument here the second is three because we have provided three as an argument here and because we have created this third object using the overloading of this plus operator where we were just adding the radius of both the objects that's why we got five years so two plus three is equal to five and this addition we have done using this expression so we have added the radius of the current class and the object which is passed using this argument so this is how you can overload the craters in Python by implementing the Associated methods which are available in Python so let's say now we want to overload the less than and the greater than operator so for the less than operator we use this LT method and for the greater than operator we use this method called GT so let's implement these two method inside our classes so I'm going to just copy this add method to x and first of all I'm going to replace this by LT which is less than and the second method I'm going to replace by GT which is greater than and we want to see if the radius of the circle is greater than the second radius which is provided using this object or not so first is less than so we are going to provide this operator and second is greater than so we are going to provide the other operator which is greater than operator and now this less than and greater than function is going to give us the boolean value if this radius is less than this radius then it's going to return as true otherwise it's going to return us the false so I already have the two instance of two classes and if I want to compare these two classes I can just write c1 and I will use thus less than operator here and then c2 and also I'm going to use the greater than operator here and let's run the code and let's see what happens so now it's going to give us this value which is the constructor of the circle so how can we get the boolean value you just need to remove this constructor from here so you just need to remove the name of the class and now I'm going to run the code once again and now you will see true and false so we were checking if c1 radius is less than C 2 and it gives us true and once again we were checking if c1 radius is greater than C 2 and it has given Falls to us all so we can check the third object for example c3 here if c3 is greater than C 2 or not and most probably it's going to give us true and it's correct here so you can see it's that simple to overload any operator in python using these builtin methods so you just need to find out the Associated method related to that operator and then you just need to implement that method related to that operator in addition you can also implement some other methods which are available with the class so once again when I'm going to print the dir with any of the object let's say c1 and I'm going to run this program and you can see the list of the functions which you can implement inside your class so ad is already there but you can also implement this dish method or dir method or any of these methods which are available here so our EPR method or STR method any method you can implement inside your class in order to avail the functionality associated with that method so it's last let's try to implement one of the method which are associated with the class so let's say we want to implement this method which is the STR method so I'm going to just minimize this and I'm going to just copy this function and once again paste here and instead of greater than I'm going to just implement now the STR method now this STR method only takes one argument which is self so I'm going to just remove the second argument and here in the return value I can just return some string for example so I can just say circle area and I'm going to return the area of the circle so I'm going to use this concatenation operator and then I'm going to convert the area into the string and then I'm going to just use self dot area which is going to give us the area of that circle so once you have implemented this STR method in your class you can simply use it like this dir method so I can just write STR and then the name of your object which you have created and let's run the code and let's see what happens so I'm going to just see the result now and it prints circle area and it's going to print the area of the circle I just need to provide equals to symbol here so we will be able to see it in a prettier way so you can see the area of the circle is printed similarly you can print the area of the other two circle which is circle two and circle three and let's run the code once again it's going to print us the area of all these circles so this is how you can use operator overloading in python in this video I'm going to show you what is composition and how to use class composition in Python so to start with I have two classes here one is an employee class and other is the celery class now in the salary class I have this init method which takes two argument P and bonus and it sets these two arguments to the member variables of this class also I have a method called annual salary which is used to calculate the salary now in the employee class I have this constructor which takes four arguments which is name age P and bonus now what do you think can we apply inheritance here the answer is no because there is no is our relationship between salary and employee so employee is not a salary and salary is not an employee but somehow I want to delegate the responsibility of calculating the employee salary to the salary class because calculating salary is in itself is a big task I have just simplified this class in the form of just calculating the annual salary but the employee can have his in Texas or he has taken some leaves or many factors affects the salary of an employee so this salary calculation let's say we want to delegate to the salary class but whose salary is this this salary is the employees salary so we know that we cannot use inheritance here but we can use a concept called composition here and the composition means that we are just delegating some responsibilities from one class to the another class so how to delegate this responsibility we can just create one more variable here for example self dot obj underscore salary which is the salary object we are going to create using the salary class okay and this salary class takes two parameters one is pay and other is bonus which we are already providing using the employee init method so I'm going to just pass this pay comma the bonus into the salary class so we are instantiating the salary class inside the employee class so here one class which is an employee class acts like a container of the other class which acts like a Content okay so salary class is the content and the employee class is the container of this salary class now in order to calculate the total salary we can define one more method here and I'm going to just say total underscore celery and then what we are going to do is we are going to call our object salary member variable because this gives us the object of the salary so I am going to just call object salary and we can call this method from the salary class which gives us the annual salary and now I am going to just create the object of this employee class so let me just right EMP is equal to employee which takes four parameter first is name second is the age third is the piece so let's say P is 15,000 and the bonus is 10,000 and now I just want to print the total salary of this employee so I can just write print and then EMP object dot the total salary which is total salary method and you can see here this total salary is returning let me just use the return keyword also because we are returning this annual salary from the salary class using this total salary method so let's run the code once again let's see what happens and you can see annual salary is printed and this annual salary is calculated using the salary class so what this employee class has done it has delegated some responsibilities to the other class which is the salary class which gives us the annual salary of an employee and this here is called composition now one interesting thing which you will notice here is we are not instantiating salary here we are just instantiating the salary inside an employee class so as soon as you delete an instance of an employee the celery class instance will be automatically deleted so whenever you want to delegate some responsibility of one class to the another class it's called composition one more example of composition can be a book class and a chapter class so a chapter is not a book and book is not a chapter but we can delegate some responsibilities from a book class to the chapter class so this is how you can use composition in Python in the last video we have seen how to use composition between classes in Python in this video I'm going to show you how to you class aggregation between classes in Python now if you haven't watched my last video in which I have shown you how to use class composition in Python I will highly recommend you to watch that video because I will be using the same code to demonstrate how aggregation works in Python so in the last video we have created two classes one is an employed loss and other is the salary class and then we have used the celery class inside the employee class and we have seen how composition works in Python so employee class is delegating some part of its responsibility to the celery class and that is called the composition now in composition the relationship between the classes which have some Association is represented by a key word part of so celery is the part of employee so the key word we use in composition is part of now let's see how we can use aggregation instead of composition between these two classes so let's say I will not use this celery class inside the employee class but what I'm going to do is I'm going to pass an instance of celery here so I'm going to just write celery and this will be the object of celery class which I'm going to pass in the init method of the employee class so let's create an object of the celery so I'm going to just write celery here is equal to the celery class and we will instantiate the celery class by these two argument which we have given in the last video to the employee class so I'm going to just copy these two arguments and paste it here and I'm going to remove this comma here so now what we are doing here is we are first of all instantiating the celery class and now the celery class we can pass to the structure of the employee class and this is the object which we have passed using the salary class object and then I'm going to take the salary class object and I'm going to assign the salary class object to the member variable of the employee class which is obj underscore salary now because we are passing the salary object that means this member variable is the salary member object and we can call any public method from the salary class using this member variable now so let's run the code and let's see what happens and we get the same result as we have seen in the last video in the composition example so what we have done differently here so instead of using this salary class inside the employee class we have first created an instance of the salary class and then we have passed this instance to the employee constructor which can be used inside the employee class and this type of relationship is called aggregation now let's see what are the special properties of the aggregation the first property is the relationship between the associated classes in aggregation is defined by the keyword has a so employee has a salary because now we are first of all creating the salary object and then passing it to the employee so now we are not directly using salary inside the employee class the second property of aggregation is that associated classes have unidirectional Association so we are just passing salary object to the employee class we are not passing employee object to the salary class so it's a unidirectional Association only salary can be passed to employee not the other way around and the third property of aggregation is we have created the salary object and the employee object so both these objects are independent of each other so if one object dies the other server so both the object are able to survive individually so these are the three properties of aggregation now let's see the difference between the composition and the aggregation so I'm going to split the screen so I'm going to just right click on this tab and I will say split vertically and here I'm going to open the example of the composition so on the right hand side I have the example of composition and on the left hand side I have the example of aggregation let me just maximize this so you can see it and now let's discuss about the differences between the composition and aggregation so the relationship in composition is defined by a keyword called part of so salary is the part of employee in aggregation there is no part of relationship but the relationship is defined by the keyword called has a so now in aggregation we are defining the instance of salary and then passing it to the employee class and salary is not the part of the employee class we are just passing it to the employee class so aggregation we use has our relationship and in composition we use part of relationship the second difference is when you delete the employee object the salary object will be automatically be deleted so salary object is dependent on the employee class but in aggregation the salary object and the employee object are individually independent so they can survive individually if one object dies then it doesn't matter that the other object dies because we have created these object individually now in composition both salary and employee are interdependent on each other but in aggregation the relationship is unidirectional so the association between the employee and the salary object is unidirectional you can only pass the salary to the employee class but we cannot pass the employee object to the salary class so these are the three major differences between composition and the aggregation in this video we will talk about creating abstract classes in Python so let's get started so to start with I have here two classes one is a shape class another is a square class in shape class I have to empty methods one is area and other is perimeter and I'm using shape as a superclass and square as a subclass and square class is inheriting from the shape class now in this example I want to do two things one is I don't want to allow the other users to create an instance of a shape class because shape class acts like a template for the square class so I don't want to allow those users to create an instance of this shape class so let's see right now if we can create an instance of this shape class or not so I'm going to just right shape is equal to shape and when I run the code my code runs fine that means right now I'm able to create an instance of the shape class which I don't want the second thing is I want to make sure that both these methods which are there inside the shape class are implemented inside the square class so I want to make sure that whoever is using the shape class he or she must implement these two methods inside the subclass so how can I achieve these two things now it turns out that abstract classes are just made for that so how to create an abstract class in Python the fact is Python on its own doesn't provide any abstract class but don't worry there is a builtin module in Python which we can use to create an abstract class so let's import this builtin module first so I'm going to just write from ABC import capital ABC comma abstract method so these are the two things we need to import from this module now this module ABC stands for abstract base classes and this allows us to create the abstract classes so how we can create an abstract class using this ABC module so what we need to do here is we need to inherit from the ABC module into the shape class okay so shape class is inheriting from the ABC module now once this shape class inherit from the ABC module the second thing what we need to do here is we need to add a decorator here and how to add a decorator we just need to use at the rate and then the name of this abstract method which is like this and let me use this abstract method decorator on top of this parameter method also so what this abstract method decorator does is it makes these two methods abstract and what is an abstract method an abstract method is a method which you must implement in the subclass so when you run the code now it will give us this error which says can't instantiate abstract class shape with the abstract method so once you create any of your class method as abstract then your class becomes the effect class and then you cannot instantiate this class like this so our first goal is achieved that we cannot instantiate this shape class now because this class is now an abstract class and how to create an abstract class you just need to import the ABC module and then you just need to add this decorator on top of your method and if you do this even with one method in your class then your class becomes abstract so now we have removed the instantiation of this shape class but now when I try to instantiate this square object from the square class let's see what happens so this square class takes one argument which is the side of the square and let me run this code and once again it gives us an error and this error says can't instantiate abstract class square with abstract methods so that means that whenever you inherit from a class which is an abstract class and if this class contain any abstract methods then the subclass have to implement the methods which are abstract so this method area is an abstract method and this method parameter is also an abstract method that means we have to provide the implementation of these two method inside our subclass so I'm going to provide the implementation of area first of all into the subclass and area I'm going to just return as the multiplication of the sides right so self dot underscore underscore side multiplied by itself so self dot underscore underscore side and let's say for now I will remove this abstract decorator from the parameter method and let's run the code once again and you can see it runs fine so there is no error when we instantiate this class when we implement all the abstract method into your subclass so right now there is only one abstract method which is area into the shape class which we need to implement in the subclass and that we have done so we see no error here now let's add this decorator abstract method on top of this parameter method also and once again when I run the code it will give me once again this error it's going to give me the same error which says can't instantiate the abstract class square with the abstract method parameter so we also need now to implement this method also let's just implement this parameter method inside the subclass once again and what is the parameter it's four times the size of your square so self dot underscore underscore size and now we have implemented both of them and once again when we run the code it runs fine let's also try to print the area and perimeter of the square so I'm going to just use this object to call the area method and in the next line I'm going to just use print to once again call this object and this time I will call the parameter method and let's run the code once again and it prints the area of the square and the perimeter of this square so let's rewind what we have learned till now so in Python you can define an abstract class by importing this module and this abstract method and this ABC stands for abstract base classes and you need to inherit from this ABC into the class which you want to make abstract the second thing which you need to do is you need to provide this decorator at the rate abstract method on top of at least one of the methods inside your abstract class that makes your class abstract and what are the properties of the abstract class you cannot instantiate an abstract class so you cannot create an object of this abstract class and you need to implement all the abstract method into the sub class which is inheriting the abstract class so this abstract class acts like just a template for other classes which wants to inherit from this shape class so this is how you can use abstract classes in Python I hope you have enjoyed this video and I will see you in the next video