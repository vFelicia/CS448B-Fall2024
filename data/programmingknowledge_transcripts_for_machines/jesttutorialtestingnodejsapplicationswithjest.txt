hi in this video we are gonna learn how to test a node.js application so why do we use uh automatic testing framework because whenever your project becomes scalable in size or whenever like a new developer it comes to your project and if they add some new features and they want to see that the whole project is not break out so they can just simply run their testing suite and they can see that they haven't broke out so that's why we are using testing framework for many purposes like refactoring the code maybe when you had a factor some code in your project and and this and you can see that your features that we have added new feature that is not like brick so we are gonna use in here the gestures dot io i mean just just a framework in here so in here we're just gonna in how to install this gestures so in here just use npm install that's test save test dev just because we are gonna use this uh framework in just our development purpose so we have installed it as their dependency in here and also i have added the test script in here because we're gonna run it as a test suite so we're gonna use npm testing here and let's see what happen so where you will see that they have checked all the files but they can't no test found so yeah we're gonna just create a new test folder i have also created i have created the test folder in here and you're gonna just uh you create a new file and let's give a name math dot test dot js one thing to remember that you have to give the dot test extension here because that's how that just will see that you have added one file one test file and that you under the test will uh run here so globally the the gest framework is not required here to like like we have to use cons just just and require it from the gesture for our library where it's it's globally so in here the just provides one function and the name is test function which is a global so in here it requires two argument first argument is a string a string is the name of the feature that you have added you can give an enemy and second argument is a callback function or just as a function which will run which will check that your test is running or not then here just say for introduction part let's say hello world that's our name of it's just an introduction so in here i'm going to simply run this with a blank in nothing there so if you run this we're gonna see that it passes the test but there's nothing here so it passes anything because it is not throwing any error from here so let's say i'm going to see you how can we try and we know that we can throw an l through throw new error and let's say a failure and if we just run this file we're gonna see that it throws in it that's because it's seeing that it's throwing an error so it will throw in it yeah so now i'm going to just simply create a new file in here and in a file in here and let's say the file name is math dot js because that's how we're gonna uh we're gonna just export the file from here to mat.test.js so that it will run from here and see so in here we are gonna just uh simply create a new uh new function let's say tape total tape total deep we are just calculating a tip only so let's say proper name calc calc total thing so it passes how much argument from here so first argument will be total and second argument will be the percent so the const tip will be what tip will be total multiply with the percent so in here what we are passing t person will be as like if it is a 30 means 0.3 that's what i'm passing from here and what it will return it will return a total now we're gonna just export from here so let's say module dot export module dot export calc total tape and in here i'm just going to require it from the my.js and where from i'm going to just say math equal to uh require from require from dot dot slash math yeah so in here i'm going to create a new test file i'm going to remove this one there's no needle for so i'm going to what typically so cert calculate should calculate total total tape yeah and now i'm gonna just uh create a new cons total that's that's what it's returning the net or the calc total tip function in here we're gonna just keep the total let's say 10 and 0.3 so yeah so what it will return if total is not is equal to let's say is equal to what you told what point 1.3 is the answer of this as we know it so in here if it is not equal to 1.3 so it will give an error so just throw an error here so a new error a new era just say like um should be total would be total should be total should be 1.3 but got total now let's see just run it and we're gonna see what happens so if we just npm test you can see in here that it passes the test suite test cases yeah you can see that it passes the test cases now if we just like uh give or in the math.js if we just do something wrong like um we are gonna use plus tip in here once so if we just add one plus step in here and we just run here we can see it has been filled because total should be 13 but got 16 so it it is running and you can see the total is 16 in here that's why it's giving an error but you can see that we have here some on on code in here so we can also use that what asserts something in here that just just provides in here so in our in the guide there is something called expect which our which suggest provides in here so we're going to use expect value in here so we don't have to use this for this one and we can simply use expect expect what expect 13 and after that we're gonna use this value 2b so how can we use this so this is what it is using that expect total if we just use our english and consistently that what we are expect total to be to be what to be 30 so if we just run it and you can see in here that it failed that's because we expected 13 but received 16 so that's how it's been done so but just uh one line of code we can see that what is giving here here so if we just uh correct out this mistaking that we have then and just run it you can see that it has been passed from from the test suite so this how in the docs there are many useful methods that is being used in digest framework and this all this can be helpful like you can see that if we to be null yeah we can use a to be nullified to be null method and to throw any error matching synapse on so that's so that's how it's been done so now if we just like do something like when we are just not passing the percentage something in here so what it will be so let's say if we don't it has a default element let's say we are using 0.2 as default argument now we have to make another test within here so in here should calculate should calculate total tape with default 50 percent so now so now what to do so now it will just we are going to cons total and we are going to use math and we are going to pass 10 and just 10 in here and what we expect we expect total to be 12 yeah that's what we want in here so if we just run it and film test you can see that all the test cases has been passed so yeah that's how we to the this is the introduction of the chest so that's how we do so it's been used because it helps to like collaborate whenever like we are using a new framework so it's very helpful for us how to run a test cases which is a synchronous process and we're gonna also configure our just library because whenever like we are running it using npm test whenever the test cases are fulfilled or filled it's going to block out it's going to return to this command prompt so let's see how can we do this so in our package.json just in our here in the script uh in the script in here the text we are just gonna write chest space test as watch what it will do like it will run as a nod money in here so we are gonna just run it npm test and in our math.test.js we're gonna see how can we use a asynchronous process in here so in here you can see in our command prompt let's say i am going to churn out here so in here you can see let's press w to watch more and here you can see that all the options are here like to run all the tests we can use a to run only the fill test you can use f and this are all other options and you can see in the documentation if you want to so if we type a it will run again all the test cases and if you want to see only the failed case cases student you can use f so yeah that's how we can use the chest as a as to restart the function properly now we're gonna see how can we use a test asynchronous process we can use here so let's see so test asynchronous let's say async and we are using callback here and in here we just gonna use set timeout set down and we're gonna call back and we're gonna call back and let's see give two second so two thousand milliseconds and here we are just going to use the expect so if let's say it is wrong let's say expect 1 dot 2b 2 which is a failed test cases but now if you run it just save it here and it is going to run in here and you will see that it it has been passed but it should not be passed because it is a failed test cases so that's why it is giving an error so how can we do this how can we collect this so in here the test file just library give one say to give an argument and let's see you can give any argument in here and giving them done in the previous like in the rest api we are using the next value for the next argument as a middleware so in here we are using done and in here done it says like whenever it's uh reading to a done like whenever i see the done argument then it's going to be like see that all the discussion has been passed so now in here you can see that it is giving an error and it is saying it's expected to but received one so this is some small thing that we can do but we are using async await for a proper use so this is not how we are gonna use so first of all we are gonna let's create one promise function in here so we're gonna use add function in here as a promise and we're giving two argument as a a b and what it will return it will return a promise so if we use return new promise and it it is taking two argument that is resolved and reset and yeah now in here we are going to set a set timeout which will take let's say 2 second and here we are just gonna say that if a is less than zero our b is less than zero then we are gonna reject means it is going to be fail to reject new error numbers should be so to be nonnegative which is not if it is negative so if it is true then if it is means it will not give any error then we are going to resolve it to give the sum resolve a plus b so this is our promise function and we know that it is going to give a failed cases for the test cases so we're gonna just uncomment out uh comment out and we're gonna just create a new test cases in here and let's say give the name should return sum of two number so in here uh we're gonna use the done function here first we're gonna see the primitive one like we are going to done and and in here we're just gonna call the function in here so what it will return it means we're gonna use the dan function to add we're gonna adding 3 and 2 and then we are calling 10 which will give the sum and what we expect we expect some dot to be five yeah we are expecting it to be five now if we run it it will not give any error because we haven't used the done function in here yeah you can see that it is not giving an error oh yeah yeah just to use w and just use f in here yeah it's giving an error so we're gonna use the done here and now if you run it you can see in here that it has passed all the test cases should calculate total tape should calculate all the so the return sum of 2 number now in here this is the oldfashioned way we are going to use the async await function so how can we use this so same thing we're gonna use we're gonna see in here that it's an essing function in here and also now also there is no need for this now there is no need for async done and we are gonna just uh because it returns a promise then we are just gonna use expect const sum is equal to we can use in here await function in here and use the add function here and use the 1020 and we know what it will return it will return the expect some dot to be 30 and now if you run it we can see in here that the test cases has been passed and we are using the async await function and we don't need a done in here just as an argument in here how to use chest for uh running our express endpoints like we have to run the user endpoint and task endpoint so first of all we have to change the environment of chest because right now by default it is running as a browser environment so in here just we're going to use simple json structure in here we're gonna use test environment test environment and it will be node and in here with us see that the file the connection string that we are using in here because the gist will run in other environment and it will run in separate environment so we're gonna separate the environment of test and the product 7. so in here first of all we have to import one library that's called npm i env cmd at the rate it will say that which update or which version you want and we are gonna save as a dev dependency so it will be saved as a dependency so in here we're gonna create one new folder let's say its name is config because we are gonna separate environment of port the dave one and the test one so in here we are just gonna say new file and let's say its name is dev dot env and one more that's called test dot env you will see that what i am talking about so in here in dev.env the connection string will be mongodb we're gonna see how can we use this as a assignment in our connection string so let's uh first of all let's close this tab there's no need for this one right now so in here in mongodb url you can see in the connection string and this is the connection string for now so we're just gonna copy it and just leave it there use this like yeah and if it is safe and also for test enemy we just gonna copy it but the name of the means it will be saved as a different collection or a different database so mongo's wrestlers test yeah and one thing more that we have to do like jwt key will be also it will be same but we have to just keep as because we are using env same thing so in here in the art file yeah so in the middle area in the middle where there is the this is my new course so just copy it and use it here and just save it and now in here we can just remove it and we can use process dot env dot the name of the variable that you have kept here that is jwtk so just use it jwt key we have to use it one more place it is in the user model in here yeah here it is just use it and one more in the connection string so in here just remove it yeah this will do the name is same so now we can just close this file and this one too this one now in the package.json we are just gonna give the file means where it is located so it is located the dot slash config slash dev dot env and in here it will be env cmd dot slash config plus test dot enemy yeah now it will be it will work so we can see if we just run nbm test you can see it is working yeah you can see that all the test cases has been passed will like we have separated the environment but we can see that it is working so now for using the express endpoints app and app app endpoints that we have made here so in here we're just gonna use the user.test.js because we're gonna test the user folder user router so in here what to do next so for testing the this file like text present points it provides with super test and film file npm library that is to be used in here so you can see that how it works same thing like we're just gonna use the request that is for super test and here the app express and we're gonna use the end points and what is the method and this is how this will work so let's see how can we use in here so first of all we have to install the super test in here so just install it but as a dev dependency so just use it here now what to do we have installed a super test so in here which is gonna use the uh require it from the we're gonna use super testing here so now we need what we need app that means we need this index.js we need this one so what can we because this one run before the listen to any port number so what we're gonna you do we are gonna restructure our folder system in here so first we are gonna create one more file let's say it's name is app.js that we're gonna use it so in here what we're gonna use that we don't need this part because we need this part in here we need this part here and this part that we need here so what we're gonna do we're gonna just cut copy paste here we're just gonna cut from here and paste it here and we're gonna modulate module.export app from here and for index we're just gonna use app require from dot slash app so yeah that's it this is what we need so in here we can just const app is equal to require dot dot slash from get out of the test folder and app so we have get the app folder app functionality so now we're gonna use the request one and we're gonna use app dot we're gonna just post in here because this one so what we need in here that we're gonna use the test cases so this is the test cases for what this is the test case first would sign up for a user and it will be an asynchronous process that we know and it will be an event in which request and here we're gonna use app dot post slash users and it provides some functions uh methods like dot send what we're gonna send in here we're gonna send in here the name let's say the name is test email email will be just like test at test.com and password password will be two test123 so in here what we expect from here we expect like the status quo we expect status quo to be 201 and if it run that we know that if it run properly it will create a new file for a new user new user in the our mongodb because in here we have used one of the rest mongols in here but we have in separated environment so we can see that it will create a new user in the rest mongoose test database so not do it just run it we can see what will we get we can see in here that the test has been passed yeah you can see in here that the test has been passing here successfully so now if we go to our rest mongoose test in here you can see you can see that a new user has been created but there is one problem in here that that if we again run this file like just run it and save it it will even give the error because we have the same functionality you can see it gives error because we have used this one as email as one unique so it will give the error because validation is false in here so whenever we run this uh test sort we have to use this like we have to delete all the users all the collections in our database so it will restart again so this is why we're gonna use some global methods that just provides like before h before h means that it will run before each cases each test cases in here it needs a callback function we're gonna see how it will run but first of all we're gonna see how it will look like so we're just gonna use console log test uh used before before h and one thing more matter that is after each this one means that it will call after each test call so let's say console.log after h now if you run it you will see that it will come before the test cases will run and it will come after the test cases will run so in here you can see in here that it gives the console log before h and after h so what we're gonna do we're gonna just use the before h1 because in here before each cases will run it will delete uh the user that has been uh saving our collection so what we're gonna do we're gonna do we're gonna just first import the con const user it will require dot dot slash tv slash model slash users in here what we're gonna do it's it will be an asynchronous process so we're gonna do a sync and we're gonna have it await user dot delete menu we're gonna delete many and just use it and now if we just uh save it you can see that it will run because it will create a new user but before creating a new user it will delete the previous one so this is how we can test our sign up for a user and we can also test for a user that cannot be sign up and we're gonna use i'm gonna see how can we login so we should log in for a user and here what we need in here await request app dot it will be a post request and it'll be slash user slash login and in here what we're sending we are sending the email test one test at test.com and password is test123 so if you run this for this one it will work with what it will do it will not run because for each test case it will delete the test one and it will delete the user so for each cases what we are gonna do is we are gonna create a new user let's say const user in here what we will provide we will provide the email or we will provide the name name will be test one two email will be test128 test.com and password will be test one one two two three three and for s test guess what will we do it will do that await and in here we're gonna save it so user await user and for this sorting we can use this await user dot save this is how we can also save the user proper name would be like user one that will be good because we we can have multiple usernames as per the requirement for test cases so yeah so if we will do this anything in here it will it is fine you gonna use this one like user one dot email and in here user one dot password so now if you run this file we can see that it will run perfectly you can see it's each test case has been passed so this is how we will we can log in and sign up and for others api that we have used in here we can do similarly so yeah this is how we will do this thank you