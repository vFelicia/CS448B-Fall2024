hi in this video we are going to learn how to test a node.js application so why do we use automated testing framework because whenever your closet becomes scalable in size or whenever like a new developer comes to your project and if they add some new features and they want to see that whole project is are not break out so they can just simply run their testing suit and they can see that they haven't brought out so that's why we are using a testing framework for many purposes like refactoring a code maybe when you had a factor some code in your project and and this and you can see that your features that we have added new features it's not like break so we are gonna use in here the chess chairs start I mean just just framework in here so in here we just say panel and how to install this just years so in here just use NPM install test test save just there just because we are gonna use this framework in just our development purpose so we have installed it and still dependency in him and also I have added a test script in here because we're gonna run it as a test suite so we're gonna use NPM testing here and let's see what happened so we we see that they have chipped all the faults but they count more tests found so yeah we're gonna just create a new test folder I have consecrated I have created a test folder in here and you're gonna just you create a new file and let's give a name apt door test tortillas wanting to remember that you have to give the god test extent in here because that's how that just will see that till you have added one file one test file and that you are dead that just will run here so globally the the gist framework is not required here to like like we had used cons just just and require it from the gesture for our library where it's globally so in here the gist provides one function and name is test function which is a global so in here it requires two arguments 1st argument is a string a string is the name of the feature that you have added you can give any name in it and second argument is a callback function or just as a function which will run which will check that your test is running or not then here just say for introduction apart that's the hello world that's our name of it's just an introduction so in here I'm going to simply run this with a blank in nothing here so if you run it this we're gonna see that it passes the test but there is nothing here so it passes anything because it is not throwing any error from here so let's say I'm going to see you how can we try to week know that we can turn L to throw new error and let's say a failure and if we just run this file we're gonna see that it shows Annette that's because it's seeing that showing and L so it will throw in it yeah so no I'm going to just simply create a new file in here and in file in here and let's say the file name is Matt but Cheers because that's how we're gonna we're gonna just export the file from here to mad dog test or Cheers so that it will run from here and see so in here we're gonna just simply create a new new function let's say tip total tip total tip we are just calculating a tip 1 that's 1 so let's say proper name calc calc total T so it passes how much argument from here so our segment will be total and second argument will be the tip percent so the const tip will be what tip will be totaled multiplied with t percent so in here what we are part NT person will be as like if it is a 30% means point three that's what I'm passing in from here and what it will return it will return total plus T now we are going to just export from here so let's say module dot export module dot export calc total tip and in here I'm just going to require it from my torches and wire from I'm going to be the same at equality required from the quantum dot dot slash not yeah so in here I'm going to create a new test file I'm going to remove this one there is no need for this so I'm going to what typical so cert calculating should calculate total total deep yeah I know I'm gonna just create a new it constituted that's that word it's returning on that or the calc total tip function in here we're gonna just keep the total let's say 10 and the 0.3 so yeah so what it will return if total is not is equal to let's say is equal to what it will do what point 1 point 3 is the answer of this as we know it so in here if it is not equal 1 point 3 so it will give an error so just throw an error here turn you adder through a new error just say like should be total would be total should be total it should be 1 point 3 but cut torta now let's see just run it and we're gonna see what happens so if we just end him test you can see in here that it passes the test suit test cases yeah you can see there it passes like this now if we just like here are in the mad dog Cheers if we just do something wrong like we are gonna use plus tip in here once so if we just add one plus tip in here and we just run here we can see it has been failed because total should be 13 but code 16 so it it is running and you can see the total is 16 in here that's why it's giving an error but you can see that we have to use some own on coat in here so we can also use that what assert something in here that just years providing him so in our in the guide there is something called expect which hour which suggests provides in here so we're going to expect value in here so we don't have to use this for this one you know we can simply use expect expect one expect 13 and after that we're gonna use this value to be so how can we use this so this is what it is using that expect total if we just use our English sentence included what we expect total to be b12 b13 so if we just run it and we can see in here that it failed that's because we expected 13 but receive 16 so that's how it's been done so but just a one line of code we can see that what is given here here so if we just collect all this mistaking that we have tell you and just run it we can see that it has been passed from from the test suite so this how in the docs there are many useful a mattress that is being used in registering work and this all this can be helpful like you can see that if we to be null yeah we can use a to be null to be nonmetal and through training error matchings and epsilon so that's so that's how it's been done so now if we just like do something like when we are just not passing the percentage something in here so what it will be so let's say if we don't you as a default document let's say we are using point to which people argument now we have to make another test within here so in here should calculate should calculate total tip with default tip percent so now so now what to do so now it will just we are going to corn starter and we're gonna use Matt and we're gonna pass 10 and just stand in here and what we expect we expect total to be 12 yeah that's what we want in here so if we just run it and PM test we can see that all the test cases has been passed so yeah that's how we do the this is the introduction of the chest so that's how we do so it's been used because it helps to like collaborate whenever like we are using a new framework so it's very helpful for us so yeah thank you