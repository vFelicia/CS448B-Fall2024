this is john from programming knowledge and in this video guys i'm going to show you and teach you how to use um if statements in c programming language we're going to discuss about the logical operators and of course the assignment operators so previously we have discussed this relational operators so we have like six relational operators the equal or checking if a value is equal to some value also and then not equal we have also greater than less than and then we also have greater than or equal to and we also have less than or equal to some value so this is quite useful guys if you are using the control statement in c so for example if statement and then you want to check if a certain value is equal or not equal to some value so for example if a variable x is equal equal to 2 so basically we're just checking if this particular variable or the value of this x is equal to two or we can reverse that we can check if this particular variable is not equal to two and of course you can use other operation or operators like greater than um less than or we could also double check for greater than or equal to or less than or equal to so basically guys this operators is like just checking the relationship or if the certain value is greater than another value or it is equal to another value okay now let's move on to the next one which is the assignment operators so basically you guys there are a lot of assignment operators in c programming language okay so the first one will be the equal sign okay this is one of the most common assignment operators in c programming so for example you want to assign so as i've said guys this is for assignment operators assignment operators okay so basically this is useful if you want to set a value to a variable okay so for example x and then if you want to make this like five or the value of x is equal to five you can do that by using this particular assignment operator equal symbol okay that's easy and the second one is um plus equal so we have this also plus equal and then um it basically means guys that it increments the value and then assign it to the um the variable okay so for example you want to make this like x and then plus equal to two so basically let's try this um we can remove this code right here we can use the increment then assign so basically like we set a value for x we set it to 5 and then we can have it like x plus and then equals 2 3 and then we can use the printf function and we can display the result further so for example um the value is the uh format specifier and then of course the comma and then the x variable okay and then semicolon at the end of this line save this and then compile and build or build and run our application so basically as you can see here the value is eight so this is the doing of the plus equals to 3. so big basically what it means that it add 3 to the variable x and then of course it the result of that is assigned to variable x also okay so this is basically uh just incrementing the value of our variable and of course we also have the x minus equals to so for example one okay so basically it is the complete opposite of this one because this is for incrementing and this is for decrement okay and of course we do have other operators for this particular topic which is the assignment operators we also have x for example times or multiply equal to 2 you can also do that and basically the division also okay you can do also the modular part modulo symbol and then equal and then so for example two and there are others so for example um percent for i mean x and then and um and symbol and equal symbol and then of course the value that you want to assign so this is basically a bit bit wise and assign assignment so we're not going to use that for now so basically our our currently concern is this operations we can have the increment uh the first one is equal and then of course the increment the decrement and then multiply multiplication then assign and we also have divide and assign we also have modulu and assign so that's basically how the assignment operators work so the last thing that we want to discuss here is all about the logical operators so logical operators provides three mechanism that we can test more than one condition to make a particular decision so these are the um end and symbol so meaning it is a logical end okay logical and uh let me show you that later on what uh what this means logical end and of course we also have this bar bar and this is a logical operator or logical or and then of course we have the negation or not symbol okay so logical or and then this is in and of course logical not okay so let me show you how this works this three logical operators now let's try to use the logical operators so for example the first one the logical and operator so we have here variable x which is set to eight or the value is eight and then we can check if this particular value is or the 40 particular val variable x is um greater than 5 so we can do that by using the if statement and then x is it less than or greater than 5 so if x is greater than 5 then we can display something in our in our screen or output something so we can do print f and of course the value is greater than greater than five okay so we could uh build and run this and see the output of our program and of course it's gonna display the value is greater than five okay so what if the value is four okay so obviously there will be no output because uh this the condition right here uh turns to be false because the actual value of x is now uh for so no statement has been executed for this particular program now we can use logical operators and in this particular scenario so for example you want to check that the value of x should be um greater than 5 but less than 10 okay so we could check if the variable x is greater than 5 but less than 10 and we can do that by using the logical and operator so double ampersand and x and then less than 10 okay we could do that and of course um if we try to run this still there is no output because the value of x is four so we can try six here build and run our application so the value is greater than 5 and we should add here that the value is less than 10 okay build and run our application so the value is greater than 5 and it is less than 10. now what if it is 11 so obviously it's going to display nothing in our screen because the conditions of this particular statements is not met okay so that's how you can use the logical and operator and of course when we say and basically it means that it should be the both of this statement or both of this condition should be true in order for this statement to be executed okay and you can also use the logical operator or in this particular scenario so it doesn't matter if the um x is greater than 5 or x is less than 10 it should you know execute the statement that we have here okay so for example you run this okay so we have the value is greater than 5 and less than 10 and we can try like 20 or maybe uh use the value 20 in our x so let's try this save and then build and run okay and as you can see we still have or we still get the output the value is greater than 5 and less than 10 that's because this particular statement here returns true so it doesn't matter if this particular statement here is false so as long as there is a true uh returns either of this statement so there's there should be statement printed or executed inside this particular if statement okay so i think that's all there is to it guys for this tutorial and in the next video we're going to discuss deeper with this particular if statement and of course if you want to learn more about c programming you can try to watch our video tutorial series in save for beginners so see you guys in the next video and thank you for watching so i think from the previous video we have like touched the basic usage of if statement so we have tried if statement with the logical operators so the end the relational operators the you know greater than less than or less than or equal to another relational operators okay but in this particular video guys i'm going to go deeper with the if statement and how we can apply um if statement in our c program and of course guys i want to show you the practical approach on how to how you can implement if statement in a c program so basically guys if statements in c is used to control the program flow based on some conditions so it is used to execute some statement called block if the expression is evaluated to true so otherwise uh it will get skipped and we will try to implement a simple or basic program um utilizing the if statement so actually guys there are four different types of if statement in c so these are you know simple if statement we also have if else statement we also have nested if else statement and we also have else if ladder in c programming language but for now let's just focus on the simple if statement so basically the structure of if statement is just like this so we have this particular format or basic format of if statement in c we have if keyword and then open and close parenthesis and then inside of this open and close parenthesis is the test expression okay or the condition and then of course we should you know add curly braces open and close curly braces and then of course the statement to execute whenever the test expression or condition is met or in this particular case if this particular condition is evaluated into true okay so now let's try to implement a practical approach of an if statement so say for example you are developing a program or a software for a particular bar okay and then that particular bar only accepts customers that are over 18 years old and those customers that are below 18 years old are not allowed to enter the establishment or the bar itself and we can create a very simple program for that and our program will accept the age of the customer and then it will evaluate the age and it will display a message based on that particular age so the first thing that we're going to declare here is the variable age which has the type of int and of course we need to display something on to the screen that says to input a number that pertains to the age of the customer so in order for us to do that we need to use the method printf and then in here we can say enter the customers the customer or enter the age of the customer okay then we can add colon and then space so we can have like this space for our input age now we have this output and we need something to accept a number from our user so we can use the method i think we already used this before the scan f right so in here we need to specify the format specifier for our age which is um uh percent d with uh which pertains to the values that are of type in okay and then of course uh after this we need to add the comma and of course the variable age and of course we need to end this line with a similar column but the proper way of doing this is to add an a person a person symbol okay so basically what we're doing here is just we're getting the address of age and assigned value of that particular address using the value that has been inputted by the user okay and of course we can now apply our if statement with this particular age so the first thing that we're going to check if the age is greater than 18 okay so we can just copy and paste this age variable and then we can add the logical operator greater than so basically what we're doing here is to check if the age is greater than 18 okay so there you go and then of course the statements statements to execute if condition is true okay so basically what we can do here is to print um the age the age is greater than 18. okay and basically it uh it says or it means that the customer can enter the premises or the bar itself okay and of course we can also check if um the user or the age of the customer is equal to 18. okay we could also check that by using the logical operator or the relational operator equals n equal equal symbol so this is just um testing the age if it is equal to the value 18. so the first one is for testing the value h if it is greater than 18 in the second one if it is equal to 18 and then of course we need to display the corresponding output so the age is equal to 18 okay and then of course we can add another one for this so we can just copy and paste for this one we need to check if the age is less than 18 so this is another logical operator that we have discussed from the previous videos okay so greater than equal and then of course less than and of course we can output here like minor is not allowed okay that's because the age of the customer is less than 18. and the general rule when it comes to bar as minors are not allowed so basically what we're doing here is very simple program for that particular bar okay now we can try to run our program we can just you know um build okay and then we can run our program and we have we can enter the age of the customer so for example the age of the customer is 18 so the age is equal to 18 okay so as you can see this is the only output or this this is the only statement that has been executed the age equal to 18 because the other one uh the other condition is not being met or not evaluated to true okay because uh the age is equal to 18 and of course this is um greater than 18 and of course this is less than 18. so we can try another one so for example the age is um 19. so the age is greater than 18. and of course again this is the only statement that that has been executed because it the condition evaluated to true this is evaluated to false because the age is not equal to 18 and this one is evaluated to false also because uh the age is not less than 18 okay so you can try this one more time to check for the for example the age of the customer is 16. so the output is the minor is not allowed okay that's the practical way of using if statement in c programming language we're going to talk about if else statements and of course we're going to uh discuss also the nested if else statements in c programming language now from the previous video we have created a simple application so we have assumed to create an application for a bar or establishment and then that particular program will ask for the age of the customer that is trying to enter the premises of the bar and of course we ask for the age right and we check for the age if it is greater than 18 then we display the age is greater than 18. and if the age is equal to 18 and we also displayed the age is equal to 18 but in case that the age is less than 18 then we print that minor is not allowed so basically guys this is a good um program but we can you know upgrade this this is not when it comes to code readability and code maintainability this is not a good practice when it comes to you know checking a variable or a certain value of a variable so now let's just remove this lines okay and of course we have this first condition if and then we check for the age of the customer which is you know 18. so if the age is greater than 18 we display um the age is greater than 18. so i uh as i've said we can take this further by adding else statement right here so basically the if else statements in c is also used to control the program flow based on some condition and the only difference is it used to execute some statement code block if the expression is evaluated to true so it will try to execute this particular statement if this particular condition is true otherwise it will try to execute the statement of this particular else code block okay so in here we can try to display printf the age is less than or equal to 18 okay so as you can see um if we try to evaluate this so if age is greater than 18 so for example you have like 19 or you inputed 19 then of course automatically it will execute the statement that the age is greater than 18 right now basically if we try to input 18 so 18 is not greater than 18 so it will try to execute the code block or the code or the statements inside this else code block because the condition right here returns false okay because 18 is not greater than 18 and uh there you go it returns false okay now we can also add another condition right here so for example we want to check if the uh age is equal to 18 okay we can check if the age is greater than 18 and of course we can also check if the user or the age is equal to 15 and then otherwise it's it is less than 18 and we can add another else statement right here but for now let's just you know add the another condition or condition evaluation test expression if the user or the age is equal to 18. okay so basically this particular statement if this particular condition right here is false then it will try to evaluate one more time with this particular condition is the age equal to 18. so if that particular age is equal to 18 then we can display the age is equal to 18 right there but in case if the age is less than 18 we can also add the else statement right here and we can display that the age is less than 18. okay so as you can see we have you know implemented a practical implementation of if else statement and we can add you know the first if uh condition and then we can add another condition else if and then we can test this condition right here otherwise if these two conditions are returning false then we can you know execute the statements in this particular as block okay so we can try this we can run our program uh build and run so let's try first the possibilities so for example the customer or the enter the age of customer for example 25 so the age is greater than 18 so let's try to run this once again we can try to input 18 so the h is equal to 18 okay so this particular condition right here returns true now we can also try to input the value which is you know less than 18 so for example 16 and then of course the age is less than 18. okay so as you can see in this particular example there will be only one um block of code that will be executed so so for example this one if this will return true the age is greater than 18 then it will execute this statement right here or inside this ifs block then it will ignore the other like the else if and the else now if it will return false then it will try to evaluate the expression inside here and if it is true or it will return true then it will execute this statement and ignore the else if all of this statements or conditions here will return false then the else statement will be executed okay and it will you know try to print the age is less than 18. now there are cases that we need to check also for example inside this if statement we want to check if um the age is less than 25 okay less than 25 uh although we have like the h is greater than 18 we want to check also if the age is um less than 25 so we could add also if statement right here so this is like what we call nested if else statements okay nested if else statement so we can also check here if age is less than 25 okay and then we can display here print f and then the age is greater than 18. what less than 25 right less than 25 and of course we can also add else statement here or else if like for example else if the age is greater than 25 then we can say here printf the age is greater than 18 and greater than 25 so there are cases that you want to check this you know if you want to like in the future you want to implement an application and you will try to check the values and somewhere in your code you need to check like the value age here and also you can also check if the value is less than 25 or greater than 25 so it is very useful when it comes to programming this particular nested if else statement so let's try to run this and before that i'm just going to add a backslash n right here so that we will have a new line after this particular code execution so let's try to build and run our app first and try to input a value that is over 18 so for example 23. so the age is greater than 18 and there's another statement that has been executed right here the h is greater than 18 but less than 25 we can also you know run this once again and input 26 so the age is greater than 18 and there's also a statement here the ace is greater than 18 and um greater than 25 okay and that's how you use the if else statement or yeah if else statements in c and then of course if you have like many conditions that you want to check so you can also add another conditions right here okay and then another condition and um otherwise if there if these conditions are not met then you can display or execute the statement inside this else code block okay now uh the nested if else statement requires only one if okay so you can't use like uh two ifs here because it will try to separate the uh chain of if else if you use another if so what you can do is uh one if and then else if else if and also one else statement so it doesn't matter how many else if statement that you can add okay for as long as it is like has one if and has one uh else statement so we're going to learn how to use ternary operators in c so basically guys the ternary operator is used to execute code based on the result of a binary condition so when we say ternary operators it is used to execute code based on binary condition okay and it takes in a binary condition as input and which makes it similar to an else control flow block so so for example guys from our previous tutorial we have discussed how to use if else statement okay so we have this kind of structure so for example we want to use this structure or code to get the maximum two values or two variables so if you want to like return the max value all you have to do is compare the two variables a and b so so for example if a is greater than b then of course a or max will be assigned to a otherwise the max number will be the value of variable b okay so the ternary operator guys instead of using if else like this this is too long for a simple you know checking of value condition so the binary or ternary operator uses only single line or we can use the ternary operators in a single line and it returns a value so behaving uh similar to a function okay so let's try to see the syntax of the ternary operators in c so basically the syntax is like this um result and then binary condition and then you have to add the question mark and then you have like the value when the binary condition is true otherwise the value of uh you know value to be returned if the binary condition is false so we have to take note guys that the ternary cannot be used to execute code so it must be either returned in a function or set equal to a variable so you cannot use this like something like this so you cannot leave your ternary operator like this so it should be equal to or be set equal to a variable okay something like this or you can use it as a return in a particular function okay so let's try to implement a ternary operator so for example you want to check the max value so the long version is this if a is greater than b then assign the value of a to d max and then otherwise assign the value of b to the max variable so as i've said we can you know make this a little shorter by using the ternary operators so in order for us to do that we just need to um so for example get the variable max and then the binary condition is a is a greater than b okay so we can add the question mark there you go question mark and then the value to be returned if the binary condition is true so of course if a is greater than b then the max value is a right otherwise the value is b or the return or the max value is the value of variable b as i said guys this is the explanation of conditional or ternary operators in c so we have this variable and then we have the expression or the condition and then you have to add the question mark and then the value if true so it will return the resultant value into the variable and it will assign this value to this variable otherwise if the expression is false then the resultant value of you know the false then it will be returned as the value of the variable that we have added okay so we can check this right now we can remove this this is the long version and we can try to print this display the result the max value is and then format specifier which is we're using in so percent b and then of course the maps variable okay let's just remove this so clean and build or build and run our application so let's try this uh oh um we don't have like the value for a and b so let's try to assign values to this variable so for example a equals 15 and b was 16 okay so clean and build our application and we'll try to uh get the output so the max value is 16 okay so we have here the b variable 16 so that's the value of max variable that is being assigned because this particular condition returns false so that's why the value of b variable is being assigned to the max variable so we can also try this uh with the other um you know if the a is greater than b so like 20 so obviously a is greater than b so let's try this except this for now and then build and run our application so let's try this so there you go the max value is 20. so this condition returns true because a which is the value is 20 and that's greater than b because b is the value is 16. so it returns the value of a so like this so it ignores the second part which is the b because it returns true and then of course after evaluation the value of a is being assigned to the max variable that we have here so it printed out that the max value is percent d and then which is 20. so let's try let's try this one more time just so you can see the output so the max value is 20. okay so this is quite useful if we only want to check a certain value so like if you're planning to use if else then you might want to use the ternary operators which is like this so it will just save you time it will save you of code space and i think it's clear rather than using the f and else statement so this is pretty straight forward when it comes to checking the value and assigning the value to the max variable okay so you just have to remember that it cannot be used to execute code you just have to set this equal to a variable or you can use this as a return value of a function okay so i hope that's clear and i think that's all there is to it for this tutorial guys and if you have questions please let us know in the comment section below thank you for watching and see in the next video