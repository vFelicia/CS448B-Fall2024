hi guys in this video we're gonna learn how to run a test cases which is a synchronous process and we're gonna also configure our J's library because when I would like we are running it using NPM taste whenever the test cases are fulfilled or fair it's going to block out it's going to return to this command prompt so let's see how can we do this so in our package dot JSON just in our here in the script in the script in here the taste we are just gonna write chest space test a swatch what it will do like it will run as a Nordmann in here so we are gonna just run it npm test and in our math dot test Egeus we're gonna see how can we use a synchronous process in here so in here you can see in our command prompt let's say i am going to qu moved here so in here you can see let's so press W to watch more and here you can see that all the options are here like to run all the tests we can use a to run only the Freddy test you can use F and these are other options and you can see in the documentation if you want to so if we type a it will down again all the test cases and if you want to see only the frailties as a student you can use F so yeah that's how we can use the just as a as to restart function couple now we are going to see how can we use a test a synchronous process we can use here so let's see so test a synchronous let's see a sink and we are using callback here and in here uses when you set timeout set timeout and we're gonna call back and we're gonna call back and let's see give two second so 2,000 milliseconds and here we are just going to use the expect so if let's say it is wrong let's say aspect 1.2 b2 which is a failed test cases but now if we run it just save it here and it is going to run in here and you will see that it here it has been passed well it should not be passed because it is a failing test cases so that's why it is giving an error so how can we do this how can we collect this so in here the test file just like we give one say to give an argument and let's see you can give any argument Indian I'm giving them done in the previous like in the rest API we are using the next value for the next argument as a middleware so in here we are using done and in here done it says like whenever it's reading to a turn like whenever see that done argument then it's going to be like see that all the test cases has been passed so now in here you can see that it is giving an error and it is saying it expected to but received one so this is some small thing that we can do but we are using I think of weight for a proper use so this is not how we are going to use so first of all we are going to let's create one promise function in here so we're gonna use add function in here as a promise and we're going to argument I said a B and what it will return it will return a promise so if we use return new promise and it it is taking two argument that is resolved and preset and yeah now in here we are going to set per set they are not which will take let's say two second and here we are just gonna say that if a is less than zero or B is less than zero then we're gonna reject means it is going to be fair to reset new error number should be so to be nonnegative which is not if it is negative so if it is true then if it is it means it will not give any error and we're gonna resolve it to give some resolve a plus B so this is our promise function and we know that it is going to give twelve cases we'll test cases where you cannot just uncommon topped comment out and we are going to just create a new test cases in here and let's say give the name suit Ric turn son of to number so in here we're gonna use the done function here first we're gonna see the primitive one like we are going to use the done and and in here we're just gonna call the function in here so what it will return means we are gonna use the Dan function to add we're gonna add in three and two and then we are calling tan which will give the sum and what we expect we expect some dot to be five yeah we are expecting s to be 5 now if we run it it will not give any error because we haven't used to done function in here yeah you can see that it is not giving an error oh yeah yeah just to use W and just use F in here yeah it's giving an error so we are gonna use the done here and now if you run it you can see in here that it has passed all the test cases suit calculate total tips would calculate all the solutions sum of two numbers now in here this is the oldfashioned way we are going to use the async await function so how can we use this so same thing we are going to use we are going to see in here that it's then assessing function in here and also also there is no need for this no there is no need food as in turn and we are gonna just because it returns a promise then we're just gonna use expect Const sum is equal to we can use in here away from same India and they use the add function here and used to ten twenty and we know what it will return it will return to expect some dot to be thirty and now if we run it we can see in here that the test cases has been passed and we are using that I think a bit function and we don't need a turn in here just as a argument in here