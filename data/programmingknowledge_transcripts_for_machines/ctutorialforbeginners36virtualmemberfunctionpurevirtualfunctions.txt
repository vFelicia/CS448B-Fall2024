hello guys welcome once again in this video I'm going to teach you what is a virtual member function and what is a pure virtual member function but before uh showing you how uh this virtual member function and how to declare this virtual member function I must recommend you that you must know the basic concept of polymorphism in order to understand this virtual function because uh this virtual member functions are generally used whenever you are are using polymorphism so I have uh shown you how to use polymorphism in the last video if you don't know what is polymorphism I have shown that in the last video so please watch that and I'm going to take the same example from the last video in order to demonstrate this of virtual member function so in the last video I have defined uh Base Class which was which I call it as a shape class and what my purpose was is I wanted to calculate the area of different shapes so I have this Base Class called shape and this was uh this uh shape class which is my Base Class have these member variable height and width and have these uh this uh member function called set values and what this is doing this is just do doing this this is just setting the values of width and height here right and I also defined a derived class which I call rectangle and which is inheriting from this shape class and this has only one function called area and this what this was doing this was just calculating the area of rectangle by multiplication of height and width and if you know when you are inheriting from a class it's member functions are available in the derived class if they are private or or if they are public or protected members right in a similar way I have defined this triangle class to calculate the area of triangle and I was inheriting from my shape class and this triangle class also had a function member function called area and I was calculating the area by multiplication of height and width divided by two and the let's see how virtual function work so first of all what is a virtual member function a virtual member function is a member function that can be redefined in the derived class okay so let's see how we can define a virtual member function uh one more important thing is you can define a virtual function or virtual member in your base class only okay so my shape class is the base class so I can Define the virtual member function here so how you can Define you just need to use the keyword virtual and then the normal definition of a member function for example I want to call my function as a area so I will just Define the function called area which takes no argument and it returns returns zero for example okay so this is how you can declare a virtual function and what is the use of defining this virtual function so if you define your member function as a virtual function in your your base class you can provide the redefinition of this function in your derived classes so I have this uh virtual function called area I can provide the redefinition of this uh virtual function in my rectangle class by the name same name area like this and I can even Define the same or redefinition of this function in my triangle class by redefinition I mean the name of the function is same or the Prototype of the function is same but the implementation is different for different classes or the implementation is depending upon the class in which it's defined okay so the Prototype is same which is int area and the definition is different in the case of rectangle I was calculating just just height into width and in the case of triangle I'm calculating the triangle area by height into width divided by two so the basic use of virtual function in the base class is just to tell C+ plus that we have defined this function as a virtual function because we want to redefine this function in my derived class and I want to read redefine the definition of this um virtual function in my derived class according to the requirement of the derived classes and this virtual member function you can use as normal virtual function whenever you want to use it in the main class so for example I declare a uh instance of this poly uh by the way this uh code I have written in the last video right if you remember remember uh and I have defined the instances of my derived classes rectangle and triangle like this rack and try and this I have also defined the uh instance of my base class which I call it poly right and according to the polymorphism concept I can point to this uh derived class using my Base Class like this so I can define a pointer which uh has the reference of my derived class object okay in a similar way I have done uh the definition of this triangle derived class also and in a similar way I can point to my Base Class also so this is the instance of uh Base Class which is pointing to the base class itself and I can set these values set values which I have defined in my Base Class you can see which set the value of width and height here and then I can calculate the area of uh the specific uh member or specific class for the specific class so rectangle gives the area of rectangle triangle gives the area of triangle and po poly gives the area of polygon which I have defined and I can compile it and I can run it it gives the area like this so the area of um rectangle is 200 which is 10 into 20 rectangle uh area of triangle is 100 which is 10 into 20 / 2 and area of poly is zero because we have defined virtual member function which was returning zero here right now this is about virtual member function now what is a pure virtual member so a pure virtual member uh is a member which have no definition so right now I have defined a a virtual member function like this uh and this is returning zero here that means I've provided some uh definition to my function but if you want to uh tell that this is a pure virtual function you don't even provide any definition here and how you can say that this is a pure virtual function you just need to assign zero to this function and then this uh tells this type of Declaration tells C++ that this is a pure virtual member function and what is the speciality of this pure virtual member function uh the speciality is you don't even have to give give the definition to this pure virtual member function in your base class you can redefine this um uh virtual member function in your derived classes like this okay so this is a short way of uh telling uh C++ that you have this function in the base class which you want to redefine in your derived classes according to the requirement of the derived classes so you can do it like this this is how you can define a pure virtual member functions okay now suppose for example I don't give the definition here uh of this pure virtual member function okay and I don't calculate the area of this rectangle also for example and what I'm going to do is I'm going to compile my program so I compile it and it gives me the error okay and why it's giving me the error because it says cannot declare variable poly to be the abstract type shape so this error is coming because I haven't Define or I I haven't given the definition of member function or pure virtual function area in my rectangle class so this is the Restriction of pure virtual function if you define a pure virtual function in your base class you need to redefine the definition of this uh member function in your derived class otherwise it will give the error okay so I haven't uh redefined this area member function in my rectangle class which is deriving from the my shape class so this is throwing an error or this will give the compilation error right so I have to give the definition of uh this member function virtual member function area in my derived class otherwise it will throw an error so once again I will define the definition here and once again I compile it and it will run fine I think let me see and once again it's cannot declare variable poly because it's abstract type let's see yeah so once you have this you you know once you define your function as a vir pure virtual member function it makes your class as an abstract class and what is the abstract class abstract class is a normal class but the speciality of the abstract class is it's just the definition of the class so abst class are something very similar to uh our shape class and Abstract classes are just the definition of the member function and no implementation is given here okay so we haven't given any implementation of uh the area function so we cannot Define this object here this is true and once again compile it yeah yeah I need to remove this also and this will not give me an error okay okay so always remember that if you define your member function as a pure me pure virtual function this makes your class base class as an abstract class and abstract class is a class which have only the definition okay so not the definition but the prototyping definition you provide in uh the derived classes okay so notice that uh our area here has no definition okay okay so I hope you have understood the concept of pure virtual function and virtual member function and I hope you have enjoyed this video please RIT comment and subscribe and bye for now