c programming language is considered as the mother of all programming languages present in the software industry anywhere you go c programming language is the most basic and very important aspect which the recruiters are looking for hi this is john from programming knowledge and welcome to this video tutorial series where you will learn how to go about programming in c language in this tutorial we will discuss mostly the important parts of c programming language so these are the topics that are included in our c programming language tutorial series so firstly we're going to discuss the history of c and then to be followed by the installation of c so i'm going to guide you through all the steps needed to start about programming in c programming language to be followed by data types and variables of course we're going to discuss the importance of data types and variables in c and to be followed by c tokens to be followed by preprocessor directives and of course we're going to learn the how to write our first program in c programming language and of course to be followed by control structures so as we all know if you are coming from other programming language you already have knowledge on control structures so we're going to discuss that right here and then of course loops we're going to discuss loops and then pointers and to be followed by functions and then we're going to learn about escape sequence in c and after that one will be the data structures and of course we're going to discuss strings followed by structures and union to be followed by memory allocation and lastly is the sorting algorithms so we're going to discuss that also in this particular tutorial series so now let's talk about the history of c language so history of c language is interesting to know here we are going to discuss a brief history of the c language c programming language was developed in 1972 by dennis ricci at bell laboratories of acnt or american telephone and telegraph located in the usa dennis ricci is known as the founder of the c language it was developed to overcome the problems of previous languages such as b dcpl and other languages initially c language was developed to be used in unix operating system it inherits many feature of previous languages such as b and bcpl c was originally first implemented on the dec pdp 11 computer so pdp 11 is a series of 16 bit mini computers sold by digital equipment corporation from 1970 into the 1990s c programming language is known for its flexibility and versatility allowing maximum control with minimal commands so now let's talk about the features of c language c programming language is the widely used language and it provides many features that we're going to discuss in this particular video number one it is simple c is a simple language in a sense that it provides a structured approach to break the problems into parts number two machine independent or portable so unlike assembly language c programs can be executed on different machines with some machine specific changes therefore c is a machine independent language three midlevel programming language although c is intended to do a lowlevel programming it is used to develop system applications such as kernel driver and others it also supports the features of high programming language that is why it is known as midlevel language number four structured programming language c is a structural programming language in a sense that we can break the program into parts using functions so it is easy to understand and modify functions also provide good reusability number five reach library see language provides a lot of builtin functions that make the development faster number six memory management it supports the feature of dynamic memory allocation in c language we can freely allocate the memory at any time by calling the free function number 7 speed the compilation time and execution time of c language is fast since there are lesser built in functions and hence the lesser overhead number eight pointer c provides the feature pointers we can directly interact with the memory by using the pointers we can use pointers for memory structures functions array and others number nine recursion in c we can call the function within the function it provides code reusability for every function recursion enables us to use the approach of backtracking number 10 extensible c language is extensible because it can easily adapt new features now that we're done talking about the features and history of c programming language we can now go to the installation of c in windows operating system now there are multiple ways we can install c programming language in our computer system so the most basic way is to install turbuc in our computer system also if you're familiar with the eclipse ide you can directly download gcc compiler and include c nature to our eclipse ide and continue working on executing c programs as i've said guys there are multiple ways of installing c program into our computer system and one way of doing it is to install torb turbo c plus plus or you can use the eclipse ide and then include the gcc compiler and also you can do it online there are more there are many platforms that can help you develop c program online and then one way of doing it is also installing code blocks so if you go to your browser and try to search for code blocks and then this is the first link that you will get and it will redirect you to codeblocks.org and code blocks is an ide that will help us to write programs especially for c c plus plus and fortran ide the good thing about code locks is it is a cross platform in open source meaning we can use it freely to develop our c programs so the first thing that we're going to need guys is to download this of course in order for us to install and start writing or see programs so there are two options here we can download it from this link and of course we can also download it from this particular link here so let's just try this one the upper one and then there are options to download the binary release we can download the source code and we can also retrieve source code from svn okay the first thing that we're going to need now is to download the binary release okay you could click on that and here we can see that we can install it on windows xp vista windows 7 windows 8 and windows 10 and we can install it also in linux operating system be it 32 or 64 bit and also you can use it on mac os x and because we're using windows operating system for now so let's just click on that and then here we can see all the options or all the links that we can download the code blocks we can download only the setup we can only or we can also download the nand admin no setup and then we can also code blocks with this main w setup so if you want you can download this particular one code blocks and then the current version is 17 point child bing w dash setup that xesa and then we can download it from sourceforge or fast hub so try that and then let's just wait for the download to complete in order for us to install this particular ide and then after installation of course we can write our first program in c programming language so currently it is 86.2 mb and then we're just going to wait for a few seconds for the download to complete and i think it won't take that much time and we're halfway there there you go so we can just install this particular ide so click on this and yes next i agree and then we don't want to touch anything here if you are an advanced user you can try to modify the installation but for now since we're beginners let's try to click on next and then install this is the destination folder and then install so there you go installation is complete so do you want to run code blocks now of course yes so gnu's gcc compiler has been detected so that's okay and file associations we are being asked here if you want to associate cnc plus plus files for this particular ide so yes associate code blocks with c or c plus plus files and then okay so there you have it we now have the installation of code blocks and so for this particular video guys we're going to talk about our first program or c program so basically we also discuss how to install code blocks and here you can see i'm using code codeblocks to create our c program okay so here we have the basic basic program or basic c program okay and before that we or i'm going to show you how to create project here in codeblocks ide so the first thing that we're going to need is to create a project so instead of using this particular file test that c we're going to close that and then create our new project so let's go to file and then new and then there's an option here for creating our project so basically all we have to do is select here the type of application that we want so for example we're going to just create a basic application or basic c program so let's try to find that here in this options so we're going to select the first one which is the console application because we're going to start with a very basic application say go and then x so it should be c project title will be programming knowledge tutorials and then let's just uh select the actual directory to you a directory to use so let's just say the documents and then we're going to um create a new file here or a new directory see projects then okay and then next and then we don't want to mess around here so just basically finish the research for now so finish so we have here our project programming knowledge tutorials and we have here the sources and by default it created this particular file main.c so as you can see we have here some parts or prepopulated code for us so we have the very basic structure of a basic c application so if you try to run this let's just let's just try to run this first before we go any further with our tutorial so let's just run and then it uh it will ask to build our project so of course yes and then there you go you can see here uh the hello world tax so basically what this program is doing is just printing hello world string or text into our uh monitor or this particular console so press any key to continue or you can just close this particular command prompt okay so uh let's uh if you want to make the text or the code bigger you can just control scroll by using your keyboard and your mouse of course so i'm just going to make it bigger so that you will uh you will be able to see what uh what i am doing here with our project so first i'm going to discuss first the parts of this particular program or basic program c so basically we have the lines one and two so basically it is the like import statement of this particular program so it is basically uh saying that we need this files and we need to include this in our new program or new file main.c so we have here the include and then stdio.h and include std lib.h so basically these are header files okay so these are files and we need uh functions from those files so for example we have here the functions printf here so this particular function is inside or can be found in stdio.h file okay and here we also have the uh in main as you can see here so the in main is the main function this is the entry point of every program in c language so in normal terms it is basically the entrance and every time we run our project it will try to find the main function of our uh project so it should have like one main function for in in order for us to run our program so in main so basically it says that the return type is an int and then everything inside this curly braces open and close curly braces is part of this particular function main and we have two lines here so printf and then semicolon and then return zero and then semicolon so these are the lines of our uh in main function so in order to terminate a line you need to add semicolon at the end of that particular line so just like this here and of course just like right after this return zero so now i'm going to explain what this function does so the printf is a function used to print data on the console so basically we're just selling our program to output hello world and then it should return zero so return zero statement uh it means that the return execution status of this particular program and the zero value is used for successful execution and one for unsuccessful execution so let's try to run this again anyway you can just run or build and run your project or you can just run it by pressing this particular run button okay so as you can see here we have this particular string or output hello world and if you try to add a new line for our program printf and then everything that we want to display it should be inside the double quotes okay c programming is awesome okay and then of course we need to end this uh and this particular line by adding the semicolon at the end and then save you can just build and run so as you can see here hello world and then ce programming is awesome so notice that we have added this particular character here backslash n so we're just telling the program to add another line or to go on to a new line after printing the hello world or the hello world string this one and let's try this also for this particular second line and build and run okay so as you can see after uh printing the c programming is awesome it added a new line here which you can see as a space between c programming awesome text and process return zero so there are others there are other texts or other keywords also for this instead of using slash or backslash n you can use box slash t for tab or for tabbing so let's try that save and then build and run so as you can see there is a significant space between programming word and the word is so this will come in handy if you're trying to work with like uh tabular data so uh backslash t will be uh like very useful for you because it will format the columns for you and as i've said it will be a great help so the next uh thing that we want to talk about is the order of execution in every c program so basically if we have like four lines here to print something in our screen like this so as i've said in c program it is executing in order line by line so this will be the first one or the first line to be executed and then the second line to be executed the third line to be executed and the fourth line to be executed so so for example try to make this two and then three where i mean three and then four let's try to build and run this so we have the output as um hello world hello to hello number three and hello number four so basically all the statements are executed in order line by line so so for example we have or we want to draw something in the screen so like we want to draw a triangle so here and then another one here and then another one just to show you these uh sequence of execution of this particular c program so right here another slash and then here and maybe here and another one another line or vertical line and also here and we need to add the new line or line break for this print statements and we can make this or i'd like the underscore and let's try to build and run this and you can see we have the triangle displayed in our screen and that means that the lines has been printed or has been executed in order line per line so if we try to make changes and instead of placing it here let's space it before printing the first line so the output will be like this a funky looking shape that's because we execute the first statement to have like the forward slash the underscore and then the vertical and that's why we have an output like this so just bear in mind that in every program it is executing line per line okay so now let's try to discuss placeholders okay placeholders for different data types so there are in programming there are types or data types that we want to work with so for example string we have characters we have integer we have float and other data types so for example you want to display string you just have to like say hello world and this is this is a string let's just remove this okay save and run and build so we now have like the output of our programming low world this is a string but if you want to try or if you want to print a number so so for example 32 so let's try this run and build and as you can see we have um return negative 10 7 3 4 8 1 or 1 8 and 1 9. so basically what this means is that there's something wrong with our program because as i've said before zero it should be the standard or the return if the program uh runs smoothly or there's no there's no problem while running our program so basically here we have negative so it means we have problems right and we can see here that um note expected constant char but argument is of type in as you can see here so uh basically we cannot directly display number by using this so we can use placehold a placeholder for that so this will be for our placeholder so instead of using directly 32 here we can say percent and then d so d is for integer so if you want to display integer you might want to uh use the percent d placeholder and then inside this printf statement you need to add the comma and then of course the value that you want to be printed so percent d and then comma and then the actual value that you want to be printed so let's try that build and print or build and run and as you can see here process return 0 and then we have here the value 32 so let's try this one more time backslash n build and run and here we can see uh we can see clearly what is happening here so hello world this is a string and the value 32 so that's the purpose of percent d is a placeholder for an integer value another one we have for large integers so for example there are like a very large number a very large integer the keyword for that or the placeholder for that is ld which stands for large integer okay so for example we have like um very big integer right here okay so that's the placeholder percent ld and then of course we also have four decimal values or float values so for example you want to say 32.5 or yeah 32.5 this is for again decimal or float value okay let's just say float value here so percent f percent d for integer percent ld for large integer percent f for float number and another one for large float okay so this will be for large float and then another one for so for example you want to display a character and you want to display like letter a so the placeholder for that is percent c and then the actual value that should be uh type in inside the single code characters so this will be for a char or character and then another one is for the string so so for example you want to display hello world this is a string and then you want to display that you can also use percent s for the placeholder for that so you can say hello from printf okay so this will be for our string so basically string is just a series of characters meaning uh string is just composed of several characters so for example this one hello and fro from and so on so you get the idea but basically all these placeholders can be used to display different values or different types of values the integer large integer float large float character and string so let's try to display this and maybe add the backslash n here and here also here here here and here so build and run there you go you can see here the output of our program and we did not specify directly the values of this um figures so instead we're using printf and then the placeholder so for example percent d for integer percent d for large integer and so on and in this tutorial guys i want to talk to you guys about variables in c now when we're using c programming language a lot of times we're going to be dealing with data so there's going to be different data values or different information that we're going to want to keep track and use inside of our programs and sometimes it can be difficult to maintain and keep track of all that data and that's where variables come in so basically variable is essentially a container where we can store different pieces of information so different data values we could sort of things like numbers or texts or characters and these variables make it a lot easier for us to keep track and manage all the data in our c program so i'm going to show you guys basically how variables work or how variables can be useful and how we can use them in rc programs but down here i have a very basic program so i'm basically just printing out a little story so it says there once was a man named mike he was 50 years old he really liked the name mike but did not like being 50. so this is a simple program we're just printing out a bunch of different lines of text and then when i run this program you'll see we print out the actual story so over here we have the actual uh story and this is great okay but let's say that i'm reading through my story and i'm reading through my program and i'm thinking to myself i think i want to change the character's name so instead of calling the character mike why don't we call him like john in order to make that change so i'm gonna have to look through my entire program and find every place where we mention the character's name so right here is one so change it to john and remember keep looking here and there is another one so we'll change this to jen right so i had to manually go through and change every instance of the character's name to john so let's say that's okay that's uh that sounds pretty good but maybe i'm thinking i want to make the character a little bit younger so instead of like 50 years old so let's change it to maybe 30 30 years old instead of 50 years old okay we're going to change hit here he was 30 years old and also in here last line of our story so that's 30 instead of 50. if i was to run this program then all that information will be updated and will now have new story okay so here's the problem though i'm dealing with a very short story so i mean this is four lines we only mentioned the characters age and name only twice but imagine if i have if i was writing out a huge c program that had hundreds of lines in the story so story had hundreds of lines and maybe we mentioned the characters name hundreds of times they mentioned their age hundreds of times and if we wanted to change the character's age or name i would have to go through and manually change it every single location and that would take forever and it would be a huge job for us to change all the instances of the name of our character and also for our for the age of our character so basically that's not a good way for us to manage and maintain the data for our programs okay uh basically we have two pieces of data that we're working with and consistently in this program the characters age and the characters name what i want to show you guys now is how we can use variables to better keep track i mean manage these pieces of information so remember a variable is basically just a container where we can store some data so i want to create two variables which will store the character's name in the character's age and i'll show you guys how this can make our program a lot easier to manage up here before the print statement i'm just going to make a new line and i'm going i'm going to come over here and i'm going to create a variable now whenever we create a variable in c we have to see a couple of a couple pieces of information the first thing we have to tell see is that what type of information we want this variable to store now i'm going to get into the different data types that we can represent and see more in the next tutorial but for now just know that there's a bunch of different types of data that we can store and see can see we can sort things like numbers characters we can store text we can start decimal numbers all sort of all sorts of stuff like that in our case i'm going to store the character's name in the characters uh age basically just a collection of characters so in order to create this variable the first thing that i have to see that i want to create a variable that's going to store some characters and to do that i'm just going to type out char here just like that and basically telling c we're going to store characters in inst inside of this variable so after we type out chart i want to type the name of the variable that i want to create remember that a variable is a container and it's a good idea for us to give these containers descriptive names and those names will basically let us know what that variable is storing inside of it so i'm going to call this character name now what i want to do is basically i want to store multiple characters so over here we're telling c that i want to store a character but in c we can also store instead of just like uh instead of just storing like one single character we can store a bunch of characters and that would be kind of like you know name so there's like four characters in here so in order for us to store a bunch of characters inside of this particular variable after we type the character variable name we're gonna have to make an open and close square brackets and that's gonna tell c that we want to store a bunch of characters inside of this part particular variable so char character name open and close square brackets um i'm gonna set this equal to something so i'm i am essentially assigning a value to this particular variable and i'm just gonna make an open close quotation marks so equals and then quotation marks and inside of here we're gonna type out the value that we want to store so in my case i'm just going to store the character's name which is john and then as always in c we're going to have to end this off with a semicolon so all right uh basically what i did here was i created a variable and i told c that i want to store in the variable i wanted to store a character and i gave this variable a name character name and then i use this open and close square brackets to tell c that i wanted to store a bunch of characters not just one now what we can do is we can make another variable to store the character's age so in this case we're gonna do something similar but we're gonna want to store a number and there's a bunch of different ways that we can store numbers in c but for our purposes we're starting age so we're going to use something called an integer and an integer is basically just a whole number so i'm just going to type out in here in and that basically stands for integer and now we're going to give this name so i'm going to call this character age and i'm gonna set this equal to a number so in our story the age is 35 so i'm just gonna type out 35 there and now we can again end this off with a semicolon so i have here two variables this one storing the character name and this one is for our age now the question becomes how we can use this inside our program well basically what we can do is we can print them out alongside with with this text and we can actually use this printf function in order to do that so i'm going to show you guys how to do this and then we're going to talk about it so basically i'm going to go over here and as you can see we have here the character name which is john okay so we can replace this with percent s so percent s is basically a placeholder so after this um we're going to add comma here and then we're gonna add the character name variable so basically we're telling c that we're going to print this particular text and percent s is just a placeholder that will auto automatically be replaced by the value of our variable character name so we have uh the first instance of the character name and then right here we also have we also need to replace this with percent s and then add comma and then character name because we want to replace that with our value of our variable character name which is john and of course like here we also need to replace this with the actual value of our character age so what we can do here is just we can add percent d so percent t is also a placeholder for printing the integer uh so this is like integer integer character h equals 35 and then percent d and then we're gonna add comma here so and then character h the same thing here character age and then we're going to replace this with percent the placeholder for integers so if we try to run our program so let's do that build and run and we will we should have the so we have a process return so i think we have something where we have an error with our program so let's try to debug this so warning format as expects per uh argument type of character but argument two was typed in that's basically because we didn't add the square brackets there so build and run so there you go uh we have now the output there one other ones was a man named john he was 35 years old he really liked the name john but did not like being 35 and of course every time you can if you want to change something with this story so for example instead of john we will say michael and we can change also the age like 40 and then exceed that and then build and run so as you can see here we now have the updated um story so michael and then 40 years old so the good thing about variable is that we can reuse this into our entire program so we have every time we have changes here all the variables or all the value should be reflected in our the rest on our program so in in our case we have updated all the values for our story and in this video guys we're gonna talk about variables and of course we will have a deeper um discussion on how to declare initialize and assign values to our variables so basically guys like most programming languages c uses in processes variables and in c variables are just like human readable names for the computer's memory addresses used by a running program so basically guys the advantage of using variable is it is making our life easier to store read and change the data within the computer's memory by allowing the or by allowing us to associate easy to remember labels for that particular memory addresses so at first it is easier to imagine that variables are just placeholders for values much like in mathematics so you can think of a variable as a as being equivalent to its assigned value so for example if you have a variable that is i and then initialize or set equal to for example four so by that you can say that i plus one will be equal to five so there you go so uh now let's talk about how to declare a certain variable in rc program so basically all we have to do guys so for example if we try to declare an int or is it for example in and then some number okay and then you have to end it with a semicolon that signifies that it is the end of this particular line so this statement tells the compiler to create a variable called sum number and associate it with a memory location on the computer so we we're also telling the compiler that the type of data that will be stored at that address and in this case it is the int we have to remember also that in c we must specify the type of data that a variable will store because it will tell the computer like how much the total memory to set aside for that particular variable or set of data something like that now you can also declare multi variables in one statement just say for example in n1 and then you have like n2 and then n3 and then end it with a semicolon to signify that it is the end of this particular line so that's basically how to declare a variable so you can do it like this and if you have like multiple variables to declare you can just do it like this for as long as it is the same type okay so in n1 and then n2 and n3 so we're just telling the compiler to declare this particular variable and all of this variable um the type is int okay and of course you can assign a value to that particular variable later on using a statement like so for example sum some number equals to 3 okay so basically this is the declaration of our variable sum number but this this is the assigning of value so we're just basically assigning value three to our variable sum underscore number so the assignment of a value to a variable is called initialization so we're just basically initializing the value of this variable some number equal to 3 or something like that and of course you can just maybe you you can uh declare initialize and assign value at the or in one line or something in the same time so in age equals to 4 something like that so you can declare the value or the variable and then assign value to that particular value variable so okay and of course you can assign variables to the value of another variable so it means say for example n1 you can assign the value of age into this by just using the variable age something like that or you have to modify it with like add 10 okay so age and then plus 10 or something like that and if you want to display this all you have to do is use the function printf and then you can say the age is percent d and as you can remember this is the placeholder for in so percent d and then you have to specify the variable so for example n1 so let's try this add semicolon to this so compile and run so the age is 14 so that's because the n1 now holds the value of age plus the value 10 so it makes it 14. okay and of course you can assign multiple variables to the same value with one assignment so so for example n1 and 2n3 you can assign it like this so i'm just showing you guys how to assign values to this particular variable so say for example n1 equals n2 equals n3 and this should equal to 8 okay so let's try this and and as you can see the value is eight okay but if you try to display also n2 and entry it will get also the value eight so you can assign multiple variables to the same value with one statement so now i'm going to talk about naming the variables because they're in naming or i mean in c we have to remember that there are naming rules that we have to follow so one of the rules that we have to remember is that the variable name must not start with a digit so basically you can you cannot say in and then one age you cannot do that because as a general rule you cannot start your variable name with a digit okay and of course the second one is spaces not allowed in names so you can say in and then space my a you can't do that because that's not allowed in c and a dollar sign not allowed so or any special characters for that matter so only letters digits and of course semicolon allowed in our variable name and of course the last one will be the reserved keywords you can't use reserve keywords so that's basically so for example you you want to name a variable in main something like that you can't use this variable name because this is a reserved keyword meaning it is a primary keyword used by c as you can see here so now let's talk about the four major uh of four basic data types in c so there are four basic data types in c that's um int and then we have jar or characters and then float and then we have the double type okay so in is a type that stores integers in the form of whole numbers so any number that is whole so you can um say it like in age equals um 10 or maybe 11 um 20 for as long as it is a whole number so it should be a whole number between 2 billion 147 million 400 or 648 something it's negative and that's inclusive um positive for 2 billion 147 million and 483 thousand six hundred fortyseven so that's the um length of the in if you to use this particular type in so that's the in should be between that number or those numbers so the next one is the chart type so char is just a series of character or a single character so the first the the way of declaring a character or a char is you have to use star keyword and then so for example letter one equals a there you go you have to enclose it with single code and it signifies that it is a single character or something like that and of course you can have like a series of characters so for example like what we have previously char and then character name and then you have to use the uh square brackets for that motor and so for example john okay so that's basically how to declare or how to use the char keyword okay and the next one is float so basically float is a short for floating point and it stores representations of real numbers both integer and noninteger values and the way on how to declare that is by using the keyword float and then maybe you can declare it as float pi equals 3.14 something like that so you can declare your float values by using uh that keyword float and then followed by the keyword or the variable name which is for example in this case the pi which is 3.14 okay and of course we can use also the data type double if you want so double is so for example um salary equals ten thousand ten thousand something like that and basically if you want to use double you all you have to do is use this key keyword double and then the name of your variable name in this case salary and then click declare or initialize it with a double value something like that okay and if you have any doubts to the amount of memory actual actually used by any variable you can use the the size of operator to find out for sure so you can like uh use the keyword size of and then um the variable age okay so so for example for that um you can get the actual amount of memory allocated in that particular variable and in this video guys we're going to talk about the scope of a variable and of course we're going to talk about the operators in c and how we can use them so let's go ahead and talk about the scope of a variable so basically a scope is a region of the program and the scope of variable refers to the area of the program where the variables can be accessed after its declaration so basically in the c program we have like three um different um scope or different location that we can declare our variables so the first one is inside the function or a block so we have the first one will be the local variable there we go we can declare um a variable inside our function the second one the second one will be the global variable okay and of course we can also declare a variable inside the function parameter so function parameters okay so that's all the area that we can like declare the variables and set the values to it so but basically we do have like only the two that is most common although we are most of the time um setting the function parameters and declaring variables to it like almost every function but yeah the most common way of you know declaring a variable is the local and global uh local and global variable so again when we say global or local variable it is a a variable that is declared inside a particular function or a block of function so a variables that are declared within the function block and can be used only within the function is called local variable so uh this is how we can um implement this in our c program so so for example in here we're going to declare by the way guys this is a comment and the way to make comment in c program is by using the domain slash so this means this is this is a single line comment and of course we do have the slash and then the asterisk and then asterisk and then forward slash so this is multiline comment so we can like add comments in between these lines and uh this doubles double slash will be the single line comment okay so i hope you um get the idea of this comments and basically guys these comments will not be interpreted by rc program okay so as i've said we're going to discuss or we're going to declare a local variable here local variable definition in initialization initialization right there i'm just going to remove this single line comment okay so in the the way to declare a variable in c is like in or this is the type of information that we want to save so in and then so for example the variable name is x and we can do it like this y and then z so basically what we're doing here is declaring three variables of in type okay so this is the variable definition and of course we can initialize it by saying x equals to 10 okay x equals to 10 and y equals x plus five and then we can also say z equals y y variable plus one okay so that's how we can um declare a variable and initialize the value into the variable so this is the definition in x y z and then of course the actual initialization initialization which is uh right here x equals to 10 y equals x plus five and then z equals y plus one okay so of course you can always print this so for example print print f and then value of so for example z equals percent d remember percent d is just the placeholder for our integer value so the value of z equals the c variable okay and then save and of course you can compile and or build and run your c program so let's try that okay so we need to add the same column at the end of the line to mark that it is ending in this particular line so build and run and there you go the value of z equals 16 because we set the x equals to 10 and then d y equals to x plus 5 and of course z equals y plus 1 that will result to 16 okay so that's how you declare and initialize a local variable now let's go on with the global variable or global scope of a variable so variables that are declared outside of a function can and can be accessed inside the function is called global variables so so for example you want to declare a global variable all you have to do is before the in main function okay right here we can declare the global variable okay and we can declare it like int age and then we have like the semicolon at the end of the declaration okay in age and then semicolon so global variable initialization so after the um after defining a local variable the system or the compiler won't initialize the value or any value to our local variable so we have to initialize it by by ourselves like this so if we try to define the variables right here it won't have any initial i or initial value so we have to declare it like this x equals to 10 y equals x plus five z equals uh y plus one but uh global variables get initialized automatically by the computer um or as uh by the compiler and um so for example if we declare the the variable type as in then the initial default value will be zero okay remember you have to remember that so the difference between global and local variable is whenever we declare the variable in our local scope it won't get any initial value so we have to initialize it by ourselves but the global variable is initialized by default depending on the type of value that we have saved in our variable so for example it in then it will default or initial default value will be zero and if char so for example char t so the default value will be um single code and then backslash um zero and then backslash i am in single code of course when we say float load m so the initial value of that is equal to zero when we say double the initial value of that is also zero and when we say pointer uh the initial value of this is equal to null okay so you have to remember that whenever you declare a global variable there is a default value for our variables okay so as i've said global variables can be accessed inside our main function or any function so because this is a global variable right in this video guys we're going to talk about the input and output in c programming language before we dive in into operators and how we can use operators in c programming language so basically we can use the function printf to display something in our screen just like what we have before so printf and then we can say hello world okay and then we can build and run this program and we can get the hello world string right here we use the printf function for that and now we're going to talk about the input because we're we're trying to focus on the input because we're already familiar with the output side of c programming so we have used the printf to output something in our screen and then of course in order for us to ask input from the user we're going to use the scanf function okay so the way to use scan a function we can say here we can ask for a particular number so please enter a number okay and then we can um add the escape character here for a new line and we can declare a variable here so for example in a and then we can get the value from the user by using the scan f function and then format specifier for our in variable or in value and comma and then of course the n symbol and the name of our of our variable a so basically what this means is that we're taking the address of variable a and then assign a value to that address um whatever the the user has inputted okay so and then we're going to end this with the semicolon and let's try this uh let's try to display the value that uh comes from the user okay so number the number is um percent d format specifier for our uh in value and then comma and then and then the name of our variable which is a okay and then semicolon so i remember to end every time or end every line with a semicolon okay and then we can build and run this application so there you go uh the program tried uh is trying to prompt us to input a number so so for example number five so number five is or the number is column and then the value five which is coming from the user itself okay and now we can actually um ask two numbers in the same line by using also the scanf function so in here we have like uh as for a single number but what we can do is we can ask for um two numbers just like please enter any two numbers okay and then we're just going to use the same function percent i scan f and then percent d percent another percent d because we're asking two numbers and then in here we can say uh n symbol and then the value or the variable b which we will declare here on the top okay b and then we can declare another variable c and we can add the values or the numbers coming from the user so the number for the value c or the variable c we can assign a value to that which is the total of the two numbers a and b so that will be c equals a plus b so what we're doing here is that we're assign we're just assigning the value of the total of a and b into our c variable okay so the total the total number is and then percent d and of course the value of rc okay which is again the total of our variables a and b okay so save this and then we can build and run our application so please enter any two numbers for example um one and two so the total number is three okay so again like five and um three so the total is eight okay so as you can see we are getting the two numbers five and three and then we're displaying the total which is eight okay so basically that's how you can ask or you know input something into our program because our program right now is asking for a uh for an input from our user okay and that's where we can you know apply the operators in our c program and we have different operators or type of operators in c so c programming language offers various types of operators having different functioning capabilities so the first one is the arithmetic operators so we have used the addition operator right there by you know assigning the value of a plus b into c okay and then we also have the relational relational operators okay let me resize this so you can clearly see it arithmetic operators and then we have relational operators and the third one will be logical operators the fourth one is assignment operators and fifth one will be increment increment and decrement operators i'm just going to list it here so you can see all the type of operators in rc programming language so decrement operators and then we also have the conditional conditional uh operator we also have bitwise operators and then we have special operators so these are all the types of operators that we can use inside our c programming language and of course the first one is arithmetic so arithmetic operators include um it includes addition of course of course the symbol for that is the plus right and then we also have subtraction symbol for that is dash we also have multiplication and we can use the asterisk for that to multiply two numbers in our inside rc program and then of course we do have the division which is the forward slash forward slash symbol and of course we have the mujulu and we can use the percent sign to um like operate by using modulus okay now uh let's talk about the operators or arithmetic operators so for example you know addition so we can also like um in b equals um a minus b okay and then we can like have of course not we cannot really declare it uh the b because we already declared it there so we can say it d equals a minus b and then we can see e and then a times b and of course we can have the division and we're going to have like um use the float or we can use the double for that double um f equals one or a divided by b okay so these are the are all arithmetic operators that we can use inside our c program so basically you can add you can subtract you can multiply and you can divide two numbers inside your c program so um so for example we're going to test this okay so in d in the equals a minus b okay so we can display the total number is percent d and then the difference difference of the two numbers the difference uh the difference is of course we're going to use the different or the variable d for the difference and then we can use another one which is the product the product is percent d and the next one is the quotient okay the quotient of two numbers is of course the uh variable f and then we can use the format specifier which is lf okay and then of course the variable f something like this so let's run our program okay and we can enter two variables here or two numbers which is for example five and three okay so the difference or the total number is the total number is eight the difference is two and we need to format this so we can see clearly so we can add percent or i mean backslash n for each line the difference the quotient and of course we need to have the product the product is percent d and then of course the variable e okay so again run a program build and run and then five and then three so the total is eight or five plus three is eight and then the difference is five minus two or five minus three is two and then the product is um fifteen five five times three is fifteen and then the quotient is uh one okay so there's only num or there's only one three in the value five okay and in this video guys we're gonna talk about how to use increment and decrement operators in a c program and later on if you still have time we're going to discuss or we're going to start discussing relational operators and how we can use inside or how we can use it inside our c program okay so basically guys increment and decrement operators are useful operators and it is generally used to minimize the calculation so let me show you an example so in order to increment a value inside ac program we do it like this plus plus and then the name of the variable let me do it here so you can see it clearly plus plus and then the variable okay plus plus and then the variable so it means that x equals x plus one okay remember plus plus x means x equals uh x plus one and of course in the same manner when we say minus minus x it means that x equals x minus one okay so this is how you increment and decrement a value inside the c program but there is also a way it is called the post fix it is post fixed because we place the operator or the plus symbol after the variable x plus plus but it it also means that x equals x plus one and of course when you say x minus minus still it means x equals x minus one okay so you get the idea this is how you increment and decrement um inside a c program okay now there's a difference or a slight difference between having plus plus x instead of x plus plus or minus minus x instead of minus x minus minus okay so i'm going to show you that in a simple program so basically what we're going to do here is we will have a two variable so two variable which is a which is equal to five and then b which is equal to five also so i'm going to show you the effect of post fix and pre fix okay so again this one is the prefix okay and then this is post fix okay so let's comment this out so i'm going to show you the effect of postfix and prefix in this particular example so in a equals 5 and b equals 5 also and then in here we set we set the value of a and b equal to five okay so basically what we can do right now is print and decrement decrement each time okay and then we can use the variable a for our postfix use a for postfix and use b or variable b for pre fix okay so we can do this by abusing the printf method and then um uh backslash n and then percent d okay and then percent d because we were having to display or we we're going to display both the value of a and b okay so we're going to use the postfix here a minus minus and then this one is 4 minus minus b so again this is postfix and this is prefix and then they are set uh or the value of this two variables are set uh a equals to five and b equals to five and then we can end this with a semicolon and of course we can do the same you can do the same we can do another one and uh one two three four five six there are six lines so we we only need five and i'm going to show you and demonstrate what is the effect of postfix and prefix so for you to understand here we have taken the value of a and then of course the taken the value of b and then we apply postfix and prefix so if you try to run this build and run as you can see the value is 5 4 3 2 1 and the value of b is 4 3 2 1 0. so it means that if we use the prefix okay which is the case here minus minus b so it automatically um decrease the value of our variable by one whereas here it displays the value of a still five and then later on four and then in the third line three the fourth line two and the fifth line is uh one okay and then of course in the prefix it decrease the value by one and then four three two one and zero okay so that's how you uh do it the increment and decrement in a c program and this is quite useful if you know if you are working with for loops which we will discuss later on in this particular series okay now let's move on to the next operator which is the relational operators if we have increment and decrement we also have the relational operators relational operators so basically there are like one two three four five six six um relational operators and the the first one is equal equal okay so basically we're just checking if something is equal to or a variable is equal to some variable okay is equal to and then we have the exclamation point and then equal so it means is not equal so basically by this we're just checking if a certain value is not equal to another value and then of course we do have the greater than okay greater than and then we have less than and then of course we have the greater than or equal to so greater than greater than or equal to and less than or equal to okay so basically um we're just checking the relationship or like the relation between two values if it is equal if it is not equal if it is greater than less than or this two comparison or relation or a relational operator um greater than or equal to or less than or equal to a certain value okay and then of course um we can use this especially in a if statement in and we're going to discuss that later on in this particular series so basically if you want to check if something is equal or not equal or greater than then we can use the relational operators so we have to remember this this is one of the most important concept in programming so the relational operators okay and in this video guys we're going to discuss about the logical operators and of course the assignment operators so previously we have discussed this relational operators so we have like six relational operators the equal or checking if a value is equal to some value also and then not equal we have also greater than less than and then we also have greater than or equal to and we also have less than or equal to some value so this is quite useful guys if you are using the control statement in c so for example if statement and then you want to check if a certain value is equal or not equal to some value so for example if a variable x is equal equal to two so basically we're just checking if this particular variable or the value of this x is equal to two or we can reverse that we can check if this particular variable uh variable is not equal to two and of course you can use other operation or operators like greater than um less than or you could also double check for greater than or equal to or less than or equal to so basically guys this operators is like just checking the relationship or if the certain value is greater than another value or it is equal to another value okay now let's move on to the next one which is the assignment operators so basically you guys there are a lot of assignment operators in c programming language okay so the first one will be the equal sign okay this is one of the most uh common assignment operators in c programming so so for example you want to assign so as i've said guys this is for assignment operators assignment operators okay so basically this is useful if you want to set a value to a variable okay so for example x and then if you want to make this like 5 or the value of x is equal to 5 you can do that by using this particular assignment operator equal symbol okay that's easy and the second one is plus equal so we have this also plus equal and then um it basically means guys that it increments the value and then assign it to the um the variable okay so for example you want to make this like x and then plus equal to two so basically let's try this we can remove this code right here we can use the increment then assign so basically like we set a value for x we set it to 5 and then we can have it like x plus and then equals 2 3 and then we can use the printf function and we can display the result further so for example the value is the uh format specifier and then of course the comma and then the x variable okay and then semicolon at the end of this line save this and then compile and build or build and run our application so basically as you can see here the value is eight so this is the doing of the plus equals to 3 so big basically what it means that it add 3 to the variable x and then of course it the result of that is assigned to variable x also okay so this is basically uh just incrementing the value of our variable and of course we also have the x minus equals to for example one okay so basically it is the complete opposite of this one because this is for incrementing and this is for bickerman okay and of course we do have other operators for this particular topic which is the assignment operators we also have x for example times or multiply equal to 2 you can also do that and basically the division also okay you can do also the modular part modulo symbol and then equal and then so for example two and there are others for example um percent or i mean x and then and um and symbol and equal uh symbol and then of course the value that you want to assign so this is basically a bit bit wise and um assign assignment so we're not going to use that for now so basically our currently concern is this operations we can have the increment uh the first one is equal and then of course the increment the decrement and then multiply multiplication then assign and we also have divide and assign we also have modulu and assign so that's basically how the assignment operators word so the last thing that we want to discuss here is all about the logical operators so logical operators provides three mechanism that we can test more than one condition to make a particular decision so these are the end and symbol so meaning it is a logical end okay logical and let me show you that later on what uh what this means logical end and of course we also have this bar bar and this is a logical operator or logical or and then of course we have the negation or not symbol okay so logical or and then this is in and of course logical not okay so let me show you how this works this three logical operators now let's try to use the logical operators so for example the first one the logical and operator so we have here variable x which is set to eight or the value is eight and then we can check if this particular value is or the particular val variable x is um greater than five so we can do that by using the if statement and then x is it less than or greater than 5 so if x is greater than 5 then we can display something in our in our screen or output something so we can do print f and of course the value is greater than greater than five okay so we could uh build and run this and see the output of our program and of course it's gonna display uh the value is greater than five okay so what if the value is four okay so obviously there will be no output because uh this the condition right here uh turns to be false because the actual value of x is now uh four so no statement has been executed for this particular program now we can use logical operators and in this particular scenario so for example you want to check that the value of x should be um greater than 5 but less than 10 okay so we could check if the variable x is greater than 5 but less than 10 and we can do that by using the logical and operator so double ampersand and x and then less than 10 okay we could do that and of course if we try to run this still there is no output because the value of x is four so we can try six here build and run our application so the value is greater than 5 and we should add here that the value is less than 10 okay build and run our application so the value is greater than 5 and it is less than 10. now what if it is 11 so obviously it's going to display nothing in our screen because the conditions of this particular statements is not met okay so that's how you can use the logical and operator and of course when we say and um basically it means that it should be the both of the statement or both of this condition should be true in order for this statement to be executed okay and you can also use the logical operator or in this particular scenario so it doesn't matter if the um x is greater than 5 or x is less than 10 um it should you know execute the statement that we have here okay so for example you run this okay so we have the value is greater than 5 and less than 10 and we can try like 20 or maybe uh use the value 20 in rx so let's try this save and then build and run okay and as you can see we still have or we still get the output the value is greater than 5 and less than 10 that's because this particular statement here returns true so it doesn't matter if this particular statement here is false so as long as there's a true returns either of this statement so there's there should be statement printed or executed inside this particular if statement in this video guys i'm going to show you and teach you how to use if statements in c programming language so i think from the previous video we have like touch the basic usage of if statement so we have tried if statement with the logical operators so the end the relational operators the you know greater than less than or less than or equal to in other relational operators okay but in this particular video guys i'm going to go deeper with the if statement and how we can apply um if statement in our c program and of course guys i want to show you the practical approach on how to how you can implement if statement in a c program so basically guys if statements in c is used to control the program flow based on some conditions so it is used to execute some statement code block if the expression is evaluated to true so otherwise uh it will get skipped and we will try to implement a simple or basic program um utilizing the if statement so actually guys there are four different types of if statement in c so these are you know simple if statement we also have if else statement we also have nested if else statement and we also have else if ladder in c programming language but for now let's just focus on the simple if statement so basically the structure of if statement is just like this so we have this particular format or basic format of if statement in c we have if keyword and then open and close parenthesis and then inside of this open and close parenthesis is the test expression okay or the condition and then of course we should you know add curly braces open and close curly braces and then of course the statement to execute whenever the test expression or condition is met or in this particular case if this particular condition is evaluated into true okay so now let's try to implement a practical approach of an if statement so say for example you are developing a program or a software for a particular bar okay and then that particular bar only accepts customers that are over 18 years old and those customers that are below 18 years old are not allowed to enter the establishment or the bar itself and we can create a very simple program for that and our program will accept the age of the customer and then it will evaluate the age and it will display a message based on that particular age so the first thing that we're going to declare here is the variable age which has the type of int and of course we need to display something on to the screen that says to input a number that pertains to the age of the customer so in order for us to do that we need to use the method printf and then in here we can say enter the customers the customer or enter the age of the customer then we can add column and then space so we can have like the space for our input age now we have this output and we need something to accept a number from our user so we can use the method i think we already used this before the scan f right so in here we need to specify the format specifier for our age which is um uh percent d with uh which pertains to the values that are of type in okay and then of course after this we need to add the comma and of course the variable age and of course we need to end this line with a similar column but the proper way of doing this is to add an a person a person symbol okay so basically what we're doing here is just we're getting the address of age and assigned value of that particular address using the value that has been inputted by the user okay and of course we can now apply our if statement with this particular age so the first thing that we're going to check if the age is greater than 18 okay so we can just copy and paste this age variable and then we can add the logical operator greater than so basically what we're doing here is to check if the age is greater than 18 okay so there you go and then of course the statements statements to execute if condition is true okay so basically what we can do here is to print the age the age is greater than 18 okay and basically it pre uh it says or it means that the customer can enter the premises or the bar itself okay and of course we can also check if um the user or the age of the customer is equal to 18. okay we could also check that by using the logical operator or the relational operator equals n equal equal symbol so this is just um testing the age if it is equal to the value 18. so the first one is we're testing the value h if it is greater than 18 in the second one if it is equal to 18 and then of course we need to uh display the corresponding output so the age is equal to 18 okay and then of course we can add another one for this so we can just copy and paste for this one we need to check if the age is less than 18. so this is another logical operator that we have discussed from the previous videos okay so greater than equal and then of course less than 18 and of course we can output here like minor is not allowed okay that's because the age of the customer is less than 18. and the general rule when it comes to bar as minors are not allowed so basically what we're doing here is very simple program for that particular bar okay now we can try to run our program we can just you know build okay and then we can run our program and we have we can enter the age of the customer so for example the age of the customer is 18 so the age is equal to 18 okay so as you can see this is the only output or this this is the only statement that has been executed the age equal to 18 because the other one the other condition is not being met or not evaluated to true okay because uh the age is equal to 18 and of course this is um greater than 18 and of course this is less than 18. so we can try another one so for example the age is 19. so the age is greater than 18 and of course again this is the only uh statement that that has been executed because it the condition evaluated to true this is evaluated to false because the age is not equal to 18 and this one is evaluated to false also because the age is not less than 18 okay so you can try this one more time to check for the for example the age of the customer is 16. so the output is the minor is not allowed okay that's the practical way of using if statement in c programming language in this video guys we're going to talk about if else statements and of course we're going to discuss also the nested ifelse statements in c programming language now from the previous video we have created a simple application so we have assumed to create an application for a bar or establishment and then that particular program will ask for the age of the customer that is trying to enter the premises of the bar and of course we ask for the age right and we check for the age if it is greater than 18 then we display the age is greater than 18. and if the age is equal to 18 and we also displayed the age is equal to 18 but um in case that the age is less than 18 then we print that minor is not allowed so basically guys this is a good um program but we can you know upgrade this this is not uh when it comes to code readability and um code maintainability this is not a good practice when it comes to you know checking a variable or a certain value of a variable so now let's just remove this lines okay and of course we have this first condition if and then we check for the age of the customer which is you know 18. so if the age is greater than 18 we display the age is greater than 18. so i as i've said we can take this further by uh adding else statement right here so basically the if else statements in c is also used to control the program flow based on some condition and the only difference is it used to execute some statement code block if the expression is evaluated to true so it will try to execute this particular statement if this particular condition is true otherwise it will try to execute the statement of this particular else code block okay so in here we can try to display printf the age less than or equal to 18 okay so as you can see um if we try to evaluate this so if age is greater than 18 so for example you have like 19 or you input 19 then of course automatically it will execute the statement that the age is greater than 18 right now basically if we try to input 18 so 18 is not greater than 18 so it will try to execute the code block or the code or the statements inside this else code block because the condition right here returns false okay because 18 is not greater than 18 and there you go it returns false okay now we can also add another condition right here so for example we want to check if the age is equal to 18 okay we can check if the age is greater than 18 and of course we can also check if the user or the age is equal to 15 and then otherwise it's it is less than 18 and we can add another else statement right here but for now let's just you know add the another condition or condition evaluation test expression if the user or the age is equal to 18. okay so basically this particular statement if this particular condition right here is false then it will try to evaluate one more time with this particular condition is the age equal to 18. so if that particular age is equal to 18 then we can display the age is equal to 18 right there but in case if the age is less than 18 we can also add the else statement right here and we can display that the age is less than 18. okay so as you can see we have you know implemented a practical implementation of if else statement and we can add you know the first if uh condition and then we can add another condition else if and then we can test this condition right here otherwise if these two conditions are returning false then we can you know execute the statements in this particular as block okay so we can try this we can run our program build and run so let's try first the possibilities so for example the customer or the enter the age of customer for example 25 so the age is greater than 18. so let's try to run this once again and we can try to input 18 so the age is equal to 18 okay so this particular condition right here returns true now we can also try to uh input the value which is you know less than 18 so for example 16 and then of course the age is less than 18. okay so as you can see in this particular example there will be only one um block of code that will be executed so so for example this one if this will uh return true the age is greater than 18 then it will execute this statement right here or inside this if's block then it will ignore the other like the else if and the else now if it will return false then it will try to evaluate the expression inside here and if it is true or it will return true then it will execute this statement and ignore the else if all of this statements or conditions here will return false then the else statement will be executed okay and it will you know try to print the age is less than 18. now there are cases that we need to check also for example inside this if statement we want to check if um the age is less than 25 okay less than 25 uh although we have like the age is greater than 18 we want to check also if the age is less than 25 so we could add also um if statement right here so this is like what we call nested if else statements okay nested if else statement so we can also check here if age is less than 25 okay and then we can display here printf and then the age is greater than 18 but less than 25 right less than 25 and of course we can also add else statement here or else if like for example else if the age is greater than 25 then we can say here printf the age is greater than 18 and greater than 25 so there are cases that you want to check this you know um if you want to like in the future you want to implement an application and you will try to check the values and somewhere in your code you need to check uh like the value age here and also you can also check if the value is less than 25 or greater than 25 so it is very useful when it comes to programming this particular nested if else statement so let's try to run this and before that i'm just going to add a backslash n right here so that we will have a new line after this particular code execution so let's try to build and run our app first and try to input a value that is over 18 so for example 23. so the h is greater than 18 and there's another statement that has been executed right here the age is greater than 18 but less than 25 we can also you know run this once again and input 26 so the age is greater than 18 and there's also a statement here the age is greater than 18 and um greater than 25 okay and that's how you use the if else statement or um yeah if else statements in c and then of course if you have like many conditions that you want to check so you can also add another conditions right here okay and then another condition and um otherwise if there if these conditions are not met then you can display or execute the statement inside this else code block okay now the nested if else statement requires only one if okay so you can't use like uh two ifs here because it will try to separate the uh chain of if else if you use another if so what you can do is uh one if and then else if else if and also one else statement so it doesn't matter how many else if statement that you can add okay for as long as it is like has one if and has one uh else statement okay so and in this video guys we're going to learn how to use ternary operators in c so basically guys the ternary operator is used to execute code based on the result of a binary condition so when we say ternary operators it is used to execute code based on binary condition okay and it takes in a binary condition as input and which makes it similar to an else control flow block so so for example guys from our previous tutorial we have discussed how to use if else statement okay so we have this kind of structure so for example we want to use this structure or code to get the maximum two values or two variables so if you want to like return the max value all you have to do is compare the two variables a and b so so for example if a is greater than b then of course a or max will be assigned to a otherwise the max number will be the value of variable b okay so the ternary operator guys instead of using if else like this is too long for a simple you know checking of value condition so the binary or ternary operator uses only single line or we can use the ternary operators in a single line and it returns a value so behaving similar to a function okay so let's try to see the syntax of the ternary operators in c so basically the syntax is like this result and then binary condition and then you have to add the question mark and then you have like the value when the binary condition is true otherwise the value of uh you know value to be returned if the binary condition is false so we have to take note guys that the ternary cannot be used to execute code so it must be either returned in the function or set equal to a variable so you cannot use this something like this so you cannot leave your ternary operator like this so it should be equal to or be set equal to a variable okay something like this or you can use it as a return in a particular function okay so let's try to implement a ternary operator so for example you want to check the max value so the long version is this if a is greater than b then assign the value of a to d max and then otherwise assign the value of b to the max variable so as i've said we can you know make this a little shorter by using the ternary operators so in order for us to do that we just need to um so for example get the variable max and then the binary condition is a is a greater than b okay so we can add the question mark there you go question mark and then the value to be returned if the binary condition is true so of course if a is greater than b then the max value is a right otherwise the value is b or the return or the max value is the value of variable b as i've said guys this is the explanation of conditional ordinary operators in c so we have this variable and then we have the expression or the condition and then you have to add the question mark and then the value if true so it will return the resultant value into the variable and it will assign this value to this variable otherwise uh if the expression is false then the resultant value of uh you know the false then it will be returned as the value of the variable that we have added okay so we can check this right now we can remove this this is the long version and we can try to print this display the result the max value is and then format specifier which is we're using in so percent b and then of course the maps variable okay let's just remove this so clean and build or build and run our application so let's try this uh oh um we don't have like the value for a and b so let's try to assign values to this variable so for example a equals 15 and b equals 16 okay so clean and build our application and we'll try to get the output so the max value is 16 okay so we have here the b variable 16 so that's the value of max variable that is being assigned because this particular condition returns false so that's why the value of b variable is being assigned to the max variable so we can also try this with the other you know if the a is greater than b so like 20 so obviously a is greater than b so let's try this exit this right now and then build and run our application so let's try this so there you go the max value is 20. so this condition returns true because a which is the value is 20 and that's greater than b because b is the value is 16. so it returns the value of a so like this so it ignores the second part which is the b because it returns true and then of course after after evaluation the value of a is being assigned to the max variable that we have here so it printed out that the max value is percent d and then which is 20 so let's try let's try this one more time just so you can see the output so the max value is 20. okay so this is quite useful if we only want to um check a certain value so like if you're planning to use if else then you might want to use the ternary operators which is like this so it will just save you time it will save you of code space and i think it's clear rather than using the f and else statement so this is pretty straight forward when it comes to checking the value and assigning the value to the max variable okay so you just have to remember that it cannot be used to execute code you just have to set this equal to a variable or you can use this as a return value of a function okay and in this video guys we're gonna talk about the c go to statement okay so so far we have discussed the if statements and how it is used in c to control statement execution based on some conditions or decisions now the flow of execution also depends on other statements which are not based on conditions that can you know control the flow and of course c supports a unique form of a statement that is you know go to go to statement which is used to branch unconditionally within a program from one point to another point inside our c program so although this is not a good habit to use you know go to statement in c but there may be some situations where we can use the go to statement and it might be you know desirable to to make use of the capability of the go to statement so the goto statement is used by programmers to you know change the sequence of execution of ec program by shifting the control to a different part of the same program so i think i have mentioned this before in our you know tutorial series that the execution of a c program is sequential you know uh like if you have statements from line six here seven and eight and nine so it will try to execute from line six seven eight nine ten sequentially okay but you know we have this uh go to statement to control that particular flow we can go to the a certain point of our program by using the go to statement so basically this basic syntax of go to statement is like this we have uh this particular syntax of our go to statement so we have this keyword goto and label okay and then of course we need to add label at some point in our program okay and of course the long version of this syntax is like this let me show you uh real quick so we have like a few lines and then we have the label and then we have the statement okay and every time the program meets or found the go to statement so it will try to find the label that has been specified in this particular line so go to label and then it will skip the lines or statements between or other you know other statements and it will go directly to the label and it will execute the statements below the label in our c program now we can implement this and of course guys it can also be used to this is a forward uh jump in our program because we have specified the go to statement and then it forwarded to the label statements below okay but it could be also the backward jump of a program so for example after execute execution of some lines it will jump into this particular um label so after execution it will jump to this label that's why it is called the backward jump in our c program so so for example if you have like no other label available here so it will jump the program execution from here and then go back to line nine so that's how the backward jump inside our c program so let me just clarify this uh it is called backward if you know the go to label is here and then it will try to jump on top or the lines before that i'll go to label and it will uh execute all the statements under this okay and it is called forward jump if the label is here so after this or after execution of this line it will try to go to this particular um line label and it will execute the statements under this partic particular label so now let's try this and let's just build a practical or simple implementation of this go to statement so let's just remove this and then we can try to ask for an age just like what we have from the previous video and then we can try to add the labels for example g and this will be the label name okay and then of course we have a statement under this particular label so printf so so for example we will try to execute this if the age is 18 so like you are eligible or something okay then we can try to add the new line here and then of course we can try to add another label so another label name and we can print um you are not eligible okay something like this and we can also add the new line here okay and then of course we do have the statement to ask for the age so enter your age okay and then semicolon and then we can use the scan f function to get the actual value from the user so percent d which which is the form of specifier again and then ampersand and the variable name which is age and of course we can have the condition right here like if the variable age is greater than or equal to 18 then um you can use the statement go to uh the label g okay and else we can go to the label s okay now as you can probably observe here we are using if else but we don't have the curly braces right so you can do the if an else statement like this without the curly braces because we don't we only have one line in this particular or after the condition we have only one line and always also uh else we only have one line but if you have like five lines here you have to add the curly braces okay so in c programming it like understood if there's like one line to execute so there's no need to use the curly braces okay now we can try to run this and see how it works so for example build and run our application and try to evaluate and see how this particular program works so basically it executed line g and line s right so you are eligible and you are not eligible now if we try to go or input number 18 right here so it will try to execute again the line 9 10 11 and of course it's gonna you know ask for the age again right so it starts from this particular line 9 which is the label g because we have specified if the age is greater than or equal to 18 then it will try to go to label g now if you try to go to or input 16 so it will try to go to label or yeah line 11 which has the label s right and it will just display you are not eligible and it it did not execute the statement from line 9 or line 10 it directly i'll go to 11 line or line 11 which has the label s and then it printed out the statement you are not eligible and also uh it also adds the or i mean asked the h again and then it asks for the uh input from the user okay we can try this one more time so for example 15 so it's going to execute all the lines starting from line 11 with the label name s okay so guys um as i've mentioned uh earlier that the the go to statement is a unique form of statement okay and sometimes uh it is not advisable to use go to statement in your c program but there are situations or conditions that you might want to use this particular go to statement so for example um if the you uh if you want to skip some of the lines in your program so let's try that okay so like for example you have statements like this printf and then this is the end of the program okay and then we can go like instead of using s we can add a label here e and then it will execute you know e instead of s so basically after this condition returns false then it will execute this and it will call the label e and then execute that this is the end of our program so let's try that execute or exit our program first and then build and run so let's try to input first 18 so it's going to you know execute from line 9 until line 15 and then if if we try to input 10 then it's gonna say this is the end of the program okay so i think um that's all there is to it in this tutorial guys and i hope that's clear on how to use the go to statement in c so again this is quite useful in some situations and in this video guys we're gonna talk about loops in c programming so sometimes it is necessary for the program to execute the statement several times and c loops execute a block of commands in a specified number of times until a condition is met so in this video tutorial you will learn about all the looping statements of c programming and along with their use so as you can see computer is the most um suitable machine to perform repetitive test and it can tirelessly do a task tens of thousands of times okay and basically like every programming language has this particular feature to instruct to do such repetitive tests with the help of certain form of statements so that's why we have this loops and then of course guys in c the c programming language supports like three types of loops so we're going to discuss first while loops okay so we have while loops we have do while and of course we also have the for loops okay so we're going to dissect each type of loop so that we could you know better understand how it works and how we can use these loops in in a certain situation so basically guys when we say loop i'm just going to show you a simple flowchart so we have here a simple flowchart that describes the nature of loop or loops in general so we have like start and then we can declare a counter or a variable counter and then our program will try to evaluate the condition and then if the condition is you know returns true it could execute statements and then increment the counter and then again evaluate the condition if the like for example the increment counter is equal or you know greater than something and then execute statements uh increment counter and then evaluate condition and lastly if the condition is met then it will stop the execution of that particular loop so basically guys a loop is just you know doing or executing repetitive statements inside our c program so there are like control statements we have statements that we can use so we have a break we can have like um continue and then of course we have the go to statement that we have discussed previously in our video tutorial series okay so as i've as i've said we will discuss first the while loops in c programming okay so see while loops statement allows to repeatedly run the same block of code until the condition is met and of course while loop is the most basic loop in c programming and while a while loop has one condition and it contains uh or it executes as long as the condition is true and then the condition of the loop is tested before the body of the loop is executed so uh the syntax for our while loop is like this so we have the keyword while and then a condition so like a test expression and then if this condition is like true then it will try to execute the statements inside this particular while loop okay now we have like we can have a very simple application for this so for example we will try to implement this okay so we can declare like a variable so int n equals one and then times plus five and then of course we can declare the while loop for our program like this and then open and close parenthesis and then we can say n is less than or equal to times okay so we have to add the curly braces for that and then inside this curly braces uh these are the statements that will be executed if this particular condition is true okay so it will try to print like c while loops and then we can add the percent or yeah percent d which is the format specifier for our in variable and then we can display the n okay and then of course we can we can increment the var uh the value of n by using the increment that we have discussed before which is n plus plus so basically this is just you know basically saying n equals n plus one okay i think uh we have already discussed that the n plus plus increment in our video previous videos okay now we have set the value n equals to one okay and then we have set the number of times the loop should be executed so that's basically five uh there should be five execution and then we added the while statement and then check the condition if n is less than or equal to times then execute this statements right here so we can try to check this build and run our application and try to see the output of our program and i'm going to you know slowly explain to you what happens in this particular program so you can see the output uh right here cuy loops one see while loops two and then three four and five and after uh five it no longer executed because it you know ended the loop okay so i'm going to explain to you how we got this output so first thing as i've said we declare n equals to 1 so in this condition 1 is less than or equal to 5 which is the value of times so basically and of course it is true that one is less than or equal to five so that's why it executed this particular statement c while loops and then it displays the value one right here okay and then it incremented the value n so now the end becomes two okay and then it will go here in our condition once again so two is less than or equal to five so that's true because obviously two is less than or equal to five so that's uh it executes this statement right here cy loops and then the value of our n which is two again it incremented the n variable so uh the n now becomes three so after that one we will go back here in the condition is three equals or i mean less than or equal to five so that's true because 3 is equal to or i mean less than 2 5 so that's why it printed the output right here c while loops and then the value of our n equals to 3. and now after that it incremented another time the n and the end becomes 4 now and it go back to the condition s 4 less than 5. so basically four is less than five obviously so that's why it printed out the c while loops and then uh four the value of our n and again incremented added one to the end variable and then the n now becomes five and then go back here and the condition is five less than or equal to five so it uh it uh true again because 5 is equal to 5 so it printed out c while loops and then the value of of our n which is 5. now it incremented another time the n variable and now the the end variable becomes six and it will go directly here in our condition is six less than or equal to five so it returns false because six is not less than or not even equal to five that's why it uh ended the loop and it never executed the uh this particular statements right here once again because 6 is not less than or equal to 5 which is the value of our times variable so in this video guys we're going to discuss another type of loop which is the do while so from the previous tutorial we already have discussed the while loop okay and then we implemented a simple iteration program where we can see the value of the variable each of the iteration of our wine loop now the difference between while loop and do while is that the while loop will try to evaluate first the condition and then if this condition is you know return true then it will execute the statement inside this particular while loop whereas when we are trying to use the do while loop then the statements inside the loop will you know execute at least once before the condition is being evaluated so the syntax for that is like this we will just remove this for now all these lines of the while from the previous tutorial okay so this is the format or basic format of the do while statement or do i loop in c so basically we have the do keyword and then open and close curly braces and then the statements or group of statements okay now after the curly braces then it will have this the while keyword and then open and close parenthesis with the condition inside it so as i've said earlier guys that this particular loop will try to execute at least once before the condition is being evaluated okay so as you can see if you wanna like execute first some statements before you could evaluate the condition so so the dual loop is the way to go so we will try to create another program guys showcasing how this particular do while statement or do while loop looks like or how it works so basically guys we could um initialize some variables here so for example the n so int n equals 1 and then we could also declare another variable which is times so basically what we are doing here or what we are declaring here is two variables for our do while and the n represents the number i mean the value of the iteration or the value of the variable each iteration and then of course the times is the number of times the loop should execute okay now inside our do while or do statement we could add a printf statement here and then you could say c do while loops and then the format specifier percent d backslash n and of course uh the n variable okay so we have this uh printf statement so basically what what we're trying here is we're trying to display the value of n every um you know execution of this particular statements okay and in here below this printf statement we could increment the n by you know using this statement n equals n plus one or you can simply use the n plus plus version of this particular statement so n equals n plus one so again every iteration we would try to increment the value of our n plus one and then inside here um the while and then open close parenthesis we could add the condition so for our condition you can add the n and then less than or equal to the number of times we want this while or do while to be you know executed okay so i think that's all for this um do while statement so we could try to run our program and then build and run and see how this particular program works okay so basically guys i will try to explain it to you how this or how we got this output so from the initial value of rn we have executed the do statement right here so we printed out like the value is c do y loops then percent t and then the value of our n is one okay so after this iteration we um increment the value of our n by one so that's n equals n plus two okay or i mean one n plus one and then the semicolon and then of course we will try to evaluate this in our condition so two is less than or equal to times which is five so of course two is less than 5 so that makes sense and then it will try to execute the statements inside the uh this curly braces okay then printf c do while loops and then of course it will try to to output the value two okay after this the n will be incremented again by one so n equals n plus one so the value now or the n value now becomes um three and then evaluate it in our uh open and close parenthesis so three less than or equal to five so obviously three is less than five so it will try to implement or execute again the statement inside our current basis and then display three this will be the line uh three and then of course it will increment again the value n and it the end becomes four now and then uh evaluated once again is four less than or equal to five so um basically four is uh you know less than five so it will execute the statement printf again display the value 4 and then increment again the n it becomes 5 and then after that it will try to evaluate the statement is less or n is less than equal to five so we have set now the value to five so five is equal to five so it will try to execute the statement once again and if the five value now becomes or the end value now becomes six because we try to increment it here so six will be evaluated inside our while statement then six is less than or equal to five so that's basically not true because of course obviously six cannot be less than or cannot even be equal to five so that's why it will try to end the loop because the condition returns false already okay so that's how the do while statement works and guys make sure that um there's like infinite um end of your loop because there are cases that you know the condition will not be evaluated uh into false at some point in our program so that will make it like the infinite loop so the concept of infinite infinite loop so be careful to place a condition here that will try to or like will be evaluated false at some point in our program because you don't want to have the infinite loop because uh the program will run infinitely and you don't want that it would you know consume the memory of your computer so that's why you you need to be careful with the infinite loop so make sure again to add a condition that will be evaluated as false at some point in your program and in this video guys we're going to discuss another type of loop which is a for loop so from the previous tutorials we have like um discuss already what is white loop what is do while and how it can be used in rc programming or c programs so as i've said guys in this video we're going to discuss for loops and of course we're going to describe the syntax of for loops okay so the syntax for for loops guys is like this i'm going to copy and paste this here so we have here the four keyword and then we have the open and close parenthesis in which we have we can you know there uh there are like three um statements that are available for us so the first one is the init or initialize and then the second um statement is the condition and the third one is increment or it could be also decrement okay so this three statements inside this open and close parenthesis is separated by semicolon okay and of course guys each of this statement plays you know a big role in our for loop okay now we can try to implement our very simple for loop so for example let's um declare a variable for our for loop um inside the initialize statement we could you know initialize a variable right here like for example int x equals zero so we could do that here we could initialize our variable into something like zero or it could be one if you want to start um one so basically guys it is the uh the same as declaring the variable here so index 0 so you could also do that here initialize the value to x so this 2 is just the same so basically we're just declaring the variable and setting the initial value say for example 0 or 1. now the second statement for this particular for loop um we could you know add the condition so the condition is something like this we could check if the x variable is less than or equal to 5 just like what we have from the while loop and do y loop so we're checking if the value of the variable is less than or equal to five and of course the last part or the last statement for this particular open and closed parenthesis for loop you could you know add the increment or it could be the decrement depending on the initialize the condition of course in your for loop so for example you want for now is to increment so you could actually do this like this x equals x plus one inside the for loop and then of course guys the statements inside the curly braces so the statements you know you could execute statements right here so for example printf the value of x column and then the format specifier percent d backslash n to have a new line then specify our variable x and then end this off with each semicolon just like this so guys basically what we're trying is to display the value of the variable x each iteration of this particular loop so we could you know build and run this application and see how it works now we have this output the value is one the value is two the value is three the value is four and five so guys i'm going to explain to you how we come up with this output so at first guys you know we declare the variable x and initialize the value into one so now the value for our x is one okay so value of rx is what um one okay and then um let me write first is equal or x is equal or less than or equal to five and then uh increment okay so so for example at the first iteration of this for loop we have initialized the value into one or yeah the value of x into one and then we try to evaluate the statement is x is less than or equal to five so of course x is less than uh five since the value of x equals to 5 so this returns true then it will execute the statement the value the value of x it should be x right there is one okay and after this after execution of this particular statement it will increment the value of our x so at the second iteration it will be two okay so of course two is less than five so that's basically the um condition will return true and then of course it will display the value of x is 2 and then another iteration 3 so 3 is less than or equal to five right and obviously the three is less than two five so basically uh it will return true and then display this statement and until the x will become 6. okay six and then it will evaluate is six less than or equal to five so basically this is false and then it will terminate the loop or it will end the loop itself so that's how we got this um output the value is one two three four and five so this particular output guys is incremented so the value of our x is increment like one two three four and five but anyway guys we could you know make it like five four three two one and we will initialize our variable x differently so for example let's try to revise our for loop and we will start from five okay so the initial value of our x is equal to five and of course we will check if so for example is x is greater than or equal to one so now we're doing the reverse of the increment and of course guys you can you know add the increment statement just like this x equals to x minus one and of course you can use the post increment that we have discussed from earlier videos in this particular uh series so you could do it like this x minus minus and then we could you know display the value of our x okay so let's try this once again and build and run our application and of course we're going to get the reverse output okay so we have here the initial value five and then four and then three and then two and then one okay so guys of course you can always try to you know add another for loop inside this loop so as what we have from the previous tutorials we have like the nested if and else statement and of course guys you could always uh you could also have nested for loops or nested while loops in your program so for example like this you could you know um add another for loop here so for example in y um is we will set the initial value to one okay initial value into one and then we could um try to evaluate the statement say for example is y um less than or equal to x something like this and then we could add the increment y plus plus okay and then open and open and close curly braces and then of course we could display the value of our x and y so the value of x for example percent d and value of y is something like this the value of x is percent d and then the value of y is percent b again okay and then we could also specify the value of our y okay so we could you know build and run our application and of course we will get this particular output so the value of x from uh initial value of our x is five right so it will try to run five times and then it will try to display one two and uh one two three four and five for our value of our y okay and then of course we have the um four and then we also have three and then we also have one and uh two and one so you could do that guys as i've said you can do um nested for loops or nested loops in your c program so you could increment you could use decrement inside your loops okay so and guys if you want to practice more about using loops you could you know try to print different patterns for example you want to print a rectangle or um triangle you could uh display uh inverted triangle by using the um asterisk symbol so you could do that by using your loops and in this video guys we're going to discuss how we can use switch multiple selection statement inside our c program so from the previous tutorials guys we have learned how to use if you also have learned how to use if else and of course how to use the nested if else statement inside rc program now occasionally there will be an algorithm that you know will contain a series of decisions in which a variable or expression is tested separately and the output or the statement or the actions that could be taken depends on the series of decisions this is what we call multiple selection and c provides the switch multiple selection statement to handle such decision making so now let's try to look at the basic syntax of switch statement so the switch statement guy starts with the keyword switch and then open close parenthesis and open close curly braces and inside this open close parenthesis is the variable so variable of interest so the output guys or the statements that are executed depends on the value of this particular variable here so we have here switch statement or switch keyword and then open close parenthesis and then the variable or expression and then of course open close parenthesis and inside this open close parenthesis guys are the case label okay so so for example you want to check for the value of one and then it should be followed by the break keyword which means that it signifies the end of this particular case one okay and then you could you know add several case label here so for example case two and then you could add the break statement you could also add another case label three and then the break statement and of course you need to add the default case so the default case guys will serve or will be executed if there's no case label that satisfies the var uh the value of our variable or expression so so for example we have here one two and three and the input is four so it's gonna you know uh execute the default value or the default uh statement default case now you could inside this particular case we could execute some statements for example you have chosen case one so we could end this with a semicolon so we could do the same for the other cases so like this so in this particular case you have chosen case 2 and you have johnson 3 and the default is you haven't you have not chosen from the uh values one and two and three so one two you have not chosen a value in one two three okay so we could try this guys and of course we need to add a variable here so in input and then we could you know scan f or ask the input from the user so percent d and then the variable input ampersand and then input okay and then guys we could print please choose a number number one two or three okay so let's try this okay so let's try to build and run our application so we have uh we have to update this so variable of interest is of course the input okay so let's replace this with the input and then build and run our application so as you can see it's going to run and we need to input a number here so please choose a number between one two and three so so for example we choose where we input one so you have chosen case one okay and then let's try um another one so for example three so you have chosen case three so basically guys it executed the statement under this particular case label okay and so for example you have inputted or you have uh selected number four instead of the values one two and three so it's going to uh execute the statement under the default case okay so you have not chosen a value in 1 to n this is should be 3. and we could also use letters and characters inside our switch case statement and basically here in our example we're using the in type as the data type for our variable of interest input and then we're setting the um case labels into int one and then into and then in three and then we're executing statement based on the value of our input okay but as i've said we could use characters or letters and so for example you want your user to input letter a you want your user to input letter b and then you could execute statement based on that particular letter so for for now let's try to implement this inside our program we want our user to input letters a b or c and then we could you know output uh different statements based on that particular character so now we could display instead of please choose a number we could you know um say here enter a letter you could select a b or c and then based on this particular letter we could output or execute commands or execute statement okay and then we're going to use the method um get get char okay so this will return the in equivalent of the letter or the character that the user has inputted okay and then we could try this inside our switch statement so instead of using case one we could say here case a and then here we could use case b and of course here we could choose or set the case c so every time the user types in the a so it should print you have chosen option a so we could copy and paste this so b and then of course uh you have chosen option c and in our default wrong option okay so we could try this let's try to run or build and run our program so enter a letter a for example we type in a so you have chosen option a so let's try this once again so for example the letter that has been or the user inputted is b you have chosen uh b let's try this once again so for example the user types in d and then it will display wrong option okay and then of course guys you can make it this way also so for example you want to add also the lower case of letter a so case and then the lowercase version of a so you could do it like this so you have case a and then case with the lowercase a and then you could also do the same with the b and then you could add the lowercase uh b here and of course you could also do the same for your c so lowercase c lowercase b lowercase um a so it's going to you know execute base on this it doesn't matter if it is uppercase a or lowercase a so let's try this once again so for example you want b so you have chosen option b okay let's try this another time and then c lowercase c so you have chosen option c okay so i think it is clear to you how to use the switch case statement in c programming and in this video guys we're going to discuss and i'm gonna teach you how to implement functions in our c program so basically guys a c function is a selfcontained block of statements that can be executed repeatedly whenever we need it so um if you think about it it is just you know a group of statements that we could um call and we can use repeatedly within our c program so in this particular video guys we're going to discuss the benefits of using the functions in c program we will also discuss two types of functions in c um also the parts of function the function prototype the function definition and of course we're going to discuss also how to call a function inside our c program and lastly we will implement a basic program to illustrate the addition of two numbers using user defined function so if you're excited guys please make sure to watch the full video uh you will learn more in this particular uh video tutorial and by the way guys if you are new here in our youtube channel and you like content about programming so go ahead make sure to subscribe and press the notification bell so you'll get updated whenever we have a new upload regarding different programmings or different topics so we have topics python java javafx c programming and many many other topics regarding programming so now let's try to talk about benefits of using function in c so there are a lot of functions that you know we could associate in using function inside rc program so the first one is modularity so when we are using functions it could provide modularity in our code so it means that we could you know define different functions we could uh really call our functions and um we could call this particular function if we need it or we need to execute certain statements and of course guys the function also provides you reusable call me uh it will save us a lot of space and you know it could be our code could be you know more readable by using this particular function feature so that's readable or usable code and then in large programs debugging and editing tasks is easy with the use of functions so functions make it easy for us to implement our programs so the program can be modularized into smaller parts that's what i have said earlier that we could you know develop a certain module inside our c program and then we can call that particular module or statements or group statements if we need in a particular situation and number um the next one is separate function independently can be developed according to the need so so for example guess we could group our statements depending on the need or you know depending on the the function or or the purpose of that statement so we could group that statements and place it inside our c function so actually guys there are two types of functions in c so the first one is um let me type it here type of functions we have the first one builtin function okay so builtin function um of course the system provided these functions and stored in the library therefore it is called um library functions so we have like we are using scanf printf uh str uh strc py um cr s t r c m p c r then str cut and many more functions that are already available for us whenever we try to run a program so from the previous tutorials we have used the printf so as you can see this particular function we did not um implement this the system provided it for us the printf and this particular function will let us display certain objects or statements that we want is we want to display inside our c program so to use this functions you just need to include the appropriate c header file so that's why we have here the include statement at the top of our program so basically we're including all the necessary function that we could use inside our c program and of course guys the the second type of um method is what we called the user defined functions userdefined functions okay so userdefined userdefined functions these are the functions that are defined by the user at the time of writing the program so that's basically us or the programmer um that you know define the functions okay and then of course the same with the builtin function we could you know really use this particular functions inside rc program now there are there are also parts of our function in c programming language we have the function declaration we also have the definition and we also have the function call so this is basically the actual flow of the function we have the function declaration declaration and then we have the definition we have of course the function called if you want to use that particular function so we have here for example syntax for function declaration so we could um this will be the function declaration this is just an example guys on how you could declare a certain function so the syntax for that is data type and then function name and then of course open and close parenthesis and then in here we can specify the parameter list okay or the variables that we want to use inside this particular function so our example of that is like this in which is the data type and of course addition which is the name of our function so addition and then the return type is int and then of course the list of parameters and in this case we don't have any parameter in this particular function addition so we also have the function definition this is actually what the actual function would look like so this will be function declaration or i mean function definition okay so we could uh this the basic syntax to this is return type and then the function name and then function arguments and then curly braces so it should include the close or open and close curly braces and then inside here is the body of the function or simply the statements that we want to execute inside this particular function so whenever we want to call this function this will be the statements that that you know would be executed inside this particular function so in order for us to call a function inside our c program we just need to specify the method name and of course we need to supply parameters if there's a if there are any and we would also need to specify the return type of our function so now let's try to implement a simple program that you know that could ex uh illustrate the addition of two numbers um using user defined function so we have here the main function right and then in here after the main or after the closing curly brace of our main function we could create we could create our own function right here let me close this first so you can you know see better so we could add a function here returning the total of two numbers okay so we could declare it like this in and then addition open and close cur uh parenthesis and then open and close curly braces and of course guys as i've said this is this will be the body of our function so in here we could um define local variables okay so local variables so for example we we have in num 1 equals 10 and then num 2 equals 5 right so these are local variables meaning these are the variables that are declared and defined inside the addition method or function okay so we can say here return and then num1 plus num 2 okay so that's the statement that we want to execute when whenever we try to call the addition method where i mean function so inside our main function we could call this um method addition so we could declare a variable here in answer and then we could say answer equals and then the addition so basically whatever the return value of this addition method it will be assigned into our answer variable and of course we could print or display this particular value so we could say the total of two numbers yes and then in the format specify over just you know percent d and then the answer which is the answer variable okay so we could you know build and run our application application and then we have here the output the total of two numbers is 15 okay so that's how the function works and as you can see here we have defined our function with the statements inside our c function to return the total of the number one in number two and then inside our main function we have declared the answer and then the type is in of course because the in is should correspond to the return type of this particular function and then answer equals the addition and then the last thing that we did here is to display the total of two numbers and in this case 10 and 5 which makes it you know the value or the output is 15. so and in this video guys we're going to learn how to use c function arguments or parameters inside our function so from the previous tutorial we have learned how to define and declare our function inside our c program and of course we have learned how to use the basic syntax to create a function and implemented a simple function that could add two numbers okay so as i've said guys in this video we're going to focus on the function arguments or function parameters so while calling a function the arguments can be passed to a function in two ways so there there are two ways on how we could pass the parameters or the arguments into the function so the first one will be call by value and the second one is called by reference okay so in call by value way the actual parameter is pass the function and then new memory area created for that particular past parameters and then it can be used only within that function and the actual parameters cannot be modified in the call by value way of you know passing the the argument into our function while call by reference so instead of copying a variable an address is passed to a function as parameter and then we could use the address operator which is the ampersand symbol i know if you're already familiar with this so address operator is used in the parameter of the called function and of course the changes in the function reflect the change of the original values so we could understand this better if we try to implement our function by you know creating a simple project or simple application that could demonstrate the call by value or call by reference so first let's try to create a program that would pass the argument as or it could call by value so the first thing that we're going to need is of course to it's actually the same with the program or i mean function that we have created from the previous tutorial but the difference is that in this particular video we're going to use parameter or argument so the first um variable that we're going to declare here is the answer so the type is in and then we have the variable name num1 so the value is 5 and then in num2 and then the value is 10 okay and of course guys we could declare the function so for example we could um create the function right after this closing curly brace of our main function so the first thing of course is the return type and in this case in and then the name of our function which is addition and we could say here in a and in b basically it means that this particular function would accept two parameter in b and uh a okay and then in here we could return the value or the total value of this two parameters so a plus b okay and of course guys we could declare the function right here so we could you know add the function declaration here function declaration so you could say here in addition and then this particular function is going to take two parameters in num1 and in num2 so as you can see here guys this is only the function declaration okay and this is the function definition function definition again this is function declaration declaration and function definition so now we could try to call our function by value so for example you can say here answer and then equals addition which is the method or the function that we have created here and then we could pass along the values of num1 and num2 okay so let me explain this first for you so it would be clear for you so we have here the parameter num1 num2 as i've said in call by value the actual parameters cannot be modified because num1 and num2 is it won't change um even if we you know change the parameters here but in a and b so the value of num1 and num2 would not change even if we try to modify this in a and b inside our addition function so the actual parameter is passed to a function and then new memory will be created for our parameters e uh in a and in okay and of course um we could display here the result so printf and then of course the statement the addition or you could say the total of two numbers is and then the format specifier percent d and then the variable answer okay and then you could you know clean and build our application or build and run and it should display the output something like this the total of two numbers is 15 okay so you get the point this is the calling of function by value okay now if we want to try to call the function by reference as i've said we're going to use the ampersand symbol so ampersand symbol or it is the address operator and we're going to use that in our parameter of the called function so let's let's try to implement a function that you know could call by reference and you should see by now how you how the call by reference and call by value is different so the same thing we're going to declare the method here the return type is in and then the name is addition and then it's going to take two parameters with type in okay and then we could uh also use this in answer and then the same value for example and now guys instead of just using this num1 and num2 we could add the address operator the ampersand symbol or the address operator in c programming so basically guys uh we're sending or we're passing the address of this particular variable into our function so so whenever we change this value inside our function it's going to reflect the value of our num1 and num2 okay so um we have here the ampersand or address operator and then we call the function right here and then display the answer and of course we need to add the asterisk symbol for this variable here or the argument and then um one for the other variable b so this means that it is the operator that is used as a pointer to a variable so it's going to point the address to that particular value of num1 or num2 so of course we need to add this also in here and of course for our variable num okay and then as i've said if we want to change the value of num to here inside our function we could do that and it's going to reflect the changes of this num2num1 variable okay and then of course we could still use the asterisk symbol here and let's try to run our program for now so build and run and it's going to answer or it's going to the output this way the total of two numbers is 15. okay so let's try to modify the um num1 and num2 okay for example inside this particular function we're going to change the value of our variable a so instead of five it's going to like maybe six okay so we could do that by using this particular variable argument we could add here the um variable a and then we could say six then semicolon semicolon at the end and we could try to display the value of our a so the value of a and then percent d and it should you know the variable a correspond to the variable num1 right so we could copy and paste this so notice that num1 equals to 5 here okay so let's see what's the output of this so build and run or program so as you can see we have here the the output the total of two numbers is 16 and the value of a is six but as you can see here a corresponds to the num one right num one so we have here num one equals to five and then we change the value of num1 by using the the reference of variable a and then we set it to six that's why we're getting six here and then the total of our addition is six okay so and in this video guys we're going to learn how to use arrays inside our c program so basically guys we can declare variables the whole single element or a single value inside our c program so for example like this age or ink age and then we could assign it to a value 5 for example like this so this particular variable will hold the value 5 for a single value 5 and then it's going to assign to the variable age now what if you want to store like 50 um series of values like there are um 50 each that what uh that we want to save for example there are like 50 percents that we want to save the ages then uh this particular declaration and statement will not suffice because we're going to like declare it one by one so for example in age two and then six and then in age three equals seven and in uh age 4 was like 10 and so on so basically guys this is not a good programming practice to declare multiple variables or yeah multiple variables to hold a single set or a single type of data so that's why we need the capability of an array so basically guys the array is a data structure in c programming which can store a fixed size uh sequential collection of elements of the same data type so in this case guys we're just you know collecting and saving um the same data type of data which is in now what we can do here is we can define an array and then we could set the lens say for example we want to save 50 ages right and then we could save the age into that particular array so let me show you an example so this is how you can create an array inside your c program so basically the first thing is you have to specify the type of your data that you want to save in that particular array and then the array name so basically this is just like the variable name so you have to label your container and then of course you have to specify specify the type of data that you want to save in this particular array and then you have to add the square brackets and this signifies that this particular variable is an array and then inside uh this particular square bracket you can uh declare the size or you know specify the size or how many um values that this particular variable could hold okay so in a typical c program you can do it like this so for example the type is in right and then you can say aegis or age right so this is the iron name and then this uh square brackets and then you have to specify the size for example 5 so you want to collect five values or five age of five persons okay so again this is the type in you have to specify the type and then you have to specify the array name the the variable name and then of course square brackets and then the size of your array or basically the amount of values that this particular array could hold so after this you can say equals and then you can specify the array or the elements of your array so for example we could take all these values 5 6 7 and 10 so 5 6 7 and 10 and for example because our array contains or should contain five elements you could add another one here for example um eight or something okay so again this is how you can create an array of um values so in is the data type and then of course we have the r name and then square brackets with the size 5 for example your array should be 5 and then equals and then the curly braces open and close curly braces and not in available program now you can access this particular um or this elements or these values by using what we called index so in c programming or any other programming with um arrays you could access the values by using index so this index is zero based zero base it means that it will start it will start with zero okay so meaning uh if you want to access the value five so you you have to use um 0 index a this will be 0 and then this will be 1 this will be 2 this will be 3 and this will be 4. so again if you want to access or get the value of this particular element you have to use the zero value of your index and then one for the six two four seven three four ten and um four four eight so let me show you that how that works so for example you want to display the value uh six okay so all you have to do is use the printf statement and then um google quotes and then percent d the format specifier for our um integer values and then comma of course and then we could use the name of our um uh what do we call this array so ages and then we can specify the square bracket and then index of the element that we want to use for example six so we want to use the index one for that to be able to get the value of six so let's try this uh build and rhino program so as you can see the output is six as you can see here 6 right now if you want to get the value 10 you have to use the um index 3 for that because as i said the value is equivalent to the index 3 of our particular array so build and run a program and it should output the value 10 which sits on the index three of our array so that's how you can access the value from our array now say for example you want to change the value of this array right so we have year five six seven eight or five six seven ten and eight and then if if you want to change the value of so for example this one find the first element all you have to do is specify the index also sorry yes so for example we want to display this what will be the um value of our uh index zero so we could test that by using the printf statement and then instead of three you could specify the value 0 or index 0 here so let's try this build and run and as you can see here instead of 5 the initial value of our index 0 it returns 11 because we assign it or we modify it by using the element or index 0 equal to the 11 which is that's why we are getting the 11 value here now this is particularly useful guys or if you want to work with the array um one of the best structure or the best statement that you could use to iterate the array is by using the for loops or loops inside our c program so we could say this here for example four so we're going to use the for loop statement here and we can specify for example um index equals to zero we want to start with zero because as i said the index of our array is zero base it will start with the zero number okay so index equals zero and then semicolon and we're going to say here uh here index um less than the uh actual value of our array or i mean size of our array so five less than five so another semicolon and then index lastplus and inside the for loop we could display the element of our array so we could use this printf statement and then we could use the index variable here and then change this we could say index equals percent d the format specifier and then um we could say equal to percent b and then of course the actual value of our array index so in here we could specify the index okay so it should display the index current index and then it should display the actual value of that particular index so we could build and run our program let me add first the backslash n or new line state sequence new line and then it should display this particular output so at index 0 we have the value 11 at index 1 we have the value 6 right index 0 is 11 because we already modified our array specifying the array or index 0 should be equal to 11 and then at index one equal to six right here uh index two should be equal to seven index three is ten index four is eight okay so that's how easy for us to access and change the value of our array and that's how we can define our multi i mean single dimension or one dimension array inside our c program and in this video guys we're going to talk about multidimensional arrays in our c program so from the previous tutorial we have learned how to use the basic array so we have implemented one dimensional array we are trying to display the contents of an array by using the for loop and of course we declare and initialize one dimensional array from the previous tutorial now as i've said from this tutorial we're going to learn how to work with multidimensional array so basically guys multidimensional array um works like the same with the onedimensional array but the difference is that it contains the array contains a set of arrays so in c programming language it will allow us or it allows us to use multidimensional arrays and the declaration or multidimensional declaration for that is by using the type of force as i've said from the previous tutorial if you want to store multiple values you have to use arrays and in order for you to declare an array you have to specify the type of that particular array so you have to specify the type and then of course the name of the array and then you have to specify the size here so for example size now this is um good for a one dimensional array so you have to specify the type the name and of course the size of your array now comes the multidimensional array or twodimensional array so you could do it like this so size two and then this is the size one so this is how you declare multidimensional array or twodimensional array inside our c program so the type of course you don't you know you don't want to forget that the size of or i mean the type of the value that you want to save in this particular array so and then the name and then of course the size one and then the size two now if you want to create threedimensional array you could do it like this size two i'm in size three so you have square brackets for your size 1 square brackets for your size 2 and square brackets for your size 3. so again this is how you can declare your multidimensional array but you know the simplest form of multidimensional array is by just specifying two sizes and basically guys this this will represent the columns and rows of your array or multidimensional array because multidimensionally works like a table so size 1 will be your number of rows and the size 2 will represent the number of columns so let's try this let's try to declare and initialize a multidimensional array so following this particular declaration type so the first thing is of course the type so in and then we could say here a or a variable name a this is the name of our array multidimensional array and then of course we could specify the size for our rows for example three right there and then the size of our columns or number of columns so that's basically like four and then you could you know initialize this by using the equal sign and then open and close curly braces so in this uh inside this curly braces we could declare or initialize the values for our uh rows and columns as i've said multidimensional arrays are you know composed of um arrays right there okay so you could add array of values right here this will represent the row one of our array so like for example zero um one and then two and then three okay so again this is for uh initializing the row initializing the row index by zero okay so we could access this by using the index zero okay and for example uh basically uh we declare it here like three so we need to add more um arrays to this so open and close curly braces and another one to make it you know the length is three so in here we could display or add four and then five and then six and then um seven okay and then the other row will have eight then nine and then 10 and then 11 okay so basically we now have uh declared initialize our multidimensional array so the three here represent this rows three rows and as you can see here we have declared four columns so it should um count or i mean you know the columns start from this zero four eight and then um one five nine two six ten three seven eleven so this will the four the the eight and the zero represents the column zero and then one five and nine represents column uh one so why this is uh representing column zero that's because our index is you know is zero base or meaning it will start counting from zero so this will be the column zero the column one the column two and the column three okay and of course we could try to display the value of this we could access the values of our multidimensional arrays by using the indexes of the columns and rows so for example we want to change the value of the values that we could get from the row 2 and column 3. so basically the value of or the value that we could get from our array index 2 and 3 is 11 because this is the row 2 and this is column 3. so 0 1 2 3 so we get the 11 or the value 11. so if you want to change this to something like 8 so we could do it or assign a value to this by 8 so it should display 11 or i mean 8 instead of 11 so we could try that so printf and then percent d which is the format format specifier for our in value so we could specify the array index 2 and then index 3. so if we try to compile and run our program we should get now the value 8 value 8 as you can see here that's because we already modified the value inside the array of index 2 and 3 so let's try to comment this and then compile and build our program and as you can see we're getting 11 that's because that's the initial value of the array index 2 n 3. now we could use array or i mean like we could use loops here to access and change the value of our array or multidimensional array and of course because we're using multidimensional array we could also use nested loops to change and access the values of our array so so for example we could declare for loop here and this is for example int and then row equals zero and then our row is less than or yeah rho is less than um like for example um two or or three okay and then row plus plus so basically we're iterating from zero one and two because we're we only have like three rows but we starting we're starting from zero so let's make uh let's making it like the value of our row should only be within two not three that's why we're using single or i mean um less than three right here and then of course we could make another loop for our column so int column and then equals to zero and then column is less than four and then um we're going to say here column plus plus okay and then of course we could use this particular pin printf statement to display the values of our um array so percent d we could use here the uh array name which is a because we're using the array name a so a and then um we're going to specify here the columns and rows so percent d and then here percent d equals percent d so inside here we could specify the row and then the column and of course the value of that particular row and column okay so this will be row and of course this will be column okay so again we're just trying to get the value of inside our array represented by this particular row and column okay so these are the indexes the row and column so let's try to build or compile and run our program and we're getting this particular output right here but we don't want that let's try to add a backslash n to add a new line every uh execution so as you can see here we have all the values coming from our array so array and then we have index 0 0 so the value is 0 right there as you can see and then a 0 1 so the value is 1 a 0 2 is 2 a 0 3 is 3 and a 1 and a 1 0 is 4 and so on so that's how you can uh that's how you can use the multidimensional array inside our c program okay and i think that's clear enough how you could iterate and modify your multidimensional array by using for loops and in this video guys we're going to learn how to use array as a function parameter so from the previous tutorials we already implemented functions that could take few parameters and then return a value based on the parameter that we have passed um to the function now in this particular video guys we're going to learn how to pass the array as a function parameter and of course we already know how the array works inside our c program we already implemented a simple program that demonstrates the capability of using array we already implemented a multidimensional array and even uh iterated the content or the elements of our array now we could take that further by using a function and in this video guys i'm going to show you how you can sum up the values of your array and then we're going to use a function for that so as i've said we're gonna pass the array as a function parameter so here inside our c program we could um declare a new variable or a new array so so for example in and then my number array okay so my um my number array is the name of our array and then it should take in or has the size of say for example six so the number of elements is six right we could specify the values inside our curly braces now we could specify the values 23 30 21 18. um let's say 17 one two three four five and another one for our last element say for example 25 so these are all the elements of our array and then we're we're going to sum up the value of this by using a function so what we can do here is to add a function above the main function or whatever we could also insert function right after the main function so for example uh the function will return the total so it should say int this is the return type and then the name of our array so total value of array so this will be in the name of our function total value of array so again this is the return type and this will represent the total value of the elements that we have here so total value of array and then of course we need to specify the argument or the parameters and because we're trying to sum up the value of our of our array we could um specify that the first parameter is an array okay so so for example int and then number array and this is the first parameter and represents the my number right here okay and then we could also specify the size of the array so basically we have six here so we could say here in and then size and again this will represent the size of our my number array and of course we need to add curly braces inside and inside this function we could add the logic to add all the elements of our array and then return the sum or the total so we could say here in total equals zero okay that that's the initial value of our total variable and then we could um try to iterate the elements of our array by using the for loop statement uh statement the same for loop that we have implemented from the previous tutorials okay so for loop so we can say here in i was the zero and then i is less than the size of our array and then i plus plus and then inside the for loop we could say sum or total equals total plus the number array right there and then we could specify the index which is we're going to use i so this is the variable i that we have declared inside our for loop so number array and then the index i okay and of course guys this is the same uh the same with this particular line we could write it with this particular line total equals our plus equals and then a number array and then of course specify the index of that particular number array so again this particular line is the same with this line all we are all we are doing here is trying to accumulate the total of our number array right here so after the total plus equals number array we could return the value of the total so by using the return statement and then of course the variable total okay okay so i think our function or our function total value of array is already set we could now call this particular function uh inside our main function right here so basically for us to call that particular function all we have to do is use the name which is total value of array so total value of array right there and then open and close and then we're going to supply the parameters which is the first one is the array or the my number of uh my number array so my number array and then of course the second parameter is the size of the um array which is six right there and then of course this particular function returns in which is the total we could catch the value by using also in and then you could say here sum equals the return of this function that has the parameters array and the size of the array and then right after that one we could print the sum of all the elements so printf and then we can say here the total value is you can use the percent d and then backslash n and then comma and then of course specifying the sum variable okay and now we could compile and run our program so i think we have an error here because we use the comma so we need to remove that and compile and run again our program so it should say here the total value is 134 which is the total of this particular value uh elements here from our my number array okay so we could also add function i mean add element to this particular array so it should say after 25 we could add like for example 50 and then another one um 25 so basically the length of our array or the size of our array should be eight because we already added two elements the 50 and 25 and of course we need also to change this particular uh parameter here it should say also 8 okay so let's try to compile and run our program and as you can see here the value is now 205 okay so let me explain to you in details how this works so first we define the elements of our my number array and the size of this or the number of elements of this particular array is eight right there and then right after that we call the function total value of array and then we pass in the my number array as the parameter and of course the second parameter is eight which is the size of our number array now for the total value of array function as you can see here it takes two parameters the array and of course the size of the array and then inside here we initialize and declare the total variable equal to zero and then we iterate the my number array or number array by using the for loop and then we use the i as the index variable so i equals to zero and then i is less than to the size that we have specified and then i plus plus and then of course uh in order to get the total of the elements we're using total equals total plus number array so basically this is the same with this line total plus equals number array and then specify the i index so so for example this particular i um the value of i is 0 then it's going to get the value 23 and then i value 1 it should get the 30 i value 2 is 21 i value 3 is 18 and so on so you get the idea and then of course after that we get the total value and then of course return that to this particular variable sum and the last thing is we display that the total value is and then specify the sum of all the elements that we have from this number array okay in this video guys we're going to discuss what is pointers and how we can use pointers inside our c program okay so if you're excited guys please make sure to watch the full video we're going to be learning a lot in this particular video and in the succeeding videos about pointers so basically pointers in c are you know easy and fun to learn so there are some c programming tasks that are performed more easily with pointers and there are other also tasks such as dynamic memory allocation cannot be performed without using pointers so it becomes necessary to learn pointers to become a perfect c programmer so if you want to be like almost perfect c programmer so it is necessary for us to learn pointers okay and let's start learning them in simple and easy steps so as you know every variable is a memory location and every memory location has its own address defined which can be accessed using the ampersand symbol so i think we already used this particular symbol before in our previous tutorials but we're going to you know tackle deeper what is this particular symbol and how we can use this in um you know working with pointers and it is you know denoting an address in memory meaning the ampersand and for example we're going to define here or create a program that could um showcase the capability of this operator and um the basic access to or basic you know access to the pointer address so for example we have a variable in var one and then we have char var2 which is the length for example is 10 so basically guess as i've said these particular variables these variables has location or has a specific location in our memory and every memory location has its own address so in order for us to verify that we could try to print the address or memory address of this variables so we're going to use printf function and then in here we're going to say address of var 1 is percent x so this is the format space of uh performance specifier when we're trying to display the address of the variable so percent x and then we're going to specify a new line here and then comma and then of course we need to use the ampersand symbol and of course the name of our variable say for example the var one so the address of var1 column and then percent x the format specific specifier and then of course specifying ampersand and the name of our variable one and um we could do also the same for the second one or second variable var2 so percent x and then this will be var two so this is basically guys trying to test if this particular variables has you know we will just display the um address of this variable okay so before we run our program let's change first this because i have forget to type number one because this is uh this is suppose saying that this particular variable has the length of 10 okay so that's char var2 and then open and close square brackets and then 10 okay so let's try to build and run our program and as you can see it's going to display the address of one is six one uh fe1c and the second one will be fe one two so that's basically the address of the variables var1 and the var two so a pointer variable is a variable whose value is the address of another variable okay so for example direct access of the memory location now like any variable or constant you must declare a pointer before using it to store a variable address so the typical or you know the general form of pointer variable declaration is just like this we need to specify the type and then the asterisk or star symbol or asterisk in other other terms and then of course the variable name so that's how to declare a pointer variable so again we need to specify the type and then asterisk symbol and then the variable name so um here the type or type is the pointers base type okay and it must be a valid c data type and of course the variable name or the var name is the name of the pointer variable and as you can see guys this particular symbol asterisk symbol is sometimes used to declare or use for multiplication process or multiplication operation right but in this particular case it is being used as to declare a pointer variable okay now in order for us to declare pointer variable based on this particular declaration form so we could say something like in and then percent or i mean the asterisk symbol and then the name of our variable so this will be pointer pointer to an integer okay and then we have for example double and then the asterisk symbol dp and this is basically the pointer to a double we also have like float and then fp this will be obviously pointer pointer to a float and another thing ch and then this will be a pointer obviously to a car regular so the actual data type of the value of all pointers is you know a long hexadecimal number that represents the memory address so whether we declare it as in we declare it as double we declare it as float or character so it's going to do it's going to return a long hexadecimal number that represents the memory address now the only difference between pointers of different data types or data types is the data type of the variable or constant that the pointer points to so for example this particular variable points to this variable one then it's going to be a bit different because we are referencing to an in variable so let me show you that how you can you know use pointers we could remove this lines okay in var1 we could assign a value to this like 20 and then this this will be the actual actual variable declaration so this particular variable has the value 20 and then we could declare a pointer variable so in and then asterisk ip so this is pointer variable declaration so you get to see the difference between this declaration the pointer variable uses the symbol asterisk okay and then of course in order for us to store the address of the variable one into the pointer variable ip we could use ip variable equals the ampersand symbol and of course the var okay so basically guys we're just passing the memory address of this particular variable one into the pointer variable ip okay so for example we could print the address of our var one so printf address of var one we could use percent um x as the format specifier and then box slash n for new line and then use the ampersand symbol and then var1 so let's try to declare or i mean display first the address of the var1 and then we could also just do the same print the address or the value of the pointer variable ip so the value of ip and then percent x backslash n and then the variable ip so let's try this clean and build our program and it should you know display the same hexad hexadecimal value so address of var one is six one f e one four and then the value of i p is you know six one f e 1 4. so basically we're just trying to display or i mean store the memory address of var1 into the pointer variable ip okay and of course if you want to access the value using a pointer um you could try to modify our program to access the value access the value using the pointer variable so printf and then value of pointer variable ip so for example percent d backslash n and then asterisk ip so basically we're just trying to access the value of this particular pointer variable so let's try this clean and build our program and as you can see here we have the address of var 1 6 1 fe 1 4 and the value of the pointer variable or i mean the address of ip or you know the pointer variable ip61fe14 and also here we could say that the value of this is 20 which is also the same with our variable one so that's how easy for us to you know use the pointers inside our c program in this video guys we're going to be discussing what is string cnc and how we can take advantage of the usage of this particular strings and then of course we're going to be dealing with the different functions that we could use in order to work with our strings in rc programming language now if you are new here in our youtube uh youtube channel and you want content about programming i am inviting you to subscribe and press the notification bell so you'll get updated whenever we have a new upload so without further ado let's dive right into our topic which is the strings in c programming so basically you guys when we say string in c programming it is the one dimensional array of characters this is called strings in other terms this is just you know a group of characters um logically grouped together and then and then there should be a sense why we're grouping these characters together and this is terminated by null character backslash zero so actually guess there are two types of or two ways to declare string in c programming okay so we could declare it like this basically guys we have here the basic structure of our starter program so hello world program so i'm just going to delete that and we're going to initialize or declare string in c programming so you could do it like this you could um specify the type as char or car and then of course the name of your variable so you could name it something like this name and then you could specify here the um length of your array of characters so for example six and then in here we could um add the different characters for this particular string so we could say here for example h comma and then we're going to specify another character so first you have to specify single code and then the character and then single code to close that particular literal string and then another comma and then single quote the character again single code comma and then single code another character okay so you get the idea on how you could you know declare your string variable in c programming so i'm just going to continue working with this so we have um declared six so as i've said from the beginning you have to or the string it is the onedimensional array of characters and it should be terminated by a null character so null character in c is backslash zero okay so basically now we now uh we do have the string name and then we need to close this one up so this is how we could declare our string in c programming language and actually guys you could do it also like this so for example you don't need to specify the len so char and then you could say here last name and then all you have to do is um declare it as an array but you don't have to specify the length here for example 5 or 6 or something like that so all you have to do is initialize this with a with an actual value for example hopkins something like this okay and then close it with semicolon so basically guys it means the same thing if we declare the string like this or if you want to declare the string like this and of course we could try to display this all we have to do is print and print f and then we could say here the name is and then we need to add the format specifiers so percent s for string and then the new line specifier and then comma and then the actual value or string or the variable that we want to display which is the name something like this and then semicolon and we could also do the same for the last name so printf and then open and close parenthesis the last name is percent again percent as the format specifier for string and then newline and comma then the actual variable which is last name so we could try this at this the the semicolon at the end of the line that denotes that this is the end of this particular line okay so make sure you do that because the compiler would complain if you did not specify the end of a certain line so now we could build and run our program and it should display your string like this the name is hello as we have specified in our variable name and then the last name is hopkins as you can see here okay so that's a good start on how we could start working with our string in c programming language now there are functions as i've said there are functions that we could use uh if we want to work with our string more so so for example what if you want to copy a string concatenate the string get the length of the string so we could do that we could also compare strings if you uh if you like to compare strings so all we have to do guys we need to include a header file which is string.h so this header file contains all the functions that we need if you we want to work with string in you know deeper sense so string and then h as i've said this will contain all the functions that we need um like for example the sdr copy str concatenate str land or if you want to get the length of a certain variable so for now let's just try this this is for display display the value of our string right and then of course here we could use functions to our string okay so perhaps the first function that we could use is the sdr copy so the keyword for that is str sdr and then c p y so as you can see here we have the other suggestions um the sdr copy right here so we could click on that and then in here we could specify the string so let me explain first what this means so the sdr copy function takes in two parameters so the first one will be the destination or the string that the copy of a value will be stored in and then the second function i mean the second argument will be the source of um or i mean the source string okay so again it will take two parameter this strcpy the first parameter will be the destination string the second parameter will be the source string okay so for example in this program i'm going to declare another string here and then we can say here s t r and then full name example this is just for a sake for the sake of example okay so for example this will be maybe i don't know maybe 13 okay so we don't set the value for this for now and all we have to do is use our sdr copy function and then we need to specify the destination string so for now let's use this sdr full name as the destination string right there and then comma and then of course we need to specify the source string okay and then the source string will be um maybe the the last name okay now if we want to display the value of set or sdr full name then we could use the printf statement and then we can say here the full name is and then percent s again backslash n for the new line and comma for um the actual value str full name right there and then end this up with the semicolon okay and then we could clean and build this just to see the result of our program and in here we have an error okay so we copied the actual value of our variable instead of using last name so let's just modify this so instead of hopkins it should be last name here okay so clean and build our program and it should be okay for now and as you can see here we have the display so the last name or the name is hello as you can see and then the last name is hopkins and the full name is hopkins and these two is identical that's because we already we just copied the value of last name and assign the value to the str full name okay so that's how easy for us to copy strings inside our c program so there are there are other functions as well if you want to explore more about this so for example the other function that we could use is str say a t or c sdr cut so this will concatenate the string or two string so basically it will just takes two parameters the the first one and the second parameter and then it should you know combine this two string to to to form a new string so let me show you that so let's just use this sdr cut and then maybe we'll just use the name and then the last name so the first string will be name okay and comma and then we need to specify also d um but they call this the string or the second string which is the sdr full name okay and then semicolon okay and then after this we could display the value of our name so all we have to do now is copy this and paste it this here and let's clean and build our program so first now let's just close this close the output the output first and then clean and build our program and it should display here what we have done so far so the name is hello the last name is hopkins the full name is hopkins and as you can see here the name is hello hopkins so as you can see it concatenated the name and then the last name so the the name got the value of hello and then the last name got the value of hopkins okay so i think that's all there is to it for this tutorial and if you want to learn more about strings all the functions you could explore the documentation so if you want to know more about the different functions available in this string that h header file you could visit this website and then you can see here the commonly used string functions so we already have used the str cpy sdr cat and of course the other most common you commonly use string function is getting the length of your string okay and in this video guys we're going to be learning structures in c so we're going to explore what is structures and how we could you know use structures inside our c program so basically guys when we say structure it is a user user defined data type it is used to store a collection of different kinds of data so in a sense it could be something similar to an array so basically it is like a collection the only difference is that an array is used to store the same data types so in an array if you want to save an integer value so you have to make sure that all the elements of that particular array is also int or integer and if you want to store double so it should have double or it should you know contain all double elements while if you want to use structure you could declare multiple data type inside this particular collection so in order for us to use structure in c we're going to be using this particular keyword strut okay so this is how we could create a structure in c programming so struct so variables inside the structure are called members of the structure okay so now let's try to define a structure in c so say for example we want to um try to declare a struck courses so all we have to do is specify the keyword strap okay and then this is going to you know make sense later on if we want to access the members of this particular struct so for now let's just stick to this um strap is the keyword that we could use to you know declare or define a structure in c so again that's the keyword struct and then we could specify the structure name so this could be any any name that you want so for example we could name this courses okay so this particular courses uh this will contain different variables okay so as you can see here we have added curly braces opening and closing curly braces and then at the end of the closing curly brace the semicolon that signifies the end of this particular line okay and then inside here as i've said we could have multiple variable type okay so for example number one will be char or car and then we could name this for example website and then the length is 50 okay and then semicolon and another one car for char and then subject will be the length 50. then the last one the last one will be about price okay so as you can see here guys we have these trap courses and then it contains three different data types uh of variables so we have here website with lan 50 subject lan 50 and then price which is an in or of type in okay that's how easy for us to you know define a structure in c now we could um access this the strap courses but basically we need to move this outside of our main function so we have to move this i'll just have to cut and paste this so it should be outside our main function because we're going to declare or i mean access the struct from this main function right here okay so you could think of this uh if you are into object oriented programming you could think of this as a class for now but this is different because this is a structure which is collection of you know different variables or different data types but you could think of this as you know an object or a class for now and then we could access this inside our main function so in order for us to access that we just need to specify the name of our strap inside our main function so all we have to do is use again the struct keyword like this and then the name of this trap which is courses okay and then we could assign an alias to this for example course or maybe c a big letter c okay big letter c okay and then semicolon so that's how we could um access this courses struct inside our main function so all we have to do is like um use the struct keyword and then name of our struct which is courses and then assign assign an alias to this uh strap okay and then after that one we could initialize perhaps our variables okay or members of this struct so all we have to do is we could say here initialization we could now access the members of the strat courses by using this alias so initialization for example um sdr copy okay so i believe i i have already showed you how you could um assign a value to a string because we're going to be assigning value to this website so this is a string collection of characters so str cpy and then we're going to say here c and then website so as you can see here we have the access to all the members of the courses struck so we're going to use the website first and then we're going to assign a value here for example triple w programming knowledge something like that so basically what we're doing here dot com we're just doing here is we're just getting the website member and then assign a value to that which is the www.programmingknowledge.com and after this we could you know access the this value by using this member of struck so later on we will try that but for now let's just move to the next member so again we're going to use sdr copy strcpy and then now we're going to use the subject subject so the the subject will be introduction to c programming so that will be the subject for this particular course so again we're just doing here um we're just getting the subject member of our strap and then assign a value to that which is this string introduction to see programming okay and of course the other one or the last one will be the price so what we do here is use the c alias that and then price and then we could assign a value here for example we want to um specify a value or a price here like 15 or something and then after that after initialization of course we can use the these values right here so all we have to do is we can say here print so we could use printf statement and then we could say here website percent um semicolon our column and then percent s and then we're going to add new line here comma and then the member of our strap so c dot and then website okay and then semicolon at the end so we're going to do the same for the other members so uh the next one is the subject so percent s and then backslash n and then we're going to access the subject member of strap and then the last one will be wind f i mean the price so price we're going to do the same here percent um d that's the format specifier for our uh integer values so c that price okay and then semicolon at the end of this line to denote that this ends with this semicolon okay so now let's try this let's uh build and run our program and we are we're having an error here i respected because expected that's because um we didn't we did not add the semicolon here okay rookie mistake build and run and as you can see here we now have the values displayed here in our console so the website is www.programming.com and then subject is introduction to c programming and the price is 15 so that's how easy for us to use struck in c and then we could you know make this um collection of different variables and then we could assign values initialize and then we could also change if we want to change the values after initialization and then after that we could display the values or the actual values of the members of our struct and in this video guys we're going to learn how to use unions insider c program so from the previous tutorial we learned how to define and use structure and then we also implemented different methods or different functions that we could use whenever we are working with structure right so at this point in time we will be learning how to use union also so basically union and structure is almost the same but there's a significant difference that we will discuss later on so the thing about struck is or the thing about structure is that we can store different data types in different memory location but when we say union we can store different data types in the same memory location so that being said if we try to define union a union is a special data type available in c that will allow us to store different data types in this in the same memory location so you can define a union with many members but only one member can contain a value at any given time that's because we store the data inside the same memory location so in other words all the members of the union share the same memory location that's why every time we set a value to a particular member of the union other values will be over um will be erased and then replaced with the new value of a particular member so to define a union you must use the union statement so from the previous tutorial we use struct for this structure but in the case of defining a union we will define a union by using the union statement in the same way as you did while defining the structure and the union statement defines a new data type with more than one member for your program so basically it looks like this but instead of strap you're gonna use union okay so that's union and then of course the name of your union for example data right there and then you have to add open and close curly braces that signifies that all the variable inside this curly braces is a member of the union data okay and then of course we can define the members here so the same thing with our structure so that being said we can say here int i okay and then we could also um add float f and then say for example char sdr and basically for example the length for this is like 10 okay so let me show you first how this particular union works so the union tag is optional actually and each member definition is a normal variable definition so such as i or in i or float f or any other valid variable definition and at the end of the union's definition before the final semicolon you can specify one or more union variables but is but it is optional so you can also say here the name of your union is like um data okay so you can refer to this data and then you can now you now have the access to the members of your union by using this reference okay now a variable of data type can store integer float or string of characters so it means a single variable and then same memory location can be used to store multiple types of data so you can use any builtin or userdefined data types inside a union based on your requirement so it depends on you so the memory occupied by your uh union will be large enough to hold the largest member of the union so for example in this particular code data type will occupy 20 by or i mean 10 bytes of memory space because this is the maximum space which can be occupied by a character string now we can display the values uh of this union so for example we try to display all the uh i mean any value coming from this union so at first we could you know refer to the members by using this reference so data dot and then we could say here i then we could initialize this value into for example um five like that and then we could print the value of i so here we could say the value of i is and then of course we need to have the format specifier for our i okay so d and then we could add also the new line and then comma and then of course data dot i okay and then semicolon so let's try to run our program so basically let's hope that we won't have problems so build and run or program and as you can see here the value of i is 5. so we were able to set the value of our data i member and initialize it to 5. now take a look at this for example we set the value of float into a something into some value for example data that f equals to for example let's say 22 or maybe like eight okay and then um we could try to maybe add 8.5 here just to make sure that it is kind like float value so we set the value of our f into 8.5 so we could you know build and run our application and as you can see here we're getting the value of i is something like this okay so the value of i is something like this that's because the value has been you know corrupted when we try to set the member f into something like 8.5 and as you can probably remember that the members of the union share the same memory location so that's why if we try to change the value of a certain member then it will override the value of the other member so that's why it's somehow corrupted our value of i here and we're getting this random number like this but the purpose of using union actually is to have a some sort of a value at a certain point of time so for example if we want to make use of the union we could try to display the value of i right here after the initialization so the value of i is and then we're getting the the value of i remember here and then also if you want to you know display the value of the float f value or remember from this union then we could what we could do here is change this into f that's the formal specifier for a float value and then we could say here the we want to display the member f from the data union so we could actually get the correct value right after this so let's try to run this so build and run our application and as you can see here that we're getting the value of our i is 5 so let's change this instead of i this is member f and this is member i because this is a member of this union so let's build and run our application and we're getting this output the value of member i is equal to 5 and then the value of member f is equal to 8.5 so that's basically the correct value that we're getting or we're setting here in our main function okay so i think that's all there is to it for this tutorial and a sort as a sort of summary or review we have learned how to use union insider c program and then we learn that we can store different data types in the same memory location by using this union keyword and then store different variables with different data types and um yeah we also set and initialize the value of the members of our union and then also display the values individually right here in our c program and in this video guys we're going to be discussing type def in c programming so as a sort of review in the previous tutorial we have learned how to use unions and how to implement unions inside our c program and we also have implemented a simple solution or simple program that implements the capability of unions and c so as i've said in this video we're going to be discussing type def and yeah i'm going to show you how you can use typedef inside your program or c program so basically guys c is such a dominant language of its time and even now that even uh you can name those primary data type of your own and can create your own name data type by blending data type and its qualifier so it means that we could create our custom name for our qualifier or custom name for our primary data type and then we can use the keyword type def right here and this is a keyword implemented to tell the compiler for assigning an alternative name to the existing data types this keyword type def typically employed in association with userdefined data types in cases if the names of data types turn out to be a little complicated or intricate for a programmer to to get or to use within a program so there are cases that a particular data type or a name of a particular data type is like complicated and it's not easy to be used inside a program so that's where the type def comes in so it can be used to make the naming of our data types or variables in c a lot a lot easier so the typical format for implementing this type dev keyword is like this we can use the typedef keyword just like that and then we could um specify the existing names of data types or data type data type okay and then of course right after that is the alias user given name so again we're going to use the type dev keyword and then of course the existing names of data types so there are like int signed in unsigned char and other permitted data types inside our c program and then of course we're going to add the user given name which is uh the custom name that we want to name this particular um existing name data type so this is going to make sense later on if you try to implement this inside rc program so for now just think of this as the syntax of defining or how to name our existing data types so type def and then existing names of of data type and then alias or the user given name so we could um add here a sample snippet so like this type def okay and then sign long okay and we're going to give this um user given name as s long okay so basically guys if you have or if you are trying to define sign long um data type so it's going to be uh complicated or like it's going to have a long name because you can do it like this sign long and then say for example var variable 1 and then sign long var2 signed long var 3 and so on so as you can see the name of this particular variable or the data type has like signed and then long keyword so it's going to take up more space take more uh we're going to type more text inside our program instead of just using it like this so all we have to do is define it like type def and then sign long and then as long and then we could implement this said of like that we could implement that by using something s long and then g okay so basically what we're doing here is that we're we're just getting this alias from there and then um it's going to include all the data types or existing names of data type here so the s long is associated with this right here so work we can declare or yeah create a variable with the signed long data type something like that and then of course we could add a variable just like this it will allow us to create two variables name g and d which will be of type signed long and this quality of cyan long is getting detected from s long okay which already defined the meaning of islam or as long in your program which is this particular meaning signed long okay and right after that we could make this or the concept of type type def can be implemented for defining a user defined data type with a specific name and type and this type def can also be used with structure um of c language and of course we already have um tackle demonstrated how we can use strap insider c program so basically what we could do here as i've said we could add or use this a keyword type def in our structure so the syntax is like this all we have to do is type in type def and then struct then say for example student so this particular struct is named a student and then it has like the members of this truck is of type char and then say for example s name which is the name of the student okay and then we could say here in s h okay so this particular strat saved um a data which is the name and the age of the student and of course we could add an alias store struck so for example stood okay so just like that and then of course we could use this truck inside our main so for now let's get rid of this so what we could do here is we could say stood and then st something like that and then we can see here printf and then enter student details okay you could add a new line here see me collin and then we could copy and paste this you can see here enter student name and we're going to add a tab slash t and then we could what we could do here is use the scanf function so percent s and then we're going to be passing the st that last name so all we're doing here is just assigning a value of this sds name coming from our user okay and then second line or the second information that we need is all about the age of the student so enter the age okay so we should add backslash n right here to add a new line okay so what we could do here is scan f and then percent d okay and then we could say here st dot h okay and then printf um just like this backslash n for a new line and then we can say here input done okay of course we could display this if we want to you know to get all the information that we have entered the name and the age of the student okay but for now let's let's ju uh let's just try this build and run our program okay so we have here the output enters student details so the first name or the the first option will be the name so we can say here john and then the second option is the age so enter the age of the student so for example the age of the student is and then yeah we need to add um it says here that the main.xc has stopped working we need to add the um ampersand here and then build and run our program once again so i hope this would this would work right now so john and then the age of the student will be 18. so input done okay so basically guys we could um define our struck with the use of type def um keyword just like this and as a as you can see here we define our um stud alias right here and then we use that stud alias right here to name our variable st and then from that our sd we could access the members by using the dot symbol so st that and then the members of our struck student okay and in this video guys we're going to discuss what is file handling in c and then i'm going to give you a basic example we're going to create a program on how to handle files inside our c program so basically guys c files input or output functions handle data on our secondary storage devices such as our hard disk and c can handle files as stream oriented data or system oriented data or binary files so again guys we're going to focus on this so the first one will be stream oriented data files and the second one will be system oriented data files okay so when we say stream oriented data files the data is the data is stored in the same manner as it appears on the screen okay so i i hope you can see that the input output operations like buffering data conversions take place automatically while system oriented data files the data files are more closely associated with the operating system and data stored in memory without converting into text format so this is going to make sense later on when we try to implement our very simple file handling insider c program now there are five major operations that can be performed on files so this will be again i'm just going to list it listed here just for you to see because i think it would be much clearer if you can see all the details all the things that i'm talking here so c file operations so first one will be creation of a new file the second will be opening the third one will be reading the fourth yeah fourth one will be writing data you know file and last will be closing a file so these are the five major file operations the first one is great again creation the second is opening so we could open an existing file and then we could read the contents and then write data into a file so for example in your program you want to save an information so you could write data into a file okay and then of course whenever we are opening a file we need to close it after using it inside our program okay so the steps there will be steps for us to set up the file operations so these are the steps for processing a file so number one will be declare a file pointer so this is important so we need to declare a file pointer variable and then this will be our variable that we were going to use whenever we want to work with our files and then after that one we need to open a file using f open method or function okay so after that we're going to process this will be number three process the file using the suitable function right here and number four will be closing close the file using f close function also so if we want to work with files inside our c program we want or we we might want to check this steps for processing our files so we need to declare a file pointer variable and then we're going to open the file using the f open function right here and then process the file using the suitable function so for example we want to iterate through the lines inside the file if you want to save or maybe write information into the file you can do that here in step three meaning you could process the entire content of that particular file and then right after processing maybe uh you need to close the file or not maybe you must close the file after closing or after processing it inside our c program so basically guys there are a lot of functions that we could use when when we say um we're processing a file so to handle files in c um file input or output functions available in the stdio library are the following so i'm just gonna list it also here for you to see so we also we already discussed the the the two functions the first one will be f open and the second one be uh the second one will be f close there are also uh functions such as get c which means um we read a character from a file and then we also have put c so this function put c writes a character into a file and then also we have get w which means we need to read an integer from a file and then we also have put w so write an integer and we're going to use this later on this particular functions okay so you need to be familiar with this again if you want to read characters from a file you need to use this get c and then if you want to write character into a file you you need to use put c and get w gets the integer and put w write an integer into a file and then we also have f printf so f printf prints formatted output into a file and we also have f scanf so reads formatted input from a file we also have f gets right here so f gets a read string of characters from a file and we also have the next one will be f puts and then uh the last one is f e o f so f puts right string of characters into a file and then we also have f eof so it will detects end of file marker in a single file okay now as a sort of example we're going to implement a simple opening in closing of a file and maybe writing a specific text or something into our file so we're going to do that right here so at first we need to remember the the the steps for processing a file we need to declare a file pointer so in order for us to do that we're going to have to follow this syntax right here i'm just going to copy and paste it here file open so as i've said we're going to use this function f open and these are the possible parameters that you could use okay so to put it simply we could use this we could declare a pointer variable so f p and then semicolon and then we're going to use that pointer variable and then use the f open function right here and then uh we could say here filename dot txt and then another uh parameter and then we're going to use here w so w means that the file is being opened for writing and if the file does not exist then uh there will be new file created okay so um let's just return zero for now okay after that we could close our file okay if we open the file we can also close this so what we what we need is to use the f close function and then pass in the pointer variable which is fp right here okay and right after opening the file and before closing the file this is where the processing of the pile uh processing of the file happens processing of the files right here process end of processing okay so inside of processing we could just simply if you remember we have different functions so get c put c uh f printf so we're going to use this so for now let's just say uh f printf okay then open and close and then semicolon and inside here we could specify the pointer variable which is fp and then of course percent s percent s where is it percent s there you go and then hello world where okay hello world there you go so after this we could save our file and then build and run okay so for now we're getting process return zero it means that the execution of the program is successful so we're going or we're trying uh we're going to try to open the file that we have created and as you can see here i have my project right here from documents code blocks projects and then programming knowledge and then if we try to open this we can see the text hello world okay so there you have it on how you can write files or write lines of strings into our file by using this simple program right here and i think that's all there is to it in this video in the next tutorial we're going to read text inside our files and then display it in our maybe console or we want to if we want to process the contents of the file insider c program in this video guys we're going to continue working and discussing file handling in c programming so from the previous tutorial so actually this is part two of the file handling video tutorial and in the previous tutorial we discussed the basics of file handling and also discuss the five major operations that can be performed on a file so for example the creation as the first operation and then opening reading writing and closing a file and also we discuss the steps for processing a file so basically if you want to handle files inside your c program you need to declare a file pointer variable as the first step and then the second step will be opening a file using the f open function and then right after that one process the file so for example you want to count the number of lines inside of that particular file or you want to add something to that file you can do that so that's the processes or processing of the file and then of course closing the file using the f close function and from the previous tutorial also we briefly uh discussed the different functions that we could use when we are handling files in c so for example the get c the put c um get w and put w and the other functions so in this video guys i'm just going to show you how you can uh read the content of a file and display it in your simple program so we're just going to use this main function right here so i have here the main.c um file and yeah main.ca file and then we're just going to use this main function right here just to get the contents of our file so as you can probably remember from the previous tutorial we already created the file inside our file system and let me show you that okay so i have here the file and then file name that text and it contains the text hello world as you can see here so this is written from our c program and in this video we're going to read this by using also our c program so in order for us to again if we want to handle files in rc the first step is to declare a pointer variable so the pointer variable goes like this so we need to call on this file class and then add the semicolon i mean the asterisk or star symbol as you can see here and then of course the name of your variable so i'm just going to name it filename and then semicolon at the end so this is our pointer variable as i've said this is the first step for handling files in c we have to declare a pointer variable and then uh the next step since we're getting the content of a file i just want to assign the content of a file into a single variable so for example i'm just going to declare here another variable car or char ch or the name of the variable is ch and then i'm just going to assume the length um 100 there you go and then semicolon so basically this particular variable will hold the contents of our file okay next line will be using the file name variable right here which is our pointer variable and then the second step in the process is of course open the file by using f open function we already use this function from the previous video so in here we're just going to specify specified the name of the file which is file name that text as you can see here so that will be file name that txt and then we're gonna use the r symbol okay that's basically um reading the file name or i mean the file coming from our file system and then the next step is of course if we want to print the contents of our file so we're just going to use the printf function right here and then specify the um format specifier percent s because we're going to display um character or strings of character here coming from our file and then comma and then we discuss the function in the previous tutorial f gets f gets okay so basically this function um string of characters from a file and this particular function takes uh a few parameters so for example we're just gonna um specify the parameters here so for example the variable ch that's the variable that will hold the contents of our file and then so for example 50 this is the count of characters that we're going to allow to be saved in our um char ch variable and then of course the file name okay and as always if you are working with file since we're opening the file here we need to use also the closing function which is f plus right here and then we're going to specify the file name right here okay so for example the file name and that's about it and we can run our program right now let's just save this and build and run so it's going to output hello world so for example just to show you a basic example let's just fill out our file in the world this is a string from a file so we're just going to test this so save and let's run again our program okay so as you can see here hello world comma and then this is a string coming from a file as you can see here so basically we successfully um read or get the contents of our file filename.txt file okay so now there are other operations that you may want to do in your file so for example you want to like count the number of lines that's possible again this particular symbol right here is uh like opening a file in a read mode okay so r that's basically what we use here so as i've said there are also other functions that we could use when trying to handle files in our c program and of course f gets is one of them but there are also so for example we have um get c so this reads a character from a file okay we also have um get w so this will be for reading an integer and we also have um f gets that's what we used here so f gets reads string um string of characters from a file okay and then of course there are other functions that you could use to write this is right ping into the file so we have put c um put w so basically put c writes a character a file and then put w write an integer to a file and then we have f print f for writing and we also have um f puts okay to write string of characters into a certain file so i hope you understand the basics of handling files in c and in this video we're going to be learning enumeration or enum in c so enumeration or enum is a user define or userdefined data type that we can use inside rc program so it works like almost the same with strap so as you can probably remember from our previous tutorials we already discussed and um strut inside our c program so as i've said in this video we're going to be learning enumeration so that's that's where our focus should be enumeration so enumeration is mainly used to assign names to integral constants and these names make program is easy to read and maintain so i'm going to be showing you a graphic right here on how we can declare instantiate and operate with enumeration insider c program so basically guys this is how we can um declare the enumeration right here so declaration we have this keyword enum and then the name of our enum variable so in this case days of wick okay and then we have different states we have seven different states here that starts from the value zero the second will be one and the last one will be six so um all of this states these are called enumerators so this is just the list of constants separated by commas so this will help us to make our program easy to read and maintain because all of these enumerators are already already listed here so we know what values to get what values to assign to a certain variable if we want to use this inside our c program now after that declaration we do have this insensation so in in sensation part we have also the name or the keyword enum right here and then of course the enum variable that we have declared on tab say for example this one days of week as you can see here and then of course we need to assign an object of enum days of week so basically guys this day is just an object of our days of week in um as you can see okay and then right after that instantiation we can now use that in enumeration or enum um here in operation so for example you want to like assign a value to our object so they equals and then the value of our enum that we want to use so for example this one in this case we specify that it should be wednesday right here okay so we could assign the value just like that now we can use this insider c program as i've said because we're dealing with enumeration or enominc so we can use our ide to create our simple program implementing the enumeration or enum in c so for example we want to like implement the days of a week so as i've said in our declaration we can use the enum keyword right here by the way guys you can declare enum locally you can declare enum locally or inside a function right here or you can do it here before our main function globally declare our enum okay so for example we want to do this globally so our keyword enum right here and then the name of our for example in this declaration we have the enum keyword and then the name of our variable so days of week so for example in our case we're just going to use the weak variable name and then inside here we can declare inside the curly braces so make sure you use curly braces and then semicolon at the end of this particular line to to signifi signify that it is the end of this particular line so inside here we can declare for example for monday tuesday wednesday thursday uh friday saturday and sunday so that's how we can declare our enum variable again you have to use the enum keyword and then the name of our enum which is in our case here week and then open and close curly braces and you can declare the enumerators here and of course you have to specify the semicolon at the end of this particular line now in using this particular enum we can do it here inside our main function so we can again i use the enum keyword and then our name of our enum which is weak as you can see here so take note of that that we use the enum keyword and then the name of our enum and we can assign an object to this for example they okay so that's how you can specify our enum object so enum keyword the name of our enum and then an object of our enum which is they so for example you want to assign a value to this so they equals for example wednesday so you can just use wed and just three letters if you want but anyway you can use also the full um names of your constants but in our case we're just gonna use the three letters to have like a uniform constant names okay so here we can use so for example wednesday and then of course you can print this you can specify the percent the here and of course the object of our enum okay so let's try to run this and see how our uh what the output of our program so as you can see here we're getting two the value of our object is two because as you can see um our enumerators or the state of our numerator starts from zero so zero one and two so that's why we're getting the value of our object here as two but if we wanna change this for example sun for sunday then run on build our program so the output will be six so by default guys um the value of our enumerators will be if we we did not assign a value to our enumerators the default value of this will be zero this one will be one this will be two as you can see if we try to hover over our mouse here in our constant so we're getting two um this is obviously three but we're not getting the um like the hover over display four this is five and this is six so that's how our state is being initialized by the compiler so it is getting like the uh getting default values 0 until to the last state minus one of our enumerators okay so if we try to initialize our states for example we want to make this one we could do that so monday will be one tuesday is two wednesday is three um thursday is four friday will be five saturday will be six and sunday will be seven so remember earlier we are getting two coming from wednesday because that's the default state of our constant wednesday but if we try to assign the value to our enum object here into wednesday let's try to see the output okay so instead of 2 now we're getting the value 3 because we initialize already our variable and it's not assigning a default value to our states now here's an interesting facts about initialization of enum so if there are like two enum names we can declare same value for example you want to declare value for monday tuesday we can like make this value one and one so it doesn't matter for this particular example because this is um allowed in c programming so we can have two uh enum names with the same value okay so for example we can comment this one out and we can try to display the value of our constant so percent percent d instead of day we can use monday and um tuesday there you go so bill and runner program and we're getting this error right here okay we're getting that output because we have specified our pdf statement like this but if we wanna have uh we want to display the correct value then we're going to use this percent the percent d and then comma in between and then we're just gonna um specify the two variable monday tuesday and click and build and run our program and as you can see here we're getting values one and one so that's one of the interesting fact about declaring our inum variable we can use the same state or the same value for our constant so it doesn't matter in c that's because it is allowable in c okay