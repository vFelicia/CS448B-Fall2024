hey guys welcome to the next video on Python $20 for beginners in the last video we have seen how to use trading module to create threads in Python now in this video also we are going to see how to create threads using threading module but we are going to see in this video how to subclass from the thread class which is available inside the threading module and then create threads out of that class instance so to start with I have the same method which is print Apoc which I want to call inside the thread so now here after this method what I want to do is I want to create a class so I'm going to create a class and the name of the class I'm going to give the name as my thread for example and one thing we need to do here is we need to subclass from the thread a class from the threading module so we are going to just call first of all threading dot thread so we are subclassing from the threaded loss now inside this my class first of all we are going to define the init method so let's define this init method and in this init method we are going to pass two arguments same as this print Apoc function so first argument will be the name of the thread and the second argument will be the delay so let's provide these two arguments first is the name and second is the delay now after this inside this init method we need to call the parents init method which is threading dot red dot in it so we are going to just call threading dot thread dot underscore underscore init method which is going to call the parent init method which is treading dot Treader right now once you have done that we can just simply you define some local member variable for the name so first of all self dot name is equal to name and self dot delay is equal to delay so now once we have our member variables what we need to do next is we need to override a method called run which is available inside the thread class in a threading module so I'm going to just define run method and we are going to overwrite this so first of all what does this run method do so the undrawn method is the entry point for the thread now in the previous video if you remember we have called the start method on the thread class right so the start method starts the thread by calling this run method so under the hood start method calls this run method so if we override this run method that means when we call the start method from the thread class this run method is going to be called so now we can do some logging here so what I'm going to do is I'm going to print the first of all start thread and then I'm going to print end thread now between the start thread and and thread logging I'm going to call the print a pork function and this print epoch function is going to take two arguments which is name so I'm going to just pass the self dot name which we have assigned to the member variable and second is the self dot delay so once again when we call the start method on the instance of this my thread class this run method is going to be called by the start method automatically because we are sub classing from the threading dot thread class now once we have our run method we have created the init method we can create some instances of my class so I'm going to create some instances for example t1 is equal to my thread and then we are going to pass those two argument first is the name so let's say the name is thread 1 and the delay we want to provide here is let's say 1 second because this delay is going to go to the print a pork method which is this one right once again we are going to create the second instance let's say t2 and once again we are going to call the my thread class which we have subclassed from the thread class and once again we are going to give these to augment first is the thread so this time I'm going to name it as thread 2 and the delay I'm going to give here is 2 second let's say and now after the instance is created we can call the start method and the join method on these two instances so let me just call t1 dot start and then we are going to call that t2 dot start and once we have the start which is going to start the threads we are going to just call the join method and by now you already know what this join method do which is to wait for the thread to be completed so I'm going to just call the join method on t2 also and let's run the script and let's see what happens so I'm going to run the script and you can see first of all start thread has been called which is from the logging of this print method and then thread 1 is printed and the Epoque time is printed and then thread 2 is printed and the epoch time is printed because we have given the 1 second delay for the thread 1 so thread one will be iterated faster than thread 2 because we have provided the delay of 2 seconds 4 3 2 and 1 second for thread 1 as soon as the thread we can see this print statement which isn't red and after the end of the thread we can see this print statement which is and shredded we can also print here so let's print some more things here so we can print the name of the thread so I'm going to just write self dot name and we are going to do the same for the end thread also so I'm going to just print here also self dot name so we will know which thread is starting and which thread is ending once again I'm going to run the program and now you can see start thread thread 1 so thread 1 is started and then thread 2 is started and you can see first of all thread 1 is ended and at last thread 2 is ended so this is how you can subclass from the thread class which is available inside the threading module now inside the threading module there are some special methods which we are going to see now so the first method is so let me just go after this start of the threads so here what I'm going to do is first of all I'm going to use the print function and inside this print function I'm going to call the threading module and there are some special methods for example first of all we are going to see what is the active count of threads so what are the number of threads which are there inside this program this is going to print the number of threads now the second method which I'm going to show you is the threading first of all let me just call the threading dot we are going to call the current thread so this is going to print the current thread which is active right now and third match third which I want to show here is threading dot enumerate and this enumerate method is going to enumerate the number of threads which are give so let's run this program once again and let's see what happens so I'm going to just run this program and first of all you will see three is printed using this print statement which is threading dot active count so active count is going to give you the number of threads and you already know that we have created two threads and one main thread is already available so total number of threads are three here which is printed now the current thread here this print statement prints this output which is the main thread so right now at the time of this print statement main thread is active now this enumerate method as I said is going to enumerate over all the threads which are available so main thread is available and then we have created thread one which is this one this is the name of the thread one and then when I scroll here you can see thread 2 is available so total three threads are available main thread thread 1 and thread so these method you can use to just find out how many threads are there what is the current thread thread and you can also a numerate over all the threads there is one more method so I am going to call this method here and I'm going to print it inside the print function and this time I'm going to use the instances so T 1 dot and there is a method of available here which is get name which comes from the thread class and because we are sub classing from the thread class this Mar and because we are sub classing from the thread class this get name is available inside the my thread class also and same we are going to do here also so print and then T 2 dot get name so this is going to give you the name of the thread by default so I'm going to just run this a script once again and you can see this is going to print thread one and this is going to print thread two now you might wonder why this name is thread one isn't tried to because this get name method is going to give the value of self dot name which we have assigned using this name argument so this name is overwritten in the subclass which is my thread class and that's why it's giving us thread 1 and thread 2 name which we have provided if we change this name let's say T 1 and T 2 and once again we run the code you can see the name also changes to T 1 and T 2 so this is how you can subclass from the thread class which is available inside the training module and we have also seen some of the method which are available inside the threading module which are useful to us so that's it for this video I will see you in the next video