hey everyone in this video we would make a simple paint application using tincter we would use many new methods and a lot would be from the canvas class obviously as we are working with paint don't worry it would be very easy so to make this application we would use the color Chooser module and just to make things more organized I would make main class that would be later called onto the screen let's get started so from Tinker import Star and separately from thinker import color chooser and ttk ttk you'll get the use of it later now the window declare plus its title so we have win equals TK and for the title I'll write win dot title create up then I'll call on to the main Loop so when dot main Loop so I have the basic structure now the class main where I would be defining the functionalities of the paint app so let's get started I'll get the class I'll write class Main and first the init function def init for argument itself and master so this master is the window that when that would be passed on later the main class and then I'll write self dot master equals master for initializing the window now I need to initialize a lot of variables to start doodling on screen like the color of my pen it's with maybe the screen background the starting position of the pen Etc so let's initialize the variables one by one so first is self dot color underscore foreground equals black so the pen color becomes black initially you can change it later and then self dot color underscore background equals White cool then also the initial positions so I'll have self taught old underscore X equals none and similarly self thought old underscore y equals none also the pen width self taught pen width equals five I will call this draw with its function that is yet to be defined which would describe the layout and Main functioning of my paint app so I'll just write self dot raw widget and brackets you'll just understand why I call this here later on when I Define the draw Wizards function now I'll write self.c dot find now here I have started using event handlers the bind function called for the canvas c c would be declared in the draw with its function now the argument for this given tangler bind put p p 1 motion which is the mouse being moved while the left Mouse button is held down and the function called the other argument of the bind function would be self dot paint this would be another function in the main class and it would be used to draw the lines on the canvas so I'll write self dot C dot bind P1 motion selftaught paint okay now similarly I'll have another event for the button release to specify the button release of Left Mouse button I'll use button release 1 event and for the function of this event I will call the self reset it is another function in the main class I have to declare it it will indicate the end of one curved drawn okay so I'll write down cell dot C Dot bind and button release one self dot preset now I'll Define the paint function so I'll write that paint self comma e so e would be the coordinates of the current Mouse position I would fetch that repeatedly in order to draw a curve and if self dot old underscore X and selftaught fold underscore Y is true it's if it's available then I'll create line I'll use the canvas function create line and I'll write self Dot C dot create line and as argument I'll given the Four Points four coordinates so self dot old X and cell dot old y and e dot X and E dot y the current events the current Mouse positions X and Y coordinates the width of my curve would be given by self dot pen width as I have defined it in the initial function and fill equals self dot color foreground and cap style would be round it's just the style of the curve the line and I can do smooth equals true so we have already used create line in the previous videos and so I hope you don't need any explanation for the arguments given and I'll replace the value of old X with e dot X and cell dot old underscore y equals e dot y this would let me draw a continuous line and then I'll have the reset function again itself and E the current position of the cursor and I'll have selftaught old underscore x equals none and selftaught old underscore y equals none because basically I have ended one curve so that's what reset means now I'll start defining some options available some functionalities available with the paint app now the first one in the functions would be def changed width and I'll give self comma width so this would be used to change the width of the pen fit off the line and I'll have self dot pinwidth equals width okay and I have clear canvas so I'll write def clear canvas self and I'll use the delete function from canvas self.c dot delete and argument would be all that would just actually clear the canvas completely I'll also have the functionalities of changing the foreground and the background of the screen so first for the foreground changing I'll write def change underscore ft and self so self dot color underscore FC equals color chooser dot ask color color equals self dot color underscore FC and one so color Chooser dot ask color returns a tuple that contains two values that represents the selected color the one at the zeroth index is the RGB value and the second element of this Tuple is the hexadecimal color value and since our color uses hexadecimal values I have given the first element of this double as the argument okay and similarly I can Define for background color I'll write Def change underscore PG and self and self dot color underscore PT equals color chooser dot ask color and color equals self color underscore PG and in square brackets one fine also I need to write self dot C PC and inverted commas equals self dot color riscore BG cool now it's the turn of draw widgets function so this would be like the real layout of the frame of the entire canvas of the entire screen so I'll write Def draw widgets self and now the screen should have the controls in one part and the canvas on the other so we need to divide the space available for that we use frames so I'll write self dot controls equals frame self taught master I hope you remember the master variable it was the screen itself the window and I'll give some padding I'll Write Pad X equals 5. part y equals 5. now on the left side I would need the controls like the pen color the background color let me put these in a menu also the clear canvas and exit option should be available there then to adjust the size of the pen that is the width I would use a slider let's get all this on the screen first so starting with the label of the pen width controller I'll write text PW equals label self dot controls text equals pen width font equals Georgia 16. now I got this on the frame and not the window itself please note that and I'll put it in a grid I'll write text PW dot grid row equals 0 column equals 0. then I'll have the slider I'll write self thought slider equals ttk dot scale this is where ttk is used I'll have different kind of slider it would not show me the numbers on the scale and so for the argument I'll write self thought controls comma from equals five two hundred to equals hundred command is self dot change w so just to recall what changed W did it change the width of the pen it assigned a new value to the pen width and the orientation of the scale of the slider would be vertical fine now we'll set the pen value bandwidth so I'll write self.slider dot set in Brackets self dot pen width okay now self dot slider dot quit row equals zero column equals one now I'll park my frame I'll write self.controls.pack and side equals left fine now here I'll declare my canvas so self.c equals canvas self dot Master where do I want my canvas on the screen on master so self dot Master width equals 500 and height equals 400. background color equals self dot color underscore PG it was there in the init function so that is where from we pick the background color then I'll pack this canvas I'll write cell.c dot pack fill equals both expand equals true we've already worked with canvas and frames and labels a lot of times so I hope you're getting what is going on it's just the assembling of all that we observed it's nothing difficult and now I need to get the menu so I'll simply have this menu variable equals menu cell dot master and self.master.config menu equals menu and I'll have my option menu to which I'll be adding all the options available so option menu equals menu in Brackets menu it's in the menu of the main menu okay I hope it is not confusing now to menu I'll be adding the option menu variable so how would I do that I'll write menu dot at Cascade label equals menu equals option menu now let's add the options to the option menu so I'll write option menu Dot add underscore command label equals brush color command equals self.change underscore foreground similarly or the other functions I'll write option menu Dot add command label equals background color command equals self Dot change background then option menu dot add command label equals Square canvas command equals self.clear again option menu dot add command label equals exit command equals self dot master dot destroy so we have four options one for changing the pen color the foreground one for the background changing color one for clearing the canvas and one for exiting the canvas okay so we are good to go okay but we need to call in this main class so I'll write Main and in Brackets when fine now we're good to go and let's run this so I have my window and I can see this menu and Pen width so so I'll start right away doodling on the screen and I can see the line I've drawn and I can change the brush color I can pick any color let me pick this and I have different color pen now let me change the width once so it has a better width now brush is thicker and I can change the background color too so here it is the background color is different again I can clear the canvas everything is gone and if I click on the exit option the screen goes away so the paint application is working pretty much fine this was it for the program thank you