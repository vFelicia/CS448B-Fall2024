hey guys welcome to programming knowledge in this video we'll be making our first programming project which is essentially going to be a console based tictactoe game so in case you're not familiar with the game let me just quickly walk you through the game the game has a 3 cross 3 port and two players who play alternatively so the objective of the players is that they need to fill one of the rows or columns or the diagonals with the marker so if I just start the game with a computer you can see that we are playing alternatively and our goal is to just fill up one of the rows or columns or diagonals with our marker so here if you see the computer has managed to fill the room with its marker so it gets to win the game so we are going to implement this game on the console and well we won't be implementing such a sophisticated system where the computer can play although I will be giving the intuition required for building such a system towards the end but what we'll be implementing is a twoplayer game so if you go over here and then change this mode to play against a friend you can see that you make both the moves by yourself so we will be implementing this but I will also be giving you the intuition required to implement a system which can think and then make moves towards the end right so let's get started so first create a new project naming tictactoe so the project title tictactoe and let me just save it in my desktop and then click Next finish so now we have our project with our source file right so let me just make the text a little bit bigger now we'll start off by creating the board so there are different ways to implement this board you can think of this as an array of 9 elements and then three of them are stacked together as a row or you can even think of this as a 3 cross 3 matrix well I will be implementing just particular board as a 3 cross 3 matrix because we can understand rows and columns better by looking at the indexes rather than the slots but you're free to implement it as a 1d array that is by creating nine elements and then striking three three vertically all right so I have managed to draw this implementation over here so what will be essentially building is a 3 cross 3 ID like this and then these are the indexes and since we cannot detect mouse clicks on our console will be numbering or slots so let's say the user wants to enter his marker over here so the user can press 5 and then we will remove this 5 and then put marker over here let's say X so the Phi goes and then we put X over here so that's all we are going to implement it but there are other libraries which I encourage you to look up which support mouse clicks on consoles too so in case you're interested to implement such a system where you can click on the area and then your marker appear so you can check out those libraries well discussing those libraries are well beyond the scope of this course so we are not going to do that so for now we'll be implementing this particular system right so let's start off by creating the ball it is a twodimensional character array so let's call this a yes board and then this is going to be twodimensional and every dimension will have 3 3 elements so this is a 3 cross 3 ball let me just put it over here so even if you don't put it it doesn't matter I'm just putting it so that we be clear with our implementation so let me just name the slot so 1 2 3 and then 4 5 6 7 8 9 so notice that I am numbering the slots as characters because if you put characters over there it will take it as an ASCII value I'm sure you know just right now let us quickly make a function to draw the ball so let's say void draw board and what this function is going to do is that it is going to draw the board neatly for us so something like this so these two vertical lines and then these two horizontal lines separate the rows and columns we'll be drawing that over here so you can use a looper since there are only nine elements let's just hardcoded so bored zero zero let us give a space before both zero zero so that it doesn't get scratched up to the left correct both zero zero and then we have a space vertical line and then would a zero one space vertical line and then board zero two and then we have the next line because we just completed the rule what we did is we just printed this row with these two vertical bars now we need to put a horizontal bar so let us just put that so your horizontal wire is just going to be lines this is all completely designing you can do it as you want right and these steps continue for the next two rows to so control CBB and for the last row we don't need the horizontal lines and here you just need to change the road number so this becomes 2 this becomes 1 1 1 over here 2 & 2 so now if we call this particular function let's just remove this and call the drop or null surrenders of you'll be getting our booth so well the horizontal lines became extraordinary actors are more so let us just remove those three characters over here and then over here so this pod looks much better right so we have our port ready now how do we put data inside this hood so let's make another function to do that let's say void place marker which is going to take a slot number right because the user is going to enter the slot number now ask us to convert the slot number into the row and column number right if you are using a bind I mention array that is pretty easy you just need to do slot one two and insert that into the particular position right so suppose you want to insert it into this particular position and if you are using a winder this is the fourth position read because array index starts from zero so zero one two three fold and you just need to do slot 1 but since we are using a two dimensional array we need to find out a way by which we can convert this slot number into a row and column number so what we can do to find the phone number is that we can use an observation that all the rows start from a number which is just one greater than the previous multiple of three so the observer over here 1 is nothing but 0 times 3 plus 1 4 is 1 times 3 plus 1 and then 7 is 2 times 3 plus 1 so what you can do is you can get the rule numbers by dividing this slot number by 3 but then again if the slot number itself is a multiple of 3 then you need to subtract 1 from the slot number that is if you take example of 6 so if you do 6 over 3 is this 2 right but we need it in slot number 1 so we need to subtract 1 from that so what I mean is if this particular slot percentile 3 equal to 0 that is if that slot is a multiple of 3 then slot equal to slot over 3 so this is this and then minus 1 so this will give us the slot number else slot is directly slot over thing so this should give us the particular row number sorry let us take a variable just at least changing the slot so if slot percentile 3 is 0 then row is going to be this particular value or else Row is going to be this value now let us just see whether our row works correctly or not and let us just on it with place marker let's say 8 right now if we run this you should be getting 2 which is correct right because 8 is in row number 2 now to get the column number you can do something similar to that so to observe the columns these are nothing but two remain which you get after dividing by three right so you can do the same thing so let's take another variable to store the column and column is nothing but slot modulus three so this should give us the remainder so if you look over here let me just pull up that image now if you say 3 then our row is going to be 3 over 3 and since 3 is a multiple of 3 so it is going to be 3 over 3 minus 1 which is equal to 0 and then our column is going to be 3 modulus 3 which is going to be 0 but that is not our column we need to so what essentially we need to do is if it is a multiple of 3 if the slot is a multiple of 3 we need to put it in the end or else that particular logic will work all right over here what you need to do is if this particular slot is again a multiple of 3 and column is going to be 200 every time when the value is a multiple of 3 you're going to put that in the last column and then you can divide this slot number by 3 and then get the reminder that is going to be your column number and I'll get the reminder and then subtract one from that that is because we are not considering the multiples of 3 right we're leaving the multiples of 3 so we need to subtract one let's say 4 so 4 divided by 3 you get a remainder 1 and then 1 minus 0 is 0 which is the column number of 4 so this is how you get the column number so let us just quickly rewrite this with fewer conditions so true is going to be this particular value right irrespective of whether slot is going to be a multiple of 3 or not if it is a multiple of 3 we can just subtract 1 from this value so this Lord modulus 3 is equal to 0 then row becomes row minus 1 and then column becomes 2 right this is 1 the slot which you're giving is a multiple of three audence or let us define the column before using it or else what happens is columns become slot modulus three minus one so our first way performs north modulus three and then we subtract one from that all right so this is how we can get the to one column from a slot number if you know check out the row and come over here and call him and then let us call with E we should be getting 2 comma 1 which is what we got right because 8 is in the second row first column we can try it with some multiple of three let's say nine and then try to run this we should be good in comma well now why did that happen well that is because we are trying to modify the column even after it is getting modified over here tonight we are modifying the column when slot modulus 3 is equal to 0 and then again we are modifying it over here so we need to put it in the else but right now it should work fine learn it as this close this and try again if I press f9 so here you can see it gave us 2 comma 2 which is correct so now we know that our logic for getting the row and column is correct we can proceed by putting our marker into the board so how do you track which multiple to put so let us create a global variable for tracking the marker let's say parents marker and let us sit this to some my laurels will set it while we are asking will be elected while they are asking the user to choose the marker and we will also have a current cleared way so we need to even are trying to current here to check which player is playing it so we have one marker and unclear know what we are going to do is we need to just put board off this particular row and then this particular column is going to be the current marker so now we have successfully placed it let's place a marker over here and then try to draw the board and we'll draw a board over here too so draw would then we'll put a new line so that we don't get confused between the two boats so let's just say that current marker is X for long and if we try to run this you'll be seeing that in place of NIDA now there is an X right so now we know that this particular function works we can place our marker on the board now let us make a function to determine who won the game so let's call this function of win or winner something like this and we'll put the datatype to care how we just explain why we are putting the data type of care right now so this this is not going to take anything this is going to work on the global board variable which is this which is an array right so what we're going to do is we are going to check all the rules of the columns and the diagonals and see whether those have the same value of marker right so in case there are numbers they are going to be different to nobody one and in case they have this XS are all stacked up horizontally vertically or diagonally it means that that particular player one right now since we are getting the winner we can either put it true or false to determine whether the game is won or not but to determine who won the game we need to again check whether that particular marker is an X or all right so what we are going to do in this function is instead of checking twice we will directly return the marker of the winners so by marker we can identify which player one and then we can come back let him or her right that is pretty easy so to do that let us quickly run a for loop so int I equals zero is less than three I plus plus and inside this we are going to check for most ways so if this particular goal of I and then zero is equal to four i won and would I 1 is equal to board I 2 then return the current marker right because we are going to check whether the player wins immediately after replaces the might card so if this particular condition is satisfied then it means that one of the rules has been occupied by this current player so he's the winner and you can also check for the columns in the same loop so what you need to do for the columns is the same thing but just the eyes get shifted to the second dimension so since I am checking the rules I am just putting I in the first dimension four columns what we need to do is we need to remove the eye and place it over here so let me just cut and paste it and this goes over here and this goes over here so now we have successfully checked whether the rows or columns of friends or diagonals you can just hardcoded since there are only two diagonals so if board of 0 0 equal to board of 1 1 and wood of one bun this is put to code of 1 what you are doing this we are essentially checking whether this value is equal to this value and then this value equal to this value if these two conditions are true it means that these 3 values are equal and it means that the clearest one so these two you if this condition turns out true then a current is one current layer of mark oh since I'm using the player as a integer I need to return in not care to over here it is not current marker currently you can return either of them right you can return current marker current plate it just depends upon so now we need to check this condition for the second diagonals so this goes and then for the second diagonal so coordinate or 0 to 1 1 & 2 0 so 0 to 1 man remains the same and 1 1 is equal to 2 0 then you return the current player right no what if nobody won so you need to return something so what will return as we will just return 0 0 means nobody won and if it is either it means that player 1 or player 2's 1 so now we have the winner let's just create an arbitrary board and then check 400 so let's place these markers right place marker at 9 8 & 7 so it means that X s 1 so 9 7 and then place marker at 8 and our current player is going to be 1 right now if you run this ok the spelling is wrong current player and if I try to run this so here you can see I have placed 3 XS over here now if I try to call this function which is winner and try to print the data over here so you can see that it has outputted 1 1 is the current player where I just put 3 XS in a row so it works for row let's just check for column column is let's say 0 sorry 104 and 7th so this is the first column and we'll run this so it has written 1 again and let's check for the diagonal so that is 1 5 9 so now you see that doesn't work for diagonals that is because we messed up the logic somewhere let's take that out oh it is not 1 2 it is 2 toward this right so that's a small mistake I made oh no I'm sure I can run this this should work no so here you can see it has outputted 1 and let's keep some arbitrary place let's say 1 6 9 so this shouldn't result in a win so this should give us 0 which it gives so now we can see that our winner function is pretty much validated and it works right so now let us quickly make the interface we need so let's call the synth of this game all right and in this let us define our current player and markers so we will give a choice for the player bun to choose a smart girl and player to automatically get another marker so what we're basically trying to do is if the player the first player has a choice of playing X or an O right so that's what we are going to do so clear bun let's say choose your mitre and you can come up with your own sentences over here it doesn't really matter so this will enter our current marker okay let's just keep a player 1 marker let's create a character which is marker marker of player 1 so we are going to get this particular marker so much your word now our current player is going to be 1 and then the current marker is going to be the marker which supplier when chose right now if you observe this game right they can be at most nine moves for the skill to end up in a tie right so in case somebody wins it's going to be less than nine moves but if it is going for a tie it's going to be nine motion code so what you can do is you can run a loop till nine moves so int a equal to zero is less than nine and then I plus plus and inside this what you need to do is let's first draw the pool or what we can do is we can first take input from the user and then draw a good so for the first time let us just draw the board outside loop and then for the subsequent moves will draw the board after the slot is entered so we'll ask the player to enter the slot so see how it's clear and then which player is that current players current players let's say turn so enter your spot and now we are going to get a slot so in slot see in slot and you know what to do you just need to place the marker so place marker in this particular slot and then we will draw the booth to drop so now if you run this particular board we'll just call the function game to play a game right so we'll just remove all this and then just say game over here so now if you run this it will be a getting is player 1 chose a marker it is going to be X and then it's my turn so let's it now you see that the player is not changing that's because we did not write code to change the player and the marker we need to swap the players and markers it because the players and martha's are going to change alternatively and here you can see that the slot has been accepted perfectly and then the X has come in place of 2 so here you can see that it works and then if I've been somewhere it is not going to stop and then its onion going to continue right so this game is never going to stop so we need fix all these issues so we will do that one by one first let's take care of the issue where the player and markers are not changing so that's great function quickly which slaps appear and Michael let's avoid a slap layer and marker so this is the name of a function so what it does is pretty simple if the current player the current mark is X then change the marker to Oh current marker becomes o or else you just change the current marker to X this is just slapping the mic rest and the same was replaced so if the current player this one then current player becomes 2 or elles current player remains 1 so here we have successfully swapped the player marker so once everything is done what we do is before drawing the board we the player it's a slap player and Markel and they should do the job knowledge test is horrendous or let's choose X now it's asking clear one Stern integers Lord let's say one unknown player to stern enter your slot if I enter key you can see that two is occupied by an Ono so now we have successfully created a system where the players are changing and the markers are also changing and now we need to take care of the issue that once they are winning it is not stopping right so we need to check whether somebody won or not so over here not within do is we can create a variable or storing the value which this particular function returns right this winner function returns it's going to return a value in the range of 0 1 2 right it's not going to return any other value so let's just create variables with choice of winners so let's say a layer 1 this is the integer value and what we need to do is after placing the marker we need to check whether he won or not so player 1 equal to this particular winner right and now here if this particular value which is player 1 is equal to 1 it means that player 1 1 right so see how the player 1 1 and then let's say congratulations and what you need to do is just break out of the loop because we don't need to continue the game after somebody has moderate so you can just break out of this loop and over here the same thing goes with you if player 1 is equal to 2 then you say is RC out the same message yes we need to change the player 2 and all these things remain the same so ctrlc and ctrlv and over here instead of 1 we just need to put 2 so in case nobody won it either means that the game can go on or if it has reach 9 moves it means that it's a tie right automatically if your playing four nine moves and you make the ninth move and still nobody wins it's going to be a tie so what you need is if this particular winner condition which is player 1 is equal to 0 after completing this game then we need to say that nobody wins or let's say that is a tie game right so what this will do is it in case nobody wins even after 9 moves and this comes out of the loop it will then say that it is a tie game it also suppose a player 1 1 and then it broke order to do then if you just put this particular thing without the safe condition what will happen is it will print both the messages at once right so it will say pair 1 1 and then again it will say that is a tie game we don't want that to happen that's why we have put a if condition to check whether it's a tie or not and then we will say it was a tie game right that will take care of all the issues hopefully so let's just try with all this time and it's player once done so let's enter 1 2 3 so you can see it's filling alternatively and 4 5 6 7 and it says player 1 1 congratulation but we cannot see what happened over here that is because we are not drawing the board immediately right so what we'll do is we will ship this draw both function before this particular winning condition red so what will happen is once I place this marker I will just draw the board so now if I run this let's say X and then 1 2 3 4 5 6 7 and now you see that player 1 has won that is because this particular diagonals which I'm highlighting has been filled up by X's so player 1 1 in case you fill it up with oh it means that player 2's 1 and in case you don't fill it up let's take a draw keys let's say we play for 9 moves for X or let's just with you put the numbers 1 2 3 so ok so draw we need to put five and then four six and a seven nine right so now you can see that nobody has won even after nine moves so it's just that is a tie game and the ball is printed so our game works perfectly for now right so there's a minor bug in this game forward what we did is so let's see I put my Michael in the first slot right and now it is clear to stand and what I will do is I will again press one so what will happen now is if you have to do though except on and then go has taken its place it means I will just over return your tray we won't we don't want that to happen we don't want to move the markers away from their places so to fix that what we need to do is we need to check whether that slot is empty or not it is if that slot contains some character which is not an integer it means that it is a marker right and we don't want the things that might fit so what we do is we are placing the marker here what we need to do is we need to put this only when that particular row and column is not filled up so if that board and column board of this column is not equal in eggs and it is also not equal to an O so board of row and column is not equal to o then you will be filling it up with this particular marker or else you won't fill it up right so let us return to or false over here and then we'll print the message over there so we make this boolean or booth and over here if this is the case then now you first place the marker and then return true saying that this operation was completed successfully or else what you need to do this you can fals over here and here once you are placing the marker where did be plated before placing it over here right so let's say boolean status or you can directly put this in the if statement all right so if this particular condition is true then we don't have to do anything we want to print a message only when it is false so this button not over here so if not play small kind of slot that is if this condition is not true then we need to see something so let's say and that slot is occupied and then I'll try another slot so this particular message will print and then we need to decrease I by 1 that is because we need to give them a player another chance right we can just switch the players right there so it leaves I by 1 and then we just put continue so that all the statements are skipped and then it goes back to the executions neatly against this Indian this code so we print the message we decrease I so that the value of I remains same once continuous in conflict right because if it is decreed decreased over here it will go back and it will increase over here so effectively the value of I remains same and it should work now and another thing is let's say the player entered some pretty big slot right let's say hundred or something so we need to take care of that too so if slot is less than 9 less than 1 and if slot this saree or slot is greater than 9 we should not accept it so we need to do the same thing just a message changes ctrl C and then control B and here you need to say that it's an invalid salat right so that slot this in value and then you try another slot and we just put continue so that the player doesn't change so this will do for us now if you execute this you will be having a functional tictactoe game over here too it's asking clear once in C Michael's going to play X and now it's player ones turn so 1 2 3 4 5 6 7 so now player 1 man that's because of this diagonal and let's make clear to also win so let's try it once again so let's say X again so now it is going to be one two three and then five four and then what is that state now you can see player 2 won congratulation that is because I have filled up this particular column with OHS right so in case you wanted to implement it AI kind of a thing there the computer place you can do that well we are just going to implement a pseudo AI not the original one so this is not going to think much it is just going to randomly place it so in case you want to generate random slot what you new clothes you need to include another header file called HD b li d which are standard library you can include this one also see STD li b which is the C++ version of the speech c standard library so these libraries are nothing but that they are from C language so in case you're using it in C++ you just add a C over here to indicate that that this is C library right now to generate random numbers 4 to 5 is you have a function called rank which will directly give you a random number right it's printer and over here and here you can see it just printed 41 on to the screen now if I execute it again you will see that the same 41 is over here if you close this whole program and then rerun it is this going to give you a different number but again till you don't remove this whole quote from the memory it's going to be the same number again and again negative so to take care of that what you have is something called as a speed so for seeding the random function leading this basically you will be giving different starting points to that random function to generate different numbers every time you call it so to see if the random number you call the function SRAM and inside this you put some number which constantly keeps changing rate let's say 1 over let's say 10 over here and then if I try to run this you will be getting some other number let's just 71 over here and if I put some other number little one over here now and then try to run you'll be getting another number which is 41 but we can't change this again and again right we need a way to change this particular number which will generate different numbers every time so to do that we can use time right so time is constantly changing it is not constant so what you can do is if you pass in time over here as an integer it will give you different random numbers without you having to change this manually so to do that we need to include another header file which is called time right so see time right the same reason why we are using over here it is time dot H or C time both us in and you go over here and then what you do is instead of one you just pass in time and then personal as a parameter will go over this null when we are discussing pointers but for now just remember this is the syntax and this is how we call the function for time right for getting time as an integer now if we run this you will be getting different numbers over here every time so this is nine one seven zero if I execute it again you will be getting some other number nine minutes into it so to generate random numbers in a range we want it in a range rate we want random numbers between one and nine so to do that what you can do is you have to use a formula there is no direct way to get random numbers in C++ in a particular genes but what you can do is you can use the formula which states that if you want the random numbers in the range u2l it which is sorry it to you it's just nothing but lower range to upper range what if one ran numbers in this range what you do is run mod u minus l plus 1 and then the whole thing plus n well this formula does look pretty clumsy I know that but if you try to reduce this you will see that it mathematically means the same that the lowest number be held and then the highest number will be you right so you just remember this formula to generate random numbers within a range so in our case what it's going to be an upper range is 10 and then the lower range is 1 right upper range is not included so sorry for this notation it is mathematically this which means that the last number is not included but the number till the previous one is included so it becomes 10 minus 1 plus 1 and over here the upper is just 1 right so now if you do this over here if I try to print this value over here you will be getting numbers which are in the range of 1 to 9 right it is put a semicolon in the end and we don't need this we'll just remove this so every time you execute we'll be getting some random numbers which is in the range of 1 to 900 so here you can see that it's giving us different numbers in the range of 1 to 9 so now what we can do is we can use this and instead of the second player what we'll do is we'll just ask the computer to generate some random slot number and then place our marker over there and then instead of 9 now the loop will run only for 4 times it is because the number of times the loop should run is halfdried we are not going to take in inputs for 9 times we are going to take it inputs for 4 times so we need to just run it for 9 over 2 times which is 4 as an integer division if you want to implement this really sophisticated system like the one which Google uses right this one which can think so if you take us this impossible level in this particular game and then try to play with Google you can say that you can never win right it will either end up in a draw or you lose right there is no other outcome in this particular you cannot win that is for sure so to implement such a system there is an algorithm called as minimax algorithm so you can try to study about this minimax algorithm so sorry it does make max algorithm right so you have this particular algorithm so what this essentially does is it will take combinations of games right it will play the game with itself and it will score every game so let's say we have an arbitrary game so let us just clear this let's say we have an arbitrary bhutesu I have an x over here and over here and then another X over here and over here and then the computer is playing X so it has to make the next one so what it will do is it will try out all the possible boxes which are unfilled right and there are different outcomes for that so one of the outcomes is let's say I start off with this board so let's change the color so let's say I put an x over here now there are different ways to put o I can either put one over here one over here it is up to me right so every possibility will generate a new set of both which the computer will play itself right in the memory and then it will score its outcomes so let's say in in case it put x over here and then for the first case you put over here and then it turns out that after playing such combinations it turns out that if you put x over here you have let's say ten combinations out of which you won five combinations right but this is one of the slots now what it will do is it will keep the statistics and again played with the next slot which is empty so what you do is it will just remove these things and then it will play with let's say this particular column so it will put an x over here and then again repeat the same process it will see all the combinations possible and then let's say in this particular column which I marked with red there are again a let's say ten possible outcomes and then it one or seven of them right and let's say laid over here let's take some other color let's say this one so it played over here and then in this again there are ten possible outcomes and out of which it could have been only two right and you have another possible two over here in which ten possible outcomes it could not win anyone rate it lost all of them so it 10 now what can do is it will see all the scores so here it has 70 percent probability right so if you are winning seven games out of ten it means you have 70 percent probability of winning and here you have fifty here your zero percent probability and here you have twenty percent probability so it will take the one with the most probability or the most core so if you take in total if we talk in terms of numbers here you have five here your seven zero and two right so it will take the number which is maximum that is this one so it will say that if I put my marker in this particular place I have more chances of winning so if you place it over there so for every mole to calculate all the possibilities and then place the best move and that is how this particular Google is using that particular algorithm to make its decision so that algorithm even though it is called something else it is actually the equation so if you look at the implementation it is basically recursion which is being implemented rate so tictactoe if we just a search for that you will have many different resources to check that out so you are check that from one of these resources so what you will see is it is basically implementing recursion it will just go over the boots and then try to implement and then you have a scoring method so I think they are used blessed and as a school we have used plus one over here right where if you won you just put one over here if you don't when you just put minus one it means that you one and minus one means that you do so and you don't want negative scores right we just want positive scores so this is a bit of complicated stuff you don't understand I don't expect you to understand I just staged but I would definitely recommend you to check that out and try to implement and this one you can try to implement by reducing the number of loops over here and then creating another function so that the AI to what slot to put a marker in so hope you enjoyed this video in the next video will be starting pointers