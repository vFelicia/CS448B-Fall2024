hi in this video we are going to learn how to upload files so we are going to use monitor for this because Express doesn't have knowledge to to do so but monitor is created by the same developer of Express so we are going to install it using NPM I multi in the meantime we are going to go to our index torches and see how can we do this so first we are going to acquire multiple requiring from mulcher and for this we are going to create a new instance let's say upload of Molitor so in here and this parenthesis we are going to configure the molecular instance so that is called test fill which is used for destination to where the files to be stored so this is the test field there's many more another film what we're going to discuss later so in here if we save it right now it will create a folder and say upload so let's say what can we do with this now if we just use apt or post twist because we are going to send a file or image to see what can be done now if we just a synchronous process we are going to use a question response and just say something like this bones dot st. now it is used to be used to as middleware so we are going to use me Monterey's middleware so that instance that we have created upload dot single I mean here we can give any stream so any string that you want I'm going to give a load and now I'm going to just save it and go to our postman and in here we are going to select some file I have created a local hospital and upload and in the body we have we are going to select form data because it's not a raw JSON file it's a file so we are going to use of a phone data and in the key the same file the same name we are going to give it is upload that we have given in here now in select files we are going to save one file and one file that's called egg now if we go send it and now we go to our project we are going to see there is some random string and the BS code cannot fetch what is what it is because it's not there it's not even extension so let's say we are going to give some extension dot jpg and if we can get the image now we are not going to save it like this because if we are going to save it in our project it will become more bulkier and also whenever we save it into a deployment which then deployed it always get cleared out so it will be all the consumer will be deleted so it's not a good practice now there is some validation required because if the there is two gigabyte or three gigabyte file is going to get uploaded in the project that will become very bad so for this there is called a limit and in limit there is file size in file size it is if we require like one megabyte file so we are going to give one and six Xero's and so if we save it and now if we go to our postman and delete this file and save like this well which is three megabit bytes now if we send this file we are going to get error but this error that we get flying too large now we can see that this error is not a JSON format in the the next few minutes we are going to set how can we set JSON error here so now there is one called limits there is also one field that is called file filter we can go to our multi documentation and we can see there is one that is file filter so in file filter it's a function so in here we are just going to get request and there is second album that is file and it's a callback function and let's say we're going to do you see before this so in here if the file is not correct for the user so we are going to give edit because see be first argument is error so let's say that let the file that we want is a PDF so if it is not PDF so we can give error message to this like new error error will be file form it is incorrect so if the file that we are getting is correct so it will not be an error so we are going to give further than undefined and we are going to upload this that we are going to accept this file so we are going to use true and if we're not accepting this file what we are going to give these faults now what we require so in here first thing that we require is what's the file that we are getting so what is the file that we are getting so we can get from this console dot log we are going to see what it is console dot log file and in file there is some another fields that are filled name original name that is a file information so we are going to use original name but it will give the full name of it so this is it so now if we are going to just comment out this and now we are going to save it and we are going to give a file that is less than let's say this is an AK and we're going to save it it will give the F dot jpg so this is what we want if it is so we are in huge file dot original name so we are going to use the if statement in here so if file dot original name dot ends with what Todd jbz then it is correct so we are going to just if not it is if not then we're going to return it from here well we're going to use called a and differential now if we save it and now again we upload it to be saved and if we just use some another file that seemed documents I'm going to be wonderful let's say this one and save it to give an error file format is incorrect now we can see that the error that we are getting is not a JSON format so importing in to a JSON format after the post request or the out handler we here two things are given there is one called the quail error request response and same thing else next now in here it will be run whenever there is some edit rule because the error that we are getting from here it's not as a JSON format so from here that we are getting we can get an actual type of JSON from it mrs. Solis the response or the status of 404 and send a message like error error talked message now if we save it and I can send this back we can get a format of Chesson error message right now this is just a demo so we are going to use this multi into our uploading an image for the user so for now let's play this once and now we are going to go to our user router and in here we are going to use this monitor so we are going to use again the monitor here and we are going to require it from the monitor and we are going to write the same thing that we have written in the index torches so we are going to create an other charge instance and off the multi and here we are going to keep the destination but there is one thing that we have not haven't talked about like in this if if there is destination we cannot go further from here to this route this function cannot be used after this if there is destination folder is there or destination field is there so because of debt so because of this we are going to not huge destination field here just we are going to use limits and the limits of file size will be let say 1 MB so 6 0 is required here yeah it is now there is file filter in pal filter that we have already see and there is request file and callback function is there we are going to require this year after disk and here if if not file dot original name original name dot match so here we are going to use the regular expression here so if it is a jpg PNG or jpg so this all are going to be so click here as a rapid expression so for this we are going to write it like this first we are going to give two slashes here and in between the two slices we are going to write the regular expression so for writing regular express first you have to write like this and then this is the thing that we because the dot is a special character so that's why this back space is required here and here what are the things that we are we have word that are required like jpg and again odd part and then PNG and if it is like saved like this jaybez or PNG or jpg or jaybez that's sufficient report no and dollar sign because this says that these words are at the last so yeah if it is not of this form it when we are going to call back fall back new error and in error that we're ending with this is not a correct format the fine and we are going to return from here and if it is a correct format then we are going to use callback error undefined and true because because we are accepting the file now we are going to create a new handler router dot post less users slash mean less avatar and we are not using we are going to use avatar dot single and just the same ever talk and now we can use a synchronous because now we are not giving the destination filled in here so this is fine for no and for error handling we are just going to give error request response next and response back to status status of horrible thoughts and enter of error now if we are using this functionality then we are going to use also authentication here so before I have a chart for before using multi we are going to out this functionality and here if there is quest dot user dot avatar is equal to be heaven to make this field in the user folder no but I'm going to make it so the quest auth user that first we had like made it also like yeah so in the user dot cheers after token we require one more fail that's called I have a charge and avatar type is buffer and once more like if we are creating this file ok it's one more thing like whether these timestamps true and it is not required so yeah so in here the request dot user dot avatar it will be filled with request dot file dot dot buffer buffer and we are going to save it so await request dot user dots there yeah these things are required now in this theory is called if there is the requested file and it's going to change to a popper and we served in the Avatar field now if we just save it and for to our this folder or just they post localhost and in here we are going to upload the file own on this one not just a thing so in here we are going to upload a profile image now if we just save the file and upload this file we are going to see that we get a bunch of buffer the avatar field is filled with this yeah this is the Byerly and we if we go to over MongoDB and in here we are going to see the top there is a binary field now how it will how it will look like so from here we are just going to grab it and go to down and just copy it and in here we are just going to go to the quality jsbin we are going to see what stuff file is here is here so we are going to save image source and in here we are going to write like this data dot jpg or first image slash jpg semicolon base64 it is a basis t4 and we're going to remove it and yeah you can see it at the file we get here so if we just get this file get this pantry something and we just use theta dot these strings we can get image so that's how we can serve up the file but there is also some we can get we can get true or we can do this so we're going to use the outer target and users me or any ID we can get so avatar and there's no need for out here and just we are going to use old synchronous asynchronous request response in here and we are going to just grab the user from here request user and await users don't find by ID how the request start parents dot ID and if there is no users not use it or not use your dot avatar we are going to return or throw throw new error so it will be in a trycatch block we're just setting the trycatch block no required for error message so we just we are going to copy it from here and paste in here if it is correct then we are going to do something like response dot set because it it is not JSON file or from it so express can do automatically for the JSON from it but before this we are going to set it here this one start set the content type the content type that we're getting the tablet we're getting is image / jpg and now we can send respond start send user dot avatar yeah now if we go to our postman and we are going to change like what's the requirement the ID is required here so just we are going to grab this ID and just paste in here just send it oh terrorism order the kitties will be a get request yeah now if we sent we get some something but if we just copy here and go to a word browser and paste in here you can get the file so this is how we can serve up the pie and get the file so yeah thank you