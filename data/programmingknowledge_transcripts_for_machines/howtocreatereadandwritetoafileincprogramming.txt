this is john from programming knowledge and in this video guys we're going to discuss what is file handling in c and then i'm going to give you a basic example we're going to create a program on how to handle files inside our c program so basically guys see files input or output functions handle data on our secondary storage devices such as our hard disk and c can handle the files as stream oriented data or system oriented data or binary files so again guys we're going to focus on this so the first one will be stream oriented data files and the second one will be system oriented data files okay so when we say stream oriented data files the data is the data is stored in the same manner as it appears on the screen okay so i hope you can see that the input output operations like buffering data conversions take place automatically while system oriented data files the data files are more closely associated with the operating system and data stored in memory without converting into text format so this is going to make sense later on when we try to implement our very simple file handling insider c program now there are five major operations that can be performed on files so this will be again i'm just gonna list it listed here just for you to see because i think it would be much clearer if you can see all the details all the things that i'm talking here so f c file operations so first one will be creation of a new file the second will be opening the third one will be reading the fourth yeah fourth one will be writing data in a file and last will be closing a file so these are the five major file operations the first one is great again creation the second is opening so we could open an existing file and then we could read the contents and then write data into a file so for example in your program you want to save an information so you could write data into a file okay and then of course whenever we are opening a file we need to close it after using it inside our program okay so the steps there will be steps for us to set up the file operations so these are the steps for processing a file so number one will be declare a file pointer so this is important so we need to declare a file pointer variable and then this will be our variable that we were going to use whenever we want to work with our files and then after that one we need to open a file using f open method or function okay so after that we're going to process this will be number three process the file using the suitable function right here and number four will be closing close the file using f close function also so if we want to work with files inside our c program we want or we we might want to check this uh steps for processing our files so we need to declare a file pointer variable and then we're going to open the file using the f open function right here and then process the file using the suitable function so for example we want to iterate through the lines uh inside the file if you want to save or maybe write information into the file you can do that here in step three meaning you could process the entire content of that particular file and then right after processing maybe you need to close the file or not maybe you must close the file after closing or after processing it inside rc program so basically guys there are a lot of functions that we could use when we say um we're processing a file so to handle files in c um file input or output functions available in the stdio library are the following so i'm just going to list it also here for you to see so we also we already discussed the the two functions the first one will be f open and the second one be the second one will be f close there are also functions such as get c which means um we read a character from a file and then we also have put c so this function put c writes a character into a file and then also we have get w which means we need to read an integer from a file and then we also have put w so write an integer and we're going to use this later on this particular functions okay so you need to be familiar with this again if you want to read characters from a file you need to use this get c and then if you want to write character into a file you you need to use put c and get w gets the integer and put w write an integer into a file and then we also have f printf so f printf prints formatted output into a file and we also have f f so reads formatted input from a file we also have f gets right here so f gets a read string of characters from a file and we also have the next one will be f puts and then the last one is f e o f so f puts write string of characters into a file and then we also have f e o f so it will detects and a file marker in a single file okay now as a sort of example we're going to implement a simple opening and closing of a file and maybe writing a specific text or something into our file so we're going to do that right here so at first we need to remember the the steps for processing a file we need to declare a file pointer so in order for us to do that we're going to have to follow this syntax right here i'm just going to copy and paste it here file open so as i've said we're going to use this function f open and these are the possible parameters that you could use okay so to put it simply we could use this we could declare a pointer variable so f p and then semicolon and then we're going to use that pointer variable and then use the f open function right here and then we could say here filename dot txt and then another uh parameter and then we're going to use here w so w means that the file is being open for writing and if the file does not exist then there will be new file created okay so um let's just return zero for now okay after that we could close our file okay if we open the file we can also close this so what we what we need is to use the f close function and then pass in the pointer variable which is fb right here okay and right after opening the file and before closing the file this is where the processing of the pi uh processing of the file happens processing of the files right here process end of processing okay so inside of processing we could just simply if you remember we have different functions so get c put c f printf so we're going to use this so for now let's just say uh f printf okay then open and close and then semicolon and inside here we could specify the pointer variable which is fp and then of course percent s percent s where is it percent as there you go and then hello world where okay hello world there you go so after this we could um save our file and then build and run okay so for now we're getting process return zero it means that the execution of the program is successful so we're going or we're trying uh we're going to try to open the file that we have created and as you can see here i have my project right here from documents code blocks projects and then programming knowledge and then if we try to open this we can see the text hello world okay so there you have it on how you can write files or write lines of strings into our file by using this simple program right here we're going to continue working and discussing file handling in c programming so from the previous tutorial so actually this is part 2 of the file handling video tutorial and in the previous tutorial we um discuss the basics of file handling and also discuss the five major operations that can be performed on a file so for example the creation as the first operation and then opening reading writing and closing a file and also we discuss the steps for processing a file so basically if you want to handle files inside your c program you need to declare a file pointer variable as the first step and then the second step will be opening a file using the f open function and then right after that one process the file so for example you want to count the number of lines inside of that particular file or you want to add something to that file you can do that so that's the processes or processing of the file and then of course closing the file using the fclose function and from the previous tutorial also we briefly uh discussed the different functions that we could use when we are handling files in c so for example we get c the put c um get w and put w and the other functions so in this video guys i'm just going to show you how you can uh read the content of a file and display it in your simple program so we're just going to use this main function right here so i have here the main.c um file and yeah main.ca file and then we're just going to use this main function right here just to get the contents of our file so as you can probably remember from the previous tutorial we already created the file inside our file system and let me show you that okay so i have here the file and then file name that text and it contains the text um hello world as you can see here so this is written from our c program and in this video we're going to read this by using also our c program so in order for us to again if you want to handle files in rc the first step is to declare a pointer variable so the pointer variable goes like this so we need to call on this file class and then add the semicolon i'm in the um asterisk or star symbol as you can see here and then of course the name of your variable so i'm just going to name it uh filename and then semicolon at the end so this is our pointer variable as i've said this is the first step for handling files in c we have to declare a pointer variable and then the next step since we're getting the content of a file i just want to assign the content of a file into a single variable so for example i'm just going to declare here another variable car or char ch or the name of the variable is ch and then i'm just going to assume the length land 100 there you go and then cb colon so basically this particular variable will hold the contents of our file okay next line will be using the file name variable right here which is our pointer variable and then the second step in the process is of course open the file by using f open function we already use this function from the previous video so in here we're just going to specify specified the name of the file which is file name dot text as you can see here so that will be file name that txt and then we're gonna use the um r symbol okay that's basically reading the file name or i mean the file coming from our file system and then the next step is of course if we want to print the contents of our file so we're just going to use the printf function right here and then specify the format specifier percent s because we're going to display um character or strings of character here coming from our file and then comma and then we discuss the function in the previous tutorial f gets f gets okay so basically this function um read string of characters from a file and this particular function takes a few parameters so for example we're just going to specify the form parameters here so for example the variable ch that's the variable that will hold the contents of our file and then so for example 50 this is the count of characters that we're going to allow to be saved in our char ch variable and then of course the file name okay and as always if you are working with file since we're opening the file here we need to use also the closing function which is f plus right here and then we're going to specify the file name right here okay so for example the file name and that's about it and we can run our program right now let's just save this and build and run so it's going to output hello world so for example just to show you a basic example let's just fill out our file hello world this is a string from a file so we're just going to um this this so save and let's run again our program okay so as you can see here hello world comma and then this is a string coming from a file as you can see here so basically we successfully read or get the contents of our file name that txt file okay so now there are other operations that you may want to do in your um file so for example you want to like count the number of lines that's possible again this particular symbol right here is uh like opening a file in a read mode okay so r that's basically what we use here so as i've said there are also other functions that we could use when trying to handle files in our c program and of course f gets is one of them but there are also so for example we have get c so this reads a character from a file okay we also have um get w so this will be for reading and integer and we also have f gets that's what we used here so f gets reads string string of characters from a file okay and then of course there are other functions that you could use to write this is right in into the file so we have put c um put w so basically put c writes a character a file and then put w write an integer to a file and then we have f print f for writing and we also have f puts okay to write string of characters into a certain file so i hope you understand the basics of handling files in c and of course as always if you have questions you can ask questions in the comment section below and we will try to answer your queries and thank you again for watching guys and see you in the next video