hey guys welcome to programming knowledge in this video we'll be looking at loops the water loops let's take an example so here I have sample program this does nothing but just taking name and age of a person and then print it onto the console so what if I ask you to take the data of ten people so what you will do is you either execute it ten times or you just copy the whole thing and then paste it ten times and just change the name like they name one name to name three and so on so that those are two ways through what happens when the user decides how many number of times you need to ask him so what is in the run time I'm the user and I and I tell you that I want to store the data of let's say 100 people and you just wrote the program for 10 people so at the time your program fails right so to counter such type of situations and the counter such redundant course you you are not doing anything practically useful right you are just copying and pasting the whole code again and again to counter those type of limitations we have something called loops so today we are going to look at four loops so for loops work like a counter based loop so you have a counter your starting value and then you have an ending value so the loop goes from the starting value to the ending value that's all for loop works so the syntax is you write four and then you have a starting value of a counter and then you put a semicolon and in between you put a condition so this condition is actually the loop condition so what happens is the counter is actually checked with a condition before going ahead so for every time the counter is compared with some value so that it stays true so this condition should stay true for the whole loop to execute if it fails the loop is going to break and then the control goes over to the next statement we south of the loop so for the loop to execute this condition it needs to be true and where you grow this starting the day you cannot stay or their rain if you just put the starting condition in the this is also a for loop only but what happens is there is no growth condition right so the starting value stays the same and this condition also is always true so this loop will be going on forever so that type of loop is called an infinite loop so the easiest way to create an infinite loop is you just put two semicolons this becomes an infinite loop so because there is no starting value there is no condition so this becomes same value for these you just define some value over here so this makes it as an infinite loop so infinite loops are banned you don't want your program to keep executing the same set of statements again and again and again the user gets bored right so you want to end it after certain number of times so what you do is you put a counter and then you put a condition and you put an increment value so you increment the counter or you basically increase the value of the counter so that at some point this condition becomes false and the loop breaks so that's what you're going to do and it may I test my for loop over here so what we're going to do is fall and then for the counter variable I am going to in stresses inside this so there is something called a scope so what happens is I can even do like this also I can put an eye over here and I put I equal to zero or something like that that also works but what happens is this particular I will be used in the whole program I mean in the whole scope of the main so we'll talk about scope in a separate video for now it is best to use counters inside the loops itself because once the loop end the counter gets out of the scope and it is deleted automatically from the memory so it's best to use counters as a local variable we will talk about what are local variables global variables when you are talking about we will definitely do that in the video so for now I just want to write for I equal to 0 so that is the starting value and I want got it ten times right so for how for ten times I am going to check so let me start from one that becomes easier many times you will be starting your counter from zero there's a reason for that that we will understand when we are dealing with aureus or something generally computers counting start from zero so for now we will start from one and then suppose we want to go till ten when will the condition fail when we go for it number we are growing this number right so let me not write the condition right now I will just put the growth rate so I equal to one so I will just do and I plus place I talked about this increment operator right so what this does is it just increments the value of i from by one unit so if it is 1 it becomes 2 and then it becomes 3 and so on so now this I will go on increment it will go to the range of the integer that is some 2.32 something like that and then it again cycles back it again goes to minus 2 power something so this loop won't end at all because there is no cut ending condition for this so to end this loop I want to execute it 10 times so that condition will fail only if I becomes greater than 10 so till the value of I is less than or equal to 10 execute this loop once it is greater just make out of it so here you put a brace this braces I said to this signify a block of commands so this block represents the for block inside this whatever you write is going to be executed this many number of tension depends on this condition in the set of conditions so here instead of writing all this I am just going to put the number itself so let's just put an eye over there because we don't want the whole set of statements getting confused so let's just put I over here and then I will just put a new line so ended and no semicolon so let's now execute this f9 so here if you see you have all the numbers from 1 to 10 so that is because of this so what if I put less than 10 less than when it goes to ten it's going to break right so now you know the output it's going to come till nine so f 9 so here you have numbers from 1 to 9 what happens if I remove this condition as I told you we'll be going into an infinite loop so what it feels like it it feels like something like this you can see it's just going on increasing it went to 4,000 5,000 6,000 it won't stop it's just going on just printing the numbers that's because I don't have a stopping condition it doesn't know where to stop it's just going on it goes up to that whatever that value is it's to go into 10 power 9 or something and then it's even so you're going to cycle back and this process will continue it's never going to stop so to stop such a loop you can either die click close this or press controlc it's going to stop but this song use for loop and C++ there are pretty adult type of you said yes as well so instead of putting the counter here as I told you you can put it over here so if I equal to 0 and then here I will just put a semicolon and then I'll just put the condition over here and then I plus plus what this will do is it is automatically understood that I'm using I asked my controller and once it goes up to 10 it's going to stop so it's just going to give me the same output is going to give me 1 to 10 and what if I you cannot remove this condition because once you remove this condition the loop is going to be infinite and one other thing you can do is you can put this thing inside here so this also does the same thing only thing is that this statement becomes this statement of the loop these statements are executed in an order so what happens is first this statement is executed let me number them down so first this statement is executed then this statement is executed so all these statements whatever is inside the block then this statement is executed let me number it as 3 and then it is checked over here so this check is performed at the last so once if it is true it is going to again go there and again this condition this statement will execute then this check will happen and then again if it is true this loop will continue that's how it goes and the other thing you can do is you can actually omit the condition also there is a way to actually stop the loop without the condition also what you do is you just put two blank semicolons and then to stop I will write if that particular I is greater than or equal to ten so all sorry greater than ten because once it is greater than ten I mean once the eye goes to the value of Leven the loop should stop right so what you do is you just break remember this break we use in switch case statements that's the same break this is actually a jump statement so this is how it is used for breaking out of an infinite loop for braiding breaking out of a loop at a particular point of time so we will be talking about these jump statements in our next video so this is how break works you get you also have continue so that will be talking about in the next video and now I will just increment the value so here this is the same exact loop so if we just execute it you will be getting output so here you have one to ten numbers so here see because I have zero over here well exchange it to one here you have numbers from 1 to 11 now why did this happen that's because I checked after printing this so that's a logical mistake that's not the fault of the loop I just forgot to put it before printing it so once it goes to the value of love and it should break right so if it is less than sorry if it is less than or equal to ten then only I should print so first I need to check if it is not greater than ten if it is less than or equal to ten then underneath the print so this loop will exhibit a expected so this is how you use for loops in the next video we will be talking about while loop till then happy coding