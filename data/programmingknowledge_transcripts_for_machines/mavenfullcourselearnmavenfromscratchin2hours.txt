so hello and welcome to the new series of Naval so today uh this video onwards we will be learning uh Maven what is Maven and why it is used so basically this is a crash course type course wherein this course is definitely a beginner friendly course uh the people who don't have any knowledge uh previously has knowledge regarding the maven so this is a beginner friendly course uh so yeah this is the in this video we'll be talking uh the course flow the course introduction how this course is going to be covered what are the topic that I I will be teaching you okay so let's get started so first thing first you you would ask me what is Maven and why to learn it okay so to answer it uh I haven't answered over here you can see Maven is a popular build automation tool for Java based project that helps and manage and organize the software development process so you know the software development process there is lot being covered in inside in making of the software right right starting from the planning till the testing part a lot of phases comes wherein it uh like our agile methodology is there in which iteration iteration over iteration the software is uh produced and optimized right so for that uh we required some project management or the build automation tools so there there comes Maven it is a popular build automation tool for Java based project so so when you create a Java project so you can use a maven for build automation tool okay so let's move forward it provides a standard way to define a project dependency uh build processes and project structure making it easier for developer to manage and maintain complex Java application so considerable scenario you are building one project and you you let's suppose you have implemented 10 dependencies in your project right so you have used 10 different libraries in your project to build your project and so their dependencies right in your project so you have to mention those dependencies you have to write the version version which you are using for the for your project right so let's suppose you have used uh let me write it over here I have used 10 dependency when you are writing which version to use for the dependencies okay so this is a manual traffic manual task that you do uh when you write a project when you work on your project so what Maven does is you tell the maven that these are the dependencies you are implementing in your project and rest the man Maven will go to do the work okay so let's suppose you are implementing uh spring you are using spring framework in your project all right so uh I'm just giving one example if you are implementing spring version 4 so you have a written spring version 4 is there so now the string version 5 comes uh in near future and then you have to again come and uh change those dependencies and you have to write again do the modification inside your code so that is pretty hectic part and that Maven covers over here having covers all the dependencies and it will automatically do all those upgradation part in your project okay so that is how this second Point works and manual uh handles your dependencies okay so third point is Maven uses a declarative approach to configuration and relies on XML files called palm.xml to describe the project structure dependencies and build processes okay so there is one important file in when when we talk about the maven is form.xml okay so in this file you have to create when whenever you are using Avenue in your project you know so in this file what it contains it's its project structure dependencies and build processes so these are the core structure of your project right so without dependencies your budget can't work you have how the project structure is gonna work for the build processes of the project is going to there so this is a pretty uh imported file for your project so we will have one separate video on a form.xm how what it covers and how why it is important we'll cover all that energy in detail okay so next point is it also offers a vast variety of Open Source libraries and plugins that can be easily integrated in your budget okay so so to so to understand this point so you just go in your browser whatever browser you are using and write maven leggings and of the very first link that you can see is uh there is a official Maven Apache org you can open this and you can see these are the these are the plugins that Maven Maven has okay reporting plugins have their core plugins are there so you can check out their uh all those uh description is also there uh and one one good thing is the get and get a positive link is uh also there you can check that out we will be covering uh again we have one separate video on this this one also plugins and one more thing is Maven repositories right so you go in your browser and write Maven repositories just hit enter and as you can see very first is the official link for the management repository you go there and yeah you can see this this section contains the new in Maven so this is the latest version you can see when it is released and these are the new repositories of mavic we again we cover water repositories in having in detail we have one separate video on that and on that as well okay we'll cover that one also okay so let's move forward and and see what are the features of Naval okay so first feature is again dependence dependency management so as I said having simplifies the management project management of the project dependencies by providing a centralized repository of libraries and framework it automatically downloads and manage the dependency as I said here instead of you writing the those dependencies manually Maven does all all this tasks automatically by itself and which makes it easy to update our dependencies without worrying about the conflicts all right so next is Project standardization my employees a standard project structure that is widely adopted in the Java Community the standardization makes it easier for the developer to understand to contribute to the project even they are new to them okay so as I said it's beginner friendly as well so you have you can learn it okay easily and build automation Maven automates the build process makes it easy to come pile test and package the project and developers can Define the build goals and execute them in a single command as well we'll see how we can do it we will create one project using Java and using Maven as well okay and next is plugin system so Maven has a powerful plugin system that enables the developers to extend the functionality of the build process okay so there are many plugins available that can be easily integrated into projects to perform the specific task a task incense for example to a perform such as generating the documentation deploying the applications or running the test so all these we can do by using using this plugins we will see how we can we can do this okay and next is consistent builds Maven ensure consistent builds across the different environment by using the declarative approach to configuration declarative approach in the sense we create one pom.html file as I said here in inside which we are writing our dependencies project structure and build processes as well okay and uh last one is integration with ID so this is a pretty good feature of Maven Maven integrates with the popular ID such as Eclipse IntelliJ IDEA netbeans Visual Studio code which makes it easy to manage a project within ID so you don't have to worry about where I can use the maven so in the market we have a very popular IDs as of these days like video Studio code IntelliJ IDEA Eclipse you can use Maven with this ID itself the maven is integrated inside this IDs okay and so overall Maven simplifies the development software development process and makes it easier for the developer to manage the complex Java based project okay so enough about Theory uh so in the previous video we have talked about the course introduction I have given you some theoretical overview of the maven what is Maven what are the features of the maven and as I said you in this video we will be talking about the tools that you have to install in your PC to get started you uh working with the maven okay so first thing first you need Java uh because it's a Java based uh tool mavenous so you require Java in your PC so to install Java uh you can just go here and in your browser and just write down wait download Java jdk okay so first thing uh first link will come from Oracle itself okay just open it and here you can see uh whichever operating system that you are using select according to according to that uh if you are using Windows select windows or Linux or Mac OS right now I'm using Windows 11 so I will select Windows here and I will again in any of these three options available you can download anyone uh so I like to install the direct installer for that Java and I will just click click here and it will start downloading the jdk file for my PC okay so I will not download it again as I have downloaded okay so wait a minute let me cancel it after uh downloading this uh wait a minute I will show you right uh just in case uh it is downloading uh now okay so if you have if you guys are uh liking this series so do hit that like button and share with you share it with your friends who wants to learn Heaven okay uh okay wait uh as I told you I have already installed jdk in my PC so you don't uh need to do anything or you just come here come at this site and click on the x24 x64 installer and click on this link it will start download the jdk file for for the latest version which is 19 for now at the time of recording of this lecture and that is the exe file that is executable file okay just go inside your uh um egg file explorer and go inside uh your C drive and after C drive you can go inside your program files and inside program files you can find Java Java folder is being created okay after the installation just open the Java file you can see jdk 19 is here installed in my PC and I will just go double click on that folder and after in this folder uh as you can see bin folder is there okay so you just double click on it and inside these all these Java files are jdk files are there so you just need to click on this address box and click Ctrl C so to copy this path and after copying this path just go come in come in even start and write edit edit okay so after writing edit you can see edit the system environment variables is uh best match console over here you just click on it and this window will pop up and after here here you can click on this edit environment variables and so now you have two options you can set this environment variable path for the user variables like this is my user if you have if you are using multiple users in your inside your windows you know then you can choose this path so and if you are using only single user in your windows you can choose the system variables as I prefer system variables because in in some cases there are multiple users inside your PC then you have to create that separate separate path for the each user so instead of creating that you just come over a system variables and click on the path click on edit Nikon new and just paste paste this okay so this path you have to paste it over here oh I will not pasting pasting as I have already done that part you just paste it over here click on OK and just to ensure come here here path as well click on edit click on new click Ctrl V to paste it and just say okay okay and Okay so you have to say okay okay and you will get out of this window and after doing all these things uh you can see exe file is also downloaded just open I will show you and I will not install as I I will install my PC already okay so here you can see it is giving me a message that it is already installed on the PC do you want to reinstall it I will say no you just go ahead and say SCS yes or next next so the Java will be installed on your PC that's it okay so this is a about Java okay so after installing Java uh you have to check whether all everything is good you have your path is set up and you are good to go for the first checklist of our tools so for that verification you just come on come on start and click right click and as you can see terminal is here you can click on that and the terminal will get open and you just write one command Java minus minus words hit enter and it should show the Java version that you have installed right now in your PC okay so if everything goes fine you should see this message or else if there are again some messages where Java is not recognized as a command in that case you want you should you have you should miss some steps you go back and check this video again and try to install again okay so this is for our first Tool uh the second tool is of course Maven you are learning Maven you have to install Navin in your PC right so click on the new tab and just type download maven sorry my typo have it okay so first link come which is official link from Apache you will just open this and after opening this these are the six system requirements uh just pause the video and see what are the system requirements that you require as you see first request system requirement is jdk itself that we have downloaded in our first step so we are good to go for the jdk uh so there is no memory requirement so as many memory you have it's fine uh this requirements is there so you approximately 10 MP is required to have an installation itself so I guess no one is is there who doesn't have 10 MB of space inside this disk okay an operating system no minimum requirement uh startup scripts are included such as shell scripts and windows batch file so operating system you can use anyone okay so here you can see they have given four options you can download any one uh I personally like binary zip archive file so I will just come here and click on this link the this will download the Apache Maven zip file uh once installed I will go and click open when done or instead I will go inside my downloads folder I will click here okay so this you can see so first of all I need to extract this extract all uh I will browse just extract online yes and click on OK so it will extract everything what is inside that zip file so here you can see uh this file is being extracted uh I will just do one thing uh I will just cut this out and after cutting this I will come inside my C drive come inside my program files and inside my Java folder itself that we have seen all right program files inside Java I will paste that here itself okay I will paste it paste an extracted folder over here and now you have to do one thing we have to do is to click on it click on bin and whatever inside is click on this path Ctrl C okay wait Ctrl C you have to copy that part and again come into the start and write edit edit edit the system where environment variables environment variables and just go inside path click on edit click on new and paste that path and just press OK and come down here and come here click on new click on control V and click OK OK and again okay so this part is done we have set the environment variables now I'm doing this we have to check whether everything is okay so for that again we have one command so let me just restart my terminal so that it knows the maven is installed in your PC okay and so the command is m v n minus minus virgin okay uh there is no in if you need to run this program listen Okay so Java home is a environment variable is not defined correctly so first let me go and rectify this error and I will come back okay so the problem that causes that Maven dot is is the internal command error so uh we have done all this right so we come into the edit we go into this environment variables and we are going inside our path we are on edit and we are adding that path over here okay so this part this thing we have done correctly okay after that I I hope you got this so one thing uh if you come over inside your terminal and just write mvn minus minus version and wait for a second okay now instead of what Maven does is mavin come here inside our environment variables and check for the one variable name and Java home so we have to create that Java home variable so how to create it again come inside your edit and click come here and just click on new and set the variable name as Java underscore home all caps and the value should be the folder all right so the folder is as I showed you jdk 19 so don't go inside the bin just get this much path Ctrl C and get inside your variables and Ctrl V and just click OK after clicking OK so you can see one variable will got created over here and as that same variable you have to create over here as well Java home and this is the variable and once you create click on OK click on ok just come clear this out come inside your terminal and just write mvn minus minus version and hit enter so now I hope you see Apache 11 3.9.0 and this is the binary code and the maven home this is and the Java version is also telling us and it is also telling us where Java is installing this PC and some default local and platform encoding you tf8 okay and the OS number always name is also telling us okay so this main information it gives you I hope you also get this information when when you try to run this command okay so we have done installing mavin then shot in Java and we now again we required git okay so why to why to use git git is a very powerful word version controls management tool okay so you just come here itself and now right download it and hit enter so first thing uh first link you see is the official uh from git distributed it is the new distributed is the new Center Line okay so you can see it automatically detects your OS and gives you the link for the Euros so once you click on the download for Windows uh click here to download the latest yes click here to download and it will download the 50 mb file which is like the executable file once it it got downloaded you just click on it uh let let the default installation be there click on okay okay next next this will install git in your PC successfully and once it installed it is very powerful tool we will see when we are started using Maven and build started building some projects using Maven and Java you can see uh it is downloaded just click on it and go next next and install this tool as well okay and last last checklist is any IDE your preference you if you want vs code you can use vs code if you want Eclipse you can use Eclipse you can you can also use I guess very much powerful and very good looking IDE just my personal opinion not nothing else you can use your your own IDE or all this IDE comes with a building Maven implementation or the support you can say so if you have followed this all these tools you have installed then you are pretty much good to go for the next video and I'll see you in the next video and thank you for watching this video so till now we have covered about your post introduction and the software that are required for running the maven projects on your PC all right so for this video uh we'll be discussing about Maven life cycle and basic mapping commands uh so these are the commands that you must know to work with the maven project and how actually the maven life cycles means how the projects that has been you built using Maven works or throughout its life cycle okay right from the validation and till the deployment Point okay we will cover all the points over here okay so Maven is a quick introduction for those who haven't seen previous videos uh Maven is a powerful project management tool that is based on form that is Project object model uh used for project build dependencies and documentation it is a tool that can be used for building and managing any Java projects okay and Maven makes the daytoday work of Java developers species and help with the building and running of any Java based projects so if you are trying to build any uh project that uses Java then you can go for the maven it will quickly do your uh all the tasks of managing those dependencies building the project and documentation part okay and so let's go and see one by one uh each point so first point comes is uh the default Maven life cycle consists eight major steps of phases for compiling testing building and installing a given Java project as a square below so these are the eight steps so I should validate compile test package integration test verify install and then deploy okay so first is validate in this step it validates the project if the project structure is correct for example it checks if all the dependencies have been downloaded and are available in the local repository so we'll see what is local depository and repository and what is the form.xml file so we'll have a separate video on format XML file will where when we will be discussing all each and every tags of that XML file and in detail we see how how the form.xml is important in Maven okay so next is compile it compiles the source code and converts the java.java files to dot class files so as since we are using Java programming language to build our project so there there must be a DOT Java files that you create for your project so that those dot Java files need to be converted into the dot class file that is the byte code uh which is machine understandable for the Java converts jvm converts to be a more precise and it and it stores the classes in the Target slash classes folder so this is the folder where uh all those dot Java files are converted into the dot class files and got stored in the Target and then inside Target folder there is a classic directory where it stores okay so next is the test it it runs unit test for the projects so you at this phase it will run the unit test that you have defined for your project and we'll see how to define it and how to use it and how to run it okay so package this this step packages the compiled code and in a distributable format like jar and ojar or work so it converts the if that code into the distribute distributable format like jar and War okay so integration testing uh it runs the integration test for the project we'll see how it runs the integration testing also and where the next step is verify this step runs checks to verify that the project is valid and with socalled quality standards so the quality standards are being checked in the verification via step and then comes the installation step this step installs the package code to the local Maven repository there is there is one local manual repository where all these uh packaged code is being installed over there okay and then is the next deploy it copies the packaged code to the remote repository for sharing it with with other developers so you last comes the deployment phase so where it converts the code to the back it copies the package code to the report remote repository by using which you can share that share it with other developers which are there in your team or company okay so these are some uh maven life cycle build life cycles and then comes we'll see how some basic mapping commands Okay so first comes the mvn clean okay it cleans the project and removes all files generated by the previous build so when you do perform one build it creates that folder and when when you again do some changes and you again build that project again install that project then it again creates that those folders again so if you're using MV and clean it cleans the project and removes all those previous build build files okay so and and mvn compile it compiled the source code of the project again mvn test compile it compiled the test Source Code mvn test run the test for the project uh they do a defined and mvn package creates the jar uh or warp file for the project and convert it into the distributable format as we discussed above and mvn install uh deploys the package jar applied to the local repository and MV and side generate the project documentation so next is ambient validate validate deposits form and configuration so as I did as I told you form file uh form dot XML file is the very important file for the maven projects again we see in depth with one separate video so stay tuned so mvn uh idea uh colon idea colon generate project generates the project files for the IntelliJ IDEA or Eclipse so if you are using any IDE uh that is Intel GID or Eclipse any one of this so you can use this come on all right so I mean release uh perform performs the release build okay and mbn last come mvn deploy it copies the package jar or War files to the remote repository after compiling running and test and building the project okay and so oh so this is the command that we write mvn green install uh and why we write clean because uh it by using this clean uh we can remove all those previous build files and it will remove all those uh files which are pre uh came from the previous build it will delete and creates the new uh files for the new build okay so this is the idea behind the maven life cycle and having basic Maven commands so till now we have covered uh what is Maven uh yes we've seen the softwares that are required we've seen a covered life cycles and basic mapping commands so and now we will see the maven dependencies in this video and on next video onwards we will be creating an actual project and we will see all this theory that we have learned till this video uh how we can Implement in that uh create or the actual project okay so you'll see the map independent dependencies in this video okay so first thing Maven simplifies the creation and the management of the dependency by using a centralized repository that contains a vast collection of Open Source libraries and framework to create and manage dependencies in Maven we have to follow these steps okay so we'll see the step by step how we can create or manage the dependencies in the Maven project Okay so first step is Define the dependencies okay so the first step is to define the dependencies in the projects form.xml file so as I said as I told you in the previous video also pump.xml file is very important for the maven projects this is the file where all those uh project related dependencies and are being defined in this file if you if you forward or if you not Define any dependencies that you have used inside your project and you don't mention over here inside the computer then the project will not work since their dependency will be not implemented inside your build okay so the this file is important and you have to define the dependencies first inside this file itself okay the form.xml file is an XML file that contains a project configuration information including the dependencies so uh it also contains the configuration information of the Blue Project also okay so to Define our dependencies you need to specify the group ID the artifact ID and a version of the dependencies okay uh for example we'll see one example over here you can see one snapshot of the dependency for example to add a screen framework dependency to your project you need to add the following form.xml so imagine one project you are building and you are trying to add the spring framework in your project then you have to write this many nine of code to tell your uh project from.xml file or or Maven that you are using the screen framework and add this dependency in my project okay so the root tag will be dependencies inside which a dependency tag is there and inside this uh dependency tag you create all one dependency itself okay so as you can see uh we need group ID artifact ID and the version of the dependency so we first Define group ID tag and we'll write all dot spring framework and we tell the I mean that this is the screen framework that we are trying to use you know in my project in artifact ID you are trying to use in your project will specify that version also over here and this is how you you create or Define a dependency in your palm.xml file and Maven will understand that hey you are trying to use swing framework audio project okay let me add this dependency in your project okay how to resolve the dependency okay once the dependency is defined now you know how to define the dependency in the palm.xible file Maven will automatically download and resolve dependencies from the central repository Maven checks if the dependency is already downloaded in the local repository and if not it it downloads from the central repository so there are two repositories are there one is local repository and one is Central repository okay so local repositories where your all the dependencies resides or downloaded dependency and the central depository as well all those uh dependencies are there and it first the maven win check okay so manual will check okay so you need fixed spring framework it will check in the local repository whether spring framework is already downloaded over there or not if it is not downloaded in the local apology it will go inside the central repository and download the screen framework and add this dependence dependent dependency in your project for the local repository okay so this is how the dependencies are resolved in the manual okay so dependent is dependency scope okay so dependencies in Maven can we have different Scopes okay so Scopes are different which determine when and where the dependency is being used okay so you define the dependencies you resolve the dependencies now we have to define the scope of the dependence dependency okay the four means Copa compiled provided runtime and test the scope can be specified in the dependency declaration all right so where we Depend and declare the dependency inside this dependency tag for example to specify the dependency is only required for the testing you would add the following pump.xml so imagine one testing tool okay so junit is a testing Tool uh you required for the testing of the Java project so you are trying to add the dependency for the junit so think about it you when you required obviously when the testing phase come of the earth testing phase will come for your project then and then only you require junit right so you can Define that scope of test here inside the dependency tag itself there and by telling the maven that hey use this junit framework only for the testing phase okay so you are defining the scope you are limiting the scope of that framework in the testing phase itself okay so these this is how you dependency scope is being resolved okay so next comes how to manage that dependency okay so Maven project says provides several goals to manage the dependencies including adding and removing or updating the dependencies for example to update a dependency you can use the following command Okay so Navin does this uh thing of managing the dependencies automatically Okay so it will add it will remove it will update your dependencies automatically okay so to update your dependencies uh you can use this following command mvn version colon use latest version okay so you are telling the maven that hey uh do one thing update all those dependencies to them to their latest versions okay so if you are using three dependencies my win will go and update all those three dependencies into the latest version and it will do automatically okay so this will update all the project dependency to the latest version available in the central repository okay in summary uh in short defining and managing dependencies in Maven is simple process that is mostly done through the projects formed.xml file again I'm saying Bomb Dot XML file is very important and Maven provides a centralized repository and several goes to simplify the management of dependencies in Java based projects okay okay so we'll see uh now the types of dependencies now till now we have covered how The dependencies Works what are the different fields of dependencies now we'll see types of dependencies all right so in Maven there are several types of dependencies that can be defined in the projects formed by the XML file these these dependence dependencies will specify the libraries or the framework that is being used in our projects all right so first is compile dependencies these dependencies are required for the project to compile and build correctly now when download these dependencies and add them to the projects class path these dependencies dependencies are also packed packaged with projects output jar or War file okay so these are the early early dependencies that we require first to compile your project these dependencies which are required and comes inside the compile dependencies within a provided difference independent dependencies this dependency are required for the project to compile but they are expected to provide it by the runtime environment okay so example of such dependencies are servlets API and JSP API these dependencies are not packaged in the projects chart okay so the compile dependencies are packaged with the jar and but the oil dependencies are not packaged with the jarab or file whatever you file you are creating okay so next is runtime dependencies these dependencies are required for the project to run but not required for the project to compile okay so first uh two dependencies that we have seen those are required for early okay so when your project compiles the that time these dependencies are required but after compilation when the project will run for those we have different dependencies that dependencies come under the runtime dependencies right so these dependencies are added to the password at runtime but they are not packaged again these are also not packaged with the jar or file foreign now your project run okay so now come test dependencies so which are required for the testing purposes okay so these dependencies are required for the Project's tests but not required for the project to compile or run as I said there is no use of these test dependencies for the compilation part and the Running part okay so these dependencies are added in the class path when running tests but again these are also not packaged with the jar or file okay so next comes system dependencies these dependencies are not available in the central Maven repository and are required to be manually installed on the local machine to include the system dependencies in the project you must specify the path to the deficiency in the jar file okay so these are the dependencies that are not provided in the man and Central repository you have to do them these tasks manually if you are using any system dependencies you this is the thing that you have to do manually there is no way to do this automated of automated manual okay so next import dependencies these dependencies are used to import the dependencies from other Maven projects when importing a dependency Maven will use imported projects form protection file to download and manage the dependency okay so if you are trying to use another Maven Project's dependencies so at this time import dependencies will come into the picture Okay so imagine when you have one project and you are trying to you have you want the another Maven projects dependencies so input dependencies will come into the picture they will go inside that projects from dot XML files they will see uh what are the what are all dependencies that the other project is depending and applying it will get those all dependencies and it will automatically as those dependent dependencies in your project so these are types of the input input dependencies import dependencies okay so in summary understanding that is different types of dependencies in Maven is essential to properly manage the project dependencies and ensure that the project compiles runs and tests correctly so why I'm taking this theoretical lectures first you have to understand what are you know what is dependencies but you don't know what is compile dependencies for a dependencies you first you have to understand these are types of the dependencies then and then only you can go into go and create a maven project and work on it okay so I guess this is the pretty much theoretical part that you want to understand before you get your hand dirty on the mining projects okay so on the next video onwards we'll be creating our new Maven projects using IntelliJ IDEA or Eclipse any ID that I can choose so you you also can choose any ID or those IDs are come with Maven integration in inbuilt just a visualization part will be different okay so till now we have covered the theoretical section of these uh cache course and now from this video onwards we will uh we're actually doing some coding stuff inside our IDE and as I told you uh this today today's ID comes with the inbuilt uh Maven implementation Maven support so you can use any of the IDE like IntelliJ IDE vs code IDE but uh if you ask me uh I would prefer you IntelliJ IDEA because it is uh developed by jetbance which is one of the popular company and I personally like IntelliJ IDEA if if I'm doing some uh stuff related projects using Java okay so I would also suggest you to download the IntelliJ IDEA if you are following me and if you are if you want to follow this course okay so I'm assuming that uh you are you have already downloaded IntelliJ IDEA if not let me just quickly give you uh overview how you can download it just come here and write download IntelliJ IDEA if you hit enter first link comes from jetband itself just click on it and you will get to the IntelliJ IDEA download page uh now according to your operating system you can choose anywhere either Windows Mac OS Linux and I am currently now I am using Windows 11 that's why I'm uh click on Windows and there are two editions of this IDE one is Ultimate one and one is Community Edition uh so I will download the Community Edition because it is the free one and open source also and but the ultimate word is the you get more features and 30day trial trial also so if you want you can download but it is paid I want you can compare all these uh features that you get in a paid one and a free one also so go ahead and click on download exe file or zip file whatever you want it will start download it is around 700 MB uh it depends upon your download speed it will get downloaded and just go ahead and click next next your IDE will get installed in your system okay I will doing cancel because I have downloaded already okay so assuming that you have downloaded this idea and if you if you want to follow along this code uh let's get let's go in our IDE and create our first Maven project okay all right let's go so I will come into my IDE first time if you are opening this you will see one window like this and there are no project here because since I work working on Java so there are some Java budgets also in kotlin budgets also so ignore this one you just click on projects tab click on new project and you just have to name your project right so I will write my I'll adjust my first Maven okay so uh select the location uh wherever you want to store this project so I didn't build paper I will just go ahead into my desktop I will create one folder name as maven and inside that I will store my project okay you can choose anywhere anywhere you want uh so the language of this development is Java build system is a maven remember build system to say selected as Maven uh and because we are working with Maven itself and we need jdk so here uh whatever jdks which are installed in your system it will show all the jdk over here select whatever jdk you want I will go with the latest 119 and if if there is no jdk listed over here you can just go ahead and download the jdk and if there is any jdk downloaded install downloaded and installed in your PC already just go ahead and add jdk folder and give the path to the IntelliJ IDEA where your jdk resides okay I will just go with 19 add sample code Okay add one settings uh I don't need anything okay and I will just hit create all right this is working like let it finish it will download the plugins which are required for the maven project to run it is downloading here you can see the background task I will show you waiting for Maven import completion and the maven plugins will get downloaded Okay so but if you are running this first time it will take time some time let it be uh by the time I will give you the IDE over you if you are using first time uh so this is how the IntelliJ IDEA looks like uh here you have the project tab where all those uh directories I've listed over here in a such a beautiful manner you can switch a switch between this idea Java or and here's the main file main domain.java file where uh our Java code is written just a simple hello world which is given by IntelliJ IDEA itself and just to quick start our development process and here is a project tab you can hide and an ID so that you can get the more view of this your file and after that uh one more is one more thing is here you can see Maven Maven tab is there if you click on it it will show you all those life cycles uh and the life cycles I hope you watched the previous video where we have discussed all those like uh build life cycles clean validate compilation and I have given you the theoretical knowledge of that these all these life cycles also you can come and I will show you how to use this tab also uh but first I guess yeah it's over and plugins also here you can see clean compiler deploy install jar all this plugins are also there we will have separate plugins video okay now uh I guess the processing is done yeah our project is ready to go and what we have done uh is we have created our first project now we have to understand the dependencies okay so I hope you watched the previous video uh where I discuss about how to add these dependencies and how dependent dependencies looks like how what are the types of dependencies okay so let's go and create our first dependencies so if you recall uh I have told you that to create a dependencies how to manage the dependencies or you have one file called palm.xml okay so this is our Maven project here you can see we have one pom.xml file just double click on it it will open that form.xml file so since this is a file extension is dot XML so extreme XML files contains the tags okay so these are the tags so so the parent tag is the project one so under which all these uh tags are written so our parent tag is Project under which model version is there uh this is XML scheme namespace schemas which are written on in the web itself if you go go on this site you can found all those schemas and uh group ID is there artifact ID for our project artifact ID is the project name itself and version is given by the Integrity itself okay and some properties of our project all right this is the file which is generated by the integer idea and given to us so now if I want to create some dependencies in my project how can I add dependencies over here okay so you see uh you just have to wait a second okay so now if you want to create some dependencies inside this so there are many ways to create the differential one way is straightforward you can you just go here and write dependencies so it will create the dependencies tag and uh after that and one thing uh we have the dependencies as our parent tag inside which all those dependencies beside is here as you can see dependencies is the parent tag under which dependency tag is there so we have to write the dependency tag okay we write dependent C okay and uh the thing because I love Italian idea is this it will automatically give me the group ID and artifact ID that you want to enter so let's enter uh let's create the spring framework uh dependency for our project I will write at a artifact ID as spring so slash spring SP ing spring slash code okay uh Let It Be uh the version where you use this okay I am getting error dependency okay it's fine uh so you see this is the one way you can create the dependencies you you just you just need to go ahead and write start writing in this uh like if I write J unit uh that is one word uh dependencies uh wait wait let me clear this out so that interview had a get that we are writing this for the first time okay J junit dependency this is our this is over there yes so I have I have added added junit dependency in my project okay so this is the one way you can add the dependencies but here you have to uh know the name of that artifact uh article ID means the dependency name to be precise and again the rest of the links is easy it will automatically ship the cursor to the GOP ID and come to the version and it would automatically add the scope here you can see I have not written the scope tag into it has automatically added the scope telling that uh man in that please use this junit dependencies for my project uh when to use in the test phase because J unit is the testing uh a related library or the tool okay so here you can see we have created one dependencies so now I will give you one another way how you can add the dependencies right so if you go to the uh this code if you go into generate and it will if you go to the manage a dependency template uh okay so it will give you the dependency template I don't know what the template I just need uh wait a second manage dependencies okay if you have nothing to show I guess we do it okay so add dependency button is there if you click on it uh it will show you that this tab so our project name is there my first Maven and only stable and now here you can see the search button is search bar is there you can search any framework that you want in your project over here uh you just need to write spring if you want to use ping in your project and one more thing uh these all implementation are done by the ID IntelliJ IDEA you don't have to worry about it you just go ahead and search the dependency name and again if you want to search any dependencies uh you just need to go and go to the maven Repository repository here you can see all these dependencies you can see uh any dependencies that you want to search you just go here and like spring okay and hit search Spring contact spring core all the dependencies will come and these uh IntelliJ IDEA is integrated this functionality inside their IDE so that you can come here and write the spring and get that spring if you want this spring uh you can again you can select the scope of this I intelligide has given me the scope to compile so I will set it as compile and again you have version you if you you want to use the previous version you can go ahead and use previous version also I will go with the latest one or the IntelliJ IDEA that provided me and if I want this spring I have selected the version I am good to go and I will just click on ADD so after I click on add this dependencies you can see these two tags are being added inside my form.xml file okay so now uh if this is the two way by which you can add the dependencies right so if I go into inside my Maven and if I go inside my life cycle and I will just click on install okay it will run my uh maving command and you can see it it's giving me the error I guess could not find the artifact okay so J unit uh is not found I have to use that okay okay okay wait a minute so I will just remove this dependencies I guess right let it be there okay so it doesn't find my dependency of that junit okay I will click on install again now you can see there is no folder right it will here you can see process finished with exit code 1 our build failure why so I'm getting there oh okay okay okay wait a minute guys okay to rerun the maven using okay okay for more information uh wait a minute guys I will be back dependencies so that doesn't work for that let me just add one more dependencies uh so so that you can uh get what I'm trying to tell you J unit I will add the dependency of the J unit itself uh let me go ahead and add okay it's getting added okay so okay fine now uh you can see uh inside my this root folder uh previously there are two two or two folders okay life cycle and plugin only but as soon as I create this J unit dependencies and and my reload and I reload my Maven project it will it has created one more folder named dependencies inside which uh junit dependence is there okay so you can see as I as I added J unit dependencies over here you can see given a dependencies also added my memory deposit direct folder directory structure and if I uh now if I go ahead and insert my life cycle and click on install uh it should go ahead and get this dependency and install it and yes build success Target project is also created a Target folder is also created we'll see what is Target we are having separate video on this uh what are the classes and how the this actual works we'll see but for this video I hope you got some idea about this form.xml file how to add dependencies now one more thing if you want to delete the dependency if you are just going inside this dependencies tab and uh in future you want to delete this dependencies you no more required J unit inside your project you just go ahead and come here J unit you click on the junit uh you you come over three three dots and you have the remove you can remove and as soon as you click on this you just have to come here and load mavic changes it will reload your project and see all that any dependencies got added or removed if this dependency as soon as I load my project that dependencies folder is gone because no more dependencies are required for our project okay as soon as you add no dependencies no dependencies folder will get created over here so I hope you got some idea how to add or manage the dependencies inside the IntelliJ IDEA and what is form.xml file and we'll continue this project so so in the previous video we we have actually started with creating a new project using Maven and that too in a eclipse uh not Eclipse uh IntelliJ IDEA IDE so I hope you have uh watched the previous video and you got some idea how to create a maven project inside IntelliJ IDEA you can use any any IDE of your choice uh but for this tutorial series I have choose IntelliJ IDEA uh okay so you can use anyone uh so I hope you watched that previous video where we have talking about the dependencies how we create the dependencies in our palm.xml file via pawn.xml file is necessary uh to create and what is the importance of it so now uh we in this video we will focus give focus on this plugin sections okay so we have done with the life cycle we have done with the dependencies now for this video we will start with plugins all right so let's go okay so let's understand the theoretical past first okay the maven plugins are central part of the balance framework it is used to perform specific goal according to according to Apache Maven there are two types of Maven plugins okay so to perform a specific task Maven has created Apache 11 has created Frameworks or dick or they call them as plugins so to so you can use that plugin and perform some tasks for the for which they are they have they are created right so basically there there are two types of plugins in Maven one is build plugin and one is reporting plugin okay so water will build plugins these are these plugins are executed at the time of build okay so when you are executing when you are building your project these uh the plugins which are used a are known as plugins build plugins and the reporting plugins are these plugins are executed at the time of site generation when your site is actually or the project or when your project is getting generated and the plug is at that the at that time the plugins which are required are known as the reported plugins we'll see uh each one uh one by one okay so let's go and check what are the maven core plugins okay uh so here you can see uh these are some Maven code plugins first one is clean uh what it does is clean up the after build okay so if I will give you an example okay we will say one by one right so inside my plugins folder you can see clean okay so this is our first clean plugin uh so plugin and here you can see clean clean clean help if you double tap on clean help it will uh give you the this you can see okay so it's like a help you can see uh it it will tell you what it does is clean clean is the goal which means the bill this attempt to clean a project working directory out there that was generated at that build time okay and if you double click on clean clean uh so to demonstrate this first I have to build this project okay so to build uh I will go inside my life cycle and double click on install uh so that my target uh folder will get created over here you can see a Target folder will get created uh okay each time when I run the lifecycle command install the target folder will get created in and inside which all our files are there and what clean does is it will remove or delete the previous build okay so to remove this this is I have now previous build okay and now some changes I have done over here imagine I have done I have added dependence I have done some Project work and and now I have to again generate that so before generating them I will clean I will double click on this it will again run that command now you can see Target folder will get removed uh since uh the clean command will clean up the after build okay and the compile water compiler dial is it compiles the Java source code okay so these compile compile here you can see so again next plugin is compiler uh it will it will compile all the Java files like here you can see a main.java file is there it will compile those Java files and create the dot class files for the respective Java files okay and next is deploy deploys the artifact to the remote repository okay so in our previous video also we have discussed what is local repository and what is remote repository okay so uh so what the deploy command does is it will deploy not command it plugins what does it what it does is deploys the artifact to the remote repository okay and failsafe is runs the junit integration uh test with the isolated class for class loader so isolated class loader uh you can see what are these command does is okay so uh generated uh classes are there generated sources are there okay so what it does is uh it install runs the junit integration test so the testing part of our project is done uh using that plugin fail shape and to next come install it installs the build artifact into the local repository okay and then resources plugin is there which copies the resources to the output directory for including in the jar okay so if you if I go here and I will check resources okay so this plugin is there so you can see again there are so many uh here resources copy resources which is help resources resources and resources test resources uh I will run one command for you so that you can understand okay so this command is okay so now next command is site it generates a site for the current project okay so the site command is it generates one site for our current projects that we have working with okay so if I go here and click side site again in a lot of work it will do it will download from the central repository of Maven all the required things and after that it is a long process for the first time when you run this okay and I I might get one error uh because I have not set up this project I have till now okay so we'll do that in our upcoming videos the purpose of this video is just to understand what are the plugins and available in the Bible okay so again these are the two the rest of the appliance are there which are also one is junit uh and it's verifies the existence of the certain conditions so the condition that we did Define and it it is useful for the integration testing so to understand this plugin you have to know first what is integration testing what is testing also unit testing also so okay so we will cover all this when we are at the uh ending part of this series because there we have one once project where we are uh has done some work in that budget and we are trying to test that project using this uh plugins also okay and so I hope for this video you have understood what are magnet plugins so for this video we'll be seeing how to create and manage a multimodule projects in Maven right so till now we have covered uh we have seen the maven projects uh that is the only single one Maven project right uh you just go here you create the maven project uh you modify the palm.xml file you add some dependencies you you know how how to deal with the plugins you know what is a maven life cycle now we we in this video we'll be seeing how seeing how to create a multi module project inside mavic okay so to do do that uh let me just first create a new project so that I can explain you clearly a new project let me call it as my site okay so my site is the project name of my okay so my site is my project name so I am using Java I'm using maven Oracle 19 and let me just go ahead and create my project on this window okay so here I hope you got some idea about what is happening over here okay so now we have created our project and build is also successful created our Java file main file is also here okay so now if you go ahead and create a multimodule what is what is the meaning of multimodel yeah it it's it is nothing but a module you are creating modules of of your project inside your big project all right so uh I will give you an example uh so look at here our main parent tag is my site and under which we are creating uh now I will show you the three three new categories for three new models to be precise for our my site parental so we'll use YouTube for the utilities classes and we use a core here our our logic will be there and I will use a UI module I can create where all the UI part of my project will be there okay so you see uh this hierarchy right one parent tag is there under which three modules are being created and each module will have their own Java classes or Java files uh to which they are implementing right so let me go ahead and create all these modules fine to create a module inside a maven project in IntelliJ IDEA you just come here and click on your my site project name whatever you are given click right click new and you can see module is there click on module and name your model okay so our first module name is okay my YouTube Let me call it as my YouTube okay uh Java will be there Maven will be there and uh this time you can see one Intel idea is asking for the parent tag if you click over over it you can see two uh the options are there one is none that means this is a there is no parent tag for this module this is a alone Standalone model and forever now I am using I want this module to come under the my site project okay so to do this I will select the parent as my site and I will go ahead and create my module okay so here you can see as soon as I create my util pack module you can see my util folder is there created and and inside which it has its own pom.xml file and one Palm dot XML file which is our main projects form dot XML file that is my sites form productsable file if you if I open this form.xml file which is a parent tag you can see here also uh one module tag is being created and under which uh they have created my util module tag which is which states that hey this is the parent tag for these many modules okay so this my site is my parent tag for my util XML file we can see one parent tag is getting created over here and it it states that hey this is my YouTube model module's parent is my site okay so the artifact ID is there group AD is there and version is there okay so this is how we differentiate between uh who is parent and who is child a child in the sense with who is module which comes under the that parent okay so this is for the parent and this is for the child or to be precise it's for the model OKAY modules form.xml file and it is parents mock pump.xml file okay so the first I have created uh then I have to create a core again the same uh pattern you will follow you will go ahead and create the module and this time I will write my core okay and everything will be same my side will be like this and you can see uh sorry for the typo or it should be my my yeah I hope you understand where you just go ahead and again you write my slash UI I guess UI that you are trying to create yeah UI so my UI create it okay so now you can see this is our main main and this is uh YouTube UI core all these pack modules are being created okay so let me just clear it out so that you guys can understand uh clearly okay so what I will do is I will show how you can use the classes of one model inside the another module okay so till now we have created the model and now we will see how to manage those models and how to use the different classes of different models inside the different models okay so let me just go ahead and create one packaging structure over here inside YouTube so to create a just right click on it click on new and very small package just come here my util SRC main Java okay so this you can right click on this and you can create package okay so all dot pack example Dot utilities I will name this package as utilities and inside this package I'll create one Java class and name it as my utils okay so you can see a utility inside my utility module I have created one package name as utilities and inside that package I have created one class my utils okay so just to understand the basic uh stuck how workflow how this works I will create one method over here okay so so this method will be public static it should not return anything so the return type should be avoid public static wider and the method name should be a print name and it will accept one string string as the parameter from the user string name okay and after that HD string and after inside this it will just simply prints the name of the user by grating them hello there and just append the name that we are getting from the user okay hello there and we'll just write welcome just to great message for the user so this is the this method we will do okay so we have created uh one package inside which we have created one class and this class implements these methods which is print name which is taking one string and just printing that string by the some other words okay and now if I go now I have one this method to be used inside my core module okay so how can I do that I I just go inside my core model I will go inside my source I will go inside my main Java and I will come over here and now if if you see here also I have this main class so first of all to use this class which is written inside the util module I have to add the dependency of my util model inside my core model okay so how to add the dependencies I hope you know we have discussed in our previous module previous uh lectures also so to declare the dependency inside the MU mu core model we will go inside the pump file of the MU core and we'll introduce one tag name and dependencies as the parent tag and inside which we have dependency tag and will artifact ID as mu core not mu code you will add the my util .com.example and okay fine so we have added the dependencies of the util module inside the MU codes form.xml file so after creating this dependency you just come over here inside the main file of this mu core and if you come over here and we just write that class name what is the class name I if I can recall my utils my utils DOT okay first you have to import that package okay so the to import import what what is the package name I forgot just come over here product dot example dot utilities okay wait let me check the okay so we don't need to import I guess that is not required over here so we have done we have implemented this method over here and you are trying to access that method inside the another model which is a mu core core module which is over here and to access it uh we just need to we just need to again reload all the maven by this okay so if I go inside my Maven Maven code not automatic code Maven life cycle and we'll say okay and this okay so here you can see uh since we have added the dependencies of mu util model inside the MU core module we have to load we have to load Maven changes okay so if you click over here load the maven changes it will it will get all those update parts that we have done it will create a maven will load all this stuff and after that you can just come over here and rights out and just to create the utilities my utils my YouTube's Dot print name now you can see we are getting that print name and here here it is asking to give the name as a parameter so we'll pass uh what is so we can we can addicts Alex we can pass okay and now I really don't think this is needed Okay so why am I getting air over here cannot result okay okay so since the return type is white so we don't need to write inside this we just need to call that method because the print Line Print statement is in still inside that method so that's why we don't need to write again Swiss out okay and import integration is also importing that model inside of this and now if I go ahead and click on run it should print hello world first and then this method call will be executed where here you can see Hello World and after that hello there Alex welcome okay so hello world is getting printed from here here itself if we if you don't get confused I will just comment it out uh now you can see only uh hello there Alex welcome should we get printed over here yeah it is it is printing so here you can see we are creating multiple modules uh so we'll given I will give you one scenario okay so this is a this is a web application that you are trying to build and there are multiple models inside this okay so so all the utility classes are there inside with this module all the UI related stuff you keep inside this UI module and are the core or the logic part where you are trying to implement in your website is comes over here okay so all you can create them separate modules and to use to have the accessibility inside models to modules if one module is trying to use the utilities of another module so here we have seen we have created one package and inside which we have created one class and these class method we are trying to access inside the MU code that that too we have also can do just we need to add the dependencies for that uh module inside the Target Model in which we are trying to access that uh utilities okay as you can see we have added the dependencies so this is how uh we can manage and create the multimodule projects inside Maven so till now we have covered in our previous video we have covered about uh how we can create and manage a multimodal projects uh and we have also seen one example by creating one project of with Maven and we have created util core and UI all these modules and we have seen how one model's uh functionality or the classes so we can use in inside the another model that part we have covered inside uh in our previous video I hope you I hope you watch that video if you don't please go and watch that video and then come come again in this video and watch this okay so for this video we will be uh starting uh to create a web application with Maven so till now we have covered how to create a simple Maven project whether it is multimodule or not single model okay but now we have going to create a web Maven project with a web application okay so we are creating a web application okay so let's go and in our IDE so this is the first screen that you will see uh I will just go ahead and click on the new project so you to do that but now you can see uh once you are opening for the first time you can click on the new project uh you see uh various uh generators over here like Maven javafx kotlin compose Android you just click on the mavina arch type and just name your project so I'm gonna name it name my project as my first web app okay so you can name anything to your project uh that's not any problem if you want to create git repository you just click checkbox this I don't want to go inside get GitHub part okay so for that I will not check that checkbox and if you want to create a new reposit a new folder you want to create for this project then you can go ahead uh let me just create one more new folder so that you can manage this project because we require this project for your next upcoming videos also I am going to create one new folder in my desktop name as my first web app okay so this is my folder name I'm creating okay and inside which I am going to create my project okay uh jdks you select whatever jdk you have in your PC uh if you don't have go ahead and download the jdk and or else you if you have just you can add add your jdk also and a catalog Let It Be internal don't choose default or Maven Central and now it most important part is Arch type you have to select the arch type right so you just go get into this drop down list and select the maven archetype web app because we are trying to create a web app right web application so for that we have we will be creating an uh type of web app and after that version Let It Be One no more uh Edition we have to do additional properties not required okay just go ahead and create the project okay before for let the intelligent idea sync the project and download the required files and generate the project okay so it is generating the project once you see the success message of build success in your console your project is successfully created right now uh you do one thing now you have created this web application right so I will tell you the structure of this web application okay so now for the first time you see in our previous video for the multimodule the structure uh is not looking like this there are different structure defined for each type of arch type that you have selected okay so we have selected web app type of web app so for the web app this structure is followed okay so you have Source folder main folder under which resources and web app folder is there and under web folder web IMF and under web INF index.jsp and web web.xml folder is there and inside web.xml uh it is an XML file and the display name display name tag is there and answered with Arch type created web application so it is defining or it is telling that we have used Arc Type of web application and and inside our index.jsp we have HTML tag a body tag and inside body tag hello world and you can modify this hello world uh with whatever you want you you can go ahead and write your name as hello world welcome to programming okay so uh here's the thing that you can edit it is a it is HTML you can add more tags like H1 tag is also there in HTML I hope you remember and okay so H1 tag and we'll write uh your name whatever you want to write over here you can write and you can modify this index.jsp file and this index for JSP file will get executed once we deploy this web app on any server uh we will be deploying this and we will be creating the war file also for this project in our upcoming videos for this video uh I hope you understand how we can create a web application in Maven okay and so let me just quickly go inside my Bomb Dot XML file and I will tell you what are the what are the difference between this this and our normal Maven project okay so you can see when I create the this project using the archetype as web app this dependency is automatically inserted by the IntelliJ IDEA okay or to be more precise it's by Maven okay so Maven has addressed dependency to the J unit automatically when we create but when we create the normal Maven project there is no dependency tag over there you have to go and use the dependencies that you are required this is the one difference between that and one more difference packaging type is also added as War we'll discuss what is War uh packaging type in upcoming videos okay and version uh other thing is pretty much simple and okay so let's go and go inside our Maven Tab and inside of this and life cycle we will try to create the package of this okay so uh double click on the package yeah now most of you will get this error okay cannot access default fields of properties okay so most of you might get this error how to rectify this error I will tell you that first of all let me go and open my when previous project where the code to rectify this error is there okay so I'm going to inside my desktop uh I will go desktop demo web application demo web app let me go and click OK I will open this in a new window this is a demo web application that I have created previously so you go here and plugin management okay so this this type of cannot access the default fields of properties is a error come because we have not added the plugins inside our build and that plugins we have to add over here and if you add this plugin manual then go ahead and again click on package by this time it will run smoothly and you can see build success our build is got created and Target folder is also got created and this war file is also created by Banning our package command Okay so so that's it for this video I hope you got the idea how we can create a web application using Maven uh okay and in our upcoming video we will be deploying this web app in an Apache Tomcat server and we'll see how we can deploy it and how to manage that application web application on the Apache Tomcat server we'll see that one as well uh so in our previous video we have talked about how we can create a web application using Maven and we have created one web application now in this video uh what we what we are going to do is we are trying we will be going to integrate the Apache Tomcat with IntelliJ IDEA and using that Apache Tomcat server we will be deploying our web application on Apache Tomcat all right so we are going to deploy our this project that we have created in in our previous video uh to the Apache Tomcat alright so for that uh first I am going to just clean this previous build so that there are no errors will be produced we can go from the beginning so that you guys can understand more clearly all right uh uh all right so let's go ahead and first we need to integrate Apache Tomcat with the IntelliJ IDEA for that you need to download Apache Tomcat in your PC first okay so go ahead and inside your blogger and write search for Apache Tomcat and here you can see download tab is there you just click on it click on this download and after you have uh comment come inside this binary distribution under code you can click on the any one of this file I just prefer if you have 64bit Windows just click on this ZIP file and it will download it it just 24 12 Mb file it will get downloaded depending upon your download speed and once it get downloaded uh just open that okay once it got downloaded uh you just go ahead and once it got downloaded you just go inside your downloads and double click on this and inside this you can see one folder is there one folder is there Apache Tomcat 9.0.72 oh and inside which all the files regarding the Apache Tom cadas are there you just uh come here and copy this click on copy and go where go the for go add folder where all your programs all your code all your softwares you store okay I I personally prefer Instagram program files I go here and as as you can see I have pasted that folder over here itself you just come here inside your program files and Ctrl V to paste your that Apache don't get file over here okay as you can see I have pasted over here and after doing that okay now you go inside your IDE and click on this uh settings button and after that click on plugins after clicking on plugin uh go to the marketplace where all the plugins are available and you just write smart Tomcat okay and you see when this one plugin double click on it and click on install you I have already installed if for the first time you see your install button you just click on install yeah within seconds it will go it will get installed and after click uh getting installed you click on apply and click on OK and that's it you have installed the plugin okay so the next step next step is come here and you just click here and edit the configuration clicking on the edit configuration you just come a new window will be appeared over here and plus I on this plug plus icon click and after that you can see now smart Tomcat uh button is there you can just click on it okay and after clicking on the smart Tomcat button okay and now for the first time you don't see anything over here right see tab is empty if you can follow follow along with me you can see this tab is empty so just click on configure and after clicking on the configure click on this plus plus icon and now you go inside the folder where you have stored the Apache Tomcat uh for my case I have stored inside in program files Apache tomcat and this is please select the root folder don't select this folder select the root folder under which all the bin config libraries logs stem files 10 folders are there all right select this click on OK click on OK and after creating that uh this will get created automatically uh location will be fetched version will be fetched and name name is also get getting created Okay click on apply click on OK I already have configured one so I will delete this one and after creating this click on OK so now you can see this name will be get created and the rest of the thing IntelliJ IDEA will do for you you don't need to worry about that and click on apply and click on OK okay so now you can see one unnamed uh Apache Tomcat configuration is here okay and now this configuration will come over here and if you follow along this uh now you go inside your Maven and double click on your package okay uh so wait uh I forgot to tell you one thing just click on clean first you need to compile uh double click on compile okay uh after you see build success now you click on the package okay so after clicking on package you see build success okay now we are good to go and if you just click here run button by selecting the Tomcat server that we have just created and now you can see one URL will be given to you you just go ahead and copy that URL if you don't want to copy just click or click on the right click on it and open it will give you the list of the browsers that are available inside your PC uh okay so in my case I will just copy and I will go inside my web browser and I will go here and I will just paste this okay so after pasting that uh when the website get loaded you can see Hello World welcome to programming and your name is getting printed why so because we have created a we have modified our index.jsp uh okay so you can see your name is there hello world hello world programming is there if you if you modify this now instead of saying hello welcome to programming if you want to say only Hello World just go ahead and delete that and uh click on this button run a name and stop and rerun it will stop that server and again rerun that server and after you can you can see uh now we just close this and refresh it now you can see this this uh welcome programming got deleted uh this is how you modify your website and deploy your website on uh Apache Tomcat server using the IntelliJ IDEA in which comes we have used one plugin known as smart Tomcat so I hope you got the idea how we can create a web app with Maven and how we can deploy our website on Apache Tomcat using one in IntelliJ plugin name as smart so now in this video we will see uh some hot questions or frequently Asked question in the maven interview questions if you are applying for any job uh which job requires a maven as a job requirement so so the interview in interview you can ex expect these kind of questions been asked okay so we'll answer each question one by one and try to solve then as well okay so let's go and take our first question first question is what is Maven okay so Maven is a project management tool it is based on com which is Project object model uh we have also covered uh separate videos on form if you haven't checked that go ahead and check where we have discussed all the prior details regarding the pump file wire pump file is important in Maven okay so the next question is what aspects are managed by parent Maven sorry okay so the aspect data management is builds documentation reporting scms release and distribution these are the various aspects which are managed by Maven okay so what are the advantages of using Maven why we use mavin okay so the very first Advantage is no need to add Char file in each project it creates the right direct directory structure and it builds and deploys the project and it also manages manages our dependencies and plugins so seamlessly that we need that we need not need to worry about our dependencies as well okay so that is one of the advantages of Maven as well okay so the water of the command to check the maven version okay so the command is NV n space minus version or else you can also type mvn let me write it out m v n minus V or or you can write mvn space minus version any one of this can you can write any one of these you have to find the maven version you are currently using okay so next question is what does the build tool do okay so it generates the source code if the auto generated code is used okay and it generates the documentation from source code okay and another user its compiles our source code also which is written in a Java okay so the package is compiled code into jar or zip file this is one of the uh uses of the build tool and it also installs the packaged code in the local repository server repository or the central repository okay so now next question is what is the difference between and and Maven so and is a toolbox whereas the maven is a framework right and it is and and is mainly a build tool and Maven is mainly a project management tool and and there is no life cycle and in Maven we have life cycle and we have also seen or what are the different phases of the life cycle also and and doesn't have formal conventions and Maven has a convention to place source code and compiled code Etc uh and this procedural and Maven is declarative why declarative because we declare our dependencies in the form.xml file right and and if and scripts are not reusable whereas the maven plugins are reusable we can use my own plugins as and when required okay so defa seventh question is Define Arc Type okay so what is Arc Type in Maven oh it is a in Maven that type it is a maven plugin which is designed for creation of the project structure so as we have seen in a previous video when we are trying to create the web application we have selected the arch type as web app so it is nothing but the structure that is predefined by the maven so if you start if you want to create a web application you just go ahead and select the arctab as web application there are many more archipers are there you can select according to your requirement okay so the next question is what is the purpose of mvn clean command Okay so the command it so the ambient link command removes the target directory before starting of a build process okay so imagine one scenario if you have created if you are build one project the target project will get created and next time you do some modification and your try again trying to create that build so in order to delete the previous Target folder command so that the previous build Target folder will get removed from the directory and after that you can again build the project and again the target project Target folder will be get created okay so next is uh what are the build phases in Maven okay so what are the different build phases here so first is validate compile test package integration test verify install and then deploy each one of these build phases are covered in depth in now in our previous previous video of this tutorial series you can go ahead and watch that videos as well and next one is what is a repository in maven okay so what is a repository in Mary this is our last question okay so the repository is a directory or a place where all the jars and form.xml files are stored okay so the mainly the repositories are of three three times we have seen on a seen our in our videos as well one is local repository one is Central repository and one is uh remote repositories okay so these are the type three types of repositories are there in mavina okay so these are the hot or uh frequently asked questions in the maven interviews okay so if you are preparing for the marriage interviews you go ahead and uh check these videos uh check this our Maven tutorial series and learn the maven thank you foreign