hey guys welcome back to programming knowledge in this video we'll be looking more about the escape sequences which we had talked about in the previous video and we'll be learning how to perform inputted c+ this so before getting started today important let's talk more about the escape sequences so the escape sequences which I talked about in the previous video are slash a slash B now slash T and then slash slash n right there are actually many other escape sequences also you do have a slash b but all these things we won't be using much slash miss for a vertical dad we won't lose that much but you can always go up into the internet and then hope for the issue of escape sequences there so what do we need escape sequences for is it just to perform these actions or do they have other purpose also so let us say I wanted to print something like this so let us say I wanted to print escape sequences let me just put it without a brief so that this this is what this is the exact sentence I will be needing on the screen right so just try to print this escape sequences start with a slash and happy character and have a let's say single code single or have a single is them something at this wanted to print this particular statements as it is or to the console you might think it's very easy right just cut it I'm just going to cut it and then put it in feed of W codes and then paste it over there and then let's just run it it says it's an error why it is expecting a semicolon before single well Peter I will see me call it what's the problem with this where the problem is when you are putting it back slash and the in a string it is going to consider a backslash and the subsequent character as I skip sequence itself and here once you put in W code over here it it means that this is a separate string and then this is a separate string and this is actually something in between right so it doesn't have any meaning in at all so what we actually wanted was didn't even wanted this w could appear on to the screen right but we cannot do that you will have a yes we do that is by using escape sequences so yeah I am one third and backslash to appear right so how do you make a backslash up a backslash itself is a escape character when the way of marker and s input another backslash so this what it means is it means that this is escape sequence and it means this particular escape sequence just means that you need to put a backslash onscreen so that that is why you're you you are getting an error back then and now you will be getting a backslash perfectly as you wanted it and here instead of these codes you actually put a backslash before the code right so what this is if you put an escape port over here if you put n code as a skip sequence it means then this quote is not a part of this quote which is actually indicating the start or end of a string but it says skip character itself and it needs to be printed onto the screen that is one means if we use a code with it escape sequence so the same thing goes over here also if I just put a backslash it is going to go of it this is now entirely highlighted in blue that just means that this end this entire thing is now a string and now if I execute it I will be getting down so here you can see escape sequence will start with a backslash and have a single character in them and single is enclose within double quotes now exactly what we wanted so that is the importance of escape sequences so there are many other so there many places where you would be needing them so something like you want it to enclose something using double hoods or in water to put a backslash over some someplace or suppose you wanted backslash tend to appear but you can't directly print like this right you know what this is backslash is actually a new line so if you put something like this and if you try to execute it you will be getting something like this sequence of start we take and then a new length and then a space and then have every single character in them so that becomes a problem how do we do that same thing you just put double backslashes and then so now this actually this backslash and this backslash n are now different this bachelors only corresponds to this backslash and then this n is noise theta is a separate character so now if you run this you will be getting your output escape sequence back to the backslash n you get got what you want and how a single character in them so this is how you use escape sequences in your strengths now let us talk of add input before not talking about input let us talk about something called theta types phonetics down here data types why do we need to know about this when you can't just take input like you need to store the input at some place so that you can use it at a later stage so where we store the data is actually defined well a memory location and how will allocate memory that depends on the type of data they're pointed so we need to know what kind of data we need to we are going to get it as an input so that we can store that so what kind of data can we get we can either get numbers oh right you can't get anything else well we do have other types of data also something like you have graphs or you have images videos but all that are ultimately broken down into it into numbers only that's a different story we are not going to talk about that but for now we can say that data is fundamentally consists of only numbers and characters we can't get anything else other than that so the way we have data types are broken dollars to satisfy either numbers or characters so numbers what do we have we have integers or we do have real numbers so real numbers are nothing but decimals fracture how these things so the way we take integers is by eight so this data type which is for impedance so this is the data type and this is what it means so integers it's going to take so anything any integer is going to say minus twelve or twenty or twenty thousand all these are integers only so can I take anything can you take given infinity well no integer do have a range value and that ranges so let me write it separately it ranges from 2 power 31 to 2 power 31 minus 1 but it's not going to 31 it's 2 power 31 minus 1 so this is the range of the integers it is going to take up to this big numbers so you have something called short and unsigned sign there's all these things we'll be talking about that at a later stage but now this is the range of integers you you can store as small as 2 power 31 and I ask because people that you do / 31 is nothing but it's a long fourth billion so that is a number you can store in you know what if we need a bigger number than 4 billion let's say 6 billion or 8 billion for that we do actually we are going to use long longest another data type so long is actually a type modifier it is not the data type long you can use it with it so this makes it this actually makes it pretty readable so it is nothing but a big integer so what it does is it's going to store bigger number stand int so this will take about 8 but this this is going to take only 4 but it says hold bytes of memory we'll be looking at how this 4 bytes right now they such a way to check how much memory districts so this is going to take 8 bytes of memory and it's range is approximately up to 64 to positive 4 proximately goes up with this so this is a huge number right it only need much bigger than this to positive forest very big you got that t2 itself is big right 2 power 31 2 / 32 they are almost walk the fourth period so you don't need bigger numbers than that but in case you need you have a llama teachers same goes with the real numbers also if you are working with smaller decimals or realtime decimals which are not so big you have float which is for decimal numbers so you got or sorry point toward you got something like 0.0003 or all these things so 12.0 also if you just put a point zero it becomes it float and these are all floats and then if you want bigger floats you do have double double s for bigger float bigger floats this again is for 8 bytes and this is the range of double now in C++ if you did not specify the datatype if it is just a number if it just an integer it is always going to default to integer only and if it is a decimal number it is always going to default to double so what I did here is just I didn't comment so comments on those statements are not executed I'll be showing a demo shortly so for even greater that these are related types for storing numbers and so characters you don't need much you have only two types of character inputs that is you get only one character or you get a collection of characters so for one character you have care for one character and for multiple access you have strings so strings is actually more than just collection of characters there this much more talk about strings will be doing that at a later video so now for characters the way we defined characters is by using single quotes so you have if you put anything inside a single quote something like a or if you put B over here or exclamation mark anything inside a single good but only one character strictly only one character you cannot put multiple characters inside a single code that will cause an error and the fun fastpaced if you put something like this this will also become even though one is integer if you put it inside a single code it becomes a character the same goes with decimals also you can put decimals inside single quotes because it contains more than one character so even if you put one point zero something like that one is a character this period is a character and then zero is also you cannot put more than one character inside strings so that will come under string so strings how do we define like we did here so using double quotes fingers is a collection of characters collection collection of characters that's it and it is going to be an plus within double quotes so anything you put me inside of the human if you put you mean if we don't put anything inside double quotes this is also a string this is called in knowledge string we will talk about null and all these things at a later stage but for now just for your information purpose I am just telling about the null string and you do even if you put something exists this going to be string it is a space and even one one character also it is going to be considered as system this is for say string and now you can put something like one point zero all these are not considered are strings the Bayeux represent data is very very important you just take numbers if we just put one it is going to be end if you put 1 1 0 it is going to big double remember that here you if if you put if you do not specify the data type it is going to be defaulted to double only C++ and if you want to slow if you want the data type to be float you can just add it F over there so if we just put F over here it is going to be flow the same goes here also if you want this one to be considered as long you just put in hell over there so this is considered as and how do you define character put like this this is going to be a cache and if you put it like this this is going to be string see how differently it is interpreted if we type the data in a different way so this is the importance of data you are anything we get from the character inside categorized only the D stated types so we want to worry about any other whatever we type is just going to be a subset of all all of these things now let us work on some real input yeah forward to mention about the comments so let us know well we can actually show the comment over here only so suppose I want just data but this is something for you to understand right so these are not part of C++ comments these are something I typed right so these don't make any sense in C++ but I don't want it delete it because I'll be using it to explain to you guys so how can I do that without and also run this program without actually going into an error I cannot write another another program I don't want but I don't want to do that then for that we have something called comments I need this data but you don't want to compute it executed so what I do is I am going to hide this data from the compiler so the way we do that is by using these splines as comments so comments are actually used to explain some lines of code and also they are generally used to actually debug the program so if you are developing a big program and you don't want some of the lines execute and you directly want to see what is the result of two or three lines you can actually comment out the other lines and you can see the result that is going to be very useful when you're testing for that comments out there so there are two types of comments unless the single line comment which I did over here so this is the point the comment on this entire line so whatever I will right after this pair of forward slashes is considered a comment commit so all these are committed and I need to commit at multiple lines the way to do that is by putting a forward slash and put a star order so you can see all these our credo and the thing is it is completely green got my program so even this thing is greater and now if I try to execute I will be getting an error it says that this unterminated comment is there that is this one this one has been sucky but it is not terminated at any point so I want to terminate my comment over restraint because these are these are the lines I don't want to compile it so definitely I am just going to do the reverse of it I am going to put a stop and then a slash so this is actually going to comment out all these LEDs these lands in my program code these are not going to be executed by the compiler so now I can run my program without any issues and I'm going to get output so that is the importance of comments will be commenting out many things at a later stage when we were working with bigger programs comments are very important so now let us write some news feed code let us now write a program to add two numbers so it is always wise to actually put a comment on what you are doing and also put some authorization so you can put something like or something you can do all those things but for not just going to write the name of the program what I'm going to do is I am going to write a program for add two numbers it is always advise to put comments before your program good you don't have to put it over there only I am just putting it there you can put it anywhere you like I even you I can put it on inside here also I can put comments anywhere it like now let us try to program to add two numbers so first thing us I need to ask the user to enter because obviously we need to ask the user something they know he is going to do water program so let us say enter the first number simple enter the first number and now how do we now we need to create a memory location I do you right we need to create a relocation to actually tour our input you may we do that is we need to first specify what kind of data we're going to get what we can because it's a number it is actually going to be floats or doubles right we can we can add any number but for simplicity purpose and just going to go with it you can actually go to foods or doubles also it is completely up to you I am just going to go with indoor in this so I'm just going to type int and then I need to name the location we need to do some meaningful name so this is also known as a variable declaration we are just creating a variable to store something function right so we are just going to put X equal to 5 just means the variable access storing the value 5 but in computer this is what is happening you if you are declaring a variable it is it means that you are actually creating a memory block and then assigning your name do that so it's just like an alias for the memory block so here I am just going to name it number just to keep it simple and here you can either you can do two things you can either specify the value which is going to go inside the memory location or else you can even now keep that so here since I don't know what is going to go inside this location I am just going to skip it an entire semicolon this means that this command is terminated selecting this comment and now how do you get the input it is just the reverse of it you get it right if it is C or it is going to be C in and then if it is this side this is going to be on the opposite side well this is how we take input and then in we do it need to store the input we need to store it in this location so just right number one and then put a semicolon so we got our input inside number location same thing we need to do for the next number also so I'm just going to copy paste that and here instead of first number and the second number and then sort of nonporous points to us or ensure of number I'm going to store it and num2 location now and I need the sum of these two numbers right so remember that I think that he put number so you can directly show the sum like this so you can write the sum is and this one and this what was that number one plus num2 you can't actually put like this but this actually makes it little bit confusing and it is all this advice to keep your code very very understandable so if somebody is reading your code they should understand what is going on so this is not always a best practice unless you're in copy to company to programming you need to consider all memory and all those things but we are now learning so it is always at best to use as many variables we want so for storing the sum I am just going to go with an integer so because if we add two integers only going to get an integer wait well I'm not talking about the border cases where you go with very big numbers like 2 4 32 plus 2 power 32 that is obviously going to go off the range of integers but I'm just talking about normal cases I'm just going to store it inside this location Sun and what it is going to store it is going to store the value of num1 plus num2 and i am going to invoke the sum over here so remember in the previous video I told that memory locations and numbers can be accessed without double quotes that is why I put some and now if I execute it here we have our first program of addition this is our first useful program it is not just printing something on the disparate it is actually doing something for us so here I am going to enter the first number it is well second number let's say something like 24 and then if I enter it the sum is 36 perfect 12 plus 24 is 36 we got our answer yeah I forgot to mention the way we check size of the data type is by the operator called size of so how we do that we just put size and then put an off and inside the brackets you are going to name your data type user either put the data type or you can put the data itself if I just put one over here and let me put an end also that compile your statements so here you are going to get for why because one is an integer as I told you it is going to be treated as an integer only and if I just put one point zero as I told you it is going to be defaulted to double that is why the size is eight and now if I put one point zero f it is going to be Tressa float and you will be getting only four bytes so that is how size of works and now if I just put a character it is going to take only one byte so if I just put like this you have don't want to save one over here and then you even find nine character that is I'm not putting any character these are just two cords side by side even if I run this I will be that I will be getting an error it says empty character constant that cannot be done another thing is if we just put one character in inside double quotes let's see what happens in single quote this written one right so what will happen in the double quote well I she told listing is nothing but a collection of character so maybe it will be the count of the characters right so something like oh hello we just put hello then this is actually five characters right hele loop makes finiteness of the sides would be five right but you'll be surprised to the size will be six so that is why I told you strings are something more than just collection of characters there is something called a concept of eliminating character or a null character we'll be talking about that in the been discussing strings that's all for this video in the next video we'll be talking about strings and how to use them in our program till then I would like you to actually metal around with the code I would like you to do as many errors as possible and try to read these errors errors are very very important to you just try to you know that this is going to result in an error but what is important to us this message because every time it is not going to give you a perfect message something if I have something like this I just forgot a semicolon over here put something like let's say hi over here and put a semicolon and if I try to compile it it is going to show an error in this land it says in line number eight it is expected it expected a semicolon before see out statement but there is a semicolon statement where is the error it is actually in the previous line I forgot to put the semicolon in this line so that is where you make as many errors as possible and try to understand these line these are very very important it is going to help you to write better code you you won't find yourself trying to figure out where it happened since I am writing this real time I did not practice anything out of it so many times I will also be making mistakes and I will be telling you what mistakes I made by reading this error so till then happy