hey guys welcome to the next video on open CV tutorial for beginners using Python in the last video we have learned how to use mean shift algorithm to find and track objects in the video in this video we are going to learn cam shift algorithm to track the object in the video so if you have seen the last video we have written this code so we are going to use all this code which we have written in the mean shift video tutorial and first of all let me just run this mean shift code which we have written in the last video and we have Li discussed about this problem of this rectangle which always remains the same even if the object is coming closer to the camera so we need to adopt the window size with the size and rotation of the target so once again the solution came from OpenCV labs and this time they introduced an algorithm which is called cam shift which stands for continuously adoptive mean shift so this cam shift algorithm applies mean shift per first and then once the me shift converges it updates the size of the window in addition it also calculates the orientation of the bestfitting Eclipse to it now let's talk about the implementation part of the camp shift so as I said all the code which we have written in the last video will remain the same except one thing which is we have used this main shift algorithm in the last video and in this video we are going to use the cam shift so just write CV dot cam shift and all the parameters also will remain the same which is destination track window and the termination criteria so let's run this code once again and let's see what result came out of this algorithm so you can see this rectangle is changing its size according to the target now this result which we have seen can be better because the cam shift function returns rotated rectangle that is our result and also the box parameters which are used to be passed as the search window in the next iteration so here when we see the result inside the ret variable so let's print the result inside the ret variable I'm going to just print it using the print function now let's run this code and let's see what this ret variable prints on the terminal so let me just press escape so what is this result so here you will see the value of x and Y and also you will see these three values which are your width height and the value of rotation so in camp shift you can also rotate your rectangle according to your object size so now we are going to use all these parameters which are there inside this ret variable and we are going to try to draw the rectangle which might be rotating so there will be a different approach other than this rectangle we are going to use that approach to print those points which we got using the ret variable so let's draw that rectangle so here we are going to define a variable called pts and there is a function called CV dot box points so we are going to use that function here which is box points and it takes a few arguments we just need to pass our ret variable here so we are going to just pass our each ret so let's say what values this is going to give us so I'm going to just print this pts value so I'm going to just print the value of pts now let's run this code once again you won't see anything and you will see these values right so it's going to if these floatingpoint values which we need to convert it into the integers and the error was due to this because this is no longer defined right so for that we are going to just convert these points ets into the integer value so I'm going to override this variable pts and then there is a function in numpy which is called int 0 and here when you pass this pts variable it's going to convert those point into the integers and now we can just draw our rectangle but remember this is a rotating rectangle so we cannot use this normal rectangle function so we need to use the other function for drawing those points so I'm going to define this final image variable once again and then I'm going to use C V dot polylines so there is this function called polylines which can you can use to draw those lines which you get using this points variable so we are going to just pass the frame first of all so we need to pass the frame as a first parameter the second parameter will be our pts value and then the third parameter will be the closed or not closed so when we pass true here then this rectangle will be closed right then we need to pass the color so you can pass any color here let's say 0 comma 255 comma 0 and then you can also pass the thickness so let's say we just need to give the thickness of 2 here okay so this is our final image and now we are going to run this example once again and let's see what happens so you can see this rectangle is drawn and it can rotate also with the object so this is how cam shift algorithm works with OpenCV I hope you've enjoyed this video and I will see you in the next video