and in this video we are going to learn about the break expression in cotton okay so suppose you are working with loops and it is sometimes desirable to terminate the loop immediately without checking the test expression okay so i have to terminate the loop at some point so what i can do is in such cases i can use the break statement okay so i'll just go with a random example like i i started a loop and if the something occurs then i have to break the loop okay so then i have to use the break statement for terminating the loop without checking the test expression okay so the break statement terminates the nearest and closing loop when encountered without checking the test expression okay so how break works it it is almost always used with if else statement okay so i'll just introduce you with the syntax of this break so what what what i will do is uh in the for there is a for loop okay in which there is a for loop in which if there is some test expression if there is some test expression then i have to break the loop i have to terminate the loop so i'll use the break statement okay and i'll use okay so if test expression is evaluated to true break is executed which terminates the for loop okay so uh now i'll go explain you with an example so i'll create a main function and inside the main function i'll create a for loop which iterates from 1 to 10 okay and in this if i is equals to 5 if i is equals to 5 then i have to terminate the loop okay so i'll use just the break statement here and i'll print ln i just to know that what is happening in the loop so when i go ahead and run this function what i can see is the the what i can see is 1 to 4 is printed so uh when the value of i is equals to 5 okay so we enter in the for loop i is assigned value equals to 1 and then it checks whether the i is 5 or not so i is not 5 then it prints i and then in it increases i equals to 2 and then it again checks that if i is equals to 2 or to five or not so it is not equals to five and then again it prints the value two as soon as the uh i as soon as i becomes five in the for loop uh inside if is evaluated to true and break is executed this terminates the for loop okay so um what is a label so we will move ahead and uh learn about labeled break in kotlin so what we have learned till now is an unlabeled from form of brick which terminates the nearest and closing loop there is another way to a way break can be used to terminate desired loop okay or i can say the to terminate an outer loop so how does a label break works okay so there is a there is a while loop in in a while loop and there is a so there are basically two loops okay so label in kotlin starts with an identifier which is followed by an add the rate okay so here when i okay i can make a code for that syntax okay so i can make test at the red while and there is some test expression and inside this while loop there is some codes and inside this with the codes there is another while loop which contains another test expression and this while loops contains some codes and with this code it contains an if statement and there is a condition condition to break in this if statement and if this condition is true what it does is it it will break and i'll use the m percent sign and then i'll write test okay so now i'll go ahead and close all the parentheses now here is one and here is another okay so now we will understand the syntax so here test at the red is a label marked at the outer while loop okay so this is the outer while loop and test at the rate is a label marked at the outer while loop okay so now by using break with a label test at the rate break at the red test in this case you can break a specific loop so uh as soon as my condition to break is true inside the vial this while in a while it will break the test this outer loop okay so what if i had not used the test test so it will break this while loop okay it wouldn't have break the outer while loop okay so it would be more clear with an example if it is not clear till now i'll use first as an identifier for a for loop which iterates in one two four one two four and inside this for loop there is a another for loop and i'll just i identify whether s e c o nd second and i'll use at the right and there is there will be another for loop and i'll iterate it in one two two okay so inside this second for loop i'll write a print statement just to know that what is the status of the loop so you must remember about the um the string templates okay so i i am going to use everything i have said till now okay so i is equals to i'll use the ampersand sign a dollar sign and use i so this prints the value of i okay and then semicolon uh semicolon j is equals to dollar j okay so the semicolon is going to print and i is equals to the value of i and j is equals to the value of j so i am just going to print the value okay so if the value of i is 2 then i have to break the first loop okay so i will use the break statement and use the add the rate and mention first now if i run this code okay i can see that i is equals to 1 and then j is equals to 1 then isaac for is equals to 1 there is equals to 2 okay so let's just see what is happening right ok so we first enter the for loop the first for loop okay so there i is assigned the value 1 then we enter the second for loop and there j is assigned the value 1 okay then the print statement is executed and inj both with the value 1 is printed and the statement if i is equals to 2 is executed and as i is not equal to 2 it is 1 it is false and then it continues with the second for loop okay for i is equals to 1 this loop is executed two times because j iterates in one to two okay then uh for i is equals to two okay so uh when this xe this is executed two times we reach the end of this loop the first loop and then i is incremented and i is equal equals i becomes 2 now it enters the second for loop and for the i equals to 2 j is assigned the value 1 and then the print statement is executed and value of i is equals to 2 and j is equals to 1 is printed and after that the if statement is executed and when i is equals to 2x expression is evaluated to true break at the rate first is executed which terminates the loop marked with label at the rate first okay or first at the red so it terminates the first loop now what if what if i have to break the loop as soon as i become two and not when after printing j okay so i i have to just remove this statement so i can just uh copy and cut and paste it before the print statement so before the print statement the first loop is going to be terminated and hence the third print statement is not executed so i can just do a little variation in this program okay in the previous program so instead of break at the rate first i'll do break at the rate second now when i run this program okay when i run this program i can see that i is equals to 1 is equal to j is equals to 1 so the whole loop is executed no the whole lip is not executed since break statement is used to terminate the innermost loop of program okay so the second loop of program i have broke so when i i was two when i was 2 j was 1 ok so that was printed i was 2j was 1 and then the condition was evaluated and the second loop was break so it it reached the end it reached to the end okay and at the end of this uh the the the iterator for first loop that is i is executed okay so if i have to um like code for this i need not write first at the right or second at the red because okay because the break statement as it is is for terminating the innermost loop okay so if i had not write at the rate at any point it gives me the same output okay so that was it for this video thank you