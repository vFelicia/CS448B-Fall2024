okay so hello and welcome back to the new video of the maven tutorial Series so for this video we'll be seeing how to create and manage a multimodule projects in Maven right so till now we have covered uh we have seen the maven projects uh that is of only a single one Maven project right uh you just go here you create the maven project uh you modify the palm.xml file you add some dependencies you you know how how to deal with the plugins you know what is a maven life cycle now we we in this video we'll be seeing how seeing how to create a multi module project inside mavic okay so to do that uh let me just first create a new project so that I can explain you clearly a new project let me call it as my site okay so my site is the project name of my okay so my site is my project name so I am using Java I'm using maven Oracle 19 and let me just go ahead and create my project on this window okay so here I hope you got some idea about what is happening over here okay so now we have created our project and build is also successful created our Java file main file is also here okay so now if you go ahead and create a multimodule what is what is the meaning of multimodel yeah it it's it is nothing but a module you are creating modules of of your project inside your big project all right so uh I will give you an example uh so look at here our main parent tag is my site and under which we are creating uh now I will show you uh three three new categories for three new models to be precise for our my site parent tag so we will use util for the utilities classes and we use a core where our our logic will be there and I will use a UI module like and create where all the UI part of my project will be there okay so you see uh this hierarchy right one parent tag is there under which three modules are being created and each module will have their own Java classes or Java files uh to which they are implementing right so let me go ahead and create all these modules fine to create a module inside a maven project in IntelliJ IDEA you just come here and click on your my site project name whatever you have will click right click new and you can see module is there click on module and name your module okay so our first module name is okay my util let me call it as my YouTube okay uh Java will be there Maven will be there and this time you can see one Intel idea is asking for the parent tag if you click over over it you can see two uh the options are there one is none that means this is a there is no parent tag for this module this is a alone Standalone model and for but now I am using I want this module to come under the my site project okay so to do this I will select the parent as my site and I will go ahead and create my module okay so here you can see as soon as I create my util pack module you can see my util folder is there created and and inside which it has its own pom.xml file and one Palm dot XML file which is our main projects from dot XML file that is my sites form.xml file if you if I open this form.xml file which is of my parent tag you can see here also uh one module tag has been created and under which uh they have created my util module tag which is which states that hey this is the parent tag for these many modules okay so this my site is my parent tag for my util XML file we can see one parent tag is getting created over here and it it states that hey this is my util module module's parent is my site okay so the artifact ID is there group AD is there and version is there okay so this is how we differentiate between uh who is parent and who is child child in the sense with who is module which comes under the that parent okay so this is for the parent and this is for the child or to be precise it's for the model OKAY modules form.xml file and it is parents mob pump.xml file okay so the first I have created uh then I have to create a core again the same uh pattern you will follow you will go ahead and create the module and this time I will write my core okay and everything will be same my side will be this and you can see uh sorry for the typo or it should be my my yeah I hope you understand you just go ahead and again you write my slash UI I guess UI that you are trying to create yeah UI so my UI create it okay so now you can see this is our for main main and this is uh util UI core all these pack modules are being created okay so let me just clear it out so that you guys can understand uh clearly okay so what I will do is I will show how you can use the classes of one model inside the another module okay so till now we have created the model and now we will see how to manage those models and how to use the different classes of different models inside the different models okay so let me just go ahead and create one packaging structure over here inside util so to create a just right click on it click on new and very small package just come here my util SRC main Java okay so this you can right click on this and you can create package okay so org dot pack example Dot utilities I will name this package as utilities and inside this package uh I'll create one Java class and name it as my utils okay so you can see a utility inside my utility module I have created one package name as utilities and inside that package I have created one class my utils okay so just to understand the basic uh stuck how workflow how this works I will create one method over here okay so so this method will be public static it should not return anything so the return type should be void public static wider and the method name should be a print name and it will accept one string string as the parameter from the user string name okay and after that HD string and after inside this it will just simply prints the name of the user by grating them hello there and just append the name that we are getting from the user okay hello there and we'll just write welcome just to great message for the user so this is the this method we will do okay so we have created uh one package inside which we have created one class and this class implements these methods which is print name which is uh taking one string and just printing that string by the some other words okay and now if I go now I want this method to be used inside my core module okay so how can I do that I I just go inside my core model I will go inside my source I will go inside my main Java and I will come over here and now if if you see here also I have this main class so first of all to use this class which is written inside the util module I have to add the dependency of my util model inside my core model okay so how to add the dependencies I hope you know we have discussed in our previous module previous uh lectures also so to declare the dependency inside the MU mu core model we will go inside the pump file of the MU core and we will introduce one tag name as dependencies as the parent tag and inside which we have dependency tag and will artifact ID as mu core not mu core we will add the my util .com.example and okay fine so we have added the dependencies of the util module inside the MU codes form.xml file so after creating this dependency you just come over here inside the main file of this mu core and if you come over here and you just write that class name what is the class name I if I can recall my utils my utils DOT okay first we have to import that package okay so the to import import uh what what is the package name I forgot just come over here product dot example dot utilities okay wait let me check the okay so we don't need to import I guess that is not required over here so we have done we have implemented this method over here and we are trying to access that method inside the another model which is Mu core core module which is over here and to access it uh we just need to we just need to again reload all the maven by this okay so if I go inside my Maven mapping code not automatic or Maven life cycle and we'll say okay and this okay so here you can see uh since we have added the dependencies of mu util model inside the MU core module we have to load we have to load Maven changes okay so if you click over here load the maven changes it will it will get all those update parts that we have done it will create a maven will load all this stuff and after that you can just come over here and it's out and just to create the utilities my utils my utils DOT print name and now you can see we are getting that print name and here here it is asking to give the name as a parameter so we'll pass what is so we can we have Alex we can pass okay and now I know we don't think this is needed Okay so I am getting error over here cannot resolve better okay okay so since the return type is white so we don't need to write inside this you just need to call that method because the print Line Print statement is in still inside that method so that's why we don't need to write again this out okay and import intelligent is also importing that module inside of this and now if I go ahead and click on run it should print hello world first and then this method call will be executed where here you can see Hello World and after that hello there Alex welcome okay so hello world is getting printed from here here itself if we if you don't get confused I will just comment it out uh now you can see only uh hello there Alex welcome should we get printed over here yeah it is it is printing so here you can see we are creating multiple modules uh so we'll given I will give you one scenario okay so this is a this is a web application that you are trying to build and there are multiple models inside this okay so so all the utility classes are there inside with this module all the UI related stuff you keep inside this UI module and or the core or the logic part we are you are trying to implement in your website is comes over here okay so all you can create them separate modules and to use to have the accessibility inside models to modules if one module is trying to use the utilities of another module so here we have seen we have created one package and inside which we have created one class and these class method we are trying to access inside the MU code that that too we have also can do just we need to add the dependencies for that uh module inside the Target Model in which we are trying to access that uh utilities okay as you can see we have added the dependencies so this is how we can manage and create the multimodule projects inside Maven I hope you got some idea and thank you for watching this video