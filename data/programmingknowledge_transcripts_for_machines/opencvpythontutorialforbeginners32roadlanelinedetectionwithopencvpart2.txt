hey guys welcome to the next video on open CV tutorials for beginners using Python in the last video we have started our simple project of detecting lane lines on the road using open CV and we came to the point where we were able to define our region of interest and our result was looking like this so let me run this project so we have defined this region of interest and now the only thing which remains here is to detect these Lane lines so we will once again go to the next step and the next step will be to find out the edges and then we are going to apply half line transform to draw the lines so first thing first what I'm going to do is I'm going to just move this region of interest function which we have created in the last video on the top of this script so we can see this other code clearly this code which we have written so we have this region of interest function which we have created then we have just created this region of interest variable and then we just used our region of interest function using this region of interest vertices variable so the next step as I said is to find out the edges and for that we need to first convert our image into our greyscale image so I'm going to just say gray image and then we all know how to find out the gray scale image out of an image so we just need to write CVT color and the source is our cropped image so we are going to past our cropped image and then we are going to just convert it into a grayscale image using C v2 dot color underscore rgb2 gray so let's do this so once we got our grace we can apply Kennish detection on this image so I'm going to just write canny image and then I'm going to just say CB 2 dot canny which is the function which we want to use which takes few parameter first parameter will be our grayscale image the second parameter will be the first threshold and the second threshold so generally we are going to take here 100 as the first threshold and 200 as the second threshold now in the next step we are going to just display this image on our matplotlib window and let's see what happens once we apply this canny edge detection method on the image so now you can see this result which detects all the edges and here you can see the line line edges are detected but there is one more thing here which is the edges of our region of interest are also detected so how to solve this how to remove these edges because these edges doesn't interest us the interesting edges here in this image for us are these edges which are of the lanes road leans right so to solve this problem we can apply this canny edge detection before we find out the region of interest so I'm going to just copy this code and paste it just before we apply this region of interest method which we have created in the last video so now in our Kenny edge detection we will pass the grayscale image but here instead of this cropped image which we were getting in the last step from this variable we directly are going to pass our image which we have read using the I am read method right so let me just remove all these line breaks so you will be able to see the code at once so here you can see I have directly passed now this image variable to the CVT color method so we get the grayscale image of the original image and then we apply the canny edge detection on the original image and then we are applying the region of interest method which we have created in the last video now because we are applying this region of interest method on the grayscale image or the edge detected image therefore we don't need this channel here so we can comment out this code which was kind counting out the number of channels and for the grayscale image and the canny as detected the image we just take this match mask color as 255 because it's only one color right we don't need any color channels here because we are just passing the grayscale image which has only one color so that's why we don't need any channel because there will be only one Channel and that's why I have commented this code and the value of the match mask color will be 255 now once you do that let's try to run this code and let's see what happens once again we need to load the cropped image not the canny image so just replace this variable here in the I am show method and let's run this code once again so you can see now there is some mistake here because we were expecting the edge detected image and we are getting this image so let's see what's the problem is so the problem I see here is because we have applied this region of interest on the original image which we don't want now we want to apply this region of interest on the kenia's detected image so we have to pass as the first variable of the region of interest method this Kenny as detected image not the original image right so once again for you you can see this code region of interest method and all this code at a one glance let's run the code and let's see what happens so now we get the better result so we have these edges which are detected by the canny edge detection for only the lane lines inside our region of interest and now it will be easier to draw the lines on these edges which we have detected so the next step will be to draw the lines on these edges using the half line transform so we have in the previous videos have already seen how to use the half line transform so I'm not going to go into the details so let's just directly jump into using that half line transform so what we are going to do is in the next line after we have got our cropped image we are going to just define a variable called lines and we are going to use this half line transform probabilistic half line transform method so here CB 2 dot huff line transform and this will be this method which takes few argument first argument will be the image so I'm going to pass this cropped image here the second argument here will be the value of Rho so let's provide this raw value variable value which will be 6 in our case then in the next parameter we have to pass the value of theta and theta will be equal to NP dot PI which is the method inside the number library so an NP dot pi divided by 60 so I'm going to pass here divided by 60 then the next parameter here will be the threshold so the threshold value we are going to provide here will be 160 the next parameter here will be lines which is equal to none by default so I'm going to provide this variable lines is equal to and then we are going to pass the empty numpy array so I'm going to just say numpy and P dot array and then we are going to just pass the blank square bracket here the next two parameters will be the min line length so let's provide this min line length and let's say we want 40 as the minimum line length and the max line gap so let's provide that also max line gap and this will be let's say initial value for that will be 25 so now after applying this half line transform you know that it's going to return the line vector of all the lines which are detected inside our image which we have provided as the source here so if you don't know what are these parameters which I'm using here you can see my last videos about probabilistic half line transform and you will be able to know what they actually mean now once we got our line vectors then we can draw the lines easily and for that we are going to define our next function which is to draw the lines so I'm going to just define this function with the name draw the lines for example and it's going to take few parameters so let's pass these parameters first parameter will be the image or the original image the second parameter will be the line vectors which we have found out and that's it so there are these two parameters we are going to pass here now inside this function what we are going to do is we are going to first of all copy our image so I'm going to just say I'm G is equal to NP dot copy and then we are going to just make a copy of the image variable which we are providing and then or you can write here copy image whatever I'm just just reassigning this copy the image to the same variable but you can define a new variable here for the copied image also now in the next line we are going to create a blank image that matches the original image size so the dimension should be equal so for this we can just say line image and then we are going to just say n P dot zeroes inside these parentheses we are going to provide the shape of our image right so you can provide the shape of our image using the image variable so first of all it's going to take the height and then the width and then the number of channels so because we know that this is a colored image which we are working with so we are going to just say I'm G dot shape and we all know that 0th index parameter here will be the height the second parameter I am gee thought shape the value add the first index will be the width and the number of channel for the colored image are always three so we are going to provide the third parameter as three here this is in the form of tuples I'm providing and the next parameter here will be the data type or D type so let's provide that D type is equal to num PI dot u in it okay so you int eight not unint it you ain't it so this will be the second parameter so once we have this image which is exactly same as the size of our original image we are going to loop around these line vectors and then we are going to draw the lines right so let's loop around these line vectors and draw all these lines which were found so for that we are going to use the for loop and then we are going to say line in lines and this lines variable is coming from this lines variable so we are going to use this draw lines function and we are going to pass this line Specter as the second parameter here so this is how this line variable is coming here so now inside this for loop we are going to just define one more for loop because this line is going to give us four parameters which is the coordinates of the first point in the line and the coordinates of the second point in the line so we are going to just once again say for X 1 which is the first coordinate of the first point and the y1 and then similarly X 2 and the Y 2 so this will be the line coordinate in the line which we got from the line vector and then inside this for loop we are going to draw our line and drawing line is really easy by using CV to dot line method which takes a few parameters as you already know the image and then second parameter is the coordinate of the first point which we already have using this iteration which is x1 comma y1 and third parameter here will be the coordinates of the second point x2 comma y2 and then you can provide the color and thickness so let's provide this color so the color here I'm going to take let's say 0 comma 255 comma zero you can take any color here and the thickness so the thickness here I'm going to take is let's provide this parameter thickness is equal to three okay so this is the thickness of the line which we want to draw and here I think this blank image should be given because we want to draw the line on the blank image and then merge it with the original image so here we have to provide this line image or you can say this is the blank image which is more appropriate in this case so we want to draw the line on the blank image which is of the same size of the original image and now once we draw these lines on the blank image we can merge this blank image and the original image which will give us the a line which are drawn on the original image so outside this for loop we are going to merge the image with the lines into the original image so our original image is the image itself so image variable is the original image and then we are going to just say cb2 dot add awaited this function also we have seen in the last videos and this is the function which we use to merge two images with some weights so the first parameter here will be image now the second parameter here will be the value of alpha so which we are going to give here eight this is like a weight to an image which we want to provide and then the third parameter here will be the second image so we want to merge the blank image with the original image the fourth parameter is the value of beta so this value we are going to take as one and the last value will be of gamma so gamma we are going to take as zero point zero here okay so this ad weighted also we have seen in the last video how to use it so I'm not going into the details and at last once we have the lines on the image then we are going to simply return it so let's return this image I am G once we have this function we are going to call this function after applying the Huff line transform method which is the probabilistic hop line transform so here in the next line we are going to just define a variable called image with lines let's say is equal to our method which is draw the lines method the first argument is the original image so we are going to pass the original image the second argument is the line vector which we got from this method right so the original image and the line vector variable which we got here at last we are going to just see what is the result which we got after applying this draw the lines method on the original image so let's run this code and let's see what happens so now you can see let me just maximize it you can see this line is drawn on our image so this is the first line and this is the second line so we got the result which we wanted if you want to change the thickness or the color of this line on the image you can just change it using this draw lines method so this is the line and thickness parameter so for example I want to change this to 255 here some different color and the thickness let's say 4 and I'm going to run this code and now you can see this yellow color here right so you can change the thickness and the color using this method so let's say for now we want the red color so we are going to go with this red color on the Lyons so this is what we wanted to achieve we wanted to draw the lane lines on these lanes and we have achieved this in the next video we are going to see how we can apply the same concept on a live video or on video of this road for example so for example this car is running on the road and we want to continuously draw these lines on the lane lines how we can achieve this using open CV you're going to see in the next video so that's it for this video I will see you in the next video