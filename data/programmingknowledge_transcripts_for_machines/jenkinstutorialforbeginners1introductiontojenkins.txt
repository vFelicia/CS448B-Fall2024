Haggai is valuable discourse on Jenkins to troll for beginners in this first video I'm going to give you a brief introduction about Jenkins so let's get started so first of all what is Jenkins so Jenkins is an open source automation server written in Java one can also say that Jenkins is a CI server where CI stands for continuous integration and what is CI we are going to see in details in the next slide now what Jenkins does so Jenkins is used to detect the changes whatever you commit using your version control systems such as subversion or gate or any other versioning system and it performs some tasks on your code when it detects some changes in your code so what tasks Jenkins can perform repeatedly so Jenkins can perform for example if you have a code it can build your code it can test your code it can even deploy your code and even package or integrate your code whenever it detects some changes in your version control system or in your code now let's talk about some of the history behind the Jenkins so Jenkins is a fork of original Hudson project and it was under development since 2005 now Hudson was the first release by a developer called kohsuke kawaguchi of Sun Microsystems and in 2010 Oracle bought Sun Microsystems due to this some naming dispute occurred and Hudson was renamed to Jenkins now Oracle continued the development of Hudson as a branch of the original and the Jenkins became the folk of Hudson now you can find more about Jenkins on Jenkins CI dot org but nowadays this website is transferred to a website called Jenkins dot IO so if you enter this URL on your browser it will be redirected to Jenkins dot IO now before diving deep into Jenkins we need to understand what is CI or continuous integration so the basic concept of CI is a CI server continuously integrates newly checked in code into a build that we have already discussed so Jenkins detects those changes using the version control system and perform some tasks on them for example building or testing or integration tests or deploying those bills and so on so you can see in the second step of continuous integration I have written it runs unit tests and rejects the bill if they fail so a continuous integration system detects and runs the unit tests and it detects the failure and if a failure occurs during the unit text or integration tests or any kind of test it's going to reject that build and it's going to send the information to the developer or the maintainer of that code now for example your unit tests or whatever tests or you whatever build you are making is successful then a continuous integration system is going to deploy your build to other servers so continuous integration is also referred as build automation so you may ask what does this really mean so at regular interval or regular frequency ideally every commit you do in your version control system your continuous integration system is going to integrate your system that means all changes up until that point are combined into that project it's going to build your code so the code is come piled into executable or a package it's going to test your code so you can automate your test and you can write your test suit which is going to be run by your continuous integration system and if all the previous steps are successful your code will be deployed that means it will be loaded onto a system where the developer can interact with it so now let's talk about some of the benefits or the advantages of a CI system so CI system enables us in immediate but detection so bug will be detected if some test fails or your build fails and then the CA system is going to deploy your code if your test and your build passes so at any given point you have a deployable system now next is you have the record of evaluation of your project so for example how many times your build succeeded or your test succeeded and at what change or at what point your build failed or your unit tests failed it's going to you know get the record of everything so you can see it later and you can just view the quality of your code now the next benefit of a CI system is it's going to detect the system development problem at very early stage so because you can run Jenkins repeatedly for example our developer Jackson his code using gate or subversion or any versioning system it's going to run every job which you have made for example for building your code or your integration test or your unit test or any other test is going to run immediately and if anything fails you can even get the report of that using an email or it will generate some kind of message to your server so everybody will know some error has occurred during the build or the test of your code so everybody will be able to take the action at the earliest as a result you have the reduced risks of cost schedule and budget okay so when you detect the problem earlier obviously you are going to save on cost and your a time and your budget and the last but not the least is the measurable and visible code quality so using a Jenkins or any other CI system you will be able to you know visibly see the code quality of your project now let's see using some picture how does it all happens so you can see here are your developers which are going to develop some code and they are going to commit their code into the code repositories such as mercurial or gate or subversion and this commit of changes of code will be automatically detected by Jenkins so whenever developer commits his code is going to automatically be detected by the Jenkins and what Jenkins will do is going to run some tests whatever test you have created to run on Jenkins for example the unit test or integration test or system test or any other kind of test is going to just run those tests and give you the test results and if the build is successful and tests are successful it's going to just you know transfer your executable file into some artifact repository or it's going to deploy your software onto some other server for examples on some cloud server where you want to use it so here the code is committed and then at our regular interval the Jenkins tests the repository and then it runs the test on those codes using your repository and if everything is successful is going to create the executable and then it will save those executable in your artifact repository or it will deploy your code onto some other server so now let's talk about why Jenkins and not any other CI system there are many other CI system available but why Jenkins so in Jenkins you can create plugins so these plugins are very modular and Jenkins plugin extensively makes Jenkins to adopt too many systems so you can install Jenkins on many systems for example Linux or Windows or Mac operating operating system or any other system and it's plugin system is really modular so you can install whatever plugin you want to support that kind of build or that kind of functionality whatever you want now the second is Jenkins provide everything for a robust continuous integration system which helps a lot for team that practice agile now agile is software development techniques which are used widely across many companies and many are teams in order to coordinate their work so this is completely another topic agile methodology but if you are a software developer you may not know what agile is the next is Jenkins continuously provides access to the working copies of the software which supports the agile principle once again so if your team is working in an agile environment such as sprints or you have scrum or any other agile mythology then Jenkins will fit perfectly in your system the next is Jenkins is released under MIT license so it's an opensource CI system that means you can use it freely the next is there is a large support of community and thorough documentation so whatever you need to know about Jenkins most probably it will be answered by the support community or you will find it in the documentation of Jenkins and the last point is as I already stated that it's really easy to write a plugin in Jenkins and if you write a plugin in jenkin it can be used by other community members or everyone who will use Jenkins that makes Jenkins really powerful in a way that community members creates those plugins and they can be used by everybody who wants to use them and last point I want to add here is if anything goes wrong you can fix it so it's so modular Jenkins is so modular that you can fix your problem by yourself so what Jenkins can do Jenkins can generate reports it can integrate with many different version control systems it can push to various artifact repositories it can deploy directly to your production or test environment it will notify the stakeholders of the build status using email or any other messaging system and many more so this is the brief introduction about Jenkins and in the next video we will see how we can install the Jenkins on different operating systems and then we will go for them so I hope you've enjoyed this video please rate comment subscribe and bye for now