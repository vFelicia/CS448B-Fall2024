okay so now we will jump right into with starting with kotlin so in this training we will like mostly structure this as we will study first about kotlin we will master kotlin and then we will go to the Android studio and build some app Okay so what is a program let's let's go to the basics so you can think of a program as a series of instruction for the system to perform some action okay so I give some instruction a series of instruction such as a is equals to this B is equals to this and then perform a plus b and then print what is a plus b so this is a program for example you could write a program that creates a birthday card in the program you could write an instruction to print congratulatory text or calculate someone's age from their birth year okay so that is a program what is a programming language just like you use human language to communicate with another person you use programming language to communicate with the operating system of the computer fortunately programming language are less complex than human languages and quite logical so you might be thinking that English or Hindi is very easy why do we need to study C plus plus or kotlin or Java they are not they are very typical so they are not typical when we will end this journey of our kotlin you you will be very you will be master in kotlin so and they are logical like when I say A is equals to 5. that means a is equals to 5 that does not mean anything else okay so Android apps are written in kotlin programming language kotlin is a modern language created to develop created to help developers write code efficiently with a few errors as possible okay so that's why we have choosed kotlin so what was the creation of hotline why was you might have seen in the previous video that in 2019 the the kotlin was made as a official language for the app development so how the kotlin was created kotlin was invented to solve a developer's challenge of chat print they needed a simpler tool than Java to work with their main product called IntelliJ IDEA totally written in it the guys investigated the Alternatives stayed unsatisfied and decided to invent their own language so uh at the start the Android apps were made in C plus and then they move to Java and they were pretty comfortable in Java but what was the problem was the problem was the main problem was the Java code in Java was very determinant and there were many problems so one day Google called jet wins that they should look into the matter so what jet brains does did they invented their own language so kotwin was invented to solve developer challenge of jet planes they needed a simpler tool than Java to work with their main product called IntelliJ IDEA the guys investigated the alternative so they invented their own language okay so the main key features of kotlin are the kotlin offer a number of advantage in using or learning it okay cotton programmers have access to all Java Frameworks and libraries while having the ability to write more clear and concise code so kotlin is like just a kid of java so it has all the Frameworks all the libraries of java and it has a more it is a modern language so it is a it has a less a clear and concise quote they can use both languages while building a mobile solution and easily migrate their projects if needed so if I am writing a code in particularly in kotlin like I am building a mobile app so I can build a mobile app while using cotton and Java both simultaneously I can write one code in Java another code in kotlin and mix matches if if needed okay so why are we using kotlin so the main reasons are kotlin is Java based kotlin has a familiar program kotlin has string insertion kotlin uses Auto casts kotlin has arguments and equals kotlin has expression and property so I'll be explaining each of them what what does Java based mean coding programming like kotlin programming language is a uh is uh more recognizably uh like it has a Java based programming language so it is more usable like Java is a very old programming language and Java environment and platform in Scotland basically runs on Java environment and platform okay this means that existing Java based project can seamlessly run on this language okay so what is familiar program so the syntax or and the basic structure of this programming language are extremely easy and familiar the reason being kotlin is a Java based programming language and the syntax makes use of domain object oriented programming domain okay these are the most familiar syntax and language of coding so what is string insertion we we will be looking into it in next videos but I'll cover it so ah like um the string used in kotlin is same as Java and very simple and familiar way of making changes in coding okay so the other three we will be looking into it in a while so just hang on okay so the features of kotlin okay we have learned we have studied the uh definition or kotlin or we have studied kotlin in the second video or the third video okay so it has very um very own technical terms like kotlin is a cross platform statistically typed general purpose programming language with type inference okay so we will be looking into these terms now so what is a crossplatform language so a crossplatform language can be used in any operating system so the code written in kotlin on Windows can be executed on Mac OS as well as Linux as well as uh any other operating system and vice versa okay and there is statistically typed so what is a statistically typed language so a statically typed language is a language where variables variable types are known at the compile time such as Java C or C plus plus in most of these languages type must be expressed in expressively indicated by the programmer ok so before compiling the code the we have we know the variables variable type use okay so this means that the language is able to tell the data type of any variable during the compile time and does not allow a variable to have values of different data types in a simple program so I have defined an integer a is equals to 5. so before compiling the program the compiler knows that a is an integer that simply means that okay so what is Type inference this means that the language can automatically detect the data type so when I Define any variable a is equals to 5 the language is able to uh able to detect the data type such as the data type of a is an integer okay what is a jvm Java virtual machine so jvm is an extract machine it is a specification that provides runtime environment in which Java byte code can be executed so we will be looking more into it in a while but overall jvm is a virtual machine an abstract machine that provides a runtime environment for Java so Java Java code is executed in it by it so that it enables the computer to run Java programs or similar language such as kotlin that are also compiled by Java byte code so it helps run the program jvm are available for many hardware and software platform that is jvm platform dependent jvm is platform dependent okay so what are the operations of jvm the jvm loads code like I have written the code in the compiler what now the jvm loads the code the it verifies the code it executes the code and it provides the runtime environment okay so that's all for this video stay tuned where do we write code in the kotlin language so I have told you that we use the IDE as the Android Studio for development of Android apps that is XML and kotlin both work simultaneously on Android Studio and now we have to focus only on kotlin so therefore we need an another IDE for writing only kotlin code and that ID is IntelliJ IDEA so what is intelligent idea used for IntelliJ IDEA is an integrated integrated development environment IDE or jvm languages including Java kotlin designed to maximize developers productivity okay so just like Android Studio uses SDK software development kit similarly individual idea uses jdk Java development kit or that we we will be installing in the next video and I will be explaining what jdk is in the next video so now let's move to install IntelliJ IDEA and for Linux and Mac users just note that after opening the installer all steps would be the same okay so uh just go to the Google and type IntelliJ IDEA IntelliJ IDEA download click the first link download IntelliJ IDEA and download the community version for Mac OS and Linux user continue from here and for Windows user download the community version okay so we will wait for it to download okay so the installer is downloaded for the intelligent area we will open it the exe file a setup is loading Okay click yes click next click next uh here click intelligent idea Community Edition and here click dot KT and then click next install so we will wait for the IntelliJ IDEA to install okay so the IDE has been installed here click on run and then finish so now we will just wait for the intelligent idea to run so here is the IntelliJ IDEA Community Edition you can see my version here 20 21.3 is my version and jetblen is the company for developing it so here it is already loading my project foreign you have to create on file you have to create on file and new and project so you might be looking at a screen like this so what you have to do is you just have to go to uh kotlin and then you have to choose a any uh folder okay so I have to choose any folder here I have just made a new folder kotlin and I choose this folder okay and I'll name my project as project one or new project the new project and just click on next finish and the Gradle is finishing up the process and it loaded our new project okay so it has already loaded a loader file with the function of hello world so what I'll do is I'll just remove it and here you have the main.kt file where you can write the code okay so we will be writing the code uh in next of our videos right now we have not installed the jdk in our system so um if we have since if we have if we would run the code itself it will not be running okay and let the Gradle build all the files okay then you can close the intelligent idea thank you for watching this video so in this in the previous video we have seen that we have to write code in kotlin and we have installed IntelliJ IDEA but as I said we require just as just like we require uh SDK for Android Studio we require jdk for um intelligent idea so what is jdk jdk or the Java development kit is across platform software development environment that that offers a collection of tools and libraries necessary for developing Java based software application and applets so I'll explain in basic words uh so I have have given you an analogy for SDK if you remember like just like we need groceries so you can think of jdk or SDK as grocery store and you can think of the IntelliJ IDEA or the IDE as kitchen so we need groceries from the grocery store to prepare food in the kitchen similarly we need some libraries or some tools from the jdk or the SDK to prepare code in here to develop here to run a code in the IDE okay so the jdk is one of the Three core technology package used in Java programming along with jvm and JRE jvm is the Java virtual machine JRE is the Java runtime environment okay so the jvm is the Java platform component that executes program jvm is is the uh please plays role in the execution of program the GRE is the on disk part of java that creates the jvm okay so basically the jvm JRE jvm is a part of JRE and the jdk allows developer to create Java programs that can be executive and run by the jvm and JRE so he will be so it will be more pretty clear by this the jdk contains the JRE and some development tools the JRE contains the jvm and some Library classes and the jvm executes the code the distinction between jdk and JRE is that jdk is a package of tool for developing Java based software whereas JRE is a package of tool for running Java code so the jdk is a tool for developing the Java based software and JRE is for running okay the jdk requires JRE because running Job Program is a part of developing them so now we will be proceeding to install the jdk before installing the jdk go to this PC or my computer click on properties and we are just seeing if your operating system is a 64bit or a 32bit so my operating system is a 64bit operating system if yours yours is a 34 32bit please note that now we will go to Google and we'll type Java sorry jdk for windows okay so we will click the link of java downloads by Oracle and if you are using Linux or Mac OS please download from here for Windows user please go to Windows Tab and for 64 installer download the 64 installer and here it is downloading so uh while that downloads for Mac OS users please download from here and for Linux users install the jdk from here so as it is installed open the jdk click on yes wait for the installer to open click on next click on next and the Java is installing on here device so now as Java is installed successfully we have to close this close the close this also so now we what we have to do is we have to check where Java is in on is in our system or not so what we'll do is we will go to the run and type CMD here okay and we will type the command Java C so it is directly installed in my computer but if you are not seeing this if you are seeing that it is not not a recognizable command then what you what you do is you will go to this PC or my computer okay you will go to Windows C you will go to the program files and find Java in it click on the jdk click on the bin folder copy the path from here Ctrl C click on the above part and Ctrl C okay go to this PC again go to the properties and here go to Advanced system settings in advanced system settings go to environment variables so if you are not seeing it it must be not in your environment variable so what you want to do is in the user variables click new and here create Java and give the variable value this okay then click ok and then click OK and ok and now we will when will you when you will type in the CMD command Java C then it will be showing this okay in this video we are going to write our first program which is hello world program and uh so we have opened intelligent idea for that and we will the first the program structure goes like Function One Main I'll be explaining the program to you in a while parental in is a command for printing a statement and hello world okay so when I run this program this gives me okay so you can run a program from here and here also so I prefer running program from here okay so this gives me an output as hello world okay so what it does is like uh what I will be explaining you the part of the program so what is the fun the fun is a word in Pro kotlin programming language or many programming language and fun stands for function a function is section of program that performs a specific task so I can create another function in the same program so this is a the fund represents a function and main main is the name of this function this particular function has a name Main function have names so they can be distinguished from each other the function is called main because it is the first or the main function that is called when you run the program so when I whenever I run in the program it search for the main function and that is run every time you run the so fun Main is the function Min function okay the function name is always followed by a parenthesis this is the parenthesis open and close parenthesis inside the parenthesis you can put information for the function to use okay so whatever information the function is using you can put it there now there are curly braces outside this one main so these curly braces inside these curly braces we are we write the task we have to perform now this line prints the text hello world okay print Alliance tells the system to print a line of text inside the parenthesis these parentheses okay you put the text to be printed notice that the text to be printed is surrounded by quotes these are the codes this tells the system that everything inside the quotation mark should be this this should be everything inside the quotation marks would be printed exactly as it is so to actually print the text the whole printable instruction has to be inside the main function okay so so far that is clear now uh we will be learning more about the print function what about we don't write Ln here when what what happens when we run this program so when we run this program the we will find that the output is same to same there is no change in the output so what is the difference between print and print Ln when I add one more line here and that's a print hi and when I run this program you can you will find the difference so this this high is printed just right after the hello world even if I have wrote and wrote it in the next line and when I give the command print Ln here then what will happen so I have run this program and we will let it compile now you can see that high is printed on the next line so we can conclude that the Ln in the println stands for next line or we can say when we use parental in the the text inside the quotation mark is printed in the next line so for this you can also use the the black backslash n or the escape sequence so I'll be demonstrating that so in this quote under this quotation mark when I use black says backslash n here and run this program so here we can find that again the high is under the hello world so what this backslash n command tells you or the escape sequence tells the program when I enter into the print hello world and then this backslash n tells me to go to the next line and then print hi okay so that that's about the backslash n command now we will talk about some comments in kotlin so uh I have to write here that this is my first code so how I write here and when I write the this thing here this text here this has no effect on the code so after using this to slash uh this program this this sentence is not a part of code so the symbol slash slash represents a single line comment which tells the compiler to ignore everything from this symbol to the end of the line okay typically signal signal line comment is used to make a quick comment about a single line of code so comments are very important in any code because after some time after one month two month or three month when I will be looking in the code I will not be recognizing anything in it or I can say that when I when me and my friend are working on a project and I have to share my codes code with him so he also should understand the thing which I have to use in code and why I am use use that in code so that's why these are important comment okay so what if I have to write a multiline command such that I have to write three four lines of command so I have you I I will use this this um symbol and this pair of symbols denotes a multiline comment so it tells the compiler that everything that comes under this and this uh symbol should be ignored okay so these are about the comment in the last video we have uh write our first program and printed hello world so now what we are gonna going to do we are going to uh study how to initialize a variable or a value in kotlin so now we are going to create a new file so we are going to file and then go on U then go on kotlin class comma file slash file click on that click on file I am going to name this as variable and then hit enter okay so firstly I am going to write a program one main where a is equals to 20. okay so uh I have mentioned in the last video that I prefer to run program from here not here so what happens when I run the program from here so when I run program from here just let it build yeah so when I run program from here please note that the last program we wrote gets executed the hello world program and when I run program from here so the variable KT program runs and process finished and exited with code 0. so uh now we will discuss how to declare a variable in kotlin so to declare a variable in kotlin either where or well keyword is used so I have wrote where keyword and now I will use Val keyword okay so these are two ways for declaring a variable so uh by while mentioning the kotlin or starting with kotlin I have mentioned that kotlin has a statically typed language and it has a type inference so what does what did I mean by statically typed so before running the program before compiling the program the type of the variable is explicitly known by the compiler so when I compile the program the type of the variable is known by the compiler so the type of this isn't I'll be explaining that in a while and uh kotlin has a type inference so what does that mean uh so when I hover over a so it tells me variable a is int so in kotlin uh the variable automatically tells its types that what type it is variable or value okay so uh now what is the difference between where and well so well has an immutable reference so when I declared a well value so when I go and change the value of B to 13. okay so it gives it underlines it by red and gives an error so what did event hover over it and it says that well cannot be reassigned so I am going going to come to that and hit alt plus enter and when I hit alt plus enter it gives a gave us a number of choices to proceed with and I click enter so what it does is it converts well to where so that I can reassign the value okay so we have uh now discovered what is where and well difference so where where variable has a mutable reference so the variable declared using where keyword can be changed later in the program and the variable declared using Val keyword cannot be changed and it is similar to final variable in Java if some of you might have learned Java okay so uh what if I don't know the initial value of the variable so here I have initialized the variable a with some value but what if I don't know its value so if I have a variable name okay and I don't know what its value is but I do know it holds a string so I'll mention a colon and then type string so here we have created a variable with a type string that can be defined later at any point so now I want that the name should have a value uh p k so I will give that give that the value okay so it now you can see that it is underlining is paid by yellow so let's see what it is telling so now we are going to hit alt plus enter and it's saying that uh create a two value because it is not going to change so it is saying that it we can create it to Value also uh now when I hit alt plus enter on going to the name it created the initialization initialization within itself why did it lose that because the name was assigned just after the variable declaration so it don't have a sense and it makes the course code of more line okay so now we have understood that how to declare a variable there are two ways where and where keyword and how to declare it beforehand and not initialize it okay so how does that this code work so we are going to under a function which is which is has a name main okay so when I go to this where a equals to 20 so it creates a variable and a is the identifier by which this value has been identified okay so uh it is uh like a common nomenclature we follow for naming the identifiers so what we do is like when a variable has a short reference like in a function where the variable is used and at the end of function the variable is destroyed so we we can use their short variable such as a b c i yeah in for Loop we use a variable and it is destroyed after the for Loop is concluded so we can use short variable short identifier there but when we make a large code so we uh we should it is a common practice that we should name the variable that such that we should name the identifier such that when we come after three or four months through the code three or four months when we wrote the code so we should know that why we why we created that variable and what the what that variables variable hold so I'll just introduce some common factors such that I have a application that stores a stores the mobile number so what I can do is I can create a identifier such as mobile number mobile number in from application okay so it is a string that initially holds a number okay so uh what I did here is I started with a small letter and then after every word I created a capital letter okay so it's just a common practice we recommend you to make your identifiers in this way okay otherwise that's fine you can use underscore uh so your variable identifier should start with a small case letter and it should not contain any other special letters other than any other special letters other than underscore so again you only use underscore and your variable identifier cannot start with an underscore okay so I hope that you like this video in the next video we are going to cover the data types and then we will proceed further thank you in the last video we have discussed about the variables in kotlin so now we are going to move further and discuss the data types in kotlin okay so uh as I have already mentioned cotton is a statically typed language that is the variable of uh the variable is already known during the compile time so uh there are a few type of variables in kotlin so I'll just start a function so when I uh so there are four mainly four types there are numbers there are characters there are booleans and there are arrays I'll cover then one by one so firstly I'll go to the number type so number in kotlin are similar to Java and any other programming knowledge a programming language so there are six builtin types representing number so the six are bite short int long float and double so out of them Milling we were we will be using int and double most of the time so what is byte so I can create one ah buy it for you so I'll create well range and I'll mention its type byte I'll mention it as 112. so the byte is a is one byte is eight bits you might already know that so there are totally eight bit and 8 sine bit two two's complement integer so byte data can have values from minus 128 to 127 so when I have a concise data and it has a concise value between 0 to 100 or such that then I use byte so what it does is instead of using an integer or a long end or a double so it it concise the code in very small space it requires a very less space so uh when I assign it a value of 200 so it gives it shows and right underline and when I hover over it it says that the integer literal does not confirm the expect to the expected type byte so what it says basically it is uh it is out of the range out of the bound so when I go and print the range so it will be printing 112 as we expect so foreign okay so we will move on and next is short under the number the short is a data type having a 16 so I'll mention here it is having eight eight bit eight bit one bit is eight one byte is eight bit so the short is having uh the the values can be assigned to a 16 bit 16bit signed sign complement integer two is complement integer so the the data is short data type can have values from minus 3 to 768 to 32767 we don't have to remember that or know that just for knowledge sake I am telling you this so the short has a capacity or we can say it uses 16 bit data okay so next we will move to enter so int is a 32bit signed two's complement integer and mainly we will be using INT in uh most of our codes so in data type can have values from minus to the power 31. 2 2 to the power 30 1 minus 1. okay so any uh value I assigned to a is by default stored as an INT and I hover over a it shows that it is an INT okay so it is also a default value so next is long so what happens when I have a integer of value more than 2 to the power 31 so we can store it in long so basically long has a 64 bit signed a 2's complement integer okay so when I have a long integer we will store it is long so the keyword used for it is I'll just mention uh one value say long end and I'll mention it as long and it can have any value okay so moving on we have double so double is a data type with double Precision of 64bit floating point so whenever I Define any uh decimal as a value suppose 1.23 so it automatically is defined as a double okay as we can see here so if I print decimal it will be printing 1.23 now what is float we have seen about double so the ball has also also 64bit so float data type is a single Precision 32bit floating point okay so uh there was in that was getting by default assigned and there was byte and short that concise the storage so whenever we want to acquire it less storage we can use float so how to define float so we can Define it as well uh decimal float in this way also okay but so we could have by the by the thing we are going to the seeing like we Define it in this way but it is not true so what I what if I have to define a float so what I do is I just Define it as decimal and then put f so what it does is it convert it convert it to float so it is now a float so when I print uh decimal float so what it does is it will be printing 1.23 when only 1.123 and not the f so what it says is it is a float okay and nothing else so uh we have used 1.123 F instead of 1.123 in the above in the program it is because 1.123 is a double literal and you cannot assign double value inside a type of float okay so I can now I can here mention float so it will not giving any error okay so uh what if I am not sure about the uh the what if I am not sure about what number value a variable will assign in the program so I can what I can do is I can use a number data type so I will Define where test and assign it number data type okay so I can put anything into like I can put a string into the okay sorry I can put a string into test foreign integer into text oh sorry number so I can go to integer into test I can put a decimal into test I can put anything into test if I have this I defined it data type as number so now we have completed our numbers data type now we will move on to characters to represent character in kotlin uh care data types are used so uh what I'll do is I'll just create a letter where ah letter and what I do is I Define its value as Square so the cad that I was used so I can assign it any character so please note that the character will be in single quotation marks okay so I have defined a character now the next data type is booleans so what booleans are booleans are simply either true either false they have only two possible values so when I Define a Boolean variable Boolean so I'll name it as flag and it has a data types Boolean so I can either give flag value to Tru E2 okay or a false okay so it has only two values so booleans are used generally used in decision making statement that we will be using in our later discussion okay then further we have arrays so we will be discussing arrays in a separate topic but just to Define it an array is a container that hold value of a of one single type for example you can create an array that can hold 100 values of n type okay then we have string so just for defining purpose I will Define a string like well name I have already defined it but okay so this is my name okay so please note that the string must be in double quotation mark okay thank you for watching this video we have now covered the data types in kotlin in this video we are going to cover the operators in kotlin so I have already registered the type of operators and the operators here so the first type of operators are arithmetic operators so here is the list of arithmetic operators the first one is the addition so whenever I use the plus sign we are going to use it for addition so the addition can be of two integers or it can be of two strings also it is known as string or constant concatenation and we will be knowing about it in a while so another arithmetic operator is the minus sign or the subtraction so it is a subtraction of subtraction operator when I use it it generally subtract one integer from other or one variable from other okay the other is the multiplication operator okay it is selfexplanatory so when I use it it is used to multiply the data type the other is uh division data type so whenever I use the division operator so whenever I use the Slash so it generally means that we have to Define we have to divide one variable from other so here interesting part is the uh the percentage sign or the modulus operator so the modulus operator Returns the remainder so I'll just make a function and explain all this to you so I will create a value a equals to 15 and b equals to to five ok so I'll just print all these the result of all these operators so a plus b and I'll just copy it okay so plus minus multiplication the division and the modulus operator so you can already guess the result and we will be seeing it in a while so the result of this will be 20 the result of this will be 10 the result of this will be 15 into 5 the result of this will be 15 divided by 5 that is 3 what will be the result of this the result of this will be 0. so it Returns the uh the remainder when a is divided by V so I'll just so these are explainable what I'll do is I'll make it 17 here and run the program again so now what will be the uh well the result the printed so it is 2 so when 17 is divided by 5 it is 3 times 5 plus 2 so the remainder is 2 so the result of the modulus operator is 2 okay I hope it is clear so moving on we have a comparison operators so okay before that okay so uh we have comparison operators so the first one is we the uh the less than sign so whenever uh a is less than b so I'll just make so can you guess what will be the result of n comparison operator it will be a Boolean so whenever I'll compare a less than b okay so when I run this program what will be the result is a is less than b no so the result will be false okay so mostly the result of the comparison operator is a Boolean so first is less than operator second is the greater than operator third is the less than or equals to operator okay fourth is the greater than or equal to operator this is the equal to equal to operator so let's check whether a is equals to b or not is equal to operator this is this is is not equal to operator so when I Define both as 5 and 5 foreign when I this do this println a is equals to equals to B so what will be the result what will be the output so the output would be true as a is equals to B okay so these are the comparison operators now we will move on to the uh assignment operator so we have already used assignment operator here okay so the assignment operator used here is the equal to operator okay we have also plus equal to minus equal to into equal to divided by equal to and modulus equal to okay so what are the basic functionality of this so I'll explain that so what if I create a variable X which is equals to a which is equals to A okay so I can do that now I'll print the value of println X okay now what I I will do is I'll assign X as X plus equals to A and now I'll print the value of x what I'll do is now I'll assign X as x minus equals to A and now I'll print the value of x now X ah into equals to A and now print the value of x now X divided by equals to A okay so you can guess the result or we will see them and then I'll explain them to you so the results are 5 10 5 5 25 5 0 okay so first was x equals to eighth of Financial and X so the value of a was five basically so here x is equals to five okay so here the value of x was 5. so what I did is I did X plus equals to A so this basically mean a means that X should be equal to X plus a okay so the value of x was 5 and I assign reassigned the value of x as X plus a so the value of x here would be 10 okay I hope it was clear to you so the basically the meaning of X plus equals to A is x equals to X plus a okay so the value of x was already 5 and I here reassigned the value of x as X plus a so 5 plus 5 that is 10. now the here the value of x is 10 and this implies that X should be equals to x minus a okay so X was 10 and X was 10 and a was five so I I reassigned the value of x is 10 minus 5 so here the value of x should be 5 okay and we can check that also so here the value of x is 5 and I to create reassign the value of x such that X is X should be equal to X into a so X is 5 a is 5 so here the reassign value of x should be 25 okay so it is pretty easy and interesting and I hope that should be clear to you so here the value of reassign value of x should be x divided by a so X was 25 a was 5 so X the new value of x should again be 5. okay and we are also seeing that it is true now it means that the reassign value of x should be the remainder when X is divided by a so now X is 5 a is also 5 the remainder is 0 when X is divided by a so here the reassign value of a is 0. okay so we have now completed the arithmetic comparison and assignment operator now we will move on to the increment and the decrement operator so what I do I'll do is I'll just so here what is the value of x x is 0. okay so now what I'll do is I'll just increase the value of x as X plus plus okay and then I'll print the value of x and then I'll do x minus minus and then again print the value of x okay so uh when I have to comment this all out okay no problem when if I have to comment all this out so what I can do is I can just press Ctrl and the slash button so it it is all commented out okay so the value of x is a and it is 5 so value of x is 5 when I run this program when I run this program so the output is ah output is 6 and 5. so here the value of x was 5 and I did X plus plus the Inc I incremented the value of x and then printed it so it is 6 and then I decremented the value of f x and then printed it so it is 5. okay so I hope that all is clear to you and before the video ends I like you to uh make a program foreign that prints the sum of two number okay I hope that would be easy and you will do it some of the that prints the sum of two numbers okay thank you for watching this video I hope you enjoyed and learned thank you in the previous video we have discussed about the various operators in kotlin so now we will discuss about what happens if one or more than one two or more than two operators occur simultaneously in the same statement what I mean to say is uh like I'll just mention a function having well variable or value X as having 20 value y having 30 and variable Z having a value of 40. so I am asking you that what happens when okay I'll just make it where what happens when I'll assign reassign X plus equals to Z into y what happens then and I'll then print l so what would be the output of this particular function how can we decide that there are two equal two operators simultaneously like we are assigning the value of x as X Plus Z into y so we cannot say that we here use the okay so what we do here how we determine the output so we there is a order of Precedence so we can treat it like the preference order so the post fix has the most preference order so I'll just quickly explain to you what is postpicks and prefix so we have discussed how the increment and the decrement operator right the plus plus and the minus minus operator that increase or decrease the value by 1. so the postwiz and the prefix increment and decrement operator R A plus plus and plus plus a so a plus plus is the post fix and plus plus a is the prefix increment operator okay so the original value of a is returned at first and then a is incremented by one so just read it out and I'll be explaining it in more detail at later part of this video okay so I'll just continue with this so the higher highest preference is of the most fix uh operator and the second highest preference is of prefix operator the multiplicative operator is the into the divide and the modulus okay it has the third most or or preference okay and then comes the additive operator of the plus and the minus and then comes the comparison operator when we do the comparison and all and then comes the equality operator and at last there are the assignment operators okay so this has the least priority okay so here your bodmas logic would be true but if it would be into equals to and Z Plus y it won't be true so I'll just quickly run the program and uh till then we will discuss what would be the value of x so ah as we can see that the multiplicative operator has the higher preference so the okay so the output is 10 20 uh 1220 okay so we can see that the multiplicative operator has the higher preference so firstly the multiplication would happen and the code will look will look like X plus equals to Z into Y what is z into y it is 120 1200 okay so X plus equals to uh 1 1200 so the reassigned value of x should be the previous value of x plus the 1200 and what is the previous value of x the previous value of x is twenty so the reassigned value of x is 1220 as we saw in the output okay so it is I guess it is clear to all of you so we will just work on one more uh search example where variable a is 40 variable B is also 40.0 okay so it is a double type and there is a value C that is equals to plus plus a minus minus minus B okay so now what is b so now we will discuss first and then we will see the output so here a is 40 B is 40.0 a is 40.0 now we can see that the prefix operator has the most uh the highest order okay also we have seen here that in the prefix the value of a is in incremented by 1 and then it Returns the value okay in the post fit post fix the value of a is written in the first and then the a is incremented by one so what I am saying trying to say here is that here the the plus plus a Returns the incremented value okay so the plus plus a is the incremented value so it has the highest order of Precedence so like I can say that c is equals to plus plus a will be 41.0 and minus minus B would be 39.0 so when I run this program I should be able to see the output as 2.0 okay and here it is so we were right so we can conclude the order of Precedence and we can say that it's just a preference order by which the operators are designed this decided okay now we will come to this increment and decrement operator and what is the what is the meaning of prefix or postfix operator so when I Define uh a variable um Alpha and assign its value as 23 okay and what I'll do is I'll just print Ln and a plus plus sorry Alpha plus plus so what result do you expect so mostly you would be expecting 24. but that's not true the output is 23 isn't that shocking so what I mentioned about the post phase operator was that the original value of a is written at first so when I run this program the alpha plus plus Returns the original value of alpha but at the end of this line or at the starting of the next line the value of alpha is incremented by one so when I print the value of alpha here what will happen is so here it at line 36 the the output would be 30 24 or 23 and here at line 37 the output will be 24. okay that's just because the prefix and the post fix so what would happen if instead of alpha plus plus I'll print the value of plus plus Alpha okay so uh the prefix operator increases the value instantly by 1 and then Returns the value so the output of this would be 24 only okay because it is a prefix operator okay it is 25 because after that the alpha of well the value of alpha is changed to 24 and then we have increased it one more time so it is 25 okay so you can note here that it is implemented and then returned and in the post fix it is written and then incremented okay now we will move to the type conversion so what do you mean by type conversion basically if I know nothing about cotton I just know English so what what one should mean by type conversion one should one would mean that we have to convert the type okay so uh what I what will happen if I have to convert like I have a is as 40 and I have to convert it into an integer so how will I do so so I will con uh create a variable and name it as a int okay and give it a value of a which is the original operator and add two int function to it okay so what it did what it what it did is it created the value of a into two into so it just transferred the value of a to int so now the a into variable is of integer type okay so when I print the value of end okay just I'll just hide this code and when I print the value of a int it should be 40 instead of 40.0 okay so uh the it it is used many times so when I suppose I have a someone's phone number uh stored uh like an integer phone number as integer okay so now what I have to do is I have to store this integer store this integer as a string because um but just I have to do so so what I'll do is I'll just uh create a another variable which is phone string and what I'll do is I'll just give it a value of phone number dot to string okay and I'll when I hover over it and it has the data type of string so you might all have uh somewhat somewhere heard about the ski values a s c i s Sky values if you haven't heard about it just Google it and then resume the video okay so what what if I have a character any character I have uh any character and I want its Sky Value what will I do so I have a character suppose a and I want its Sky Value so what I'll do is I'll just print Ln and a DOT oh sorry character dot to enter so it will when I run this program it will just show the Sky value of a okay so the Sky value of a is 97 when I want the Sky value of exclamation mark I'll run the program and the Sky value of x termination Mark is 33. okay so that's all for this video guys thank you for watching this video and stay tuned for me in the previous two videos we have covered uh operators and the data type conversion so in this video uh we will be covering the string and the string templates so what is basically a string so string is a sequence of characters okay uh so I'll go ahead and make a function in which I'll mention a variable a and give it a value this is a coder exclamation mark okay so uh this is a coder and with three spaces and an exclamation mark comprises uh the these all character comprises a string okay so remember string is always quoted in double quotes okay and the space and the punctuation are also characters which are part of the string so uh uh the first character in the string has an index 0. okay so in this string the T has a character Zero as a index 0 okay so as we move forward with the string so this is a coder uh the index increases by one okay and each and every space and each and every punctuation mark has its own index okay so when I mention the index and the string just one above the other and mention it it in a table so that is called an index table okay so I have just mentioned the part of index table here okay so uh it's it says that which character has what index okay so uh in this the C character has a index of 10. okay so this is the basic about string we know we already know how to initialize a string okay so there is also a second method yeah second we can say that it is a second uh method to initialize a string we can do that string variable B string we we will mention the data type of that string beforehand okay we can do that also so we can Define the string in two ways okay so we will be covering uh most of the string functions in the later part of video but I'll be mentioning one string function in this video uh that is the length function so uh remember this a string having index from 0 to 15 has a length of 16 okay it has 16 characters in it including zero okay so what if I have to uh like I have a value I that stores the uh the store the length of string a so uh I'll just mention a DOT length okay and this uh this length function measures the length of any string so I'll go ahead go ahead and print the value of uh I so when I run this program I expect the result to expect the output to be 16. okay so yeah so the output is 16 so the length of string a is 16 okay so what if I have to mention I have to get the output as the length of the string is 16 okay so I have to print this statement and uh that value here is I so what I can do is I can go ahead and write a print statement which contains a string that the string is the value of string is okay the value of the the length of string is so I'll just go ahead and print this okay the length of string and then what I can do is I can in the next line I will mention a println statement and that contains I okay so when I go ahead and run this program what I will find in the output is the output will be the length of string is 16 but it but don't you think it's a bit lengthier and there must be a shorter way so you are thinking right so what I'll do here is I can use string function string template here so string template is nothing but a dollar sign okay so what is a string template so uh while mentioning a string what I can do is I can so I will just mention it print Ln yeah so after the uh mention after the uh the string I have to put inside the string the value of I so what I can do is I can just put the dollar sign and the I okay when I hover over it it says very very value I int okay so it has the value of I so when I go through this line it will print the string the length of the string is and inside the string it has the value I so before so it does not print the length of the string is dollar I dollar sign I it does not print that what it print is we will see when I run this program okay so uh yeah it prints the the length of string is uh and instead of dollar I it puts just the value of I okay so what if I have to uh print I have I have not defined up any value I okay and I have to print the length so I have not defined I'll just make this go and yeah so now what I will do I have a string and I have two printed value and inside the string I have a I can I can do one thing I can just go and instead of print Ln I'll do here print and in the next line what I can do is I can go print Ln and here put I can put a dot length okay so when I run this program it will be giving an output the length of string is a DOT length and which is 16. okay so it is correct but now here also it is redundant and more of course like more lines are used it is redundant because we are using the print function twice so in kotlin we do not do that so what I will do is I can use the string template here also but but when I use the string template without any uh something so what happens is I'll mention just a DOT length so it automatically insert it into curly braces okay so I was trying to establish my point here the point was that whenever there is an expression in a string template we put it inside a curly brace okay so when I run this program it automatically puts the length of string a inside this template and we have the output as the length of string is 16. okay so that's all for this video in the next video we will be covering uh the various type of string functions that are available in kotlin thank you very much uh in the previous video we have covered about string and string function in this video we are going to learn about more string functions such as the length function we discussed about in the previous video okay so uh the string functions are the function which will be implemented on string as the name suggests so the first function is the length function I have discussed it in the last video but still I will discuss it in this video also so I'll go ahead and create a function Main in which I'll Define a string of value a is equals to hello um okay I'll not leave space and value B is equals to this is a coder and I'll Define another um value C and another string with a value and my age is and I'll Define another value D and it is an integer which is with the value of 90. okay so I have three strings and a uh integer so firstly I am going to discuss the length function okay so ah what about what if I have to get the length of the the value of the string b or the string a okay so I'll just go ahead and write the print statement okay so the value the length of a is and I have discussed about the string template in the previous video so I am going to use that here okay and the length of a is a DOT length okay so the length function is used here as a DOT length so whatever I have to see the length of B whatever I have to see the length of C so just I am going to uh copy this and paste and instead of B I'll do c so uh when I run this program I should find the length of a b and c as the output okay so this is the use of the length function so as in the output we can see the length of a is 5 the length of a is 15 okay so I here did not change the values okay so length of a is 5 the length of B is 15 and the length of C is 13. we can verify from here also but uh yeah I guess you are you have now a clarity about the length function the second function we are going to talk about is the get index function so get index function Returns the character at the specific index within the bracket now uh I have already told about you the index so in this hello string I will just mention h e l l o so the H here has a index 0 the E has index 1 the L has an index 2 and another L as a as an index 3 and the O has an index 4 okay so what the get index function does it Returns the character at a specific at a specific index specified within the bracket so I will just mention a print function and I have to get what is the character at index 4 of B string so the character the character at index 4 of B is what I'll do is I'll just go B uh okay so I'll first use string template and the ah so the function is get in bracket index so I'll use the string template and I'll just mention the string that is B and the function that is get index okay and then the index so I have to find the index at 4 okay so when I run this program what is the expected output so at 4 it has a space okay so it gives us space uh so I'll just go ahead and change it to 5. and when I run this program we can see that the output is the character at index 4 of B is index 5 of B is uh I so yeah it is pretty clear from here that the index at index 4 of string B is I so here it is underlined by a yellow line so what I will do is I will go here and hit alt plus enter and it suggests that replace get call with indexing operator so what is an indexing operator so I'll just show you that okay so instead of doing this what I can do is I can just mention B and that and then in the bracket I'll square bracket I'll mention five okay so when I run this program I will get the same output so instead of using get function or a bigger code I'll just do is what is what b square bracket and the index okay it gives us the same results so I guess the get index function is also pretty clear now what about the subsequence so as the name suggests it provides a sequence which is a part of the mainstream okay so the the function goes like sub sequence start index and N index so between start index and end index it prints all the uh the string okay so it Returns the substring between the start index and the end index but excluding the index in N index it is a main point one of the main point okay so it excludes the N index so what if I uh I go and say put the print the substring from one to three of a so I have to mention one two four okay because it excludes the N index so I'll just go ahead and print for the uh better understanding so print Ln the substring is I'll go with the string template and for a I have to mention and the function is subsequence and the start index is one and the end index is 4. okay so what happens when I run this program what will be the output so when I run this program it gives ell but at the fourth index there is o so why is all is why o is not printed because it excludes the excludes the character at the index last index mentioned here okay so keeping that in mind uh just predict the result uh after pausing the video of the substring ah of B uh 2 to 7. okay so what will be the substring of B Dot subsequence uh 2 comma seven just pause the video and uh think about it and write it on a paper or something okay and then now you can play the video and check so it is is space is now we will go ahead and check so uh this so the second is here second uh index is here okay third index is here and fourth fifth sixth seventh so seventh is a space so uh it is not clearly visible here but the space is not printed here okay it stopped at the uh s okay I'll just go ahead and make that nine so it would be more clear okay so not nine I'll make that 11. so uh we can see that at the 11th index the letter the character o is there but in the output we cannot see o because the uh last index is not printed there so I hope the subsequence function is also clear to you okay so we have now till now covered the three functions which are mostly usable now uh we will be we will be moving to some less usable function okay so there is a comparative function so the compared to function compares the object with the specified object of order okay so it just compare two strings it returns 0 if the object is equal it returns a negative number if it is less than the other okay so like what will be the um I have to compare the okay what will be what will it be comparing it will be comparing the length of the two strings so uh what I'll do is I'll just print Ln and print a DOT compared to B okay so I am comparing here A to B so uh like it is the specified other object is B here the specified other object is B and the object our main object is uh a okay so if it is less than the other it gives a negative number and if it is greater than the other it gives a positive number so you can guess the output here and while I run the program so when a is compared to B it provides a negative number that means that a is lesser than a smaller than b okay it is pretty clear from here that b is a larger string so I will just go ahead and compare also compare B from C okay so you can guess the output here has B is a larger string so it gives a positive okay and what I'll do is I'll just create for uh the sake of just com comparing the function uh a variable a value F and just change some characters in it and okay and now I'll do is what I'll do is I'll just compare C compared to f and now I'll run the program and the expected output is zero because the two strings are of equal length okay but it gives a a positive number why so because it it just not compares the length Okay it compares the object specified within the string so the object the object f is uh greater than the object C okay so uh if I have the same string here then it will be 0 but if I have the purpose of me stating that was just that if I have the same string then only it will be 0 if I don't have the same string then the output could be Z positive or negative we cannot Define that as per as of now okay so thank you for watching this video in the next video we will be covering more string temp string functions okay in the previous video we were discussing about string functions and in this video we are going to continue with the discussion okay so uh in the previous video we have discussed about the uh the the length function the get index function the subsequence function and the compare to function okay so uh in I think that should be clear to you okay so now next is the equals function so the equal function indicates whether some object is equal to the other object or not okay so uh it is just like the comparison operator equals to equals to okay so what I'll do is I'll just uh okay so you can guess the return type of the the function is Boolean okay because it returns that whether it is equal to or not so when I uh say a equals to equals okay so it is equals and I say B ah B and when I when I run this so you can guess the output the output is false because they are not equal okay so as you can see here the output is false because they are not equal and when I do c and d C and I compare it with d and again when I run the program uh now the output must be 2 because they are equal okay no it is false why it is false uh okay so I have done some mistake I have to compare uh C with f okay sorry so yeah when I compared C with the D the data type is only not same one is string and other isn't so there is no chance of them being equal so it is true now what happens when I uh change one index in the string so you can see the output is false so it is only true when both string are equal in each and every manner possible now it is having some suggestion now we will go to it and plus press alt plus enter it is suggesting that we should replace it with equals to equals to sign as I already mentioned that it is nothing but the comparison operator equal to equal to okay moving on to Hash code the hash code returns a hash code value for the object okay so you might be wondering what what the hash code is uh I'll suggest just go to the Google type hash code of a string and you will get to know okay so uh I want the hash code of uh let's say string C so I'll just type c dot hash code okay and when I run this program I'll get the hash code for C string so as you can see in the output screen the hash code for C string is this okay when is let's say I want hash code for all the strings possible okay so I'll just mention all the strings A B C and F we have four strings a B C and F okay so when I run this program it gives the hash code for all these string now if you note that these two values are negative and these two values are positive so why is that the hash code could be positive negative or any value okay it's just a representation okay so now next is the plus operator plus function so what the plus function does is okay when I use the plus function let's say uh I have print Ln a Plus B now uh the a plus b is another string okay so I can make another function use on this string also so I can use the plus function again also okay and it's the plus function is not restricted to string only so I can use the plus function and use any data type you can I can use your D also okay so when I uh run this program so you can see the addition of all this a b c and d so it gives like hello this is a coder and my age is 19. okay so what there is a mistake that there is no space given because I have not given any spaces here here or here if I give give spaces here then it would be a perfect code so that was all about the plus function now instead of using dot plus I can also do that I just I can just do a plus b Plus C okay and when I run this program I can find that it gives hello this is a coder and my H now this is string concatenation okay it it is nothing but it just contatinate the string it means that it puts three two or three string or many string together and make it a new string okay so plus function returns a string obtained by concatenating the string with the string representation of the given other object okay so that was all about the plus function next is the two string function so we have already uh talked about the two string or two end or two all the data type conversion function so it's it is nothing but suppose I have a uh I have a integer uh that has a value that has a phone number okay so oh also okay a is already defined I'll just give it name as phone okay so I want to store this in a string so what I can do is I can just write phone and then Dot tostring two string so what it does is it converts the phone this into a string so when I print this when I go ahead and print this then you can expect the result it is a string so you you can see nothing in the result the result would be same the output is just the number itself but it is a string okay so two string function um returns a string representation of any object okay then there is last index function the last index function Returns the index of the last character in the character sequence n minus 1 if it is empty so I have here like like in these two string I'll try C and so what I'll do is uh I'll just go to the end and yeah so I'll print the last index of C first okay so I'll just type c Dot last index okay and I'll also print the last index of f and now I'll run this program meanwhile I'll go to the CNF strings now as we can see in the output the first one is 13 and the second one is 12. so the last index which is this so this is 0 then 1 2 3 4 5 6 7 8 9 10 11 12 and 13. so the index of the last character is 13 in the string and the index of last character is 12 in this string F so it just Returns the index of the last character okay so now you must have no doubt in the last index function okay the next is index of function so the index of function Returns the index within its string of first occurrence occurrence of a specified character starting from the specified start index okay so index of function has three parameters basically the first is the string so that is a b or c whichever string I am providing it second is the start index okay so from which index I should be looking for the character so suppose I'll just explain it and third is the ignore case uh just ignore that so it is just telling the uh it should be false Okay so okay it is a Boolean you know cases Boolean so uh the basically what is in index of so I I'll say that index of I and string in string B okay and starting start index is zero so it will give the third eye okay and when I'll give the start index of three value three so it will give me this I okay so I'll just go ahead and use the function so I'll print uh in string B I can do what was that index of okay and now I'll mention the character which which are of which index I am finding so I'll mention the character as I okay and then I'll mention the uh start index okay so uh note that it is giving a red I in Red so why is that because I I haven't mentioned the character in single quote okay so I should uh only mention the character or character in single code and string in double quotes Okay so then I'll mention the uh string start index so I'll mention the start index at 0 at first and the ignore case is false okay so now I now I'll go ahead and run this program so the output of this is 2. so now I'll I'll go to the B string and uh so at at 0 1 2 at index 2 there is an i okay so now what if I start with in index 3 and see what is the output okay I'll start with index 3. and run this program so I can see in the output that the result is the output is 5 so I started with this this index and this is the third index then fourth index is empty and then fifth index is has an I so the answer is I uh the the I is at the fifth index starting from the third index okay so it just found the first I from the start index and ignore the rest of it so I'll just find D from any index okay so finding D from an index doesn't change anything okay because D is only mentioned one time it it matters when D is when the start index is after 11 okay after 12 because D is at the 12th index so the index of just gives the index of the mentioned character from any index okay so I hope all the functions should be clear to you by now okay so thank you for watching this video in the next video we will be covering functions thank you till now we have discussed about string string function operator now we will discuss about functions in kotlin so we have already used a function named a main function okay in each of each and every code okay this is the main function that we have used so what is a function function is a collection of code that is written some result okay so despite of the main function we are talking about other functions okay so uh we will firstly discuss about the syntax of the function of any function so the syntax of any function is given by Fun that is the keyword for declaring any function then comes the function name the function name should be same as the identifiers defined by me in at the starting of variables okay so the same thing should be used and uh the function name should be selfexplanatory so after two or three months when you look at the code you should know that uh Y is the function named like this okay then comes argument one type 1 comma argument 2 colon type 2 comma and so on okay so what is an argument arguments are the data that a function needs to use so Suppose there is a function uh which takes two input two integer and provides it sums so there is a function which provides the sum of two integers so the function name should be sum of two number okay with s small o capital s u m small o capital F small uh n n capital and uh everything small okay so that is the best way of naming it and then comes the argument so it provides the sum of two integer so the argument one should be a or any name of the argument of the variable and the type is integer so it is a colon integer and comma comma B colon integer so that's the argument and then comes the return type so we have to mention the written type the written type is nothing but expected data type of the result okay so when I write the code right when I write a function to uh give the result as some of the two numbers so the return type is also int so here I am here I will mention the return type that is hint okay then comes the lines of code and then it there is written result okay so here we use the written keyword and uh give the result what is the result okay so I'll go ahead and so every function is every new function is made is coded outside the main function okay so I'll go ahead and make a function I'll name it as new function okay now I want this function to print and statement so what are the argument given to him given to the function so there is no argument given when I have to print the the running lines so I'll just keep it empty so when there is no return type so the the function is just printing it is not returning anything so then the ah the written type is mentioned as unit okay and then I'll open the function and I'll just write print Ln I am a new function okay so here we have defined a new function which prints I am a new function so the function is defined as per the syntax now what if we have to call the function so as you might know the main function is only executed so we have to call the function to the main function so what I'll do is I'll just name the function here which is new function and just keep it empty if there were any arguments so I'll mention the arguments here okay so I'll go ahead and just run the function the code our code so as you can see in the output screen we have successfully printed a function which says I am a new function okay so we have now a function we are now capable of making a function which prints something okay so as no arguments are used so no data is used by the function okay so it is kept blank okay so no return type is there but therefore the unit is used so when I hover over unit so it says that the type with only one value the unit object okay this corresponds to void type in Java okay so the written statement is never used because we are not returning anything in this function you might notice that we have not used any written the written um uh keyword is not used okay so what is a unit unit is used when a fund does not return any meaningful result so it is it it we might call it as the default data type of in any function okay so uh till now we have discussed what is a function what is the syntax of function okay so this is a block body of the syntax okay there is also expression body which we will discuss later so we have discussed the syntax we have made a function that prints that I am a new function and that's all for the video we will continue with functions in later videos thank you in the last video we have discussed about the functions and what is a function the block body syntax of a function and we have also created a new function that prints a string okay and we have also called the that function okay so in this video we are going to create a function that uh that prints the double of that that Returns the double of an integer okay so function that doubles an integer okay so uh we are going to use the uh block body as of now so what was in the blog body so we have first uh use we have to use the fun keyword and then we have to name the function such that when we refer it after a long time it should be clear to me that why I named the function and what the function does so as the function doubles an integer so I can name it as double and integer okay and then I have to pass the argument in the open and close parenthesis so uh like I have to pass pass an argument and then it's type so I'll name the argument as a and it type its type is int okay and next I have to mention the return type so the return type of an integer would the written type of and double of an integer would be also int so I am going to mention int now we have to open the function and write the code okay so we have a now what we have to do we have to just multiply a by 2 so I have I can write a is equals to A into 2 okay and then I could written if okay so now it is showing a red underline uh inside a and it is showing that Val cannot be reassigned so what the problem is like when I Define a function the variable or the argument that I Define is a value parameter not a variable parameter okay so I cannot multiply and reassign it okay so what I can do is I can just return a into 2 here okay so uh when it enters a function the balance integer it is passed in argument and integer and the return type is an integer and the function returns a into two so I am just going to go into the main function and call the double n integer function so I am going to write double and integer and pass the integer in it so let's say I have passed equals to 4. now when I run this program I am not going I am not I will not be able to print anything because uh I have I have not used print statement anywhere okay so uh let me just like so yeah when I will run this program uh it is not going to print anything because I have never used the print statement anywhere so what I'm going to do is I am going to just add print Ln here and what it will do is it will print the output of that function okay so uh when I run this program uh we can see that the output is 8. so we have made a function that doubles an integer now we will move ahead and see what expression body is expression bodies another Syntax for writing a function so when I write a function it just written double of an integer it is quite a long syntax okay so instead of these this block body expression body is used for this type of syntaxes so what is expression body is so in expression body also we will firstly use the keyword fun and then we will give the function name and then we will pass the argument and then we will pass the return type so uh starting is a similar to The Block body and after passing the return type instead of opening curly braces we will just write equals to and then the expression so I'll just write the function uh double integer in expression body so I'll pass argument X as an integer and the return type would be also an integer and now instead of opening and closing of curly brushes I'll just write equals to and then I'll just write X into okay and now I'll go ahead in the main function and write print Ln and double integer and then I'll give value 46. now when I run this program it gives output as 8 and 92 so the program works just fine so what expression body did is it it reduced the length of the code and it made the code much easier to read okay so now calling and invoking of a function uh what is calling and invoking of function so uh when I called the function here double an integer okay it is called the calling of a function so calling the new function inside the main function is the calling of a function and how how can I do that we have to just write the function name and pass the argument in the parenthesis okay so I guess now we have completed it with the function in the previous videos we have learned about functions in Cotton so before proceeding further I would like you to solve the problem this this problem which says that write a function which Compares two numbers and return the maximum of two so uh one way of doing this is using IF else statement and the control statements so we don't know that for now so what we will do is we will use a function Max in kotlin dot math dot Max Library so how to access this library and this function so for accessing this library and this function what we will do is we will import the library so I'll use the keyword import and then write the name of the Library kotlin dot math dot Max now the library is successfully imported so what this Max function does is it takes input of two integers and Returns the maximum of the two okay so I'll just go ahead and create a main function and then outside the main function I'll just create a function and name it as maximum now what would be the input of this maximum function the input must be two integers so I'll name the integer one as a and the integer 2 as B so I have provided two input to this maximum function now uh what would be the return type of this function so the max function provides the maximum integer out of two integer so the return type would also be an integer now I'll just use the math function Max function which is Max of a comma B okay so inside the main function I will go ahead and print the maximum and maximum of 13 and 25. okay so when I run this program what I will find is it prints the maximum of 13 and 25 which is 25. okay so uh kotlin has many such libraries which would be used further and it would make our task very easy instead of using long codes I just used a library and its function and it become it became very easy okay so the code is compiling and it is starting okay so I have run my previous code in just a second I'll run test.kt and yeah it prints 25 which is the maximum of 13 and 25. okay moving further just I will comment it out okay moving further in this video we are going to particularly particularly focus on arrays so arrays in kotlin are mutable but have fixed sizes so uh suppose I declared an array of let's say four elements so it it is going to be of four elements at every time we cannot add or delete an element from it although we can change the element change any element from an array so data structure that contains a group of elements mostly of same data type are arrays okay so it is not a boundation that the the data the elements must have same data type but yeah mostly the elements have the same data type commonly used to organize data so why are arrays used basically when I have 20 integers suppose let's say so I have to store 20 integers in one variable so what I'll do is I'll create an array so in that way the data is more organized now the string is an is a collection of characters or we can say that it is an array of characters okay so it is different characters and they are combined together so it can be also called as a array of characters so what is the syntax of uh creating an array so just like we create any variable we use the where or well keyword and then we will give the name of array and naming array is same as naming a function or a variable okay then we will write the funk keyword array of and we will specify the type if any and then we will write the elements okay so now let's just go ahead and create an array so I'll write about where array 1 and I'll write the keyword array of now uh suppose I have to create an array of characters so I'll provide the type care and now I'll provide the elements so I'll provide a B C d e okay so we have now successfully created an array which contains five elements and all the five are the letters a b c d and e okay so uh what if I have to create an array which contains a integer a character uh and a string and uh and a Boolean so I'll just go ahead and create an array of all type of all type so I have named it and I'll just use the Crea function array of and I'll just so it contains an integer and double and Boolean character and a string so away the variable array of all type is an array which contains an integer and an a float Point number a Boolean character and a string okay so uh now we have now we can successfully create any array moving forward in kotlin once you declare any array you can only change the content of the array and not the size as I mentioned earlier so the size of this is fixed until and unless I have changed the size from here okay the size is fixed I can change the elements of an array however but I cannot change the size of the array okay so now let's just copy this code and just understand that okay so the code says that there is a variable array 1 that is an array of a b c d and e okay and there is an array 2 which is a value and that is a array of E F G H and I okay so when I do array 1 is equals to array 2. so array 1 is a variable and that can be uh reassigned so that that that is reassigned a value of error 2 so that can be done but this this line shows an error why this line shows another because array 2 is in value so we cannot reassign a value okay so that's why it shows an error moving forward uh so yeah there is a value array too and which contains the elements E F G H and I so however we cannot reassign the array to we can change the elements of array 2. this is a major point to note okay so we have already understood array with different data types okay so arrays are mutable but have fixed sizes as I already said and so uh what if I have to print any element of an array so suppose I have to print the third element of array one so what I mean by Third element is the the first element the a is the zeroth element okay as as we've done the indexing in the string similarly the indexing is done in the arrays so when I have to print the third element of array 1 what I'll do is I'll just write array 1 and open a square bracket and write 3 here and when I run this code we can see that the third element of array 1 is printed okay and there is a problem okay so uh when I run this program we can see that the third element of array one so what what happened here is I reassigned the array one as array 2. so the third element of array two is printed here e is the zeroth f is the first G is the second and H is the third so I'll just delete this code and again run this code so I'll find the third element of array 1 that is D okay so now what if I have to reassign the the third element of array 2. so we will try it on array 2 because array 2 is a value so I'll just type array to so I'll just reassign the zeroth element of array 2 as a string 3 assigned now it shows an error so what error this is what that there is a type mismatch so it was an uh it was in character and now we are reassigning it as a string so that is not possible in kotlin so what I'll do is I'll just reassign it with the character and now I'll print the first element of array the zeroth element of array 2. so now when I run this program I can see that R is presented so even in a value even in a value of an array the the the element of an array can be reassigned even if it is a value not a variable okay so that's all for this video stay tuned for in the previous video we have discussed about arrays in kotlin and in this particular video we are going to learn about arrays of strain okay or an array of strings so uh I'll just go ahead and create a main function and inside the main function I'll just create a variable string named string array and so if you remember for creating an array we have to use array of function and if we have to specify the data types we will use the less than and greater than sign and then we will use the open and close parenthesis and inside the open and close parenthesis we will use the the things that we have to add to this okay so I'll just create a string the array of string containing some strings so I'll just write High this and again a string is and again a string programming knowledge okay so uh it is a string it is an array of string containing four strings okay so specifically it is called an array of strings so what if I have to get a particular uh at a particular index so what if I have to get the string at a particular index so I can use a function that is the name of string that is string array and then Dot get and then open and close parenthesis and then zero okay so what this function get does it does that it just gets the in particular string at the particular index mentioned so when it shows a green line so when I go to it and hit alt plus enter it shows that replace get call with indexing operator and when I hit enter it chooses the open and close square box square bracket so the get function is the same as the square bracket that we used in the previous video okay so now if we if I just skip that and okay and uh so what if I have to change the change the string at a particular index so as I mentioned in the previous video what I have to do is write the name of the string that is the write the name of the array and then use the square bracket and if I have to change the string at the zero index so I will just right here hold up okay so uh it changes the string at the zeroth index okay so when I print the string array what it does is so what happens when I print the whole array instead of printing a particular particular index of the array so it prints the this thing it prints L Java Lang string semicolon and this is an address so when I String when I print a particular array it it shows that it it is an array of containing strings and it shows its address that at this address the string is stored but it does not print that array so I'll just go ahead and print the zeroth element or the a string at element at index 0. so we can see that the string at particular index has changed now what if I have to get the size of an particular array so for getting the size of a particular array is we use the function dot size so I will just print write the print statement and then I'll write the string name sorry the array name and I'll just write dot size now when I run this program this the seventh line prints the size of an array okay and we can see that the size of an array is size of this array is 4. so that's correct now what if I have to make a whole string from array of string like I have to make this a particular string so I'll just name a value that should be string and make that equal to so I'll just write the array name and I'll just type the function that is content to string now the string variable is a string that contains the the content of the string array convert it to a string okay so content 2 string is a function that converts a an array to n string now let's go ahead and print this string okay so when I run this function it prints hola this is programming knowledge but it shows that as an array why because we have converted it to string and string should be the value string should be n string so it is in string but when I print this and also we can note that I have left spaces here so it also left leaves spaces here so whatever I not leave spaces here so it automatically detects that that it should be a string with four different words or four different string so it automatically leaves the spaces out of there so when I want to print a particular string particular array of string so I'll just instead of doing all this I'll just um write the print statement and in the print statement I'll write the string name and then content to string so when I write only the string array it does not print the array it prints that this is an array and it contains it contains string and the location of the array is this the location at which the array is stored is this so for printing the whole string array we use this okay so that's all for this video stay tuned in this video we are going to cover the if else statements in kotlin so if you don't have any particular idea about if else statement what NFL statement does is it checks and it it checks in condition that if this condition is true then it goes to the particular body and then perform some operation and if that condition is not true it just skips the whole body and goes to the else statement and then it performs the operation mentioned in the else statement so it basically is like if this is true then this then do this and if else do this okay so uh we will just go through the syntax of the cell statement so it is the block body of an FL statement so when I write if some condition and then I'll so I'll write if is a keyword and then I'll open a parenthesis and write condition in there and I'll close this parenthesis and I'll open curly braces and I'll write function or we can say the operation we have to perform there and we will write we will close the curly place and we will write the the keyword else and then we will open the braces and then I'll mention the operation or the function or the code that I have to perform and then I close the braces okay so this is the block body now I'll go ahead and create a main function and outside the main function I'll create a function named block body because there are three types in which I can determine the if else statements so I'll just go one by one so for Block body so we will take an example of finding a maximum from A and B okay so we will have to give the input a integer and B integer and the output the written type of this would also be an end because it Returns the maximum so moving forward so I'll write the block body of fl's statement here so if a is greater than b okay then what happens is so I'll just create a variable also here that is called max value okay so when a is greater than b what happens is when a is greater than b the maximum value is a okay and else when so else B would be greater than a so the maximum value would be B and we would return the maximum value which is Max value okay so when I go in the main function and call the a block body function and find try to find the maximum of 23 and 45 and run this function so it should be printing the so it should not print anything because I haven't mentioned the print function so when I mention the print function here also and run the function again so it should mention here 45 okay and it is correct so this might have give you this might have given you the basic understanding of the if else working okay so if a is greater than b then the max value should be equals to A and else if a is not greater than b else the max value should be equals to V okay so now I'll go ahead and give you the idea of expression body so what is expression body so also in this I will be printing the maximum of the two so I'll just mention the A and B integer and the return type as in now in the expression body I mentioned the variable variable a max value and give it a value of f so here only I start from F function so if a is greater than b then the max value is a and okay a and else the max value is B now we can see that okay I have to also return the max value so now now we can see that we have assigned we have defined a variable named max value that is equals to if a is greater than B that is equals to A and else that is equals to B so this is called the expression body so now if I replace the block body with the X expression body and run this again so it should be working fine and it should print 45 so yeah it is working fine so if if you see this type of code written anywhere it is also an if else statement now there is another type of file statement that is a also short shorter than this and it is also called short so now I'll just mention a function short it will also be comparing two integers so I'll just initialize the function now it should be equals to no before that okay I should open it and I'll just return already written if a is greater than b K is greater than b foreign and else written B so now we can see that we have directly mentioned the written function and written a if a is greater than b and written B if a is not written only so what it it means that okay so instead of expression body when I mentioned short and I run this function I run this code I can see that the answer is again 45 so in this video we have learned about the block body the expression body and the short of if else expression and we have um a pretty thorough idea about the if else statement okay thank you then in the previous video we have uh we have seen that what happens if we use an apple statement so if we have some condition we use an apple statement so what about if I have multiple conditions like if condition 1 is 2 then I have to execute particular code and then if condition 2 is true then I have to execute a particular code and then if condition 3 is true and then I have to execute a particular block of code so this can be this could be done via an else if keyword okay so what I'll do is I'll just create a main function and inside the main function I'll create a variable that is equals to 5 and what I'll do is I will create some conditions such as if I is equals to 5 then I have to print that I is 5. okay and then again else if I'll use the keyword else if and then pass the condition if I is equals to 4 else if I is equals to 4 I have to print I is 4. okay so I can do that and there could be as many number of fl's block as required so I can use like here as many if else block I required else if block I required so I'll just make that I is 3 okay then again I'll use the keyword else if I is equals to 2 then I have to print that I is 2 then again else if I is equals to 1 then I have to print I is 1 okay so at the end of the uh if else a blog or else if block uh we should most end with end it with a uh else statement so like what I am trying to say is else block is optional as said for equal statement so we can skip the else Block in if else statement as well as when we use the if else ladder or the lcip blocks okay so I can here include the else statement or I can choose to skip that print I can choose the else statement like print I is not in not in one to five okay so uh I'll just change the value of i26 and then run this program so the so we can see here that the output is I is not in one to five as mentioned in the else statement so when I change the value to 5 it will print that I is 5. so the conditions are evaluated sequentially from top to bottom and if a condition is evaluated as false the condition the execution continues with the evaluation of subsequent condition okay so from here the the we enter in this code and we enter in this equals ladder so the first condition is evaluated and if the first condition is true then we get out of the if else ladder and if the first condition is false we evaluate with the subsequent and this or the second condition okay and if the second condition if the uh and if any condition is true the corresponding block against the statement is executed and we are out of the fs ladder and if none of the conditions evaluate to two runtime minutes runtime executes else block and that too if else block is present so as I change the value of i26 the else prox else block get gets executed because um every condition is false in that particular case so that was if else ladder cotton if else later so we can see here that the ID is underlining this with a green so uh what it's what it is saying when I hover over it it's saying that Cascade if should be replaced with when so don't you think that this code is a little bit of redundant like we are using LCB elsewhere else if a lot of times and suppose that I have 20 conditions so then I have to repeat 20 if else relative blocks so when I go to if a statement and it shows that we should use when so now we will move on and study the keyword when so instead of uh doing this I'll just comment it out what I can do is I can use the keyword when and then and then what to Checkers so like I'll just open parenthesis and write the variable that I have to check okay so when I okay and then I'll open this code and then I'll provide the values of I and if I is 1 okay so then I'll uh just use hyphen and integrate greater than sign and then I'll open a code block and then I'll write print value I is 1. okay so what this when block does is when I went enter this when when statement uh it assigns a condition that when I is 1 okay so when I write uh below that two and then I open a code block okay so whatever what it will do is it will pass the pass it will execute this statement when I is 2. okay so like this is just one liner code so I have to write just print code so I will not use the curly braces I'll just type that when I is 3 printed on I is 3 okay when I is 4 print Ln IES 4 and when I is 5 print Ln is 5 okay so after all of this what I can do is I can just use an else statement so what if any of this is not true like I is not equals to 1 2 3 or 4 or 5. okay so I'll just use l statement and I'll I'll also have to use the hyphen and the greater than sign for that okay and I can use the curly brushes if I want and I can write that I is not in like this not in one to five okay so when I execute this code when I execute this code so I is 5 and then we enter this when I block and then it checks that whether I is 1 or not then whether I is 2 or not then either I is 3 or not so after checking and getting this is false it's exactly whether I is 5 or not so I is 5 in this case and then it prints that is 5 and then it gets out of this when then flow function or when keyword okay so when I provide that I is equals to 6. okay and run this so I have not mentioned here what to print when is6 but I have mentioned that what to print when I is not in one to five which is the else statement so that prevents that but what happens when I it doesn't don't use the else else keyword okay so uh when I don't use the else keyword and the I is 6. what happens is the codes get executed and it is it does not print anything so when else keyword is not required so I don't have to mention else keyword and it is not necessary but it is a good practice as uh if the condition is not true if any condition is not true there is something to execute otherwise nothing will be executed okay so after that uh we have nested effects so what happens if I have uh condition one and condition two so I have like uh condition one is true then I have to check second condition so in that case we use next state Ethans we can Nest an if else statement inside another FL statement when when we say if else in this context it could be if statement or Apel statement or if else if statement okay so uh I'll just use an example for this enlisted effects so if I is 5. okay I'll use to okay if I is 5 and then I have to check that if I is odd or not so that doesn't make sense but for understanding purpose it should make sense so if I is divisible by if if I is divisible by 2 I have to check that so if I divided by 2 is 0. so then I is even so I have to print and then that I is 5 and even okay and I can just do that also but uh as I mentioned that using an else statement is a good practice so else printable I is 5 and odd and I can again use an else statement here that print Helen I is not equal to 5. okay so when I run this function or run this code what I'll find is it prints the statement I is not equal to 5 because I have mentioned that I is equal to 6 I'll just go ahead and change the variable I is equals to 5. and then again run the statement okay so I can find the output is um I is 5 and odd because I is 5 by Naught okay so uh here you can see that I have nested an FL statement under NFL statement okay so if this is the case then I have to check that if this is the case or not and if this is not the case then I have to print this okay so this is the example for nested if else and in this video we have covered what is nested appears what is if else ladder and when to use when keyword thank you for watching this video and in this video we are going to use the logical operator with if else so what are logical operators logical operators help us make logical decision so logical operators are basically of three types logical or logical not or logic and logical and so uh the result of any logical operator is always an Boolean value okay and logical operators are mostly used to evaluate two conditions so uh I'll just mention the logical or operator so we will use this sign for logical or operators and for logical and operators we will use the Ampersand two times and we will use the this sign for logical and operators and for logical not operator I'll use the exclamation mark so let's just go ahead and understand about these objectives so um I'll just create a main function and then inside the main function I'll create a if if block so I have to evaluate a condition like if this is true or that is true okay so if I is equals to 5 before that I have I have to just mention the variable I is equals to 3 okay so if I is equals to 5 or I is equals to 3. okay in that case I'll print that I is I is either 5 or 3 okay so that is the basic meaning of an or operator okay so when I use an or operator um what it does is it checks the first condition and it saves the second condition Also let's let's say that first condition is I equals to 5 and second condition is I is equals to 3. so when I use the or logical or operator if the first condition is true and the second condition is true then the output is also true and if the first condition is true and the second condition is false then also the output is true if the first condition is true and if this first condition is false and the second condition is false then also the output is true and only in the case when both the conditioner false then only the output is false okay so let's just go ahead and run this program and get a better understanding of what I said Okay so here I is 3 3 so this is 2 and but this is not but you we can see that the output of this this condition this condition as a whole is true so I'll just go ahead and change the value of is4 now I can see that both of the conditions are false so it's just it does not go into the if block and just skips that it is because the the both conditions are false then only the uh the code does not get executed okay so I'll just go ahead and create a new variable a and give it that value as 5. now uh I'll use the end operator and logical operator okay so if I is 5 and a is Faith then print I is 5 and a is 3. okay now uh just we will just understand this so what is an logical operator so it it should it should say that um the my condition 1 should be true and my condition 2 should be true okay so here my condition 1 is is 5 and the karma condition 2 is a is fine so when both conditions are true then only the output is true now suppose any one of my condition is false and another condition is 2. then the output of this is false because when I check this that I is equals I should be equal to 5 and a should be equals to 5 but when I is not 5 and a is 5 uh the if if block is not executed because when I use the end operator if block is only executed when both conditions are true okay and if both conditions are false then then also it will not get executed so when I run this program I can I can predict that it does not get into the if if block and yes it does not get into the if block so I'll just change the value of I is 5. and I can see that okay so my bad and yes the if block gets executed when both conditions are true so that was about the N logical operator now what about the not logical operator so when I use the note of uh logical operator like uh you you can remember when I was covering operators I used exclamation mark equal to that represents not equal to okay so when I use I not equal to 5 and I change here I 7 so the if block will get executed here because I is not equal to 5. as simple as that okay so the logical not is used to negate the condition whenever the condition is true the output is false and whenever the condition is false the output is true okay so um like till now we have covered The Logical operators in if else and the if else ladder the nested effects okay in the next video we will cover another topic and in this video we are going to learn about the in operator in kotlin language so uh to study the in operator uh we I would like to consider the example to declare a variable and check if it is it lies within a specific range okay so I have a main function and inside the main function I will create a value n is equals to 5. and I have to check that if the values lie in 1 to 10 or if the value is lies in to 11 to 20. so I'll just create a if statement if n is greater than 0 uh or I can say that greater than equals to 1 and so I'll just introduce the logical operator and and should be less than or equal to 10. okay so if that's the case then I should print that n is in 1 to 10. okay and else if um n is less than n is greater than equals to 11 and N is ah less than equal to 20 so I have to print that and is in is in 11 to 20. or I can introduce an else statement as well which prints that and is not in 1 to 20. okay so when I go ahead and run this function or this code what I'll find is the the function checks if the variable lies within a specific range okay so our variable or the value n was equals to 5 and it lies in 1 to 10. so just if we let the code to finish okay so it prints that analyzer n is in 1 to 10. okay so when I see the code it underlines this with a line okay so when I hover over it and hit alt plus enter it says that convert to a range check okay so when I click on that it it prints n in 1.10 okay so uh the in operate this is the in operator uh we are going to study okay so instead of uh this whole thing n is greater than 11 and uh logical operator and N is less than equals to 20 what we can do is we can use the in operator okay so what in operator does is in the in operator the hydrates or I can say um checks the in the range okay so what I can do here is I can just write n in 11 dot dot 20. so it automatically uh introduce this signs and it states that and we will check n in 11 to 20 and both will include the equal to sign okay so instead of using now when I see the if statement it also uh is underlined so when I hover over it it shows that Cascade F should be replaced with when and when I go uh on it and hit alt plus enter it shows replace if with one and then I hit enter it replaces it with the when statement okay so the kotlin or the I can say the intelligent idea is very useful and it suggests most of the things to make the code easier and readable and less redundant okay so that was it for this video stay tuned and in this video we are going to study about the loops in kotlin so before studying the loops the first question that should arise is why are the loops used or why should we use the loop so when I have to print the numbers from 1 to 10 uh or I have to print uh a variable that is I and increase the variable after each print statement so what I can do is I can write a variable that is equals to 1. okay and then I can write a print statement to print I and then I can increase the I okay and I can repeat the same block of code again and again to execute the statement okay so if I said if I said I have to print all the natural numbers from 1 to 10. so firstly I have to repeat the particular block of code again and again and I cannot know where to stop or I have to manually count the number of iterations so uh like I have here you written the code and it prints all the natural numbers from one to five so this is a redundant coat and it requires a lot of lot of like I have to count the the number of iterations and it is a redundant code so uh what could we do to make it less redundant and short code and organized code so we can use Loops instead of repeating the same block of code again and again so what is a loop a loop is something repeating itself okay so when you listen to song you put them on Loop so what it does it it it repeats the song after the song is completed okay so there are three types of looping Loops in kotlin for Loop while loop and do while loop so let's say we want to print all the natural numbers from 1 to 10. okay so firstly uh we can see what is the Syntax for for Loop so the syntax is 4 and here is the condition and then the loop starts okay and then the code ends and between this there is a particular code sequence that got that gets repeated in each iteration okay so we use the keyword for and then we introduced some parameters that checks the the condition and increase the iterator and initialize the iterator okay and then at the end we close the curly braces and the code inside the curly braces gets repeated at each iteration okay so let's say we want to print all the natural numbers from 1 to 10. okay so we know that Loop repeats a particular code sequence now we also need something to count from 1 to 10. hence a counter is needed that must be incremented incremented at each iteration okay so as we have already discussed the Syntax for for Loop let's go ahead and make a code to print all the natural numbers from 1 to 10. okay so I'll write for now remember we have learned about the ins in in uh statement in kotlin so I will introduce the iterator here okay so for if it is not initialized outside the for Loop it is okay so I'll initial I'll initialize I here and use the in operator okay so I in now 1 to 10 okay as I mentioned if I have to uh for particular condition 1 to 10 I use the in operator and the two dots okay so for I in 1 to 10 okay and then I have to just go ahead and print I okay so when I run this function or on this particular block of code I can see that it prints all the natural numbers from 1 to 10. okay so uh there are some points that I would like to point out like for in the for Loop there is no need to initialize the iterator as I already mentioned and there is no need to increase the operator in for Loop okay so you can see that I haven't have not write the I plus plus here okay because when I write I plus plus here we can show we can see that there is a error and it shows that well cannot be reassigned so whenever I enter in the for Loop I very value I is created and it is assigned the particular number that that the loop is giving going on okay so it is a value not a variable in for Loop the I although its value changes after each iteration but it is a value not an variable okay so the default increment of an iterator is one so as you might have seen that uh iterator after each iteration increased by one not by two not by three so whatever I have to print all the odd numbers in 1 to 20. so then I have to um iterate I in 1 to 20. and I have to also increase the iterator by two so for increasing the iterator by 2 we need to use the step function so I'll just write here step two now what the step function does is it increases the height requirement so when I go ahead and run this function we can see that after each iteration the iterator increases by 2 and hence prints all the odd numbers from 1 to 20. okay now whatever I have to uh print all the natural numbers from 10 to 1. not from 1 to 10. so you might think that I can write here 10.1 okay so when I go ahead and run this function you can see that it just exits it just exits with uh core zero okay why why why it happens because at the particular point when it enters the for Loop it is assigned the it is checked that if it is in 10 or 10 to 1 okay it must be greater than or equal to 10 and less than or equal to 1 so there is no integer that is greater than equal to 10 or less than equal to 1. okay and I would like to mention one thing also whenever I Define anything like this okay I just mention it 11. so whenever I have defined anything like this the by default um value assigned to I is the first value here okay so in this case the by default value assigned to I is 10 now getting back to our original question that what if I have to print all the statements from 10 to it so I'll use the down to function so for out I in 1 I in 10 I in 10 instead of the two dots I'll use Down 2 and 1. so in this we can see that the I should be less than equals to 10 and greater than equals to 1 so now when I go ahead and print this uh we can see that it prints all the natural numbers from 10 to 1. so that is about the down to function okay so in the next video we will see about the while and the DUI loops and cotton this is all for this video thank you in this video uh we are going to discuss about the while and the do while loop in kotlin okay so in the previous video we discussed about the for Loop and cotton and the basic idea of loop so Loop is used in programming to repeat a specific block of code until certain condition is met okay so Loops are what makes computer interesting machine imagine you need to print a sentence 50 times on your screen you can do it by using a print statement 50 times or you can use loops so we will start with the while loop and firstly we will discuss the syntax of the while loop okay so for while loop we will first write the keyword file and inside and open a parenthesis and inside the parenthesis we will write the text expression or I can say the condition okay so when the condition is true uh it enters the the code block and there is a code sequence and after this there is a we close the parenthesis okay so the curly braces okay so um whenever the text expression is true it enters into the code sequence and the particular code sequence is repeated okay so test expression inside the parenthesis is a Boolean expression if the test expression is evaluated to true statement inside the while loop are executed then the test expression is evaluated again this process goes on until the test expression is evaluated to false if the test expression is evaluated to false while loop is terminated okay so uh now we will take an example of while loop in which we will print um line five times or ten times okay so uh I'll in the main function I'll just introduce a variable so unlike a for Loop we have to initialize and increment the variable in while loop okay then I'll use the while keyboard and while I is less than or equal to 10 okay I have to print I and at the end of the loop I have to increase I also okay I have to increment the value of I if I have not incremented the value of I the the Y Loop couldn't have ended okay so when I run the program the output is okay so when I run the program the output is okay instead of I is 5 I have to make I is 1 and when I run the program the output is one two three four five six seven eight and ten okay so notice that plus plus I statement yeah or I plus plus statement inside the while loop okay so we have incremented i at the end of our loop after 10 iteration I will be incremented to 11 okay so if I uh print the value of I here so I would be equal to 11 at this particular case Okay uh so it goes back to the test rate test statement and the condition I is less than equals to 10 is false okay so therefore the loop terminates so if the body of loop has only one statement uh it is not necessary to use a curly place as we did in the if and the uh when statements so now we will move forward to the do while loop so the Syntax for the Dubai Loop is uh there is a so we will firstly write the do okay I'll just remove this we will firstly write the do keyword and then uh and then write a code sequence and after this we will end this and after this code sequence I'll write while file keyword and then here I will write the test expression okay so we will first discussed the that how do while loop work so the code inside the body of do construct is executed once without checking the test expression then the test expression is checked if the test expression is so the code is executed once and then the text expression is checked okay so if the test expression is evaluated to True code inside the body of the loops are executed once again okay and the test expression is evaluated again the process goes on and on until the test test expression is evaluated to false okay so when the test expression is evaluated to false do while loop terminates so what is the main difference between while and the do value is in do I Loop the code sequence is executed at least one time and even if the test expression is false okay as not in the while loop because in by Loop it will first check the condition and if the test expression is false it will just go on to the it will just terminate the loop okay it will not go on in the body of the loop so now we will go ahead and try the same with the do while loop and print the natural numbers from 1 to 10 so I'll write do and then in the code sequence I'll write print statement and before writing the print statement I have also I have to also initialize a variable that is I and then inside the print statement I have to print the variable and increment the variable because if I had not incremented the variable the loop will go on and on and on and will not stop okay so then I'll use the while keyboard and inside the while keyword I'll write I is less than equals to 10. okay and then when I run this program I can find that the output is 1 to 10 okay so now what if I had not incremented this and I had just used the print statement as I mentioned the loop will go on and on and on and it will not stop on its own so now what to do if the loops goes on and on so in the command prompt you will just do control plus c okay all you can do is terminate the loop from here the stop okay so take care in mind that the loop will not continue to infinite and mention the increment statement here so till now we have covered about about the loops and basic example not I I will not say example we have just learned the syntax from here okay so you might have a pretty good understanding of loops okay thank you and in this video we are going to learn about the break expression in kotlin okay so uh suppose you are working with loops and it is sometimes desirable to terminate the loop immediately without checking the test expression okay so I have to terminate the loop at some point so what I can do is in such cases I can use the break statement okay so I'll just go with the random example like I I started a loop and uh if the something occurs then I have to break the loop okay so then I have to use the break statement for terminating the loop without checking the test expression okay so the break statement terminates the nearest enclosing Loop when encountered without checking the test expression okay so how break works it uh it is almost always used with if else statement okay so I'll just introduce you with the syntax of this break so what what I will do is uh in the for there is a for Loop okay in which there is a for Loop in which if there is some test expression if there is some test expression then I have to break the loop I have to terminate the loop so I'll use the break statement okay and I'll use okay so if test expression is evaluated to True break is executed which terminates the for Loop okay so uh now I'll go explain you with an example so I'll create a main function and inside the main function I'll create a for Loop which iterates from 1 to 10 okay and in this if I is equals to 5 if I is equals to 5 then I have to terminate the loop okay so I'll use just the break statement here and I'll print Ln I just to know that what is happening in the loop so when I go ahead and run this function what I can see is the the what I can see is one to four is printed so uh when the value of I is equals to 5 okay so we enter in the for loop I is assigned value equals to 1. and then it checks whether the I is 5 or not so I is not 5 then it prints I and then in it increases I equals to 2 and then it again checks that if I is equals to 2 or 2 5 or not so it is not equals to 5 and then again it prints the value 2 as soon as the I as soon as I becomes 5 in the for Loop inside if is evaluated to true and break is executed this terminates the for Loop okay so um what is lab so we will move ahead and learn about labeled break in kotlin so what we have learned till now is an unlabeled from form of brick which terminates the nearest enclosing Loop there is another way to wave break can be used to terminate desired Loop okay or I can say the two terminate an outer loop so how does a label break works okay so there is a um there is a while loop in in a while loop and there is a so there are basically two loops okay so label in kotlin starts with an identifier which is followed by an at the rate okay so here uh when I I okay I can make a code for that syntax okay so I can make test at the rate while and there is some test expression and inside this while loop there is some codes and inside this with the codes there is another while loop which contains another test expression and this while Loops contains some codes and with this code it contains an if statement and there is a condition to break in this if statement and if this condition is true uh what it does is it it will break and I'll use the Ampersand sign and then I'll write test okay so now I will go ahead and close all the parenthesis now here is one and here is another okay so now we will understand the syntax so here test at the rate is a label marked at the outer while loop okay so this is the outer while loop and test at the rate is a label marked at the outer while loop okay so now by using break with a label uh test at the rate break at the rate test in this case you can break a specific Loop so uh as soon as my condition to break is true inside the while this while inner while it will break the test this outer loop okay so what if I had not used the test test so it will break this while loop okay it wouldn't have break the outer while loop okay so it would be more clear with an example if it is not clear till now I'll use First as an identifier for a for Loop which iterates in 1 to 4 1 2 4 and inside this for Loop there is a another for Loop and I'll just I identify with the SEC o and the second and I'll use at the rate and there is there will be another for Loop and I'll iterate it in one to two okay so inside this second for Loop I'll write a print statement just to know that what is the status of the loop so you must remember about the the string templates okay so I am going to use everything I have said till now okay so I is equals to I'll use the amps and sign a dollar sign and DUI so this prints the value of I okay and then semicolon semicolon J is equals to dollar J okay so the semicolon is going to print and I is equals to the value of I and J is equals to the value of J so I am just going to put into the value okay so if the value of I is 2 then I have to break the first Loop okay so I will use the break statement and use the at the rate and mention first now if I run this code okay I can see that I is equals to 1 and then J is equal to 1 then Isaac 4i is equals to 1 day is equals to 2 okay so let's just see what is happening right okay so we first enter the for Loop the first for Loop okay so there I is assigned the value 1. then we enter the second for Loop and there J is assigned the value 1. okay then the print statement is executed and I and J both with the value 1 is printed and the statement if I is equal to 2 is executed and as I is not equal to 2 it is 1 it is false and then it continues with the second for Loop okay for I is equals to 1 this Loop is executed two times because j i iterates in one two two okay then for I is equals to 2 okay so when this exit this is executed two times we reach the end of this Loop the first Loop and then I is incremented and I is equals I becomes two now uh it enters the second for Loop and for uh the I equals to 2 J is assigned the value 1. and then the print statement is executed and value of I is equals to 2 and J is equals to 1 is printed and after that the if statement is executed and when I is equals to 2 x expression is evaluated to True break at the rate first is executed which terminates the loop marked with label at the rate first okay or first at the rate so it terminates the first Loop now uh what if what if I have to break the loop as soon as I become 2 and not when after printing J okay so I I have to just remove this statement so I can just uh copy and cut and paste it before the print statement so before the print statement the first Loop is going to be terminated and hence the third print statement is not executed so I can just do a little variation in this program okay in the previous program so instead of break at the rate first I'll do break at the rate second now when I run this program okay when I run this program I can see that I is equals to 1 I is equal J is equals to one so the whole Loop is executed no the whole Loop is not executed since break statement is used to terminate the innermost Loop of program okay so the second Loop of program I have broke so when I I was to when I was to J was one okay so that was printed I was two J was one and then the condition was evaluated and the second Loop was bred so it it reached the end it reached to the end okay and at the end of this uh the the iterator for first Loop that is I is executed okay so uh if I have to um like code for this I need not write first advert or second at the rate because um foreign statement as it is is for uh terminating the innermost Loop okay so if I had not right at the rate at any point it gives me the same output okay so that was it for this video thank you in this video we will see what is uh continue in kotlin continue in kotlin and then we will see an example uh to calculate the sum of N natural number using for Loop okay so uh what is continue and in which cases continue is used so suppose you are working with loops and uh sometimes you want to skip the current iteration of the loop okay so in such case continuous use the continue construct skips the current iteration of the enclosing Loop and the control of program jumps to the end body of the loop okay so let us now see that how continue works so yeah uh it is almost always used with if else construct so for example there is a file some X test expression and test expression one I can say and then there is a loop which has some code this one okay and then after some set of code there is a statement that if test expression 2 is true okay uh then I have to I I'll say I have to continue and I'll just end the loop here and then the if statement here and there is some another block of code say code two okay so what is happening here okay I'll just end my while loop okay so what is happening here is uh if the test Expression 2 is evaluated to if the text Expression 2 is evaluated to True uh continue is executed which skips all the cores inside the while loop after the iteration which is the code to block okay so uh like uh there is some code one that is going to be executed after the while statement and then if the test Expression 2 is true then it is going to go to the end of this wild block and skip the code too okay so uh and if there is something with the if there is a do do while loop okay so there would be a do by Loop like do code one if it has Expression 2 is 2 uh continue and then there is another set of code and there is a then there is a while statement while test expression one so now what what happens when when the test Expression 2 is true that the the container is going to be called and then it is going to be skipped to the while statement and then the test expression one is going to be checked and then it if it holds true then it will go to the uh do Loop okay so let us go through the example of continue in kotlin over okay so uh Suppose there is a for Loop uh from one to five and uh if I is if I is greater than 1 or less than 5 yeah if I is greater than 1 and less than 5 we have to continue okay so I'll just uh writes the code one main thank you for I in for i n one two five and then if uh okay I I'll include print Allen um I always printed Okay then if I is greater than 1 and I is less than 5. okay which is equal in all case except when I is 1 and 5 okay so in this case I will say that continue okay and then I'll again write a print statement which says print Ln uh dollar I not always print okay so when I go ahead and run this program what I can see is when when we run the program um okay so when we can when we run this program it says that one always wanted one not always printed two always printed three always printed four always printed five always printed and then five not always printed okay so when the value of I is greater than 1 and less than 5 continue is executed which skips the execution of this this this code print Ln I is not always printed okay however the statement this this statement print Ln I is always printed is executed in each iteration of the loop because this this statement this extra this statement exists before the uh continue construct okay so now now we will see a some uh like real life example of it so let's say I have to uh I have to calculate the sum of positive numbers only so uh before that we will calculate the sum of first and natural numbers okay so for calculating the sum of first and natural numbers uh the the what we can do is we can use a for Loop or any kind of loop okay so uh let's say I I have to make a program using the for Loop so I'll write the code and explain okay so let's say uh I I'll I have I am declaring the variable num and I am giving the value of 100 okay so I have to calculate the sum of first 100 natural numbers okay so there is a value and uh let's say there is a variable sum which is initialized as 0 for the in the starting okay so for I in 1 to num okay so I in one to num now what what uh what are we going to do is I'll I am going to uh do sum is equals to sum plus I okay so I am going to add I in some and equate it with it so uh in order to write the code of it sum plus equals to I so this is the sum equals to sum plus I so now whenever the loop iterates every time the particular number is going to add with the sum okay so at the end I'll print the sum so uh I'll print sum is equals to sum now when I run this program I should see the uh sum of first 100 natural numbers so the sum of 400 natural number is uh five zero five zero okay so uh now I have to calculate the sum of only positive numbers from 1 to 100. so now I have to do make some changes in this program so what I will do is uh I'll this this block of code is fine okay so uh there is some integer and okay so uh from 0 to 100 I have to calculate the sum of uh positive numbers only so if before including the sum if the number is uh okay sorry I have to mention here odd okay my bad I have to calculate the sum of odd numbers only so from 1 to 100 I have to calculate the sum of odd odd numbers so if the number is even I have to continue okay I have no I have to skip the last of code so what is the condition for for a number to be even so the condition is number must be when the number is divided by 2 the remainder must be 0. okay so when the number is even I should continue and now when I run this program okay so if I if I should be even then I uh when divided by 2 the remainder should be zero okay so when I divided by 2 and I is even we should continue and when I is not even that is odd we will skip to this block of code and calculate the sum so when I run this program I can see that the sum of odd numbers from 1 to 100 is 2500 okay so that's all for this video stay tuned in this video firstly we are going to see what is the scope of a variable and then we we will cover some ah few examples which which will help you get a better Clarity of all those all those Concepts that we have learned in the particular playlist of introduction to kotlin okay so what is scope of a variable a scope of a variable is its visibility or a visibility of a particular variable within a piece of code so let us understand with it with this with the example okay so suppose uh this is a block when block of code one okay so and then there is a for Loop and then if between in inside the for Loop there is a block of code two so as the variable a is defined in the main function outside the for Loop so the variable a is visible to code 1 as well as the code 2. okay so the code one is this thing and the code 2 is particularly this thing okay or I can say the code one includes this also so basically The Core 2 is the for Loop and uh because the variable B is uh initialized in the for Loop inside the loop body and uh so it is visible to visible only to the code B and not the code one and hence it should be used by this Loop body only okay so the variable B cannot be used outside so I cannot use uh B is equals to 20 here okay when I uh do so it shows an error here because the B variable is not visible to outside the loop okay similarly when I Define a function okay a function outside the main function and I use some variables in the uh the other function so the variables which I have used in the other function are not visible to the main function and the body and the and the body of the main function okay so this is about the uh scope of variable okay so now moving forward uh we will uh write a kotlin program to find a factorial of a particular number of a of a particular number Okay so kotlin program to find factorial of a number so in this program you will learn to find the factorial of a number using for Loop or you can use while loop also and okay so what is a factorial so a factorial of a number n can be given by n factorial and it it is equals to 1 into 2 into 3 into 4 and so on till and okay so uh now we have to think that how should we proceed in this particular question so uh for thinking this uh I firstly I should think that uh one Loop is required okay we cannot manually multiply the number with two and three and four okay also uh the the particular Factor should be multiplied with the I with the incrementer okay so uh in this program we should we should use a loop to Loop through all the numbers between one to the given number okay whichever number has been given and uh the product of each number till the number is stored within a variable it must be stored within a variable okay so as we did in the uh as we did for finally finding the sum so uh initially I'll declare the main function okay inside the main function there is a value num and that is defined time so I have to find the factorial for the particular number 10. now I should Define a particular variable let's say factorial okay variable let's say factorial in which the factorial is going to be stored okay now this factorial uh okay instead of 10 I I'll do it 5. okay so this factorial uh should be equals to 1 on in the starting because this is multiplication if this is if this was a sum as we did in the sum of N natural numbers we would have initialized it with zero because uh it we would be adding something to it now we would be multiplying something to it so we have initialized initialized it as one because anything multiplied to 1 is the particular thing okay similarly anything added to the the zero is the particular number okay now after declaring a factorial variable uh we should decl we should use the for Loop okay so for now from where we have to iterate so I have to iterate from 1 to the number particular okay so from I to the number uh the factorial okay the factorial is equals to the factorial into number okay so uh from starting we can see that uh what is 2 factorial or what is one factorial I'll say one factorial one factorial is one okay now what is 2 factorial 2 factorial is 2 into 1 factorial and what is 3 factorial three factorial is 3 into 2 into 1 and 2 into 1 is uh any basically two factorial now what is four factorial 4 factorial is 4 into 3 into 2 into 1 now what is 4 into 3 into 2 into 1 4 4 into 3 into 2 into 1 so what is three into two into one three into two into one is three factorial okay so I can see that I can say that the factorial is equals to the previous factorial into the current number or instead of number I should have said here I okay that was my fault so um what I can do here is I can just write factorial ah into equals to I okay clear and at the end I should write the print function so print Ln uh fact orial of the number is equals to um factorial so the factorial variable now what I should do is I should run this program okay so what is pi factorial Pi factorial is basically 120 4 factorial is 24. okay so this program gives that factorial of 5 is 120 so we have successfully uh made a program which prints the factorial of a particular number okay so that that is all for this video stay tuned in this video uh we we would do some examples on the uh on the things we have learned okay so what I would recommend is uh you just pause the video when I uh announce the problem statement and then do it by your yourself and then you can play it again and check the solution okay so we would continue with our first example to um count number of digits in an integer okay so uh like there is some integer or a number given okay suppose one two three four so I have to count the number of digits in the number so let's code for that so I'll write the main function and inside the main function uh there is a number and suppose that number is one two three four five six seven okay now uh I'll declare a count I'll declare account and in at every Loop I'll increase the count by one okay so count is equals to zero at the start so uh what is the basic logic behind this like we have to use Loop and iterate the loop until some some condition or something is evaluated to false okay so I I can use while loop I can use any Loop in this but I'll I'll use while loop okay so uh and Counting of Digit okay so at every tens place there is a new digit every tens hundredth place so when I divide the number by 10 so the number of digits get reduced by one okay and when I divide by 10 divided by 10 you know there is no decimal anything taking place because the number is integer okay so when I divide one two three four five six seven by uh 10 the answer is one two three four five six not one two three five six point five seven okay so I'll use while loop and the condition would be number uh not equal to zero okay so while the number is not equal to 0 I'll I'll divide the number by 10. and store it in number or num and I'll increase the count okay so uh what happens here is after first iteration num will be divided by 10 and its value will be uh one two three four five six then the count is incremented to 1. after the second iteration the value num would be um one two three four five and the that is incremented to to after the third iteration the number would be incremented to one two three four and so on so after the seventh iteration the number would be increment after the six iteration number would be incremented to one number would be uh one and the count is incremented to six and again at the seventh iteration the encounter is incremented to seven and the num becomes zero so again when when uh then then the test expression is evaluated to false and the loop terminates okay so I can write a print statement here number of digits in Num is or I can say in um is count okay so when I run this program the answer the or the output should be seven so let's see okay so the number of digits in zero now why it is showing 0 here because we have done all the calculation and num we have divided num by 10 and so on and then num becomes zero so what I will do is I will change here I'll take a value number that would be equal to one two three four five six seven it is the input and then I'll uh introduce a variable num that would be equal to our number okay and now here I can do number now when I run this program I can see that it works on pretty well the number of digital one two three four five six seven is seven okay moving forward in the next example we would write a kotlin program to reverse a number okay so uh what I should do for reversing a number for reversing a number uh I can do is what I can do is I can uh introduce a lot of variables okay so it is not a right choice because we don't know the count of count uh the number of digits in the in the integer okay so what would we do is uh we would first like when we divide the number by 10 okay so the remainder the remainder we get is like when we divide one to three plus five six seven by ten so the remainder is 7 here okay when we divide it by 10. so uh like this is the this must be this would be the first digit of the reverse number so let's go ahead and think as we code so there is a variable number this which is the output which is the input let's say it's one two three four okay so then I'll introduce a variable num which is equals to the number now uh I'll increase the variable reversed and for now it is 0. okay so I'll introduce a while loop while uh num is not equal to zero okay now uh I'll introduce a value variable digit okay and digit this digit is equals to num this is equal to the remainder when num num is divided by 10. okay now this is the uh last digit or the four in in the first iteration so uh the reverse number the reverse pin number would be equals to the old reverse number which is 0 for now okay into 10 into 10 and plus the digit so now when we come to the second iteration so the old reverse number is multiplied to 10 and shifted one bit left side and then the digit is added okay so for from this the number could be reversed and at the end I divide the number by 10 okay so it helps in like when in the next slide question okay so I'll just explain this code once again in this program while loop is used to reverse a number as given uh as uh I'll say uh first the remainder of num divided by 10 is stored in the variable digit now digit contains the last digit of num that is 4. then the digit is added to the variable reversed after multiplying it by 10 so multiplication by 10 adds a new place in the reverse number one place multiplied by 10 gives you 10th Place okay so tenth place gives you 100 and so on so in this case uh reverse contains 0 into 10 plus 4 equals to 4. so num is then divided by 10 so that now it contains the first three digit as is one two three after second iteration digit equals to three reverse equals to 4 into 10 plus 343 and num is equals to 12. after third iteration the digit equals to 2 okay and reverse equals to 43 into 10 plus 2 that is 432 and num is equals to 1 and after the fourth iteration the digit equals to 1 reverse equals to 4 and 432 into 10 plus 1 that is 4 3 2 1 and num is equal to zero now as num equals to 0 the test expression fails and while loop exists exits and revolves reverse already contains the reverse number that is four two three one okay so before running this program I'll write a print statement print the Reversed number is okay now I am in this program I can see that the reverse number is 4231 okay so this is all for this video stay connected and in this video uh we are going to uh do some example uh so in this in the example we will we are going to calculate uh Power of a number using the using the power function and without using the power function so we will calculate calculate the power of a number so uh like uh so through this video uh what we will do is we will practice some Concepts and also I'll mention some things that I have missed or some new functions that are useful okay so uh there is a power function that I will introduce in the later part of this video okay so how to calculate a power of a number okay so Suppose there is 3 to the power 4 so uh 3 to the power 4 is 3 into 3 into 3 into 3 4 times okay so uh 3 is the base in 3 to the power 4 and 4 is the exponent so I'll go ahead and in the main function I'll uh create a value base and give it a value 3 and a variable exponent and give it a value 4 okay and I'll make a result because we have to multiply something in the result uh I'll make a variable result and make it equals to 1 okay if I had to sum it up I I will make it as 0. okay now we have to multiply three four times okay so uh I'll use a while loop okay we have to use a loop that's clear okay so I'll use a while loop and till exponent exponent is not equal to zero okay I'll what I'll do is in each Loop I'll decrease the exponent okay so till exponent is not equals to zero uh I'll uh what I'll do is I'll make result equals to the uh previous result into the base value okay I think that's clear and I'll make it uh into equals to okay now uh I'll decrease the exponent and okay now I think that's it okay huh yeah that's it and I'll just print all in the print Allen though answer is equals to the result so dollar sign and result now when I run this program uh I expect my result to be 81 and yeah we can see that answer is it here so in this program base and exponent are assigned values three and four respectively okay uh using the while loop we keep on multiplying result by base until exponent becomes zero in this case we may multiply uh we multiply result by base four times in total okay so result is equals to one into three into three into three into three that is equals to 81 okay so there is also a pow function so we don't have to do do this all thing we can just use the power function instead of this while loop and this result I can directly uh I can directly write the result as value result equals to uh there is a math library in which there is a power function okay now we can see that there is two double okay so the input that has been given is Con has has to be converted to double Okay then if uh then only it will take it as an input okay so I'll have to convert the base to double and I'll have to also convert the exponent to double okay now I have the uh power function and then base and then exponent so it will calculate 3 to the power 4 okay now when I run this program thank you I can see the answer is 81.0 now I can use I can use whatever the base and exponent I want I can use negative ways as well as negative exponent as well as decimal base as well as decimal exponent so we will go ahead and try that okay so let's say I have to calculate 3 to the power minus 4. so is that possible yes it is possible okay suppose I have to calculate 3 to the power minus four point two five three four three four five okay now uh it is double only okay the exponent is double whenever when I our over it it says double so I can go ahead and remove this two double part now when I run this okay I can see my answer and it must be right so this is the use of the power function okay so in this program we used standard Library function math dot power to calculate power of Base okay we also need to convert base and exponent to double because the power function or the power power function only accepts double parameters okay so uh in this video uh we have covered how to calculate the power of one function using the power function and without the power function okay uh in this video we will write a kotlin program to convert binary number to decimal and vice versa okay convert binary to decimal and device okay so uh if you don't know uh binary is the uh the language that we talk to computers about and decimal is the is the number system we generally use okay so uh the binaries are the are is the number system of zeros and ones okay so in this program you will learn to convert binary number to a decimal number so firstly we will write a program to convert binary to decimal now uh let me create a main function now what we have to do when we have to converter a binary number or decimal number so binary number let's say there is one one so the one at the uh least significant bit has the power took the power to the power zero and at the most significant bit has two to the power 1 so it is 2 to the power 1 into 1 plus 2 to the power 0 into 1 and it is equals to three okay so let's say I have a binary number I'll declare a binary number uh num and I'll declare its data type as long because it could be as long as one one zero one one zero one one okay now I'll declare a decimal number so I'll declare a valued SML and what I'll do is before this I'll uh instead of doing all the calculations here outside the main function I'll make a function which to to convert a binary binary 2 decimal okay now this function has to take something as an input okay so let's say it's it takes input a num and its data type is long okay now after that we have to declare its output output is int okay output type now we start the code block okay now uh inside the code block we have to what convert the binary to the decimal okay now uh so we have to use Loop okay and um like we have to okay so uh the decimal uh base 10 and number system has possible value 0 to 9 for each place value okay in contrast the binary base two number system has two possible values zero and one okay so how to con so for converting this converting a decimal to Binary is like I have okay I have to show like this okay I have one one zero one one zero one one okay so the least significant bit here is uh this uh the most significant bit here is the first one and this is the least significant significant bit so the least significant bit holds 2 to the power zero two to the power zero is one okay and then the next bit holds the value two okay and again the next bit holds the value uh four okay and so on it holds the value 8. now it holds the value 16. okay and this bit holds the value 32 this bit holds the value uh 64. so for calculating so for converting this into the decimal I have to multiply these two so I have to multiply 1 into 1 and then multiply 2 into 1 and then multiply 4 into 1 and then multiply 8 into 0 and then multiply 16 into 1 and then add the whole thing okay so I I guess this is pretty clear how to convert a decimal number to Binary okay so now we will move forward to how to write the code okay so uh firstly I'll declare declare the variable uh num which is equals to the num input that we have introduced okay now I have I'll declare a decimal number which will be our output the decimal number and for starting we will declare it as 0 because we have to add all the numbers okay I have uh introduced earlier that when we have to add all those number we will initialize it as 0 and we have when we have to multiply all all some numbers we will initialize it as one okay now uh I'll introduce an iterator and that would be 0 for starting now I'll introduce a variable remainder remained and data type as its data type as log okay just a second so continuing with the the problem for converting binary okay so it is clear that how to how we can convert um binary to decimal okay so uh after decree declaring the remainder uh I I will run a loop Okay so running okay a while loop so while uh now the number the number is binary okay so uh okay so number is long okay so I will convert the uh long to end and then I'll numb to end and then when it is not equal to 0 till then I have to run this group now inside this Loop uh so I have I'll divide the the uh the binary number by 10 okay so what will happen is um no yeah and the remainder uh that will be uh so when I divide this number by 10 the remainder is the last digit okay so I I'll uh collect the last digit by dividing this number Okay so uh the remainder uh is equals to uh the remainder when the number is divided to 10 okay so now we have the last digit and for continuation I'll divide the num and provide it to the okay so as we did in the previous video we will do and the decimal number decimal number would now be equal to uh the old decimal number so I'll equal I'll give it plus equals to and it will be equal to all decimal numbers plus remainder remainder into math dot pow I'll have to do the power and power of 2 2 is the base 2.0 and the iterator what is happening okay and the iterator uh that is I and I'll convert it to double two double and then I have to convert this whole to end because the decimal number is an integer so to int now I have to increase the iterator and then at the end of this loop I have to return the decimal number okay so what we did in this part of code is uh while the the decim the binary number is not equal to d0 because we have we are dividing the binary number by 10 in every iteration okay so why this is not equal to 0 uh the number the remainder is calculated and the remainder into 2 to the power 0 to the power 1 to the power 2 is then calculated and then multiplied to the remainder and then add it to the decimal number okay so as I have explained this how to con uh the conversion of this and then I have to call this function okay so calling this function I I'll introduce a value decimal decimal that would be equals to convert convert binary to the decimal and then the input would be okay what happened here is uh foreign okay and then I I'll print that number in binary is equals to decimal in the C okay so when I go ahead and run this program oh I can see the output okay the grid is building so I can see here the output is uh one one zero one one zero one one in binary is 439 in uh decimal okay so you can also check that this is correct now instead of doing this whole thing there is uh there is a integer to Binary string method to convert a decimal number into binary okay so what we can do is inside the main function uh for converting decimal to Binary okay so binary decimal this is only the way okay so if if I have to convert uh and decimal to binary I'll create a main function and then inside the main function there would be a number let's say 19. and then i l converting decimal to binary now uh value binary is equals to integer dot to Binary string and then I'll place here num okay now if I print that num in decimal is equals to binary in binary okay so when I run this program I can see that 19 decimal is one zero zero one one in binary okay so that is all for this video uh stay tuned in this video we will learn about multi uh dimensional arrays or we will learn it by an example of uh writing a Content program to add two metrics using multidimensional arrays okay so uh let's say there is a main function and inside the main function there is a value of rows let's say it is 2 and value of columns let's say it is 3 now there is a value and I have to define a array okay so I hope you remember how to define an array now uh the value first Matrix and it is and array of um now array of two small errors okay so uh it is an array of two arrays okay so this is the multidimensional array okay so I'll just Define int array of now let's say two three four now this is a multidimensional array because there are arrays there is an array of different arrays okay there is two errors two three four and uh let's say uh five to three okay I I learned another array uh let's say five to three so the first Matrix is an array of two different Matrix two int Matrix okay similarly uh let's say I have a second Matrix e c o n d Matrix okay so let's say it is an array of uh enter minus 4 5 3 and let's say int array of 5 6 and 3. okay so we have two multidimensional arrays so first Matrix and second Matrix now uh we have to write a program to uh add these two metrics okay so for adding these two matrices uh what I'll do is uh so what is adding off to Matrix if you remember in mathematics the adding if there is a matrix one two three okay okay I have to comment it out uh okay so if there is a matrix one two three and uh four two three four so I I have to add this Matrix within a matrix with a matrix let's say five six seven and let's say uh seven eight nine okay now um what what I will do is I'll add one with five okay two with six three with seven two with seven three with eight and four with nine respectively okay so this is the addition of Matrix now for adding these two Matrix what I can do is I can introduce a variable sum which is equals to the uh array array rows of the int rows X just a second rows of int area and then columns okay so what I did here is uh we firstly uh the two metrics are stored in a 2d array namely first Matrix and second Matrix you have also defined defined the number of rows and columns and store them in variable rows and columns respectively then we initialized a new array uh then we can then we will initialize a new array of the given rows and columns called sum okay so the sum is the given rows and The Columns of uh this the 2 and 3 which is defined okay so the sum is basically int array rows and entire columns okay because uh these array this array has two rows okay and inside these two in inside this there is a two indirect and each entire is contains the number of columns which is three okay so I have defined the sum here which is 2 comma 3 let's say so uh for I in 0 to rows uh minus 1. okay and inside this uh so uh like we Loop through each index of both arrays to add Stone add store the result add and store the result okay so for uh going through each area so we will go through the first array for this and inside this I'll introduce another for Loop for the columns so for J in 0 to columns minus one okay so by this we can iterate in the whole array or whole Matrix I can say so some I and J okay because sum is what sum is basically this thing so some i j is equals to first Matrix of i j I and plus Matrix J and then sum of first Matrix and second Matrix so what is happening here I can I will explain it again to make it very much clear for you okay so uh let's see here okay so the first Matrix let's see here okay yeah so the one here I can call the one as first Matrix one one okay I can call it as first Matrix one two so for iterating in i j so I have introduced two for loops and the first is called zero zeroth element second is called the second element third is called the third element that's why it is row minus one and column minus one okay so the sum will be the addition of two matrices will be pretty clear for you okay so finally we looped through each element in the sum some array using uh for Loop to print uh so yeah so for printing or displaying the result uh we have to display the result also right display the result so for displaying the result I'll uh print the firstly some of the two my devices is okay now what is the sum so for printing the sum we have again used again uh we have we again have to use the loops so for Row in some okay and inside this I have to uh again introduce a for Loop for column and sum column in sum I have to print not println I have to print the value of column and then some spaces okay so I have printed the column and then again iterated and then again print another column okay and then print Ln okay so when I go ahead and run this okay there is some problem with it let me see what is okay yeah so when I uh run this program uh I can see that the sum of two matrices uh is minus two eight seven ten eight six oh all right I can cross check it also uh with this 2 minus 4 3 plus 5 4 plus 3 2 plus 5 plus 5 2 plus 6 and 3 plus 3 okay so this is correct uh so in this video we have learned about the multidimensional arrays and how to add two matrices we have coded the uh code in content okay so thank you for watching this video stay tuned this video uh we are going to calculate uh we are going to write a program uh to find a to find transpose of a matrix as you should be aware about what is a transpose of a matrix uh so uh like if there is a if there is a matrix just let me comment if there is a matrix let's say uh a b c and a b c and then d e f okay and so the transpose of this transposed Matrix so transpose of this given Matrix would be uh a b c and then here d e f okay so we are going to write the program for doing the same okay so uh firstly uh I would initialize the main function and inside the main function I'll declare the columns and rows so row is equals to 2 and value column is equals to c o l u column is equals to 3 okay now uh I'll take a matrix let's say the Matrix is uh array of array of int array uh two three four and again entire of let's say five four five six four okay now uh uh firstly we will display the current Matrix so so far displaying the current Matrix uh instead of using the for Loop or the loops that we used in the last video uh we will just use the keyword display and then I'll pass the Matrix okay so uh uh in the program display function is only used to print contents of a matrix okay and now I'll initialize the uh the display function okay okay so now inside the display function what I'll do is I have to print the display function okay so as we did in the last video I'll print Ln The Matrix is and then colon okay and then for row N Matrix and then for column in Matrix now I have to print I have to print um column and then some spaces now outside this first for Loop I will print Ln okay so uh this is the code to uh display the Matrix as we did in the last video so we have displayed the particular Matrix now what we can do is uh we can what we will do is we will transpose The Matrix so for Trans posing The Matrix what we have to do is we have to uh like I can introduce another Matrix called transpose and Let It Be equals to the array column and then enter a row so what this particular line means is the column in the transpose is equals to the column in the array okay so and so when I hover over it it's a Well column end okay and when I hover over this this is the array and then this is size and then this is in it and then there is an end okay so it it what it does is it decides the size of the particular uh array okay so sorry a matrix so for uh I in 0 to rho minus 1 uh and inside this I'll uh I'll take another uh for statement for I in02 column minus one and inside this what I'll do is uh I'll make transpose the uh when the transpose one one okay trans pause so I'll do j i in here because uh sorry here here would be J because the transpose 1 1 is equals to the transpose of 1 1 is equal to one when the transpose of two one is one two okay so the transpose of 2 1 is Matrix of 1 2. so I can here do I and then J okay now we have transpose The Matrix so finally we have to display the transposed okay so this uh display transpose and I have already declared the display function so I'll display the transpose and I'll go ahead and run this okay okay there is again some problem okay here it should be uh column in row not column and Matrix so when I run this yeah I can see that this is the Matrix in the starting and this is the transpose Matrix okay so in this video we have basically uh transposed a matrix okay so that's all for this video stay tuned and in this video we are going to cover lists um so uh what are lists basically in kotlin okay so what what are what were arrays arrays are mutable but it cannot take a new entry okay so if there is an array I defined array of let's say 10 entries so let's say the entries in an array is one two three four five six seven eight nine ten respectively and uh so what I can do is I can change the value 2 to 15. okay but I cannot add a new entry let's say 11 2 at the end okay so uh the problem of fixed arrays is solved by lists okay so in lists we can uh add uh new entries okay so uh arrays had a problem that mutable that these are mutable but not but cannot take a new entry now uh this this problem salt was solved by lifts so now what is a list a list can store Many Items of same or the different data types just like errors okay so just like arrays okay it can store uh any items of same or different data types so there are two types of list one is mutable and another is immutable so immutable as the name suggests it it are it it is it is for a fixed sized and fixed values okay so uh and so why why we why do we use immutables so we use the immutable list because um when we work with a lot of data uh and by chance some data uh gets changed by a programmer and it passes the same program to another programmer so uh this whole thing becomes a flop okay and when we debug when we debug that it would take a lot of time in understanding that where was the root of the problem so uh that's why we use immutable list whenever uh the the data is not required to be muted okay because to avoid errors so the second is mutable list as the name suggests the element can be added as well as altered okay so uh firstly in this video we will cover the immutable list okay so uh immutable lists are defined using the immutable lists are defined using the list of keyword okay so let's see the syntax I'll declare a main function and then inside the main function uh I'll declare a list so I can declare it as value or a variable it doesn't matter it is an immutable list so I I'll declare it as a variable for now now the name of the list so let's say I'll name it as immutable list one okay now uh I'll use the list of data type okay now this inside this greater than a less than sign I have to mention the data type of the particular list so uh and we can skip this also okay if I not mention if I will not mention this there is no problem okay so uh I can mention this hi uh this is so I'll mention a character here a okay I'll mention two or three character here B and then also seven numbers okay so uh it is an immutable list okay so uh what happens when uh I'll do immutable lists one uh number one is equals to uh hello okay now instead of this I will say zero so what happens is the parenthesis in is in red it's throws an error so yeah uh it's it it makes it red and when I hover over it it says unresolved reference and none of this following candidate is applicable because the receiver type mismatch okay so it basically says that uh it is an immutable list so we cannot mutate it okay so this is not possible not possible okay now uh there are some basic commands in list uh same as the strings or the uh the array so one is the get index immutable list one dot get index sorry get index to get in bracket index is zero okay uh and I'll just parental in this okay and what happens when I print the list also you can see here okay so when I run this program we will see that in the first line we have the list and in the second line we have the uh add index 0 what we have here is okay so we can see here it this this is the list and this is the zeroth index okay the another command uh commonly used is the index of element command Okay as you might remember or if not uh I'll I'll explain it uh the index of and then I'll mention a particular element let's say uh a okay immutable list without okay so any metable list I will check the index of a so when I run this program it will print me that what is the index of this particular element okay so the answer is 3 0 1 2 3. okay the another command is the last index of element okay so uh when I mentioned the last index of and then one okay and then run this program so what it will do is it will mention the index last index whenever the one is available so if I mention one two three one two two or three more times so it will mention the index of the last one available okay and there is a last index last sub list size okay there is uh these many cons okay so one or two I'll mention and uh I'll mention all of them and I'll I would recommend you to go through the Google and check about all these commands because as I already mentioned the Google is best friend of any programmer so the size uh the dot size mentions the size of an um list or um uh any anything spring or a array okay another is the last index okay so when I mentioned the last index and I run this program so it will just mention whatever thing is present at the last index of the um uh the the list or an array okay so uh emittable lists are generally used to store static inform information in a program okay as I already mentioned uh it is generally used to store static in formation why is it so because uh we don't we cannot uh change the data okay so uh that is all for this video in the next video uh we will cover the mutable list and some problems or some examples upon that so stay tuned