welcome to programming knowledge so this is the first video in the series wherein we together will make an ecommerce application from scratch and by starting from scratch i mean that we will first design the application and then build it means we will start from an empty screen and build our way up to a complete application so for designing we are going to use figma and for the front end part as it is an application we will use flutter because by that will we can use a single code base for android apps as well as ios and since we have already used firebase as a backend once when we were making the instagram clone okay so this time the back end stack will be php and mysql now another very popular backend stack is node.js and mongodb and we shall be keeping that for our next series okay so let's set everything up now firstly you need to know flutter if you don't know flutter you can refer to my videos on flutter for beginner the link will be in the description a suggestion would be to update the flutter as there was a major release flutter 2.0 is out there is almost no change in the coding techniques it ha but it has a support for flutter web and flutter desktop well it is has the stable release of flutter web flutter web was already available in beta version earlier okay so that is regarding flutter now for the back end part that is in php and mysql uh i will be using plain php to make the api so i'll be not using any framework that is larval or lumen because that will be extra work now to code in php you need you can install xampp okay so it is a very excellent software it has it is the most popular php development environment as you can see in this only you will get the php environment as well as mysql and since i am in a mac os big sur there was some difficulties with sam so i have changed to mam so you can also use this as an alternative for xampp okay it also has the complete development setup for php that is you will get php in here and mysql in here okay and then for designing you need to have figma so for figma you don't need to download it but i suggest you download it and you need to create an account and after that you can start designing now uh those who don't want to do the php part means the backend part can skip it as i will be hosting the apis that i make online and which will be available for anyone to use for some time okay but i will suggest that you do the back end part as well because i will be explaining all the things i'll do and by this you by by the end of this series you will be able to learn a new programming language or maybe a tech stack so i just suggest you should follow entirely do not skip any part okay so now that you know about everything let's see how the map server looks so the xampp server will also be same instead there will be four sections where you can go and you can start and in mamp you just you can start the map server just from here so it will take a while now once it is done you can start coding in php you need to make a you will you need to have the php files in a specific folder in xampp as well you need to have your files in a specific folder okay and that is in the applications section you will see there is a folder called mamp okay and in the case of xampp there will be a folder called xampp so yes so there is the folder called mamp and then either you are on mamp or on xampp you will have a folder called htdocs okay so this is a very important folder over here only we will code in we will make our apis okay and store it over here okay you will get a hang of it once we start coding the back end thing okay and for the database you already have it since our server is running we can simply go to localhost colon eight eight eight eight if you are on mam if you are on zamp uh that is then you will be probably on local host eight zero eight zero or three three six and then you give a dash and then write php my admin and then you have your entire php setup over here so phpmyadmin is uh is like sql workbench we use it to view our database okay so over here we will create our database and store stuff okay so i hope you understood what is map if you have some if you have some difficulty understanding there is no issue when we start actually coding you will see how everything works in sync okay so in the next video we shall start with the designing thank you so in this video we are going to start designing our application okay so for that i'll open figma i have already installed the desktop version okay and then you can go over here and create a new project i have already created one and over here i have selected a palette of colors which i will be using throughout my application okay and now i'll i am planning to call the project better buys so the figma project will be of the same name the database will be of the same name and the application will also be of the same name okay so let's create a add a screen over here so for that we need to go in the frames section then click on frames and then over here we can use iphone 11 pro or iphone 10 screen okay so using figma is very easy you just need to follow along this video and you will also get a hang of it okay so this is a screen now if you want to see how it will look on big screen you just need to click over here which is this is for prototyping and now you can see the screen over here just give it a moment until it is loading okay and for now it will be a big white screen okay so we will not be able to see anything because since our project is only a wide screen till now so let's start first and i'll add our text over here okay so for that i need to click on this and then i'll write better buys okay now i want this to be somewhere over here now i'll be adding the grid okay so that i it is easier for me to design okay so i'll add a grid now you can see the grid comes over here now instead of this i'll use another method that is columns okay so now i want to have 12 columns having 12 columns is the best because you can divide it by two you can divide it by four you can divide it by three you can divide it by 6 so it will help in maintaining uniformity okay this is the most standard practice now i wanted to have a margin from both sides 50 okay so 50 seems way too much i'll make it 40 okay and the gutter can be of 10 okay gutter means the distance between these two okay maybe i'll make it 30 yes so this seems fine now with this we will align everything on this margin okay so i'll put it over here now let's increase the size over here in the text section you can increase the size by going over here or you can simply select it and click on the upward arrow button it will automatically increase so i will call it better wise the font i think will be better if it is poppins let's see i don't know which one is better okay so this seems decent let it be like this for now i'll change its color so uh the better bias is over here maybe i'll make it little bit more bigger so 21 or 22 23 okay cool now after that i'll add a circle means as in for profile so to add a circle or any object you can simply click then it will create another option is you drag okay another option is you drag and make a circle of your choice okay and now while doing this if you it is actually an ellipse means it can have a different minor arc and major arc but if you want to be an exact circle you just need to click shift and it will automatically force it to be a proper circle with equal major arc and minor minor arc okay so now that we have a circle i am planning on aligning it with this so to align both things horizontally i'll use the horizontal align section okay so it has aligned everything horizontally if it was one hour below another then i would have used this so these signs make it very clear if i click on this then they all will be aligned with the top as uniform if i click on this then they will be in aligned as bottom uniform and if i do this then center as uniform okay so now since that is done i'll move it i'll move the circle to the right so for that you just need to select it and click on the right button and if you want to take a bigger lip leaps you click on shift and right button so i hope i am making sense in starting you will have a little bit difficulty but by doing you can get used to it okay so uh knowing figma is a very you can use it to your advantage because figma is very powerful and most of the designers are now getting inclined towards figma then rather than adobe xd or sketch okay so now what will be the use of this circle is we will show the user's profile over here if it if he is logged in then we will show his image over here and if not then we will for now just so option to login means a common person's photo okay means the icon that we have in android to depict that it is a person okay so we shall show that over here for now okay so i think i'll push it little bit up because it was having a lot of white space above now i again need to align it okay cool so now after this i'll create categories so for categories i think i'll again use a circle okay so let's create categories like this now i want four is enough i guess so if you want to expand it you select all and then you pull it from the side so now you can see the width is also changing and so we don't want this i'll push it manually somewhere over here then so it will automatically tell you if the distance is equal or not okay so now we have four sections over here and i want one more but that needs to be half gone inside so by this user will know that there is another category for me to go and check out okay i hope you understand what i'm trying to do over here now i want this little bit bigger so i'll make it 53 450 or maybe a 60 i'm sorry for that so maybe 60 sounds better want the height to be 60 cool 9 2. uh okay so this looks decent enough this will be our category okay so let us add some colors to it and before that i'll make sure that it is separated evenly over here i can go and click on tidy up so now the difference between them is equal i want it to be a little bit lower so that we have enough space between these two okay okay this looks fine maybe i'll reduce its size a little bit i think 45 works 45 works i'll push it little bit below and to the side okay so while designing you need to experiment so that you get the best fit okay now let's add some colors to it so that it looks better i'll add a color oh so this is a dropper icon by this if you now point the cursor or anything it will pick up its color you can see in this circle over here so if i click go to this color palette it picks its color but i'll go to this palette i'll select this color and that color is automatically applied over here now instead of solid i'll make it linear okay and then i'll means linear means i want to apply a gradient okay and i want to apply it like this that the maximum color is over here and on this side there is almost no color okay means it is it gives us a fading effect okay this seems nice similarly over here i'll add another color the color is gonna be this color and instead of solid it is gonna be linear now similar to linear we also have radial angular diamond so you understand what it means radial means it will be circular fading angular means you can fade it at a certain angle and diamond means it will be faded from the four corners okay so now let's change the direction means i don't want it to be vertical i want it to be fading horizontally so i did that now save it now for the next one i'll apply the next color okay and then again from solid to linear now linearly i have done this one as well now for the fourth one this is the color again i'll change it from solid to linear you understand the drill i think by now no this is not straight so it won't look good now you can see if i drag it to drag it far away the shade also starts decreasing okay so if it depends on how close you keep it so as to get the desired effect okay so this is also done now in the last one i again start with the first one solid will change to linear okay i'm sorry what happened yes so the solid will change to linear the linear will change from vertical to horizontal yes now it is done so now if you look at this it looks better now if we add some images over here then it will be more appealing okay so for that i'll need some time to decide on the content uh anyways i wanted to let you know that in better buys we will only be selling green vegetables okay so so it will look better now this will be the categories i will be adding the images and the content over here in the next video and then we will continue with the design and once we are have made a significant progress in the design we shall start coding it okay i hope you understand thank you this will be for the video thank you so in this video we are going to continue designing our application so i'll open up sigma now in the previous video we have designed till here over here we were planning to show the items and over here will be the user's image okay so now let's so now over here you can see the colors are not that significant okay so to make it little bit more attractive what i'm gonna do is i'm gonna cover it with a bigger circle okay so now uh in the previous video you might have seen i was able to drag a copy like this so to do so all you need to do is select the figure or whatever and then click on shift plus option and then drag it down then if you drag it down you will get an exact copy over here okay so i hope you understand this now i'm gonna change it from linear to solid and i'm gonna increase its height i'll make it maybe 70 so now i have a bigger circle now i'll add a stroke to it now stroke basically means the border okay i'll make the border of width too and the border of color or which is inside this okay and now i'll remove the color from middle so that we just i'll show you now if you bring it here it's opacity decreases i have brought the opacity to zero percent so now we just have the border like this okay now i am gonna take this border and put it over here so now i'll select i selected the circle which is the border then the inside circle now once both are selected i am gonna make sure they are on the same axis horizontally and vertically so now once that is done you can now see this looks little bit better okay so i'm gonna do the same for all the four now it is very simple i'll select this then again shift option and drag i'll get another one okay now again i'll select the inside and the outside one both the circles make it horizontally aligned and vertically aligned and then i'm gonna change the color of the outer one so over here we were using the second color so i'll again go to the second palette and select it now i have it with the second color again for the third one i will do the same you can see over here it is not aligned so by doing this we make sure that everything is aligned properly i'm sorry i need to select the outer one then again i'll change the color of the stroke it will be the third one now i'll do the same for the fourth one drag it and make a bring a new one then select both then align it vertically and horizontally and then finally change the color okay do this and then the last one okay so you can see that if i drag it it is getting outside the screen okay so this is our screen and this ellipse is outside so now what will happen that even if we unselect it we are able to see the entire thing but what i want is that this is also cut into half proportional to the inside circle okay so i'll revert the changes into revert we have command z in mac and control z in a windows i'll drag it little bit okay i'm sorry i'll i'll drag it a little bit to this side and then i'll use the right arrow to make it position so that then it will not leave the screen it will still be inside the screen so then if i uh if i am not if it is not selected i am only able to see half of it means only the part that is on the screen okay so you understood what i was trying to explain now again i'll select the outer one to change the color of the stroke to the first one okay now if i go and see it looks a little bit better okay so now finally let's add the images of the vegetables over here i was able to get a few images of the vegetables so it was a long process i had to download images from google then remove background from it okay so but it is done now i'll first i'd like to have broccoli so again i'll create a copy of it because i might use it somewhere else so shift command create a new one and then drag it inside the screen okay now i'll arrange it okay and i'll make a little bit small as well so now i'll bring it over here and see how things are let's make the height to 50 okay it has completely left the screen and now if i put it here how does it look okay it looks better but maybe i'll make it little bit more small so let's say 40 oh sorry it became four meant it to be 40 so okay this looks fine now so now again i'll put it in center so to so since figma is very powerful it will automatically assist you and notify you when you are in center you can see the orange line okay and even and if you don't want to use that then we are again gonna use our these tools i'm gonna select this the circle above that and the outer circle then align all of them horizontally align all of them vertically okay now next let's take another uh vegetable okay let's take spinach again drag and create a new one bring it inside the screen now again i should directly do 40 over here and you can see the image seems fine i'll bring it to the center and we have our spinach over here now next let's take capsicum okay again i'll make it high it's hard to be 40 nice now this what is little bit too small i'll make it 60 let's say okay 60 seems fine this is just for the designing purpose once the design is finalized i'll make them all of the same size okay so let's see how does this look okay it might be a little bit bigger let's see how it looks if it is a little bit bigger okay now i need to align it in the center that is a very important thing okay so now it is in center okay but if you look closely there is little bit space over here compared to the left side i am going to push it a little bit over here now although the image is not in center but it feels it is in center and the feeling is more important okay so this is done now let's take beans create a new one and drag it inside the screen again as we already have the height of 40 over here and here i'll directly make it 40 okay and then try to put it over here let's see so it is in the center yes this looks fine now next i'm gonna use bitter guard again i'll directly make the height to 40 so 40 it is and it is little bit hidden behind the screen okay so this is very important it gives the just that there are more items on the right and the user should scroll okay so now this is how the items are going to look this is how it will look okay now let's add the names of it so to add the name i'll click on text then text or a better way would be to select this text and drag and create a new one and then over here i can say broccoli now this is very big let's give it a smaller size 12 seems fine and from middle i'll make it light so you can see the stroke is a little bit lighter now that is what i was looking for okay so now you can see i have the text below it is in this it is aligned they all are on the same axis and this and this amount of space is enough i guess okay so first is broccoli then there is okay so this is the center spinach now since the length of spellings are different it is gonna change after you change the name so let's first change the name only capsicum so again this now this is in center beans okay and the last one but not least is bitter guard okay so now if this is not visible over here you can check the spelling over here also since you are designing lorem ipsum would have also done the have served would have solved the case okay so now we have the name over here so i think the items look fine for now in the next video we are going to add the trending section and the bottom bar okay so see you in the next video thank you so in this video we are going to continue designing our ecommerce application so as i told in the previous video in this video we are going to add a trending section okay so let's get started i'll copy the text over here and i'll call it most popular let's say for now okay and this is medium i want to reduce the size a little bit so i'll make it 20 and then i'll make this semi bold so that the order of inheritance is there this is the most important thing then after that this is important okay now i'll create a square so i'll create it like this um let's say this this is the width and a height being somewhere around the this okay now i want to make the borders to be curved so let's say i give it a edge of 14 15 so over here if you want to give the corners a radius means if you want to make a rounded corners you write the degree over here okay so now you can see this is rounded at the corners okay now let's add the color so we have our color palette over here i'll use the first color okay now let's see how it looks okay so this looks fine i'll change the way we display the color instead of solid i'll make it radial and then i'll pull it over till here okay so by this what happened that the color will be concentrated in the center okay so now you can see that now let's let's add the the item okay so since we have already used five of the items over here i am gonna use the sixth item that is the cucumber so i'll create a copy and then add it inside the screen so let's see i'll make it a little bit bigger okay so this seems fine now let's add the name and price so for that i'll create another box over here this will be of the same size as of the bigger box okay now i'll make its height a little bit less somewhere around let's see okay so this seems fine now let's see okay so now you can see this is rounded at the top but not at the bottom because it is because we have added another square another box on top of it okay so the box which was behind it got covered okay so now so to fix this what we are going to do is we are going to add border radius to this as well so now if i directly write 15 over here it gets added on all the four sides which is which is what uh which i don't need so i'll change it back to zero and then if i click on this i get to add the individual border radius okay so i want for this angle so i'll add 15 over here so you can see this part is rounded now this this this value is for this part so again over here also i'll add 50 and so now you can see these two corners have a border radius but these two don't okay and that is what uh we want exactly okay so now let's add let's change the color we'll add a little bit less blackish color okay so this is how it will look now let's add the text okay so i'll bring our text here now you can see if you drag it it has gone at the back okay so now you need to double click or right click on it and then select bring to front okay so now it comes to the front now i'll change the value to cucumber okay now i shall reduce its size maybe i'll make it 15 15 seems fine okay so 15 is all right now let's push it a little bit to the right okay now another text that we are gonna have is the price so let's say rupees 40 per kg okay now i am gonna reduce this size even further okay and change it from medium to light okay so this seems fine now i'll add a icon over here by using which we can directly add it to the cart so for that i already have a cart icon over here now you you can directly import all these icons from this figma project okay the link will be in the description so i'm again gonna copy it create a new one and once it is created i am gonna add it to the project okay i'm sorry yeah so now let's increase the size it will be of 25 okay now you since this is an svg i can change its color and i'm gonna do it so i changed it to the color we are using throughout the application so this is how it will look this seems fine okay now i'll select the entire thing shift option create a new one now again it came out of the screen so i'm gonna let it be inside and drag it okay so this will be something like this now i'll change the color as we have four different colors so i'm gonna make it back to solid and the color is gonna be this then again change it to radial and okay sorry so over here only i'll have to change it to this color so this is done okay now let's change the item instead of cucumber let's make it a capsicum okay so i'm gonna put it inside i'm gonna reduce the size to let's say 70 okay where the hell did it go now so 70 is very small i'm gonna make it 150 okay so 150 seems fine now 150 also feels small so i'm gonna make it 170 or maybe 200 so 200 is what it is so this looks fine now i'll change from i'm sorry i'll change the i was about to select the text okay so i'll i'm sorry so i'll select the text and change the value from cucumber to capsicum and the price from 40 to let's say 80 okay so this is how it is going to look so now if you come here this is how it will look let's add a image over here okay this has been waiting from the long time so to add an image the shortcut is shift command k okay so now i have the option i have already cropped an image in circular okay now i want it to be of the same i'm sorry i want it to be of the same size as this circle this is 45 so i'm gonna convert this to 45 okay and then just place it on top of it okay so this is done so this is how it is going to look now at the bottom i'll have a navigation bar okay so i have already created one means i have not created one i already have the icons that we'll use okay so this is the home search cart profile and menu okay so we shall see what are the items that are going to be inside it later now again this has gone to back i need to bring it to front now this is a little bit to the right so i'll bring it to left now this is home home should be below this okay now similarly we have search now search should be in black color the color will change to green for the selected fragment okay now this is cart now this is profile and the last one is menu so i'm gonna okay so we have our bottom navigation bar now now over here i shall add reviews okay reviews for now if i come up with something more uh suitable for the empty space then i'll add that if you have any suggestions you can drop it off in the comment box okay so i'll copy this and right i'm sorry i'm sorry what's the word around okay means that that that means basically the reviews i'll copy this text over here now i'll add it to 15 from all the sides okay cool so this is that and now let's add an image over here for the user whose review this is okay now this image over here seems pretty big so i'll may change it to 20 okay this seems fine now the name of the customer whose review this is going to be for now i'll put my name rishabh kumar okay i'll let's change it from light to medium because the name should be of more significance than the comment and then to get the comment time we have a website called lorem ipsum dot io which is our lorem ipsum generator so i'll copy this much from there i think this should be fine copy okay now i'll have a text over here and then paste everything okay so now first change it from medium to light reduce its size okay so after that we align it how it should look break a line here and here and this is done i think this seems fine or maybe i'll reduce the size a little bit more okay so the size didn't reduce actually it was selected in the wrong way so this seems fine i'll have to take it back yes so now this is how you add random text and design while designing so this is done now we need to add stars for that i have already downloaded svgs of star i'll again do shift command k okay now i have star one and star you don't need to worry about these items you can down import it from the figma project this project will be in the description okay so let's talk about star this is star one this is star i'll make it of size okay so we need to lock it now by locking i mean that the height and width will be of the same proportion as it is now okay if it is not locked and then i change the height then only height will change and no change will be in the width but since it is locked if i change the height to 30 the width also changes to 30 okay so it will be in proportion that is the main gist of this so 30 is way too big i'll make it 15 okay 50 same 15 seems fine copied four times okay so that means i gave 4 star out of 5 now then again this star i'll bring it here now you can see the height and width are same so again i'll lock it change it to 15 and boom it is done so our review section is also done this should change automatically or maybe i will add a scroll feature that we can decide later but our home screen is done for now now you might be thinking why are we not making the user register or login at start so because that is not a standard practice you can see any ecommerce applications they will force you to login or create an account only when you are going to order not until you order so we will also ask the user to create an account or login to the old account when they are going to order okay so until then the user should be able to see everything okay so with this hour this screen is done we will meet in the next video thank you so in this video we are going to continue designing our ecommerce application so i'll open figma okay so once it is fired up we will continue so in this video we are going to make the details screen means if we click on any of the items over here or on these items we should be able to see our description page okay so let's start we know how to copy we click on shift option and then drag and we get a new one okay now i i don't need these things okay so i'll select them all and remove them i will keep the bottom navigation bar because that is how i plan to proceed so let's change its color okay i'm gonna give this color so you will see that in the entire project i am gonna use only this palette okay because it will provide more uniformity to uh to our application okay so now i need to have a back icon over here so for that i'll open our material outlines okay i'll add a link to this as well in the description okay so once it has opened if you go in the navigation section you can see all the icons so i'll select this one then command c to copy if you are on windows 10 control c and then simply i'll paste it over here now in that everything is inside a frame means by frame i refer to this purple boundary that it has if you double click on it it will go inside the frame and select the actual item i'll remove it away from the frame okay and then finally i'll delete this frame okay now i want this to be white in color so here it is now i want it over here okay nice so next i want the item that is clicked to be displayed here means the name okay so i'll create a new text view or you can you see how convenient this is to copy from a previous one okay now i will change its color to white and then this will be broccoli okay now this should be in the center so i'll bring it over here now to make it in the center i'll simply click on this and it will be in the center now i just need to match these two so i'll shift it a little bit upwards and then these two are on the same line now okay so now let's proceed i'll add a square over here now if you don't uh there are two options to create a square i'll click on this and then drag and create a square simple or i can simply click and get the square and then edit it to the desired shape i want okay so i try i did the second one i wanted till here i'm sorry it should it should touch the bottom navigation bar okay and at top it should be till here okay this seems fine now i'll add a border to it only on the top so you know we can add a individual border radius so for this corner i'll again make it 15 and for this corner as well i'll make it 15. i want it to have a white color i'll do that okay and with this we are ready now let's see how it looks i'll start the preview okay so this is the first screen only now let's navigate from here to this screen from this screen to this screen which in designers term is called prototyping okay so over here this is design and then you have the prototype section okay now what you need to do is you simply need to go and select this the circle uh not the image but the circle circle would do better the inner circle to be more specific okay now in this uh once this circle is selected you can see a big dot a bold dot over here so all you need to do is click on that and then drag it to the screen where you want it to navigate on click ok and then over here you have different options on how to animate the transition from the screen to this screen like move in move out for now i'll let it be in instant you can try the other things on your own okay so with this now i'll go back to design so now over here if i click on broccoli i am taken to the taken to the next screen okay so the prototyping worked okay now let's add a big image of broccoli so again create a new one put it inside the screen okay so the image size auto is perfect in itself okay this looks decent enough now let's add the price so i'll select this one and again bring it over here over here as you as i disc as we discussed in one of the previous videos that all our things will be beyond this first reddish line okay so now over here i'll add a price let's say 200 rupees per kg okay so this is our price i'll i'll push it little bit downwards okay now you can see that this square is getting selected every time i come here but i don't want that i don't want this square to get selected sorry not a square this rectangle to get selected so what i can do is i'll simply come over here and click on this lock icon so once we have locked this now you see if i hover over here it is not getting selected and if i remove this then if i over hover over here then it will be able to be selected okay so for now we don't need that so i'll lock it okay now let's add a description of the product so again create a new one bring it over here okay i want it to be till here okay now let's edit okay so i'll copy it paste it once again so we have a long text now let's change the color color will be green okay and let's see if 10 works maybe i'll increase its size a little bit okay 12 seems fine now i don't need this much of our description so when we make the app we will limit the user to add only a certain number of characters in description okay so this is done so this is how our screen looks until now now we need to add an option to buy now or add it to cart and then order multiple things together so let's do that as well i'm gonna add a square box again now let's say okay this size seems fine okay i'm gonna give it uh our again the primary color and i'm gonna add a border radius of five on all the sides okay so that its uh corners are smoothened okay now i'll again add this text over here i need to bring it to the front okay once done i'll change its color to white and then the text will be saying by now okay now i don't need it to be medium i'll make it light reduce the size 2 15 15 seems fine now i'll make it uh align all the things horizontally and vertically okay so now once this is done i'll select select the button and create a new one okay and then again uh to in this one i'll add a stroke the stroke will be of width 1.5 where stroke is nothing but the border i'll give it our primary color okay remove the fill color and then i'll select the text and make it our primary color and this text will say to cut okay now again these things need to be in the center so i'll align it okay so this is how it looks i think we need a little bit more white space from the bottom navigation bar so i'm gonna push it a little bit upwards so select it and then click on the up arrow okay so now this looks better now over here we are gonna display the sellers information so for that i am gonna select the design of a review over here okay and over here will basically have a seller's description or review something about the seller let's we'll decide that later once we develop we'll see which one is more convenient at that point okay so beside the name there should be seller written on it okay so that the people understand i'll i'll reduce i'm sorry i'll reduce its rating from 4 star to 3 star okay let's see and then i'll add its address over here let's say okay so now i'll make it from light i'll change it to medium to make it more significant as compared to the text that we have over here okay which we will decide later is gonna be the is gonna be related to the seller or a review about the seller okay so we can decide that later once we reach the point to do so and with this this screen is done as well okay so this screen also looks pretty decent okay this will be the description of our products okay so now for practice i suggest you create for all the other items as well in the next video we will start with the back end make these two screen make the prepare the back end required for these two screens make the front end that is our flutter application for these two screens and then we shall again start with figma so thank you so in this video we are actually gonna start coding we are going to prepare our back end for the project okay so for that i'll fire up mamp okay so i'll start it will take a few seconds okay so this is an ad that comes along with map you can simply close it it is of no use okay once it is started i'll minimize it okay so this is the default home page of mamp and it opens automatically as soon as your mam server starts so we can close this now your what we need to do is go inside finder inside applications inside the mamp folder inside htdocs we need to create a new folder so over here i have created one called better buys so i'm gonna open this folder in our vs code and then start coding okay so i'm sorry not the terminal but the vs code and then i'll open the folder better buys okay so now we can actually start coding so over here i am first gonna create a folder called includes because over inside this all the files will be there that will be included in other files okay so i'm gonna create a database dot php okay so this only this class will be allowed to connect with the database and interact with the database we are gonna create use the instance of this database class that we create right now for interacting for storing data in our database for retrieving data from our database so you can refer to this as a helper class okay so let's start now to start we start a php file by giving this angle bracket a question mark and writing php okay and after this we start so now first i am gonna create a few global variables they are basically the credentials required to connect with the sql server so to create a global variables we simply write define and then the name i'm gonna call it host okay and then the value for now it is localhost and then um then there needs to be username okay anyone with any amount of experience in mysql would know that the host username password and db name is required to connect with the mysql server okay so i'm defined and this is password and the password is empty for the time being because since it is running on localhost we don't need a password security is not an issue as generally it often is a development server okay so again define and then over here db name okay and we are gonna call it better underscore buys okay so uh you need to understand that in php we use pascal case uh in pascal case what basically happens that we separate uh two words by a underscore and in camel case we start the next word with her with the capital letter so you understand the difference between camel case and pascal case and in php we will use pascal case okay because that is the standard practice now i'll start the db class now commenting is the same as in any other programming language as most of the programming language we start the class okay so if we write the keyword class class name okay now i'll create a connection means connection will be a variable that will connect with the sql now i want it to be secure so i'll make it private okay i know you i i assume you have the idea of access modifiers private public and protected we are gonna see private and public both in this video okay so i'll create a connection variable so it is also like python you don't need to write the data type it will automatically be assigned once we assign some value to it okay now we will create a constructor for this class as constructor will be in called from other other places we it will be public and for constructor we i'll give two underscores and then write construct okay so in php we don't actually write the file name but we give to underscores and use the keyword construct okay and as soon as the object is created it is known that the constructor will will be executed so what i am going to do is i am going to create a connection inside the inside the constructor okay not inside the constructor but we are going to create another method i am going to call it inside the constructor so that means that as soon as you create an object the object is automatically connected with the database okay so for that i will create create a new method i am calling the method over here and then we'll create it let's call it opendb connection okay so this is the method name and this is how we call a method we use the keyword this and then opendb connection if we are in the same class if we are not in the same class then over here would be the name of the object of this class okay so now actually let's create this function so to define a function we write public or private as per the case and then the keyword function and then the name of the function which is open db connection okay so let's add a few comments so it is easier to understand this is the constructor and over here we are creating connection with the db so let's start i'll write this connection means i am referring to this variable over here and as i have already discussed that we use the keyword this to refer to variables or functions inside the same class so this connection and then we all have a predefined method that is called my sqli connect so this is a predefined method in php it takes four things first is host which is this variable over here then username then password and then the db name okay so this will connect this will create a connection with the sql database okay now we need to check if it has connected properly or not so we'll use an if else condition if else is same as in any other programming language we write then now inside this we write mysqli connect error so if this returns some value that means there was an error in connecting with the database so we write the die and then connection error and the connection error being mysqli connect error okay so now uh i'll i'll explain this line to you so this die keyword over here is used to stop the execution of the code as soon as the php compiler encounters this word die it will this will be the last line to be executed okay so means that it can be basically referred as finish that we have in android okay now connection error this is the string and then with comma we have separated and then we actually print the error that occurred okay so if no if there is no error then nothing will be printed okay and that means the connection is created once this is done let's proceed so after this i'm gonna create a function that executes the sql command i'm gonna call it query and it takes a parameter called sql so the definition we take parameters by just writing the name uh preceded by a dollar sign okay so now i'll create a variable result that will have the result of this query so to run this query we first need to call our connection okay because that is the sql connection and then we have query okay and then inside this query we write we give the sql so now this connection instance executes this sql query okay and then the result is stored in this result variable so we check if not dollar result so this means that no result was received that means the query didn't execute properly so then again we write a die query fails okay and then we simply print to the query and the query is stored in the variable name sql okay and if not we simply return the result okay return dollar result so returning the value is similar to any other programming language okay this is executing sql query okay so now the next function is to get the array of results suppose we have a select method or similar to that method then it it is supposed to return a return few values so to get them we will we are creating this function public function and it will be called fetch array okay and then this will take this result okay this result is nothing but this that we return from this function because this is the result that the query has given and we are taking that result and then extracting the values from it and returning to the developer or the function that is or the place where this function is called okay so first i'll check if dollar result i'm sorry num rows means the number of rows is greater than 0 that means it actually has some value sometimes what happens uh that it doesn't return anything so then the number of rows will be equal to or equal to zero and in that case we don't want to run this method as it is gonna crash so then i am going to create a while loop and then what it is going to do is row is equal to dollar result fetch a sock so what this basically means is that this row is a variable and every time it will fetch the associated value means the this dollar result arrow fetch a soak means it will fetch the associated data okay then over here i'll create a variable called result array okay to create an area we just give a square brackets like this and then we add row to it okay so what this line basically does is creates a variable called creates an array of named result array and it adds road to it okay so this might seem weird at the first but once you start coding you will get used to it okay so once this is done we return the resultant now you might get confused that we created this variable or use this for the first time inside our inner parentheses but we are returning it in the outer parenthesis so it is like python the first time you use it it is declared and it can be used in entire function okay so this method is fetching list of data from the sql query result okay now next function is to fetch a single data means sometimes we select a specific and we know that there is gonna be only one row of data so in those cases we will use this function so it is called public function fetch row and then this also takes result and over here also we need to check if the number of rows is greater than 0 or not so result num rows okay sorry there is no parenthesis num rows is greater than zero and if it is then we simply return result fetch a sock because this time we know that only one data is going to be returned so we simply directly return it ladder tab over here format it now this method is fetching a single row of data from the sql query okay now the last function is going no this is not the last function but this is the function called escape value so what happens that sometimes when we are entering data to data when entering some value to database the value is not in the proper format okay so this function will prove that the func that the data that we are trying to save in the database is in proper format or not by proper format means it should be utf8 utf8 mb4 or something like that if it is not then this should automatically reject okay so public function i will call it escape value i don't call it it is widely called by this okay so it takes a value and then we simply write return and dollar this we refer to our connection again and then we see real escape string okay dollar value so this is sometime also used to remove the additional data that additional values that php address that php adds to the data like end of line character and other characters like that okay so this is gonna do that checks proper format of data okay so once this is done i think we just need to now close the database okay so once this is done the last function is to close the database so i'll call public function close connection and then over here we simply write this connection close and this closes the connection with sql which we created right over here okay so now let's format it okay so it is formatted now what i'm gonna do is i'm gonna create an instance of this database right over here call it database is equal to new database okay so this database is the name of the class okay so what i basically did was create a object called database with a small d of this class database with capital d so by this when i import this class in any other file i already have an instance of it and i can directly start using it so i save it and with this our database class is complete okay now we are gonna use only this instance to connect to run the sql queries get data from our database and everything okay so in the next video we shall actually start creating the classes and apis thank you so in this video we are going to continue prepare our backend so i have opened the design and kept it on me so that i can use it for future references i have fired up my mamp server and opened the phpmyadmin so you just need to write localhost and for its and slash and then a phpmyadmin okay so then your phpmyadmin will be available now let's open our code editor and start conti coding okay so in the previous video we completed our database helper class in this video we are gonna create a model class and by model class i mean the class that will actually store the values of a table that will be in our database so the first model class that we are going to create is of seller because seller will have the option to add products and then those products will be visible to the customer or the normal users of the app and then they can order it and all the other stuff that happens in an ecommerce application will happen there so let's continue so for that first i need to create a table and before that i need to create the database so i'll create a new database we'll call it better buys and that is what we call over here yes so the this name and this name should match only then this database file will be able to connect with this database instance so now this better bias is created now let's create the first table so the first table is gonna be sellers okay that will have the information of the seller okay now the first property will be id which is gonna be primary okay and it should be auto incrementing so i am hoping you all are familiar with the basic operations in sql if not you can go to w3school and have a look at it so w3 school is a very good content for beginners you can use it to get a hang of what we are doing okay so learn mysql you can go over here and have a look at all the things okay so now we first have the id then we will have name then we will have password okay after that image i need two more columns okay so after this i will have address okay because you can see in design we are gonna so that show the address of the seller and then a description about him okay so description also needs to be there okay so now id will be of type integer name however cannot be integer and it will be a very care of length 250. now you might be hoping why are we using varchar and not using varchar one oh sorry or it was varchar2 whatever it was but we are not using that because in my admin we actually don't have that you can see we only have varchar over here okay so that is the reason now password will also be a varchar of 100 okay image will be varchar 100 address will be varchar of 250 okay because address can be long sometimes and then description description might be longer so it will be 500 and now the giving 252 name makes no sense i'll make this 100 as well no name should generally cross be more than 100 characters i guess okay so this is done now let's save this and we have our first table over here that is seller so you can see all the data will be listed here and we can see the structure of our table by going in the structure section so you see how useful this phpmyadmin is okay so now since we have the table let's go to php and create its model class okay so now i'll create another folder over here sorry not inside this but over here and i will call it models okay and then inside model the first class is gonna be seller dot php okay so now let's actually start coding you we know that we start any php code by writing this then after that what i want is to include my database file over here so that i can use it to interact with the database okay so for that we will follow some steps we write a ds and we get directory separator over here okay sorry separator we get the directory separator so it will give us a special character that is used to separate between directories then we will get the base directory so we are getting the base directory dynamically because right now we know that it is on localhost 888 but later it will be hosted somewhere else okay so it is always useful to get the base directory dynamically and to do so we write a real path so this is a function in php okay which gives us the path then the directory name so their name okay and then we write double underscore i'm sorry double underscore file okay then separated by a directory separator and then two dots which means that to go one folder up okay these are basic unix commands dot directory separator okay so we end it to the directory separator so what it basically does is it gets the location over here then we have a directory separator okay and then after that there are two dots which in linux or you or unix system all together means to go one folder up so the folder above model is better wise okay so now we have the location of over here the base directory stores the location of our projects base which is better buys folder okay so i hope you get the gist now after that i'll write require once so require once is again a keyword in php it is used to load a php file in the file which is which it is being called in okay so over here i'll first access my base dir okay so to get so to get to the base base of the project okay then after that we have the folder called includes okay this folder includes then after that we want the directory separator okay because without that we won't be able to enter the includes file now once we add the directory separator we did enter the base file i uh includes file i'm sorry i forgot the dollar over here and then inside this we have database dot php okay so uh what this means is that we were at base directory which is better buys okay over here there was already a directory separator that means we were inside better wise then we looked for includes folder which is over here then we again added a directory separator which means we went inside the includes folder and then we called the file database dot php so with this in the file seller.php we have database dot php okay so now let's actually start creating the class so for that we use the keyword class seller okay so we need to document this as well including database okay so class is seller now after that we are gonna have some variables first the table name okay so let's make the variable private where we store the table name because the table name will not be accessed anywhere outside this class okay so private dollar table and then the table name over here is sellers so sellers okay then we create all the data types that we did public id then we have name password image address description okay name image okay sorry after name we have password password then image then address and description okay then after this the next thing is to create a constructor okay so in the last video we saw how to create a constructor we write public function then to underscore construct and we don't need to have anything inside this for now but creating a constructor is compulsory in php 5.8 okay now after that we will create a validate params function which we will use to validate the parameters okay that means that this function is going to be used when we store some value in the data types over here to check if the value actually exists or not okay so public function validate params and then it will take a value as a parameter and if it is not tempting okay value we return true else we return false okay so this is basically a helper function okay so it one way is to write it like this an easier way would be to simply write return not empty and the value so what this will do is that if this is true it returns true which we are actually doing over here and if it is false it will return false okay so now let's i had some documentation okay so validating of 12 amps exist or not okay now the next function is to actually save data in the database saving new data in database okay so for that we write public function register seller okay the name makes sense then we create a variable of database okay dollar database okay so we have already included database we are creating a variable of that over here okay now we are gonna manage this data data data members okay so i'll write one dollar this id is equal to trim html special cash strip tags dollar this id okay so i'll explain what this line does so one by one so first we have strip tags so what it basically does is it will remove all the tags that we have in html xml or php so that means that if this variable has some tags on it this will remove and give the value without tags okay then after that we have html special cash so what it does is it converts variables like this uh greater than or less than or slash or something like that to html entities okay so that it is able to be saved in the database and then we have trim so what trim does is it removes white spaces and other identified items from both the sides okay so we are gonna do this for this for all the five we don't need id here because we will create a new database because we'll create a new call row and then it will automatically be assigned id because id is primary and it is auto incrementing okay so this is gonna be name after name we have other four parameters so after name we have password after password there's image after image there's address and after address there's description okay so now once we have checked all the values we are going to store it in the database and for that we need to write a sql query so here we write insert into then dollar this table and then inside a bracket the key names that are key password image address description then values means we want to assign the values that we write inside these parentheses to these key values okay in the same order okay so now i want to break the stress so now the value should be inside quotes so i'll give that and then i want to break the string and add some php code over there okay so what i'm gonna do is i'm gonna add two double quotes okay so what it does is that the first quote ends this starting code and the second code starts this ending code and in between this i can add my php code okay so over here i am gonna write database escape value i'm sorry caps lock was on escape value dollar this name okay so in the previous video you have seen that we created a helper class called escape value to check if the string is uh means the string is justified to be stored in the database or not okay then we give a comma copy this for four times and then simply change the value over here image address and the description now since this is the last one we don't need a comma over here okay so this is the sql query and what it basically does is it inserts a row into this table while assigning these key values these means that these keys these values so i hope you understand this is not so tough but still if you are having any problem you can look into w3schools okay now we have the sql query we need to now run it okay so now since running it is again related to database we will need database over here okay so first let's create a variable to store it seller saved okay so now we write a database query okay so we had a function called query over here okay that takes an sql and executes it okay so in this query we are gonna give this sql okay now if it is if if the i'm sorry if the seller is saved we return database last insert id okay so last insert id basically means that the id given to the last column that was inserted and since this is the last column that was inserted it will return the id assigned to that column automatically by sql because it is auto incrementing okay so you will understand later why i am taking this so let's let's move on for now else false okay so with this this function is done in this function what we are basically doing is we are creating a global instance of database we are refining all our data members then we are creating an sql query that will i'm sorry i am we are creating an sql query that will store all these values okay and then we are finally executing it checking if it has some error if it has error we return false okay there is a return statement and if it has no error then we return the last insert id okay so i hope you understand so with this we have made the model class now let's create a variable of it or a more appropriate term would be an object like we created over here for our database class okay so i'm gonna write seller is equal to new seller okay so now once this is created in the next video we shall actually create an api means we will use this seller class to create an api and save the data in our database okay because right now we just have a function we don't know how to call it and all the other stuffs related to that okay so so in this video we are gonna make the register apf that means that we will make an api for a seller to register on the app okay so let's get started i'll create a new folder called api okay then inside this i'll create another folder called seller okay and then inside this there will be a new file called register.php okay so now let's start writing our api so for that you know to start we first write php any php file starts with this okay then the next thing that we have is a header okay so first let me write all then i'll explain each one of them one by one okay so first one is access control sorry allow origin and this is type star okay then the next one is content type and this is gonna be application dash json okay then the next thing is access control allow method and this is gonna be post and the last one is access control allow headers and this is gonna be origin content type and accept okay so let's go through each one of them one by one first there is this keyword header so what is the function of header so it controls what response is sent to the client header controls what will be the response sent to the client okay then inside this the first header is access control allow origin and that is star that means to check for the origin which all origins are allowed okay so by origin i mean the starting part of the domain like for now we have localhost colon and 48 so that is our origin okay and after that whatever we add those are the child parts of the domain okay so over here by writing star it means that we allow all all the origins to send request to this file okay so over here if i write localhost and then for it then only this domain can send request to me okay and any other domain means not me but through but to this file and any other domain then localhost colon 48 will not be able to send request to this file okay now after that there is content type and that is application json so it means that the content will be of the format json okay so the response will be in the json format okay now after that we have access control allow method post so it decides so over here it is defined which type of request will it allow there are many types of request but there are four majorly used that is get post delete and put okay so over here we are gonna use post we will see all the other types of requests and we will see and we will also learn when and how they are used okay and then we have access control allow headers and that is origin content type accept so you don't need to worry about this line this is used to handle preflight request okay so this is used to handle preflight request and by ple preflight request i mean that this is the small request sent before the actual request okay so in an api first there is a small request sent that is the preflight request and then its response is handled by this header and after that the actual request comes okay so i hope you understand the use of all the all the headers now let's proceed so now we need to include this seller class in our register.php so we'll write include once okay so now over here you might have seen i had written require ones now over here it is include ones so they have no difference absolutely no difference except when it comes about error handling okay so you can see a search on google what is the difference between include and require in php you will get the same answer that there is no difference there is only some difference when there is an error when error occurs because of this include or required okay so now include once this folder that is the seller then again api folder and i'm out of it so now i am in better buys folder and from there i'll go to models folder and from there to seller dot p h p now this needs to be be inside quotes okay so now you might have seen that over here i was using a directory separator and over here i am using this referencing method so we can use both but it is suggested you always stick to this method that is dynamically creating the directory and stuff okay so after this now uh over here we have seen that only post method is allowed for this api okay so now let's do a check that if the method is post or not okay so for that i'll write if dollar server so this is a reserved array that we have in pi uh php it store all all the details about the server and over here only we have a data type data member called request method okay so if the request to method is of type post then it is all right and if it is not then we shall we should send an error so over here also you can notice that is similar to javascript we can use three equal to's over here now let's send the error first and then we can add the stuff over here so for handling the error we write die header http dash 1.1 405 request method not allowed so what this means is that we add this header that is this will be the response this is the response code which is five four zero five which basically means request method is not allowed but we added a string as well and then we have this die over here so die basically stops the execution of the code when the php compiler executes die it doesn't go to the next line it ends the program then and there okay so this will be the case when the request is not of the type post but suppose if it is of type post then we shall take all the data and then store it to our database so let's do that okay so firstly over here in seller you can see that we need five things name password image address and a description okay so there is a bug and here as well i don't know how address description address description address description okay so we need a name a password image address and description okay so let's check for that so we write if seller dollar seller so this seller is the object that we created over here okay so this is the object and then we call the method validate params okay which is nothing but this method over here validate okay so over here also the spelling is wrong validate params and then over here we write post so post is another reserved array that php has and it has all the data sent via the post request okay so post and then we write the keyword that is name so if the post method has name okay then we need to assign it to the variable that we have in seller class that is name okay so we do this by writing seller name dollar post name okay and if name is not there since name is a necessary uh option means it is required for the api to have the value for name so if it is not present we will return an error so for that we write echo echo is used for printing anything in python or in a php not python i'm extremely sorry echo then we have json and code okay so this is used to encode an array to just jason that being said it takes an array so for that we create a new array we create an array by using the keyword array okay and then we add key value key uh key value pairs to it okay so i'm gonna add a success and then we don't give colons over here we use the this arrow that is equal to and angle bracket okay and then we i'll give a message name is required okay and then die so that it stops executing here only okay so what this is gonna do is if the if the request has a key value pair of name then it is gonna save that value in our seller object otherwise it is gonna send an error okay now the same is gonna be done for password okay so over here it is password password password password with a capital p okay so name password now we have name we have password image address and description so i think we also need email or mobile number or we can have both okay so that it is easier for uh the seller to login okay because we can't basically log in just with password we can't create that type of uh system that is no that can be done but that is not efficient okay so i'll add another property that is email and that i'll add after name okay and that is gonna be email it is gonna be of type of varcat 100 save okay so now if it is added here so we need to add it here as well after name we are gonna have public email okay now after name this is gonna be email after name here it will be email after name here it will be email so it is over here here here and in the data type okay so email data email data member is added okay so now let's take that from the post request so over here it is going to be email email email email with a capital e so email is required okay so now name is name is required email is required password is required next we have a image okay so to so image is a file so the code is little bit different for it okay so it goes like first we create a folder so i'm gonna call it seller images folder okay and that is gonna be assets i'm gonna create a new folder called assets and then there will be another folder a folder called seller images okay so let's create a folder not over here but over here okay bring it out move so now inside assets i am gonna have a new folder called seller images okay so now this asset is gonna contain images which i don't want to add in my version control so i'm gonna create a new file and call it dot get ignore okay so this is a specific type of file that our version control that is get understand over here we write all the files that we want to ignore while adding the project to version control so over here in that case it is assets so assets with a dash means that this folder including all the things that are inside this will not be added in version control and you can see that its color has become a little bit dim that is because it is added in get techno get ignore and it is not a part of the version control okay so i hope you get my point so now we have created the folder known means we have decided with the name not created the folder now we check if the folder exists or not so is there okay so that means it checks if it is a directory or not seller images folder so if it is not what we are gonna do is we are gonna make the directory seller images folder okay now we are gonna check that our post request has that file or not so for that another if and over here we write is set means it there is a set that exists inside the error that we give inside this parentheses okay so now there is another array reserved by php that stores all the files sent in a request so that is called files okay so we are gonna check if it has image okay so what it basically does is it checks if this file array has a key named image or not okay so if it doesn't have image we don't do anything because image is not compulsory okay but if it does have then we need to save it so let's write code for saving the image okay so let's get the file name okay and that is dollar files image name then we get the files temporary uh address okay so we write file dmp and that is dollar files image temp name so this will send the entire address along with the name of the file okay so then we get the extension of this file because we are not sure if it is a png or a jpeg so for that we write extension okay and that is end of explode dot com dollar file name so what it does is it explodes file name based on this dot that means it will split the name based on this dot and return an array okay so if the it splits uh based on the dot it is understandable that the last value is gonna be the extension and that is what we get if we use end okay so this end function returns the last value of any array inside it so by that we get the extension over here now let's create the new file name so the new file name is gonna be seller email okay because emails are unique we need that okay sellers email then we do string concatenation profile and then we add the extension okay now we have the new file name now let's finally save it so for that we have a function in php called move upload file and then over here we use file tmp command seller images folder not means we go inside that folder by this dash and then we use the new file name okay so once this is done we will add the address to the data type so data member so that we can save it in our database and using the address we can display it in our apps so seller image is gonna be seller images new file name okay so this is done our image will be stored now after image we have address and description so we need to take that as well so i'll again copy this paste it and then the first one is address so address address address address with a capital a is required okay and description is also required description with a capital d okay so if there is an error in this api these messages will be displayed accordingly so we need to keep in mind what is the message and the message has no grammatical errors okay so now at this point if the code is running that means it has got all the data members value now let's finally save it so for that we write if dollar id that will be the last insert id okay last insert id that we are saving that we are returning here if this method is successfully executed so for that we write seller register seller okay so if this method is successfully executed it returns an id okay that will be anything if it not then it returns false and then this if condition will not be executed so if it is executed then we give the response as echo okay we don't need to write all this i can simply copy it okay the response is gonna be one okay we are uh keeping away our means assembling our format that if success means zero there is an error and we should display this message in our phone and if the success is one that means the api has executed successfully and if you want to display this message display or do the stuff after that okay so that is over here it is going to be seller registered okay and if not i'm sorry and if not then first i need to set the response code http response code means the code that it is gonna send in response that is 500 okay now over here it is again gonna be zero and it will be internal server error okay which is basically what 500 stands for okay so with this our api is complete so in this video we are gonna continue with our php back end okay so i have the design already open okay i'll simply fire up my mamp server so once it has started we'll open our code editor and continue with the coding okay so i already have better buys open over here now in the previous video we have completed the code for our register api now it's time to run it okay so for running it we application called postman okay so if you don't have it you can simply go to this link postman.com and download it and even if you don't want to download it that's all right because you can use it in the browser itself okay but i have it downloaded over here with me so i'll open it now i'll create a new request okay so over here this type will be post because you can see in the code editor we are allowing only post requests okay so i've changed it to post now i need to write the url so first it is gonna be local host colon it'll tilt it because as i've already told mamp runs on localhost and for its okay then we write the name of the folder that is better buys okay and then after better buys we have api then seller and then register.php so we write api then seller then register dot php okay so now if i send a request okay so it is giving me internal server error so that means there is some error in the code okay so i don't think it is over here let's take our model class so i don't think it is here either now let's check our database class okay so i can see it over here only it i have a typing error so it will be localhost okay then it should be public function constructor not just public constructor i am extremely sorry okay and after that this shouldn't be a comma but a dot because uh string concatenation in php happens with a dot same over here okay so now if i try to format it yes it has formatted as php should be okay so this is fine now let's save this okay then again we go to our postman send a request and then it is saying name is required okay so that is exactly as we wanted it to be okay so first it checked if the server method is post or not which is true so we can change it to get and see what is the error that we get so we get 405 request method not allowed which is exactly the same as we write over here 405 request method not allowed so i'll change it back to post okay and then it is telling name is required so this error occurs when name is not there okay so let's give it a name so in a post request we don't uh give values in params but in body and in form data okay so over here i'll give the key as a name okay now keep in mind this uh spelling and this spelling should be exactly the same okay so the name of seller is gonna be rishabh kumar that is my name okay then after that i also need to give an email so email and email is gonna be rishov at the rate gmail.com okay then after that password so i'll give a simple password for now although it is not suggested to use such type of passwords anywhere okay then after that i need to give a seller image and even if i don't it should work fine okay so i'll skip this for the moment okay so for that i'll add the name and then unselect this so that later i can add a image but if not also then it is not an issue okay then after that we need to give an address so the address is so the address is gonna be the same as i have written in sigma because that is a legit address so i'm gonna copy it go to postman and then paste it okay then after that we have i guess we have description okay so we have description we write the description and for description again we'll use lorem ipsum okay now after description it should save okay so let's see if that is the case or not so i'll click on send and it is again giving me an internal server error okay so let's see what is the error now okay so the error is this is the error message that means this function is causing errors so let's get inside the seller okay and then inside seller this is the error because i am using a function last insert id and it is not in my database class so it is giving an error okay so for now i'll just make it true okay just true later we'll add the last insert id again okay and maybe even not if that is not required in some cases it is so it is suggested to always use that okay so now it is done now let's send and it is still giving an error let's see what is it okay so let's go to database and and we need to add a password over here i'm extremely sorry it was not needed in xampp so i forgot that in mamp it is required you can see over here the password should be root okay so once this is done i think now it should work okay so i'll open it again so i'll open postman yeah and click on send and it gives us a message seller is registered okay and now if we go to our database and inside sellers we can see our seller the seller name is rishabh kumar email password address and description okay so now you can see that the password is quality which is visible to everyone who has access to your database and can read the password then login with login as this user and then change things okay so this is not a suitable way to store the data means in which the password is human readable okay so to avoid that we are gonna hash it and to hash it we are gonna use bcrypt okay so bcrypt is a file that means bcrypt is md5 hashing okay you can read more about it by simply typing md5 or bankrupt in google and get to know about it it is a type of hashing which will convert a human readable sentence or keys to something and means a lot of number so that human cannot understand that and decoding it back to the human readable uh human readable string will take lots and lots of time okay so for so let's implement this in our project so what i'm gonna do is open this dot php okay copy the entire code and then inside our includes folder i'm gonna create a new file called bcrypt.php okay and inside this i'm gonna paste it okay then save it close it and now we go to our seller.php along with the database we include the bcrypt okay over here the name changes to bcrypt now let's see how to hash it okay so over here you can see we can hash our password simply by writing bcrypt dot hash password okay so i'll copy it and where we are storing the password in our database which is over here i am gonna write over here i'm gonna paste bcrypt.hash password and this password okay so now let's save this and let's try to send a request again okay so now if i send it okay it is giving me an error so i think this is because of okay so this was the error i'm sorry now let's see so the seller is registered now if we go and open our database okay we need to refresh it the password here is something like this this is the hashed version of qwerty only because you can see in our request the password is still qwerty but it is in database stored in such a manner that normal human being cannot understand what this actually means okay so in this way your data becomes more it becomes more secure okay and that is a plus point okay so with this we created a api to register the users okay but there is still one flaw and the flaw is that there are user multiple users with the same email which is not the ideal case okay and the next flaw is that we have this extension dot php which we don't want okay we simply want to write the seller register and that's it not the dot php okay so we will see how to fix both of these in the next video thank you so in this video we are gonna fix the bugs that we discussed in the previous video so the first one that we are going to tackle is check if the email is unique or not so for that we will go in the seller model class okay over here i will create a new function okay i can remove this i'll create a new function to check if email is unique or not okay so public function check unique email okay then there will be global dollar database okay then we are we need to check the email so for that we need this okay we need to trim our email means make the email data ready for interacting with database okay i have already explained the meaning of these three functions in one of the earlier videos okay so now let's write our sql code the sql code is gonna select all the uh rows which have email as the email entered in the api so for that i'll write select id from dollar this table where email is equal to then single quotes double quotes then two dot and then simply this email okay i'll paste it over here now let's run this sql command so for that result is equal to database query sql okay so now we will get the result now let's get the row so so let's get the values that this result has okay so for that i'll write user id okay so means the because since we are extracting only the id i'm naming the variable user id that makes the most sense then database and then inside our database class we had a function to get only one row uh getting only one row and that is called fetch row okay so we are going to use that database fetch row and inside this we will give our result okay so now if there is any uh other id with the email that is entered by the user then that's that user's user id should be stored in this user id so we just need to check if this is empty or not if this is empty that means that this this email doesn't exist in our database that means it is unique and if it is not empty that means that this email already exists in our database and hence it is not unique so for that i'll write if empty dollar user id we return else we return false okay and i we have already discussed an easier method to do this we simply write return this so if this is empty that means it is true so it will return true if it is not empty it will return false it is understandable okay so this is done now let's clear our database and then try running the api again okay so this is the database i'll check all delete yes so now my database is empty my table is empty okay now let's finally call the api okay so the first time it should work okay and it did so we got the result as seller registered okay and then in our database we got one okay so we made a mistake over here we created the function but we didn't call it so even though we have the function it will still uh work means it will still not work that means there might be users with might there might be more than one users with the same email okay which is the case right now so i'm sorry for that we have created the function we need to call it now okay so for that let's go in the code in our api okay where we are saving the data so before saving i want to check that if it is unique or not if the email is unique or not so for that i'll simply write if seller and then the function name and the function name is check unique email if the if this returns true okay then we proceed with saving the data okay else we return an error okay so the error is gonna be this this is going to be 401 that means it is unauthorized and the message is gonna be email already exists okay so let's save this now i'll again clear my database okay so it is already cleared now it should work the first time okay so it did work we have seller registered now if i call the api again then it shouldn't work okay and it didn't it is saying success zero and the messages email already exists so now with this we have prevented our database from having a user more multiple users with a single email id okay so this error is fixed now let's commit this and move forward to the next error okay so for that i will simply write get status that checks what all changes have been done then get add then a dot that means add all the changes to the staging area then if again we write get status it is in green that means they all have been added to staging area then we commit the changes so get commit dash m stands for message and then with a course we write the message the message is gonna be checking email is unique or not okay and then with this it is committed now i'll push it to my github and the link will be in the description so get push and it is pushed okay so the second error was that we don't want this dot php over here in our api okay so for that we are gonna create a new file in our root folder okay and that is gonna be dot ht access ht access okay i'll bring it to the root move so this is a special type of file that php understands and over here we write some different kind of kind of code we don't need to understand that okay means means it is better if you understand that if you don't understand then there is not an issue there are there are basically four lines we can remember it okay so we write so let's start we write rewrite engine on then we write co d as in condition rewrite condition and that is gonna be a percentage sign curly braces request file name okay file name then we'll leave a space exclamation mark dash d then the right condition again a percentage sign request file name okay then after that we give a backslash dot php then space dash f and then after that we write the write okay i'm sorry it is dash f now after that we write rewrite and then rule then we give uh exponent open parenthesis inside this we write to dot asterisk then we come out of parenthesis give a dollar leave a space dollar one dot php okay so this is done now let's save this okay so now if i remove this dot php then also this api should work okay so and it does okay now if we didn't had this file and i remove dot php then it will not work okay but since we have this ht access even if we give the dot php extension or we don't give it this will work okay so we have fixed both the errors this was for the video thank you so in this video we are gonna continue preparing our back end okay so let's start i already have everything fired up okay so the mam server is running i have sigma open here okay i also have the database open with me and then postman to run our apis okay and the code editor to actually code okay so let's get started so the next thing that we're gonna do is we are gonna uh make an api for the seller to log in okay so a seller can register seller will also need to login okay so suppose if the seller has an account on one device and he installs the same app on another device okay so over there he is not gonna create another account but he's gonna log in to the same account so let's write code for that okay so it is login function over here we'll call it login we'll create a instance of our database okay then for login we will take the email and password okay so or do we have mobile number okay so since mobile number is not there we'll stick with email only okay if you want you can change email to mobile number because some vendors might not have an email but all of them will have a what do i say the mobile number okay so for logging in we will use email and password so i'll copy it from here and paste it over here so that in this function as well we prepare these values to be added in the query okay in the sql query so let's check that okay so i'll write sql select star from this database sorry this table i'm sorry where email is equal to well this email so i'll copy it from here paste it over here okay so now we have the seller whose email corresponds with the email entered by the seller in our front end okay so now after that once we have the details of the seller we are gonna check if the password matches or not okay so first let's run this we so for that we write result is a database query because we have seen to run the query we will call this query function that we have created in our database class so once we get the result let's fetch the row so uh let's call it seller and this is database okay so what was the function name okay so it is fetch row so we will fetch row and over here we need to give the result okay so that this function fetches the first row from uh this this result variable okay so now since we have the result we will check uh if the seller exists or not okay so for that there is another method in php which is called empty it checks if uh if the if the variable inside this parenthesis is empty or not okay so over here this will be seller so if it is empty that means the seller doesn't exist so we can simply return a string that says sell seller doesn't exist okay else we have a seller so then we will check the password okay so for that again i'll have to open the uh decrypt documentation so i'll simply go to the github link from where we have copied the code okay so over here to check the password we have decrypt check password and it returns true or false so this is what we are gonna do we are gonna write if uh decrypt check password decrypt check password and then over here will be our password that is stored in database so that is inside seller and over here we are calling it password so the key value is password and we check it with the value entered by the user so that is this okay so now if it is true that this means that password matches else else we simply return password doesn't match okay and over okay so this is not like this yes and if it matches then we will simply return the user's details okay so that is return seller okay so now our function is ready let's create the api endpoint okay so for that inside the seller folder only i'll create a new file we'll call it login dot php okay and now let's copy some part of the code from the register.php so all these things will be the same this is also going to be a request of type post okay so we copy this as well now we are gonna take email and password as the input so i'll copy the validation function for those two only not a function but the validation conditional code that is if else so i'll copy these two uh paste it over here okay so this means that once this api endpoint is called it will check if the email is given or not if the password is given or not if not then the else condition will be executed and there is a die that means the execution will stop then and there okay so it means that this will reach this state okay it will reach line 25 only when the request has email and password both okay so now once that is done we should we shall get the value okay so i'll call it simple s because the seller is already the object name okay so seller and then the function name the function's name is login okay so login now we check the type simply so if uh get a type so get a type returns the type of the variable and it is s and if it is equal to string okay uh that means if it is string then that means either this is returned or this is returned okay because this is a array and if this is returned then this if condition over here will be false so if it is true that means some error has occurred and we shall send a message accordingly okay so i don't need a die here because this is the last if else okay so the success is zero and the message is gonna be nothing but dollar s okay and then we will set the response type as http uh response code and that is four zero two okay and else if this is not a string then it has to be an array and if it is an error then we simply change the response code to zero success to one and the messages login successful okay and the uh user or sorry seller is dollar s okay so let's format it save it now let's try running this api so for that we open postman okay i'll copy this link and then paste it over here and it is only gonna change from the register to login because the folder directory is exactly the same as register only the file name has changed that means the last value and we don't need a dot php because we already have htaccess so i changed its method from get to post then in inside body inside form data first let's check if we have some data or not okay so our database is empty so let's first register a user and that is rishabh kumar okay so the email over here is rishabhadra gmail.com and password is qwerty so let's see now once this is done i'll go and check my database refresh it and we have the user over here so now let's try logging in okay so for that over here first simply call like this and it says email is required as i told you it will not execute until we have given both the things so email is rishabhard.gmail.com okay so now password is also required and the password was qwerty now let's see what is the response so it it is it has got some error let's see what is that okay seller login offices okay so i think let's change it to array i think the string is written in some other format now if i click on send still there is some error so i'll have to look into it okay so i found the error okay so over here you can see we first need to give the password and then the hash password but in my code i have first given the hashed password and then the normal password so i think that is the reason for that so i'm gonna fix it i saved it now let's see and this api is working it says success and the message is login successful and we have the seller over here so now if i change the password and then click on send then it says password doesn't match okay and now again i'll click on send and see okay so login successful now let's i'll try to change the email and see so it says seller doesn't exist so i think it is working properly uh login api is done now although there is one thing i don't want i don't want to return the password of the user so let's do that for so for that i will do a quick google search uh how to remove key value pair from php array okay how to delete an array element based on the key in a php so i think this is the answer so we have unset okay so we write like this okay so now let's try that so i'll write unset and then i'll write seller password so now this password value will be removed from this seller array so let's format it save it okay and then if i run this i think the password will not be returned this time so let's see and it isn't so i think with this our login api is done so i'll uh commit it so i'll check the status uh these changes are not committed so i'll add them all to the staging area then again i'll check the status and both both are added in the committing staging area so now i'll commit it with a message login api created okay and then push it so with this our login api is done in the next video we shall proceed further thank you so in this video we shall start with storing our products okay so for that first i'll open my database so in this we are gonna create a new table and that is gonna be uh products i'm sorry we are gonna create a new table and its name is gonna be products okay uh so first is gonna be id that is gonna be primary okay and it should be auto incrementing it is of integer data type okay then after that we have seller id okay so this is a foreign key in the comments i'll write foreign key linking to seller table okay so you should know the basic terminology of dbms if you don't you can simply do a google search and get to know all about it okay then the name of the product image of the product okay then after that i think we need more four columns so i'll add those okay then after image we have price per kg okay so the price then we have description okay not a space okay that's encryption and then we have interaction count okay so this this parameter will uh help us generate the trending thing or what we have called areas so this will help in the most popular in getting us the most popular list okay so by this what i mean is that every time uh the product is added in the cart or ordered we will increment its value by one and thus by getting the uh getting to and thus with the highest number of interaction count will be the most popular and then uh others arranged in descending order okay so this is it and after that we don't need a time okay so now this name is gonna be varkar of let's say hundred characters at max image is again gonna be worker of hundred characters at max uh price per kg uh is also gonna be work at 100 characters max and description is going to be where care let's say 1000 characters at max because descriptions are large now interaction count is going to be integer only okay so i think this is done our table is created okay so we can see the structure we have id seller id name image price per kg description and interaction count okay so i forgot one thing in starting it should be zero okay so uh we will go to default as defined zero so that this means that if we don't give any value to this by default it will be assigned a value of zero so let's save this okay and with this our products table is ready okay so now let's create create a model class in our php so for that i'll open up up the vs code okay inside the models folder i'll create a new file that is uh products dot php okay and then this will also have these things at the start okay uh we can remove the b crypt because we are not gonna store any passwords here okay then let's create a class and the class is class product okay we need to give a capital p because class name starts with the capital okay then after that we will define the keyword key values i mean the names of the data members okay so first we have a private variable that is our table name private dollar table and that is gonna be products then we have id we have seller id we have the name we have image we have price per kg we have description and last we have interaction count okay so interaction count after this we have a constructor and validate params function this is same in bo in all the model classes so i'll simply copy it and paste it over here then the next thing is storing a product okay so we'll create a method for that first let me format it okay so i don't know why this is happening means like the format thing is not working okay anyway it has formatted now now let's create the function to store the details of the product so i'll call a public function add product okay then as always this is gonna have a global instance of our database okay and then we will take all these properties except id and then prepare them to be added in the query so that is done by adding these three things that is trim html special cares and strip tags we have discussed about all all of them in one of the video okay so the first is seller id so this is gonna be seller id then after that we have another five so i'll copy it and paste it five times and then simply change the name so this is the description and then this is interaction count okay so this was the reason why the formatting was not working i forgot to give a dollar sign over here okay so now once this is done let's store it in our database so for that we again write an sql command sql do not select but insert into dollar this table and then we write the key names that is a seller id name image price per kg okay then description then enter okay we don't need to add the interaction count because it will be zero by default okay description now we need to check for spellings because if the spelling doesn't match it will crash so it does match okay values then over here i'll break the string uh i have already discussed these purpose of these six characters in one of the video you can look into it okay then after that over here we write this thing okay we call the method escape value which is in our database class okay database escape value this name okay so first it is gonna be seller id i'm sorry seller id then there will be a comma now after this another four and the last one will not have a comma then the name image price per kg and the description okay so once this is done let's save our database so save this row in our table i'm sorry we can't save the database so database query and sql so now if we check if result means if it has a something that means the it has been executed successfully then we return a true else we return false so if everything is correct it should format itself automatically and it did now let's save this okay so with this our function is created we shall create the end point in the next video thank you so in this video we are gonna create the end point to store the details of a product okay so i'll open my editor now inside this seller folder which is inside api folder i'll create a new file and call it add dot php okay so now i'll open my register.php and copy code from here okay till the if condition now over here instead of seller this is gonna be product okay and the type is still gonna be post okay now let's copy the else block okay that which is the case when the request is not a post request okay so and this is done now if the request is post then we need to take a few data and then process them accordingly so in the products model class you can see that for adding a product we need five things that is seller id name image price per kg and a description sorry so let's take this value so for that i'll again open register okay and then i'll copy the first one first means validating parameters if else condition or the conditional block okay now over here instead of seller it is gonna be product okay let's check if we have created this object or not okay so you can see that we have not created an object for this class product so let's do that before that i'll add a comment over here storing product details okay uh class ends and then object i am sorry okay and then i am gonna call it product is equal to new product with a capital p i am sorry uh this needs to be capital p okay so the object is created now i'm gonna use that over here so product and this is also gonna be product and we first uh first we need the seller id so i'll simply copy it uh paste it over here post should have seller id it should be saved in the seller id variable of the product object and if it is not there then we give a message that seller id is required oh sorry it was already there okay so now we need a similarly for four others so i'll copy it four times means actually paste it four times copy it once so after after seller id we have name so let's uh check the uh let's validate the parameters for this as well so this is gonna be name over here also name and this is gonna be name is required okay then uh then after that we have image okay so for image the process is not same so we'll do that at last let's first validate parameters for this price per kg and a description okay so over here i'll write price per kg price per kg price per kg and over here it is gonna be price per kg is required okay and then after that we have description okay so let's add for this as well this is gonna be description description and over here also it's gonna be description with a capital d okay so now we don't need these now let's uh store the image so we have already stored an image which was the seller's image in our registered api so i'm gonna copy the code from there and edit it as per our requirement okay so this was the part okay i'll even comment it saving picture of seller okay so this is done now over here after name saving picture of product okay now this is gonna be this is not gonna be seller images folder this is gonna be product images folder over here also name changes to product images now i'm gonna copy paste simple okay so then again file name is gonna be same file temp is gonna be same extensions gonna be same now new file name will change we don't have a seller email over here but we do have a seller id so i think i'll use that instead of this okay now instead of profile it's gonna be product okay and then after this i'll also add the name name of the product okay so for that i'll copy this paste it over here product name and then the extension and then we are saving it to product images folder not seller images folder then the new file name then this is called product images not the seller images okay now if this is not available if image is not available then we shouldn't proceed because in product the image of product is compulsory okay so that is why i'm gonna give an error message if the picture is not present so i'm gonna say photo is required okay so now once we have everything uh let's actually save it to our database so i'll write if product and then i'll check the function name it is add product okay so over here this simply returns true or false okay no problem so now if add product returns true that means the product has been added successfully so we simply need to return this and the success is gonna be one that means true and the message is gonna be product successfully added okay so it is gonna be you and this needs to be capital p okay else that means it is it has returned false so i'll change the success to zero and the message is gonna be internal server error and the response code will be 500 which is used for internal server error so i'm gonna write http response code and that is 500 okay so with this this api is done now let's try running this okay so i'll save it then i'll open my postman okay now i'll copy this url and then we'll i'll create another request okay it is gonna be of type post and then this is gonna be add instead of login uh because you can see the folder structure is entirely same just to the last file name is changing okay so it has changed from login to ad and so is our url okay so now if i click on post it is giving me internal server error let's see why okay so it is not working because the spelling is wrong there needs to be an s or what makes more sense is this remains same and i change the name of the file only okay because product makes more sense rather than products okay so this is done now let's try running the api so it is saying seller id is required so we go inside body inform body we write seller id and that is one because in our login api the id of seller is one okay then after that name that is the product name so it is gonna be cucumber okay and then after that we have image and we want to send a file and okay so image and then i'll add a cucumber's image okay now after that we have price per kg okay so let's say it is 40 and then after that we have description okay so for that we are going to use lorem ipsum and we have seen in one of the videos uh this website called lorem ipsum dot io so it has means it provides you lorem ipsum for your use okay so i'm gonna copy it then in my description i'm gonna paste it okay so this is done we have added the description now let's try uh calling this api okay so i'll click on send and then let's see what happens okay so you can see product successfully added okay now let's check our database okay means if the data has been entered correctly or not okay so if i refresh i'm able to see the id is one seller ideas one name is cucumber image is not here but we have price per kg and description okay so image should be there let's see what's the problem okay so this is still a seller but we want need to but it needs to be product okay so i'll save it then in my database i'll delete it okay and then again i'll call my api so let's see this time now the product is successfully added let's go and check again and you can see now this time we have our product images but there is a error you can see that this dot between the name and the extension is missing so i'll add it over here and then fix this problem in my code okay so where we are saving the new file names okay so after this we need to give a dot but i missed that okay so i'll add it straight away now if the error is over here then it might also be in the register api so let's go and check over there okay over here also we have not given the dot okay so i gave that now it is done okay so i think this is done okay so with this our api is ready we can now save product not we but the sellers can now save the their product to the database okay so this was for the video thank you so in this video we are gonna continue with our back end and then and today we are gonna make an api to get the list of all the sellers okay so that we can show it to the user and then the user will select one his favorite uh seller and then we will show all the products that that seller has okay so let's get started with it so inside uh let's go inside the seller table okay so over here i'll create a function to get the list of all the sellers okay so let's get started method to return the list of sellers so i can close this for now okay so let's start so it's public function all sellers okay then over here we will have a instance of our database then our sql query is gonna be select and let's see what all datas are what all key value pairs are needed so for that i'll open my uh database so as to see what all values we actually have at the moment okay so i don't know how its theme got changed okay so now it looks better so i'll go in my better wise table inside seller i think by just giving the name image and the address would be enough okay so what i am planning to do is to show a list of sellers and then with the basic details and from there user can select any of the seller and then we will be displaying the products for which we have already designed the screen so i think the id name image and address would do so we will get only these things id name image address id name image address we need to keep a close look on the spellings if we mess up the spellings everything is gonna go haywire so we will so the query is select id name image address from this table okay so this is our very basic query now let's run it so it is result database query sql and once we run this we will get a result with all the tables so we will then fetch the fetch all the rows and for that in our database class we already created a function that is called fetch array so what we are going to do over here is simply return database fetch array and it takes our result instance okay so now what it will do is it will fetch all the columns and then return it as an array and that will in turn be returned by this function okay so now let's create an api to call this function so inside api i am gonna create a new folder that will be global or general so i'll call it general and inside this i'll create a new file that is sellers i'm sorry it needs to be sellers.php so i'm gonna rename it sellers.php now it is gonna be like this with slight changes means all the apis are almost the same we have very slight changes here and there so i'll copy this paste it over here this is gonna be get because we are fetching the details from the database and not adding anything or performing any query on the database so the most suitable type of request is gonna be the get request and the table here being used is the seller table so over here instead of getting the product table i'm gonna get the seller table okay so it is just a seller now after this we have this condition to check if it is of the mentioned type or not so let's do that over here it is gonna be get okay and then if it is not we have else else we return this okay now after this we can simply call that function and get the list so i'm gonna write echo json encode array success one so this is gonna be sellers and it is seller which is the object of this class here's seller and then the function name okay so that is all sellers so i write it over here and this is done so what basically happened over here was that we checked if it is a get request if it is a get request then we give the output as success is one and as in the sellers we get the list of all the sellers and directly return it okay so the api is ready now let's try running it so for that i'll open my postman okay so this is the address of our api so i'm gonna simply paste it and change the last part so inside api we are inside a folder called gen so it is gonna be gen and then we are in the file sellers so i'm gonna write sellers okay so now let's hit send and see and we did get the list a list of all the sellers so right now we only have one seller now let's try creating another seller okay so instead of rishabh kumar it is gonna be ayush singh and it can be ayush and the password instead of qwerty can be one two three four five six although it is not suggested okay and the address can be the same description can be the same and then let's register it okay so seller registered and now if we get the list of all the sellers then we are getting two sellers first one is rishabh kumar and the second one is sync so with this the the api is complete we have an api to get the list of all the sellers okay which we can use in the screen to display the list of the sellers for the user to choose okay so this was for the video thank you so in this video we are gonna make an api that will get us the list of products per seller okay so that means that we will give the seller id and then we will get all the products that that particular seller has added okay so let's get started okay so in in the product dot php we will create a new function for the same okay so method to return the list of products per seller okay so this is gonna be public function get products per seller okay now as usual we are gonna have a global instance of our database now after that all we need over here is a seller id so i am gonna copy it from there to here okay now after that we can write our query so that is gonna be select star from this table where seller id is equal to then single quotes okay then double quotes to break the string and then two dots to insert some value in between so that is gonna be this seller id so i'm gonna copy and paste simple now uh let's simply run this query and get the list of products so that is very similar to what we did over here in the all sellers function okay we got the result and then we fetched the list from it so i'm gonna do the same simply paste it over here so again this function is done now let's make an api for it so over here we are again gonna create a new file and that is gonna be products dot php okay now again this is will be very similar to what we have in sellers okay only that we will have a parameter that is the seller id okay so this is gonna be get over here we don't need a seller but we need the product okay and then we are checking that if the method is get okay now the another thing that we need to check is that if we have given the seller id or not because if we don't have the seller id we will not be able to get the products because we saw that in the query we need the seller id okay so again for checking there is a simple block of code and that is this one simply copy paste over here this is gonna be product but this is not gonna be post this is gonna be get because it is a get request okay so i'll change it and this is not gonna be description but the seller id so seller id seller id and seller id and over here also we will write that seller id is required so now if it comes to line 18 that means that seller id is there and then we simply return the list of sellers okay so for that i write echo json encode and then array then success and that is gonna be one and products that is gonna be a product that is the object of product class and then the function name so the function name is get products per seller so i'm gonna copy that paste it over here and let's see so i'm sorry let's save this okay over here is an error it needs there is a simple spelling mistake i'm sorry for that format this save this okay so this is done now let's try calling it so i am gonna call it again this is gonna be a get request i'll paste it and instead of seller this time it is gonna be products or product yes we have a product with us and also we need to give the seller id so that we give in the params section okay please note that if we are sending a get request we send the parameters in params because that will in turn go as a part of the url so you will see now see as soon as i write seller id over here it gets added in in the url itself and the value for it as well okay so now let's send this and see and we got the product now since uh the seller one is rishabh and in that idea i actually have only one product so that is why we are seeing only one product okay now later when we add more products we will be able to see them subsequently so with this this api is also complete now you uh might be thinking okay first let's add version control to it and then we'll discuss and point for getting products per seller okay so what i was saying is that you might be thinking that these products and sellers are very uh insecure apis means if anyone knows the url they can get all the data and might be misused okay so we are going to add security to it and for that we will be using jwt authentication so we will be seeing later in these in this series okay so in the next video we shall start with the front end part okay so this was for the video thank you so as i said in the previous video in this video we shall start with developing the flutter part so before we dive right into the code i just want to open figma and show you a few things so uh i added two new screens okay and i'll tell you how the flow is gonna be so for uh means uh prototyping means uh deciding how the flow is gonna be we need to go in the prototyping section okay then from here everything is very simple i select this screen now if i want now if this screen is clicked i want to go on the seller screen so what i'm gonna do is i'm gonna select this big white circle and drag it to the screen to the next screen where i want it to go okay now over here i have many options to choose i am just gonna make it smart animate okay now so this is done so now what will happen then that if we click on this screen in figma preview we will be taken to this screen and now over here if i click on this item i want to go on the product screen so that is how our flow is gonna be that if i click on any of the seller i will be able to see all the products that that seller has okay and then after that if any of the product is clicked then we will for sure go to its uh product details okay so with this our very basic prototyping is done let's see okay so now if i click on this screen i am taken to the category screen and you saw how the better bias which was in center flew to the top left corner this is called hero animation and we shall be doing it okay and then after that if i click on this i am taken to the product screen and now if i click on any of the products i am able to see its details so this is what our flow is gonna be for now so let's uh open uh vs code and start coding okay so first i'll create a new project i'm gonna write flutter create better buys so this will create a flutter project with the name better buys okay so this will take a few seconds and in the meantime i have opened my emulator uh you can open your simulator or the you can connect your real device with it okay so now once this is built i'll open this folder okay means this project okay okay so once it is open i'll simply start building it okay so in main dot dot over here we have all the starting code okay so i'll go to run run without debugging and now it has started running so this is the initial project that flutter comes with if i click on this the value is gonna change over here so we are gonna remove this and directly start with our splash screen so i will remove all the unnecessary code this complete my home it is not required okay now i'll remove this comments as well and i also want to remove this debug mode banner that we have over here so for that we have our key value property called debug show checked mode banner i'm gonna make it false okay and after this i'm gonna create a new folder inside my lib folder okay that is gonna be screens okay and then inside this i'm gonna create a new file that is gonna be splash screen dot dot okay so now this screen is created over here i'll import the flutter material so import material dot flutter dot dot i'm sorry okay then after that i'll create a stateless widget okay that is gonna be called splash screen okay then instead of returning a container we are gonna return a scaffold because every screen should have a scaffold then a scaffold has a home okay so now the home is gonna be a container and inside the container we are gonna have a child and the child is gonna be text and the text is splash screen okay so this is done okay so i don't know why it is giving an error okay so it doesn't have a home but it has a body i am extremely sorry for that okay so the body is gonna be a container okay and now we have this i'm gonna import it in our main dot dot and add it in the home so that as soon as the app starts we are able to see this screen which is in turn our splash screen so to import any local files the standard practices if you leave a line and use the referential operator okay so i'm going to import dot slash and that is the instance of this class then inside this we in this folder i'm sorry then inside this we have the screens folder and then we have the splash screen okay and now over here instead of my home page it is gonna be splash screen okay so this is done and now over here instead of this i am going to use an arrow operator okay because that is better and that is also recommended so this is done let's save this okay so once this is complete we can see splash screen but it is in the uh top left corner and it is almost hidden by the notch okay so we'll fix so that is not an issue but we got to see that our screen is intact okay so let's see the design the first thing we notice is the background color so let's get back to design so i'm gonna get this color and that is this okay so now inside our splash screen the container has a parameter called color okay and then it will take a color color class and then i can simply write the code of the color so now what happens is that this color requires a hexadecimal now even though it is a hexadecimal the color will color class will read it as a string okay so to convert so to make the color class read it as an hexadecimal all we need to do is add 0 x f ok so this f stands for opacity and this is the format in which this color understands okay so now if i save this this color should be applied on our screen so let's see okay and it is only applied to this part i'm sorry i'll remove this now let's see and the color is applied to the entire screen okay now in center we need a better vice in text okay so for that i'm gonna have a child and the child is a text the text says better buys okay and the text should be in the center so for that i'm gonna write alignment and then from the alignment enum i am gonna use center okay so this is done let's save this and now we can see better vice in the center well although this font and color is very different from what we have here so you can see the font we have over here is pacifico okay so now to add this font in our project we are gonna use a package that is google fonts package okay so for that i'm gonna write to google fonts flutter so this will take us to the package i'm extremely sorry okay so i'm extremely sorry for that so the first link that is pub.dev has this package that is google fonts okay so i'm going to copy it and simply paste it in my pub spec.eml file so in pubspec.tml inside dependencies i'll place this and save this and then pub get should automatically start running and it did okay so this is the package that we are going to use we can use this to add any kind of font all we need to do is in the style inside text widget we just need to write google fonts and the font name okay so the proper instructions of installing is over here okay and this is the package that we had so i copied it will have to wait for a few seconds for this to complete running so once this is done we will open our splash screen and over here i'll simply paste it so now let's apply the pacifico font in our text so simply we are gonna go here write a style and then google fonts dot pasi fico okay so now let's wait for this google phone to recognize pacifico because it runs on real time in the on the internet so it will take a few moments okay so once it has recognized let's save this nc okay so now you can see once it has completed we get a bunch of errors over here and that is because we added a package and didn't restart it so the next time when we restart it so or just start it we will not be seeing these errors but anyways the font is applied now we just need to change the color and its size so for that inside this we have a property called color okay and that takes a color now again we need to get the color from our sigma file so i'll simply copy this paste it over here and and the color class will not understand so i'll have to add 0x for ff in front of it okay and then along with this i'll also change the size okay so the size is gonna be 20 let's see how it looks if it is not in accordance with our design we shall change it again so let's format it so once it is formatted let's save it okay and now you can see a better bias is here but it is very small i shall increase the size let's make it 25 okay so over here it is actually the pixels size okay so it can be a little bit more bigger let's make it 27 and this looks fine okay this is looking very aesthetical now in the next video we shall continue to the next screen okay so this was for the video thank you so in this video we shall continue with the front end i moved from the simulator to my real device because running simulator and recording at the same time was making my system run slow okay so let's get started in the splash screen uh you can see there are two errors like this okay so means these are not errors but are warnings and the warning says prefer const with constant constructors okay so what it basically means is that if i add const in front of it the error will be gone which is in a way the correct way to do so okay so format it save it now after that what i want is that once the better buys appear i want to show a small text below it that will say loading sellers okay so let's do that so for that this text i am going to wrap it up in a contain in a column okay let's save it and as soon as i put it inside a column it goes to the top so let's bring it in center so for that we write alignment main axis alignment and the main axis alignment has an enum also of the same name main access alignment and then in that i'm gonna select center okay then again save it and now it should be in the center okay and it is now below it i'll add a progress icon and then the text okay so for that i'm gonna add a circular uh progress indicator okay so let's see okay so we did get a circular progress indicator but this is not how we want it to be so let's see if i can change the size okay so we can't let's see what are the properties that we have we can change the color and the key and the value color okay so we are gonna change the value color and that is always a stopped animation okay and then this is gonna be of type color and it is gonna be color and this very color okay so i think over here also we need to give const no uh i think this is because okay so we need to give a const over here and this warning will go okay still there is the warning okay let's see what it is add const modifier so i did that okay so it was telling to add it over here now we still have some error okay we don't need a const over here so you can see these are the new changes that has been added in the latest version of flutter that is this is this all are basically the null safety things okay which means that to stop the app from crashing even if something is not so that is why we add these checks every here and there so this is not such a big thing you can simply hover on the warning and it will automatically tell you what to do so let's save this and now our animation color is as same as of this text okay so now let's try decreasing its size so for that i'll wrap it up in a sized box and the size box will have a height of let's i'm sorry it will have a height of let's say 20 okay so now it is again giving us error i think we need to add const over here okay and then over here it is giving error we don't need the const keyword okay so we need to follow the warnings okay so it is there is no such way that you can automatically remember it okay so also change the width to 20 so that the progress dialog becomes more of a circular type because right now uh when only the height is changed it has become an ellipse which is not at all looking good on the screen so let's do it and yes the icon has become little bit smaller so the dialogue is now smaller let's see if i can change the width of the width of that thing so the options that i have is key okay no not over here but over here let's see the options that we have we have the color we have key we have the stroke width so we need to change it to 0.5 let's see how it looks okay so save it okay this is way too much faint so i'll change it to eight let's see how that looks okay i'll make it maybe one one point five okay so let's save this yes so now it looks fine okay over here it might not look proper to you because i am using the free version of yz but in your phone or on your emulator you will be able to see the perfect design okay so after this after this we have our text okay we have our text and it says loading sellers all right so this is done let's save this and again we need to add const over here to remove the this warning okay so this is also done let's save this now we have loading sellers over here i want to push it a little bit down and make it in the and give it a font of our secondary color that is secondary text that is poppins okay so let's do those things so over here i'm gonna write style and then it is gonna be google fonts dot poppins here's what i found okay so now the text will be in the popins format okay so just hold on for a second for this google to search the font popins okay so what is happening over here is that we have given const and google fonts dot popins is not const so if i remove the cost from there the error is gone okay so these all might be new to you when once you start coding you'll get a hang of all such new things that has been introduced okay so now it is in the popins font let's push it a little bit down so for that you can either use a container or a padding i'll use padding in this case so instead of wall it is gonna be only and and over here it is gonna be top and it is not gonna be eight but five so i want to push it down by five uh pixels so for that i'll leave a space of five pixels at the top means that means in between okay so loading sellers and this is this now i directly don't want the people to see the progress dialog and the loading sellers so what i want is for them to see better buys for two to three seconds and after that we show this loading sellers and actually start loading the sellers means uh sending requests to our server okay so for that what i'm gonna do is i'm gonna create a key value pair okay so for that i'm gonna need to change it from stateless to stateful because we are gonna have uh dispose methods and stuff okay so for that i'll over here create int show loading sellers as false okay and not end we can use a bool over here because it is either gonna be of false or true okay so now if now if that show loading uh show uh loading sellers is true then only we will show the progress dialog and the text to loading seller so what i'm gonna do is i'm simply gonna add an if condition over here show loading sellers okay so if this is true then only the progress dialog will be visible and the text okay so let's format this and save it and you can see the both the two things are now invisible and once two seconds pass we want to show those two things and actually start loading the sellers so let's do that thing so for that over here i'll call the function init state we have discussed about init state in one of the videos in the flutter series so if you don't know what is in its state what is the use of unit state i i recommend you go and look and do that so what we are going to do is we are going to write over here only our timer timer so timer is a is a is a widget means not a widget but a functional class that we get inside material okay or not material let's see what it is i think it is of the class a sync so it will automatically tell you to import the library yes so it is timer is available in the class async okay now over here you can see this is showing an error and this is again because of null safety because what null safety says is that if you are creating a variable of tie of a defined class means not using var or const then you should define it at the same moment so there are two options that we can do to get rid of this error either i put a question mark over here so that means that even if it is not defined we don't care about it so what will happen is that when the dart compiler starts executing it will say that this is a question mark okay and if it is a question mark then it will not care that the variable following that question mark is defined or not so this is one way and the other way is writing vr so vr is a generic term and nova and thus the compiler foregoes that if either it is defined or not so it doesn't care about that for the moment so let it be var we will see the other type in in the near future okay so now over here i'll write timer is equal to new timer okay and then i think uh this timer takes a few things that is the duration okay so for duration i'm gonna use the duration widget okay and in duration i'm gonna give seconds as three so we don't need the new over here because we are in flutter so uh now we have given duration three and then after that what we have let's see what are the two things it takes on function callback okay so over here it takes a function so what is basically happening over here that we are creating this timer which will wait for three seconds and as soon as three seconds is over it will run this function and all we want to do over here is change the value of show loading sellers to true to true all right so this is done and now in case someone cancels it or or even if we don't cancel it once we want we get away from the screen means once we close the app or navigate to other screen i want this timer to get cancelled and for that we have a method called dispose we have also discussed about the dispose in one of our flutter videos so if you don't know please go and look have a look at that video okay so uh dispose now in this pose we write everything before the super the reason is will you will also understand when once you go and look at the video so over here it is gonna be timer dot cancel okay so this is done now okay we don't need to give a semicolon over here this is the new format okay so if you are writing in an arrow function you don't need to give a semicolon and you just need to give a comma and then the next line of statement okay and what i want to do is write set state okay so that once the value is changed i am setting the state so that the build method gets executed again and at that time the show loading sellers will be true and if that is true then we will be able to see the size box and this text so you are under so i hope you are understanding the flow in which i am going so let's format everything uh save it or i'd better do a full restart okay so i'll do a full restart okay so it is so it uh it waited for three seconds and then it started showing loading sellers okay so why is it giving a warning over here prefer const with duration characters so what i'm gonna do is add a const over here okay uh are we getting any other errors so what is this prefer dynamic okay i will prefer dynamic okay let's see what are the other errors that we have or the warnings so there are no more warning so what i'm gonna do is do a restart okay this will take some time so once this is done it is now once three seconds are over we are able to see the loading icon and the text loading seller so what is gonna happen is that as soon as these two things appear we are gonna send a request to get uh the list of server list of sellers to our backend and then once we get the list we are gonna navigate to another screen and show the list of sellers so that is what we are gonna do in the next video thank you so in this video we are gonna fetch the list of sellers from the server so for that i actually as i told in the first video i have hosted it on my private server and you all can access the link so this is the sellers link okay so if i click on send i am able to get the list of sellers so if you didn't do the back end part you can directly use this api and if you did the back end part i suggest you use your own localhost api okay so let's get started so what i'm gonna do is i'm gonna import another package and and that will be called http so as to send the flutter requests okay requests from flutter and in my database i have added four of the characters okay so for you to use so this is the dot package that we have over here it is also null safety so we can use it means if it is not null safety then you are gonna get a lot of warnings in your compiler okay so then again i will add it in my pubspec.tml file save it and until it is running i will add a few comments here and there so as to make sense of the code this is initializing the timer disposing the timer this is the title okay and this is the loading animation and this is the loading text okay so while we were doing this our package has also been added okay so uh for all the server requests i'm gonna create a separate file and all the server requests we are gonna write it in that file so for that inside lib i am gonna create a new file and that will be called server handler dot dot okay so over here first i'll import http okay as http now i'm gonna create a class server handler okay and then over here i'm gonna paste my base uri not uri but url i'm sorry base url and that is gonna be this part up till api so i'll copy the entire thing okay and then simply paste it over here okay so this is done now i'll create a function to get the list of sellers okay and since we the server request will take some time it is gonna be for return type future and future of list and the list is gonna be sellers okay so right now we don't have a class called seller so we need to create that so inside this labor folder i'm gonna create a new folder called models okay and inside model i'm gonna have seller so over here it is class seller now uh let's say in our database what are the values that seller actually has so this is id the name okay email image address and description string name email image address and the description okay so these all are done uh now we need to initialize this that is why it is an error as i told in null safety so what i'm gonna do is i'm gonna write it like this okay so now the error is gone although we will still create a constructor and that is a seller okay dot from map and this is gonna take a map of type string and dynamic and we'll call it map and over here we are going to write this dot id is equal to into dot parse map id okay because because in postman you can see the id is coming as a string so we need to uh parse it to an integer okay so this is done now similarly i will have for the rest five so i'll simply copy paste it okay so i'll change the names this is gonna be name this is gonna be named email and email image and match address over here and over here so these values are gonna be the key names of your uh what do i say this response okay and a description this is the description okay so now you can see this is giving an error and a warning everything because first and i'll remove this int from here okay because that is not required because we are storing it in a string type and if we write interdot parse then the returned answer is gonna be of type integer and that is why it is showing an error okay so let's fix this now after that it is showing a warning that it is of uh don't access members with this okay so okay so now the error is gone so now you can see that uh the linting and flutter is damn strong they are they tell you directly what to do and what not to do so and that is very helpful so our seller model class is now created now i'm gonna import it in in the server handler okay so as i told for local imports we leave a line and use referential operators so import then we have the folder models and inside model we have seller so now since we have imported seller this seller should work okay and then we get sellers so this is gonna be the function name okay and it is gonna be of type async because we have future over here okay and then now since we are running a code for to the server so there my there are very high probability that there is gonna be some error so we better surround it with our try catch okay and before that i might like to know that our print so this is how it is gonna be now this get sellers is giving an error because we are not returning anything so so let's get to it so we are gonna create a list of seller and that is gonna be sellers okay let's initialize it and return it okay now in between we will do the post request so every request returns a response of type response okay so this response is an http package response we'll call it response and we use the await function here because the request is gonna take some time http dot get okay and then this takes a uri yes so it takes a uri so what we need to do is uri.parse and then we write our string over here so the string is gonna start with our base url so i'll simply do string interpolation okay then after base url uh we have gen and we have seller so let's check gen and sellers cool so this is it now let's simply print response for now okay okay so why is it giving an error okay so now i am simply gonna write print response dot body so let's see what is the response we get and to see what is the response we will need to call this function okay so before that let's see what are the warnings this could be final so let's make it final and what is the warning over here ignore avoid print on this line okay so uh this is just a linting thing because that is not that big an issue use reach rotor you throw a cord exa exception okay so we'll use rethrow so the rethrow basically means that we already have an exception and we want to throw it somewhere else so either you can do it to throw eve but that is not syntactically correct i i have a habit that's why i wrote but you should always use rethrow okay that is the better way so this is done now in our splash screen i'm gonna call that function so before that i need to import it so you can see the hierarchy first to the dart imports then the flutter or flutter respective packages import and then the local imports so import and then again i'll get out of this folder and we have our server handler okay cool so now over here after this is set state i also want to run another method that is get sellers okay so we call this method as well now we need to create this method avoid get sellers so you can see over here inside an arrow function we only use commas and not semicolon this is a very new thing so please don't freak out and means go with the flow so server handler dot get sellers okay and then we get the response in then because it is a future okay and we get the error in dot catch error so if there is some error for now i'll simply print it later we will create custom to custom notification posts for it we will see most probably in the next or two three videos later okay so for now i simply want to print the error and print the value so so just as to check what is happening although now it will be null because we are not returning anything actually we are returning an empty empty string empty array over here so we will over here also ignore print okay it it it is giving such error because uh printing the response is uh not suggested i'm sorry for this means the compiler expects you to do something not just simply print it so we will try to avoid the warnings as much as possible now let's restart okay so let's see what is the response there might be some error so let's see okay server handler and no host specified no host specified i think i need to add a http in the starting okay so that might be a error in postman it is done automatically okay so let's let's do it again and see okay so we did get the response okay so now let's simply parse it okay so let's see what is the type of body so the body is of type string we need to convert it to json okay so for that what i'm gonna do is i'm gonna use a function called json decode okay for that we need to import convert convert library which is provided by dot okay so we have the convert library now let's convert it will call it sellers dynamic sellers is equal to json dot decode response dot body dot okay so this is it we get the response and then we get the sellers okay so what is basically happening over here that we are converting this string to json okay and then we are getting the sellers list from it okay so let's see why is this giving another undefined value json so i already did import json convert okay so this was an error i'm sorry okay so that is gone now dynamic sellers the name sellers is already defined okay so sellers list okay and instead of dynamic i'm gonna make it okay let it be dynamic or maybe a list okay so now for uh map m in sellers list means getting each value from this list what we are gonna do is we are going to convert it to convert it to type seller and store it inside sellers list so for that i'll write sellers dot push or i think it was add yes add and then i'm gonna write seller dot from map and the map is gonna be m okay so now once this is done uh there is gonna be some issues with the type casting ok so let's see what it is the argument type map dynamic cannot be assigned to map string dynamic okay so i think over here we have map string dynamic i'm gonna make it dynamic only okay so this hardly changes anything let's save that and this over here so now let's see if the if we are returning something sensible or not so let's wait for the system to hot restart so it did restart and we got to four instances of seller that means this function is complete we are getting the response we are converting it and then we are sending it back to the place where it was called okay which was this screen and over here we have the print statement and this print statement is printing this thing so it is pretty neat now what happens is that once we get the sellers we want to navigate to the sellers screen okay so for that first i'll create a new file over here and that will be called sellers screen dot dot now inside this again i'll import the flutter material and then create a stateless widget for now okay okay again i missed the closing codes over there okay that is why so i'll create a stateless widget for now and that is gonna be sellers screen okay so over here again this is the screen so we can't use a container directly we need to have scaffold okay cool and inside the scaffold we have body now the body has a container and the container will have an alignment of center okay and then there is gonna be a child which is a text widget which will see say a seller's screen okay so this is done let's save this okay now i'll also create a route for it so uh public static okay we don't have public overhead i think static const route name is enough and the route name is gonna be a seller's screen okay so this is done now let's add this route in our main dot dot file okay so over here i'm sorry over here first we will need to import the sellers screen so import screens and the seller screen okay now over here we have another method called routes okay which takes a map okay and the first one is gonna be first route is gonna be a seller's screen dot route name and it is gonna return sellers screen okay so it is not uh simply like this but with a context or if you don't want the context that is uh advised that you use an underscore okay that this is called a placeholder okay so yeah so now over here we have a warning uh prefer const okay i will prefer const over here also i will have to prefer const okay so the warning is gone yes so the route is now added now let's actually do the routing okay so for that in the splash screen once we get this what i'm gonna do is navigator dot off context okay dot pop and push named and the name is gonna be the route name so to get the route name we need to import that screen so import and the screen is a seller's screen okay so over here i'm gonna write sellers screen dot route name okay so this is done now we can remove this avoid print thing okay so okay this seems fine now let's try running this so what is gonna happen is that as soon as we get to the list of sellers it should go to the category screen so let's see if that works or not okay so you can see as soon as we got the list of sellers it went to seller screen okay i'm sorry my mail has opened yeah so i'll run it again so now it is better wise okay and once it starts now it has sent the request it got the response and it successfully came to the seller screen so now in the next video we shall make the ui for this okay so this was for the video thank you so in this video we are gonna continue with the flutter part of our project so up until the previous video we have made the splash screen added animation to it okay and while the animation was running we were fetching the list of sellers and once we had the list of sellers we were moving to the seller screen so this part is done so now today what we are going to do is we are going to make the ui of the seller screen so means we actually have the ui we just need to implement it means write flutter code for it so this is the ui that we are gonna make so let's start so we'll start from the top and over here we have better vice and the user's image so for now in place of users image it is gonna be a simple circle okay because we will have to make a separate pipeline for user because we are gonna ask the user to login or sign up only when they are checking out from the app okay so until then the user can be anonymous and can be verified so we will be we will have to tackle both the situations and we will have to write certain different types of code for that so we will be doing later in this project for now i am just going to put a simple circle and move on with the seller's ui so let's start so this is obviously in the seller screen over here we have child i'll remove it i need to give a comma over here okay now after this this container will have a child and the child is gonna be a column okay cool now inside column we will have children now the first child is gonna be a row and the row will have these two items okay so in a row uh two items are displayed one after another means one next to another okay so the first item as i just said is gonna be a row okay then the row has children's now the first children is gonna be a text and the text is better buys okay let's save this okay so it is better wise is over here at the top that is we will fix this but before that let's add a circle towards the right so for that i am gonna create a container okay now container we it has a decoration and the decoration is a box decoration okay now inside this box decoration we have a property called shape and then over here we can give the shape from the box the shape enum and we want to make it circle so it is circle okay now let's give it a certain height and width okay so the height is gonna be 50 and the width as well is gonna be 50. so if we want a regular circle we need to give the height and breadth has same if we don't we are gonna get an ellipse okay so i hope my point is clear over here so now uh the circle is here but i think we need to add some color to it okay so let's do that over here inside decoration i'll add color and the color is gonna be from the color senum colors dot let's say pink for now okay this is just for testing we will be changing it to an a suitable color means that which suits the eye okay so now you can see this is means sticking to the previous item but i want them to be at the two corners so for that inside row we have another property that is called main axis alignment so in a row the main axis is horizontal axis and the cross axis is the vertical axis and the vice versa is in column so in row in main axis alignment we again have a main access alignment enum and i am gonna give space between so what space between basically does is leaves the maximum space that it can get between the objects okay so now you can see the once this loads they both are at that at the two corners okay so now we have a bunch of warnings so i think adding a const over here would do for now yes okay over here also we will add a constant it will be done so both the warnings are gone now let's uh make it like our ui so for that in the row uh what i'm gonna do is i'm gonna add a padding means surround it with a padding and the padding is gonna be let's say symmetrical okay so you might be knowing there are three types of padding that is symmetrical means we give one value for a horizontal axis one volume one value for vertical then we have an only parameter that is for all the four sides separately and then and all for all the four at once okay so i have already made videos on these you can just go and look over there so let's give a padding horizontally of 20. okay and let's see how it looks okay now let's bring it down a little bit so it is vertical vertical is gonna be 30. i think a little bit more okay now let's edit this better buys okay so once we get back to the design we can see that the better biases of the font popins and semibold so let's do that okay so for that we need to import our google fonts package so that is google fonts dot dot now over here where we have the text inside this we are gonna add style okay so style and it is sorry with a capital g google fonts dot poppins okay and now once we have poppins over here we can't have const because this style is not const and it will give us error so i think all these things are pretty much understood by now okay why is it showing and warning so google fonts doesn't exist i think google font might exist okay i think i am messing with the name google fonts okay google fonts it is let's see here's google fonts and then we have pacific over there over here it is poppins now inside this we first need to change the font weight okay so the font weight is gonna be okay so the error is because i have not closed it over here so this is a silly mistake i i don't know why i make so much time uh so font to it and then let's make it 500 and see how it looks so the let's wait for this to finish okay so the font is applied uh now let's increase its size so for that we have font size and the size is gonna be 20 i guess let's see how this looks after that we can decide or what is the size that we have here so it is 23 okay okay no problem so let's save this and see okay i think i will make it to 23 only okay now i need to change the color to this so let's select it and then over here inside color we give the color using the color class so like so many times i'm using the word color so now we have given the colors let's see if it is applied or not okay so it did apply uh but uh i think there is more spacing in both the sides okay then it is over here so let's add that okay so horizontal i'm gonna make it from 20 to 30 okay now instead of pink i'm gonna make it a gray so that it is like a blank and means not eyecatching and not disturbing the feel of the app okay so these all are material ui basics which every developer should know okay so this is done now after this we shall start with the list of sellers okay so for that let's get out of this row first so this row is inside padding okay i'm gonna comment it so that it is better header so this is the header over here cool now after this we are gonna have the list of sellers okay so for that what i'm gonna do is i can use a list view but i prefer using a column okay so i'll create a column now again as we all know column has children now instead of a map what i'm gonna do is we have the sellers over here i guess okay so first we need to send the seller from splash screen and receive it in the seller screen so let's do that first so over here we are sending it okay now over here we can send the arguments by writing arguments and the argument is gonna be value okay so this is done now we need to receive these values okay so for that first i'll import the seller class over here otherwise it is gonna give us lots of warnings so we go inside models and then we have a seller dot dot okay so now let's i'll create a list inside the build method not inside the class because of null safety it is better you do it over here if you do it over here you will have to make it a var type of variable and then whenever you use we will have to use the s keyword so that is a lot of work instead of that i will be creating the variable in the build method itself okay so we are gonna get a list a list of seller okay and i'm gonna call it sellers and we get it from model route dot off and inside this we have context dot settings i guess yes settings dot arguments okay so we got to the sellers now let's type caster task service as a list of seller okay so what we are actually doing over here is we are getting the arguments over here and now we simply can't store it inside a data type of inside a variable of type list seller so we are type casting this argument as list seller because we already know that the argument that we are gonna get over here is at the end gonna be of type list seller okay so over here it is giving a error and that is because of null safety so i told you null safety will is a lot of trouble okay so what i basically did was add us added a question mark uh exclamation mark over here okay so by that what it means that if this part is null it will not execute after it okay so by that we prevent an error okay so this is done now let's use this sellers so for that inside this children i'm gonna write sellers dot map okay so means like i'll get each item and do something to it and then i again convert it to list okay so now uh to check if everything is working or not over here i'm gonna return a simple container container i'm sorry not alignment container of height 50 and of color colors dot blue okay so this is just to see if this thing is intact or not okay so once this is done okay so now it is of course gonna give an error because we need to come from splash screen to have some value for this okay so let's do a full restart and we get a blue section over here these are four items actually but they are not separated so we are unable to make the difference okay so now i'm gonna create an item for it so now the item for it is in itself gonna be pretty long so i'm not gonna keep it in the same file it will uh increase the length of code and that will in turn make it very hard to navigate and fix errors so for that i'm going to create a new folder uh that will be called widgets okay and inside this i'm going to create a new file that will be called seller item dot dot okay so i have a seller item now let's import material dot dot okay uh now after this over here let's okay sorry first let's create a a class over here that is a stateless class okay again i forgot the quotes over here now let's create a stateless class over here and that is gonna be called a seller item okay and then it will again return a variable a container of height 50 and this time of color pink okay now let's add it inside the seller screen so let's import this so for this let's get out of the screens folder go inside widgets folder and then select the seller item okay and now over here instead of returning this i am simply gonna return the seller item okay so this is done let's save this and it turned pink okay so prefer const we will prefer const now the seller item needs this e okay so let's take it okay because that has the details of seller and we need that inside our item to display it okay so first we'll import the model class that is inside models folder and then we have seller now over here i'm gonna create a seller and that is seller okay now we can use this constructor only this is the by default constructor uh so what i'm gonna do is add a comma add add the rate required which means it cannot be avoided required this dot seller okay so with this it is done this dot seller seller can't have a value of null okay so add required i did that required okay so i guess the way of writing required has changed or something okay i'll remove the const from here cool now we have a warning over here so to fix that i'm gonna add final to it and then over here we can again add const okay so you might be seeing that i am doing something then changing then doing it back because i am also not that well acquainted with null safety i just follow all the warnings that come up and act accordingly okay so now over here as that is a named parameter we need to give the name okay now e invalid const value e we can't have a const over here anymore okay so this is done let's do a full restart okay now uh inside this seller class i want all the container to have some margin okay so what i'm gonna do is i'm gonna add margin okay and the margin is const agent sets dot all i think for the time being 10. let's see so now we get four items over here now we shall continue with the ui in the next video thank you so up until the previous video we have made our splash screen getting the list of sellers and then routing to the splash seller screen so you can see over here now today we are gonna continue making this screen look like this screen okay so let's get started so these all are basically our seller item so i'm gonna make changes in that okay so i'll give it let's say a height of 200 okay so now the height is appropriate but we are getting a render flex error and the error is because i am not using a list but i am using a column with a map function so in the seller screen you can see that the list of sellers is a column and not a list okay so to fix this what i'm gonna do is i'm gonna surround this container the topmost column okay with another widget and the widget is single child scroll view okay so now once i add this then let's save this and now we shouldn't get this error okay so now you can see the error is gone and it is scrollable as well okay so now after this let's add border radius to it so let's see what is the border radius that we apply over here and it is 10 as you can see so let's apply the same okay so for that we will create our decoration and then the decoration will be a box decoration widget okay now since we have box decoration the colors can't be outside so we'll move it inside the decoration and then finally apply the border radius so for that we have another parameter called border radius and then it will take a border radius dot circular widget okay and the radius is gonna be 10 as in 10 pixels okay let's format it save it and now we get the border as we get rounded borders and the radius is 10 pixel okay so now the next thing is the colors okay so you can see all these items have different colors so i'm going to create a list of this colors and then send it to this item okay so now the list of colors is gonna be constant so as per the standard practice it should be inside our init state and for that we need to convert it from a stateless to a stateful with check okay and then over here i am gonna call init state okay now over here i am gonna create a list color seller items background color okay let's initialize it now i'll add values to it inside in its state okay so over here i'm gonna write sellers seller items uh seller items background color dot add and then over here another color so now as i have already discussed for color we always start with zero x f now this f f can change that is actually the alpha value you can look for different types of alpha value on the internet okay so the first color we can find it over here so i'm simply gonna copy it paste it over here and there are gonna be three more like this okay so now this second item i'm gonna copy the color paste it on the second row okay so yes this is correct now let's copy this paste it over here and the last one okay so i'll copy it and paste it okay so this is done now this is giving us a warning and the warning will be gone if we add a const over here okay so let's add a const so you can see as soon as i add the cons to the error is gone const is a keyword which means constant okay now let's send this color to these items so for sending first we need to receive it over here okay so for that i'm gonna create another widget color and i'm gonna call it background color now i'm gonna take it in my constructor so first we need to give required because it is final this dot background color okay now let's format it okay and over here instead of color i'm gonna make it background color so we have background color okay now we need to give a background color in our seller screen okay so let's do that over here we will have another named parameter that is background color and then over here i'm gonna give let's give one color for starting and then we will figure out a way to give the color according to a pattern okay so i'm gonna say seller items background color and then zero okay means as in the first item now give it a minute to understand okay okay so there is a small error over there i need to give another closing parenthesis so now the error is gone okay now let's do a full restart okay so that both gets saved at the stay same time okay so let's see now the splash screen is here it is loading the sellers and yes we get the first color applied to all the four now we need to apply uh one two three four in accordance with the list okay so let's create another method that will return the index okay so for that i'm gonna make another method int get color index and this will take the index means the index of seller item okay so like 0 1 2 3 it will work fine but what if it is more than that okay so what i'm gonna do is i'm gonna simply return index mod four okay so now with this what will happen that the remainders can be zero till three that are four items and we have four items over here and now that i think of it we don't need to create a separate function for here for just this small piece of code i'm gonna directly apply it over there okay so over here instead of this what i'm gonna do is index modulus for now index we will get for o from here so what i'm gonna do is sellers dot index of e okay so now we get the index and then we apply modulus 4 and then whatever is the remaining we send it as our background color okay so i hope you understood this calculation part now let's save this and see okay so you can see this is working fine four different colors are applied to all the four now after this if there were more items also the pattern would be same okay so i hope you understood now since now that the background is done let's add content okay before content you can see the margin towards the right or left or very less as in in the ui it is little bit more and among each other as well okay so let's fix that first okay so instead of margin all i'm gonna make it symmetric and then gonna make it vertical so vertical it is gonna be 15 okay because if it is 15 then over here it is going to be 30 15 from this item 15 from this item so you need to do the calculations accordingly and then horizontal let's make it 20 let's see how it looks okay so there is little bit more let's make it 30 okay this is fine now but okay i'll let it be 20 only if there is more space left i will bring it back to 30. okay so you need to do this little tweaks on your own because it is not that as you design the screen and all those things are always gonna be same for an actual device okay what i mean is that this is the screen size that we have taken for our design but the screen size in actual development is a little bit less so we need to means do little bit tweakings here and there accordingly okay i hope you get ma get the just what i'm trying to say so in this video we are gonna continue with our seller screen ui okay so let's directly get to it okay so now uh we are gonna add the content to these items okay so the layout is gonna be simple this is gonna be a row so this will be the first item of the row this will be the second item of the row and now inside the first row we will have a column where columns first item is gonna be the name columns second item will be the address and the third item will be the rating now since we don't have a rating for now we will simply write no rating okay so let's get started so for that i'll go inside my seller item inside this container i'll create a child the child is gonna be a row okay now the row now let's the just one minute yes so the row takes children okay now the first child is gonna be text and the text is simply gonna be seller dot name okay and the next one is gonna be our image so i'm gonna write image dot network and then seller dot image okay so now why are we getting an error over here and that is because of null safety so i'll add a exclamation mark over here and here as well okay so this is because in our seller in our seller.we had this question mark everywhere so that is the reason okay so now we are getting an error okay that let's see okay so that is because our url is incomplete because what we are getting from the database is just the partial url the base part i need to add it myself so for that i'll go inside server handler copy this url okay so this is our base url and then paste it over here so over here i'll use again string interpolation okay so first i'll add sorry first i'll add codes then curly brackets then i give a dollar over here okay which marks it as a string interpolation and then i write this now instead of api this is gonna be assets because i have created an assets folder where i am storing all the images on the server okay so now once this is done let's do a restart okay now i'll do a full restart so it will again give error because the spelling over here is wrong i am i'm sorry for that okay so now you can see the image has started loading now give it a minute once we give it a few seconds and then all the images will be loaded okay so now since we have the images we are good to go okay so now i want this image to be on the rightmost corner okay so for that in a row what i'm gonna do is i'm gonna give main axis alignment okay so main access alignment and the main axis alignment is gonna be space between mint is gonna be space between okay so that it will leave all the space in between the two items so now you can see the image is pushed to the right but not so much to the right i wanted to have a little bit margin towards the right so for that what i'm gonna do is i'm gonna wrap this image with uh let's say padding okay and then instead of all i'm gonna make it only and then it is gonna be only in the right now instead of it let's make it 10 and c okay so now i have margin over here okay so this looks pretty decent i i'll try increasing let's make it 15 okay so now this is fine but then the text over here is little bit small okay so anyways let's see what we can do now let's get to the content part so i'll remove this text instead of that i'm gonna add a column over here okay now the column is gonna have children the children will first have a text the first text is gonna be the name so seller dot name then a question mark as we just saw for null safety then the address and then the uh then our text simply saying no rating so seller dot address and then over here our text that says no rating okay now over here i can add a const because it is constant it is not changing okay let's see how it looks so i was hoping for some i was expecting that there will be some error okay so this is mainly because of the address so we will deal with address later first let's make the name as we have in the ui okay so for that i'm gonna wrap it with a padding and the padding is gonna again be only and then i want from left to b5 from top to b10 and from right now i don't want anything from right okay so let's see now i'm gonna make it little bit more from top it is gonna be 20 from left right is gonna be 20 from top let's make it 50 okay so this is done now let's add a decoration so for that i'm gonna use style now the style is gonna be off google font so let's first import that import google fonts dot dot okay now over here the style is gonna be google fonts okay and then let's see what is the font that we are using in our design so it is poppins so we are gonna use popins over here popp ins okay so this is fine so just to give it a minute to format yes now i'll add a color okay and the color is gonna be black so for that i'll use the color senum color dot black and then let's give a size of what we had over here it is 18 so let's give it 18 and see whereas i think we might need to change it so first let's see okay now this this image over here is making lots of trouble okay so give me a minute i'll change it for now i'll make it only three items okay so i have deleted this seller now later once i finish this video i will add another lady with a different picture of the same size as others okay so first i'll do a full restart and get and this this item will be removed okay so let's see okay and you can see there are now only three items i removed the lady who was here okay because the image was not what we needed and it was causing lots of error now the image will load slowly i have little bit network issues today okay so for now this name name is done okay let's see so the name needs to be bold and little bit a little bit more towards the right and less towards the bottom okay so instead of 50 i'm gonna make it 30 instead of 20 i'm gonna make it 25 and the text is gonna be bold so to for to for making it bold we use font weight okay and then we have font weight enum dot bold okay now let's see so this is fine now let's add the address okay so for that i'm gonna use this let's save it then again it is giving us an error now uh there is a way so that this sticks inside a specified height only uh width only so let's see how to do that for that i'm gonna do a simple google not android okay so we can do this we can surround it with a container or a sized box okay so that is one method next method is we use over float text overflow ellipses but for that max lines okay so i'll try that because i haven't used that earlier okay so max lines is gonna be two and then overflow is gonna be overflow so it was text overflow dot ellipsis cool let's see if there was absolutely no change so let's add it will add a container to it container of width let's say 100 okay now it is fine i i'll make it 120 140 let me add the same padding over here as well because you can see the text is not aligned so we can't means guess the correct width okay so from top it is just gonna be 10 but from the left it is gonna be same okay or maybe i'll make it 20 and from top it is gonna be five and now let's see the width so let's try making it 150 school 160 still cool 180 so now it is giving errors so let's see 170 i gain error 165 164 okay so we stick with 164 and if we have more than that then it is giving us three dots okay so left is again gonna be 25 because now it is looking ugly it should all be on the same alignment well that is a basic principle in designing i was just trying something out okay let's do a full restart and then we will add this no rating little bit below okay now before we do anything let's add the style to this address so for that i'm gonna use the style then again google font dot popins okay and then and inside popins i'm gonna copy these three okay it is google fonts then let's copy these three now the font size is gonna be 13. we don't need the font weight but the color i'm sorry for that but let's continue okay so now this is in popins okay now let's add this thing to our no ratings as well now we can't have const over here since we are using google fonts we have discussed about it earlier okay no rating now let's align it align text align dot start okay let's see okay so it is in the starting only the entire space is this much so what i'm gonna do is i'm again gonna surround it with a container or a sized box would do in this case as well so width is again gonna be 164.0 now again i will have to add the padding you okay not this one i need to add this one now since we are adding padding i can't use a sized box over here okay so you see how we keep on changing widgets according to our necessity so now we have no ratings over here i want i don't want it to be black but to be gray so that it clearly marks that it is not a primary text that i want to the users to focus on but a secondary text which is there just fulfilling its purpose okay so with this i okay here is some error let's see okay so i think in the name only by mistake i have added an extra space i will remove it from the database okay with this our screen's ui is complete it looks somewhat as we have expected but not exactly we will have to work on to it so uh let's see what are the changes we can do in the next video thank you so in this video we shall continue with our better buys project so up until now we have created the splash screen and we were displaying the list of sellers okay so you can see over here we can see the list of sellers now we shall move forward and then if we click on any of the seller item we should be taken to this page okay so let's start with that so for that first i'll create a new screen okay so over here inside screen it is products product screen dot dot okay i'll first import material then create a stateless class that is product screen okay and over here instead of container it will be a scaffold okay and the scaffold will have a body and the body for now is gonna be a container okay and the container will have a child and the child is a text and the text says product screen okay so this can be referred as a boilerplate code very basic okay so let's save this now in seller screen you can see that i've created a static route name so i'll do the same for product screen over here i'm gonna write static const route name and it is gonna be product screen okay now i'll add this route name in our main dot dot okay so over here first i need to import it so import screens and then it is a product screen okay now over here in inside roots i'll inside routes sorry i'll add product screen dot route name this is gonna be const product screen all right so we have attached the screen to our main fragment now let's navigate to that screen okay so for that we will go in our seller item which is this item okay so now if we click on this we should go to the product screen so i'll go to the container okay so this is the container i guess yes so now over here i'll wrap it with a gesture detector okay and the gesture detector detects our gesture and the gesture is gonna be on tap means we want some action on tap and the action is very small means we just need to navigate so i'm gonna write navigator dot off context push named and for name again we're gonna need to import that screen okay so where i'm gonna write import and then two screens and then inside the screen it is gonna be product screen and yes over here i'm gonna write product screen dot route name and then i wanna pass the seller which is clicked okay so which in this case is a seller so i am simply going to pass it as an argument so for that i will use the named parameter arguments and over here i'll simply pass seller okay so with this the navigation is done now it should work let's do a full restart to check yes so now if i click on this i am taken to the product screen since no alignment is mentioned it has gone to the top left corner but the navigation is working properly okay so that is one thing now uh before continuing we need to get the products okay so for that we need to do an api call and as i have promised i have hosted the api which gives us the list of product okay it is hosted at who is richard.com slash pk and then the other part of the url so if you send a request to it uh get request you will get the list of products so now let's do this from within the app okay so for that first i need to create a product item so let's do that inside the model i'll create a new file and that is product dot dot okay so this is gonna be class product then int id and seller id string name string name okay then we have image price per kg description so string image end price per kg because we use camel case over here price per kg is gonna be like this and then we have the description okay and then we have interaction count right so now there are actually two to three methods of creating a class i'll see which one i'm using okay so over here i am using this type of declaration so i'll use the same over here because it is always good to maintain uniformity throughout the app so now over here we have seller from maps over here it is gonna be product from map and then we are gonna get a map of dynamic dynamic map let me check if it was dynamic yes it is dynamic okay so the first thing is id so id is again into dot parse map id now similarly we have seller id and over here it is gonna be seller underscore id because that is the key name over here then we have name and image so name is gonna be map name and image is gonna be image okay then after that we have price per kg so it will be like this price per kg then we have description over here also it is gonna be description and then we have interaction count all right so our product classes uh product model class is created now let's call the api okay or before calling first we need to add a loading screen over here so let's do that first okay in the products screen okay we have a container now inside the container i'm gonna again copy it from the splash screen how we had it over there okay so we have a sized box okay so i'll copy this from splash screen to the product screen over here instead of it is gonna be a column column with children so the first child is gonna be a sized box okay and the next one is gonna be loading sellers okay so over here instead of sellers it is gonna be products loading products and we need to import google font yes okay let's format this over here it is giving us a warning avoid unnecessary containers okay that is actually correct we don't need a container because we already have a column okay so let's save this and it is over here so i need to bring it to the center so for that i'll use main axis alignment okay and then it has an enum main axis alignment dot center okay so after that we also have cross axis alignment when we are talking about column this is our main axis alignment and this is our cross axis alignment so we also have a cross access alignment and that also has a cross access enum dot center so we brought this in center as well okay cool now let's format this and save this and we have it over here okay so actually what is happening that the column is taking only this much space we wanted to take the entire width okay so now we will again have to bring back our container okay and in the container we will give it a width okay and the width of media query dot off dot i guess settings okay now it is the size okay and then the width or something yes so width cool so now that we have the entire width let's see how it looks so now you can see it is in the center and this will keep on loading once we have the products means once we get the response from the server we shall display the products over here okay so that we shall see in the next video thank you so in this video we shall continue from where we left off in the previous video so up until the previous video when we click on any of the item we get a screen and in the center it says loading products so now let's write the server function to actually load the products okay so for that we already have our product class over here okay so let's go inside server handler and i have already imported the product class over here so let's create a function to get the list of products okay so this will be a future of list list of products okay sorry yes and over here the function name can be get products per seller okay then i'll take the seller id as well because that is required you would remember as we did in the api we need the seller id to get the products of the seller okay so now let's actually write the function okay so first we surround it with our try catch because we are using because we are interacting with the server there might be some error okay so now over here i'll create an empty list of products okay now let's write the server function so for that i'll create a response variable response is equal to await http dot get okay then we have uri dot parse and then we have the function so we'll again use the string interpolation we add the base url i'm sorry so we write this tilde sign in javascript so we have a dollar then base url okay so our base url is still apis and now in the api after apis we have gen product and then seller id and then the seller id okay so i have already hosted this api so you can directly use this api or the api that you guys have made okay watching the previous parts of the video okay so now over here instead of seller id is equal to 1 this is gonna be again seller id which will take over here in the function using string interpolation okay so with this this is done okay now it is giving us an error over here yes so that is gone so now after this line we have the response so now the rest of the part is gonna be similar as above so i'm simply gonna copy this paste it over here and do the changes okay so i can call this products list and this is gonna be products okay and then over here instead of sellers list it is gonna be products list and instead of sellers it is gonna be products instead of seller it is gonna be product okay and over here also we are gonna return products all right so with this we have this function that gets us the list of products per seller okay so let's comment it getting list of products per seller okay so if i write if i give two dashes then that means it is a comment if i give three that means it is a documentation okay so like if you see if i uh hover around this we get this so this is the documentation of this future so now similarly when we will use get products per seller somewhere else and we hover over it we will get getting list of sellers per seller okay so even if you don't know what this does just by hovering on it you will get this documentation and you will know that this function returns the list of products per seller okay so i am i hope this is making sense okay so we have our function now now let's go to the products screen where we actually call it okay so over here i have already imported products in the model seller the model product and server handler so i was trying something that is why all these things are already imported okay so before we start let's get rid of this warning so over here we have container we can change it with sized box i think that will be the solution okay just add this ignore thing for now okay we will see what can be done later now we need to call the function so for that i'll convert this stateless to a stateful widget okay now uh in from the seller item we need to send the seller details in the product screen so that we can get the seller id and then call this function which we just created in server handler because if you remember we are taking a seller id over here okay so i'll open my seller item and over here you can see the entire thing is wrapped with a gesture detector and in the on tap section i have pushed it to product screen dot route name and i have already added the argument as seller okay means this seller so now let's get this seller in our product screen okay so as you have seen we need to get this inside the build method okay so over here simply i'm gonna write product product is equal to modal route dot off context dot settings dot arguments okay and then i type cast it to product okay so with this we have our okay sorry we are sending a seller right yes we are sending a seller i can't simply store it inside product i'm extremely sorry this was my mistake so this is seller the variable name is also seller and we will type cast it to seller okay so now over here again because of null aware i need to add a question mark okay then that error is gone now once we have the seller let's call the our function that we wrote in server handler okay so for that i'm simply gonna write over here void get products per seller okay and over here simply server handler dot get products per seller and now if you can see if i hover on it i am getting getting getting list of products per seller so you can see that documentation which we wrote over here by three dashes is showing over here okay so you see that is very helpful if someone else reads your program and doesn't know what this function is so they can easily know it okay then over here in this i get a seller id so in seller id in this function okay and that is gonna be this seller id dot then okay where we get the response and dot catch error okay in case of any error so for now i am simply gonna print the error okay let me just format it yes so now over here also instead of doing anything i'll simply print the value so as to check if the function is working properly or not and then post that we will do the ui changes most probably in the next video okay so let's call this function over here inside the build method because over here only we have the seller and this method needs a seller id okay so it is get products per seller and the seller id is gonna be seller dot id okay okay so i think i need to give a question mark over here because of the null aware okay there is another method where we don't need to see give the question mark maybe i'll show that in the next model class that we create okay so for now i'll do a full restart now we are on the splash screen we got the sellers and now if i click on any of the sellers so over here you can see we are getting the products of that seller instance of product means we have these many products one two three four five okay so we are getting the products of the seller in this screen so this function is working the one which we wrote in our server handler okay so in the next video we will update the ui accordingly okay so see you in the next video thank you so up until the previous video we were getting the list of products but not updating the ui okay so let's do that in this video okay so for that let's open our product screen now over here i'll create a global variable that will store our products so it is gonna be a list of product and we can call it products okay and now i'll initialize it with a empty list okay now over here where we are getting the value let's store it inside this variable and i also want to update the state so that according to that i can means remove the circular indicator that is that comes on the screen okay so for that i'll remove this and give a bracket over here because we are gonna use the set state so set state and then inside this i'll update the value so product is gonna be value okay so we have we are done with this now since we are using set state we will have to add this inside and if block so that it executes only once because if we don't do so it will keep on executing constantly and and that many server requests would be sent and after a time it will hit a timeout and then there will be bugs okay so for that i'll create another boolean variable so bool first exec and this is true okay so if a first exec is true then only we call this function get products per seller so if if first first exact then we are getting the get products per seller okay and then i also want to make it to false so that it doesn't keep on executing after the first time so it becomes first exact is equal to false okay so let me just format this yes so now over here we are getting the products and storing it inside products variable so now over here what we can do is we can check if the products variable has some value and if it has some value then we don't want to show the circular progress indicator or the text that say says loading products okay so for that i'll simply over here add an f if products dot length is greater than zero okay no sorry if the uh better than this it would be if the products if the products is equal to null then only show this and this okay because if it is not null then we don't want to show this we actually want to show the products that we got okay so let me just format this and do a full restart okay so now if i click on this albert einstein nothing is happening okay so i think it got it got the product pretty fast anyways just to confirm i'll add a print over here okay so that i know that it actually got the products okay let me do a full restart okay so it got the products pretty fast that's why we were not able to see the loading icon but if the network was little bit slow we would see that and as soon as we would get the products then uh we would then that would disappear okay so now that we have the products let's start designing it okay so for that i'm gonna open the figma file yes so now you can see this is how our products screen should look so we'll start from the top first is this better buys and the image over here so if you would remember this is the exact same thing as we had in the seller screen so what i'm gonna do is i'm simply gonna copy from there and paste over here before that i'll add comments to it loading widgets okay now over here after product let's add that so for that i'll go to the sellers screen and inside the scaffold inside the children we have this header so i'm simply gonna copy it okay so it is still here copy it paste it over here okay so now we got it in the center and that is uh because the loading widgets were aligned to the center okay so then that doesn't look good so what i'm gonna do is i'm gonna wrap these two items in a separate column that will be a part of the bigger column okay so over here first i'll make the main axis alignment to start or simply just removing it will also do because start is what is set by default okay and over here the loading widgets i'll remove this because i don't need it and now over here i'll select these two then use the refractor tool which in my condition is shift option r and no refractoring available great so i'm gonna create a column myself then add children okay and then inside this i'm gonna add these two items over here okay now let me just format it yes okay so over here you can see if the product says null then only this column will be visible okay and now what i'm gonna do is i'm gonna apply main access as a center to this item okay so that it doesn't hinder the parent column okay so for your main access alignment so again over here i'll use the main access alignment enum and i want to make it sent okay so now this issue is solved and we also have our starting part cleared okay sorted out so we have this now let's redesign this so we have the products now we just simply want to display it like this okay so for this i can either use a row or a list view so using row is very similar to how we use the column while displaying the sellers so over here instead of that i'm gonna use a a list okay so over here list of items let me check if there was some title no okay so over here it is simply gonna be a list view i think i'll use builder because why not list view dot builder okay and then it has an item builder so it will definitely because it is a builder it will definitely take a context okay and it will return a item so the item is gonna be a container for now okay a container means just like a placeholder i am adding it okay so i think this takes something more than build context yes so over here in the documentation you can see it takes the context as well as the index okay so index so now the error should be gone now we need to add a few more things to this builder okay there are a few required things let me just go through all yes so i need to add the item count so the item count is gonna be products dot i think it is products dot length yes so i always get confused between length and size okay so now over here we have this now in this container i am simply gonna write like height is around 50 okay width is around 50 and a margin okay and the margin is gonna be edge inserts not all 5.0 okay let me just format this yes so once we have formatted this let's see how it looks okay so it is giving us a bunch of errors let me check okay because we need to give it a hash size okay so what i'm gonna do is i'm gonna wrap it with a sized box okay and the height is gonna be let's say 50. okay so we are getting the container over here we are not able to see because no color is there so i think i'll add some color colors dot pink okay yes so we are getting it over here so you can see these are our items okay now over here this is like actually a particular column over here i'll increase the height so it becomes a little bit more clear yes so you can see these are like a vertical list but i want a horizontal list because the design suggests horizontal list so over here inside this i think we have a axis or scroll direction yes so we have a scroll direction and it takes an axis i guess yes it takes an axis which is again accesses an enum and then horizontal okay so you see it is not possible to remember all the things you just need to have good amount of practice to figure out which one it is okay so now you can see it is in it is in a row okay so now in the next video we shall design each item okay so this was for the video thank you so up until the previous video we were getting the list of products but not updating the ui okay so let's do that in this video okay so for that let's open our product screen now over here i'll create a global variable that will store our products so it is gonna be a list of products and we can call it products okay and now i'll initialize it with a empty list okay now over here where we are getting the value let's store it inside this variable and i also want to update the state so that according to that i can means remove the circular indicator that is that comes on the screen okay so for that i'll remove this and give a bracket over here because we are going to use a set state so set state and then inside this i'll update the value so products is gonna be value okay so we have we are done with this now since we are using set state we will have to add this inside an if block so that it executes only once because if we don't do so it will keep on executing constantly and and that many server requests would be sent and after a time it will hit a timeout and then there will be bugs okay so for that i'll create another boolean variable so bool first exec and this is true okay so if first exact is true then only we call this function get products per seller so if if first first exec then we are getting the get products per seller okay and then i also want to make it to false so that it doesn't keep on executing after the first time so it becomes first exec is equal to false okay so let me just format this yes so now over here we are getting the products and storing it inside products variable so now over here what we can do is we can check if the products variable has some value and if it has some value then we don't want to show the circular progress indicator or the text that say says loading products okay so for that i'll simply over here add an if if products dot length is greater than zero okay no sorry if the better than this it would be if the product if the products is equal to null then only show this and this okay because if it is not null then we don't want to show this we actually want to show the products that we got okay so let me just format this and do a full restart okay so now if i click on this albert einstein nothing is happening okay so i think it got it got the product pretty fast anyways just to confirm i'll add a print over here okay so that i know that it actually got to the products okay let me do a full restart okay so it got the products pretty fast that's why we were not able to see the loading icon but if the network was little bit slow we would see that and as soon as we would get the products then we would then that would disappear okay so now that we have the products let's start designing it okay so for that i'm gonna open the figma file yes so now you can see this is how our products screen should look so we'll start from the top first is this better buys and the image over here so if you would remember this is the exact same thing as we had in the seller screen so what i'm gonna do is i'm simply gonna copy from there and paste over here before that i'll add comments to it loading widgets okay now over here after product let's add that so for that i'll go to the sellers screen and inside the scaffold inside the children we have this header so i'm simply gonna copy it okay so it is still here copy it paste it over here okay so now we got it in the center and that is uh because the loading widgets were aligned to the center okay so then that doesn't look good so what i'm gonna do is i'm gonna wrap these two items in a separate column that will be a part of the bigger column okay so over here first i'll make the main axis alignment to start or simply just removing it will also do because start is what is set by default okay and over here the loading widgets i'll remove this because i don't need it and now over here i'll select these two then use the refractor tool which in my condition is shift option r and no refractoring available great so i'm gonna create a column myself then add children okay and then inside this i'm gonna add these two items over here okay now let me just format it yes okay so over here you can see if the product says null then only this column will be visible okay and now what i'm gonna do is i'm gonna apply main access as a center to this item okay so that it doesn't hinder the parent column okay so for your main access alignment so again over here i'll use the main access alignment enum and i want to make it sent okay so now this issue is solved and we also have our starting part cleared okay sorted out so we have this now let's design this so we have the products now we just simply want to display it like this okay so for this i can either use a row or a list view so using row is very similar to how we use the column while displaying the sellers so over here instead of that i am gonna use a a list okay so over here list of items let me check if there was some title no okay so over here it is simply gonna be a list view i think i'll use builder because why not list view dot builder okay and then it has an item builder so it will definitely because it is a builder it will definitely take a context okay and it will return a item so the item is gonna be a container for now okay a container means just like a placeholder i am adding it okay so i think this takes something more than build context yes so over here in the documentation you can see it takes the context as well as the index okay so index so now the error should be gone now we need to add a few more things to this builder okay there are a few required things let me just go through all yes so i need to add the item count so the item count is gonna be products dot i think it is products dot length yes so i always get confused between length and size okay so now over here we have this now in this container i am simply gonna write like height is around 50 okay width is around 50 and a margin okay and the margin is gonna be edge inserts not all 5.0 okay let me just format this yes so once we have formatted this let's see how it looks okay so it is giving us a bunch of errors let me check okay because we need to give it a hash size okay so what i'm gonna do is i'm gonna wrap it with a sized box okay and the height is gonna be let's say 50. okay so we are getting the container over here we are not able to see because no color is there so i think i'll add some color colors dot pink okay yes so we are getting it over here so you can see these are our items okay now over here this is like actually a particular column over here i'll increase the height so it becomes a little bit more clear yes so you can see these are like a vertical list but i want a horizontal list because the design suggests horizontal list so over here inside this i think we have a axis or scroll direction yes so we have a scroll direction and it takes an axis i guess yes it takes an axis which is again accesses an enum and then horizontal okay so you see it is not possible to remember all the things you just need to have good amount of practice to figure out which one it is okay so now you can see it is in it is in a row okay so now uh in the next video we shall design each item okay so this was for the video thank you so in the previous video we saw how to apply the gradient now in this video let's apply it in our project okay before that you could see here i have added a new file called colors dot dot and over there i have added the four colors which are the these colors okay so now let's move to this product screen okay so now over here we are getting a horizontal list now let's design the item okay so for that again over here i'll create a new file and i'll call it product item dot dot okay and it will import material okay now for now it will be a stateless widget okay so it is product item now it will receive a product so for that i need to import the product model we have product dot dot okay now over here i am receiving the product so final product product okay now let's receive this over here so over here i'm to write required this dot product okay so now we are taking this product in the parameter so let's continue over here in this container i'll simply change the color so the color being colors dot this okay and i'm gonna give it a height of let's say 100 and the width is also gonna be 100 okay so to make a proper circle we need to have the height and width as same otherwise it will become an ellipse okay although now it will look like a square okay so let's uh call this from inside this list okay so for that i'll go to my product screen and over here first i need to import this item okay so over here i'll write import then widgets and then over here i have product item okay and now where we are calling this list let's go to that place yes so list of items so over here in the item builder instead of the container what i'm gonna do is i'm gonna call this product item so i'll select this container and change it to product item now this takes a product okay so all i need to do is from the products list i am gonna get the product at the certain index okay sorry this is a named parameter okay let me see yes so now i'll format this and save this so we can see we have a list since it has no padding we are unable to separate okay but you can see that this item is successfully being called from the product screen so now all we need to do is we need to design this okay so for that first i'll create a decoration and the decoration has a box decoration okay now inside this box uh decoration first of all the shape is gonna be circle so for that we have box shape dot circle okay now i also want to have the index of this product in the products list so that i can get the color at that index okay so for that in the product item i'll take the index as well so final and product index okay and over here inside our constructor again i'll add required this dot product index okay over here this should be a dot okay now let's add the index in our product screen as well so along with products i have product index and that is nothing but the index that we get in this function okay so now that we have the index with us okay why is it giving an error let me check the name okay so the error is gone so what happens that in my system because i am recording at the same time running an emulator so my system lags sometime so now if i do a full restart we then by then we will be getting the index in our product item okay so now since we have the index using that we can get the colors okay so for that first i need to import this colors over here okay so for that here i'll write import and then utility and then i have colors okay now over here i'll apply the color okay and the color is gonna be from the list that is primary colors okay primary colors okay and then for the index we have the index over here but since we have only four colors over here what i'm gonna do is i'm gonna divide the index by uh four okay and not get the quotient but the remainder because if i divide any number with the with four the remainders can be 0 1 2 and 3 and that is the maximum index that we have in our primary color so this is zero index first index second index and third index so i hope this is making sense okay so now that we have it let's see how it looks okay so i'll save it now if i click on albert einstein so i am getting uh items with different colors now i'll add some margin to it okay so for that over here i'll have a padding okay better than padding would be margin so margin const edge insects dot all uh not all dot horizontal dot symmetric and then i'll just give horizontal margin so horizontal and let this be 5 for now let's see how it looks ok this looks uh pretty decent so now let's apply the gradient okay so for that we have a gradient parameter and over here we can give a linear gradient now if you would remember in the previous video we need to give a begin and end and a list of colors okay so the begin uh for that i'll again use the alignment team alignment dot center alignment dot i think send okay just let me get rid of this alignment dot center left okay and we want to end at alignment dot center right okay and then i need to give the colors so the colors is again gonna be a list and the first color is gonna be our primary color okay and then it is again gonna be the same color with opacity okay so over here we have with opacity and this is gonna be 0.0 okay because uh if you look in the design you will understand so over here uh we have this product item now uh if you look at its color uh so at the starting it is the color that we have and at the end it is the same color but the opacity has changed from hundred percent to zero percent okay so this gradient will start with a color and dissolve to transparent okay so that is the basic idea over here let me save this i don't need this color over here okay because i'm applying gradient so you can see the gradient has been applied successfully okay so the next thing that we will do is add this circular ring on top of it okay in the next video so thank you so up until the previous video we have added gradient to it so now in this video let's add this circular ring to it okay so before we go there i have done little bit changes which i want to show you so earlier i was like it was written like products is equal to equal to null then this was executed i have replaced it with is empty okay so is empty is a better way to do so to check if there is some item in the list or not and earlier in the header the padding was for top and bottom it was 50 50. so i have converted it from symmetric to only and in bottom i have given 20 dp padding okay so these are the two changes that i did now let's continue and add a ring to this item okay so for that i'll open product item now there are multiple ways we can add this i'll use the stack method okay so for that what i'm gonna do is i'm gonna wrap it with a column okay and then rename this column to stack now over here inside stack i'm again gonna create a container okay now its height is gonna be 120. and its width is gonna be 120 as well because over here the height is 100 so i want to add a 10 db 10 pixel margin on the left and 10 pixel margin on the right so which in total makes 120 so that is why the height and width are 120 now after that i have decoration the decoration is gonna be box decoration okay then inside boxer decoration the first thing that we have is shape okay so the shape is gonna be box shape dot circle okay then after that we simply have the border and the border is gonna be border dot all and then again the color is gonna be our primary color that we have over here so i'll simply copy this and over here color i'll apply it so this is our color let's save this okay now over here instead of symmetric i'll make it all and instead of 5 i'll make it 10 let's save it okay in all we don't need a horizontal okay let's save and you can see we have the margin i just want to make this a little bit thick so over here i'll add a width okay and the width is gonna be let's say three picks okay so let's see so this looks pretty decent as we had over here okay so now uh let's add the name of the item that we have okay so that is we will get the name from this item product okay so for that i am gonna wrap uh wrap this stack with a column okay now the stack is the image section okay and then after that we have product name and that is simply gonna be a text and inside this we are gonna have product dot name okay and now since because of null safety i need to add this now let's see okay so it is giving us errors because of the height so in our product screen over here where the height of the size box is 100 i i'm gonna make it 150 okay and it looks so it is done now now let's add the styling and all the stuff to it okay so for that we have style now let's check the phone so the font over here is poppins so for that i'll need to import our google fonts so import google fonts dot dot okay and over here i'll apply it to it google fonts dot poppins okay let's format it and while it is formatting over here you can see the uh color is the size is 12 and the color is this okay so i'll copy the color as well okay so over here let's apply the color so the color is again gonna be a color class then 0x double f and the color okay along with this we have font size and that is gonna be 12. okay now over here i can add a const so that this warning will go okay let me see yes so now once all the errors are gone let me save this okay so we get it but i think the uh font size could be a little bit more bigger so i'll make it 15 okay this looks better now i'll add some padding to it so wrap with a padding and the padding will be only okay and i want the padding only from the top because it is sticking to the item okay let's apply it again there is an issue so i'll increase the size furthermore i'll make it 160 and we have it over here now over here you can see these items are sticking as well okay so for that i'll wrap up this stack with uh with a mod with a container i guess yes and then in this container i'll add a margin and the margin is again gonna be of edge in sets dot all or maybe better than all will be horizontal sorry not horizontal but symmetric inside that we have horizontal and i think five will do let's see let me save this yes so i think this looks fine this is how our item looks okay now the last thing is to add the image so let's do that okay so i need to go in the center child okay so which is this container now after decoration we'll have item called child yes okay and the child is gonna be a image dot network okay now let's see in our seller item how are we displaying the image okay so over here you can see we have this as our starting part and then we add the name of the image okay so i'll do the same thing over here now instead of seller it is gonna be product dot image okay so let me format this and now if i save this the image will appear over here it will take some time okay so it was it didn't take it was pretty fast okay so now i want to add little bit margin on both the sides so for that i'll add padding padding const edge inserts dot all and 5.0 little padding okay so that the items are pushed towards the center okay so this looks fine and with this we have this item okay now uh i am trying to make the ui roughly like what we have designed once the main functionalities are complete we will do all the little design tweakings that we need to do to make it exactly like the design okay so this was for the video thank you so in this video we are going to continue with our mobile app for the project better buys okay so up until the previous video we have made the splash screen and we also have the sellers screen okay and if we click on any of the seller we go to the products that they offer the products screen basically okay so now over here we have the products okay the list of products this image is not loading i don't know why i think i think the image is no more on my server i'll put it but okay so we have the products now let's make a screen where we show the details or if if you if you remember from our design uh just give me a minute let's let me bring the design yeah so if you remember from the design we have this product screen and then we have the product details screen okay so here we intend to show the details of this product okay if you remember the prototype was okay so i don't think the prototype is here but i'll tell you what the general idea was so if we click on any of the product we nee we will come to this product details page and over here we can see the details of the product we can add it to cart and we can buy now so yes the most popular and what's the word around is still remaining and we'll get back to it once we have sufficient data like for most popular we need to know what who which product has the most interaction count and until then we can't make this and then subsequently this as well okay so this is the product details screen and we are gonna make the ui for it now okay and along with this when we click over here the interaction count should also be increased okay so let's get started so first i'll create a new screen okay a new file in the screens folder it will be called product details screen i'm sorry product details screen dot dot okay now over here we'll now over here we will create a stateless widget okay so the idea is that we always create a stateless widget and convert it to stateful widget whenever needed so the class name is also gonna be the same product screen details okay now all these are warning because we have a missing import statement so import material okay and the warning is gone now over here inside this container i'll simply create a child and a text that says product product details screen so as so as to check if the navigation is working properly or not okay so this is not that is all gonna be there but this is just for checking okay so i'll save this now another thing that i miss over here is creating the route name so i'm gonna write static const route name and it is gonna be product details screen okay so now that we have that let's add this route in our app widget okay and inside the routes section so for that first we need to import it so i'm simply gonna write import screens and product details screen dot dot okay and similarly over here i'm gonna add product details i'm sorry product details screen dot okay why is it not changing the color did i not save this okay so you can see the spelling is wrong over here actually so it needs to be you okay just please forgive me for this so yes okay let me save this and now we have product details screen router name okay is the to name product screen details okay i am sorry so product screen actually it should be product details screen so the naming convention here only is not right so let me just change it product details screen product details screen let me save this and now over here i think it should be fine product details screen dot route name and then over here we get a con context but since we not don't need it i have put an underscore over here and then over here it is product details screen okay so the part n means main dot app is done let's format it save it now we need to navigate from this section so this is actually a product item this is the widget that we created over here okay so this is the container i guess this is the column that has all the data means like the image the background and the title okay let's confirm so this is the image section and this is the product name so yes so column is our parent widget so what i am gonna do is i am gonna refractor it and add a container a widget on top of it and the widget is gonna be nothing but our gesture detector okay and then if on tap so on tap what i'm gonna do is simply write navigator dot off context dot push named and the name is gonna be product detail screens route name so let me import that over here import then in screens we have product details screen so over here it is gonna be product details screen route name comma and i also want to send the product as the argument okay so and the argument is nothing but product great so let me format this it is almost formatted okay i need to give a semicolon over here now let me format it it is done let's save it okay now i'll do a full restart okay i click on the seller albert einstein and then if i click on cucumber we have product details screen so it is giving warning because we don't have like a proper scaffold over here but the navigation is working that is confirmed okay so let's add a scaffold over here since it is a new screen okay now does the scaffold have a child or a body yes so it has a body and the body is gonna be a container okay now let's give a background color to this container to see the size that it is taking okay i don't think we can give it i we can give it a color so let's take any random color for testing control option f to format and then save it and yes it is taking the entire screen so that is actually what we wanted now if i add an app bar okay app bar and then i add a title to it and the title takes a text or a text widget so it takes a widget so over here it is gonna be a text widget and let's say title okay let's just see what happens okay so we have a title over here now in the design you can see the title is nothing but the product name and we have a back arrow over here so let's make that so for that first we need the product name over here in the product detail screen so we will uh import the product that we are sending via this navigator okay so over here first i'll import the model product import come out of screens folder go inside models folder and import product so this is a general convention the app level the global level imports go at the top and app level go below it and if dot level imports are there then it goes above this okay so that is that now we have our product over here product product is equal to model model route of context okay then we have settings and then we have arguments and then as to type cast it as product okay so i think it is not settings i don't know why it is giving an error let's see how we did it earlier so in the product screen we took the seller so we just need to give a semi uh question mark exclamation mark over there okay so in development it is not necessary that you know everything it is how you learn so i think it is not settings i don't know why it is giving an error let's see how we did it earlier so in the product screen we took the seller so we just need to give a semi uh question mark exclamation mark over there okay so in development it is not necessary that you know everything it is how you learn okay so now that we have the product over here instead of giving that i can simply write product dot its name so now that we have we are coming from cucumber it should be cucumber i think we need i need to give an exclamation mark over here let me format it let's save it and we have cucumber over here so this is fine now how to change this icon so there is a name i am not remembering it so what i'll do is i'll check all the options that we have okay one thing that we can change for now is the background color let's take the background color from here okay let's go in design and this is the background color okay let me copy it okay then we go back in our code and over here i add color then 0 x ff for opacity and then the color code okay let's save this and see so we have the color and we can remove this color from here for now we don't need it because since we have other items we will be able to verify if it is working or not so we already have this back icon over here because we are using push named okay since we are using push named if we go back we can go from the screen it is coming so that is why back is possible and that is why flutter has automatically added a back icon over here now uh since i am running it on an ios simulator it is coming like this but if i would have been running it on an android simulator it would have come like we have in our design okay so either we can leave it like that or we can change it i am gonna change it but that is like your choice what do you want to do leading okay so leading is the widget that we leading is the named parameter that has a widget so i'll use the icon widget inside that icons enum and from that enum i'll take the back icon so let me see what are the back arrow okay so no arrow let's see what all arrows we have over here yeah so we just need the arrow back okay and it should be of color white color needs to be colors white okay and i need need to give a closing parenthesis over here let me format it i think it needs to go with a const so yes the warning is gone now i need to give a comma over here so it is the standard practice to give a comma if you have more than two named parameters or even unnamed parameters so construct a color for lower prefer const with a constant constructor okay so let's add cost i will prefer const let's format it save it and yeah there we have it okay so now that we are done with this let's come to this section okay let me zoom it out a little bit yeah so first you can see we have this big image in the center so let's do that okay now inside body there will be a child the child is gonna be a image network because we have image url now let me see how i am displaying the images over here yes so as i hoped there is a previous url okay so this is generally how i do it so i'll copy it from here paste it over here simple let me format it save it and it is in the corner so we don't want that okay now since uh the design is on broccoli i am gonna change the item as well to broccoli from cucumber okay so now that we have added an icon over here what we forgot was to add like action to it what will happen if i click on that icon so let's redo that so again i'm gonna refractor it wrap it with a widget add gesture detector now you can also change this icon to an icon button widget but i prefer gesture detector so it is your choice basically it is nothing more than that so on tap and on tap i want navigator navigator dot of context to pop i guess yes it is pop great so now this is done let me format it save it yes let's see if the back button works it works now where is broccoli so do we have broccoli yeah so now let's fix this so it is again over here giving a warning to maybe avoid unnecessary containers okay okay there is one okay then let's remove it for now we can always add it back when we need it so i am removing the container and the warning now let's see its height let's increase its height height is gonna be media query dot off context dot size and dot height into two by three so what i am doing is i am taking the entire screen size and then i am alerting two third of the screen size to this image so what this will so what this will do is whenever the screen size changes it will not impact how the image looks okay so that is why it is very important to use dynamic sizing over here so let me format it save it okay now i think we also have to like tell the image to expand and that is fit and the fit is again box fit dot cover i guess let's see yes so this is how we want it but the image is actually not very sharp it is very blunt so i will be updating the image images but for now like we can we understand the gist okay so i don't want it two by three that is way too big i don't have space for anything else so what i'm gonna do is i'm gonna change it to uh one by two okay so that will only be half of the space let's see or maybe one by three okay then again it is very small let's come back to one by two okay we are continuing with this for now we can again change it later okay so now in the design we have the image and then we have the price so let's add the price and now we again have to add back the container or better than container we simply start with adding a column and let's see if it is pushed to the top okay so what generally happens is that as soon as you add a column it is already in like top aligned so all the items that you might have had in the center will automatically be pushed to the top but since this is an image and it is kind of taking this much space so it is not being pushed okay you will understand what i am trying to say as soon as i add the text okay and the text is gonna be our product dot price per kg okay okay so i don't think we need it over here we need it over here okay it is okay so basically the error is that it is uh integer so what i am gonna do is i'm gonna typecast it so what for that okay just give me a moment first i'll add it inside quotes then add curly braces in front of it and then add a dollar sign so now it is an integer but since it is inside quotes it will automatically be typecasted to a string so let me save this and you can see this much space is already left so what we can say is that the image is taking from this place till this place okay which is way too much of like size so we need to fix that so the solution is that we update the image actually and i think i'll do that and then continue with the video so hang on until the previous video we were working on the product details screen okay and over there we were trying to display the product image but since the image was compressed so the image was getting pixelated when we were trying to display it in a product details screen where the size of image was comparatively larger than what we had in pro pro product screen okay so what i did was i did add an image okay and i'll show you how i did it so first let's go to server handler where i am getting all the products okay so over here what i am gonna do is i am gonna print it once so that you can see how i am getting the response over here so print response dot body let me format it then we can do a full restart to see okay so it is loading the sellers let's go to albert einstein okay so over here you can see that i am getting an image and after that i am getting an uncompressed image okay and that is inside another folder products uncompressed images and the same product name okay so now i have done it on the server and was not able to record it but i will give you a gist of how to do it if you want to do so so this is the api okay this is the last point till where we have written so all you need to do is simply go inside models inside product okay add another variable over here and when you create an add product with this image there will be another uncompressed image similarly in the sql also after image there will be uncompressed image okay and over here since it is select star we don't need to worry about it along with this in the apis okay inside gen because general and the products okay uh no over not over here actually i'm sorry inside api inside seller and when we go to add along with this image we will also take another image that is the uncompressed image which will comparatively be larger in size and thus larger in dimension and thus pixelation will not happen okay and along with this you also need to alter the database and add a key value pair for the side image okay so the process is pretty simple we have done for some other properties earlier you can look in those videos if you are still not clear okay so let's get back to our code editor now over here we are getting an uncompressed image let's uh add that key value pair in our product model so i'll add another string over here okay and i'll call it uncompressed image okay and over here below image i'll add that uncompressed image okay and get it from the same json with the key name uncompressed image with a underscore so now that we have our image let me save this now that we have our image in the product details screen instead of product image i'm gonna use uncompressed image instead of typing so much yeah so we have our uncompressed image let me format it save it and i don't think we need this print anymore and anyways it is giving us a warning okay so that is that and with that i remember that in main yes i might have forgot to add the const so let's fix that once that is done let's do a full restart we don't need main and those things okay so let's go in albert einstein the cellar now as we were seeing the broccoli last time let's see if there is any change and you can see that the image is like far more better than what it was earlier okay so this is one thing done okay so now let's move continue with the rest of the design so before that i noticed one thing over here and that is that it has curvy edges okay so let's try to achieve this okay let's go back over here now we have this app bar we don't want to touch that we have this column okay now let's surround it with our container again we'll refractor it wrap it with a container okay now in this container let's give it a color okay or maybe inside the decoration we take a box decoration okay and over here we give it a color just as to check if the thing is happening properly or not so color colors dot amber is fine okay and then after that okay first let's say wait and see so we have the color now let's give it a border radius uh border radius and there is something only yeah over here only okay now over here we need to give it in top left okay now it takes a radius okay so it takes a radius now i'm not sure how the radius is but we just can't try so radius dot circular yeah okay so this is how we can do it radius dot circular so what i am trying to tell over here is that it is not necessary for you to know everything all you need to do is have some common sense and do it and try until you stumble to the best option there okay now let me format it save it and we have a very slight border radius let me change that i'm gonna make it 50 okay so over here is a significant border radius now i want the same for i guess top right yeah so top right again it is gonna be radius and dot circular and 50 is actually too much i'm gonna make it 40 okay let's see so 40 seems fine this is also gonna be 40 yes so now uh we have this black white space over here we don't want that we want the same color as we have over here so we can't actually add a background color to it but we can do other stuff we can wrap it inside another container and give that a color okay so that is exactly what i'm gonna try right now before that i'll let me just fix this warning and it is again for const okay so let me wrap it inside our container now since it is a container the refractoring tool will not show a container so i'm gonna take widget and then call it container okay the container will have a color the color that is this color okay so here we go let me format it save it and we have the color over here we don't need this amber anymore okay sorry we need to make it white actually yeah but now if you see we have a line over here and that is nothing but the elevation of app bar so all we need to do is go inside app bar and make the elevation as 0 or 0.0 since it is a double yeah so we can see that it all is same and we have it as we had it in the design so that is cool we don't need this amber anymore okay sorry we need to make it white actually yeah but now if you see we have a line over here and that is nothing but the elevation of abba so all we need to do is go inside app bar and make the elevation as 0 or 0.0 since it is a double yeah so we can see that it all is same and we have it as we had it in the design so that is cool one thing done we can say that okay now this image still looks pretty big to me what i'm gonna do is i am gonna deduct 20 from it let's see okay let's let it be like that we can leave it like that for now so let me add some documentation means basic stuff so that someone else who looks at this code directly and is not watching the video is able to understand so this container is for the background color and this is our main container okay now this is actually adding the curves but that is not important this is important this is the product image actually so that is that now this is the product price per kg okay per kg and it needs to be capital p so over here it is 120 but in the design it is rupees and followed by kg so we can do that since it is already in string interpolation so rupees and then a space then the price and then per kg and let me save this okay so this looks fine now i don't want it in the center i want it in the right so again where is our column yeah so it is over here now i'm gonna make all its child left aligned so that since it is a column the vertical axis is the main axis so i'm gonna write main axis alignment and then from the main axis enum okay i'm gonna write start so let's see if this works or not okay it didn't i don't know why so what we can do is inside the surround this text with widget and that widget can be a sized box okay now the only purpose that size box serves is that we can give it a size so i am gonna give it a width and the width is gonna be uh media query dot off context dot size dot width okay so that is there and now you can see it is to the left so what happened over here was that originally the text has taken the entire space but now since we surrounded it with a sized box the sized box took the entire space and the text inside it only took the space as much as it required so our purpose here is done okay now let's style this text before that i want to leave some space towards the left so what i am gonna do is there are two things that i can do actually over here i can surround this text with a padding okay and that is not the way to go we can simply change the size box to a container so that we get the width and the padding in the same in the same widget okay so over here i want to add padding and the padding was like engine sets as in sets only because we only want it from the left and left and i'm gonna give it 50 pixels okay we can this seems fine for now so the warning is also gone now over here in this child text let's start styling it so style and there is this text style now i think the font that we are using is poppins and i think i already have google phones in here let me check yes we have so let me import that import google font dot dot now over here instead of text style it is gonna be google fonts dot pop pins i guess yeah so it is gonna be pop pins and inside this let us give it a color i'm sorry what is that called is it color or text color okay so it is color i don't know why it was not showing over there on its own so we are gonna use the same color okay now if you are asking where if you wanna know where i am getting all these things the design file is in the link so you can go over there and just have a look yourself then after that we need to mention the font size the font size i'm sorry the font size can be 10.0 let us refractor it save it and see how it looks and it doesn't look good so what i am gonna do is i am simply gonna pick everything from here so the size is 220 and the font weight is medium so let's simply just do that and see if it looks decent or not and then we will do little bit tweakings ourselves so font size is there and then font weight then again we have the fontweight enum okay and then the options are bold let's see bold because medium is not an option over here we will have to give 100 200 and values like that so this 120 looks fine but i think we can increase its size a little bit more yeah so this looks better okay so with this the price per kg is also done now i'm gonna commit it over here so that if you watch the video or the gridlock you will have a good idea so first i'll check the status add all the files to staging then again check if all the files are added and the end green means yes it has then i'm gonna commit it price per kg display and then i'm gonna push it to github okay so this was for the video in the next video we shall add this and most probably the buttons we can't add this for now okay so or maybe we will add this and just add some random data and later on we can connect it with the api so i'll need to think what i need to do but see you in the next video okay so thank you for joining the previous video we were able to display this image and the price per kg so in this video we are gonna make the rest of the ui and i have decided that i'll also make this ui and it will be static for now and once we make the apis for them we'll connect it with them so let's open our code editor i'll do a full restart to see if everything is working fine or not so we are getting the sellers now if i click on any seller uh their products are being shown okay i'll choose broccoli and then broccoli is being shown over here and it's price so this is in product details screen and i think i have not added the font over here so i'm gonna do that now the style is gonna be google style uh sorry google fonts dot pop pins okay i think this is enough so let me format it so it is taking some time to download this poppins okay so once this is done i do a full restart and we have our font over here so let's continue now next thing is we have to add a description over here okay so this is the product image product price per kg this is the container over here and we are gonna add the description so description is again gonna be a text field sorry it is gonna be a container okay and the container inside this will have our text field because of the issue we faced over here now again i want its width to be the entire screen width and the padding should be equal to the padding that we have given over here so that the entire text looks aligned so i'm gonna copy it paste it over here okay the error is because i'm missing a comma over here now inside this there is a text field okay sorry the child is a text field okay and the text is nothing but product dot description okay let's see how it looks so we are getting a description over here but it doesn't look pretty so let us fix that what i'm gonna do is i'm gonna make the padding 40 so that we get little bit of extra space okay and i want to leave the same amount of padding from right side as well so either i can change add or write over here or change this only to symmetric i'm gonna change it to symmetric and this is gonna be the horizontal axis yeah let me save this okay this looks better now i also need to add a padding from the top but i am not sure if i need it from the bottom i am gonna add it from both sides for now but if later i don't need it i'll again switch back to only so i think 10 should do let's see yes it looks fine now let's come to our text style and the style is again gonna be text style sorry we don't want text style we want google fonts dot popins okay now over here i'm gonna change the color okay the color is gonna be this color okay now let me add a comma let's format it let's see okay so it has converted to popins but it is taking too much of space so what we can do is we can like remove some part of it for now like we can add a cmore option if we want for that we can use the rich text field but i am not gonna do that i am simply gonna clip certain part of the text okay but if you want to add the see more ncls option you can do that rich text is the way to do it dot i think it was a sub text or sub string yeah so i want from 0 to 120 let's see how much that is now it is way too less let's make it 150 because actually over here the description wouldn't matter if you think from the product perspective the vegetable picture in itself tells everything uh okay one it is giving us five lines let's see how much were in was in the design it was near around five lines so i think the text is done for now let me format it save it so we have our text in place now after text we have a review section product with a view okay so over here first we have a container okay that is understandable now this container will have our decoration the decoration is gonna be box decoration okay and generally in decoration we always have boxer decoration the color is gonna be gray color again i'll use the colors enum colors dot gray i'm sorry colors dot gray let's see how this looks okay where is the container i think i need to specify a height so i'm gonna give it a height of 50 for now so this is our container and this is not the gray we want so we can use different versions of it by just adding numbers into the square bracket so the numbers are like 100 200 per hundred being the lightest shade and eight hundred or nine hundred being like and as you uh like increase the numbers the shades get darker that is the just so 200 is way too light i'm gonna make it four let's see now four is again too much let's make it three now let's check in our design i think three would do for now okay so let's give it a width or instead of giving it a width we can simply apply padding from both the sides or maybe margin margin is the way to go because padding will again the background color will be in the padded area as well so margin is the way to go margin const so now so i automatically put const over there because of because of the so many warnings that we got so now it has kind of become a habit so horizontal let's say 30. yeah so this looks fine um okay for now and the height can be 100 see how much that is okay we can start with this for now we can again later change the height and margins if needed so now let's add border radius border radius dot circular i guess yes and 5.0 okay let's see let's confirm it in our design i don't think it is 5 yes it is 15 so let's see yeah so the 15 here and 15 there is the same thing okay so now let's continue what i'm gonna do is i'm gonna take it to another screen so that i don't have to keep on flipping if you want to look the design the design link should be in the description okay so now after let's come back here now now that we have a container let's add the items that are inside it so along with this i am gonna add a padding over here so that the contents don't start appearing at the corner okay padding const engine sets all 10.0 let's see okay we will not see any visible change sorry for