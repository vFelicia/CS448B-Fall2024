hello guys welcome once again in the last video I have shown you what are delegates and how to declare delegates in C shop in this video I'm going to give you a little example which uh makes this delegate concept a little bit much uh clearer so let's get started in the last video I have shown you how to declare uh delegate signature and I have shown you whatever method you want to point to from from a delegate you your method or your delegate signature will look like the same as method only change is you need to have this delegate right now for example I create I want to create a delegate which will be a general purpose delegate to perform some action or to perform some operation for example I want to perform uh addition subtraction or and multiplication and division from a same delegate how can I do it so for example this method we have written it for the addition of two numbers I can just make a similar method to substract two numbers I will just say Subs number for subtracting number and will just give us the subtraction of two numbers and once again we will copy this method and we will paste it here and then this third method we will uh use it to get the product of two numbers Rod two numbers so this will give us the product okay so for an example I have these three method and I want to use the same delegate to use them I can name my the delegate as a operation Delegate for example operation delegate which performs some operation on these two numbers right now what I what can I do is or what I can do is I can perform this uh addition subtraction or product product of these two number uh by using the single delegate so I will just copy the name of this delegate and I can declare the object of the this delegate I have told you last time that delegates are similar to the classes in a way that you can instantiate or you can create an instance of this class or this delegate right and in the Constructor you need to give the name of the function you want to point to so for example first object I create Del one to add these two numbers right and I can say the result uh the add result is equal to whatever is the result right this should be is equal to and the result okay so and in a similar way I can declare the another instance of this delegate I will just copy and paste it here and I will name this delegate as delegate two and this in this delegate instance I will pass this function which is subtracting two numbers okay and this result I will say this result is result one for me this so for example we say this is a result one and this is a result two for me and I will pass two different numbers for example th000 minus 789 okay and I can instantiate a third delegate object del3 and I will pass this product function to this and now this delegate will point to the product and this result I will store in the third variable called result three and then I can say sub result is or sub result is and product result is this one so in a way I have used a single delegate to perform these three methods right so this delegate can be used as a general purpose uh method for performing three three different tasks right and I will run the program and it shows me the result of all these three right so in this way you can create a delegate which will show you uh which will give you the result of all these uh this should be once one second okay so there there is something which I forgot this delegate comes here when we pass these two arguments this delegate will come here and this delegate will come here right now this declaration is complete so we create an instance of the uh delegate and in the construct as a Constructor we give the function name which will point point to this function so our delegate object will point to this function and whatever this uh function is it is pointing to it will take the argument same argument as that function and using the this instance right the same you will do it for this and this and now probably you will see the right result so addition of these two number is this subtraction of these two number is this and multiplication of these two number is this okay so in a way you can use delegate for three purposes first is to encapsulate the methods call from caller second is effective use of delegate improves the performance of the application right so if you use this uh these delegates effectively it will increase the performance of your application in a way that your application will be much flexible if you use delegates because you can perform different tasks using the same delegate right and the third is um delegates are used to call method asynchronously right so you can call this method and at the different time you can call other method so you can call them asynchronously right so in this way you can use delegates this is a small example I want to give you and I hope you learn something new this time please WR comment and subscribe and bye for now