in this video we will see what is uh continue in kotlin continue in kotlin and then we will see an example uh to calculate the sum of n natural number using for loop okay so uh what is continue and uh in which cases continue is used so suppose you are working with loops and sometimes you want to skip the current iteration of the loop okay so in such case continue is used the continue construct skips the current iteration of the enclosing loop and the control of program jumps to the end body of the loop okay so let us now see that how continue works so yeah it is almost always used with if else construct so for example there is a file some x test expression and test expression one i can say and then there is a loop which has some code this one okay and then after some set of code there is a statement that if test expression 2 is true okay then i have to i i'll say i have to continue and i'll just end the loop here and then the f statement here and there is some another block of code say code two okay so uh what is happening here okay i'll just end my while loop okay so what is happening here is uh if the test expression 2 is evaluated to if the text expression 2 is evaluated to true continue is executed which skips all the codes inside the while loop after the iteration which is the code two block okay so uh like there is some code one that is going to be executed after the while statement and then if the test expression two is true then it is going to go to the end of this viral block and skip the code too okay so uh and if there is something with the if there is a do uh do while loop okay so there would be a do while loop like do code one if a test expression two is true uh continue and then there is another set of code and there is a then there is a while statement while test expression one so now what what happens when when the test expression do is true that the the continue is going to be called and uh then it is going to be skipped to the while statement and then the test expression one is going to be checked and then it if it holds true then it will go to the uh do loop okay so let us go through the uh jump to the example of continuing kotlin okay okay so uh suppose there is a for loop uh from one to five and uh if i is uh if i is greater than one or less than 5 yeah if i is greater than 1 and less than 5 we have to continue okay so i'll just write the code one main for i in for i n one two five and then if uh okay i i'll include println um i always printed okay then if i is greater than one and i is less than 5 okay which is equal in all case except when i is 1 and 5 okay so in this case i'll say that continue continue okay and then i'll again write a print statement which says println uh dollar i not always printed okay so when i go ahead and run this program what i can see is when when we run the program okay so when we can when we run this program it says that one always rented one not always printed two always printed three always printed four always printed five always printed and then five not always printed okay so uh when the value of i is greater than one and less than five continue is executed which skips the execution of this this this code println i is not always printed okay however the statement this this statement println i is always printed is executed in each iteration of the loop because this this statement this this statement exists before the continue construct okay so now now we will see a some like real life example of it so let's say i have to i have to calculate the sum of positive numbers only so uh before that we will calculate the sum of first and natural numbers okay so for calculating the sum of first and natural numbers uh the the what we can do is we can use a for loop or any kind of loop okay so uh let's say i i have to make a program using the for loop so i'll write the code and explain okay so let's say i i'll i have i am declaring the variable num and i am giving the value of 100 okay so i have to calculate the sum of first hundred natural numbers okay so there is a value and uh let's say there is a variable sum which is initialized as zero for the uh in the starting okay so for i n one two num okay so i in one two num now what what uh what are we going to do is i am going to do sum is equals to sum plus i okay so i am going to add i in sum and equate it with it so uh in order to write the code of it sum plus equals to i so this is the sum equals to sum plus i so now whenever the loop iterates uh every time the particular number is going to add with the sum okay so at the end i'll print print the sum so uh i'll print sum is equals to sum now when i run this program i should see the uh sum of first 100 natural numbers so the sum of first hundred natural number is uh five zero five zero okay so uh now i have to calculate the sum of only positive numbers from one two hundred so now i have to do make some changes with in this program so what i'll do is i'll this this block of code is fine okay so there is some integer and okay so from 0 to 100 i have to calculate the sum of positive numbers only so if before including the sum if the number is uh okay sorry i have to mention here odd okay my bad i have to calculate the sum of odd numbers only so from 1 to 100 i have to calculate the sum of odd odd numbers so if the number is even i have to continue okay i have no i have to skip the rest of code so what is the condition for for a number to be even so the condition is number must be when the number is divided by 2 the remainder must be 0 okay so when the number is even i should continue and now when i run this program okay so if i if i should be even then i uh when divided by 2 the remainder should be 0 okay so when i divided by 2 and i is even we should continue and when i is not even that is odd we will skip to this block of code and calculate the sum so when i run this program i can see that the sum of odd numbers from 1 to 100 is 2500 okay so that's all for this video stay tuned