in this video I'm going to show you what is a function in Python and how to use functions in Python so first of all what is a function so a function is a group of statements within a program that performs a specific task now functions can be of two types one is builtin function and other is userdefined function builtin function we have already seen that print is a builtin function or for example input is a builtin function or for example min is a builtin function and so on now usually function does one task at a time so you can see this print function only prints something whatever input you give here is going to print it input function takes some input from the user main function finds out the minimum out of some values so a particular function do one task at a time now let's see how we can define a function so to define a function you use a keyword de F and then you give the name of the function so name of function and after the name of the function you give these parentheses and you provide number of arguments or parameters so for example Arg 1 comma Arg 2 comma Arg 3 and so on so you can give any number of arguments to your function now after this ending parenthesis you give this colon and then under this function signature you write some statements which you want to execute when this function is called so for example if you want to print something you can print something or if you want to calculate something for example the product of two or three variables or a sum of two or three variables you can do under this function declaration so let's take an example of function and let's see how we can define real life function so I'm going to define a very simple function which is going to add two values so I'm going to name it as sum and for example it takes two values one is let's say Arg 1 and other is Arg 2 and then after the colon I want to add these two values so I can just write print here and then I can write R 1 plus R 2 so this is a very simple function which takes two arguments and then add these two arguments and print them so this is how you declare a userdefined function now after declaring a function you need to also call this function so in order to call the function you just use the name of the function and then you provide the arguments which is required by the function so our function requires two argument right now R 1 and R 2 so we are going to provide these two values let's say I want to provide 15 as the argument 1 and I will provide 60 as the second value now let's run the code and let's see what happens so when we run the code you can see our function prints 75 which is the sum of these two values which we have provided as an argument to this function now also if you remember this plus operator you can also use to concatenate two strings so I can use this sum function and this time I'm going to provide for example hello as the first parameter and then world as the second parameter and then I'm going to run the program and it's going to print hello world in addition we can provide to float numbers here for example I will provide 15 point 6 4 7 and the second argument I'm going to provide is 80 point 2 5 8 and this is also allowed so I'm going to just run this code and it gives us the sum of these two values so this function sum is doing one single task which is to add two values whether it's a string or it's a number or it's a float value now you may also observe that when I provide for example as a first argument I will provide a string and as a second argument I will provide a number here will this work let's see so it's going to give us an error and this error says can't convert into object to string implicitly so this is a problem so to solve this problem we can provide here a simple condition and we are going to check the type of both the arguments so if type Arg 1 is not equal to type R 2 this should be Arg of 1 not easier 1 so let me just change this here and if the type of R 1 is not equal to R 2 we are going to just use this keyword which is return so this return keyword is used to return something so you can return for example 0 here or any string here and when you write this return function without and the value here it's going to return nothing but as soon as this return keyword is called nothing after that will be executed so even though you are returning nothing from here then also this statement will not be executed so whenever return is executed after that all the statements which are under the return will not be executed also we can print a message here that please give the args of same type okay and let's run the code now and you can see now it prints this message which says please give odds of same type so if these arguments are not of type whether it's integer or a string or a float value if the user provides first argument which is a string type and the second argument which is integer type then this condition will be true and this statement will be executed which is going to print this message and then return is called and after this whatever statements are there will not be executed so now as I said you can also return some values from a function and here when you don't give any values after this return keyword it's good not going to return anything but let's return the addition of two arguments using our return keyword so I'm going to use this return keyword here which is going to return the addition of these two values using this sum function so now what will happen is let's run the code once again and you can see this sum is executed this sum is executed this sum is executed but the result is not printed so in order to get the result out of this function when it returns something we need to save this return value in a variable so let's save this value into a variable and then you can use this variable to print the value of the sum so I can do something like this also you can directly and close this sum function inside a print function and then also it's going to print the sum of these two strings so either you can assign the result of this sum function which is returning the result into a variable or you can use directly this print function to get the result and print it so I'm going to use print with other two functions also so first print and the second print here and let's run the code once again and now you can see what happens so first of all it prints 75 which is the addition of these two numbers which is returned by this sum function into a variable a and we are printing the sum using this print function here in the next result it prints hello world because this sum function now returns the concatenation of these two strings similarly this sum function is going to return the sum of these two float values and in the last result because the type of Hello is not equal to the type of 15 then this message is printed because this condition is true in the last case and then return will be called and when this return is called we were printing whatever is returned from the sum function and you can see at last none is printed because at last this sum function is returning nothing because the type of these two arguments is not same so we were returning without any value and that's why none is printed here now there are few things to note here okay so the first thing is you can define a function using DEF keyword and then the name of the function and under these parentheses you provide the arguments so these two are called arguments so this is argument 1 and this is an argument 2 also you can use alternatively the name parameters for these two arguments so this is a parameter 1 and this is a parameter 2 now it's possible to return from a function like you can return the addition of two values or it's also possible to return nothing from a function so when you use return without a value it's not going to return anything now when you use this function somewhere it's called calling a function now at last let's discuss about some of the benefits of using functions so the first benefit is function makes your code simpler because if you don't use function to execute this kind of code then you need to write this code again and again whenever you want to use this functionality at different places the second advantage is function makes your code reusable so the same code is used to add two integer values to concatenate two string to add two float values and it's also used to give the error if you provide the arguments of different types so that means you write the code once and use it multiple times and that results in faster development of the code so if you use a function you can develop your code much faster than if you don't use a function and the last but not the least advantage is when you declare functions you can test and debug your code in a better way so this is how you can declare and use functions in Python we will discuss some more properties which are related to functions in Python so let's get started so to start with I have a function called student which takes two arguments one is name and other is age and inside the function we just simply print the value of name and age using the print function and when we call this function with the name and age it's going to print this kind of output now Python allows us to set the default value of the arguments so after this name you can put equals to symbol and then put the default value whatever you want to set for the name for example if somebody doesn't provide any name then you can just say unknown name similarly we can set the default age here let's say default age is zero if somebody doesn't provide any age with the student function then the default value will be zero now instead of using this student function like this let's say I don't provide any argument to this student function and let's run the code and you can see if I don't provide any argument to this student function the default values are taken so the default values are used when you want to make sure that every argument in your function should have some value now let's say I just provide a name here and don't provide the age and let's run the program and now you can see the name is overwritten by the argument what we have provided here right so default value will be this one if no argument is provided similarly if we give the value of age and now we run the program the default age is replaced by the age which is provided using the arguments so this is how you can use default values with the arguments of the function so let me just remove these two default values and I'm going to give you the next example which is variable length arguments so let's say with the name and age I want to provide the list of scores which this student has scored for different subjects so as a third argument I'm going to provide argument called marks and somehow I want to provide a list of marks which is scored by this student and let me print the value of marks using this print function also now in Python you can use Asterix in front of your argument and this means that you can provide multiple arguments when you use this kind of notation so let's just provide for example we already provided the name and age here and let's provide different marks scored by this student so I can provide 95 for first subject than 70 for second subject than 80 for next subject than 50 for next subject and let's say we don't know how many subjects the student has taken we just have only the information about these four subjects which he has taken so we can provide the four values here and then let's run the code and now you can see name is Tom age is 22 and the value of marks is shown as a tuple okay so whenever you provide this Asterix in front of an argument you can provide the values for that argument using normal argument as you provide for normal argument so first two variables are associated with name and age and all the other variables which you provide here will be assigned to this marks variable because it has this asterisk in front of it so now you can also use a for loop in order to iterate over tuples so X in marks for example and then you can print every value or you can access every value inside this tuple and let me comment this print function and let's run the code once again and you can see for loop has printed all these marks which are there inside the list now if you want to use this type of variable length argument then I will suggest you to use this argument as the last argument of your function so that it will be clearer to the reader of the function that whatever you provide at the end will be the part of this last argument now you may ask that we have provided these marks for this student but for which subject these marks are given to the student now in Python you can also use double as tricks in front of your function argument and this means that now you can provide the key value pairs as a marks arguments so instead of using 95 I can also say that 95 is code in English let's say and then 70 is code in math and then let's say 80 is scored in physics and the 50 marks is code in biology so now when you use these double asterisks in front of your function argument you can provide these kind of key value pairs which are separated by this equal to symbol and how you can access these values so let's run the code and let's see what happens and now you can see only keys are printed and not the values of these subjects are printed so let's first uncomment this print function and let's see what type of value we are getting so whenever you use these double asterisks the values are given to you in the form of a dictionary okay so if you use single asterisks the values are given to you in the form of tupple but whenever you use these double asterisks and whenever you try to access this variable then this variable will be of type dictionary and you already know how to print the values of dictionary so you can just write marks dot a terms here and then here you can just write key comma value and then you can print the value of E and value so I'm going to just print key first of all and then I'm going to just give a space here and then I'm going to print the value right and now when we run the code it will give me first of all the key for example English math physics or biology and the value which is 95 70 80 or 50 how to use lambda functions in Python in addition I'm going to show you how to use lambda functions with functions like map reduce and filter so let's get started so as we all know that python is a multiparadigm language and it also supports functional programming and the lambda functions falls into functional programming paradigm so what are lambda functions and how to use lambda functions so lambda functions in Python are also called anonymous functions because they don't have any name sometimes they are also called oneline functions because they can be written in a single line of code so let's see how we can define a lambda function so as you can see here I have three normal function defined here one is the double functions which doubles whatever arguments you provide here second is a simple addition function and third function is the function which takes three arguments and provide the product of the three argument which are provided so let's see how we can convert these three functions into the lambda functions so the first function which we have is that double function so I'm going to once again write double as a variable and then I can use a special keyword called lambda to create a lambda function so as you can see here this double takes one argument which is X so to provide an argument in the lambda function you just write the name of the argument and then after the colon you write the body of the function so in our case this double function have this body which is return x x 2 so in lambda function if you want to return some value you don't need to use this return keyword you can directly write x x 2 here so this lambda function is equivalent to this double function which is a normal function this w function takes one argument which is X which we are providing here and it returns the multiplication of X by two which we are writing after the Kulin now let's write the add a function using lambda function so I'm going to once again declare a variable called add and once again used lambda and this time this add takes two arguments so I can provide multiple arguments in lambda functions by comma as you do with the normal function so I will provide two arguments and then after the colon you just write whatever you want to return so we want to return X plus y so we can simply write x plus y here and that's it so in a single line we can define the lambda function now the third function we want to provide here is the product function so I will declare a variable product and this time I just need to provide three arguments using the comma separator and after the colon I just provide the multiplication of these three values which is X multiplied by Y multiplied by said so all these three normal functions is equivalent to these lambda functions so I'm going to just comment these three functions out by pressing ctrl + forward slash and now let's see how to use these lambda functions so you create a lambda function and then assign the result into some variable and then you use these variable as you use the normal functions so I'm going to just use print to call the double variable and then using the parentheses I just provide the argument which this lambda function takes so this lambda function takes one argument which is X so I can provide the value of x here so let's say I want to provide 10 as the value of x same I will do with the add a function and the product function so add a function takes two argument and the product function takes three argument so I can simply write these functions like this like a normal function and then I can just run my script and you will see it's going to give us the same result as the normal function gives us so the first is the double of ten second is the addition of these two numbers and third is the product of these three numbers now you might ask a question that these functions which we have defined normally we can also define these function in a single line because there is not much logic inside these functions so we can declare these functions like this and they are also the single line functions so why do we use lambda functions so the lambda functions are generally used with the functions which takes function as an argument or returns function as the result so in functional programming functions are the firstclass citizens that means we can pass the functions as the normal argument so as you can see here we have passed some static or constant value as an argument here but we can also pass the functions as an arguments and in addition you can also return a function from a function so instead of this multiplication you can create a function and return from a function and that's where these lambda functions are useful so let me give you some examples of where you can use lambda functions so as I said you can use lambda functions with the functions like filter reduce and map so let me illustrate how these functions work so I'm going to declare a list of some numbers so now I have created a list which have these six LM now let's see how to use a map function with a lambda function so there is an inbuilt function called map in Python which takes two argument one is a function and second is an iterative area below and we all know that collections like lists or tuples or the dictionaries are all iterative collections so we can use map keyword and then here we can define a lambda function so let's say I want to double each and every element of this list so I can define a function which takes one argument X and then we are going to return that double of this value so this is the function which we have passed to this map function because the first argument which map expects is the function the second is the iterate able collection so we are going to pass this list as the second value let me define let's say my list here so it will be more clearer so I'm going to just pass this my list as the second variable so what this map function is going to do is it's going to apply this lambda function to each and every element of this list which is basically going to double the value of each and every element of the list now let's assign the result of this map function into our variable so I am going to assign the result into some variable and then I am going to print the result first of all so this variable contains the map function so let's see first of all what is the result and then I'm going to show you how to get the result which we are expecting so you can see here whenever you want to print the value of map it's going to just give you this kind of result so how we can get the list out of this map value in order to get the list out of this value you need to cast this value into a list and how to convert this value into a list you use a list function and then pass the result of the map function as an argument of this list function let's run the program once again and you will see now that the result is a list and in the result every element of the list is doubled so basically what this map function has done is it has applied this function to each and every value of the list and this function just doubles each and every value of the list now you might say that this is a very simple function which we are applying to the list so let's make things little bit complex and let's say now I have two lists one is my list 1 and other is my list too and this other list contains some other set of elements so let me just change the values which this second list contains and let's say using this map function I want to add each and every element of these two lists and create a third list with the addition of let's say 2 + 1 + 5 + 4 8 + 7 10 and 8 like this so how can I create a map function to achieve this so let's say this is a variable B and here inside the lambda function we gave the second argument which is Y so it takes two argument and then it adds the value of x + y so we can do like this and then as the second argument we are passing the first list and also as the third argument you can pass the second list here so now what this map function is going to do is it's going to take the first element of the first list and the first element of the second list and then it's going to apply this function to the first elements of both these lists which is to add these two numbers so let's see what is the result which we get using this map function so I'm going to just convert the answer or the result into a list and then I'm going to just pass this B variable as an argument of this list and then we are just printing the results so let's run the code and let's see what happens so you can see we get the list which adds the value of these two lists and creates a new list so you can see 2 plus 1 is 3 here 5 plus 4 is 9 then 8 plus 7 is 15 and so on so this is how you can use lambda functions with map function now let's see how to use a filter function so I'm going to use this special function which is called filter and this filter functions takes two argument but what is special about this filter function is it takes a function as the first argument which gives us a boolean result so instead of adding two numbers and returning this filter function is expecting a function which gives us the boolean result so let me minimize this so let's say we want to filter the even values from this list so how we can achieve this using the filter function so as I said this takes a function as the first argument so you can use lambda and how to find out the even values you pass an argument and then you return X modulo 2 is equal to 0 so this X modulo 2 is going to give us 0 whenever the number is even otherwise is going to give us 1 so this is the first argument and the second argument we can pass here is this for example the first list here and now I'm going to assign the result into a variable and let's print the value of C now using the list function so list and as an argument I'm going to pass C here let's run the code and let's see what's the result and you can see you just get the even values filtered out from this first list which is two eight and ten now let me give you one more example of filter so let's say you want to filter out from the second list which values are greater than five so all the values which are greater than five we want to filter out so we will pass X as an argument and let's say this is the D variable so this lambda function takes X as an argument it's going to return true so let me just write the syntax here so it's going to return true if the value of x is greater than five else it's going to return the false so else we can just write false here so if you want to write if an else condition inside alarm the function you write something like this so this is the syntax of if and else so if the value of x is greater than five it's going to return true otherwise it's going to return false so let's run this code and let's see what happens let me just replace the C by D and I'm going to run this file and you will see the result here so in this list you will see eight ten and nine are greater than five that's why we got this result if we write here greater than and equal to and once again run the code it's going to give us four values including five here so this is how you can use filter function with the lambda functions now let's see how we can use one more function which is called the reduced function so in order to use the reduce function we need to import a special module which is Fung tool so let's import this module and this module is called func tools so we are going to write from func tool import reduce so what we are basically saying we need a reduced function from this fun tool module and now you can use a reduced function so I'm going to declare a variable E and then I can use this reduced function which also takes two argument one is the function and other is the iterative collection so let's define a function first of all which is the lambda function and this lambda function is going to take let's say two values x and y and what it's going to return is the sum of X plus y here now as the second argument I'm going to pass my list variable here so what a reduce function does is it takes first two element of the list and then apply the function which you have written here which is going to add first two element and then it's going to store the result in X variable and take next element into the Y variable so seven plus y is going to give us whatever result and once again it's going to apply the result and then going to add the next number to the result so let's see what result we get using this reduced function so I'm going to once again use print and then we can directly print the value of the reduced function which is e so let's run this code once again and you will see this result which is 37 now 37 is the sum of all these elements inside this my list so let me explain you once again what this reduced function is doing so first of all because we are passing two arguments here in the lambda function it's going to take first two element of your collection which is two and five and then apply this code or statement to these two elements which is two plus five and we will get seven as the result now once again it's going to take seven as the first argument which is the sum of these two numbers and eight as the second argument which is why here and then apply this logic once again to seven and eight which gives us 15 and once again this 15 will be passed as X and 10 will be passed as Y and once again the addition of 15 and 10 will happen which will make it 25 and so on so this is how you can use lambda functions in Python and this is how you can use lambda functions with map filter and reduce functions so I hope you have enjoyed this video and I will see you in the next video