hello everyone and welcome back in the introduction section of this course we discussed how one of the main features of angular is that it gives us the ability of creating our own custom elements so let's do that in this lesson we are going to be creating our very first angular custom component the component is between a course card similar to this one you can see here that the course card is visible and that's because we have added here some HTML in our application component template now imagine that our application has several places where we would like to display course cards so we don't want to repeat this HTML everywhere on the application also the data that we are displaying here in this course card might be dynamic we might have multiple cards such as for example a list of course is displayed and we want to pass to each card the data that we are retrieving from the backend instead of hardcoding everything on the frontend so let's see how a component is going to help us to implement those use cases in order to create a new component let's head over here to the command line stop our server and what we are about to do here is we are going to use the angular CLI to scaffold a new component for that we are going to run the following command ng generate component and then we need to give here a name for a component so we are going to call this the course current component after running this command we see here that the angular CLI has generated here a few different files we have here a typescript file for the component we have here an HTML template some CSS and we also have here a test specification let's have a look at these files they are here inside the source folder inside the app directory and we have here the new course card folder containing all these files let's now have a look at each of these files separately let's start with the course card component so as you can see this file contains that script class called course card component we can see that these corresponds to an angular component which represents a custom element because of the presence of the add component decorator inside the decorator configuration we have here a series of properties the first is the selector property that defines what is the HTML tag that this component belongs to going back here to our application component the selector means that we are going to replace this course card HTML here by a new custom HTML element called course card so the name of this custom HTML tag is the same as the selector string that we have here the next thing that we have here in our component configuration is the template URL which points to the location in the file system of a template file if we open it up we can see that this is essentially empty at the moment but the idea is that this file is going to contain the HTML that we are going to see on the screen that corresponds here to a course card so you can see that is which correspond here to this course card HTML that we have here so let's go ahead and remove it here from the home page and let's move it here inside the course card HTML so now we have copied here this static HTML and notice that we are applying here some styles we will see later in the course how to make these Styles specific only to this component right now what we're going to do is we are going to run our application using this new angular component that we have created here with a set of empty styles for the moment let's go to the command line and let's run NPM start after a moment our server is now up and running so if we now reload the application we can see that we get the exact same result that we had before but now we have extracted the HTML that we have here and we have moved it inside the custom HTML tag course card that we have created ourselves this means that if we create here to our free extra HTML tags in our template and we were fresh the application we are going to see that we have here free instances of the course card component as expected as we can see using angular we managed to create in only a couple of minutes a new HTML element that we can use to build our application if this application will have multiple screens where we have to show course cards such as for example and all courses page or a courses in promotion page we could use this component instead of copying all these HTML everywhere where we need it but notice that the strings that we have here with the description and also the image are hardcoded so we want to avoid that we want to make this content configurable we want to receive this content here as an input for the component the same way that for standard HTML tags we have configuration properties such as for example here the class property the source property etc let's then see how can we have configuration properties to our custom HTML element hello everyone and welcome back in these lessons we are going to talk about component inputs so as we have seen in the last lesson we now have here free instances of the course card component all this text here is the same and the image is also the same we would like to give to each course card a different title and image and let's see where we could get the data for that if you open here our angular course root repository and then open here the source folder you're going to see that there is a typescript file here called DB dated dot TS if we click on it we will see that it contains here a series of courses so each of these javascript objects that we see here corresponds to a given course let's see how can you use these to print to the screen one course card for each of the elements that we have here the first thing that we have to do is to make the data available to the template the template consumes data that is available here at a level of the component as a member variable so let's say that we're going to define here a variable called courses that is going to contain a few of the courses here available in this array let's say that we want to take here the course is number one number two and number three we can make this data available at a level of the application component so that we can add it to the screen by adding member variables here at the level of this component let's say that we want to make available the data for this course then we define here a variable called core course and we assign it the first element of the courses array you can do the same for a couple of other courses let's define here for example one for rxjs and the other for ng rx so here we have free member variables defined any of these member variables are available for being used here at the level of the template let's try this out we are going to add here an h1 tag and we're going to use here the angular template interpolation syntax and we're going to try to access the description of the core course if we now reload the application we are going to see that indeed we are using here the title of the first course if by some reason we would like to print instead the title of the second course we just have to use the second variable that we have defined here if we replace core course with rxjs course and reload our application we are going to see that now we have the title of the second course here in our courses array so as you can see in order to be able to use some data in our template we need to first assign it to a member variable at the level of a component if we don't do that first then the data will not be visible here at the level of the template now instead of printing out here the description of the first course what we would like to do is to pass the description as an input of the course card component we would like to do something like this we would like to define here a custom input property called title and inside it somehow we would like to pass in here the rxjs course description as we have seen before the angular syntax for inputs is the square bracket syntax so this says angular that the content here inside these double quotes is to be interpreted as a JavaScript expression that is going to be evaluated in the context of the application component now the question is how to add this input property title to the course curve we can do so by defining here a member variable which will be a string at the level of the course curve component and we want to annotate it with the angular core input decorator this way angular will know that this is an improved property of the course card element with this in place we are now passing in here the description of the course what we want to do now is to use the title here at the level of the course card component template in order to do that we do the same as we doing here in our application component we are going to use here the angular double curly brace syntax for interpolating here an expression and we are going to access here the title property that is present here in the context of the course curve component class so let's try this out if we now reload our application we are going to see that for the first care that we have defined here in our list of cards we still have here the rxjs in practice course description actually I wanted to pass in here the core course description so let's quickly fix that we reload the application and we can see that we have here the correct title the other two cards however are not displaying anything and this is because the title property for these two other cards has not been defined so this means that each of the course card components has its own data scope there is an instance of the course card component for each of the courses here we have the title with this value but here this value is not defined so we have here an empty string let's now change here our template and pass in here the other course descriptions we are going to add here in the second car the title of the rxjs course and here we are going to pass in the title of the ngx course and now by reloading here our cards we can see that we have the titles as expected first the core deep dive then rxjs and then and grx now the next thing that we would like to do is to change the course image for each of the cards so we would like to pass to the component this second property here the icon URL we will also like to change here the long description of the course so that it corresponds to the text that we have here so one way of doing it would be to pass to this course car component two extra properties we would go here to the course car component and we will add here a couple of new properties we are going to do this in a different way we are going to instead pass as an input to the course car component the complete course object in one go with all its properties for that we are going to be using here a type definition that we will find here in the model folder if you open the course dot t s file you're going to see that we have here a very simple interface defined that defines a course type this is a very practical way of defining custom JavaScript object types in a type safe way as we will see this is going to give us Auto completion at the level of our component classes and even at a level of the template right now we want to refactor our course card component to take as input instead of only the course title we want to take as input a complete course object that we are going to import here from the model folder now moving to the template of our course care component this variable here is no longer present in the course card component class instead we have available the course object so we can now access the title of the course by Auto completing here the property that we want we have here all the properties available at a level template and we can now choose here course dot description the same way that we have printed here the description of the course we can also access here the course image so the source of this image is no longer going to be here an hardcoded value instead we are going to pass it the value of the course image we are going to again access the course object and we are going to see that in our autocomplete list we have available the icon URL property in a very similar way using an interpolation expression we are going to be able to pass in here the long description of the course now in order to view the free courses on the screen all we have to do is go back here to our application component template and instead of filling in the title property we are going to instead feeling the course property for each of the courses for the first car that we want to pass in the core course for the second the rxjs course in for the FIR the NZXT course if we now try this out we are going to see that our data is being correctly displayed as expected as we can see the input syntax with square brackets for passing input data to a custom component it's exactly the same syntax that we use for defining a property of a standard HTML element such as for example an image tag the syntax is consistent in both cases next what we're going to cover is component outputs how to generate custom events from our custom components hello everyone and welcome back in the last lesson we'll learn how to pass input data to a custom component using the square brackets template syntax and input a notation here at level of the component class this lesson we are going to see how can we make a component such as the course curve to emit custom events that can be handled here at a level of the parent component let's give an example of a custom event we would like to go here to our course car component and we would like to add here a button when this button is pushed the user is going to view the course so it's going to be redirected to a new page that is going to display the course that corresponds to the cart so if we hit command s we're going to see that now on each course card we have here a new view course button as we have seen before we can add here to this button a click handler using the following syntax we are going to add here between round braces the browser event that we want to handle and here on the right hand side we need to provide an expression that is typically a function call so I'm going to add here a new method on course viewed and this method needs to be part of the course card component so we're going to add here a new method that is going to be called in response to this click in order to confirm that this click handler is working correctly let's add here some logging and try this out if we now open here the console in the chrome dev tools we're going to see that whenever we click here on the View course button we're going to get here the logging statement as expected so this will happen independently of the car that we click notice that the template syntax that we are using here for having a click event handler it's just another way of adding a standard browser event listener these works as a standard browser event which means that the click event will bubble to outside the component itself to outside the course curve so this means that if we go here to our application component and we add here a click handler at level of the course card itself by using the same syntax we are going to see that this event handler is going to be triggered as expected let's try this out we are going to add here a click handler called on curve click and this function is going to exist here at the level of the application component to this event handler function we're going to be having here a new logging statement so what is going to happen here is that when we click here on the View course button these event handler here at the level of the course card component he's going to get triggered this logging statement is going to be issued to the console and then the browser click event is going to bubble up is going to be caught here at the level of this click Handler and then this function is going to get triggered let's try this out let's open the console and see what happens whenever we click on view course so as you can see we have here the click handler that was triggered at a level of the card component followed by the click handler at the level of the application component using the same syntax that we have used to handle here a normal browser event such as a click event we can also handle custom events let's say that instead of responding here to the click event that gets bubbled up from the view course button we would like to respond here to a course selected custom event so this is not a standard browser event let's rename here our function in order to reflect the fact that this is a custom browser event this is going to be called the on course selected method let's then go back to our application component and rename the event handling method at the level of our course CAD component what we want to do now is to omit the custom event in order to do that we are going to need here a custom event emitter so let's instantiate it using the event emitter class from angular core to our event emitter we can pass an optional type parameter that is going to define what type of values are getting emitted in this case we want to emit an instance of course so we can use this course selected emitter to emit here a custom value and here we can pass in the value of the course that got selected we can access this using these dot course with this new implementation whenever we click here on the view course button we are then going to be meeting here a custom event that is going to passing the selected course as a payload and that will be caught here at the level of the parent component using this event handler we can now retrieve the value that was emitted by the event emitter using the special dollar event variable this means that here on the on course selected method we can now add here a new parameter which is the value that got emitted by the event emitter in this case the course in order to confirm that we are indeed receiving here the course let's log it out to the console now if we would try this program as it is you might be surprised to see that on course selected is not getting triggered and this is because here in our course card component we did not mark this event emitter as being an output of the component so in order for our example to work we need to add here the output decorator from angular core in order to mark this event emitter as an output of this component if we don't add this here then the example would not work with this in place let's now try out our example as we can see we have added here our custom event handler only at the first care of our list let's have a look at what we have then in the console if we click here on the first course we are going to see that we have here indeed the first logging statement then here at the level of the course card component and we have here a second logging statement that was done at the level of the application component so our event emitter triggered here a custom event that was caught here and on course selected was triggered and the course was indeed printed out to the console as expected now if we click here on another course let's say for example the last in the list we are going to see that nothing happens other than we can see here the logging at the level of the course card component where the button click handler was triggered but no custom event was received here at the level of the application component and this is because we only added here an event handler to the first card of our list so if we add here similar event handlers to the other cards we are going to see that any care will be printed out to the console let's then try this out if we try this new version of the program we see here that the first care was printed out here to the screen but if we now click here on the second and on the further courses we are going to see that the correct data is being logged as expected so as you can see the template mechanism for handling custom events in angular looks exactly the same as the one for handling native browser events so handling here the native click button looks exactly the same as handling here a custom event there is one important difference though is that these type of events they do not bubble up the component error key so the click event that was emitted here did bubble up from the course card component up until here our application component this is just the standard browser mechanism it's not angular doing the bubbling of the event but these custom events unlike the native event will not bubble up also notice that the name of our custom event is exactly the same as the name here of our event emitter this is because angular takes the name of the event from the name of the emitter if nothing else gets specified let's say that we would now rename this variable to course emitter so if we would do so then our example would no longer work because here in the template we are expecting an output event named course selector and there isn't here an emitter name like that so if we want to be fine here at the level of the output decorator a different name for the custom event other than the name that we have here for the event emitter we can use here this string parameter so if we now specify here a value then this is going to be the name of the custom event link to this emitter so if we now retry our application we are going to see that everything is still working as expected so if we head over here to the console and we hit here for example the second kind of the list we are going to see that our custom event is still being triggered and with this we have covered the angular component inputs and outputs you