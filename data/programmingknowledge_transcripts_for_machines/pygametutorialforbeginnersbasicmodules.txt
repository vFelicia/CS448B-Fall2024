hey everyone in today's video we will be discussing some basic terms and methods in pi game module also we'll see some related examples so let's get started first up we have initialization of the module so we write import pi game and then we initialize it by writing pygame dot init we can also initialize a module in pi game separately like here i've written pygame.display.init we have separately called upon display we have separately initialized display module uh but if we do this you would not be able to work with other submodules you have to initialize them separately then so that would be a little bit tedious rather uh we do this by game dot init this initializes all the subclasses and sub modules of pygame okay now to quit or uninitialize any module we use dot quit method we have already used it in a game loop once we are done with working with pi game we do this pie game dot quit and this is how it is uninitialized and we can move out of pyking okay then i hope you remember in the first video i told you that any pi game code would be divided into three parts and that is initializing setting up the screen and the game loop then so the second part we have that is setting up the screen so the setting above screen is done using the display module okay so please listen clear carefully display module creates a new surface object which helps us visualize whatever we have created a text a drawing or an image it can be anything okay and display method helps us visualize what we have created on the screen we set using the set mode okay so the 600 comma 600 is the size of the screen okay last time also we saw this and it is not just confined to setting up the screen giving sizes it has methods like get in it get in it gives us a boolean response returns a boolean response which tells us if the display module is initialized or not it has quit of course it has in it to initialize and it has get surface method which gives reference to the current window window okay so if you don't get this right now it's all right because uh we have not seen any example related once we see that you'd be a little bit clear with it we have flip and update there's a difference between flip and update although they are a little bit safe similar what does flip do it updates the entire video a window okay but update updates only portions of the window okay uh which are specified and whereas flip doesn't do it so you can say that a date is an optimized version of flip so we usually use update so that less memory is used okay then we have fill method which fills up the screen with some color okay so we are done with the second step let's move on to the third part that would be um rect like i would discuss uh direct module direct class in pygame is used to manipulate rectangular surfaces and store those objects we can make copies of those objects move them across the screen and do a lot of things to manipulate them edit them okay we always you use rect if you want to work with something that requires another surface or layer while writing a text while working with an image for example here we are working with an image okay i have loaded the image okay uh don't worry this is another subclass image is another subclass in pi game and i have loaded it okay uh simple and then what i have done is i have made another variable which is been declared a direct class object okay ball dot catrice this is how i have declared it as a red class object and what it does it is it loads this image on a rectangular surface okay so that we can view it on the screen fine so this is one functionality of correct uh red class okay we can even copy uh this object ball object or ball rect and use it otherwise we can move it we can move it in place we can change the size by using plate we can update its positions we can change its where it is located on the screen we can clip it we can crop it we can resize it and uh much more rect involves much more functionalities but these are some basic ones so uh which we would require right now okay so yeah let's move on to the very important part of pi game code that is the gaming loop okay and the gaming loop involves events every action in pi game is named through a queue okay a queue is a list which follows uh first in and first out principle uh i don't know if you know about queue or not it's a data structure and it follows first and then first out principle and it's it's just a simple list where insertion and deletion on are done from different ends okay so just treat it like a list and all the events are stored into a queue okay so every time we call if pygame.event uh an action or an event from the queue is popped out and been carried out okay it has been handled the instructions have been carried out so that we do not face any loss of event as the queue might get filled over over time okay and following this an event can also be an input from the keyboard so to do it deal with keyboard inputs we have a different subclass that is key okay so whenever we call this pygame dot key down and key up whenever a key is pressed these are automatically called up and this then helps by game dot event to carry out the definite or whatever event is said to be carried out for example i have written down a little bit of code for you which is talking about how key down and key up works so here um i have just written pygame dot key down because key down and key up are simultaneous processes as you press a key first key down is called and then you release it then key up is called okay so you don't need to write it uh like separately pi game dot key down or key up i have just written key down okay and uh if the event of even dot key okay is k a this is the way of uh telling that the key pressed is a okay and this is the way of telling the key press to zero you can have it for all the keys on the keyboard okay so or else if not something else is pressed you output a key which press so let's run this and let's see how it works run this and yeah uh so now i'd press a so a was pressed it outputs a was pressed i hope you can see it okay then when i when i press 0 it shows 0 is pressed if i press e a key was pressed because i did not mention anything for e okay so yeah let's stop this and let's go back to our initial page uh this is how we work with keys and keys have a lot of other methods uh like get focus is there if we to check if we are receiving keyboard inputs properly from the system we have get pressed like to get the state of all the keyboard buttons then we have name each of these keys have an identifier so we get that identifier from this we get the key code we can get the key code from the name this takes an argument and from the name we can get the identifier okay and so and so we have in other methods also we'd see them once we use them in further examples okay uh so coming back to the game code um that was we had initialized the ball uh image and then we have we are working with uh getting it on the rect class okay that we have got it on a red class object and i have mentioned the speed which is one comma one it works as an argument of rect class uh method move okay so what i've done is i've given it i've given speed as an argument so it shows that the xaxis with respect to the xaxis the object would be moving one um one units and with yaxis it would be also moving one okay so so rectangle would always have on on a plane it would always have four points left right top and bottom i hope you can imagine it and when the left point is less than zero the speed is the zeroth coordinate like this one is changed to minus one because we need to oppose the motion now okay or even when uh this happens when it's to the extreme right like it is more than the size of the screen similarly for top and bottom we are changing the yaxis okay motion of the yaxis and we will fill the screen with some color that is white right now and we'll do blit which is loading the ball object ball variable the image on the ball rect okay uh and then we are displaying it but and updating the complete thing okay complete screen let's see how this works we this is the random motion if we make 0 comma 1 so it should only move along the y axis let's see if it does so yeah it is moving along the y axis okay it's not traveling anymore and what if we make this happen it should just move along the yaxis but with more speed yeah it does okay so that's pretty much it so next up we have some more definitions uh or more subclasses the first one is font we'll be discussing these in very brief because we'd be working with them further and we'll be discussing them more deeply in the next upcoming videos we have font when we'd be working with text uh printing getting a text on the screen with work with font we can like see what the default font is what all fonts are there we can create a new object from a file we can change the edit the text the style of the text we can style it we can make it bold we can make it italic we can underline it we can see what the size it we can see the essence and the scent of the text and we can do a lot more then when we'd be working with images we'd be using this image class and image module and we can load and unload an image we can change its format we can save the image we can crop it then we have time we can keep a track of for how long the program has been running we can change the frame rates then we have music uh module to work with audios and we can rewind we can stop we can play the new uh audio and we have even the draw module to draw shapes like circles polygons we can even draw a line and curves and so this is pretty much about the very basic uh and startup things and the startup modules that are available in pi game there are many more pie game modules and we would be seeing them later on but let's get our hands on to these some of these modules and work with them in the upcoming videos and see the examples of them