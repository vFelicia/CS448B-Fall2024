in the last video we have discussed about the variables in kotlin so now we are going to move further and discuss the data types in kotlin okay so uh as i've already mentioned quarterly is a statically typed language that is the variable of the variable is already known during the compile time so there are a few type of variables in kotlin so i'll just start a function so when i uh so there are four mainly four types there are numbers there are characters there are booleans and there are arrays uh i'll cover them one by one so firstly i'll go to the number type so number in kotlin are similar to java and any other programming knowledge a programming language so there are six builtin types representing number so so the six are byte short and long float and double so out of them middling we were we will be using int and double most of the time so what is byte so i can create one byte for you so i'll create val range and i'll mention its type byte i'll mention it as 112. so the byte is is one byte is eight bits you might already know that so there are totally eight bit and eight sign bit to two's complement integer so byte data can have values from minus 128 to 127 so when i have a concise data and it has a concise value between 0 to 100 or such that then i use byte so what it does is instead of using an integer or a long end or a double so it it concise the code in very small space it requires a very less space so when i assign it a value of 200 so it gives it shows and red underline and when i hover over it it says that the integer lateral does not conform the expect to the expected type byte so what it says basically it is it is out of the range out of the bound so when i go and print the range so it will be printing 1 2 as we expect so yeah it prints 112 okay so we will move on and next is short under the number so short is a data type having a 16 so i'll mention here it is having eight eight bit eight bit one bit is eight one byte is eight bit so the short is having uh the the values can be assigned to a 16 bit 16 bit signed signed complement integer two's complement integer so the the data as short data type can have values from minus three to seven six eight two three two seven six seven we don't have to remember that or know that just for knowledge sake i am telling you this so the short has a capacity or we can say it uses 16 bit data okay so next we will move to enter so end is a 32bit signed two's complement integer and mainly we will be using in in uh most of our codes so in data type can have values from minus to the power 31 to 2 to the power 30 with one minus one okay so any uh value i assigned to a is by default stored as an int and i hover over a it shows that it is an int okay so it is also a default value so next is long so what happens when i have a integer of value more than 2 to the power 31 so we can store it in long so basically long has a 64 bit signed two's complement integer okay so when i have a long integer we will store it as long so the keyword used for it is i'll just mention one value say longint and i'll mention it as long and it can have any value okay so moving on we have double so double is a data type with double precision of 64bit floating point so whenever i define any decimal as a value suppose 1.23 so it automatically is defined as a double okay as we can see here so if i print decimal it will be printing one point two three now what is float we have seen about double so double has al also 64 bit so float data type is a single precision 32bit floating point okay so there was end that was getting by default assigned and there was byte and short that concise the storage so whenever we want to acquire it less storage we can use float so how to define float so we can define it as well decimal float in this way also okay but so we could have uh by the uh by the thing we are going uh the seeing like we define it in this way but it is not true so what i what if i have to define a float so what i do is i just uh define it as decimal and then put f so what it does is it convert it convert it to float so it is now a float so when i print decimal float so what it does is it will be printing 1.23 when only 1.123 and not the f so what it says is it is a float okay and nothing else so we have used 1.123 f instead of 1.123 in the above in the program it is because 1.123 is a double literal and you cannot assign double value inside a type of float okay so i can now i can here mention float so it will not giving any error okay so what if i am not sure about the the what if i am not sure about what number value a variable will assign in the program so i can what i can do is i can use a number data type so i will define where test and assign it number data type okay so i can put anything into like i can put a string into the okay sorry i can put a string into test i can put a integer into text oh sorry number so i can put an integer into test i can put a decimal into test i can put anything into test if i have design defined it data type as number so now we have completed our numbers data type now we will move on to characters to represent character and kotlin care data types are used so what i'll do is i'll just create a letter where letter and what i do is i define its value as scale so the character type is used so i can assign it any character so please note that the character will be in single quotation marks okay so i have defined a character now the next data type is booleans so what booleans are booleans are simply either true either false they have only two possible values so when i define a boolean variable boolean so i'll name it as flag and it has a data types boolean so i can either uh give flag value a true true e2 okay or a false okay so it has only two values so booleans are used generally used in decision making statement that we will be using in our later discussion okay then further we have arrays so we will be discussing areas in a separate topic but just to define it an array is a container that hold value offer of one single type for example you can create an array that can hold 100 values of n time okay then we have string so just for defining purpose i'll define a string like val name i have already defined it but okay so this is my name okay so please note that the string must be in double quotation mark okay thank you for watching this video we have now covered the data types in kotlin