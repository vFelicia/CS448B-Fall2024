hey guys welcome with the next video on open CV tutorial for beginners using Python in this video we will see some of the basic and automatic operations on images using open CV so let's get started so here I have this code some of this code you already know so you already know how to read the images using I am read method and then show it inside a window using I am show method and destroy all windows using this destroy all windows method but this code in between is little bit new so let me explain line by line what this code does so when you have this image using I am read method or any other method you can use these attributes like shape size and D type to get different values from this image so image dot shape is going to return a tuple which contains the number of rows columns and the number of channels in this image the image dot size will return the total number of pixel which are there inside the image and image dot D type is going to return the data type of the image which you have obtained now here if you want to split your image in three channels then you can use CB 2 dot split method and pass your image as an argument it's going to give you the BG our channel of your image now if you have a BG our channels and you want to merge those BG a channel into an image then you can use CB 2 dot merge method and pass these BG our channels in the form of tupple and it's going to give you the image which you can load using I am show method so let's run this code and let's see what we are getting using these attributes so you can see this messy 5 dot jpg image is loaded and here you can see first of all the shape of the image so the shape returns the number of rows number of columns and the number of channels so number of rows here is 342 columns are 548 and number of channels are 3 here the number of pixel which we have calculated using the size is this number which is 5 6 2 2 4 8 and the data type of an image is you into 8 so sometimes you need to debug the data type of your image and this attribute will be very useful in those cases and you need to debug if for something is correct or wrong and because we have splitted this method using the split and we merged these BGR channels using this merge method so we will at the end get the same image which we have at the beginning here in this code so there is no change in the code so once again let me just load this image and now let's talk about the ROI of an image so ROI stands for region of interest so sometimes you need to work with certain region of the image so let's say you only want to work with the face here or you only want to work with this ball ok so this is called the region of interest or in short form it's called ROI so let's say we want to just work with this ball here so this will be our region of interest or ROI and I want to just copy this ball to other place in this picture so I want to just copy this ball and place it on the other place let's say somewhere here ok so how we can do this so I already have the coordinates or the ball but you already know how to get the coordinates of some place in the image we have already discussed this in our previous video so I'm not going to show you how to obtain those coordinates but let's say I have those coordinates of the ball so I'm going to create a ball variable and we have our image so we will take our image and there are certain numpy indexing features which we can use here so I'm going to just write 280 colon 340 which is going to give you one point on the ball which is the upper lefthand side of this ball and then we will give 330 here 390 which is going to give us the bottom right hand corner of this ball okay so now we have this ball so this this indexing is going to copy this ball all the pixels of this ball and then now we have the ball so we can place this ball on any place on this messy image which we are reading so what we can do is we can once again use I am G and using those numpy indexing features we can place this ball at some other place so let me just give those indexes here so let me give 273 3 3 3 I have already tested this code so that's why I know exactly where I want to place this ball but if you are not sure where to place this ball then you might have to first calculate or know the coordinates where you want to place this ball and you already know how to find out the coordinates on an image and you will be able to place that ROI or interest of region some other place so what I'm doing here is I have just copied the ball and then I am placing the ball on this coordinate okay so I just need to just assign our ball on this coordinate and then this ball will be copied to this index on the image so let's see what happens when we run the code so now you can see we have to copy this ball and we have placed this ball here on the image so this is how you work with the ROI or region of interest okay so let me close this window now the next thing which I want to show here is how you can add two images so for that I need one more image so you can see in my project I have this messy five dot jpg and I have this other image which is OpenCV logo dot PNG file which is of the same size as the messy dot jpg image so I'm going to just write I am g2 and then once again CB dot I am read method and then I'm going to give the name of this file which is open CV logo dot PNG file okay so this is this file so this file we are reading and then there is a method called add okay so we are going to use this method here let's use this method CV to dot add and this method I'm going to show you what it does in a moment but this method takes two arguments first is the first numpy array so let me show you what this method do first of all so this is the add method inside your CV package you can also see the documentation on the open CV Najee and what it does is it calculates the pre elements sum of two arrays or an array and a scaler okay so here we can just pass our two arrays which we got from the I am read method and pass here as the first and the second argument so I am G and I am G two are the one and two parameter and there are some other parameters also like output array input array mask and int which is the data type which we which are set by default so we are not going to set them so we are just using CB to dot add method on these two images and then I just want to assign the new image which we have added to a new variable let's say this is DST for destination image and then we are going to just show this image using this I am show method okay so we have two images let me show you those images one by one first of all so this is the first image I have and the second image is open see we have logo which is like this one okay so those two images we have and when I run this code after adding those two images using add method you will see first of all you will see this error when why this error is coming because you will see here that the size of those two input is not matching okay so in order to add two images you need to have the images or the arrays of same size and then only you will be able to add those two images so let's resize those two images into a size which is common to both of them so you what we are going to do next is we are going to resize those images so once again I'm going to just you I am G variable so what I get after the resizing I will once again assign to this I am G variable and there is a method called C v2 dot resize and this helps us to resize the image so first of all we need to give the source which we want to resize and then we are going to give the size which we want to get so the number of columns and number of rows we can give here let's say we want to just resize this image to 5 1 to 2 comma 5 1 2 which is the number of rows and number of columns right same we will do with the next image so I am g2 and then once again see v2 dot resize and then the source here will be image 2 and the size which we want here is again 5 1 2 comma 5 1 2 in the form of couple so we have resized this image and this image which are of different sizes to the same size and now let's run the code once again and now you will see that these two images are merged now ok so you will be able to see the hand here and a little bit foot and here the ball of this image 1 which is messy 5 and then we have the second image which is OpenCV which is added to the first image so this is how you can add to image using OpenCV now there is one more method which is called add weighted okay so this add method is going to just add these two images but if you want to add the weight for example you want to give the weight 90 percent to the first image and 10 percent to the second image there is one more method so let's go to the documentation once again and there is this method called add weighted method okay so this add weighted method takes several arguments here you can see first is the source of the first array and second argument is the alpha value alpha is the weight which you want to give to the first image okay the third argument is the source so in our case this will be the image the first argument is the beta beta is the weight which you want to give to the second image right so this weight you can even can give from zero to one anything and this gamma is the scalar value which you want to provide and this the second last parameter is the destination and the last is the D type or the data type here okay so this is the formula which this method is going to use so source multiplied by alpha and source 2 multiplied by beta plus gamma so this is the method which will be used using these arguments or simply you will use this kind of methods source multiplied by alpha plus source 2 multiplied by beta plus gamma which is the scalar you can add to the image okay so let's use this method so I'm going to just copy this method and then comment this and go to the next line and instead of using add I'm going to use the ad weighted method okay so the first argument is the source which is the first source which is IMG in our case second argument is the weight so first this is the messy image right so we want to just give the weight here 90 or you can just give point 9 here and for the second image we want to give the weight 0.1 okay so the sum of this weight and this weight will be 1 and also we are going to give the gamma value here as 0 so we don't want to add any scalar value to this ad weighted method so the next value here will be 0 which is the value of gamma and let's run this code and you can see now now we have our messy image which is dominant here because it has the weight Oh point nine which is 90% of the two and the opencv image have the weight 0.1 which is 10% of the two okay so the opencv image is light and the messy image is a little bit you know dominant here you can just give point five and point five so the weight of the two images will be the same and now you will see those two images in the same domination okay so 50/50 percent now let's say we want to increase this value of OpenCV to 0.8 and the messy image weight will be 0.2 then the dominant image here will be OpenCV and in the background kind of thing you will see this messy image so this is how you can add two images with their weight and the skaila and that's it for this video so in this video you have seen some of the basic operations on the images and some of the are automatic operations on the images which you can do using OpenCV so I hope you've enjoyed this video and I will see you in the next video you