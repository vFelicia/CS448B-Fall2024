this is john from programming knowledge and in this video guys we're going to talk about loops in c programming so sometimes it is necessary for the program to execute the statement several times and c loops execute a block of commands in a specified number of times until a condition is met so in this video tutorial you will learn um about all the the looping statements of c programming and along with their use so as you can see computer is the most um suitable machine to perform repetitive tests and it can tirelessly do a task tens of thousands of times okay and basically like every programming language has this particular feature to instruct to do such repetitive tests with the help of certain form of statements so that's why we have this loops and then of course guys in c uh the c programming language supports like three types of loops so we're going to discuss first uh while loops okay so we have while loops we have do while and of course we also have the for loops okay so we're going to dissect each type of loop so that we could you know better understand how it works and how we can use these loops in in a certain situation so basically guys when we say loop i'm just going to show you a simple flowchart so we have here a simple flowchart that describes the nature of loop or loops in general so we have like start and then we can declare a counter or a variable counter and then our program will try to evaluate the condition and then if the condition is you know returns true it could execute statements and then increment the counter and then again evaluate the condition if the like for example the increment counter is equal or you know greater than something and then execute statements uh increment counter and then uh evaluate condition and lastly uh if the condition is met then it will stop the execution of that particular loop so basically guys a loop is just you know doing or executing repetitive statements inside our c program so there are like uh control statements we have uh statements that we can use so we have a break we can have like um continue and then of course we have the go to statement that we have discussed previously in our video tutorial series okay so as i've as i've said we will discuss first the while loops in c programming okay so see while loops statement allows to repeatedly run the same block of code until the condition is met and of course while loop is the most basic loop in c programming and while a while loop has one condition and it contains uh or it executes as long as the condition is true and then the condition of the loop is tested before the body of the loop is executed so uh the syntax for our while loop is like this so we have the keyword while and then a condition so like it test expression and then if this condition is like true then it will try to execute the statements ins inside this particular while loop okay now we have like we can have a very simple application for this so for example we will try to implement this okay so we can declare like a variable so in n equals 1 and then times plus five and then of course we can declare the while loop for our program like this and then open and close parenthesis and then we can say n is less than or equal to times okay so we have to add the curly braces for that and then inside this curly braces these are the statements that will be executed if this particular condition is true okay so it will try to print like c while loops and then we can add the percent or yeah percent d which is the format specifier for our in variable and then we can display the n okay and then of course we can we can increment the var uh the value of n by using the increment that we have discussed before which is n plus plus so basically this is just you know basically saying n equals n plus one okay uh i think uh we have already discussed that the n plus plus increment in our video uh previous videos okay now we have set the value n equals to one okay and then we have set the number of times the loop should be executed so that's basically five uh there should be five execution and then we added the while statement and then check the condition if n is less than or equal to times then execute this statements right here so we can try to check this build and run our application and try to see the output of our program and i'm going to you know slowly explain to you what happens in this particular program so you can see the output right here cuy loops one see why loops two and then three four and five and after uh five it no longer executed because it you know ended the loop okay so i'm going to explain to you how we got this output so first thing as i've said we declare n equals to 1 so in this condition 1 is less than or equal to five which is the value of times so basically and of course it is true that one is less than or equal to five so that's why it executed this particular statement c while loops and then it displays the value one right here okay and then it incremented the value n so now the end becomes two okay and then it will go here in our condition once again so 2 is less than or equal to 5. so that's true because obviously 2 is less than or equal to 5. so that's uh it executes this statement right here cuy loops and then the value of our n which is two again it incremented the n variable so the n now becomes three so after that one we will go back here in the condition is three equals or i mean less than or equal to five so that's true because three is equal to or i mean less than two five so that's why it uh printed the uh output right here c while loops and then the value of our n equals to 3 and now after that it incremented another time the n and the end becomes 4 now and it go back to the condition s4 less than 5. so basically 4 is less than 5 obviously so that's why it printed out the c while loops and then 4 the value of our n and again incremented added one to the end variable and then the n now becomes five and then go back here in the condition is five less than or equal to five so it uh it returned uh true again because five is equal to five so it printed out c while loops and then the value of of our n which is five now it incremented another time the n variable and now the the end variable becomes six and it will go directly here in our condition is six less than or equal to five so it returns false because six is not less than or not even equal to five that's why it uh ended the loop and it never executed the uh this particular statements right here once again because six is not less than or equal to five which is the value of our times variable we're going to discuss another type of loop which is the do while so from the previous tutorial we already have discussed the while loop okay and then we implemented a simple iteration program where we can see the value of the variable each of the iteration of our while loop now the difference between while loop and do while is that the while loop will try to evaluate first the condition and then if this condition is you know return true then it will execute the statement inside this particular while loop whereas when we are trying to use the do while loop then the statements inside the loop will you know execute at least once before the condition is being evaluated so the syntax for that is like this we will just remove this for now all these lines of the while loop from the previous tutorial okay so this is the format or basic format of the do while statement or do while loop in c so basically we have the do keyword and then open and close curly braces and then the statements or group of statements okay now after the curly braces then it will have this the while keyword and then open and close parenthesis with the condition inside it so as i've said earlier guys that this particular loop will try to execute at least once before the condition is being evaluated okay so as you can see if you wanna like execute first some statements before you could evaluate the condition so so the dual loop is the way to go so we will try to create another program guys showcasing how this particular do while statement or dual loop looks like or how it works so basically guys we could um initialize some variables here so for example the n so int n equals one and then we could also uh declare another variable which is times so basically what we are doing here or what we are declaring here is two variables for our um do while and the n represents the number i mean the value of the iteration or the value of the variable each iteration and then of course the times is the number of times the loop should execute okay now inside our do while or do statement we could add a printf statement here and then you could say c do while loops and then the format specifier percent d backslash n and of course uh the n variable okay so we have this printf statement so basically what what we're trying here is we're trying to display the value of n every um you know execution of this particular statements okay and in here below this printf statement we could increment the n by you know using this statement and equals n plus one or you can simply use the n plus plus version of this particular statement so n equals n plus one so again every iteration we would try to increment the value of our n plus one and then inside here the while and then open close parenthesis we could add the condition so for our condition you could add the n and then less than or equal to the number of times we want this while loop or do while to be you know executed okay so i think that's all for this um do while statement so we could try to run our program and then build and run and see how this particular program works okay so basically guys i will try to explain it to you how this or how we get this output so from the initial value of rn we have executed the do statement right here so we printed out like the value is c do y loops then percent t and then the value of our n is one okay so after this iteration we um increment the value of our n by one so that's n equals n plus two okay or i mean one n plus one and then the semicolon and then of course we will try to evaluate this in our condition so two is less than or equal to times which is five so of course 2 is less than 5 so that makes sense and then it will try to execute the statements inside the this curly braces okay then printf c do while loops and then of course it will try to to output the value two okay after this the n will be incremented again by one so n equals n plus one so the value now or the n value now becomes um three and then evaluate it in our uh open and close parenthesis so three less than or equal to five so obviously three is less than five so it will try to implement or execute again the statement inside our current basis and then display three this will be the line uh three and then of course it will increment again the value n and it the end becomes four now and then uh evaluated once again is four less than or equal to five so um basically four is uh you know less than five so it will execute the statement printf again display the value 4 and then increment again the n it becomes 5 and then after that it will try to evaluate the statement is less or n is less than equal to five so we have set now the value to five so five is equal to five so it will try to execute the statement once again and if the five value now becomes or the end value now becomes six because we try to increment it here so six will be evaluated inside our while statement then six is less than or equal to five so that's basically not true because of course obviously six cannot be less than or cannot even be equal to 5 so that's why it will try to end the loop because the condition returns false already okay so that's how the do well statement works and guys make sure that um there's like infinite um end of your loop because there are cases that you know the condition will not be evaluated into false at some point in our program so that will make it like the infinite loop so the concept of infinite infinite load so be careful to place a condition here that will try to or like will be evaluated false at some point in our program because you don't want to have the infinite loop because the program will run infinitely and you don't want that it would you know consume the memory of your computer so that's why you you need to be careful with the infinite loop so make sure again to add a condition that will be evaluated as false at some point in your program yes we're going to discuss another type of loop which is a for loop so from the previous tutorials we have like um discuss already what is white loop what is do while and how it can be used in rc programming or c programs so as i've said guys in this video we're going to discuss for loops and of course we're going to describe the syntax of for loops okay so the syntax for for loops guys is like this i'm going to copy and paste this here so we have here the four keyword and then we have the open and close parenthesis in which we have we can you know there uh there are like three um statements that are available for us so the first one is the init or initialize and then the second um statement is the condition and the third one is increment or it could be also decrement okay so this three statements inside this open and closed parenthesis is separated by semicolon okay and of course guys each of this statement plays you know a big role in our for loop okay now we can try to implement our very simple for loop so for example let's um declare a variable for our for loop um inside the initialize statement we could you know um initialize a a variable right here like for example in x equals zero so we could do that here we could initialize our variable into something like zero or it could be one if you want to start um one so basically guys it is the same as declaring the variable here so index so you could also do that here um initialize the value to x so this 2 is just the same so basically we're just declaring the variable and setting the initial value say for example 0 or 1. now the second statement for this particular for loop we could you know add the condition so the condition is something like this we could check if the x variable is less than or equal to 5 just like what we have from the while loop and do y loop so we're checking if the value of the variable is less than or equal to five and of course the last part or the last statement for this particular open and closed part is this for loop you could you know add the increment or it could be the decrement depending on the initialize the condition of course in your for loop so for example you want for now is to increment so you could actually do this like this x equals x plus one inside the for loop and then of course guys the statements inside the curly braces so the statements you know you could execute statements right here so for example printf the value of x colon and then the format specifier percent d backslash n to uh have a new line then specify our variable x and then end this off with each semicolon just like this so guys basically what we're trying is to display the value of the variable x each iteration of this particular loop so we could you know build and run this application and see how it works now we have this output the value is one the value is two the value is three the value is four and five so guys i'm going to explain to you how we come up with this output so at first guys you know we declare the variable x and initialize the value into 1 so now the value for our x is one okay so value of rx is what um one okay and then let me write first is equal or x is equal or less than or equal to five and then uh increment okay so so for example at the first iteration of this for loop we have initialized the value into one or yeah the value of x into one and then we try to evaluate the statement is x is less than or equal to five so of course x is less than uh five since the value of x equals to 5 so this returns true then it will execute the statement the value the value of x which should be x right there is one okay and after this after execution of this particular statement it will increment the value of our x so at the second iteration it will be two okay so of course two is less than five so that's basically the um condition will return true and then of course it will display the value of x is two and then another iteration three so three is less than or equal to five right and obviously the three is less than two five so basically uh it will return true and then display this statement and until the x will become 6. six and then it will evaluate is six less than or equal to five so basically this is false and then it will terminate the loop or it will end the loop itself so that's how we got this um output the value is one two three four and five so this particular output guys is incremented so the value of our x is increment like one two three four and five but anyway guys we could you know make it like five four three two one and we will initialize our variable x differently so for example let's try to revise our for loop and we will start from 5 okay so the initial value of our x is equal to five and of course we will check if so for example is x is greater than or equal to one so now we're doing the reverse of the increment and of course guys you can you know add the increment statement just like this x equals to x minus one and of course you can use the post increment that we have discussed from earlier videos in this particular uh series so you could do it like this x minus minus and then we could you know display the value of our x okay so let's try this once again and build and run our application and of course we're going to get the reverse output okay so we have here the initial value five and then four and then three and then two and then one okay so guys of course you can always try to you know add another for loop inside this loop so as what we have from the previous tutorial so you have like the nested if and else statement and of course guys you could also uh you could also have nested for loops or nested while loops in your program so for example like this you could you know um add another for loop here so for example in y um is we will set the initial value to one okay initial value into one and then we could um try to evaluate the statement say for example is y um less than or equal to x something like this and then we could add the increment y plus plus okay and then open and open and close curly braces and then of course we could display the value of our x and y so the value of x for example percent d and value of y is something like this the value of x is percent d and then the value of y is percent b again okay and then we could also specify the value of our y okay so we could you know build and run our application and of course we will get this particular output so the value of x from uh initial value of our x is five right so it will try to run five times and then it will try to display one two and uh one two three four and five for our value of our y okay and then of course we have the um four and then we also have three and then we also have one and uh two and one so you could do that guys as i've said you can do um nested for loops or nested loops in your c program so you could increment you could use decrement inside your loops okay so and guys if you want to practice more about using loops you could you know try to print different patterns for example you want to print a rectangle or um triangle you could uh display uh inverted triangle by using the um asterisk symbol so you could do that by using your loops okay so i think that's all there is to it guys for this tutorial and i hope you learned something and if you have questions as always you can ask questions in the comment box below so thank you for watching guys and see you in the next video