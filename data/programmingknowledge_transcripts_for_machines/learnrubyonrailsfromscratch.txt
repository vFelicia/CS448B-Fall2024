we are going to start with a new tutorial on ruby so basically ruby is a programming language so like ruby has been used a lot in the programming world and it is one of the most important languages so we are going to start with like some basics of ruby and then we are going to move on uh like a framework on ruby that is rails so basically that is properly known as ruby on rails so initially we will start with the installation part and then we are going to proceed and enhance ourselves to the ruby on sales framework so basically the to be honest like ruby is a programming programming language and ruby on sales is a framework based on ruby language which is used on web development like basically to use as a backend framework so you can create your own packet framework and then you can extend it to like front end as well using erbs so today first you'll start we're going to start with the basics of ruby and then we are going to continue with it so to install ruby on your machine you can move to this website this website is known as ruby installer for windows so basically you can download click on the download button here and then you will have all the versions so so make sure you install one with the dev kit so it will uh help you so you can install ruby with the dev kit and you can click on like this is like uh you can click on any and depending on your requirement like the 32bit and 64bit you can install it so uh like i had downloaded the one which is at the top so you can also download and when you download you will get an installer which will uh like take some time to install and then uh like it's a very like that's very easy process to install it will keep on installing and when you will install this installer then you can move ahead with the stock so this is another like uh website you can refer this so this is like a ruby dot org so you can also refer to this website okay then you can like these are the two documentations you can refer and this is how we like uh yeah so let's uh move on to the tutorial so after like moving to the installation and documentation you can start running some blue programs on your machine so we will initially start with them so i'll show you how you can create one and run one so let's move to the programming part so this is my vs code editor so like i have created a folder with the name ruby so ruby basically what you can do first you have a command line here so what you can do so you can create a file new file and you can type hello dot rb so basically ruby files are run with this uh extension and then you can uh uh yeah so basically now i'm inside this folder which has a header.rb file to make sure you have installed ruby on your machine you can type ruby minus v okay so ruby minus v would give me the like the version which i have installed and it's perfectly fine okay now now first we are going to create a hello world ruby program okay so what we're going to do we are going to like first clear this so now we are going to do put s hello world okay so this would like put as hello world would create the ruby program now to run the ruby program what you need to do ruby hello dot rb so this would like to run the program on your machine so this gives the output hello world so we will start with some few basics like one is like creating the variables so this is like a is equal to one okay uh b is equal to two and we are going to do uh what uh okay i'll show you one thing and we are going to put this in a variable a a plus b c c is equal to a plus b and we are going to put sc so uh first i'll run this and i'll show you how this works so it works perfectly fine uh but if you want to do some like string formatting so what you can do you can put like this and you can do the sum of a okay the sum of a plus b is equal to c okay okay first i'll run this program and i'll show you what i'll do i'll run this again i'll clear this and i'll run this so here you see the sum of a plus b is equal to c this doesn't satisfy our condition so again it will apply string formatting for what for that what you can do you can put a hash symbol and put them inside a curly braces so this would get the value of that particular variable okay now it will format inside the string and now you can run this now the sum of 1 plus 2 is equal to 3 so this is how we achieve it so it was a good example there's another statement in ruby i'll show you which says print print hello world okay uh and i'll clear this again and i'll run this program yeah so it says hello world okay different between what is the difference between the print and for testing okay i'll do another statement first okay okay uh first i'll do put s first line put s uh i'll do second line okay uh now i'll make sure that i clear this uh screen yeah now i'll do first line second line so this is the output perfectly fine okay uh now i'll do another one sorry now i'll do print first line and i'll do another one print second line so the print second line would like what i'll do i'll clear this and i'll run so it's it here you can see it doesn't give a line break okay to achieve that you can put a slash in here okay now i'll run this now we can see we got the same statement as like put a statement so basically i just wanted to tell you that put statements always gives a line break so whatever you type it would automatically give give the slash n or a line break to the next line but print statement doesn't give that so this is the only difference between the test statement and printer segment okay so we can do one some uh like more things uh in ruby like the first uh like the before we move to some conditions like first we make a let's make a simple function so let's make a function define add okay and it will take two variables a comma b okay now since this is ruby uh you don't need like uh you might be thinking that this looks like python in a python we have a column symbol here okay uh but here it is not needed okay so like you can remove this so it'll say to throw and we need to end the function with this okay so the body of function will lie in between okay so it says either you can do return a plus b like simple or you can do protest a plus b so let's do this like for the simplicity let's uh what we can do uh we can store this in a variable c a plus b and now what we can do we can put s c okay uh then we can like call the function add with two comma three 2 comma 7 and it should work fine so here we got the 519 uh we could also do that like uh so this is we could also return the statement a a plus b and we could get the return value here like result result is equal to add a comma b result and what we can do we can do put s result here and call the same statement here so it should work fine also and this is how the return statement also works in ruby so this is good so we like learned how to create functions like in ruby and like we made a good progress so far uh we can also create a swap function in ruby is in one line like i'll show you a is equal to 5 b is equal to 10 okay now i'll do put s a comma b will this work okay we'll check this so it works perfectly fine put s a comma b okay uh i'll use print okay this would give you better clarity now here you can see print s yeah like print a comma b so okay i'll give space okay so this is fine so right now we have two variables a comma b with the value 5 and 10 now what we're going to do we are going to repeat this statement but before repeat we are going to do a comma b is equal to b comma a okay so this is like we are going to clear this and run it again so okay yeah so i need to give a slash in statement here so here you can see 5 comma 10 has been placed to 10 comma 5 so basically in ruby this is also a valid statement x comma y comma z is equal to 1 comma 2 comma 3 okay and when i do print print x okay print y uh okay i'll do this okay now i can remove this code since this is needed print x okay print y and print set so this is a valid statement in ruby now i'll run this so here you can see this is also valid so this is good so we can assign values using comma using comma and separating them we are going to start some with some conditions and operators so let's start with a tutorial so basically we are going to create two variables a is equal to 100 b is equal to 50 and now we are going to define put s a plus b okay the we are going to i'm going to repeat these four statements so this is put as a plus b this is put a minus b this is put as a by b and this is put as a multiplied by b and the last one is going to put as a modulo b so let's run this file ruby conditions and operators or rb so we get all the result the addition takes it to 150 minus takes a 50 a by b 2 and this is 5 000 and this is model this is zero so this is fine okay and now let's start with some conditions some basic condition so so let's take with uh so let's create a variable and try to give this a value true and false and let's put sc okay so let's remove this yeah so this is false okay uh let's change this to or operator and let's run this file again okay here now this is true so you must be clear with all the conditions like how this kind of player 2 works in our operator was so this is fine go now and now what we can do we can like this is perfectly these are some basic conditions now let's create some if conditions so for if conditions let's create a a grade we'll give this a value if grade greater than equal to 90 then put s a plus else uh this sn so else if so please make a note of this e l s i f else if grade is less than equal to 89 okay now then i will do this then is greater than equal to 80 and okay and grade less than equal to 89 so this this it lies in this range so we do put s b or we can assign it a else else put s b plus l uh and then we need to end this if condition so i'll just make a like these are three conditions if else else so we will give values to it and see how this condition was let's give the grade equal to 99 so okay a small stick okay yeah i like this blue coat looks very intuitive to python so you don't need a semicolon a colon here okay so let's run this and here we are aboard it a plus now let's give it a 85 let's give it a value 85 now let's run this now it is a and now let's give it a value 75 and it should move to the else part okay now let's run this and it is b plus so this is how we make conditions now let's move to the like while loop so for that we can define a variable a 0 so while i less than equal to 10 okay so simply put s i and make sure you increment the i else it is in an infinite loop okay and now let's run this okay yeah so you need to end this loop here okay so i was going with some speed so yeah so this is how a while loop works okay now uh you can also work with for loop so there are two ways to work on a for loop so before we work on for loop i would like to show you the case statement okay the case statement is very much similar okay so okay what i'll do first i'll move with the like for loop so because i did the while loop first so uh then i'll move to case statement in ruby okay so basically case statement in the ruby are similar to switch statements okay so let's move to okay before we move i'll do word and print this i'll show you one a range operator range operators is denoted by double dots and there's a small difference with one dot two dot three dots like there's a difference between i'll show you what how see when i do put s put s range of 1 200 okay okay so i'll show you okay now i'll show you so yeah so i just forgot to lick this is to underscore array so it says i'll convert this range 100 to an array and here you see i have two dots okay so in these two dots here you can see this one too i'll show you a small like i i'll show you a small one yeah i know it's fine i'll do this now here you can see the value is from one to ten increases of inclusive of 10 the 10 is here when i put an extra dot here so 10 will not be included see so here you can see the last value has been excluded so it is because of the like extra dot so this is how it works okay so like this is what you can use this to work in like a for loop so for i in 1 to 2 10 okay and you can do put s i okay so let's clear this okay you need to end this for loop like i uh what to do that and this is how a for loop works with the full range okay now let's move to case statement in ruby so so what you can do the very first example the one with for which we made the great we'll do this with the grid okay so we'll take a variable grade and this time we are going to define case grade and uh i'll first try i'll automatically end this before i forget this so case grade now what i'm going to do uh when one so k is great and when when this crate is less than is greater than equal to 90 then i put s a play a plus okay when this grade how great is greater than equal to 80 and grade less than equal to 89 put s a when grade uh when grade uh then you can have a default statement but i'll show you one when grade is greater than equal to 70 and and grade less than equal to 79 then you can do put s put as b else uh something like else put s improve something like this uh now i'll put some great value 95 and i'll try to run this and so okay i made a mistake then i'm putting a colon here sorry so this is okay when like this didn't hit like something is missing it's good one good okay let me check what's the issue with this hey hey everyone uh welcome back uh that time i made a mistake the mistake was like uh like uh like the mistaken distance i opted to use case grade here so i used to just define the variable so uh earlier i was also like instead of this i was also comparing the value grade greater than equal to 90. this was not needed because i had already used case grade so this is not needed to repeat the same here okay so let's uh like let's uh so let's remove this now the perfect like syntax for great statement is this now let's run this now for 95 it rewards a plus let's do this to 85 for 85 it will reward a and for 75 it will reward b and for like let's take another value 55 it should prove to move to improve statement that is else so today we are going to start a new tutorial on some basic data structures in ruby so the most basic data structure and the like one of the most important although is rs so today we are going to continue with array in this tutorial and let's see how we like initialize some array in ruby so very basic method is to do nums is equal to one two three and now you can do and and you can i'll also initialize another array names is equal to joe john and checked so this is the one one is a area of nums and this is our of strings so these are like two data types you can initialize one is of integer type and one of string type and now we what we are going to do we are going to like see how we can for print this array the one way to print this do put test nums now let's run this file now here you can see i have printed the array another way is to like s names so this would like run the array like sorry print the array so this is one way of printing another way is you what you can do is you can treat this as a variable i have already told you like how we like like read the variables and print this and this is like this is also going to work and this is going to collect sorry this is going to print in horizontal direction so here you can see like this so same you can do with the names also okay and uh it looks good to go yeah so here you can do also the same thing now one way to also initialize the array is like you can use array dot new and this uh the like this is like eric class which calls constructor and this is added dot new and this is joe john and jack so let's run this again and let's see it works perfectly fine and let's run this for nums also and let's see yeah so so here it also works perfectly fine so this is one way of printing the array in ruby so another way what we can opt for is like i told this new operator now what you can do you can also use the range operator as well and uh uh some i'll show you one thing and we can comment this out now since this is not needed and i've all put this cover in comment so it's just for your reference so you can also i'll do this put test names let's put test nums so these two things are also not needed i can comment this yeah so now we can use another array let's take a variable m and let's give array dot new and i'm sending five times i want this word hello so when i do put s so hash m so it would give me a hello five times inside the area so this is a trick now one thing you need to observe now i'll remove i'll remove uh like the same can also be initialized with an integer variable so like i'll do this so now it says five times i get the zero if you want to initialize some empty array with some particular value you can do this okay so i'll comment this out also sorry yeah so yeah so this looks perfect perfectly fine now what we can do is uh we can also use another range operator and for that what we are going to do array this time we don't use the new operator we are not using this okay we will not use this and we give 20.30 if you don't want to include factory put an extra dot i already pre put in this my previous tutorial that this would include the last element last range and this would not include the last range okay now put s hash m and let's go with this and now here you can see i've got the array so make sure you don't put the new operator this time now some basic operations you can do with the arrays is like some basic operations you can do uh so like one is now let's create uh like some uh like dummy array a is equal to a what new and i'll say one one two three let me try out some with random limit 10 20 30 40 50 okay now uh you can uh i'll show you one thing also you can also what i'm trying to emulate here you can also run this on ah like irb command so that is rails interactive console so you can run this irb and then you can have an interactive rails console and you can run this or there also okay so let's um uh let some like let's move to the next thing then you can type exit and you can come out of this interact console so i'll show you also how to work with interactive rails console and now what you can do you can do first the very basic command you can do put test a dot length okay so let's run this and when i run a dot n so it gives 5 the same thing can be a dot size also so when i run a dot size so it gives 5's as well okay another thing we can run is uh like another thing we can run is a dot first and a dot last so a dot first would return me the first element now let's run this a dot first because this gives 10 now a dot last would give me the last element so that is 50. so it would first return me 10 a to last 50 and the size and length works is perfectly fine okay so we can run these commands to like have a better overview another thing we can have is push and pop okay so i'll show you push and pau so hey everyone like this was like four operators we had seen like one was the first last uh and size and length so you can use all of them first okay you can also lose last and size and length okay so these are the four operators we can use uh one thing you could also use you can use 8.2 underscore string so this would convert this to a string okay so i'll show you how this runs so here you can see so here we have got the string output of this uh it already looks like ruby rail ruby also does this behind the scenes like when we are using put s so it already does this behind the scene so we don't like i get intuition like this is happening okay so this is one thing you can also do so two operators like we can do use we can push 60 now we can print this and we get 60 okay now okay okay i did like okay i did one now we can do this sorry i had like then this like but it works perfectly fine not an issue but yeah this is the correct way to do it now i can do a dot pop also so the pop would remove the element i'll show you so basically pop removes the element from the last okay it uses like append so it works it has a similar behavior to the stack data structure so like it now basically it like pushes the element from the back and pops the element from the back so it behaves like a stacked data structure okay now we can move to like one last thing is uh there are various method in ruby like each with index and with index so the important one is the very important one is each with index because this works as a folly for each loop h with index i get two things in this one is the value and another in the index okay so i am going to type this put as a statement right the value add index okay now i'm going to put iadx is hash val okay so this is is going to print like five times or like so and this is like this is the one of the most so the value at index 0 is 10 valued index 1 is 20 value index 2 is 30 and value of index 3 is 40 and the value at index 5 is 50. uh we could also like uh we could also move with some another methods so there are various methods and array you can like have a view so we can also like uh delete underscope add at zero so this would this should probably okay i forgot to print this sorry put s hash a okay now let's run this so basically delete at the index 0 okay now if you want to delete the particular element so you need to define 20 so this would delete the one at 20. so see perfect today we are going to start with some uh continue with some more basic data structures input data structures in ruby so let's start with so let's create a string a and type it as hello world now simply we can print the string onto the console by using put s a so you can first you can type ruby ds dot rb and this would run the program and it says hello world perfectly fine you could also initialize the string using the string inbuilt class string dot new hello world okay now instead of a i'm printing i am printing b and now i clear this and i'll say put sb and it says hello dot hello world and i like it's the same output as the previous one so hello world hello world are perfectly fine now i can type put s a is equal to b if they both are equal so it should return true so it returns true so it returned perfectly fine so it looks perfectly fine true is the correct answer for this now you could also type put as a dot length so let's see the output of this so it turns out to be 11 good yeah now you could also do a dot size you can and the both of them return 11. so the both of them work with the same thing so now you can you can also type a dot uh one thing i i'll show you there is a method and now uh just for a second you can comment both of them okay i'll comment out and i'll make an array c and this is an array one two three and i'll put a c dot include include uh what does it include what i want to check does it include two okay so i'll it returns true okay so yes it includes true the same way you can do it for strings also so you can do this both same way you can do it for strings also so i'll do a dot include this character so it should return true the same it turns for this a also so the include method is used for both strings and arrays now uh since i don't need this okay so i'll remove this yeah so now what i can do you want to increase the access the first character you can please say a of 0 so this would give you the particular index so i'm showing you this gives me first character now to access the last character you can do either a dot length minus 1 so this would also work perfectly fine okay it does stay it gives you the last character but you could also use negative slicing and string uh string like in ruby there is a negative slicing which returns you from the end okay minus 1 is the last one minus 2 minus three minus four you keep on going like this okay so i'll show you oh it also gives the last character so this is the two ways you can manipulate strings in ruby uh now one we are left with some another command such as some basic this a dot up case okay and a dot uh put s a dot down case first i'll do one by one now a dot up case returns upper string and a dot down case returns the lower case so by default it was lower okay now i'll do a dot down a dot up case and i'll do put s a so here you might see sorry so now here you see that i did a dot up case but then put s a didn't turned out to be the one in the upper uh uh upper capital letters so for that you need to you put an explanation mark which is all uh now this would what it will do this it will now do the inbuilt operation within that string so see the output of this now it converts the default a to up case as well okay so so this is good so now we can move to hash maps so hash maps is like grades is equal to new okay now you can do grades of n is equal to a plus and grades of nine is equal to a and grades of eight is equal to b now let's put s grades so here is the hash map for the 10 is a plus nine is a and a it is b now let's put as grades of n okay uh this should give us a plus perfectly fine so this is how can you use it but what if i do grades of 7 so grades of 7 is not defined and when i run this it gives me nothing so to avoid that you can use dates or default if it is not default i'll do improve okay now this would turn out to be improved now i'll run this again and it says improve okay so this is how i can set the default value okay now i can uh use uh this is good now i comment this out a is new and b is equal to hash dot mu now a of 0 is equal to 1 just assigning some random values or let this be a b of 0 is also a okay yeah now i'll do put s i'll do put s a and put s p so initialize constant b uh like line number 15 okay let me check what's the issue so uh like there was some like it was like i might have not saved the file uh like uh a is regular hash dot new b is called dot new a of zero zero when i put s a and b okay so basically when i put s a n input is b so both of the same are equal both of the hash maps are equal so i can also compare them using an equal to operator so this gives out me the output true okay now now we could also like now it's perfectly fine uh now let's move to this this iphone as well now i can do put s great start length so this would give me the same like okay i had to uncomment this sorry yeah so now i'll put great short length h3 and i'll do great sort size it would also return me three now i can do put s grades dot 2 underscope a and and it should may return like this as a string oh sorry it converges to an array so this is also fine so this is how you can do it and one thing because i converted this uh this to an array okay so i told you uh you could also if you want to see in other way around you could do this you can store this inside a variable x and you can print x okay so this is how we can do it okay so this is how you convert into an array and one uh one small exercise we can have right now uh you could also do this as well put a s grade dot hash underscore value so this worked as like i told you the one like we had in uh like string that is include so it does it has a value 10 as a key okay so okay let's uh uh okay so this is returning false uh like this is our value sorry so this is how you can do it so 10 is not a value it is a key so for that you can run this true okay so this is how you can do it for key and value so by mistake i had like so like dated for uh has key and it has value so you can understand okay and value so let's move to a very small size since we covered strings and hash map in this string is equal to hello world so let's create a program to crown the frequency so first creates a frequency as a hash map frequency is equal to hash frequency is equal to hash dot new so this would maintain the frequency by initially the frequency should be frequency dot default is equal to zero now we do a s dot eat underscore care we'll make it do and i have the value okay okay i have the value then frequency dot val plus equal to equal to 1 and i can end this loop and simply put as frequency now let me clear this loop and run this so here i have got all the frequency of the particular graph so thank you everyone for watching this so it was a simple exercise make sure you uh do this else it will throw error this will throw error because you need to initialize frequency of default to zero else it will through error of course uh either you can also put a tricar statement if statement it inside this but this is a better way of doing so today we are going to work on like date time in ruby so and i'm going to take you forward with some like little bit good concepts in daytime because you might be working like get to work in back end on the rails part so you might like query on some date time part in your like um database and your like logic so it would help you how you can manipulate because when you keep the like a record of things so you usually manage with date and time so i'll tell you how you can achieve the same using like n ruby so let's start with our tutorial so the basic thing you need to first type you need to type require required is like is it is like uh you will get to like learn new things in this so require is used to like get this is required so it is like an import statement required date so required date would help you to like manipulate the date date records in ruby so now you can create a variable my date okay uh so you can get create variable my date bar so basically this should stay store a date and you need to store date dot ours and now you can put like in a string you can put 10 december uh 2021 so this is a very futuristic date and now what you're going to do you can like carry out few operations on this such as put as my date back so then put s so okay first we will do this so let's run this and we can type clear oh sorry click clear statement and now this would clear our console now ruby datetime.rb so when you print this so you get an output 20 21 12 so basically so this is how it depends this gives the year format this is the month and this is the day so 2021 uh 20211210 so this is a good output and what you can do now you can do different things like it s my date where dot here okay so basically now we can comment this so this would usually print out the year okay and in the same way you can approach for okay so i'll show you one by one so basically this would help you to have a clear approach so i do clear and ruby datetime.rb yes so 2021 is like is this the like output of this so next you can do put as my date where dot month so basically this would either give you the month now uh this is 12 okay and now what you can do you can simply comment this out or you can do put as my date where dot month day so month day is given by m day okay and now you can run this so i'm going little slow because this should help you because this is the 10th day of the month okay now you can do port s my date where dot weekly so this would tell you that which day of the week it is so basically now you can following make the operations like weekdays five if it was six or seven then you can refer that this was the weekend okay so this is how it goes good so now you can do clear and now you can type so which day of the year it is it is put as my date where dot y day so this will basically give you the year day so which day of the year it is okay so let's run this and it is a 344 day of the year okay so good to do good to go now what you can do you can shift this date my date were plus equal to five which is equivalent to like uh basically this is equal to my eight bar is equal to my date wire plus five okay so you can use either of this i'll use this notation the second one to have clarity now what you can do you can do put s my date where my date where dot you can string format time so this is strf time okay so basically your form for formatting and now i'll type you to do percent a person d person b and percent y okay so so this is capital yeah so let's run this so now it basically you can see by the notations it says though day is wednesday the day numeric in the week terms of week is wednesday day in terms of month is 15 december 21 so this is like a very uh used notation to keep the track of the like date okay so let's comment this and okay one thing i told you that i initialized as 10th december and now it did this plus five which incremented it by five days for this really like you can implement a good logic so like just by putting five you can increase the whole date so and get all the other details so like this was tenth i think uh sorry this was tenth december now i incremented by five here and then when i put it out this at this line so it works like magic okay now now you can comment this okay so now what you can do you can create another variable time okay for that you require required time okay and let's comment this so let's pick some space so that it gives a clear view so you can give my time where is equal to time dot new 2021 year 10th day well this is december six five and and this is the notation basically which tells you plus make sure you put a zero five zero zero though don't put directly like this five 0 so put 0 5 0 0 okay now in the same way what you can do you can do put s my time where okay and you can repeat this put as my time dot dot r this would give you the r now this would give you the minute and this would give you the seconds okay so let's run this yeah so here you can see so the r is sixth minutes is five then the second is ten okay and you can like also do something put s time dot now so this would like bring to that current time okay good to go now we can clear the screen and we can also print this now let's uh move on with some additional topic so basically i'll give you like there's a very like a small quick topic here to really help you so directory uh and exceptions so basically okay i'll give you directory.rb so basically this is a new topic so let's do this basically what you can do you can do put s run the directory commands directory dot print print pwd stand so print working directory now like the this your current working directory so this is print working directory now i'll give ruby directory.rb and this will print the current cooking directory okay so this is the working directory i'm usually in and this can be confirmed now then you can do uh run a command directory dot make directory so basically these are all the like commands you do a folder here and then you can also check put as directory dot exists exists let's say this this exists folder here so when i run this file now you will see yes this directory exists and it does create a directory to my left okay now let's create another file exceptions.rb so this is another topic so now to create a try catch statement ruby basically you you can give a begin statement now in this begin statement you have three things rescue so one is rescue okay other is else other is ensure so begin is put as begin so basically okay and then i'll do put s three by zero basically this is an error to catch this error i'll do put s error error catched okay so this would this is like a like input is the error is not cached if the error is not catch then you can do this yes looks good okay ensure this protest this should always run always run respect of above irrespective of so always run inspector let's run this ruby exception.rb so here you can see begin there is cash because 3 divided by 0 is a division division by 0 error so it's an error and it says here cash always run respective above let's change to 1 this is not an error now because this is valid three divided by one so let's see it see again it does good p is done because yes it does put three out it is not an error looks good or always run irrespective above so this is how you deal with error handling in ruby so i'll continue with like classes and objectoriented programming next tutorial so thank you for watching for this tutorial thank you everyone bye so today we are going to start with some objectoriented programming in ruby so let's create a most basic example let's create a class in ruby class person and we can like annotation use with a capital p and let's close this class by using an end tag now we can create a constructor in this class with def initialize so basically we initialize with id name and age so then we do we do close this constructor uh it's a good habit you keep closing them because then it would be very difficult for you to like know when which method or attribute or constructor is left of being close and it will throw an error so now we can do add grade id so basically we are declaring variables and assigning them values and id add grid like these are like some uh now this works as a property of the class what we call them attributes and another methods and functions so basically now we start setting the properties and attributes at the name is equal to name and at the rate age is equal to age now you can make a intro method define intro and which would particularly give you the intro put s and you can start putting my name is put this in a hash symbol add the date name okay and my age is put this in a like a symbol hash at the rate edge okay so this is like your intro works so it looks perfectly fine now let's create a person so let's create a person and we can try our code e1 is equal to person dot new we give it an as id a weak capacity parameters id 1 joe and 25 is the age and p2 is equal to person dot new let's create an id of 2. james and let's give an age of 30. okay yeah now we can do p1 dot intro let's call this pivot intro now let's run this ruby classes.rv so my name is joe and my age is 25 perfectly fine now we can do p2.intro and should run the another one so my name is james and my age 30. so everything looks perfectly fine now a very small concept here is we want to see how many persons were created okay like to keep a track of how many persons were created you can create a class variable so basically these belong to the class okay so these belong to the class and we can initialize persons is equal to zero this doesn't belong to the object is belong to the class so these are like class variables in like that belong to the class now we can make something a method which says def self dot get person count because and we can do get self dot to get person count and so this is like a like a method which is as excels access to the self class and it will basically return address persons okay now what you can do you can do so now we are using the class to put as person dot get person count so you can comment this comment this yeah i'm good to go let's clear this and run so did you mean initialized class whatever in person so see there might be some here yeah so yeah this initialize as zero so this like now it will work let's run this so now initial initially zero persons have been countered because i ran the program again now let's do one thing let's create a one person now let's run this and it still gives okay yeah now because uh i'll tell you why it was from zero because when you initialize a person you need to increment this by one as well i hope you get it so what you can do now it looks perfectly good so i'll give you we initialize the class variable with zero in increment by one whenever the constructor is called now you create a method to get its value okay now when a one person has been created so it should give me one when two person has been created it should return me two okay now let's create another person p3 is equal to person dot new like third three third like third person we are creating so we can give them any name let's give them a jack and let's give an age of 40 40 now let's run this now it you will see now it gives 3 so this is how we do it now let's make a small inheritance part so let's do class human and let's end this and define a person with wall and let's end this and say put test put as human humans evolve okay now let's do inheritance so this is how we do we initialize person and inherit with human class now let's call let's comment this out yeah so let's comment this we don't need like this part so let's comment this and now we let us do put sp1 dot evolve okay so p1 dot evolve so this is evolve yeah now let's run this so humans evolved because okay now let's do though basically now i'm trying to show you run time inheritance what if it had its own method evolve def evolved and like we end this and we do put this like person evolved persons involved or you can say people reward so basically this is like a just a dummy thing to show you and now you see people involved because it had its own evolved method then it called it if it doesn't then call the human but make sure you make inheritance okay so this is how we do it and let's move to some like a very simple one uh so so i'll just make comment i'll comment everything yeah now let's you can another class class box now you can initialize with this and now basically uh you can create initialize height comma w and say at the red height is equal to edge and at the rate width is equal to w and this is end okay now you can now make some getters and setters so basically get height and define get height define get width okay now you can close this now define set height okay so basically now you pass a parameter uh define set width now you pass a parameter parameter uh now you pass a parameter and now here you see so now you can do at the red width is equal to w at the right height is equal to h now return at the date height so basically these are the getters and these are the setup and return at the rate width now you can also make access specifiers to this by using this private okay let's do private get height get width set height set width okay so basically you can make them private and make a public one is like get area so how you would work with get area define get area and basically you would end this and now you can simply return return at the red height star at the rate width okay so basically let's create a b1 b1 will go to box dot new zero comma zero and put as b1 dot get area so ruby class dot rb okay expecting end so like there's some some issue let me check with this everyone uh so i it was like a small error like uh you need to define the colon uh like put the colon before the methods so initially what i did i had this put a private colon here here and i did didn't put these so this was like wrong notation so that is why it do an error now it's like good to go uh so what i'll do i'll put it undo this yeah so basically you can make them private so but uh now i'll comment this so now what you see that i created a box with zero values and i set a height and width then i did like get height and get to it and would get area so let's run this so it says yeah the height is 20 width is 10 which we had set at them is in the center and the get area is 200 so this is how you can implement things and then like so this is like some getter and setter which you are like encapsulation so so thank you for watching this tutorial you can explore some like creating some your own classes and moving out some inheritance so this would like really help you so thank you for watching tutorial so i'll catch you in the next video thank you bye today we are going to learn about how to install rails on our local machine so this is like a rails to install a rails on your machine it has like a few dependencies so basically we are going to cover each dependency how we can inter install the dependency so that our rails application works perfectly why uh perfectly fine on our machine so what we can do so we can like first what we can do we can like just like open few links and so basically we will start with one link at a time so let's open this link now this is the node.js official website you can move to this website and download this installer and this is the lts version you can download the long term support version so lts version and you can install node.js on your machine so when you have installed node.js on your machine then you can this would help you to install like the npm package okay so when you have installed like node.js so you can run this command on your machine node minus minus version and this will help you get started with that so i'll give you a quick hint uh well like i will open the command prompt and i will type node minus minus version so here you can see the node has been stored on my machine so it looks perfectly fine okay so yeah so then you can like then you have installed node on your machine then what you can do you can move to the another link uh this is like how to install yarn the yarn is another dependency required to install rails on your machine so so when you have installed node.js so you would have access to npm package so you can run this command npm install minus minus global yarn or alternate way alternative weight is to click on this and click on operating system windows classic stable version and you can download the installer so when you have download the installer so you can install yarn as per like as you will get a setup so you will have an msi installer and you will like uh you this will give you a msi file that will run walk you through installing your own window so basically it will give you a setup which will help you installing yarn on your machine so this is one of the methods okay to install the yarn on your machine so so basically now you have covered the two for two parts so basically you have installed node.js and yarn and you can solve with by npm also so you can solve at npm and you can run this command and to check if this is installed after uh then you have to type yarn minus minus version okay so here you can see you have got like two things the one is node and another is yarn so next moving to the third part uh like you can move to sqlite website so this is the third dependency and when you click on this link so you can access to this so this is now you move to this precompiled binaries for windows uh now you have to choose either of one um one of them either 32bit or 64bit okay choose according to your system 32bit or 64bit so uh like this is required so this is required either 32bit of 64bit install any one of them so uh like depending on your system then this one is mandatory like uh you have to install so what you'll get you get two files in this and two files in this and three files in this so since this one is like compulsory so this will be three files and either one of them will be three plus two that is five files you have to extract all the file files and copy them and paste them into your c windows system32 okay so then when you copy and paste them inside in the c windows system32 then you your sqlite is perfectly installed and you can type sqlite3 minus minus version okay so this would help install sql lite on your machine so here it's good to go yeah nice now what you need to do the now moving to the fourth part you need to do you need to move to ruby installer website so basically ruby's installer is intended to install ruby on your windows machine okay so basically you have ruby and like you can click on download button and this will give you a list from where you can choose from which ruby version you have to download and install i would recommend you to download this latest version and then you can walk through if you have like followed my previous tutorials so you must have already you followed this step to install ruby on your machine okay so this is the fifth part now uh to access like to access check whether ruby installed you need to type ruby minus minus version you have ruby now ruby by default installs the gem package manager so gem minus minus version so so 3.23 is also installed so now you have to execute two commands one is jam install sqlite three okay okay then gem install sqlite3 would like install sqlite on your machine and there's something like this you need to type okay and yeah so this is this is the step is needed uh and another one is this you have to learn around this command gem install rails so after running these two command then you can like you have installed rails on your machine successfully but this one is the most important command gem installers okay so after that you have to type rails minus minus version then you have rails on your machine so the latest version of the rails is 6.1.3 as 6.1.3.1 so like then you have installed rails on your machine so i walked you through the part like uh how you can install rails on your machine then simply you can move to like see so see you can move to desktop i can move to desktop and i will do rails new and basically this is your project name okay so you can type any project name i can type is my project and here you can see that now it will start creating a rails project on your machine and a bundle install is like installing all the like dependencies required for your project so basically this would show you how to install like dependencies these on your like for your project and when this process is successful then you are able to run the rails application on your machine okay so like this would like take a little time so you can like so basically then you can i can walk you through like a few commands so basically rails uh i'll give a quick overview rails is an mvc architecture so mvc m stands for model so n stand for models uh v stands for view and c stands for controller okay so models is like basically like working with your database database and then you have view then like views like presentation on front end presentation layer presentation layer and controller is like communicating logic and communication okay so so basic logic and communication and and you can say either linking the above to linking above to okay so like this is like mvc architecture followed in rails so here you can see like uh it's in installing like the rails or it's like like drills on your like a project on your machine then you can type the command uh so basically there are two commands one is rails new project name and you can then type rails server okay so by default it will start with the server on your local machine okay so i hope it's good to go then the real server will be started on your local machine so this is how like the process will go and then you like like this is like this folder so so we can like wait for this process to complete then i think we can like start the real server on our machine so hey everyone welcome back so like uh like i had like now this has been installed the rails project has been initialized in our like directory so basically uh we can like i was this here see use personal desktop i had created the rails project here now i can move inside my project by cd my project and i can simply type rails server and here you can see now the real server will start on my local host and at the same point you can move to its project inside the same project directory and you type code dot dot so this would open vs code so basically this is the gem file like they're like various things here so we will like go over through it and like so the rails uh like server has been started on my machine so now you can type local host colon 3000 and you can see the rails or servo runs perfectly fine on my machine so this is uh like the rails now you can this is how you can access rail server on your machine and at the same time you can see that i made a get request for the same so you can track the server here so from next we will start with some basics of rails so thank you for watching this tutorial thank you everyone so today we are continuing with our uh continue with the tutorial on rupee on rails so basically today we are going to work with routes in ruby so basically routes in ruby means like url so basically when you create an application you create different urls like for different purposes so we will see how to create some urls in rails and we will start like learn uh what we can process uh after creating a route so basically uh so let's start with our application so very first thing you need to create is like the first thing is like i'll give a quick overview okay since ruby is a mvc framework so m stands for models that is your database so basically this differential database views just like your presentation so basically that is your html and uh like html and front end so basically this is like for your presentation okay uh presentation and uh the another one is controller so controllers are basically used to like uh like basically like it is like to not communicate and navigate between the above two so basically controllers take control uh between uh where like between models and views okay so basically they are the one which basically communicate so basically controllers helps you to communicate between the above two so this is how mvc framework is completed so first thing we need to do is uh okay so first thing we need to do is we need to type rails server so basically i'll also give you a quick uh like overview what i like uh like important commands like initially you should know uh which will help you out so one command is rails server so this will start the server okay uh yeah another is rails console console so this will like uh this will like uh this will like this will start the console and you can like do interact with your database models inside this console so this has a short notations of rails s also known as rails s and this is also known as rail c uh another one is rails generate so basically generate is used to like generate like model views and controller so you can generate things with this so basically to generate and it has a short notation or rails g g so basically these are the commands you should know and preferably this should help you out like in this tutorial so first thing you need to remove inside your project directory i have already created a project and like you can and i have already created a project and you i know i'll start the server inside my project i'll type rail server i've already created a project with the name my project so real servers is this so when i do this so the real server should start on my local machine so basically real server is now started and when i like here you can see when i move to this port local host i see the server is running uh so here you can see the server is running on my machine so basically it starts on this board and i have a command line shell to like take care of the things now uh what you can do uh now i have terminated the like a server now i'll type rails generate controller and this should be my controller now after this i should have my controller name so basically i can type any controller so let me type root okay so just for your preference i'm typing root i'm highlighting this as well so like this is for my reference now when i run this command so now you will take it will take like a take a little bit of time uh not much but now here you can see that now it has created some files so the first thing is between like uh i taught you like these are like the commands you are going to like interact with rails most probably most of the time and these this is like it's uh like uh definition however else is defined mvc model so now we are going to like uh have an overview of little bit of files because understanding the structure is very important so you need to understand where database is defined where views is defined where controllers are defined so this would help you out so most probably you can see here itself that inside my app folder uh there is a folder three folders like one is models okay one other is views and another is controllers okay so when i wrote this command rails generate controller root so it itself created a root controller inside here here you can see the rails convert rails had like generated this controller for me so so now you can see the class root controller like it has inherited the property from application controller so so here you can see so it has like uh so here you can see that that there is application controller here okay now uh my root controller inherits from application controller so like so uh like basically my root controller enables and add some properties from application controller so that is the part of inheritance but the main point is here is that it has already generated a root controller now i can now now when i have generated a controller so it has also generated the corresponding views for it also now inside my views folder here you can see uh there is a folder called root which really generated right now it's empty but uh i'll show you how this works okay so now uh let's move to rouse.rb now let's define uh a route get okay and we need to define get uh so first we will define few routes and then we will carry okay hey so hey hey everyone uh welcome back so first let's define a route so now i'll define a route with get get request and it will say contact okay uh then i'll define a route with contact then slash about okay so they're like these are like few basic routes i've defined so now i'll define a two parameter which says where it should go when i hit this route okay where it should go so it should go to root okay okay now i'll show you first when i type slash contact uh slash contact and slash about so where should my function call exist okay so it should i will define a function in the root controller which says diff define about okay it says end and then another is defined contact okay and it says end so basically these two methods should be called inside the controller when i hit that route okay to clarify that we will say to root hash about okay and for this we will say root hash contact so when i hit these two routes you should call the about method inside the root controller and the contact method inside the root controller so when i reach here so it will hit this okay so let's first uh like now what you need to do and like now when you hit a route so basically you have two options either you create for particular request you have two options the first option is to uh for for for one request you have two option first is to return a json response okay so basically that is your api or second is to render a and render html page so that is your second option okay so to make sure if you want to return like html page so you should have the inside your root folder basically inside views you have root so you should have a file with html name as about dot html dot erb and another should be contact dot html dot erv okay so like these are the two files and in this i will define an h1 tag of about okay okay and in this i will define a h1 tag contact okay so here you can see like i have created this now when i hit these two routes uh like now i'll give a quick hit hit this hit these two routes when i hit them successfully you should call the like uh inside the root controller you should call this method about and contact and we will here by default say render about page okay and render contact okay and what we can also do we can say put s about page about in server okay put as about in server and in the same way we can say put as contact in server and like if we are able to like figure out like like this would really help us to see the console also okay so let's run this now let's run this we will type the command rail server so our server should start now okay so here you can see the server has started so now let's hit this page about so we have reached about and let's hit this one as well contact so here we have reached the contact page also and now you can see there is a specific line which says contact in server and it was also like then there is and server so here you can see whenever uh like i hit this route in the route dot rb it calls the about method and the contact matter of my root controller uh make sure that it can have any name i i named it as root you can name it with any other name then when it it like when uh it had hated the like method so it had first run the put a statement then it called the render method to like render the html page so this is like the most basic tutorial to create a route and render an html page in trails now in the next we will try to return a json response so i hope you you to catch up you all in the next tutorial so thank everyone for watching this so today we are going to continue with the rails tutorial so to start with first we will start a rail server okay so let's start a rail server with the command rails server so the short form of this command is tails s also so now when i like i have but i can previous tutorial i have showed you some like these things how to create a server console and the generate command so we had generated a control controller for the same so let's move to our server so let's refresh this page so here you can see like this is the page we get okay so let's define one another route and let's say get slash index and it moves to a root slash index hash index so let's define a index method here so let's define index and this should be on the top basically like above all so let's yeah perfectly fine so let's uh render index okay now uh i hope you must have watched my previous tutorial to like get so basically we are creating an index route which hits to root slash index and root hash index and when we move to root hash index it calls the index method and it renders the index erb so let's create an index crb which is by default should be created in the root folder and it should be the name index.html.erb and it says h1 with index page okay so yeah so let's move to this route slash index so okay it is showing an error okay it's a quite a small error uh i'll help you resolve it so basically in our route dot rb we i forgot to put it like a colon here so yeah now it should work fine so now we have like achieved the index page okay uh let's move to the another page contact and let's move to the another page about okay so it works perfectly fine so what you need to do like here you have the leg written render index so instead of index if you want to like you the one thing you could also do is like we can comment these things and we can comment these things and this is not required like uh like console statements are not wet uh uh you can see that whenever i hit that method the console is uh these statements are run in the console so uh when i remove this line okay let me remove this line render contact render about and render index so real by default has the ability to map that erb if the method name is same okay and here you can see contact and here you can see index okay so if inside the index you want to by default render index so you can leave blank and if you want to render about you could also do that okay so when i hit the index page i move to the about page okay index route moves to the about page so like this sounds little confusing but we should follow the convention because it increases the readability of the code and we know what is going uh out when so basically you should put these statements and it's like easier to debug than uh contact so uh so now we can like remove the statements so yeah so now what we can do a short activity like we are going to perform right now so we know that when we hit the root most route of this page like this is so we get the ruby on rails page so for that what we can type we can define the root and it should be root ash index so uh one thing i wanted to make clear don't confuse this root keyword with my root controller because i could have named any root controller but this is a like a reserved keyword in rails for like giving the root route so let's refresh this page and now and you can see now this route is the this route is the index route so you could also do this to about so now about one becomes the root perfectly fine you could also do this to contact contact and contact one will become the like default one so this is how it's performed so this is how we have achieved this uh like the root route so this is like easy to do and uh yeah so let's keep it this to index if we are keeping this to index then this is not required okay so we can either comment this out or like i'll comment this out because this is not required and i'll move this to top now like yeah so this is perfectly fine so uh now one format uh one one short active we are going to suppose to do we are going to create a one like api method uh let's create api and let's end this let's create a variable response response and let's uh give them a key so basically in rails we give a key by giving a colon so status and is equal to 200 and basically it is like a hash map and message is equal to hello world now uh basically there are a lot of render methods we can do render json and this is we sent the response so basically i'm showing you this because like this is like most a used one so it will help you and now i'll type get flash response and we hit like the root hash api so when i hit move to response route i i call the api method of the root and then we can see the response so let's move to response so here you can see a status of 200 and a message of hello world is there so this is how we have cros uh created created a mock json response so that's good so there are multiple uh you could like figure out these i close this close this all as well and this and yeah so there are like multiple methods like one is json another is status okay i'm telling you you can like refer there are many then one is html uh one is body one is hd like like html there is a xml then there is a json there then as jsjs as well so uh there are many methods like plain uh text so there are many so you can like uh serialize your data like in many ways as like you want so this is this one will be like json so this one is perfect so now let's uh do uh one one thing i'll show you let's create a file header dot html dot erb and let's create another file new file footer dot html dot erb so one thing like you must have like a scene here like i am putting a underscore tag in between like in front when naming this file so basically this underscore tag defines a partial so i i'll give this in notes like this is a underscore tag means a partial so partial is something where you can it renders the same thing again and again so i'll show you when i move to like this page header.html.erb so i'll create header okay and i'll close this and i'll put a hr tag so i'll put a hr tag in the top and the bottom as well in the same way i'll copy the same code in the footer and i'll this name is add to footer okay when i move to my index page so when i move to my index page so i'll define so this is like uh like rails has a template engine so this is the syntax render header and this is how we define like this is like these braces are very important because this uh signifies the tempered engine rails okay so let's let's close the server and i'll start the server again so let's the server should start so yeah the server has started so let's refresh the page at the index so here you can see i have a header okay and in the same way in the same way i can render a footer okay so like yeah so this is how we achieve and now we can use this partial everywhere like if in this page we want a footer only okay or we want a footer at the footer only so we can do only footer and let's refresh and move to contact so here i only have the footer so this is how you can maintain the partials and partials can be rendered only wherever they are required so thank you everyone for watching this tutorial so i'll catch you in the next tutorial with some more content on rails thank you everyone today we are going to continue with our ruby on rails tutorial so basically i'll give give you a quick overview what we have achieved in like few last tutorials and today we are going to carry on with those things so basically we had created three routes one is a contact round about route and json response route and there was a root route that when we open our application so it should head to this method of the controller so basically uh we had created this router as well get slash index then we had to replace this with the root route so we had created a controller root so we had few methods of the root controller one is a contact about api index then let's move to the root controller then inside we have defined those methods the index about contact api and then we rendered a erb files for that particular method so we have rendered the index erb about erb contact erb and we for one method we render a json response so today uh then this is the root controller here it is located in the controllers file then uh we have like views uh we can close this views yeah then there is a views for for root layout and for index about contact index header and footer basically these two are partials because they are defined by underscore sign so we have invented the partials here so let's start our server first and let's see how our app is running till now and we can proceed with the things yeah so here you can see the server has started and basically now we can move to the server and let's refresh this page so you see few things we are in the index page and it has a header and footer let's move to contact and here you have that and a footer now let's move to about the about route so here it doesn't about so it neither has a header or footer so for that we need to integrate a a partial so here you can see we have embedded like a footer so let's add a footer and here we can add a header so we can have a header and now let's copy this list here as well and so here we have a header here now i'll above this and i'll remove this content so it seems perfectly fine so here we see we have a header and a footer now one thing to note here is that we don't uh like this is not uh like a business very basic html and if you want to integrate some styling we can achieve that so but before that i'll cover a few basics one is like now i'll close you files because they might create some create some confusion yes so let's create a route uh okay now we move to contact page okay and let's move to contact page so here we are on contact page okay so now we will move to root slash contact so we move to root contact and we are here okay so we render a contact page but what if we do this instead of commenting this i would do redirect underscore slash about if i do this let me restart my server i clear there is server yeah so what if i type this command redirect to about so let me refresh ah let me move to contact route and you can see that i was redirected uh i'll show you again this is the index okay uh now this is a contact one now when i click on contact you see i am redirected so you can use this uh to make a redirection but uh make sure like you you you use it for a good purpose because then it might create a conclusion so this is about the redirect route so basically you can redirect from one route to another using this uh next is i'll pass you parameters uh get uh get like user slash id okay and and i'll put name and it will be two slash to root slash hash user root hash user and let's create this method so basically find a user and let's make an end of this and let's simply render json with params okay so basically parents is what we return like i'll show you so let's again restart my server yeah yes so let's move to this route first let me check the server is running yes so your server is running let move to this user slash let's give it an id and name is joe okay now let's hit this and you see we get a json response of parents so controller is root action is user so now it defines very clearly controller is root action is user id is 10 a name is you what we can do here we can return parents of id first will return only this let's make a refresh we get 10 here only now let's make patterns of name we get joe so or we could simply do render pattern so this is how we access parents basically i will show you that pattern so id you can access id and parents of name you can access the name so basically now it seems perfect now you can refresh and here you can see that we have a controller root action with the response of parents a small activity we are going to do now to like you can embed bootstrap in your rails app very simply you can click here get started so basically when you click on get started either you can move to this page then you have a css js and like bundle so to copy this we want the bootstrap to be available on every page of our app so what we can do there is a main layout we can close this close this in views there is a main page application.html.erb inside here we can copy this link css link copy and we can put this just above the header okay so we see this has been embedded and then we can embed the js as well so let's embed the js yes so this is a like this is a bundle like you can the bundle means like both of them are like if you want separate you can do this like if you want it in a bundled way so you can use this so for the bundle one just put this below your closing body tag so the css has to be put like below your attack which is closed and the bundle has to be put like js bundle has to be put just before the closing body and now let's refresh the page and let's move to the just see the difference in the like uh for fonts so you might be seeing something different so it looks pretty nice so you can like make close call that bootstrap has been solved uh then you can press ctrl u so it will bring to the source code and in the source code you can see the bootstrap has been installed so basically this is a template now what we can do we can move to here and we can move to some components and let's move to the component navbar the simplest one is this okay so if we move to our header partial and let's remove this and let's copy the bootstrap and let's refresh now see how it's easy to integrate with our app so like we had already made a partial we changed that partial and all the changes which have been wherever this partial has been included all the changes are there so everywhere there like it's been included so for this you can like do this uh uh for footer we can just for an example i'm using this page the pagination and let's move to here and let's remove this and let's add this and let's refresh the page so here you can see how simple it's easy to add okay so just like this was like just like just to show you how things work now this was like a pretty pretty good exercise and decent one you can like if you want to like edit some css here you can click on inspect element this will open the chrome developer tools and basically uh here you can if you want to like align this to center so basically this is this is this and you can invent margin zero photo you can try a few things here and this would probably help you out okay so so this is this was it like this is how you can like take care of things and you can try some different css here like margin zero auto like anything you want to uh just keep on trying things here so basically this will really help you okay so thank you everyone for watching this tutorial so i'll catch you in the next video thank you everyone so basically we had uh first i'll start my server this server and then let's wait for the server to get started so your server is running let's fix this page so basically we had a footer here in last tutorial i took a small task to how to align this incentive so basically so since you can see that this is a flex box so align text box to center is justify content you have basically a few types of justified content that is center next end the end would move to move this end start will keep it as starting then basically there are a few things space around space between so space evenly so you can opt for any so basically the best one you can choose for is center okay and so basically you have to center and then you can see that this is in center so let's click on inspect and let's check yeah it's even it's here it's center so this is a flex class so let's we will give this a style is equal to justify content center so let's refresh this now we have perfectly moved to this so this was a good good thing to know about and now let's move to let's create a model so basically uh this is our like project directory so i have opened this in terminal so that it gives you clear view so i could do the same thing in the vs code terminal but that's why i opened a terminal here to like to have a good overview so now we are going to perform something let's create rails generate generate model article okay or let let's keep it as post there is generate a model also post is something you uh like uh like you define something a post which has a like a title so that is a string and it has a text so that is a you can say like this is title string and you have a description description so basically that is of text data type so let's run this and now you can see that it has created a model and now we can do rails db so basically model is like creating a table in your database now we want to permanently move to this table so we want this to like migrate this into database so we had created a model which defines that we are going to create something with the title string and description text now let's create rails db migrate and then you can see that this should be created permanently in the database so here it says this has been created created table post and the descriptions we have already mentioned what we are going to create so okay before you perform a few operations with the like uh this table or model which i say so basically so you can interact with this inside rails console okay so please type rails console and then you have interactive rails shell to work with then you can interact with this uh this inside the rails console so let's type post but it will it shall throw an error because it says po call post.connection to establish a connection okay so that's why i did this post dot connection so this so we have made a connection so it like it throws out a good amount of things so we shall ignore this okay and okay i have missed all of my cursor yes so we can type uh clear this you can type uh you can type control l control l control plus l so this would clear out okay so okay control plus l and now this will clear out and now you have now let's take a post make post a is equal to post okay so basically it defines uh a so id is an integer title is string description of the text created as a date time updated at a date time okay so let's skip a dot title is equal to hello okay okay undefined okay okay okay so uh i'll tell you what's the issue with this uh c so basically uh we need to call the constructor so you can for a second ignore this so we will call a is equal to post dot new okay now you see we get a post id is nil title is named description is created additional update results but at that time what i was doing i was doing a is equal to post which eventually meant a is equal to post which is a is equal to post so which is by default meant this that post and which was returning this okay so this is the class first is a class now a which i have created is going to post.new is is the object of that class or you can say the instance of that class now post is a class and a o a is equal to post dot new is the object of that class because we have called the new as a constructor so let's define a and let's do a dot title is equal to hello and a dot description is equal to word okay now we type a so we have title is equal to hello and descriptions good word now to save this inside our database we should call a dot save so it says which means it has been saved in our database and let's call a again so it says id one title is hello world description is world and this is a created ad and updated things which is throwing and one thing you can see it also gives out the sql query insert into post and title description created update value should be this is this and this so this is how it creates that into database let's create another one let's first call post as a class so it's not necessary to call it everything but i'm showing you again now let's call b is equal to post dot new let's call b so this is the post this has been let's try b dot title is equal to programming uh either we can say ruby okay and b dot description this is equal to rails simple let's call b again and it says this and let's call b dot save then it shall clear save the sensor database okay now we have to post one is this and another this so to access all the posts you could call post.all simply okay so it gives all the posts you have so this so and one with the id one and another is with the id two here you can see this is the id two and this is id one so both the post we get uh then we can call post dot find find is like i'll show you show you post dot find one let's find the post with the id one it so it finds us for us for that now we can see in the similar way called post dot find two this you could also call host dot where id uh you like ubiquito id okay there's some issue with my command line okay post dot where id is equal to one so where and what's the difference between the find and post uh find and where so this is and this is another way of doing the same thing but find has a limit one okay so so we have learned about like how to create now let's move to how to like let's do something uh something new uh let's make post dot find post dot find so let's make first now let's change this title to title is equal to ruby uh ruby new okay so we have b and that's b dot description is equal to rails new and let's see so we do b dot save so this is our update operation okay so say update post see update both set title is the description this and these are the value uh we could also do post dot find to and destroy so basically this forms a delete operation so we have learned how to like perform all the four thread operations that discrete date update and delete on the rails console so now we are going to implement this same thing with the ui so thank you everyone for watching this i will catch you in the next tutorial thank you now what in previous tutorial we have learned about models and rails so we are going to continue with like further development how to develop our application in rails so we had created a model in rails and basically you can type here so i have started already started my server i'll show you how to like you can type trails server to start your server and instead of server you can type rails console so it will open interactive shell on your rails machine okay so and here you can start your server rails server so i have opened the console here so that it gives you a better view and we had made post.connection so we had made a model post.connection and you can now press ctrl l and then you can print post so it gives you the data structure what we are following in the post so it has an id integer title string description text created at date time and updated data so we so this is how we i showed you flow operation in the last video of hostile what we can perform now let's this is our server and let's uh now let's move with some like something new to this edition uh now what you can do you can move to bootstrap website and i can click here open into tab and this would guide me to the bootstrap website i can refer to this page and here what i can do uh what i can do i can move to forms and and i can refer to forms and what i can do here is uh click on overview then click on like this and overview and this would give you like diff you will have different things or forms here uh then you can click on like form control so you can move to this page and you can copy this let's copy this uh let's copy this and let's paste this inside we have a few files let's paste this on index.html and let's print let's paste this this here and then your application just refresh this so basically now we have a form here okay so this forms looks pretty big so what we can do we can try to small it down and for this we can add this give this class as call call md6 to take the width of six and and let's give it a class of column d6 so okay so nothing to this so let me inspect this element and yeah so here yeah so i have this diff class rule called md6 and this should work i think okay so let's let's make another div let's make another dip div and let's wrap this inside this day yeah and let's this give this dip a class of call nd 6 because bushra has a total width of 12 columns we are asking it to take a width of 6 columns let's okay it doesn't look either now and let's give it a call six okay i forgot to like close the tag yeah yeah yeah so now it works perfectly fine uh and then you can give style of margin uh zero auto so this would place this inside the center okay so this should work perfectly fine yeah and you can like this is perfectly fine and inside our header uh let's create instead of header let's give this a go to app and let's give this a two to f and we can like now everything looks perfectly fine and we could do like so yeah so this is good okay so yeah so now we try to create a todo app here from now and this is example email address now let's modify the few things so that we can uh operate on them so instead of this let's give this a title and here if we give this a title name is equal to title so here we give it a name as a title and here we give this a name okay the name should the input type is equal to text and let's give it to input types okay try to close this yeah yeah so so this is this is the input type is equal to text and let's give this name is equal to title and here we have a text area let's give this as a name to text area okay so this is looks good so this is how we created so this is title and and this is basically for us this means description so we will give this a description and and this is here we also type it as description okay so this cryption is good yeah so let's and we remove this and we need to wrap this everything inside a form okay and let's close this here so let's yeah so we need to wrap this inside a form yeah so this looks pretty good yeah so fine so so this is like a kind of a footer for us this is like a kind of header and so we need to like this is how we define it so this looks good so we have made some boilerplate a front end for our app and instead of email you should change this to text okay and now we create a method for this method is equal to post and yeah so let's refresh this so good so we have made this method equal to post and let's create a action is equal to add okay let's create this to add so action is to slash add and uh so this should work fine and so let's create a so since like we have created this circulated this response so left let's create this uh action which takes a post request and give it a slash add and let's create something as this 2 is equal to root add okay and let's create a okay one thing you need to make sure that you need to add a token tag here because a post request the question is the cscs csf rf token and you need to define token underscore tag here and you can now close this tag and this is looks perfectly fine so let's finish this page so yeah good now we need to define a post request inside of controller so that is define add and that is end and render json params is the same thing we are going to do here and inside a form we need to define uh like a button so let's define a button so let's click this same class if class is equal to mb3 and let's get a button input let's create a button yeah so let's create a button input type is equal to text class is equal to btn btn primary and let's yeah so it's a good good and we can remove this placeholder because this is not needed we can move this placeholder okay we can move this placeholder id is also not needed okay okay id is needed and because id is equal to needed because let's get give this to a title id and let's give to this is this a description id description id and we need to like wrap this description id here because this is works one id and this is text id so like a good amount of changes has been done let's refresh this and yes so this is between butane primary and a value should be add okay and let's give a style is equal to display block okay and it should be done yeah so yeah so this is a button iron and let's give a display block and margin because margin zero auto will align this button to center okay so let's give this a refresh yeah so this looks perfectly fine so like in this tutorial we created all the like part needed to like perform this operation and so so thank you everyone for watching this tutorial i'll catch in the next tutorial so like you can go over this video like because it was needed to necessary to set up this bootstrap form so in the next tutorial we will like see how we can form other operations thank you everyone so in the previous tutorial i showed you like first i will start my rail server so i type rails server this would start the real server on my machine so we had created this frontend layout using our in the rails app so so like one few mistakes like a few things uh i would like to make clear uh that that is inside your index.html.erb this for input type is text actually this should be introduced equal to input type is equal to submit because this is a button and you need a submit button so when you make this change you can see this button so this knob this becomes a button uh and inside your header.html uh this is this snapbar you can do this to todo app okay and let's do this and here you can see that now this becomes a todo app we don't need these things so we can like cut them like they might create some confusion like with the code so we know don't need this drop down so this is fine and we also don't need this this is fine and let's refresh this so we have a home or link so let's see this so we can change this link to slash contact and this becomes contact okay and in the same way we can copy this we can replicate this and this can be changed to about about and this is about uh yeah and this can be changed to slash slash that is the root oh slash slash contact flash about let's refresh them here we can see so let's click on about move to about page contract is contact and home is this so this is perfectly fine now let's check how we can make a post request using this form so what we can do we can move to like these files have been sorted so let's move to index.html and let's make a we already made a method post please make sure that in uh below the post like below the form tag you add this token endoscope tag because if you don't add this token underscore tag you won't be able to make a post request because this will give an authentication error and to make a post request you need an authentication token so so that for every request we have a token and then you won't be able to make this okay so for we for this method post we move to action add so let's move to action add sorry you are allowed so post slash add move in a root controller we move to the action add and let's see this and then we simply add what we do okay this is not for now we simply do render json response patterns so let's create this let's create to do and let's copy this and paste this as well so let's make a request and here you can see authenticity token is this so that was the token underscore tag i was speaking about so which is here so this is the token underscope tag and the title is to do description is description controllers root and action is act so this means our form is working perfectly fine so let's try to get the data out of this form and post this okay so let's what we can do we can uh we can create add the right post is equal to post.new and we can do at the red post or title is equal to params of title and it post dot description is equal to patterns dot uh parents or description okay so we need to like follow this convention uh this should be strictly followed the title string and descriptions text okay and make sure you don't have any some spelling errors then this would be like something then render json at the right post so let's do this first let's do this now let's refresh this page and make a request again so say id is null title is due to description description works perfectly fine and we return the instance and we see that we don't save this in our database so let's do address post dot save and and we render json what we can do we can simply return this kind of response but let's copy this this would help really help us so we can say you can say message says saved successfully saved and success we can say successfully so this is like perfectly fine let's make another request and do this and here you can see this sign can't be reached like we have some like we have some issue let me check this hey everyone welcome back so like i now by mistake i must have closed the server that was it throwing an error so let's create a task task new now and let's make a description let's make a description this description new now so let's click on add and here you can see we have a status 200 which means okay and between this request okay and message is saved successfully okay to view this what we can do we can do post but all in our database and here you can see that we have a task new now and description you now created here so we could also do this post dot find by id5 since i've seen this ids 5 and here you can see we have already saved this to our database so this is good and works perfectly fine what if we want to like uh instead of doing this we could render our index page instead okay so let's make a hit again task do not task new node 2 description new node 2 and let's create add and here we can see that it must have been saved in the database let's check in the database so let's check in the database post dot find by id sticks because the new id created would be six and it says let's see we can see that it has been created in the database so it works perfectly fine uh but would instead of doing this we could do something like this drift post is equal to post dot all let's create our logic and let's create a logic yeah so we have rendered all posts in the index page so this would automatically be rendered okay in the index page and what we can do we can now access this inside of page so let's give a hr tag and let's give a post dot each do post and let's close this okay and let's close this and uh we could do something like this percent equal to post dot title and we could close this here something like this so similarly we i'm trying to achieve this so this is like what i meant so end tag i forgot to put like i'll put down yeah so this should work now like this is post dot each you do post and like it should work now so let's refresh this and no matches slash get route okay no we need to move to this okay there's an error let me check we need to i need to check this error hey everyone welcome back uh so a smart error like i found like like we have created we are like first when we add so we render an index page okay if we perform ad operation instead by default we are rendering the index page with this route which is the root route we need to define post here as well so if your render index if you render index then you would you need to add posts on both the sites like post is your post dot call and even here you have to define post world because in the same time you are rendering index okay because when you are rendering the index you need the post to be shown okay and when we move to individual html this is like this syntax is correct but it's a small error uh the accurate sign has to be put here now uh we can use a bootstrap card so i'll show you we can use a bootstrap card and let's search for card yeah so let's copy this and let's paste it here we don't need the image tag so this is fine we need this so let's paste it here and another thing we need is this description okay so another thing we need here is description this option let's refresh this and let's move to this so here you can see we have all the todo's okay they are not aligned in the center to align them in the center what we can do you can put margin zero auto okay now let's refresh this and yeah perfectly fine so and one thing we are rendering is pose.title this is not needed yes let's refresh this now and we like move to contact up index this works perfectly fine and let's add a new to do do done again and let's give this as same and let's create an ad and now you can see this has been added so this works perfectly fine thank you everyone for watching this video i'll catch you in the next tutorial thank you so here i have started my real server and here i've started my rails console so let's make a post dot connection post dot connection and then yeah then we it's fine then we can type post and we could see our database like schema so here is our database schema here you can see so here we can work on this schema and let's get started so basically uh i'll run my application so yeah this is application let's add it to do new uh let's give them some like task one and just for the simplicity let's add this yeah perfect task two so with the simplicity i am going to repeat this process like for a few tasks last three so here you can see that it is we have created three tasks works perfectly fine but when you click on this none of them is get gets deleted so we've been implementing delete functionality the first thing we need to do you need to move to this file uh index.html.erb and you need to convert this button to delete okay so first let's make it out or delete so let's move to this file uh we will move to roush.drp and let's create this delete let's create delete and for that we need an id so this is not a get method this is a delete method okay uh we go to root hash delete i hope this is fine so let's move to root hat delete so this is where we form the delete operation now let's move to our root controller and create a method delete and simply let's end this and render json patterns okay uh this is fine we have made this let's move to index.html.erb and let's change this button to btn btn danger and we have changed this to beating video and dangerous y because it will give a red feather and give let's give it give it a style also so we'll move the style is equal to display display or simply give margins here auto it will move to center okay uh yeah so we can refresh this so it gives an error so let me check extracted source around let me check what this error is throwing let me check please welcome back uh the error is like we need to check that i need to put a colon sign here so this is fine let's refresh this and no match for get ad okay okay this is something yeah so here we have move to the delete button so now let's click on this and this is not working okay so they've seen some issue with this so this is not working let me let the we have created delete route and let's move to our index.html.drb yeah because it won't work because there is no hrm so when we say hrf is equal to slash delete and we need to define uh we need to put the like we need to put the id basically we need the id so we will find post dot id then we will close this and now this is fine so basically what we do we call for a delete method and with the id we pass it here another thing we need to do we need to price data method is equal to delete because by default a anchor tag has a get nature so nature won't work here because yeah i can uh opt for this i will show you how first i'll refresh now here you can see now i'll call this so it says get delete nine is not possible yes it won't be possible because we had defined in a route.rb this was a delete method so let's move back to index.html.erb and make this data method from the third is equal to this could be either get either post uh either get post or delete so we make it delete let's move this so let's let's move to our app refresh it so let's call delete and here you can see we have a json response so it works perfectly fine what we need to do we need to move to root controller now and we will do at the post is able to post post dot find patterns of id okay so because we need to match with the id here and we will simply say did it post or destroy destroy and this would delete the post and everything else remains same instead of generate json response we render at the right position and render index because then we this is a single post this is all the post so let's refresh this let's check if this is working or not yeah so refresh the app let's create delete okay still it returns like json response okay let me check what's the issue yeah so now i have saved the file i must have forgot to save this now click on delete yeah now it works everything works fine because i forgot to save the file so chain these changes won't save so it was like till json so now after uh saving them the saving the file now reflects the changes so let's quickly check whether how to do this now to do one let's create a description to do one now do two let's create two two now delete both of them deleted so perfectly fine so this is how we get the delete functionality so let's create another functionality let's create uh let's create some to do to do one and let's create this two to one to do two let's click ask three let's let's create some to do's now because we we might need to implement a new functionality and we might need them so let's do this so task so let's dummy to do let's create this as well okay so we have five to do's here and we can delete one okay just for so we deleted this so perfectly fine so let's create a search functionality for search functionality to be created we need to write a query sql query so let's write post dot where where post dot title like and this is a sql operator like so question mark will the question mark just like to take the value so what value we want here we want a value which is inside this okay so first what i'll do i'll type here so it says select post dot star from pause your post dot like null because i didn't pass anything in this in this array so that's absolutely fine uh let's do post dot all so we get all of them so now let's do something let's take a variable query and make is our dummy okay and now let's write this query where where uh we are defining now where we need to define a percent operator and this is like a query this will take the value and this is now we again put a person operator and type this so so here it says select post dot from post your post or title like dummy so this return this to do perfectly fine so this is the query value we had put in so this is so it's perfectly working fine so we can copy this query i had posted i had wrote the same query here as well so let's move here and type define search search let's create this end so and we need to define them as address post and yes this is fine and we need to refine the render index uh now the only one thing is left we need to get the query okay and the query would be our patterns of query okay so from where we will get this query so let's implement this uh in our header so move to let's move to our header and here we have this input type is equal to search this is a search form which refers to this at the top right so what we can do we can define we can define name is equal to query because we would are going to take and method is equal to get so by default it is get so let's refresh and this is some we can ignore this so let's type hello let's type dummy dummy and let's click on search so we forgot to like make a request get slash search and which says to is equal to root hash search so this is what's error and now we need to put this inside an action okay so we would move to our header.html.erb and we need to put this inside an action so basically this name this method should we get this entire wrong place so this is get an action is equal to search so i hope it should work now so let's type dummy and let's hit the button so yeah so undefined color with variable method query okay so it's like a small error i figured out and we needed to find the root controller and this should be at the right query let's refresh this and here you can see the dummy has been searched successfully let's type to do and let's search it get many tools dummy to do and to do because both of them have a tool keyword so this is how we operate the search impression thank you everyone for watching this tutorial i'll catch you in the next one thank you so today we are continuing with the rails app so i'll show you a quick overview what we have like achieved till now so this is the home page this is contact page this is the about page and this is the home page we have all the todo's here so this is our rail server running and this is the rails console running we can type post.connection uh so like this is we have achieved the connection now we will type post and this is all the posts and we'll type post dot all and simply we get all the posts here so this is uh working so let's create a new to do let's create task three and let's paste this uh okay this already created that's created with task five and let's add this and it's has been added now we can delete this task as well and uh this is all the tasks we have we can also search one using here let's type task and we will get all the one so this is task three and task four so we have achieved lot of functionalities so one functionality is left that is the update functionality so update functionality is like uh so it is so let's start building the update functionality so for that what we need to do we need to move to the html file index.html.rb and here we have a button for uh like this is the add button so and this is this is that button and in the same way we have a delete button so let's move here and let's uh let's uh create a button so let's move copy this and let's this and data method we don't need a data method here so let's remove this hrf tag we can ignore for right now so now we are creating a update button so let's give this update and and let's give this a class button button warning so this will uh give the like yellow button so yeah so now it's perfectly fine so we have the update button so now we click on this it doesn't go anywhere so we need to create a route for this so let's do this uh the same way we have for delete let's create this for update okay so let's click here update okay now let's this is fine now we have to create a route for this on our routes.rb so let's create this so let's create here uh let's create a get method so let's create this after the search so let's create copy this yes so we need to create get request then update and root hash update okay oh yeah so this is fine so what we can do uh then we need to move to the root controller so in here we will create define update and let's end this method so we will do post dot find parenthood id and we will define title is equal to at the ratepost.title and address description is equal to at the red post dot description okay then what we can do we can render a template update let's render a template update now let's create a template update so in this we will create a new file update dot html dot erb and simply let's print this person tag is go to we will close this tag and add the red title and let's print this also add description so i hope it should work fine now let's refresh this so update we move to this page and so we have let me check let me cross this so yeah we have something here so uh we have something here so so we can see the text let's inspect element and we here you can see that we have the data that is task 4 task 4 so this is perfectly fine now what we want to do this that we have the data which has been coming the data is moving we have a move to update route then it fetches that post with that given id then it extracts some data and then it's update then it's under this template so what we need to do we need to update this so what we can do we can create index index.html and we can copy this form okay so we can like copy this template till here because we want to recreate that thing so let's copy this and let's remove this yeah so yeah so let's move this and here like what we can do we can put value that is percent equal to percent so yeah the value is equal to add the red title and in the same way we can achieve this thing we can achieve this thing by putting this between the text area so this is added description so let's make a request again and here we see automatically we get all the things the title and task so let's click go to home button let's click on this update so we get everything the dummy to do and we do as a description one small thing we can make sure here that this should be update now now this is not a ad okay so let's so this is update so we need to create something one thing i would show you so you need to create you need to maintain the id so for that what you can do you can do input type is equal to hidden okay and here you can see value is equal to value should be this so value can be your id so value can be your id so so this is fine so input types will do very value is equal to id so you need to actually maintain the id of the pose as well so let's go here and we will define at the rate id it is equal to params of id so simply simply we can do this and then let's again make a request we have home page let's click on update and let's inspect element and see uh because this is a here you can see input type is equal to hidden and we have a value 15 because the task corresponding to this let's move to rails console and check post dot find let's post find the post with the id15 yeah this is the same post so here you can see that we have that post with that id so we did this because we wanted to maintain the value so let's uh let's create a method again def define update form and let's end this okay now let's make this post slash update form okay uh then let's move to this to hash root root update form okay so this is fine let's move to controller so this is update form and then we can simply render json of patterns just for the simplicity of this so and now when we make update html so this same space everything remains same and this changes to update form so let's refresh this so let's move to the app so we have home let's click on update let's give it two to three and let's make it to do 20 let's make it 20 20 20 and let's click on update so here you can see now the title is this and 2 to 20 is this so now everything looks perfectly fine now a simple change is needed in the controller so i mean you're getting my point that i can okay i can move this method below okay this is and this will look fine so basically what we are doing first we are fetching the post which we have to update then we render the data into a form then we again submit that form so again what you can do because now you have all the patterns the title description and like you have the id okay two to twenty two so we need to fetch the id the id is missing here so let me check how it is missing hey everyone uh so i got like the uh it was a small error that name tag has to be mentioned here that name is equal to id so it's now perfectly fine when you submit this you get the id here so now the simply simply what you need to do now it seems like so what you need to do you need to find the post and then add the post dot title is equal to uh params of title and the rate post dot description is equal to parents of description and we need to then save that post post dot save and then we can uh simply our usual thing we render the index page we find all the post and we can we can simply do post dot all okay so now it should work perfectly fine then we have this we have the id title description then we save this then we render everything so let's move to the app let's start everything from scratch let's create an uh now let's create update that we change this to task 40 and change this to task 40 let's update this and here we go it's updated perfectly fine so thank you everyone for watching this tutorial you can also delete things yeah works perfectly fine fine now let's update this and yeah so everything is working fine 30. so this is how we did i'll give you a quick overview first you created the update method to check which post you have to update we rendered the same data update form then we got the values back and then we updated them so thank you everyone for watching this tutorial i hope you liked it thank you everyone today we are going to build a rails authentication app so let's build this so i have run this command rails new rail source app so this would create a rails or app your local machine so the next command you need to type is you need to find cd you need to move inside this rails new app new new auth app and uh like so this is like this is the command rails auth app so you need to define cd rails or app and you can move you have moved in this directory and you need to define code dot dot so this will open the vs code on your local machine so this is fine uh then you can click here and you click in rails terminal and then you can type real server and this would like probably uh this would open the like this like this would be on your local post so then you can copy this link and you can copy this link and then you can open chrome browser and then you can open the chrome browser and it's this url so this is how we have so now the app is running on your browser so this is fine so we need to define few things before we start our application so you can close the server and you can close the server and it would ask you to terminate the job yes so we need to define the rails g controller so we need to define first we need to define very first thing what you need to do you need to move to your gem file and this is your gem file and you need to uncomment this thing so you need to uncomment this and then you need to type so we need decrypt to store the password in a digested form because we are building authentication app and we cannot directly store the uh like like user password in a raw form so we need to like basically uh store it in a digested form okay so then we need to define create a controller rails g controller and we need to find sessions okay so basically this is we need to define rails free controller session so this would create a session controller and in the same way we need to define we need to find a user controller and a user model okay so let's move this session and roller dot rb so this is class session controller and application controller and this is end so this is our accessions controller and in the same way we define rails g controller users and this would create the user's controller so this is fine and we need to also define rails g model user act which has the email unique and a password in a digested form okay okay so this would create a user model in your machine and this is fine and then you need to type rails db migrate so then we have migrated the database so this looks perfectly fine and so this is fine so we would also have the usage controller this is here it is and we would also have the user model okay so so we need to define few things here validates email so we need to validate the email a few things that is presence presence is equal to true and uniqueness uniqueness is equal to true so this is how we do this we need to define validates email presence is going to be true and uniqueness is equal to true and let's open the console rails console and let's run few commands like we are sure that our model is being created or not so we need to define user dot connection so now it's fine so now let's define user and we have got a user ids integer email is string and a password digest is equal to string so basically this means we are storing the password in a string format but in an encrypted way that is a digested form okay so let's move to new file routes.rv and let's create few resources here so we are defining resources because we are telling them that we are using those controller in those routes because we need to define a map particular url to around so for that one we need to do we need to define resources and we need to find users and resources and we need to define sessions okay so this is how we do it and let's define get get method with sign up which says to users as new and let's define this as as sign up so and for this we need to define get login okay this is not needed now right now so we can ignore this and let's this is not needed and we can ignore this and let's move to this and we need to define the def new and let's end this method okay and we should also uh when we create more value the most probably we are going to create depth create and this and def destroy destroy and end and when we move to this use users and we create a file okay something wrong yeah new file and we need to define new dot html dot erb and let's define a page sign up so i hope this is fine and yeah so sign up is the page so let's see the flow first so we have a router rb we say get sign up user slash new and add sign up and in here we define a sign up method new and this has a like default statement of this render new okay so if you want to like have a good overview so this is a default statement it must be rendering so we can skip this as a practice we can skip this and it will definitely render the new dot html dot erp okay so let's run this and i hope the server is not running so let's exit this rails and let's define sign up so we have like so it says rendered user.new.htmlrb with layouts and let's see yeah the signup is there so this is the basic layout so in the same way uh a very quick we can do this we can also create a few things here also def new you can also create depth new end dev create and we can end this method and def destroy so so this is the basic architecture so we are maintaining user model user controller and a session controller for our application so basically these things are needed so this will help us out to like maintain the application so then in the same way we can create few more routes as well so one is like sign up and another is sign in and one is also like login logout so we can maintain those routes and help us so next what we are going to do we are going to create a form here so basically those form is also basically it is going to have like few things uh a registration form basically so we are going to register the user here so it will have a method a basically method which is going to be post okay so this is going to be post method and uh and we will define the action here action is away like it is being empty here so action is there and we need to define something for that okay so i'll catch in the next tutorial thank you for everyone for watching this thank you bye so basically to start the application you need to type rail server and this will type the application on your machine so like previous part we had created a form using a basic form layout using the signup method so let's create the input type for this so for this we can type input is equal to email uh so this is the email and the name is equal to uh we can give a name by any recent name this like let's give this a name email or like let's give this a username okay and let's give the name username and required and this is required so let's get this and so i hope this is fine and we can define our id is equal to username basically ids is needed for the label so for this corresponding let's create a label method so let's create a label table for username and let's create this label let's close this and let's type user name here so this is how it is done and to avoid any like cr csfr token since we are making a process so we need to define percent equal to token underscore tag and this is this okay so this is how we do it in types the good email name is going to the name id and required and this is like table for this is user password so we are creating a user password here and for this we are defining input type is equal to password and we need to define name is equal to user password and id equal to user password okay and this is also required so we keep this as required okay and since we need to define input type is equal to submit value is equal to register let's keep a value of register uh this is fine and we can close the stack so by default when we refresh this page so we need to find something like username and we need to find a password here okay yeah password is required so let's keep this and let's there has a password okay and this is fine okay so let's yeah so let's yeah we have option to sign up that is username and password and let's we have a register button okay so this is fine so let's give this as a sign up page so this is fine now so we have a user password and like so let's create when we submit this form so we need a method where we need to submit this form so let's create this method uh let's create this method uh sorry a route for this so that is post register and when we hit this register so basically we tell them okay uh we define users hash create and we need to define this as as register okay so this is fine he defined as the digital post register we need to find to use this hashtag as registers so when we make a post request so we need to hit this method okay so i have maintained this method so i'll give you to show you a trick or how to view this routes everywhere so move to this local route okay this is your base route app is working this sign up app is working hyper invalid route something like uh any invalid route maybe i type invalid a uh invalid xyz something anything invalid you get this and now you can type register uh you can like you can search from here as well and i'll use this so it says register underscore part which hits on users as great so i can use this copy this i'll copy this register underscore path and let's go to this page and i can type percent equal to this so this works perfectly fine so this would be like this would help you from defining like this works as a constant so it action moves to this row data but these are good to put okay so when you put this this register underscore path it will hit this method because i have told him to move hit this method and then you can simply render json is for this simplicity i am telling it to render json params okay so let's now hit the sign up uh let's uh type a user at mail.com and let's give a dummy password something like very dummy password you can give so one two three four five six okay and type again one two three four five six so let's hit this so when we hit so like never so we have authenticity broken is to this username is equal to this and user password is this and controller this action is great this is fine so what we need to define we need to define email is equal to parents of what parents you are getting here so we are getting a plan for user name let's copy this to avoid any and so it is equal to items of this user password okay and this is fine so we have already like i have shown you like in the previous tutorial so i'll just give you a quick overview yeah so we had created a user right so okay this is not needed i'll show you again exit and we'll type rails console okay so rails console will be open and when i type user dot connection and then i'll type user so this is how we have email and password underscore digest okay so this is we how we create a user so we can define user we can define simply user dot create we need to define user.grade where email is equal to email and password underscore digest equal to password i hope this is fine and then you can simply say response response is equal to this and let's define a success is equal to true and render json response okay so let's hit this request again okay i need to make sure the server is running server is not running so let's start the server so let's hit the request again and this time the user should be created okay so basically i'll show you again once again so password is this user is email.com let's again i'm making the request again let's make a request again okay i'll zoom this and now i'll make so this is the username and user password let's make the request again and i should get a success rule true okay good if the success is true then let me check let me check uh so l rails console okay so i'll do this console and this would be do user dot first okay so now you see the password is being stored in a digested form okay so thank you everyone for watching this tutorial i'll catch you in the next one thank you everyone so we left out with where if we have created a user so instead of sending a json response so what we will do we will create a message here which says uh android message your account is created successfully account is your you can simply give it your account is created okay so successfully so this would be a message to the user and in new dot html rb you can render this message like this so so let's again sign up so let's create on this and just sign up and let's create a new user who use it and we give a simple password okay let's create this and say your account is created successfully if your account is created successfully you should give them a sign up option right so you should give them a sign up option so let's move to write routes or rb so we will do it sign in and we would go to session hash new because now we are instead talking about creating a session sign in and we would put this as sign in okay i hope this is fine and here like if this is a uh like yeah so what you need to do uh you need to define a variable so what you need to do you need to move it and here your account is created successfully and either you can do this success is equal to success is equal to and what you can do you can remove this message not needed and what you can do if if at success you can end this end this tag as well if i did success you can say your account is created and you can end this tag and here you can see hrf you can give anchor tag to this anchor tag you would move them to the login i say click click here login i hope this is fine and now i told you a trick that you can move you can check the routes by randomly typing something here and then you can you can check the path and this is the path sign in path so you should copy this path and you should be able to paste this here so this gives a value sign in underscore path and let's close this okay so i hope this is fine so let's so let's again do a sign up and you do new user three and my uh you should give a simple password one two three four five six and here you can see your account is created click here to log in so when you click on this it might return a error so because this is a like error because you have not defined it and you can move to route.rb and this will be sessions so when you move to this and then it says is missing a template so we will create that okay so we will create a template for that so for that what we are going to do so we need to move here in uh sasha we need to move in the views folder app views sessions and let's create a new file new dot html dot erb okay so let's create a heading so let's create a heading h1 tag let's create this and we need to define h1 sign in okay and in the same way we need to define a form okay and let's define this form okay so input type is equal to okay so this form is like for the significant input is equal to email okay and label is equal to you can keep this as anything because since you have created the user so let's keep this very quick do this very quickly label is equal to my name is equal to email and id is equal to email okay and let's close this label for email so let's create the email uh basically this is our username also so you can comment this and put here and then input it just go to password and you can copy this name is equal to password id is equal to password and we can do table for label for password and we can close this so this is your password now you can do input type is equal to submit value is equal to login okay so value is equal to login so what you need to do let's refresh this page and here you get the sign in right so that's great we get a signin page now what we need to do we need to define a method is go to post action now let's keep this action as empty and now we need to define a post method for for sign up we define a register for sign in we define a login okay post login and let's now we define us sessions hash create now we define this as login okay so most probably we are going to move in sessions controller and we need to define render json params so the simplicity it is then and we have like the apps we have the views uh we have the new dot html and for here we defined person is equal to login underscore r and here we also defined percent equal to token so this is how we define the token and the like html so it is done yeah so let's just define a user at mail.com let's put the password one two three four five six so yeah it's working perfectly fine great so we are able to create the signin page as well now we have to check for the user authentication so next thing what we are going to do so first we will take the user and i'll show you what we are going to do so what we are going to do so what we are going to do we are going to take the email okay and we say items of email so simply see we take the email and password is go to parents of password so this is like we take and now i'll tell you you might also think for the next tutorial what we need to do new you do something like user dot find with this email if it exists if it exists then match for password right match for password else through so this we are going to do something if it exists in match for password as through error and if it matches if it matches create a session okay if it matches then create a system so that is what we are going to achieve in the next tutorial thank you everyone for watching this so let's start our application and let's see where we have ended in the last tutorial so let's create this rail server and let's create this and let's start our server so we were able to create the login page okay so one thing uh so server is already running okay let me check yeah it's running so perfectly fine let's yeah so the server is running the app is running so we have created a login page okay and but we need to check we need to check if this login page already exists or not so for that what we are going to do we are going to do rails console and we need to check uh like we can do since the email is unique so we will type user is equal to user dot find underscore by email equal to email okay so and we say if user if user so if there is if if there is a user let's do a end statement if user and this would use it is like this would mean that if user does exist okay so then we need to match password okay if user dot exist we need to patch password so if you use it and or we can do this way also user so first i'll show you what you need to do this is you this is your user dot first and we need to do if user dot password underscore digest is equal to password so then we can render a json this just for simplicity i'm running a json which says response and let response is equal to log then is equal to so this is just i'm thinking and let's remove this and else if else would be something this which says response logged in is equal to false and we could do this statement here only because we we want this json response to be sent after the file statement so first we will try with user gridmail.com okay and this is how we do it uh because i don't remember the passwords which i created so many passwords that let's create a user first so let's create a dummy at three mail.com and we would say one two three four five six and let's register so it says your account is created directly here to login and say dummy at the ratemail.com the user is created so now it should return for logged in zero to true so it says logins would just put a wrong password one two three four five okay what is false it's an incorrect email and see whether this works or not so we are going in right direction one two three four five six the password is right but the email is wrong so it says logins for the logic is right so it says it says uh instead of response now we are going to basically we are going to render a message so basically which says the rate uh success logged in is equal to false and this is false and we simply render new because we were coming from the new page of the views i'll show you how we move to app views sessions and this was our login page okay and here we say and then we say at the rate if there is logged in equal equal to false okay so we say and then end so we redirect the user to the same page okay and we say you say if at the rate login is going to false then we say either email or password doesn't match i hope this is right so let's create this and this yeah perfectly fine so let's move to our session controller so we say add the logged in go to render new yes okay okay this is like this is and then it's locked in is equal to true okay i created i put this into a long logic block this is fine android object would fall and and and let's do this as true okay so now let's down here treadmill.com one two three four five and it's a login how called and also known neither reader does not so there's an error in this line i'll see so it says render json response else render new or render json response it's fine so email or password doesn't match so either email so either email or password doesn't match so we tell them to log in and if we put the correct email id and password so let's see it says login so uh if this is true so let's maintain a session for it because this is true but let's maintain two session for it okay one thing i wanted to make this we did not add the error handling for users also uh if what i wanted to do like see if this email is already taken then what happens so we did not create this functionality on the user side okay so what we will do if user is equal to user dot find underscore by email is equal to email if user is there then let's end this else let's do the same thing what we did for the login part else if user is already there then let's create this for the success okay and this is fine it's if the user does i i mean this is what you create part okay so don't confuse yourself we are the login part is like done we have the login password and we are maintaining and the password is wrong we are maintaining but if the user if this email is already taken by republican then you need to take advantage success is equal to false okay okay let's name this as a register because this makes more sense and this also make more sense okay and we are going to render so basically we are doing the same thing so let's avoid this and we should render new this is fine and let's move to new dot html rb so if if register this okay if register is equal to and this and else we move to else okay one thing i'll show you okay let's do this one else is this block and we say email already taken okay so this is fine so let's move to this our app sign up yeah now you see see uh i'll show you one thing let's do user dot all and see okay if this is enabled okay this is not enabled so we have see we are taking user drivemail.com see this or maybe we have a dummy address you already taken okay fine one two three four five six let's check with this so yeah it says email already taken so what happens when we move to this page uh without checking in and it says email will be taken this is wrong because we need to avoid this and for that what we will do and at the red register uh if the register is equal to and for this box uh lf okay else let's say the rate register is not equal to nil because if it's nil we don't uh show this message okay so now it's perfectly fine because by default it has a nail value so if it's true your account is created if it's not equal to say then he will if it's nil then don't show anything or okay so this is fine now let's move this and check this with sign up yeah you are already taken let's create a new id user 22 and one two three four by six so created your account is created click here to log in okay perfectly fine so we are moving in right direction so this was the case when we had to add error handling on the page for both sign up and sign in so thank you again for watching bye so what i've done now is i have created a landing.html.erb so this is the landing page of the application so this is the landing page and it says landing page to check login or log out so simply it is the landing page to check login or logout and let's this is the uh this is the feature landing page to check login or logout so let's exit this facebook console and let's clear this so now we need to define in dot shot rb we need to define get log out because now this is the last feature we are building get lockout and then we will test our application to define sessions hash destroy as long so this is session.destroy as the whole so now let's move to session controller okay what happens when we make a session so what happens let's i'll show you okay so one thing i uh like one thing i'll show you one thing uh uh see so what happens when the user authentication is successful so if the user's authentication is successful so we what we do we do session of user id equal to user dot id okay now this is what happens when we see the like we see that the user has successfully logged in so we create a user id and assign that user.id or destroy what we do we do the opposite of this so okay we do the opposite of this that instead of assigning it id we assign it as a nail value okay so this is what we do and this is this happens okay uh yeah then uh uh we like this is we do and uh then we create a helper method and uh application controller dot this is the application controller so we create a help method in this and how do we define this we define a helper method helper underscope method which says current underscore user so basically in most of the rails application we use that access the current user using this and if and define find current underscore user and we define end so session of user id if that is not nil okay if that is not nil then we define current underscore user is equal to correct current control user or user dot find blue dot find session or user id else current underscore user is equal to name right so this is we do it so that exists if session id is exist then we find the current user then either then we do put that current user to net okay so if if in this page we say if and underscore user you can underscore user then we say and we say hello hello your current underscore dot email if it exists then we say this okay else else we need to show user that they are like okay let's first check this we are in session controller then we a transaction is able to use a dot id and then we say render layouts slash landing okay okay uh one thing we all uh like missed in this is uh like uh that is layouts on the landing so one thing i would like to tell you we can also render different layouts uh from here by defining the prefix so if you don't define the prefix then it assumes and we are defining the sessions then it assumes we are in sessions and users and users so if we can define the process for this so let's run the application sign in okay says unexpected error okay yeah because this is uh ruby so yes else and when we end this block like this fine so let's make again let's log in this and let's create so it's it hang landing page to check login or logout hello dummy directmail.com we are perfectly fine so now we on this page we need to create an option to block out if it's if it's if it is signed in okay a hrf and we say log out and for that i told you for if you want to check the confirm the path so what you can do you can simply type this log out and it says logo underscore path perfectly fine so this is logger underscore path and here we go and it says so let's again move to this page okay uh let's do move to sign in okay let's create a different route for this okay let's give it to this it slash blending and let's do two uh users hash landing we will create this and so let's create this as landing okay so let's move to user controller let's create this because we don't need to sign this every time to get into this method define landing and then simply render layouts a out dash landing okay and yeah so yeah yeah that is an error because we need to define this in codes so like that is an error now let's uh check for the landing round yeah this is slash landing so let's move to this route so yeah it still stays uh when we move to the landing page to check login our hello address let's move to logout so when we move to hit the logo button so we need to destroy the session and we already do that nothing and then we say render thing or instead of doing render render again again we can simply use redirect 2 because we have already created the route for that yeah it's perfectly fine we can do redirect redirect underscore to log code underscore i hope this is fine here yeah fine so let's repair this click on logout and here it hits the button and there is a logo because some seems an error with this okay three zero to four okay seem some error with this so let me check the route for this okay i did a mistake uh i had to render to landing paths sorry this was a mistake yeah so we say redirect to landing in move description landing page okay to connect it something seems wrong with the server now it's fine so landing page to check login and log out yeah it is not logged in because last at last you had created join the session so let's create a user from uh like that you assign it www.com and let's sign in with the user it says hello android developer let's do log out and we are logged out so perfectly fine when we are logged out we don't see anything okay so so for that we can create a message if this is the current user then we do this else as we can show else we can show the one we had on the page of the users this one uh hrx i click here to login so this was a better approach to check and yeah it says ending quick click here to log in when we do log in let's login and this one two three four five six log in and it's a hello data and we sell all we go so oh we are out of the session so this is how it worked so thank you everyone for watching this tutorial uh let's do a quick recap what we did so we had a signup page where we had signed let's get a new user new user uh mail.com let's create a password one two three four five six again keep the password same so this email is already taken yeah okay let's take user hundred one two three four five six your account is created so it's perfectly fine uh click here to log in let's create a user 100 let's login with this so landing page to check blogging yeah hello user at the 100ml.com let's click on lockout and we are out of this session click here to log in let's log in back so everything works perfectly fine so thank you everyone for watching this video so if you have like uh we can extend this to application for to some objective so i'll try to uh object this authentication so that you have a better word thank you everyone bye take care