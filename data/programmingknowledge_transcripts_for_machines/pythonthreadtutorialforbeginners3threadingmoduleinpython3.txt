hey guys welcome to the next video on Python thread tutorial for beginners in the last video we have seen how to use thread module in Python now in this video I'm going to show you how to use threading module in Python and I'm going to give you some introduction about threading module how to create threads using threading modules and how to use threading module now threading module is more powerful and it has more higher level support for creating threads in Python so let's see how to use threading module in Python so in order to use threading module first of all we need to import it so I'm going to just import threading module and once threading module is imported we will be able to use threading module the second module which I am going to import here is the time module which we have also seen in the last video because we are going to create the same function and we are going to use this function using the threading module which we have seen in the last video now I'm going to create the same method which I have created in the last video also which is print a box so I'm going to just copy this method in order to save time and then I'm going to just paste it here so now we have our function which we want to call using the threading module and we want to create some threads using this threading module and call this function inside those threads so first of all I'm going to write this condition which is for the main method which is if name is equal to underscore underscore main underscore underscore and under this condition what I'm going to do is I'm going to create two variables let's say first variable name is t1 for thread 1 and then I'm going to call the threading module to create a thread now inside the threading module there is a class called thread which we will use to create threads so just call a thread class here and constructor of this class take several argument when you hover over here inside the parentheses you will see the signature of this thread class so it can take the target it can take the name of the thread and arguments also it can take in the form of tuple and it can also take the keyword argument in the form of dictionary so for our purpose we need to call the function which is print Apoc so we need to provide a target so in order to provide a target we are going to just write target equals and the name of the function so the name of the function is print epoch which we are going to call and this you need to give without the parentheses so just remove the parentheses in front of this method when you use it as the argument in front of target the second argument which we want to give here is the arguments which this function takes so this argument we can give using the odds parameter so I am going to just write as equals and then in the form of couple I'm going to give the name of the thread and that delay to the thread so let's give the name to the thread let's say this is thread 1 and the delay which we want to give here is 1 so this statement is going to create one thread and let me create one more thread in order to create multiple threads and instead of T 1 I'm going to change the name to T 2 so we have T 1 variable and T 2 variable and in the odds I'm going to change the name of the thread which is thread 2 and let's say I want to give this delay of 2 seconds to the function using the thread 2 so now we have two variables T 1 and T 2 which is an instance of that thread class now using T 1 and T 2 we can call a method called start in order to start the thread so I'm going to just call T 1 variable and then call a method called start which is going to start the thread T one similarly I'm going to call the instance t2 and I'm going to call the method start on this instance t2 also so start method we use to start that threads now if you remember in the last video when we have created the thread using the thread module we have given this condition which is the infinite loop and this infinite loop we have used to wait until the execution of thread is completed now in the threading module which is the new module this facility is available using a method called join so on T one instance I can call a method called join and on T two instance also I can call a method called join and this join method waits until thread 1 and thread 2 is completed its execution and then at the end we can print something let's say we are going to print that everything is done so I'm going to print done here so let's rewind what we have done inside this script we have an imported threading module and time module and then we have created the function which we want to call using that threads now in order to create the thread using threading module we need to call the class called thread inside the threading module now this class constructor takes several arguments and right now we have given two arguments to this thread constructor which is the target which takes the name of the function which we want to execute using this thread and second argument we have given here is the args which is the argument which we want to give to the function which we want to execute same we have done for the thread two also now the start method on these instances is going to start the thread for T 1 and T 2 and the join method we have used to wait until thread 1 and thread 2 is completed their execution so let's run the script and let's see what happens so I'm going to right click and then run the threading example Python script and you can see straight away that this output is printed here similar output we have seen in the case of thread module also so in this output thread one is printed and the a talk time is printed and then thread two is printed printed using the thread two so this output is printed using the thread one and thread two output is printed using the thread two and because we have given different intervals for a thread one and try to that's why we can see that thread one is printed and then thread two and then thread one is printed two times and then thread two is printed and then thread one is printed once again two times and then rest of the thread two outputs are printed now let's take one more example and what we are going to do if this example is we are going to create two different functions and we are going to try to call these two functions using these two threads so the first function I'm going to create here is the print underscore a cube which is going to print the value of cube of the number which we will provide as the argument to this function so I'm going to just write print here and then using this print statement I'm going to print the value of cube of the number so here I'm going to just write cube and then I'm going to provide these curly brackets and then I'm going to call the format method after this string so let's call the format method which we use in order to format a string now inside the string we want the cube of the number so we will just multiply this number three times so num Astrix num Asterix num which is going to print the cube of the number once again let me just copy this function and then I'm going to create one more function and time I'm going to name my function as Prince square so I'm going to just write print square here and then I'm going to just write square is equal to and here I'm going to just print the square of the number now in this statement where we have created t1 and t2 instances the target we can change which is the name of the function so now our target is print cube and print square without the parentheses we need to give the name of this function so print cube and print Square and arguments have also changed so earlier print Apoc used to take two argument and now we just want to give one argument to the function and let's say it's 2 and also the print queue function takes 1 argument and let's say it's 2 also now let's run this script and let's see what happens so you will see that there is an exception here which is some kind of a weird exception which says that exception in thread 2 and this exception is this print square argument afters Asterix must be iterative all right so the problem here is we need to give a comma here which tells this parenthesis that this is a couple value ok that's why it's giving the exception so if your function takes 1 argument then you need to give the value of that argument and then give the comma so that it's able to understand that it's a tuple and then once again when you run this script you will see the value of cube is printed which is 8 and square is printed which is 4 so this cube value is printed using thread 1 and square value is printed using the threaded 2 so in this way you can also call a multiple function using multiple thread instances using threading module so this was a brief introduction about reading module there is much more to learn about threading module which we will learn in the future videos so stay tuned and please keep watching these videos and I will see you in the next video