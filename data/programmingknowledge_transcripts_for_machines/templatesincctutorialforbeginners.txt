hey guys welcome to programming knowledge in this video we will be looking at templates in c plus now what are templates well templates are a way to define generic functions or you could say classes in c plus right so we'll just take an example to understand that better so let's say i have a function called add which is really simple it's just going to take in two numbers and uh written with the sum right this is a very simple function and you know the drill just call this one two and look at the output and no surprise that this is just going to return me three right so here we have the output now what i could do is let's say i wanted to um create a function which can add floats so instead of 1 and 2 i'd say 1.2 and 2.3 now as you know this is just going to go inside this function because float can be converted to an integer and once you're doing that you are just losing this data so that's not expected right so even if you run this you'll be getting three as your output there's no errors but you did not want three to be the output you wanted 3.5 right because you wanted to consider both the decimal places too now the fix you would say is uh well just change this change integer to float because if we convert an integer to float there's no problem in that because anyhow the decimal is going to be zero and if you want to process floats you can directly given floats over here and it's just going to process it the same way so if i just do that that fixes the issue but now i want i'll say that i want a function to add two strings right well we don't need a function for that you just you could just do plus over here but anyway let's for an example say we want to add two strings or two two objects of our custom class right so let's say i defined a custom class uh well let's say complex number well complex numbers too mathematical let's say well let's just say abc right so our class is abc and you have defined a operator called plus inside that we'll see how to do those things later that's kind of advanced this is called operator overloading well you say that plus should work in different ways for different data types so if it's a float integer or number basically plus should basically mean the arithmetic addition and if it's a string as it's defined in the string class you just concatenate basically hello plus world becomes hello world right so those things will see later but let's say for now that i want to do that now is there a way could like i can use this function to add a string to no right i cannot do that but i could define another function called string so string add say a string x string y and i could just written x plus y this is completely valid and if i just call though that function using two strings so hello and world right i forgot the run this i will be getting hello world over here so this completely works and it's fine but what happens if i have more and more types of uh data which i have defined so basically data of custom classes or instances of custom classes this is not at all practical right i cannot write so many functions uh which do the same thing which do the exact same thing so in this case it's just adding those two numbers right so is there a way i could automate this well there is a way and that is when the use of templates come into play so what we are going to do here is we are going to define this function not as a function but as a blueprint so that the compiler knows that yeah if this is the input i need to create a function in this way so that this function gets executed so that's what templates do so it's very simple to create a templated function over here so what you do is you just say template and inside a pair of angular braces you just specify the type so uh it's just it's called type name or class it really doesn't matter what you call it this day it's a very it's a very small difference between class and type name but we'll just get into that but for now you can just call it anything you want so let's just go with class and uh what you you just name your custom class anything you want so this is just basically you know it's like a variable for the compiler so that anything i put in there the data type comes into this place right so you could just call it anything generally people call it t right t for template or anything so g t whatever we want you can just call it right we'll just stick with t and here what we'll do here is we'll just below that template definition we'll just use our custom created class so t add well it's not float t it's t x and t y so what happened here what i'm doing here is that now i don't need this function right what i'm doing here is that i just created a template of this function called add and it's just going to take any data type which uses this function inside this it's just going to create this function inside the memory and it's going to call that function it's as simple as that so here if i do 1.2.3 what it's going to do 1.2 and 2.3 are floats so it will create a class called float so it's it's basically it's going to look inside the memory it well it does not find anything because this class is just a pseudo class it's just a template right it's it's a blueprint and this function does not really exist but here i have called that function so it will just look at the template right so it has this blueprint it knows what to do the class is t so basically class is float so it's what it's going to do here is just define that function using float so float explode y and return x plus y so this part it's going to do automatically and we'll be getting this function so here if i call strings it's just going to create strings if i call integers it's going to create integers if i call abc it's going to create this function for abc all right and other another thing is that this operator should be uh defined for that class so for now we'll just assume that this operator has been defined for whatever class we are going to use but in case it's not defined it's just going to throw in error right so this is as simple as that to define a template or a generic function so this is an example of a generic function you could just use this function and create whatever you want so here i could just use this for float i could also use this for integers or i could just use it for strings as i used here so let's say integer first one two right and then the strings run this okay i have an error what does it say okay it says cons cash star cannot be added that's because here we are passing in strings and we'll get to that in a moment right well that's a simple fix but uh we'll see what happened over here but now for now let's just see the output and then analyze it so here we have the floating point output and the integer output and that's what we expected now coming back to the error what happened was when you pass this function it's as i told you it's a string is nothing but a array of characters so when you define a literal like this this is called a string literal and if i just define something like this it's just going to be an array of characters inside the memory and as you know there is no plus operation between two arrays if you want you could create a plus operation between two arrays using a you know custom class but we're not going to get into the details right now but basically if you could create an array class which would support this plus operator this two would have been concatenated and we would have got the output as we wanted but here what is happening here is that we are allowing the compiler to determine for itself so here we are just passing that input we are not providing any additional information as to how these inputs should be passed or anything like that we're just calling that input we're just calling that function and the compiler is left to determine what we are doing with this right so the problem arises over here when we are using something which the compiler does not understand so for compiler this is not a string class objects right string class is something which is defined outside the compiler integer is defined inside the compiler character is defined inside the compiler but there is no string which is being defined inside the compiler so for this this is nothing but a character array right so it's just trying to add two character arrays and that's why uh that was not successful and it threw an error so the way you solve this is you explicitly specify how to pass this uh output inputs right so how to pass this parameters so that's what we did when we were using vectors so if you remember we the way we defined the vector was we did something like that right so this is the thing which goes inside this thing so that that's how a vector class has been defined so whatever you pass in here it's going to go inside the screen right so that's the same thing we need to do here so let's say i want to pass past this thing or process these two parameters as float i'll just say float here right i want to process these two things as integers so i'll just say integer over here process these two things as strings just a string over here and now if i run this i will not be getting an error and i will be getting the output what i expected right so that's how simple it is to work with generic functions well you could have multiple parameters over here so class d or class and whatever you want and though uh you could just specify what input and what output you want so that is also possible right so that's about uh templates and functions you could also do it for classes so let's just quickly take an example so um what would be a best example um let's say we want to create a class called uh let's say storage so class storage uh and it's just going to store some some um some data right so it's just let's say private uh let's say stack or what do we call this we'll just call it store it's just going to store this so let's say an integer area of store and it's just going to store some number of data so in c plus plus now you know that this won't work because you're just creating an empty array you need to specify size to the array but now every storage will have a different size right i cannot create different storages with different sizes well i need to do that outside this class but what if there are some important functions so right now there's nothing it's just uh no holding this uh store variable right but what if i want to create um a class which has kind of functions like you have the vector class vector class is a very good example of this because you have very good functions inside the vector class you have functions for finding sorting and all those things which we need to define it outside if we wanted to use it for different sizes but inside the vector class you are just using it without defining anything right you're just using the inbuilt things right so the way you do that is really simple just use another type so type sorry template template and it's going to be integer because i'm not specifying a class here so if you remember i used to do something like clash d but here we know the type right so you're just going to pass in some size so i'm just going to say int right so in size uh well size is uh let's just say s right so in test and i'm just going to create the class with that size right that's as simple as that now you could create a storage of how much our space you want right so i could just say storage and let's say five which is going to hold just five elements and then s1 or i could just say storage 10 h2 right and this will work perfectly fine if i just run this i have a successful compilation and it has only created those two classes with only that much size right and if i wanted to i could even specify uh you know the type of data it's going to store so let's say even uh well that is going to be generic right we don't know what type of data we are going to store so here comes the class d or whatever you want so class uh let's say some class you can just name it whatever you want doesn't really matter right so you could just say that and it's just going to be some class of the store s and here what i'll do i want to store five items of integer and here i would store 10 items of class string run this i'll be getting successful compilation and that's how useful templates are right so with just one one additional line you could actually create a generic function which could be used anywhere and for any class well for any class it's a very vague statement because whatever functions we are defining that should be applicable to that class so in case you saw over here hello and well if they are treated as character arrays as a compiler treats it that's not going to work but if i treat it as a string object well string is a class it has this plus operation defined between two strings so it will right so that's that's how it is you need to specify this template keyword along with whatever generic types you want and also you could also type specific uh items over here so in my case the size is an integer always right so you cannot have a 3.5 you know blocks of data or something like that this is just going to be three or four so i know that it's going to be integer right so just specify integer over here and class can be any class you could just you know create a store for any kind of class over here so that's how you use templates and yeah the difference between the class and type name i forgot about that so class is basically an independent thing so independent right and type name is used when it depends on something right so this is not a very big uh you know it's not a very big thing to interchange these two things it's not going to make any difference when we're just using something like this so here class and type name mean the same thing semantically but where it gets useful is that when you have chained uh you know template so i have a template inside template so template inside template something like this right so now what happens here is that this template will belong will you know depend on this particular template because that's that's how we have defined the template over here this template is actually something which uses this template so it's dependent so in that case you use type name but if it's not dependent it's independent then you use class right well this is a very uh indepth uh problem which you may not probably encounter but in case you encounter this is the this is the error and this is how you fix it if it's dependent you just use type name if it's independent you just go with class and if you're just using simple templates like what we used over here right which is completely independent and it's just a one level template just the top level template right it's not dependent or independent whatever it is it's it's just it's just unique right it's something which we have defined on a very top level and it does not depend on some other classes or some other template whatever it is so in that place uh well you could just go with type name or class you could use that interchangeably whatever you feel comfortable with it's not going to make any difference right so that's about templates in c plus and uh that's how you create your own generic classes so now you know how to create a class for vector right it's basically the same thing what we did here it's a very simplified version of a vector or you could just call it an array because uh the stl contains an array well the htl is called stl because it uses these things that's the that's the thing right so htl the full form of stl is standard template library and it uses templates so that's why it's called stl right so whatever things you find inside the htl it's all templates so and this is how you build up a generic uh class well i did not put anything over here you just put that right you get that right so whatever you do here that's basically templates and in the next video we'll uh just go over some of the very useful html everything is useful inside the stl but some are very high standard but some of the things you just use normally so there's this algorithm class which you could use the vector the list and all these things will go through some of them in the next video till then happy coding