hi in this video we are going to learn how to build a REST API so before building the rest up here we have to download one or two teams that is first we have to download the postman postman you can download it from here and the second one is the come first when will they become first from here choose the platform that you have and the words women that is the stable one and after that we can go to our project in here that project is already being given and I have only added one property at this password and it will be there in a description the triple link of this project so now we are going to build the rest appear so before order believing elastic here and we are going to I'm going to so how can we how does it look like so let's say app dog cat request that we are given and the part and there is one callback function in which two parameters are there it is request and response in this we can responds back with response dot strand let's say testing and if we write testing here and after their thing we are going to run this file and then again we go to our browser and let's see a local most people and we can do it testing this year so let's now begin to build our recipient so before building the rest API in our teammate or chase we are going to export this line so for exporting this line we are going to use more module module sorry more to dot exports equal to user and after that we are going to require it from here so for requiring it from the TB file there use user and acquire it from the utils utils for mutants folder and MDE now we have required a user now if we are going to like create a user here so for creating a user we are going to use a force request so we are going to use post request in which we are going to send get the right apart as a slash users and we are going to use a synchronous process here so we are going to use async await methods so a sync await the async request response and what the data can be get from here so let's say console it from console dot log request dot party so now I have run the file but how can we see the request here so that's why we are going to use the postman a postman is like a browser request Center or anything that the project can do for sending any requested a server it can do the same thing firstly so let's say we are going to create a new collection so let's say for new collection let's say a mango Mongoose demo and in here we are going to create a new get request or a post request so add a request here let's say for create user so in here it's a I am going to close it down all the requests over here these are all the previous ones that I have used for another project so in here we are going through so now it's supposed request so we are going to say in the post and it's it's going to be a localhost 3,000 users and now we are going to use a body I mean here waving huge select row and we are going to send back back gate as a JSON file so in here if we send like name is like Shawn tow and AC is 21 now if we send it back to the chain here and now if we go to our here you can see that undefined is getting console.log out here so the problem is here that the request dot party that we get is not specified of which type so here we are going to use a new middleware AB dot use express dot JSON and what it will do that it will parse the request body that isn't a zone type and it will not pass any other type of request so now if we send back again the same request we can see the console log output so now if we again send it back now you will see that it will send the request at his name John Doe and has treatment now now we are going to build a API so we are going to use async wait a synchronous process so it's a very very useful purse very useful tool that JavaScript gives us so here the user for saving a user we are going to use a weight function which is a synchronous process so user dot save because for same we can use user dot save and in here we are going to just sing back a request dot party now if there is an error so for catching an error we are going to use try and catch block here so for an error it will use like this so we are going to use a try block here and if any error then responds back with ten status code of 400 and send back with nothing or a dot message and if user is being saved successfully we are going to use your response or here we are going to use also something called Const because here we are going to create a new user so here we are going to use the Const user is equal to new user request dot party and here we are going to simply write user dot Save now it's being saved and in here we are going to response that with status code of 201 which is a code for creating any collection or a document so we are going to same back with a user so let's say if we save it now and if we again send back with the proper properties let's say name is given as is given we also have to write for email so let's say John ate Timur calm and again password and for fossil we can type like 1 2 3 and now if we same back here you will see that a new user is being created here now how can we see in the you in the MongoDB collection so for death for this we have we have also downloaded the MongoDB come first so in here we are going to just copy and paste the URL that is the connection URL connection string URL so let's say let's just copy and paste copy from here and paste it and paste it here so if we paste it here and now if we connect it we will see that the new user is being created in here if we put it a paste end users yeah you can see that a new user has been created now we can also see if there is an affair if there is any failure in creating a new user so let's say the password here is of length 3 and which is required like you can see that in the message it is written that visible radiation fell because the phosphor is shorter than the minimum length is a long it is fun so the new user will not be created and it will go to the catch block so now we are going to see how can we get all the users so for getting the users we are going to create the new part that is which is the same part but only the request is different it is great request now it will also take the request and response and in here we are going to use a trying catch block and try and catch look if let's say if there isn't any server side of header so we can use 500 of a turn and send it back with nothing on it now we can use a wait here and the user dot we are going to find all the find all the users so for finding we can just find 0 to find and here we can pass any filter out but we can simply right here like give any an empty object now if it to give users back so for this we can get the users and if there is no users here like we know users are being there so we can use if no choices and it could return back from here we spawn stock caters for 404 and stand back with nothing on it and if there is if it is successful then we can stand status of 200 and stand back with youjizz so let's check it out if it is right or if there is any mistake in here so in here we are going to create a new request here so we can create it from add a request and from here like here we can I get features and second one would be with Mongoose table now first of all we are going to like create more usual see so let's say if it is running odd not fool there is some error here I would oh we are going to use a weight so it is compulsory to add a sink in the function below so now if we go to put our postman and create a new user let's say Jessica and here like a string colonialist right let's say Jessica let's say your j 1 2 3 is fixed now if we send the request of post we will see on user is being created here and will create a classic here you can see the new user is been created now in the gate users we are going to fetch all you just it has been created here so we are going to use localhost 3 following place moves that is the path and it's a gate request so now if we saying the request we can see that all the UF is being created here so now now we are going to see how can you fetch it how can you fetch only one users so it's a great request and it will also go to the users but but here the ID of the user can be your friend can be anything so here you can use ID and here it's a Singh process also so we are going to a sink request response and if we and also it is if it is going to be in a try and catch block now if it is an F there is an error we can send the header back response dot sent like 500 on sorry response dot status 500 dots and he got message now how can we use the idea so first of all we are going to see what we can in two years so it's a parameter so it's a it's going to the request or parents here so now if we consolidate console.log what's in here console.log cutler the classic patterns and for right now we are going features to come in get out here and now if we save it and go to yeah go to over this clock and we same like we get it from here and stand back here and if we speed and if we go to our project we can see that it will give an object requested pattern it is the object so now we are going to use the triangular cache block let's go me uncomment it out and if we you know we are going to cost user find by ID because we are finding it by ID sorry oh wait and loser dot fine by ID and for finding by day we can just stand there keep the request of parents dot ID here and now you know if there is a user of the request then it will send back 200 that is the okay from okay and if it is not if it is not we can check it from here like if not future you can return back like we did the same thing in here so it will return back with response orchestrators 404 and stand back it's nothing and if he is true and and we can send this pawn start status of 200 and stand back the user now if we save it and now we can go to our first name and if we again in doing this thing you can see the user is being called out and we can get the user now we are going to see something called for how can we do the update so for updating any user we can use update dot fetch request which is an application request and in here we are going to use also the slash users and also we are going to use the parameter here and it will be a sync function and request or response and now it all and for updating something we also need a body because the browser or the client will say anything that they want to so it will be resetting in the body part so here from here we are going to use the try and fetch block try and catch clock in memory if there is an error we can see response dot status of 500 thank eat dot message so now if we can also use call future because there is only one user object ID English cider we are going to use a lathe and here we are going to use user dot find by ID and we are going to use this once and find by ID and update so here first it will take the request dot params dot ID and next one it will take the update we are going to do so request dot party that's it and if there is user of death type if there is a user then it will return if sorry if it is no there is no user of it of it then it will with churn of returning back with you turned out response always status or photophone 8404 difficult there is no found if found response start stained if nothing and everything responds back with the new update really three stages of to over thought stain of user but it will not work properly because it will it will it will not check if there is anybody a sort or not so it is optional properties reformed it is it will give the new user and it will say to look true and it will check for validation for running validator we are going to use run validator in here which is look like this this one will run the new and run validator and now if we save it and we can go to the postman I mean here we are going to create a new select new quiz that is and update user so we are going to update the user and we bring this thing to the moodini and now if we are going to fetch it here and localhost 3000 and we are going to use the this one this param and we are going to stand back with 40 and we are going to select that raw JSON and now let's say we are going to say update the ease of this user it will like 54 now if we send it back we can see that the user is being updated and as it has 34 and the critic very refreshed look here we can see that their eyes will suffer for now we are going to see the last one that is f dot till late how can we delete a user for deleting we can even spare your delete users small as ID and it will be a sync process and we are going to use request and response now we are going to use try and catch block here also and now we are going to see that if there is a user make this right then oh wait it will give the user wait user dot find by ID and delight and here we are going to faster fathoms of ID so the same thing that we have done in previous requested the if there is user then it is good and if it is not then we can send 404 messes so in here i really cannot forget france back with a message so now if we if we save it now if we see it and go to our postman and create an or let's say we are going to flag delayed here and we are going to delete this one and there is no but required here now if we send it we can see that you it will give the user and if we press it here we can see that the chontal user is being deleted so that's how the rest API works here so thank you