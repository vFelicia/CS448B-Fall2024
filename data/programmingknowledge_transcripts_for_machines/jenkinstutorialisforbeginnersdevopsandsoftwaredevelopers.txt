hey guys welcome to this course on jenkins tutorial for beginners so let's get started so first of all what is jenkins so jenkins is an open source automation server written in java one can also say that jenkins is a ci server where ci stands for continuous integration and what is ci we are going to see in details in the next slide now what jenkins does so jenkins is used to detect the changes whatever you commit using your version control system such as subversion or git or any other versioning system and it performs some tasks on your code when it detects some changes in your code so what tasks jenkins can perform repeatedly so jenkins can perform for example if you have a code it can build your code it can test your code it can even deploy your code and even package or integrate your code whenever it detects some changes in your version control system or in your code now let's talk about some of the history behind the jenkins so jenkins is a fork of original hudson project and it was under development since 2005. now hudson was the first release by a developer called kosuke kawaguchi of sun microsystem and in 2010 oracle bought sun micro system due to this some naming dispute occurred and hudson was renamed to jenkins now oracle continued the development of hudson as a branch of the original and the jenkins became the folk of hudson now you can find more about jenkins on jenkins minusci.org but nowadays this website is transferred to a website called jenkins dot io so if you enter this url on your browser it will be redirected to jenkins dot io now before diving deep into jenkins we need to understand what is ci or continuous integration so the basic concept of ci is a ci server continuously integrates newly checked in code into a build that we have already discussed so jenkins detects those changes using the version controlled system and perform some tasks on them for example building or testing or integration test or deploying those builds and so on so you can see in the second step of continuous integration i have written it runs unit tests and rejects the build if they fail so a continuous integration system detects and runs the unit test and it detects the failure and if a failure occurs during the unit test or integration test or any kind of test it's going to reject that build and it's going to send the information to the developer or the maintainer of that code now for example your unit test or whatever test or your whatever build you are making is successful then a continuous integration system is going to deploy your build to other servers so continuous integration is also referred as build automation so you may ask what does this really mean so at regular interval or regular frequency ideally every commit you do in your version control system your continuous integration system is going to integrate your system that means all changes up until that point are combined into that project it's going to build your code so the code is compiled into a executable or a package it's going to test your code so you can automate your test and you can write your test suit which is going to be run by your continuous integration system and if all the previous steps are successful your code will be deployed that means it will be loaded onto a system where the developer can interact with it so now let's talk about some of the benefits or the advantages of a ci system so ci system enables us in immediate bug detection so bug will be detected if some test fails or your build fails and then the ca system is going to deploy your code if your test and your build passes so at any given point you have a deployable system now next is you have the record of evaluation of your project so for example how many times your build succeeded or your test succeeded and at what change or at what point your build failed or your unit test failed it's going to you know get the record of everything so you can see it later and you can just view the quality of your code now the next benefit of a ci system is it's going to detect the system development problem at very early stage so because you can run jenkins repeatedly for example our developer checks in his code using git or subversion or any versioning system it's going to run every job which you have made for example for building your code or your integration test or your unit test or any other test is going to run immediately and if anything fails you can even get the report of that using an email or it will generate some kind of message to your server so everybody will know some error has occurred during the build or the test of your code so everybody will be able to take the action at the earliest as a result you have the reduced risk of cost schedule and budget okay so when you detect the problem earlier obviously you you are going to save on cost and your time and your budget and the last but not the least is the measurable and visible code quality so using a jenkins or any other ci system you will be able to you know visibly see the code quality of your project now let's see using some picture how does it all happens so you can see here are your developers which are going to develop some code and they are going to commit their code into the code repositories such as mercurial or git or subversion and this commit of changes of code will be automatically detected by jenkins so whenever a developer commits his code is going to uh automatically be detected by the jenkins and what jenkins will do is going to run some tests whatever test you have created to run on jenkins for example the unit test or integration test or system test or any other kind of test is going to just run those tests and give you the test results and if the build is successful and tests are successful it's going to just you know transfer your executable file into some artifact repository or it's going to deploy your software onto some other server for examples on some cloud server where you want to use it so here the code is committed and then at a regular interval the jenkins tests the repository and then it runs the test on those codes using your repository and if everything is successful it's going to create the executable and then it will save those executable in your artifact repository or it will deploy your code onto some other server so now let's talk about why jenkins and not any other ci system there are many other ci system available but why jenkins so in jenkins you can create plugins so these plugins are very modular and jenkins plugin extensively makes jenkins to adopt to many systems so you can install jenkins on many systems for example linux or windows or mac operating operating system or any other system and its plugin system is really modular so you can install whatever plugin you want to support that kind of build or that kind of functionality whatever you want now the second is jenkins provide everything for a robust continuous integration system which helps a lot for team that practice agile now agile is a software development techniques which are used widely across many companies and many teams in order to coordinate their work so this is completely another topic agile methodology but if you are a software developer you may not know what agile is the next is jenkins continuously provides access to the working copies of the software which supports the agile principle once again so if your team is working in an agile environment such as sprints or you have scrums or any other agile methodology then jenkins will fit perfectly in your system the next is jenkins is released under mit license so it's an open source ci system that means you can use it freely the next is there is a large support of community and thorough documentation so whatever you need to know about jenkins most probably it will be answered by the support community or you will find it in the documentation of jenkins and the last point is as i already stated that it's really easy to write a plugin in jenkins and if you write a plugin in jenkins it can be used by other community members or everyone who will use jenkins that makes jenkins really powerful in a way that community members creates those plugins and they can be used by everybody who wants to use them and last point i want to add here is if anything goes wrong you can fix it so it's so modular jenkins is so modular that you can fix your problem by yourself so what jenkins can do jenkins can generate reports it can integrate with many different version control systems it can push to various artifact repositories it can deploy directly to your production or test environment it will notify the stakeholders of the build status using email or any other messaging system and many more so this is the brief introduction about jenkins and in the next video we will see how we can install jenkins on different operating systems and then we will go further hey guys in this video i'm going to show you how you can download and install jenkins on your windows 10 operating system so first of all let's talk about the prerequisite of installing jenkins on your windows 10 operating system in order to install jenkins you need to have java 7 or above so make sure you have the latest version of java and then once you have java installed then you are ready to install jenkins so i have already installed java 10 on my windows 10 operating system and i am assuming that you also have the latest version of java so once you have java installed just open your favorite browser and search for jenkins and the first link which will appear here will be from jenkins.io so we are going to click on this link so once you are on this jenkins website you just need to click on the downloads button here and on the downloads page you just need to scroll down a little don't click on downloads yet we are going to see which are the versions which are available for jenkins so when you scroll down you will see different versions of jenkins one is the lts version and other is the weekly release so we are going to use the long term support version and the latest version is 2.107.2 and in here we are going to choose the windows option so here you will see the windows option now one thing you need to keep in mind is when you are installing jenkins on windows it is good to run jenkins as a service so it starts automatically without requiring any user to log in the easiest way to install jenkins on windows is by using a windows installer but if you are a advanced user you can also download the jenkins var file and then you can deploy it on servlets like glass fish or tomcat but for our purpose we want to just learn so we are going to use the windows installer so i'm going to just click on windows here and once you click on windows option you will see this message which says thank you for downloading windows stable installer and you can see here it will download it as a zip file so i'm going to wait for the download to complete so now the download of this zip file is completed so i'm going to minimize the browser and i'm going to go to my downloads folder where i have downloaded this zip file and now i'm going to just open this zip file and in here i will be able to see this windows installer package so i'm going to double click on this windows installer package which is going to start the jenkins installation so i'm going to minimize this folder explorer and you can see uh jenkins 2.107.2 setup window so on this welcome window we don't need to do anything we just need to click next here and this will be the default location where jenkins will be installed so if you don't have the good reason to change it just leave it as default and then click next and then click install and then just click yes we're just going to start installing jenkins and in the end you will see this message which says completed the jenkins setup wizard click finish button to exit the setup wizard so i'm going to click finish so now jenkins is installed on your system and it will ask in which browser you want to open it so i'm going to click on google chrome and you can see on a port localhost 8080 you will be able to see this kind of window so if this window doesn't open automatically you just need to go to your favorite browser and then just write localhost colon 8080 so let's copy this here and just paste it here so http colon forward slash forward slash localhost colon 8080 the default port is port 8080 and i'm going to just click on this and then you will be able to see this kind of window okay so if it doesn't open automatically you can just browse on localhost port 8080 now first thing in order to unlock jenkins you just need to provide the initial admin password and this password is set in this directory so just copy this path here and then i'm going to open my folder explorer and i'm going to paste this path and you will see uh this file here which is initial admin password so you just need to open this initial admin password here so i'm going to just open it into my editor so i'm going to open it in the notepad and you just need to copy this initial password and then i'm going to minimize this window and i'm going to provide my initial password and then click continue now in the next step you will see a customize jenkins window so there are two options here install suggested plugins and the second option is select plugins to install so i'm going to choose this option which says install suggested plugins which is going to install the most suggested plugins in your jenkins installation so you can just click on install suggested plugins and this is going to start installing the suggested plugins so you can see there is a plugin for get here there is a plugin for subversion plugin for github ldap email extension and some other plugins so right now i don't have git installed on my system or ldap installed on my system or even ssh slave so if it shows some error it's okay so once all the plugins are successfully installed on your jenkins you will be automatically redirected to this page which says create first admin user so you just need to create the admin user credentials here so username let's say i'm going to take it as admin here and password whatever you want i'm going to give some password and then i'm going to confirm my password and here i'm going to give the full name for example admin once again and the next thing is email so i'm going to provide the email and after providing each and every credential you just need to click save and finish we're just going to say jenkins is ready start using jenkins so i'm going to just click on this button which says start using jenkins and you will see this kind of window so if you see this kind of window that means jenkins is fully installed on your system and jenkin is running on your system now if you want to see more about jenkins you will be able to see uh it inside your c directory and inside the c directory you just need to go to program files x86 and there will be a jenkins folder here and inside jenkins folder all the plugins are there so you can see the plugins folder and all the plugins are here and all the files related to jenkins will be stored here so if you want to dig deeper into jenkins you can always come to this directory and see what's happening so this is how you can install jenkins on your windows 10 operating system hey guys in this video i'm going to show you how you can download and install jenkins on your ubuntu or debian based operating system so in order to install jenkins you need to have java installed on your system but we will look into the documentation which version of java is required to install jenkins from the jenkins website so first of all just open your favorite browser and search for jenkins and the first link which will appear here will be from jenkins dot io so i'm going to click on this link and once this website is open there is a documentation given to install jenkins on linux or debian based operating system and this documentation you can find in the documentation section so i'm going to click on the documentation section and then just click on use jenkins now when i scroll down a little under user handbook section i can see this section which says installing jenkins so i'm going to click on this link and then you will see this section which is installing jenkins i'm going to put this link in the description so you can directly click on this link and come to this page now let's see the prerequisite of installing jenkins so here these are some of the system requirements and then you can see software requirement and here you can see java 8 either java runtime environment or java development kit is fine right so first of all we are going to uh install java 8 and then we are going to install the jenkins on our open operating system now when i scroll down a little you will see uh the installation process for different operating systems for example mac os or windows operating system and when you scroll a little bit more you will see the section for linux debian forward slash ubuntu and these are the steps you need to follow in order to install jenkins so we will execute these steps after we install the java version so i'm going to just minimize this browser and i'm going to open the terminal just press ctrl alt t in order to open the terminal or you can open the terminal from here also so once the terminal is open to install the java 8 i'm going to use the ppa and these command also i'm going to give you in the description so the first command is this sudo add minus apt minus repository ppa colon web up eight theme for slash java and then press enter and then give your ubuntu's password and then press enter and once again press enter and once this command is finished i'm going to paste the second command in order to install java 8. so this is the second command which is sudo apt install oracle hyphen java 8 minus installer press enter in order to install java 8. so now we can see this message here which says oracle jdk8 is installed on my system and then there is an important message here and this message says to set oracle java jdk 8 as default we need to install oracle minus java 8 minus set minus default so we are going to run this command which is given in the example which is this one so i'm going to just copy this command in order to set java 8 as the default java version so just copy this command which is sudo apt install oracle minus java 8 minus set minus default and paste onto your terminal and then press enter and then press y and once this command is finished we are going to check the java version so i'm going to just write java hyphen hyphen version and then press enter and this command gives us some problem i can see could not create java virtual machine so instead of giving double hyphen i think the command is java hyphen version and you can see this version java version 1.8.0 point something so if you see uh this version here that java 8 is installed on your system so let's clear the terminal so i'm going to clear the terminal so now let's start with the installation of jenkins so when you go to this page and you will see these commands somehow these commands did not work for me so i found on internet some commands which worked for me so the first command is this one so i'm not going to follow and copy and paste these commands because these did not work for me i'm going to copy these command and these commands i'm going to give you in the description also so we are going to give the first command and then press enter and then give your ubuntu's password and then the second command which is this one just copy and paste and then press enter and now the third command which is to update and now the fourth command which is to actually install jenkins which is sudo apt get installed jenkins and then press y and you can see this command is also finished so in order to check whether jenkins is really installed or not you can open your browser and here jenkins generally starts on localhost port 8080 so i'm going to just write local host colon 8080 and then press enter and you will be able to see this kind of page which says unlock jenkins so here we are going to provide the initial password which is saved at this location so we are going to go to this location but first of all i want to show you some more command in order to just manage junkins on ubuntu so because jenkins is installed as a service on your ubuntu operating system you can always use a system ctl status for example if you want to uh check the status jenkins okay so with this system ctl command you can start jenkins or stop jenkins or see the status of jenkins or restart jenkins also so when i give this command sudo system ctl status jenkins and then press enter it's going to give me the status of jenkins and right now it's active and running and for example i want to restart or start my jenkins once again instead of status i can just write start if i want to restart it i can just write here restart and it's going to be restarted so all these commands are for future references if you want to restart or stop in order to stop you can just write stop here so just write stop and jenkins will be stopped so these commands are for the future reference whenever you want to just manage your junkies or stop or restart jenkins now let's finish the installation process so you can see on this page it says unlock jenkins and you will see uh this path here and on this path the initial admin password is saved so i'm going to just copy this path whole path and then go to the terminal once again and then i'm going to let's let me clear the terminal first of all and here i'm going to just write cat and then just paste this part which i have copied from here which is this one and in this file your initial password is there and cat is used to just output the content of the file so i'm going to just do this it says permission denied so i will do this with the sudo in front of it so i'm going to just write sudo and then press enter and you can see uh this password here so you can just directly copy this password right click copy or what you can do is you can also use the g edit command so instead of cat you can just write g add it this is the graphical editor and here you will find the same password and then you can just copy and then you just need to paste this password here so once you have pasted your initial password i'm going to just click continue and i don't want to save anything and in here i can see two options for customizing jenkins one is install suggested plugins and other is select plugins to install so i'm going to choose the first option which says install suggested plugins so i'm going to click on this option we're just going to start installing the suggested plugins here so you can see uh different kind of plugins will be installed for git for example subversion or ldap or gradle and other plugins now keep in mind i don't have a git or subversion or ldap yet installed on my ubuntu operating system so it's okay if you don't have these installed previously so we will just install the plugins and whenever we want some software for example git or subversion or ldap or anything we will install it later so i'm going to wait for this plugin installation to complete so now the installation of all the plugins are complete and this page is redirected to this window where it says create first admin user so we are going to create our first admin user so you can provide any name i am going to just provide username admin here you can provide any name and then give some password which you can remember and which is strong so i am going to give some password here and i am going to repeat my password and now i am going to give the name for example admin once again and now i am going to give the email id email address and then i am going to just press this button which says save and continue and you can see this message which says instance configuration jenkins url which is this one which is a localhost 8080 which is ok for us for now so just leave it as default and then press save and finish and you will be able to see this message which says jenkins is ready your jenkins setup is complete start using jenkins so we are going to just press this button which says start using jenkins and now if you see this kind of interface you know that jenkins is working fine on your system so this is how you can install a jenkins on your ubuntu operating system hey guys in this video i'm going to show you how you can download and install jenkins on your mac operating system now in order to install jenkins we need to have java installed on our system and we will see which version of java we are required to install jenkins on jenkins page so let's get started and let's see how we can do it so first of all open your favorite browser and search for jenkins and in here the first link which will appear here will be from jenkins dot io so i'm going to click on this link and once you are in this website you just need to go to the downloads button so i'm going to click on the downloads button and then you will come to this downloads webpage right let's see the requirements of installing jenkins on our mac so in order to see that you just need to go to the documentation page i'm going to open this documentation page on the next tab so documentation page and then use jenkins so just click on documentation and then click use jenkins and in here we will just scroll down a little and we will just find the section which says installing jenkins and i'm going to click on this and once you click on this we will see the prerequisite of installing jenkins so here you can see the system requirements and under this you can see the software requirements and the software requirement says java 8 either java runtime environment or java development kit is fine so we need to have java 8 installed in order to use jenkins on our mac so i already have java installed on my system if you don't you just need to install it now once you have done this we are ready to install jenkins so just come to the downloads page and then just scroll down a little don't click on the download button we will just go down and we will search for the section which says mac os x now you can see here there are two categories here one is the weekly build so this is the most latest uh build you can get for jenkins and other is the lts version which is long term support version so we are going to download and install the lts version so just go under the lts section and then choose the mac os x so just click on this mac os x and this is going to start the download of this jenkins 2.10 which is the latest lts version dot pkg file so i'm going to wait for this download to complete so now the download of this uh dot pkg file is complete so i'm going to double click on this pkg file and now i'm going to minimize the browser and you can see here the installer for jenkins has been started so here i just need to click continue and the next step is to agree with the license terms and conditions so i'm going to just click on continue button and i'm going to just click agree and on this next step you will be asked how do you want to install the software install for all users of this computer so this is okay for me so i'm going to just click on continue and in the next step it says this will take around 74 megabyte of space on your computer and then click install to perform the standard installation so i'm going to just click on install button and here i just need to give my max password so i'm going to give my max password and i'm going to just say install software and this is going to start the installation process for jenkins so i'm going to wait for the installation to complete and once the installation is complete you will see directly on your default browser on the local host port 8080 this jenkins page will start automatically and it will say please wait while jenkins is getting ready to work okay so it will start automatically on localhost port 8080 so if it doesn't start you can just write on your favorite browser localhost port 8080 and you will see this kind of jenkins page and the first step is to unlock jenkins so the initial admin password for jenkins which is uh required here is saved on this location so you need to just copy this initial admin password from this location and then you just need to paste it here in the admins password so i'm going to just copy this path and once you have copied this path just open your terminal and in here you just need to write sudo and then cat and then just paste this path and then press enter and give your max password here and then press enter and then you will see this password here so you just need to copy this password which is this one in your case it can be different and then just paste this password here and then press continue so just paste the password you have copied and then press continue now on the next step you will be asked to customize jenkins so there are two ways of doing this you can click this button which says install suggestive plugins or you can click this button which says select plugins to install so we will choose the first option which says install suggested plugins and i'm going to click on this button which is going to start installing the suggested plugins these plugins are for example git or ldap or subversion plugin or gradle plugin so these are some of the suggested plugins which are suggested by jenkins to us so i will just wait for the plugins to install it will take some time to install each and every plugin so i'm going to wait for that and once each and every plugin is installed we will be redirected to create our admin credentials so i'm going to wait for that so now all the plugins are installed on the jenkins and i will be redirected to this create first admin user page automatically so after installing all the plugins you will see this page which says create first admin user so i'm going to create the first admin user and i'm going to just say username is admin you can give any name here username here and then give any password here and then repeat the password and then give your full name i'm going to just write and win once again but you are free to give any name which you like and here you just need to give your email whatever you like so i have given my email address and then i'm going to just press save and finish which is going to save this admin user and password and i'm going to just say never for this website and you will see this message which says jenkins is ready start using jenkins so i'm going to just click on this button we say start using jenkins and you will see the jenkins interface here right so here you can create your first job by clicking this button and then you can install other plugins to manage the users which we will cover in the later videos i'm going to click on this uh link which says create new jobs and from here you can create a different kind of jobs for example freestyle project or pipeline or multi configuration project or any other kind of project so this we are going to see later so this is how you can download and install jenkins on your mac operating system hey guys welcome to the next video on jenkins tutorial for beginners in the last few videos we have seen how to install jenkins on variety of operating systems like windows mac os and linux operating system now moving forward i'm going to use my ubuntu operating system in order to demonstrate jenkins functionalities because most commonly and most frequently jenkins is used on a linux operating system but having said that if you are running jenkins on windows or mac operating system you can also follow along with this series because most of the time we will be working with this uh jenkins ui on a browser so it doesn't matter on which operating system i'm working on now if you want to uh practice jenkins on a linux machine it's also easy if you have windows or mac operating system what you can do is you can install virtualbox or vmware player which are the software using which you can install linux or any other operating system virtually on your mac or your windows operating system i have already made some videos on how you can install ubuntu on virtualbox and vmware player so if you want to use ubuntu or any other linux system virtually on windows then you can install virtualbox or vmware player and install linux and then install jenkins on it and you can follow along with this series so in this video i'm going to show you how you can create your first jenkins job so let's create our first jenkins job so what i'm going to do in this jenkins job is i have a java program on my operating system which i want to build and run using jenkins and i'm going to show you how you can do it using your first jenkins job so to create a jenkins job you can either click on this link which says create new jobs or you can click on this option which says new item so i'm going to click on this option which says create new job and then you will see here an interface which says enter and item names so i'm going to give my jenkins job name as hello world here okay now you will be able to see few options under this name so there is a free style project pipeline multiconfiguration project folder and other options so to start with we are going to start with the free style project so just choose the freestyle project and then click ok and once your job is created you will be able to see this kind of a window here so first we need to configure our jenkins job so the first thing here is the general tab and here you can provide a simple description about your job so what this job is going to do is going to build and run java program let's say so here you can provide a simple description about your project and also you can preview your you know description here so it will be shown like this on your job window we can configure it and change this thing in the future so that we will be able to uh use the html tags also in the description and now let's move to the next section so under the description you will be able to see uh discard old bills when you build your jenkins job or github project or this project is parameterized for now we will not be using any of these options so just leave everything as unchecked and we will move to the next section which is source code management now by default you will see three options here one is none second is git and third is subversion so for now we will choose the none option because we will not be using any source control management system for this video but in future we will be using git or subversion in order to pull the source code from the github for example and then how to build or run the test on it so just choose the none option here and then we will move to the build triggers you can also click on this option which will just lead you to this category now here you will see few options first option is trigger bills remotely we will see this in the next video build after other projects are built this also we are going to see in the next video the third option is build periodically so we are going to choose this option for this video and the next option is github hook trigger for git scm polling and poll scm which is for the source code management system so these options we are going to see in the future when i'm going to show you how you can configure git and other options into your jenkins now by the name you can just guess that this option is going to build or you know run your test periodically but how we can configure our junkies to run periodically so for the help you can just click on this question mark here and then you will be able to see all the options which you can use here so you can see this field follows the syntax of chrome right so for example when i write s tricks asterisks asterisks asterix asterix using spaces so five extricts and between them i have used spaces this means that i want to run my jenkins job every minute and when you do this you will be able to see the hint here so it says do you really mean every minute when you say asterisks tricks as tricks asterisks and then it says perhaps you meant uh other option right so this when you write fivetime asterisks with the spaces in between them it means that you want to run your jenkins job every minute now if you want to read more you can read this whole document so you can see in the help window here this asterisk means these five options so the first asterisk here means the minute the second x tricks is for the hour third is for the date of month fourth is the month and fifth is the day of the week right and you will be able to see also some examples here uh when you scroll down a little so for example if you want to run your junkies job every 15 minutes you can use this option for example so i'm going to just copy this and paste it here and now it says would last have run at saturday at this time and the next time will be 15 minutes after that okay so if you have any confusion you can read this document and you can also use uh these example in order to run your jenkins job so to start with we are going to start building our jenkins job every minute so we are going to just give five asterisks here okay and you can once again collapse this help window when you click on this question mark here once again now let's go to the build environment which is this option so the first option here is delete workspace before build starts so we don't want to delete our workspace so we will not check this option second is use secret text and file we will see this option later third is abort the build if it's stuck we can also use the use it later at timestamp on the console output this we can use it but i'm going to skip this for now because we want to build a very simple uh jenkins job and i'm going to skip also the last option so i don't want to check any of the check boxes in the build environment now the next option is the build option and here you can just choose which type of build you want to perform so if you are on windows you can choose this option which says execute windows batch command which is the windows terminal if you are on mac or linux you can choose this option which says execute shell which is like executing command on your terminal now what we want to do in this execute shell so let me show you what i want to build here so in my home folder i have a directory called javasample and in this directory i have a file called helloworld.java and when i open this file i have a simple hello world program written here which only prints hello world right so i want to build this program using jenkins so to build this program i know that i can use java c command to compile my java program so i'm going to just copy the path where this file is located which is in this location which is home my username and this jenkins sample project and i'm going to just cd to this directory so cd to the java samples directory now here i can just run java c command in order to compile my hello world dot java file right so this is going to compile my code and to run my hello world program i can just use java and then hello world which will be the executable file so these three lines what they are going to do first of all we are going to change directory to the java samples directory and then java c is going to compile my helloworld.java file and then java hello world is going to run my program so after doing this you can just press on save which is going to save your configuration and if you want to change this configuration in future you can always go to this option so on the left hand side you will be able to see this option which says configure and when you press on this option this configuration window will open once again where we have done our configuration right and when you click on this option which says jenkins you will come to the jenkins home page now in here you will see first of all that there is no build here and the status of this build is shown by this glowing sun right and our project name is or our jenkins job name is hello world now we have uh configured our jenkins job to run every minute right so i'm going to click on this jenkins job for now and you can see even if we haven't started any uh jenkins job it has already started my jenkins job and the status here is a red ball which means my job has failed okay so we will see how so we will see why my job has failed so what i can do here is i can click on this job you can just click on this and you will see this kind of window and it says red here which means failed and when you want to see more about your build status you can always go here which says console output which is going to show what exactly happened and now in the console output you will be able to see what happened while running your job and why your job failed so in here i can see uh this message so while performing this step which is java c helloworld.java it says this message so error is error while writing hello world hello world.class permission denied and this most probably happens when jenkins doesn't have permission as a pseudo user on a linux machine most probably on windows it will run fine but on linux we need to provide jenkins the sudo privileges so let's change the sudo privileges so let's go to the hello world and you can see already there are three builds because we have configured to run jenkins every minute so don't worry about this what we are going to do is we are going to open the terminal to open the terminal i can just go here and just search for the terminal or press ctrl alt t on my ubuntu operating system and first of all what i need to do here is i need to open a file using a pseudo privileges so just write sudo and then forward slash etc forward slash sudua okay so i'm going to give you this command in the description also so just write sudo and then any tool which can open and edit your file for me i'm going to use g edit or you can use nano or vi or the best would be sudo vi sudo okay so just write sudo g added forward slash etc for slash sudos and then press enter and then give your ubuntu's password or debian's password and then at the end i'm going to just give a little space here and then at the end i just need to just give jenkins user all the privileges and i want to just give no password here so that it will not ask for the password okay so just provide this line in your ubuntu operating system in order to provide jenkins the sudo command privileges right and then just save this and then close this and now i'm going to go to the configure section once again and in here instead of writing java c something like this i can always give a sudo to compile my program so just write sudo in front of java c and if you are on windows most probably you won't be needing the sudo command so just skip this sudo command if you are on windows right so i'm going to save this once again and i'm going to build my program so this button is going to build your program immediately so it will not wait for the pre periodic trigger to uh you know build your jenkins job it will build your jenkins job immediately so you can see now our job shows a blue uh ball this means the last build was successful so let's go inside this build and then go to the console output and you can see now it prints hello world right so once again i'm going to go to my job and you can see previous all the previous jobs have failed because we haven't provided jenkins the pseudo privileges but now you can see this is the periodic bill which has been started and it's successful so in this section you can see uh the times at which your bill started and what was the status of build using the color of these balls and when you go on the main page when you click on jenkins here you will be able to see blue ball here which means that last build was successful and when you see uh this kind of rainy cloud here and you when you hover over this cloud you will see the status of last five bills so you can see it says build stability three out of last five bills failed right and when i run this build few times once again so when i want to just run this jenkins job five times so that the last five builds will be successful so you can see four out of five are now successful and now you can see this icon has changed so now uh the icon is like sunny and little bit cloudy and it says uh one out of five build have failed right so it shows the last five build and one once your last five bills are successful or were successful then you will see the whole sun here so i'm going to refresh this page and i'm going to go to the build here and let's see if the build has been started or we will start it manually using build now button and it's going to uh start the build and you can see the last five builds are successful now and when i go to the jenkins homepage you can see this bright sun here and you can see the message here which says no recent build failed so here this uh icon always so shows the status of last five build and this will show uh if your job is in progress or it's already uh is failing or last build was successful if it's blue now in this table you will also see some other sections here so this is the section where last build occurred so for example 8.9 seconds ago last build was occurred and this was the build number 14 and last failure was three minutes ago which was in build number nine and by default this status doesn't refresh by itself there is a small option here on the right hand side top and you can click on this which says enable auto refresh and this is going to enable the auto refresh after a few seconds so you will be able to see the most uh refreshed status here okay so you can see it refreshes after a few seconds and you can see the status last build last success was 47 seconds ago and last failure was 4 minutes 47 seconds ago so this is how you can create your first jenkins job hey guys welcome to the next video on jenkins tutorial for beginners in the last video we have seen how we can create our first junkies job now in this video we are going to see how we can configure our jenkins job so that we can run our jenkins job remotely or how to chain the job execution so let's see them one by one so i have created this hello world jenkins job in the last video so i'm going to click on this job and then i'm going to click on configure to change the configuration of this jenkins job now when you reach in the configuration area just click on build triggers and what this build periodically trigger was doing is it was triggering our job in a periodic way depending on the crown scheme we have provided here now let's say we want to trigger our job remotely then for that we can choose this option which says trigger build remotely so i'm going to choose this check box and i'm going to uncheck this build periodically check box and here you can see this option which says authentication token and you will also see this message which is a very helpful message which says use the following url to trigger build remotely so this will be the url format you can use to trigger the build remotely so i'm going to copy this uh url and i'm going to paste it into the next tab so here first option here is jenkins url so here you can give the ip address of your server for example right now it's a local host so i can just write localhost and then the port is port 8080 or if you have the ip address of this server then you can write the ip address of this server so for the localhost instead of localhost i can just write 127.0.0.1 or any other server ip address on which this server is working on now the next thing here is the token name in capital so this token name is i'm going to go to my jenkins job configuration and this token name is the token name which you will provide here so for example you can provide any complex password or anything here which will be your token name so let's say i just right here one two three four five and i'm going to save my configuration and then i'm going to go to my uh next tab and instead of the token name i will just provide the token name which i have given for my jenkins job which is one two three four five right now let's go to the jenkins job once again and i'm going to go to the home page of jenkins here you can see the last success was in build 24 and when i click on this job you will be able to see the build history so the last job was 24. so let me go to the next tab and i'm going to just give this url and then press enter which is going to execute my job so i'm going to just give my username and password here once again and then i'm going to just say remember me for this computer and then log in and once you do this and when you go to the junkies job and when you refresh it you can see the last build was built 25 which is triggered using this url okay so once again i'm going to refresh it and i'm going to just give this url once again on the next tab and then press enter and you will see in few seconds the new build occurs so this is how you can trigger your build remotely now the next thing i want to show here is how we can chain our jenkins job execution so let's say we have a scenario that we have created this jenkins job which was compiling the java program and running it right so let's say we want to create few jenkins job one jenkins job we want to create is to build our java program second is to run our java program and in the third jenkins job let's say we want to just display the success message so for that we need to create two more jenkins job and first of all we need to change the name of this jenkins job which is hello world so we will just rename it to uh hello world build first of all and then we will create hello world run jenkins job and hello world success message chenky's job or hello world message job so let me show you how you can rename your jenkins job so you can see the option here rename which you can use to rename your junkies job so instead of using hello world jenkins job name i want to rename it as hello world build so i'm going to just write hello world build and then i'm going to just click on rename which is going to rename my jenkins job to hello world build now let's create two more jenkins job one is hello world run so i'm going to just click on new item and here i'm going to give the name of my junkies job this will be the hello world run now one more way of creating the jenkins job if the jobs are relatively similar then you can copy the configuration of the old jenkins job into the new jenkins job using a copy feature and when you scroll down here you will see this option which says copy from and here we can just write hello world build which is the jenkins job from which we want to copy the configuration to hello world run job and when you click ok all the configuration of hello world build will be copied to this jenkins job which is hello world run and here we can just change the description so this job is only going to run the java program so i'm going to just change it to run java program and when i go down a little and in here i'm going to remove this line because this line was compiling or building our java program and this we are already doing in the hello world build change job and this is hello world run so i'm going to just remove this and i just want to run the executable file which was created by hello world build and this is the hello world run jenkins job and now i'm going to click on build triggers and instead of using this option which says trigger build remotely we want to build our jenkins job after the success of the previous job which is hello world build so i'm going to just uh copy the name of the jenkins job after which i want to execute this hello world run jenkins job so after hello world build i want to run hello world run jenkins job so just check this check box and just write the name of the jenkins job after which you want to execute your hello world run jenkins job and then i'm going to just save my configuration and i'm going to go to the home page and you can see there are two jobs now one is hello world build and another is hello world run i need to change the configuration of hello world build also because now we just want to build our java program using this jenkins job and not run it so i'm going to just remove the description here for run i just want to build java program and in the build trigger let's say we want to uh just trigger this build remotely or we will just click on the build now button and execute the build so i will not change this and when you scroll down a little from here i will just remove this java hello world command because this we are doing in hello world run jenkins jobs so i'm going to just remove this last command and save this so now both the jenkins job have been created you can create one more jenkins job and chain it in a similar fashion so let's create one more jenkins job and this jenkins job i want to name it as hello world let's say message okay so this is going to just print the message uh of the execution and i'm going to just say freestyle project and i'm going to just say okay i'm not going to copy the configuration and in the description i'm going to just display message and in the source code code management i will leave it as none in the build triggers this will be executed after the hello world run jenkins so i'm going to just check on this check box which says build after the other project build and here i'm going to just write hello world run i'm going to choose this option which says hello world run so this jenkins job will run after hello world run jenkins job is executed and now i will just scroll down a little and in the build section i will just choose execute shell and here i will just echo something so i will just write echo and in the double quotes i will just uh print something which i can recognize so i'm going to just print these echo messages and here in between the lines i want to just say success let's say and now i will just save my job and when i go to the home page now we have three jenkins job hello world build hello world run and hello world message so let's just start the build of hello world bill jenkins job so for that i can just click on this little arrow here and i can just say build now which is going to start the build of hello world bill and you will see after some time you can see this is in the queue so hello world run is in the queue so as soon as my hello world build is completed the hello world run will be executed and now you can see hello world messaging is in the queue because hello world run is completed so hello world message will be executed after the execution of hello world run and when i refresh this page now you can see here build number 27 last build was built number 26 and then after this build was successful hello world run jenkins job was triggered and you can see the build number one was triggered and after the success of hello world run hello world message was triggered which is triggered by the success of the hello world run and let's see the messages also so let's go to the hello world bill first of all and then let's see build number 27 and console.log and just build the hello world java program and it says success and now let's go to the hello world run which is going to just execute our executable file and let's see in the console it prints hello world it execute our hello world executable file using java hello world command and in the last uh jenkins job which is going just to print some message we can just go here hello world message and then when we go to the console output of this you can see this echo command and it echoes success so this is how you can chain your job execution on success or failure of the last build hey guys welcome to the next video on jenkins tutorial for beginners in this video we will see how we can do the jenkins integration with git and github so let's get started i'm going to minimize the browser first of all and if you are following this video series in the last videos we have created this java samples project and inside this java samples project we have a hello world.java file and this is the output of that file now let's say we want to commit this project to git and then we want to push the changes to the github repository first of all i'm going to show you how you can do it and then we will see how we can create a jenkins job out of it now if you are new to git and github in the last video i have shown you how you can install git and configure github on your ubuntu operating system so just watch the last video of this series and you will be good to go so for committing my file on git uh let me open the terminal first of all so i'm going to just press ctrl alt t to open the terminal and first of all i will just cd to my java samples directory and in order to initialize a git project in this directory i can just give this command git init and then press enter and this directory will be added to the git now in order to see the status of all the file i can just give this command get status and then press enter and you will see this message which says untracked file because we haven't added and committed these files to git so let's do that so to add these files to git we just need to write git add and the file names one by one helloworld.class space helloworld.js and this will add both these files to the git and let's do git status was once again and now you will see both the files and the message is changes to be committed so let's commit these files so to commit on git you just need to give this command git commit minus m to give the message and here you can give any message which you want to provide for your commit so for example first java comment let's say or any other message which you like to give to your comment and once again we can commit these files one by one so just give the first file name and then space and then give the second file name and then press enter which is going to commit these files to the git now let's check the status once again so get status and you can see nothing to commit working tree clean so now we have committed these files to git but in order to push them to github we need to create a repository on github so i'm going to go to the browser and i'm going to go to github.com and log in with my credentials there and here i will just click on start a project let's say i just want to give the name java hello world and then you can give the description here which is optional but for now i'm going to leave everything as default and i'm going to just press on create repository which is going to create a blank repository for me now in here you will see uh two help messages one is to create a new repository on the command line and other is to push an existing repository from the command line so we have already created our git uh repository so we will push this repository using command line so we will choose the second option which is this one and for that we need these commands so i'm going to just copy the first command which is going to just add the remote origin to my project so this is my project and i have already committed these two files to my git and to add it to my remote origin i just need to give this command git remote add origin and the url of your git repository which is this one or simply you can copy this command which will be enough so once you have copied and pasted this command just press enter so this command is successful now let's copy the second command in order to push our changes to the repository so i'm going to just copy the second command and go to the terminal just right click paste and then press enter and this is going to push our changes to the github first of all we need to give our github credentials here so first of all the username and then press enter and second is the password and then press enter and now your files will be pushed to your repository so once you have done that i'm going to just go to uh this repository which i've created and i will see these two files which i have committed to the get in this folder which i'm working on so once you have created your repository on github you can go to jenkins and let's create a new project here and here i'm going to just give the same name which my repository has which is java hello world and then i'm going to choose the freestyle project and i'm going to click ok and in the description i will just say java hello world example and rest everything we will leave as default and now click on source code management and because we are working with git so now we will click on the get option and here you can give your git repository url so to get the git repository url you can just uh go to your repository and click on this green button which says clone or download and then just copy this url from here and then paste this url here which is repository url and now we will scroll down a little and here it says branches to the build so by default you can see there is only one branch in our git hub repository which is master branch so we will leave this as default but if you want to have multiple branches in your github and then you want to clone for example a development branch or any other branch you just need to give the branch name of your repository here which you want to clone okay so right now we only have the master branch so we will leave this as default and next option is repository browser so we will also leave it as default and now we will go to the build triggers and for now i will leave everything as default but we will see how we can choose this option which says poll scm or other get option in a moment but first of all i want to show the simple way of just cloning and building your jenkins job so just leave everything as default in your build triggers and then build in environment also i'm going to leave everything as default now in the build option we will choose execute shell here and here we will give the commands to compile our helloworld.java program so we will just say java c helloworld.java which is our java file which is this one so we want to compile this one and then we want to uh just run this file so for running we will just use java hello world and by now i think you already know what these commands are doing and let's go to the build environment once again so here in the build environment you will see a few options so first option is delete workspace before build start and this is important for us so i'm going to show you what this is in a moment but first let me save this job first of all and once your job is created let's go to the home page and in here let's build this uh job so i'm going to just click on this arrow button and i'm going to just say build now and now the build of this job will start we are going to just go inside this java hello world and you can see here our build is successful so i'm going to go inside this build and i'm going to go to the console output and here you will see more details so first of all you will see the location where your github repository is cloned and this is the location where your github repository is cloned right and you can see in the next command it has cloned our github repository and after the cloning these two command has been executed so first was the java c helloworld.java which is used to compile our hello world program and then java space hello world which have resulted in this output which is hello world and our job is finished with success so this is how you can clone your repository and you can just build your job using github repository now let's go to this location which is the default jenkins location where your repository has been cloned okay so i'm going to just just copy this path from here and i'm going to go to the terminal and open the next terminal and i'm going to just give cd and whatever path you have copied and i'm going to just press enter here and i'm going to do ls here and you can see both of your file are here so hello world.class is there and helloworld.java is there now let's see if some more configuration options for our jenkins job so i'm going to go to my janky's job and i'm going to go to the configuration now and once again in the configuration i'm going to go to the build environment and i'm going to choose this option which says delete workspace before bill start so this is going to delete this workspace before our bill starts so this is the workspace of jenkins and if you choose this option this is going to delete the workspace before this jenkins job starts right so i'm going to save the job and build it once again and hopefully this will also be successful and i'm going to go to my job and then see the console output and you can see uh building in workspace once again and then first of all it has deleted our workspace and once again cloned our repository okay so this is the extra step when you choose the delete workspace option now let's see some more configuration options so i'm going to go to the configuration of my jenkins job and this time i'm going to go to my build triggers and in the build triggers i'm going to choose this option which says poll scm and this option works similar to the build periodically option which works on the chrome mechanism so if you give five asterisks here this is going to pull every minute to your repository for any changes and if you have done any changes to your github repository this is going to detect your changes and if there is any change then it's going to build uh your job once again so let's uh save this job so to trigger this job now what we need to do is we need to do some changes to our github using git so in this project what i'm going to do is in my java samples project where i have committed my java hello world files using git i'm going to do ls once again and you can see there is no read me into my repository so i'm going to add a readme file into my repository so to do that i'm going to use the touch command so just write touch read me dot md which is the readme file name and then press enter and do ls and you can see this readme.md is created and to edit this file i'm going to just write g edit g edit is the editor you can choose any editor you want and then the file name which is readme.md and once this editor is open i will just copy and paste some readme content into this readme.md file and now i'm going to just give the gate status command so just give this git status and you can see this there is one file which is untracked so we are going to add this to the get first of all so get add and the file name once again and then i'm going to commit this file once again do the get status and then let's get commit so get commit minus m and in the message you can just write read me added and then the file which you want to commit which is readme.md and then press enter and now we just need to push our changes to github and for that we will use the get push minus u origin master command and then press enter and this will push our changes to github and once again give the github credentials and the password and then press enter and our changes are pushed to github so you can see here that this readme file is there and all the content of readme file is visible now and on the jenkins job when i refresh this you will see this third job is triggered and you can see it's working so you can just click on the third job and i will go to the console output and you can see it just says started by scm change which means it is started by the change in our repository which is polled every minute and once this change is detected then it's going to start the cloning of your git repository and your junkies job will be billed after that so this was the option to pull your github repository every one minute and if the changes are detected then it's going to trigger the build and your jenkins job will be executed so this is how you can integrate git and github with jenkins hey guys welcome to the next video on jenkins tutorial for beginners in this video i'm going to show you how we can create users in jenkins till now we only have one user which is admin user which we have created at the time of installation of jenkins now generally in teams we have different users with different roles so for example a software team can have a team lead which can be a admin then we have developers qa guys or testers or we can have the operations guys or devops guys who are responsible for the provisioning and the deployment of the software so for that we need to give the credentials to those users so they can log in with their account and then they will be able to configure and build their own jobs so let's see how we can create users and jenkins so just go to the home page of jenkins and then just click on manage jenkins and once this many jenkins page opens just scroll down until you have found the section which is called manage users so just click on the manage users and you can see there is only one user is there till now so we will create a new user to create a new user you just need to click on create user and then you just need to give the username of that user you can say user one and the password of that user and this password the user will be able to change later so you can just provide the initial password here and then just provide the confirmation of the password and then provide the full name of the user for example the user one once again and then provide the email address of the user and then click create user this is going to create the new user let's create one more user so this time this user will be user 2 and then i'm going to quickly provide the password confirm password and then the full name this will be user 2 for example and then the email id and then create user which is going to create the user so now we have two users so you can see we are logged in with the admin user so let's log out and then let's login with the user one credentials so just give the username and password of that user and then just log in and now you can see i'm logged in with the user one account now you can see a little arrow icon here beside the user one name so you just can click on that and just click on the configure option and once you click on that here you can provide some more configuration option for this user one account so some description what is his title or what is his job and then api token so you can see the api token this we will discuss in the later videos how we can use the api token for the user but you should know you can find this api token here and then the credentials the email id and the password can be changed later from here so user1 can change his password from here and also the ssh public keys so if this user has to authenticate with his keys then you can provide the public key here and if you want some help you can just click on this question mark and you will be able to see some hint here so this says list ssh public keys that are associated with the user these keys can be used for example by jenkins cli so jenkins cli we are going to see how we can use jenkins cli in the later videos so if you are curious about jenkins cli then we will see it later so this is how you can provide the configuration for the user in jenkins and after the configuration you can just save the configuration and then the configuration will be saved let me log out once again and let me login with the admin credentials once again and you can see the admin have the access to view all the project and when i log in with the user one account or user two account he also have the access to view all the project here in addition you can see uh the manage jenkins option for the user one also and when i click on that this user have all the access to change the configuration of the system or change the global security or he have the access to do anything which admin user can do and this can be a problem for example this user one is a developer and he has all the admin rights and this is sometimes not desirable the admin right must lie in the hands of the admin only so for that we have the option to install some plugins and then provide the access to the roles which this user have so we will see how we can install this plugin to assign roles or manage roles or manage users in the next video hey guys welcome to the next video on jenkins tutorial for beginners in this video we will see how we can install plugins in jenkins now this video will be the continuation of the last video in which we have created the users and we faced a problem the problem was all users were having same access to all the projects and we wanted to restrict the access to the user based upon his role so for that we wanted to install some plugin and this plugin we will install in this video so to install plugins in jenkins we need to go to the manage jenkins page so just click on manage jenkins and then when you scroll down you will be able to see this section which says manage plugins so just click on the manage plugins section and you will be able to see uh four tabs here first tab is for updates so whatever plugins are already installed at the time of installation you will see uh the update information of the plugins which have the updates so if you want to update for example this apache http components client plugin you can just check on this and then you can say download now and install after restart but we want to install a new plugin so we will go into this section which says available so in available section there are many plugins which are available and for now to restrict the access of the project to the users and groups we need to install a plugin called role based authentication strategy so you can just filter the these plugins using this search box so just write role for example and all the plugins will be shown which have the keyword role and there is only one plugin available which is role based authentication strategy and this is the plugin we want to install so we will check this check box and if you want to know more about this rolebased authentication strategy plugin i will rightclick on this link and i will open this in the next tab on new tab and you will be able to see more information about this plugin so you can see this is the website plugins.jenkins.io role strategy and you can see about this plugin and you can see the introduction about this plugin so this plugin adds a new role rolebased strategy to use and fasten user management so it can create global roles it can create project roles it can create slave roles and also assigning these roles to the user so here also you will be able to find more information about this plugin and how to use this plugin also you will be able to see the documentation about this plugin when you scroll down now there are two ways of installing plugins one way is to search in your jenkins in the available tab and you will be able to find the plugin and then we will click this button which says download now and install after restart or the the second way of installing the plugin is i am going to show you so for example we want to install this dependency which says metrics authentication strategy i am going to open this in the next tab and in this tab you will be able to see when you scroll uh down the latest release of this plugin so i'm going to click on the latest release which is going to download the dot hpi file so this uh plugin is called matrix out dot hpi file is the plugin right so we are going to save this uh plugin and once this file is downloaded this hpi file is downloaded we will go to the jenkins and you will be able to see this advanced tab here and in the advanced tab when you scroll down a little you will be able to see this option which says upload plugins and you will be able to just click on this button which says browse and then just select your hpi file and upload this file and in this way you will be able to install that plugin also now we are going to install our plugin using the jenkins in the available tab so i'm going to once again search for the role based authentication strategy i'm going to just check on this check box and i'm going to click on this button which says download now and install after restart and then you will be able to see this page which says installing plugins or upgrades and then it says role based authentication strategy download it successfully we need to restart our jenkins so we will just check on this check box which says restart jenkins when installation is complete so i'm going to just check on this check box so it's going to restart the jenkins once this plugin is installed so i'm going to wait for some time until this jenkins is restarted and now i can see this message which says please wait while jenkins is getting ready to work after the restart and now the jenkins has been restarted i think so we need to log in with our credentials and i'm going to say login and after i logged into the jenkins i'm going to go to the manage jenkins section so i'm going to click on manage jenkins and then i will go to the manage plugins section and then once the plugin is installed you will be able to see it in the installed tab so i'm going to click on installed and then i'm going to search for role based authentication strategy you can see uh this plugin here which says role based authentication strategy so this plugin is now installed so now we can use this plugin and this we will see in the next video how we can use the role based authentication strategy plugin to restrict jenkins project access to the users and group using roles hey guys welcome to the next video on jenkins tutorial for beginners in this video i'm going to show you how to restrict jenkins project access to the users and group using roles now this video will be the continuation of the last video in which i have shown you how to install the plugins in jenkins and we have installed the special plugin to restrict the project access to the user which was role based authentication strategy plugin so you can see in many jenkins when you go to the manage plugins and then you will go to the installed section here and you can search for role here and if you have in your installed section this plugin which is role based authentication strategy then this video will be beneficial to you otherwise you need to install this plugin so once you have this plugin installed let's start using this plugin to restrict the project access to the user so once again i'm going to go to the manage jenkins and first of all let me create some users so that we can restrict the project access to them so i'm going to go to the manage users first of all so right now i have admin user and i have one more user which is user dot let me create some more users so i'm going to create reuser.2 and then the password for user 2 and the full name i'm going to just leave it as same user.2 and the email address and then create user and i'm going to create one more user user3 and the password and the full name user.3 same i will leave it as default and then the email id so now we have three users user.1 user.2 and user.3 now let's go to the manage jenkins once again and this time just go to the section called configure global security and once you are in configure global security section make sure that this option is already checked which is enable security and then just scroll down and in the authentication section you will see a new option here which is role based strategy this will appear after the installation of the plugin which was rolebased authentication strategy so we are going to check this option and then save it so once you have checked the option rolebased strategy in configure global security when you will scroll down now you will see a new option which is manage and assign roles so i'm going to just click on this option which says manage and assign roles and here we have three options manage roles assign roles and role strategy macros so i'm going to go to the first section here and here you will see the global roles global roles are the roles which are globally configured for example admin is a global role let's create a new global role for example employee is a global role we will just add it and for employees we just want to give the overall read access to the global role employee and we want to give the view access to the employee role and all other access we don't want to give for example credentials or agent creation or job creation for the employees uh for now i'm not giving any uh access to the employee role now when i scroll down a little you will see project roles so under this project role section you can provide the project based roles and authentication so for example we have a java developer role so i'm going to just say java hyphen developer and in the pattern you can provide the access of the jenkins job based upon this pattern to the java developer for examples so let's say any project which start with the keyword java is accessible to this role java developer so i'm going to just write the pattern of that which is java dot strix this means that any name any jenkins job name which starts with java will be accessible to this role which is java developer so i'm going to add this role and i'm going to provide all the access for this jenkins job to the java developer so now the java developer role is created let's create one more role which is for example we have intern in our team so i'm going to just write in turn and in turn will have the access to the projects which start with hello so all the project which starts with hello in turn will have the access to only those projects i'm going to just give the access to the role intern now let's add one more project role here for example tester so the tester will have only the access of the project whose name start with a test for example okay so i'm going to just add this tester role and then i will provide the access to these type of project to the tester so once these roles are created and you have given all the access for these project to the roles then you can save your configurations and we will verify this configuration by just going again to the manage role section and you can see employee role is there and our three project roles are there also which will have the access to these kind of patterns now i will just come out i will just click on manage and assign roles once again and this time i will go to the assign role section and in here in the global roles we only have the user admin here so we will add some more users here for example user dot one is the first user we will add and then user dot 2 is the second user and user dot 3 is the third user and let's say all of them are employees so the global role we are assigning to user one user two and user three is employees so none of them have the admin role now i will scroll down and here under item roles i will once again add the users first of all so user dot one and then user dot two and user dot three now let's say user one is a java developer user two is an intern and user three is a tester so i will just check the roles which is belonging to the user and then i will save this configuration once again and i will verify this by just going again into the assign roles and you can see uh user one user two and user three have the employee global role and user one is a java developer user three is a tester and user two is an intern now once you have done that i will just go to my jenkins home page and you can see i'm logged in as an admin so i can see every project here and when i log out here and i will just log in with user one credential and i'm going to log in and you can see user1 was a java developer so user1 can only see the project which start with the keyword java so java hello world and java job i'm going to log out and now i'm going to log in with the user 2 credentials so user.2 and the password and login and you can see user 2 was an intern right so user 2 will have the access to all the junkies job which start with the keyword hello so hello world build hello world message hello world run and let's see what project does user three have so user.3 and then i'm going to log in with his credentials and user 3 doesn't have any project because we don't have any jenkins job related to the tester so when i log in with the admin credentials you can see there is no jenkins job which start with the keyword test so let's create one jenkins job so i'm going to just click on new item and i'm going to just say test project 1 okay so test project 1 and it will be a freestyle project and i'm going to just click ok and in the configuration i will leave this configuration as blank because we just want to test this jenkins job if the user 3 has the access to this jenkins job or not so i'm going to just save this jenkins job and i will go to the home page once again so now we can see we have one new jenkins job we start with the keyword test so i'm going to log out once again and i'm going to log in with the user3 credentials and now you can see user 3 have the access to the project which start with the keyword test so in this way you can use the role based authentication strategy plugin and in this way you can restrict the jenkins project access to the users and group using their roles hey guys welcome to the next video on jenkins tutorial for beginners in this video we will see how to do some of the basic configurations in jenkins using a section called configure system in many jenkins so when i click on manage jenkins there is a section called configure system and here we can do some of the basic configurations about jenkins so we will start from the top the first option here is home directory and you will see the location of your jenkins home directory in the file system so when i copy this path and when i open the terminal and i will ct to this path you will be able to see all the you know configurations file or jenkins related files are present inside this directory so you will see config dot xml file you will see jobs directories nodes directories plugins directories where all the plugins will be installed or the users directory and the workspace directory so all the configurations related to jenkins you can do here and when i click on this question mark here beside this option you will be able to see more information about this option so by default jenkins stores all of its data in this directory on the file system there are few ways to change the jenkins home directory so this is the procedure which is given here to change the home directory of this jenkins so if you have the good reason to change it you can follow these instructions to change the home directory now second option here is system message so this is the message you can show on the home page of jenkins so for example i can just write some message here this is my jenkins home page let's see okay and i will just save this option and when i save this option you will be able to see this message is displayed on the top of your home page above all the jenkins job so i will once again go to the configure system and this system message also supports the html tags now you can see a little section here which says plain text this is the support format which this box will support now we can change it to support the html so for that we need to go to the manage jenkins option once again and then go to the configure global security and inside the configure global security you will be able to find a section called markup formatter and by default it's a plain text here selected we can choose the safe html here and then we can just save this option and once you save this option we can just refresh this configure page and now you will see here safe html is displayed here so this is the default format which this message will support so for example now i can use the html tags here for example i want to just show this message in h1 tag so i can just use this h1 tag here h1 and then i can preview this message from here so i can just click here and this message will be displayed like this on my home page let me save it and let's verify this so you can see it's shown in the h1 tags now this uh system message so this is how you can just display the system message here now the next option here is the number of executors and for example this number is 2 by default that means that two jobs can run parallelly on this jenkins right if i can change it to five then it will allow the five jobs to run parallelly so you can change this number from here number of executors the next option is labels this is a little bit detailed concept when we use the master slave concept and nodes we will see how to use labels so i'm going to leave this for now we will see how labels work in the future lectures now the next section here is the usage and by default the usage here is use this node as much as possible because we only have one jenkins node which is this node that's why the default option is use this node as much as possible but when we will learn how to create nodes and how to provide labels to our nodes then later we will be able to choose this option which says only build jobs with labels expression matching this node so this we will learn later when we will see how to create nodes and how to assign labels to our nodes so for now i will leave it as default for more information you can just click on this question mark and you will see some more description about this usage section so controls how jenkins schedules built on this node okay so you can read more about this option here now the next option is the quite period now the quiet period it's in second i'm going to just click on the question mark once again and here it says when this option is checked newly triggered bills of this project will be added to the queue but the jenkins will wait for the specified period of time before actually starting the bill so jenkins will wait for example for five second before starting this build so sometimes for example you use the source code management system and your committing will take some time or when you push your code it takes some some time to uh you know get into your github repository or for any other reason for example your jobs takes some time to start you can specify this quiet period here so that your jobs or your build will start after this specified period so by default it's five but you can change it in future when you feel that your jenkins will need more time to start so just uh provide the quiet period here this will be in seconds so after five seconds your build will start after the triggering of this job now the next option here is scm checkout retry count so this is the option where for example you are using your scm source code management system let me go to the home page and let me show you one example so i will go into one uh chenky's job here and i will go to the configuration section here and then i will scroll down for the build triggers and you will see pole scm option here so when i select this pole scm or github hook trigger for gitz scm polling then this is the option for number of tries so this jenkins will try to connect to your github for example this much number of times right now it's zero but for example you set it to five then jenkins will try five time to connect to your github before giving or showing some error now the next option is restrict project naming so let's see this option also so by default it's default now you can choose the pattern option here or you can choose a role based strategy option here also so let's see what this pattern option do so i'm going to click on this question mark and you can see some description here which is define a pattern or a regular expression to check whether the job name is valid or not so for example i define some pattern here for the naming of my jenkins job so let's say i define java.astrix that means my jenkins job which i will be able to create will start from java and not any other keyword so let me save this option and once this is saved let me try to create a new genghis job and let's say i just you know give some name here and instantly you will see this message which says dab does not match the job name convention pattern which is java dot asterisk which means that your jenkins job name should start with this java keyword so let's say i will just start the name with java keyword and now i can see that there is no warning here okay any other pattern it's going to show this warning here okay so this pattern option you can use to give some kind of pattern for the naming for now i will just choose it as default so i'm going to just revert it back to the default option but if you want you can just change it to anything you want in the future okay now next section here is the global properties and in the global properties you will see uh two options here one is environment variables so here you can give all the environment variables which you want to give to your jenkins job globally for example so let's say i want to give let's say java home environment variable i can give it from here so i can give the value of this java home environment variable and the name uh from here okay or any other environment variable which you want to use in your jenkins job execution you can give it from here now the next option here is the tool location so this is the tool location so for example you want to use some tool let's say git so the binary path for this git you can give it from here now the next section here is the pipeline speed durability settings and this we will see in the future videos i'm going to skip this section for now and then you have the usage statistics option which will help make jenkins better by sending the anonymous usage statistics and crash reports to the jenkins project so if you want this option you can check it or uncheck it according to your needs and then next section is the time stamper system clock time format and elapsed time format this is the format which jenkins will support but you can see in the details you can support any other format which is uh given here so here you can just define the time format which you want to show now in the next section you will be able to see the jenkins location before that there is administrative monitor configuration and you will be able to see uh this option which says enable administrative monitoring and here you can see administrative monitoring are the warnings shown to jenkins administrator about the state of jenkins interface so you can check these options whatever warning you want to see so for example you want to see the dependency warning or you want to see the invalid plugin warning or if you want to see the disk usage warning all the warnings you can set up from here by default every warning is selected but let's say if you want to skip some warning you can just uncheck this option and then this warning will not be shown to you let's go to the next option here which is the jenkins location by default we are using the local host but you can give any host name uh instead of this local host now next option is the admin email address you can provide your admin email address here and then you have the github server option so if you want to add some keys for your github server you can provide those keys or you can give the name of your github server here and then provide the github servers credentials from here we will see this later how we can do it and then you have the github enterprise servers so if you are using some private servers to host your repositories like github private repository then you can add the information about that here now the next section is the pipeline model definition this we will see when we will see the pipelines how pipelines works then you have the build time mount plugin options so whatever plugin you have just installed or whatever plugins there is in your jenkins there are some options you can set for those plugins here for example so get plugin or subversion plugin shell plugin extend email notification plugin and any other you know information you can give it here so you have the email notification smtp server configuration you can do it from here so these are some of the basic configuration you can do for your jenkins as an administrator hey guys welcome to the next video on jenkins tutorial for beginners in this video we will see how we can build or test a simple maven project using jenkins so let's see how we can do it so what i have is i have a simple maven project inside my maven workspace directory and the name of my maven project is my app this my app project i have created using the maven website so once you are on the maven dot apache dot org you can just go to use section here and inside this use section you will be able to see this this five minute test and i have used all the commands here to create a project so this section i have used so i have used this command which uh created the my app directory where my maven project is there so if you want to follow along you can just give this command and then this my app directory will be created with the maven project so once you have this project let's open the terminal first of all and i'm going to just go to this directory and uh what we can do here is for example we can give mvn clean and test command and then press enter which is going to clean our project and then run the test inside this pavement project and you can see all the tests are runs and there is no failure and bill is successful so let's say we want to execute this clean and test goals using jenkins and first of all we want to check our code into github and then we want to for example clone the code from the github repository into our jenkins and then execute these goals how we can do it let's see so first of all for that i need to create a github repository so i will go to the github and i will log in with my credentials here and once you are logged in with your credentials i'm going to just click on this button which says start a project and in the repository name i'm going to just write my app and now i'm going to just leave everything as default and i'm going to just click on create repository so now my github repository is created and now you can see you have two options here one is create a new repository on command line and second is push existing repository from the command line so we will use the first option here first of all we will uh initialize the git into our project and then we will commit everything and then push it to our git repository so let's do that if you want help then you can just follow these commands we will just execute the similar kind of commands on the terminal so this is our maven project i'm inside my maven project so i'm going to just write git init command which is going to initialize git inside this directory and then i'm going to just write get status to know the status of this directory so i can see there are two directories here and one file here so i'm going to add this to the git so i'm going to just write git add and then i'm going to just add a target for example and then source and then palm dot xml alternatively you can also write git add dot which is going to add everything which is there inside your project directory so i'm going to do that and then press enter and once again i'm going to give the git status command and you can see these all files are added to the git now so one thing which is remaining is to commit everything into the gate so we will do that i'm going to just write git commit minus m and then the message for the committing for example my first maven commit and then you can just give a space here and then write dot which is going to commit every file inside your project okay so get commit minus m then the message then this dot and then press enter and everything will be committed into git so i'm going to once again uh give the git status command and now you will see on the branch master everything is clean so we are ready to just push this project to our github repository now at this point you just need to copy this command which is git remote add and then whatever is your repository url dot get and this is going to add the remote origin for the github to your project okay so i'm going to just copy and paste this command which is git remote add origin and whatever is your repository url and then press enter and this repository is added and now i'm going to push everything to my github repository using this command which is git push minus you origin master and i'm going to just paste this command and then press enter and this is going to ask for my username for github and my password for the github and now everything will be pushed to my github repository so let's check whether everything is there or not so i'm going to just once again click on my repository which i have just created and now you will see everything is pushed to my github repository and this is the message which we have given at the time of committing and you can see we have committed this two minutes ago okay so now once your project is there on the github let's create a jenkins project first of all so i'm going to just click on new item and here i'm going to just write first maven project and i'm going to use the freestyle project for now there are plugins available on jenkins which makes it easier to create and run a maven on jenkins but for now i'm going to just use this option which says freestyle project and i'm going to click on ok and in the description i'm going to just write first maven project and then i'm going to just check this option which says github project and then i'm going to copy the url of my github repository and i'm going to just paste this url and then i'm going to leave everything as default and in the source code management i'm going to choose get option here and once again i can just go here and click on this green button and copy the url here for my repository and i can paste it here okay i don't need any credentials for now and the branch i'm using is the master branch you can see i only have one branch in my project which is the master branch but if you have different branches you can provide your branch name here instead of master and now i will leave everything as default and here you can choose different kind of build triggers for now i'm going to just choose this option which says github trigger for git hcm polling and then in the build environment i'm going to choose this option which says delete workspace before build start which is going to delete our workspace and then run the goals on our maven project okay so just check this checkbox and then we will move to the build section here and inside the build section there is a special section for maven which is this one which says invoke top level maven target so we are going to use this option here and if you want to see the more advanced option you can click on this button which says advanced and here you can give the perm file directory path if this file is located somewhere other than your default project path okay and then you have more options here for example jvm options or properties uh to give here for now we will just provide the goals for our maven project which is clean and test using the space here and then i'm going to save my jenkins job and let's run our junkies job and let's see if it works fine or not so i'm going to just click on this build now option which is going to start the jenkins build and then i'm going to click on the build history option which is going to show me my console output so i'm going to click on console output and you can see uh first of all we will see the default path where this project is uh checked out so you can see var liv jenkins workspace and then inside the workspace this project will be created genghis project and then our git repository will be cloned and you can see already maven is running the test here and once the tests are successful at the bottom we will see if it's successful we will see the message success otherwise we will see the message failure okay so once again i'm going to go back and i'm going to go to my project here and you can see this build is successful now so everything ran successfully now let's say we are going to define a goal which is uh not available inside your maven project so we will define some goal which doesn't exist and let's see what happens then so i'm going to just say some goal and i'm going to save this and then let's see what happens i'm going to just start the build again and i'm going to just go to the build history of this jenkins build and then console output and you can see once again the repository will be cloned and now you will see the failure because this some gold gold doesn't exist so it's going to show us this error message and then the last message here will be the failure and once we will go to the home page of jenkins now you will see this red ball icon here because our last build was unsuccessful okay so just give the proper goals here which are logical so clean and test are running for our maven project so we will just give those uh goals here and once again run the build and you will see the build will start and in the console output everything will be checked once again and then you can see success once again so this is how you can test and run a simple maven project on jenkins using github hey guys welcome to the next video on jenkins tutorial for beginners in this video i'm going to show you how you can send email notifications using jenkins so first of all in order to send email notifications using jenkins you need to know the smtp server details of your email provider which you want to use in your jenkins so this you can easily find on internet you just need to search for smtp server list and you will be able to find all the informations about the smtp server on one of the websites like this so let's say i want to use the gmail as my email provider to send the notifications so you can see smtp server details of gmail is given here so this information i'm going to use in order to configure the email notification in jenkins so i'm going to go to my jenkins home page and then i'm going to go to manage jenkins and inside this configure system window you will be able to find the email notification setting at the very bottom so you will be able to see this section which says email notification and just above this section you will be able to see this section also which is extended email notification so this extended email notification is a plugin which you have already installed at the installation of your jenkins so if you have chosen install suggested plugins then this plugin will be installed in your jenkins and you will be able to see this option but for now i'm going to use the default option which is the email notification option which is at the very bottom so here you will be able to see this option which says smtp server so smtp server for gmail is smtp.gmail.com so i'm going to just give this information here and then you just need to give the default user email suffix the default email user suffix of gmail is at the rate gmail.com and then you will be able to see this advanced setting button you just need to click it and then just check this check box which says use smtp authentication and now you just need to give your username and password username is your email address from which you want to send your emails so i will give my gmail address here so it can be anything for example example there gmail.com and then you need to give the password of that email address so i'm going to give the password of that email address and then i'm going to just check this checkbox which says use ssl and the smtp port let's see what is the smtp port for that so smtp port for uh this gmail server is 465 so i'm going to use uh this port here and then you will be able to see this section which says reply to i'm going to leave this as blank and you can also test your configuration for your email by sending a test email to any address so here in the test email recipient you just need to give the email address of the recipient so i'm going to give here the recipient email address and then i'm going to just press on this button which says test configuration and then it's going to send this email so you can see this message which says email was successfully sent now in some cases you may also encounter some errors which can be resolved by just going to your email account by turning on an option which is called allow less secure apps so you will be able to see this kind of option and you just need to turn it on and you will be able to send emails from your gmail account to any other email so once you have done the email notification configurations and you have tested your configurations you can just save your configurations and once your configuration is saved you can just go to the jenkins job in which you want to use this email notification so i'm going to just use this jenkins job it says hello world build and then i'm going to go to the configuration of this job and then i will scroll down and i will go to the section which is called post build actions and then when i just uh click on this list i will be able to see two options related to email notification one is editable email notification this is a plugin so we haven't configured this plugin yet so we will use this option which is email notification we have done the configuration for this op so just use this option which says email notification and then you will be able to see this kind of uh option for recipients so you can just give the email address to which you want to send an email when your build fails and you can see this is the option which is enabled by default which says send email for every unstable bill that means when your bill is failed then this email will be sent so i'm going to just save this configuration and let me just break the configuration also so my jenkins job will fail so right now uh let's say this bill is java c helloworld.java i'm going to just change the name of this file which doesn't even exist so this build will fail and then email notification will be sent so i'm going to just click on build now and you can see the build has been started i'm going to go inside this build and console output and you can see this build is failed and after this java c command is failed you will be able to see this option which says sending email to whatever email you have used and when you go to your gmail account you will be able to see this kind of email and then you will be able to find more details in this text here about your jenkins so this is one way of sending email notifications using jenkins the more advanced way can be by installing some plugin related to email notifications so you can once again go to manage jenkins and we have already installed a plugin at the time of installation which is email editable email notification right so i'm going to just scroll down where i will find editable email notification which is this option this one and here also you can give the same options for example for smtp you will be able to give smtp.gmail.com and then default user suffix is the same at the rate gmail.com and then in the advanced setting you will have the same type of settings for example this is your email address from which you want to send an email and then this is your password for your email and then this is the advanced email properties which i will leave as default and then i will choose use ssl check box and then in the smtp port i will just use 465 and you can do some more settings here one thing you can do here is you can add the default recipients here whatever recipients you want to use for your email so i'm going to add one recipient which i have also used in the last section and then i'm going to save this configuration and once my configuration is saved i can once again go to let's say i'm going to go to the next jenkins job now and then i'm going to go to the configuration of this jenkins job and then in the post build actions this time i will use this option which says editable email notification so just use this option and then you will be able to find all these fancy options which you can change at any time important for us is for example project recipient list here so by default it's default recipients you can give any other email address here and if you want to know more here you will be able to find more details here so it says you just need to add a cc colon here or bcc colon here so i'm going to add that cc and then colon and then the email address and then i will scroll down and in the advanced sec setting you will be able to find more settings so you can see trigger is failure and the email will go to the developers so we haven't uh added any developer email we have we have added the recipient email so i'm going to use this recipe email list and i'm going to remove the developers from here and then i'm going to just save this configuration and once your jenkins build will fail it will send the email to the recipient list so in this way you can configure your jenkins to send email notifications hey guys welcome to the next video on jenkins tutorial for beginners in this video we will see what is a jenkins pipeline and how to use pipelines in jenkins so first of all what is a jenkins pipeline so a jenkins pipeline is a suit of plugins which supports implementing and integrating continuous delivery pipelines in jenkins now to explain this i will reopen this diagram which i have shown you in the introduction of jenkins so every change which you make in your software so for example you are a developer and you make the changes in the software and you push those changes into your code repository in our case for example we will take the kit repository right now the job of jenkins here is to build your code in a reliable manner and then you may be having a different kind of testing for example unit testing or integration testing or different kind of testing so the job of jenkins is to test your code and then at last deploy your code and even transfer this code into a artifact repository and if you want to know more about jenkins pipeline the documentation on the jenkins website about pipeline is the best so just search for jenkins pipeline and then you will be able to see uh this url which is jenkins dot io for slash dock forward slash pipeline just click on this link and then you will be able to get all the details about pipeline on this page and when you scroll down you will be able to see uh this section which says what is a jenkins pipeline and then if you want to learn more about uh pipelines then you can read this section so in simple words a pipeline is a script which gives jenkins a series of jobs to do in a pipeline like manner and if you read this line the definition of jenkins pipeline is written into a text file called a jenkins file okay so we will create a jenkins file in our repository or jenkins allows us to write a jenkins file directly into the configuration of our jenkins job and there are two ways of writing this jenkins script which is declarative and scripted pipeline and you will be able to get more details about declarative script and scripted pipeline syntax here on this page itself so when you scroll down you will be able to see this flow diagram of jenkins and when you scroll down more you will be able to see this section which says declarative pipeline fundamentals and in this video i'm going to show you exactly this so how to use declarative pipeline in jenkins so in declarative pipeline syntax the pipeline block define all the work done throughout the entire pipeline so this is the simple syntax which allows us to define different stages and then inside the stages you can define different steps and all this starts with this keyword pipeline and then this is a groovy sandbox syntax so if you are familiar with that then it will be more helpful so you use the keyword pipeline and then in these curly brackets you use agent any and this means execute this pipeline or any of its stages on any available agent so every detail about the script you will be able to find here so for example there is a section called stages and inside the stages you can define different uh states so for example there is a stage for build here there is a stage for test here and there is a stage for deploy here right so we will be using this syntax into our jenkins job now let's take a real use case which we can implement on our jenkins job so if you remember we have created a maven project in the last videos and i have pushed this code onto the github repository so let's say we want to test this maven app and then we want to compile this maven app and we want to package this maven app using this jenkins pipeline how we can do this using jenkins let's see so i'm going to go to the jenkins homepage and i'm going to create a new item here and this new item will be for example pipe line demo for example and in here you will choose this section which says pipeline okay so give the name of your jenkins job and choose the pipeline section from here and then click ok which is going to create your jenkins job and then in the general you can provide any description about your project i'm going to skip all this and then here we are going to say our job is a github project so we are going to just click on this checkbox and then we can just copy this url and then paste it here so this is a project url and i'm going to scroll down we are going to skip this section for now which is build triggers you can define any triggers you want later but the most important section here is the pipeline section which we are going to use so in the definition you will be able to see two options here one is uh pipeline script another is pipeline script from scm so we are going to see the first option first of all which is pipeline script and this enables us to define the script here in this section if you choose the pipeline script from scm then you can define a jenkins file in your project itself so i have already defined this jenkins file in my project but for now i'm not going to use this jenkins file this jenkins file i'm going to show how to use this jenkins file from your github repository in the next video so for this video let's say this file doesn't exist so we are going to create this uh pipeline script here in our jenkins job configuration itself so for doing things faster i'm going to just copy this syntax which is given on the jenkins documentation page so i'm going to just copy this and i'm going to paste everything here so the basic syntax is pipeline and then these curly brackets and you write agent any and i'm going to make this a little bit bigger so you can see this in a better way and then you write stages and inside the stages you define your stages for example so let me uh just change this script and now so instead of build what i want to do is i want to clone my git repository so i'm going to just say clone repo here which is going to clone the github repository and inside the steps section you can define any uh shell script commands here so for example here you will write sh keyword before uh executing your command and this sh means uh your shell if you are running this jenkins on windows then you will write bat here which is the batch command okay so right now we are on linux so we will use sh but if you are on um windows you can write bat here okay so sh and then in the double quotes what we are going to do is we are going to clone our git repository so the command for that is get clone and then the url of your git repository so i'm going to just click on this green button copy this url from here and then paste it here so this is going to clone the repository now in the next step what we are going to do is we are going to clean our project using the maven clean command so i'm going to just write sh and then maven clean command is mvn clean and then you need to give the path of your project because when you clone your git project there will be a directory which is cloned which is my app and the path you can give here using this flag minus f and then the directory name which is my app in our case so the command is mbn clean minus f and then the path of this directory which is cloned this is the relative path that's why i haven't written the whole path here if you want to write the whole path or if you want to know the whole path i'm going to show you how to see the whole path also but just write this command here so this is going to clean our project now we are going to test our project now we are going to run the test on this project so for that we can just write sh and then we when we can just write mvn test minus f and then the path of your repository which is my app in our case and then to deploy i'm going to use the maven package command so sh and in the double quote i'm going to just write mvn package space minus f and then my app which is the part of this directory okay so in the first stage we are cloning this repository and cleaning it so let's uh just write and clean okay so clone repo and clean it and in the second stage we are going to run the test so we have written this command and in the third step we are going to deploy our project and i'm going to use this command for that which is main package and i'm going to repeat once again so if you are on windows this sh keyword will be replaced by ba t keyword okay so because i'm on linux i'm using sh command and now i'm going to just save my configuration and once my configuration is saved i'm going to just build my job using this button which says build now and now the build will start you can see build has been started let me just minimize this and you will be able to see your build stages here so this view will show you which stage is executed right now so the clone and cleaning is done so first step is successful because we are seeing the green box here and now you can see at the end of this step this step was successful and the second step was successful which was the test so the cleaning and the test was successful but our deploy command have failed and let's see what is the reason for that so for finding out the reason i'm going to just click on this build history and then i'm going to go to the console output and you can see this is the directory where this project is cloned so i'm going to open a new terminal i'm and i'm going to just write cd and this path and when i do ls here you can see there is a my app directory which is cloned here and then we have run the clean command which was successful you can see build was successful and then we ran the maven test command which was also successful you can see all the tests were run and build was successful but at the package stage some problem occurred and you can see directly here the mistake which i have made intentionally here so you can see the command was mvn package minus f and the path and the path is false here so you can see my minus ap one p is missing from this command so let's correct our mistake and then we will run our job once again so i'm going to go to the configuration once again and then we will correct our mistake which is correcting the spelling of the my app path and we are going to save this configuration once again and i'm going to run the build once again and then you will be able to see the second build and now you can see this build has failed miserably so let's see the reason behind this why this build failed so i'm going to just go to this build and then i'm going to go to the console output and then you can see the clone and then i can see this message which says fatal destination path my app already exists and is not empty directory so in our first build when we have cloned our project this directory was created and because this directory is already there the cloning once again will fail because this directory already exists so for this clone command to be successful we need to remove this directory and then once again clone it from the github repository so we are going to go to the configuration once again so i'm going to go to the configuration and then i'm going to go to the pipeline script once again i'm going to just maximize it and in the first step before the cloning what we can do here is we can just write sh and then we can just write rm which is the remove command and then i'm going to just add these flag rm minus rf which is going to recursively force the removal of all the files and then i'm going to give the name of my directory which is my app in our case so this command is going to remove this directory and then run the clone command so once again the cloning will take place and then this my app will be freshly created or freshly cloned into your jenkins directory so let's save our configuration and let's build the job once again so i'm going to just press on build now i'm going to minimize this browser once again and now i can see the build number here third build and then till now our cleaning and cloning is successful and now this test stage is also successful and now deploy stage is running and hopefully it will also be successful so once you see all the stages green here that means your jenkins build is successful and you can see uh the time which it took to execute every stage so for the cloning and cleaning stage it took six second for testing stage it took a second and for the package stage it took eight second as well now if you want to see more logs of every stage for example i want to see the logs of this stage i can hover over it and i can click on the log button here and you will see all the logs related to this stage so if you want to see the test logs then you can just click here and view all the logs related to the test stage which is similar to view console output okay so this console output is showing every log from every stage but if you want to see the individual log from every stage then you can see it from here okay and then you will have the good overview of your jenkins pipeline because you will see what happened in every stage which stage is failing and if some stage is failing what are the logs are showing here and based upon these logs you will be able to you know take some steps whatever stage is failing you can directly view that log and then you can take some steps and fix it so at last you will be able to see all the stages green that means your project is successfully billed tested and deployed so this is how you can use jenkins pipeline using your jenkins job configuration now in the next video i'm going to show you how you can add this jenkins file to your maven repository for example or any other repository and then how to use this jenkins file from your github into your jenkins job hey guys welcome to the next video on jenkins tutorial for beginners in the last video we have seen what is jenkins pipeline and we have also seen how to use pipelines in jenkins using this pipeline script which we have defined into our jenkins job configuration now in this video i'm going to show you the second option of using pipeline script which is pipeline script from hcm okay so in the last video i have shown you how you can create this kind of pipeline script inside your jenkins configuration now there is one more way of creating your jenkins file which is you can create your jenkins file into your github repository and then use the second option which says pipeline script from scm which is more convenient so let's see how we can use pipeline script from scm so we will take the same project which we have used in the last video which is the maven project and there is one special file which i have created here which is jenkins file this jenkins file name typically start with the capital j and without any spaces you just need to write jenkins file here and when i click on this file you will be able to see the pipeline script so this is the pipeline script which i have written into my jenkins file which resides in my maven project on my github repository so the syntax is uh almost same so your junkies file start with the keyword pipeline and then in these curly brackets you have the agent any and then you define the stages so in this script we have three stages one is maven clean other is the testing stage which is maven test and the last stage is maven package okay now if you notice here we haven't used any git clone command which we have used in the last video so let's compare these two script first of all so you can see in the first stage what i was doing is i was using the shell command first of all to remove the my app directory which is created by cloning our github repository and then we work loaning our github repository once again and then we were running the maven clean command into the specified folder which is my app now when you use jenkins file in your github repository you don't need to use this remove command you don't need to use this clone command because when you choose this option jenkins will allow you to give the path of the github repository from where it will clone your repository so we will see uh this example in few seconds but let's see the script first of all so you can see i have just run the maven clean command and that's it so this will work similar to this script which we have written in the configuration but with the lesser steps so we have removed these two steps and you don't even need to provide this minus f flag because this maven clean will be executed inside your my app directory automatically okay so syntax is also much more cleaner here just maven clean command maven test command and maven package command okay so let's see how we can use this jenkins file into our jenkins job so what i'm going to do here is i'm going to create a new jenkins job so we will see from the start how to use this jenkins file so i'm going to just name my changes job as pipeline demo 2 and then i'm going to choose pipeline here and i'm going to choose ok so once your jenkins job is created we will just say it's a github project and we will give the url of our github repository here and then we will scroll down and in the pipeline section this time we will choose the second option which says pipeline script from scm and now you will see these configuration steps here and the first option here is scm so as scm we are going to choose the get scm so just choose get from here so once you choose get here you will be able to see this repository url so you can give your repository url here so i'm going to just copy my git repository url by clicking this button and copying the url and pasting here and then once you click anywhere outside this box you will be able to see this error is gone and the credential i don't need but you can set it from here and then you can see a branch specifier so by default my project have only one branch which is the master branch but if you have multiple branches then you can define whatever branch you want to use for this jenkins job so i'm going to leave this master as default but if you have some other branch you can specify here okay and now you will be able to see the script path so because our jenkins file script resides on the root of our project so we don't need to change the path of this script you can see once again this jenkins file resides on the root of my project so directly inside my my app directory if this jenkins file reside inside some folder or some complicated folder structure then you can give the relative path of your jenkins file script from here now last option here is lightweight checkout so i will leave this as default and now i'm going to just save my jenkins job and i will try to run my jenkins job so i'm going to just click on build now which is going to start my build and you can see all the stages one by one will be shown here so the checkout scm is successful and it took three seconds and now the mvn clean command is going on and it's also successful and it took seven seconds and now the test command is going on and it took 13 seconds to execute but it's successful and now the last stage which is the package stage is going on and once it's finished and if you see all the boxes green that means your jenkins job is successful and all four stages has been executed successfully you can also see the logs here and straight away you will observe that this option is more easier than using or creating your pipeline script into your jenkins configuration so the advantage of using the jenkins file into your project is you can change this jenkins script anytime and you can directly check your code or commit your code and push your code and if your build triggers are properly set you don't need to do anything jenkins will take care of everything and will automatically execute every stage and give you all the results so this is how you can use pipeline script from your github repository using jenkinsfile hey guys welcome to the next video on genki's tutorial for beginners in this video we will discuss about how we can create the slave nodes in jenkins and we will also see what is a master and slave node so let's get started so first of all what is a master node the master node is wherever your jenkins is running it's your master node now this single jenkins server which is a master node is not enough to meet certain requirements for example sometimes you might need several different environments to test your bills this cannot be done on your master slave for example and for that you may want to create a slave node one other scenario can be if you want to build a larger or heavier project on your jenkins job then your jenkins server cannot simply handle the entire load of that job so in that scenario you can also just create a dedicated slave node to run that heavy build on that node so let's see how we can create a slave node on our jenkins so just go to the home page of jenkins and we will go to the manage jenkins section and once this manage jenkins section is open you just need to search for the section which is called manage nodes so i'm going to just click on this option which says manage node and you can see there is a master node which is the jenkins on which you are working on this is already there and we need to create for example a slave node now for this example i will be using ssh methods so for example i have a extra machine here which is also an ubuntu machine and let me log inside this machine and i'm going to use this machine as a slave node and i will connect to this slave node using my master node on ssh so make sure that you have already installed open sss server on your slave node so your master can connect to it on ssh now we are going to create a new node so i'm going to just click on new node here and you can give any name to your node so for example i'm going to just write uh ubuntu underscore 16 4 because my ubuntu version is 16.4 on the slave and underscore agent for example okay so this will be the name of your node ubuntu 16.4 underscore agent and this will be a permanent agent so i'm going to just click on this option and then click ok which is going to create this node and here in the configuration section of this node you just need to provide some information so at the top you have the name of your node and next you can give some description about this node what it's going to do for example for example it's going to build some java job or maven bills or any other bills which it's going to execute the third option is number of executors so number of executor means number of parallel job which the slave can handle so for now we have a one job we can just enter two here which means it will be able to handle two jobs at the same time now the next option here is remote root directory so the remote root directory is the directory where you want to save all the jenkins related file on your slave node so i'm going to open my slave node and i'm inside my home folder here on the slave and let's create a directory which we are going to use in our master configuration so i'm going to just write mkdir jenkins on the slave node right so mkdir jenkins and then i'm going to just go to the jenkins file using cd jenkins and then i'm going to just write pwd and this is the location where i want to save all the files related to jenkins okay so this is on my slave this directory i'm going to just copy this path and i'm going to just paste this path as a remote root directory so all the jenkins related files or build information will be generated inside this directory on the slave node now next option here is a label so let's click on this question mark and let's see what our label is so label are used to group multiple agent into one logical group so this is a simple definition of a label so for example i'm going to create multiple ubuntu slaves so i can give a label here ubuntu okay so whenever i will use this label ubuntu one of the ubuntu node will be used to execute the jenkins jobs and here you can see for example if you have multiple windows agent and you have a job that must run on windows you can give this label on your jenkins job configuration and then one of the slave node which have the label windows will handle that job so labels are used to group multiple agent into one logical group for windows for example you can give windows level all of your ubuntu nodes you can give ubuntu label or any other logical label which you can use to group those kind of nodes so in my case i'm going to give this label ubuntu here and i'm going to just minimize uh this explanation and the next section here is the usage for now i'm going to use use this node as much as possible there are other option also for example this option which says only build job with label expression matching this node so if you use this one then if your jenkins configuration will have ubuntu label then only this node will be used to execute that job so i'm going to just use use this node as much as possible now the next option here is launch method and there are a few options here one is launch agent via execution of command on the master we are going to use the next option which is launch slave agent via ssh okay so i'm going to just use the second option which says launch slave agent via ssh so just select this option and then this is the host name so host name we will just go to our slave machine and here we can just give if config command and then press enter and here you will be able to see the host name which is the ip address of the slave machine and i'm going to just give this host ip address here now in order to verify if ssh is working from your slave to your master you can open the command line on the master and then you can just write ssh and then the username to which you want to connect so i want to connect for example this user which is a code bind here so i'm going to just write code bind at the rate the ip address which you have copied from the slave which is 192.168.1.4 and now you will be able to see this kind of message i'm going to just say yes and then press enter which is going to ask for your slaves password so this is the login password which you use to login to your slave machine which is this machine okay so this machine's password you need to give here i'm going to give my slave machines password and now i'm logged in to my slave machine using ssh okay if this is working then this connection will also work so just use the host ip address here and in the credentials right now we don't have any credentials here so we will add some credentials so just click on add option here and then click on jenkins and when you just click here in front of kind there are few options here one is username with password other is docker option and next is ssh user name with private key so you can use any one of these method and for now we are going to just use the first method which is username and password so we will provide the username and the password so username is code bind this is the username of my slave machine and then i'm going to give the password of my slave machine which i use to log into the slave and then i'm going to just click add here and then i'm going to go to the credentials you can see by default none is selected here you just need to select the new credentials which you have recently created so i have created these credentials i'm going to just choose the credentials which i have created now the next option here is host key validation strategy so this is important you just need to just select this option which says manually trusted key verification strategy okay so just click on this option which says manually trusted key verification strategy in the option host key verification strategy and this step is important otherwise you will face the problem and the next option here is require manual verification of initial connection just leave this unchecked this is also important you just need to leave this as unchecked now the next option here is the availability if you want to see the advanced option you can just click on this option also for your launch method for example the port on which ssh is connected this can be different if you want and then the jvm options and java path and other options here if you want to set them you can set it from here now in the availability section you will be able to see three options i'm going to leave it as default which is keep this agent online as much as possible now the next section here is the node properties and here you can set the environment variables if you want on your slave node for example java home or maven home or any environment variable which you want you can set it from here on your slave and the next option here is the tool location and this tool location for example if you want to set the default git location of your slave here you can set it from here but i will leave both of them as default okay which is unchecked and then i'm going to just click on the save button and you will be able to see this option and it says the agent is offline some message will be displayed here and when you click on the nodes option here you will see this new node is created but it's offline and you will be able to see this big cross symbol in red which means your agent is still offline so to make it online you just need to click on this slave agent which you have created and then click on the launch agent button i'm going to just click on the launch agent button which is going to connect to my machine and you can see the authentication is successful here and i will scroll down a little and it's doing some work and it says agents successfully connected and online so at the end if you see this message which says agent successfully connected and online that means this agent is working fine and it's online so once again i'm going to click on this nodes option and now you will be able to see this red cross is gone and this agent is now online now one important thing to note here is you need to have java 8 or more installed on your slave machine so make sure that java version 8 or more is installed on your slave otherwise it will fail complaining about java version or something if you have the older version of java so once you're a slave agent is online we are going to see how we can create a jenkins job and use this slave agent so what i'm going to do is i'm going to create a new jenkins job and i'm going to just say test slave 1 for example and this will be a freestyle project and i'm going to just say okay and this jenkins job is created for now i'm going to just leave everything as default i'm not going to give any description here but when you scroll down you just need to choose this option which says restrict where this project can be run so this is important you just need to choose this option in order to select the name of your slave agent okay so your slave agent name is ubuntu 164 agent in my case this is the slave agent name and i can also see the label name okay so you can either give the label name of your slave agent or you can give the actual name of your slave agent i'm going to choose the second option here which is the slave agent name okay and then i will scroll down and for now i will just execute a simple shell command here on the slave agent and i'm going to just say echo and then i will just say this message is executed on slave node so i will just execute this message in my jenkins bill and i'm going to save this and for now what i'm going to do is i'm going to go to my slave and i'm going to just go to the jenkins location which is this location which i have set where all the files related to jenkins are saved and you can see slave.jar is already saved here when we have tried to connect to this slave right and there is a jdk directory also so now when i just build this job so now my job is building and i'm going to go and see the console log here and you can see everything is successful and this build was successful and now once again i'm going to go to my slave and do ls once again and you can see workspace directory is created when i have executed this build here and inside the workspace there will be my job name which is test slave one you can see the name of my jenkins job is testle one and on my slave node inside the jenkins directory which i have given inside the workspace this uh job name is also created there so that means everything is working fine and this job is executed on the slave machine and not on my master machine which is where my jenkins is actually running right so everything is executed on the slave machine now so this is how you can create a slave node using jenkins and you can connect to the slave node in jenkins hey guys welcome to the next video on jenkins tutorial for beginners in the last video we have seen how we can create a slave agent in jenkins and launch the slave agent via ssh now in this video i'm going to show you how we can create a slave agent and launch this slave agent via a method called java web start now in the last video we have seen how to create a linux slave agent and in this video i'm going to show you how you can create a windows slave agent so let's get started now before starting and before launching our slave agent via java web start we need to do some settings and i'm going to show you how to do these settings so first of all go to the manage jenkins section and once the manage jenkins section is open go to configure system settings so just click on configure system and once the configure system settings are open you just need to scroll down until you find this section which says jenkins location now by default this jenkins url is set to http colon forward slash forward slash localhost port 8080 and you will see this small warning here also which says please set a valid host name instead of localhost so if you have the host name for your jenkins server then you can give this host name here otherwise we will give the local ip address of this server instead of the local host okay so to know the local ip address i'm going to just open the terminal and i'm going to just write if config command and then press enter which is going to give me the local ip address which is this one so i'm going to replace this local host by this ip address okay so if you have the host name for your jenkins server you can write the host name here if you have the ip address of your jenkins server just write the ip address here instead of localhost and this is important for this particular step to launch your slave agent via java web start and now i'm going to save my configurations and once the configurations are saved now we are ready to create our new slave node so once again i'm going to go to the manage jenkins section and i'm going to choose the section called manage nodes and you can see our master node is there and the second node is this node which is ubuntu which we have created in the last video which is offline right now because my slave is not running right now so that's why it's offline so let's create a new node so i'm going to just click on the new node option and here i'm going to give the name of my node i'm going to just give the name windows 8 because the slave is running on the windows 8 operating system so i'm going to just give the name windows 8 underscore agent okay and then you can just choose this option which says permanent agent if you want to copy the existing node then you can also choose the option which is called copy existing node but right now we don't have any windows agent that's why i have just chosen this option which says permanent agent and now i'm going to just click on ok and you will see this section here so most of the options which are shown here we have discussed in the last video so i'm going to go through all of them one by one really fast so the name is windows 8 agent description whatever you want you can describe here number of executors we will take a number of executors as two which means that this windows agent will be able to run two parallel jobs and then we need to provide the remote root directory and this will be the directory where all of your jenkins related file will be saved on your windows slave agent so i already have created a directory inside my c folder on my windows slave agent and i'm going to just copy this path from my windows slave agent and i'm going to paste it here okay and the label we already know what is label from the last video so i'm going to just give this label here which is windows you are free to give any other label which you wish to provide here usage i'm going to just leave it as default which is use this node as much as possible and you will be able to see this option which is launch agent via java web start okay so if you don't see this option which is launch agent web start you just need to go to the settings once again so this is when you don't see this option which is a launch agent via web start you just need to go to your dashboard and once again go to manage jenkins and then go to configure global security and inside the configure global security options you just need to scroll down until you find the agents section so this is the agent section and by default this is disabled okay so what you need to do is you just need to choose the random option here otherwise if you want to provide the fixed port here you can just choose this option which is fixed and then you can just give any port which you want to use okay but i prefer using the random port so i'm going to just choose this option and i will suggest you to choose this option here and then only you will see this option in your node creation which is launch agent via web start okay so if this option is disabled you will not see the option in your launch method so i'm going to just save these settings and then once you see this method you just need to choose this method from here and then leave everything as default and the availability i'm going to just leave it as default also which is keep this agent online as much as possible and the environment variables and tool location we have discussed in the last video i'm going to leave them as default which is unchecked and i'm going to save all the settings and you can see windows 8 agent is created and right now it's offline so i'm going to just click on this option and this text says connect agent to jenkins via one of these two methods so there are two method you can use to connect to your windows agent one is open this url on your windows agent and then click on this button which is going to connect to your jenkins server otherwise the second option is you just need to copy this command and run it onto your windows agent terminal so we are going to choose the second option and we are going to run this command onto our windows terminal so to open this jenkins server on the windows slave i can just use this ip address until windows 8 agent which is also this address but you need to replace this local host by the ip address of your jenkins slave or the host name of your jenkins slave okay so i'm going to copy this address until uh windows 8 agent like this and i'm going to open the browser on my windows slave agent so this is the browser which is running on my windows slave agent and i'm going to just paste this url there which is going to open this jenkins web page on your windows slave agent right now before using this command we need to save this agent.jar file which you can download from this link so you just need to click on this agent.jar link i will suggest you to just save this agent.jar on your jenkins folder wherever you have created your jenkins folder for saving all the jenkins related files so i'm going to save it here which i have provided as the root directory for my slave also okay so let me save this file so now what i'm going to do is i'm going to open the terminal on my windows slave agent so i have opened this terminal on my windows slave agent and first of all i will cd into this folder where i want to save all my jenkins related files which is c colon slash jenkins so once i'm into this folder where my agent.jar is there i'm going to just copy this command which i can see on my windows slave using the jenkins ip address okay so i'm going to just copy this command make sure that this is not localhost this is the host name or the ip address of your jenkins machine so i'm going to just copy this whole command and paste it into my windows terminal and then press enter and this is going to run this agent and once you see this info which says connected then your windows slave is connected to your jenkins server so make sure you see this connected message and then you can directly go to your jenkins master server which is this one and i'm going to open the nodes here so you can see we have created this node right now so i'm going to go to the nodes and you will see this cross symbol is removed from the windows 8 agent that means this agent is now online which is windows 8 agent so let's use this agent to create a jenkins job so i'm going to go to the home folder and i'm going to create a new job and let's say this will be my windows test one and then i'm going to choose the freestyle project and i'm going to just click ok which is going to create this job and once this job is created in the general settings i will leave description as default which is blank and then i'm going to scroll down a little and i'm going to choose this option which says restrict where this project can run and this time i'm going to use the label which i have given to my windows slave agent which is windows so this is the label you can also choose the agent name directly which is windows 8 agent but this time i'm going to choose this one which is windows label okay so i have chosen this windows label here and then i will scroll down i will script everything i just want to test whether this slave is running or not so under the build section i'm going to just choose this option which says execute windows batch command so just choose this option which says execute windows badge command because we are running this jenkins job on our windows operating system okay and then i think windows understand the echo command so i'm going to just write echo this command will run on your windows slave so i'm going to just execute this command on my windows slave and if you want to see in which directory we are working in we can use the cd command cd command is same as pwd command in your linux operating system so this will print the present working directory on your windows operating system so now i'm going to save this job and once the job is created i'm going to just build this job which is going to start building the job and i will just go to the console output of this job and you will be able to see the output of the cd command you can see the cd command is executed and the cd command output is this one so we have chosen c colon slash jenkins as our root directory so this is the root directory and then jenkins will create a workspace directory inside your root directory and then you will see your jenkins job name which is windows test one in our case you can see here also and the next command we have executed is echo and whatever text we have written here which is also executed successfully so it has echoed the sentence and then at last we can see the success message that means our jenkins job is build successfully and on your windows slave you can also see that there will be a remoting directory created and there will be a workspace directory created and inside your workspace directory your jenkins job name directory will also be created so you can see windows test one is created which is same as your jenkins name so this is how you can create a jenkins slave and launch this slave agent via a method called java web start hey guys welcome to the next video on jenkins tutorial for beginners in this video i'm going to show you how you can parameterize your build in jenkins now sometimes it is necessary or useful to have bills to take one or more parameters and jenkins allow you to parameterize your build so that you can provide one or several parameters at the time of building your job so let's see how we can do it so we are going to create a new jenkins job so i'm going to just click on new item and then i'm going to give the name to my job which is parameterized project and then we are going to choose the freestyle project and i'm going to click ok here which is going to create our jenkins job so once your job is created i will leave this description as default which is blank and then to parameterize your build you will see in this general section under the description there is an option called this project is parameterized okay so you just need to choose this option which says this project is parameterized here you can add several type of parameters for example boolean parameter or choice parameter or credentials parameter and you can see there are several parameters which you can choose from this list so we are going to choose let's say string parameter for now and here let's say at the time of building our job we want the user to provide the platform on which this jenkins job is running so in the first option which asks us to provide the variable name we will just provide the platform a keyword here which is the variable name which we will use in our build and you can also provide the default value of this parameter let's say the default value of this parameter is linux it's optional so if you don't provide any default value it's okay but if you want you can provide the default value from here and also the description is also optional so if you want to provide the description you can provide it from here or you can leave it as default and there is one more option here which says trim the string if you check this option you can see what it does so strip white spaces from beginning and the end from the string so we have added one parameter to our jenkins build and then i will leave the other sections as default and in the build section i'm going to just choose this option which says execute shell if you are using windows you can choose execute windows batch command from here and here i'm going to just echo the parameter which is provided by jenkins to us so to echo a parameter on linux you can use dollar symbol and then the parameter name which is in our case the parameter name is platform okay so just copy this parameter name and after this dollar symbol just write your parameter name and this is going to just print the value which you will provide for your parameter so i'm going to save this job and once the job is saved i'm going to just execute this build so now one new thing you will see here is normally you will see this text as build but because we have provided some parameters for this build so it says here build with parameters okay so just click on this job and on the right hand side you will see here this build requires parameters and the default value of this variable or parameter platform we have given linux here so let's change this default value let's say we want to just give unix value for our platform variable and i'm going to just click on this build button which is going to build our job with that parameter and i'm going to just go to the console output to see if it's successful or not so you can see this echo command is executed with the parameter which we have provided which is unix okay so this is how you can provide the parameters to your jenkins build now i'm going to go to the configuration once again so if you have a different operating system some operating system for example if you are using the same uh echo command on your windows operating system you can use these modules symbol in front and the back of your parameters so on windows you need to provide this mod in front and at the end of your parameter then it will be executed without giving you problems so this is for windows so i'm going to just provide this hash which is a comment and i'm going to just write windows here so for windows you need to use this mod symbol in front and end and on mac i think this dollar will work if this dollar doesn't work then we can also use for example echo and then a dollar and in these curly brackets your parameter name which is a plate form so in some operating system this type of syntax is valid so you can also use this type of syntax now let's uh choose some more parameters from here so one parameter we have already provided which is a string parameter let's provide the second parameter and this parameter will be a choice parameter so you can choose from a list of the choices which you give here so the variable name i'm going to give here is choice itself and here you can give your choices so for example a b c d e something like this if you want to choose some other kind of variable name you can just choose linux and and then windows or mac or unix or any other so this type of choices you can provide in this choices box one by one on every line so every line is a choice here and i'm going to leave this description as default and let's echo this choice parameter also so i'm going to just write choice from here and then i'm going to just save this build and once again i'm going to click on build with parameters and you can see there are two parameters present now one is the platform parameter other is the choice parameter so platform i will leave as linux and the choice i will just choose d here and then i'm going to click on build which is going to build my job and then i'm going to go to the console output and you can see it has a code linux first of all and then a code d is executed which we have chosen from the choice parameters so this is how you can parameterize your job or build in jenkins hey guys welcome to the next video on jenkins tutorial for beginners in this video i'm going to show you how to use jenkins cli and more specifically i'm going to show you how you can run your jenkins job using jenkins cli so let's get started so first of all what i'm going to do is i'm going to just click on manage jenkins here and when you scroll down you will be able to see this option which says jenkins cli so once you are in this jenkins cli section you will be able to see this command which you can use to get help on using jenkins cli now when you want to use jenkins to for example build your job or add job to view or there is a list of command which you can use with jenkins cli you just need to click on the specific command which you want to execute for example i want to execute build command i can just click on this build command and then this is the command which i can use to build my job with some flags and the description of these flags are given here so let's uh use this uh jenkins cli command to build uh jenkins job so first of all you need to download this jenkins minus cli jar file and you can download it by clicking on this jenkins cli jar file and you can save it on your computer first of all and once this jenkins cli jar is downloaded you can copy this jenkins cli jar at the comfortable location and then use this ghr to execute the command which is given here so let me open the terminal first of all and i will first of all create a jenkins directory so mkdir jenkins and i want to move this jenkins cli uh jar file into this directory so this is in my downloads folder so i'm going to just write mv and then i will just move this jar file which i have downloaded from the downloads folder to this jenkins folder so i'm going to just give this command which is going to move this jar file into the jenkins folder so i'm going to just cd to the jenkins folder now and you can see this jenkins cli.jar is there so now i can use this command to build a job so let's see what job we can build so i have this job which is java hello world and let's build this job using the jenkins cli so the job name is java hello world so i'm going to just first of all copy this command up to job and then i'm going to just paste this command on my terminal and instead of job here you just need to give the name of your jenkins job which you want to build so the name of the jenkins job is java hello world which i will provide here and then press enter and of course this will fail because our jenkins require the permission so right now we are logged in with the admin credentials that's why we need to give the admin credentials in case you want to execute your job without the credentials you can go to manage jenkins and then go to configure global security and once you are in the configure global security there is a option under authentication we have previously chosen this option which is role based strategy right so if you want to disable this authentication you can choose this option which says anyone can do anything and save this configuration and once this configuration is saved this command will work because now we don't need any credentials to run the jenki's job so once again i'm going to give this command and this time you can see it's successful and it hasn't given any error to us but you can see this command doesn't give any result it just executes and then no result is printed and when you go to the location where your jenkins job is there on this jenkins ui you will see this jenkins job is executed but no result is printed here so for example you can see i have five bills right now and when i execute this command once again and i will refresh this web page you will be able to see a sixth build is executed successfully here so now in case you want to see the output of your build on the terminal itself what you can do is you can go to this command once again from where you have copied and you can see there are a bunch of flags you can provide so the flag minus f is going to show you the output of your jenkins job so i'm going to just give the minus f flag with my command and then press enter and you can see started java hello world build and you will be able to see uh here also the seventh build is executed successfully on the jenkins ui also and some output is printed here also it says started java hello world seventh build and the build status was successful now if you want to see more verbose output you can use this flag which is minus v and you can see this flag is used with minus s so we will give this flag which is minus v with minus s and then press enter and you can see started the build number eight and you will see all the console output which you see generally on your jenkins job so when i just refresh this and i will go to the console output here so this is the output which you see in the console output this output will be shown on the terminal also same output will be shown here and once again the build status is successful now in order to use this jenkins cli command with the authentication you just need to go to the manage jenkins section once again and then go to configure global security and this time we will enable in authentication the logged in user can do anything so you need to just choose this option which says logged in user can do anything and you also need to check this option which says allow anonymous read access so this is important you need to check this option and this option as well which is logged in user can do anything and then i'm going to save this configuration and this time with this command so let me clear the terminal first of all so i'm going to clear the terminal and with this command which we have used to build the java hello world jenkins job we will use the username so i'm going to just write minus minus user name and space the username is admin in my case and then to provide a password you just need to give this flag which is minus minus password and space your password so my password here is root so i'm going to give my password and then press enter and this is going to start the build you can see java hello world ninth build was started and it's ended successfully so the build status is success here so in order to provide the credentials you just need to use these two flag which is username your username and minus minus password your password so now let me show you one more thing which is to execute a parameterized jenkins job using command line so i'm going to go to my jenkins home here and i'm going to choose a project which i have created in the last video which shows how to use parameters in your jenkins job and its name was parameterized project now if you don't know how to create a parameterized jenkins job you need to see the last video so i'm not going to create a new uh job i'm just going to use the jenkins job which i have created earlier so in this uh jenkins job we have this build with parameters option and there are two parameters here one is platform and other is choice so i'm going to just use this jenkins job name first of all and i'm going to go to the terminal and let me clear the terminal and i'm going to use the same command but this time the project name is different so instead of java hello world the project name is parameterized project which is this one and in order to provide the parameters you need to give the flag which is minus p so at the end just add minus p and then your parameter name so the parameter name i have is first of all a plate form and it's better to use double quotes if you have single word then you can avoid these double quotes but i prefer to use these double quotes even if this is a single word string so here i'm going to just write linux now once again i'm going to just use minus p flag for providing the second parameter and the second parameter is a choice here so i'm going to once again use minus p choice which is the parameter name and then the parameter value so for example i want to just give c here as a choice and then i'm going to just press enter which is going to execute this job you can see the job is executed and you can see it has echoed the linux keyword and the c letter and the build was successful so this is how you can provide the parameters to your jenkins job using jenkins cli so this is how you can use jenkins cli to execute your jenkins build hey guys welcome to the next video on jenkins tutorial for beginners in this video i'm going to show you how we can create a multi multibranch pipeline project in jenkins so first of all what is a multibranch pipeline project so the multibranch pipeline project type enables you to implement different jenkins files for the different branches of your project now generally in the software teams which is working on our project different developers can work on different features so let's say our team is working on a project called my app and we have a few developers in this team and master branch is generally the final product right which is going to be run in the production now when the developers work on some features they generally create a branch out of this git repository so for example here when you click on branches option here i have one a branch which is feature one so in a normal software project whenever some developer works on some feature he creates a branch and when this feature is implemented he or she merges this feature into the master branch now at the time when this feature is going on and the developer is working on how can he test this feature using jenkins as well as the master branch so multi branch pipeline project allows us to test all the branches of your project at the same time using jenkins so let's create a multibranch pipeline project in jenkins and then we will see how it works so just click on a new item here and then give any name to your jenkins project for example multi pipeline project and then scroll down and you will be able to see this option which is multi branch pipeline so select this option and then click ok so my multi branch pipeline project is created and here you can give you some description about your project and in the branch source you can give the url of your github project so here you can just click on add source and click on git and then just copy the url of your github repository by just clicking on clone or download and then copy this url from here and then paste it here where it says project repository i don't need to provide any credentials because this project is publicly available but if you want to add your credentials you can add it from here and then in the next section you will see behaviors and there is this option which is automatically enabled which is discover branches so your jenkins job is going to automatically discover your branches and then run your test on all the branches now it's important to notice here is i have this jenkins file here in my project right so make sure that this jenkins file is there we have already seen how we can add this jenkins file to our github project in the previous video so i'm not going to tell you how to do this but make sure that your project have this jenkins file and then when you scroll down you will be able to see this section which says build configuration and in the mode you will be able to see only one option here which is jenkins file and you need to provide the path of your jenkins file here and because my jenkins file is on the root directory so i don't need to change the path of this jenkins file right now when you scroll down more you will be able to see scan multi branch uh pipeline trigger and for now we only have one trigger which is periodically if not otherwise run so when you check on this check box you can run the scan on your project every minute or every two minute or every uh you know this time period which is given in the list okay so for example i can just set it to every five minute then jenkins will scan your project every five minutes and it will just look whether your project have any extra branch or not and if you have committed any changes then it will run the test on every branch of your github project now rest of the thing i will leave them as default because we don't need to use them for now so orphan item strategy we will not be using and then health metrics we can just click on this and you can see there is a one health matrix which is child item with worst health pipeline libraries we don't have any pipeline library so we are going to leave this as default and then the pipeline model definition we also don't have any model definition so i'm going to leave it as default so what we have given here in the configuration the url of our project and make sure that you have the jenkins file in your github project so just choose or leave it as default which is jenkins file and then click on save button and as soon as you press the save button you will see a scan will start on your multibranch project and this scan is scanning the branches in your github project and you will be able to see uh two tasks which are parallely running here one on the master branch you can see one on the master branch is running and other scan task is running on the feature branch and the same branches are available in my github project also so i have feature one branch and the master branch that's why there are two tasks running to scan them and when i click on my project here you will be able to see two jobs here which are running one is the master branch job and other is the feature branch job and you can individually click on every job so i'm going to click on the master job here and you can see this job is going on and you will be able to see the stages of this job which are currently running so this job is successful you can see and we can also go to the feature branch job also and you can see it's also successfully tested so that's why both of them showing the success now let me show you how you can create a new branch in git and push it to your github project and how this trigger works so i'm going to open the terminal first of all and then i'm going to cd to my project so i'm going to just cd to my project in which i'm working on i have already checked out my project here now to view all the branches in your project you can give this command git branch and then press enter and it's going to show you all the branches in your project so i have two branches right now in my project one is master and other is feature one so let's create one new branch so in order to create a new branch you just need to give this command git branch and your branch name so so let's say i'm going to create a feature branch 2 here so i'm going to write feature 2 and then press enter and now we are going to list all the branches once again and now you can see there are three branches in my project so one is master branch and other two are feature branches now in order to push this branch to your github repository you can give this command git push or region and then your branch name so my branch name is feature 2 and then press enter and you can see this branch is now pushed to our github repository so we can verify it by going to our github repository and then refreshing this web page and i'm going to once again click on branches and you can see our new branches visible here which is feature two okay so now once we have the new branch we can trigger them with some web hooks like jira or git bucket but right now we don't have any web hook so we are going to just press on this button which says scan multi branch pipeline now so i'm going to just click on this and then i'm going to scroll down a little and you can see there is a new task running here which is for the feature branch 2 and when i refresh this web page so i'm going to refresh this jenkins web page and now you can see this feature branch 2 jenkins task is running right so when i click on this feature branch 2 this build is running and you can see all the tasks are here running and the build is successful now so now you have three branches and you can see the result of three branches in your jenkins repository so this is how you can create a multibranch pipeline project in jenkins