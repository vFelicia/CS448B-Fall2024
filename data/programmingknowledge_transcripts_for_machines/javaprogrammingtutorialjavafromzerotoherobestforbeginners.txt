hey guys welcome to this tutorial series wherein we'll be learning Java along with the DSA so myself aniket I've been I'll be your instructor throughout this course wherein where we'll be learning Java programming language starting from the basics to the core Java Concepts and along after that we will dive deep into the data structures and algorithms using and we will try to implement that using Java programming language so first of all starting with the introduction you would ask me to which person can take this course so I would say uh anyone who wants to learn the Java programming language right from the beginning till the advanced data structures can take this course okay so in this video we'll be talking about the installation part which are which softwares are required you to run the Java program inside your PC so start let's let's get started open your Chrome and head over to the Chrome and just type download jdk and search you'll be seeing first link which is of your your record one and just go there and according to your OS whether you are using Mac OS Linux Linux or Windows just to choose your windows OS and according to your installer just click on this and this will get downloaded in your system I have already downloaded it so I don't download it again or I will pause it okay and the next thing you will require is IDE so what is IDE basically ID is an environment where you code uh your Java Java programs and basically what is the difference between an ID and notepad you can also code in the notepad but the better way of the better way of using the IDE is you can get a auto suggestion of those code Snippets and uh and there's in Auto indentation is there in The Insider ID so I suggest one of the best ID to code the Java programs is IntelliJ IDEA so you just go into your browser and type download in Delhi J idea so first link comes of jetbrains who are the developer of this ID go there and click on this Community Edition Community Edition because don't download the ultimate edition you'll be charged after the 30 days free trial so so we want the free tile so go here and download the exe file or zip file whatever you want I suggest to download exe file click on the download and after two to three seconds your download will get started I have also downloaded this files that's why I don't download it again okay after downloading this file you just go there inside the full downloads folder and click on the jdk file double click on it it will ask for the permission click yes okay click next then keep the path as default okay so wait here the jdk will get installed in your PC simultaneously I will also install a IntelliJ IDEA okay wait hello here so it was saying the current IntelliJ Community Edition is already installed so I have already installed it so you just follow all the steps which uh just you need to click next next and IntelliJ IDEA will get installed in your PC okay so here you can see uh my jdk is also get down installed in my PC just close here and you need to go to the path which which you have given uh at the time of the jdk installation so here I given the path inside my Java folder I have jdk file and you just go inside the bin folder and just click here and copy the path I am again repeating just go to that path where you have installed the jdk and inside the jdk folder you have bin folder just click here and copy this path and and go to your start and type edit and you will be seeing edit the system variables here just click on it and click here edit environment and inside the user variable for the user just go here and click on the path and click edit and you will be seeing here new button and you click on this and just paste that path and click enter okay and click OK and again okay and okay so till now you have successfully installed all the softwares which are required you to run the Java programs inside your PC okay to test it out uh whether whether all this installation parties get succeed successfully installed just press the windows R but as a button on a keyboard and type CMD here and enter and just type Java minus minus version and after hitting enter you will be seeing the jacquer and Java version which is installed in a PC and jdk version which is also installed in your PC okay so till now we have seen the introduction and installation part which are required for you to run a Java program in your inside your PC okay uh so after that you have also I am assuming that you have also installed IntelliJ IDEA in your PC just click here open your open your IDE it will take some time according to the system configuration of your laptop or PC okay just wait here I'll be seeing this okay wait okay name and name the project whichever you want I will be giving hello and I will be creating clicking on the next okay after creating a new project inside IntelliJ IDEA the this window get pop up and inside source you can see the main file is there okay so this is the basic code that IntelliJ IDEA will provide you okay and after is inside this you can code whatever you want in Java programming language so till now I hope all the all of you have installed or all the required softwares and and till now you are rich at this point where you will be will be starting to code inside IDE so one more thing is there uh I'll be planning to give you some extra questions code like coding questions I'll be coming like for example I will be covering variables and data types and then again in the next question next video I will be giving you the problems or some coding questions uh regarding that Concepts which I have taught you in the previous videos uh so I expect expect you to answer those questions inside uh comment comment box of that video and I'll be reviewing your comments in the upcoming videos and we'll be talking some which are which Solutions is best which solution is wrong so I'll be thinking like that so I hope uh you enjoyed this video and install all the softwares which are required so in this video I will be talking about the theoretical part of the Java so in this video also we are not going to code anything so basically we are talking about the Java application what are the Java features and what are the three JS of the Java so I strongly recommend that you should watch this video if you are preparing for the interviews or any your college test so this will be helpful for you to clear out those examinations so what are we learning today so we'll be learning what is Java we will be discussing some applications of the Java and we will be seeing some features that makes the Java as a standout programming language and will at last we'll be covering the three JS of the Java which is jvm JRE and jdk so let's just get started okay so what is Java so Java is a programming language and a platform so Java is a high level robust object oriented and secure programming language so talking about the history of the Java the Java it was developed by the sun Microsystems in the year 1995 and James Gosling is The Man Behind the Java and which who called called as the father of the Java before Java its name was Oak since the oak was already registered by a company so James Gosling and his team decided that we should change the name to from Oak to Java so that is the history about Java so let's just talk about the real life examples and applications where Java is used okay so Java is used in a wide range of fields okay so let's just discuss some some of Themis so Java is used in desktop application so there's Acrobat Reader media player your antivirus which you use in your system is built using the Java programming language and some of the web applications like IRCTC uh the railway resolution systems and the Java T point which is famous website wherein you can find the tutorials for the Java learning and Enterprises applications such as banking applications are built using the Java and strong backend is also created using the Java programming language and the mobile application and embedded system smart cards Robotics and the games are yet more fields which you can think Java is there okay so let's talk about the features of the Java so here you can see the picture where I have written all those features that Java has okay let's just talk some few of them so Java is simple so what makes the Java simple Java is very easy to learn and its syntax is Simple and Clean and easy to understand according to the sun Microsystems Java is a simple language because Java syntax is based on C plus plus so it it makes easier to a new programmer to learn it better and in faster way so Java has removed many complicated and rarely used features for example explicit pointers operator overloading Etc okay so there is no there is no need to unreference the object because there is an automated garbage collection is there in the Java okay so another feature is Java is object oriented so what is object oriented so object oriented is nothing but the everything in Java is an object object oriented means we organize our software as a combination of the different types of the object that incorporate the both Behavior so Java implements the oops Concepts such as class object inheritance polymorphism abstraction and encapsulation I will be covering all those groups Concepts in detail in the upcoming video lectures okay uh so top let's talk about the one more feature here which is main feature I guess the Java is platform independent so what is Java platform Independence uh platform Independence means once you write your Java code that is the dot Java file and once you execute that file it creates the dot class file of that the Java program so what is dot class file so that dot class file is the byte code of the Java which you can run in any operating system so let's suppose Windows is there Mac OS is there Linux is there you can take that dot class file and you can run any of these platforms any of these wind operating system so that makes the Java as a platform independent language okay so enough talking about the features let's move on to the three JS of the Java so this is the most frequently asked questions in the interviews and your college examinations what is jdk what is JRE and what is jvm so let's just talk about it in detail okay so first I will be talking about jvm so here you can see the jvm okay so what is jvm jvm stands for Java virtual machine it is an abstract machine it is a it is a specification that provides a runtime environment in which Java byte code can be executed so as early I have told you the dot dot dot Java class file is converted into dot class file dot class file is the actual byte code that Java uses to run that code okay and then again that dot by dot class file is converted into machine understandable code okay so that part is handled by jvm so what jvm performs the task okay jvm loads the code it verifies your code it executes your code and provides the runtime environment to the user to execute the Java program okay so yeah let's just talk about JRE so what is JRE Jr stands for Java runtime environment it is a set of software tools which are used for the developing the Java applications it is used to provide the runtime environment it is implementation of the jvm it is physically exist it contains the set of libraries and other files that jvm uses at the runtime so here you can see jvm the set of libraries like jar Etc and other files together makes JRE so JRE so I hope you understand the JRE so let's move ahead and talk about jdk so jdk is an acronym for the Java development kit so till now we have learned jvm JRE and some development tools are there like Java C Java and all those things forms a jdk so you might have seen one software we have install in our first video that is download jdk and this is the jdk so what contains inside a jdk is jvm JRE and the development tools which are required for the Java Apple Java applications to be built okay so Java jdk is a software development environment which is used to develop Java application and applets it physically exists it contains JRE plus development tools so as I told you JRE plus some development tools forms together a jdk and which we have installed in our first video so enough talking about theoretical part I hope you guys learn something about the theoretical part of the Java so in our upcoming videos we'll be starting to code in Java programming language and will be recording our first Java program in the upcoming videos what we are going to cover in this video is Java variables what are variables in Java so okay so let's just get started a variable is a container which holds the value while the Java programs is executed okay a variable is assigned with a data type and the variable name is the memory location okay so what it mean you can see here is a pictorial representation of what I said so suppose this is a ram memory and you have created one variable here and you have assign value it value 10 to the to that variable okay so variable is nothing but a container inside your memory which holds a particular value and what kind what kind of value it's gonna hold it depends upon the what type what data type you have given to that variable okay so you can assume it like a reserved area inside your memory okay uh so moving ahead we have types of the variables okay so there are three mainly three types local instance and static so let's see one by one each of them okay so what are local variables a variable declared inside a body of the method is called as local variable and you can use this variable only within that method and other methods inside that class aren't even aware that the variable exists so we will see the implementation part of this local variable instance variable and static variable once we get into the code okay for time being just listen to me and try to understand okay the next next one is instance variable a variable declared inside the class but outside the body of the method is called as instance variable and it should it should not be declared as static one why so I will also tell you in the coding part of that video okay so moving ahead we have the static variable a variable that is declared as static is called as static variable it cannot be local you can create a single copy of the static variable and share it among all the instances of that class okay and the memory allocation for those static variables happens only once when the class is loaded inside your memory okay so enough talking about the theoretical part let's just get into your IDE and code it out okay and along during coding part implementation I will be discussing some variables rules to declare an variable okay so there are some six to seven rules are here which you need to keep in mind while declaring a variable okay so just open your IDE and create one new project and create one new file here and you can create a new file also by clicking here on SRC just right click here new Java class and let's suppose I am giving variable as my name class name variable okay variable dute and hit enter so it will create a new class as you can see let me increase the font size for you so that you can See Clearly okay I hope it is visible now and let me create one main method so one one added advantage of using this ID is is you can you don't have to write all those codes like here you if you can if you want to write the main method you can just simply type m a i n Main and hit enter on the keyboard and it will automatically write those main method for you and you can start coding okay so first of all let's see what are those three types of variables that I have told you previously that though the static variable local variable and instance variable and what are what are the difference between all this okay so let's suppose if I create one variable here let me create static int m is equals to 100. okay so for time being I know you can't you don't know the static and in keyword so in upcoming videos we will be covering data types there you can understand just for time being understand this is a variable that is M and I have assigned value as 100 to it okay so you can see here I have declared this variable inside the class but outside the main method so this method this this this type of variables are known as static variables okay and you you can comment write comments in the your Java program by giving the two forward slashes and writing the comment inside it okay so again I inside the class but outside the main method I will be declaring one method okay so return type of my method would be void let's suppose I have created this method and inside this method I will be declaring one variable okay so the variable which I declared named n and I have assigned value to it is 90. okay so these kind of variables which are declared inside a method okay so these are local variables means the scope of these variables are only limited to that method means outside this method from line 4 to 6 this variable is not accessible inside your class okay I will comment it out okay and now the last one is instance variable okay so inside I'll come inside the main method and declare another variable name as int data and I will assign value to it is as 50. okay so these variable are called as instance variable so here you can see what is the depth formal definition of the instance variable a variable declares inside a class but outside the body of the method is called an instance variable okay so you may think uh what is the difference between instance variable and static variables variables because the both the variables are declared outside the method body okay so the only difference is for the static variables you just give keyword as static okay ahead of that the variable which where you have declared it okay so I hope you have cleared idea about what are the variables and what is static local and instance variable so I'll be giving you some basic program of addition of the two numbers okay so let's just get started uh wait I will start from here I will just comment out this line and add the comment as addition of two numbers okay so what uh what are the variables you think we required for addition of the two numbers okay so I need one variable which hold the first value and I did another variable which hold the second value and I need the third variable which hold the addition of those two numbers okay so let's create int a is equals to 10 and another variable in B is equals to Let's suppose 20 and another variable third variable which will hold the addition value of A and B I will write a plus b here okay and to print something on the console we just write system dot out dot paint Ln okay so here in this IDE you have also a shortcut to write this you just wrote write s out and hit enter the ID will automatically write system dot out dot println for you and I will be printing C here okay so let me just comment out this part of the code that I don't require okay and I will hit run okay so here you can see my file is getting there and here you can see on Console 30 is printed because the addition of the a that is 10 and B that is 20 is 30 and which is get printed on the console here Okay so uh another another example let's suppose we have you have to subtract those two numbers so simply here you can come here and give B minus a or something a minus B whatever you want and you just click here the code will get executed and here you can see then we sprinted on the console because 20 minus 10 is 10. so this is the basic uh very uh basic Theory and practical implementation of the variables in Java I hope you guys have understood the what are the variables or how it works and how it stores the data okay so in the upcoming video we will be talking about data types in depth okay so thank you guys for watching this video I will see you in the next video we'll be learning about the data types in Java so what are the data types data type specifies the different sizes and values that can be stored in the variable so in the previous video we have learned about the variables so we can here data type is nothing but it declares the which type of the data it's going to store inside the memory okay so here you can see the chart of the different types of data types are there you can pause the video and you can look into this I'll be teaching you it EV each and every type how what type of the data is going to store okay so now moving next it here is here is a chart you can see so in the First Column the name of the data type is there in the default value means if you don't assign the value to the data type what value it gonna store inside it by default okay and here's the default size that how how much memory it will consume if you declare that type of the data type inside your code okay so let's suppose if I declare integer integer variable of data type so the default size it will hold this of four bytes okay so enough talking about the data types we will see in detail in the code in this video okay so let's just talk about the keywords keywords in Java are also known as Reserve words okay the keywords are particular words that act as a key to the code these are the nothing but the predefined words by Java so that you cannot be used as a variable or object name or a class name okay so there are basically uh I think I guess 48 48 keywords rewards Reserve keywords are there in Java which you cannot use either as a variable name object name or the class name I will show in the show you in the code part so enough talking about the theoretical path let's code it I will jump into my IDE IntelliJ IDEA okay stick till the end I will be announcing some new announcement is there for you guys so that you can learn more efficiently in this whole series okay so and I don't want any tip come here click on right click on the SRC click on new and the new Java class so today we are learning data types so I will give this file name as data types okay okay so come inside this declare your main class main method sorry inside main method so let's go and see each data types one by one okay so first of all we will be talking about the Boolean data type okay so Boolean data type is it used to store only two values let me show you okay so for example if I declare Boolean first of all let me increase the font size I don't know how to increase it okay let it be I guess you guys are getting what I am telling time to tell you okay Boolean one is equal to false okay okay and I will do system.out.println and print one okay so if I click here run see guys what will happen let me hide this project okay so you can see false get printed on the console okay so as you can see I have declared one Boolean data type one and variable name is one and I have assign it the value to be false okay so if I write here true and again I click on the Run see it will give it true okay and if I write anything else one two C IntelliJ IDEA is throwing some error let's take it so here it was telling that the one variable that I have that I have declared is a type of Boolean and we I I am trying to store the integer value inside it so that can cannot be happen okay so now I will show you if I declare this one Boolean one and I am trying to print the one okay so here it again I get error variable one might not be have initialized so I have to initialize it whether as false okay or true it's up to you but remember it will going to hold only one two types okay either false or either true okay so next data type is a short data type so short data type is a 16bit assigned to complement integer and its value lies in between minus 32 768 to 32 767 okay that's the theoretical part I will show you the implementation right away okay short s is equal to let me assign it the value let's suppose ten thousand I guess it is right okay and I will declare another short okay in the variable name is r okay and I will assign it the value of minus 5000. okay and I will simply print s Plus R okay and if I click run see the values are going to be printed on the console so short is the derived which holds these values okay so next is float next come float let me comment this out first yeah let's go so float is nothing but that does when you when you are trying to store the data which is in the point or decimal okay so what I'm trying today let me give you with the example float F1 is equal to 234.50 okay uh I guess wait a wait a minute wait a minute float F1 and F okay and if I try to print now load F1 okay and if I try to click on run here the float value is 2.5 is going to print it okay so you have to write F value that you are storing the float values inside of float variable okay so this is this is for float and now integer comes okay it's integer is simple straight forward into a is equal to you can assign any value okay let's suppose 250 okay and inside this I will print the variable name a and if I click run now here you can see 250 get printed on this console okay so these are the data types and yet more to come we will learn all those data types when we are going to learn all those data structures Parts Okay so let me get back to the keyword and the keywords are nothing but the reservers you cannot use that words uh to declare any variable name object name and class name inside your code okay so enough talking so in upcoming videos we are going to see one exercise is coming for you guys I expect you guys to answer those exercise and we will be seeing solution for those exercise questions in the upcoming videos okay so the announcement is that I have created one uh repository for you guys and I will be uploading all those PDF resources that I have these are the nodes I will uploading all those nodes inside that repository and the core part this part I'll be uploading all these codes in as of as a file inside this repository you can you guys can access this repository and download the code as well as the PDF part and the link to the repository will be provided in the video description you can access and get the help from it so thank you guys for watching this video I will see in the next one thank you so guys in this video I will be giving you the five coding questions here you can see and I'm expecting that you guys should give it a try and code it out these problem statements so till now if you are following this series I expect that you are what you have watched all those previous videos wherein I'll be talking about the data types and variables with you guys till now so uh in considering that you have watched the previous video I have created this list of five coding questions wherein the only concept that is required is data types and Java variable Java variables for you to solve these coding questions okay not more than this and not any other another concept that I didn't discuss in this series you don't require this okay so I will just give you brief overview of each question uh so that that it's like a hint for you to solve these questions okay so in the first question the question is like that write a Java program to convert the temperature from a Fahrenheit to the Celsius degree okay so it's a basic simple Pro Java code you have to perform and the input is like that you given a temperature that is in Fahrenheit and the expected output from your code is that though that fahrenheit's temperature will get converted into Celsius temperature okay you can search for a search into Google for the conversion formula for that Fahrenheit to Celsius okay and second one is write a Java program to convert minutes into a number of years and days so the here in the input will be the minutes like here you can see three four five six seven eight nine is the minutes that the user will input give input to your code and the expected output is you have to convert those minutes into years and corresponding days okay so next question is write a Java program to compute a body mass index so what is body mass index you can just Google it out like here if I Google body mass index and right formula okay so first you can come you can go any of this website and here you can see I guess yes here you can see the example they are given for example you have your weight is 68 kg height is this much so the calculation is this for calculating the BMI so you can use this formula and solve this problem to calculate the BMI of the of that person so the inputs to this program will be your weight and height and the corresponding BMI will be get printed on the console okay though so next question will be write a Java program to break an integer into sequence of individual digits okay so for this the input will be like like here you can see one two three four five six is given to the given as an input you just have to print the each word of that each digit of that number in a separated way like one then one space then two then one space one three asset like that okay so next moving next the fifth question is write a Java program that accepts the two integer from the user and then prints the sum the difference the product the average the distance the distance in the sense the difference between the integers okay the maximum the maximum means the larger of the two integer and the minimum minimum means a smaller of those two integers okay so for this you have to receive two inputs from the user first input as a first integer and second as a second integer and the expected output is the sum of those uh two numbers the difference between two numbers the product of the two numbers the average of those two numbers and the distance of the two integers and the maximum integer from those two numbers and the minimum integer from those two numbers so I hope you guys got some idea about these five questions give it a try try to solve those five question it will help you to understand those concepts of data types and variable more efficiently and after one or two weeks I'll be making a video in which we will be talking about looking into the comment section of this video this you put some solution of your Co you you put some code of your solution in the comment box of this video and I will be looking to it and okay so in the next video we will be seeing some solution towards this problems before that you should try those these questions and I hope you will try and give it a try and once once again I will be providing this as a PDF this notes there's all this question has a PDF file inside this GitHub repository you can just click here like here I have uploaded already you just this is the fifth video of our Java Series so you can click on the zero five resource and you will be get all those resources in here okay so no worries about that okay I hope you guys have enjoyed this video please give it a try for these questions and I will see you in the next video talking about the solution of these questions in this video we will be talking about the solution of the exercise one okay that I given to you in those previous videos okay so in this video I'll be giving you the solution of the problem number one two and three and in the next video I'll be talking about the solution for the fourth and fifth because if I make all those five solution in one video the video will get lengthy and you guys will not watch all these videos Okay so let's just get started so what is the first first problem statement says write a Java program to convert the temperature from Fahrenheit to the Celsius degree okay so let me get into my IDE right click here create a Java class and I'll be giving class name as the cell CS convert okay let me rename this because class name should always start with capital let okay so inside this let me create my main method okay let me just increase the font size so that it will visible to you guys also okay so first thing first to solve this problem you guys first know the formula of the conversion from Fahrenheit to the Celsius so formula is like this let's suppose C is the variable which holds this actual Celsius and which is equals to the 5 into f means the Fahrenheit temperature minus 32 then it's divided by 9. okay so this is our conversion formula to convert the temperature from Fahrenheit to Celsius okay so here so first I will import some classes from a package name java.util so to import it this you have to write import Java Dot util dot scanner so I know at this point you guys didn't know what is this import Java util.star bear with me I will tell you or each and everything in this code itself okay so at first I will create one object of that scanner class let me create like import let me call it as input because we are receiving the input from the user okay scanner and then system dot in so first let me explain you what I did here okay so in the first line import java.ital.scanner I have imported the scanner class from the util package of the okay main Java package util package is there and scanner class is there inside the util package okay what does the scanner class scanner class do scanner will just gives get the input from the user and give it to the program okay so to use that scanner class you have to create one object of that class okay so here I have declared the car scanner and input input is the object name for that scanner class and I have initialized that object here okay simply and system dot in represent you have to get the input from the system that means user will get type those input and hit enter and that input will pass to the program okay so next I will just print okay let me print so first we have to receive that Fahrenheit temperature from the user okay so I will just try it input uh degree in fah fa is just a short form for the fahrenheit that I I have given okay so this line will get printed on the screen so next at this point line number eight we have to receive the input from the user that is the Fahrenheit temperature okay for that I will be using double data type okay so and I hope you know the double data type that I have discussed in the data type video and I will call that I will create a variable name fah okay and at the next line I have assign it the value add input Dot next double okay okay so in line number eight we have create one fah variable and assign it the value that the input dot next Double and what next Double method will do just simply it will take the input from the user that that is in the form of double and store it inside the variable FH that is the Fahrenheit Fahrenheit temperature that we will receiving from the user okay so next we have to require we have required another variable which will store our Celsius temperature okay Celsius temperature okay and the formula that I have given here in the line number five you have you just you just have to create or just write it down here like this same here 5 okay let's show 5 into again when brackets are there and the f means the fahrenheit so we have received that Fahrenheit in this variable okay so I will write fah minus 32.0 that is our formula you can see in the line number five also and after those two circular bracket I will divide it the result of it by 9.0 okay and at the end I'll add the semicolon okay so at this point of our code we have taken the input from the user that is in the fahrenheit and we have stored inside the fah and when and we have created the Celsius variable wherein we'll be converting those Fahrenheit temperature to the Celsius and storing in the range Celsius variable okay so at last I have to just print that Celsius variable to the user okay so for the printing first let me get that Fahrenheit temperature and I will be concatenating it with this okay so let let me first type it out then I will tell you what is concatenation in Java okay so here I will write degree FH stands for Fahrenheit is equal to okay okay it's equal to Celsius I guess yes Celsius then again one okay Celsius in Celsius let me just decrease the font size so that you can see in one window Celsius okay so what in this line is we'll be doing is first it will be printing fah value FH value that user will give us give us one space is there to concatenate those two strings we use the string concatenation which is plus where plus operator is there you can just write the plus and the one blank space is there right in this case let me just explain you when I run the code okay I will explain you okay so I guess this is what we have to achieve in this code let me just click on run so here it it was saying that input a degree in Fahrenheit so I just go here and what is the input 2 and 2 is there okay two one two so here you can see FH 212.0 is get printed one space is there after that degree Fahrenheit is equal to 100.00 in Celsius when space should be there you can just give it a space and that will get rectified here okay so we'll see 100.0 is the actual expected out output of that code and we are getting that same here okay so I hope you have also implemented this same way that I have done here okay so moving forward for the second code we have to write a Java program to convert the minutes into a number of years and the dates okay for this let me just create another class so let me just call it as so what we have to do actually convert the year and days okay here here and dates sorry guys okay let me just increase the font size okay and I will write the main method here okay so we have to convert minutes into number of years and equivalent days okay so here is the minute okay so for this again we we want we have to take one input from the user that is in the form of the minute okay for that I have told you which package to import import Java Dot YouTube Dot scanner okay so first of all let me just create one scanner variable scanner sorry object of that scanner class not variable import news scanner system dot in okay so now we have to take one input from the user that is minutes okay so I will create one double variable and name it as minutes in here you can name it whatever you want but name like that okay according to you so minutes in here I will assign the value of that 60 into 24 into 365. okay now so in the next step I will be printing one string one line that is input the number of minutes I'll be getting those input from the user at this line and put the number of minutes okay let me go into another line so here we have to take the input actual input that is user gonna give us and I'll be storing that inside a variable called Main okay so I I guess all of you know how to take input from the user as we discussed in the last problem statement okay so after receiving the input from the user I have to generate the number of years that is equivalent to that minute and with whatever days that are left after converting that years I have to convert those into days also okay so I'll be creating one long take long variable is there okay I will name it as long years okay so in that I will be giving Min means the minutes that user have input okay that is going to divide it by minutes in the year okay so at this line number nine years are going to stored in that variable okay so uh then we have to store the days that are equivalent that the day minutes are left okay okay so in here I have to write int and inside that I can write the whatever the minutes are left divided by 60 and again divided by 24 mod 365. okay so here at last I will just print out all those information that I have calculated over here okay I will write int Min means the minutes that are using user in going to get give the give us okay that is the minutes is approximately I will concatenate this with the ears okay here's again ears and okay yeah after the years I have to print those days also let me just print those days and after that I will concatenate with it equivalent dates okay I hope this is the answer okay just Checkmate okay so it is asking for the minutes so minutes are three four five six seven eight nine okay let me give this input three four five six seven eight nine if I hit enter it will say 3456789 minutes is approximately six years and 210 days so that is the expected output here you can see okay so I hope you have understood the second question also so just quickly we will move to the third question what is the question let me check write a Java program to compute a body mass index of the user okay this is another simple question is there we I will just name the class as BMI calculate okay hit enter let me increase the font size okay main method is there and inside that let me just import scanner okay because we have to receive the weight and height of the user okay java.util dot scanner okay and again I have to create one variable so not variable object input is equal to news scanner system dot in okay till here I hope you either understood so now I will first of all get the weight and height from the user okay so for that let me just print on the console enter your sorry enter your weight and I'll be receiving it in pounds you can take any convention just the formula will change to calculate the BMI okay double weight variable I will declare and store that weight inside that weight variable and to get the input from the user I guess you know what to write down put dot next Double okay now we have to receive the height of the user so again I will shout and enter your height in inches I will receive the height in inches from the user okay and I will be storing that in the double variable name inches which is will be equal to input Dot next so now when formula is there to calculate the BMI so the formula is let me just explain you so I will hold all these BMI inside one double variable named BMI okay and inside this the formula is weight okay into zero point four three sorry four five three five I will just write first four points only after the decimal okay divided by inches inches means the height of the user okay multiplied by zero point zero two five four okay and again it will get multiplied by the inches and again multiplied with zero point 0 two five four okay after this I will end that line so at this point my bmis get calculated using the weight and height of the user and it will get stored inside this BMI variable so I I will just simply print that BMI in on the console that is your BMI will be I hope you know how to concatenate two strings okay as we have discussed okay I hope the code will get run okay so it will asking for the weight let me get the sample input 4 5 2 is the weight okay four five two is the weight and what is the height of the user that is 72 inches okay so okay here you can see the BMI for that user having 4.452 weight and 72 inches height will be 61.2891 okay so I hope first three questions you understood and you have you have give it a try to solve by your own so in the next video we'll be talking about the solution for the fourth and fifth question okay so thank you thank you for watching this video I will see you in the next one hello and welcome back to the solution to exercise one part two video so in this previous part we have discussed about problem number one two and three and we have also seen the solution to it so in this video we will be discussing the solution of the question number four and question number five okay so let's just get started let me just Okay so what is the problem number four says write a Java program to break an integer into a sequence of individual digits okay so the test data is one two three four five six and the output expected output will be once then space then two then space like that in every digit we have to give one space okay so to achieve this there is multiple value in in which you can achieve this okay so as of now I I assume that you you are a new beginner and you have watched till my past videos and you don't know the concept of like arrays and strings yet so we will Implement those in this videos using the concept that I have taught you till now okay so let me just create one Java class okay so let me just give you the name to the Java class as give okay give space okay and I will increase the font size and I will import get that main method in my code so in this problem also we required one input from the user so as of you know we have to import Java dot util dots scanner okay and I have to create one object of that scanner class I will name it as import ant and I will name is news scanner system.in because we are receiving the input from this system okay so first of all I will print one line where I'll I'll be asking the user for the six nonnegative digits okay enter six non okay negative digits okay and I will be storing that inside int very variable named input okay import let me just create input number so that you will not get confused between this variable and this input okay and I will calling input Dot next int so as of now we have received the input from the user and I will I have stored that inside input number variable okay so next step I have to okay so this is the step Where We Are in N1 is equals to input divided by one one two three four five six mod 10. okay I know you are not getting what I have written here just bear with me I will tell you what I have done here okay so I will just copy it out print it for five times okay one two three four five and each time my variable name should be different here N2 here N3 and four and five and then six and each time I will decrease the number of zeros in this okay so at first I have given zeros as one two three four five five time I have to give sorry I have given the sixth time so here I let me check one two three four five if it's five and then next time I have to give it it's four zeros one two three four and again next time I have to decrease one zero that is three zero should be there and next time there should be two zeros and in again the next time there should be one zero and at last there will be no modular operation only 10 divided by 10 will be there okay so what I have done here is I have taken the input number from the user and I have divided it by this okay so if if you go on to the Google and search for calculator okay let me just go and search for online calculator okay so what we have done here is we have taken that number so in our case the number is one two three four five six okay so I will just one two three four five six and I have to divide it with this okay so what is that again one two three four five should be there okay so one two three four five with Mod ten okay so if I do this my answer would be so this is the standard calculator so you have to first Define that more in mod operation inside the brackets so that the mod operation get executed first and the result of the mod operation mod operation will be given to the this entire operation where the result will get divided by the input number so here what we are getting is I will comment it out sorry okay I will write one comment here we are actually getting the first digit of the number okay so here we can see where our input is one two three four five six okay so at this line line number eight we are the result of this operation which gets stored inside the N1 is one like that similarly for the second two is going to store for third T is going to store and similarly for fourth four is going to store and five 5 is going to store and inside this 6 is going to you can perform this mod operation inside the calculator but do one thing while performing you just have to put these operators inside a circular basis so that this operation will get performed first and the second operation will be input number divided by that operation result of the operation first okay okay so after this I just have to print those N1 into N3 and for N5 and 6 by giving one simply space inside inside inside it okay I will shout one and one okay so after N1 I have to give one space that is our expected output in the way we want okay so then next N2 will be great printed again similarly and three will be get printed on the console again then plus will be there and 4 will get printed again n of 5 will be get printed and at last and six will get printed okay so I hope this code will run let's see if it get run all right it is asking for the input one two three four five six let me give this input hit enter so here guys you can see the we are getting one two three four five and after that we are not getting six we are getting one two three four five why so because I have done one mistake here as you can guys see input number divided by 10 okay so if I had do this divided by 10 the number that I will get is one two three four five because divided by 10 will shift that number from back side okay so here I have done one mistake I just have to do instead of dividing I have to just give mod okay errors are necessary in your code so that you can learn from it okay now it's working one two three four five six as expected output let me just give you another input through this code let's suppose one four seven four five six okay it it's working one four seven two five eight once spaces are there so okay I hope you have understood this fourth question there are more ways to efficiently write this code we'll be talking that after we once we learn string and arrays in Java okay so fifth question is little bit long okay let me write it read it for you okay write a Java program that accept two integer from the user and then prints the sum and difference the product the average the distance the maximum and the minimum from those two numbers so we you are here we you have to perform a lot of operations on those two numbers okay just quickly go into your editor click on the Java class and I will give here since we are performing multiple operation I will give here multiple Ops multiple Ops okay and let me increase the font size also let me get my main method inside here anyway since we are giving getting input form the user I will import Java Dot util Dot scanner okay so now I have to create one object of that scanner class input you know what let me give you another object name this time okay scanner system dot in okay and now I have to get two variables from the sorry two not variables two digit from the number to numbers okay so I will just out here and then ask for the user to enter the first number okay after this I will store that first number inside one variable called first int okay so again SC dot to get receive the input in the integer format we write next in okay so I will copy just this because I will not write that second type here we can write enter the second number and I will give it name as second end okay so at this point we have received info from the user okay so I have to perform operations okay so first operation that we are performing here is what is it sum of two integers is 30. so we have to perform addition operation okay so I will just simply Shout some will be and I have to store that sum means here okay so so for that sum okay so let me just create one variable here which will hold that sum okay some so for that sum I have to write first in the second it so this variable will hold that value of those addition of the two numbers and I will just concat this line with it okay so first operation we have done second operation that we have to perform is difference of the two integers okay so I have to perform minus subtraction okay and in Subs substance subtraction you can give any name to that variable okay until an endless it should not be a reserved keyword which is which is in Java okay which we have discussed in past videos I hope you guys are watching okay here difference will be Okay so difference will be so difference will be I will contact with Subs okay so the third option operation that we have to provide is product of the twin teachers okay sorry product of this 20 and I will hold that inside one variable name product so for the product we have to multiply those two numbers first hint multiplied by secondhand and again I will just copy it out okay product will be product okay so next operation that we have to Prof perform is average of the two integers okay so for the average here we can do one thing sorry for the interruption okay for the average we can perform addition of those two divided by two so I will declare one variable name in teacher of type in name AVG that will hold my average and in this I will perform first End plus second end divided by 2 so my average will get stored inside the variable AVG and I will just print average will be avt so from here I will not performing this distance Max minimum you guys can do it by your own I have I have shown you the first four operation you can perform all those operation here also okay so let me just run this code okay you should try so let me give the sample input here which is given 25 and 5 okay so first number is 25 and the second number is 5 so here you can see 25 plus 5 is 30 25 minus 5 is uh sorry oh I have given minus okay the difference I will run it again 25 five and then now he here you can see 25 plus 5 is 30 25 minus 5 is 20 25 into 5 is 125 and 25 plus 5 is 30 times 30 divided by 2 is 15 which is average of those two numbers okay so I hope you have understood these five Pro X5 coding questions and you have tried also by yourself I hope you get it so thank you for watching this video we will be covering another Concept in the next video okay so thank you thank you okay and welcome back guys to the another video of the Java tutorial series wherein today we are be learning about operators and its precedencies okay so first of all what is operators in Java operators is a symbol that is used to perform operations for example as we have discussed in like earlier videos exercise videos we have performed operations like addition minus subtraction division okay so there are different types of operators in Java and here I have mentioned all those types urinary urinary operators arithmetic operator shift operator relational operator bitwise logical ternary and assignment operators are there uh don't worry we will be doing some code part uh to understand this all operators wherein I will be teaching you about these operators so let's go ahead and learn about the Precedence of these operators in Java so I have shown you the highest to lowest precedence there is another one is the lowest to highest that is where just reverse of that so first of all the Precedence this column will represent the represent the Precedence this uh this is the operator which have which are included in that precedence this is the type of operators and this is the associativity associativity is another concept we will learn in the later videos of this series okay so here you can see operator first software bracket square bracket and are having the highest presidents and up to that the president presidents get precedent level get lower lower lower and at large the assignment operators addition subtraction multiplication operations are there uh motivation assignment operator there which has the lowest operated residence in Java okay so let's understand all this using uh code okay I will just simply create one class name as operators okay let me increase the font size and I will include my main method uh so I required to import scanner class as well because I will be receiving the input from the user in this code Java Dot util Dot scanner okay so here I'll create one scanner object scanner and my name of the object is SC new scanner system Dot okay so now first let me comment it out we'll be learning about unary operator urinary Ops let me like write it like this okay so what are unitary operators Unity operators require only one operand okay and the previous operation that we can perform in this like incrementing decrementing value by one and inverting the value of a Boolean okay let me tell you what I the side right now okay so let me create one variable name as X and I will assign value it as 10 okay and if I shout it like this X plus plus okay now if I click on run the program will get executed and what do you think what will be the output of this code so here you can see the output of the code is 10 okay and now if I print again I will write once out and now I am printing plus plus X okay and if I just comment it out the first line and if I hit run now you can see 11 get printed okay so what is the plus plus operated uh does it will increment the value of that integer by one okay so here at first line line number seven we are incrementing the value of x but after printing it okay if we just come here we print the X and increment the value of the X by 1. and in the second line we are just incrementing the value first and then printing that's why 11 get printed and in the second seventh line the 7 10 in 10 will get printed okay so like this unit Unity operators work and one more thing guys I will provide providing some resource links wherein you can go and check out all the operation of these operators I will be giving you some example in this video you can go there and check check it out and perform some operations okay uh another thing is that an arithmetic operators okay arithmetic Ops so in this arithmetic operation I used to perform the addition subtraction multiplication and division like operations okay so I don't think I have to tell you guys something here I let me just give you an example in a is equal to 10 in it B is equal to 20 and if I just South a plus b okay plus is the addition okay and if I just comment it out this part of the code so that on the arithmetic operator will get executed in this code okay so now you can see 30 is get printed on the screen because 20 plus 10 is 30 okay like that multiplication division and uh subtraction is also there in this earth arithmetic operators okay so next comes left shift operators so let me give one comment here so that you can differentiate between all those operators and I will be providing this code inside my GitHub repository which link will be given to you in this video description okay so let's left shift operators what it does let me just give you one example okay I will do 10 less than less than two it's not less than actually and if I just comment it out so that only left chip operators will get executed and you know you are seeing 40s get printing or printed out the screen so what actually happening behind the scene is Will right here okay so 10 is get into where to cap power 2 okay so what will be the output for this this 10 into 4 and this is 40. so here you can see uh if you write 10 less than less than 2 actually what is happening 10 into 2 to the power 2 2 to the power 2 is 4 and 10 into 4 is 40 okay like that left shift operator swaps and similarly the right shift operators are also working okay so let me just right here itself I will just comment it out you know what let me write separately right Ops okay and I will just copy this and print it here and instead of doing this I will perform the right shift operator okay so what actually done here here you can see 10 is getting divided now not multiply by 2 to the power 2. so this operation will get performance 10 will get divided by four and which is you know equals to 2. okay so if I run this let me just comment it out so that right shift will execute it near it here you can see two is get printed on the screen Okay so next we have and operator which are logical and and logical here you can see I will just comment it out logical and and bitwise and okay so here let me take one example of integer a which is holding the value 10 and teacher B is there which is holding the value 5. 5. and again integers C is there which holding the value let's suppose 20 okay and I will s out a left in b and a less than C okay I will tell you what I have done here let me just write it out first okay and again I will write one more statement a less than b this time I will write only one and a is then C okay and I will comment this line okay let me check ah yes okay so at this line line number 25 what we have doing is we are checking that whether a is less than b and a is less than C so what and operator does if the both statements are true it will return true or here in this case if a is less than b a whether a is less than b no it is not less than b so it will return as false false and whether a is less than C yes it is less than C it will return true so what is this operation will return as false because both are not true and operator requires both the operation to be true if the a if I write here a is greater than b then it will perform that this is this will get true and true and true return true okay but here in our case okay so again in this line we are getting that checking a is less than b again we are getting false here and we are getting the second line as true this operation also return as false okay let me run this and you will see what I have done you see false and false will get printed on this console okay so likewise The Logical and in between and works okay so let's move ahead towards another operator which is called as assignment operator okay so let me just comment it out and in line I will write to that assignment Ops okay so to explain this let me just take one integer a which I will again assign it as random randomly 10. B which way I will assign it as 20 and I will write a plus is equals to 4. okay I will tell you what I am doing here B minus is equals to 4. and I will just print out a and I will just print out B okay so first of all I have assigned value 10 to a f and 20 value to the B and at this line a plus is equals to 4 it what actually happens here is a is equals to A plus 4 this is the operation that happens here okay so what is the value for that it will hold a is equals to what is previous value of a 10 plus 4 so now the value of a is 14 and similarly here the subsection operation will be get performed whether a is equals to A minus sorry our B is there b is equals to B minus 4. which is equivalent to what is the previous value of the B that is 20 and minus 4 20 minus 4 is 16. okay so let me just run this code and you will see 4916 will be get printed on this console okay okay our code is working right 4916 is getting printed on the console okay similarly you can perform here if I write multiplication and here I can again I will perform the same operation but now 20 is multiplied by 4 that is 80 it is it is getting printed on the screen also okay so let me just reverse what I have done here okay so these are the some examples of The Operators that there there that they are there in the Java okay so I will be providing the resource Link in the description box and the box and the link to the GitHub repository also where you can access this code and try some playing with this code okay so thank you guys for watching this video I will see you in the next one okay so welcome back guys to another video of the Java tutorial Series so today we are learning strings in Java so in Java string is basically an object that represents the sequence of character values and array of the characters Works same as that of the Java string for for example we will see in the code part so generally string is in sequence of the characters but in Java string is an object that represents a sequence of the characters and it is present inside the java.lang dot string class is used to create a string of the object so you you could ask me how to create a string object so there are basically two two ways where we can create a object for a string so first way is using the string literal and the second way is using the new keyword okay so string literal is created by using the double quotes Okay so let me just give an idea here itself if I create a new text let me decrease some font size so you can see okay so if I create string s that is equals to let's say welcome okay and if I write this okay let me get it here okay and I will again write same text here that is string now I am changing the object name here okay like previously I write yes now I am writing S1 but here also here also I am giving the same string value okay that is welcome okay so here you can see yes I have created S1 I have created and okay and I will create another one let me create it first and I will name it as S2 now object name is S2 but the value here also I have given this same value okay I have created three object of the string ss1 and S2 and but the values which are assigned to those objects are same so inside Java what Java interprets it as this hip memory is there and inside hip memory string constant pull is there and inside that all those strings which are constant are kept here and one stack is there which maintains an Al and it creates one link and it's assigned that value okay so here you can see I have created three object as S1 and S2 and but this value is same and which are constant okay so that string is added inside the constant pull welcome is added and S1 and H2 which are having the same value is getting mapped with the with that value okay I hope you guys are getting so here it doesn't creates a new instance okay and this is this is where it makes the Java program more efficient because new objects are created if it is already exist in the constant Port okay so another way is by using the new keyword okay in such cases jvm will create a new string object in normal that is non pull hip memory and the literal welcome will be placed in the string Constable pool the variable s will refer to the object in the hip and nonmem nonpull okay so what I mean I will show in inside the code section so Java class methods is there I will show you that later first I will let me show you how the string actually works in Java okay so let me create one class name not strings Java okay and let me increase the font size okay and inside this I will just get my main method Okay so as we have discussed the first way first you know first definition I will write one array of characters then we'll name it as ch and I will assign value it like this let's suppose hello H is there h e again okay IntelliJ showing my error because I have used those double braces okay let me remove this okay h e l I'm sorry HL Ln oh okay so I have created one array of characters okay I know you guys don't know what is array we will be covering that part also in our upcoming videos so let me create one string okay string yes which is equals to new string and I'll assign the way pass the value to it as CH okay and simply I will print s on the console and now if I click on run here you can see Hello is getting printed okay so first we have characters means single single characters are there like h e l l o and what string does it it can't get all those characters and form one word and store inside the uh object s okay so let's see another example let me just comment it out and I will show you another example where wait a minute I require this line for the another example I will just copy and paste it here okay and I will create another string that is S2 news new string CH okay and I will create another string S3 and I will assign it the value string but now I am giving the hardcoded value that is let's suppose example okay example so now I'm trying to print that S2 and I again I will print that object S3 okay and if I click on run now what will happen see he see here hello is getting printed that is a it will concat all those characters all the strings character array and store it inside the object S2 and inside object S3 example is this string which is get stored inside it okay enough talking about the example so in Java there are multiple methods so here you can see a whole bunch of list is here of around 28 methods are there which are declared inside the string class in Java so I will give you one link where you can see the implementation of part of this all these methods I want you to try all playing with this all methods for but first of all let me show you some important ones okay I will show you some important one which are required in our Java code okay so let me just comment it out and here Okay so I'll be giving you the example of string two lower case there is Method inside the string class that's name two lowercase this method Returns the string in the lower case letters okay in another word it converts all this character of the string into the lower case okay let me give you an example so that you can understand better okay so if I create one string name F1 I mean I will assign it value as let's suppose okay let me give you the straightforward method S1 is equals to let's suppose I have created h and let my caps lock hey hello world is there okay so here you can see I have created one S1 object and I have stored a string hello world inside it okay so if I try to print that string okay okay let me out okay so if I want to print this I will simply Scout the S1 okay that is Simpson dot out Dot println okay so again if I try to print S1 but I will do some modification okay so I will write S1 dot so you can see a whole bunch of methods which are implemented inside the Java are displayed here so we want two lowercase two lowercases here and you will simply put this and if now if I click on run let's see see you can here you can see hello world is the original thing where all the all the alphabets are in capital format okay and if I apply the two lowercase method over it string and then it will convert all those alphabets into the lowercase format and it will print to the con print on the console okay similarly all those methods which are implemented in inside the string class are over here you can go on that website and check it out similarly to lowercase is there and two uppercases there which will convert all those uh strings and alphabet into the uppercases format if if there are any in the in your string similarly trim is there index office there and one more we can use his carat and in length it Returns the string length this is also important method with which come into picture when we are using Java arrays okay we will discuss that and when we try to learn Java arrays okay so enough about enough talking about the strings I hope you get the idea about string what are the string in Java okay thank you for watching this video I will see you in the next one hello and welcome back guys to the another video of the Java tutorial series wherein in this video we will be learning about Java if else statements so today onwards we are starting about the conditional statements in uh Java so conditional statements are nothing but the statements which which get executed if the certain condition match okay so there are basically four types in inside it if statement if else statement if else if ladder and nested if still statements we'll be seeing one after one each other so okay so first Java if is there so in if we declare if and inside if we write some condition if that condition becomes true the code inside that Curly braces will get executed okay so flow of this if statement is run like this so our code gets started and in the first condition gets checked if the condition is false then it if it it will not execute that part of the code and it will get execution is get towards that below that Curly basis and if that condition gets true if code is will get executed okay so uh we will be seeing the code implementation also let us first uh try to understand theoretically what is what are those forced types are actually mean okay so Java if else is there any else there is else condition is also there so if the condition of the if statement is not true that is its false then else condition will be get executed like here if you can see condition if the condition is true the code the code will get executed inside the if if if block and if the condition is false then the code inside the else Port is getting executed here also you can see uh the program flow comes here condition is getting checked if the condition is false then else code will be get executed and execution get uh successfully done and if the condition is getting true then if code is getting executed okay so next comes Java if else if ladder so it's like a ladder okay so here you can see if condition is there if this condition is not getting executed then if else else if is there so condition another condition is getting checked here okay so if condition 2 is true then this part of the lcf is getting executed so again else one one more else if is there that is condition three is there if that condition 3 is getting true then this block will be get executed okay and you can declare as many uh else if condition you want and at the last I have declared one else condition that is you all know that will get executed if all those if and else if are generated as false statements okay so let us try to understand why this tray diagram so condition one is there if it is false condition two uh two will be get checked if again it is false condition uh like that and number of condition that you declare inside the code will get checked and any of these any one of this if it is get true then that corresponding statements or the block of the code will be get executed and the program flow will be get uh continued okay if all those else if and else if get false then the else part will be con executed okay so now nested if uh is another concept inside Java so if condition is there inside if condition another if condition is there so we are checking if inside if okay so let us understand by this small exam or tree diagram is here so first condition is check if that condition is true if good if code is executed okay and inside that another condition is there that is another if if block is there if that condition true if code is there if that condition is gets getting false then a program code is altered to an outs outside if okay so this is the four types of the Java if else so let's move on move on to the IDE and try to implement each one of this okay so here I have created if else name if else class Java class Java file is there okay uh inside which I have implemented all those four types and I will try to explain you each one of it okay so I will comment it out okay uh let's try to understand a normal if statement is there okay I have declared an integer name age uh and assign it to Value as 20 okay and and we are checking the age okay if age is greater than 18 so this is the part which here you can see the condition part is there so this is the condition that is being checked and if this condition returns true then this block of code will be executed otherwise the book of code which is written outside this that is line number 12 which is getting which will be get executed if that condition getting false okay if that condition gets true this will get executed if not the normal flow of the code will be get executed okay so here we are here we have stored age is 20 and 20 is greater than 18 so this is this will be evaluated as true and this block of code will make it executed and the age is greater than 18 will be get printed on the console let's see if it gets printed so here you can see age is greater than 18 is getting printed on our console okay so this is the normal if statement I will just comment it out and now let's talk about the if else okay uh this is a code that I have written okay if else so here I have created one variable called year I have I have assigned value to it uh 2020 and if I I have to check whether that year is a leap year or a common year okay so for checking the leaf here here we are taking here mod 4 is equal to equals to 0 and year mod 100 is not equals to zero and this whole uh guys you can you can see this whole let me highlight and this whole condition is one condition and it it is being checked with the another condition that is year mod of 400 is equal to equal to zero okay and this is the or operator which gets evaluated at true if any one of the condition of these two is evaluated as true okay so let's suppose uh this this block of code is evaluated as true and this evaluated as false then overall if statement will be evaluated as true okay so so this if this is true then it will print the leap year and if this is not true else part will will be get executed as common here so let's run it and see so here you can see it is telling that you know year 2020 is a leap year that's right okay so moving next we will be seeing if else if ladder okay so let me just comment it out and comment it and comment this okay so here we are check simply checking the grade of the student okay so here is the marks which are obtained by a student inside an examination okay so we are first we are checking whether the marks is less than 50 if if the marks is less than 50 this is simply the student is fail in that examination and if the Mark is greater than 50 and Mark is less than 60 that means uh and we use and operator when and this and operator will be evaluated evaluated as true if the both of the condition are getting true so now if the student Mark says anywhere between 51 to 659 then that student will be great get the grade D okay similarly C grade is there b grade is there and a grade is there and a A plus grade is there and if any if any one of this condition is not getting uh true then else part will be evaluated which is invalid that that means the marks you have that we have entered here is invalid okay so if I click run secret because why it is printing the secret since the marks is 65 which lies between the 61 to 69 that is this block of code okay so that's why C grade is printing on the console okay so this is the normal if else ladder is there and now let's go and check nested if statements okay so I have declared two variables name age and weight and I have assigned to them value as 20 and 80 okay and applying condition on age and weight so first of all I am checking that if the age of the user is greater than or equal to 18 it's okay so in that case uh our age is 20 which is greater than equals to which is greater than uh 18. and again we are checking one one if statement where we are checking weight is greater than 50 and in our case our weight is 80 which is greater than 50 so this statement will be executed and printed on the console let me check so here you can see you are eligible to donate blood okay so this is the concept behind if else in Java so I hope you have get some idea about if else statements in Java hello guys welcome back to the Java tutorial Series so today we are learning Java switch so what is Javascript Java switch statement execute one statement for the multiple conditions okay it's it's you can assume it's like a if else ladder okay statement the statement works for the with byte short integer long enum types and after the Java 7 now you can use string in the switch statement also talking about in other words you can say the switch statement attach the quality of the variable against the multiple values so there are a few points that you need to remember about the switch statement that we will be talking about talking when we get to code about the switch statement okay so let's first see what is the syntax how the switch statement syntax is there okay so first of all you have to write switch and inside circular brackets you can write your expression and then inside that multiple cases are there there are a number of cases you can Define and there is a value is there which is being checked if that value is satisfied then the code inside that case will be get executed and break break is there which is optional you can write or you cannot write you it depends upon you okay and one default statement is there which get executed if all the cases are not matched means uh if let's suppose you have write five cases here okay and none of the values get executed for that cases okay then default case should be executed okay so let's understand how the exactly the switch statement flow it is there okay so first of all expression is there which you write and multiple cases here as you can see one two three and uh n number of cases are there and if that case is match then statement one is processed and the and the break break statement is there okay this is optional you can write or you can also not write if you want and one defense default is there if none of the cases is matched then it will get executed okay so let's go in our IDE and let's see how it get implemented okay so I'm here in my IDE let me just create one more Java class so I will name it as switch because we are learning switch right okay just let me increase the font size for you guys and let me get my main method here okay so first thing first I'll give you some basic example okay so let's suppose I have declared an integer variable call number and I will assign it the value 20. okay and after that I will Define one switch okay so for Define I will let switch and inside bracket I will give it the way variable number okay pass the variable number and under that inside switch I can define a number of cases as you can see I have as you have till told you okay so I will Define one case where the value of the number should be 10 okay so in that case I will just print 10 okay and let me just create one more you know one more case so that you can you guys can understand it more more in better way okay let me just get out of this case okay and I will Define another case where value should be 20 and I will again south 20 okay and I will write the break statement okay so here you can Define n number of cases whatever you want okay and after that don't don't forget to write the default case okay so my default default case should be let's suppose I'm writing not 10 or 20. okay so here I am telling that value of the number is not 10 or 20. okay so that's why the default case is being executed because if the value of k a level of this number variable is 20 then a 20 will be executed if value of the number is not 20 then this will be executed okay so I guess that should run okay let me run this and one more thing guys all those resources and code part you will get in the GitHub repository that uh link to that get GitHub repository is in the description you can access it okay so here you can see 20 is being printed on the console because the weight value of the number variable is 20 and the number switch is number and the case number two is giving executed uh as true because the value of the number is 20 and this line is getting printed and break statement will break the flow of the code okay I means it it will get me out of the switch statement and after this situation switch statement our code is ended okay so let me just give you an another example okay so if I right now see here my value of the number is 30. so what do you think this will default case should be executed right because uh number numbers value is 30 is this is not true this is not true then default case will be in let's see see here not 10 or not or 20 okay so that means uh none of our case being executed as true that's why our default case is executed okay right so I hope you guys have understood the Java switch and try some uh doing some coding questions on Java switch so that you can get the better understanding of the switch and in the upcoming videos I will be talking about the Java Loops okay what are the different types of Loops are there in Java so thank you guys for watching this video I'll meet you in the next one hello guys welcome back to the Java tutorial Series so today we are learning loops in Java so basically there are three types of Loops in Java one is for Loop while loop and do while loop so in this video we are particularly particularly focusing on the for Loop so what is for Loop the Java for Loop is used to iterate a part of the program several times if the number of the iteration is fixed it is recommended to use a for Loop so here is here you can see the pictorial format of the each Loops in Java so here here you can see let me just zoom it out okay the for Loop is the Java for Loop is used to iterate a part of the program several times okay so when we when we have to perform a several tasks that is the same task but at the number of iterations are there then we we can use the for Loop if the number of iteration is fixed then we can use for Loop okay so what is while loop the Java while loop is used to iterate a part of the program several times if the number of the iteration is not fixed so what is the main difference between the for Loop and while loop when we when we when we have to use it is the only difference between them is when the number of iterations are fixed we can use for Loop or when the number of iteration is not fixed we can use while loop okay so what is do while loop the Java do while loop is used to iterate a part of the program several times use it it use if the number of the iteration is not fixed and you must have to execute the for loop at least once so it just uh means you can say that say it as a incremental part of the while loop where you where you have to perform that increment incrementing task at least once okay and then uh when the loop it reads next time the while condition is checked okay so we'll be discussing about it in the particular upcoming videos so for this video I will be discussing about the for Loop only okay so let's just get started uh so here you can see the Syntax for the for Loop for this for is the keyword for declares the for Loop and three parameters are there initialization is there condition is there and increment decrement is there okay so we'll be seeing uh in detail when we are code this for Loop okay so next comes the how the flow of the for Loop is maintained inside a code okay so first of all initialization is done then the condition is checked if that condition becomes false the loop is terminated and exam control flow of the code is resumed to the end of the for Loop okay and if the condition match then the statement inside that for Loop gets executed and increment decrement is there according to that it increments or decrements the variable counter variable and it again go for the checking the condition okay so enough talking about the for Loop let's jump into your IDE and call it out okay so I am in my IDE just let me create one class name for Loop okay the class name should be start with Capital One for Loop okay let me just increase the font size so that you guys can see main method should be there okay so first of all I will take only just simple program then we will do one more program okay so at first let me just declare one form okay so I will declare it for int I is equals to 1 I is less than equals to 10 and each time we are doing I plus plus okay don't worry I will I will be explaining you these things what you have written here okay and I have been painting I okay so here at line number three you you can see I have told you that there are three parameters are there inside of for Loop so first parameter integer I is equals to 1 is the initialization oh so what do you mean by initialization it is the initial condition which is executed when this Loop starts here we can initialize the variable or we can use the an already initialized variable okay it's up to you okay and then comes this part which is condition okay the second condition is second is it Con condition which is executed each time to test the condition of the loop it continues execution until the condition is false it must return the Boolean value either true or false it is option optional condition okay and this is the part third part that is increment or decrement increment means plus plus decrement means minus minus okay it increments or decrements the variable value and it it is an optional condition okay and the statement means this part is title for Loop that that code of the part that we have to execute okay so that is pretty much about the for Loop let me just run this uh so yes here you can see let me just increase the huh so our condition start from I is equals to 1 and until I is less than equals to 10 we are moving our iterating our for Loop okay so at first system.out.print value of I should be printed okay so when we are coming for the first time the value of I is 1 so that is going to print it on the screen and due to this print Ln new line the execution goes to new line and after that I plus plus is there so we will when the for Loops goes again for checking then then that that time is value is 2 okay so I is so now is value is 2 so 2 is less than equals to 10 is it right then we again come inside the for Loop 2 is going to print it this in this way again again and again the for Loop runs and at last when the value is 10 less than 10 yes when we print 10 and when we do I plus plus the I will value become 11 and when we check I 11 is less than equals to 10 so 11 is not less than equals to 10 so Loop terminates and we exit out of the loop and program is ended okay so that's how 1 to 10 is going to print it on the console okay so let me just take another example that is very often used example so let me just comment it out so what we have expected to print on the console is this okay we have to print the this let me just create it first for you guys okay airport three four five okay one space should be there after each star okay yes so okay so this is the expected output on the console this is this series of the Stars should be printed okay using the for Loop okay so let's just get started I will declare one for Loop which will go from one two five and each time I will be doing I plus plus that is I will be incrementing the value of I and I need again one more for Loop so here I I am declaring for Loop inside of for Loop that is the nested for Loop okay so I'll be declaring new variable integer J which is equals to 1 and I'll be checking that whether my J is less than equals to I and I'll be doing each time J plus plus okay and inside this I will be printing my star okay here okay my star is going to get printed on the console so this since this is the string I have to put it inside the curly braces and if after the for Loop execution and outer for loop I will just print a new line okay so now if I execute this code I hope this will work yeah this is working fine so only one thing is there we are not getting that space in between each star okay so that that is because of this I am not given the space here so that should be rectified here yeah so here we are getting that pattern one star then two stars and three star four star like that you can print it how how many as many stars you want just to just you have to increase this value of the five then it will get work okay so I hope you guys have learned about the for Loop you guys have got some idea about the for Loop so in upcoming videos we'll be learning about while loop and do while loop and after that I'll be giving one exercise based on the loops and whatever I talk to you till now okay so thank you guys for watching this video bye bye so hello guys welcome back to the another video of the Java tutorial Series so today we are we'll be discussing about while Loops in Java so what are the while Loops while loop is used to iterate a part of the program repeatedly until the specified Boolean condition is true so as soon as the Boolean condition becomes false the loop get automatically stops okay and it is recommended that to use the while loop when we don't know how much iteration we are going to perform in that Loop okay so here you can see the syntax of the while loop while this while is a keyword which is used and the condition is specified inside this circular brackets and uh inside those uh curly braces we will write the code which is which we have to execute inside the while loop okay and after that incrementing decrementing statement should be written so that each time the condition should be checked okay so now this is the flow of while loop so first uh program execution comes and condition is checked whether if the condition is false Loop gets terminated and if the condition is true then statement inside the loop gets executed and again it goes further checking the condition and this Loops will iterate uh time n number of times that we have declared okay so let me just get into my IDE and we can check how while loop is working okay so here I will create another Java class which is name as while loops sorry okay let me increase the font size I will get my main method and okay so first exam first I will take simple example okay so integer let me take integer I is equals to 1 and then while while is the keyword which I will use and inside circular braces I will tell the condition that my ash is less than equals to 10. okay and inside loop uh I will be printing the value of I okay simply and after that I will be incrementing the my value of the I okay so this is the simple while loop where we are checking the whether ice value is less than equals to 10 or not if that value is less than equals to 10 that Loops uh this expression get evaluated at evaluated as true and Loops get executed and system dot out dot println will print the value of I on the console and each time the value of I will be incremented so for the first time when Loop expression gets checked the value of I is 1 here you can see okay so 1 is less than 10 yes it will come inside the loop and it will print the value of I that is 1 and it will after that it will increment the value of I by 1 so when next time the loop get when the expression get checked the value of I is 2 2 is less than 10 yes the it comes out inside the loop and it will print the value of I that is equal to 2 so it will print all this value of I well until the expression it this expression evaluated as true so let me just run this code so that we can get the output so here we can see one two three four five six seven eight nine ten is going to print it and after that Loop is terminated because the value of when after 10 the value of I becomes 11 and 11 is not less than 10 and this expression is evaluated as false and it will terminate the loop okay so let me just comment out this and I will tell you another example which is known as infinite Loop okay so I will declare one while loop and inside that I will write on simply true okay and I will just print in five native Loop okay so here you can see this while loop will never execute a naval terminate because why because the expression inside this tells that it is always true that will that because when when I click on run so here you can see infinite infinitive infinity loop is getting printed on the screen so to exit from this you just have to press Ctrl C so that your code will be get stopped executing and this look at here how many times it is printing in finite in finite Loops okay so this is one example of the infinite Loops in Java so you have to avoid this okay this kind of situation when you are coding so that that is pretty much about while Loops so in our upcoming videos we'll be talking about do while Loops so thank you guys for watching this video and I'll see you in the next one hello welcome back guys to the another video of the Java tutorial Series so today we are learning the do while loop okay so what is do while loop in Java the do while loop is used to iterate a part of the program repeatedly until a specified condition is true if the number of iteration is not fixed and you must have to execute that loop at least once it is recommended that you should use a do while loop okay so it it the Dual Loop is also called as exit exit control Loop in Java so I will tell you whenever when we are going to code it I will tell you why it is called exit code exit control Loop okay so here here you can see the guys syntax do do is the keyword which is used and inside after that we will write the code which we have to execute inside the loop and the update statement should be there and after the ex end of the do block you will write one while and we will specify the condition okay so due to this uh it this is the loop in Java which will execute at least once whether the condition is executed as true or false okay I'll I will tell you exactly what what is it is so when we are going to code okay so first of all let let us check the flow of how why do why do while loop is Works in Java okay so first when the exam flow control flow comes inside this do while loop there is the statement inside it get executed at least once then the condition is check if that condition is true that statement is processed and again it ratio iterative iterative work should be there and if that condition it evaluates at false it will terminate that Loop okay okay so let's just get into our IDE and see how do while loop works okay so I will come here and I will right click here Java class I will create and I will write Loop sorry okay and I will increase some font size so that you guys can see it clearly main method is there so first of all I will take only only one simple do while loop okay uh I will declare one integer I is equals to one and inside again I will declare do while loop and inside do I will just simply print the value of I and after that according to our syntax we have to declare one expression here so my expression is I is less than equals to 10 okay so if I now click on run so here you can see one one one one is getting printed in finatively because I was I'm I have done one little mistake inside my code I have not written I plus plus that is my ielt value is not incrementing in this code that is that's why it gone into an infinite Loop okay let me just terminate this code stop all okay and now if I click on this run button now yeah now it's working fine it will print one two three four five six seven eight nine ten so you would ask me what is the main difference between while and do while because here also we are doing it the same okay so I will explain you by giving one example right so let me just comment it out first and now I will declare again one I variable that is equals to zero and I will declare one do so the statement that I am going to print is wait hello hello is the string that I want to print and each time I'm doing I plus plus okay and the condition that I want to check is whether my I is less than 0 or not so what do you think guys let's check let us check if I run on click but run button okay so hello is going to print it on the screen at least once so you could ask me this this well I is less than zero this this could evaluated as false then why the loop is going to run so guys this is the main difference between a two while and while loop the the statement inside the do will always execute at least once it will execute then it will come and check whether my given expression is true or false so that's why once it it will print hello and in next time it will increment the value of I that is 1 so 1 is less than 0 it is not obviously that's why it is terminating the loop now after painting the hello on the screen okay so I hope you guys have get some idea uh so what is do while loop and what is the main difference between a while and two while loop in Java okay so thank you guys for watching this video so in the upcoming video we will be talking some of the of few except which are left in the conditional statements okay that is break comment and few more are there it's okay so enough talking about this video we will be meeting in the next video okay so thank you bye hello and welcome back guys to the another video of the Java tutorial Series so guys this is the uh I guess last video of the control statements so wherein we will be talking about Java break Java continue and what are Java comments okay so let's just get started okay so what is Java break so Java break is a statement which is used to break a loop or a switch statement it breaks the current flow of the program at specified condition in case of the inner loop it breaks only the inner loop okay so here is a diagrammatic representation here you can see uh one Loop is going on it it is iterating and one condition is defined inside that Loop and if that condition becomes true uh we will declare a break statement there and it will break the flow of the loop and it will terminate that Loop okay and where whenever that condition is evaluated as false the loop will again go and iterate iterate iterate until the specified condition becomes false okay so what is Java continue okay so Java continue statement is used to continue the loop it continues the current flow of the program and skips the remaining code at a specified condition in case of an inner loop it will continue the inner loop only okay so we'll be uh talking in depth when we are going to code this Java continue and at last Java comments are there so what are the documents the Java comments are the statements in a program that are not executed by a compiler and an interpreter so basically there are three types of the Java comments one is single line command multiline comment and documentation command so what is single line comment the single line comment is used to comment only one line so to declare a comment inside Java Java program we will just write two forward slashes are there so when you when you declare two two forward slashes and after that whatever you you will write that will be interpreted interpreted as a comment in Java okay so what is multiline the multiline comment is used to comment a multiple lines of the code so when you when we are you are going to comment out the multiple lines of the code in Java then you can use multiline code multiline comments sorry and third one is documentation command so documentation comment is used to create a documentation API to create documentation API you need to use Java doc tool so we'll be discussing more about documentation uh comments in our upcoming videos when we are writing some code that is a production level code okay so let's code it now it's I will come here inside my IDE and I will create one Java class name break okay and let me just increase the font size and I will tell you and give you one simple example of the break okay and here I am writing one for Loop which will iterate when I is equals to 1 and I is less than equals to 10 and each time my Loop is increment is value is incrementing by 1. okay so inside this sorry guys I'll get I'm getting errors because I forgot to write the main method and I should write all this code inside the main method my bad and inside this for Loop I will declare one if statement and I will write that when I is equals to equals to 5 simply break okay and other than that if I come out of this Loop I will print the value of the eye okay now if I click on run so here you can see one two three four is going to print it on the screen and when the value value of the I is incremented and when the value of the is becomes 5 it will check whether the 5 is less than 10 it yes it come inside the loop and it will check I is equal to equal to 5 yes it will break the loop it will break the for Loop and it will get out of that Loop so this this is the situation where you can use the for Loop inside Java okay okay so we have discussed about break now we will see what is continue in Java okay so let me just copy out this code because I need this okay and add this I will instead of writing break I will write continue okay and I will I will execute the same code okay so here you can see what is going to get printed on the console is one two three four and five is skipped and six seven eight nine ten is printed on the console why so when the value of the is becomes 5 when I is equal to equal to 5 this if condition gets evaluated as true and continue this line number 11 is executed and what will continue will do it will skip that iteration for that Loop it will not execute any of the code after the line number 11 and it will skip that Loop and it will go for the incrementing of the value of the I and iel's value become 6 and 6 is less than 10 and that's why 6A is going to get printed on the console okay so continue is used basically for to skip a particular iteration inside a loop okay so I hope you guys have understood this continue so last topic that we have remaining is Java comments okay so let me just give you some example of the comments so as you can see these are the single line comments okay so here uh comments and I will just explain you okay so this is uh single line comment in Java right now my ID is throwing so much error because this is not a Java code this is just a simple English statement so if I want to comment this out I will just come here and just put two forward slashes and this that this becomes a single line comment inside Java okay so let's suppose we have to declare a multiline comment Okay so I will write like this this is a multi line comment Angel so here two lines are there line number 17 and line number 18 are there that we have to comment so in that case we will write one forward slash followed by one asterisk and after when the at line number 18th end will write asterisk and one forward slash so guys this is the example of the multiline comments inside Java so now it when we talk about the documentation comment uh there are a lot more example of the document coming documentation comments are there that is at author add code at version tag so these are some tags which are used in a multiline command we will be discussing it in our upcoming videos when we saw uh some high level hard level uh Java programs and in that we will create a documentation comments okay so that is it for this video guys and now we have officially uh discussed all the topics which are comes under the control statements in Java so in the next class onward we will be starting our oops Concepts in Java and one more thing guys I will be giving you the exercise number two in upcoming videos depending uh it the question that are asked in this exercise is whatever I well I taught you to form till now then that on those topics that is for Loop while loop do while Loops all these topics requires as a prerequisite to solve that exercise so I hope guys I hope you guys will uh solve that exercise and meet you soon thank you hello and welcome back to the another video of the Java tutorial series wherein today we will be covering uh one exercise number two uh so till now I have taught you Loops in Java and some basic concepts of java So based on that uh I have created five questions here here you can see and I expect you that you should give it a try to this question and try solving this question and post your comments uh answers in comment section okay so let's discuss one by one uh questions okay so first question is write a program to calculate the sum of first 10 natural numbers so you have to create one Loop wherein you will be calculating the sum of first 10 natural numbers okay so for the second one write a program that prompts the user to the to input a positive integers okay so first of all you have to take a user input user input from the user where a positive number and it it should then print the multiplication table of that number and let's suppose I have a given input as a 2 then it will show me a it the program should show me the whole table of the two okay and then third one is the writer program to find a factorial value of any number enter through the keyboard means you have to take input from the user and whatever the input in the user has given based on that you have to out give the output to the user as a factorial factorial value of that number okay so fourth number is write a program that prompts a user to an input an integer and then output the number with the digits reversed okay so what does it mean actually here you can see example one two three four five is there and the output which is you should given give to the user is five four three two one means just a reverse of that number which is given by the user okay so fifth one is write a program to print the Fibonacci series of n terms where n is the input by the user okay so N means any number let's suppose I have given 5 as a input so so your program should return me the first five elements of the Fibonacci series Fibonacci series is nothing but the addition of the two numbers okay so first series start from 0 and 1 and the the next next third term should be addition of the past two terms okay so past two terms are 0 and 1 0 plus 1 is 1 so now now for the fourth term we can add the past two terms one plus one is two and then again for the fifth term addition of the third and fourth term two plus one is three like that the series go on okay so I hope you try this questions and in upcoming videos we will see the solution to the questions before that you should try this question so thank you for watching this video hello and welcome back to the another video of the Java tutorial Series so today we are looking the solution to the exercise number two that I have given in the previous videos it's okay so let's just get started so first of all uh I'll be covering first three questions in this video and other two other two questions will be covered in the upcoming videos because the video link should it should be increased if I cover all those questions in one video okay okay so let's just get started so what is our first problem uh write a program to calculate the sum of first 10 natural numbers okay so I hope you know what is natural numbers natural numbers uh start from one okay so let me get just get into my IDE and and inside my SRC folder I will create one Java class and I will name it as exercise to Solutions okay so let me just increase the font size for you guys okay and inside this I will write my main method okay okay so I have to print the sum of the natural number first 10 natural number okay so for that I will be requiring one variable which will hold my sum okay and again one for Loop is there int I is equals to 1. so I hope you are getting why I have written one here because the natural uh natural number starts from 1 so that's why I have written here I is less than equals to 10 less than equals is there because we have to iterate for the value 10 also okay and since our value as value is 1 also there and each time I will be incrementing the value of I okay so inside my for loop I will be doing here sum plus is equals to I so at this point uh I am updating my sums value okay so what does it means plus is equals to is nothing but this let me just make it simple for you so that you can understand better okay sum plus I so at line number six and line number five are the same it just uh we write a Sim at a simpler manner okay so I like that first one okay uh so here we are just updating the sums value with the previous sums Value Plus current I is value okay and after my Loop I will just print my value of the sum that is the sum of the first 10 natural numbers okay now let me just concat with some variable okay so I hope this will work let me just run this I hope you guys are liking this tutorial series okay so here the here you can see the sum is 55 because when you add 1 plus 2 plus 3 plus 4 plus 5 up to 10 the sum will be 55 okay so that is about the first question so let's just move on to the second question what is write a program that prompts the user to give a positive integer and it should print the multiplication table of that number okay so let me go inside my IDE and I will comment this okay so let me just give it a comment over here so that you guys can understand first okay first and I will comment this also and inside below this I will create another commander in a second so this is the solution for the second one so here I require one input from the user so that's why I have to create a object of the scanner class I hope you guys know the scanner class system sorry system.in okay so here you can see I have not imported uh the scanner class so that is the good thing about the IntelliJ IDE whichever class you use here it will automatically import that class inside the import statement at line number one UK you guys can see okay and uh I will require one a variable called num which is of type integer and then in the next line I will just print enter a positive number because I want a user to enter a number enter any positive number okay and below this uh I will simply write num is equal to SC dot next okay so now uh when I get input from the user I just have to generate the multiplication table of that number okay so for that I will be printing oops let me just create ah yes let me just write multiplication multiplication table of num okay So Below this I will be generating the multiplication table for that number I mean user icon so I will be using for Loop for INT I is equals to 1 I is less than equals to 10 because we have to generate uh for example for two stable we have to generate two two tens are twenty after that we have to send it you can generate how much you want okay and inside this I will be printing the num Plus one sign which represent multiplication and I will again concatenate it with value of I and then again I will concatenate it with equal to sine and again I will write one operation over here which is my num multiplied by I okay so I hope you guys are getting this slide number 20 what I have done here I have I have first the print the number that is the input given input by the user so at this line I will just show you what will be uh so if the user has given input S2 so at this point two will get printed on the screen and then multiplication sign will get printed and what is whatever the value of the I will be there let's suppose for the first time if the loop is incrementing then the value of the I is 1. and again one equals to sign will be there and after equal to sine the operation there is no mean to two num into I that is 2 into 1 is 2 will be get printed likewise the whole table of the two will get printed on the console each time uh the loop get increment is well you get incremented by 1 up to 10 okay so let me just run this I hope this will work enter a positive number let's suppose if I enter 2 so here you can see two and the two two to the four two two three here two three the six likewise hold the two stable get printed on the screen okay okay sorry for the interruption guys uh so our third question is write a program to find the factorial value of a number entered by the uh enter through the keyboard okay so you have to create factorial of the number okay not create we have to generate okay so I will just comment this out and I will write another comment as third third means the third solution for the third question okay so we have to generate a factorial of that number okay so what is factorial for factor is nothing but the here I can give you one example if I want to find the Fifth Fifth five factorial then it will be equals to the it will be equals to the 5 into 4 into 3 into 2 into 1 okay so to find this uh I again I require one input from the user so I will just comment this comment of this so that I can receive input from the user and now I require one variable name as int num which will hold that number actually and again I will require another variable name as fact its current value is 1. okay and I will just print it out enter number and here I will just right sorry num is equals to SC dot next int okay and I will write one for Loop and whose value will be uh I is equals to one each time I will be doing I let's checking I is less than equals to num and I am doing I plus plus okay and inside this I will be doing fact multiplied is equals to I so I hope you guys are getting this at this point we are just getting the value of the I and it multiplying it with the previous value of the fact that is the fact variable and the fact variable uh initial value is 1 and when this Loop kill term gets terminated the value inside fact distort it is the factorial of that number okay so now I will simply print let me just write fact to real it's and I will contact it with fact okay so I hope it this will run if I click on execute it is it it was asking for a number let's suppose I write five and factorial is 120 because 5 into 4 into 3 into 2 into 1 is 120. so I hope you you guys can solve these questions first second and third and in our upcoming videos we will be looking into the solution for the fourth and fifth question okay thank you guys for watching this video hello and welcome back to the another video of the ciao tutorial Series so till now we have covered exercise two part one and this is video for the exercise two part two wherein we will be covering the solution for the two programs that's the fourth and fifth one so let's get started uh what is the problem statement write a program that prompts the user to an import and integer and then outputs the number with the digits reverse so basically uh one string we have to provide to the user and we have to reverse it okay for example uh if the string is one two three four five then the output should be a five four three to one okay so let me just open my IDE and this is the previous video we have seen first second and third question solution now I will continue here for the fourth solution so we required to take input from the user uh that I have that's why I have imported the scanner class okay and now I just required one number because we have two reverse and numbers okay so I have declared a variable called number and another variable which will hold day number which which is a reversed one okay now I will print I will accept one input from the user enter the number then here I will write number is equals to uh let me just see what is my object name for Scandal yes SC Dot next int okay so we have accepted one input from the user and store it inside the variable called number now I have I will require one another variable called camps and one variable name remainder and I will assign the value of 0 to it okay so here I will be using while loop while my temp is greater than zero okay and oops I forgot to assign it due to the temp so tell me you will hold the value of the number the because we are in this line number 48 44 we are assigning the numbers value to the 10 because we are we are not changing or modifying the actual number because we required that number to check whether that uh the original number or the reverse number are the same or not that's why I have to copied that number inside the temp variable okay so here we will write remainder is equals to temp mod 10. and after that don't worry I will explain you what I have done here just watch these are into sorry 10 plus Commander okay and again temp is equals to temp divided equals to 10 and in line number 54 let me just increase the font size okay and line number 54 is same as this so don't get confused what I have done here temp is equals to wait a minute I will just comment it out 10 is equals to 10 divided by 10. so and that's just a shortcut to write this whole statement okay uh this is what I'm doing in the while loop and after that I'll print and check not it we just have to reverse okay reviews oh number holes in our original number eggs and our reverse number is inside the reverse temperature variable okay viewers okay so this is the string this is the actual okay so here you can see uh let's suppose I have uh let me explain you what I have done here inside the while loop okay so let's suppose our input is one two three four five okay and our 10th will hold the number 's value that is the actual number value okay and uh whether my time is criticism 0 whether this is greater than zero whether this is greater than zero yes it will come inside inside the loop and remainder is equals to Temp mod 10. mod 10 okay so here the remainder will get stored when that is the last digit mod 10 the last digit will get stored inside the remainder okay and now reverse value here initially reverse value is zero so here 0 into 10 that is 0 plus 5 so this will result 5 and in first iteration reverse value will get stored as 5 and and here we have just divided dividing our temp number by 10 means one two three four five divided by ten which is equals to one two three four and again we are going to check for the loop and again and this time we will be checking whether the one two three four is greater than 0 yes it will come inside the loop and it will by mod 10 we will we will be getting the last digit of this number that is 4 and inside uh reverse then now the reverse value previously was 5 5 into what is an uh 10 5 into 10 is 50. plus what is the new remainder's value is 4 plus 4 now this is this is equals to 54. Okay so this is 54 and now we again we will divide by 10 12 by 10 so now the times value is 1 2 3 okay so this how this is how so while loop will run and one point will came where the tenth value will be zero and where 0 is greater than 0 will be get evaluated as false and will get out of this Loop and we will just print the original number and the reverse number okay so let me just run this wait by the way if you guys are liking this series do comment and like and share okay so the number I will give input as one two three four five and that's let's see here you can see reverse of one two three four five is okay just let me give one space over here five four three two one okay so if you guys don't know how the loop is running then please do watch the loop video that I have covered uh each and every Loop which is there in the Java and if you want to see how this is working then you can put one debug pointer over here not here wait here and you can just debug this okay and wait allow excess okay so my debug pointer is here I will click on here okay scanner class I will take in the console I will input the number one two three four five okay now I will go in the debugger now you can see number value is one two three four five which is getting stored inside it uh now again if I click remainder it's zero and see it is violating as true because one two three four five is greater than zero okay it will come inside the loop and uh it will do one two three four five more ten and the remainder value will get in stored is zero and here you can see uh now after executing the 40 48 line the remainder value will getting stored as five okay because one two three four five mod ten is equals to five okay so what is the reverse value initially 0 0 into 10 0 plus 5 plus 5 is equal to five now if if I click here here you can see reverse value will be updated as 5 and the better will S5 and after doing this now the is eliminated from that original temp number because if I do one two three four five divided by 10 it it gives me one two three four okay uh like this you you can debug this debugger is best when you don't know how the loops are working internally how the flow flow of the code is going okay so you can use this feature of debugging okay so that that is about program number four let let's go into the program number five okay so what is program number five write a program to print the Fibonacci series of n terms where n is the import by the user okay so I hope you know what is Fibonacci series if no let me just comment it out and I will explain okay so here we are I'm commenting out this as fifth solution okay so Fibonacci series is nothing but uh let me just comment it out and I will show you Fibonacci series start from the uh zero and it goes like 0 1 1 2 like that because what is the formula for the Fibonacci series is nothing but the uh the place where the number is is a p addition of the previous two numbers okay this uh series start from zero and one the third number will determine as the addition of the previous two numbers okay so what is 0 plus 1 is 1 and now for this position we we have to add its previous two numbers okay what is one plus one that is equal to two now likewise uh series goes on okay so we are we have to print the series here okay so I again I am required one variable number okay to hold the number of terms which is given by the user and I will again required one variable called as first term and I will assign that 0 because the series starts from 0 okay and the second term of the series is one and that is going to hold here and the third down okay now let me just give it okay third okay now I will just print one line where we require is telling the user to put one number enter the number of terms stop sorry you want in the series okay and over here I will be doing a c dot next in sorry I see dot next in okay now after getting input from the user I will just print the first two number of the series because those are fixed those will never change because series start from zero and one as we know okay and after this I will give one space between two numbers and again again I will concatenate it with second term now I will be running one for Loop Square int I is equals to 3 by this time uh I hope you guys are getting oh I have wrote three over there because the first two terms are fixed and uh I don't want my Loop to run from 0 or 1 because first and second terms are fixed okay so that's why I am learning running my loop from third position and my eyes value is less than equals to the numbers value each time I am doing I plus plus okay so over here I will be assigning the third term is equals to the addition of the first term and the second term okay and I will be printing third term and after that I will be giving one space so that the next next time I will be printing the uh another term so that one extra space would be there between each term okay so here I don't require Ln because I don't want the series to be printed in the straight line I will I want the present to print the series in the one line itself okay so over here I will be assigning the first term value as the second term and the second term value should be third okay so here you can see uh first term and second terms are fixed for the first first time when we are iterating our Loop that is zero and one third term value will be a 0 plus 1 is 1 we will print the one as third term and we will update the value of the first step to the second term that is the second terms value is one and and the second term value is the third term that is one so that next time if we iterate this Loop that is one plus one is true two okay and I guess this is pretty much about the fifth question let me just stop the run it okay okay now enter the number of series that you want okay so let me just get the first 10 numbers of the series so over here you can see the first 10 number of the series is zero one uh this is not 11 uh I have done one mistake over here I have to print one extra space over here so that it will distinguish between this one and one okay let me just again run this okay so over here you can see zero one one two three five eight thirteen Twenty One thirty four and then these are the ten numbers of the first first 10 numbers of the Fibonacci series okay so for this problem also uh you can put one debug pointer over here and uh right click and click on the debug okay it will run in the debug board where you can uh see how the loops are working internally okay so that this is pretty much about the exercise too I hope you guys have give it a try to solve this question and I will see you in the next one thank you hello and welcome back to the another video of the JavaScript Java tutorial series uh so I guess this is the right time to begin our project our project number one is a simple banking application okay so till now we have covered only the loops uh some basic basic concepts of the Java and we are not right now uh Deep dive into the oops concept and that will be doing after this project once we complete this project so this project is simply a console based project uh so no GUI interaction will be there in this project uh once we move into the advanced section of the Java where we'll be seeing some Java applets or swing there we can convert this project into the GUI based project okay so for till now uh I will be doing all this stuffs inside the console okay so for this I have plan what I have plans I will write down the points here over here so first we will display a one welcome welcome message to the user okay welcome message to user okay so that is how the first first goal okay and okay and then let me just get here okay for second number uh I can will be looking into the give me a we are giving five options to the user okay so first option will be uh something known as deposit where user can deposit the money inside this bank account okay and then after that the third option second option will be something known as withdraw okay where user can withdraw the money from his account okay then the third uh feature we will be carrying is get previous trans transactions okay so here in this feature uh user will uh get to know what what is this previous transactions what you have done in the past transaction okay and uh again one more feature is there that is not not a feature it it basically uh menu which shows to the user okay so here we are showing the menu to the user according to that by seeing that when new user will give import to our program and programs will behave according to that input okay show when today is it okay and uh at last we will execute execute our code okay so these are some steps that we will be following uh following inside this project okay at first user came and see the welcome message okay and then based on the user input we'll be performing some functions okay that is deposit withdraw that previous transaction show the menu and execute our code okay so I hope you understand the only of the project and in our upcoming videos we will be seeing into the these one one by one implementing this functionality in our projects and at last as a sixth point we will execute our code okay so thank you for watching this video and I will see in the next one hello and welcome back to the another bit of the Java tutorial Series so today we will be starting our first project for project Number One banking application so so in this video I will be discussing about the setup about this project and we will be covering up the first functionality of the project that is the deposit okay so let me just get into into my IDE and I will uh creating the new class name as banking application oops sorry banking application okay and let me increase the font size yes and I will include my public static wall Main okay and inside main uh this project required input from the user so that's why I have to import the scanner class also and I will be using this new keyword scanner system dot in so okay basic stuff now I know we have the not covered started oops concept so that's why you will at some point you will not get some concept so bear with me I will be telling you what those concepts are okay so this is pretty much about the setup okay and now since we are doing all this uh let me show you all this deposit with objectives and action show menu and execute our code all this functionality in a one place so I guess this is the right time to introduce you with the oops concept known as method okay so I will oops of method and class okay so I will create another class known as the banking uh bank accounts which is more appropriate I guess AWC bank account okay okay so this is nothing but I have created one another class name as bank account where I will be covering all those functionality in inside this class and we will create one object of this blank bank account class inside this banking application class okay oops I have written this class inside class that is okay now it's okay okay so this is one class our public class and inside which our main method is there and this is another class where we'll be covering all these functionalities which are required in the uh project okay so inside this uh I will show you how this class and object steps are created so bear with me and for first uh functionality of our project is deposit so we will be covering that first okay for so you you so you are pretty much aware about this for depositing the value uh something money inside our account we we need one variable which is known as balanced because we are updating that balance after deposit occurs inside our account okay and we will require another variable normal name as previous transaction which will hold the value value and the information about the transaction that happened in inside past recently okay so I will be creating those two variables name as balance and another one as previous transaction okay and now I will create one method uh so this method doesn't return anything so that's why I have written void uh I know you are not getting some concept what is wired what is ain't okay not in in you know what that is data type and void and my method name is deposit okay and my method is going to accept one way one parameter that is amount okay amount so method is nothing but one particular instruction of the lines of codes which will execute uh which will you will require again and again for the X equation and then those setup instruction you are right inside of one method and you will call that method again and again to perform that task okay so we will be covering in depth about the methods what what are their types in the Ops concepts for but for now uh you know you know what is methods okay uh we will be creating one method known as deposit and inside that method I will be writing now uh if I want to deposit my money I have to check uh whether my amount that is uh given by the user and this is the uh parameters that this method will be accepting this method will accept amount that uh which is given by the user to deposit inside that bank account okay so I will be checking whether my amount is not equals to zero okay so this uh if the user user inputs a given input as zero so that doesn't make sense because 0 cannot be added inside the bank account okay that doesn't make any sense so we are checking on base basically base condition over here whether my amount amount which is a given input by the user should not be equals to the zero okay if it is not equal to 0 this uh if condition is evaluated as true and inside that uh I will update my balance okay so my I will tell balance is equal to Plus amount okay I will update my balance variable and I will also updated my previous transaction variable as amount okay and so that tells that my previous transaction which done by the user is the amount that means the deposit through the bank account okay so this is pretty much about this and okay also in the upcoming videos we will be covering the withdraw withdraw functionality bitter functionality and the get previous transaction and the show manufactuality okay so thank you for watching this video and I will see you in the next one foreign banking application and this is the third video I guess of the series of the project okay so in this video we will be discussing about the functionality which is withdraw and the get previous transaction so we will be implementing the two methods so for the one method is for the Vedra and one method is for the get previous transactions okay so I hope you have watched the previous videos where we will be implemented about deposit function method and now in this video we'll be covering our withdraw and get previous transaction functionality okay so okay before we get in code think about it uh whenever I want to withdraw some money for my account what changes and first of all what I have required uh as the input to this method okay so let's think about it so for this I will be requiring one amount that is the amount of money that I want to withdraw from my account so the amount is the parameter which will be passing through the withdrawal functions and again one base condition should be there okay so think about it when what what will be the best condition again the same base condition uh like we have done for the deposit method that is amount should not be equal to the zero because deposit depositing the zero rupees or the zero dollars from an account doesn't make any sense okay so we'll be implementing that also and I guess this is a bit pretty much stuff that we have we want to do inside the withdrawal function okay so let's just get and implement this withdraw method okay since our method is doesn't returning anything that's why the return type should be avoid uh void void is the return type there are many different types such as int uh care strings are there so method is doesn't returning anything it it is just performing some basic math calculation and it will returning some value to the user okay not value it is performing some task okay so withdraw I will name this as withdraw and as we have discussed it will accept one parameter name as amount amount of money that we have to withdraw from our account okay and again one of the base condition should be base condition should be there that my amount should not be equals to the zero if it is equal to zero that doesn't make any sense okay and inside this uh I will update my balance because after we're drawing some money my when that amount that much amount of money should be deducted from a balance that for my account balance okay so balance minus amount okay and after that I I also have to update my previous transaction as amount okay and minus amount okay so I guess this is pretty much that we have to do inside the withdrawal functionality and after that we will be performing another functionality that is get previous transaction so this I have writing the previous generation previous transaction we have to implement that method inside this class name as bank account okay and so since previous get previous transaction it doesn't uh return anything so that's why I will write void as the return type and I will write get VBS transaction okay wait guys okay so sorry for the introduction guys okay so where we are avoid get previous transaction okay so this method uh doesn't require any parameters and it doesn't return anything okay so inside this I will write one if condition if my previous transaction value is greater than zero okay when the value will be will have the present previous induction will be greater than uh zero when we have done any deposit uh in our account okay so in that case I will print deposited and I will concat it with previous interactions value okay and uh again one else if condition should be there to check as if my the value of the previous transaction it's less than zero in that case when we draw uh means one withdrawal should be there for my account so in that case I will write sorry withdrawn let me drawn the amount should be there and one thing I will do here is math Dot abstract okay and I will pass it the value of the previous transaction so you'll ask me what we have done here what is this math dot abstract and we are passing uh three ways from the action value to it okay so this is the in inbuilt class inside the Java uh so here you can if you hover over the cursor over here you can see java.line link is a package inside which math class is there and one abs abs method should be there inside that math class if you right click here and here you can see public static int areas so what this uh method does it will accept one parameter okay so as you here you can see it is accepting one parameter which is integer a and it is returning something uh in in format okay so what it does is uh since the value of the application reaction is less than zero that is the negative one like minus something known as minus 50 or guess minus 400 so we don't want this values to be reflected in our console because negative values should not be there inside any account okay so we are doing this match dot abstract function and it will convert that negative value inside the positive to its corresponding positive value that is equal to it will convert the minus 50 as 50 and uh minus 400 as 400 okay so this is the work of the max dot abstracts abstract function okay or method oh then here I will write else if both the condition will not get satisfied in that case I will write no transaction is occurred no transaction is occurred okay so I guess this is pretty much about the previous transaction method where we will checking if the value is greater than 0 that is a deposit deposit method is getting run inside our application and if the value is less than zero that is withdrawal is done inside of a bank account if nothing none of this statement get executed then else will execute it and it will show that no transaction is acquired inside our account okay so this is pretty much about the withdraw and get previous function or the method I will see you in the next video where we will be covering the next functionality that is the show menu for our project so thank you guys for watching this video hello and welcome back to the another video the Java tutorial Series so today in this video we will be covering uh our next functionality of the project that is the show menu projects so this is the main uh method which will hold the all uh functionality of our banking application it will call all those method which you have which we have written in our previous videos that is withdraw our previous transaction and the deposit and it will perform all those functionality of our project I guess okay banking application okay so in this video we will be writing this show menu method okay so for this I will cover I will write another method name show menu and this may this method will does doesn't require any parameter and then it doesn't return anything okay you know so inside this menu show menu show menu function method will uh basically do all those printing part printing stuff inside that console okay so for that uh and we will be carrying on uh declaring one character okay so character variable name as option and I will initially write his ads slash Studio okay so that will present null okay again uh oh I guess I have declared the scanner class over here so that is inside this main uh another class so I have to I guess I have to declare one scanner I guess scanner SC is equals to new scanner system dot in okay let's go I have imported this kind of over here and now uh I have to create that console stop here okay now so I will just oops sorry I will just out one thing that is welcome Plus customer name so this time uh intelligent idea is telling me that hey what is customer name you have it doesn't have declared it anywhere okay so for that uh I will be creating one variable over here that is of type this is customer name so that is of type string records customer name is in string format and I will write that same customer name and one more thing I will be requiring is as customer ID okay and I will also declare it as spring customer ID Okay so whenever the object of this class is created uh I I want the user to give me the customer name and the customer ID so that I can print that name and the customer ID over here okay so for this one more concept was there of the of oops object object oriented programming language that is Constructor so what basically Constructor does is it will get automatically called whenever the object of the class is created okay whenever I create the object of the class the Constructor is getting called and the Constructor name should always be as same as that of the class name okay so what is the class name bank account and this Constructor should accept the two parameters that is the customer name and the customer ID so that we can uh print that customer name and customer ID inside the console okay and so the name should be in the format of string screen name I would like to see that because that is a proper convention that is the customer name and I will write string CID that is the customer I okay don't worry about this Constructor for till now for just now uh know that whenever we create the object of that class the Constructor get automatically called okay so this line number 15 to 17 and inside this Constructor whatever I'll write it will get automatically called whenever we create object of this bank account class okay so whenever I create this uh object of this class I just want to assign the customer name as the C name which is in given input by the C name by the user and I just want that customer ID should be equals to the CID okay so that is pretty much about this Constructor I guess and now we can move to the towards our show menu function and start a limiting this okay so I will write again one shout statement over here should be there and I will write your your ID is this and I will write customer ID okay so after this I want a new line should get painted on the console so for that I will write this out hit empty nothing should be there so that the new line should be there and which looks nice okay and again I want one option number a so we have discussed over here the options of that our application that is deposit withdraw we address and reaction at the show menu okay so we will be covering that over here we will write check balance okay uh then again one more functionality should be there that is B Dot deposit if the user want to deposit some money inside this account and again see is retro traw withdraw and again one more shout statement and now option number D to get the previous strand transaction okay now last option if either want to get exit from this hour application you want our user to click key so that you can exit from our application and so now one thing sure you should notice this show menu methods will display all the these steps inside the console okay and we don't want the user to get uh multiple times click on this run button run button and execute over this code again and again so we can what we can do is we can provide one uh loop to the user wherein user can Loop iterate or iterate this functionalities or use this functionalities again and again as much time you want and whenever a user has done with all the application uses and then simply user can type e to exit from our application okay so for this I will be using one do while loop and inside do I will just first of all I will print one statement so it will look nice okay and then one more south statement should be there which will tell the user to enter the option okay enter the option and after that one more south statement should be there uh this line number 60 and line number 62 is just used for the getting the console such a nice look okay and after that I will be doing option is equals to scan uh SC is the object sorry SC Dot next Dot carat index 0 and I will be doing 2 I guess I can't do this here and let it be we will cover in the next upcoming video so in this way in this part I have taken one uh input from the user at the string and I will be returning the first character of that string okay uh so I have declared here the character as a here option and I'm storing that user input inside this option and so user can input e d e c a b a b c d e any option that you either want that gets stored inside this option variable okay so now inside this I will create one switch and so for switch I will be passing option as the parameter so we have covered switch I hope you guys remember this how switch works and how what is switch okay so we'll be carrying one case for first case we will be passing a we will be writing the functionality if the user clicks a that is the check balance okay for that I will come inside this case and I will first of all print this line okay so this line is basically just to give that nice look to our application okay so again inside that I will write sound at the system.out.bination and I will simply print balance it's and I will concat it with balance can at last I will be printing again this just to give our application a nice look and I will print once our statement so that one extra line should be there between uh the switch next case okay so after that this is pretty much about the check balance I will just write foreign and for the next case we have case number B if these are given as B and I will just copy this statement over here just to give it oops sorry copy oh sorry guys me okay and what is the BP part uh B part is the deposit okay so when the user gives the input as B we have to deposit the amount inside our account okay so salt do either enter the amount to deposit okay so after this I will again print this line so that it will look nicer in our application okay now what I can do is int amount I will declare one variable name as amount and using strot next end I will receive that in input from the user and I will call deposit method inside this and we will pass that amount value to the deposit function deposit method okay and after that I will just print One new line and I guess that that is the pretty much I will have to do inside this case number B right so what I have done uh and printed this on the console and I have taken one input from the user and showed it inside the amount variable and I have passed that amount variable to the deposit method and we have written the deposit method over here here you can see and this deposit method will update the balance of the in our account and update the previous transaction value also okay so after that moving forward to the case number c k c okay so what is Case C withdraw okay so we have to implement the withdrawal functionality over here so I will just simply uh copy this and paste or paste it over here enter the amount to withdraw okay after that again I will create one variable name amount 2 because I'm already declared above already ridiculate about SC Dot next int and for doing the withdrawal stuff we have returned one method withdraw and we will accept one parameter name is amount so we are passing that amount that that needs to be withdraw from our account and then again I will simply just print a new line so that it looks nice in the console I guess this is pretty much we have to do inside this case okay so our next case is case D and let me just look what we have to do kst that is the previous term reaction uh we have to perform the previous transaction inside this case and again I will just copy this because this is step that I required every time okay and inside this I don't require this because I don't need to print anything inside the console or getting input from the user that's why and inside this we I will call the get previous transaction method and this call will be uh go to here to a this method get previous and reaction and this method will check this condition and according to that it will print that corresponding statement okay over here okay so I guess this is the pretty much we have to do inside this case and after that I will just print One new line and I will break this condition okay now I have to write again in more condition that is the E condition that is in exit condition what if the user write e okay so in that case either one to get exit from this Loop so they will simply just print this statement and after this statement we will do break okay and this is all we have handled all those cases and we will sorry one default case which will handle and inside default case we should do print something like when will get a default condition get hit when the user will enter uh doesn't enter a b c d e and other characters okay so in that case we just have to print invalid option please try again okay and I will simply break this okay so I guess so this is pretty much we have to do insert the switch okay so we have implemented this switch after that I will write while because this is this do while loop and inside while I will check the options value should not be equals to character P because if it is a e that that means user don't want to use our application anymore any more and you don't want to exit our phone or application okay so this is pretty much about the show menu I guess we have done let me just zoom out so that you can see whole method inside one View okay I guess this is and one one pretty simple mistake was there inside this method I want you to think about it and let me know and we will also cover that inside in our next uh video we will try to rectify that errorings which is inside this to do while loop okay so for this video this is pretty much we have done okay so in this next in our next video we will continue this project and we will try to implement this project thank you for watching this video hello and welcome back to the another video the Java tutorial Series so today we are continuing our project number one that is banking application and in this video we will finishing it okay so in our previous video we have discussed about the show many functionality of our application and I have told you that when there is mistake is there inside this method that is what if we are checking the cases for the this letter that is uh capital letters capital a capital b capital c capital D and the capital E okay one minute okay so where we are I have told you that one mistake is there inside this code that is we are checking this case case for the capital letter set is capital a capital b capital c d and e and what if the user is entering this small small letters okay so that is a b c d e uh because this switch switch is comparing that case using the Sky asci value of that characters okay so the Sky value of the capital A and as a capital small a are different so that's why user will doesn't know what is happening why the code is not getting run for the case number a because user had entered the small letters okay instead of entering this capital letter so this is the problem so what we can do whether the user will enter that characters in in a small letter or the capital letter and we are storing that inside the option option variable we will convert that uh input into capital letters okay so what we can do is there is one uh inbuilt class inside Java which is character and which has one function that to upper case and this will accept one character and which is which character is this options okay so what this will do let me just increase the font size so that you can see clearly this will uh get that options input from this option and it will conver apply the two uh apply not apply it will pass that options or the letter whether it is in a small or capital letter to the upper case method and uppercase method will return the capitalize form of that character okay so let me just show you uh this implementation of this here you can see the public static care method is written inside the Java this is the document inbuilt methods which are written inside the Java and here you can see what we what it is returning it is returning to upper case of that character okay so I guess this will remove the problem that we have inside our application and let me just okay so now I guess we have done all the part that we have you want to do inside our bank account class and we have implemented all the functionalities inside this and now we have to run this and we know from uh where our program will get executed inside this main method okay so inside that this is class banking application and this is class bank account so both classes are different and all our functionalities are written inside this bank account class and we now we have to tell this Bank application class that there is a bank account class is there and we have to create one object of that class okay so how to create the object of the class back we will simply write bank account don't worry for time being just remember uh be with me uh I will cover all those classes what is class object inside our upcoming queries inside that oops concept okay a bank account and we will give a name to the object okay so let me just write uh as Bank One whatever you can you can simply give your name also okay what it is it doesn't make any sense okay but normal convention is that you should give object name as so that's you can understand by looking at the object name what we have done inside this okay so we'll create a new bank account and here you can see IntelliJ IDEA is telling me that this object will require one two parameter that is C name and CID so I have in the previous videos I have told you that this is the Constructor which accepts a cname and CID and I have told you that whenever you create an object of the class it it calls the Constructor of that class and we have written our Constructor over an area of this kind of accept the two variable serum and CI so that's why we have to give two parameters to this program so let me just give the customer name as x y z you can give your name also as a customer name if you want and again second parameter is CID so let's suppose customer ID is let's suppose one zero one okay this is the customer ID okay uh this is pretty much that we have to do and we can now the object is created for that class name bank account okay so using that object we can call any method written inside that bank account class okay so what are the meters written inside this is void deposit void withdraw void Gateway send the action void show menu so one thing you tell me or you you decide which method I can call so that all the functionality of our application will be done inside that so I think there is only one method which uh which is there show menu method and which will Implement all these functionalities of our application here itself okay so I will call that method using the object name so for calling that method we will write object name that is bank 1 Dot now you can see show menu is there show menu okay so this will call that show menu method okay inside this okay so I guess this is pretty much that we have to do inside this project so I hope and this will run let me just run this okay it's running and now here you can see it is that asking me the enter the number of terms you want in the series uh wait I guess this running the previous sorry sorry guys this is running the previous class Java class I guess and now I have to run this Java class itself yes now see here you can see welcome XYZ your ID is zero one how this is doing uh we are passing x y z and zero one to this class Constructor and this Constructor is assigning that c name and CID value to the customer name and customer ID is over here okay and those customer IDs and customer name are getting printed in on the console here customer name and custom ID so I hope you guys are getting this and now it is asking for the option uh so let's suppose we have to check the balance and deposit the balance and we draw the previous transaction okay so we'll go one by one okay I will type A okay so we will check first of all let me check the error that we have rectified over here okay if I give small a and if I hit enter the check balance should be there so it was selling invalid option should be invalid option is there uh because I guess this is not working here why it is not working I don't get it okay let it be uh I will Rectify this error and let you know in the upcoming videos okay uh for time now being we will give the capitalized inputs to the other application okay capital a so now here you can see balance is zero it's showing balance is zero because we don't have any uh done uh deposit or withdrawal from our account and initially the value of the balance variable that we have declared over here is zero okay that's why it is printing 0 in this console okay uh okay now let me just increase the size of the console uh and now if I do B B what is a b deposit uh enter the amount that you want to deposit let's suppose I have to deposit 1000 rupees or thousand dollars in my account okay and then if I hit enter uh now thousand rupees or thousand dollars I uh deposited in my account now if I do option A that is view balance now here you can see balance is thousand previously it was selling that balance is zero now the balance is 1000 okay uh one second guys so now we have checked the balance that is thousand so we have implemented the check balance and deposit now if I want to withdraw money from my account I have to give input as C foreign 500 and now if I check the balance for checking balance um balance is 100 and now at last I want to check the previous suggestion that I have done d so here you can see if I type D withdrawn 500 that is the thing that I have done previously so that is withdraw for the 500 from the account okay so I guess we have implemented all those checks now at last I have to implement e if I press enter now here you can see process finished with exit code 0 that is our code will get ended and you will get out of this main method okay so this is pretty much about this project I hope you have enjoyed this project and you know upcoming tutorial series we will be starting oops concept from the on watch videos okay thank you for watching this video hello and welcome back guys to the another video of the Java tutorial series uh so today onwards we are covering oops in Java okay so what is oops oops there's nothing but the object oriented programming language and simula is considered to be the first objectoriented programming language and someone says a small talk is considered fully first fully truly objectoriented programming language okay so uh in today's world you can see uh C plus plus PHP Python and C sharp Java are the popular object oriented programming languages over there and so yes so first of all object means the real well entity such as pench table computer watch anything you see uh like Windows bed other object object oriented programming is a methodology of the Paradigm to design a program using classes and object what is classes and object we will cover in the next our upcoming videos we will go in step by steps okay and it simplifies the software development and maintenance by providing some Concepts such as object classes inheritance polymorphism abstraction encapsulations so these are some features of the object oriented programming languages and here you can see one nice diagram is there and we will go in such a way in this way also okay we will cover first object then class and in returns polymorphism then abstraction and an encapsulation okay we'll cover in depth each of each one of these okay so before going into the oops Concepts there are some naming convention that you should follow so that your code looks nice and clean okay so the Java naming convention is a rule to follow as you decide what to name your identifiers such as class package variable constant method uh till now you can you have seen we are giving some names to the variables some name to the classes so there are some naming conventions are declared by the sun micro system or the net Netscape which we should follow so that our code should be maintainable and readable to the other users also okay CNC here you can see the second point but it is not forced to follow okay you are not forced to follow it but it so it is known as convention not rules okay this these convention are suggested by the several Java communities such as Java Sun Microsystems and Netscape as I've said to you all classes interfaces and packages methods and Fields of the Java programming language are given according to the Java naming conventions okay if you fail to follow this convention it may generate confusions as I said it may generate confusion to the person who is reading your code and it may be uh get some error not errors ambiguity yes so let's talk about some advantages that you get in using the object oriented programming languages so first of all oops makes the development and maintenance easier whereas in procedure oriented programming language it is not easy to manage if the code grows as project size increases okay so what is procedure oriented programming language is the language such as c as a procedure oriented programming languages and languages like Java although object orientable programming language we will cover in depth in our upcoming videos okay oops provides the data hiding whereas in procedure oriented programming language global data can be accessed from anywhere for the data hiding we can use abstractions abstraction is a feature of the objectoriented programming languages which allows us to hide the complexity okay and third one is oops provides the ability to simulate the layer real world events more effectively okay one second guys okay so where we are so these are some naming convention that you should follow while writing your code and I have talked about the advantages also and in our next upcoming videos we will be starting for the covering the object in class 10 inheritance as follows okay so thank you guys for watching this video okay so welcome back guys to the another video of the Java tutorial Series so today we are we are starting with our very first concept of the objectoriented programming languages that is objects and classes so in this video we will be covering objects and classes so let's just get started so first of all I'm covering objects then I will cover uh class okay so what is object an object is an entity that hasn't State a behavior is known as object for example chair bike marker pen everything you see surrounding you is an object in a real world entity right it can be physical or The Logical okay the example of an intangible object is a banking system that we have done project on it as if you have watched or following the series okay so what are the characteristics of the object a state a state represent represents the data of an object and the behavior Behavior represents the behavior of an object such as deposit withdraw this is related to the banking application that project we have done in our previous videos okay and identity it is used internally by the jvm to identify each object uniquely so this is just identity is that just a jvm part that it handles to identify the each object uh uniquely in Java okay uh so first we will see the theoretical part of the object in the class then we will get into get into our IDE and see how class and objects are declared inside the code okay so what is the class a class is a group of objects a Fields methods Constructors blocks or nested classes and interfaces these all kinds of methods Constructors that you wrote in uh in Java you put it inside your class and a class holds all these fields okay and a class it is a template or a blueprint from which objects are created and it is a logical entity and it can it can't be physical okay so I will explain you one by one what what I have to uh speak right now okay so let me just open my IDE a by the way guys if you are enjoying this series so please like share and subscribe to the channel also okay okay wait hey this is the code of the project which you have which we have done previously okay if you have not watched this video go and watch it okay so here let me just create a new Java class name um what should I name this classes and objects okay okay let me just increase the font size and we can just get my main method okay so here you can see one class is declared okay public class classes and objects okay so as I have taught you over here you know in my notes okay it holds methods Constructors blocks and nested classes so right now this class is holding one main method main is a method method name okay and what what here here we have written it holding method constructed okay class is nothing but the uh one place where you in in which you have writing methods all those uh interfaces and code okay and here I can do whatever I want like just I will print one statement and low world and if I click here okay so it it will get that class and it will run that class okay just wait let me run this class okay so here you can see hello world is getting printed on the console what internally Java does is uh our class is this classes and objects okay dot Java this this is our file and whenever I click on the Run button it converts that dot Java file this file into a DOT class file the dot class file is then again used by the jvm and it uh it is converted uh into the byte code and which is the machine understandable code and our code get executed in the console okay so this is the behind the scene how this works okay and now I will give you an example of the object also so that you can understand clearly uh instead of writing here I will wait okay forgot let me just create one new class for you so that you can understand clearly okay uh so this this is our class and here wait let me just create one method okay uh print and this method is better than accepting anything and this method is simply printing hello world message on the screen okay so I have created another class name objects and one method is there inside this class name print and this method is doing nothing just simply printing the hello world on the screen okay so let me just clear it out uh comment it out and how to create an object okay so this is one part uh listen carefully so to create an object you have to write the class name sorry objects and then you have to write the what name you are giving to an object okay so name can be anything like this anything you want you name that object okay so I will name this as obj1 because it's my first object so you can write anything okay so after that here you can see we we have also created uh this object during our project itself okay after that you have to write new then again the class name and this okay so you'll be wondering you know why I have not passed over something over here because in if you are following the series you you can see we have passed something over here that's because our we have created one Constructor of this class we will cover in depth quarter look at the Constructor in our upcoming videos also okay so now for till now you just understand how to create an object okay so this is where we just have to write the class name the object name and the new keyword is used to memory memory allocation of that object okay and after that using that object I can call all those methods and construct trade which are written inside this class okay so I will write obj1 dot Sprint okay so here you can see and I will just click on this run button and here you can see again hello world is getting printed on the console I have con I have commented out this uh let me just clearly again so that you guys can understand clearly okay hello well it's printed on the console how it is working internally just uh look at here one object is objects object is the class name we create an object object one we use the new keyword to uh allocate the memory of the to our object and using that object we have called one print method of that class okay one print method is here and uh the egg call get executed uh call Gates over here wired print is called and executed and inside this we have written one South print statement that is hello world and this hello world is getting printed on the console the program execution comes here and comes here and Main methods gets over and our program gets terminated okay so this is pretty much about the classes and objects in Java so I hope you guys have get got some idea of the about the classes and objects in Java so in our upcoming videos we will cover uh I guess methods uh which is the next part of the object oriented programming language so thank you guys for watching this video tutorial Series so today we are covering methods in Java and so in general a method is a way to perform some tasks similarly the method in Java is a collection of the instructions that performs a specific task like if you if you want to perform a set of instruction uh multiple times you can make make it as a one method and you can you can call that method again and again whenever you want to okay and it provides a reusability of the code and we can easily modify the code using methods so basically there are two types of methods in Java one is predefined and one is user defined methods in Java okay so we will talk for first Let me just talk about the main method okay so just the main method that we have written over here that is public static World Main this is the main method and this is entry point where our Java code is getting executed first line by line okay so in in general this is the structure or the syntax of the methods public int sum int A and B where the public is the access specifier uh end is the return type and sum is the method name and integer a comma integer B inside the circular processes basis are parameter list and all together this is the method header and inside the curly basis we will write the method body and the method signature okay so we will cover in our upcoming videos what is X specifier method name so to till now uh just uh see One X specify should be there one return type of the mat of that method should be there and Method name should be there and inside the circular basis the parameters which which the method is accepting that we have to write over there okay uh so first type is predefined methods okay so predefined methods are nothing but the methods which are already refined inside the Java okay the methods which are already defined in Java and Java class libraries is known as the predefined methods and it is also known as the standard Library methods or the builtin methods so we will see some examples of this predefined methods also when we coding code it and some user user defined method also user defined methods are methods which are defined by us to perform some set of instructions okay and let's try let's look into the types of methods okay this well first one is the static method a method that is static keyword is used is known as a static method in other words a method that belongs to a class rather than the instance of the class is known as the static method what I have said is assume it like whenever we create a class we create an object of that class and when we create the object of the class the memory is allocated to that class uh if you're not okay if you know if we not create the object of that class the memory is not getting allocated to that class and when we create a method as static method it belongs to the class rather than the instance of the class instance of the class is the object of the class okay and we can also create the static method by using the key keyword static before the method name okay so next one is instance method the method of the class is known as the instant method it is nonstatic Method Define ins inside the class it is the normal method which is in your declared inside the class and it is not not static one before calling or invoking the instance method it is necessary necessary to create an object of its class uh like here you can see in a previous previous video we have created one class and we have created object of the class and then and then only we can uh call that print matter print method which is written inside this object class okay so this is an example of the instance method uh and third one is the abstract method the abstract method does not have any body and it is known as abstract method and in other words without an implementation it is known as the abstract method it means we just declare the method inside a class uh which is abstract and the implementation of that implementation part of that method is done in inside another class or another method okay uh it always declares and it has a abstract class we will cover this abstract class in our inheritance and inheritance and encapsulation uh oops Concepts there you can get this abstract method more clearly and it this it means the class itself must be abstract if it has abstract methods if you want to declare a method as abstract the class which in which the method is declared should be abstract okay to create an abstract method we use abstract keyword before it okay so let's get into our IDE and see some example of it okay let me give you an example of the predefined methods okay so here I can declare integer a um well assign it will be zero and let me just create one scanner so that I can take the input from the user okay and now here if I write a is equals to SC Dot next int okay so here we did nothing we just declared one variable a and we have taken input from the user and assign it to the value a okay so here I can write something like okay so wait here let me just see highest if you want to get a maximum array a maximum element from an array and we can just simply write out the maximum number it's and I will concat it with math Dot Max of let's suppose I will write 10 comma a okay so here you can see uh math is a class which is written inside the Lang package main package is Java and inside which uh one one more package is that name Lang and inside Lang package we have a math class and inside math class One Max Max uh method is there here you can see uh one public static int Max int a into B and we are passing two parameters to it one is 10 and one is a a is value we are inputting uh input to the program and it will compare the both the integer values and it will return the value which is a greater with the maximum okay so this is the example of the predefined uh predefined methods in Java let me just run this here you can see hello world is getting printed and it it was asking for a number so if I enter 5 it should give me the output the maximum number is 10 because when we compare 10 and 5 the 10 is the greater one or let me just run it again and I will give import such as 15. here you can see the maximum number is 15 because 15 is greater than 10 okay so this is the example of the predefined methods and for the user defined methods we have already did it here you can see uh this is one we use the defined method I have written some set of instruction in this okay and I have created one object of that class and we are calling that method using that object of the class okay so this is pretty much about the method in our upcoming videos we will be covering okay Constructor in Java okay so thank you for watching this video hello and welcome back to another video without tutorial Series so today we will be covering Constructors in Java so what are Constructor in Con in Java a Constructor is a block of course uh similar to the method it is called when the instance of the class is created that means whenever the whenever create an object The Constructor will get automatically called okay at the time of the calling of the Constructor memory for the object is allocated inside the memory okay uh whenever we create an object uh the memory is get allocated to that class inside the memory okay and the rules for the configurating a Constructor in Java there are there are two rules defined for the Constructor Constructor name must be same as as that of the class name uh let's suppose you have created one class name ABC okay ABC and inside that class if you want to declare the Constructor for that class then the Constructor should be a b c and the other constructory accepted in the parameter it depends upon you and inside this you will write code for that Constructor okay construct Ure goes here you'll see in our coding part also in detail and second second rule is a Java Constructor cannot be abstract static final or synchronized you cannot cannot use these keywords before declaring The Constructor like abstract a here you can see abstract ABC a final ABC static ABC this is not allowed in Java you have to if you want to create a Constructor for that class simply write the class name and inside the circular circular basis you will write the parameter that constructory is accepting okay so there are basically two types of Constructor in Java one is default Constructor and one is uh parameterized Constructor so let's first see what is default Constructor and let me get into my IDE and I will create one new Java class name Constructor let me increase the font size I will write main method here okay uh I will declare one another class class ABC I will get that example itself and inside this if I want to create one default Constructor one default Constructor is nothing but a Constructor that is called default when it doesn't have any parameter okay so if I write this like this and if I insert this if I write out hello World okay so here you can see over we have declared one Constructor for that ABC class and inside the circular basis we have not uh passing any parameter to it okay so this is this is an example for the default Constructor to invoke this Constructor we will simply go in our main method and create an object for this class okay one thing I am missing naming convention in Java class name should always start from the capital letter ABC okay now it's correct uh if I want to create an object as we have discussed in our previous video uh if you want to create an object simply write the class name and write the object name that you want new ABC and inside here I am not passing any parameter because the Constructor of that class doesn't uh accepting any parameter okay uh in new line I will just now I will not do anything I will just create that object and simply run this program now here you can see in console hello world is getting printed okay why this is so because we are created an object of the okay so now we will look into the parameterized Constructor so Constructor which has a specific number of the parameters is known as The parameterized Constructor and we will see one example of the parameterized Constructor over here and okay let me give you an example if I write like this okay so if I write integer a command T sorry integer B okay now here you can see a intelligent idea is throwing error because it was it was telling me expected two arguments but found zero now this is this is this is the example of the parameterized Constructor where the Constructor of a class is accept accepting one better some parameters and we need to pass that parameter inside there uh Constructor when we whenever we create an object of that class okay now I will pass here something 15 sorry 15 comma 20. okay uh it uh this Constructor is accepting two integer values and I have passed 5922 The Constructor okay and inside this Constructor we will be doing some operation using that uh two integers let me just print a plus b and print a minus B print a into B print a divided by B these are some basic operation math mathematical operations that I have performed here uh the purpose of telling this is uh whenever you create an object where the the parameterized Constructor though we have to pass that parameters to that Constructor there itself and the Constructor will get those parameters values and process the information according to this okay and now if I run this it will print me okay so here you can see 20 plus 15 is 35 uh a minus B that is 15 minus uh 20 is minus five or a into B is the 20 into 15 C uh 300 and uh a divided by a divided by B uh 15 divided by 20 is uh it is giving me zero because I have uh both the variables are in integer and and such is always coming if the both operators are integer answer is also coming in integer itself okay so this is pretty much about the default and parameterized Constructor uh let me check if I'm missing something okay uh we have to see one difference of between the Constructor and methods because and here you can see the Constructor is not different pretty much different from the method because we in method also we would write the return type and if I write a b c and this is the this is our method there is no difference between this method and Constructor so let's see the difference a constructory is used to initialize the state of an object and whether the whereas the method is used to expose the behavior of an object okay and the method must have a return type the Constructor must not have a written time here you can see we didn't write any written statement for the Constructor and for that method we we have to write the return statement unless and until the method method written type is void okay and the Constructor is invoked implicitly implicitly because whenever we create an object we we don't writing any uh like this obj dot ABC we are not writing like this this is this says we are writing only for the methods okay and methods are called using this object name okay the methods invoke explicitly in Java compiler provides a default Constructor if you don't have any Constructor in the class uh and and the method is not provided by the compiler in any case the Constructor must have the same name as that of the class name here you can see ABC is there and Constructor name is also ABC and the method name may vary a way may or may not be same as the class name you can write it as same as daughter of the class name or you can give any name whatever you want okay so this is pretty much about the difference between the construction method and in our upcoming video we will be discussing about static and disk keyword in Java thank you for watching this video hello and welcome back to the another Studio of the Java tutorial Series so today we are covering a static keyword in Java so the static keyword in Java used for the memory memory management purpose only and we can you apply the static keyword with variables methods block nested classes uh like so for for example one method is there ABC I can write static ABC or one variable I have to declare integer a static int a that that is how I can do it and the static keyword belongs to the class that an instance of the class okay the static can be a variable can be static and a method can be static okay so we will see some basic syntax how the static variable is declared inside the class uh let's suppose we have class class student and inside this integer roll number uh variable name roll number is there of type int string name and college string College iits this is a simple class with that we have declared an example of static variable okay we will see one example uh in our IDE and before that you have to here is the pictorial dependent representation of the how static uh gear variables are work okay so here where we have declared one two variable S1 and S2 and inside the stack memory S1 and S2 are there and hip memory is there uh as soon as it was object of that class student and here you can see we have created two object F1 and H2 inside stack memory and inside Heap memory id111 is there and name current for S1 S1 object and for S2 object uh id22 and name Aryan is there okay and inside okay wait a minute guys okay so where we are here we have created uh two objects S1 and H2 and we have assigned the value of our ID and name for each of the objects and here you can see uh one static variable called College of type string is declared and college name is its okay so this is the class area and this is how the static static variables are work uh College its is assigned to both of those object S1 and S2 okay and and these objects are uh separate the college name its is separate this is not inside the hip memory this is actually inside the class area this is how the static static variables work and we will see you an example of the static method so that you can understand it clearly okay wait okay so let's get into our IDE and C1 example of the static method okay so here I am inside my IDE let me just click here new Java class new Java class and I will declare whether it's great that take third okay and inside this I will write let me just increase the font size okay and now it okay so here I have declared one static method let me import my main method yes okay now silly okay let me get here inside this okay uh let me create one class name as calculate oh wait let me do all those stuffs inside this itself okay I will declare one static variable in Q back okay not this you know what let me get another example so that you guys can understand it more clearly okay let me just create last student however this one this I will I have to take I am taking this example itself okay class student is example okay so that you guys you guys can understand more clearly okay and I will declare one hint roll number after that string name for holding the student name and I will declare one static variable here a static string College is equal to i t s okay I have declared it as a static so this is a this is this will be stored inside the class area not the Heap memory and all the object uh all the objects are getting to the stack area okay here and after this I will write static sorry static Point change this is one method and I'm changing my college name to something known as let's suppose bbdi t just a random string okay and here I will declare one Constructor for this class uh so I hope you guys know how to declare the Constructor how to create a Constructor and for this Constructor I am requiring one two two parameters one is r r represent has the row number of the student and the string and I represent the name of the student okay and now insert this I will assign those values to the variables that I've declared over here are and name equals to n okay so now I have declared one created one variable declared the Constructor okay now I will create one another method name void display and inside this method I will just print the my roll number and okay so I will write roll number concat it with the roll number that we have declared over there and again name and I will assign the name it as name okay this is pretty much this method is going to do and inside my main class that is this static method class where we have declared our main method I will write I will create one variable for for not available object okay I will create the object of that class I will write student Dot first of all change okay and after that I will create a student S1 I will create first object of this class and I have to pass to uh way parameters because the Constructor is accepted accepting the two parameters one one is type of string and one is type of integer so let's suppose I am writing 0 1 as my roll number of that student and name of the student is something Harry and I will similarly I will create two more object of this class and goes here one goes here I have to give name some different name to this object this one is to S3 and these students have roll numbers like this and one's name is Joey one's name is veeru okay so these are the students and I have created those variable objects also now I have to do I have to display the name and uh roll number of the students for that I have created a separate function or the method S1 dot display S2 Dot display S3 dot display okay all these methods will called and according to that roll number and name of the student gets printed on the console okay now if I run I'll end this code oops sorry I have done the previous code itself and let me run this with this one oh okay so here you can see roll number one name Harry roll number two name j roll number three uh name Vero okay and now let me hide this terminal this is pretty much about the static uh keyword and static variable and I go I hope you guys that have got some idea about the static keyword uh so in our upcoming videos we will look into the this keyword in Java thank you for watching this video hello and welcome back to the another video of the Java tutorial Series so till now we have covered class objects and I guess static keyword in Java and today onwards we will be learning inheritance in Java so I will be dividing inheritance in two videos in this video we will be talking about the theoretical theoretical part of the inheritance what is inheritance why it is required and what are the different terms which is which are used in The Inheritance and in the second video we will be discussing about the types of inheritance because there are basically five types in are there in inheritance and we will be discussing each type using the example code example okay so let's just get started uh so what is inheritance inheritance in Java is a mechanism in which one object acquires all the property and the behavior of the parent object so basically there are two terms are here subclass or the child class or the parent class okay parent class is the class whose properties are inherited by the child class child class uses the property which are declared inside the parent class and it is important it is important part of the object oriented programming system and inheritance represents the is a relationship which is also known as parent child relationship okay and you may ask why to use inheritance in Java okay so there are basically two reasons for method overriding so that we will discuss what is method overriding in our upcoming videos uh basically it it is used to achieve the runtime polymorphism in Java and for the code reusability code reusability means uh suppose we you have declared some variables and the methods inside the parent class and those methods and variables are required for you to write in in the another class uh and then instead of writing those variables and methods again and again you can just inherit the properties of that method and variable from the parent class to the child class in that case uh one is one becomes the parent class whose properties can get getting initiated and child class becomes the class whose profit who's inheriting the property okay so there are different terms which are used in inheritance one is class a class is a group of objects which have common properties it is a template of blueprint from which objects are created uh as we have discussed in our previous videos and subclass and the child class subclass is the class which inherits the other class as I have told you the child class will inherit the properties from the parent class and superclass slash parent class is the class whose properties are getting inherited by the child glasses and reusability as the names specifies religiability is a mechanism which gives you to reuse the fields and the methods of the existing class when you create a new class and you can use the same fields and methods already defined in the previous class so for achieving The Inheritance in Java we have the syntax uh we have to write this in this syntax class sub class name you can write here the subclass name and extend is the keyword which is used to Java and the super class name and inside the curly basis you can write a write ordinary to the properties which you want to inherit from the building parent class okay so this is pretty much about the inheritance in Java theoretical part uh from the next video onwards we will be looking into the types of the United States that there are single multilevel hierarchical multiple and hybrid there are five types of initials in Java and one more thing multiple inheritance is in Java is not supported and we can still achieve it but there is one thing uh concept that you to know how to achieve the multiple inheritance in Java that way that also we will be looking into the when we are going into the abstracts and encapsulation part okay so for now uh this is pretty much about the United NC Java and from next video onwards we will be saving seeing uh each type in detail with code example thank you and then welcome back to the another video without tutorial Series so today uh we are seeing in inheritance in Java part two where wherein will be disc discussing each and every type of inheritance in Java and there are basically five types of five types are there single multilevel hierarchical uh multiple and hybrid and as you know multiple inheritance is not supported in Java uh we'll discuss why not it is not supported in Java in our later videos but for now we will see in this video particularly we will seeing into a single and multilevel inheritance in Java so let me just open my IDE okay so here you can see a single level inheritance is nothing but one class is generating the properties of an another class uh like Class A is parent class here and Class B is innate in the property of the Class A okay so we'll see when a short example of single level inheritance I will just write a new class inheritance let me increase the font size I will import the main main method and now I will declare one method inside this uh for that before that I will create one class called animal inside this club I will declare one method name as eight and this method is not accepting any parameters any return type is also valid that's why it is not returning anything else I will just print eating now I will create another class name as dog and as we discussed in our early video uh for implementing The Inheritance we use the keyword extends I will write extends animal so here uh dog is a subclass or the child class and the animal is the parent class or the superclass okay and their dog class is inheriting the properties which are properties of the animal class now I will create one method here name as bark and I will just simply print marking okay now inside my main class that is the inheritance class and inside my main method I will create the object of the doc class let me call it as dog1 is equals to new dog okay and I have created the object of the glass and I will write D dot bark let's take the dog one dot work and dog1.8 sorry and now if I run this class um here you can see uh barking anything is getting printed on the console because uh in animal class that is apparent parent class we have written the void method avoid eat method uh which which is printing eating on the console and inside the dog we have a bark method and which is printing working and using the object of the doc class that is dog one we are just calling the method bark and eat so here you can see we are we have written the implementation part of the eat method inside the animal class that is the parent class and still we are using it uh by the creating the object of the dark class because we have inherited the properties of the animal class inside the dock class that's why so this is the simple example of this uh single level in inheritance and next we have multilevel inheritance so let me just go here and I will create one another class name as multilevel inheritance now let me just increase the font size we'll add my main method and as you can see here multilevel inheritance is nothing but multiple classes are in inheriting uh the properties as you can see here uh Class C is inheriting the properties of the Class B and Class B is generating the properties of Class A okay so we will Implement try to implement this inside our code so I will take the same example as we have taken with a single single level inheritance uh I will just copy this animal class inside this class k y is throwing error typically class found in HR oh sorry we have already written the cinema class over here let me just comment this out so that intelligent ID will not throw the errors okay here we have this animal class and one dog class is also I require and I will just copy this doc class also okay and I will require another class so that I can have three classes which I need inheriting the properties of animal class and I will write new class class name let's suppose baby dog and which is inheriting the properties of dog and it has its own method known as void well let's suppose whip and I will just simply print whipping okay here you can see uh one parent class is their NM animal and each method is there and dog is extending the extending the animal class and baby dog is extending the doc class so here here you can see one class in editing the another class and another that class is also inheriting the properties of the main main parent class okay so simply we will create the object of the Davido class let's suppose dog one is equal to new baby dog okay and now if I write dog1 Dot whip whip is the method I guess this is what sorry I have written wrong here now it's okay uh web and dog one dot bark dogon Dot it now if I run this class now it should output should be whipping uh barking and eating here you can see now now in hierarchical and uh hybrid we will discuss in the next video and we will also discuss why multiple units is not supported in Java thank you for watching this video hello and welcome back to another video of the Java tutorial Series so today we are covering the remaining types of inheritance that is hierarchical inheritance and we will see why the multiple units is not supported in Java okay so let me get into my IDE I will create one new class name hierarchical inheritance inheritance okay and let me increase my font size I will include the main method okay so what is hierarchical inheritance is when two or more classes inherits a single class means let's suppose uh one class a is there and whose properties are getting inherited by the class two classes that is Class B and Class C at the same time in the example uh we'll see one example let let's just get started I will create one class name as animal and inside that I will create one method which it doesn't written anything that is why I'd eat and this method doesn't accepting any parameters and I will simply print eating these are some simple examples to under just to understand what is hierarchical inheritance we will cover a complex example in our upcoming videos also and another one is class dog which is extending the class animal and inside this I will create another let's suppose what doc does bark I'll create one method name as Spark and we'll simply print working okay uh and one more class is required let's suppose class cat and this class is also extending animal class and inside this I will create one more method name is meow which doesn't accept any parameter and inside this I will write meowing meowing meowing okay so our goal is to achieve hierarchical inheritance here uh let's suppose this is the parent class I will write one comment over here parent class and this dot class is the child class one and this is child class 2. okay and inside this I will write it now I will write my main method now let me copy this from here and I will paste it over here my main method okay and inside my main method I will create a one object of the cat class cat C is equals to new cat okay and I'll I will call wait a minute I'm getting error and it cannot be referenced from a static const text we terminate yeah let me get let me write the static all static because we are calling them inside a static method okay so that's why I'm getting one error available at all the highest right now ah yes okay and I will call C Dot meow and again C Dot eat because it is inheriting the properties of the animal class and eight method is written inside the animal class so that we can call that eat method using the object of the cat and now I will write one more line here but I'm commenting out initially and I will write sorry not it bark okay and now if I run this the expected output should be meowing and eating let's see here you can see me moving and eating is getting printed on the console and now if I comment remove this comment and if I try to run this here you can see it it gave me error because location variable C is type hierarchical index.cat and you know it is telling me that this is compile time error guys I will commit it out CT errors means compile time error this error occurs because we uh here you can see we are in this is the parent class animal class and this is the cat and dog class these are the child classes which are animating the properties of this and we are extending this is this is the cat class and we are extending extending the properties of a class there is no linking between the class C and Class B and we are trying to access the methods which are written inside the class B using the object of the Class C that is not possible here and that's why uh Java is throwing errors a compile time error this is this can not be done inside Java okay I will comment it out and I will run run it again now it's working fine okay I hope you guys understood The hierarchical Inheritance in Java and now let's talk about why multiple nutrients is not supported in Java so in multiple entrances what here you can see one two parent class one one class is there which is child class which is inheriting the properties of the two different parent classes in class A and Class B are the parent classes and Class C is the child class and Class C is trying to inherit the properties of the Class A as well as the class B at the same time okay this is not supported in Java why so to reduce the complexity and simplify the language multiple ingredients is not supported in Java uh I will give give you one scenario where a a b and c are the three classes here you can see and Class C is in it inherit the property of the Class A and B if Class A and B have the same methods and you call it from the child class object means class let's suppose one method is there void it and in class A as well as the class B and we are trying to call the this void eat method inside Class C this creates an ambiguity for the class C to whom the coil which class method should it call class whether the class A and Class B since the compile time errors are better than the runtime errors Java renders the compile time error if you inherit the two classes okay so whether you have the same method or the different method there will be the compile time error so to remove this ambiguity Java doesn't support multiple inheritance but there is a way you can achieve multiple area times in Java that is using any interfaces and we will cover interfaces in our upcoming videos when we will be talking about the polymorphism in Java so right now uh just understand that multiple entities is not supported in Java just to simplify the language and remove the ambiguity which is created here Java doesn't support multiple hand returns so thank you guys for watching this video I'll see you in the next one hello and welcome to the new Aid of the Java tutorial Series so today we will be covering aggregation in Java so till now we have covered uh in inheritance in Java and inheritance represents is a relationship and aggregation represents has a relationship I will tell you what what exactly this is uh so let's start this video If a class has an entity reference it is known as the aggregation and aggregation represents a has a relationship okay because so consider a scenario where employee objects contain many information such as ID name email ID Etc it contains one more object that is named address so address contains so many fields like city state country zip code Etc okay uh so when to use aggregation and why to use aggregation so for y you can use aggregation for code reusability and when to use aggregation if the code reuses is also the best achieved by the aggregation when there is no is a relationship is a relationship is handled using uh inheritance and has a relationship is inside aggregation inheritance should be used only if the relationship is a either is maintained throughout the lifetime of the object involved otherwise aggregation is the best choice okay so I will cover one example uh that I have discussed earlier of the employee address so let me get into my IDE and I will create one new Java class name as aggregation let me increase the font size I will include my main method okay so I require one more class to hold the address of the employee I will name it as class address okay and inside this public static okay and insert this I will write string I will get City state and Country of that employee okay and I'll write one Constructor so public address and I will receive three parameters one is City one is state and another one is country and inside this I will map all those strings to the string that I have declared above that is City this velocity is equals to City uh again this Dot state is equals to state this dot country is equals to country okay so this declared one address class and one Constructor of the address class it which receives the three parameters city state and Country for that employee uh so I have created one address class which holds the address of the employee and now inside my main method public class I will write in ID which is uh receive the ID and string name to receive the employee's name and I will create address of type address this is where we are implementing aggregation in Java because we are receiving the address of the employee in in the format of address and this add format of the address we had declared over here which received the city state and control of the employee okay and I will write now one method Public Employee which receives the ID of the employee and string name of the employee and wait a minute aggregation in ID string name and address of type address okay so we have created Constructor for this class aggregation and upon create when we create a object of this class ID and name and address of the employees will receive and map those variable with this this Dot ID is equals to ID this dot name is equals to name this Dot address equals to address let me check why I'm getting this error unexpected token wait a minute I should write Constructor outside the main method and all this declaration should be done I'll set the limit now it's okay and I need one more method to display the information of the employee void display um system.out.printlain print the ID ID Plus name of that employee trans name okay and below that I will print the address of that employee and address here you can see we have created address in the format of City then State and then country so I need to print in that format also address Dot City and then one space should be there address Dot state open space and then address Dot country this will print the address of the employee employee okay now inside my main method I will create the object of this classes to create the employee and I will create so now I have created a address one and address two of the employee and I have created two employees okay now I just need to display the information that we have got from this address one and employee one so to imprint that I will just simply call employee one dot display and employee two dot display okay and now now I will run this it should print the employee ID employee name and address of the employee okay so here you can see id101 name Jack a Mumbai Maharashtra India and ID 102 name hack and XYZ is the city uh State and Country of that employee so here you can see we can this by creating the separate class for the address we are reusing that code for to to create the multiple instances of the employee we just need to create one address for that employee and we we can pass it over here as in parameter to the employee class employee object sorry so in this way we can achieve a aggregation in Java so thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so today we will be covering method overloading in Java so what is Method overloading if a class has a multiple methods having the same name but there are different differ in parameters okay then it is known as method overloading if the two methods are there which names are same for example sum is the name of the two methods but so that so how we can defer the two methods okay so when the parameter one if the one method is accepting two two parameters and another one is accepting one or either more than two not not exactly two and then it is a type of a method overloading in Java okay where the same name method has the same name but they differ in the parameters they are accepting okay so if we have to perform only one operation having the same name or the methods increase the readability of the program okay suppose you have to perform a addition of the two given numbers but there can be any any number of the arguments okay if if you write the same method such as int a uh method name is a and it is accepting two parameters of type integer integer okay for the two parameters and another one is int B which is accepting as a three parameter int okay for three parameters then it it may be difficult for you as well as the other programmers to understand the behavior of the method because it's it has this it has the same name differs okay so we perform the method overloading to figure out the program quickly okay and what are the advantages of the method overloading method overloading increase the readability of the program okay and so let's just talk about the different ways to over overload a method okay so there are two methods uh by which you can overload the method method overloading by changing the number of the arguments uh the method is accepting and the method overloading by changing the data type of the argument which is accepting okay so let me just quickly go into my IDE we'll cover this popular question also uh but but let first we will code C1 example of the method overloading then we will see some popular method uh questions sorry okay method our loading okay let me increase the font size and first we will see a example of the method overlading by changing the number of the arguments okay let me copy this and I will give it a comment okay and now okay so let me take one example okay uh what I can do is I will declare one method name as int add and it is accepting the two parameter let's suppose into a and B okay and inside this I'm simply returning a plus b nothing else okay and I will introduce one more method which is inside this same class which is static int add same name of the method here you can see add is the method name and here also add is the method name but what I what I will do is I will change the number of the parameters it are accepting okay now int a comma int B comma in C and I will simply return a plus b plus sorry C fine okay I will I will return this okay okay so now I will create my main method and inside my main method I will print add off uh let's suppose 11 comma eleven okay and now again I will print one more statement uh once again guys okay so I will just print call another method now I am giving 11 comma 11 comma eleven here you can see us method name or same add and add but they are differ in the parameters they are accepting one method is accepting the two parameters one another method is accepting the three parameters okay so this is the example of the method overloading changing the number of the arguments we are passing okay and simply I will run this class and you're guessing 11 plus 11 that is 22 for the first uh print statement and another pin statement 11 plus 11 plus 11 is that is 33 is getting printed on the console okay so another meth another way to achieve the method overloading is changing the data type of the argument okay so I will just copy this and paste it over here okay so now let me comment this out okay now I will again I will have to declare one int method okay I will copy this and I will paste it over here and let me uncomment it okay one add method is there which is returning uh addition of the two methods two numbers A and B and one another method is there name is static double add and it it accepts two parameters double A comma double B okay and now it will return the addition of this two numbers okay okay now I will write my main method and inside my main method I will print call those methods add what I had to give 11 comma eleven and for another print statement I will call another ad method but this time I will pass uh 11.2 comma 11.5 11.5 okay so here you can see uh two same method same two methods having the same name and same number of parameters that are accepting one add method is accepting to two parameters integer a and integer B and another uh method which is accepting the two parameter that uh that is a and b but they are different in the return type they are returning okay the first method is returning uh in integer and second method is in returning and double so this is a way we can achieve the method overloading by changing the data type of the argument okay argument here in it receive it it was receiving in the integer format and here it was receiving the double format okay and so now if I run this class I should get the okay 11 plus 11 is 22 and 11.2 plus 11 11.5 is 22.7 so these are the two methods by which you you can achieve method overloading in Java one one is changing the arguments and another one is changing the data type of the argument okay some popular question which is asks frequently uh during the interview process uh of method overloading one is why method overloading is not possible by changing the return type of the method only okay so in Java method overloading is not possible by changing the return type of the method only because of the ambiguity let's see how the ambiguity May occurs okay so I will take one example uh let me go let me get into my class I will increase the font size and here I will create one same method same example I am taking let me print okay okay and now I will be writing the same double method also okay I will just copy this and paste it over here and comment this okay uh so all these steps let me introduce a new class adder and inside this I will write these two method okay and now inside this I will write my main method and main method I will simply print adder sorry header dot add 11 comma 11. okay so here you can see I've created one two methods uh int add and double add they are written there the return type of the two methods are different that is inth and one is it returning a double okay and now if I come here and try to print this statement add a DOT add 11 comma eleven it will create an ambiguity why so here you can see in IntelliJ IDEA is telling me there's some error and what is what's there add int is already defined in Adder so it creates an ambiguity for the Java it it for here you can see we are calling this add method 11 comma eleven but the return types are different one is double and one is integer but the number of the parameters they are accepting are the same and the type of the parameters they are acting accepting is are also same it creates an ambiguity for the Java programming language and it can't differentiate the two methods are there of the different types okay so this creates an ambiguity and one more question is there can we overload the Java main method yes by Method overloading you can have the number of the main methods in the class by Method overloading but the jvm calls main method which receive the string array as an argument only okay so here you can see we are passing this is the main method and jvm received this main method and our program execution starts from this line number 38 and it accepts the arguments of type string array okay here you can see we are passing a argument of type string array and let's this is how you can overload the main method also in Java okay so thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so today we will be covering method overloading in Java so what is Method overloading if a class has a multiple methods having the same name but there are different differ in parameters okay then it is known as method overloading if the two methods are there which names are same for example sum is the name of the two methods but so that so how we can defer the two methods okay so when the parameter one if the one method is accepting two two parameters and another one is accepting one or either more than two not not exactly two then it is a type of a method overloading in Java okay where the same name method has the same name but they differ in the parameters they are accepting okay so if we have to perform only one operation having the same name or the methods increase the readability of the program okay suppose you have to perform a addition of the two given numbers but there can be any any number of the arguments okay if if you write the same method such as int a uh method name is a and it is accepting two parameters of type integer integer okay for the two parameters and another one is int B which is accepting as a three parameter int okay for three parameters then it it may be difficult for you as well as the other programmers to understand the behavior of the method because it's it has this it has the same name differs okay so we perform the method overloading to figure out the program quickly okay and what are the advantages of the method overloading method overloading increase the readability of the program okay and so let's just talk about the different ways to over overload a method okay so there are two methods uh by which you can overload the method method overloading by changing the number of the arguments uh the method is accepting and the method overloading by changing the data type of the argument which is accepting okay so let me just quickly go into my IDE we'll cover this popular question also uh but but let first we will code C1 example of the method overloading then we will see some popular method uh questions sorry okay method overloading okay let me increase the font size and first we will see a example of the method overlading by changing the number of the arguments okay let me copy this and I will give it a comment okay and now okay so let me take one example okay uh what I can do is I will declare one method name as int add and it is accepting the two parameter let's suppose into a and B okay and inside this I'm simply returning a plus b nothing nothing else okay and I will introduce one more method which is inside this same class which is static int add same name of the method here you can see add is the method name and here also add is a method name but what I what I will do is I will change the number of the parameters it are accepting okay now int a comma int B comma in C and I will simply return a plus b plus sorry C fine okay I will I will return this okay okay so now I will create my main method and inside my main method I will print add off uh let's suppose 11 comma eleven okay and now again I will print one more statement uh once again guys okay so I will just print call another method now I am giving 11 comma 11 comma eleven here you can see us method name or same add and add but they are differ in the parameters they are accepting one method is accepting the two parameters one another method is accepting the three parameters okay so this is the example of the method overloading changing the number of the arguments we are passing okay and simply I will run this class and you can see 11 plus 11 that is 22 for the first print statement and another pin statement 11 plus 11 plus 11 is that is 33 is getting printed on the console okay so another meth another way to achieve the method overloading is changing the data type of the argument okay so I will just copy this and paste it over here okay so now let me comment this out okay now I will again I will have to declare one int method okay I will copy this and I will paste it over here and let me uncomment it okay one add method is there which is returning uh addition of the two methods two numbers A and B and one another method is there name is static double add and it it accepts two parameters double A comma double B okay and now it will return the addition of this two numbers okay okay now I will write my main method and inside my main method I will print call those methods add what I had to give 11 comma eleven and for another print statement I will call another ad method but this time I will pass uh 11.2 comma 11.5 11.5 okay so here you can see uh two same method same two methods having the same name and same number of parameters that are accepting one add method is accepting to two parameters integer a and integer B and another uh method which is accepted the two parameter that that is a and b but they are different in the return type they are returning okay the first method is returning uh in integer and second method is in returning and double so this is a way we can achieve the method overloading by changing the data type of the argument okay argument here in it receives it it was receiving in the integer format and here it was receiving the double format okay and so now if I run this class I should get the okay 11 plus 11 is 22 and 11.2 plus 11 11.5 is 22.7 so these are the two methods by which you you can achieve method overloading in Java one one is changing the arguments and another one is changing the data type of the argument okay some popular question which is asked frequently uh during the interview versus uh div of method overloading one is why method overloading is not possible by changing the return type of the method only okay so in Java method overloading is not possible by changing the return type of the method only because of the ambiguity let's see how the ambiguity May occurs okay so I will take one example uh let me go let me get into my class I will increase the font size and here I will create one same method same example I am taking let me print okay and now I will be writing the same double method also okay I will just copy this and paste it over here and comment this okay uh so all these steps let me introduce a new class adder and inside this I will write these two method okay and now inside this I will write my main method and main method I will simply print adder sorry header dot add 11 comma 11. okay so here you can see I've created one two methods into add and double add they are written there the return type of the two methods are different that is inth and one is it returning a double okay and now if I come here and try to print this statement add a DOT add 11 comma eleven it will create an ambiguity why so here you can see in IntelliJ IDEA is telling me there's some error and what is what's there add int is already defined in Adder so it creates an ambiguity for the Java it it for here you can see we are calling this add method 11 comma eleven but the return types are different one is double and one is integer but the number of the parameters they are accepting are the same and the type of the parameters they are acting accepting is are also same it creates an ambiguity for the job programming language and it can't differentiate the two methods are there of the different types okay so this creates an ambiguity and one more question is there can we overload the Java main method yes by Method overloading you can have the number of the main methods in the class by Method overloading but the jvm calls main method which receive the string array as an argument only okay so here you can see we are passing this is the main method and jvm received this main method and our program execution starts from this line number 38 and it accepts the arguments of type string array okay here you can see we are passing a argument of type string array and let's this is how you can overload the main method also in Java okay so thank you for watching this video hello and welcome back to the new videos tutorial Series so today we will be covering method overriding in Java so what is Method overriding uh if subclass that means a child class has the same name the same method name as declared in the parent class and it is known as a method overriding in Java in other words if a subclass provides the specific implementation of the method that has been declared by one of its parent class then it is known as method overriding we will see what it is by getting one real life example and next we will see uses of the method overriding so method overriding is used to provide the specific implementation of a method which is already provided by its superclass for example one method is there which is declared in the parent class and in some implementation parties also declared in the parent class and you just need to you have to get that method inside our subclass so you simply write extends that parent class and keyword uh to inherit the properties of the parent class and you can use that same method name inside the subclass and get that implementation in our subclass so method overriding is used for the runtime polymorphism and next up we will see rules for Java method overriding the method overriding must have the same name as in the parent class so the the name of the method should be same in both the classes one is parent class and the subclass the method must have the same parameters as in the parent class so the number of the parameters that the method is accepting in the parent class should be same as that of the number of the parameters it was accepting in the subclass and there must be a is a is a relationship which represents the inheritance in Java okay and let's understand the problem without method over a method overriding and we will see how how it fixes by using the method overriding so let me open my IDE okay it's opening weight we'll see one example uh how method overriding fixes one problem okay we'll see first problem uh okay so let me create my new Java class method over riding okay let me increase the font size okay uh now suppose let me declare one more class so that I can Define differentiate between the parent class and subclass I will create one class vehicle okay and inside that I will declare one method which isn't written anything that's why right void as a return type and inside that I will simply print vehicle is running and now this public class method overriding is extending that vehicle class so I will write extend vehicle and now uh inside this I will write my main method and inside that I will create the object of the disk method overriding class method overriding obj1 new method overriding and using this object obj1 obj1 I am calling the run method and now if I run this class the expected output should be vehicle is running yes vehicle is running and now now you see the problem is that I have to provide a specific implementation of the run method in the subclass that is that is why we use the method overriding okay so here also now you'll see uh how it eliminates this problem okay let me comment this out one more class I required with the same name again inside this I will write the same method first void run and inside this I will simply print because running okay and now uh one more class public class I will just copy this code foreign class is actually in extending the vehicle class and now inside this I will write the same method that I have written earlier void run and inside this and simply print my kids running okay now I will declare my main method and inside this I will create the object of the method overriding class that is obj1 is equals to new method overriding and using this object obj1 and call obj1 Dot run now we'll see uh how method overriding eliminates this problem okay and here you can see bike is running okay now uh this run method is also declared inside this uh vehicle method uh vehicle glass sorry and which is printing vehicle is running and same method by the same name we have written inside this public class method overriding which is extending the vehicle class so vehicle class is the parent class and this method overriding is a child class and inside this run method I have written a bike is running and when when we call this obj1 dot run it will call the subclass method which is this and we'll see how to call if there is the same two methods are there by the same name and you are trying to achieve the method overriding and if you want to call the method which is declared inside the parent class then we will we will use some one specific keyword is there super keyword we will see what is it what it is in our upcoming videos uh super keyword is used to call the method which is declared inside the parent class and now you now we will see when real life example of method overriding so that you can understand it clearly okay and let me just comment this out wait okay Let Me Clear My terminal okay now we are here uh now you see I will create one class name as bank and we as we know we have every bank has their interest rate okay so I will write one variable get weight of interest okay get rate of interest so this is the My Method name and this method is simply returning zero okay okay I have declared one method get rate of interest and it doesn't accepting any parameters and the return type of the method is zero okay it returns nothing it returns zero and I will now I create a one more class let's suppose any Bank SBI which is extending the bank class and now inside this I will write int get rate of the interest and I will pass and I will return eight uh similarly I will create one more one more Bank class okay any Bank you want let's suppose ICICI which is extending the bank class inside this I will write again the I will generate the override the same method which is declared inside the bank class get rate of interest now I will return inside this return let's suppose seven okay and now we will declare our public class I will just copy the this Lane and I'll paste it over here and yes okay and now in this class is extending okay nothing okay now if I get inside my public class I will declare my main method and inside my main method I will create the object of the SBI class SBI obj1 is equal to new SBI and I will create object of the ici7 also obj2 it equals to new series here okay I've created all the object and now I will simply print I will print SBI interest is and I will concatenate it with obj1 dot get rid of interest and I will simply copy this because same code will require for ICICI Bank also I will paste it over here and change the bank name okay and object name also because object for ICICI Bank is obj2 and now if I run this and here you can see SB interest is 8 and ICICI say Bank interest is zero well I saw all right sorry I'm I've written interest spelling wrong interest okay now it's okay if I run run this class again it should print as their interest is 8 and ICS interest is seven okay now it's correct now here you can see uh one base implementation of the rate of interest for every bank is there we will just inheriting uh extend overriding this methods each each and every time for the different banks you can create a number of the bank Banks over here and you will simply overwrite this method get get rid of interest and return the particular rate of interest for that bank okay and now we will see some popular questions which are asked for method overriding that is can we override a static method the simple answer is no a static method cannot be overwritten it can be proved by runtime polymorphism so we can learn it later on our upcoming videos and why why can we not override the static method uh it is because the static method is bound with the class whereas the instant method is bound with an object okay what I what it means is this style which method a static method is always bind with the class not with the object now whenever whenever you run this run this class the static the method which are declared as a static binds with that class itself not with the object here obj1 obj2 okay and static static belongs to the class area and instance belongs to the hip area we'll see what is uh stack area in upcoming videos and can we overwrite the Java main method no because the main method is the static method and we cannot override the methods which are declared as a static okay I hope you got the concept of the method over like overriding in Java and thank you for watching this video hello and welcome back to the another video of the Java tutorial Series so today we will be covering super keyword in Java so the super keyword in Java is a reference variable to which it is used to refer the immediate parent class object whenever you create an instance of the subclass and instance of the parent class is created implicitly which is referred by the super a reference keyword okay so it is knitting method it is super keyword is used to call the variables methods and the constructors of the super class okay so the uses of this super cubes are super keyword is so this there are three uses it can be used to uh call the immediate parent class instance variable let me write it over here instance variable and it is super keyword is uh can be used to invoke the in immediate parent class method parent class method and again it is a super can be used to invoke the immediate parent class Constructor okay so these are the three uses of the super keyword we will see one by one each of them okay let me decrease the font size okay so first we will see how we can use the super keyword to refer the immediate parent class instance variable okay so let me get into my IDE and I will create one new Java sorry a new Java class I will name it as super keyword okay now in let me increase my font size and I will import my main method okay uh so let me take one example so that you guys can understand how we can use the parent class variable as in child's class okay uh let me declare my parent class over here I will write animal declare one class name as animal and I will write this okay now inside my animal class I am getting a difficult class found okay okay okay okay okay wait wait wait wait wait in our previous code we have used this animal class I guess that's why we are getting uh error over here okay okay let me change my class name so something else so that we can okay now now it's okay fine uh inside my animal class I will declare one string color and quit string col or color which is equals to White okay so this is my parent class and now I will create one class name as dog I guess you can take anyone any animal you want okay dog which is extending the enemy sorry animals class now inside this class I will write string color it is equals to black okay now uh wait a second I'm getting okay dog is also let me create it as stocks okay uh now I will write one method void print color which doesn't accept any parameters and inside this method I will write simply system.out.pentel in my color okay now and I will write one more Sprint statement and now this time I will write super dot color okay now you you will see what is different exactly difference between uh these two statements let me just create the object of the talks class dogs obj1 is equals to new dogs okay and inside using this objects I will obj1 Dot print color okay now if I run this you will see the difference between these two statements one is printing black and one is printing white why so because when we write system.out.print Ln color that this this is referred as this line number six and this colors value of this color variable color variable is black and which is getting getting printed on the console and when we write super dot color this super key this super keyword will call this call is getting called to the parent class parent classes here class animals and whereas colors value is white okay so super dot color is white and color simply color when we write simply color the that means inside this class we have declared string color black so black is getting printed first and why it is getting basic printed second okay I hope you understood this concept of variables okay and now moving forward we'll see how we can Super Key how we can use super keyword in class methods okay now uh I will make some changes in this code itself okay now this time I don't need this string because we don't we and I will create void eight and inside this I will just simply write eating okay uh so this is the parent class method and now inside my dogs which is extending the animals class extends the animal class uh I don't know I don't need this variable right now and I will declare this print I guess this also don't don't need anymore okay now inside this I will write avoid it uh and I will print doggy is eating such a random string okay and then right bark okay and I will simply print barking and I will declare one more method work okay and inside this I will write super dot it okay and now after this web method is done I will write bark okay so wait a second let me write this inside this okay now it's okay uh we have declared one the dog's class which is which extends the animal class and inside this we have written void eat and so this is the example of the method over adding as we have discussed in our previous videos also so this it method will print dog is eating and this bark method will print barking uh now one more method is there name as work which is uh calling to methods okay super dot eat and now we will see what you what you guys thinking what should be printed over here why why not eat eat whether it is painting dog dog is eating or the eating you will see uh let me just comment this out and I mean next line I will write obj1 dot work and now if sorry I open it in debug mode wait wait wait wait now it's okay huh yes here you can see eating and barking is getting written on the console why so because when the call is at line number 21 super dot it will call the immediate parent class okay and each method we have declared in the parent class uh it is printing eating and that's why eating is getting printed on the console and when when we call Bark it's just simply called uh the method which is in inside the animal class redox class itself okay that is the child class and which is printing barking okay so this is a this is the one use case of the super keyword uh to call the immediate parent class method okay now you will see how to call the immediate parent class Constructor invoke no call we will invoke okay so in this example itself I will do some changes so that you guys can understand it clear okay you know what let me comment this out okay and here I will come in this also okay now inside this uh parent class I will declare the Constructor for this class okay animals this is the Constructor and this Constructor is simply printing animals is create it okay and now inside this child class we'll write the Constructor for this class wait a second it's dogs not dog and inside this we'll write super and and again one pin statement so that you guys can understand the code flow is going dog is created okay now if I comment this out and I will simply run this because here you can see I have not uh used that object and called any method and uh still now something is getting printed on the console that that is because when as we have discussed in our Constructor video The Constructor will get uh called automatically whenever the object of that class is created okay so here we are creating the object of the class so that the Constructor will get called automatically okay so what is happening over here uh in the line number 37 whenever we create an object of that class obj1 the call is passed to this line number uh 28 okay now this line number 28 is executed 29 we have written super okay and if you hover over this it says that animals class is there and this call is passed to this animals class Constructor and in this Constructor will get executed first okay and it is printing animals animals created so the first line is animal is created it is it and secondly it is printing uh dog is created that's why it it prints dog is created okay one more thing is there uh if you don't if you don't write this uh this super at line number 29 it that again it is writing animals is created why so because whenever you created whenever you create the child class object and if that child class is extending one parent class then in that case whenever you create a create the child class uh Constructor it will automatically call The Constructor which is there inside the parent class okay so if I don't write this super super over here again it it will call the animals class Constructor if we have if you have declared this Constructor inside that class if you don't have declared it will not call okay so this is the idea behind the super keyword uh I hope you understand the super keyword in Java thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so today we will be discussing final keyword in Java okay so the final keyword in Java is used to restrict the user okay the final Java keyword can be used in many con context okay the final can be a variable a final can be a method and a final can be a class okay the final keyword can be applied with this variable a fine a final variable that have no value is called as blank final variable or uninitialized final variable okay and it can be initialized in a Constructor only and the blank final variable can be a static also can be initialized in the static block only and we will be detailed learning of this and let's first learn the basic final keyword okay okay so what is the use cases of the final keyword in Java to stop the value change and to stop the method overriding and to stop the inheritance okay we will we will be using final keyword for these two for these three reasons okay so we will discuss first what is Java final variable okay so let me get into my IDE and I will create one more class name as final keyword okay and let me create the font size okay so though if you make any variable final you cannot change that value of that final variable it will be constant throughout the code okay so the example of the variable is okay so assume uh try to understand this example there is a final variable called a speed limit okay speed limit of that bike okay we are going to change the value of this variable but it can be changed because the final variable once assigned a value and cannot be changed anywhere in the code okay so let me create when class one not class inside this class let me create one final so to declare a final variable we will write final keyword before that Declaration of that variable okay so the final int so what is the way my variable name is speed limit which is equals to 90. and after that I will write void run now inside this my I will set my speed limit to uh any any random number 400 okay you can set whatever you want and inside again this I will import my main I will write my main method and I will create one object of this class okay so final keyword obj1 is equals to new Final keyword okay and now if I write obj Dot run now here we can see if I run this uh IntelliJ IDEA is throwing some errors we will see what is there here you can here you can see Java cannot assign a value to a final variable speed limit so here you can see once that variable you once you declare a variable as a final and you assign a value to it you cannot change that value again okay inside this line number four we are we are trying to change the value of the speed limit to 400 and it is giving me error saying that cannot assign a value to the final variable speed limit because it is already already over here at line number two we have declared value to it okay so we'll see next up Java final method okay what is our final method we will see I will take the same example let me comment this out and this one also okay and inside this class itself I will write one final method void run now inside this I will write simply print something random string running okay and now uh inside my main method I will create one object of this class and I will write obj1. run okay and now if I call this it is simply printing running okay now I will show what is the consequences if you write one method as a final and you are trying to call that method inside another class okay and now I will let me just I will write one more class uh any name by company let's suppose BMW and this BMW class is extending my oh okay wait wait wait wait wait to explain this I need one more class which is the parent class I will declare it over here class bike and inside this I will write final void run running okay and now this is my BMW class and which is extending my by class and set this I will write avoid run and inside this I will write yes sound BMW is running okay and now if I create the object of this b m w class foreign method inside this main method you'll see when error should be there we'll see what is that error IntelliJ IDEA okay the Java run in BMW cannot override run in bike overridden method is file is final okay so here you can see Java is telling me that you are trying to override one method name as void run which is declared inside the parent class bike as a final method okay you cannot overwrite the final method uh inside any of the child class once you declare it as a final final method okay so this is an example of the Java final method you'll see Java final class method also example sorry not method and now uh I'll make some changes over itself I will declare it as final class bike okay and I will remove this final keyword from here okay nothing okay and now if I try to run this code I should get one error yes cannot inherit from by final bike okay uh you have declared this bike class as a final and you cannot inherit this class inside any of the child class okay and and you in like line number 19 we are trying to in we are trying to inherit this by class inside this BMW class and here itself IntelliJ IDEA is telling me that cannot inherit from final bike okay so this is one example of the class where we have declared class as a final okay now we'll see some popular questions which is asked in the interview rounds okay is final method inherited yes the final method is inherited but you cannot override it okay as we as we have seen here okay now one more question is there what is the wait let me take can we initialize blank final variable uh yes but only in the Constructor if you want to initialize uh here I will give you an example here we have written Final End speed limit and we have assigned it value as 90. if you want uh to initialize this variable as a blank variable you just simply cancel that assigned value as 90 and then again you can write it here speed limit is equal to 70 and if you are trying to print this speed limit at that time the speed limit will be get printed on the console as 400 because you have initialized over it over here but the only thing is you have to initialize the limit speed limit value inside the Constructor of that class not in the method so here we are written method if you if you write a Constructor for this final keyword class and inside that class if you write speed limit is equal to 400 the value of the speed limit is uh set to 400 itself okay so this is pretty much idea behind the final keyword in Java I hope you guys understood it thank you for watching this video hello and welcome back to another video of the tutorial Series so today we'll be covering abstract classes in Java so a class which is declared as an abstract keyword is known as the abstract class in Java and it it can have abstract and nonapstack methods and methods with body okay so before learning the abstract class let's understand the abstraction in Java first okay so what is abstraction abstraction is a process of hiding the implementation details and showing the only functionality to the user okay so so it is a it's nothing but another way to it shows the only essential things to the user and hides the internal details for example sending sms where you type the text and send the message you don't know how the internal processing about the message delivery is done you just only see one tick that that tells you that the message is sent successfully so abstraction displays the very important role over there so so there are several several ways where you can achieve the abstraction uh first one is the abstract class and second one is interface so in this video we'll be covering abstract class and in our upcoming video we will be covering interface okay so hashtag class in Java a class which declares an abstract is normally abstract class it can have the abstract and known abstract methods okay so there are some points that you need to remember while learning the abstract class in Java an abstract class must be declared within an abstract with an abstract keyword okay if you want to declare an extra class you have to use the abstract keyword before that class implementation okay and it can have abstract and nonafstrack Method and inside the abstract class you can declare uh abstract as well as the nonabstack methods and it cannot be in in instantiated okay what is ancient interest instantiated we will discuss and it can have Constructor and static methods also and it can have final methods which will force the subclass not to change the body of the method okay and what is final keyword we have to discussed in our past videos and there are some rules uh for the Java abstract class and abstract class must be declared with an abstract keyword as we have discussed and now we will see one abstract methods in Java one example will try to understand it by example uh let me uh create one class abstract class okay let me increase my font size okay now I will create one class abstract class bike and inside this I will create one abstract method abstract void run okay so now inside my this public class I will write uh before that this class is extends the by class we are trying to achieve inheritance over here okay so inheritance also we have covered in our past videos if you haven't checked that video go and check first inheritance and void run and inside this I will simply print running my bike okay and now I will declare my main method now inside this I will create one object of that bike class obj one which is okay and not on it's abstract class and now if I try to call that run method over here yes now if I run this class we'll see what is the expected output by running my bike okay so when you declare this void run and now this abstract class is extending that by class and when when you declare run and we have already declared one here you can see is implemented in abstract class and here you can see implements methods in bike okay so here we have declared this void run method as an abstract an abstract method doesn't have anybody we have to uh declare that body inside one of this child class and that's why here we it is right it it's written as is implemented in abstract class if you click here the cursor will come here and if you hover over here it implements method in the bike if you write here yes that's why my running my bike is getting printed or printed on the console and next up uh we'll see when the real life scenario of the of an abstract class okay um okay let me get into my IDE and okay okay okay let me just think of one example okay we'll see one example I will just comment this out because I don't need this and this one also okay uh now this is not extending the bike class anymore okay now I will create one abstract class name is sheet okay and inside this I will write abstract void draw okay and now uh I will create one more class over here sorry class rectangle which is extends the class shape and inside this class I will write the implementation for out of that draw method and I will simply print print what should I print rectangle is drawing and okay and now if I come inside my public class and I will write my main method okay and inside my main method I will create one variable of the shape class obj1 by referencing to the rectangle okay and now inside this I will write obj1 Dot bj1 Dot draw okay and now if I run this rectangle is drawing okay so this is one real life CMS scenario we can you can create one shape class and you can write a number of the uh rectangle is there square is there triangle is there and you can try to implement that method inside that same different classes with a different implementation and you can call those uh methods inside the public class using the object of that respective classes okay and now when we will see example of the class having constructed data members and methods okay so first of all let me clear this first previous example okay now I have to clear this also okay now to understand this I will create one more class which is abstract one sorry extract class bike and inside this I will create one Constructor of this class inside Constructor I will simply print in by case created okay and out after that I will create one abstract method abstract void run and I will create one known abstract method also void change gear and inside this method I will write gear changer okay and now I will create one more class uh any BMW random extends the by class and now inside this I will write I have to implement here you can see it it's showing some errors what is the error BMW class must be either declared with abstract or the implement the abstract world run method in the bike because when we declared a method as an abstract we have whenever we whenever that class is inherited by any of its subclasses then the implementation of those abstract methods should be there inside this child classes so we have to implement this run method inside this okay now in if I write running safely okay and this is pretty much about this and inside this I will create one object of the bike class bike obj1 it's equals to new BMW okay and after that I will write obj1 Dot run and obj one dot change here and now if I run this the expected output should be a bike is created uh why why first bike is created getting printed because when we when the program execution reaches at the line number 19 uh the object of that bike class is created and inside the bike class we have declared one Constructor which is printing bike is created that's why the first line which is printing bike is created and after that obj1 dot run the exam control flow of the code will go inside this abstract void run method and this abstract while drone method is implemented inside the BMW class and we have implemented it as running safely that's why running safely is getting printed on the console and after that obj1.j gear is executed and inside the change gear method we have written gear change that's why gear change is getting printed on the console so this is the pretty much idea behind the abstract class in Java so I hope you got some idea of the optional class so in upcoming videos we'll be covering interfacing interface in Java this is another way to achieve the abstraction in Java so thank you for watching this video hello and welcome back to the new way of the Java tutorial Series so today in this video we will be covering interfaces in Java which is used to achieve the abstractions in abstraction in Java okay so an interface in Java is a blueprint of the class it has a static constants and Abstract methods the interface in Java is a mechanism to achieve abstraction okay so there there can be only abstract methods in Java interface not not method body because we have seen earlier abstract methods doesn't have anybody uh it is used to achieve abstraction and multiple inheritance in Java so in when we are trying to when we are learning inheritance in Java at that time I have said uh multiple multiple entries is not supported in Java and we can achieve that multiple units in Java by using the interface by uh how we will see in this video itself in other words you can say that interfaces can have the abstract methods and variables it cannot have the method body okay and interface in Java is also represents a is a relationship as we have discussed in our in inheritance part and uh next up why we use interfaces in Java there are mainly three reason to use interfaces in Java it can be used to achieve the abstraction by interface we can support the functionality of the multiple unitings in Java and it can be used to achieve loose coupling okay so how to declare any interface okay so we'll see uh this how to declare when we bring some example of The Inheritance okay before that uh we need to understand some uh interface improvements that Java has done after the Java 8 release okay the Java compiler adds the public and Abstract keyword before the interface method and moreover it adds the public and static and final keywords before the data members in other words uh here you can see one example interface printable and int Min is equal to 5 and void print method is declared and uh what com compiler of the Java interprets is as uh this is the Java printable.java class dot Java class and this is the class which is created by the compiler so here we have written int mean is equal to 5 and what the Java compiler interprets is as public static final it adds the three uh keywords public static final if you heard before the Declaration of that variable whether you write it or doesn't don't write it it doesn't matter compiler will going to add these keywords before that Declaration of that variable and for the method it adds public abstract void okay and so here are some terms that you need to understand whenever a class a class in class A relationship is there it extends the okay this is the inheritance and whenever class implements in in interface and interface extends an interface okay we'll see one example of it okay so see we will see one real life example of the Java interface uh Bank example as we have discussed earlier okay so let me get into my IDE and I will create one new class okay by the name of interfaces let me increase my font size I will get my main method okay and now I have to declare one interface okay okay wait now if if I write one interface name is okay interface Bank and inside this interface I will create one float variable that is rate of interest rate of interest okay this is the method rate of interest and here you can see I have not written a float rate of I have simply written float rate of interest so what Java entropy interprets this method as uh here you can see I have discussed earlier also public abstract okay so it adds adds one two variables two keywords so before that public abstract float rate of interest this is what Java interprets it interbates as okay and now you know inside outside this interface I will write one class any class SBI which is implements Bank interface okay so and inside this wait a second why I'm getting error duplicate class okay I will write Banks now it okay Banks okay and here IntelliJ IDEA is throwing some errors let me check why the class SBI must be either declared as abstract or implement the abstract method rate of interest okay so this is here you can see we we didn't write any abstract keyword before it and if still that Java is throwing some error telling that this is an abstract method you have to implement this method inside this class okay so let us Implement that method public float rate of interest in for the body of this method I will simply return float value 9.15 f okay now it's not doing error and inside my main method I will create the object of that Banks interface oops sorry Banks obj1 is equals to new SBI okay and now here I will just simply print sbis rate of interest is and I will concat it with what is the object name object one dot rate of interest okay uh it was a throwing some errors duplicate class found okay SBI is we will write sbis now it's okay okay and run interface says dot Java here you can see SBI is Roi is 9.15 9.15 here here we have declared it so this is how uh interfaces Works in Java to implement that interface we have we have one keyword is there implements and to achieve the what we can say polymorphism we have we are writing extends keywords okay so these are some differences don't get confused inside this when a class when there is a relation between class and class extend keywords is there when there is a relation between uh class n interface implements keyword is there and when there is a relationship between interface and interface extend keyword is there okay so let's discuss how we can achieve the multiple inheritance in Java by using the interfaces okay so let me comment this out this code or else I will just remove this so that you don't get confused between the passcode and current code okay uh now if I create one interface okay interface and I will name that printable inside this I will write void one method which doesn't return anything and this is an abstract method because everything will return inside the interface is an abstract method okay and after that I will write in again one interface uh travel and show s h o w a b l is showable and inside this I will write void show method okay so these are two interfaces and now inside my this interface is class which which is public class I will create public void print okay now before that I have to write one keyword which is implements so that Javan just knows that we are trying to implement those interfaces inside this public class interfaces okay so the name of the two interfaces are printable and one is actually and intelligent idea is showing some errors we have to okay we have to declare that show method also inside this because that method was abstract method okay showing theirs and inside this print I will write simply on random string let's suppose hello and inside this I will write um world okay and now inside this main method I will create the object of this interfaces class interfaces sorry this is object 1 is equals to new interfaces okay and now if I try to call those methods object1 dot print and obj1 Dot show okay and now if I run this class hello and World should get printed okay hello and world is getting printed so here you can see uh we are trying to achieve the multiple inheritance over here why so because uh this is one child class and these are two parent classes and we are trying to inherit these two parent classes inside one child class and which is the example of the multiple heritance Okay so this is how you can achieve multiple linear attention Java by using the interfaces and the keyword which is used to here do this is implements okay so this is pretty much about interfaces in Java I hope you got some idea about the interfaces in Java thank you for watching this video hello and welcome back to the new head of the Java tutorial Series so today we will be covering packages in Java okay so Java package is a group of similar types of classes and interfaces and sub packages okay so package in Java can be categorized in two form a builtin packages and user defined packages so we will be covering both of this in our in this video and so the builtin builtin packages are look like this here you can see one example of this pictorial example of this building packages one Java main package main package Java is there and below that Lang utl and awt and there are a number of packages which are defined by the Java language itself these are the sub packages of the Java and inside this uh sub packages different classes are written system.class string.class I release dot classmap.class these are some classes that we have and here you can see I will open any of any of this uh example that we have covered in our upcoming uh sorry of not upcoming previous videos and here you can see we have written import java.util dot scanner so this is the Java is the main package utilize the sub package and scanner is the class which is written inside this package if you hover over this you can see uh implementation of implementation part also of this scanner class okay uh so these are some job packages which are defined uh predefined in Java and we will see user defined packages also how you how you can create and call those okay so first of all if you are using an IDE uh then this example will not help will helpful to you those people who doesn't uh using any IDE uh please look at this example simple example of java package uh package name and package is a keyword which is used to define a package and my pack is the package name and inside this package I have click created one class name is simple and by in inside this class one main method is there and inside main method welcome to package is the string that is printed on the console okay so to compile this Java package Java C minus t the directory or the folder where you are currently storing these files the path should be there in in place of this and Java file name a Java file name is the name we have which is you have given to this file so in this in my case I've written is at simple.java so I should write Java C minus t dot represent the rule directory and simple.java okay whenever I run this command minus D switches the specified destination where to put the generated class file so and you can use this directory name such as slash home in case of the Linux and D dot slash ABC in case of the windows Etc and if you want to keep this package within the same directory in that case you can use dot okay now uh how to access the package from the another package okay still now you have understood what is package how to create a package how to call the classes of the package now how to access the package from the another package okay so there are mainly three three ways you can access it by simply writing writing the import statement as you can see here over here import Java retail.scanner and second one is import package.class Name by specifying the particular class in uh consider a scenario where in one package holds some n number of the classes and you want only one one class to be get called in that case you can write this statement uh this is the example of the second statement where Java is the main uh main package I utilize the sub package and from the util it's a package we are calling simply one scanner class if you want to call all those uh classes which are written inside the util sub package you will simply write import Java Dot util Dot star star represents all all those classes which are written inside the util sub package import them all okay and third one is fully qualified name we will see each of them by looking one example okay now let me open my IDE so to create one package if you are using an IDE then it's very simple you just click on the source folder right click on it new and instead of creating Java class you just click on the package and you can name your package whatever you want I will name it as ABC you can write anything you want and uh so here you can see ABC package is created and inside this package if I want to write one class okay so I will right click on it new Java class and I will write uh class okay uh let's suppose a is my class name so a DOT Java is created under the package EBC here you can see okay and one more line is added by the intelligent idea package EBC that defines this class is written inside the package ABC and let me increase my font size okay so inside this a class uh I will declare one method okay public void message and inside this I will simply print hello okay and I will save this okay now uh in if I go outside of this package and I will create one new Java class name as B and inside this let me increase the font size and over here we are trying to see the import package dot star okay so I will same similarly like import package what is the package name EDC Dot star okay we have it okay and now inside my public Class B I will write my main method and inside the main method I will create the object of the Class A which is written inside this package okay I will write a o b j is equals to new a and I will try to call the method which is written inside the obj that is this one hello message method okay and now if I try to run this hello should get minted on the console okay yes here you can see Hello is getting printed on the console why so because we are in imported the class A from the package ABC okay and now one more thing is there import package name dot class name okay so here to explain this let me create one more class okay okay here however okay let me create one more class public class B okay Class B if public should be declared in the file name B dot Java okay okay in this class is already declared let me write it that PA okay what is ba should be declared in the B dot Java wait wait wait wait wait let me comment this out and this one also okay and okay okay wait you know what let me take this example itself and I will try to explain this also okay and now here you can see uh import package name dot class name okay if you want to call that specific class of that package then you should instead of writing star you should write a okay so package name is ABC the class is public Class A and inside this we have a written one method void message and it's printing hello on the console and it to import that package we have written import packagename dot class name and inside the public Class B and inside the main method I will create the object of that class and I will call that message method okay again hello should be printed yes hello is waiting printed on the console and now uh we'll see the third method fully qualified name okay how we can call okay so if you don't want to write this pack okay in this line and you you still want to use those classes which are written inside the package then you can simply write the package name what is the package name abc abc dot a and here also you have to write abc dot a and now if I try to run this again hello is getting printed on the console because fully qualified names defines as uh one class here Class A is declared inside the package and one method is there MSG and which is printing hello on the console and we are trying to access that class by using the package name dot the class name and by creating the object and again if if you want to call that method object name dot method name is the simple we can call this method okay and hello is printed on the console so this is the pretty much either we have behind the package is in Java okay so in our upcoming videos we will see access modifiers in Java so thank you for watching this video hello and welcome back to the new video tutorial Series so today we will be covering access modifiers in Java so there are two types of access modifiers in Java access modifiers and nonaccess modifiers and the access modifiers in Java specifies the Excel scope of the field method or Constructor of the class and we can change the access level of the fields Constructor methods and class by applying the access modifiers on it okay so there are mainly four types of access modifiers one is private a default protected and public so private defines the access level of the private modifiers is only within the class and it cannot be accessed out throughout the class and the default one is has the access level of the default modifiers only within the package and it cannot access from outside to the outside of the package if you do not specify any access level it will be the default okay are protected for protected the access level of the protected modifiers is within the package and outside the package through the child class if you do not make the child class it cannot be accessed outside the package and the public the public access level modifier is everywhere it can be accessed from the within the class outside the class within the package or the outside of the package so understanding of the Java access modifiers let us understand by this simple table so the if the access modifier is private it can be accessed within the class but it cannot be accessed within the package but it can and it also cannot be accessed outside the package by the subclass only and it it cannot be accessed I will set the package also so this is the yes no yes no chart uh this is the easiest one to understand how the access modifiers are working inside the Java okay so the first one is private for private I have taken one example over here you can see let me just okay yes one class is there Class A and which has the private variable name as data and value to it is 40 and one method is there private void message which is printing hello Java on the console and one public class simple we have written the main method and we have created object of the Class A and we are trying to print obj.data and we are trying to execute that message method which is MSG inside this simple class which is public and by using the object of that class that is obj okay whenever you write this this kind of statements to access the data which is private and which is inside the another class you will get the compile time error in both the lines because you are trying to access those data members which are private in privately declared inside another class okay you cannot access these members okay so the role of the private Constructor if you make any class Constructor private you cannot create the instead of the class outside of the class okay for the for example here you can see uh when class A is created and we have created one uh Constructor which is private okay and one method uh method is there MSG which is printing hello Java and inside our public class inside our main method we are trying to create the object of that class A obj is equal to new a and we'll we here here here itself we will get the compile time error because the Constructor which which is declared for the class A is private and we cannot uh access that for Constructor which is private and that's why we cannot create the object of their class okay so the role of the private Constructor is if you make the class Constructor private you cannot create or instance of the class outside of that class okay next up we have default cons default access specifier okay so let me zoom in okay yes here example you can see one package is there package pack and one class is there which holds one method MSG and which is printing hello on the console okay and inside uh B dot Java we are in the different package that package name is my pack and we are trying to import all the classes which are defined in the pack package and to do do so we are writing one statement import pack dot start star represents all to import all the classes which are defined inside that package uh in in that pack package we have written one one class that is Class A and inside our class B we are inside our main method we are trying to get the object of that class A and that is obj and we are trying to access that MSG method which is inside that back packaged class name a here itself we will get compile time error because the the definition of the default we have seen over here the access level of the default modifiers is only within the package it cannot be accessed outside of the package okay and we are trying to access these uh method uh over here here you can see we are trying to access this MSG method which is written written inside the pack package and we are trying to access it inside the my pack package this is not possible in Java and here here itself we will get you will get a compile time error okay and now for the protected one this is the example same package name pack and same class name but the method which we have declared over here is declared as a protected method and we are trying to paint print hello on the console okay and inside the another package my pack we are trying to import all the classes which is written inside the back package and Class B extends Class A because we are trying to inheriting inherit all the properties which are written inside the class A and inside our main method we we will write the object uh object of the Class B B object new B and we'll call obj Dot MSG and the output should be hello which is getting printed when for the definition of the protected we have seen vaccine level access level of the protective modifies is within the package and outside the package throughout the child class if you if you create the child class you can exit it outside the package now for the public one uh you will write one package back and Class A which is holding one method Miss G and which is printing hello and and in another package we will uh try to import that class which is written inside the pack package by writing import pack dot star and inside the class B inside the main method we will create one object of that class A and we'll print simply call that method obj.msg and we will print uh hello on the console why because for the public definition of the public access modifier says that it can be accessed from within the class outside the class within the package outside the package everywhere you can access that data members if you declare it as a private public okay so this is pretty much about the access modifiers in Java we'll see you in the next one video thank you hello and welcome back to the new video of the Java tutorial Series so today we have completed the oops Concepts and now it's time for the exercise uh so exercise or not Concepts uh head over to this link uh just type this link in your browser and you will be redirected to this page which is hacker rank page and here you can see uh some basic challenges on the oops Concepts in a Java animating this one Java inheritance to abstract class interfaces method overriding method over adding two instance of keyword so we can try solve this questions on your own but I will be taking for the first five questions of this challenges and you can try all these challenges but you can also try easy medium and hard you can set a difficulty level as whatever you want uh I'll be solving easy ones and so in this video we will be talking Java inheritance one and Java inheritance to solution to these problems okay so the problem statement is using inheritance one class can acquire the properties of others consider the following animal class so they have given us animal class which has one method wild walk and which is printing I am walking and this class has only one method walk and next time we want to create a bird class that also has a fly method we do this using extend keywords okay so they have created one one more class A bird which actually extends the animal and which has its own method fly and I'm flying is the print statement which is written inside this fly method and finally we create the bird object that can both fly and walk okay so they have one class solution inside which they have written main method and inside main method they have created the object of the bird class and using that object they have called walk and fly method and obviously this two methods will print I am working and I am flying this means that a bird object has all the properties that animal object has as well as some additional unique properties okay the the code above is provided for the for you in the editor you must add a sync method to the bird class then modify this main method accordingly so that the code prints the following line Okay so the expected output should be I am working I am flying and I am singing okay so they have provided us this code editor okay and we are expected to write one more method for the bird class which is sing method as you can see over here okay so we will write something reward thing and inside this method we will simply write system dot out Dot print Ln and inside this method I will write what we have to write I am singing I will copy this string and paste it over here okay okay this is the method that it has to write okay and okay and then modify the main method accordingly so that the code prints the following lines okay so I have to modify the solution class also and here bird dot thing is there okay now I guess it should print I'm singing I am submitting the code before that I will run the code okay let me just logging through my Google account foreign I will submit the code yes compile and message success now we congratulations so you have solved this challenge okay so this is about the Java inheritance one problem we will look into the Java inheritance second problem also wait let me open this in new tab okay okay for the Java inheritance second problem uh the problem statement is write a write the following code in your code editor below a class name arithmetic with the method name add that text to integer as a parameter and Returns the integer denoting their sum okay so let me write it down here comment what we have to do okay we have to write one class name arithmetic okay class arithmetic inside that class uh we have to write on method name as ADD one method should be there method and which accepts two parameters I and T comma int two integer parameters and then it Returns the sum and it is returning the sum of the two numbers okay and a class name Adder that inherits from a super class name arithmetic okay uh class name header an Adder class should be the one Adder class header class which inherits the properties of the arithmetic class okay so we have inherits inherits the arithmetic class okay and your classes should not be public okay so we don't have to write a class as a public because one class is already declared as a public list which is solution okay the improve input format is you are not responsible for reading any input from this STD in unlock code step will be test your submission by calling the add methods okay this is the normal line output format should be you are not dismissible for printing any anything to STD out your your ad method must return the sum of its parameter okay the sample out sample output they have given as my superclass is arithmetic and 42 13 is 20 okay thank you Okay so write your code here okay so first of all let me create one arithmetic class okay abstract arithmetic abstract CLA s s class arithmetic and inside this class I will write public abstract and add and this is going to accept two parameters final in a and final int B okay so this is the abstract method so I don't need to write the body of this method that's so okay and now uh I have to declare one another method or class okay inside this solution class I will just so it I can't edit inside this solution class okay let me create my own class in IntelliJ IDEA I will name it as in inheritance to I will get my main method and I will simply copied my arithmetic class that I have written over here copy paste okay now we have implemented the arithmetic man and we have also implemented the add method which Returns the sum and now we have to overwrite this method inside our main public method that is public class sorry inheritance to so we will write public in add and which accepts two parameter final int a comma final in b and it performs simply the addition of the two numbers it will return a plus b okay and one more thing uh it it is extends this arithmetic class okay now it's okay now inside our main method we will simply create the object of this inheritance class in here it is to obj one is equals to new inheritance and using this object we will call this add method to call this method we will simply write obj1 dot add and we'll pass two numbers let's suppose uh two numbers can maintain a 10 comma 20 okay so now I guess that is the work that we have to do inside this problem statement we have to just uh create one abstract class arithmetic and one hashtag method which will simply perform addition of the two numbers and that we have done over here and we will create one object of that class and we'll call it and pass the parameters okay now I will run this method run this class sorry not method and okay okay wait wait wait I have to okay I have to write this entire code inside one print statement because the method doesn't printing anything okay and I will simply copy this and paste Insider when statement now if I run this question class Java class 30 is getting minted on the console yes because the addition of the 20 and 10 is 30. so this is pretty much about this problem statement Java inheritance to okay so we will discuss uh other problems also Java abstract Java interface method overriding method overriding two uh in our upcoming video so thank you for watching this video hello and welcome back to the new video Java tutorial Series so this is the continuation uh continued video to the exercise that we have started started in our previous video uh so we have to solve the two problems one and Java in it is two in our previous video so in this video we will be talking about uh abstract class 7 interface and Java method overriding problem okay so for the first problem in Java abstract class abstract class okay this is this is the formal definition of the hashtag class you read it we have also done it in our previous video okay the following is an example of the abstract class uh so they have given one example for the abstract class okay and if you try to create an instance of this class like the following you will get an error okay okay now you have to create another class that extends abstract class then you can create the instance of the new class and notice that set title method is abstract 2 and has no body okay set title is abstract and has no body okay and that means you must Implement that body of the method inside the child class okay we have to implement this in the editor we have provided an abstract class book in main class in the main class we created an instance of the class called my book and your task is to just write the my book class okay sample input is a tail of the two cities and the sample output is a title is a tale of the two cities okay so I got some idea okay and let me get into my ID I will create a new class okay Java exercise problem three okay let me increase the font size I will put my main method now okay so they have created the abstract class book okay so we have to create one extra class book okay so abstract class book and inside that uh one string for holding the title of the book title and then one abstract method as they have said abstract void set title okay and once it accepting one string parameter yes upside class we have written and we will write one sorry string get title for receiving the title and inside this will simply write return sorry not Capital return date title okay so we are returning the title over here and wait a minute small typo is okay now it's okay uh we'll write another class name as book so plus notebook my book which extends this book class and inside this we have two give the implementation of the set title method so over here I will write public set title and I will pass the parameter as string title no K set title I am getting error you're gonna require type must be declared after okay now we have implementing that okay the return time should be there now void set title okay now it's okay and this Dot title is equals to title okay this is about the set title method now inside my main method I will create the object author in my book class oh pH equals to new obj might and I will call this method obj Dot set title and I will simply first receive the title from the user for that I have to declare one string variable t i t l e title initially it is empty string and after that I will receive the input from the user for receiving the input I have to create one object of the scanner class scanner SC is equals to new scanner steam dot in okay now I will set the title value to see dot next now it's okay and I will pass that title to this method okay um okay and uh what it's returning get title okay so we have to get this method also now to receive this method I will just simply copy this method and will print it over here get title and I will simply call one Sprint statement and inside the Sprint statement I will write o b j Dot get title okay and before that I will concat it with one string that is the title of the book is this okay now if I run this first it will ask me for the title of the book okay so what they have given to us the title The Tale of the two cities I will simply copy it and I will paste it over here and enter a title of the book is a object wait a minute wait a minute am I missing over here the title of the book is a oh wait wait wait wait wait next next line it should be now if I run it again and I will give it the same now it's okay so the error was in this one if you write next it will get only the one word first word and whenever it receives the space it will just ignore that part to get that whole string you have to write a c dot next line okay so now you here you can see we are giving one input as a data of the notebook uh sorry no notebook book and we are receiving the title of the book is a tail of the two cities okay so that is the part that we have to do okay right moving forward to the next one uh Java interfaces uh and okay so what they have given is uh this is the overview of this whole problem now Java interface can contain only signature in the fields one okay so you read it I have read already you just pause the video and read it so what we have to do is here you can see you are given with the interface Advanced arithmetic which contains a method signature okay into divisor sum and you need to write a class called my calculator which implements the interface okay we have to implement the interface and the divider sum function just takes an integer as an input and return the sum of all its divisor okay so so the divisor of six are one two three and six and the sum of the divisors are one plus two plus three plus six is equal to 12. so we have to return this okay and to do so we have given our here and did The partially completed code in the editor completed okay so let me create one class name as advance arith m okay sorry for comment okay and I will import my main method I will get it over here and I have to write one this what we can say interface so I guess they have written interface already okay I will just copy this interface from here and I will paste it over here okay wait I is not getting it now it's okay uh let me format it so over here I have copied this interface so from here and now uh inside my arithmetic Advanced arithmetics class I need to Implement I guess that one okay so I will write public int let me just copy this part name of the method which accepting the parameter of integer n and inside this I will write int I need one variable known as sum 0 I will initialize with and I will enter my for Loop and it will start from Ink and D is equals to 1 whenever D is less than n and each time I will be doing D plus plus okay and set this for Loop here I will check if that n in mod d equals equals to zero if it's so sum is equals to some plus is equals to D okay and after that after running the for Loop I will just simply return this sum okay uh so this is uh pretty much that we have to okay okay okay wait wait wait wait wait why it's throwing the error let me check okay uh class Advantage arithmetics is public and should be declared inside the advanced arithmetics dot Java okay okay wait I know the error now it's okay the file name and the class name is different that's why the IntelliJ ID is showing the errors okay and inside the main method uh I will just create the object of this class and using that object I will just call divider sum and it will pass the same value that they have given okay so they have given 6 as an input so let me give it as also 6 as the input and I will pass it and this method is returning the sum so I have to write this whole thing inside one print statement so that the return value can be printed on the console okay so if I right click and click on run the 12 should be getting yeah 12 12 is printing on the console so this problem is also it's done okay so I hope you you can solve this remaining problems uh if I I can solve also so I want you to solve let's give it a try try to solve this uh questions uh check out the discussion forum if you got stuck anywhere in between uh check out the leaderboard uh submissions your previous submission should be come here and edit editorial will be open uh one don't open the editorial you will see the answer directly uh first try to answer these questions try to get the solution and I hope you enjoyed this exercise and thank you for watching this video and I will see you in the next one hello guys welcome back to the new video wherein we are learning the data structures and algorithms in Java so in today's topic we are learning arrays in Java so let's get started so normally arrays is a collection of the similar types of element which has a contiguous memory locations so what do you mean by contagious memory locations so it's nothing but all the elements are located next to each other in the same memory space that is the consecutive blocks of the memory as allocated to the user for the processes uh so there are many types of memory location memory storage types such as hip memories are also there so array uses the contagious memory location so next point is array uses array which is the zero based indexing means at the element that is that stores at the first in the array is is stored at the zeroth index and the next element will store at the one then second and this series will go I go on till n n is the number of number of elements that you declare that the array will store okay so unlike C C plus plus we can get the length of the array using the length member so in C plus plus we use the size of operator which which gives our returns us the length of the array means then how many number of the integers store in that array like that in similar way there is a length member in Java which Returns the same the length of the array which we are using so typically there are two types of arrays in Java so first one is user defined and second one is using builtin class so in this video typically we are going to see the user defined one and the builtin building class we can see in in the next upcoming videos wherein there is not too much work that we we are going to do we just uh import the class from the Lang like a Java package blank package which is uh predefined in the Java Java and we just make an object of that class and we can use the predefined methods of that class okay moving Aid Java provides the feature of anonymous array which is not available there in C plus plus so we will see what is an anonymous arrays so Java supports the feature of anonymous arrays so so as you you don't need to declare the array while passing and add it to the method so think of a situation where where you have created one method and the method method requires an array as a parameter so where where when you when you are calling that method in the main method so instead of calling instead of declaring the new array and passing the value to that array you can just create create a new int and just pass the values that you want to pass through the array that is known as the anonymous array which c plus c c plus plus language is like that don't provide these features okay so moving on next we have the types of array so there are technical two types of arrays single dimensional and multidimensional okay so let's see uh each of them one one by one so single dimensional array the syntax is very similar to our other other programming languages so wherein we have first declare data type like integer and then two square brackets and array or we can declare it this in three different ways as you can see here so first of all let's write some basic code of that single dimensional array so I'm here and let's declare one public class Main okay and I will write the main method that is public static void Main string Alex okay so first of all let's declare and initiate initialize one array so for that we have we can we can do this int that is that that means the direct array is going to hold the integer types of values let's name our array as a okay equals to new integer and this is the five so this five is nothing but the size of the uh how many integer types of values that added is going to hold okay so here I return 5 that means the array is going to hold the five values in it okay so let me just go and quickly okay array at index one it's gonna hold twenty like this area index to hold 30 and then index three is going to hold for t likewise array at index four foreign sorry 50. okay so here you can see uh my array length is 5 and I have declared the five elements in it so let me just print it on the console so for the printing of an print of an array on the console we just use a for Loop wherein our for Loop will start from int I is equal to zero and it will go until I less than a DOT length foreign and each time I am incrementing the value of the I so this dot length function you can see here I have told you the there's one method named as length of the length member which will return the length of the array so here we are using that same method so quickly just I will system start out Dot print Ln is Okay so quickly just revise it we have declared one array and initialize and we are given the all the values that the oregano store at that index and then we have used the for Loop where we are traversing the array and printing the elements that are stored at the 0 to fifth fourth element fourth index of that array okay so I'm gonna run this let's see so here you can see 10 20 30 40 and 50s got printed on the console because at the first at first is value is 0 and array at eyes I stored 10 so that's got printed here and each time the for Loops runs in welder the I got incremented I write one added to error three I added four got printed so this is the basics basic program of array so this so moving next we have multidimensional array so here you can see the multidimensional array how we can declare that array okay so without wasting the time let's code it out Okay so I'm gonna come here and I will comment it out this code at next I will again declare one array but this time I am declaring the multidimensional array that means I have to use two pair of square brackets equals to let me just pass those value okay so here I have declared one array which is multidimensional array and I have passed values to that okay so let us check how we can print the multidimension array like we have printed here the single Dimension array okay so for that we required two uh for Loops first one is run from I is equals to 0 to I less than 3 and each time it will iterate I plus plus okay so inside this we have we are going to use another for Loop which is going to learn from i j is equal to 0 J is less than three and each time we are incrementing the value of the J okay so in this we are going to print system dot out Dot println array add index I and index J plus one space after each number got printed on the console and after this I will just write system dot out Dot print Ln okay so if I run this now we'll see what happens so here you can see one two three two four five four five four four five is got printed so let's check how it got me how is its printing actually so when we come for the first for Loop the value of the I is 0 and it when it Center for the second for Loop the value of J is 0 and here when we enter and we pass the uh array array as array of zero comma zero zero so what is present at array 0 0 this is the element which is present so this this got printed and when when we go uh again here in in inner for Loop wherein JJs value is now 1 okay and is value is zero so again we are passing wherein G is value is zero and but this time J is value is one so what it becomes array of 0 1 so at position error of 0 1 2 is present so 2 is got printed similarly this for Loop will run uh one time again when is 3 this for Loop gets terminated in a for Loop and it go outside for Loop where I plus plus is done and is value is now 1 again it enters the for Loop whereas in change value is 0 and this time we are going to get those values as I array of 1 0 wherein we get this values similarly we are printing all those values so this is the this is how we can implement the multidimensional arrays in Java so there are many ways many practical uses of this using arrays in Java let's suppose think think about a scenario where you have 100 students in class and you have to store all the data of the student uh let's suppose marks the students got obtained the marks in mathematics so you can't just declare a one one variable one variable for each student so in this scenario we we can use an array wherein we we just declare one array of mathematics marks and we will just pass those values according to the students roll number and which got printed and stored and whenever we want we can retrieve those information or the values let's suppose I want to know the marks or marks obtained by the students whose roll number is 8 in mathematics so I can pass the array name and pass the parameter as a seven sorry because the array index in short form 0 and I will get the marks which is of 10 by the student whose role number is 8. so these are some real life scenarios where wherein we are using arrays in Java so you can go to the websites like Geeks for gigs where they have the practice portal wherein you can just sort those uh field you can apply the filter of arrays and you can set the difficulty level and do the do the practice for the coding I will be sharing on all the required resources and the references you will require to learn arrays in Java in the description box of the video so thank you so much guys I will see you in the next week next lecture hello and welcome back to the new video of java tutorial series uh so till now we have covered arrays in Java and for this video we will be covering some practice questions in arrays okay so what is first question uh write a Java program to sum the values of an array so input to this program is an array so you are giving you are given an array as a input you have to print the sum of the elements of elements which are present inside the array okay so let me open my IDE and I will create one new Java class name as practice questions let me increase the font size I'll write my main method okay and now I have to declare one array which will be given as input to the program int array equals to and I will assign the values to the array here itself let's suppose one comma 2 comma 3 comma 4 comma five comma six comma seven comma 8 comma okay so this is this is our array and now uh I again I will require one variable to store the sum sums value okay now I will use enhance for loop I I hope you guys don't know what is an answer for Loop for it's like a for each loop I will write int I in ARR what uh what we have done here is for every integer value inside array will run this Loop okay and what we are going to do inside this Loop sum plus is equals to I means we'll update the sums value with the value which we are getting uh from inside the array okay now at the last I will just simply print the sum is and I will concat it with the value of sum okay so now if I run this should print the value of summation of 1 to 9. okay the sum is 45 now it's working properly so moving forward to the next question uh write a Java program to print the following grid so this is the grid that you are supposed to print on the console uh it has zero sorry one two three four five six seven eight nine ten uh ten columns and one two three four five six seven eight nine ten ten by ten grid is this and you're supposed to print this okay and so let me get into my ID I will comment this out this is the solution for the question number one I will comment and I will write one one more comment as solution to question number one now from here onwards I will write solution to question two and inside this we required multidimensional array because Matrix is there and so I will declare one multidimensional array over here integer this and this and I will name my array as a which is equals to new integer of 10 by 10 because our grid is 10 by 10 Matrix and after this I require one for Loop of for Loop integer I is equals to 0 and I is less than 10 less than 10 means the loop will run from 0 to 9 which is 10 times and each time I will increment the value of i as I plus plus and inside this Loop uh again I require one more for Loop to track the columns first first row will track the rows and second for Loop will track The Columns and inside this I will write intj is equals to 0. whenever my J is less than 10 I will do J plus plus okay and inside this inner for loop I will be doing system.println person 2D and I will I will pass it a value as any at ith index and rare J sorry jet index Okay so after this I will do this okay now it's okay wait I will again simply print the value which is inside the array at I I comma J index and after printing the inner for loop I need to move to the next row and for that for that I will simply write one print statement so that I though so that the program execution will get to the next line okay now if I run this class you can see Zero Zero is getting printing on the console uh one mistake is there I have written print Ln instead of I should write print so that every time a new line should not get printed on the console now it's okay fine yes you can see 10 by 10 uh grid is printed Matrix so this is this is the expected output that we have we want to print on the console okay so next question is write a Java program to calculate the average value of the array elements okay so you have given one array so you just have to print the average of the elements which are present inside the array okay assuming that the there are integer values which are present inside the array okay so now again I will comment this solution of the question number two and I will write down one more comment which is solution to question number three okay so first of all we require one array okay so I will declare one array of type in of type integers and I will name it as numbers which whose value is equals to new integer add a and I will pass those values here itself let's suppose I will pass 20 comma 30 comma 35 comma minus 15 okay comma minus 60 comma minus 100 okay so these are the value just random numbers I have passed to the array and I have to calculate to calculate the average we have to calculate uh sum of the elements which are present inside the array first okay so for that I will require one variable I'm going to sum I will assign it value as 0 initially and after that I will require one for Loop to calculate the sum of the elements which are present inside the array int I is equals to 0 now I it's less than numbers Dot numbers dot length numbers dot length methods will return the length of the array okay and now each time I will be doing I plus plus okay why am I getting error yeah yes I have written this okay now it's okay uh what we are supposed to do inside this is update the sums value okay so previous Value Plus the value of of the current element present inside the array okay now it's okay we have got to sum of the elements which are better inside the array now we just have to calculate uh average so to calculate the average and again declare one have a double average variable of type double and I will simply divide this sum by the numbers dot length okay and now I can simply print the AV average of the heavy elements are and now I will concat it with average and now if I run this I should get the average averages 4 okay now it's okay and working fine if you calculate the summation of 20 plus 30 plus 30 35 plus minus 16 plus 60 minus 100 and it when you divide it with the number of elements that is one two three four five six and then you should get four as a output that is the average of the array array elements okay so these are some questions again I suggest you that you go to the Geeks for gigs or any of the practice portal uh like hacker rank or hacker you just go there and apply the filter of arrays and set the difficulty level to easy and try to attempt those questions try to solve this question it will help you to improve your logic building in problem solving okay so thank you guys for watching this video hello and welcome back to the new video of the Java tutorial Series so so till now we have covered the theoretical part of the array and we have also done uh some uh easy level questions of the array and in this video we'll be talking some uh medium level of medium level question of the array which requires some searching and sorting techniques uh so till now I have not discussed you the not discussed the searching and sorting algorithms which are there for used used in jar arrays so in upcoming videos we will cover that don't worry uh there are a number of the Sorting techniques and searching tests there are two two searching techniques are there which is linear search and variance binary search we will cover that in our upcoming videos so what will be the agenda for this video is I will be covering this uh three uh medium level questions which are arrays add this question so so I again these these these many questions are not enough for you to practice you just have to get your hand dirty on the programming uh so what I suggest you you just go to the any any of the portal or Geeks for geeks hacker Rank and hacker hacker are register there uh try solving uh questions on the arrays set the difficulty levels as easy medium then hard okay so practice more and more so that you can improve your logic building okay so let's get started uh what is the question write a Java program to test if an array contains a specific value so what these programs what this in this question what we have to do is we have to search for an element uh which is given by the first of all we require an array and inside that array you will be getting one uh element which is of uh arrays arrays of type into arrays holding the integer values itself and we uh you have to search that element inside that array whether that elements is present inside the diary or not if that if that present inside the array you just simply return true Boolean value and if that elements doesn't uh present in inside that L array you just simply return false okay on the console okay so let me get into my IDE and I will just simply comment this out uh this is our previous videos Solutions okay and I will simply comment and here I will again comment and I will write medium question one okay medium level questions one okay uh now I will be creating one method inside this and since then since this method is probably I will declare it as a public and I will declare it as static because I have to call this inside my main method and which is test static method okay static uh and this is this will return a Boolean value either true or false it will return true if that element is present inside that array and it will return false if that element is not present inside that array okay and I will write uh My Method name as contains contains means whether that element is inside that array or not you can add anything whatever you want and I will pass my array and item means the value that we have we have to search inside that array okay and I will simply write one for Loop and so I will write integer I in array what we have to do uh we have to check if the array at ith index is equals to equals to um is equals to equals to item is equal equals index uh not just uh sorry uh I have followed the traditional for Loop over here I just have to write I is equals to equals to item oh sorry about that and I will write inside this return return true okay return to I guess this cannot return a value from a method with white word result type uh why am I getting oh wait I forgot that this is the separate method uh let me just remove this my main method so that program can understand this is as a separate method okay uh now it's okay I will import my main method over here why am I not getting wait a minute let me check this whether oh yeah sorry I have not ended the method now it's working fine I will get my main method okay now it's working right okay and after this for Loop uh when the program execution will get at line number 36 when we doesn't uh find any element which matches to the item that we have passed to the method okay so in that case we simply return false okay now it's okay and now we will call that method inside this main method for that before that uh I will declare one array int array which is equals to uh I will simply assign the values over here itself or 10 comma 20 comma 23 comma 30 comma 45 you can give any value whatever you want and after that I will require one variable item means the I value that we want to search inside that array and let's suppose we have to search 23 inside that array okay and now I will just print the call the contents method and I will pass array and item as my parameters to it okay now if I run this since the 23 is present inside this array the expected output should be true yes it is returning to and now if I give a item value as number which which is not present inside that array then in that case I should get false yes it is getting showing false okay now it's working fine so this is the solution to the question number one and what is the question number two second question that is fifth question write a Java program to find the index of an array element so we have to find the index of an array element okay so in this case we want we have to get one array from the user and we want one item like here we have declared over here one item should be there and we have to match whether that item is present inside that array or not if that matches we just have to return the index at which the item is whether inside that array okay this is the idea behind this question I will comment this out and this statement also and now here I will write one more comment uh medium question two and for this I will create I will create one in method by the name of find index because we have to find the index of the element that that is present inside the diary and I will write public static the return type should be in because we are retaining the index that is the integer value okay those are the method name is find index and this method is uh receiving one array as an input array as an input and integer uh t let me give a SD okay okay so what we are going to do inside this we will check one base condition if my if the array is equals to equals to null then return minus one this is the this is called as base condition in programming uh you have to check the corner cases whether these are the cases uh that you need you need to handle or this will improve your space and time complexity of the your algorithm because if the array is horizontal means array is empty there is no point checking doing all this uh running those Loops doing all those processing tasks then it it you can simply return 1 because if the array is null you are not getting going to get that element inside that array okay so this is the base condition that we have to check and now here I will write integer length equals to array Dot oops sorry error.length and I will require one more variable I is equals to 0 and I will declare one while loop and set this I will write I is less than my length okay uh I'm doing this task I'm running this while loop whenever my I is less than left so initially my value is 0 and length value is uh is the number of elements which are better inside that array okay it can be anything 5 10 whatever the number of number of elements you pass inside the array and inside this for loop I will check one if condition if my array at ith index is equals to equals to p okay T is nothing but the value either item that we want to find inside that array in that case we will simply return the value of the I uh return the i i wins the well in this highest value I represents the current index at which the loop is running so if that elements matches the elements that we want to pass that we have passed to the method then in that case return the value of the I that means return the value of the index at which the element is present inside the diary and if it is not present inside the diary if it not matches with the elements inside that array simply do I plus plus means increment the value of the I and again go further checking whether the I is less than equals to length and whenever my while loop is executed successfully and I till not found the element which is which I want to find inside that array in that case that means that that element is not present inside that array in that case we will simply return 1 okay and now uh I hope this is the thing that we have to do inside this method and now if I go inside my main method I have I will be using the same array and here I will give 23 as an input the item which we have we are searching for in inside this array and add indexing start from 0 so 0 1 2 the expected output should be 2 okay and I will simply print I will call the method find index and I will pass array and the item to this method okay now if I run this I should get 0 1 2 yeah we are getting 2 on the console because 0 1 2 the element is found at the index 23 and let me give the items value as 2 which is not there inside that array in that case I should get the output as 1 yeah we are receiving it as minus one and if I give the array as an empty array base condition we also check in that case also we will receive minus one yeah we are receiving the minus one uh now it's okay now the one more question was there uh write a Java program to copy an array by iterating the array now uh we in this questions uh in this question we have given one array we just have to copy the elements which are present inside one array and take those elements and copy those all elements inside the new array okay so there are several ways by which we can write this code in optimized manner uh okay so for now till now I'm assuming that you know have you don't have any advanced knowledge about the arrays and problem solving so we'll go the basic approach of itself okay uh so now I will comment it out and I will write one more comment over here taking medium question three and now I will comment this also okay so I will write one more method over here okay so what we'll be doing we just we just have to copy the elements okay so in that case uh the method should not return anything okay so the written type should be wired okay so I will public static void um late wait wait wait wait wait do I need to create one separate method first I think no need is there to create one separate method where we can do this kind of shop inside the main method itself okay so one array was declared already over here I will use the same array uh these items value was not required for me to in this question and I will declare one more here array I will call this as new array new integer of and I will give the same one two three four five capacity of five elements inside this area okay and now um to do this I one inbuilt method was there I will use it as uh okay I will write original array and to pin this array inside one go we have one method arrays Dot to string and we have to pass the array name to it okay now it's so address.2 string arrays is the class which is uh provided by the Java uh in the util package here you can see if I hover over here you can see Java dot util dot arrays and I guess yeah IntelliJ IDEA has also imported the following package okay what it will do it will get array as an input and it will convert that array in into the string okay so it will here you can see it it is accepting the errorism parameter and it will convert those array elements into the string and it will print all those in a sequence of that we have stored over here okay now I just have to copy all those elements so for the copying purpose I required one for Loop which will start from I is equals to 0 and which will go till whether till my array dot length and each time I will be doing I plus plus and inside this array I will simply write new array wait wait wait wait a new array at it index means the first India that is zeroth index I will copy the element which are which is present at the head right index means we are just simply taking the first element of the original array and we are assigning it to the value of the value add the zeroth index at the new array similarly when we go for the again checking for the for loop at that time is value is 1 we will simply get the first element of the original array and copy it with this first position of the new array okay and after that once the for Loop is ended uh the same thing we are going to do we are going to print the copied array copied array and will pass new array as an input to this okay now if I run this same array should get printed okay original array is uh 10 20 23 30 45 and copied array is 10 20 30 to 23 30 and 45. so this is the solution to the question number sixth so I hope you got some idea how these searching and sorting techniques are done in Java there are some algorithms uh like I said a linear search binary search and for the Sorting uh bubble sort heaps or Radix or merge merge sort is there there are so many uh sorting techniques we will also cover that all these algorithms in our upcoming video but before that you should go to gigs for gigs or hacker rank to try solving some questions so that your logic building will get improved uh in the programming okay strength thank you guys for watching this video and I will see you in the next one hello and welcome back to the new video of the Java tutorial Series so till now we have covered arrays data structure uh so what I'll be doing is uh we'll be covering some hot hot topics hot interview questions which are covered or frequently asked during the interview processes of the many companies okay uh so these are the basic one uh that that the interviewer may ask you to test your problem solving skills okay so if today in this video uh let me just open uh create one Java class and I will rename it as net supports remove elements okay so let me what I'll be doing is let me just increase the font size okay wait I will increase the phone sites okay now it's okay okay so I'll just comment out the question so what we have to do is we have to remove the Indian numbers from an array so what we have to do is we have to write one function where we have to pass one array to that function and that function will return you the new array where all the elements are odd ones okay so what it does it will remove the all the even numbers from the array that you have you have passing to that function okay so enough talking so you know I will give you an example let's suppose okay wait let me just comment it out and this is an example array we have this array let's suppose we have elements random elements three comma 2 comma four comma seven comma eight okay so uh this is uh the array that you have passed to the function and now uh the array which will be returned by our function is 3 2 is removed because that is your even number four is also got removed because that is also even number seven and eight is also removed so this is the expected output from your function function okay uh so first of all let's break down our question so we have to remove the even numbers from an array right so first of all we have we need one uh way where we can count the total number of uh even integers that are present inside that array right so we need uh one way to count uh step let me just call it as steps steps that we need to solve count the number of uh not even that that let us count odd numbers so that okay after Counting step number two is we have to create one new array of that size of the size equals to the odd numbers present inside that array right so create a new array of sides equals number of odd numbers right now after creating the array we just need to iterate through this through the array and check whether that number is or if that number is odd we just simply take that number and put it inside the new array okay so I will write if number is odd take it and put it inside new cell okay so these are the steps that we have to follow okay so let's go and create our main function first I will like my main function and inside this main function I'll create one array I'll be taking the hard code hardcoded values you can also take the use input from the user by taking the creating this object of the scanner class as you know till now I hope array of size let's suppose five and wait and I will pass the values uh let's let let me let me give the above values itself three two four seven eight okay now I'm getting the error put it now it's okay okay uh now we have created one array and now I will write and one function function call before that I have to create our function over here I will create one function okay so my function uh doesn't return anything it just creates a or else I can return I can return one array um okay for now I have not written anything I will just simply write void my function name or else I will write I will return that new array itself okay you can also write while but one extra thing that you have to do is you have to print that a new array inside that uh that function okay that's what we have to do extra over here I'm not doing that thing I will write remove even and I will just pass the array to it okay now inside this function first thing we have to do we have to count the odd number okay so for counting part I need one uh counter variable uh let me just call call it as our count is equals to zero initiative zero and we need one for Loop and so this for Loop related from I is equal to 0 to I till less I less than array Dot length and each time we'll do I plus plus and inside this array now we'll check for if condition if current I index is more to is not equals to zero okay so what this line will do is it will check that number and it will check if it is divisible by 2 mod 2 means if it will be divisible by 2. if it is divisible by 2 that means that number is even number and we will not count that number as a odd odd number and we will not increment the value of the order count okay and inside this we will simply increment the uh or count by one or count plus plus okay so first step is done now we have to create a news array of size the number of the odd numbers basically excited array okay so I will write int array this is the result array so I will name it is result of size or count okay okay now inside this I will again need one variable to get to take the track of the indexes of the new uh what we can say new array now inside our for Loop I will just write my inti is equals to 0 and this for Loop will again run from int I plus then Mary Dot and this time we'll do I plus plus and here we are checking one condition if array at height index mod 2. 0 okay if that number is not equal to 0 what that means that number is an odd number and we have to push that number inside our new result array and I will pass as index because indexing of this resultant error will be different uh as that of the our array that we have passed to the function okay and we'll write array add I okay after passing that we have to increment the index index variable also so that next time the I index will be switched to the next uh part okay or suppose uh for the first Value First Time index value is idx value is 0 so it will push that variable and sorry number to the zeroth index and next time uh idx plus plus we will do the 0 to 1 and next time when we are pushing that number to then array it will become one okay now at last I will just simply return our result.array okay and over here I will call that so remove I will call that function over here it means just call it wait wait laughs why am I not able to call this wait a minute guys int remove even more and I will pass Direct I'll do it okay what I am getting here nonsticking method oh wait now I will have to switch it as static because as we know uh nonstatic methods cannot be called inside the static method so our main method is static one that that's why we have to create our new method as a static on it also okay and now this whole thing I have I write inside a print statement print remove even and I will pass our ad to it okay so that is pretty much I think we have to do let's hope okay so this is getting then the build is going on we'll just complete okay this is returning I guess object wait wait wait effect this thing we have to do I think wait let me just commit it out and I will just simply what we can do is create one array every two and you will assign it as foreign all right we need to iterate over that array okay so we have to run run for Loop over here I is equal to zero I is less than ARR 2 dot length and each time you'll be doing I have 5 plus plus okay and inside this uh we'll just simply write not print element only print because it will print all the diary inside the vertical manner okay now I have to just print area of to a guide index yes okay so now it will print the new array which way which is returned by our function so expected output should be 3 and 7 inside the new array let's see yeah three and seven is getting printed only thing is that I just have to print one extra line over here I will just simply write over here itself okay now it's okay fire and again three one space and seven should be printed on the console yeah it will be printed on the console so quick summarize uh what we have done in in this question uh we have removed the even numbers from an array uh so let's suppose this is an array it will remove the even numbers from an array so one thing uh let me clear the way I do in is not the only way you can do it you can also try in the new ways right right now here we have created one new array and we are storing that number inside this array uh we can solve this here by using one one array itself but only thing is optimization should be there okay so that part comes under the time and space complexity uh so we will also cover those lectures in our upcoming videos how to reduce your space and time complexity of your code which will improve The Code by a much way okay so here that's all for this question I will see in the next one hello and welcome back to the news new video of the driver tutorial Series so today in this video we will be covering another question uh which is frequently asked in our interview for interview process of any companies so the question is how to reverse an array in Java okay so let me just create a Java class and name it as first array okay so let me just increase the font size yeah now it's okay I guess okay so let me just give my one comment which is question reverse and edit uh for example uh the original array that we have given is let me just write original array origin arrays so let's suppose one comma two comma 3 comma four comma five all right and the array one that we have to return is the output at mesh weight five comma four comma 3 comma two comma 1. okay so this is the area that we have to return okay so let's go and write this math function okay so we have to write this function so we just have to reverse an error so I don't think we have to return anything so let me just write as method name as public static void as written time because we we do not return anything to after this function and I have to pass the array okay so adding let me call it as numbers because it's integer array and we have to pass start index and we have to pass the end index of the diary okay so this is a question this is the method declaration why we have written static because we are calling this method inside a main method and this method is a static one that's we have written static as the method type okay and we need one while loop okay so inside this file Loop one thing we can do is uh we can achieve this using single array itself means what what is the meaning we just modify the array which will be passed to this function or the method this method is accepting one array right so we will do such things that we will modify this array and reverse the elements and store those elements inside this array itself okay and another way in doing is doing this is you can create a new array and you can create a new array and you can Traverse this original array but in the backward Manner and you can just take go on taking those elements and adding those elements inside the new array what uh but one thing is the drawback of this approach is you have to create one new array right it will increase the space and time complexity of your code itself right there so what we'll be doing is we will modify things in such a manner that we will be requiring one array and we will do all those modification inside this array itself okay so why I will write one while loop while our start is less than 8. okay so this Loop will run until our start in start integer value is less than end integer value okay so what we will be doing is we will write 1 10 variable and I will assign the value to it as integer of start integer of start okay and over here numbers start is equals to numbers sorry number set okay and over here I will write numbers of end is equals to temp and after that start plus plus n minus minus okay so let me explain what we have done here we are just swapping those numbers okay so what swapping means we are taking one element from that array itself and we are swapping that element with the element other element inside that array okay so uh initially module starts well it initially the start value is 0 because the error indexing start from 0 okay and what is the end value end value is the length of that array minus 1 because since the array is indexing start from 0 that's why we have to minus one number from the address length okay and it over here we have assigned the numbers of start means numbers of zeroth element that is 1 to the 10. so initially 10th value is 1 and numbers of start we have assigned to the numbers of n numbers of strategies this this position first position of the array and we are assigning or changing the value of this position as numbers of n numbers of n is 5 so after the first uh after running the nine number the number which is stored at the first index of the array is file and numbers of n is equal to 10 numbers and numbers of temperance and Position will be stored the tenth value to what is the tenth value time value is the first element of the array okay so after this after line number 10 the first and last number got successfully strapped okay and I will just simply increment the value of start now the for the next iteration the start value will be at over here and the end value will be will be at over here so the these numbers will also get slapped and will be at 4 comma 2 okay and when we are at three the start value is also three and ends and the pointer is also pointing at three okay so at that time uh this three will not get swapped since this is the middle point of the diary and after this iteration uh we'll we'll break this condition because start value will be uh over here and and we will go well the end value will be over here and this start value is no more less than the end value which is exceeds and this while loop will break and after that our whole array will get reversed at this point okay so I will write main main function and I'll create one array now which is equals to the let me give that example array itself over here one comma two comma three comma four comma five and I will just call that method okay reverse and I will pass our array comma start index should be zero As We Know and end index is the length of the array that means here uh dot length and since the array indexing starts from the zero we have to minus one because added out length this will return the arrays in length as 0 1 2 3 4 5 but the indexing should uh there for the till four number and now after this okay so we have to paint that array again for that we will do iterate through and for Loop I will write I is less than here Dot length I plus plus and inside this for Loop we will just simply print array add index plus okay so this this is the thing that we have to do insert this question I guess so so let me just run this okay so you can you can see five four three two one is getting printed which is exactly the reverse manner of this one two three four five okay so you can uh you can give as much value you want over here with an array and you rerun this code you will get the exactly the opposite in the reverse way of the diary and you can also take the input from the user from here you can you just simply need to create this object of the scanner class and take the input from the user and pass that array to this function of over here okay so try doing some giving some more important to this function and I hope you got this question thank you for watching this video hello and welcome back to the new version of the travel tutorial Series so so till now we have covered two questions which are frequently Asked in the interview processes and now today we will be covering another question which is to find the minimum or the maximum value inside an array so what they have done over here is you will be giving giving and array and you just find you just have to find minimum or the maximum value from the array array will consist of the integer numbers and you have to find the minimum number from the tab okay so let me just write question over here find maximum for all man Eddie and let me give you an example 5 comma 6 comma 9 comma 10 comma 25 so let's suppose this is an uh example so after giving this array to our function that we have we are going to write the expected answer should be 5 because among those five integers five is the minimum number or else if you finding the maximum numbers the result should be 25. who can do anything so you can find minimum as well as the banks okay so in this question we will be finding the minimum you can try for the maximum one if you get some error you can do comment out I will be giving you the reply okay so I guess we have to find the minimum value for that we have to return that minimum value inside in the integer format okay so the return value of the written type of the our method should be integer okay and our method should be static because we are calling it from the main method of type in I will name it name this method as find mini mode okay so to this we will be writing array because we need to pass that array to that function okay so inside here I will be uh need one Min integer variable which will store the value of the minimum welfare minimum number from that array so initially I will be doing initially I just assigning the zeroth index integer value to the minimum variable over here okay and now we need one for Loop which will iterate through the entire array that we have passed I with less than error dot length and each time we'll be doing I plus plus okay so we need one if condition over here array at I is less than min okay so if if that's the case we just need to update the value of the I mean mini variable okay so what we are doing uh doing over is array at I so let me give an example if if it is the case that uh array is a trading for the first time so let's suppose this is the it's array and added index that is zeroth index is 5 so this is the element we are assigned it to the means value yes so let's suppose means the mean value is 5. and if condition we are checking added I that is 5 is less than 5 so this will be evaluated as false so Loop breaks and will come out of the loop and uh for the second time I will do is 1 so array at I means array at one edit one is six is six less than five no this is not this is not the case we will again if condition is evaluated as false again we increment the value of I and again we will check uh whether array at 2 error to smile nine is less than min mean is value is 5. again it will evaluated as false so in in our case it it will never evaluate it as two and in an unless there is no number inside an array Which is less than five if that number is less than five it will just simply update the value of the mean to the minimum value that means that that iteration value okay uh and after this successful running of the for Loop we will just simply return the mean value you can also find the maximum value in this same manner you just try once finding I will just write in Array and again you can provide your own input also nope no issues five comma 6 comma 9 comma 10 comma 25 comma 4. okay and I will just call find minimum I will write now we're ready and I will just do this entire thing inside this print statement so that the value that the function is returning that is the minimum number should get printed on the console over itself okay so if I run this uh 4 should get printed yeah four is getting printed on the console let me just uh modify one condition now 5 should get printed yeah so let me just try with the negative number oh let's suppose negative nine so what do you think what will be related yeah you guys right now minus 9 is getting printed on the console so this is pretty much about finding the minimum number inside an array you can do this some modification inside this code to get the maximum number try building your logic because by watching these kind of videos uh just watching the problem solving videos will not help you improving your problem solving skills you have to practice a lot uh transform the the focus portals uh problems or hacker and hacker Earth there are so many portals are there try solving those questions and so that you can build build a solving logic okay so thank you for watching this video and I'll see you in the next one hello and welcome back to the new video of the Java tutorial Series so today in this video we'll be showing another problem of array so that it that is the finding the second maximum value inside an array so in our last video we have covered uh finding the minimum or maximum value inside an array so in this video we'll be covering another question which is asked many times uh during the interview possible that is finding the second maximum value inside array array okay so let me just create one call a class called second X and I will let the question so what we have to do is find second Max value in Array okay so I will give you one example let's suppose one comma 2 comma 5 comma 9 comma seven this is very so what is the expected output should be so the highest value is 9 and after 9 highest value is seven so the output of this uh array should be 7 so this is the thing that we have to do so for this we will write one function and that function will be returning the second maximum number inside an array so the return type should be of type int so let me just create one public static method of type return type int and I will name it as find second Max you can also try finding the second minimum number of from this array so try solving it you just have to say simply change some conditions so that you can get the minimum number which is second minimum number from the array okay so here I need one variable to take the track of the largest element inside that Arrow okay so integer Dot mean value okay so don't worry uh you will be asking what is that this mean when you represent okay so here you can see if you hover over here uh Java has some predefined values inside the language and these are these are nothing with the constant okay so which are defined by the Java itself if you write integer document value some value is assigned to it that is minus two one four seven four eight three six four four eight so this is the values assigned by the Java you can use it inside your code uh you can also write max value as other constraints are also defined inside the Java so uh if you want some overview of this you can just go over here and write so Java for instance and if you go over here you can find the this article which gives you pretty much idea about the Java constants okay and now moving to our question uh I need again one add one more counter variable which takes not the counter variable a variable which carrier tracks the value of the second largest element s inside the array so integer Dot mean value and now one I will require one for Loop which really trade through entire array again the Lynch a ARR dot net and each time we'll be doing I plus plus inside this I will write one if condition uh that is array of I if it has Max then I will just simply write second Max assign the second max value as Max value okay and I will just simply update the max value as air out of I I don't worry we'll do don't dry and taste to check what is going on inside this code Okay so don't worry be with me uh RFI is less than second Max and will require one more and so I hope you remember this for this ad and what is all and means both the condition should be evaluated as true until an endless both conditions are evaluated as true Loop uh the equivalent controls will not enter inside this LC flow one once when all these both the conditions are evaluated as to the then and then only the program control the execution flow of that code should enter the inside this LC flow okay so edit hi is not equals to the Max so what if that's the case inside this we will be doing second Max is equals to ARR off okay so this is the thing that we have to do inside this for Loop and after after execution of the for Loop we will just click it on the variable second Max okay and now inside uh our main main method we will just create one new array and we will pass those values as we have taken inside the example like comma 9 comma seven okay and now I will call that method uh that is fine second left and pass our array Okay so so first let me run this and check whether we are getting the correct our yeah seven is getting minted on the console which is the second maximum number inside the direct and let me once check by changing some values as eight now this time it should be print on console yeah it is getting better on the console so wait let me just put one debug pointer over here and try to debug this code so that you guys can understand this easily okay oh okay so let's now when the program with Exhibition at line number 23 uh this array here you can see one two five nine seven eight it's passed to this fine method okay the exam of the program execution flow comes to this method call okay and now uh so here you can see uh Max has the value assigned as this value we have seen the predefined value which is assigned by the Java to this mean value constant okay so second mind second Max is also assigned that value so for the first iteration is value is 0 here you can see and if when that if condition is checked the max value is this and is value is uh zero here you can see and let's go ahead okay so f for the first time so array of I is all obviously greater than Max because this is the value that we have assigned minimum value okay so next a second Max has assigned the value this okay now again we'll check where I is equals to 1 here you can see I becomes 1. and now this time uh we'll check error at 1 errat 1 is 2 whether 2 is greater than a Max uh value that is one yeah obviously we will get inside this Loop we'll update the second max value as 1 which is the previous version we'll update the max values as 2. here you can see Max value is updated as to and segments will be updated as one okay come here we will check this uh and again we will check we will come here we will assign the second Max folder S2 and I'm gonna update the second uh max value as 5 because till now the maximum value is 5 inside the error here you can see we have updated the max value S5 and second Max will do H2 and again we will run this Loop for I is equal to 3 so what is the element as I is equal to 3 0 1 2 3 0 1 2 3 9 whether the nine is and greater than 5 because it is will come inside this Loop we will assign the value of second Max as 5 and we'll update the max value as 9 so after it's successful completion of the I value is three uh our max value is 9 and second max value is five okay so for now I is equal to 4 I is equal to 4 is 0 1 2 3 4 7 7 is uh greater than nine no we'll break that if condition will come inside the elsif condition and now inside this relative condition uh once we check this Airship condition will be evaluated as true and next value is 9 and now we'll update the second max value as seven okay seven itself okay now again we will run this Loop we will do these steps and and at last we will get 8 as the second largest number inside that array which is true here you can see one two five nine seven eight eight is the second largest element inside the diary uh okay so which is returned to this a return statement over here and after that return statement we will come here at line number 23 where we have left to that program is called and here we can print that number on the console and exam exams process successfully and it is completed on the console okay so this is how a this program works I hope you got this question try solving and finding the second minimum number inside that array okay so for this for this video this is pretty much thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so today again we will be solving uh one another question uh which is frequently Asked instead of Internet processes and uh the question is how to move zeros to the end of the array okay so let me just create one new Java class with Java class and I will call it as move zeros okay so let me just commented out our question move zeros today and of the array so this is our question so it suppose uh we are given arrays six comma 5 comma 0 comma eight so I think the result should result and add it should look like it's six comma 5 comma 8. comma zero so this is the resultant error we have shifted all the zeros which are there inside this uh array version array to the end of the array okay so this is pretty much we have to do and so since we are doing on this operation inside that array itself so I don't think so we have to return anything uh after that function call so I will for timing I will call it as static wired but sorry void I will name this method as move zeros and I will pass array and when integer okay so inside this I will assign it as indj is equal to 0 and I will go call it a forward run run for Loop so our for Loop will run a form I is equal to 0 to I tell n n is uh side of that which is passing from the method coil okay and now inside this I will check for what if condition if my arrayhead I is not equals to zero and and condition should be there which states that both the condition should be evaluated as two and then then and then only we will inside uh get inside this if condition okay and errat J equal to equal zero and inside this if condition we will simply uh write one temp variable which has value as and there are five and what we are doing here is just swapping those two numbers okay if we found 0 at that in particular index we will swap that value with the value which is at the end of that array okay so we'll assign area of is value to area of change value that's the last value and after that we will just simply assign error J is going to the test value okay so here we are doing swapping and again we will check on if condition if array at J it's not equal to 0. if that is the case we'll just simply increment the value of J over here okay so I think this is a pretty much true that we have to insert this method uh let me just call my main method and I will write in array and we'll pass this same array that we have taken example six comma five comma zero comma eight okay and now from here we will write the note since our method is returning nothing what we can do is we can call that method and after calling that method we will just simply print that array okay because we are doing modification inside the same array that's why we can print the direct after the method call okay okay well we're getting the error oh okay so I have to write the N value also n value is 4. okay and now if I just wait wait not like this I have to write down for Loop to it right over that array why because I is less than error.length and each time we'll be doing I plus plus okay and inside this for Loop you just simply paint area by one extra space and not Ln because we want the array should be printed in the one line itself okay and now if I run this code the expected output should be six five eight zero yeah six five eight zero is getting minted on the console uh let me just modify and trying to give some more zeros inside this code okay uh zero six comma 0 comma five okay so let me run this so all those three zero should print uh shifted on the on the right hand side of this okay now again let me try to give some more input to this code okay and now if I run this though zero should be shifted okay so we guys we have one issue our zeros are not getting shifted okay so let me just try to figure out what I have done mistake over here and just develop this code and try to solve that error let's find that error okay wait wait wait wait let me just check head check for this of course okay so I think this might be the error instead of hard code values I will just write array dot length I don't think so that is the error but let me check if it is yeah that's the error inside our code uh error.net that we have to pass now you can see all the zeros are shifted at the end of the array and all the integer are first first comes integer and all those zeros integers have come after that okay so this is the pretty much about this question you can try buy your own try solving it and this will improve your logic building skills also okay so I will see you in the next one thank you together hello and welcome back to the new video of the Java tutorial Series so till now we have covered a lot of questions using uh arrays okay and now is this is the last question that we are doing uh on array so after this we will be starting our New Concept that is strings in Java uh so string is has some watched Concept in Java we'll see that in our next videos or for this video uh we are covering one question which is frequently Asked in Java how to resize an array okay so we want to resize an array for this I will just create a new Java class resize array and inside this Java class uh first of all write a question that we want to go home that is how to inside the heavy now let's suppose we have added one to three four five and we want to and now till now the RSI is of one two three five contain five elements elements and now we want to resize this array as in uh array array which is holding uh 10 elements okay so we want to decide the array size as 10 elements okay wait okay nice so this is our goal uh that we have to achieve elements yeah so uh first of all I will write one function so achieve this thing okay and I guess we have to just resize the array so we are not returning anything so for time being I will just write public static because function doesn't return anything I guess for now and resize is the function name and it will accept one uh two parameters that is one array that we want to resize and the new capacity of that array capacity of the direct okay so okay and now uh what I will do is I'll create one new uh where array name them new int of capacity so what is capacity capacity is the uh capacity of the new array that we want to create okay and now I will create one oh wait wait and now I'll create one for Loop and in this for Loop we will run till I is equals to 0 and I is less than our area Dot length and each time we will increment the value of I by 1 I plus plus all right and inside this I will just simply assign uh 10 pad height index value to array at index right so we are just assigning the values of uh let's suppose for the first time where the is value is 0 we are simply assigning the array at zeros position value to the 10.0 position all right right so this fall group will run until the size home at ARR array and after that it will break the for Loop and after that we just simply assign the value of ARR to 10. yeah now instead of pointing that original array ARR now it is pointing to the new array temp all right and now if we write the main function and here I will just simply create one new array named ARR and I will assign those values uh let me give the values or upper itself one comma two command all three comma 4 comma five and after that uh we'll just simply call that function see size and I will pass our array and I will pass the new capacity as added Outlander into two because error.length is gives 5 and into 2 is 10 so that's the thing that you want to achieve all right and after that I will just simply print my entire array my is equal to 0 minus 10 here are DOT length each time I'll be doing I plus plus I will simply print array at I plus one space all right so what we have done quick recap where you have created one function name as resize and which is accepting two parameters one is array and one is capacity uh which is a new capacity of the new array that we are going to make okay and so here we are making a new array of capacity that is given by the user as the function and after that we have created one for Loop where we are simply assigning the values of or original added to the new array and after that we will just simply assigning the value of the value of the array to the depth that is the new newly created array okay and here we have just calling that function and after that using this for Loop we are just printing the entire new array okay so let me run this okay it means yeah so here you can see uh one two three four five is also printing over here and one thing we can do is we're just simply uh print the ARR dot net this will also give us one idea what inside living happen whether the array science is increased or not okay each all right here you can see the other side with the five you can see over here all right this is how uh you can resize the array in Java so thank you guys for watching this video and I'll see you in the next one hello and welcome back to the new video of the Java tutorial Series so till now we have covered arrays we have done a lot of questions on arrays we have practice some of the questions which are frequently asked during the interview process and I guess this is pretty much uh idea or the foundation you have you want to learn arrays and what you can do is uh just pause at this moment uh just pause this series uh for some one to two days and go and practice on a practice or more and more questions on hacker rank or Geeks for gigs or whatever code platform you prefer lead code is also there and try solving those uh questions using the array tag and you can also set the difficulties as easy medium high or difficult whatever you want but at least try this will improve your logic building skills okay so if you have done that part so you can continue this way and in this video we will be covering uh strings in Java okay so let me just create one new Java class image string string we just call it as string Java string so okay and uh we'll just simply like the main method okay now it's okay so what is string in Java in Java string is basically an object that represents a sequence of character values an array of characters Works same as its JavaScript what I what I tell you here is you just keep attention over here let me just give you an example if I create one uh array of type characters and let me name it as a CH and I will just write over here and I will assign the values to that array as random a comma B comma C comma D wait mistake C comma D now it's okay so if I create this array and instead of this I will just say it's string s is equals to new string and I will pass it as ch uh so here what I have done is I have created an array of type characters and uh and I've stored those characters a b c d inside that array and I have passed this array to the string s okay so at line number four what it that what it does as it will get that ABCD character as a one single string and it will treat it as a b c d now this is get stored inside the memory okay so it is it is same as uh this is another approach I am telling you simply go and write string s is equal to and simply assign a string a b c d so instead of writing these two lines you can you can still achieve the same output ABCD as here so I'm getting error I have got to written as well yeah you can achieve this is also okay and now a Java string class so string one thing you remember for other programming languages like C plus plus we write string as a s uh as small or in Java you write the string with starting s with capitalize and you as as of now you should know that everything in Java you write with capital letter starts with capital letter is a class in Java so Java provides so string is a class in Java here you can see the implementation path if you hover over this icon and public final clustering which is implementing this this many classes now okay so you can go through this official documentation of java to see how the strings Works in Java so Java stream class provides also a lot of methods to perform operation on the string such as compare concat equals plate length replace compared to in in turn substring we will be covering some of the frequently used functions in string you know upcoming videos so for still till now you just remember string is a class in Java which is which has some different methods which has different methods to implement it okay and now we just go through this concept of string okay now here what is how to create a string object so so now you have understood what is string so how to create a string object let's see so there are two ways uh first one way is by string literal literal and one more ways by using bye new keyword okay so we'll discuss now this this these two points okay how to create object of the string okay so by string literally is created by using double quotes for example for example let me just write string S2 S2 is equals to anything string welcome foreign so this is the one way by which you can create a string which this is the way of buying string literal okay and now by using the new keyword you can also create this string so how you can create let me just click Give an example string this time SC is equals to Visa you just have to write new string and you just pass the same string here that you have written or anything that you want to assign value to that string variable over there okay so this is this is the way two way by which you can create the strings in Java okay so one more constitute there now one thing one thing you tell me what you can interpret just pause the video and think about it string S4 and I will write it as welcome okay and I will create one more stream by the name of S5 and available right the same string exactly the stream string to where the W is capitalized and all all the letters are small small case okay so what do you think here the Java memory memory lock memory allocation will allocate the S4 and S5 the Sim different memory instances or not so in this case in Java whenever we create S4 and S5 which has the same exactly value of strings it doesn't create a new instance what in what exactly the Java do is you can understand by this example okay so here you can see S1 and S2 has the same value of welcome so Java has a string constant pull where inside the heat memory uh this pull is there where Java stores all these values of the strings and whenever you create a new string it it will check through entire string constant pool if there is a string present which has the same value that you have assigned previously it will just point to that variable to this string in the string pull which is inside the hip memory okay so this is one thing that I want to tell you and there are several methods are also there which is there inside the string class let me just give you one example okay let me just give you an example what I can do is okay so look at it I will just come here and I will create I will just use this S4 and S5 itself okay let me just write one more thing here then add B you can add B okay and now uh if I simply system dot outdoor println and I will write string S4 length is and I will concat this string with the method as 4 dot length so this will return the number of characters inside this string that means the string length how many characters are present inside that string okay and now if I run this you can see the string F4 length is seven y seven You Can Count Your count here okay one two three four five six and seven okay seven characters are there that's why 7 is a string so similarly you can perform this same method or calculation on this S5 also uh you just have to write S5 dot length oh wait one mistake you just sanctify over here S5 it should be there because we are printing the length of the S5 okay and now if you come here string S5 is 14 why so because you can count one two three four five six seven eight nine ten eleven twelve thirteen fourteen this method will also come the blank spaces which are given over here after welcome and after at this was also treated as a character in Java okay once I quoting the link so these are some methods and one more method is there which is wait let me just put it over here and yes one more method is there two lowercase so this is the method and similarly there is one more method is there to uppercase which also converts all those letters inside the string to the lower case and if you use the two upper case it will also convert that all the characters of that string to the upper case okay so to achieve this you just simply write S4 dot to lower case and now if I run this let me just commit it out so that you can see only one output on the console yeah you can see welcome is printed but additionally we have given W as a capital and whenever we apply that two lowercase method on the S4 string if it was it was giving the output as W small because two lower case will convert all those character inside that string to the lower case and similarly you can achieve one more uh to uppercase you can see two uppercase now put it in thing yeah all the characters inside that string are converted to the upper case format okay so these are some uh methods which are there inside the string uh what you can do is you can simply come here and come here and write string in Java and one first page Java stream uh which is of java T Point website you just come here we go through it whatever I told you is there itself you can come here and read it and here you can see there are string class methods you got these uh huge list of 28 methods which is implemented inside the string class you can come here you can also check the official documentation of the JavaScript this Java string intern method so you can come here and also see some example of this try those examples look at those methods and that's all for this Java string and in our upcoming videos we'll be covering some again after again what we do after creating this safe Theory creating this theory part we will move on to the coding questions we'll try solving some coding question inside using the JavaScript okay so thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so till now we have covered uh add a sense string in Java so from this video onwards we are starting a link list in Java okay so linked list is a easy and more uh my my favorite data structures uh okay and I also love you implementing any links in Java and you can you also love it hash I am sure and so let's go uh so single in English either data structure used for storing the collection of nodes which have the following properties okay so till now we have we have seen arrays okay so let me show you one thing uh here you can see uh so this is this is one I hope you guys can understand by this so till now uh you have seen one array like this okay array so this is the array uh which has a elements one one two three four three in three six six elements which it is storing and now what linked list does is linked list does exactly the same way it stores the data but in the format of node nodes okay so these nodes have some properties okay so let me just uh give you an example of the node itself over here okay so here you can see so in Java linked list this is the No One node okay so let me just write one note over here this is one okay so this is one node which has uh two parts one is data part and one is next part so these this is simply represents one node in Java okay and which is pointing okay so this is n and which is pointing to none okay so this this entire thing in its one node in Java it has some character six okay one properties it contains sequence of the nodes okay in the single linked list uh you can see these main these multiple nodes are connected in an in a chain okay and these are connected with one one on one another okay another node has data and a reference to the next node in a list okay so it has two or two section one is there a section and the next section data section will hold the actual data or the value with that node going to hold and next in the next part it it contains the address of the next node that is it is pointing okay so let's suppose uh like this we have multiple nodes okay let me just give you an example uh let me just get it over here and for example uh these are the two things okay it's derive the two nodes in a two chain two nodes okay one node and here in the next part it is has the address of these nodes these node okay so this node and this node is connected using the next part here the address which is stored here okay now the first node is the head node uh always remember the first node of the linked list is called as head let me just write it all head and the last node it's of the of the link list it's always pointing to the null so if if you consider these type of nodes let's suppose they are uh five and the elements in the five nodes in the link list and after the fifth node fifth nodes next should point to the null which represents that this wrinklage ends here and in some of the reference books you will also find as the last element the last element or the last node of the linked list is called as tail okay so the first node is called as head last node is called as state link list okay so in Java or in general there are three types of Link list okay one is simply linked list second one is W linked list and third one is circular linked list all right so we are going to cover all these needs list in detail so starting with the single link list in this video in this video I will just give you one overview of the single in English what exactly it is so so you understand the in linked list the data is stored in the format of node and node contains the two part that is data and next part data Parts holds the actual value and next box next part holds the address of the next node to which it is pointing so that it just goes in in the chain format and always remember first node of the link list called as head and the last node of the link is called as tail and the last nodes next should point to the null which is represent representing that this necklace ends there okay so this is the idea of the syncline link list uh I hope you got some overview of the link list how English Works in Java and from next video onwards we'll be starting all those operation like insert insert operation or how to print the linked list uh how to delete the element and how to uh get the element of fetch the element how to check the whether the element is present inside the links all these queries so we will solve uh using the linked list in our upcoming videos so stay tuned and thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so in our previous video we have seen the theoretical concept of the sync readings list okay so now from this video onwards we have started starting implementing all those uh functionalities of the single in English that that we want to know in order to understand the single link list so first of all in this video we'll be covering how to make the list in this using a singly linked list okay so let me just uh come here and create a new Java class and I will just name it as simply link list yes now uh you know it's okay so before that uh I hope you have watched our previous video where we have discussed the theoretical parts of the single in English and in that video I was told you that if we need one node uh to make a single linkage okay and that node contains the two parts one is a data part and one is next which representing which repair holding the address of the next node in the list okay so for that uh let me just come here come here and I will create one another plus uh which is our node of the linked list I will name it as node s which is node of sync singly range list okay notice and here we will create that structure I hope you guys remember that structure let me just recall if you don't know what I'm telling so these uh this this uh this structure I am talking about the structure this structure we are trying to create inside this class Okay so this class okay so let me just come here and we know we have we want two parts one is data part I will animate as data and another one is next which is holding the address so since it's it it is holding the address for the next node the so the type of these uh variables should be known as and I will just write this variable name as next okay and now uh one thing whenever these node node is getting created we want these uh that values that the user want user is given should assign to these two variables okay so for that we need one Constructor over here and I will write one Constructor after node s and this Constructor will accept on a parameter that is data which is given as input of either user uh like what what's the data that the node is going to hold okay so and we will assign these Dot data which is equals to data and these represent to the current distance of the variable and then our next should point to the null that is that is the simplest idea of the node we have taken those two variables and we have assigned that value and according to the node this is the idea that is the data part is over here and next part is over and this next is pointing to the null we can change that now uh when the if there are more number of nodes inside the English Okay so for now I guess this is a bit image that we have to do inside the node and now if I go inside my main class which is over here and I will just create one function to make a list okay so to create a single in English Okay and now uh since we are accepting your input from the user we need our scanner class to be imported uh so I will write import Java Dot util Dot scanner so we have imported this kind of class and now since we are going to make multiple functions I guess it is good to declare the scanner object uh globally inside the classroom okay so I will write public static scanner SC is equals to new scanner system.in okay so now we have created this and now I have to do one more thing the first node of the list is called a head and the last mode is called a stay okay so we need those two variables also so we like all right public static so these are no type right so we write public static of type node S one is head and one more is ding all right now I think we are good to go to write the function so I will just comment it out as function to make the singly link the list okay so inside this I will write my function probably static and node s and I will name my engine is make list okay okay so here you can see uh public static uh you know node s is the return type because since this is this this function is making our list we want we have to return the head of the list because uh to access one signal in English or whatever the Ws circular English we need the head head of the list that is the first node of the list without knowing the first node of the list we cannot Traverse the whole list or we just lost here if in case if you if you if you not assigned head uh as the first node of the list and you assign the t uh this second node as ahead of the list then we will never have the track of the first node of the list so that's why it's important to you to assign the head of the list and return the head while you're making the list whatever it is it if it is simply in doubly or circular in English Okay so that's why we have written the return type as known as and we have uh name our function name as make list and we are not passing anything to this function because it's just creating on list okay now uh since okay so assume on conditions we are making one list so initially what do you think a head and tail are null right because list is empty till now okay deal should also point to no so with that part we have done and we will just simply write one print statement that is enter they the data in the list okay so here we are asking the data from the user okay so in data is equal to SC Dot next so we have uh we have no data path which is the entire path is right so it's not the case that this function call will uh just once okay so we are calling that function making the list and we are making uh multiple nodes inside the list okay so for that purpose we will need one Loop which is iterating over each time whenever uh whenever and how much you denotes you want exactly in our in your list all right so for that we will need one while loop and this right Loop will run until and unless the data value is 1 that means whenever you give the data value as minus 1 this root will break which indicates that you are done with inserting the nodes inside the list and you want to close the list and get out of this okay now if and now here after coming inside this Loop for the first time we just have to create the node the actual node of this linkage okay so we'll create the object object of the nodes and I will just name it as new node s which is equals to the new node and according to that Constructor we have to pass one data okay so that data we have taken from the user over here that we can simply pass it over here now at this point line number 14 we are our list is uh our first node is got created now we have to check if one if condition it should be there if our head cos 2 equals to null sorry guys wait a minute yeah so if our head is equal to equal to null that represents that there is nothing inside the list no node is there inside the list and this is the first node that we are trying to insert our list okay head is equals to null so in that case we will just update the head value to the new node new node s and we update our Tails valued also to the new node s okay so this if condition will executed when there is no node inside the linked list that is the first node that we are trying to insert the list okay and now in the else part we will just simply write tail dot next equals to new node s and after that you will write tail is equal to new nodes okay so in this else part so now in this else part uh whenever when this else part get run when if if condition is not executed and if condition is not con executed when there is a no present inside the list and then in that case we just have to update our tail because head is not going to update head is also already assigned as the first node of the list over here you can see head is assigned to the first node we just have to uh point the tail to the next node okay so if so that is achieved in that else block tail dot next is equal to new node dot next that means tail is currently pointing over a over here that is the first node of the list and this next part 10's next part means this pass this part we are trying to assign the next value to this this node value okay so in over here we have simply assigned that value to this and they are simply as uh assigning the Tails value to the new node value okay so our now our tail should point to this new node that is inserted inside the English and how you are connecting to those nodes that is in next part in the next part we are showing the address of this new node over here and we are simply assigning the Tails value to the new node value okay so this is the part that we have to do and after this okay so whenever these are done with the making the list user will enter the minus one in in the console as the data value and loop will be terminated and after that we will simply write return head okay so we'll simply return head of the linked list okay and now uh if I write my main function and call that make list functions and I need to keep the track of the head okay so ahead I will add node s is equal to head is equal to Middle East so it says this uh function is a function is written in the head will store that head inside this local head variable and after this line uh our function called got called and our list is completed and our list is make okay build okay now I hope you guys understand how to make a single English in our upcoming videos we will see some more functionalities of the link list so thank you for watching this video hello and welcome back to the new video of the Java tutorial series uh so till now uh we have covered uh how to make a linked list that recently in English and so for this video we'll be seeing uh how to print a linked list and how to find a length of the link list okay so for the printing purpose let me just go into my page and let me explain you the theoretical part of this link list okay uh how to print the nucleation okay so for the printing purposes uh first of all we need the head of the link list so from here you you will get to know what is the importance of uh getting the head if you get the right head of the linked list you you can find or you can perform all the operation on the English okay so I'm assuming you have watched the previous video where we have make the link list and where we have discussed about the head part and head is basically contains the and which denotes the start of the language okay so for the printing purpose we need that head so that we can start printing the elements from that position itself okay so for the head printing purpose we need head and we are go go on printing the head and head head until we reach at one position where head is head the node the node of the head which is currently there with which next is pointing to them that that means uh here you can see uh assume there are two nodes in this liquid this this one is head and this one is tail and how you can find the end of the link list they have to find the end end of the link list the it is simply nothing but the the net that modes next should point to the null whenever the node is there whose next is pointing to the null that denotes that that is the end of the leakage that means we have traversed all the linked list and right starting from the head to the tail that is the last node of the necklace okay so this so this is the idea behind the printing of the link list and to find the length of the linked list uh let me just first get clear this print list then again we'll come inside the paint and try to discuss the length of the regression so for that purpose we will write one one more function so this is a public static void I will name it as print list and since we to print the linked list we need the head so that's why we will accept one head of the linked list to this function and after that we'll just simply print that elements elements of the list are after that we'll run one while loop and this while loop will get executed until and unless the head is pointing to not okay when the head is pointing to null that means that is the end of the linkage no more nodes are present after that node okay we are prevalencing then till we find null okay so sound head dot data head dot data and we'll just printing space set I will just write only print because we don't want our dish to be printed in the vertical manner okay here if you write head dot data that means head dot data means this is head entirely dot determine this part we are just simply printing the head dot data I mean the data part of that node okay so okay data part of the node and once we print that we will we just reassign the value of the head to the head.next that means we are moving next forward okay that means after after printing this data bar we will just assign the head value to the Head dot ahead dot next to it hold the next next node address okay so we'll reassign this head to this node and now the head is pointing to this one okay now likewise we will go on traversing the whole list and we'll go on printing the data part of that node and after the at the end we got all our node to get to be printed on the console okay so this is the print list function that we want to perform perform and uh you know previous video we have make the list and now we want to print the list okay so we will just simply can't call our method print list and we will pass the head to this subject and now uh let's try to understand the length function of the link list I like how to find the length of the nucleus that is how many nodes are present inside the linked list okay so for that purpose to find the length again we need the head each each time we need head if we if you get the head you just we have performed all the operation okay so uh a blank function is there we need one head okay so we will just simply write over here oh let me just write it over here we need one head that is a starting point of that click list and after that to count the number of the nodes in the link list that is between uh similar to The Print list we will just simply uh perform one while loop while loop which will iterate through all these nodes and it will iterate until the head dot next is pointing to the null that is the end of the link list and we will take one counter variable counter variables which will count the number of the nodes inside the linked list and each time we will increment increment the head to head dot next so this is the idea behind the how length how to find the length of the link list so let's go and implement this function also inside our code base so I will write public static so this function doesn't return anything find length okay and this is also accepting one head of the linked list parameter and again I as I told you we need one counter variable which initially assigned to 0 and well we need one while loop which will iterate through the all the nodes of the list and we will trade until the head is not a personal and once the height is equal to null that denotes the end of the linked list and if it is not equal signal we just simply uh increment the counter variable uh by one and we'll just simply reassign the value of the head to the head.next so this is the thing that you have to do and after uh successful running or the while loop we just have the length of the nodes which are how many nodes are present inside the necklace that will simply print out over the concept length of the this stage light Plus counter okay and after this we just simply come over here and call that length method and we'll pass that head to this structure also okay and now uh if I run this score okay so it is ready to run first of all uh make list function will get called here here you can say enter the data in the list uh program execution comes over here at line number 11 so let's suppose I'm creating one list okay so let me just write one comment over here so that you guys can understand easily I will write one comment so we are trying to make the list like this one two three four five so we want to make this list okay so let's go ahead and make this list okay so I will let one two three four five so at this point uh list is uh all the elements that I want to insert inside the list are inserted and now I want to get out of this Loop which is this Loop and how to get out this get out of this Loop we just have to give the data as minus one so if I write 1 it will get out of this Loop you can see we've got one plug inside our code okay let's try to debug this according to my code this should get out of this Loop it is not getting out of this blue why is it so which is true go through the code and check what is the problem inside this code I'll give it to let me just write one run it one more time stop and return I guess there are some issues okay is it running let me just read like this wait guys it is running okay so yeah we want to enter the data that's one comma two comma three comma four comma five and after that I want to write one so so wait guys I will uh just Rectify what this error okay so guys I after debugging this code I got there one thing we have done a mistake over here while creating the link list that is we are accepting the data from the user and we are according to that we are running this file book okay so once this while loop Got Run we are we we just we have to sub we supposed to rename this Loop and recheck the data value but we are not getting again the input from the user for that purpose we have to time add one extra line over here the C Dot an exchange that that means we are getting again the input from the user and that input is again used as a check to this while loop again we are running this uh link group and now if I run this Main I hope this will work this time and I will try to create one two three four five uh so link is an English slower I will write minus one so here you can see the elements of this list are one two three four five uh which is printed printed by this paint list method and at the length of the list is five since the five elements inside the list is there one two three four five so the little length is five so all working fine uh till now we have covered how to make the list how to print the list and how to retrace the length of this okay so thank you guys for watching this video and I'll see you in the next one hello and welcome back to the new video of the Java tutorial Series so today uh we are trying to learn the how to find the or how to search the element inside this in English Okay so till now a quick recap uh we have done how to make the list how to print the list how to find the length of the list and now today we want we have we want to learn the how to search an element inside a single linked list for that uh we'll quickly go through the one paint and how to how to check how to find the or how to search the element inside and then play language same mean English okay so now so things which are required to search an element so first of all we need the head of the list head that is that is clear we need the head of the list and we need variables to check and to store the place at which we found that uh node or found that data inside the list that is variables variables of type integer and then we need one while loop where we can Traverse through to our whole list and check whether that nodes data is equals to the data which is entered by the user or this that that is the data that is user wants to search okay so these are the things that which which are required to search and particular element inside the linked list and so let's go inside our IDE and try to code this okay so I will write one method public static and we are trying to search an element so there is no modification inside our list and we are not returning anything so return type should be avoid and I will write the search element as our function name and this method should accept the head of the list that is the starting part of the list so at the first we will just simply print the enter the data that you want to search okay so we have receiving one input from the user that is the data that the user want to search inside this list and we will just simply write int element element SC dot extent and place which is equals to currently it is assigned to one okay so okay and then create one new node of temp which has the value equals to the header which will assign the value of head to the 10th and we will perform all those operation using that type variable okay and now we have our 10 we will just simply right one Loop and we'll write until our temp is equals to null we will perform this operation okay so what kind of operation that we have to perform we are we are checking one if condition if our element that we want to find is equals to equals to the current temp dot data if it if it is a condition that means we have we have found our searching element and we just simply write paint element found element found at and we will concat it with Place variable Plus th place in the list okay uh so we'll stop and after this if if you find the element we just simply return we don't want to perform uh more operation and if that is not the case we didn't find our Loop uh sorry the element we'll just simply reassign the template due to the temperature data uh not 10. data time dot next because you want to move to the next element of the list and we will just simply increase the count count of the place by one okay and after performing this while loop if it doesn't if it doesn't return this return statement doesn't get executed that means that element it doesn't uh element is not present inside the inside the list in the link then in that case we will just simply print a limit is not presented inside the list element is not present inside the list okay so I guess this is the thing that we have to perform and okay so I hope you guys are watching the previous videos do watch them and then come then and then only come here you know because you don't understand anything what's going on and please like and share to the series and do comment out what is your favorite part and what is if you find any difficulties also comment I will be looking after it okay so now we want to search the element right so we have make the list we have print the list we have length of the list and now we want to search the element uh okay so I will simply call the search element function I will simply pass the head of the list to that function okay and now if I run this uh we'll take the previous example itself we will make the list as one two three four five oh you know what let me just give you some more examples okay so we have the elements in the list of one two three four five six seven and the length of the list is seven and we want to search let's suppose 5 whether plus 5 is present inside the list or not okay so you can see element found at fifth place it's a list okay so for fifth place one two three four five fifth place is five which is better inside the list that is correct uh so again I will run this and this time I will give the data which is not present inside the list one two three four five six okay so I eliminated the star one two three four five six and now if I want to find 10 in the list so you can see element is not within inside the list okay so everything is fine working so this is the idea of how to search the element inside a link list I hope you got this concept thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so till now we have covered how to search the element how to the length how to print and how to make the list so today in this video we'll be talking about the how to reverse LD single linked list and how to find the middle node of the single request okay so let's get started so to reverse a single request we what are what are all things that we have required and what is the logic how to reverse a string sorry strain not strain which is a single in English my bad how to reverse a single in English uh first of all we want head that uh which is indicating to the start of the link list and again we need one while loop which is iterating over all the elements of that list and one more two more variables of type node will be required which is one is previous which will hold hold the previous uh node of the list and one is next which will hold the next node of the list and of using these three variables of type node we will just perform this inverse operation of the string uh not answering what I'm saying either it's a single list my bad okay so now we will go and write the code for this reverse of this list okay I will come over here and I will write one more function that is public static of this is this uh we want to reverse a list after reversing a list we want to we want to give the new head of the list through which we can uh Traverse the new list that is the reverse list okay so we we need to return the head which is of type node so here we have written this and we have write the function name as reverse list then this list will accept one parameter which is head of the list and as I have told you we need three variables of type nodes so let me just write those node s I will write notice of current so we need we need the track of current previous and next row current will will be equal to the head of the list that is the current uh starting point of the list and again we require node as that is previous which is currently appointed usernal and one word is there that is next which is again pointed to the null okay so now we require one while loop while loop while our current is not equals to null so whenever our current date was signal until that we will perform this operation what are the what are our operation we will assign the next to the current dot next that is equal that means the current where node battery is pointing it is the next node if it will point away so next we'll hold the next variable next not variable next node of the list and current Dot next is assigned to the previous that is previous will shift one one step ahead okay and previous is equals to correct and after that we will just simply write current is equal to next we will move forward to the list and after performing all these operation we will just simply return the previous because that is the new head of the list which is the reverse list okay and after this now we will just simply need to call this method inside our main main method and to call this purpose I guess we want to make the list we have to print the list I don't think so we need length of the list that will just uh committed out and I will also comment the search part also and I will just write reverse list sorry guys will be worse list and I will pass head to it and after this now we again want to print the list but with the updated head right that is written by this reverse list okay so I will just again call the this paint slash method the only thing is that here the print list will print the list in the way manner that we have given input and here the print list function will print the same list but in the reverse manner okay so let's just paste it whether it is running good okay so we are entering the data one two three four and five uh so the expected output should be five four three two one okay let's see if it is there so elements in the list are one two three four five elements of the list are one wait wait wait we are doing something error in this code we have to give us the list so all right uh elements in the list are we are printing the list we are reversing the list and after that we are again printing tools elements of the list are we are we are getting only one over here why so I think we have one then one mistake inside our code uh let me see we have next will be able to call the next question dot next equals to previous and previous is equals to current and current is equals to next and we are simply returning the previous I guess say this wait guys I will just debug it and let you know okay guys I guess I have rectified the error I found the error that is uh look at here we are treating one head and we are making the list and the head which is written by this make list we are assigning that to the Head please okay the next time we are printing the list we are again sending that headquarters this method so that head is not going to get modified over over inside the print method print list method okay but inside the reverse list method uh our head is getting modified here you can see our head is getting modified and our head new head is our head is at one okay so our list is uh let me just give you a clear idea over here you can see one two three four five so our head is at one okay so to the print list we are giving our head okay our head is not not going to change inside our reverse list method also okay but the reverse list is has its own new head here you can see it was returning one node okay so we have to retrieve that node inside our main method we are not doing that we are just simply again passing that head so that head is pointing to one all right so if you reverse the list after work one should be pointing to the null that is that is going to happen by this reverse list that's why uh this this error was there where reverse list is or printing only one inside this we just have to introduce one new node to catch the new node of the list okay so you load new nudes let me write that as news Okay so this node is hold by this news and we'll just simply pass news to it uh now I guess this will work fine and our reversely should paint it on the console and okay now I will write one two three four and five and after that I have that minus one so here you can see one two three four five is getting maintain which is the original list and after performing the reverse reverse list method on this same list we are getting five four three two one uh which is correct so I hope you guys have found this helpful so do like share and subscribe to the channel and I will see you in the next one thank you hello and welcome back to the new video of the Java tutorial Series so in our previous video we have talked about the how to reverse the list and now in this video we will be covering up about how to find the middle node inside a list okay so let me just go in go into my paint window and I will show you how we can find the Metal Zone of the list okay so to find the middle node of the list since this is it is a link list we can we cannot uh perform the operation that we are performing inside our array to find the link list that is a total element inside the array you divided by two that that stuff we can do inside the array but but in the necklace uh we cannot do that that thing so we have to find another way to find the middle node of the list okay so to find this we will uh try to find the middle node of the middle node of the linked list using the slow and fast pointer approach okay so what it does is exactly so we need to two variables of type node s and uh which which will call it as let let me call it as slow Monitor and fast pointer we initially assign those uh as the heads value okay that is the starting starting of the list and only need one counter variable which is initially a count as a initially assigned as one okay so we need one while loop while what will be doing while our first pointer is not a personal and our first pointer dot next is not equal to none what that means exactly is uh the first node is not uh need should not be null and the node which is pointing to it the first node is pointing to the node uh that node should be present and that should note should not be null okay so these two conditions that we are going to check inside the while if that two conditions won't satisfies this condition will enter inside the loop and we will simply change the value of the slow pointer to the next that means slow pointer will be assigned a new new value of the slow pointer will be this next next next mode of the list okay and we will assign the first pointer value to the first pointer next dot next that is fast Pointer's value will go to the Third node inside the list that is by the name you can think file slope pointer means we are moving slowly we are iterating the list slowly at the first pointer means we are iterating the list by one one node ahead always one node ahead of the slow pointer okay and after this uh running of this while loop each time we will increment the count variable so that we can have the number exactly the position where the middle node of the list is present okay and after running up this while loop we will just simply print the slope pointer data because the slope pointer is a node which is uh exactly at the middle of the list and we will also print the count of a count variables value which will give us the exact position of the element exact position where the node is present inside the list okay so that is the idea behind the finding the middle node of the list so let's go inside into our ID and try to Port this out so to make this function I will write public static and I don't think so we are returning anything okay so I will write white for time being and I will write this name as middle node and this method will also accept the head of the list add and I will simply come here so we are approaching this way in the slow pointer first pointer approach I will just comment it out I will write slow pointed is equals to one star and our fast equals to touch down that that means always the first pointer will be ahead of the slow pointer by the one node and this will gives us the exact beta of the list and we need to this slowing for first pointer we need this slow pointer initially both the both are assigned to the head head of the list that is the starting point of the list and again we need one more notice flash pointer which is also assigned to the head of the test Edition okay so when we need one count variable to find the position of the position of the node that is present exactly at the middle of the list inside the while loop we will write first pointer is not equals to none that is function should not be null and and we will write and condition and I hope you guys remember and condition both the both the expansion expression should be evaluated as true fast pointer dot next a should not equals to null if that is the case we will enter inside this Loop and it will simply assign the slow pointer value to the slow pointer next we will implement the slow pointer nodes to the next node of the list okay so slow pointer is equal to slow pointer dot next and we will also increment the value of the first pointer to the first pointer is equals to fast pointer dot next dot next that means the one node ahead of the slow pointer and we will just count plus plus because we want also want to point the position where the inside the list and after this run after successfully running out this while loop we will we have now the middle node of the list and in the name of slow pointer which is flow pointer is exactly pointing to the middle middle node of the list and the count having count the value of the count is equals to the position of the node that is built inside the make list is the middle okay now here we can simply write middle load of the list is data that is the data part of the list uh which is which is at count is the position of that number position let me call now yes right position in the list full stop and this will give me the middle load data and the exact position of that node inside the list okay so let me call this to call purpose will come inside of method and we will call this function uh middle node not make list middle load and will pass the head to it okay uh so uh I don't think so we want to reverse this I will just comment it out we'll need this also you just make the list you just print the list and we just find the middle node of the list okay now if I run this sorry one two three four five so what do you think one two three four five is there and according to this list uh three should be the middle middle node of this list let's see if it is the case yeah elements of the list list are one two three four five middle node of the list is three yes this is right middle node is three which is at third position of the list that is one two three third position for the list so everything is working fine uh let me just run it again and give it give the even number of the nodes inside the list three four five and six and hit minus one and now you can see the middle node of the list is 4 which is right 4 and which is that whose fourth position one two three four fourth which which is also correct so this is the idea behind how to find the middle node of the list so I hope you are enjoying this video enjoying this series uh do like share comment and subscribe to the channel and I will see you in the next one with the new concept of the single English thank you guys for watching this video hello and welcome back to the new video of the Java tutorial Series so till now we have covered a pretty much concept of the linked list so we have seen uh made a find in the middle node how to reversing the list how to search an element how to find the length of the list how to print the list and how to make the list so till now we have covered all those Concepts all those operations which are performing on the link list which doesn't modifies the linked list right we have not done anything over here we are just simply retriving or checking the list we are processing the list till now but from this video onwards we will start performing on the operation and to modify the list okay so we will be starting with the insertion operation first and then then we will move to the deletion operations okay so basically there are three types of uh insertion which are done at the on the link list okay so let me just clear this first let me just clear this oh let me just clear okay now it's fine I guess okay uh now let me just create one list for you so that you guys can understand it clearly okay so we are making this list and I will write uh I will make this three notes interest okay and each these nodes are pointing to this and this node is pointing to this and this node is pointing to the null okay I will write the lower so that you can understand null uh so this is our 10 I hope you remember what is still uh this is head you know this is the data part and this is the next part okay and this next contents address of this node and this is the first node see the second node and this is the third node in the list okay so this is our list and we want to perform the instruction operation of this list so basically there are three type of operations okay that we can perform on a list uh let me just increase the font size we have to perform this operation on the list okay so first operation is insertion at beginning and second one is insertion app and and third one is insertionate user specified location okay so these three operations we are we have to perform okay and now now you can see these three operation we have to perform okay yeah right so in this video we'll be covering insertion at the beginning so what do you think to insert a new node at the beginning of the list uh what will be operation that you have to perform okay so let's write down those operation that we need to perform uh so okay and we need first of all and we need the current head of the list head of the list okay and then uh we need a third we need to make a new node inside a list before that we need data which is important we need data for the new node data for new node new node and we will make the new node make the new node and after that we will assign that or insert that node inside this list insert the node in list and after that we will return the new head of the list because head is going to change it is going to change because after performing this operation head is head over this way is going to change I will just copy all this operation that we need to perform to insert error at the beginning and I will come over here and I will just comment and paste it off okay so these are the operations that we need to perform I will just tab it over here okay now it's fine so these are the operation that we need to perform okay so we will write one function which is public static and it will return When you know new head of this list so we it didn't type should be node and the name of the method is insert add the insert at beginning so at the beginning node s uh will first will take the head of the list okay for all this operation so again okay so we have received the head of the list okay we have taken this uh in now we need to take the data for the new node okay so we have to receive the data right so before that I will print on the console write the enter the data to insert three node in beginning okay so we are asking for the data from the user to insert which is going to going to insert it at the beginning of the list and now here I will store that data into the data variable SC dot next state and after storing the data now a second part is done now we have to make the node okay so make the making the node is uh pretty simple I hope you guys now we just have to create a new object of the new node s okay wait all we have to do we just have to create a new node okay with node yes let's suppose and we will assign new new node and we'll pass the data into the node okay now it's okay and now wait guys no okay now once we created the node we have to insert that node into the list so for the insertion point of view uh what do you think I will just come to my paint okay so this is the head which is pointing to the second node of the list so if if you want to perform uh insertion operation at the beginning uh let me just create one new node so that you can understand clearly here is the data part and here is the next part okay now if you want to insert this node in inside this list at the beginning what all things that you have to do uh you have to do you think you have to perform Okay so first of all you need to link this node with the current first or the current head of the list okay so by linking means we you have to give the address of this s next and assign it to the current head this okay so this is the first step that you have to perform I will just write it as first step first step you know what okay so this this linking should be done and again now if this linking is done and we are inserting this uh node at the first uh we need to update the head also Okay so at second second operation we need to reassign the value of the head to this new node okay and after that we need to return the head now the head is pointing to this uh okay now the our current new current or the new node new head is this head of the list so these are the operation that we need to perform uh okay so first of all we need to uh connect our new node with the current head Okay so foreign guys uh my laptop battery was third that's why okay so now uh we have created a new node we have now we have also understood what we have to do exactly to insert this mode at the beginning okay so let's let's do this okay we now uh create a new node and that's next we will assign it as head now we at this point we have connected that new node to the Head current head of the red plate that means the current first node inside the list and now we have to just have we we just have to update the head which is head is equals to your node foreign first node of the list and now we just simply return head of the list okay now simply return the head of the list uh I hope this is the thing that we have to perform inside that began okay uh now we don't have to find the middle of the list that will simply comment it out we just need to print the list and now if you notice uh our new head is going to return by going to return by this uh inserted by getting method so we have to store that new head over here okay so we'll just simply write head is equals to insert at beginning and will pass our head to this method okay and after that we will just simply print list again with the new head okay and now if I run this okay so one two three four five six minus one okay so elements is one two three four five six and enter the data to insert in node in the beginning uh that is a typo you don't forget it enter the data okay so now if I want to enter 0 at the beginning let's see if it enters here you can see after uh giving 0 to enter enter at the beginning the new list is zero one two three four five six so zero is getting inserted at the list okay so this is what this is working fine I hope you guys understood how to insert a node at the beginning of the link list I hope about this concept thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so till now we have covered the insertion operation at the beginning and so now in this video we will be covering uh insertion operation at the end of the link list okay so in our previous video I will talk about this instruction at the beginning and in this video we will be covering insertion at the end okay so let me just clear this foreign let me just clear this thing okay okay now we want to insert this say node at the end of the link list okay uh let me just erase this also okay we don't require this one also yeah now it's okay uh so we want to perform the operation and which uh insertion at the end okay so things that we have we require okay first understand that so to insert at the end we need a first of all head of the list again that is much we need the head of the list okay now we need the data that with that data for new node data of new node okay that is going to get inserted now we have data we have the head now we create a new mode creator node okay now we created a node now we insert at the end insert at end and at the end we will return the head of the list data head okay so these are the operation that we want to perform uh to insert a new node at the end of the list okay so I will write it over here I will just comment it out and paste it and I will give one tab and after that we will just simply from here okay so now this is the thing that we have to achieve okay so now I will write my function which is public static and it is returning the head that way it is of type node s and the name of the function is inserted it let me call it as insert at end will simply pass no less remember we simply pass the head of the list first of all we will get the data from the user enter the data that we want to insert at the beginning and I'll just simply copy this line so that I can not write the new line okay and over here I will just simply paste this and node in the end okay and and we have to insert that node and now we will see the data platform the user data is equal to oh SC Dot an extent after receiving the data we need to create a new node uh we create the new node as new node s which is equals to new node and we'll pass that data to this function okay and now we need to insert at the end we need to perform insertion at the end so what do you think we will let we will go into the paint and we will try to figure it out how to insert inside end so two things should be there one is if our head is equal to equals to null what if the list itself doesn't have any element that's list is empty that is head is also point to null and tail is also pointing to the null and then in that case we will simply assign the new node to the head that means if there is no no node in the list and we are trying to insert a new node which is the first node as well as the last node of the list then in that case we'll just simply insert this node inside the list and we will assign it the value as head and in any in case there are some elements there are some node present inside that list we'll just simply uh we have to assign that value to the we just have to assign that current represents the last node of the list we'll just simply write tail dot next equals to new node that means we are linking this node with this node I will just show you we are linking this node to this node by writing 10 dot next is equals to you know and we will simply assign change the value of the tail to new node that means then now the list becomes 1 2 3 and this node is added at the end of the list and this nodes next is pointing to the null now this is our list after insertion at the end okay so this thing we have to achieve over here we will write an if condition to check whether the head is equals to equals to null if that is the case that means there is no element present inside the list and we will just simply write head is equals to you know this and now if it is not the condition uh there are some element dates at the list we'll just simply write we will just simply write tail dot next is equal to new node and I will assign the Tails value to the I will update the value of the tail to the new node node so that our list is like uh it is expanded okay and now at the end after performing this operation we will just simply return the head of new head of the list uh not new head is the this we will just return the head of the list okay and now uh to run this insert at the end we are returning something ahead so I we need that head to be updated over here uh we'll write head is equals to insert at end and will pass that head over here and we'll just simply print the list again okay now if I run this and I will first I will give the empty list no I'm not right not empty first I will give some inputs one two three four okay and after this I will write minus one and uh now I have to insert 5 at the end of the list that is the data and after inserting the here you can see the new list is up printing which is one two three four five and uh before list is one two three four five was not there and now after performing the insert at end operation 5 is inserted at the at the end of the list okay so now if I again run this and this time I will not give any uh prior node in the list I will just write 1 elements in the list are empty because which is not getting uh element list is first empty and now if I am trying to insert 2 in the list the element of the list are two okay so if condition is also getting executed or working fine so this is the way by which you can insert at the insert a node at the end of the list so till now we have covered insertion at the beginning and insertion at the end and in upcoming video we'll see how to insert a node at the user specified location in the single language so thank you guys for watching this video and I will see you in the next one so hello and welcome back to the new video of the Java tutorial Series so till now uh we have covered the core Java concept uh we have cover we have started with the data structures and algorithms we have covered array VR uh discussed some problems on arrays okay I hope you guys are enjoying the series so now uh till our uh previous videos we have started singly linked list okay and in that uh we have seen how to make a list how to print a list how to find the length of the list which means how many nodes are there inside the list we have find how to search an element inside the list and then we have started the basic operations like inserting deleting or finding like that okay and in inserting we have uh seen uh how to insert a node inside a simply linked list at the beginning and we have seen how to insert a node inside a single in English at the end and now again we have seen uh this much these many methods reverse list means how you can reverse a single link list and middle node like how you can find the middle node of the link singly linked list so these are some methods that we have seen till now and so now for today's video I I will be taking a concept of how to insert a node in syncline English at a user's specified positions right so for that let's just get into our paint and see the logic how we can implement or how we can add a node inside a Sinclair link list at a user specified position okay so this is our previous previous paint previous video paint so let me just erase the things that we don't want okay in case you can delete this you can delete this okay fine uh so let's assume that wait uh this is our link list okay this is our uh first node this is our second node this is our third node okay and now if I want to insert a node inside this simply linked list at a user specified positions right so if I say uh this is the single English and you have to insert this node this one right here and this node inside this single English at second position okay so what is your logic how you can uh think how we can insert this new node inside this English at user specified position okay so let me just write a write down here uh so we are trying to insert this new node at position is equals to 2. so right so we are trying to insert this node inside the single linguisher position number two okay so after inserting the whole list should look like this this is our try to form a cursor okay so this is our first node I am talking about the after insert method insert operation so after that the link should be here and after that this uh next should point to this and after that this next should point to this okay so this is the list our list new list updated list after inserting uh new node at the second position so what will happen uh this existing node which is at position two will get shifted at position 3 and new node which is which we'll be going to insert inside the list will be take that position position uh two okay so this is the logic that we have to build uh so first of all uh let's get in our ID get into ID and try to code this okay so let me just get into my IDE okay and I will write the similar method over here okay this is inserted beginning this is insert at end and now I will write it over here so that you can I will and also I will share I will be sharing this code don't worry you can follow this code and try to build your own single linkage and try try to play around this code Okay so let me just okay fine so we'll be uh let me write out write down one comment so we are performing insert operation at user specified location or to be more precise in programming language it is index okay now so since this is a method I will write this public method should be study because we are calling it inside the main method which is static one and think it uh think it guys uh when we are updating we are inserting a new node inside the list so our method should also return one node that is the head of the node uh that like here you can see uh for suppose uh user has inserted this node at First Position then in that case our head should also point to this right so our method should expect expected to return a new head or the uh if it is uh in inserting the node at the first version or any case we are returning a new node okay so our node is of type node s so I hope you guys are watching our previous videos also so that you can understand what is known as why we are written that over there so please watch on all the video and then come over here so I will name it as insert at the method name okay and this method will also first required one head so we are passing one link list to this method and in return this method will insert a new uh node in that list that I use a specified location right so we are passing the head to the list okay so first of all I will be requiring one uh variable name as position and count and I will assign value to both as one okay so both are one and I will just simply write system.out.winterline enter the data to third in the list okay so at this point we are asking we are printing on the console like uh asking the user to enter the data that you want to insert inside the list all right all right and after that we will declare one data variable and we will just write simply since SC dot next hint and you will accept the data value of that new node data part of the new node okay and well after that we will simply write print on this console like enter the position all right so this method will uh what will be do what it will be doing it will be taking the data part and it will take the position right all right so here you can see it will ask for the position at which position you want to insert this node inside the singly linkage that we are going to pass to this method okay so now I will write position is equal to SC Dot next next it okay so now we have covered position we have taken the data okay so now we are good to go to create a new node okay so we are creating a new node node s that is a new node is and we are passing the data to that Constructor of the node S Class so now at this line number one one is one one or four we have created a one node and we have passed the data that is incentive by the user and we have also taken the position from the user okay so now we are checking if the position is equals to equals to 1. all right what that means if position equals to equals to 1 here you can see if entry user enters the position that is of new node should be one then in that case user is user is trying to insert that new node in at the very beginning of the link list all right so in that case uh we we have to perform the some different tasks otherwise there are some okay so otherwise we will go inside the else part we will also Port that one okay so if the position equals to equals to 1 that that means we are trying to insert the node at the very beginning of the link list so in that case we will just simply write new node s dot next is equals to head and we will simply reassign the value of head to node s sorry for the type of mistake okay so what we are doing and doing over here is uh this is our new node we will just simply assign first this next to the Head currently the head will be pointing to the first in first node of the link is right so we are making this connection first to the first node and we are simply changing the heads value to this a new node okay so for after that uh how it gonna look like let me just clear this mess all right so after that it will look like this the head will be uh new node ahead our new node head is this and our second node inside the link list will be this and first node will be this okay so now this we have covered for the position equal to equals to 1 what if the position is uh not one okay or else something then in that case you will come inside the else part and here we will create a new node and we'll assign it name it as previous is equals to head okay and in after that you run one while loop okay and then the condition we are going over here is while the count is less than position minus 1. okay don't worry I will be explaining this code in the using the paint window all right and we are writing previous is equals to previous Dot next okay and after that we will just simply write count plus plus all right and after running this while loop we will simply create one more uh one more node and name it and name it as current and this current will point to the previous dot next and after that I will write new node sorry for that check we'll write new node as dot next should be equals to the current and now the previous dot next should point to new node all right and after that after this else part we will just simply return the head of the list all right so let me explain what we have done inside this else part all right so uh we know if the position is not equals to 1 that means we are not trying to inserting the new node at the very first beginning of the list okay so in that case what are what are all the operation that we have to perform like we have seen over here if you want to if the user gives the position as true so in that case uh we will first we have to Simply look at over here okay so we'll create one uh node by the name of previous and we will assign it the value of head all right so at the very first the previous will come over here previous all right and then which is equals to the head like it is pointing to the first node and after that we'll we'll run our while loop all right so while we are repeating this iteration until our count is less than position minus one so what is our position uh let's suppose I have to insert the insert a new node this new node at the position is equals to 3. okay so look at here map if my position is wait my position is three now wait okay so what is the count value initially the count value is one it will check whether one is less than position minus 1 that is one is less than 2. if it is if it is correct yes then it will it will perform this this two line of code okay so previous is equal to previous dot next that means our previous uh previous will jump over here now the previous is pointing to the second node and count plus plus now the count value will be 2 and now uh when we again check for the condition now this time counts value is 2 and and what we are going to check we are going to check whether the position minus one okay so my position is 3 3 minus 1 is 2 either by 2 is less than 2. so this time this condition will will be evaluated as false all right so if this condition is false then in that case this while loop breaks and we will come over here okay so now our previous which is pointing towards this second node of the list okay and now we will create one more node which is current and which will be pointed in the previous dot next all right so what is what is our previous previous is this and this next part we will assign it to the uh what we have created another node name as current all right so this here our current will point over here current is here and previous is here all right now new node.next is equal to current new node that is our test new node.next so we are taking this next and we'll assigning it assigning it to the current value all right so new node.next is equal to current so now our new node will be pointing towards this node and previous dot next is equal to new node previous dot next is equal to new node so if you can see these are the two uh nodes that we have created previous and current are for taking the keeping the track of the nodes which is previous to the position that we have entered to be uh to enter the new node inside the list and the current is the actual position at which we are we have want to insert that node inside the list okay so after performing this operation you can see the flow of the list would be 1 2 and this will become the third node and this will become the fourth node so we are successfully inserting uh the new node at the position is equal to 3 that is equal to here you can see so this is logic behind this I hope you got this if you're not uh go back in the video and try to understand what what I have covered okay so let's run this let's see if we are not getting any error after before that I will just comment it out we don't require this we will make one list we are print the list and we'll call our method insert at and we will simply pass the head tool to it okay so if you notice one thing uh this method we it accepting one head we that means that we are passing or passing it over here and but in return this is giving us a new a node a new head of the list right then new it is returning the new head of the list so that's why we have to get that new head of the list otherwise uh we are not printing the new list okay so we are printing the old list that we have make over here okay so this way this will not work so here let me just create one new node let me call it as head new so we are taking that new net and we'll again call the print list but this time we will pass the new head to this Method All right so so that we can print the new list after inserting the in node at the user specified index all right so this is we want to do Let's test it out okay so it is asking me to enter the data so let me enter five nodes in the list one two three four five and uh you know if you want to get out of this uh make list function you have to write 1 so it is printing that elements of the list are one two three four five by why so because we are called over here printless method which will be gonna take head of the list and print all the list okay so here it is asking the enter author data to insert in the list so I want to insert let's suppose 0 so that you guys can understand okay so I want to insert 0 at what position let me insert it at position number three over here okay that means sorry that position number three now here you can see a element of the list are we are again calling the print list but this time we are oh let me show you we are again calling this function but this time we are giving the new new head of the list that is the new list that method our method is going to return us that is 1 2 then at position number three uh I have tell the program that to insert 0 at the position number three it is also it is inserting the zero and after that rest of the list will uh will be printed printed as it is Okay so this is the idea of inserting a new node in the single English at the users use a specified location I hope you got the concept please uh we rewatch the video if you are not getting the concept but try to understand and we'll I will share one trick so that you can solve this kind of linked list problems easily you know once we have uh covered all the topics of the single English Okay so thank you guys for watching this video and I'll see you in the next one so hello and welcome back to the new video of the Java tutorial Series so till now we have covered how to insert a node inside a sink living list and that too with the three all three types uh like in the beginning in the end and at the user specified location okay that is the user specified index okay so one more challenge for you so if you can try to solve it so what is the challenge so you have seen how to insert at end how to insert ad beginning how to insert a user user specified location right so now you have to insert a node in at the middle node of the linkage all right so what I am telling is let me give you an example so if the length of the list is 10 okay or suppose let me take X5 okay so and the elements of the list is one two three four and five so at first you have you have to identify which is the middle node of the list okay so in that case a middle node is three I will color it up middle node is three and you have to insert a new node at the position or the index three so how you can solve this so I'll give you one hint okay so for this operation to perform you need to find first the middle of the link list okay so how to find that we have covered one video go and check that if you watch then then it's good here you can see uh we had written one method to find the middle middle node of the list so we have to somehow manage to get first the middle node of the list you have to store that middle node some somewhere and then then you can perform the similar kind of operation that we have performed at over here where we are inserting the new node at the user specified location right so these are this is the operation that you can perform so go and uh give it a try and try to solve this problem enough talking so in this video we will be starting with the deletion operation which we are going to perform on a linked list all right so I will just make one line over here and I will write one comment we are performing delete delete operations okay so for this video uh we'll be looking at how we can delete a node of linked list which is simply linked list obviously uh at the beginning of the link list all right so we are trying to delete the first node of the link list okay so let me just go here this is our previous code go and check that video If you have a checked all right so I will just write one comment all right why it is not okay all right so I will write one comment so we are trying to delete first node of the linked list okay so we are trying to achieve this so first thing first let's get into our paint and try to build the logic for this okay so here all right no more requiring this new node so I can delete that okay wait let me select all right wait wait let me select this area so that I can delete it okay fine so this is our list all right so we are trying to delete this node which is head is also pointing to this node that is the first node of the list okay so we are trying to delete this so when you are trying to delete a node inside a list the only thing you remember you have to do is you have to break the link between those two nodes all right so this is the link that joins this node this is the link due to which our list is going to get completed in the in this direction okay so when we are calling our print list method so we are passing that head if you remember okay and that head is going to get incremented at each time and how this incrementing part is done due to this uh just because of this next part okay so if that if this next is connected to this node then and then only we are going to move and this is forming a chain and this is forming the list of nodes okay so we are just need to break this link so that next time whenever we pass our head we are starting our list from this location and don't forget to upgrade update your head otherwise the for the printless method you are passing this head and this after this head uh if you break this link and then the list will be only this this part only and your code will not work so in that case you have to bake this link and you have to update the heads value to the next value because in that case then and then only if you are trying to pass this head to the printlish method then only this this is our new new list that we are going to build okay and this node will be discarded uh not discarded we will not have any access to this node inside this list okay so this is the logic that we have to build let me just clear this out I need this for the upcoming videos also okay so let's go into our IDE and try to build this up we'll write public static so think about it what will be the return type so here we are changing the head we are updating the head that means we are doing something a modification part inside our list so whenever the modification part comes inside the list there is one the method should return the new head of the list so that we can print it later onwards which is required for the printing the list okay so now I will write node s so this method will return one node that is the new head of the list delete at BK so this is our method name and this method will also accept one head of the list so we are passing one list to this method and in that return this method will delete the first node of the list and uh give us the updated head so that we can print that list later on all right so first thing first we will cover the corner cases okay so what if my head is equals to equals to null okay so if my list doesn't contain any element then in that case I don't need to perform any operation deletion operation all right so head is already empty then how can I perform the deletion operation all right so we will simply return don't know sorry no in that case all right so if this is not the case then we are assuming that not assuming there are sure sureity that's there are some nodes which are present inside that list and we have to delete the first node of that list okay so we will uh create one temporary uh variable of type node and we'll assign it to the value of the header all right so head and temp will both pointing to the first node of the list and we'll write head equals to head dot next and in next part we will write temp Dot next is equals to okay and now after that we will just write return head so what I have done over here is so two three line of code I will tell you so we are first creating a new variable of type nodes name temp so here you can see we are creating one more variable all right so let me just decrease the font size why it is not getting decreased all right temp and head are both pointing to this first these both are pointing to the first node of the list till this time okay so the next line is head is equal to head dot next so now we are changing the heads value to the Head dot next what the next part of this head is going to hold link to the next node of the list all right so we are changing the heads value to this so now our head is point head is pointing towards this node our new head is this uh so head is no more have the access to this node but the temp variable to have access so we'll let temp dot next is equal to no so temp dot next which is pointing to this node we'll just simply write temp dot next now it will point to the so here you can see and after that we will simply return head that that means we are returning this and this causes our this this is the new list after that operation will perform okay so we have what we are doing we are just first of all assigning the temp uh creating one new variable uh temp of type node and we will assigning the value to the head that means the first node of the list and we are changing the heads value to the next node in the list okay by using the using what using next head dot next all right after that I as I have told you you have to break this link link if you want to break this link you have to uh modify this next part so for that we have written attempt.next is equals to none so we are assigning the temp dot next to the null so that uh these temp node will no more have this access to this node and it will point to the null and our new list will be this and this all right so this is the idea behind this method all right so let's get an into our main function and I will call that method all right so we are making the list we are printing the list and over here we are calling delayed deleted at the beginning and we will pass that head okay and after that after passing the head one thing you can remember uh let me go there one thing you can remember this method is returning the new head of the list so we have to create and variable which will be holding our new head of the list which will be of type nodes let me call it as you head all right and we will again call the print list method and we will pass a new header the new head of the list to this list all right so let me run this I hope this will work let me create one list uh as usual one two three four and five and this is the elements let me get out of this and here you can see elements of the list are one two three four five uh this method is printing using the previous head so these are the element that we have entered and these are the element that is going to print it on the pencil okay so after that we have written this method call delete at the beginning so what it will do it will delete the first element of the list that is one and after that we are again called The Print list method okay so here you can see here called the printlash method and this print list method is printing the new list as two three four five why so because we have deleted this first node we are no more have the access to this node and new elements are the new list single English is two three four five so this is the idea behind the deletion of the node inside single link placed at the beginning okay so I hope you got this so in upcoming video we will be saving uh seeing how to delete a node at the end and how to delete the node at the user specified index uh like we have did in the insert operations right so thank you guys for watching this video and I'll see you in the next one so hello and welcome back to the new video of the Java tutorial Series so till now uh we have look at the deletion operation we have again with the deletion operation and we have seen deletion delete at beginning okay so in this video we will be looking at the delete at end so now what I am talking is we have to delete the node which is at the end of the link list all right so before going to the core part as we discussed through paint let's discuss so to perform the delete operation at the end of the linklift what do you guys think what will be required Okay so first thing we will require the access to the previous node right like that is the second last node of the list so as I'm assuming uh this this link list okay so this is our link list and one one thing uh you don't get confused uh some YouTubers have told you to implement this single English without taking the tail uh they are there just uh taking the head of the links list they are not assigning the Tails value and they are not maintaining the track of the tail so and I have taught you uh by taking the tail so I think uh this is the good idea to take till in the link list so that you can have at least the track of the two nodes in in the list that is the first node and the last two so that those are required whenever you perform some complex operation you know on your uh link list we'll see what I mean by the complex operation all right so this is the list one two three three nodes are there and this is the Red Data part of the list and this is the next part of the design this is the link list okay so we are trying to delete the last node of the list so if you want to delete this node uh we'll require the track of this node this is that is the previous node to the last node so first thing we have we need the track to this node somehow we we have to get to this Loop uh get to this node sorry not Loop and after that we can perform some basic stuff that is we will reassign the value of the tail to this so that our new tail will point to the new last node of the list and we will just simply uh not assign this part next value to the null so that our new list should look like this 1 2 and second node is pointing to the null and we don't have any more access to this nodes so this node is getting discarded from the list and this is our new updated list after performing the deletion operation at the end of the list okay so let me get rid of this okay so now we can go into our code IDE and right beneath of this deletion at the first node of the linked list I will make one comment and I will write it as delete edit the end of the list all right so now since uh this this we are making this method and this method will be a public one and static also and now we are deleting the node from the list so our list is getting modified all right so we we are getting a new list so for that this method will also release or means pass or the returns one head of that list new list okay so that we can use the head later on to print print that list okay and we'll write delete at end and this method will also acquire the head of the list that is next to the list oops sorry wait guys wait wait wait wait delete delete delete at end and this will require node as head okay so inside this so as we have discussion of previous video you know we are checking this uh if condition that is a corner case so what do you think uh here here also you have to check on Corner case right we have to check one corner case so what it will be if our head is equals to equals to math that means uh if the head that we are passing to this method that is that head is null or head Dot next is equals to equals to that guys what do you think uh this condition will this is the r operator so I hope you know what is our operator those who don't know I will tell you our operator will evaluated uh this one expression and this one expression and whether any any or operator what it does simply if any one of the condition is getting true this if condition will uh will be executed all right so if the head is equals to equal signal or the head dot next is equal to equal signal if any one of this condition uh is evaluated as true this if condition will be get perform and we'll just simply return simply return the head okay and what we have doing over here is if the head is equal to equal to null means this is the condition where there is no element inside the list all right and this when head dot next is equal to equals to null that means uh the head dot next that is this location is is pointing to the null so what what it depicts is there is only one node inside the list and if there is one node inside the list so technically we can't remove the end of the list and end mode of the list okay so because there is only one layer one node represent inside the list so we can't perform this operation in that case we will simply return the head of the list that means uh this is the condition all right and after checking that corner case if that corner case doesn't evaluate it then we'll simply create one node I will name it as previous so because we have discussed in our logic part we need to keep the track of the previous node of the link list that we are going to delete at the end okay so now we have uh declared one uh variable of previous previous of type node okay so we have to take that currently uh this is previous is pointing over here we and now if you want to delete this element we have to get this this previous somehow to this location so that uh what previous will do it will uh hold or keep the track of the node which is just behind the tail that is the second second last element of the list okay so we have we are performing this while loop so that we can keep the track of that previous uh until previous Dot next is not equals to tail and I hope that what is still you know the tail is the last note of the list so whenever this until we reaches to the tail uh which is the previous node of the tail we are performing this and each time we will be doing previous is equals to previous dot next previous dot next that means we are incrementing the previous value to the previous dot next and uh once we have reached to the previous uh previous node we will just simply write 10 is equals to previous and now we will write 10 dot next is equal to no all right and after that we'll just simply return the head of the list so here you can see we are declaring one previous variable uh and assigning to the value of head we are looping one while loop and we are taking that previous variable to the second second end of this which is the second element from the last of the list and after that we will just simply assign the tail value to the previous that means we are shifting our tail to over here and we will just write tail dot next is equal to null that means this this will point to the null now this will point to the null and this link will got broke and we have no more track of this node which is which is previously at the end of the list and our list will be like this one two and null all right this is the logic behind deletion at the end okay I hope you got that idea and now we will go inside the main method and now here over here we will just call those methods that we have declared above and we'll delete and end we'll pass that head and after that since we are getting the new head from that list so we have to capture that your head work your head equals to and we'll see when you had this okay let me run this okay so we are entering the nodes uh like one two three four five and after that I will write 1 so here you can see uh before performing the deletion operation the linkage would look like this one two three four five and after performing the uh let's delete at end operation uh we are printing again the list and this time we are printing one two three four and we have deleting the element which is at the end of the text okay so this is how the deletion at end works I hope you got this idea how it is works so if you're not get any idea go back and watch this video again so in our upcoming videos we will see how to delete a node inside the single link list which is at the user specified location all right so thank you for watching this video so hello and welcome back to the new bit of the Java tutorial Series so till now we have covered deletion at the beginning deletion at end and now in this video we'll be looking deletion at user specified location like we have seen in the insert operation at the specified location we are trying to delete a node which is user will tell that like this is the list and this is the position and at the node which is present at this position you just delete it okay and give me the new list all right so let's go before writing the code as we discussed our logic inside the paint we'll go and discuss it okay so let's suppose this is our list one two three there are three notes inside the list and me as a user gives My Method the input as like this is the no this is the list you just remove the node which is present at the position two like this is the node that we have to delete all right so in that case oh I want to perform the deletion operation so now we will check what are the things that we have to do so here if you want to delete this node we have to break this link and this one and if you break these links this node will get discard discarded we have no more access to this node and after that you have to do assign value of these nodes next to this this way this node so this is our so after performing this operation what will be the least this is our list one two and we will be not having this notes access anymore after performing that deletion operation okay so these are the thing that we have to do and let's see how we can do this into our Mutual intelligent not Visual Studio code okay let me get rid of this so now here we have to perform uh we have to create that method which will delete our node at the use a specified location all right so I will just create one comment delete at user specified location okay so this method is also public one static and this is also going to return a new uh head of the list so that's why we are writing the return type it as return type as nodes and I will name this method as delete at okay so now uh this method will also require head of the list and it will perform operation on that list okay so first thing first uh like we have discussed in the insert operation I hope you watch that video and like that here also we required one position and count variable and we will assign both value as one okay and now uh we'll write system.out.print align and we ask we are asking they use it as a position enter the position of the node you want to delete okay so we are asking the user to enter the position of the node that you you want to delete okay so after asking that position we have to store that position somewhere so we will be storing that position inside the position variable so you will write SC dot accent you'll get that position from the user and here also we will check one corner corner case what is the corner case if position equals to equals to 1. if that is the case if the position is one that may that means the user is trying to delete the node which is at the beginning that is the first node of the list so we know that how to do it and we have discussed in our previous videos also we will simply assign heads well to the Head dot next that means like here if the user want to delete this this node we just have to Simply uh pass our head to the next node and we will simply return that node from this and from this onwards the list will be that much only and they will no more have their track of this node so this is the corner case that we have to check if the interview and user enters the position as well we will just simply assign the head is equal to head.next now if not if that is not the case will come into the else part and we will create one node notice of name Will name it as previous okay and previous and we will assign it first value to the head and we will run one while loop while my count is less than position minus 1. so uh what is the condition that we are doing well until my count is less than position minus 1 so here you can see uh this is counties one and position that we have entered is 2 2 minus two minus one is one so one is less than one which is not getting evaluated as uh false we are not going inside this while loop so this is the condition uh where I have a small list right so imagine we have five notes in that list and we are trying to delete the node which has a parent at the third index so we have to uh perform this while loop at once because we have to get that previous node to the uh second index that is the previous index that if you want to delete the third index third index node uh you have to get that previous node to the second index node okay so how we can get that we will write previous is equals to previous dot next and we will simply count plus plus and after that while after they're coming after that while loop we will write current is equal to pH dot next okay current is equal to previous dot next and previous dot next is equal to current dot next what I will do what I have done here is I will tell you don't worry then after exiting out this cell tense Loop we'll just simply return the head of the list okay so this is pretty much that we have to do uh so till while loop I I have told you what we are doing we are just simply creating one previous node and we will keep that previous uh upgrading updating updating until an endless will reach the previous node like I'll give you an example so this is the list one two three four and five and we are trying to delete the index which is three and this is our head this is our tail and this is the position at which we are you want to delete the node okay so at first our previous is here so we are upgraded previous and come come that previous to the here so that our uh correct this is the current when we are assigning one current and creating one current and current is equal to previous dot next so after performing this step uh so our current will Point pointing to the index at which the node we want to delete and our previous will point to the previous node of the list okay and uh we'll just write say previous dot next is equal to current dot next we will simply create a link between this node and this node and we don't have a link between 2 and 3 and 3 and 4 because the link which is created by this line is one two four and five so we have no more have the track to this third node inside the list because of this line line we have written previous dot X is equal to current dot next and after that we will simply return the head of the list okay so this is the idea that's okay so let me call that method delete at we will simply pass the head of the list and this method is also returning one head so we have to store that new head somewhere so I'm storing over here and after that we'll write print list and I will pass that new head okay so this is the idea behind deletion that is the specified quotation Let's test it out one two three four and five this is list and uh you can see one two three four five it's a list elements and let's suppose I have to delete the element which is at third index okay which is a third position so I have to delete this three so I have pass 3 as the position don't get confused three is a position not the value so here you can see the new list is returning after that method call is one two four five that is third position element is getting deleted so if you don't get don't get confused I will just run it run it again and I will write it simply 55 69 96 89 now you can see I I know if I want to delete the 96 I can delete it by its position one two three and four fourth position is 96 so I want to delete the fourth node of the list here you can see 23 54 69 and after that 96 is getting deleted and 89 is uh again come at the end of the list so this is the idea uh delete deletion operation at the user specified location so I hope you got the idea thank you for watching this video so hello and welcome back to the new video of the Java tutorial Series so till now we have covered single English all right so let me show you if you are watching series uh so that's no problem but those who are watching just want to learn the links list part those for those I am telling we have covered this singly linked list we have covered all the operation we have covered insert operation deletion operation both three types insert at beginning insert at end inserted with a specified location likewise deletion operations are also performed we have uh covered how to make the list how to print the list how to print the length of the list how to search the element inside the list and and how to find the middle node of the list how to reverse list all these operation we have performed on The Single link list and I guess this is the pretty much idea that where we want regarding the link list so now today onwards we are looking for the W linked list so let's get started so what is public link list uh in this video I will be telling you the theoretical part regarding the W links list so let's get started so let me create create a create a list over here okay let me create a list we will try to understand each concept line by line uh okay so this is the one this is the line and this line so okay so till now uh what we have covered is incredits we know inside single link list this is the node this is node which is which looks looks like in single English there is one uh link which is coming from here and there is link which is going here that is one node is connected to this node and this node is again connected to the another node in that list and here this node contains data and here this contains next part okay so why this is this list called as single link list is simple because this node is connected to the next node via a single link okay this is the single link that is getting connected to the next node so whereas in the W enclosed if you can see the node structure is different okay so this is the one and this is this is pretty much simple and single in English but the node inside a doubling list is represented as like this this here here again here and one more here forget about my drawing okay just keep focus on the concept okay uh this is a that is the difference here you have only the data and the next part next part contains the address to the next node in the list and data part contain the actual data so here also we have a data part likewise here also we have data part here also we have data part and here also we have data part but nothing changes over here here also we have next part that is an address to the next next Link in in next node inside the list here also next next and here also we have next here also we have next and uh the this part right over here this contains previous okay I will tell you what is previous just bear with me previous previous okay so and one more thing is there this is one more linking over here this this which we have not seen in the singly linked list all right this is the this becomes the and single English it's uh one more thing single in English you can see uh is One Direction okay that means uh if you start from left it will go to the right only you cannot come back in that link list it will go from left to right you you don't have any way like we have you have gone to the next here from this next node this from this next note you cannot come back okay all right so so this is the thing that we have seen in a single English but in the uh double in English we have node like this you can see they just keep tracking my pointer and each node contained previous previous means previous will hold the address to the previous node inside the list all right so if you if you can consider this one so in this previous part the address of this node this node will be saved over here okay so address of this node will be saved over here and in the next part the address of this node will be saved over here and in the data part as usual the actual data that node is going to hold that will get stored here okay so you will be asking uh what are what is the if it is the first node or it is if it is a large node then in that case the first node previous will hold the value of 1 minus 1 and the last node of the list next should hold minus one okay so this is the roughly I verified uh W English the advantage you get here is you can go from a left to right and you can come also backward from right to left because this this you you can get this idea better better you can check it over here this is the direction of the nodes this is the direction of the notes you can see here here next node and the previous node the only thing is there are two ways you can go front by using the next and you can come back using the previous so instead of having just only one way where you where you are going from left to right in the lovely linked list you have the access to the next node also and the previous node also why so because it at the node part of this double link which contains the three parts that is the previous part data part and the next part previous part will hold the address to the previous node in the list and the next part will hold the address to the next Lane next node in the list and the data data part as usual hold the data by the way it should be in uh integer format character format string format any data type format data can be stored over here okay so this is the doubling fish idea and this is the theoretical part that you need to understand before uh you get your hands dirty using the doubly linked list okay so go uh one more thing you can go in the web browser and you will just simply type uh doubly link list let me show you doubly linked list if you type and then firstly in Java D Point comes and if you go here and here you can see a nice article is there which will explain and all those stuff regarding the doubling list I hope you got some idea about the public increase on the next next video onwards we will be start implementing the doubling list using Code using Java thank you for watching this video so hello and welcome back to the new video of the Java tutorial Series so till now we have covered all the operations on the singly linked list so here you can see uh I hope you either followed the series along with me and so we have seen how to make the single English how to print it how to search an element how to find the middle node all the insert operation and all the delete operation as well so what I am I'll be thinking is uh from this video onwards we'll be starting for w link list so we'll uh in our previous video we have saw the theoretical part of the UW link list any for me this video onwards we will be looking for uh how to perform all the operation on Adobe link list all right so for as we have discussed in single English we inquired one node which uh so we have to make a node of our aw link list so we cannot use the node which I which we have made in the single language because in W linkage there is one uh previous pointer as well as the next pointer was there so that we can move for bidirection we can go uh left to right or at the same time we can come right to a right to left right as well okay so for that we have we will be covering uh creating one Java class so I will name it as node D node d means node of uh double in English all right so in this uh first of all we require a data part so I will name that variable data and we will require two pointers that is the node d uh I will name it as previous so that it can hold the it will hold the previous address of the previous node in that list and one more is that node of type node D which is next usually as usual as we have seen in a single language part all right so now here let me call one Constructor of this class so that whenever we create an object of this class uh we have to pass the data data to this class so that we can make that nodes using that data okay so this Dot data is equal to data and it's for the first mode we will write as previous is equal to null and next is also equals to know all right so both are pointing to the two Arsenal uh for the single node okay so now what I'll be doing is this is our node part uh that that is pretty much we have to do and now I will go and create another Java class and I will name it as W linked list W the query list okay and I will hit enter all right so let me just increase the font size let's check whether I can increase it or not no I guess I can't decrease I hope you guys uh this font is visible to you all right so since we are taking input from the user so there is one library that we have to import first so I will import that import Java Dot detail dot star I will import every class from the util package and now inside this will create a object of the scanner class since we are making multiple multiple methods inside this class so I will declare the scanner object of the scanner class uh globally okay public static scanner SC is equals to new scanner system dotting okay so now after creating the object of this class uh let me create two new variables so those though there will be public static off type node t so I will create add and tail so as we have seen in our single linked list lectures so we have here again we require a head and tail so that we can keep track of the first node of the list and the last node of the list all right so now in this video we will be talking about how to create a doubly resist okay so for that I will make one method I will name it as public sorry I will do it in next line public static and since it it is making our new linked list which is of type double link list so it must return the head of the head of the list so that we can get that head and print and perform all of the operation that we want to perform on that list all right so it it will return uh head which is of type node d uh that is the node of the double linked list okay so make I will name it as make list as we have seen our single English lectures okay and so here uh for the first time whenever you create a whenever we want to create a list the head and tail at initial point though those two will be pointing towards the null and now here also I will write 10 is equal to 9 and after that we will simply uh print one line and we'll ask the user to enter the data all right enter the data in the list okay so we are asking Google to enter enter the data in the list and create one new variable data and SC dot extent I will take the data from the user and again we will run one while loop and we'll iterate over this while loop uh until an endless our data part is 1 so whenever the user words uh let's suppose user want to enter inside the five five elements in this like one two three four five and after that user can write a data value as minus one so that this while loop will get break and our W link list will be make it as one two three four five only okay so here we will uh whenever we get entered inside this while loop we know that enter data part is not 1 so there is a user who wants to insert a new node in that list so we will make that a new node B and we will call it as new node D and we will pass the data part that we so this is the Constructor that we have build it over here so we are passing this data to this data to this Constructor and now after passing the data after building that Constructor we will write one if condition and we'll write if head equals to equals to map so think I would think about it whenever head will be null so if it had a heading head is pointing to our Channel if and only if it is the first element that we are going to that we are trying to insert in the witness right so in that case we will just simply uh assign the head value to to the a new node a new node D value and we will assign the tail value is it also equals to New Order because ultimately uh this is the first node inside that list so therefore head entail will both point to that uh element uh so sorry L naught element that node itself okay so we will write a new node d dot next is equals to null and we'll write d Dot previous it also is equals to not so both will be pointing towards General so because there is no uh new node inside uh another node inside that list since it is the first node else uh so whenever if head is not equal signal that means there is there are some elements there are some nodes which are very present inside that wave English so we'll come inside with a else part we will write tail dot next is equals to new node new node B and we'll write new node D dot previous is equals to 10 we will write tail is equals to new node d and we will write 10 dot next is equals to that okay so these are the tasks that we have we are going to perform is if it is head is not equal head is not a questionable so what we will be doing is tail dot next uh is equals to new node so we will assign uh the whatever the node which is at the last the tail is there all right so we are assigning the Tails next value to the node that means we are making that link for the previous node in the list to the to that next part okay and so here uh new node dot previous is equals to 10 and we are assigning new nodes previous to the tail that means we are making this linkage between the last let me show you let me show you let's suppose the the let me commit it out let's suppose uh this is the list one two three and we are trying to insert 4 inside the W link list okay all right so here uh we will as a tail is here ultimately uh this is this is the last element uh in that list tail is here we'll assign the Tails dot next that means this nodes next part to this new node okay so we are making this uh left to right connection in this wave language and we will write new node dot previous that is this this nodes previous to tail so we are making that right to left connection as well and after making those two connection we will simply uh change the value of the tail we will assign the tail is equal to new node because since this element is getting inserted for in the in the list so uh so this becomes the last element uh for now that's why we have to update the 10 since the tail is keeping the track of the last node inside the list all right so and you will write tail dot next is equal to so we assign this next to the milks indicating that this is the last element inside the list okay so these are operation that we have to perform after performing this operation either the If part will get executed or the else part will get executed executed after that we will uh again ask user to give us a new data okay so it will ask again the user to enter the new data and it will again go and check whether the data part is not equals to one or not when it is equal when it is equals to 1 minus 1 it will go out of that Loop and we will just simply return head of the list okay so this is pretty much that we have to perform inside this okay so these are the operation uh I hope you got the idea how to make a doubly links list so uh let's quickly run this so for running purpose we require one our main method so we will write a main method here and inside this main method we will call our make list function and you so for our make list function since the make list function is returning ahead to us so we will have to store that head uh in this head variable all right and after this let me call this okay so let's go and run this if you are not getting any errors we are successfully trying to end okay so here you can see enter the data in the list let me make a list as one two three four five and uh if I say uh it's done I these many elements that I want to insert this list after that I can write minus one and it will came come out of this for Loop not follow sorry white Loop and after that it will return the head list so this is the idea behind how to create a list which is of w type wasting doubling doubly linked list okay so in a upcoming videos we will see all other operation of the doubling English so thank you for watching this video so hello and welcome back to the new video of the Java tutorial Series so till now we have covered the waxed uh one functionality that is how to make the doubly links list how you can make one doubly linked list using Java and uh in a previous video as you as you can see we have created created a node um which is after which is of double type w link list which have which can go bidirectional which can go from this node to this node and it it can also come back from that note to that one that is left to right and right to left okay so in the our previous video we have also talked about uh how to create a w linked list so how to build one so if you you haven't watched that video go and check that video first watch that uh then come back to this video so now in this video we will be covering how to uh print the list all right so in our previous video we have built the list so in this video we will uh talking about how we can print the double linked list okay the logic is a pretty similar to the that one that we have seen in the single link list okay so in this video okay let me just first make this notes so that you guys can understand easily all right so let me just quickly make that make that list for you and I will make it as this one this one this this by the way guys how you how you are enjoying enjoying this series I hope do comment out if you have any doubts I will clear it out all right Okay so don't mind my drawing just focus on what I am trying to tell you and you'll get that what I'm trying to tell you okay so look at here this is our W link list so this is the direction that we are first going forget about it let me take my pencil this is the direction and in this direction this is the direction okay so you can go from uh this this direction also and if you want you can come from this direction also so we are trying to print this list okay so first thing first try to let's try to pseudocode this all right so we will try to think or build one logic okay so what do you think how you can print this list okay so uh there is one concept that uh I have taught you in the previous video like this uh we have keeping the track of the head and tail all right so if you guys can remember head head means the node that comes first in that list okay so for that here is the head and tail means the last last node of the list okay so we are going to use head you can also use Tail as well but in that case you will be printing the list in the backward Direction okay so in this video I will be talking how to print the list in this direction okay so you can take it as homework and you can try to solve uh or build one logic where you can uh where you have the Tails axis Tails means this is the last node of the list and you can you you're going to print uh list in a backward backward Direction okay so it's you can take it as a homework so okay uh here we'll use head okay so we will run a while loop to check whether to not check to print this list okay so we will we will use the while loop and you will use the head okay so each time we will get get to that head we will trying to paint that data get to head print the data okay after printing the data uh to move to the next node in the list we have the next uh next uh next ad next pointer which is holding the address of the next node so we will write logic so that data uh data the head will move thank you to the next node let me increase it to the side of the Box okay so first thing first we will get the head we will print the data inside that node uh which head is currently pointing to and where uh assign heads value to the current head dot next so we will iterate through this whole list and when we are trying to stop whenever our head is pointing towards another okay so when our head is point two point will Point towards anal when it when head will come here and we will assign the new heads value to this its next node node and it's there is no next node inside this list so head will pointing towards anal and we can stop at that condition okay so quickly we will go in our IDE and try to quote this out okay so we will here I will make one function or method whichever you you call it public static so we are just printing this list so we are not uh doing anything uh any operation we are just printing the notes of the list so there should not be any return type for this method and we will write print list okay and uh since uh we want the head of the list as our input to this method you will get that head and as as I said told you you will just simply print uh elements in the list are and after that uh we will perform one while loop and our while loop will run until our head is not equal to no okay so if the head is not equal to null we'll just simply print the heads data so we will write head.data we are trying to printing the data and after that we will print one one space because so that our elements can differentiate with each other so one space should be there and after printing this we will uh reassign the heads value to the Head dot next add dot next will assign this value to the head so that way we can iterate to the next node in the list okay so if your head is equals to equal to null that means we are at the end of the list we have printed all the all the elements so we will just print in print One new line so that whenever we build another function so function call gets executed to the new line okay uh okay so here in to run this method we have to call that method we will write print list and we will pass the head that we have stored here while making the list okay so what we are going to do here we will make the list and we will print the list okay I hope there will not any error let's see if we got any error okay so for now it's running okay so now let me give the element as 1 6 8 9 4 5 6 and after that we will write 1 okay so here you can see elements in the list are one six eight nine four five six these are all the elements that we have I have entered over here okay one thing is uh this is printing the new every element in the new line I don't want that because if if there is 100 elements in the list and we are trying to print that list it will take the whole lot of space in the console okay so we'll try to eliminate that uh we can do is print Ln instead of print Ln we'll write print and we can again call this method so that instead of printing the each element in the new line it will print it in a single line itself okay six six five one two four five minus 1 will print a six six five one four five nine these are the elements that I have entered over here you guys you can see so this is the idea how you can print the W linked list so you can try to print this same list in a backward for backward Direction you have the Tails axis that is the last note you can build one logic and try to print this list in a backward Direction okay so thank you for watching this video and I will see you in the next one