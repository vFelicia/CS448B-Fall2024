hey guys welcome to the next video on Jenkins tutorial for beginners in this video we will see how we can build or test a simple maven project using Jenkins so let's see how we can do it so what I have is I have a simple maven project inside my maven workspace directory and the name of my maven project is my app this my app project i have created using the maven website so once you are on the maven dot apache dot org you can just go to use section here and inside this you section you will be able to see this this 5minute test and I have used all the commands here to create a project so this section I have used so I have used this command which created the my app directory where my maven project is there so if you want to follow along you can just give this command and then this my app directory will be created with the maven project so once you have this project let's open the terminal first of all and I'm going to just go to this directory and what we can do here is for example we can give a MVN clean and test command and then press ENTER which is going to clean our project and then run the test inside this maven project and you can see all the tests are runs and there is no failure and build is successful so let's say we want to execute this clean and test goals using Jenkins and first of all we want to check our code into github and then we want to for example clone the code from the github repository into our Jenkins and then execute these goals how we can do it let's see so first of all for that I need to create a github repository so I will go to the github and I will log in with my credentials here and once you are logged in with your credentials I'm going to just click on this button which says start a project and in the repository name I'm going to just write my app and now I'm going to just leave everything as default and I'm going to just click on create repository so now my github repository is created and now you can see you have two options here one is create a new repository on commandline and second is push existing repository from the command line so we will use the first option here first of all we will initialize the gate into our project and then we will commit everything and then push it to our git repository so let's do that if you want help then you can just follow these commands we will just execute the similar kind of commands on the terminal so this is our maven project I'm inside my maven project so I'm going to just write get init command which is going to initialize get inside this directory and then I'm going to just write get status to know the status of this directory so I can see there are two directories here and one file here so I'm going to add this to the gate so I'm going to just write get add and then I'm going to just add target for example and then source and then palm dot XML alternatively you can also write get add dot which is going to add everything which is there inside your project directory so I'm going to do that and then press ENTER and once again I'm going to give the gate status command and you can see these all files are added to the gate now so one thing which is remaining is to commit everything into the gate so we will do that I'm going to just write gate commit M and then the message for the committing for example my first maven commit and then you can just give a space here and then write dot which is going to commit every file inside your project okay so commit em then the message then this dot and then press enter and everything will be committed into gate so I'm going to once again give the gate states come on and now you will see on the branch master everything is clean so we are ready to just push this project to our github repository now at this point you just need to copy this command which is gate remote add and then whatever is your repository URL dot git and this is going to add the remote origin for the github to your project ok so I'm going to just copy and paste this command which is git remote add origin and whatever is your repository URL and then press enter and this repository is added and now I'm going to push everything to my github repository using this command which is get push u origin master and I'm going to just paste this command and then press Enter and this is going to ask for my username for github and my password for the github and now everything will be pushed to my github repository so let's check whether everything is there or not so I'm going to just once again click on my repository which I have just created and now you will see everything is pushed to my github repository and this is the message which we have given at the time of committing and you can see we have committed this two minutes ago okay so now once your project is there on the github let's create our Jenkins project first of all so I'm going to just click on new item and here I'm going to just write first maven project and I'm going to use the Freestyle project for now there are plugins available on Jenkins which makes it easier to create and run a maven on Jenkins but for now I'm going to just use this option which says freestyle project and I'm going to click on okay and in the description I'm going to just write first maven project and then I'm going to just check this option which says a github project and then I'm going to copy the URL of my github repository and I'm going to just paste this URL and then I'm going to leave everything as default and in the source code management I'm going to choose gate option here and once again I can just go here and click on this green button and copy the URL here for my repository and I can paste it here okay I don't need any credentials for now and the branch I'm using is the master branch you can see I only have one branch in my project which is the master branch but if you have different branches you can provide your branch name here instead of master and now I will leave everything as default and here you can choose different kind of build triggers for now I'm going to just choose this option which says get hook trigger for gate sem polling and then in the build environment I'm going to choose this option which says delete workspace before build start which is going to delete our workspace and then run the goals on our maven project ok so just check this checkbox and then we will move to the build section here and inside the bell section there is a special section for maven which is this one which says invoke toplevel maven targets so we are going to use this option here and if you want to see the more advanced option you can click on this button which says advanced and here you can give the palmer file directory path if this file is located somewhere other than in your default project path ok and then you have more options here for example JVM options or properties to give here for now we will just provide the goals for our maven project which is clean and test using the space here and then I'm going to save my Jenkins job and let's run our Jenkins job and let's see if it works fine or not so I'm going to just click on this build now option which is going to start the Jenkins build and then I'm going to click on the build history option which is going to show me my console output so I'm going to click on console output and you can see first of all we will see the default path where this project is checked out so you can see wire live Jenkins workspace and then inside the workspace this project will be created jenga's project and then our git repository will be cloned and you can see already maven is running the test here and once the tests are successful at the bottom we will see if it's successful we will see the message success otherwise we will see the message failure okay so once again I'm going to go back and I'm going to go to my project here and you can see this build is successful now so everything ran successfully now let's say we are going to define a goal which is not available inside your maven project so we will define some goal which doesn't exist and let's see what happens then so I'm going to just say some goal and I'm going to save this and then let's see what happens I'm going to just start the build again and I'm going to just go to the Bell history of this Jenkins build and then console output and you can see once again the repository will be cloned and now you will see the failure because there's some gold goal doesn't exist so it's going to show us this error message and then the last message here will be the failure and once we will go to the home page of Jenkins now you will see this red ball I can here because our last build was unsuccessful okay so just give the proper goes here which are logical so clean and test are running for our maven project so we will just give those goals here and once again run the build and you will see the build will start and in the console output everything will be checked once again and then you can see success once again so this is how you can test and run a simple maven project on cheng canes using github i hope you enjoyed this video please rate comment subscribe and bye for now