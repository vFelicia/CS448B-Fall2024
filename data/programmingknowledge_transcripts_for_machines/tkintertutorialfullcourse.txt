hey everyone today we'll be talking about one of the graphic user interfaces provided by python thinker it is a standard python interface to the tkh GUI toolkit shipped with python now what is TK TK is a free and open source widget toolkit it provides a library of widgets for building a graphical user interface in many programming languages but now since we are working with python we have to enter module DK has a crossplatform operating system and it is written in C now to install tincter you can run pip install tincter you will write pip install tincter in the terminal and you'll be good to go please note that if you're working with python 2 it is Center the DS capital and if you're working with Python 3 it is technicality is in lowercase the spelling is the same it's just the difference of the cases Now to create anything to your app you would basically be following these four steps you'll be importing the tincter module you'll create the main window now windows are the containers in which all other GUI elements live now what are these other GUI elements these are widgets widgets can be text boxes labels buttons Etc we'll be making each one of them in the upcoming videos widgets are contained inside of Windows okay and that's what the third step is you'll be adding these widgets to the main window you can add any number of widgets to the main window then you'll call in the main Loop method it is used when your application is ready to run it is an infinite Loop main Loop is an infinite Loop used to run the application wait for an event to occur and process the event as long as the window is not closed okay we also have geometry managers namely the pack grid and place pack is very much used but we would not talk about them right now we would talk about them later right now we would try to get the tincter window the master window that we just talked about above I write the least code to make the window appear let's do that I'll import enter I'll write import I'll have my window the window I was talking about in the second step and I'll write when equals tincter dot TK fine now TK can have a lot of arguments so the screen name sets the display event base name sets the profile file by default it is derived from the program name okay now class name it is the name of the widget that is currently used widget class it is TK here okay then we have use TK if it is true it initializes CK subsystem we have sync it is used for debugging basically it executes all X server commands synchronously then we have use which specifies ID of the window for the application now these all arguments might not make sense to you right now but once we start making big applications with tincter you'll get the use of them now I'll write win dot main Loop and I have called in the main loop I told you I won't be making any visit right now I have skipped the third step and called in the main Loop okay now let's run this and see if we can get the window so I can see the window that I declared you can even resize it this logo is of TK software if you search on the internet about TK you'll see this logo you can also add in a title to this let's do that I'll write win.title I'll give the title my first interim window now you can see the title appearing it's my first enter window it was TK here earlier now after this we start making printer applications but in the next video we would talk about something per modules Tinker is very easy to work with and with a very less amount of code you can achieve a lot so the upcoming videos would be very helpful for you thank you hey everyone Teamster offers great modules and that's what we're gonna talk about today while using a class and thinker the module first assembles a TCL or TK command string now the tincter package is the standard python interface to the TCL or TK GUI toolkit TCL or TK is not a single library but a collection of various modules if you're not familiar with the TCL or TK I will just write down the architecture briefly for you so TCL is a Dynamic interpreted Dynamic interpreted programming language just like python it is another programming language which is written in C it is most commonly embedded into C applications we talked about this last time that TCL is mostly written in C then comes TK TK is a TCL package implemented in C so what does TK TK is a TCL package it is used to add custom commands to create and manipulate UI visits okay then we have theme TK or we can call it ttk it is a newer family of TK widgets it provides a much better appearance so this was all about the architecture now about the modules available in Tinker we will talk about some useful modules and to get a better idea of how they work we will see some examples too now ttk is very important as a module so it provides you upgraded widgets so the widgets here are upgraded and the main dictator module okay we can also talk about the color Chooser module which lets you choose a color indicator to just show you how it works I'll write a piece of code now I'll import into I'll write from thinker import ttk and I'll import things third art color Chooser that's the module I was talking about then I'll declare the window container I'll write when equals sphincter.tk we did this in the last program I'll also given a title that the title fitting through color chooser then I'll Define the change color function I'll write F change color don't worry if you don't understand what is happening in this program it's completely fine because we have not discussed any of it I'm just writing this as an example to just show you what the colors user module can do then I'll Define this function I'll write Colors equals tincter.color chooser.ascolor I'll use the ask color function and then I'll configure I'll write win.configure PG equals color one now to column this function I'll make a button I'll write ttk dot button so I've used the ttk module button and not the regular one and I'll call in the window I'll write the text pick color and the command would be change color I'll call in this function and then I'll pack this then I'll call in the main Loop cool so what I have done is I've made a button which when clicked will call in this change color function and you'll be asked to pick a color and it will change the background color to that color cool so let's run this and see if we can change the background colors so I have the screen let me resize it and I'll pick a color click on this button so I have this new window or a popup box you can say I'll pick any color and select okay and I have it as the background color you can even change this color let me pick another color and click OK and I have different shade cool so that's what tincter color Chooser module can do now if we talk about the other modules that we have we can talk about common dialogue module so basically we have many modules to create dialogues in data this module is the base class for getting dialogues we can also have file dialog it is used to get dialogues to save or open the specified file we have SIMPLE dialogues for the dialogues we can also have font module so it is used for writing fonts I'll just show you an example how we do that so I'll just comment this piece of code and okay I'll declare a variable Let It Be Georgia equals TK font dot font and family equals Georgia size 30 weight bold that's how you declare a font and you can declare a lot of things I have declared the family size and weight you can even declare if it needs to be slant if it needs to be italic or Roman or if it needs to be underlined or if it needs to be over struck you can even do that then we can have other modules like the message boxes so I'll just write down something for that too I'll import enter and from Tinker I'll import message box okay I'll just Define another function so I'll write Def dialogue message box dot show error answer sorry no answer available okay and then I'll again declare a button ttk dot button text equals answer and I'll call in the main Loop sorry so let's see what we get so I have my screen and let me resize it again and I'll click on this answer button so I get a popup it says sorry no answer available and I'll click on OK and I'll exit the screen so that's what we have when we use the message box module we can talk about many more modules in Linker we have scrolled text module so we can get a text widget with a vertical scroll bar it's all built in we have idle lib module constants module DND module text module we also have total module it's a very powerful GUI with great applications and I'd really like you to check out the total module because it's really amazing and you can do a lot with total 2. that's pretty much it about the modules indenter thank you hey everyone in this tutorial we will be talking about the button widget so I will just explain as I write the code for creating one such button I will just follow the four steps we discussed in the introduction video so I'll import into I'll write import think there then I'll declare the window that was the Second Step I'll write when equals tincter dot TK and then I'll given the title I'll write when dot title and let the title be button okay now I'll declare my widget that was the third step adding any number of widgets to the main screen so I'll write button that's my variable equals sphincter dot button and I'll given these brackets and you can see that there are these numerous parameters that I can specify to size my button or to decorate it so first I'll given this master which is about the parent window so I'll write when then I'll mention the text so it's the text that I want on my button so I'll write quit because the command that I'd be specifying so command tells you what the button would be doing so that would be win dot destroy so destroy is an Universal widget you can not only use it with the window container but also to destroy other widgets like the button itself okay and uh I can even specify the height and width of the button so I'll write width equals let it be seven and height let it be four okay then I can have the active background parameter so I'll write active background let it be pink so active background is basically the color of the button when you have clicked on it and active foreground let it be purple so that's the color of the text when you have clicked on the button then you can also specify the background color and foreground color let us specify that so I'll write PG equals sky blue you can also take in the RGB colors but I'll take the normal ones for it now then you have for round let it be white and then you can even specify the font Let It Be Church yeah you can given any font area or calipery then I'll have relief let it be equal to Rich so relief is the type of powder you want it can be flat Groove raised Rich solid or sunken okay that's all that I'd be specifying all the parameters that we tell uh giving in for my button but there are more in place of text you can even given an image that would be working as a button okay or you even have this justify parameter so how you want to show the multiple lines if you have a text then how you want to show those multiple lines a lot long left side or right side or you want it to be in Center so it's basically the alignment of the text but for that you would need to specify that slash n in the text otherwise it won't be treated as multiple lines you can even have bad eggs or bad y so bad X is for additional padding along the yaxis left or right of the text and Pad Y is for the additional padding above or below the text then you can even have the state parameter to disable the button then you have underline so the corresponding number text would be underlined then you can have wrap length if it is positive then the text lines will be wrapped to fit within this length and then I'll get to the pack I'll pack this widget I'll write button dot pack so this is a geometry manager that organizes the widgets in blocks we'll talk about this very descriptively in some upcoming videos but for right now just know that it's for organizing this widget there are options to this you can give in an argument we have expand fill unsite expand lets the widget take up any space on the master window fill is for taking up extra space so you can specify along y or xaxis or both then you have side it is for top left bottom right alignment where you want your button and then I'll call in the main Loop cool I'll write pin dot mean let's run this and let's check if our button has the parameters that we specified so I have my screen and I can see this sky blue and white combination that we specified for background and foreground and when I click on it I can see this pink and purple actor for ground and background you can even see this Ridge border and you can notice the Border width the width and height of the button okay you can even see the text and when I click on the button the window goes away as in the window is destroyed okay okay so everything worked as we wanted it to we could see the parameters working button parameters working and the widget working quite fine you can even get an image in place of this text so please try doing that it's very easy so that's it for this program thank you hey everyone today we're gonna talk about grouping and organizing widgets in the master window and we're gonna make use of frame class and pack geometry manager a frame in itself will work like a container a frame is a rectangular region that would be used to arrange positions of other widgets so basically it is used to organize a group of widgets so let me start writing the program for it so I'll import or I'll write from tincter import start okay so I do not need to import every single module separately in printer I'll just write the class name I do not need to mention tick toadoc button or something like that then I'll take the screen I'll write win equals TK in Brackets here I didn't need to writing dot TK because I've already imported it then I have given the title I'll write win dot title let the title be friends so the third step was adding widgets now I will be adding widgets so frames are also widgets that helps in organizing other widgets I will take the button widget only since we talked about that in the last video so to organize my buttons I would use the frame class now I'll write frame equals frame and in Brackets when because I want the string on the window right so you can see that we can give in a lot of arguments for frame so you can given PG this was for the normal background color of the frame then you can given BD that is the border size and you can give in the cursor so the mouse cursor will change to this pattern specified pattern when you hover over the frame and then you can mention the size you can tell the height and width then you have relief here which was also there in buttons so it's the same here you can specify the kind of Border you want for the frame here I won't be specifying anything because I would be getting some widgets over it so it's no use it will be displayed so with the frame class I have made a rectangular area and then I'll pack up to the left side of the screen so I'll write frame dot pack side equals left we discussed this in the last video while we were discussing back a little bit we talked about side fill and expand I hope you remember so I'll be writing side equals left in the argument we're back okay I will take up another frame so that you can understand what frames actually do the grouping would be clear so I'll write Frame 2 equals frame when because I want this frame on the window and then I'll back this to the right side okay it's all right side equals right then I'll get my buttons I'll write B1 equals button now last time when we declared the buttons you might remember that we used window as the master argument but right now since I won my button on this Frame I'll write the frame variable okay so I'll write frame comma text equals button one let the background be pink and foreground be white and then I'll pack this button I'll write B1 dot pack similarly I'll declare button two I write P2 equals button frame comma text equals button two and background color sky blue and foreground White and then I'll pack it write P2 dot back then I'll have two more buttons B3 and B4 I'll get them on the second frame that I declared you might notice that I have not given any commands for the buttons so let's start focus on that because right now our main focus is understanding frames so let me get my button three and button four I'll write B3 equals button frame two text equals button three background purple and foreground White okay then I'll pack it let me get the button four button frame two text equals button for background let it be light green and four round repeat White then I'll pack it I'll write P4 dot back then I'll call the main Loop this main Loop would be called for the master window only the parent window so I'll write when dot main group so let's run this and see if we get the buttons on the left and right sides according to the frames so I can see the buttons the four buttons that I declared and they are on sides button one and two is on the left side and button three and four are on the right side because I have packed the frame one on the left side and Frame 2 was packed on the right side as we have not given any command to the buttons nothing is happening when we are clicking them you can think about how differently you can park these buttons just like we have packed the frames you can use the site or expand or fill arguments and that's what we'd be talking about in the next video we'll be discussing geometry managers thank you hey everyone so I've always told you that we are going to talk about geometry managers whenever we use spark so that's what we're gonna do today in this video we will talk about pack grid and place since you have already used pack in some of the last videos let's start with the pack widget so from the enter I'll import star then I'll get my window I'll write well equals TK I'll also given a title so I'll write when dot title and let the title be geometry managers okay then I'll get the widgets so for the widgets I'll get some frames and I'll pack those frames so I'll have my frame one equals frame for the master I'll give window when then let the width be 200 and height be 100 and let's have the background color to be orange now I'll park this Frame I'll write frame one dot Park so I'll fill this for both the axles I'll write fill equals both and side equals left expand equals true so this fill and expand is for making the frame responsive as you increase the screen size the frame will expand in both the directions and the side is to place it on left cool so let's have another frame right frame two equals frame when let the width be hundred background color let it be purple and I'll pack this and I'll given the same arguments as above I'll write well equals both side equals left expand true okay then I'll call in the main Loop all right when dot main Loop so let's run this and see how the pack Works see how the Frame Works okay so I have this screen and as I expand it on either side if I expand it along x axis I can see the frames increasing so you can see the two colors purple and orange so that's the rectangular area a frame makes and the parking starts from the left side because we have specified site to be left okay and you can see as I expand the screen the frame size also increases cool so if I want to talk about the place geometry manager it is used to control the precise location of a widget the location it should take up on the window or the frame okay so we can given the coordinates it takes up two arguments X and Y so that's the top left corner coordinate of that widget okay so let me write something for it so that you can understand it better I already have Tinker imported and my window I also have a title for my window I'll just get another frame to get my button on it or rather I'll get two buttons so let me have the frame I'll write frame equals frame when and let the width be 150 and height p150 frame dot pack okay and I'll add my button one so button one equals button and I'll get this button on the frame so I'll give in the master to be frame let the text be button at 10 comma 20 and let the background color be pink then I will place the button not use pack but I'll place it and I'll given the coordinates x equals 10 y equals 20. so I'll get this button at 10 comma 20 coordinate the top left corner coordinate of this button would be our 10 comma 20. then I'll get another button button to equals button strain let the text be button at 40 comma 50. and the background color Let It Be yellow then I'll place this button again at 40 comma 50. so x equals 40 y equals 50. and then I'll call in the main Loop we'll check this if this works fine and we get the buttons at the defined coordinates now when I run this I have these two buttons at the coordinates so this top left corner is at coordinate 10 comma 20 and this yellow one press out 40 comma 50. so that's the coordinates and the buttons are at the specified coordinates so the screen should be seen as a coordinate plane and the buttons are at the specified coordinates go so that's how place works now let's talk about grid grid has all the parameters of pack plus it is efficient done place as place needs specific coordinates crutches splits or mixed parts of the screen according to the Matrix given you'll understand this better if I give you an example so I already have things are imported and I'll just comment this part first of all if you're talking about grid you need to make that grid so we'll make it just like we make a matrix I'll have two for loops and I'm gonna make a grid of three by three so I'll write for I in range three for J in range three frame equals frame Master is Finn and let me give in a border type so relief equals sunken that's about my frame so for each block for each Matrix element I'll get a frame okay now I'll use grid for the frame I'll write frame dot grid so you can see what all arguments we can give for grid we can give the row which is I then column which is equal to J we'll given some extra padding along X and Y axis both so let it be 5 that'll look good then I'll get some buttons on these frames so I'll write button equals button and since I won this button on the frame so I'll given Master equals frame for text I'll given the Matrix elements index so I am Jay I hope you know this format this is General python then we'll get to packing this button I'll just use pack for this not Grid or place I'll simply black back this button so I'll write button dot pack I'll give some padding pad x equals five y equals 5. so that there is space between each element of the Matrix and also there is space between the text and the button and then I'll call in the main Loop I'll write when dot main Loop as you had expand and fill in pack you have column configure and row configuring grid I want the buttons to increase in size just as the screen size increases so I'll write when dot column configure so you can see what all arguments it requires so first is the index so of course index is the row all column number then you have Min size which will given the minimum size of the row height and column width in pixels okay and then you have weight okay so weight is the rate with which the size of the button or size of the specified widget would increase with what rate so I'll give it to be one I want all the grid elements to increase with the same rate as I increase the screen size okay and I'll give in the bin size for column configure to be 75 then I'll also have row configure so I've given the index I and weight equals 1. and the minimum size Let It Be 50. so we're good to go let's run this and let's see how grid works so you can see that the screen size is not little it's there's a proper grid because we have already specified the minimum size using column configure and row configure there is a specific size of the screen because there is a minimum size of the buttons and when I resize the screen they grow in size automatically the button Size Doesn't grow but they are rearranged on the entire screen properly so that's it for grid that's it for the geometry managers I hope you understood everything the place pack and grid widgets they are going to be of great help in the upcoming videos so you really need to get a grasp of what was going on throughout this video thank you hey everyone today we're gonna talk about canvas widget in painter it's going to be very easy and simple we will just see some functions provided by the class canvas is basically used to draw crafts and charts to get text or images on the window we will see drawings in simple figures on the canvas let's start with it so from winter import Star that's a very convenient way then I'll have my window I'll write when equals TK and I'll also given a title I'll write win dot title that the title be canvas okay then I'll add my widget so my widget would be canvas I'll write canvas equals canvas and where do I want my canvas I want it on my windows all right win for master so basically canvas is a rectangular area where you can draw okay so you have the height and width for canvas I'll given the width to be 500 and height to be 500 I'll also given a background color Let It Be PG equals sky blue you can also have a cursor for it so let the cursor type be dot box you can give an arrow circle clock cross exchange heart as a cursor type there are a lot of cursors in Victor so you can see how many arguments you can give in for canvas you can have Border Water width background highlight color insert border with Etc so I'll just given these parameters and then I'll pack this visit I'll write canvas dot back then I'll get on to creating the figures so first of all I'll write canvas dot create Arc I've given the X1 y1 and X2 Y2 coordinates so that's basically the starting landing position so I'll write 5 comma 10 and 100 comma 100. then I'll also create a line a simple line that is parallel to the xaxis I'll write canvas dot create line now given the starting and ending position 0 comma 80 and 500 comma 80. so you do not need to specify the X one by one pair and X2 Y2 pair separately think there knows how to fix the coordinates if they are given in the correct order similarly to draw an ellipse or an oval I'll write canvas Dot create oval and I've given the top left and bottom right coordinates of the rectangle in which the oval would be contained so I've given 200 comma 200 and 400 comma 400. sorry then I can also given a text so let me use this as the heading for the canvas I'll write canvas dot create text the starting position would be 250 comma 10 and the text Let It Be using you can also given bitmaps you can also draw bitmaps so I'll write canvas dot create bitmap and let it coordinate let the location for the bitmap be 210 comma 50. and bitmap equals Quest head so you have a lot of kind of bitmaps you can take error gray 75 R class info warning question I have taken Quest head then uh you can also try creating a polygon so I'll write canvas dot create polygon to create a polygon you would need the corner coordinates of the polygon so I'll make a list for that I'll write points equals I'll make a list so I'll try to make a hexagon so let the coordinates be hundred come a hundred 120 comma 100 140 comma 120 120 comma 140 100 comma 140 80 comma 120. so there are six pairs and 12 points okay so for the argument of create polygon I'll write points and I'll fill with color pink so that's all I'd be drawing for right now I'll call in the main Loop I'll write when dot main Loop so let's run this and check our canvas so as I run this you can see that the screen is off a specified size that is 500 comma 500 the canvas size and if you expand it you can see that the canvas is not extended okay let's do a specified size you can see the arc you can see the bitmap you can see the line you can see the hexagon you can see the oval so the oval turned out to be a circle because the coordinates that we gave and were 200 comma 200 and 400 comma 400 they are the coordinates of a square not a problem and uh you can also notice the kind of Arrow we have within the canvas outside the canvas it's just the normal Arrow but inside it it's a DOT box cool so that's it about drawing on a canvas you can make a real canvas like a paint app using canvas pattern but it requires events so since we are not still done with events in Winter we would do that later you can check out how to get images on a canvas try to do that and also try to make some complex shapes on the canvas I hope you will be able to do that thank you hey everyone today we will be talking about radio buttons and check buttons there are another type of widgets they can be used while making a form so this is a very simple program to make it a bit interesting what I would do is I would given commands to these buttons whenever the buttons would be filled in the specified function would be called and the function that I would Define would declare another tincter window and show some message for that I will use canvas widget we have already discussed it in the last video so let's start writing the code for it from Tinker I'll import star and I'll have my window master window I'll write when TK brackets I will also give in a title I'll write win DOT type 2. let the title be radio buttons cool then I will have an INT variable so I'll write V equals into r so this interval would be used to control the variable value for the radio button or check buttons it would be used to set its current value option now this entire function can hold integer data where we can set integer data and we can even retrieve it using the getter and Setter methods for right now just remember that V into one is used to set the value of radio button or check button okay now I will have my radio button I'll write radio button and I want my radio button on the window so I'll write win and the text that I want is radio button one and variable I will give in to VV and let the active background be pink and active foreground be purple and the command I told you I'll be giving in a command so the command name would be free okay so I'll Define the spray what pre would do is it would show up another window with the text value accepted now how I would do this I would use canvas and create text function by canvas so I'll write wind equals TK here I have another window for tinker I'll write C equals canvas where I want the canvas I want it on the window so I've given wind and background color let's be light cream then I'll pack this canvas I'll write C dot pack then I will create text I'll write C dot create text let the coordinates be hundred comma 10 let the text be value accepted I'll fill in with purple then the font that B16 cool then I'll run the main Loop I'll write wind dot main Loop okay now let's get back to the main code I have given three as command and now I will use grid for this because I want the radio buttons in a specific line or a row so I'll write dot grid row equals 0. I will have another radio button so I'll write V2 equals into power radio button then text equals radio button two variable letter pv2 active background let's keep it the same as above then command free and for grid now the row number would be one because I want it in the next line so I'll write dot grid row equals 1. similarly you can have the check buttons they are very similar it's just the difference of the symbol so I'll have variable one equals into r ack button window where I want it I want it on the window and text check button one variable is wire one and again I'll given grid I'll not pack this I'll use grid and row Let It Be three if you're given the same row number then the things would overlap and you would not be able to see the radio buttons so given a number greater than one or zero then I'll have another variable if you wanted to print wire like button when text equals check button two variable Y2 and grid row okay then I can run the main Loop twin dot main Loop so let's run this and let's see if everything works as we have defined it if we can call on to 3 as we given the value for radio buttons so I can see the radio buttons and check buttons on the window and when I click on the check buttons they get checked nothing else happens but when I click on the radio buttons I can see another window popping up with value accepted message and same as with the other radio button if I click on it I can see another window so we could actually given the command and execute it properly so giving in this command also helped you in practicing canvas once that's it about radio buttons and check buttons you can check out once what all arguments we could give to radio buttons or check buttons thank you hey everyone so to display text on the tincter window we just have learned about the create text function in canvas but we also have label and message to print a message on the screen to get text on screen so we haven't discussed that yet that's what we are going to talk about today we will learn about the label and message widgets there is just a little difference between label and message let's write some code to check that out so from thinker import Star and I'll have my window right when take care packets I'll give in a title I'll write when dot title display text let the title be display text now I'm gonna add my visit that is message and I will given a variable I'll write my message equals message and where do I want that I want it on the main screen so I'll write when comma what is the text that we want to display so the text equals foreign we are learning tinker cool and then we'll give in a background color I'll write PG equals I think okay then I'll give an aspect so aspect is the ratio so basically it's aspect ratio it's the ratio of width and height in percent the default is 150 which means the width would be 50 percent greater than the height of the message box so you can think of on your own what aspect you would give in I will give in an aspect of 500 and then I will give an border with it will be 5 PD equals five I've also given a type of water relief equals rich I've given a padding fad x equals 10 just along the xaxis okay also the foreground let it be dark blue I can also given a font Let It Be ink free 14 and italic so that's the way you can given a font that's how you describe a font in tincter then you can just look up what all arguments you can given for message so we have already described master we have not talked about anchors so anchor is used to decide where the text should be placed in the message widget it can be North North East the top right corner east south east south Southwest or Center the default is Center do not get confused between justify and anchor anchor is for position whereas justify is like alignment okay then we have aspect we just discussed it we have decided the background and water and the font for round color too we know about justify we can given a padding pad by and Pat X we know about relief we know about text and you can also given the width but I have not given it that's fine I have already given in the aspect then I'll get to the label I'll write label equals label so for the master it would be win again and then text Let It Be label which it does not allow multiple lines okay so this is a fact label widget would not let you get a long text in several lines there is no line wrapup option so it will just cut off the text that does not fit into the specified height and width so if you have mentioned a smaller size the text will just disappear and not all the text would appear on the screen so this is one difference between message and label widget there are many but this is a major one then I will given the Border size Let It Be 8 let the background be sky blue and I'll have a cursor for this at the cursor the cross foreground Let It Be yellow and I'll also given a font here right Georgia 18 italic relief raised height let it be two and I'll not given the width let the label widget decided on its own according to the text now I'll pack this but first I'll pack the label then I'll pack the message okay now let's see if the packing order affects the order of display or is it the order of defining the widgets that decide in which order the widgets would be displayed so I'll write down label dot pack I'll simply use spark and then I'll also pack the message widget dot back now I will call the main Loop win dot main Loop fine let's check out how the label and message widgets work hey everyone today we're gonna talk about the menu widget in painter it is basically to create a menu bar or a list like menu there is nothing complex about it just try to understand how things are working as we write the code so from Tinker import Star and I'll get the window I'll write one equals TK are also given the title I'll write win dot title let the title be menu then I'll add the widget so this widget would be declared with a variable menu which will be the main menu and that would contain the sub menus to be displayed so I'll write menu equals menu and where do I want this menu on the window on the master window so I'll write when so I'll have this main menu where all the other features or objects will be contained like this is the main list that will contain elements with sub lists now I would need to add this to the master window so I'll write dot config menu equals menu this config function can be used to overload if you have an object in thinker that is already configured and you want to edit some of those configurations we use config now we'll create the elements of the main list so I'm gonna create a list with picking tools the size of the tools and then its color so let's do it so first would be tool equals menu and within brackets you can see what all configurations you can given to this menu widget so for master I'll give menu I'll have given a background color Let It Be Gray let the foreground be black I'll also given active background Let It Be Skype okay then I need to add this tool object to the main menu list okay so I'll write menu the variable menu dot add Cascade that is how you add any object to the main list main menu and label equals tool and menu equals tool okay now I'll be adding some options to the tool object so a right tool dot add command you can also add in check buttons and radio buttons but we'll just stick to command for right now and label equals pen then I'll add some more options I'll write tool dot add command label equals brush then tool dot art command label equals pencil then tool dot add command label equals eraser and command equals so I'll given a command to this whenever you click on this option this given command should take place so command would be win dot quit then I'll have another menu object the size so I'll write size equals menu and it's the part of the main menu so I'll write menu in Brackets then I'll add this size objective menu so write menu dot add Cascade label equals size and menu would be I will not decorate this I'll just keep it to default to check out what the default is then I'll add the options to the size object so I'll write size dot add command and label lp1px and similarly I'll do for three four and six PX so I'll just copy this down I'll write 3px 4px and 6px cool I'll have another element for the main menu I'll write Colors equals menu and I'll give it an octave background for this let it be light green and the background let it be light yellow okay I'll add this colors to main menu I'll write menu dot add Cascade label equals colors menu equals colors and I'll add the options to Colors the right colors dot add command label equals red colors.ad command label equals yellow and colors dot add command label equals and I'll call in the mail Loop right pin dot mean now you can see that even for these options you can given configurations you can have a background color a foreground color a different active background Etc please check them out too they'll help you practice now let's check out how the menu Works how the menu widget Works how it looks like so I have my screen and you can see tools size and colors on the menu bar they are the part of the main menu and when I click on each one of them they display a new menu okay so that's the sub list so I hope you get an idea of how the list was how the menu was organized and you can even add further lists so please try doing that too that would be your practice and when you're quite comfortable with menu you might also look up for menu button try to pick out the differences and benefits of menu button what options menu doesn't provide when your widget doesn't provide but the menu button does so that's it about the menu widget thank you hey everyone today we're gonna talk about message box and thinker so without declaring a new screen you can have one but its functionalities are limited so let's check what I'm actually talking about basically I will declare buttons and the commands would contain functions that call the message boxes we can have many types of message box as per our requirement we can have the show info show warning show error ask question ask okay cancel ask yes no ask retry cancel these all are functions available in the message box module now we'll check them one by one let's get started so I'll write from Tinker import Star and also from Tinker import message box you need to import this message box module separately and then I'll get the window I'll write win equals TK brackets and I'll also given a title I'll write when dot title let the title be message box and then I'll also specify the size of the screen so I'll write win dot geometry 400 cross 400 in double quotes so that's how you can specify the size of the screen this is a new thing then we will Define the functions one by one they would be given as command for each button so first of all I'll use the show info function so I'll write Def show info kits and I'll write message box dot show info so the first string would be the heading of the message box so I'll write important because this is just an information and for the message I'll write this might take a minute okay then similarly I'll Define some more functions I'll write something for show error so I'll write Def error and message box dot show error the title would be error and the message would be the specified path does not exist because this is an error you can given any messages as per requirement then I'll have something for ask question I'll write def Q message box dot ask question and I'll write title h and the message would be are you 13 years old or above question mark so and ask question function you'll have two options to select from yes or no and accordingly you can select then I'll Define for ask OK or cancel I'll write def cancel you can name the function anything is just what function you call then I'll write message box start ask okay cancel and let the title be delete and message PR you sure you want to delete question mark then I'll have the function yes no it's all right deaf yes no rockets and I'll call the ask yes no function write message box dot ask yes no and let the title be confirmation and the message B are you sure you want to proceed so ask yes now also gives you two options to select from yes and no so you might think that ask yes no and ask question functions are same but they're not the ask question returns yes or no string but the ask yes no function returns a Boolean true for yes and false for no okay then you also have the ask retry Council so I'll Define a function for that too I'll write f retry now for this function you will have two options to select from retry and cancel now if you click on retry this ask retry cancel function returns true and if you click on cancel it returns false so just to give you an idea of what is happening I'll declare a variable for this function which will store this Boolean so I'll have R equals message box start ask retry cancel let the title be failure and the message let it be to you want to try again question mark and if R is true f r then I'll print retry I'll simply print redrive on the console and else I'll print cancel then I'll move on to the next function I'll have this show warning function so I'll write F1 and message box dot show warning let the title be warning in caps and let the message be this might lead to malfunction of the app okay now I have all the functions for all the buttons now I'll declare the buttons one by one and assign them these functions we have seven functions so we'll have seven buttons so let's start B1 equals button and where do I want my button I want it on the window so I'll write win text equals information because first I'll have the show info command so command equals show info background Let It Be sky blue foreground let it be white active background let it be light green then I'll place this button I'll write P1 dot place and x equals 100 y equals 100 so I'll simply given a coordinate and similarly I'll have all my buttons so I'll just copy this and edit the next ones so for B2 I want it on the screen so I'll write win as Master then text would be error command would also be error and the rest Let It Be same I'll change the coordinates to 100 comma 200. right 200. book then in B3 I'll have when text Let It Be retry command would be retry I have my retry function and then let the rest be same let the decoration be same for the button and I'll have the coordinates as 100 comma 300 so y would be 300. then again I'll have B4 I'll change the text to question command will be que and I'll change the coordinates to 200 comma 100 so X would be 200. y would be hundred then B5 Let It Be cancel command will be cancel and the rest would be same then the x coordinate Let It Be 200. why let it be 200. then I'll have B6 text Let It Be yes no yes or no and command Let It Be yes no coordinates will be 200 comma 300. then B7 let the text be warning command will be warned coordinates will be 300 and 100 okay and I'll call in the main Loop all right when dot main Loop I hope there is no confusion the text for buttons is what would be displayed on the buttons the command for the buttons are user defined functions which contain the message box widget functions okay so you should be very clear about all this now let's run this and see the buttons and check out the message boxes how they are popped up on the screen so I have my screen and I can see the buttons as defined and I'll click on each one of them I get a sound too so this important is the title as defined and this might take a minute so this I symbol is there and I have to click on OK because that's the only available option and I have question and there's a question mark symbol I have two options so there are differences in each function and for warning I have an exclamation mark symbol then for cancel I have a question mark again but the options are different I have okay cancel then for retry there is retry console and when I click on retry I can see retry printed on the terminal because that's how I defined it now that's pretty much it about the message box widget thank you hey everyone we have covered almost all the widgets in thinker we are left with a few so let's just take a look at them we will discuss the scale scroll bar list box and spin box they are very easy to understand and there is nothing complex about them so I'll just get all these widgets on the same screen and let's start writing the code all right from Center import Star you don't need to import any separate modules for these then I'll have my screen I'll write when equals TK and then I'll given a title I'll write when dot title and let title be scroll so I'll add my first widget I'll give the name scale half the variable scale equal scale that's my widget so it is like a slider that lets you pick a value and it has two methods get unset so let's just give the options for this where do I want the scale I want it on my window so I'll write when and you have this from N2 to specify the range of this slider so I'll write from equals 0. two hundred okay while given a background I'll give it to be light yellow then a foreground let it be black you can give an orientation for vertical and horizontal so I'll give an Orient equals horizontal then I'll given a label so let the label be scale widget there are many more options like the trough color the slider relief the kind of slider you want you can give it a command you can have a font description you can have resolution you have slider length you can specify the length of the slider then you can specify the state of it you can have the cursor then the Border Etc so you have given enough options and let's pack this widget I'll write scale dot pack cool now I'll go to the spin box I'll write spin box equals spin box and for the arguments I'll give Master equals win again we have from N2 so from 0 to 10 you can also given a negative number for from you can start from a negative number you can go to a negative from number but there should be a difference there should be a positive difference between them so you can given accordingly the range but we'll do it from zero and then I'll give in a background color I'll write PG equals light gray FC equals Orange and let me give an a font I will give the font to be Ariel 12 italic it's just a number you can even not given the font for a spin box too we have a lot of options some are same as the scale widget but there are some things that are different so you have button up relief and button down release then you have this increment parameter it can be a float then you have this x scroll command option so you can given a command that you want to take place when you scroll through the values that is when you increment or decrement the numbers in the spin box and I'm done with the widget so I'll pack this I'll write spinbox dot back then I'll go on to the scroll bar I'll write scroll bar equals scroll bar so for argument I have win as master so let's just keep the scroll bar simple it'll just take up a side and I'll pack the scroll bar I'll write scroll bar dot pack side equals right fill equals y so I'll pack this at the right side of the screen and I want to fill the yaxis completely with the scroll bar okay then I'll get my list so I'll have this variable list equals list box this is another widget and when as master now what I want to do is I want to scroll through the list as I move my scroll bar so I'll write y scroll command equals scroll bar dot set so I'll set the values according to this file scroll command okay now I'll also given a font I'll give it to be Georgia 20. it's for the list okay and I'll have the background color to be sky blue now there are many methods associated with the list box widget to insert the values in a list box we would use the insert method so what I'll do is I'll write for I in range 51 I'll just make a list with 51 lines I'll write list dot insert end so I need to give in the index and end word represent the point immediately after the last character entered by the user so and for the index and for the element I'll write string I Plus thought we are checking the list and scroll bar together okay now outside the for Loop I'll pack this widget I'll write list dot pack side equals right fill equals y expand equals true okay so that'll give me a good format now I want to configure the scroll bar again because I want to add the list to it okay so I'll write scroll bar dot config we have already discussed the use of config config is basically for overloading and I'll write in the argument command equals list dot y View okay so this tells the scroll bar that whenever the scroll bar is scrolled through the list should also move along the wire view okay the yaxis now I can call the main Loop I'll write win Dot main Loop and let's just run this and check out all our widgets if they're working together and working properly as we have arranged them so I have my scale widget and you can see how this bar moves and gives us values then you have your spin box you can increase the value first and then decrease it but the values will only go from 0 to 10 we also have the scroll bar this thin line along the right of the screen and as you scroll As you move this scroll bar you can see the list moving up and down along this we have the list elements as we specified them and that's pretty much it for this video I hope you understood the widgets thank you hey everyone today we're gonna talk about the events and event handling in thinker we would focus on the buying function and talk a little elaborately about the main Loop so events handling is an important part of thinker module in this video we would try to understand the basic things associated with it and in the next video we would see a related example okay so we would try to make the program a little interactive by giving user inputs from the keyboard so that would be very much done by the event handlers okay so let's start writing the code for it I'll import or I'll write from thinker import Star then I'll get my window I'll write when equals TK then I'll given a title I'll write win Dot title let the title be event handling okay so I told you I'll be telling you a little more about the main Loop so whenever you create a tinker application we have always been calling the main Loop okay at the end so why do we call the main Loop what the main Loop actually does it checks whether an event has occurred or not it checks for an event occurrence of an event so if there is some event that has occurred then the written code the code that the user has given would be executed so as the main Loop has checked for an event occurrence the program written will be executed as a response okay so you need to write the code that would be executed in response to an event okay so you write these functions called event handlers for the events that you use in your application okay now I would be creating a very similar event handler for every time I press a key on the keyboard I should get that key printed on the console okay not the printer window but the console so what I'd write is I'll write def so I'll have a function for that I'll write def pressed key and in Brackets I'll write event I'll give event as an argument and I'll write print event dot car so that simply completes what I just said I want to print whatever I clicked okay so now we would move to the bind function to call an event handler whenever an event occurs on a widget or function or method we use the bind function okay the event handler is said to be bound to that event because it's called every time the event occurs okay and how do we do that we'll just write for our window when dot bind okay and the first parameter would be the sequence so it's just a string of the form event name okay I'll just write it down I'll write here the event name is key so in double quotes I'll write key and I should give this less than and greater than sign rounded okay that's how you write the event name and this event name can be any of tincter's events so there are many events in inter we have enter leave button one button two or key so here it is key and then we'll have the function name okay you can see for bind we have to give sequence and then the function okay so the event handler basically so I have pressed key right pressed key as the function okay so that completes my bind function and then I'll run the main Loop I'll write win dot main Loop now whenever the main Loop would run it will check for the event so I have declared my event here as pressed key function okay I have given it as the argument and whenever this event will occur what is my event the event is the user giving an input from the keyboard while by pressing a key okay so whenever this event occurs this function would be carried out okay this part of code would be executed as a response to the event occurrence okay so that's what should happen now let's check if that really happens whenever I click on the key I should see that key printed on the console okay let's do that so I have the sphincter blank screen okay and I'd not do anything with the screen but I just start typing something and that should be typed out on the console automatically without me taking the cursor over there okay so let's do that I'll just press D and there it is you can see it on the console then you can see t and then you can see Q and let me press a numeric let it be one I'll press shift one okay and then I can press M and I can given any character okay this is semicolon and an inverted comma so that's it about this program I just wanted to show you how interactive tinter can be and we'll see a related example in the next video thank you hey everyone we have already discussed the event handlers but we are left with the Tinker events let's discuss a few of them in brief so first up we have the button event when a mouse button is pressed with the mouse pointer over the widget we make use of this event then we have three parts of Wows the middle the right and left so accordingly we have button one button two and button three okay then we have motion we would be working with this motion event as an example we would see an example related to this event so we have B1 motion B2 motion and B3 motion for the current position of X Y members and then we can have button release we can have double button we also have enter so enter is for telling that the mouse pointer has entered the widget we also have leave as a complementary to enter so this Leaf event would be used when the mouse pointer leaves the widget okay and then we have focus in on Focus out so focusing is to focus on a visit and focus out is to move to other widget move the focus to other widget okay then we have return we have key we have shift up and we have configure so these were the Tinker events while understanding these event handlers we use the event key and this time we would use the motion event so let's write a program for it so let me tell you what I'd be doing so I would write a program for getting the current position of mouse on a widget only on a widget okay so let's do that so I'll write from thinker import Star then I'll have my window I'll write one equals TK then I'll given a title I'll write win dot title brackets and let the title be event handling let the widget be canvas okay so I'll have C equals canvas and where do I want the canvas I want it on the window so I'll write win comma background color equals pink and width Let It Be 500 and height Let It Be 400. okay and uh now I'll use the bind function we discuss the bind function last time so bind is to call the specified function whenever the specified event takes place now I would specify two arguments one would be the event and one would be the function so I need to make that function 2 but before that I'll write C dot bind and now let's define the function I'll also name the function as motion so I'll write def motion and I'll given the argument event we did this last time too because I want to check the event if the event has occurred and the related things to the event okay so I just want to check the current position of the cursor on the widget so I want to print that so I'll write print brackets f current position of cursor is in curly braces event dot X comma event dot y and I'll put this in a bracket so that would get me the current position of the cursor and about this F format this is a very basic way of getting values or variables within a string in Python so I hope you know about that and then I'll just simply write return in the function okay so I can get back to the main part and I'll give in the arguments I'll write within single inverted commas I'll write motion and I'll also given the function to view motion okay that I just defined fine now I'll part this I'll write C dot pack and I'll run the main Loop look so let's run this and let's see if we get the Mouse coordinates so I have the spring screen and whenever I move the cursor over it I get the positions of the cursor constantly and whenever it stops the output has stopped but if I increase this screen and you can see that outside this widget there is no such output scene but on this widget I can get the current position of the cursor so that's it about the event handling so we have covered a lot of tincter and the more you practice the more you get the concept clearer so in the next video we would be seeing some application of tincter would help you implement all that you have learned thank you hey everyone till now we have learned a lot about inter widgets and their functionalities it's time we put them to use so today we would make a simple dice on the Tinker window using the random module and the button widget it would be a six sided die so on rolling a sixsided die you get a number and that's what would happen here we would get a number in between one to six randomly picked by the random module so basically whenever I click on the button I should see a number randomly displayed on the screen so let's get started I'll first import tincter or rather I'll write from printer import star and I'll write win equals CK and win dot title let the title be dice and I'll have to visit I'll add a widget so I'll write button equals button where do I want the button I want it on the window so I'll write when and given the width to be 20. and background to be light yellow then I can given the foreground to be blue and I'll leave the command for right now just write command equals and we'll talk about it later a little later then I'll give an a border of three and relief Let It Be sunken an active background let it be white and the text is played on the button that'll be roll in cups okay then I'll pack this I'll write button dot back now I would also need label widget in order to display the chosen number by the random module so I'll write label equals label so that's the widget and when width let it be 20 so that the button and label are in Sim alignment and background color Let It Be sky blue foreground that will be purple okay now I will Define a function that would assign the value of text parameter of the labels widget so I'll write Def IC number so in this function a random number would be picked in between 1 to 6 and also that number would be assigned to the text parameter of the label so that would be displayed on the screen so how would I do that it's very simple so I have def pick num and I'll write label text so this is a dictionary label object and I'll assign the value Str ing random.randint one to six okay so a sixsided die has six numbers on it so I have used round in so that I can include both one and six so this piece of line picks a random number converts it into a string then assigns that to the text of label now I would have this function as the command for the button widget so this is a dictionary label object so I have simply accessed the text parameter of this label widget that I created just now okay and I have assigned it this value this randomly picked string okay cool then I need to pack the label too so I'll write label dot pack so I left the command of button widget empty now I'll just given the function pick num okay so whenever we click on the button we are calling the pick num function and it assigns the labels text a random number in between one to six okay so we're done with what was required and I can simply run the events Loop I'll write bin dot main Loop so let's run this and let's check if we get randomly picked numbers so I have my screen and when I click on roll button I can see new numbers appearing random number is appearing so that's the use of the random module and it's working quite fine so here we combine two widgets together to get an application you can do the same and the more you practice the more you'll get better at it the more easily you'll be able to handle the widgets indenter I hope you understood this example if it was simple thank you hey everyone today we would create a simple app that converts a temperature in fahrenheit to celsius if I talk about the main things required we would need the function that simply converts Fahrenheit to Celsius that formula then we would need the user to input the temperature for that we would use the entry visit we haven't talked about it yet but it's very simple to use and we would also have a button widget which gives the output on being clicked okay so it is a very simple app let's get to the code right away I'll import inter so I'll write from thinker import Star then I'll get my window I'll write win equals TK I'll have a title I'll write when dot title let the title be temporary sir converter okay then I'll start adding the widgets first I'll add the frame on which I want that text box so I am declaring a frame for it because I also need to put in the label widget I would need the symbol of degree Fahrenheit so I would add that label to the same frame okay so I'll write frame equals frame and where do I want it I want it on the window so when as master and I'll pack this I'll write frame dot grid and row equals 0 and column equals 0 and I'll given a padding I'll write par x equals 10. so there is no overlap on the screen boundaries okay cool then I'll get that entry visit that text box how do I do that I'll write temp one equals entry so that would allow the user to enter any text into that text box okay and for the arguments where do I want it I want this entry widget on the frame so I'll write frame and width let it be 10 cool then I'll use grid I'll write temp one dot grid row equals 0 and column equals zero same as the frame okay and I'll have an F variable for that label for that symbol of degree Fahrenheit because I need to tell that this entered number is in Fahrenheits and that number would be converted into degree celsius so I need to given the units so I'll write f equals label and I want it on the frame so I'll write frame comma text and this is something different you might know it you might not know it but I can easily get degree Fahrenheit symbol by this so I'll write in capitals degree Fahrenheit and there is a slash n before this and it's in inverted comma School now I'll pack this too or should I say use grid so I'll write F dot grid and row would be 0 and column would be one okay simple now we are done with the frame now I would need the button that would convert or that would call on to the function of conversion okay so first let me get the button I'll write button equals button and window I'll not get this on the frame I'll just get in on the window okay and text equals a right Black Arrow so how can I do that the similar way I got the degree Fahrenheit symbol you can get numerous symbols like this so here on the button I'll get a right words Black Arrow so I'll write an inverted comma slash n and right words Black Arrow fine for the command I'll Define the command in some time first let me make the function and I'll give in a background color Let It Be sky blue okay that's it so let me Define this function Fahrenheit to Celsius that would be my function so I'll write Def Fahrenheit to Celsius and brackets so I'll write f equals temp one dot get so whatever you entered here in the entry widget you'll get it over here okay that would be the value of this F variable okay so then I'll get the C that stands for Celsius right now I'll write 5 by 9 so this is the simplest formula for conversion of Fahrenheit to Celsius so I'll write f and minus 32 okay I'll also convert this to float because there is a five by nine Clause so I'll write float and now I will display the C variable as the text of another label widget so let's do that I will have temp two which would be the converted temperature the temperature entered in degree celsius okay so I'll write temp two this visit is not this variable is not still declared in the main function we will do that in some time so temp 2 in Brackets text equals f and inverted commas round C comma 2 to 2 places and accordingly press is closed I'll also need that symbol of degree Celsius here just like we got the degree Fahrenheit symbol there I would use that here too so I'll write slash n and degree Celsius in capital so now I'll get to the main function again I'll write up this command I'll write Fahrenheit to Celsius and I'll use grid for this button I'll write convert button dot grid row equals zero column equals one and pad y equals 10. fine and I need to define the stem 2 also okay so I'll write them two it's the label initially let us keep it as degree celsius symbol and then it would be reassigned every time we click on that button after we enter the value okay so we have temp to equals label and and when text Let It Be slash n degree Celsius fine and then I'll use grid to place it Right Temp two dot grid row equals 0. column equals to and Pad x equals 10. same so I'm done with the app I'll call in the main Loop I'll write win dot main Loop and run this so I have my screen again this temperature converted and let's try for 100 degrees Fahrenheit because we know it's 37.78 degrees Celsius so I'll just write 100 and nothing else and I'll simply click on this button so I have 37.78 degrees Celsius so this temperature converter is working fine let's enter some other value let's enter zero zero degree Fahrenheit is minus 17.78 degrees Celsius and this would even work for negative values of Fahrenheit so I'll write minus 11 degree Fahrenheit so it would be minus 23.89 degree celsius cool so that's it about this app hope you understood everything thank you hey everyone another application made using thinker can be a text editor we haven't yet explored the file dialog module by tick tock it needs to be imported separately the module provides classes and Factory functions for creating file or directory selection windows we have native loads static Factory functions convenience classes convenience classes help in creating files or directories from scripts while static Factory functions are user responsive so the text editor that we would make would have two static Factory functions open and safe so let's start making the application right away I'll import into I'll write from thinker import star and from tinker Dot file dialog import ask open file name ask save as file name we would use the ask open file name for opening a file for editing and the ask save as file name for saving the current file as a new file now I will get my window I'll write window equals TK and window.title so the title can be text editor fine now I'll get a text widget to insert multiple lines so that I can write on it a text editor needs inputs so this is how I'll give them the inputs and even for displaying some text I need a field so I'll use the text widget so I'll have this variable text equals text where do I want it I want it on my windows I'll write window for round I'll set some foreground I'll give it purple the foreground and background equals light yellow that would be a nice combination and font Let It Be calibri 14. fine then I'll park this I'll write txt text Dot back I will get a menu now to have to open and save as options just like in a text editor so I will name the menu file for that I should draw it menu equals menu and on the window so window now I'll configure it I'll write window.config menu equals menu and now file menu equals menu and in Brackets again menu now I'll add the options first to the main menu I'll write menu dot at Cascade label equals file and menu equals file menu then to the file manual I'll add open and save as so I'll write file menu dot add command label calls open comma command for now I'll leave it blank and file menu dot add command label will save us and command again let's leave it blank for right now and I'll call Window dot main Loop fine now I need these two functions open a file and save a new file so the first function to open a file let's define it I'll write Def open file brackets and I'll write file path equals ask open file name file types equals in a list in a tuple text files comma the extension for them star Dot txt and again comma under table all files comma the extensions this statement will open a dialog box so that the user can select the file to be opened since we are working with only text files I could have only given the Tuple text files but what we have written now lets you access all the kinds of files that can't be presented or read by the text editor now after the dialog box is opened it might happen that the user clicks on the cancel or closes the window so for that case I'll write if not file path if no file path is selected you return no further code is executed otherwise I'll delete whatever is there currently on the text editor I'll write txt dot delete I hope you remember txt was our text widget and I'll delete whatever is there on the text editor currently from index 1 so 1.0 till the end fine now I need my text file to be red the selected file to be read so for that I'll write with open file path as an argument mode should be only read so r and you can pass an encoding UTF 8 as input file text is equals to input file dot red now this string as read is inserted in the text editor so I'll use the insert function of the text widget so I'll write txt dot insert and text fine and finally I should change the title of the window to the file path okay so I'll write window dot title f Simple Text Editor and file path so this is a python format for getting the values I hope you know this and okay now very similarly I should Define the save file function too so I'll write Def save underscore file and brackets okay so this would be for saving the current file as a new file firstly I need to create the file path to get the location of the file to be saved so I'll write file path equals ask save as file name default extension dot txt so how the file should be saved with the extension ta dot txt unless specified and file types again similarly in a list then in a tuple text files and the extension star.txt again you can given the all files or not it's your wish then all files and star dot star okay now again if the screen is canceled you do not need to run any further code for that I'll write if not file path return otherwise a new file is created the text on the text editor is extracted for the same so how would I do it I'll write with open I'll given the file path I already have it mode now would be W so that it is writable encoding equals UTF hyphen 8. as output file okay Now text equals txt dot get from 1.0 till index end okay the output file gets the text so I'll write output underscore file dot right text and again the title needs to be changed to file path so I'll write window.title if Simple Text Editor and file path and curly braces and that's pretty much it for the two functions now I need to pass these two functions as the commands for the two menu options so I'll write for file menu one command equals open file where the label was open and for save as I'll write the command save underscore file we are good to go let's run this and see if the text editor works properly so I have the window and please note that the title is text editor it would change later I have a light yellow background I have this file menu and I can have open and save as as options so I'll just type in something I'll write this is a tincter application a simple text editor and I'll save it now I'll click on file I'll click on save as and I have this popup window and it is asking me the file name so I'll name it as thinker and I'll click on Save now I'll again go to file and click on open I will click on tinker and I'll click on open so here I have my text that I just saved the title has also changed to file path so this was a simple text editor thank you hey everyone in this video we would make a simple paint application using tincter we would use many new methods and a lot would be from the canvas class obviously as we are working with paint don't worry it would be very easy so to make this application we would use the colors user module and just to make things more organized I would make main class that would be later called onto the screen let's get started so from denter import Star and separately from thinker import color chooser and ttk ttk you'll get the use of it later now the window declare plus its title so we have win equals TK and for the title I'll write win dot title feet up then I'll call on to the main Loop so when dot main Loop so I have the basic structure now the class main where I would be defining the functionalities of the paint app so let's get started I'll get the class I'll write class Main and first the init function definit for argument itself and master so this master is the window that when that would be passed on later to the main class and then I'll write self dot master equals master for initializing the window now I need to initialize a lot of variables to start doodling on screen like the color of my pen it's with maybe the screen background the starting position of the pen Etc so let's initialize the variables one by one so first is self dot color underscore foreground equals black so the pen color becomes black initially you can change it later and then self dot color underscore background equals White then also the initial positions so I'll have self Dot old underscore X equals none and similarly self taught old underscore y equals none also the pen width self dot pen width equals five I will call the straw with its function that is yet to be defined which would describe the layout and Main functioning of my paint app so I'll just write self dot Draw widget and brackets you'll just understand why I call this here later on when I Define the draw widgets function now I'll write self.c dot bind now here I have started using event handlers the bind function called for the canvas c c would be declared in the draw with its function now the argument for this given tangler bind would be P1 motion which is the mouse being moved while the left Mouse button is held down and the function called the other argument of the bind function would be self dot paint this would be another function in the main class and it would be used to draw the lines on the canvas so I'll write self.c.bind P1 motion selftaught paint okay now similarly I'll have another event for the button release to specify the button release of Left Mouse button I'll use button release 1 event and for the function of this event I will call the self reset it is another function in the main class I have to declare it it will indicate the end of one curved drawn okay so I'll write down cell dot C Dot bind and button release one self dot preset now I'll Define the paint function so I'll write that paint self comma e so e would be the coordinates of the current Mouse position I would fetch that repeatedly in order to draw a curve and if self dot old underscore X and self thought underscore Y is true it's if it's available then I'll create line I'll use the canvas function create line and I'll write self Dot C dot create line and as argument I'll given the Four Points the four coordinates so self dot old X and cell dot old y and e dot X and E dot y the current events the current Mouse positions X and Y coordinates the width of my curve would be given by self dot bandwidth as I have defined it in the initial function and fill equals self dot color foreground and cap style would be round it's just the style of the curve the line and I can do smooth equals true so we have already used create line in the previous videos and so I hope you don't need any explanation for the arguments given and I'll replace the value of old X with e dot X and cell dot old underscore y equals e dot y this would let me draw a continuous line and then I'll have the reset function again itself and E the current position of the cursor and I'll have self taught old underscore x equals none and self thought old underscore y equals none because basically I have ended one curve so that's what reset means now I'll start defining some options available some functionalities available with the paint app now the first one in the functions would be def changed width and I'll give self comma width so this would be used to change the width of the pen off the line and I'll have self.pin width equals width okay and I have clear canvas so I'll write def clear canvas self and I'll use the delete function from canvas self.c.delete and argument would be all that would just actually clear the canvas completely I'll also have the functionalities of changing the foreground and the background of the screen so first for the foreground changing I'll write def change underscore ft and self so self dot color underscore FC equals color chooser dot ask color equals self dot color underscore FC and 1. so color Chooser dot ask color returns a tuple that contains two values that represents the selected color the one at the zeroth index is the RGB value and the second element of this Tuple is the hexadecimal color and since our color uses hexadecimal values I have given the first element of this Tuple as the argument okay and similarly I can Define for background color I'll write Def change underscore PG and self and self dot color underscore PT equals color chooser dot ask color and color equals self color underscore PT and in square brackets one fine also I need to write self dot C PC and inverted commas equals self dot color riscore BG cool now it's the turn of draw widgets function so this would be like the real layout of the frame of the entire canvas of the entire screen so I'll write Def draw widgets self and now the screen should have the controls in one part and the canvas on the other so we need to divide the space available for that we use frames so I'll write self dot controls equals frame self taught master I hope you remember the master variable it was the screen itself the window and I'll give some padding I'll Write Pad X equals five part y equals 5. now on the left side I would need the controls like the pen color the background color let me put these in a menu also the clear canvas and exit option should be available there then do it just the size of the pen that is the width I would use a slider let's get all this on the screen first so starting with the label of the pen with controller I'll write text PW equals label self thought controls text equals pen width font equals Georgia 16. now I got this on the frame and not the window itself please note that and I'll put it in a grid I'll write text PW dot grid rho equals 0 column equals 0. then I'll have the slider I'll write selftaught slider equals ttk dot scale this is where ttk is used I'll have a different kind of slider it would not show me the numbers on the scale and so for the argument I'll write selftaught controls comma from equals five 200 2 equals hundred command is self dot change w so just to recall what changed W did it change the width of the pen it assigned a new value to the pen bit and the orientation of the scale of the slider would be vertical fine now we'll set the pen value bandwidth so I'll write self.slider dot set in Brackets self dot pen width okay now self.slider dot grid row equals zero column equals one now I'll pack my frame I'll write self.controls.pac and side equals left fine now here I'll declare my canvas so self.c equals canvas self.master where do I want my canvas on the screen on master so selftaught Master width equals 500 and height equals 400. background color equals self dot color underscore PG it was there in the init function so there is where from we pick the background color then I'll pack this canvas I'll write cell.c dot back fill equals both expand equals true we've already worked with canvas and frames and labels a lot of times so I hope you're getting what is going on it's just the assembling of all that we observed it's nothing difficult and now I need to get the menu so I'll simply have this menu variable equals menu cell dot master and self.master.config menu equals menu and I'll have my option menu to which I'll be adding all the options available so option menu equals menu in Brackets menu it's in the menu of the main menu okay I hope it is not confusing now to menu I'll be adding the option menu variable so how would I do that I'll write menu dot art Cascade label equals menu menu equals option menu now let's add the options to the option menu so I'll write option menu Dot add underscore command label equals brush color command equals self dot change underscore foreground similarly or the other functions I'll write option menu Dot add command label equals background color command equals self thought change background then option menu dot add command label equals clear canvas command close self.clear again option menu dot add command label equals exit command equals self dot master dot destroy so we have four options one for changing the pen color the foreground one for the background changing color one for clearing the canvas and one for exiting the canvas okay so we're good to go okay but we need to call in this main class so I'll write Main and in Brackets when sorry now we're good to go and let's run this so I have my window and I can see this menu and bandwidth so I'll start right away doodling on the screen and I can see the line I've drawn and I can change the brush color I can pick any color let me pick this and I have different color pen now let me change the width once so it has a better width now brush is thicker and I can change the background color too so here it is the background color is different again I can clear the canvas everything is gone and if I click on the exit option the screen goes away so the paint application is working pretty much fine this was it for the program thank you hey everyone in some of the last videos we have learned the basics of tincter all that we need to make an application with tint so another application that we can make using the tincter module is the ciphertext application so to actually encrypt and decrypt the message we would use the onetime pad module but to give it its UI interface we will use the tincter module if you are not familiar with cryptography and Cipher you can read about it in the description so as I told you we would be using onetime pad for encryption and decryption purposes let's import the module also this might not be preinstalled so you can just run the command pip install One Time Pad so you can write that in your terminal and you are good to go so now we would import that module I'll write import One Time Pad Also let's import the Tinker I don't want to write Tinker dot over and over so I will just import everything from denter and this is how we have always done it from thinker import star and then you get the window that is your GUI interface you will write win equals TK and also we can give it a title right win dot title encryption for so what I'd be doing is I would create a function for encryption decryption is similar I would discuss it but to execute it is your task so coming back to the encryption part I should have an entry box for entering my message that I want to encrypt or encode and another display box for the encrypted value to be displayed also I would need encryption Button as the function should only be called after entering a value so let's first create the entry fields and their labels we will have two labels one for entering the original message and one for the encrypted message so if you couldn't follow what I said you will just understand as I write it so I'll first have my variable for the first label for entering the message which is OG MSG so it's just a short for original message and I'll write label where do I want this label I want it on my window so I'll write when and what is the text that should be displayed in this label it is enter message then I'll put it in a grid I'll write ogmsg dot grid in order to display it where do I want this message or label to be displayed or to be placed that is on row 10th and column one working with row and column is more easy to visualize so that's why I've used row and column and I'll get another label that is for getting the encrypted message so I'll write emsg equals label when dot text equals encrypted message and then I'll put it in a grid again emsg dot grid and related to the position of the other label I'll put the row equal to 11. and column equal to 1 okay so there goes my label and the label would be the text that is already displayed on the screen so now we will create the text box using entry widget of tenter you might note that we haven't used the one time pad yet we will use it only in the encryption function so I want two entries one for entering and another for displaying result so I'll have E1 equals entry and where do I want it I want it on the window let's keep everything simple and try to understand what's happening then I'll put it in a grid again I'll place it I'll write E1 dot grid and row equals 10. now since you have placed one object somewhere on the screen relative to that you can arrange the other objects also okay so I'll write row equals 10 and column equals to okay and similarly I'll have the another entry E2 equals entry and when and E2 dot grid row 11. column two okay now finally I'd be creating the encryption button so let me write it down I'll write encryption button equals button and it is win I want it on the window so I'll write win and text should be Let It Be encryption because that's the function that would be carried out the ground color Let It Be Gray it's a normal button and for round let it be black and now for the command I just leave it blank because I have not defined the function yet and I'll pack this encryption button I'll write encryption button dot grid row equals 13. column equals to fine now I'll write win dot main Loop now let's just Define this encrypt message function so I'll write I'll just go above a little scroll up a little and I'll write def encrypt message and I'll have this variable message which will be the original message that would be encrypted that you want to encrypt and where will I get it from I'll get it from my E1 the first entry that I'd be making and how do you get that in tincter you can write message equals E1 dot get and brackets and then to encrypt the this message I can write I'll have another variable that will hold this value I'll have Cipher text equals One Time Pad dot encrypt this is an inbuilt function it will automatically encrypt the message that has been given as an argument I'll write message because that's the original message that I want to encrypt and I'll write run this fandom gives you what kind of a key you want so I just can have any random kind of key I hope you know what key is for a cipher text if you don't please read the description now I'll insert this value in the second entry that I created E2 so how will I do that I'll write E2 dot insert and 0 comma Cipher text the zero in the argument is for the starting position of this Cipher text from where you want the cipher text to be displayed so the command for the encryption button would be encrypt message I'll just type that down and now we are good to go let's check this once and encrypt the messages so I have the window now let me enlarge it a little and I will just enter some random text or message let me write hello and I should get something encrypted some kind of code for this hello okay so I'll write hello and I'll click on the button encryption so here I go I have some code some encrypted message some Cipher for hello so that's pretty much it about this program for decryption you can use the decrypt function in one time pad module and you can carry out pretty much the same what we did in this application thank you hey everyone in this video we will try to make a registration form using tincter there is nothing to be explained about it as done in some of the last inter applications it is just assembling all that we have learned in linkta this is more like a practice session so let's get started with the code right away from tanker import Star and also importing to Dot message box now I'll add my window root equals TK also I'll set a specific size of the window Let It Be 500 into 500 I will put that in inverted commas the form looks cleaner this way moreover it's been long we have used place to position objects mentioning the window size lets me manage coordinates easily then I'll also given a title I'll write shoot dot title registration form since we are making a registration form it would be registration form cool also let me give my form a little background so I'll write root dot config background equals hash f f e 6 f 0. now this should be an inverted commas also this is a light shade of pink you can also pick any random colors from Color Picker now I will make a very simple registration form it will have five entry Fields two for the complete name first and last name then a date of birth field a country field from which country the user belongs which will be your drop list a language selection checkbox and a radio button for gender selection okay so I'll just quickly declare all my five variables as string variables and if you cannot recall what string variables were they were usually used with the widgets entry and label since there are going to be many entries I would make use of string bar to manage them effectively I will not give in any arguments as they are directly contained in the master window so first name FN equals stringvar brackets last name Ln equals string bar again top the date of birth equals string bar variable equals string bar VAR C1 equals Java this would be our check box 1 for the language selection word to equals python VAR C3 equals C plus plus and then radio variable again a string bar this war variable would be used for country and okay I would also like this information to be displayed later on the console after I have submitted the registration form so I'll have a function for that I'll write Def print entry rockets and column first equals FN dot get so first would be my first name variable you can take any variables that's not a problem and then for the last name I'll write second equals Ln dot get dob1 equals Tob dot get variable 1 equals variable dot get War 3 equals vrc1 or 3 equals for C2 word 3 equals War C3 now these three were repeated because you would be selected something from the check box only one option and accordingly the option would be fair in later on okay now I'll have my variable 4 equals radio underscore War dot get cool now I'll just print it so how I'll print it just follow along you know this already right print f the full name is first in curly braces and second in curly braces with a space in between then print f your age is top one and curly braces again and print if your country is in curly braces variable one then again print f your selected programming language is variable 3 in curly braces again and print if your gender is in curly braces variable 4. now I'd be calling this function when I'd be done with my form filling so I'll also have this tincter Dot message box dot show info just to give the user a popup that your form has been filled so as the message I'll write congratulations this would be the heading of the popup box the message box and the message displayed in the Box would be user has successfully signed up now I'll start with the labels the text things and the entry Fields so let's start with the heading I'll have a heading registration form so I'll have a variable heading equals label where do I want it I want it on root the window I have and text would be registration form let me decorate it a little so I'll write relief equals solid width equals 20. font aerial 19 and pulled foreground is hash p30047 and background is Hash FF e 6 f 0. now I'll place the heading heading dot place x equals 90 y equals 10. fine then for the first name I'll have a variable F name equals label it's just the text not the entry field right now so label and root text equals first name and column width equals 20 font equals bold 10 background equals FF e 6 f 0. fine now I'll place it fname dot place x equals 80. y equals 70. fine then for the entry field of the first name I'll write EF name equals entry root text War equals FN okay now F inverse the string variable that we declared above I hope you remember this is how we have used it and I'll place it I need to place the entry field also so it should be on the same yaxis and so I'll write efname dot place x equals 240 y equals 70. now very similarly for the last name L name equals label root text equals last name colon width equals 20 font equals bold then background equals again hash FF E6 F0 so I'll place it L name dot Place x equals 80 y equals 120. now the entry field for the last name I'll just copy it from above and change the text bar equals Ln then I'll pack it again I'll just copy it the last entry field x axis would be same y coordinate would be 120 now fine then moving on to the date of birth label and entry I'll have date equals label root comma text equals DOB width equals 20 font equals bold and 10 background again would be ffe6 F0 and I'll place this I'll write date dot place x equals 80. y equals 170. fine then the entry field e d o b equals entry root and text bar equals top now I'll place it e t o p dot Place x equals 240 y equals 170. fine now I'll have the country and that would be your drop down list so first the label country equals label where do I want this I want it on the window so I'll write root so the text would be country of course text equals country width equals 20 font equals poles 10. for round equals ffe6 F0 you can just copy it from above and change the text part and country dot place x equals 75 y equals to 20. now I'll given a list for the drop down box and let's have it let's have the list now list equals let me give in some names of country Nepal India a miracle China doll Japan South Africa and you can given names of any countries and a lot more countries and I'll just make it a drop down list now how do we do it so drop list equals option menu it's again a tinctive function and root and variable variable would save the value of the list whatever was selected and where the values will be selected from the list so star list fine now to set the value I'll write VAR dot set select country okay now drop list dot config since the drop list values that is war can change so I need to configure the drop list and I'll just given the width equals 15. so I'll just place it drop list dot place x equals 238 y equals to 20. now again I'll have a label for the language equals label root text equals programming language width equals 20 font bold and then background same as above ffe6f0 and I'll place this variable language language dot place x equals 95 and Y equals 270. fine now I'll have the check buttons C1 equals check button root text equals Java variable equals War C1 dot place now here I'll be placing this all together without taking it separately and x equals 235 y equals to 70. just copy this entire statement twice because we have two more check buttons text would be python for the second one C2 and where variable would be rc2 and I'll place it somewhere else that is x equals to nine t and Y equals to 70. similarly for C plus plus VAR C3 and I'll change the x coordinates also fine now for the gender I'll have the label I'll just copy it from above because everything is same just need to change the text that is gender otherwise width font and background color they all are same and I'll place it somewhere else I'll write gender dot place x equals 73 y equals 320. fine now for gender I'll have radio buttons I can have male and female so R1 equals radio button root text equals mail variable equals radio underscore War value equals mail dot place x equals to 30 comma y equals 320. copy the same R1 make it R2 and text would be female also the value would change to female and x coordinate would change to 290. fine so I had all my five entries and I'll have two buttons now one to quit and another for submitting the phone so I'll have submit equals button root text equals submit width equals 12. background equals FF 4D 9 4 ground let be white command equals print entry and I'll place it x equals 130 y equals 400. I'll have the quit button so quit equals button root comma text equals quit equals 12. background and foreground same as buff and command would be exit and I'll place it x equals to 80 comma y equals 400 and I'll call in the main Loop to root root dot main loop it's good to go now we should not have any problem in the code let's run this uncheck it so I have the window the registration form I'll just quickly fill in some details you can see the labels and the entry fields for the first name I can fill in person one for last name I can fill in last name date of birth can be 12. slash zero four slash two zero zero one I can select some country see there's a drop list and let me select Canada programming language Let It Be python gender I'll click on mail and I'll submit so I have this popup box message box congratulations user has successfully signed up when I click on submit I have this printed on the console so this was it about the program thank you hey everyone in the last video we made a form a registration form that was very basic and the information attained from it was just printed on the console now in this video we will get that entered data in a table in a database we will save the information on the table so for that we have the SQL Lite model to carry out data related function now the entire program would be same except the print entry function let me copy the program I'll go to registrationform.pui control a control C and I'll space that over here Ctrl V INE now I'll import SQL lite3 and if you don't have the module you can always download it using the command pip install SQL lite3 so I'll write import SQL 8 3 5. and I'll just delete this function def print entry and in place I'll write def database I will get the variables so I'll write first just like print entry I'll write first equals FN dot get second equals Ln dot get last name the first name is done then dob1 equals dob the date of birth dot get then variable one var1 equals War dot get this was for the country then variable three bar three equals War underscore C1 or 3 equals bar underscore C2 bar 3 equals to our underscore C3 fine then the radio button were 4 for the gender equals radio underscore or dot get now till here the program was same as the print entry function it changes when I start connecting this data with the table or the database now how do we do that I'll write I'll have a variable conn that is for connection equals SQL lite3 dot connect and in Brackets I'll given the name of the database okay so I'll write form dot DB this is to establish a connection to sqlite you need to pass the database name you want to connect okay that was form dot DB if the specified database is not present on the disk then a new one would be created by sqlite otherwise it will connect to the one that is already present now if there is a connection established that was done by dot connect I'll write with con c o n n cursor equals con dot cursor now this is another function by sqlite to create a cursor object to execute sqlite commands queries from python okay Now to create a database to add values to it SQL commands need to be executed and since we are doing that in a python file I need the cursor object okay now I'll write cursor.execute and in inverted commas I'll given the SQL command Okay so execute is used to run the SQL query and return the results okay so create table if not exists student which is the name of the database or the table SQL commands are not case sensitive but they are preferred to be written in uppercase then brackets are given the field names F name and what type of Entry would be made it would be text and then L name and also text DOB it is a date so I'll write date and Country text again programming language I'll write proc language it is also text and gender which is also text enclosed brackets and the inverted commas again I'll have another statement SQL statement I'll write cursor.execute in inverted commas insert into student F name L name dop country Pro language gender and what values would be inserted values brackets I'll given six question marks for six fields inverted commas close and comma the value of these question marks can be first these variables where we get the value of the string words first second dob1 War 1 War 3 and War 4. fine these were just the two SQL statements that I needed and then I'll commit I'll write Conn dot commit and packets to make changes to the table to confirm the change is committed okay and also I need a popup box after I have submitted the form so I'll write tincter Dot message box dot show info we can print in the same message congratulations and for the information the user has successfully signed up close and what it comes closed and the rest would be pretty similar we have all the entries we have the labels we have the entries we have the drop list for the country then we have the check buttons the radio buttons but here for the command of the submit button I'll change this to database instead of print entry and the rest can remain the same now let's run this let's fill in the form and then we'll check the database so I have my form now I'll fill in this registration form twice just to have some data when I'm checking the database the table so for first name I can write ABC and for last name I can write x y z then for the date of course 12 0 3 slash two zero zero three I'll selection country India programming language Let It Be Python and gender mail and I'll submit I have to pop a box and I'll click on OK and I'll quit again I'll run this we can given the first name mnop last name qrst UB can be 10 slash 10 slash 1980 and I'll select the country Canada again maybe and programming log which can be Java female and I'll submit I have the popup box and I'll quit now it's time to check the database for that you need to download something and that's database for sqlite you can just search the same statement database for sqlite and you'll find this first link and when you click on it you will see downloads and you can download the required version so I install the standard installer for 64bit windows now once you've installed it installing this is very easy you can go with the default settings and you just need to check the tincter folder in which you are saving all the programs and there you'll find this form.tb and you can open it with database for SQL and you can actually see the table you will find this interface so you can see we have our table student it has the specified field names when I click on browse data you can actually see the table that we have filled in so this was all about the program we learned how to use sqlite3 along with printer and SQL in Python I hope you understood what we did thank you