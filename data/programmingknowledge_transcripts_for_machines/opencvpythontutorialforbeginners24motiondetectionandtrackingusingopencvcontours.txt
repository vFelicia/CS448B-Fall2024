hey guys welcome to the next video on open CV tutorial for beginners using Python in this video I'm going to show you how you can create a very basic and simple motion detection and tracking system using Python and open CV so let me show you what we are going to achieve at the end of this video so I have this video which is a sample video and you can see some people are walking around inside this video now what I want to do here is I want to show these rectangles around these moving people or persons so this is cracking and when some movement occurs I also want to show this kind of status that status is movement because somebody is moving inside the video so if nobody is moving the status will be blank and if somebody is moving then this status will be movement so this is what we are going to achieve at the end of this video so we are going to try to track each and every person and also we are going to track this person with this rectangle and also we will show the status as movement when somebody moves inside the video so let's get started so to start with I have this basic code which just reads a video using video capture class and then if this video is valid then I'm going to just show this frame by frame inside I'm show window and I am sure you might be knowing all this code because I've shown you stepbystep how to capture the video or how you can read the video frames using video capture method ok so this is just to load this video and show it frame by frame using I am show methods so let me run this code first of all to start with so our original video looks like this so some people are moving but we want to track the movement of each and every person and also we want to show rectangles around them whoever is moving so let's get started so under this video capture code line what I'm going to do is first of all I want to read two frames from the cap instance so I'm going to just copy this code and paste it here so this will be our frame one let's say and similarly I'm going to just read the second frame so simply we are just declaring two frame or one after another okay and we don't need this code anymore so first of all I'm going to declare a variable diff and using CB to dot a B as diff method so absolute difference we are going to find out the difference between the first frame and the second frame so this method ABS diff is for finding out the absolute difference between the first frame and the second frame now once we have the difference then we are going to convert this difference into a grayscale mode so we are going to just say gray is equal to C v2 dot convert color so CVT color and the first parameter here will be our difference which we have found between the two frames so I'm going to just pass diff as the first argument and the second argument will be CB dot we are going to convert this BG our color to the grayscale mode and why we are finding out the grayscale mode of this deaf because we are going to find out the contour in the later stages and in the last video we have learned that it's easier to find out the contours in this grayscale mode as compared to the coloured mode or the B gr mode so once we have this grayscale mode we are going to just blur our grayscale frame so we are going to just declare a variable called blur and then we are going to apply the Gaussian blur on our gray variable so see v2 dot Gaussian blur the first parameter here will be gray so let's give this grape parameter which we have divided defined here the second parameter here is the case eyes or the kernel sight so let's say we want to provide the kernel size 5 comma 5 and the third parameter here will be the Sigma X value so we are going to just pass 0 here as the Sigma X value now we are going to find out the threshold so we are going to just say underscore because we don't need this first variable and then the second variable will be trash is equal to CB 2 dot threshold and the first parameter which it takes is the source so we are going to pass our blurred image as the source and then the second parameter here will be the threshold value so we are going to just provide 20 here then the maximum threshold value will be 255 then the type will be CV to dot Tresh binary so in the next step what we are going to do is we are going to dilate the thresholded image to fill in all the holes this will help us to find out the better contours so there is a method called CV to dot late so we are going to just declare a variable called dilated and then we are going to apply this method so CB 2 dot dilate which takes few argument the first argument will be our threshold date the version of the image the second argument here will be the kernel so kernel let's say for now we are going to provide none here okay so the kernel size will be none and then third parameter will be the number of iterations so let's provide the number of iterations and the number of iterations we are going to provide here will be three so if it doesn't work we can increase or decrease the number of iterations now in the next step what we are going to do is we are going to find out the contour so as you all know that contour or fine contour method is going to give you two result one is the contours and other is the hierarchy so we are going to just say contour and the second result we are going to just say underscore because we are not going to use this second result and then we are going to just say CV to dot find contours and we are going to find the contours on this dilated image so we are going to say dilated now the next argument here will be the mode so the mode which we are going to use here will be writer underscore tree so I'm going to just write our ETR underscore tree which is most commonly used and then the next argument here will be the method so the method here will be C v2 dot chain aprox simple and once we have our contours we are going to just draw the contours because we already found out the contours so we are going to just say draw contours and the first argument here will be frame one because we want to apply all the contours on the original frame right so we are going to apply all the contours which we have found using all these method on the frame one and then the second argument here will be the contour so you can just give the contours here and the third argument here will be the contour I D I can just say minus one which is going to apply all the contours and the third and the next argument will be the color so let's say we want to provide the green color so I'm going to just say 0 comma 255 comma 0 and the next will be the thickness so let's say we want to provide the thickness of 2 here so now it's going to draw all the contours which we have found with the difference of frame 1 and frame 2 right and then we are going to just display this frame 1 so we can just say this is our feed and the result after applying the contour will be saved in the frame 1 which we will display now in the next step what we are going to do is we are going to assign the value inside frame 2 into frame 1 so we are going to just say frame 1 is equal to stream 2 and then inside our frame 2 we are going to read a new value so we are going to just say re T comma frame 2 is equal to cap dot read ok so we are reading the new frame in the variable frame 2 and before reading the new frame we are assigning the value inside the frame 2 to the frame 1 in this way we are reading the two frames and finding out the difference between the two frames so let's run this code and let's see if it works or not let's test this so you can see now there are these contours which are drawn around all the moving persons also there are some contours which are drawn around this rope which is also moving right so we have successfully determined the contours and we have already drawn these contours on the frame 1 but this was not the result we are looking for we want to draw the rectangle around these moving persons and also we want some noises to be removed so we don't want to draw the contour on the moving rope let's say okay so how to remove these noises and how to draw these rectangles let's see so now in the next step what we are going to do is under or before we are drawing these contours we don't want to draw the contours now we want to draw the rectangles right so what we are going to do is we are going to iterate over all the controls so we are going to just say for contour so from contours we are going to find out contour in contours right so this is the list and we are iterating over this list so inside this for loop the first step will be to save all the coordinates of the found contours ok so we are going to define the x coordinate then the y coordinate and then we are going to just say width comma height and there is a method called bounding rekt which we are going to apply on the contour so we are going to just say is equal to CB 2 dot bounding rekt this is the method which we are going to apply this is going to give us the X&Y coordinate and the width and height right and we are going to apply this bounding rekt method on the contour we are getting using this con twos list now in the next step we are going to find out the area of the contour and we are going to just say if this area is less than certain value then we don't want to do anything we don't want to draw a rectangle or anything we just want to continue otherwise if this contour area is greater then let's say some kind of a person's area then we want to draw a rectangle on it so inside this for loop we are going to just define if condition so we can say if CB 2 dot contour area so there is a method called contour area which is this one where we can pass our contour so we are going to pass our contour and if the area of this contour let's say is less than 700 then we are going to just say continue so this code essentially mean that if the area of the contour is less than 700 then we are going to do nothing we don't want to draw any rectangle otherwise if the area is greater than 700 then we want to draw the rectangle so we are going to just say CB 2 dot rectangle we have already learned how to draw a rectangle on an image using the rectangle method the first argument here will be the source which will be frame 1 the second argument will be the point 1 so we are going to just say point 1 will be X comma Y the third argument will be point 2 so we are going to just say X plus W comma y plus h the next argument will be the color so let's say the color will be the same 0 comma 255 comma 0 the next argument will be the thickness let's say we want to give the thickness to as we have done with the draw contour we have provided the thickness of two here right now in the next step we are going to just print some text on the image if some movement is observed so we can just say CV to dot put text this also we have seen in the previous videos how to put text on an image so this time the source will be our frame one the second will be the text so we will just say status let's say and if there is some movement we are going to just say in the curly brackets we are going to just use the format method so this is just formatting the result using the string and we are going to just say movement the next argument here will be the origin so where we want to put this text let's say we want to put this text on 10 comma 20 coordinate and then the next argument will be the font face so we are going to just say font face will be CV 2.4 font Hershey simplex let's say so we are going to use this font and the next argument will be the font scale so let me just do this on the next line so one scale will be let's say 1 the next will be the color of the font so let's say the color will be 0 comma 0 comma 255 and then the last argument will be the thickness so let's say the thickness will be 3 and this code is going to put the rectangle around your moving persons if the area of that contour is greater than 700 okay so let's run this code and let's see if it works or not so I'm going to just run this code and you can see that status is movement because all the persons here are moving and you can see these rectangles which are drawn around the moving persons and this noise which we were seeing in the previous result is also gone around the movement of this rope okay sometimes this rectangle is drawn on the movement of the rope also so in this case you can also increase the expected area let's say we just want to find out the contours which are greater than 900 and we can now you can see these rectangles are drawn around these moving persons with the area which have the contour area more than 900 so you can remove these kind of noises from the frame using this area so this was a very basic example how you can detect the motion and track your moving object inside your video using Python and OpenCV I hope you enjoyed this video and I will see you in the next video