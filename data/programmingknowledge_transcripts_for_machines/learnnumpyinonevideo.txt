hey guys welcome to the video on numai tutorial for beginners so first of all what is numai so numai is the fundamental package needed for scientific Computing with python it is a opensource Library which contains a powerful n dimensional array object which we will see in the later videos and it also contains basic linear algebra functions basic forer transform function s sophisticated random number capabilities and also this Library contains tools for integrating with the languages like C and C++ code now this Library also contains Advanced array slicing methods to select array elements and it also have several convenient array reshaping methods so in other words we can say that numai is a python library for array oriented Computing besides its obvious scientific uses numai can also be used as an efficient multidimensional container for generic data now as I said numai has a powerful ndimensional array object this object is an N dimensional array of homogeneous data types with many operations being perf formed in compiled code for performance so this Library gives better performance when you use it with array oriented Computing now there are several important differences between numpy arrays and the python standard sequences like lists or tles which we are going to see in the next video also numpy arrays have a fixed size modifying the size means creating a new array in numpy additionally numpy arrays must be of the same data type but this can include python object also now the next question you may ask is numpy is suited for what kind of applications so numpy can be used for many applications including image processing signal processing linear algebra and multiple other functionality is included in numai so it can be used for several other functionalities so it is also said that numai is the foundation of the Python scientific stake now you may also ask why do we need numpy so we already have sequences in Python such as lists or tles or many other sequences to handle data with with the standard python Library so why do we actually need numpy so the answer is python does numerical computation slowly in comparison to numai so whenever you want to do metrix computation for example you have a matrix of th000 cross th000 and you want to multiply this Matrix then python Triple Loop takes more than 10 minutes in comparison to numai which only takes around 0.3 seconds so whenever you want to do Matrix computation or n dimensional array computation numai library is more efficient than even the python standard library and that's why it is used so this was a brief introduction about numai now how can we install nump I on our Windows operating system or Mac operating system or Linux operating system so right now I'm working on a Windows operating system but the procedure for installing numpy will be the same for Mac or Linux operating system so the basic thing which you need to install numpy library is PIP so if you have Pip then you will be able to easily install called numpy now on Windows whenever you have installed python on your Windows operating system pip was already installed on your Windows operating system with the installation of python on other operating systems like mac and Linux you can install pip and then install numpy using pip now those of you who don't know what is pip pip is a package management system which is used to install and manage software packages written in Python so let's install numpy using pip so I'm going to give this command pip and then install and then whatever package you want to install so for example I want to install numpy so I will write numpy here so pip install numpy and then press enter which is going to install numai on my Windows operating system so now you can see the process of installing of numpy library is started by pip so you can see now numpy is installed on my Windows operating system so now I can uh just go into the python interpreter so I will just write Python and then press enter which will allow me to use the numpy library so I'm going to just write import numai as NP and then press enter which is going to give me no error if you give this command on your python interpreter without installing numpy this import is going to give you some kind of error now let me give you a very basic example of converting a normal list into a numy array so let me just uh create a normal list I'm going to name it as n list which stands for normal list and then I'm going to assign some value to this list so let's add some values here let's say 1 2 3 4 five and six so there are six elements inside our list and then I'm going to press enter now in order to convert this list into the numpy array I'm going to just just create one more variable I'm going to say it is a NP array and then I'm going to convert this list into an array so I'm going to use this NP keyword dot array and then as an argument I'm going to pass my list into this array function so n list is the name of the list and then press enter And now when I see the content of an array it's going to give me the numpy array now I can also use print method in order to print the content of NP array so let's do that and you can see it's going to print the content of numpy array now one thing to notice here is that these elements inside this array does not contain comma between these elements because it's a special array which is called ND array and numpy's Main object is the homogeneous multidimensional array called ND array and this is that kind of array so this was the very basic example of numai now if you have installed Anaconda package on your windows operating system or Mac operating system or Linux operating system you don't need pip to install numpy you can directly import numai inside your Jupiter notebook or spider IDE and start using it now if you want to use numpy on py charm let me show you how to use numpy on your py charm IDE so this is the py charm IDE and here I have created a blank project which is called numpy samples now in order to add numpy to your project what you need to do is you need to just click on this file option on your pycharm IDE and then you just need to go to the settings and once the settings window opens what you need to do is you need to go to the project colon whatever is the name of your project so go under project and whatever is the name of your project and then click on Project interpreter so I have already clicked on this project interpreter and here you can uh see pip is there and setup tools is there so here on the right hand side you will see this plus symbol so you just need to click on this plus symbol and once you click on this plus symbol just search for numai here so I'm going to search for numpy and then you will be able to see this numpy here and the version which will be installed on your py Cham IDE so on the right hand side you will see the description about numai and whatever version which will be installed so at the time of making this video 1.16.0 will be available for py charm so I'm going to just click on install package which is going to install the numpy package for this project on your py charm IDE and once you see this green bar here which says package numpy installed successfully you can close this window and then click okay here and now you can uh create a python file so let me create a very simple python file and inside this python file what I'm going to do is I'm going to just write import napai as NP and then let's create a list so I'm going to name my list as L is equal to let's add just uh two elements 1 comma 2 here and then in order to convert this list into a numpy list we just need to use np. array and then pass our list to this array function and then you will be able to print the content of NP array using the print function so I'm going to just write n p list inside the print function and let's run this uh script by just right clicking and just selecting the Run whatever file name you have and you will be able to see the output here in the terminal below so this is how you can install numpy on your py charm ID so you can use pyam IDE or anaconda distribution or even you can use your plain terminal in order to develop your numpy script now to go ahead I will be using the py charm IDE but you are free to use any other IDE or the editor so in the py charm IDE what I'm going to do first is I'm going to just open the python console by clicking on this symbol which says python console and I'm going to maximize this console because we will be using this python console for this lesson so we have already added the numpy library to our project and we can import the numpy library to the python console also so I'm going to just write uh import numpy as NP and then what we are going to do in this video is we are going to try to compare the python list to the numpy array and we will see the similarities or the difference between the numpy array and the python list so to start with I'm going to declare a python list and let's assign some values to the list let's say 1 2 3 and I'm going to declare the numpy array and I'm going to name it as Na and we are going to just say np. array and we will pass the list content to the array function so we have numpy array and the python list and they contain same number of elements now what is the basic operation we perform with the list or an array we iterate over the list and the array so we are going to iterate over the list first of all so for I in L and we are going to print the value of I and let's see what happens when we iterate over the list so result is expected it's going to print the content of the list and same we will do with our numpy array which is to iterate over this uh array and the result is same as the list so we can iterate over the numpy array or the python list using a fall Loop so at this point these two things look similar now let's try to add some elements to the list and the numpy array so first of all in order to add something to the list let's say I'm going to declare the variable L1 and I'm going to add something to the list and this we can do with the concatenation operator so let's say we want to add four to our list and then transfer the result into L1 and when we see the content of L1 you will be able to see that 4 is is added or appended to the list now there is one more way in which you can append an element to the list and that is by using the append function so let's say I want to append five to this list L1 I can do that and see the content of the list so now our list contains 1 2 3 4 five so five elements let's try to do the same with the numpy array so I'm going to just use the na1 and then I'm going to try to concatenate the na a with some elements so let's try to add four to the numai array and I'm going to just see the content of any1 and you can see this is not the expected result so in case of numpy array when we use this plus operator it will do the vector addition so basically what we are doing is we are adding four to each and every element of the array so as we already know that the content of the numai array was 1 2 3 and when we add four to each element it becomes five 6 and 7 and that is the result you are seeing here so in this way nump array and list behave little bit differently now let's try to use the upend method on the numpy array so I'm going to just write na Dot append and we will try to append uh let's say eight to our list and then press enter and it's going to give us error because this upend method is not even there inside the numpy array so at this point it looks like that uh lists are winning over the numai array but as soon as we try to do the vector addition or Matrix operations we will see see the differences between the numai array and the python list so as I told you in the last video that generally we use numai to do operation on the nend dimensional array so for example if you want to do the vector addition of the let's say numpy array to itself what we can do here is I'm going to declare one more variable na A2 and then we can do na a plus n a and it's going to give us the vector addition of these two arrays so I'm going to just see the content of na2 and you can see it has given us the vector addition of na+ Na which is 1 + 1 is equal 2 2 + 2 is equal 4 and 3 + 3 is = 6 now in case of list as you have already seen that when we perform the concatenation operator it's going to just append to itself so let's try to do that also so I'm going to declare the L2 variable and I'm going to just do the concatenation of l+ L and when we try to see the content of L2 it's just the appending of those two lists but it's not the vector addition so if you want to perform the vector addition on the list what we can do is we can uh just Define uh L3 variable and we we will assign the empty list here and then we will iterate over the list using the for Loop so for I in L and then we are going to just say L3 do append and we are going to append I + I which is this uh variable to the list three or L3 variable and then when we see the content of L3 you will see the expected result which is 2 46 which is the vector addition of L + L now let's try to uh multiply a scalar with the vector so we have a numpy array and I will just multiply it by two so I'm going to just write uh two ASX Na and then press enter and I can see the error because na should be in capital so once again I'm going to just write 2 multiplied by NA and then press enter and it's going to give us the multiplication of Scala which is two with the vector which is numi array the similar operation when we perform on the list let's try to do that so 2 multiplied by L and then press enter you can see the result is the repetion of L multiplied by whatever scalar you write here so L is just uh repeated two times in case of multiplication so so in case you want to do the scalar multiplication with the vector once again you need to iterate over the list and you need to multiply each and every element of the list by two as we have done with the vector addition let's try something else so let's say we want to find out the power of something so I'm going to just say na a and then we already know that when we use double Ed STS it means na to the power whatever we write here so na to the^ two and what we get here is the squared result of every element so 1 4 9 here and when we do the same thing with the list it's going to give us some errors so let's see what error we get and you can see this operation is not supported so we cannot perform this kind of power operation on our list so if you want to perform this power operation on the list you need to use the for Loop once again and in that way numpy arrays are little bit uh easier to use and you just need to use the operation whatever you want to perform and this operation will be performed on each and every element of the list now you can imagine if you want to perform the similar operation vector addition or addition of scale and the vector or the power operation to each and every element of uh Matrix which is a twodimensional array then how difficult it will be to perform on a list and how easy it is to perform on a numpy array so if you want to square each and every element of the list you can just write for I in L and then what you can do is you can uh just uh Square each and every element of the list so I'm going to just write print here and then I'm going to just say I multiplied by I and it's going to give us the square result of each and every element of the list which is 1 149 and you can uh just uh append this result to a new list which will give you the uh similar result as we have seen in the case of numpy array now let's say you want to perform from the square root on each and every element you can use uh sqrt function and then pass your nipai array variable to it and it's going to give you the square root of each and every element you can also find out the log of each and every element so you can uh just say log and then pass the numpy array here and you will uh find out the log of each and every element you can even find the exponential of each and every element using the EXP function and then passing the nump array to it and you can see it has given us the exponential of each and every element so here we have seen some similarities and some differences between the python lists and numpy arrays but this doesn't mean that numpy array are better or python list are not better both have their importance sometimes you need python list and other times you need numpy arrays usually you can tweet a python list as an array but you can treat NPI array as a vector that means you can perform the vector operation on the numpy array and as we have already seen to do operations on every element of the list we need to use the for Loop and in case of numpy array we can do it in much easier way Loops are slower than numpy array operations that's why also we use napai arrays so at the end I will just say that if you want to perform these kind of mathematical operations on a list or an array numpy is not just more efficient it is more convenient to use because you get a lot of uh vector and metrix operations for fee which sometimes allows us to avoid unnecessary work which is required in the case of python list in this video we will see some of the basic operations which are related to numpy arrays so let's get started I have already imported numpy into this python console and now I'm going to create few numpy arrays so first of all let's create the first numai array and this array will be the onedimensional array and this will contain three elements 1 2 3 pretty simple we are going to create the second numpy array and this time this array is going to take two Dimensions so first of all inside the square bracket I'm going to add one more square bracket and here I'm going to just write 1 comma 2 now as we have talked in the last video that numpy array is somewhat similar to uh python list in terms of iterating over them so this means they have some index so we can uh just uh fetch an element of an array using its index so let's say I want to get the first element which is one from the array a then I can just write uh a a square braet 0 which will give me the element at zero index so working with this onedimensional array is simple we can just give the index here and it will give you the element related to it but when it comes to two dimensional array what we can do so similar to the list when we uh just want to fetch the zeroth element of the list it's going to give us this result which is the first element of the array which is this list 1 comma 2 now let's say you want to get this element which is one which is at uh first row and First Column then what you can do here is you can add one more index which means we want to get the element at the first row and First Column and it's going to give us uh one similarly you can uh give any other index and it's going to give you the element related to it and you need to notice one thing here is because the index starts from zero so when we uh give 1 comma 1 here it's going to give us four now there is a function called Matrix also in uh the numai which we can use instead of array which is going to give us the multidimensional array so I'm going to just uh show you how you can create the Matrix uh using numpy so you can just write uh NP do Matrix and here you can give the same type of elements let's uh just copy this uh array and then paste it here and when I print the content of M it's going to give us the same result as we get in the case of array now in the numpy documentation it is recommended that we use uh arrays is so we will not bother much about the Matrix but I just wanted to show you that there is a method called Matrix which you can use to create Matrix or multidimensional array now there is one more notation which you can use to get the similar kind of result for getting some value of some position and this time what I'm going to do is I'm going to use B and then let's say I want to get the element at zero Index right so I'm going to just write 0 comma 0 and notice here I have used two square brackets but there is a shorter notation which is 0 comma 0 which appears more like Matrix operation so when I do this it's going to give me one which is the same result as we have seen here in the case of indexes similarly when I do B1 comma one it's going to give us the result four now as I said numpy array behaves similar to The numpy Matrix that means we can perform the Matrix operations on the numpy array also so what I'm going to do is I'm going to just say B do T which is going to give us the transpose of this Matrix so let's print out the content of uh the numpy array B also so the original content of the napai array B was this one and after transposing the result is this one now there is a property called shape which we can use to get the dimension of the numpy array so let's say I'm going to just write B dot shape here and then press enter and it's going to give us this result which is 3 comma 2 so this array is having three rows and two columns one row two row and three row and number of column is 1 and two now let's say we want to transfer the transpose of B into a new variable so I'm going to just write uh B Dot and assign it to C and now we want to see the shape of uh this C numai array it's going to give us this result which is two comma 3 which means that now C array contains two rows and three columns now when I have created these two arrays A and B I told that a is the onedimensional array and B is twodimensional array and there is a property also to verify this and it's going to give us the dimension number of a particular ND array and this property is called n andm so I'm going to just use B do NM and then press uh enter and it says that Dimension number of B is two which means it's a twodimensional array and when I do the same operation with the array one then it's going to give us one which means that this a array have the dimension number of one which is onedimensional array now there is a property called size so I'm going to just write B do size and this property size is going to give us the number of all the element present in the array so this array B contains six element 1 2 3 4 5 6 that's why it gives us result six similar operation when we do on the array a then it's going to give us three because it only contains three elements total now there is one more property which is called D type is going to give us the data type of an array so I'm going to just write a. D type and it's going to give us D type is equal to int 32 also in the case of B it's going to give us int 32 so let's uh print out D type of the array B and it's going to also give us in32 that means means each and every element of this array is of data type integer now in order to create the array with the floating values what we can do here is so I'm going to just declare one more variable D and then I'm going to create one more array and this time I want to create the array with the floating values so what you can do here is as you may expect that you can can provide the floating values here 1.2 and then I'm going to press enter and when I just want to know the data type of uh this D it's going to give us this result which is float 64 or there is one more way of creating an array with floating points which is np. array and then what you can do is let's say we just provide uh one and two here and you want to convert the array of integer into the array of floats then what you can do here is you can provide comma and provide one more argument which is the type and then provide the value of it so NP do float 64 and then press enter and once you uh see the content of this r e it's going to give us this kind of notation one point 2 point and this means the array contains float 64 values so this we can confirm from the data type of e and you can see it contains uh elements of uh type float 64 now there is one more property of the numai array which we can use here is item size so this is a property and it's going to give us the size of each and every element of this array so because this array B contains integers and we all know that integer takes four bytes and that's what it's showing here in case an array contains floating value let's say uh this e which contains floating values let's see the item size of uh this r e it's going to give us uh the result 8 which means that the size of each element in the array in bite is 8 now there are some basic function available for the numpy array so let me uh print out the content of B once again so this is our B numpy array and let's say we want to find out the minimum of all the elements present inside this array so we can use this method a. Min which is going to give us the minimum value and to get the maximum value you can uh just write a do Max function and it's going to give us the maximum of the array a now similarly we can find the minimum of uh the array B also so Min function which is going to give us the minimum value present inside the array B and to get the maximum value you can uh just write B do Max and it's going to give us the maximum value present inside this array AR which is six which is this one if you want to get the sum of elements you can use uh the sum function so a do sum which is going to give us the sum of the array A and B do sum which is going to give us the sum of the array B now let's say you want to find out the sum of a particular XIs so when you see vertically this is the AIS zero and when you see the array horizontally this is the is 1 so let's say we want to find out the sum of the Matrix B and we want to find out the sum of AIS 0 so I'm going to just write AIS is equal to 0 here and then press enter and you can see it gives us 9 and 12 so from where does this 9 and 12 come from 1 + 3 is = 4 and 4 + 5 is = 9 so this is the sum of of these three elements and similarly 12 is the sum of these three elements and because we have said that we want the sum of x's is equal to zero which is the vertical sum of the array elements now in case when I write here x is is equal to 1 it's going to give us this result which is the sum in horizontal way which is called the XIs 1 so 1 + 2 is is = 3 3 + 4 is = 7 and 5 + 6 is = 11 so this is called the XIs one and when you see vertically it's called the AIS zero so these are some of the basic properties and methods related to numpy arrays in this video I'm going to show you how you can uh use numpy to create some specific array and also we will see how we can reshape our numpy array and some of the properties related to shaping your arrays so first of all let me show you the first method and this method is np. zeros and if you have guessed correctly this method we use to initialize a specific array with some Dimension so we are going to give some Dimension here as an argument so let's say 2x3 and this is going to give us an array of specific Dimension and all the values inside this uh array are zeros so all the values or Elements which this array contains are all zeros there is one more method which is called NP do ones and here you can give the same type of argument let's say 3x 2 and it this is going to give you an array all initialized with the value one so you can see all the values here are one now if you want to initialize the value with some data type you can also use let's say np. ons and you can provide an extra argument here which is called D type is equal to so just write D type is equal to and whatever data type you want to give here you can provide here so let's say NP do in 16 and this dtype argument is going to make sure that this one is of this data type now there is one more method which is called np. Mt so this method you can use to provide some shape let's give 3x3 and this empty method is used to create uninitialized data so the content is undefined and once again I'm going to going to give the same command it's going to give us the array of these dimensions and here also you can provide the dtype let me give the list here you can also give the list instead of uh this Tuple and then as an extra argument you can provide the D type is equal to np. int 16 and then press enter and you can see now it's going to initialize these values with the random integers once again when you give the list without this argument dtype and I'm going to just provide some Dimensions here in the form of uh list it's going to once again give us uh this Dimension with all ones but always remember that empty unlike zero does not set the array values to zero and this means that this may therefore be marginally faster now the next method I want to show here is the a range method to create create an array of particular range so here you can provide some range let's say we want to provide the range from 1 to 5 and then press enter now this a range acts similar to the range method in Python so it's going to create this array but it's going to exclude this five this is the property of range also you can also provide the interval in which you want to see this array so you can uh just say I want to see this array in the interval of 0.5 then you will get the array in the interval of 05 or in the steps of 0.5 now there is one more method which is called np. Lin space and this method is used to create an array by specifying the range and the number of elements so first of all we are going to provide the range so once again I'm going to to provide the range between 1 to 5 and then press enter so you can see in the result it Returns the evenly spaced number over the specified interval and in our case this interval is 1 125 and we got 50 values which are evenly spaced values you can also provide an extra argument in this function and this is the number of samples you want to generate the default sample is 5050 as you have seen here this is the default sample so if you don't provide any number here it will generate the evenly spaced array of sample 50 but if you want to provide your specific number let's say we want to just generate an array of 10 values then we can uh provide this third parameter here and now you will just get the array of 10 evenly spaced values once again if you provide here five it's going to give you only five evenly spaced value which is 1 2 3 4 5 if you want to create an array of random numbers you can use np. random. random and provide your Dimensions here and what you will get in return is an array of random numbers which are in between zero and one now let me show you how you can reshape an array so I'm going to create an array of uh zeros so let me just assign this result to a variable let's say this is C variable so first of all let's see the content of uh this array C and now I want to reshape this array so there is a method called r. reshape which you can use to change the dimension of this array so earlier this array was of Dimension 2X three and now I want to change the dimension to 3x 2 let's say so now once you do this the array Dimension will be changed to 3x two which means three rows and two columns you can also change it to let's say 6 by 1 so I'm going to just say 6 by 1 and this is going to give you an array of 6x1 but you need to make sure that all all these reshaping Dimension confirms to the original Dimension so for example you just give a dimension which is not confirmed by the original array let's say seven here and you will get this error which says cannot reshape array of size six into the shape 7 7 by 1 let me give you one more example so this time I'm going to create a new variable D and this time I'm going to use uh On's method so this is On's method and I want to create an array of let's say 1X 9 and then press enter which is going to give me an array of 1x 9 and all the values here are ones now when I use a reshape method on this uh D array so let's use this reshape method and let's give the dimension let's say I want to give here the dimension of 3x 1 and then press enter you will see this array will be reshaped to 3x3 array so why this is happening so because we have provided the second parameter as minus1 which means that it will be determined based on the actual condition automatically so this array was containing nine element and this means that your Matrix will be resized to 3x3 Matrix so now you can see when you see the content inside D you can see the original array never changes you cannot change the size or shape of the original array you can just reshape it and then assign it to a new variable so when you do this I'm going to just reshape it and then assign it to a new variable e and then see the content of e now once again let me create an array of all zero of Dimension 3x 1 let's say and there is a method called V stake and S stake so V stake is used to stake multiple arrays in vertical Direction and one thing to notice here is the dimension so the dimension of an array must be matched so here you can see e which is of the dimension 3x3 and we have a new array F which have the dimension 3x 1 so so let me uh just create one more variable let's say it's G variable and then I can use NP Dov stack and I can provide as an argument both the arrays so I have the array e and I have the array F and it gives us error because this I need to give in the tle so the error says it takes one positional argument but I have provided two because this I need to give inside a tle or a list so these argument I will provide as a tle and then press enter and now you will see this error this error says all the input array Dimension except for the concatenation AIS must match exactly so because this is the 3X3 array and we want to add the new array vertically which is not possible because in the 3X3 metrix matx you cannot add the Matrix of 3x 1 if this Matrix is of 1x 3 then this is possible so let's create the array of 1x 3 so this should be 1x3 not 3x 1 so I'm going to reshape it once again or let's just uh change the dimension it should be 1x3 in order to use the V stake with the array of 3x3 so now once again we will see the cont of H so now we can once again use this bake method and this time I'm going to pass H here instead of f which is of Dimension 1x3 and then press enter and this time I don't get any error and once again when I see the content of G it's going to give us the combination of the Matrix e and H so this method V stake can be used to stake multiple arrays in vertical Direction there is one more method which is at stake which you can use to stake multiple arrays in horizontal Direction and there our F array will work so now when I create one more variable I and I will use the H stake method and here I will provide as an argument the array e which is of Dimension 3x3 and the array F which is of Dimension 3x 1 not 1x3 not like this but it's of Dimension 1x3 so it's like this right and then press enter and I will see the content of I and now you will see these two arrays are staged horizontally now if you give the array of wrong Dimensions here so for example I give H here instead of f which is is like this and then press enter it's going to once again give me an error which says all the input array Dimension except for the concatenation AIS must match exactly and At Last I want to show you two more method and they are H split which is called horizontal split and V split which is called vertical split and I want to split this array in the horizontal format so what I'm going to to do here is I'm going to use the method H split and here I can first of all give the name of the array which is G in my case and then I can give the number of splits for example I want to split this array in three different arrays then I can provide this number three here and then press enter and now you can see the result so this result contains three different arrays 1 two and three now let's say I want to split this array I which looks like this in the vertical Direction so I want to just separate this this and this in three different arrays so I can use once again NP dovit method and first argument is the name of the array and second argument is the number of arrays you want so when I press enter it's going to give me three different array which are split in vertical Direction so that's it for this video I hope you have learned something new this time