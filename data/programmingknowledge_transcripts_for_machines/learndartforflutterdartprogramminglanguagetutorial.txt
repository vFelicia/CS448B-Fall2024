welcome to programming knowledge so in this tutorial we will start with the basics of dart dart is the official programming language that the flutter framework uses i will be using dart pad to write all my darts code so every dot program's basic requirement is a main method main method is the entry point of every dot program we can write the main method like this main followed by a parenthesis set of parentheses then curly braces and over here we write our code we can also add a void over here if needed void basically specifies that a method or function will not return anything we will study about functions in details later in this tutorial so after main method we let us discuss about print so to print anything on the console we use the keyword print and then the parentheses then single quotes and then we can write the sentence that we want to be printed on the console so for this case i am writing programming knowledge and then followed by a semicolon now if i run this program in my console i would be able to see programming knowledge so you can see programming knowledge is visible in my console now if i change the text over here the output in the console will also change suppose i write my own name and then click on run so now the console is showing my name like python we can also use double quotes and triple quotes to print blocks of statements after print let's discuss about data types so there are five to six primitive data types namely int for storing integer values float and double for storing decimal values care for storing character string for storing group of characters and bool for storing boolean values that is true and false now in dart there are four types of variable declaration the first type is static declaration in static declaration we write the data type for followed by the variable name let's call it v and then a semicolon we can store values to this variables by writing v is equal to and inside quotes rishabh over here we have written string that means the variable v can only store string values now let's try printing it so to print i'll write print v followed by a semicolon and now let's try running it so it is showing rishabh we can merge these two statements together so to merge we will write now again if i try running the program we will get the same output but over here it has changed from variable declaration to variable definition the basic difference between variable declaration and variable definition is that in variable declaration we tell the compiler that the program will have a variable v of string type but in variable definition we tell the compiler that the program will have a variable v of string type and rishabh will be stored in it after static declaration we have dynamic declaration over here dynamic refers to the data types that is a variable can store values of different data types we declare a dynamic variable by writing v a var v and then the values so in the first variable i am storing a string in the second variable i am storing an integer and in the third variable i am storing a decimal okay now i'll try printing them so i'll write print v then print to v1 then print v2 now if i click on run i'll get i am getting the output as rishabh 10 69.69 over here var automatically changes to type of data stored in it and memory to the variables are allocated during the compile time and to check if i select v over here in the documentation i get string if i select v1 i get integer and if i select v2 i get double okay so after the static declaration and dynamic declaration the third type of declaration is constant declaration as the name suggests variable declared constants cannot be changed so to so to declare a constant value we write c o n s t const c is equal to 10. now we can print the constant values if i click on run it will give me 10 as the output and now if i try changing the values if i write c is equal to c plus 1 and then if i print it it is giving me an error error this is compilation failed that is because i have tried to change the value of a constant variable over here okay so after this the last type of declaration is again dynamic declaration over here dynamic refers to a location of memory during runtime for example suppose we want to show the exact time when the program is executed then if we use where or string to store time then the value will be the time at which the program was compiled and not the time when the program was executed so in such cases we use dynamic variables so to you create a dynamic variable we write dynamic and then the variable v and then we can add the value as and when required okay so this was about variables i hope everything was clear so today we will learn about type conversion so first let us try about converting string to integer but before that i would like to tell you one thing that for writing comments we can use double slashes and write an inline comment and we can also use slash followed by a star and then again star followed by space and then over here we can write blocks of code and then the final one is three slashes and over here we can write the documentation okay so back in the program let's try converting string to integer so to convert string to integer we write we create a variable where one and then i will write int dot parse and inside this will be my string value so suppose i enter 1 now to check if one has an integer value so we will write assert 1 equals digit one uh assert is a builtin function to verify that the thing is as required or not okay so now let's try adding some value to one if it is an integer it will add without any problems over here i have written the wrong spelling it will be assert now if i try to run the program you can see 11 is the output so over here you can see we have given one as a string input then it has been converted to integer and then i have added 10 to it and then printed so 10 plus 1 is 11 now we will try to convert integer to string integer to string so for that i'll create a variable to store i'll write 1 is equal to 1 which is an integer dot 2 string okay now if i add some values it should be concatenated to the end of the variable so i will write 1 plus plus equal to fish off and now if i try printing it the output is one reshaft that means this integer one is converted to string and then ratio is added at the end of the string one so this is how we convert an integer to string now to convert our decimal to string we have two methods first is the one similar to which we have seen just now where 1 is equal to 3.1234 that is the decimal or double value dot tostring and the other method is where 1d is equal to 3.1234 dot 2 string as fixed 2 so this basically means that the string will have only two decimal places so let's check that and you know to check that we use a cert keyword and then we will write 1d is equal to so as we have converted it to string we will keep it inside quotes 3.12 and now then we will try printing so we'll write one d now if i click on run the output should be 3.12 so you can see the output is 3.12 so this is how we convert an integer to string string to integer decimal to string and also how to trim the decimal places after type conversion let's discuss about operators so let's start with unary operators so first i'll create a variable a and store 10 in it now to add some value to a we can write a is equal to a plus 10 so what this will basically do is add a 10 to a and then again store it inside the variable a let's check it by printing it so the output is 20. similarly we can do for minus the output is 0 and it will be same for multiplication as well as division so we can reduce the length of the code if we want so to reduce we will write a is equal to a plus equal to 10 so this will also do the same purpose that is to add 10 to a and then again store in it so if i run this the output should be 20 similarly for minus for multiplication and for division next type of operators is increment and decrement operator so if i write print a plus plus and then again print a the output will be 10 and 11 that means first this statement got executed then the value of a was incremented by 1 and then is value became 11 and it got printed here but if i give the plus plus before a and then if i click on run the output will be 11 and 11 that means before the execution of the statement a got incremented by one as you can see in the console similarly for mine decrementing we can use minus minus now if i click on run the output will be 10 and 9 that means first the statement got executed then the value was decremented and now similarly if i put minus minus before a and run it then the value will get decremented first and then the statement will be executed after unary operators we have relational operator so to learn about relational operator i'll create two more variables where b is equal to 5 where c is equal to 15 and one more variable where d is equal to 10 so to check equality between any two variables we write if a is equal to equal to d that means if a equals d then print true so the output is true and now if i change this d to b and then click on run now there is no output because we don't have an else condition so i'll write else print false now if i click on run the output should be false we will learn about if and else in details in the for future tutorials we will learn about fl's in details later in this course so after checking equality there is an operator that checks for greater than equal to case so i if i write if a is greater than equal to b then the output should be print true else print false now if i run this the output should be true that is because the b has 5 stone stored in it and a has 10 stored in it so as 10 is greater than 5 this condition is true and now if i change to d then again the output will be true because a has 10 stored in it and d has 10 stored in it so a is equal to d so the condition is true and now if i change it to c the output will be false because 15 is neither greater than nor equal to 10. now after this we have less than equal to and if we run this the output will be true that means 10 is less than 15 which is true and now if i change it to c itself then also the output will be true that is because 15 is equal to 15 now after this we also have only less than that means 15 we have to check if 15 is less than 15 so the output should be false as 15 is equal to 15 but not less than 15 and now if i change it to d the output will be true as 10 is less than 15 and if now i change it to greater than that the output will again be false as 10 is not greater than 15. so this is how we use relational operators now another type of operators is logical operators so there are three types of logical operators the first one is logical and and its symbol is and and it checks and it returns true if both the conditions are true otherwise it will return false so let's check if b is d is greater than b so if this is the condition let's see what is the output so the output is false as you can see d is less than c that means 10 is less than c that means this condition is false and this condition is true and as i told you and returns true only when both the conditions are true as one of the condition is false it returns false and the else statement gets executed and now if i change it to greater than that means now both the condition will be true and if i try to run it the output should be true and as you can see the output is true now the next type of logical operator is or operator and the sign is this now or operator returns true if any of the condition is true so suppose and if both the conditions is true it will always give true as the result so now if i run the output will be true and now if even if i make one of the condition false the output will still be true that means if one of the condition is also true the output is true and now if i make both the conditions false then the output will be false and then the final type of operator is not so over here if i write a is not equal to 10 then the output should be false but as you know the is having 10 stored in it so the output is false because 10 is equal to 10 and not not equal to 10 i hope are you and you are understanding so this was about operators in this tutorial we will continue with operators so the next type of operators are called null aware operators so for explaining this i will create a class num and it will have a variable or you can also call data members num and it will have a value of 10. we will learn about class in greater detail later in this course now after that over here i'll create a variable n and to initialize a class we just write num that is the class name followed by parentheses this is also called constructor then after that we'll create an integer variable no and now we will check if n is not equal to null null stands for empty reference then n o is equal to n dot num that means to get the data member num from the object n where n is an object of class num and then we will print n so now you can see when i print n it is showing instance of num and if i print no it should show 10 so you can see 10 is the output now suppose we have not initialized this and then if we try running then it will show null that means that no value is stored in n so now instead of if else we can use the null of a null aware operator so for that we will write n o is equal to n question mark dot num and try running it the output is again null but we over here we don't have to write the if else what it basically does is it checks that n is null or not if n is not null then it extracts the value from data member num and stores it inside no so now let's try see the difference by initializing n over here i'll write num now if i run this the output should be 10 so you can see the output is 10 now we will see another type of null aware operator so now i'll change it back to null and now along with this i'll add two question marks and give a zero and now if i try running this the output will be zero this means that if n is null then this will be the default value and if i again write num that means call the constructor and try running then the value will be 10. and then the final type of null aware operator is this it is written by two question marks and then an equal to so for that i'll remove this class i don't need it anymore i'll create a integer variable no and not initialize it and now over here i'll write print and no double question mark equal to 100 what this basically does is if no is null then it will store hundred in it and now let's try running this so you can see hundred is stored in no now the last type of operators are ternary operator so i'll create a main method and i'll create an integer variable 5 and another integer variable 6 and now for the ternary operator i'll create a boolean value bool ans is equal to no greater than no1 so this is the condition and if the condition is true we will set the value to true else the value will be false and now let's try printing the answer okay sorry the t will be small so you can see the output is false that means 5 is not greater than 6 this type of expression is called ternary operator where three operators are used over here the operators are a n s n o and n zero one the functioning is this is a condition and if the condition is true then this part is executed else this part is executed so this was about operators after operators now we will move to conditional statements so in dot there are two types of conditional statements one is if else and the other one is switch case so to study about if else i'll create an integer variable you know and store 100 in it and i want to print even if the number is even otherwise i want to print odd so for that i can use an if else so inside the if i'll try to divide it by 2 and get the remainder and if the remainder is 0 that means it is completely divided by 2 that means it is an even number so i should print even otherwise i should print odd or should be inside quotes and now if i run the program the answer should be even and now if i change it to 1001 the output will be odd and now if i want to have more than one condition then over here i can write else if so for that i'll write else if no divided by 3 and the remainder is equal to 0 then i will print divisible by 3 else print odd so now if i change the number to 99 which is divisible by 3 you will see the output is divisible by 3 so if i run it the answer is divisible by 3 so this is how we use if else for checking some conditions you can add as many elsif blocks you want but if and else block can only be used once after if else we have switch case so in switch case we use the keyword switch and then we need to pass a number or character that will be checked so i will be using number in this case and then we will check the case in case 0 that means if no is equal to 0 then i want to print 0 0 should be inside quotes followed by a break break brings the control outside of the switch case now after that i'll check for another case case 100 that then print 100 and then again a break and then finally we can have default and there we can print not 0 not 100 and we don't need to give a break because we are as it is at the end of the switch case so now let's try running this program as the number is 99 the default case should be executed so if i run this the output is not 0 not 100 and now if i change it to 100 the output should be 100 and if i change it to 0 the output is zero so this is how we use conditional statements in dot so the next thing that we will study in dart is loops so basically there are five types of loop the first loop is for loop so the syntax of for loop is very much same as in other programming languages we have the keyword for and then we create a variable where i is equal to 0 that is initializing a variable then setting the range i is less than 10 and then increment or decrement and then inside this we write the code that we want to execute so for right now i will be printing programming knowledge and now if i click on run programming knowledge should be printed 10 times so you can see it has been printed 10 times so this is how we use for loop another possible way to use for loop is setting this value to 10 and checking that i is greater than zero and instead of incrementing decrementing the operators and now if i run this code the output will be exactly same so these are the two methods in which we can use for loop the next type of loop is called for in loop so i'll just remove this so for in loop is basically used in collections we will study about collections later in this course but for now i'll just create a list and store one two three in it list is a type of collection that stores more than one values under the same name and now to run i'll write for where x where x is a variable that i have created in n that means x will have the have 1 2 3 every time the loop runs so now if i print x 1 2 3 should be printed so you can see the output is one two three now the next type of loop is for each loop for each loop is also used on collections so just for example i'll write no that is the variable that we have created dot for each that is a method and inside that it returns and that is each value inside the no list and then it should perform some tasks so to write which task to perform we first given equal to then a right arrow and then we write the statement print n in this case so now if i click on run 1 2 3 should again be the output now suppose we want to call another function so for that i'll write void print num it takes a value num and then prints it to the console so now instead of this print statement i'll replace it with my method name that is print num and it takes a value num which is nothing else then n so now if i try to try to run this i will get the same output now the next type of loop is while loop so for that i don't need this function now i'll create a variable integer type variable num and initialize it to 5 and now i want to run a loop while num is greater than 0 so to run a while loop the keyword is while and now over here i will just simply print the number and then decrement the number by one and now if i run the loop i'll get the output five four three two one so this is how we use a while loop now the next type of loop is do while loop so for do while we first try to do and then inside that the code that every time the condition is true should be executed so i'll just print the number then num minus minus and then after do we have while num greater than zero and now if we run the code we will get the same output now the benefit of do while over while is that even if the condition is true even if the condition is false the loop gets executed once suppose the condition is suppose the number is 1 that is already less than zero so now if i run the loop will get at least executed once so the output is 1 but if we use while instead of do while this will not get executed now if i click on run the console will be empty so this is the difference between while and do while now another thing that is important while studying loops is break and continue we have seen break in switch cases and now we will see that in a more elaborate way the basic concept of break is that wherever break statement is executed the control comes out of the loop so suppose i have number 10 and i want to print only till 5 but my while loop has the condition till check still zero so what i'll basically do is i'll check if num is equal to equal to five then break and the print statement will also be there and the decrement statement also so now if i click on run it should only print till 6 i guess yes so you can see the output only till 6 is printed because as soon as num value became 5 this condition became true and break was executed so as soon as break was executed it came out of the loop so that was about loops in this tutorial we are going to discuss about collections in dart there are basically three builtin collections that ships with dart one of them is list list is very similar to arrays that we have in most of the other programming languages we can define a list by writing the keyword list and then the name that we want to give to the list and a pair of square brackets so in this manner we have created a variable of list which has a name name and it has been initialized and it has no values in it and suppose if i want to initialize with certain values inside it then i can simply write them inside the square brackets and to add more than one value we can just separate them by a comma so over here i have a list name which has two values stored in it rishabh and ram so list also follows the basic indexing concept that we have in most of the programming languages except pascal photon etc that is the indexing starts at zero that means this reshop is stored at an index zero and ramesh is stored at index one so to print the values at a certain index we just need to write it inside the print statement and followed with a square brackets and inside square brackets we need to write the index and now if i click on run reshuffle should be printed and now if i change the index from 0 to 1 ramesh should be printed and over here i can also change this list to var and it should not give us any error this is because the dart with the help of type inference automatically converts this variable name to a type or to a list type which has strings values stored in it now we can have values of more than one data type stored in the stored in the list so to do so if i write 100 which is an integer and if i also try to add a double value then this will work and it will not give us any error so if i click on run 100 should be the output now suppose i want to loop through each of the values then the most easiest way is to use a for each loop so for that i write where i in name and then inside this i'll just print i and then i should be able to see all the values that i have inside the list and now if i want i can also change the values at a certain index in the list so if i want to change the value at index 1 in the list name then i can just simply change it to suresh and this should work and i can and it is not necessary to change a string value to another string value only we can give it a integer value also and now if i click on run one two three should be displayed instead of suresh so it is working fine and now suppose we want to have a list that only stores string then what we can do is we can change this where to list and after that inside angular brackets i will define the data type that means only string values should be there so you can see the red line below this integer and float values it is basically there because we have defined the list as a string values container list and it cannot store integer and double so if i remove this then it will not be a problem now if i click on run rishab and ramesh should be printed now let me change it back to var and i'll remove this comment and then i want to change the value at index 1 from ramesh2 123 and then if i click on run then it is changing okay and now suppose i want i don't want to change the value at runtime so what i can basically do is i can put a const over here which makes the values stored inside the variable name as a constant so now you can see over here i am declaring the variable name as a constant and after that i am trying to change a value so if i run this it should give me an error so over here you can see uncaught error unsupported operation indexed set and now if i comment this again and try to run this then this should not be an error now after that suppose i want to copy this list to another variable so for that i'll create a new variable n and i'll just simply write name and over here in the loop i'll change this name to n and now if i click on run the output will be same okay but now if i change the value of name means any value of the list name then the values in list n will also change okay so it is giving me an error because i have a const over here so i'll just remove the const for now for the explanation purpose so now if i click on run it is still giving me an error it is because i have missed a semicolon over here so now if i give the semicolon and run this again so over here you can see that if we change the values stored in the variable name then the values stored in variable n is also changing so basically over here it doesn't copy the set of values but both the list variables point at the same location that is the location of the data in the memory so to avoid this we have a special function that is prefabricated in dart known as spread operator javascript developers might be familiar with this so over here what we basically do is we surround the variable name with square brackets and before writing the variable name we just simply give three simple dots and now after assigning if we change the value of the previous list or the original list then it will not be reflected in the new list so now if i click on run the output should be rishabh and ramesh so this is how we get the two different copies of a list in the last tutorial we discussed about lists and in this tutorial we are going to discuss about another collection that is called set so suppose i want to define a set of elements so i will write elements and to initialize a set we give a pair of curly braces and inside suppose i have two values for instance hydrogen and oxygen okay so now over here i have defined a set elements that has two values hydrogen and oxygen and to iterate through each value we can simply use the for each loop so for that we write for where x in halogens then simply for now let's print the value okay now if i run this hydrogen and oxygen should be printed in the screen okay my mistake instead of elements i have written halogens over here so now if i run this hydrogen and oxygen should be printed okay so another feature of set is that if we have duplicate values then it gets removed automatically so for instance suppose i add another hydrogen okay and now if i try to run this we will get a single hydrogen printed on the console okay so this is a feature of set that we use while programming in flutter okay so the next thing about set is that to initialize a set if we write something like this which is correct according to the basic convention okay now if i try printing its runtime type so first of all to print the runtime type we write element dot runtime type and a semicolon over here and now if i run this so it is giving me an error because an s is missing right over here and now if i run this the output is hash map but our task was or our assumption was that this will initialize a set so this is a common mistake that everyone does okay so the curly curly braces stand for a hash map and if you want to initialize a set then we can just add our data type over here or the data type of the values which we are going to store and now if i run this this should change from hash map to hash set okay and yet another method is we can write instead of where we write a set over here okay now if i run this the output will be again hash set okay and i can also predefine the data type that will be stored in that set by writing like this and now if i run this it again says hash set but instead of dynamic now it has string over here which means it can only store string values okay so moving on this was about set the next thing that we are going to discuss is map that is yet another collection provided by dart and it is very much similar to dictionaries in python and hashmap in java and for different languages there is also some reference to this type of collection okay so you understand that how much important this map collection is okay so to create a map whereas for suppose say i create a map student okay that has a key value pair okay so the key is name and the value is my name okay then a comma then the another value that is another key that is h and the value is 20 so mark over here i can store different data types as my key and as my value let's say the third value is email okay and the answer is my email okay so now over here i have a student map that has three key value pair the key is name the value is rishabh key is age the value corresponding to that is 20 the key is email and the value corresponding to it is my email okay and now suppose i want to print a particular value so that can be done using the key okay so suppose if i want to print my name so inside print i'll first write the map name and then inside square brackets i'll write the key name mark over here i have my key as a string so the key over here is also a string okay and now if i run this reshafts should be the output okay so this was about map and over here we finished the collections now moving forward the next thing that we are going to discuss is functions or you can also call them methods if they are inside a class so over here this void main is itself a method itself a function the most important function in any dart program this is where the compiler will start executing the code from okay so now suppose i create another function a very basic function called sum okay i am writing dynamic before that that defines the return type and dynamic stands for the value will be assigned the data type will be assigned during runtime okay so the return type will be dependent on the inputs that we give okay so if i write where n1 comma n2 okay now simply i just return their sum so i write n1 plus n2 and now over here i call this method and since it is returning some values so i need to store it in a variable or a shorthand of a shorthand method will be i directly surround it with a print statement so that the return value directly gets printed and then sum i'll pass two values one comma two and now if i run this three should be the output okay and similarly as i have dynamic over here it is not confined to integer only i can also pass a decimal value which will be considered as float over here and i get a float output and i can also pass a string over here so suppose i pass two strings shove and kumar and if i run this rish of kumar will be the output that means string concatenation has taken place okay now the another feature about functions in dart is that if we have a single line function then instead of writing it like this we can use the shorthand method that dot provides that is giving an equal to sign then a right angle sign and then just writing the operation that we want to provide and in this case it is n1 plus n2 and we don't need to write a return statement over here and now if i run this the output will be the same okay and let's again check it with an integer if i write 1 comma 2 sorry now let's run this and you can see 3 is the output so this type of function is common in all types of programming language and this type of function is called positional functions that means the first parameter will be stored in the first variable defined inside the parenthesis and the second parameter will be stored in the second variable decided in the parentheses okay and the next type of arguments are called named arguments where we don't need to worry about the order okay so to make it a named argument i'll just put curly braces in between the parentheses and the variable names okay and now i can pass any value as per my choice okay so i i want to pass the n1 value so i'll just write the key name give a colon and the value comma similarly for the other parameter i'll write n2 that is the key name and a value okay now similarly if i run this the output will be three again okay and now the basic flexible flexibility that it provides over here is that i can change the order in which i want my value to pass okay so suppose i want to pass n2 as rishabh and n1s kumar so now my output will be kumar rishabh okay but if we would have gone by the positional method then rishabh kumar should have been printed but because we are using named arguments we are getting this flexibility to change the order of parameters that will give as an input to any method okay in this video we are going to discuss about class and objects in dart okay so if you don't know what is class and object you can refer to this website it has explained beautifully over here you can see we have a class car okay and then these objects are derived from this class okay so generally till now whatever we have done like whenever we wanted to store some value we created a variable and then that variable generally had some primitive data type like string integer and more like that okay but suppose if i want to have a collection of these primitive data types and refer to them as a single object then we use this class and objects okay so you can read more about this okay so back in our dot pad to create a class we have a keyword class okay and then we write the class name over here i am writing point that is a very common problem that we see okay means a common competitive coding question okay so i'll have two variables inside this in text and into i okay both are primitive data type and any variable that is declared inside a class is called as data members okay so now uh it is recommended that whenever we create a class and have some data members then we should initialize it okay and to initialize we have a special function inside a class called constructor which is used for initializing all the data members inside a class okay so now this constructor doesn't have any return type and it has the same name as we have of the class okay so over here the class name is point then the constructor name will also be point okay then we have created this method now inside this method what i'm going to do is i am going to initialize my data members okay so for that i will write x is equal to 0 and y is equal to 0 ok so this is done now to create a object of this class over here i'll simply write the class name and then p means that is the object name which is very similar to how we created any other variable like int x so that means we have created a variable x of type and okay and over here if we give var that means that was also correct and so is the case over here even if we write v a r over here this will also work this is absolutely fine but for the time being i am gonna use point okay so that it is clearer to understand okay so now to access any data members we simply write print p dot x okay and let's try printing it so zero should be printed okay so you can see we got an error over here and the error is because we have just created the object but we have not initialized it okay so to initialize any object we need to write the class name and then parentheses which is basically calling this constructor okay that means as soon as this point p will be created then this point method will be called which is nothing but our constructor so then our values will be initialized and the error will be not there so you can see the error is also null error that means the value is not assigned some proper quantity like this x and y are null they don't have any value stored in them then we are that's why the compiler is not able to print the values okay so let's try running this now so now you can see the output is 0 for x as we have stored 0 in x okay so now if i change it to 10 then the output should be 10 and you can see that okay so now i'll remove this function for now we don't need function right now okay so this is one type of constructor now we can have some parameters assigned also like suppose i am giving it a value in 8 okay and now over here when i call this constructor now i need to pass this value a okay so let's say i pass 200 okay so now over here what will happen that i am assigning the received value at a to this variable x so now if i print x i should be able to see the value that i have sent from here so let's see and you can see 200 is being printed similarly you can try for print p dot y now if i run this i should be able to see 200 and 0 okay now the next thing that we are going to see is uh like suppose i have the data members as x and y and the parameters i am taking is also x and y okay so like for first i need to give here another parameter because over here i am expecting two parameters so now if i write if i want to assign this x value to this x conventionally i should write x is equal to x and same goes for y i should write y is equal to y so now at this point the compiler will be confused as to which x refers to which type of data like is this x the data member or the positional argument that we have over here and the same for this x that whether it is the positioner argument that we get over here or the data members okay so in such scenarios we have a special keyword called this okay so if i write this dot x and this dot y so that means if it is written this dot x that means i am referring to that data member of this class okay so if i write this inside this point class that means my this is referring to this class and this has a variable y has our data member x which is this one so in this data member this positional argument will be stored okay so now let's try removing this and see what is the error and you can see the it is showing null that means no value is assigned because over here these both are referred as the positional arguments okay so if i add this dot y then the error should be gone okay i should be able to see 200 and 100 okay so you can see that so this is when this keyword comes to play okay so now this is one method to create a constructor there is a simpler method that a dot provides okay i'll remove this and i'll simply write point okay and then inside this this dot x comma this dot y and then a semicolon okay so this means that when we call the constructor the value that we store over here will be stored in the parameter in the named argument that we have over here and which is eventually a data member so the value received over here will be directly saved in this data member okay so now if i run this we will not see any error and the answer will also be the same but you can see the lines of code has reduced and it is a much more simpler way okay so this is it now after that the next thing that we have in a class is a function okay so our class generally comprises of three things uh data members constructor and some functions and the functions which are inside a class are called member functions and sometimes we also have a destructor okay so if you don't know about destructor then as we have constructor which is called at a star as soon as the object is initialized destructor is called as soon as the execution of that object ends okay so we are not gonna discuss about the destructor because that is not used a lot but if you want to learn you can go to the official documentation of that okay so now we are going to create a member function okay so i'll first simply create a simple member function that will simply print some data again it will have it will not return anything so the return type is void and the method name is print data and since it is a one liner function i'll write it like this print and then i'll use string interpolation okay and quite so now if i run this i should be able to see 100 plus 200 200 plus 100 i'm sorry okay so you can see the output is not as we expected and that is because over here i have not called the method that is my mistake okay so to call any member function we first need to write the object name a dot and then that member function okay so now let's try running this and then we should be able to get to the output okay and you can see the first two print statements give these two output and the last is this statement which is executing this function and over here we have this print statement x plus y so we are getting the value of x plus the value of y okay so this were the basics about class and objects so in this tutorial we are going to continue our discussion on class and objects in dart okay so now we are going to discuss about named constructors okay so sometimes we need to have more than one constructor such as one which takes two input values and the other one which takes a map okay so that may vary according to your requirement okay so in those places what our what we do in any other programming language was to create another constructor with the same name and over here the parameter will vary okay so that was the normal case that we had in java c or java or c plus plus okay but in dot this will give us an error okay so the way to have more than one constructor in a same class in dart is by using the named constructor okay that means the constructor will have an additional name to it okay so to create a cons named constructor we first write our construct class name okay and then the additional name so let's say from map okay and as the name suggests that this will take a map of type string and i'll call it map and then i'll store the value in this map to my data members okay so for that i'll write this dot x is equal to map and map will have a x value okay this dot y and then map will have a y value okay so this is done now let's try creating a point object using this constructor okay so for that over here i'll first instantiate an object point p1 and then to call this named constructor we write point dot from mac okay and then over here as you can see over here we are expecting a map so we need to pass a map okay so for that i'll open curly braces and then the first value is x and let's say 10 and then the next value is y and i'll pass 20. okay then i'll close this bracket over here now over here you can see the type has been mentioned so it would be better if we mention the type over here also this is referred as a good practice okay so string and okay that means in this map the key will always be of string type and the value will always be of integer type any other data type will give us an error okay so now let's try calling this function on this p1 object okay so for that i'll write p1 dot print data so now let's try running this and we should get 10 plus 20 as the output and you can see that so this is how we have more than one constructor in the same class by using the named constructor okay so now over here you can see this is how we create a named constructor but this is not the best way actually there is another way and that is called initializer list okay so for that i'll remove this from here okay and let's see how we use an initializer list okay so suppose my con con named constructor is same dot from map okay and it takes a map of type string and int and i call it map okay now instead of giving curly braces what i'm going to do is i'll give a colon okay and then i'll initialize the values so i'll write x is equal to map x okay and y is equal to map y okay and then over here only we can call this print data method okay so let's see what happens print data okay so this means this method will be called after the value is stored okay so let's try running this i'll just remove this print data from here we should get the same output let's see and you can see we get the same output so over here you can see our lines of code are less and the work is also optimized that means uh before the code inside this constructor starts running our data members are initialized okay so this is where initializer list comes to play okay and we don't use initial initializer list just to initialize but for other cases also like assert assert x greater than zero okay so that means it will check if x value is greater than zero and if it is not then this constructor will not run okay so assert is a special keyword that we have in that okay and the code will not pass from here until this condition is true okay if this condition is false then the execution will stop over here okay so this is done yes so now let's try running this i hope there are no errors okay and you can see there is an error okay so let's see what has happened okay so the error over here is that x and y are not getting initialized okay so instead of writing it over here i'll write it i'll cut it from here remove this okay and over here i'll write the same thing okay now let's try running this and i think the error should be gone by now and the error still exists because we are calling this and this is not valid so now let's run this again okay so now you can see we get the output now the next thing that we are going to discuss in class is getters and setters we can use the same type of getters and setters that we use in any other object oriented programming language along with that there is another procedure that that provides okay so to get a value we simply write the return type of the value and then the keyword get and then the name point x okay so suppose if i call point x i want the value of value stored in this data member okay so then simply i'll write this dot x okay so that means over here return keyword is applied implicitly okay so now let's try running this so i'll write print p dot point x okay so as i told in the previous video we call all the methods inside the class using the object of that class okay so now let's try running this and 200 should be printed below this and you can see that okay similarly we can write for y and get point y okay and then this returns this dot y now similarly over here i'll print this print p dot get y sorry p dot point one now let's run this and i should get hundred over here and you can see that now this getter is not only used for getting the data members we can use return customized answers also okay so suppose if i want to return a map of type string and and i'll call it get map okay then this should return a map of type string and okay and the values will be x and that will have the value stored in the data number x okay and then it will have a value y okay and that will return the value stored in the data member y okay then i'll close this over here and as i said the return keyword is applied in these both implicitly okay so then again i'll call this method point p dot get mapped okay and now let's try running this okay so it is giving us an error and that is because instead of print over here i have written point so now let's try running this and there we get the result it returns a map where x has value 200 stored in it and y has a value 100 stored in it that is same as we have passed in our constructor okay so this is how we use the getters in dot okay now talking about setters for setters also there's a different method that is provided by this dot so we simply write set that is a keyword in dot and then point x okay point capital x okay so now let's not give it uh give the same name i'll write set x okay and then it expects an integer value i'll call it x and then as we know how to differentiate this dot x refers to the data member and this refers to the parameter that we get over here okay so now let's try calling this i'll call p dot set x okay and then it returns expects a value i'll give 500 to it okay and then simply p dot print data okay now let's try running this okay so over here you can see we got an error so the error was instead of passing it as a parameter i pass it with an equal to sign okay so now let's try running this and you can see instead of 200 the value has now changed to 500 similarly we can set x set y for the y parameter and then similarly we can take a map and then map it to our data members like we did in the named constructor part okay so this was about getters and setters and by this we complete the basics of class and objects in that okay so the next thing that i want to discuss is about enums okay so enum is a special type of class that represents fixed number of constant values okay so to create and enum okay so now suppose we have a payment status okay like the payment status will have three values and those three need to be fixed values okay so in those cl those cases we use an enum okay so for enum we write the keyword enum and then let's say payment status that is the example scenario that we have taken payment status okay and then this has three values first one is not paid then otp sent and then paid okay so this can be the three members i'll give a semicolon over here comma over here okay i think we don't need a semicolon over here yes we don't need it so we have an enum over here that has three values not paid otp sent and paid okay so over here we can create a object of this enum okay so for that i'll add final status and to store any value from this enum we first write the enum name that is payment status dot not sent not paid okay so now we have a status which will have a data type of payment status and it has a value you can see in a payment status if i click on this also we will get the same thing that is payment status status okay so the status right now is not paid now to check so this is actually used widely when we use a switch case okay so in smith case i have a status okay and then i'll i'm sorry in such case we have a status and then over here the first case is case payment status dot not paid and if that is true then we want to do something and then similarly for the other two statuses okay so now you might be thinking that why do we use uh enum even when we can simply write it uh use it as a string or as an integer okay so enum is used for standardizing the values okay so now suppose over here if you have the stay santos okay so now suppose over here the status is not paid okay and in the switch case we are checking switch and then case and the case is not paid okay so you can see this is a common mistake that we can do like over here we have a capital p over here we have a small p and using enum we can avoid all these types of mistake also so that is another benefit of using enum so in this video we are going to discuss about error handling in dart and you might be thinking why we are using this editor instead of the dart pad and the reason is that in dot pad it automatically handles the exception okay and as we are discussing about error handling so we need to see the errors okay not all the errors but maximum errors in the dart pad is handled by itself okay so the concept of error handling is same as in any other object oriented programming language okay we have a try and then we have a catch okay and then this catch block takes an exception okay and if you don't know what is an exception so that means that is a technical term used for errors okay so in your program if there is an error then it is referred to an exception okay so and in the catch block we deal with the exception okay so now let's try creating an error okay and without this try and catch block so i'll use the most popular example for errors for creating errors that is division by zero okay so i'll create a variable a 10 sorry it should be 10 and then and then another variable b that is 0 and then in variable c i'll store the quotient so a by b okay and then i'll print c so now let's try running this and see what is the answer and you can see we are getting infinity as the answer okay so that is because whenever we divide by zero in that it automatically gets converted to a double value okay and in the double data type in dot we have a certain value for infinity so as this will give an output of infinity so it is automatically converted into double and the infinity value is assigned to this variable c that is why we are getting infinity as the output okay so to prevent from the changing of data types we need to add our tilde symbol over here so now let's try running this again okay and now since the it is not being converted we should get an error okay and you can see we are getting an error and as i told error is referred as exception so there is an unhandled exception and that is integer division 0 exception okay that means it is very much understanding that we have divided by 0 and that is why we are getting this exception okay but now suppose this exception is in an app and the user sees this error message so he might not be able to understand what this means okay so at that places what we do is we surround them with a try and catch block okay so over here a try and every try block needs to be followed by a catch block okay and then it takes an e that is the extra exception and that will be an object of this exception okay and then instead of printing these things i'll simply print division by zero is not possible okay and now let's try running this again and you can see that the catch block has been executed and it is printing division by zero is not possible okay so this is what happens normally in try and catch block the we keep the code where we expect it to find some error inside the try block okay and if some error is found then that terminate execution is terminated then and there and the catch block is executed instead okay so this is the use of try and catch block and this is how we generally use try and catch block in most of the programming languages okay so now in dart there is another thing that it provides us okay and that is for specific exception handling that means if it is a division by zero exception then we will handle it differently otherwise we will handle it differently okay so for that what i'll write over here is on okay so on is a keyword in dot and then the exception name integer division by exception okay so if this is the case that means integer division by zero exception is the case then we will then this statement will be printed so let's try running this and you can see division by zero is not possible that is inside our this on block okay now along with this let's try to let's try and check if we can have another catch block or not okay so now inside this i'll simply print another catch block and let's run this and see what happens okay so you can see only the on block is being printed and not the catch block means if the exception is of this type then only this block will be executed and not the catch block and if the exception is not of this type then only catch block will be executed okay so now let's create another exception i'll comment this out for now and i'll create a list let's say s is equal to one comma two comma three comma four and i try to print the value out of index okay so that means s4 where the list has index only till three zero one two and three so let's try executing this and see and now you can see it is giving me some different type of errors which is not actually an error but it isn't warning and that is because over here i have forgot to give the data type now let's try running this again and you can see the error has been created over here and since it was not of this type so this block is not executed instead the catch block is executed okay so this is how we handle error specifically means handle error for specific exception in a specific way okay and suppose if we want to get an object over here also so after this what we need to do is simply write catch e okay so that means when this is the exception then the exception will be catched over here and then inside this we can do whatever we want to do with this e block okay so this was about to try catch and this specific error handling now the next thing that we generally discuss in error handling is a finally block okay so that means whether the try block is executed completely or if there is some exception and a catch block is executed no matter what is the case after this whole part is over finally block will always be executed okay so let's see print always executed okay and now let's try running this and you can see the catch block has been printed means the statement inside the catch block has been printed and the finally block has also been executed okay so this was the case when there is an error now let's see if there is not an error okay then as i said this try block should be executed and then the finally block because that is always executed okay so this was about finally blocked okay so the last thing about exception that we need to discuss is creating a custom exception okay so for that i'll create a custom exception class okay since we are studying an object oriented programming languages most of our working will be done via class okay so i'll create a class age exception okay which will throw an error when the ages below zero which is not technically possible so class age exception implements okay so this is the way of inheriting another class properties okay or abstract class to be more specific implements exception okay so we have an exception class already inside that okay now inside this all we need to do is create a define our method string er msg or you can name it as and how you like okay so what it basically does is by implementing this exception we are basically able to throw this type of exception okay and whatever we do inside this doesn't matter with the throwing of exception okay this is our custom choice what we want to do with it okay so over here this will simply return h cannot be zero it cannot be less than zero okay so now over here let's see i'll remove this thing from here and now over here i'll create a variable a v r a is equal to minus 10. okay so that means if a stands for h so i'll check if a is less than 0 then i want to call this exception okay so to call this exception there is another keyword throw which creates an exception and throws it to the catch block if it has any or to the user if we don't surround it with a try and catch block so throw and then we write age exception okay so now let's see what happens and you can see we got an exception the exception was thrown over here that's why the catch block got executed and the finally always gets executed so in this video we are going to discuss about asynchronous operations in dot okay so the question that arises is why asynchronous operations so the answer to that would be a synchronous operations let your program keep running while waiting for another operation to finish okay so let's say for example we want to store data in our server so this type of operation doesn't execute instantly but might take some time depending upon the internet speed or size of data etc so if we don't use asynchronous operation user will have to wait until our program is interacting with the server which will create a bad user experience so to prevent that we use asynchronous operations and for this purpose that provides us three special keywords to use they are future a sink and a weight so first we are going to discuss about future okay so a future represents the result of an asynchronous operation and can have two states only either uncompleted state or completed state so how this works is when we call an asynchronous function it returns a uncompleted future and then future is waiting for the functions asynchronous operation to finish or throw an error and soon as it finishes or throws error the future state changes from uncompleted to completed okay so let's take an example and the keyword future we have capital f in it okay so let's say we have a future method a future function we call it fetch user data and what it basically does is return future dot delayed okay so this means that using this delayed method we can delay the process for some times that is equivalent to sleep in multithreading in java or in any other common programming language i mean object oriented programming language okay so then we have another class called duration and it takes all the time parameters that is seconds minutes hours days okay so for now suppose we assume that our program will take two seconds to interact with the server so i'll give it a seconds and that is to that means i this will wait for two seconds and then start executing okay and we are doing this because we have assumed two seconds to be the time of our program to be interacting with the server okay so after this we have an unnamed function which contains the code that will be executed after this delay of duration two seconds and simply i wanna print data okay so this is our function now we can also specify the return type of the future okay now over here in this fetch user data i have a return keyword but it is not actually returning any data it is simply printing the word data that means i am not returning anything and if i am not returning anything then we all know the keyword which is void which means this function will not return any data now i'll comment this out for now okay now after that i'll call this method fetch user data and after that i can say have a print statement switching user data okay so now let's try running this okay so now you can see we have fetching user data first and then data but actually according to the convention we have first called fetch user data which is this method so this should be printed first so that means our delay function is working fine and that is how uh the asynchronous functions work that means over here if there is a delay of two seconds it will not wait for two seconds to execute the rest of the code it will directly start executing the rest of the code and as soon as this finishes the future states become completed and it hardly affects the rest of the execution of the program so then this function is called an asynchronous function okay that means our program is still running and not caring about the completion of this function means the completion of execution of this function okay so this is how we use futures okay so the next thing that we are going to discuss is async and await so these keywords provide a declarative way to define a sync function and use the result okay so let's say this function remains same and instead of printing data now it actually returns something and which is eventually a string okay so means after two seconds data will be returned okay and now if it is returning string i need to change this to string okay and now after that over here i'll create another method which is string and i'll call it user message okay anything that we like and then what it basically does is where data is equal to fetch user data means we are calling this method okay and then i am simply printing this uh simply returning a string because we have a string return type here return data and now in our main method all we do is we remove all these thing and we write print user msg okay now over here you can see it is giving us an error so all we can do is surround it inside quotes and do string interpolation okay so now uh dart will infer that it is a string so now let's try running this and see what is the output okay so as according to the convention the output should be data but instead of that we are getting a future of string that means as i earlier said if we execute a future it returns a future and that is in uncompleted state and it is expecting to be completed or thrown error okay so now over here you can see what basically happened was that this function was executed and as this is a synchronous operation it didn't wait for this function to finish and returned the data and why and since this this was not yet finished it returned the uncomplete state of future and that is why we are getting such type of output okay so this is what we call a uncompleted future okay and completed future has a proper accurate value okay so i hope you are understanding what i am trying to say and now to prevent such type of error what we need to do is we will use the async and await keyword okay so what a weight keyword basically does is that it will wait for this function to execute or basically it will wait for this function's future to be of completed state okay and then this await function is giving an error over here and that is because a weight function never goes without a sync function okay a sync end of it always go together okay if we write a wait and don't write a sync it will give us an error however vice versa will not give an error and that is because a sink is just allowing that function to use a weight and then if we don't use a weight then that is not a problem but if we use a weight and we have not allowed that function to use of it then that thing will give us a problem okay i hope you are understanding these things now as you can see this is now a asynchronous function and over here also you have seen a synchronous function but the difference between these two asynchronous functions were this asynchronous functions a function returns a future while this asynchronous function is returning a string and that is why we are getting error over here because asynchronous functions always return a future okay so instead of string this will now be future string so now it is a future string and since it also will now return over here uh uncompleted state of future and we want a completed state of future that means we want some actual result we will use a weight over here also and now since this is using a weight we need to give a sink over here keep in mind async is always after the ending parentheses and before the opening curly braces okay so now let's try running this program and now instead of getting this instance we should be able to see this data being printed so let's see and you can see as soon as the execution is completed it waits for two second and then data is being printed so it is waiting for 2 second because over here we have used a weight which is making the program stop for 2 seconds until this has a completed state of future and the same goes over here so this were all the basics about future async and await okay so i hope everything was clear thank you