hey guys welcome once again till now we have seen how we can create our first nest js project and we have seen a broad overview of our nest js project now we want to add some end points to our rest api so what my plan is let me show you uh the api documentation which i want to implement so our api name will be car manager api which will be able to add a car or read all the car information or read full data of an individual car or it's going to delete a car or it's going to uh update a single car and these are the routes or endpoints which i have defined so we are going to define a get cars route and then we are going to define post car get car by id put car by id and delete car by id so this is what we are going to do and by the way you can also create this kind of swagger documentation using your nest js framework but this is not the part of this demonstration i just created this swagger documentation separately for this demonstration but i'm not going to show you how you can create this using nest js so let's get started so because we have already downloaded the nest js cli we are going to use the nest jscli to create our module service and controller so uh the good thing about nest cli is we can create our module or service or controller or it can do many other things automatically so you don't need to write your modules or classes or typescript files from the scratch right so what we are going to do is we are going to generate a module a controller and the service for the car so as you can see these were the files which are automatically generated for us we are going to remove all these files once we have generated our car module controller and service and we are going to use that because we don't want to just send hello world for example and this route is not even required in our api right so process of creating the module controller and service is really simple using nest cli you just need to write nest and then you just need to give this flag g or you can just write generate here in the short form you can just write g and then you write what you want to create right so for example first of all we are going to create a module so i'm going to just write module here and then give the name of your module so we are going to create a car module so i'm going to just write car here okay so nest generate and the name of the component you want to generate and then the actual component name which you want to generate just press enter which is going to create a new module for you so when nest js create a module or controller or a service it's going to create a folder with the same name which you have given here so we have created the car module and inside this we have this car.module.ts file right now as i already mentioned uh this at the rate module is the decorator if you want to create this car module from the scratch you can simply create this without using this cli also you just need to add this module decorator on top of your module class name and this module is present in the nest js common package right so just write nest g controller and the name of your controller and then press enter and it's going to create a new controller for you so here you can see this controller is created for us and you can see for the controller you need to add this decorator controller and then you need to add the route which you want to add to your controller so we want this sub route which is car as you can see all our our route have car car car car we are going to create the get car route also we are not going to create extra cars module or controller uh i decided that we are going to just create a car uh route here not cars right so keep this in mind uh and now we are going to create a new service for our car so here you just need to write service so nest g service car and it's going to create a new car service for you okay so we have generated the module controller and the service uh ts files also two extra files are created for the unit test car.service.spec.ts which is the unit test file for the service dot ts file and you also have this spec dot card.controller.spec.ts this is the unit test file for your car.controller.ts file right so now you will also observe that in your main modules when you go to the main module you will see here that under the imports element there is a new mapping which is added here which is cars module and this code is also auto generated right so if you are creating your controller or module or your service manually without this command line you just need to add your module which you have created and you just need to import it under your main app.module.ts file right and now what i'm going to do is i'm going to remove the controller and provider which is the main app controller and main app service provider because we don't want uh this we just want the car module car controller and uh car service right so i can just remove this controller from here and this provider from here and remove these imports now let's go to the car.module.ts so i'm going to go to theta.module.ts here and you will see that inside this module we have imported the car service and the car controller okay so these files are also automatically generated and we have added the decorator here as i mentioned earlier and then under controller we are going to add all the controllers in our case we only have one controller which is car controller and under provider we are going to add all the services right so we only have car service right now and we are going to just export this uh module and this is the same module which we are importing in the app.module.t file which is this one right also we don't need this main app.service.ts file because we have removed uh this dependency so i can just right click and delete this service file also we can delete this controller also right so i'm going to right click and delete the controller for the main app and then app.controller.spec.ts file also i'm going to remove right so now we only have the car controller car module and car service and unit test files for that and we have this app.module.ts where we are just importing our car module and in the main.ts we are just importing our main module and we are just starting our application on the port 3000. so now what i'm going to do is i'm going to just clear this terminal and i'm going to just uh transpile my typescript file to see if everything is working correctly or not so i'm going to just write npm run build here and once uh all the files are built successfully and if i don't see any error we can move forward so as you can see there is no error in transpilation so we can move forward so what we are going to do is we are going to start from the controller here so let's create uh some of the endpoints in this controller so the first thing which we need to add to the controller is the service so we are going to inject the service which is the car service into our car controller so i'm going to just uh create a constructor here and inside this constructor we are going to just inject our service which is the car service so first let me just import the card service in car controller so i'm going to just write import and then i'm going to just import the car service which we have already generated right so just write dot forward slash and then car dot service right so once we have imported this car service you just need to add the car service name also here and because we have provided the same name here car service right so we are importing this inside our controller and now we are going to just inject this service instance in the constructor and now we are going to just inject this car service instance into our uh controller constructor right so i'm going to just name it as a car service and also i'm going to remove this space from here so once again i'm going to go to my car.service.ts file and you can see in the service we have included this at the rate injectable decorator so whenever you create a car a service or any service manually you need to add this at the rate injectable decorator on top of your service right and that makes your service injectable and that's how nest js is going to recognize that this service is injectable so we can inject this service inside the constructor of the controller right now we are going to create some of the endpoint methods for our car controller so the first method will be get cars let's say so i'm going to just make this method a sync method and let's say that method name will be get cards and in the body of this method we are going to just call our service instance for now so card service this dot car service and we are going to create different methods uh later in the car service also and we are going to name this method same which will be car get cars so this method we are going to create in a moment in the service and also because this is an async await method so you can uh just uh write return here if you uh are not returning anything then you can also just write return without our bait here i'm sure you know uh this concept from before also right and then we are going to provide a new decorator and this decorator name will be a get so at the rate get here you just need to add get here and you just need to import get uh from your nest just common uh package also so you can see get is here and we are adding this get decorator here and you just need to add these parentheses here and inside these parentheses you can provide any uh sub route so if you want to get the car by id you can just write id here or whatever routes you want to add here right so for now we would just want to add the get method so when you just add this empty get method this means that you are just calling the get method on this car route right so let's add this get cars in your service file also so i'm going to go to car.service.ts file and here i'm going to add the public method which will be a sync await method and i'm going to name it as get cards and in the body what i want to do is i want to return something for now i'm going to return empty object from here now we also need some kind of mock data for the cards so i'm going to create a new file here and i'm going to name this file as cars dot mock dot ts file okay so here in this mock file what i want to do is i want to return some kind of dummy car object array right so i'm going to just uh export const cars is equal to then some kind of dummy data which i already have so i want to add one object to my array which will be already available so this array will be a mock array which is going to return this one object which is already present here and the other object we are going to add dynamically to our array when some request comes right so what we have done till now we have added this get cards into our service and into our controller right and we are just calling or returning the get cars uh method from the car service inside your controller also inside this get cars method so inside the cars dot service we are going to import our mock also so let's import our mock which we have created which have the name cars here and we are going to import it from the mock file which we have created and now uh we can use this cars object which is our mock data inside our car service so i'm going to just write private and then cars here which will be equal to this cars which and then we can return this uh dot cars uh from the get cars method right so now we have uh just uh finished first end point and we can test our endpoint by just running npm start command once your application is running i'm going to just open my postman and then i will just write http colon forward slash localhost 1000 which is the port on which our application is running and then i'm going to just give this uh end point which is car here so essentially we are just sending get car uh request to our application let's uh send this data and you can see it sends us this kind of data which is sent using this get cars method which is there inside your service and we are just returning the mock which we have just created which is uh this one right and first of all this request reaches to your controller and it sees that your base route is car here and here we haven't added any sub route so that means we are just uh responding to the car uh get car request using this get cars method i think that's it for this video in the next video we are going to add all the other uh routes or end points to our nest js restful api i hope you enjoyed this video and i will see you in the next video