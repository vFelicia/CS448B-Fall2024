hey what's going on guys welcome back to our YouTube channel and welcome to this video this is John from programming knowledge and in this video guys we're gonna talk about the C goto statement okay so so far we have discussed the if statements and how it is used in C the control statement execution based on some conditions or decisions now the flow of execution also depends on other statements which are not based on conditions that can you know control the flow and of course C supports a unique form of statement that is you know go to goto statement which is used to branch unconditionally within a program from one point to another point inside our C program so although this is not a good habit to use you know goto statement in C but there may be some situations where we can use the goto statement and it might be you know desirable to make use of the capability of the goto statement so the goto statement is used by programmers to you know change the sequence of execution of AC program by shifting the control the different part of the same program so I think I have mentioned this before in our you know tutorial series that the execution of a C program is sequential you know like if you have statements from line 6 here 7 & 8 & 9 so it will try to execute from line 6 7 8 9 then sequentially okay but you know we have this goto statement to control that particular flow we can go to the a certain point of our program by using the goto statement so basically this basic syntax our goto statement is like this we have this particular syntax or goto statement so we have this keyword doto and labelled okay and then of course we need to add label at some point in our program okay and of course the long version of this syntax is like this the P show you are real quick so we have like a few lines and then we have the label and then we have the statement and every time the program meets or found the goto statement so it will try to find the label that has been specified in this particular line so go to label and then it will skip the lines or statements between or other you know other statements and it will go directly to the label and it will execute the statements below the label in our C program now we can implement this and of course guys it can also be used to this is a forward jump in our program because we have specified the goto statement and then it forwarded to the label statements below okay but it could be also the backward jump of the programs for example after execute execution of some lines it will jump into this particular label so after execution it will jump to this level that's why it is called the backward jump in our C program so say for example if you have like no other label available here so it will jump the program execution from here and then go back to line 9 so that's how the backward jump inside our C program so let me just clarify this it is called backward if you know the goto label is here and then it will try to jump on top or the lines before that goto label it will execute all the statements under this hay and it is called forward John if the label is here so after this or after execution of this line it will try to go to this particular line label and it will execute the statements under this project particular label so now let's try this and let's just build a practical or simple implementation of this goto statement so let's just remove this and then we can try to ask for an age just like what we have from the previous video and then we can try to add the labels for example G and this will be the label name okay and then of course we have a statement under this particular label so print F so for example we will try to execute this if the age is 18 so like you are eligible or something okay then we can try to add the new line here and then of course we can try to add another label so another label name and we can print you are not eligible okay something like this and we can also add the new line here okay and then of course we do have the statement to ask for the age so enter your age okay and then semicolon and then we can use the scanf function to get the actual value from the user so presently which which is these format specifier again and then 1% and the variable name which is ade and of course we can have the condition right here like if the variable H is greater than or equal to 18 then you can use the statement go to the label G okay and else we can go to the label s okay now as you can probably observe here we are using ifelse but we don't have the curly braces right so you can do the if an else statement like this without the curly braces because we only have one line in this particular or after the condition we have only one line and over all so else we only have one line but if you have like five lines here you have to add the curly braces okay so in C programming it like understood if there is like one line to execute so there's no need to use the curly braces okay now we can try to run this and see how it works for example build and run our application and try to evaluate and see how this particular program works so basically it executed line G and line s right so you are eligible and you are not eligible now if we try to go or input number 18 right here so it will try to execute again the line 9 10 11 and of course it's gonna you know ask for the age again right so it starts from this particular line 9 which is the label G because we have specified if the age is greater than or equal to 18 then it will try to go to label now if you try to go to or input 16 so it will try to go to label or yeah 911 which has the label s right and it will just display you are not eligible and it it did not execute the statement from line 9 or line 10 it directly I'll go to 11 line or line 11 which has the label s and then it printed out the statement you are not eligible and also it also adds the or I mean asked the age again and then it asks for the input from the user hey we can try this one more time so for example 15 so it's going to execute all the lines starting from 911 with the label name s okay so guys as I mentioned earlier that the the goto statement is a unique form of statement okay and sometimes it is not advisable to use goto statement in your C program but there are situations or conditions that you might want to use this particular goto statement so for example if the you if you want to skip some of the lines in your program so let's try that okay so like for example you have statements like this printf and then this is the end of the program okay and then we can go like start abusing s we can add a label here e and then it will execute you know e instead of s so basically after this condition returns false then it will execute this and it will call the label e and then execute that this is the end of our program so let's try that execute our exit our program first and then build and run so let's try to input first 18 so it's going to you know execute from 9 9 until line 15 and then if we try to input 10 then it's gonna say this is the end of the program ok so I think that's all there is to it in this tutorial guys and I hope that's clear on how to use the goto statement in C so again this is quite useful in some situations and if you have questions please let me know in the comment section below and we will try to answer your queries and again guys thank you for watching and see you in the next video