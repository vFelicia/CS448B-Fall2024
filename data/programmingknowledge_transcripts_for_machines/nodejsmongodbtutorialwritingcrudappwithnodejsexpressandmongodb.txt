hi in this video we are going to learn about mongodb so before getting started with mongodb we have to know what is mongodb well mongodb is a general purpose document based distributed database built for modern application developers and for the cloud era and the data that is being here stored is stored as a like documents and it's called as a nonsql database there is no schema there is no structure here so it's very flexible compared to as the sql database so let's start with uh signing up here or registering here so we are going to click on the try free button and here you can get started free after signing up you will go to the atlas space cloud atlas space server because we are going to use as a live as a production deployment basis so when you start free you have already signed up and after signing up after signing signing up you will go to this space where you have to create a new project so let's say our project name is tv demo after that you will be redirected to the this space which called give remember that's not necessary we can create here create project after that you will be on this page where you have to select builder cluster here we are going to use create a cluster that is a free and we are going to use this cloud provider aws and wherever you are select the nearest server after that in the cluster tier we are going to use free forever and there is no need you can change the name of your cluster if you want to now we are going to create a cluster it will take some time to create the cluster so now we are okay and now we are going to see how can we get started with the mongodb in our app well for app we have to use the mongodb driver that is prebuilt and that is being used here so in here we are going to use mongodb driver so let's open our project now we are going to create a new project let's say let's say mongodb demo now we're going to go to this mongodb demo folder one sec yeah db demo now we are going to initialize the npm using npmany that's what and now we are going to open our editor the visual studio code so for uh using the mongodb here we are going to install two things first one is mongodb express here you can see that the mongodb and express has been installed here so for starting this starting the project we are going to use npm node node app the file that i have not created right now and for their part we are going to create we are going to use nodemon nodemon app so for nodemon we are going to install it in the dev dependency part using nbm install test test save test the save dash dev node now here we can see that in this space the connection has been made so for connecting it into our app we are going to click on the connect and here you will see that there are some connection requirements are needed so first of all we are going to go to the database access here we are going to create a new user let's say instrument and let's also generate a secured password and we are going to select read and write to any database now we are going to select the network access here we are going to add the ip address which is either add current diapers which is help to give the secure authentication now if we go to our cluster section now we are going to connect now we are going to connect to the cluster so for connection we are going to use the connector application here we are going to use this connection string so let's copy it let's copy it after copying it we are going to now into our app we are going to create a new file let's say app.js in here we are create the express module or take the express module from the express and we are going to use the app and requiring the express as a function and it will listen to the port 3000 for installing the server so it's complete the server can be started but here we are going to use how to get started with the tv so we are going to let's say we are going to create a new folder let's say utils in here we are going to create a new file let's say db dot js in here we have installed the mongodb driver into our project so we are going to require it from the mongodb and say mongodb is equal to require mongodb in here there is some called client which we are going to require from it which is a which is a property of it which is a file of it which is a field of it so in here we are going to connect to it as a client for connecting we are going to use client dot connect in here we are going to pass the url so for passing it here we have used the password but as i have forgotten the password we have to again require the password for requiring it here we are going to edit it and edit the password here we are going to auto generate it from here and we are going to require it from here and let's update the user now in here there will be the url so let's see here is the password and we are going to get a srv string from the connection so here we are going to again copying it and let's say here const url is equal to this one so here we are going to cut from here and paste into it here the password after doing this we are going to use the url as a parameter here and that's it we are going to connect from here it will take a callback function and it will take two arguments first one is error if there is and second one is the client and now if we say if there is error then return if there is no error let's console out the client base client now that's it if we start here from npm run dev so if we run it it will say nothing it gives nothing that's because we have started the app file but we haven't connected with the dvd.js file so for connecting it we have to like say all the code is here so before cutting or pasting it from here to here we can do this like we are going to require it from dot utils and get a db file so if we run this now we can see that it will give the client back so here it returns the client all the things all the fills that are here now here we are going to see how can we deploy the operation that is create re update and delete so for doing the crud operation we are going to you we are going to use the client and by client means we are going to create a new const tv which take the client and db and let's say our database name is the test so test is a database for the collection means for a table in the sqlize database where here we are going to use the collection as a table so let's say the name is user users in here we are going to first use the insert means create how can we create a document in the collection so let's see if we are clear going to create a one document we are going to use the insert one method in this we are going to give an object let's say name anseman is 21. after that this returns a promise so for handling the promise we are going to use a 10 which takes a result which gives a result and we are going to console.log the objective we have sent using result rest.ops and if there is an error you can see it from here like e console dot log error now if we save it and see that there is one document that we have inserted that is this one and if we sing to our more atlas we are going to see in the collection and here we are going to see that there is a database that is called test and the document or a collection that is called users one docs instrument instruments so we can also use how can we insert more than one document we can do that by using another method let's say you can do this by using db dot collection users users dot insert many here we are going to use the array because we are sending more than one document so by doing this we can send more than one document let's say here renee is 21 or let's say 27 and another user let's say ankur is 25 so it will be a number so here also will be number so we have inserted two documents here now it's a promise so we have to use the promise sequence we are going to use 10 and console.log the result that we have sent using response start ops and also we can case the error by using catch method and see if there isn't any error we can console it now if we send it back we will see that we have sent two documents vinay and ankur now if we refresh it we will see that there is two documents vinay and ankur now we are going to see how can we find or read any data so for reading a document we can do so by using another method that is used it is tv dot collection users dot find if we are going to find one means we are going to find only one document we have to use find one method and lets say we are going to find we are going to filter out the document that we are going to use let's say s will be the 27 that means we are going to find the document that is vinay now let's take a call back so we can use the dollar 10 response and it will log out the result by using response and if also if there is an error we can catch it using console dot log editor now if we save it and use it you can see that we have we have been returned with the name binay and the s27 now we can also find all the documents by using another method that's called db.collection users dot find well fine is being is different from other methods well it's uh it gives a pointer so it gives a cursor back so we are going to use to array means it will return the file as an array and now we can use the response and response back and if there is an error we can error it by using console dot log error now if we save it we will see it returns all the documents because we have same nothing so it returns all the answer and we need occur now if i send like something called is is equal to 25 or 24 here we see there is no documents like this now if we save this it will not give an error it will just send back an array means it's an error so it's not an error if you send the send out of filter value that is not being there in a collection so the our operation is completed now we are going to see how can we use the you operation it is update so for updating our document we are going to use update 1 and update menu update is being duplicated from the newer version so we are going to use update 1 and update menu for updating only one document we are going to use update 1 by sending one parameter that is the is 21 and updating it with some value and it's also is a different from how can we set it so for setting it we are going to use dollar set and we are going to send back the updates and value as is 59 now it's complete now it's a promise so we are going to send dot 10 response and if we see and if we console it into our command prompt we will see that it returns a very big heavy object and let's save it and we will see that it gives a heavy object now if we see that we have updated the value of the s21 that is that is unsure so if we see here and if we refresh it here we will see that the s is different as is 59 so that's how update is done and here gives the response gives a very big heavy load and we only want two main fields like matched count and modified count so for updating more than one file we can use like we are going to use another method that's called that is jb dot collection users dot update many and if we send it here like nothing so it will be updated all in all the documents so let's say we are going to increment all the a's by one so if for it we are going to use one that means we are going to increment by plus one or if we are going to decrease we can use minus one so we are going to use plus one so it's an response it's sensory it's a promise so we are going to also again using use the dot gain method and it's going to send the response and we are going to use only one thing that is called modified count and if there is an error we can use catch method and we are going to console it here now if we see it and if we save it in and we will see that all the documents are being modified and the modified count is three now if we refresh sitting down into our cloud service base mongodb we will see that ulnsman is is 16 we need age is 28 and cruz is 26. now you have or we have done the new operation that is update operation now we are going to see how can we use the last operation d that is delete so for deleting any document we can use tv dot collection dot delete one or many so if we use delete one it will take out the filter that we are going to use let's say we are going to delete the document instrument so we can use the edge method or we can use the name method let's say here is unsure now for deleting here that's it now if we it's a promise then if we response is back it will give the document that we have deleted now if we response back and if there is an error we can see it in here and sorry that will be e and if we save it here we will see that oh it will give hold the document because i haven't used it response dot delete count but it if we see here in our mongodb database we will see that unsman document has been deleted now if we are going to delete whole file this whole document we can use the method that's called that is called delete many and it's very easy so delete many we are going to send the empty error empty object now if we dot 10 and response back and we are going to see how many how many documents have been deleted so we're going to use deleted count and if there is an error we can use catch method and it will give the error if there isn't now we have saved it now if we see in here it will give that only one has been predicted oh story now because we have used only delete one if we use delete many you can see in here now it will not give the required thing that we want but it will it will be true so yeah that's it how to build the rest api so before building the rest api we have to download one or two things that is first we have to download the postman postman you can download it from here and the second one is the compress mongodb compass from here choose the platform that you have and the version that is the stable one and after that we can go to our project in here that project is already been given and i have only added one property this password and it will be there in the description the repo link of this project so now we are going to build the rest api so before building a rest api we are going to i'm going to show how can we uh how does it look like so let's say app.get the request that we are given and the part and there is one callback function in which two parameters are there it is request and response in this we can response back with response.send let's say testing and if we write testing here and after that thing we are going to run this file and then again we go to our browser and let's see localhost return we can so let's now begin to build our rest api so before building the rest api in our tv.js we are going to export this line so for exporting this line we are going to use more module module sorry module dot exports equal to user and after that we are going to require it from here so for requiring it from the db file we are going to use user and require it from the utils utils file utils folder and then dv now we have required the user now if we are going to like create a user here so for creating a user we are going to use the post request so we are going to use post request in which we are going to send get the write the part as a slash users and we are going to use with asynchronous process here so we are going to use async await methods so async await so async request response and what the data can we get from here so let's say console it from console.log request dot party so now i have run the file but how can we see the request here so that's why we are going to use the post menu postman is like a browser request sender or anything that the browser can do for sending any request to the server it can do the same thing firstly so let's say we are going to create a new collection so let's say for new collection let's say mango mongoose demo and in here we are going to create a new get request or a post request so add a request here let's say for create user so in here it's a i'm going to close it down all the requests that are here these are all the previous one that i have used for another project so in here we are going to so now it's a post request so we are going to send the post and it's it's going to be a local host 3000 users and now we are going to use the body and in here we are going to select raw and we are going to send back back the get as a json file so in here if we send like name is like john doe and ace is 21 now if we send it back to the change here and now if we go to our here you can see that the undefined is getting console log out here so the problem is here that the request dot body that we get is not specified of which type so here we are going to use a new middleware app.use express.json and what it will do that it will parse the request dot body that is a json type and it will not pass any other type of request so now if we send back again the same request we can see the console log output so now if we again send it back now you will see that it will send the request that is named john joe and estimate now now we are going to build a api so we are going to use async await asynchronous process so it's a very very useful process a useful tool that the javascript gives us so here the user for saving the user we are going to use await function which is a asynchronous process so user dot save because for saving we can use user.save and in here we are going to just send back a request dot party now if there is an error so for catching an error we are going to use try and catch block here so for an error it will use like this so we are going to use a try block here and if any error then responds back with an status code of 400 and sent back with nothing or e dot message and if user is being saved successfully we are going to use your response or here we are going to use also something called const because here we are going to create a new user so here we are going to use the const user is equal to new user request dot body and here we are going to simply write user dot save now it's being saved and in here we are going to respond back with status code of 201 which is a code for creating a any collection or a document so we are going to send back with a user so let's say if we save it now and if we again send back with the proper properties let's say name is given as is given we also have to write for email so let's say john at gmail.com and again password and for password we can type like one two three and now if we send back here you will see that a new user is being created here now how can we see in the u in the mongodb collection so for that for this we have we have also downloaded the mongodb compass so in here we are going to just copy and paste the url that is the connection url connection string url so let's say let's just copy and paste copy from here and paste it and paste it here so if we paste it here and now if we connect it we will see that the new user is being created in here if we go to the paste in users yeah you can see that a new user has been created now we can also see if there is any if there is any failure in creating a new user so let's say the password here is of length 3 and which is required like you can see that in the message it is written that user validation file because the password is sorted and the minimum length is allowed it is 5 so the new user will not be created and it will go to the catch block so now we are going to see how can we get all the users so for getting the users we are going to create the new parts that is which is the same part but only the request is different it is gate request now it will also take the request and response and in here we are going to use a try and catch block and try and catch clock if you know let's say if there isn't any server side of error so we can use 500 of error and send it back with nothing on it now we can use await here and the user dot we are going to find all the find all the users so for finding we can use find user.find and here we can pass any filter out but we can simply right here like give any an empty object now if it give a users back so for this we can get the users and if there is no users here like no users are being there so we can use if not users then it will return back from here response dot status of 404 and stand back with nothing on it and if there is if it is successful then we can send status of 200 and send back with users so let's check it out if it is right or if there is any mistake in here so in here we are going to create a new request here so we can create it from add a request and from here like we can i get users and save to mongodb now first of all we are going to like create more users here so let's say if it is running or not oh there is some error here i wait oh yeah we are going to use a weight so we it is compulsory to add a sink in the function below so now if we go to uh go to our postman and create a new user let's say jessica and here like s21 is right and like let's say jessica and let's see here j1236 now if we send the request of post we will see our new user is being created here and if we refresh it here you can see the new user is being created now in the gate users we are going to fetch all users that has been created here so we are going to use localhost three thousand plus users that is the path and it's a gate request so now if we send the request we can see that all the users is being created here so now now we are going to see how can you fetch how can we fetch only one user so it's a get request and it will also go to the users part but here the id of the user can be different can be anything so here we can use column id and here it's a async process also so we are going to use async request response and if we and also it is it is going to be in a try and catch block now if it is an if there is an error we can send the error back and response dot send like 500 and sorry response dot status 500. e dot message now how can we use the id so first of all we are going to see what we can do here so it's a parameter so it's a it's going to the request dot parents here so now if we consolidate console.log what's in here console.log request of parents and for right now we are going to just comment it out here and now if we save it and go to our yeah go to our this block and we send like we get it from here and send back here and if we see it and if we go to our project we can see that it will give the iron object requested pattern that is the object so now we are going to use the triangle catch block so let's come in uncommented out and now if we you know we are going to cons user find by id because we are finding it by id sorry await and user dot find by id and for finding by id we can just send the uh give the request.params dot id here and now uh if there is a user of the request then it will send back the 200 and if it is not if it is null we can check it from here like if not user you can return back like we did the same thing in here so it will return back with the response of status 404 and send back it nothing and if it is true and then we can send response dot status of 200 and send back the user now if we save it and now we can go to our first name and if we again run this thing you can see the user is being called out and we can get the user now we are going to see something called for how can we do the update so for updating any user we can use update dot patch request which is an updating request and in here we are going to use also slash users and also we are going to use the parameter here and it will be a sync function and request a response and now it all and for uh updating something we also need a body because the browser or the client will set anything that you want to so it will be resetting in the body part so here from here we are going to use the try and catch block try and catch block inventory if there is an error we can say response dot status of 500 dot send e dot message so now if we can also use cons user because there is only one user of that id that is being decided we are going to use await and here we are going to use user dot find by id and we are going to use this function find by id and update so here first it will take the request dot params dot id and next one it will take the update we are going to do so request dot body that's it and if there is user of that type if there is a user then it will return if sorry if it is no there is no user of it of it then it will return off return back this return dot response obvious status of 404.844 because there is no problem dot send nothing and everything responds back with the new update value so status of 200 dot stand of user but it will not work properly because it will it will it will not check if there is any variation or not so there is optional properties required that is it will give the new user and it will set to true and it will check for validation for running validator we are going to use run validator in here which is look like this this one will run the new and run validator and now if we save it and we can go to the postman and then here we are going to create a new collect new request that is an update user so we are going to update the user and then we are going to save to the mongodb and now if we are going to patch it here and localhost 3000 and we are going to use the this one this pattern and we are going to send back with body and we are going to select the raw and i'll just select the json and now let's say we are going to say uh update the a's of this user so it will like 34 now if we send it back we can see that the user is being updated and as it's 34 and if we refresh it here we can see that the asus repo now we are going to see the last one that is app dot delete how can we delete a user so for deleting we can use app.delete users as well as id and it will be a sync process and we are going to use request and response now we are going to use try and catch block here also and now we are going to see that if there is a user that is right then await it will give the user the await user dot find by id and relate and here we are going to pass the patterns of id so the same thing that we have done in the previous request that if there is a user then it is good and if it is not then we can send 404 message so in here we can also respond back with a message so so now if we if we save it now if we save it and go to our postman and create a new or just say we are going to select the light here and we are going to delete this one and there is no watch required here so now if we send it we can see that you it will give the user and if we refresh it here we can see that the john doe user is being deleted so that's how the rest api works here we are going to look into a tool that is called mongoose well when we are using the mongodb library we are using for the current operation but for using other functionality like validation type casting is a bit difficult in this so we are using a new library that is called mongoose mongoose is a npm library that is used for validation typecasting and also the other grid operation that we perform into it so let's start with our new project let's say we are going to create a new project name called mongoose demo we go into new project mongoose demo now we are going to initialize the npm and it by using npm any test y after that we are going to go to this project by using code space start now in this project we are going to initialize how are we going to start the script so for production purpose we are using node app and for dev purpose we are going to use node mod app now let's create a new file let's call app.js now here again we are going to install new libraries first we are going to install node mode library for installing it npm installed test as save day step not one now we are going to install npm express and mongoose for installing it we are going to use npm dash express space in the meantime we are going to use all the configuration that is needed here let's same cons express is equal to require express and and we are going to use the app that is going to get required from express as a function and we are going to listen to a port number let's say 3000 now for using mongoose into our project we are going to create a new folder let's say utils in this folder we are going to create a new file let's say db dot js in this file we are going to create a new const mongoose and we are going to require it from mongols after requiring it we are going to connect our mongodb to our the current project so for connecting it we are using connect function that we have used in the mongodb driver so we are going to require the server means we are going to require the connection string that is here now let's copy it from here and we are going to paste it into the connect function in here we are going to replace the password that is given here and pasting it into the password field after pasting it we are going to use optional options that is given here like use unified topology to true and use new url parse33 after that it is using if we are using the dan function here like it returns a promise and if we used then it will give the successful result and if it is error it will give an error now for starting this file we are going to use the this file using requiring it from the file using this thing using required dot dot slash dot slash utils flash tv and now if we run this project by using npm run dev we can see that the connection is established now we are going to use the mongoose in our file so we are going to remove this one because there is no need of it now we are going to create the model of our of a user so for creating a model we are going to use a term that's called schema so for this so for using schema we are going to require it from the mongoose so let's say schema cons schema mongoose dot schema after that we are going to create a new schema of user so for creating it we are going to use any user schema variable and after that we are going to construct or use new operator and using the schema and here we are going to define the user scheme so what are the information needed in the user schema so let's say we are using name so which type it will be it will be a type of string so we are using a string and it's required so we are using a required property of it that's it's a boolean so we are going to use true and if there is any like species before the name or after the name we are going to trim it so it will it give a trim properties so we are going to using dream is to true and after that we are going to create a new document let's say is and in the ace we are going to deliver like what type is it so it's a type of number and it's also required into our project so after that we are also like that's it now it's a model so for creating a new model we are going to use cons product user and we are going to create a new model for creating a new model we are going to use mongoose dot model and we we can give any name that's a string so let's say user and in here we are going to provide a schema that we have used so we are going to use user schema now we are going to instantiate a new user into our project so for instance setting in the new user we are going to use a new user one and after that we are going to use new creator constructor and then we are going to use new user and in here we are going to perform now let's say we have provide a new name let's say john center and its age is let's say 21. after this we are going to save it for saving it we are going to use user dot save that is given by the mongoose and it's an promise so we are going to use 10 and after that we can see that if it is saved or not using console.log repress and if it's an error then we can perform an error operation and obviously we can see what's going on there now here you can see that it gives the user and it automatically give the id and the name and the is and the version of the document that is zero now if we see into our project we will see that it has been saved into our mongodb so for saying we can go to the collection and here you will see that the user has been saved and the user collects the name is also given to it so now we are going to see how can we provide the validation here so if we want to validate that the is will be like only greater than 18 or let's say we validate that the error that the a's will be will not be less than zero or it's not a negative so for doing this we can use a method or a function called validate into it and in this if we provide like if value is less than zero it will throw an error so for throwing the error we can use throw new throw new error and let's say is must not be less negative so if we save it no first we have to change the value of it so let's say if i write like minus 20 and now if i save it you will see that it gives an error that say s must not be negative so mongoose can be used for performing like any validation that we require now if we add one more property let's say email so how can we check that an email is right or wrong so it will be an string and it's also required into our collection and for validation purpose there is a new there is a npm library it's called validator so we are going to install it for installing npm i validated so in the meantime we are going to use the how can we like we can see here like if we perf if we don't display or don't initialize is in here and if we save it you will see it also gives an error here it says that is required and p part is is required and the message it's an error so so now we are going to use a new library called validator and in here we are going to require it from validator now in here we are going to use validator validate function and the value that we provide and in here if validator dot is email value it will throw an error let's say it should be an email but validated. is email if it is right it will perform a true so in here we are going to use not operator so now if we provide like is can be 20 and if we provide like email to be john gmail.com and if we save it now we can see that it should be an email so it gives an error so that's how we can use so that's how can we use the mongoose library into our folder in this video we are going to add new security rules and authenticate the user so for now the password field is filled with a plain text so we are going to change it into the random set of values for doing this we are going to use a new library that is called npm that is called big clip js so i have already installed it using nbmi big crypt js big crypt js and here i have also used the big crypt is equal to require bigribjs so in here we are going to use the schema method that it provide mongoose provide that is user schema dot free it means that and whenever a new method is to be called it will be called before it that is whenever we use the save method it will be called before it and it's a synchronous process so we are going to use async process and it uses a es before es6 function syntax so we are going to use async function and in here we are going to use the parameter next which is called whenever the upper whenever the upper functionality will be done so in here we are going to use the cons user is equal to this it this provides the document that is going to be saved in here so in here the user has a password so whenever a user password is being changed then we are going to run this if statement so in here if user dot is modified in in here we are going to just say the field that is password and here we are going to use the big crypt so what's being changed that is the password being changed so user dot password is equal to it's an asynchronous process so it will be going to use await and in here we are going to use pcrypt method that is hash and in here the string that is the request.password that we are going to change and how many times we are going to run this algorithm that is like it's a stable that is we are we are going to use eight times so now that's it by doing this we can see if the password is being saved as a random set of values so for looking for seeing this we are going to use the postman in here and we are going to create a new uh new fire profile that is the jessica phone and now if we run this file we can see in here that the password is being stored as a random set of values now that's been done now we have to log in with the credentials that has been given like email and password and now we are going to login with this email and password but the password is being as a random set of values that has been provided by the bankruptcy so for doing this we are going to create a new endpoint uh in here in app.js so in here we are going to create a new endpoint and here app.post because we are sending the user's party in here users and login and it's going to be asynchronous process and we're going to use request.js response and now in here we are going to create our own with your undefined user defined method in here so for this we are going to use uh const user means first we are going to use its asynchronous process so await we are going to perform on the user matter and also the method that we are going to call it's a predefined method and we are you sorry user defined method and we are going to define it let's say find by credentials and in here we are going to use two thing that is request dot body dot email and also the request dot body the password so what it will return it will return a user so we are going to use the same thing for user and in here and that's it and then we're going to create a catch block and provide the response let's response dot status 400 dot sent so now we have to define this new function or a method so in here we are in the dvd.js we are going to define it so in here user schema as we are defining it into a model or an schema so we have to use the statics and the method name that is find by credentials and in here it's an asynchronous process so we are going to use async and in here we are going to provide email and password and now we are going to define it so in here we are going to find the user by the find one method so we are going to use try and catch block so in here when you use const user await user dot find one and the object that is email means the condition so now if there is a user if no if there is no user then we are going to throw an error throw an error through new error and if there is and like if there is an user we are simply going to check or compare the password that is given by the user with the password that is being stored in the right in the normal tv so in here we are going to use the following it's an asynchronous function that is await the crypt dot verify no dot compare and in here we are going to provide the request sorry password and the user dot password for one thing more that yeah that's it and user.password and in here it's provide it's written a true and false so it's a boolean so is match so if it is not match if not is match then we are again going to draw an error and if if it is uh if it is it is being messed then we are going to return the user so in here in the catch block we are going to simply write a watch an error it is return enable to login in this file we are going to simply like response back response back with the status 200 and the user that is the user and yeah that's it now we are going to check our function so let's move on to the postman and we are going to create a new request in here we can create a new request add request in here login user and it's going to be saving for mongoose gamer and it's it is going to be a post request so we are going to provide post and it's the local host 3000 users login and we are going to simply copy it from here and sorry copy it from here email and password and just paste into our party we're going to select the raw and also the json and in here we're going to provide the email and password now let's look that we are going to get the user back or not yeah you can see that we have got the user back now if we like if we run out our incorrect our password now if we send back we can see unable to login so it's very easy to do but there is a caveat in this that is in here in the postman if we like create the user with the same email we can see that it will it is going to create the same user but it will also give the message oh once again maybe yeah tb.js in email yeah it will handle the if we save the user with the same email then it will be handled by the mongodb that will give the error so it's like it's very helpful or a handful so now we are going to see once one thing that is called jwt that is json web broken so now in here for uh getting the profile or it will be changed with the getting the profile so whenever the user is going going to like create a user or logging in with the user then they can see the their profile not like whenever we click on whenever we like click on this endpoint hit on this endpoint then they can see it or yeah this functionality is going to be changed in here so for using this or for understanding a whole point of this video we are going to install npm install json wave token so what it will do like whenever we like uh whenever we create a user it is going to be like save a token it will be saved a token in the mongodb and it will be sent back to the client and whenever the client is going to use any functionality then they are going to use the same token that is being there in the client side and get authenticated to perform any functionality so for understanding this whole thing we are going to like uh see how it can be done so now as the tokens is going to be saved into our model so we are going to create a new uh property that is tokens and it's going to be a array type because a user can get more than one token at the different point of time or whenever they use different devices so it's in token or tokens of an array and it's going to be in token and in here it's going to be like type of string and it is required so now in here whenever we save it like uh now we are going to use an like for this user only a new method or a user different method we are going to create it is like any any name that you can like generate art token in here in this function we are going to generate a new token for this particular user so i am going to copy this name from here and we are going to define it into our db.js so in here let's say here i am going to create it so like user schema but we are not going to use the schema method or a statics we are going to use for that particular user so in here we have given the user schema dot methods and the name generator token and it's going to be an asynchronous process and now we can define it here so in here we are going to take the user that is const user is equal to this it provides a document that we are going to perform the functionality and now we are going to use the big in the json web token so in here we are going to create a new cost let's say jwt and we are going to require it from json token and now we are going to define uh we are going to use the method of jsonwave token so await it's a asynchronous process so away jwt and we are going to sign because this method will provide the token so jwt dot sign and it need uh to order like arguments parameters first parameter is the payload so the payload will be the id so the id of the user so we can get from the user dot id but the user.id is an object id so we are going to change it and convert into the to a string method now the second parameter will be the yeah once again yeah the second parameter will be the secret of private key can be anything but i'm going to use this is it is going to be like it is going to be a private 14 here i'm going to simply write it this is my new course so the next argument can be the expires in yeah that's it so now it's going to return a token so let's write into this format like it's going to return a token now in here we are going to save it or concatenate in the user.tokens so user.tokens user.tokens.concat the token and now just we are going to the user in here so the await user dot save and return the token because that is going to be like response back to the client side so that's it yeah this function is completely it is right but we are going to look into it so in here it's going to like uh return a token so cons token await and in here we are going to perform our response back with two things that is user and token yeah now let's see that in action so in here we are going to see login create user and now if we use jessica and our we are going to change the uh email to jessica to alex and name to alex now if we save it yeah it's giving an error because now we have changed the model in here so in here first we have to like delete our user in here from here then we can see that it is giving the required result you can see now that the user is being saved with the tokens and we are going to uh give back to the the token token also now same thing we are going to provide to the login also because in here also the token will be generated and sent back to the client so in here we are going to use const token is equal to await and we are going to use in the user user dot generate auth token and we are sending back with user and token now if we log in with this email and password so we can see in the action in action so in here we are going to provide email and faster now if we send it back we are going to see that two tokens is being generated in here and and the latest token that is this one is going to send back to the client side now one thing is here that we are giving the client so much information here we are going to provide like password and the tokens of all the tokens that are being there in the mongodb so we are going to like uh sorting the like hide the values or hide the information from the user because it's for the security purpose so for doing this we are going to use another method but it is a predefined we can say because in here we are going to use the user schema dot methods because we are going to use the method into a particular user and that's how the writing that i'm going to use the same thing you have to use to add to json because this means that whenever we respond back to the client in here it is being converted into json.stringify so in here we are just going to like perform an additional functionality in here because it is same as json stringify but we are adding some more functionality into this so for using this we are going to just use the following that is user means function or shift uh user function and now in here we are going to just say const user is equal to this dot we are going to change into an object so for doing this user this dot to object and in here we're going to delete delete user dot password because that that don't really need it and also delete the tokens and and just return the user yeah now if we go into our postman and run it again this end point we can see that it's going to like just like give the user's name as an email and latest token that has been generated now we are going to use the tokens that are being saved in the mongodb and use into the another endpoints like in here users start users and phone but the user don't want to see another user profile so it's going to be a user profile method so we are going to change the end point to users slash me and now for looking into a user's profile we are going to use that token specifically so we are going to use a term that is called the middleware so that means that let's say the new function or method that we named art is going to run before this functionality so for doing this we are going to create a new like folder again we are going to create a new folder let's say middleware and in here we are going to create a new file let's say art touches so in here what can we do so let's say we're going to create a const art and it's going to be an asynchronous process and also we are going to export back with the file so we are going to use module dot exports the odd function and we are going to use in the this file so we are going to use const art it's equal to require required from charge charge dot slash middleware and art yeah so what's to be done in this method so now in here it's a middleware but it's used same functionality as the request response and also the next because the next is used for like for going to the another endpoint yeah now in here first we are going to get the token from here so for getting a token we are going to use cons token and it's going to be in the request dot header and we are going to talk about this later authorization and also one thing called replace because thought radiation is being used as a string so we are going to replace a barrier bearer space string with nothing yeah that's it the token is being generated here now we are going to verify this token verify this token and generate the id so const decode and in here we are going to use the jwt method so we are going to require it from jwt require it from json web token so in here jwt verify verify and token that is a token and also the segregator public key that is this is my new course now in this decode there is the id of the user so from here we can see if there is a user not so for looking into the user we are going to simply say like we are going to use await method and also we are going to use the model so for this again we are going to use the user model or import it from the db file so require it from require it from dots list dot dot slash utils db yeah now we get the user and after getting user we can use find one method in here we are going to provide the id that is id is to the token decode dot id and also we are going to verify with the tokens that is being there in the mongoose mongodb so for that we are going to use tokens dot token and token yeah that's it now if there is a user then it will perform the operations or return back with the user now if there is no user and we are say safely to say like this is going to be a throw an error and throw new error so request dot user is equal to user now there will be a catch block and here we are going to response back response back with status 404 and send back with error obtain error in editing authentication it's going to be in a string so we are going to save it like this now if it is run then we are going to use the next method so it will go to the end point after that so now in here in app.js in here the all in this one we are getting the user if it is right so there's no need of this we are going to simply like write request dot user yeah that's it now if we go to our postman we are going to use the end point of this gate users but also we are going to use it uses the profile that we want to so let's say we are going to use case so in headers there is one thing called authorization that the same thing that we have written in the code that in this key there is a value so the value will be the new one that we have used latest one like request this token is going to be used in here and it's going to be written for bearer and like this that's why we have used that to replace the bearer with nothing at all so now if we run this we are going to get back the users or a profile so finger cross yeah we get the profile back yeah that's it that's how we can do the getting the profile of an user so now one more thing remaining that is how can we log out from a system so for logging out we are going to create a new new new endpoint that is users and logout so in here we are going to use request and response and also we are going to use the art middleware because after authenticating then we are going to remove it from the from the they can be log out from the devices so in here we are going to see how it can be done so for this it's going to return a token so that they can be logged out from the system so for this we are also going to request dot token is equal to token so now in here we are going to see how it can be done so in here we are going to simply say like request no first thing we are going to also use the try and catch block and in here if it is right then it is say like response dot status of 500 and send back so in here we are going to use request dot users or user dot tokens and now we are going to use request dot user dot tokens dot filter because it's an array and it's going to take token serialize and if we're going to see a token dot token is not equal to the request or token then it's going to return all the tokens that is not in the request.token now we are going to save it again using request await request sorry await request dot user dot save and response back with the status of 200 and send back with request dot user yeah that's it i have already created the new log out user get endpoint and you can see that i have provided the authorization and also we can see that we can get the lx gmail.com like the user that we are going to get and we can see in here in our mongoose that first we have to refresh it and now you can see it only few objects are there now if we run again this file and we have to also change this token so let's say i'm going to take this token from here and just a sec yeah now if i copy it from here and paste it in here and again send it back we get the user and if we refresh it here again you can see that we will get only one object yeah that's how we can log out from any uh devices you can also uh use the like netflix users like if you want to log out from different devices we can simply write in here the same thing but we can change here like request dot user dot tokens is equal to an array so it will do the same thing but it will uh log out from all the devices yeah so that's it in this video in this video we have seen how can we add the security and also authenticate the user and how can we see that any other functionality can be done only through the authentication in this video we are going to learn how relationship between two models are done so in previous video we have already done the users model and we have written all the methods static methods of usual model and i am added one more model in here that is a task model in here the user has the task so the user can give can create a task for them so this is the task model and i have created this project in a systematic way that is this is a folder of models and in here two files are there task model and user model and i have also separated the connection so this is the db model db folder in here that is the our middleweight middleware folder and here is the router the thing that we have learned about mini express so in here we are just like in here we have we we are here not written like the app express we have written the router which we get from expresso browser and we just export it module.export equal to router the same thing we have done for the task router also in here the router of task means task router uh have some api endpoints that is creating a task getting the task getting the task by id updating the task deleting a task by id so we have exported it also and in here the main file is index.js we are just importing it from these two files and we are using app.use user router and classified router that's it so now in here we are going to learn how can like how can we relate these two tasks and user model to each other related so if a task is being created so the task is being created by an owner that means an honor means a user you have to we have to create a honor filter in here and in honor field the type will be the id of the user so the type will be that we get from the mongoose dot schema dot types dot object id it is also required so we can give true and yeah that's it we now if we go to our uh task router in here in here we have to like when we are creating when we are creating a task we have also to like authenticate that the task is being created by a user that is being logged in so for that we have also imported out and just we have to write in here art means if it is uh like it is a authenticate its the endpoint is being authenticated now the user can now this task can be created in here so in here this is going to be this is the spread out operator so the all the objects all the fills that are in here requested body is going to spread out and in here we are going to just and write the field under and we can get the request dot user dot id yeah that's it now if we save it and go to our postman and for now i have created like i have just say i am going to log in with this alex user oh sorry i haven't like i haven't run the localhost 3000 so i'm going to run it so we just we have to write like not mon or we can just simplify npm run dev now it's running now if we go to the postman and again we logged in with okay sorry logged in with so we are going to log in with this user so now if we log in we can get the token now for creating a task we are going to go to the create task and authorization is needed here we are just going to create authorization bearer the token value and the body so in body we are going to just create like the json file is needed so we are going to see what's in the dark source name and is completed so name let's say no.js course and is completed this is not right we have to write like a json format yeah this is right it's completed it is false so we have to just write false yeah that's it now if we send it we can see that the new task has been created and the honor for honor id is being there so if we go to our memo db a compass and if we replace it we can see new task is being created with the object id of the alex owner now if we want to like get the honor on the description all the information about the owner we can do it if we i'm going to swing to the in the index.js so first like my function that's how we can call this and in here let's say const my function is an async value and now you are just going to get the user get the task we can do like first we have to like import the task model also in here so cost task is equal to require it from tv models less task yeah so task dot find one and oh you can like find by id and the id will be this one so from here we can get the task so if you want to console log the dot honor if we console it in here we get undefined oh we have to like await it from because it's an asynchronous process now if we again run again rerun again you can get the id but we don't get the whole information about the user so for getting all the information about the user we can do by like this now for creating for getting all information about the user we have to like uh give one more reference ref uh ref field in here the model name is given so the model name will be this one this one users so in here we're just going to write users now if we again run here like a weight task dot populate this is the function that we are needed here populate we are going to populate the field of honor and we are going to execute it by using it populate now if we just like console it and we can see that all the information about the owner is being written in here everything so yeah that's how the we can get the we can populate any field of another user of another collection so i'm going to comment it out from here now we are going to see now here we are going to see how can a user from user model we can get the tasks so for getting the task i'm going to rerun the same function in here so in here we are going to need the user model so we are just going to acquire it from the tv model and users and now in here we don't need this one and also we don't need this one so in here we are going to get the user user is equal to await users dot find by id and we are going to use the id of our user that is this one we can get it from here just to say i have acquired the id num id number now we can just console it console.log user dot tasks but we haven't made the task failed so in here in the user model we can do the we can do simply like creating a new field and the same thing that we have done reference but the tasks will be more than one so it will be an error so there is one another thing that the mongoose gave us that is a virtual field that is we are not going to write the field in the model but we are going to create a virtual field in here so for creating a virtual field we are going to write user schema dot virtual and the field name that we have given there task and also and model here like what it's referring to so it is referring to the tasks dot js this one so we are going to write dots and we are going to use the local field local field of this model that is id and we are going to use the foreign field foreign field of tasks model that is honor yeah that's it now if we go to our index.js and run again no first we have to like await it so we are going to await user dot populate the name tasks and also execute it and now if we run again we can see we can see that we have get the user is completed false and node.js so that's how we can there are two methods to doing the relationship between two models so now if we go to our task such as here the thing is already done so in here the task starts router there are few things remaining it is because you are going to authenticate all the things in here so in here we also use the getting all the tasks we are going to use auth method here and because the user because the one that the user wants user is authenticated with is going to get the fills so in here find by the owner field is honor is to request dot user dot id that's how can we get the task in here also the art major is given but it's going to be find one so find one and we are going to find one by using id is to request start parents dot id and also the order method is also needed honor field so request dot user dot id now in here art matter these things will be there but in here we are going to use find one method also and this is going to be id and the same thing honor is to request dot user dot id and yeah that's it we can do this by this now in here the delete also we can do by find one and so i'm going to just copy it from here and that's how we can do now one thing is there that if we like delete the user from the database so the database will be deleted from the user mode also and the last module also so for doing this we are going to use the same thing we are going to use a free method so we can do this by user schema dot pre and we are going looking for remove method and async async function and now we are just going to create this the const user is equal to this and we also needed here the task model also so we are just going to acquire it from cons task is equal to require dots list task now so we are going to await it await task dot find we are going to find by honor and the id will be request dot user dot ib and we are going to use the next function also and we are going to use the remove function remove function in here and just we are going to write the next here so that's how we can use two models in your users in class and yeah that's how it's being done in this video we are going to learn three things that are filtered pagination and sorting so whenever we hit this end point we have we get on the task but we want just one task like you want the tasks that are completed or not completed so for going for getting this type of functionality we have to use the filter functionality so in here we're just going to modify here and let's say the part the part will be the task because in this class in this where we are going to modify the values and the match this field is where we have to like what you have to match it with so it's completed let's see it will be a true value and now if we save it and run it here you will get only the two values and if we just use the false we can get only the false values now this is not dynamically so we have to write some code in here so in here let's create a const match and we are just going to use a query because in here the filter will be requested query dot is completed if this is the object is given then we are going to simply write match dot is completed is equal to request dot query dot is completed is equal to 3 this is because this value will be a string so whenever we use the use compare it with the true value we can get the value with that will be assigned to the mail stock is completed now if it's uh it will be assigned here if it is a false value it will be assigned and it will compare with the true string and then it will be assigned will match out this completely now just we have to remove this and we are going to save it here and now if we run it again but first we have to like give it what we have to know let's say we started it's completely equally true now if we run it again you will see that we can get the true values and if we use false here we can get the false one now there is one thing is called pagination so in pagination there is two things it is a limit and escape in limit this is what we call like what the amount of data that we want but what amount of data that we are going to limit to and escape is the value that is what are the next next value next after the next skip value that the values that we want that means if it is a 10 value it means that we need the set of another 10 values after the first 10 values so for getting this we just have to use a options field and it's an object in here we just have to give limit integer value and skip an integer value so if we are going to use dynamically but it is a it it will be a parsing because the value that we get from postman it will be a string so just we have to convert it into a into an integer we are just going to use request.query dot limit any in here the parts end we are just going to use parsing request dot query dot skip now if we save it and in here first we are going to see all tasks here all the tasks are here wall two now if we want to get only this this task we are just going to limit it to a one we get only one task and if we skip sql to one that means we are going to skip this task and go to the next second task then we get this second task and if you are going to use two you will get the third task so this is how limit and skip works now next is starting so in here stalking is done by the next another in options where there is something called short filled in here this is a this requires uh an object so in what way we are going to start it so if we again like run it here so in what we are going to start it let's say we are going to sort it according to the created add so if we use created at here so we have to send it like created at is equal is minus because this is a it requires an integer value and it only takes minus one and one minus one is for descending and one is for ascending so if we say 1 and now here we're just going to save it here and now if we look into in the created add and if we run it here minus one the task is upside down means the tax that is in the bottom it goes up that means this task is at a descending rate it means this stock has come at the last this task has been created the last so it is in a descending order so it will come first now if we save it as a one and save it and run it we can get the first task that is created first will be in here now if we start it according to the is completed so it's completed yeah no now if you want to like convert into a way that is that will be upgraded to will be dynamically so for doing this like is completed for doing this we just have to like create the new const match is equal to send empty object right now now in here we are just going to use like sort by now created at created at extending we can write any way like if you want to like use another symbol any symbol that you want i am going to use column symbol here so if you want to use like this like create it at a descending way or ascending way if this type of things we want so we have to like use here if request dot query dot sort by is there so we are just going to use to like sort so what will we get you will get this value here created at this ascending or descending so we have to split this string so for splitting it we are just going to use const string is equal to request dot query dot sort by and we are going to split using the split method and we are going to split according to this column so for doing this we just have to use column here so we can we will get two string here in an array now we are just going to start and we are going because it is assigned to a variable we are going to use sort str is equal to so if str one is equal to dsc we are going to use ternary operator here it is this then we are going to assign to minus one if it is not we are going to assign it one yeah that's it now if we just remove it and you start here and save it here and if we run it again you will get false structure value in ascending way and if we use true here we will get you will get the value as a descending so yeah that's it so this is how the three things filter designation and sorting works in mongoose and nodejs thank you