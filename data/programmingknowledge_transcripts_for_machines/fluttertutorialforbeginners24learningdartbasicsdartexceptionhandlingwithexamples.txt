welcome to programming knowledge so in this video we are going to discuss about error handling in dart and you might be thinking why we are using this editor instead of the dot pad and the reason is that in dart pad it automatically handles the exception okay and as we are discussing about error handling so we need to see the errors okay not all the errors but maximum errors in the dart pad is handled by itself okay so the concept of error handling is same as in any other objectoriented programming language okay we have a try and then we have a catch okay and then this catch block takes an exception okay and if you don't know what is an exception so that means that is a technical term used for errors okay so in your program if there is an error then it is referred to an exception okay so and in the catch block we deal with the exception okay so now let's try creating an error okay and without this try and catch block so i'll use the most popular example for errors for creating errors that is division by zero okay so i'll create a variable a 10 sorry it should be 10 and then and then another variable b that is 0 and then in variable c i'll store the quotient so a by b okay and then i'll print c so now let's try running this and see what is the answer and you can see we are getting infinity as the answer okay so that is because whenever we divide by in that it automatically gets converted to a double value okay and in the double data type in dot we have a certain value for infinity so as this will give an output of infinity so it is automatically converted into double and the infinity value is assigned to this variable c that is why we are getting infinity as the output okay so to prevent from the changing of data types we need to add a tilde symbol over here so now let's try running this again okay and now since the it is not being converted we should get an error okay and you can see we are getting an error and as i told error is referred as exception so there is an unhandled exception and that is integer division zero exception okay that means it is very much understanding that we have divided by zero and that is why we are getting this exception okay but now suppose this exception is in an app and the user sees this error message so he might not be able to understand what this means okay so at that places what we do is we surround them with a try and catch block okay so over here a try and every try block needs to be followed by a catch block okay and then it takes an e that is the extra exception and that will be an object of this exception okay and then instead of printing these things i'll simply print division by zero is not possible okay and now let's try running this again and you can see that the catch block has been executed and it is printing division by zero is not possible okay so this is what happens normally in try and catch block the we keep the code where we expect to find some error inside the try block okay and if some error is found then that terminate execution is terminated then and there and the catch block is executed instead okay so this is the use of try and catch block and this is how we generally use try and catch block in most of the programming languages okay so now in dart there is another thing that it provides us okay and that is for specific exception handling that means if it is a division by zero exception then we will handle it differently otherwise we will handle it differently okay so for that what i'll write over here is on okay so on is a keyword in dot and then the exception name integer division by zero exception okay so if this is the case that means integer division by zero exception is the case then we will then this statement will be printed so let's try running this and you can see division by zero is not possible that is inside our this on block okay now along with this let's try to let's try and check if we can have another catch block or not okay so now inside this i'll simply print another catch block and let's run this and see what happens okay so you can see only the on block is being printed and not the catch block means if the exception is of this type then only this block will be executed and not the catch block and if the exception is not of this type then only catch block will be executed okay so now let's create another exception i'll comment this out for now and i'll create a list let's say s is equal to one comma two comma three comma four and i try to print the value out of index okay so that means s4 where the list has index only till three 0 1 2 and 3 so let's try executing this and see and now you can see it is giving me some different type of errors which is not actually an error but it isn't warning and that is because over here i have forgot to give the data type now let's try running this again and you can see the error has been created over here and since it was not of this type so this block is not executed instead the catch block is executed okay so this is how we handle error specifically means handle error for specific exception in a specific way okay and suppose if we want to get an object over here also so after this what we need to do is simply write catch e okay so that means when this is the exception then the exception will be catched over here and then inside this we can do whatever we want to do with this e block okay so this was about to try catch and this is specific error handling now the next thing that we generally discuss in error handling is a finally block okay so that means whether the try block is executed completely or if there is some exception and a catch block is executed no matter what is the case after this whole part is over finally block will always be executed okay so let's see print always executed okay and now let's try running this and you can see the catch block has been printed means the statement inside the catch block has been printed and the final block has also been executed okay so this was the case when there is an error now let's see if there is not an error okay then as i said this try block should be executed and then the finally block because that is always executed okay so this was about finally blocked okay so the last thing about exception that we need to discuss is creating a custom exception okay so for that i'll create a custom exception class okay since we are studying an objectoriented programming languages most of our working will be done via class okay so i'll create a class age exception okay which will throw an error when the age is below zero which is not technically possible so class is exception implement okay so this is the way of inheriting another class properties okay or a abstract class to be more specific implements exception okay so we have an exception class already inside that okay now inside this all we need to do is create a define our method string err msg or you can name it as and how you like okay so what it basically does is by implementing this exception we are basically able to throw this type of exception okay and whatever we do inside this doesn't matter with the throwing of exception okay this is our custom choice what we want to do with it okay so over here this will simply return h cannot be zero h cannot be less than zero okay so now over here let's see i'll remove this thing from here and now over here i'll create a variable a v r a is equal to minus 10 okay so that means if a stands for h so i'll check if a is less than 0 then i want to call this exception okay so to call this exception there is another keyword throw which creates an exception and throws it to the catch block if it has any or to the user if we don't surround it with a try and catch block so throw and then we write age exception okay so now let's see what happens and you can see we got an exception with the exception was thrown over here that's why the catch block got executed and the finally always gets executed okay so this was about error handling and dot thank you