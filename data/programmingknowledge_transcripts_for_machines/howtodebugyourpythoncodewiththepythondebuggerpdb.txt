in this video we will talk about a command line tool which is called pdb which we use to debug our python script now pdb stands for python debugger and it is already installed whenever you install python on your operating system so you don't need to install a pdb separately if you have python installed it will work on your terminal now you might wonder why I'm using pdb if I already have the pycharm IDE and I can debug my code on the pycharm IDE now in real life situations most probably you will run your python script on some kind of a server now generally on these servers you don't have the luxury of using an IDE you will have to use the terminal in order to debug your python script and that's why I wanted to show you how to debug your python script using the command line tool which is pdb now to start with I have this simple python script which asks the user to input two numbers and these numbers will be saved in these two variables which is X and Y now we are using a function called add to add these two values and then we are just transferring the result into this Z variable and we are just printing the value of Z now in order to open the terminal in the pycharm IDE you just need to click on this option which says terminal and if you don't want to use this terminal you can also use a Windows command prompt or Linux terminal or if you are working on Mac OS you can also work on the Mac terminal so what you need to do is you just need to copy the path of your file where you are working and then you just need to CD to the directory in which you are working in so I'm going to just CD to the directory in which my python script is there and then the command will be same to run and use pdb on your terminal so you can use the Windows command prompt or this terminal which is available in the pycharm or any other terminal which is available on your operating system so I'm going to use this terminal which is available in the pie charm now I'm going to move this terminal to the right hand side so we will be able to see the code and the command terminal at the same time now in order to run your script you already know that you just need to give this command which is Python and the name of your script in my case the name of my script is debugging dot py so I'm going to just press enter and then it's ask me to provide the first number I'm going to provide the first number and then I'm going to provide the second number which is going to give me the sum of these two numbers so here it prints three three four four which is not the addition of these two numbers now some of you might already know what is the problem with this code and how to solve it but we will use the debugger to find out what is the problem and how to solve this problem so that whenever we enter two numbers it's going to give us the proper sum of these two numbers and not the other answer now in order to start the debugging on your python script you can provide this command so you can give python hyphen M pdb and the name of your script so my script name is debugging Dot py and then I'm going to press enter and now you will be able to see this kind of interface and you will be able to see pdb printed here and there is a cursor blinking here and this python debugger which is python pdb starts from the first line of code which you have on your script so we are on this line which is this line in our script which is the Declaration of this add function now the first thing you need to know in order to work with this pdb interface is the hell help command so you can give this help command here or you can give the H keyword which means the help command so I'm going to give the full help keyword here and then press enter which is going to give us the list of each and every command which you can use with the pdb so these are all the commands which you can use with pdb the most important command which we will be using frequently is the next command or shortcut of the next is n or we will be using the step command or the S keyword for the step command otherwise we will be using the C keyword or the continue command these are the three most frequently used command to work with the pdb now you can see you can type help and the name of the command in order to know more about that command so I'm going to just write help here and the name of the command let's say I want to just know more about the next command so the next command continue execution until the next line in the current function is reached or it returns so in this way you can get the help about each and every command which you have here now once again we are going to find out at which position pdb is right now we already know that pdb is on this line but there is a command called where or you can also write w to find out where right now your pdb is so I'm going to just write where and it's going to show on which line your pdb is currently standing so now I'm going to give the end keyword you can also give the next command here and I'm going to press enter and it's going to go to the next line which is this line which is the if name is equal to Main in so now we are on this line right once again when I press enter it's going to execute the last executed command so we have executed last this next command so if you press enter directly without entering any command it's going to execute the last executed command so now we are on this line which is this one which takes the input from the user and you will also be able to see on which line this code is so this line is at the seventh line now once again I'm going to press help here and then press enter and now I want to use this continue command so this continue command is used to continue the execution of your script from the point where you are right now so we are right now at this line which is line number seven and if I press C or if I type continue new which is this keyword and I press enter then my program is going to execute and it will ask me the first number so I'm going to provide the first number let's say 2 and then I'm going to provide the second number which is 3 and then when I press enter it's going to execute the program and it's going to print the result which is 23 in this case which is wrong and after the script is finished the pdb is going to restart the execution from the top so you can see this line the program is finished and will be restarted so once your program is finished the pdb is going to restart it from the starting point from where it has started so I'm going to quickly provide the N command for next and once again next and I'm going to once again press next and provide the number which is 3 this time so now we are on this line which is the line number eight which is this line so the execution of this line is finished now there is a print command in pdb so you can just write print and the name of the variable so I'm going to just write X here because this line is already finished and it's going to give me the value of x so when I press enter it's going to print 3 which is the value of x once again I'm going to press the N command or the next command and then I'm going to provide the second number which is 4 this time and I'm going to print the value of the Y now so till now nothing seems to be wrong with this code so let me just press h for the help once again and we are going to see the list of commands once again and now I want to use this command which is what is so I'm going to just write what is and the name of the variable which is X okay so earlier we have printed the value of x which is 3 and now I'm writing what is X so we want to know what type of value is inside X so I'm going to just press enter now and once you do that you will see that X is an instance of class string and we wanted to enter the number right so now we know what is the problem so because input function is going to return the string value and this add function is just concatenate these two string values and it's not adding the two numbers so what is command is going to give you the information about the variable or the function but we will continue our debugging so you can see here right now we are on this line which is this line so now I want to go inside the add function in order to inspect if it's working fine or not so we are on this line where add function is called so I can use this command which is the step command or I can use the shortcut which is s in order to step into the function where we are right now so I'm going to just type step here and then press enter and you will see we are here on the Declaration of add function once again and if we Type n or next once again we will go to the next line of this function which is this line which we use to add the value of X and Y so this command step or this letter s can be used to step into your function or step into your class if you are using class it's going to step into or inside that function so now I'm going to just press n to go to the next line and this is the return sum line and now we already know what's the problem so we can press C or continue in order to continue the execution of this program so I'm going to press C and then press enter which is going to continue the execution of the program and it has printed the result and also it has restarted the pdb once again from the starting of the script so now let's correct this code and in order to convert the input into int or the float you can just type cast the string to end using this int function so I am going to just use this in function in front of both the input values so now we know that our script is most probably going to run fine so let's try to set the breakpoint at this line because both the values will be available at this point point and we will know the values of X and Y at this point so we will be able to see the type of both the values so first of all what is a break point so when you set a breakpoint at some line the program is going to stop exactly at this line so generally we have seen that if you start the pdb it's going to start from the beginning of your script but if you set the breakpoint the execution will only stop at the line where you have set the breakpoint so once again I'm going to press h to get the help and I will see which command can I use to set the breakpoint so there is this command called Break which I can use to set the breakpoint so let me get the help about the break and it's going to give us the description about the break command so you can use the break keyword or the b letter in order to set the breakpoint so you can see it takes these arguments so in order to set the breakpoint you just need to write break and then the line number on which you want to set the breakpoint so let's say I want to set the breakpoint on the line number nine so I can just write break and then 9 and then press enter which is going to set the breakpoint on line number nine now I can give the continue command in order to continue the execution of the script and now when I press continue it's going to first ask for these two values so I'm going to quickly give the value of first number and the second number and then when I press enter it's going to stop at this line where we have set the break point right so right now we are on this line which is line number nine and now I can give this command which is what is X and once again it says that the type of this x is string so what might be the problem them the problem is after changing our script we haven't restarted the pdb we haven't exited the pdb and restarted the pdb so this script is not loaded after we have edited the code right so in order to quit the pdb you give the quit command or the queue letter so just press q and then press enter which will allow you to come out of pdb and let me run the debugging once again so you can once again give this command python hyphen M pdb debugging Dot py and then press enter which is going to restart the debugging and now this script is loaded once again with the correct code which is end so now let me just uh put the break point on the line number 10 which is this line and now I'm going to press C to continue and I'm going to give these two numbers let's say and you can see the program is halted on the line on which we have set the breakpoint on so once again I'm going to give the what is command and the name of the variable which is X and then press enter and now you will see the type of X is now int and we have solved the problem so we can simply press C to continue and see the result and you can see it prints the result which is 8 which is the addition of 3 and 5 so our debugging was successful and we are now seeing the expected result which we wanted to see so this is how you can use pdb to debug your python script now there are few more ways of using pdb with your python script so let's see those other ways in which we can use the command pdb with our python script so I'm going to press Q in order to exit out of the debugging so the second way of using pdb is to import the pdb inside your script so I can can just import the pdb library inside our script and then in order to set the breakpoint I can use pdb dot set Trace so this will set the break point on the next line after this line so I'm going to just clear the terminal by right clicking and then pressing clear buffer and once again to start the debugging I just need to give this python command and the name of my script so once you have this import inside your script and you have this code inside your script you don't need to give the pdb command you just need to run your script normally with the python command so my program execution is here which is running the program normally so I'm going to just grip the value of X and Y which is 3 and 4 and it's going to stop the execution at this line which is just after the set Trace code okay so because we have set the breakpoint on this line using this line of code it's going to stop at this point and once again I'm going to use for example what is command and I want to see the value of x and it's going to show us the type of X which is end so this is the other way of using pdb in your script some people also like to use pdb directly at the point where they want to set the breakpoint and the benefit of using this type of code is if you are using any linting tool it's going to warn you on the same line so the developer will know that he needs to remove this line because linting will fail because there is a semicolon here and we are using two line of code in the same line so it's going to give us the warning and that's how the developer will know that he needs to remove this line so he is going to remove this line after the script is working fine so this was the second way I'm going to quit out of the pdb once again and let me show you the last way of debugging your code with the pdb command so I'm going to clear the terminal and now I'm going to just give this python command which is going to open the python shell and here you just need to import the script which you are working with so I'm working with the debugging script and then import the pdb and once you have imported your script and the pdb module you can just use pdb in order to start the debugging of your script so pdb dot run and under the brackets or under these parentheses you just need to give the name of your script so my script name is debuggings and then you need to provide at which point you need to start the debugging so let me enclose this code inside a new function so let me Define a new function and I am going to name it as Main and this is going to be my main function and inside the main function I am going to execute all the script and I'm going to just call this main function inside this if condition and here on the python shell I can just write debugging dot the function which I want to call so I'm going to just call the main function and then I'm going to press enter and once again it shows me that debugging doesn't have this main method because after saving I haven't restarted the pdb once again so let me just quit once again quickly and let me just quickly close this terminal and restart this terminal and once again I'm going to give the python command which is going to start the python shell and I'm going to import the pdb and the script once again and now I can just give the pdb dot run command and then give the name of the script on which I want to work on which is the debugging and then I'm going to call the main method inside the debugging and then press enter and once again give the N command which is for the next which is going to start the debugging of your code so this is how you can use the pdb command in order to debug your python script now in this video I'm going to show you how you can debug your python script using pycharm IDE so to start with I have this python script which takes two user input both numbers and I have created this add function which just add these two numbers and return the sum and using this print function I'm just printing the sum of these two numbers now let's run this code normally without any debugging and I'm going to just give two numbers here 44 and 55 and it's going to give me this kind of output which is wrong because the sum of 44 and 55 is not obviously four four five five now some of you might already we know the problem with this code but let's debug it with the help of the Python debugger so in order to start the debugging in pycharm ide you just need to click this icon which looks like a bug and when you hover over it it will say debug so I'm going to click on this debug button which is going to start the debugging of my program so you can see here this debugging window is opened and this debugging window have two sections one is console section and other is debugger section so right now we are in the console section where we can provide the user inputs and see the output of our python script just like the normal output now there is also a debugger window where you will be able to analyze the variables and all the frames of your program so I'm going to go to the console window and here I'm going to provide the first number and the second number and I am going to press enter and it prints the sum of these two numbers which is not correct but our python script is finished executing now in order to debug this python script we need to set the breakpoint at which the execution of the program will stop and we will go step by step after this point so I am going to set the break point at this line which is line number 13 at which my main function is called and then click on this line where you want to set the set point and you will be able to see this red circle logo which means that we have set the breakpoint at this point so let's start the debugging once again and you will see because we have set the break point here the program execution is stopped at the line number 13 and how you know that the execution is stopped at line number 13 you will be able to see under frames this line which is highlighted and you can see the line number is 13 so at this point the program execution is on the line number 13. also you will be able to see these kind of icon on top of this window so the first icon here is the step over icon which you can click to step over your code the second icon is step into icon using which you can step inside your function or a class on which you are currently on the third icon is step into my code so generally if you use this option which is step into and your program contains some inbuilt or builtin functions then it is going to go into those builtin function and this other option which says tap into my code is going to only step inside your code and not into the builtin functions or the classes there are few more I can share one is four step into and other is step out which we are going to see later also under this variables section you will be able to see the values of your variables so first of all I'm going to click this button which says step over you can also press f8 to step over so I'm going to click this button and because my program asks the user to provide some input I will go to the console and provide those inputs so I'm going to just give 33 as the first number and 55 as the second number and then once again I'm going to press enter which is going to print the output and we come out of the debugging so now you know that this breakpoint is not helping us so we are going to remove this breakpoint and we are going to set our breakpoint here on the line number nine so here we will be able to see the values inside the variable X and Y so that we know what's the problem inside our code so let me start the debugging once again and once again I'm going to give these two inputs 33 and 44 let us say and then you can see our program execution is stopped at this break point and you will be able to see the values of your X variable and the Y variable now immediately you will see that this x value is the string and also this y value is the string and whenever we use this plus operator with two strings it is going to give us the concatenation of those two strings also in the variables you will be able to see the list of variables and the type of those variables and the values inside those variables so you can see X has string type and the value is 33 and Y has also the type string and the value is 44. now I told you that you can use this button to step into your code so I am going to click on this button which says step into my code which is going to step inside this function so our program execution was on this line this was the break point we have set and when I clicked this step into my code it has stepped into the function add if I would have pressed the step over button then my program execution will go to the next line and not inside this add function so because I have pressed this button which says step into my code that's why it goes inside the function so here also you will be able to see the values of your X variable and Y variable and also you will be able to see the value of the sum when you just click the step over button and here you will be able to see the value of sum which is three three four four which is the concatenation of these two numbers so immediately you will know that you are not adding these two numbers you are just concatenating two strings which gives you this kind of result so once you have pointed out the problem in your code we are going to stop our debugging so there is this red button here which is a square button I am going to click on this which is going to stop the debugging now in order to fix this code I can just type cast this input which is a string into the integer and with the second variable also I am going to to do the same and now let's start the debugging once again and once again I am going to give the two numbers 33 and 44 and press enter and the program execution will stop at the break point and now you will be able to see the values here which is 33 and 44 and under variables you will be able to see the type of these two numbers which is now int so both are int values I am going to step over now so last time we have stepped into the function which is the add function this time I am going to just press the step over button which is going to not go inside the add function but just tap over to the next line and you will be able to see the value of Z here which is 77 which is the correct sum of these two numbers so this is how you can use pie charm to debug your python script I hope you have enjoyed this video and I will see you in the next