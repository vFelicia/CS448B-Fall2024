so let's get started no js' was originally written in 2009 by Rhian del the initial release was supported only Linux but in the later years of node.js it also started supporting Windows operating system and Mac OS also now its development was led by of course R and L and later the development and maintenance was sponsored by Joe and Joe and was his employer now let's see what is node.js so nodejs is an open source crossplatform runtime environment for developing serverside web application so normally you would link JavaScript with clientside web applications but with node.js you can develop serverside applications also now node.js is an event at i/o and this evented IO we will learn in the later videos what is a vented IO and how we can use it okay so although node.js is not a JavaScript framework many of its basic modules were written in JavaScript and developers can write new modules in JavaScript the runtime environment interprets JavaScript using Google's v8 JavaScript engine which is also the JavaScript engine behind Chrome which is a web browser which makes it really fast now no GF is released under MIT license so it's a crossplatform opensource you know framework so let's go next now what no Jeff is not so as I already told you node.js is not web framework it's a serverside web application right so you can write serverside web applications with node.js not the clientside right node.js is not for beginners so whenever you are you know starting node.js you need to have basic understanding how you know JavaScript works mainly object oriented JavaScript and event did JavaScript so you need to have some knowledge of JavaScript but don't worry I will you know start with very basic levels so you will be able to understand and mostly most of them are you know servers if you think about service you may link servers as a multithreaded application but node.js is not a multithreaded application it uses the concept of asynchronous IO which we will also see in the later videos now what is unique about node.js so javascript is used in clientside but no J's puts JavaScript on the server side as I have already told you thus making a communication between client and server will happen in the same language so the learning curve for you will not be you know so steep because if you know JavaScript you can write the front end and the back end of your web application both in JavaScript right now servers are normally a thread based as I have already told you but node.js is event based node.js serves each request in a invented loop that can able to handle simultaneous requests so nodejs is not a multithreaded application okay so it only have one thread which uses event and the last that is also I've already told you that JA nodejs program are executed by v8 JavaScript engine the same engine behind the Google Chrome browser also now why you want to learn no J's because no js' is really fast it can handle tons of concurrent requests and it's written in JavaScript which means you can use the same code on serverside and clientside so this is the brief introduction about node.js and from the next video I will start explaining how you can install node.js and how we can you know write our first code for creating our first node.js server hello guys welcome to the next video on node.js tutorial for beginners in this video we will see how we can download and install node.js on our Windows operating system so let's get started first of all open your favorite browser and search for node.js download and the first link which will appear here will be no GS dot org which is the official link so you can just click this link here ok and in here you will be able to see different kind of installations but on the node.js home base so when you click this icon here you will see the two versions for Windows one is the LTS version which is long term service version right and one is the current version so we are interested in current version so I'm going to install this one but if you want to install this longterm version which will be available for a long time then you can just install this one so I'm going to click this option and the file will be downloaded which is about 12 megabytes so I am going to save it and let's save it somewhere okay so once this file is saved we are going to just install it so just click your MSI file so the extension of this file will be a dot MSI so just click this and then start installing the node.js right now nodes J's installation on Windows is really easy and you know you cannot get an easy installation than this installation so first of all this kind of wizard will start you just need to click Next here and accept terms license and conditions and then click Next this is the location where node.js will be installed so if you don't have any good reason to change it just leave it as default and then click Next now in here these are the things that will be installed in with the node gf so the node.js runtime NPM package manager which is really important for developing node.js applications online documentation and the path so this node.js path will be is tall or configured on your Windows operating system so you can you know start node.js using your command line ok so just click Next here and once you click Next you just need to click this install button to start the installation now the installation may take few seconds to few minutes depending upon the configuration of your Windows operating system so just wait for this process to complete and once the installation will complete we will go to the next step ok so now the installation of node.js is successfully completed on my Windows operating system and I just need to click this finish button now to know whether node.js is successfully installed on your system or not you need to open your command prompt so just search for command prompt and open your command prompt and in here you just need to type node V which is going to give you the version of node.js installed right so just press enter and it will give you the version of node.js which you have installed so it's giving v6 point 5.0 this is the same version you can see here when we have downloaded it from the node.js website v6 point 5.0 right so we know that node.js is successfully installed on our system now we have also installed NPM which is node package manager which with this node.js installer and node package manager is really important in developing you know know the applications and I will you know illustrate what NPM is and how it works in details in the later videos but in this video we will just check whether it successfully installed or not so just write NPM for node package manager v4 knowing the version of it right so NPM V and hopefully it will also give you the version of NPM install okay so now we know that node is installed successfully on our system and NPM is also installed on our system so now we can start building our you know for example hello world application so just to check you just need to write node in order to start working with nodes just write node and press Enter which will give you this kind of command line interface and in here you can just write for example console dot log and in the brackets so in the brackets you just need to write for example hello node so just write hello okay and now you can press ENTER and it's going to print out hello node and then this undefined message and then you know that node is perfectly working on your system now let's check this node in now little bit better way so what we want to do now is I'm going to just close this command prompt and I will once again go to the node js website and now this time I'm going to go here which says about tab so just click about tab here and in here you will see the basic barebone code to you know get started with node which is this code okay so what I'm going to do here is I'm going to go to folder just go and create any folder in which you want to you know create your node.js project for example and then here I'm going to create our JavaScript file so I'm going to let's create our javascript file and I'm going to name it as app dot J's for example so just write app dot J F and press Enter we are going to you know see how we can build our node.js application using some editor better than for example normal editor on Windows or Linux so this we will see in the later videos but for now let's use for example I have notepad plus plus for JavaScript so I will open this app dot J's file in notepad plus plus but you can use any editor of your choice for now right and then I'm going to once again go to this page and I will just copy all the code from here just copy all the code and then I'm going to paste it here okay and then just save this code okay so just copy and paste this code and save this code and and I'm going to minimize everything once again so my code is saved and now I want to open the command prompt in this folder and the easiest way to do is you can do CD to you know this part and it will be okay but the easiest way is to just press your shift button so just press shift button and then right click on this folder and then you will see this option which says open command window here so just click this option and you can see we are directly in this directory in the command line so we are in the samples directory which is here itself right now in here what we can do is we just need to give this command so just give node command and then the file name so file name is app dot J's in our case so this while we have created right now right so just write app dot J's here and press enter okay now if you will notice here it's giving this message that we can open 127.0.0.1 which is the local host on our pc this port so on port 3000 of the local host we can see this server running so i'm going to open my browser once again and in here i will just give the same address which was printed here so 127.0.0.1 and then port 3000 right which is the same address which is printed here this address okay and then press enter and you can see hello world is printed here so you know that your node.js server is working perfectly fine on your Windows operating system and you know that you have you know stall nodejs perfectly on your Windows operating system hello guys in this video I'm going to show you how we can download and install Visual Studio code on our Windows operating system Visual Studio code is a code editor on which you can you know edit or write different kind of codes for example PHP JavaScript HTML C++ or and many other languages so let's see how we can download and install Visual Studio code so just open your favorite browser and search for Visual Studio code or vs code and the first link which will appear here will be code Visual Studio com just click this link and then you will be able to see this kind of green button here you just need to click download Visual Studio code and then you will be able to you know save this kind of executable file which is vs core setup tables dot exe file and you can save it anywhere wherever you want in your computer and depending upon the speed of your internet you can see it can take a minute or so because it's a thirty megabyte file so just wait for the download to complete and then we will start installing it ok so now the executable file is downloaded on my system so I can just run it so just click the exe file which you have downloaded and then start installing Visual Studio code now installing Visual Studio code is really easy so you just need to click Next accept license terms and condition click Next this is the location where code will be installed on your system click Next and then you know it's a star select Start menu folder so this is the Start menu folder and if you don't have the you know correct reason to change it don't change it and leave it as default and click Next and here you can see it will create a desktop icon for you register code as an editor for support for files and add to the path so environment variables also you can you know it will be able to set by itself okay and then click Next and click install it will be really fast installation so it will not take much time to install Visual Studio code and you can see it's installing and extracting all the files and then in few seconds it will be installed on your system now it's also going to set the environment path variables so whenever you want to open visual studio code using your for example command line it will be able to do it so now you can see the code is installed on my system so I can just leave this checkbox checked which will launch the Visual Studio code and click finish and now the Visual Studio code will be launched on my you know on my system now I will also see this welcome screen and getting started so if you are interested in learning more you can see this ton of information given on their website so you see top extension for csharp Python C++ debugger for Chrome and many other options are here right now let's see how we can you know open the Visual Studio code from the command line so here you can create any file for example I will create a new file you can see it will create a new file or if I want to save this file I can just save it by going to the file and then save as or save so for example I will do save as and I will say for example test dot HTML right and now I can just type so it's a really good editor which has intelligence so I can just say HTML and press double tab and it's going to complete the you know tags for me right once again for example head and double tab and going to complete this once again the body for example so I can just write body and double tab and you know it's completing my you know tags for me okay and then you have the option to format your quotes right click and then just click format code and it's going to format your code for you also right out of the box now if you want so I'm going to close my code editor and for example I can just open a command line and here when I type code it's going to open the code for me so you can see it's going to open the code right and for example if you want to open the code or and you know open your project using code you just need to go to the folder in which your project is for example you have some node.js project just browse to this project and then you can just type code and the dot and it's going to open the folder for you hello guys welcome to the next video on node.js tutorial for beginners now in this video I'm going to show you how you can create your first hello world project using node.js from start to end so when we were installing node.js we have seen how we can you know just copy and paste the code and create a simple node.js project but we will see in this video what this code means and how we can create a very simple hello world node.js server so let's get started I will be using windows for this but you can you know do this same on your Linux operating system or Mac OS plus I'm using the Visual Studio code for editing my code or as an editor but you are free to use any other code editor which you please to use so what I'm going to do first is I will just open the you know folder in which I want to create my project so for example this is the folder where I want to create a project on Windows simple you know thing is you can just press the shift button and rightclick on it and you can open the command line in this folder by this method so just press shift right click and just press this option which says open command window here which is going to open the command window in this folder right now here what we need to do is we will create first of all our for example up folder which will we will name it as HelloWorld for example so I will just write mkdir HelloWorld or let it be hello right and press Enter is going to create this folder right and then we will go inside this folder so CD hello and we are inside this folder so let's go inside this folder and in here what we will do is we are going to create a file javascript file for example so i will do this by using visual studio code so if you have followed my last video in which i have shown you how to install visual studio code you can just type code here and then type dot and press enter which is going to open visual studio code in this folder so it's going to open visual studio code inside it will be you know opening this folder also for you right now inside this folder let's create a file so i'm going to create a new file here and i'm going to name it as so let me save this file as for example app dot JS file okay press enter and it's going to create your app dot JS file now let's start writing some code so first thing here we need here is war HTTP is equal to require so just write require and we need to require a module so i will tell you what the module is so we just need to write HTTP here and a module is something like a library so it does what classes do in objectoriented programming is so it's for example whatever you do in C++ you just include a library inbuilt library for example iostream or some other libraries or what you import in Java you import some libraries in order to work with those libraries in Java similarly mod node modules are the way to import some already built code in nodejs and we can use this code so there's such module in node.js which is already inbuilt module which is HTTP and we need to create the instance instance of for this module using requires so require is like include in C++ or import in for example Java right so after requiring this HTTP module we created an instance of HTTP right now the next step is we use the created instance and we will call a method called create server or to create an instance of this server right so just use for example HTTP and then we will call a method called create server so just write create and so something like this okay and inside these brackets we pass one function now in JavaScript if you know we can make a anonymous function let's create a function here and then we will see what is an anonymous function so for example I will just write var and for example I will just write the name of the function so if you move for example right and then I will just write function and we don't need to give any name to this function because we want this function to be anonymous and we will pass two arguments here response and request so first will be if requests for example and second argument is the response so you can give any name to these argument I'm giving it according to the usage which we will pass here as an argument so you can do something like this or you can you know use a full name for example request or response it doesn't really matter right and then you can just create this function so this kind of function doesn't have any name so they are called anonymous function and then you can pass these functions here right so this will be your function you are passing or instance of function you're passing inside this creates over method now most common are you know usage of this kind of anonymous function we don't do it something like this but instead of this passing the instance you can directly paste it something like this so you will mostly see this kind of code in node.js so just pass this anonymous function inside these brackets and you will be good to go so there are both the ways are correct for you right now inside this function we will just take a request and the simple thing is to send the response right so first of all on which port or on you know on which IP you are going to run your server for example so there is a function so just go outside this you know function and just call a function called listen so just write listen function and whatever number you will write here this will be your port for example you write 3000 here this will be the port on which your you know server will run so it will run on localhost obviously and it will run localhost 3000 port okay just listen on 3000 foot port you can do something like 80 81 you know whatever port is available on your you know computer you can use this for sport so for example I use three thousand and the next thing here is we will take our response variable so just use this response variable and then call a method called end here okay and this is the basic you know thing you need to do in order to you know reply whatever client is recommendable client is you know requesting from a get request HTTP request for example right so we will send for example hello world here so just write hello or hello node will be more appropriate right and if you want you can just give this line break here also so this is it this is the simplest server you can make using Noches and if you want you can just log you know show the user that you have you know created this server on this port so you can just write for example console dot log and then you can give the information so for example I can write server is running on for example 127.0.0.1 port 3000 okay and it will run on this port and obviously you need to write HTTP I hope you know what this is so HTTP colon slash slash something like this right and if you want you can do something like this also and then save your code and open your command line once again and you can see it has this file and you can run this file using node and then the file name which is AB dot J s press ENTER and you can see it will give you this kind of alert you can just allow on your windows operating system which is OK and it shows this message which we want to display from here so it's showing this message that the server is running on this board so let's see let's open our browser and let's see if it opens or not so you can see here this code is running so our server is running on 127.0.0.1 and it's printing hello node right so this is the basic you know code for the server so what we need to create a server and instance of HTTP module and then this method which takes our anonymous function which have two argument request and reply or response recursion response and whenever request comes on this port you just reply with this message which is hello node for example now to inspect this code you can just right click here and you can just click inspect element here on Chrome also I think this is the same thing and you go to network here so something like this here Network and then when we reload our server for example you can see there is a request get request and it's requesting this IP and this port is sending get request and in the reply we are getting the status code 200 which is okay whenever you are you know request on cat you are supposed to you know get the 200 okay reply which is a correct reply from the server right now this is the default so this reply 200 will be sent automatically but if you want to be sure you can just write response dot write head so just write write head and then it takes a few arguments so first is the reply code which is 200 which is also a status code or n HTTP if you don't know what is this 200 just search for HTTP status codes right and you will see what this means is and then the next argument will be an object which contains two argument once one is the content type so just write the content type and content type will be what kind of you know replies you want or you want the client to receive so content type let's say it's a text and plain so something like this not this first plane okay and then close it okay and then once again we will kill our server and once again we will run our server and then we will refresh our you know request and it's the same no change here but this time we are making sure that we are sending 200 on the client from the server using this code if you for example send 201 from here and save it and once again run your server so let's kill and run our server once again and once again refresh our code you see you get the status code to zero one but this means different so this is not a good practice whenever you are using get requests you don't want to send to zero one but because the meaning of two zero one is little bit different which is generally used in post requests so you know just search for HTTP status codes and you will be you know good to go okay so this is how you can write a basic server using node.js hello guys in this video I'm going to show you how you can download and install a command line tool for Windows which is better than the native Windows command line tool which is called commander now if you have you know used command line tool on Windows ever it looks like this so I'm using Windows 8 and it looks like this and if you are a developer or if you want to you use a command line for your work then using this command line tool is not you know satisfactory I would say for example you are building a node application and you need to run node commands here and this works fine but for a developer they want more than this kind of boring command line tool now you can say Windows 10 has already been there and their command line tool is little bit better but it's not so much better that we can love it for example so let's see what command line tool I'm going to show you and let's see what's the difference between them so what we are going to do is we are going to download and install a free command line tool which is called CMD ER and we say it command tool okay so just I type CMD ER commander and the first link which will appear here will be commander dotnet right so just click this link and this tool is free come online tools so you can use it for free and in here you can see the first look of it it will look like this and to download it you can just click this download button now there are two you know versions of it one is the download mini version which is six megabyte and if you are interested in the whole functionality then you can you know download this 80 megabyte download installable file okay so it's a zip file so it's not an installer it's a zip file so you just need to extract it and you just need to you know run the command line tool from there okay so let me save this zip file and once this zip file will be downloaded it will take around 1 minute on my PC it can take more or less time depending upon the speed of your computer and once it's downloaded we will see how it works okay so now the download of this zip file is complete and I have already extracted this zip file this file will look like this so you just need to extract it in the folder of your choice okay after extracting it you will see this executable file which says commander dot exe you just need to double click it very simple stuff and I'm going to minimize everything and by the mean time it will start okay now here you can see unlock and continue command and visit home page and exit and it says that some of the deals are missing you don't need to worry about them you can just say ignore and continue for now okay and then just skip this version for now okay and now it will open this command line too and you can see when you you know start this command line tool the difference between these two command line tools right so you know when at the time when you open it it will look like this very sleek and you know you will love it from the first step itself you can you know follow or execute any command which you can run on windows and even which you can run on your Linux or UNIX command line tool for example LS minus L and list all the you know piles and the permissions of your files and folders right or a CD or mkdir or many command line commands it can execute and the best thing what I like about this command line tool is for example if you want to open two command line command line or command prompts what you need to do is you need to open the command prompt or you know two terminals for to command line you know commands if you want to run in parallel right for example in case of you need to run the daemon in background and then you need to execute the shell itself right and in that case you need to open two terminals at the same time and it's not I mean very elegant in case of commander what you need to do is you can just right click on this icon at the top and you can just say new console it will give you this option you can say start and we'll start a new terminal you can see side by side right so you can navigate between them like this you just need to press these tabs and you can open multiple terminals like this on commander this is the feature which I like this commandline tool also comes with SSH so if you want to you know control a remote PC or a Linux operating system it will help you so just FF edge and whatever is the IP address of your PC then you will be able to you know access this that PC so you can see when I press SSH and it gives me one bunch of the options right and yeah so you can see you can just use it and see if it's good for you or you want to stick with the old commandline tool it's on your you know choice but I am is you know lately using this command line tool and I'm loving it so I wanted to share with you so hello guys welcome to the next video on node.js tutorials for beginners in the last video we have seen how we can write a small so using no chairs now in this video I'm going to show you how you can use node debugger to debug any problem in node.js so what I have done here is in the last video I've shown you how you can use this create server and what I have done is I have edited this code a little so I have created our variable called body and I have provided some value to this body right and then I have created one more variable called content length and this content length is equal to the length of the body so just take the body variable and call a method called length on it and we give you the length of this body variable which contains this text right and in the response dot write had I have the status code and last video I have shown you this header which is content type and there is one more header called content length and Here I am but just passing as a value of the body length so content length I'm passing here this variable here okay so basically what it's going to do is it's going to just print the header and in the header we are going to see the content length also now I'm going to just run my app by the way I'm using this different terminal this time this terminal is for Windows which is called commander CMD ER if you want you can download it for free from its website so just search for commander download and you will be good to go so node and then just run your app and press ENTER and then I'm going to open my browser and just run this URL which I'm running and when I will go here so first of all I will just click this option here in the network which is this one and there is a variable called content length and length is 28 right now right so this content length is due to this variable right now let's see how we can use node debugger so for example what I want to do is I want to for example my mistake I called a wrong method on this body variable for example instead of typing length I typed a wrong spelling of length for example right now this is a mistake so when I run my code once again and i refresh my browser once again you can see I don't get any response here and when I click here I also don't get the value of for this content length so right now I can see content length is undefined right so this is basically an error which is coming from this but we know that we intentionally you know type this length wrong but sometimes you don't know where where the error is coming so for this we can use node debugger so right now instead of running node ab dot j s you just need to write node debug and then app dot j s so just add debug in between node and your file name right so note debug half dot j s and press enter and then it's going to open your code in the node debugger now the first thing it will show you is some lines of code so you I can say first three line of my code in the debugger right now too you know the more options about this debuggers you can always type help here and press enter is going to give you the basic command so R is for run cont or it's shortcut if c is for continue and NEX T you can type or n for the next or step or out or back trace or set break point and many other you know commands right now for example somehow I know that some the error is coming from here because we are not able to see the body right so here we want to set the break point so this is the line for right so what we can do here is we can call a method called set break point which is this one right so just call this method set break point and then in here in the brackets you just give the line number so line number we are interested in here is line number four right which is the Declaration of body tag just right for here and then press enter and our debugger is stopped here right now in order to continue this program you can just type cont or directly C to continue and press ENTER and the program will continue for example okay and then when I just refresh my browser once again I can see the breakpoint is met so our break point is at four so we are on our break point right now in order to go further you can you know type as to step into or if you want to go next then you can type any exp okay so for example I will just type N for the next command because for next command you can either use N or next itself right and press ENTER and we are on the next line right once again you when you press ENTER it will execute the last command you have executed so if I don't type anything here you just continue you know implementing or executing the last command you have you know executed which is next right and let's check the values of for this these variables right so to know the value of these variables I can type our EPL which is read a well print line for example or and then press ENTER and then we can just type body and then press ENTER and it gives the value of the body which is correct in our case because the body value was this which is matching in the debugger so we know that this variable is perfectly fine now we go to the next variable which is content length and press ENTER and it doesn't give any value so I know that something is wrong here and then I I can see here the spelling mistake is here and I know the problem is coming from this place so I can correct this problem and I can go out of my debugger by typing exit so press control C first and then dot exit just press dot exit and you are out of your debugger okay and then if you want you can run your node application normally and then just refresh your page and you will see this response once again right now if you are using the witch studio Visual Studio code also have the option of debugging right so if you want to debug using this Visual Studio code editor you can go to view and in the view you can just press debug so you will be in the debug menu you can see here there is a green button which is for debug right and if you want to start debugging you just need to press this green button here and you can see your debugger is running right and in here you can even set the breakpoints so for example I want to set the breakpoint here on the line for you can see this red dot you just need to click here and for example I just refresh my webpage for example you can see this breakpoint is reached when I press the you know this refresh button right so for example I will just break this debugging once again and once again I can for example I can do this spelling mistake and once again I can start the debugger and once again I will refresh my page for example and we are here and then to step to the next step you can just press this button which will go to the next step and if you want to see the value you just need to hover over this variable it will show you the value of body and in here you can see content length is undefined right so we know the error is coming from this point right and this is how you can debug from Visual Studio code also and to break everything from the debugging option you just need to press this red button okay so this is how you can debug your problems in node.js hey guys welcome to the next video on node.js tutorial for beginners in this video we will see how we can use the node.js documentation effectively and we will see how to use global objects in node.js so let's get started first of all let's see how to use documentation and where to find documentation so just open your favorite browser and we will go to the node.js website which is no JSTOR G and in node.js dot org website there is a section called docks so just click this tab here and here you will find the various documentation on node.js so different motions of node.js and recently the newer version of javascript is also released which is es6 and beyond and some of the new concepts are also you know released under this new version so you may want to use or see at least these newer concepts and if you want to adopt them you can do it but for now I want to show you the node.js documentation so in here for example I will go to this version which is LTS which is long term version so I will click this version which is 6.9 2.1 at the time of making this video and in here you can see there's a lot of documentation here on the lefthand side you can see different modules and different type of sections here so what we have done till now is we have used this HTTP module which is a built in module right and you can find documentation on this here under HTTP right and when you click this and go down a little first of all these are all the functions which you can use with this HTTP module and when you go down you can see the stability so stability is the thing which you may want to see before going inside the documentation and if you see that this module and this documentation is stable then you can proceed further so first look at this thing if it's stable or not for the documentation and then go down and see whatever you want to see for example how to use this gap function with HTTP or how to use even this HTTP module how to require and then a lot of documentation you can find here right so whenever you are in doubt just come here and see the documentation now let's talk about the global objects now in this documentation when you go to this section which says Global's and click here you will see Java Script or in particular node.js have some global objects so if you are coming from frontend JavaScript on the browser side you may know that there is a global object in JavaScript which is called window object and under this you may have seen console object or set interval or other you know functions related to this window object something like a lot or different kind of global object in a same way node.js also have these global objects which you can use in your node.js code and let's see how we can use them so I will go to my code editor here and I will remove everything and let's start from the beginning for example and let's see which function we want to use so for example I will use the set timeout function here okay and as the name suggests it is used to set some time out and it has a argument which is a callback function and a delay whatever delay we want to give here okay so we can just write set timeout and then we can call a function so just write function and this will be anonymous function so just write this blank bracket and then the curly braces something like this okay so this is our anonymous function here and then the time out for example I want to give the timeout 300 milliseconds so you can give the timeout in milliseconds here second argument is the millisecond or timeout right and inside this function I can perform some tasks for example printing on the console so I can use console.log function for this you have already used this console log in our previous program and we will do the same here also right so what we can do we can just print for example three seconds have passed for example something like this okay and then save your program and I will open the console and in here I will just run my app for example node app dot J's and run it and when you run it it is just wait for three seconds and then it will print this message which we are printing using console.log okay so once again run the program wait for the three seconds and then it will print the message and then it will come out of the event view for example and it will close the program right in the same way you can use a save or set interval function to set some interval so instead of set timeout you can use this function which is used set interval now for this set interval what we can do is we can define a variable for example and we will say this is our time variable and we will assign the value of zero to it right and then what we can do here is inside this set interval function we can just use time plus equals two because our time timeout or time interval we are using here is two thousand milliseconds right and for example we can just print the value of this time here and we can say this much amount of time has passed or second half passed okay and save your code and run your code once again and let's see what happens here so two seconds have passed four seconds have passed six seconds have passed so it will increase the time the value of this variable by two again and again and this function will enable your node shares program to run in a loop kind of thing so it will never end until you have some condition to end it okay so what you can do to end it you can just press control C to come out of the program okay so let's say we want to come out of the set interval function when some condition is met so for this we can define a variable called some other variable for example timer which is equal to set interval and then we can see here this timer when some condition is met so for example if the value of time so if the value of time is greater than for example 7 then we want to clear the interval so just use a global object called clearinterval and then we can pass this timer variable here and it's going to clear this interval okay and then let's run the program once again and let's see what happens so two seconds have passed four seconds have passed six second have passed and then when the value has become eight at this time it is going to clear the interval because when this condition is met this function is called which is going to clear the timer and it's going to come out of this function right now I'm going to also show you some of the other important objects which you can use in node.js which is their name and file name so we know that we can use a console log to print anything on the console and there is a global object called their name so just write double underscore and then write their name here it's going to give you the directory name you are currently in so I'm just going to once again run the program and you can see it's going to print the directory name right now for example I want to print the file name I am currently in you can just write underscore underscore file name right and then you can run your program once again and now it first prints the directory name which is by this object their name and then we have the file name here you can see AB dot J's file right and you can go through this documentation once again how they work so for you apply go to their name it's basically showing the same example which I have shown you and here also file name and the explanation of this function or object you can find in this documentation so this documentation is going to help you a lot whenever you are developing in node.js so please keep in mind whenever you are developing your server or any node.js application just go through the documentation whenever required hello guys welcome to the next video on node.js to troll for beginners in this video we will learn how we can create custom modules in nodejs now in the previous videos we have already seen how we can use builtin modules in node.js and the example of that was using the module called HTTP so in the previous videos we have used a built in module which was already built in no chairs which was called HTTP and the way we have used it is like this so we have used this require keyword and then use the name of the module which we wanted to use right and we have assigned this module to our variables so that it has created an instance of this module and using this variable we can call any method inside this module which it contains right in a similar way in node.js we can also define our own custom module now for example we want to define a module which says hello in different language so we can define our custom module now for that what we can do is we just need to create a new file for every module we want to create so let me go to the command line and let's see what are the files which are there in inside and my project right now so as I can see I have right now only am not chairs which is my main file you can see here also the same right and now I'm going to create a new file for example I'm going to say that it's a hello dot J's for example and in this new file you want to create a function for example I'll create a function and first of all let me create a variable which has the name save hello in English for example right and to this variable I will assign a value which is returned by a anonymous function so we can define an anonymous function like this we have already seen in the previous video and then this function returns for example let's see what it returns so it returns hello in English something like this right and the way we can use this function in our main Abdur chair is we just need to use a keyword called exports right so here we have defined this variable and if you use instead of this war if you use exports something like this then you can use all the content of for this file in the other file for example right now you can use this file content into the main file for example we use the same construct we just use var and let's say our variable name we want to give here is hello right is equal to require just use require and as we have done in the builtin module we have just called the name of module for example we was using HTTP we have called the name of the module so the rule in node.js is whenever you are using a built in module which is not created by you then you can use something like name of the module only otherwise if you want to use a custom module you can just write something like this so you can just write dot and then forward slash and then for example the name of the file so hello dot J is something like this okay and now using this variable you can call a function so I will just use semicolon here and then for example I will just console.log the value which is returned by that function right and then what I want to do I will just use this variable and then call a method which I have defined here which is this one so whenever you you know require any file for example all the method inside that file are available in this file which in which you have required this file right so we can just write something like this and then don't forget these brackets because this function have these brackets right without any argument right and then save your code and then go to the command line and then just run your app so just write node app dot cheers and it gives me error so let's see what what the error is the spelling of export is wrong so just write exp so RTS right so just write exports pod say hello right and then once again run your code and now it prints hello okay so in order to you know use the content of one file into other you need to use the keyword before your function name for example right now if you want to use multiple functions you can just write something like this so for example first function is say hello in English then the second function is say hello in Spanish for example and it says hola something like this right now this method is also available so both the methods are available now in the m dot JS file so instead of using say hello in English we can just say say hello in Spanish and then we can run our code once again ad prints hola right so this is one way of for you know using a module custom module right the other way is you can just use something like this so what you can do here is you define your functions or these variables remove the export from here something like this and then you just use these colons here and then here you just write module dot exports and in the curly braces just include both the functions something like this okay and just use comma m and also don't forget to assign this value here okay so just write module dot export and then you have these object inside these curly braces for example say hello in English and say hello in Spanish and this is also this kind of you know export can also be used so let's see what's the result now I hope it will be same it's the same result right so this is the second way of exporting your you know methods right the third way of using modules is for example you have these object and elements here right and then you can assign this to some new object for example who are hello right and then you can just use module export and can assign the value of hello here right and we are not doing anything special here you see we were using this module dot export here right and what we have done is instead of using this we have assigned the value of for this object to a variable for example var hello and then we have just assigned the value of hello and we have exported this module right so essentially the same but this is more readable so this is that this is our hello module and it have two functions inside it right and it's also going to give the same result so once again run the code says the same let's use both the function so say hello in Spanish and say hello in English and then we can just run our code ad prints hello and hello Jolla right so in this way you can define a custom module Zen node.js hello guys I go to the next video on node.js to roll for beginners and in this video I'm going to show you how we can use file system module in node.js which is a builtin module now note implements file i/o using a simple wrapper around the standard POSIX functions and this is done using node file system module or simply FS module in no chairs now let's see first of all how we can add FS module so just write VAR FS is equal to require and then you just add FS okay and this is how you can add FS module now this FS module you can use for various input/output functions related to file system in this video particularly we are going to read see how we can use this FF module to read and write to a file synchronously and asynchronously right so first of all we will use this file to read from a file synchronously but for that we need a file txt file which we can read so I'm going to create a text file for example I will name it as test dot txt and in this text file I'm going to write some things and let's you know copy and paste this line ok so then what we want to read from our file system object which we have you know created using this file system module so for reading this file synchronously what we can do is we can just use file and first of all we need to assign this output which we read so we can just write a bar and then we can just say a red string is equal to F F dot read file sync ok so just write read file sync and this method will allow us to read our files synchronously ok and then give the name of your file and because this file is in the same folder you just need to give the name of the file not the path because it's in the same folder so just write test dot txt and the second argument which we want to pass here will be the encoding type so just write for example utf8 and now let's try to print whatever we have you know read from the file to the console so just write console dot log and we will just print this string here whatever we have read so it could be red string and then we are going to run it so open your terminal and just run it using node app dot J's and you can see our file is ready so our file content let's see what was the file content and what the terminal is showing right so same content as the file so this file system module enables us to read the file synchronously and if you want to write this file to another file or write the content of the file which you have read to another file new file for example what we can do so we can just write F F dot write file sync so just write write file sync and then just pass this result to the argument okay so right for right file sync can be used to write to the file synchronously right and this file right file method takes two arguments the first will be the name of your file so let's create the name for example test 2 dot txt and the second argument is the content itself right and let's run our code and let's see what happens this time so just see here what happens here whenever we will run this code and you can see the text 2 is created when we run the code and the content of text 2 is same as test1 dot txt or test dot txt right so in this way you can use this to read and write to the file synchronously now FS mod you'll also have the async method and this will allow us to read or write to a file a synchronously right so this for this we just need to use the method called file name without sync so by default if you know about node.js nodejs is a if and Kronus you know program so whenever you write the program it runs asynchronously and what I mean by asynchronous is I'm going to show you in just a second so just write this once again we want to read the content of testify and just call a method read file and the first argument will be the same and the second argument we want to pass here is the callback method well let's say we can do it in the last argument also right so just write function and then just say error at the first argument and the data as the second argument okay and then give a curly bracket here and press ENTER and in here for example if there is some problem in weeding we want to return error so just call this argument first argument which we have passed in the callback function which is this one and then we can console error right so just write return console dot error and then pass this error here as an argument okay otherwise if there is no error in reading we can just console.log the content so instead of console.log outside the you know read file method we can just you know call it inside or call back okay something like this and this argument which it takes now is data because data will contain your content of your file which you have read okay for now let's remove this line of code and in here we will just call console.log and let's say we just want to print the file is read for example okay and let us run the code once again and let's see what happens so what I'm going to do is I'm going to run the program once again or code once again and you can see the output here it's a little bit different from earlier that first of all the terminal prints or this program prints the file is read which is this line and then it trends all the content of the pile which was there inside the file so this is done in a synchronous manner right so what's happening here is no J starts the server for example and this method is reading the file if the file is for example very big what happens then so you want to you know in a reallife situation when you are dealing with real data you need to do your stuff a synchronously right because otherwise your code will block this you know running of your server and other things cannot happen if one process or one you know file reading is taking very long time but this way of you know executing your code asynchronously will help you to you know run you know your code in a very good manner because your code is not waiting for the reading of your file but it's executing the next step and the next step once again if there will be some more you know useful code below this also then it's going to execute it and once the file is read it's going to print the content of the file using this console log so the callback function this function is called callback function and it is triggered whenever the you know a file is read completely right so this is how asynchronous you know way of reading file box okay in the same way you can write to the file asynchronously also and you just need to you know call FF dot right file and then the you know name of the file ways in which you want to write to so let's do that and let's see what's happened so FS dot right file and the first argument will be this argument the second argument would be the content which we want to write for example we want to write this data which we are reading from the first file for example and the third argument will be the same as we have done here the callback right so you can just copy this much amount of code before the bracket and then pass it here and we can just add a semicolon here okay and this is just checking whether your file is written and if it's not written it's going to you know console.log the error and if it's written then we can say success for example we can just print success right something like this and when you run your code once again it's going to write it so let's run it and program is done and at last it print success and you can see the file is also created text dot txt right so in this way you can use FS module in nodejs there is more you know functionality in this FS module which you can find on the node.js sites or go to node J dot org /a API / FF dot HTML and in here you can go here filesystem or you will be able to you know find more method related to this FS module here and there are so many method which you can use so just to go through this documentation and then you will be good to go hello guys welcome to the next video on noisiest atoll for beginners in the last video we have seen how we can use the FS module to create file read from file and write to a file now in this video we will see some more functionality of this module and we will see how we can delete a file and how we can create and remove directories in no chairs using FS module so the first requirement is this one you need to you know require this module which is a inbuilt module right now first functionality your first thing we will see here is how we can remove a file so in the last video I have created this test type txt file right and for example I want to remove this file so I can just write F F dot on link and then I can just give the path of the file with its name so my file is in the current directory so I don't need to give the part but I just need to give the name of the file which is test dot txt right and when I run this app let's run it and what happens is this text dot txt file is gone right so this unlink method you can use to remove a file but be careful here whenever you will you know run the code if the file does not exist then let's see what happens now this time it shows an error which will be due to the file not existing okay so in FS module you can also go to the documentation and check how you can first check for the file if it exists or not and then delete it so this can be your home or just search for how to check if the file exists and then try to delete it okay now let's move ahead and let's see how we can first of all for example create a directory so to create a directory first we will see how we can create a directory synchronously so if you are a little bit familiar with command line you know terminal commands then you know how to you know create a directly so in terminal whenever you type mkdir then it creates a directory right and in node also whenever you just call them method called mkdir after FS and then gave the name of the directory for example the name of the directory I want to give here is for example node itself okay so know directly I want to create and here I want to create it synchronously so don't forget to write sync here right and save your code and I'm going to run my code again and let's see what happens so I just run my code and you can see there is a new directory created which is called mode right now in order to remove a directory you just need to replace MK by RM so RM dir is going to remove the directory so synchronously was synchronous removal you just need to add this suffix like FY NC sync right and save the code run it again and just see here the directory will be in the book so this directory is removed right now in order to create a file asynchronously what we can do here is for example instead of using this sync we can just write something like this so FF dot and K they are and then the name of the directory once again for example node and then you can create a callback function here so I am just going to write function and then inside the callback function I can do whatever I want to do after the directory is created right so for example I want to create a file after I have created or directly something like this okay so inside my callback function what I can do is I can just write FS dot right pile right with a capital F and the name of the file so for example I want to create this file inside my new directory which is created which is node now in order to you know create this file inside the snow directory you just need to write dot slash to indicate that you need to go inside this node directory and then the name of the file for example my node dot txt okay so this will be the name of the directory and for example you want to write something I'm going to just write random text here and this is going to you know write this text to this file for example right so just save your code and run it again and let's see what happens so on the code the directory is created inside the directory the file is created and inside the file this random text comes okay so this is how you can make a directory now let us say that you want to delete this directory once again which also have some file inside it so I'm going to just remove it and I will just write F F dot the RM dir and the name of the directory so the name of the web directory is node right and if you do this it's not going to delete this directory because you already have some file inside it so whenever we run this code what it gives is it gives the error because you cannot remove a directory if it contains a file inside it so what we will do here is we will first remove the file and then remove a directory and this is very simple we have already seen it so just right FF dot on link and then you just need to give the path of the file you want to remove so this is because it's gonna know the folder so you will just write dot forward slash node and then you just need to give the name of the file so the file name is my node dot txt and then we can add a callback function here so just add a callback function and inside a callback function once this file is removed we want to remove the directory right so you inside the callback function you can call a method to you know remove the directory right and just save your code and let's run it again and let's see what happens so I'm going to just run my code again and you can see the file is deleted first and once the file is deleted this callback function is called and then the directory is removed ok so in this way you can use FS module to create directories and remove directories and remove files also hello guys welcome to the next video on a node.js to tol for beginners in this video we will talk about events module in node.js and how we can use event emitter in node.js we will also see so much of the node.js core API is built around eventdriven architecture which means that because we that nodejs runs itself in an asynchronous manner so it's necessary to have some kind of eventdriven architecture because so for example you if you are reading a data from a database so once your data is read from a database you need to trigger some event otherwise if your code is blocking and it's not you know a synchronous then your so execution will be blocked until the data is fetched from the database right so we have event in node API which helped us to you know for example same example you want to fetch a data from the database you write a function for this and as soon as you you know you are done with reading of the data from the database the code triggers an event so your code will run asynchronously and it's not spot stopping and as soon as the some function is done an event can be triggered and the execution can be done or it can be you know the data can be sent to the client for example right so let's see how we can use events and events emitter in known chairs so to use events just write VAR events is equal to require this keyword events right now in order to create emitter you need to call a method called event emitter right so you need to create an instance of new event emitter object okay so just write our event emitter is equal to new events and then call an event emitter on this object right so with a capital e right so this will create an instance of four event emitter okay and using this event emitter you can create an event or listener for the event and then you can also emit an event and the listener will listen to the event so how you can create a listener you can just write event emitter object and then there is a method called on and for example of you if you are writing a UI something clicked for example some button is clicked this is like a listener to your you know button click so you can hear write a keyword for example click so this will be the listener and whenever this keyword called clicked is emitted then this method which is a callback function here will be called and whatever code inside this callback function will be executed so this is kind of a listener so let's say there is a you know the keyboard clicked and we will omit this keyword using event emitter once again so just use event emitter dot emit and simply you can just call this keyword which means that this event is triggered for example click is triggered and here you can use any keyword so for example if you are fetching data from the database you can just write the query here or if you want to add some data you can just write add the keyboard depend upon you so whatever keyword you want to use here as a first argument it is such a word and whatever keyword you know you omit if it's the same as the listener keyword then this code inside this callback function will be triggered so let's see how we can use it so for example I will just console.log some things oh just right console dot log and I will say something is clicked okay so let's try to run our code now if you are using visual to the code there is a trick to open a terminal inside your visual studio code editor itself and the way you can do it you can just press control shift P and you give you this kind of a box and here just type it toggle integrated terminal and here you can run your code again and you can see we are already in the same folder in this terminal so we just need to write the node up thought j/s and run it and you can see something is clicked so basically what's happening here is whenever you omit this keyword then this listener then listen for this keyword and then the method or callback function will be called and whatever code you will write here will be executed okay so this is the basic functionality of event emitters now in here you can also pass some argument with this emit method so for example you want to pass some text so you can just pass for example button one okay and instead of for this you can just pass a function for example button and then you can just call button here plus and then instead of something we will call button one is clicked okay so this is an argument which will be passed here you can pass any number of argument you want here and just I pause the same argument here this you know value will be passed to this button right if it has the second argument then the second value will be passed to the second argument so you can pass some argument also like this and once again when you run the code it says button one is clicked okay so you can also pass arguments here now let's take a little bit more advanced example now for this example we will then need for example our utils module which is also a core module here so just write util here is equal to require YouTube and using util it has so many functionality and the functionality which we are going to use from this util is the inherit function awesome heads you know method from it so there is a method and util so just write you two and then call a method call inherit so and then it takes two argument first is the class which you want to inherit in so first is the class which is inheriting right so we need to create some for example object in order to inherit from event emitter so let's create an object so we will just create an object called students and the student have this function which will take the name of the student and then it will assign this name to the student itself so just write this dot name which is the name or the member of the student and it will be assigned by this name which is passed to this function right now as I said utils have this method called inherit and it takes two argument first is the class or the object of the class which wants to inherit so this is like a class which is inheriting and the second is the object which is the base class for example so from the class which you want to inherit so we want to inherit from this event emitter okay now this is really good thing about m and the emitter we don't need this bracket here and we also need this here right so now if you know the concept of inheritance what happens when inheritance is the class which is inheriting have the access to the methods and the members of the class from which it's inheriting so student have the access to for example on method or emit method or whatever method public method which are there in this event emitter class for example right so now what we can do here is we can create some student for example student one can be max is equal to new student and we can give the name here max okay so this argument is max in this first case right now whenever we call this object now this object also have the access to a method called on right which we have called using this event emitter instance because students is inheriting this event emitter therefore this object of the student also have the access to this method and you can simply use this you know method as we have done earlier so this students for example we can just get the keyword scored and then we can just pass the anonymous function or call back here and we can just pass some something like marks here right and we can control log it so just write console.log and then we can console.log for example first of all the name of the object for example max dot name and then we can just write here scores and the muskie score so the marks are here okay we can print this and then we can omit this event right in reallife situation you can do this Emmit on for example receiving the some data from the database or connected correct connecting to a client whenever connection is successful something like this but here for example i can just write max dot commit and then this keyword called score and the second will be if you remember the argument here can be the value of argument this argument can be passed from here right so we can just say 95 marks okay and let's run our code again to save the program and run the code again and here it says max scores 95 right or and you can just write something like marks also here so we know that he scores this much amount of mark and once again run the code and now it says max codes 95 marks right in the same way you can create a second second event something like this so instead of 4 max you can just say the second student is Tom right and the name you pass here also and instead of max you just essentially replace max by Tom this is our second student right and this time Tom scores for example 60 marks okay so once again when you run the code you can just see math scores 95 marks and Tom scores 60 marks okay so in this way you can use events and event emitters in no Jeff hello guys welcome to the next video on node.js tutorial for beginners in this video I'm going to show you how we can use streams in node.js specifically we will talk about readable stream in this video and in the next video we will talk about writable stream in Mochis so let's get started so first of all what are streams streams are UNIX pipe that lets you read data from a source and write data to a destination right so for example you want to read a data from a very big file or from a source which has the lots and lots of data and because you are running a server you don't want to block your server right so if you want to read this file you may want to or you would like to read this file in chunks or you know smaller portions and once this portion is read you want or you can do something right and streams allows us to do the same so streams allows us for example we want to read a big file streams allows us to read this file chunk by chunk and it will also give the information that this chunk is red and if whole file is read or not or we can do many you know events from this data right so let's see how we can use streams specifically readable streams right so to use streams we will use the FS module module and we have already seen how we can include this module in node.js just use var FS is equal to require FS now we will create a variable call for example readable stream is equal to F F dot create read stream and this takes a achievement which is the name of the source so for example I have this file whose name is file dot txt and it's a relatively big data so it has around the 500 5000 200 lines of data I just copied a random data from some source and for example I want to read this data right now this filename here we will give as argument so just give file dot txt because it's in the same a directory you can see here and now we can use this variable read stream let's name it read the screen instead of readable stream okay so this read extreme we can use to listen for some event so basically whenever you use create read stream it inherits from event emitter and we have already seen how to use event emitters in the previous videos so it inherits from MN event emitter so we can call the method which are present in event emitter class also so we can you know trigger on event or emit method using this read stream now there is a predefined the event in create read stream which is called data okay and which allows us to read our pile in chunks so just write read stream and then we will just write on which we are inheriting from MN event emitter and we will listen for the event called data and then we will just create a anonymous function here and this anonymous function will read chunk of data so just write chunk and then we will just choose our function okay so in this variable whenever this event is triggered then this chunk will contain some chunk of data from this file right this chunk variable will be full and then we will you know use this chunk of data from this file okay so for example what I want to do is I want to just console.log this data so I will just write console.log chunk here okay and one chunk of data is read so we can just give a line kind of a console.log here so we know that this is one chunk okay after this line right so let's see how it works so I am going to just open the terminal and run my app and you can see there are few chunks which are read from this file okay so you can see my first of all this line is you know printed on the terminal because of this console.log and then we have the chunk of data and then again this line again and this chunk of data so it's reading the data in chunks and when all the file is wet then we have the output but this is not familiar because this is reading in hacks right we haven't defined what type of data we are reading so you can see in the file dot txt we have normal you know normal text it's reading in hex data right so how we can tell this functional method to read in readable text you can guess I think you can just write here the type the second argument is utf8 for example and then just save it and then we will run it again and now you can see it's reading in the normal text so you can see this line and then judge chunk of data which is red and once again we will see when we will go a little bit up so this is the next line and whenever you will go up you will see these this kind of line so now we are reading the normal text but in chunks again right so this event data will allow us to read the file for example in chunks right and whenever one chunk is read you can do some logical you know stuff with this chunk of data right now there is one another event called end so you know that you have completed reading the file so instead of data whenever you use N and let's instead of for this console log you just say and end here okay and let's read the file again or execute the program again and once this data is read this line is printed which is due to this triggering of event called end event okay so once the file is read completely this event will be triggered and then this line will be printed or whatever code you will write here will be printed so for example I will create a variable here called add data right and what I want to do is I want to store all the you know text of the pile in this variable and once my data is read or once my file is read I want to print the content off for this data so instead of this what I can do here is I can just write data plus equals chunk something like this so what it's going to do is it's going to concatenate this chunk into this data variable right and once all the file is read I want to print it so I will just do console.log here and I will print this data variable so this differentially will contain all the file content okay and let's just comment this code out because we don't need it and let's run the program again so program is running so this time once the you know data is wet then it's printed using this console logs because we are not you know printing using this we have already commented out right so this time it this line is printing this text all the text okay and once the text is printed this line of code will execute and into print and here which is happening here okay so this is how basically you can use readable streams in node.js right now there are many options or related to read extreme and write streams so for example one of the option we have set here stead of setting the encoding from the second argument there is a special method which you can use to set this encoding which is the set encoding so instead of for this you can even do this also and code will run fine okay so let's run the code again and it's going to run it you know normally okay so just go to the node jeff's documentation on its website and you will find many useful functions and methods there which you can use in your code according to your requirement this is just the introduction to you know streams and specifically the readable stream hello guys welcome to the next video on node.js too tall for beginners in the last video we have seen how we can use a readable stream in nodes here and we have used this method called create restreams to create an object of read streams and then we have called that this method on this readable stream object which on data event was you know reading a chunk of the data from a file which we had created last time yeah and whenever a chunk of file is read then it's going to be used using this variable chunk in this anonymous function right so if you are not sure what I'm talking about just see the last video to be clear now in this video we will see how we can use the writable streams in node chairs so for example you have some vaso stream coming from somewhere for example from this file itself whatever we read from a big file we have we have created last time you want to write this data which we are reading in chunks to another file in chunks so we are not reading the whole file and then writing to a new file we are reading chunks and also writing chunks so it's not going to block your code okay so let's see how we can create a writable streams in no chairs now to create a writable streams I am going to use this code which I have written in the last video to read the file right and now we will create a writable streams just write var write stream is equal to F F dot create write stream and then we can give the name of the file in which we want to you know send our stream to so for example I can name my file as write file dot txt okay this will be the file in which we want to write our data now to use this write stream is really easy whenever you read this data so here on the data event here we were reading the data right so in order to write it to a file you can just call this write stream object and then you can call a method called write on it so just simply call a method called write and then it takes a chunk as an argument so you can just pass this argument here and this you know chunk will be written to the white stream object and in turn it will be written to the right file dot txt okay so let's run the code and let's see how it works so I'm going to open a terminal and run my code and it has just printed these which indicates chunk of data read you can see and then we can see a file is created here with the name right file it has the same content as our file dot txt have ok so this is essentially just writing the chunk of data as it reads the data from of file now in the previous videos we have also seen how we can write the data using the right file function right now the difference between this right stream dot right and the right file function is in the right file function we were just you know flushing all the data which we have in the buffer and it's not you know going to the file in which we want to write chunk by chunk but we were writing it in in a single shot right but using this method you can you know write the data to a file in chunks whenever you have data right so this is the benefit of this method and right streams over the right file method hello guys welcome to the next video on node.js troll for beginners in the last two videos we have been seeing how to use readable streams and writable streams in no chairs and in this video we will learn an important concept called piping in no chairs with readable streams and writable streams now in node.js or any server application writing and reading streams is so important and frequently use thing that nodejs has provided a back better mechanism for us to use which is called piping so if you think about a website for example what it basically does is it takes the HTML page for example and just giving a very simple example so a server takes a SD ml page and it first of all reads this HTML page and create a for example write table stream and send it to a browser in which we can see this HTML page content right so this operation is really basic to a server whenever you are making a website for example so first of all let's see what is piping or what are pipes so a piping is a great mechanism in which you can read data from a source and write to a destination without managing the flow yourself right so in the previous video we have seen that we had to create a readable stream first from a file and then we have created a writable stream and then we were you know listening for the data event to write it to a file using the writable stream and here also we can handle the ending of the reading right now the piping makes it really easy and it manages all these things by itself so a pipe method listens for the data event by itself and it automatically you know sends this you know chunk of data which we are reading to the file we want so how we can create a pipe so we still need here are readable stream and also writable stream so we will leave these two lines of code here now in order to use pipe you can use pipe only with readable stream so you need to have an object of readable stream and then call a method called pipe okay and this pipe takes an argument which is a writable stream so you can just give this object here and then it's going to do the stop autumn take a listen it's going to listen for the data event and it's not going to worry about or we don't have to worry about if the you know data is read slowly or fast or or handling the chunks of quad data right this pipe method is going to do it by itself so let's run our port and first of all I'm going to delete this right file because it's already existing I'm just going to delete this and now I'm going to save my code and I'm going to run it so let's run it so the code has run and you can see it has created this file again which is writable stream and which has the same content as the input file which we have okay so this makes things really simple for us right now in server so in the previous videos we have created a node.js server right so let's use the server code again to send this file stream or this data of the file using stream two of that browser okay so let's use first of all this HTTP module which is an inbuilt module which we have also seen in the previous videos right so require and then you can just write HTTP okay and then we have created a server in the previous video so I'm going to just take that code which we have written in the previous videos for creating a server and we will just use this code okay so if you don't know how we can use this code just see the previous videos where I have shown you how to use this HTTP module right now in here what we want to do basically is whatever we read from the file or input file we want to send it to a browser right so let's first remove this code first of all right and let's run this code for the first time and it's going to print hello world for us right so I'm going to run this code and I'm going to open the browser and it's going to just print hello world which is the basic functionality of this code right now in order to send the content of this file we don't need a writable stream right because we are going to directly send the you know file content to the browser okay so what we are going to do is we will just take this readable stream and we will create it inside this server okay and using this read stream object instead of for using this response dot end which was sending this data to the browser we can just use this read stream dot pipe and then we can just add this argument called ref or response argument here and everything will be done by itself and we are going to just remove this code here okay so what we have basically done is we have created a readable stream and then using pipe we are sending this stream to the response okay and let's run the code and let's see if it runs or not so I'm going to just stop myself and run it once again and I'm going to refresh my browser and you can see all the content of the file is on our browser page okay so let's repeat what we have done here so in the server we have created a really small server which relations on local host on port 3000 you can see here and what it's going to do is it's going to just write to the you know whenever a request come it's going to write or give the response in a plain text so this content type is playing text it's not HTML because we are sending the plain text okay and if you want to send the HTML page you may you know rightly guess that we just need a HTML text or HTML over here right and this we are going to see in the next video to send the HTML to the browser using this code but right now we are using the plain text that's why the content type is text slash plain and then we are reading the file using the file stream and then we are just piping it to the browser using this response variable okay piping makes it really easy for us to serve the you know whatever we are reading as a stream hello guys welcome to the next video on no JS to troll for beginners in the last video we have seen how to use pipes to serve your text which you are reading from our text file to a browser for example and we have learned some concepts about pipes now let's use this concept to serve a HTML page to a browser for example so let's get started and first of all we are going to create an HTML page so I am going to right click and I'm going to name my HTML page as index dot HTML ok so just create a page called index dot HTML and in here we are going to write our HTML code okay so let's add our HTML tag first of all and then we are going to add head and body elements so just add head first and let's add a body element also and inside this body let's write something so inside the body for example I want to add h1 tag and in this Ashwin text let's write something so for example our first node.js HTML page for example okay and let's give some style to this page for example let's add first of all the style element here instead of this just write style and then inside the style let's change the background color of our webpage so we can just do it by just changing the background color of the body so just add body here and we will change the background color right so just choose background color and which color we want for example light green or something like this so let's use light green is there any light green here here this okay right so this is essentially changing the background color of your HTML page and it has one h1 element which has some text here okay now because it's in the same folder as our project files we don't need to worry about any path here and instead of this file dot txt we can just write index dot HTML okay so just write index dot HTML and instead of plain text slash plain here now we are sending the HTML content to the browser so just replace this plane by HTML here okay and we will be good to go so let's rerun our saga so I'm going to rerun our server and let's refresh our page and now we have our first HTML page solved using our node.js over to the browser right so this is not really complicated and if you want to make a static website you can add multiple you know static HTML page pages and serve it using this technique but notice is much more advanced and the complex technology and it can be used to you know do more complex stuff right so this is the simple way of just catering and HTML page to other browser in the further videos we will see how we can use some more complex functionality with no dear hello guys welcome to the next video one more chance to do em for beginners in the last videos we've seen how we can find the HTML page moving readable strings and writable screens in no chairs now in this video I'm going to show you how we can send our Chasen to the browser using an old chair right so Jason know you know most of the you know server application uses Jason as our data to send it to the browser and this data can be passed on the browser side for example and then it can be used for you know multiple purposes so it's also a popular technique that Jason is sent from the server to the browser and then with this juicy data some useful things can be done so let's get started and see how we can use Jason and you can penetrate into the browser so I'm using the code from the previous example I will remove there are the readable strings and writable streams code from here because we are not going to move them in this code and we are going to directly use this response variable to send the data using response dot and okay so first of all we to change the content type right so here previously we were sending the text / slash HTML because you want to send them all the JSON data so you just need to write application /j sir okay and then this means that we want to send the JSON data and browser will be able to pass this JSON data appropriately right now in the next step we will create our JSON object so you can use a JSON file for that or you can create a JSON object using the code also so I'm going to create my JSON object using the code but this can be done also using the JSON file so you can create a JSON file here and read the JSON file and then convert it to for example stream and then send it to the browser right so let's create our JSON so far for example Jason obj for JSON object and inside this brackets we can add some elements to the Chasen so what elements we want for example we want the name some name and then can we max and then the for name for example and this can be something and the age for example age can be 26 okay so this is our JSON object and this we want to send it to the browser so we can simply use this response variable and then call our method call n which we have been using in the previous video also so just right hand and then you just pass your JSON object here but this code will not work because the browser or whatever you want to send this method it only takes the strings or the string as an argument and this is our object so we want to convert this JSON object to our stream and how we can do this we can do this so using our method called JSON dot stringify which will convert our JSON to our string okay so this is the method json dot stringify which takes our argument you can see the details here so it takes object as an alternate which can be achieved right so this is our code and this object may be converted to a string and then using this method it's going to be sent to the browser let's say one hour server first of all and it has some error so let's see what the error is so the error is instead of equal to I need to use the colon yeah and once again run the code and then use the browser to see the response and you can see our response Jason is here right I'm going to make it a little bit bigger so this is our response Jason now in order to impact this you can just rightclick on your browser and then click inspect in boom boom I think this is the same option inspect element or inspect right so click this and then go to a tab called the network okay so go to network here and we need to reload our page so you can click this regalo button and you can see our it has the status 200 which we are sending from the code this code right and then the content type also so just click on this you know get method and you can see here the content type is application for slash JSON so this is send using this code and then then go to the response here response tab the tab you can see the Tizen is passed and shown in our commented way right so in this way you can send a Jason to the browser using more chairs ok and this is also a very useful technique whenever you want to you know send some dynamic data to the browser for example you want to pin from our table using the JSON data then you can do this right because you can pass this JSON data based upon the elements and values right hello guys I go to the next video on nausea scroll for beginners in the last video we have seen how can I send the JSON data to the browser from node.js right and this was the code I have in the last video now in this video we will talk something about the routing talk how we can you know route our data and get our different responses for different requests right so let's get started what I'm going to do is I have taken the last video code here and I have added one more line here which is walking the requested URL ok just this IQ dot URL I have added this code extra and everything is same from the last video example ok and now what I want to do here is I want to first of all run this app and I want to just open my browser and refresh my browser so the base URL here is the forward slash right this is the URL now for example I want to request some like a pi/4 in my url I want to add forward clash API and I want to liquid some data when I request or I extend my URL with this forward slash API and then I do this you can see the request is gone with the different URL but the response is same right and for example I want to add about page and I will press Enter it gives always the same response whatever the requested URL it is you can see I have requested the four slash API URL or four slash about URL or for example let's say the you know response is always the same so how we can route these different URLs according to the request we want to spend the response so let's see how we can do it so I am going to go to the code once again here and first of all I will use this URL to pass which kind of power you know request it coming to us and then on the basis of this request we can like it as a result right so you can see I have already made index dot HTML in the previous videos right so this is just a sample HTML which I have created in the previous video so for example I would say this is my home page okay so I will just add home page and when somebody you know requests either they jorel power slash home or just the forward slash there then I want to cater this saw index dot HTML or home page there so what I'm going to do here is first of all so just take the space here let's make the space here first of all you will add the code to bars that you are also just write request which is the first argument here it was point or dot URL is going to give us the URL and then get triple equals R remember on using triple equals because it's always a good practice to use triple equals instead of double equals so try always think the triple equals right and then I want to match it with for example /home or if it's only a forward slash okay so I'm just going to copy this and place it here and if it's a forward slash then what I want to do here is I want to give the text response so I will just copy this line of code but this is HTML right so instead of this I can just a text or slash HTML right now in the next line we are going to create the stream of our HTML page and then we will send it this will be HTML here so FS dot create read stream and you want to create the link stream from our index dot HTML so you can just directly give index dot HTML which is already present right and we will pipe it to the response so we just write 2 pi and then just write response or our es okay so this is going to just send the index dot HTML when ever this home is requested or as the base URL is requested or else you can just write if or in better right as right so just right else if and if the request URL is for example the chase and objects I will just say triple equals API so this is just kind of hot API and whenever the API is requested then you want to give this JSON object so you just create information and inside my explanation I want to send all this JSON data like something like this okay so what will happen now I'm going to just forward format it just right click on your visions to decode and just click format it's going to format your code right and let's saw reason our code once again so close the code and we run it once again and now when I do for example just a base URL press Enter is going to show us the home page which is the index of HTML extending phone so or whenever we write here power slash home you see the same response the home page but whenever we invite here API for example API then it gives us the JSON response right and in the same way we can you know give a different response on the different requests so let's add one more response for example for example I want to have a about page so I'm going to create about dot HTML so I will just say about dot HTML and it hits about dot HTML and you're just going to copy the code from index dot HTML and I was just saying here about page ok this is my about page and in my app don't chase I can just copy a tip code from here I'll just say else and my code of course which I've copied which is this code and instead of home I will just add about here and I will just remove this right and instead of index dot HTML I will just replace it by about dot HTML right and let's run the code again and let's see if it works or not so I'm going to open the browser and this time I will just ask for about and gives us the about page right or no and it gives us the main page right now for example let's say I'm just a crossing from random URL once again we're going to you know request it but it's not never gap going to get any response from the server because server cannot resolve this URL right now in this case so whenever server cannot resolve the URL ideally we want to send the response hole 0 4 which is not formed right so let's add this response so in the last condition I will just add else condition which is the last condition for us and let's create a 4 0 for HTML page so I'm going to right click and I'll just this wire for the aforethought HTML page right and once again I'm going to just copy the HTML content from index dot HTML or about the HTML and paste it here and I will just write here 404 and I will just write not found right and now I will just add the conditioning ancestor as condition I'll just copy these two lines once again and here I will just try the force single for dot html' and instead of giving 200 response this response I will eclipse by putting your core right which is not found status code and let's run the code again and in the browser let's try this record URL again and now it gives the port Singapore responds to us okay so home and we have about and we have our API it gives us the JSON response or any other random URL will give the 404 response right so in this way you can you know route your request and give the response according to the you know you already requested now there are much better ways of routing your requests using some extra modules or a thirdparty modules and this is what we are going to see whenever we will learn how to use NPM modules right so there are you know thousands and thousands of thirdparty modules available to perform a different functionality so you can use these ammonia using NPM and this is what he able to see in the future how can module so all these things can be done in much easier and professional way hello guys welcome to the next video on Moody's tutorial for beginners in the last video we have seen how we can now perform basic routing using your chips now if you want to do more routing stop and other stuff if you think of this it can become really difficult whenever you want to add a few more files here you need to write the lots and lots of cool here in order to stop and this can be easily done by thirdparty modules and there is a repository called NPM or more package manager which allows us to include thirdparty modules which are created by experienced developers and they have already invested their time to create these modules and these are publically available so similar to these modules poison HTTP or FS module these are built a new module in no chairs now these thirdparty modules can be included in your project music mode package manager or entity so let's go to the NPM website and let's see um what's there so whenever you will sort NPM on a browser you will see the first result here will be you PHAs comm just click this link and game is calm and in here find the movie package modules or node modules so which you can use in your project so approximately there around I am not read that there are around 280,000 are available in this song you know robotics move all the three right so you can search this module for example if you know the package name for example this kind of routing can be done using express mode right to insult your Express here you can see the intelligence here and you know you can see various options on yesterday so just search for example Express and search for it and the first option here comes is expressed red flash but doing one extra splash media point expert so you can just search for express once again and here you can see the first option here is expert bytes to click the thing and here you can see documentation for that module so it's a fast uh no because it a web framework you know Express to do exactly we are trying to do in our stop for example the routing stop and you know let's pull API if you want to create you can do it using Express on the right hand side you can see the stats also so stats here you can see over 300,000 installs or downloads of this module are done previously for the yesterday locksmith or 300,000 and this month itself have 1.8 million I think downloads here so from these download you can already recognize that this module is wave officer this is the one one of the most popular among youth in Georgia I can tell you right now how you can install this Express or any other module although part 280 house modules are in water so you can do it using come online and let's open the command line in order to see how we can install it so first of all you need to in your directory wherever your project is and then you can use NPM command to install so whenever you have installed the load course the second video I have shown your hobby install node with that and p.m. module has also gone so you can just know the woman of this by just writing NP minus V in order to install this Express module we just need to do NPM install just write NPM install Express right which is exactly you know documented here also so installation and BM install Express right so whenever you find a module consolation procedure of this module will be given here the documentation of this module is given here and QuickStart also so you can come to this website to know more about right so I have just given the install Express and I'm just press ENTER which is going to take some time to download and install this Express model and you can also hear there will be a directory created the name board under school modules so this module is downloaded in our code now there is a folder called more the modules and created here and when you open this someone modules can see many modules are downloaded folder but we're in package we have installed in this Express module and all the other modules which are coming with the next first module are its dependencies okay so for example movie Bob or destroy or any other module which is installed with this Express module is its dependency so it will also be stored with press for example ok now this is the way to install any module in your project but this is not the preferred video for doing it we will do it using a package manager including her you know NPM command which is the standard command which is like this and yep in it and this we will see in the next video but for now I want to uninstall this model so don't worry if you want to uninstall a module also you can do it moving and p.m. come on so let's uninstall and that command is really simple and game uninstalling setup for install you just need to write move your hands install and the package name and then press Enter is going to uninstall the modules so you can see the process is going on and then whenever go to your node models folder there is only a start then call the left here and every other modules is deleted because we have installed this Express module right so using these modules is also simpler than just ah you know add like this so far HDPE require then once your model is installed you can just give the me more money right so this is just the introduction of four more chairs ah the standard way of using NPM is moving package job Jason file which is kind of a you know a file which have all the records whatever modules are there in your project and the disk and given to other developers also can use this project that's your packet of chips file and then we can install the modules and you know which version of you know anymore installed in this package dot Jason pipe so this is exactly we are going to see in the next you house package got chase file create and maintain your coaching so this was the brief introduction about engine and you will see how we can use and be a master thirdparty move you from the next PD hello guys welcome to the next video on node.js to dole for beginners in this video I'm going to show you how you can create your project using NPM from scratch and you will also see what is packaged of Jason and why it's required so let's get start it and I want to create a new project so right now we have been was working on this hello project and still we are in this project using Visual Studio code right so I want to change this project or I want to create a new project and for example this project is in my samples folder right so in the samples folder I am going to create one more directory so I am going to open the command line and right now I'm in the hello folder which is this one right so I will go one folder back you can also use this folder Explorer to the painting which I'm going to do from command line so right now I'm in samples folder which is this one right so I'm going to create a directory for example so I will just give NK dir command and the name of the type for example first NPM so because we are in creating our first NPM you know the project or the project using NPM or first air towards it using NPM so I am going to name it as force and p.m. right and I will just press Enter which is going to create this folder here right first NPM right now this is a blank folder and the way you can open this folder in envisions to be code is just go to the file open folder and then just choose this folder which is right now blank and which is totally fine okay it's going to open this folder in your Visual Studio code now in order to initialize your project and you know configure your project give the name version and the you know other properties to your project you can give the command called NPM in it okay you just kind of initialize your closing okay just give NPM in it and then press Enter which is going to ask you some questions so first of all right now I'm in samples folder which I don't want I want to go to the first NPM folder so I'm going to just cancel this NPM command and let me go to the first of all this first NPM folder right now now I'm in the fourth NPM folder I was in samples folder so I changes to force 10 p.m. right now I'm going to kill everything for now and then I will give NPM init come on okay so just go inside your folder in which you want to create your project and give be a minute command and press the press enter which is going to ask you some questions and the first question is the project name I'm going to leave it as default super enter then the version this is the default version then whenever you make a major change to your project you can change the version also but in the later stages right so I'm going to leave it as default and then press Enter this is a description to your project we can give any description to your project for example first NPM project for example and then press ENTER and then it's going to ask the entry point and this will be the entry point javascript file for your project so index dot JS file so I'm going to leave it as default and then it's going to also ask you if you have any test commands or not I don't have any test because I haven't even written any code yet so I will leave it as default and press Enter and if you have any git repository it's going to ask you I don't have any so I'm going to just pop it here you can give any keywords to your project for example both NPM or any keywords related to your project right and then press enter and then the author name you can give your name I'm going to just say me and then the license I'm going to leave it as default and then it's going to confirm that if you want to you know give me the information these are the information which will be saved in your project and if you are sure you can just press yes and then press enter ok so you can see there is a package dot JSON file created inside your folder so let's open this package dot JSON file and here whatever information you have given the in it come on it's all there so it's a JSON file the name of your project is first IBM the version is 1.0.0 which is the default version and we have also given the description this is the entry point so this file will be the main file which you know NPM is going to speak so let's create this file first of all so I'm going to just right click here create new index dot JSP my entry point now if you have some test you can give some test commands here but right now we don't have any tests so we are skipping it we have given leave to keyword here but you can give your keywords and then you have the author name and license right now in the last video we have talks about the Express module so whenever you want to install any package or load module in your project what you do is you can just use npm install right so npm install and then the name of your package so for example Express but this time instead of pressing enter you just need to just give a save for example so just give save or same here and what this command is going to do is or what this save flag is going to do is it's going to add this Express to your package dog chasing so let's give this come on and let's see what happens so I am going to press ENTER with this saved flag right so it's going to install this Express package and we will see this node modules directory created and in your package dot jason you can see our element is added which is the expert and here is the version ox of express which is installed right so whenever you give this command for example any come install command which this favor flag is going to add it your package dot jason with the package install and the version of package installed right so now whenever you write some code in your project and whenever you want to give it to your colleague to run it you can just give this kind of project and you give your project without you know these are npm module installed right because these directories are so many directories and they take lots and lots of memory so the ideal practice is to give your project file with your package or jason without node modules folder and whenever somebody of the use npm install command this whatever is listed here is automatically will be installed in your you know project so let's say i want to uninstall this express now so i'm going to uninstall it and press enter they're going to uninstall the express module and you will see you every module will be deleted from the node modules folder but you can observe that by giving this uninstall command this dependency is not deleted here right so if this dependency is there and now so you can see right now node modules doesn't have any Express model because we have uninstalled it and this kind of you know project give it to your colleague and what he does is this colleague has just run npm install without any package name so he can just do npm install and they say npm install is going to go through your package dot JSON file i will see which package is there in your package dot JSON for example express package and the version of package is there in your Jason file package or Jason file so it's going to install automatically this package in your project so let's get NPR installed without any package name and it's going to go through your package dot jason it's automatically going to install in some moment you are going to see here Express will be installed so you can see Express is installed in your project just with this dependency right so this is my package George Jason is important so whenever you want to distribute your project the package George Jason is the for example entry point for NPM to recognize which modules are there in your project which packages are there and which version of packages are installed what are the test commands what is the entry point for your project and some description of your project and even the version right so you can see this is the expression which is installed and for example whenever you develop your project and somebody want to install your you know project as a module this will be the version which is going to be installed so this is a version same as this version right now you can go to node modules so go inside as it's more modules and we are going to go inside this Express folder here inside node module and you can see this expressed module will also have its own package of JSON file so let's open this package or JSON file and you can see there are a bunch of elements here when you go down you can see you can add to your package on different contributors and then you can see the dependencies of this express in accept for example so you can see accept modules is installed then array and this module is installed then this content description content type so one by one every module will be or whatever is listed as a dependency in the packaged on chasing pile okay so this is the importance of packaged on Jason we can go down and yes there is one element called dev dependencies which we are going to talk about in later and you can see many on compositional elements here so whenever you want to distribute your project you can see this is MIT license for express module and the maintenance of this modules with the name and the email ID of the those persons who are maintaining this money and there are some scripts so if you want to test your you know Express module they fail the command to test right so whenever we will write some more text for our module we will write this kind of command to our package dot JSON file also okay hello guys welcome to the next video on node.js tutorial for beginners in this video I'm going to show you how you can install and download node modules globally on your operating system right so till now what we have seen is how to you know install node modules locally so whenever you install a module a directory called node module is created and then your you know module is installed inside this directory right but if you want to use the node module in different project the same node module you want to use in different projects then you need to install a node module flow believe this is not a good practice unless it's you know a module which helps you to develop your you know project but sometimes some modules when you install globally helps you in the development and one such module is node mall right so first of all I am going to open the terminal inside my the studio ports so I will just write top the integrated terminal and it's going to open it and I'm going to run my app first of all so I will just write a note app dot Cheers right and this is the app we were making in the previous videos for routing yeah different requests okay so what is known one first of all so note one you can go to the NPM website and search for node 1 and node 1 allows you to you know develop your project in such a way that whenever you run your project with node Mon command after installing mode Mon it'll watch your file so it whenever you change your stuff in your project is going to you know watch for the changes and as soon as you press the Save button it's going to restart your server so right now what we do is when we make some changes for example I add a comma here I need to stop my server from here and save my code and we start myself in order to you know let the changes happen right but in the development this can be really I mean tiring to restart and stop and restart your server so node Mon whenever you install it globally will help you to watch your files if you change your file is going to restart the node server automatically so first of all let's see how we can install node Mon ok so the command to install a node 1 is npm install so just write npm install and then node mall and then give up flag g now flag g stands for global flag so whatever command or whatever module will you install with G flag it will be installed globally so it's not going to installed in your node module folder inside your you know project it's not going to install here but it's going to install globally on your operating system so whenever you want to use this node Mon module from other project also you can use it right so it's not going to be installed locally but globally so just keep this come on NPM install node Mon tree and press Enter which is going to install this node Mon if you are on Linux operating system you may have to give sudo command sudo access to install this because the directory where this global module will be installed is protected for the root user right so if you are on Linux operating system just run this command with sudo okay so one this you know module is installed you can see here it's not installed here nothing is here in my node modules right but it's installed at a specific location on Windows this location is this one so I'm going to just paste this command in the description so just copy this command and open your folder Explorer and then just paste this command like this okay in here and then press Enter it will be you know showing you the location where your global module is install so you can see node 1 is already there I have other global module called node inspector which I have already previously installed right so this is the global location your user name and in app data roaming there will be a folder called NPM slash node modules so this is a global location of node modules and every project you will make will be able to see this module right so I am going to give this command in the description so you can also see this okay so once the node one is you know installed you can see in the documentation also you can install it globally like this then you just need to write node one and the name of your app dot JS file so just write instead of node just write node Mon here okay so let me just clear it a little bit so you can see it clearly so here we are going to give node Mon command instead of node give node Mon this command node Mon and then the app dot JS file name so AB dot Cheers right and then press enter and you can see your server on the browser which we have made so we are right now in the home page and for example I want to change this routing instead of about us I want to use for example instead of about I want to just write about us here so I want to show the about page on this URL about us okay I'm going to save it and as soon as I save it you can see the node Mon server sees that I have saved a file so it has restarted the server again so you can see we starting due to changes starting node AB dot Cheers right so the server is restarted whenever I press the Save button right or for example I will just go here file and I will just press save right and you can see it's restart when I you know save my code ok and then I can go to my browser and when I just say about here instead of this about and it's going to give me 4 0 4 because I have already changed the URL to about us so I will just give up out of this it should be about up up I have given here right so I will just say about up and I can see the about page right ideally it should be like about us and I will just say save it's going to restart and this time when i refresh it now it shows me a four zero four and when I say about us it gives me about page right so this makes your development really easy when ever you want to you know frequently change your code on your project right so in this way you can install global modules on your operating system and in this way you can use known one with your node GS server and I would like of the WebEx video or no just at all for beginners and from this video we will start learning Express j/s x plus GS is one of the most popular and widely used web framework in node.js development and expressjs allows you to handle routing servers and iOS stuff really easily so let's dive into the world of Express GS so what I have done is I have created this empty folder called Express on the score test and first of all I'm going to you know initialize a empty project inside this expressed test folder so I will just CD to this folder wherever this folder is and then I am going to just use NPM in it to initialize the project right so just write npm init which is going to initialize my little champion project and I am going to leave everything as the default time I am going to press ENTER for everything it is which is going to create this package dot JSON for us which is really basic right everything is default now let's create this index dot gif file because we have defined here in the package giorgia from that index of GS is our main file right I can do it from here or I can even do it from the terminal all so now the next thing we are going to do is we are going to install NPM module for experts right so I'm going to just open the terminal once again and I will just write and game install Express right you already know this command right and I'm going to also add the flag save so it will be saved in my package dog chasing file right so I'm going to press ENTER and wait for the installation for Dantean module and in some times you will also see this dependency added to our package dot jason as well as the npm module created here the folder named MDM bodies right so you can see Express is installed now right so now let's start writing some code so to start and xpress we need to you know require this Express module so you can just write bar and then press and then Squier and you can require the express mobile right like this so this is really basic and to create an Express app you need call this expressed method which is going to give you the access to the instance which you can use to listen on any code right so I'm going to just create an app variable this is the common convention to you know use this name for Express app and then you just take this variable and call a function called Express comment okay so this app you know instance is going to allow you to create and listen on some port so you can just use app dot listen and then you can listen on any port for example I want to listen on or 3,000 it's same like using HTTP module right and then I'm going to create an anonymous function so let's create a anonymous function here and then the curly brackets and in here I can console.log something so just console dot log and let's say our server is live on port or 3000 right and then cable semicolon here and save your code and let's run our server so I'm going to just write node and then index table chairs and then press Enter is going to run our server and if you remember we have installed the node moon right so we can use node 1 here but for the first time let's just use node here and then I'm going to refresh this page and it starts listening now if you can see here it says cannot get now get is a default HTTP method the Express is going to use right now there can be 4 type of HTTP method which can be used for requesting from the client to the server and that are for example I'm going to just comment here and I'm going to just write the name of the methods right the first method is get second method is post third method is put and the fourth HTTP method is delete right so express is capable of using or doing everything get post post and delete obviously and the way we can you do it using routing is you can use you know the app instance and it's going to allow you or allow us to use a different kind of macro and the name itself can be used to you know do gulping but for this video because it's the introductions we are going to just use the get HTTP method using this app instance and later we are going to be the much complex stuff like post 410 delete request so just write up and then the name of the method for example will get and then we provide basic routing for example the basic routing is our home page for example and then we will use a anonymous function which will allow us to send us the response right so first argument here will be the request and second argument is the response so I will just say little I and then I'm going to just complete this anonymous function like this right and from here I can just use reply argument come here and then dot send and then send any our reply to the client which is requesting this get request right so this is the body you are sending so I am just going to say this is home page okay and in the same way we can you know provide multiple routes as we have done with HTTP module so let's create some more routing so the next route thing I want to create here is about and the next routing is for example for the contact and now I'm going to just write so here instead of home about and here contact okay and save and rerun my project this time I'm going to use node man so just write node Mon because the in the last video we have installed node one right and then index dot chase so we will save the time in restarting with all right and then I'm going to refresh here which is going to give me the supply which says this is homepage and let's request this IP address and about route and then it says this is about page and then contact page and now it says contact page right so everything is working and when we give any you know faulty routing it says cannot get this kind of request right so let's summarize what we have done so what we have done in this code we have installed first of all Express NPM module and then we have required this NPM module and then using this express method we have created an instance called app which can we can use to call different methods like get post put or delete and we can listen on any port using the list method and the name of the port or the number of the port which you want to on which you want to listen on right now if you can see here you may ask that we haven't provided any content typed here in the reply so the answer for this question is Express is intelligent enough to you know recognize the content type which is you know replied as a response to the client so if you pass string here Express is intelligent enough to recognize that this is a string so you don't need to provide the explicit content type like plain text or something like this with this reply right so in this way you have saved some lines of code so this was the brief introduction to experts and in the further videos we will learn more functionality about Express hello guys welcome to the next video on node.js toll for beginners and in this video we will learn how we can pass parameters and parse parameters in the URL routes using Express so in the last video we have seen how we can you know pass these kind of rules out and you know whenever you ask or whenever you give this kind of URL for example your IP address and the port and then whatever route you give according to this you know you see the response right but for example you want to give the dynamic route so for example you have some database right now we don't have database but in the future you will be using a database and you wanted to you know query the database so you want to want to pass some parameter for example you have the student database and you want the student data using his ID or his roll number or any other thing for example right so how we can pass parameters in the URL you will see in this video using it Express so what we do is we are going to I'm just going to copy the code which I've written the last video for this so just copy and paste the same code but instead of this route for example you want a student route so I'm just going to write students here and then we want to get the student according to the ID which is given in the URL okay so whenever you want to pass any parameter you give this colum before the parameter name okay so just gave the this kind of and then any you know ID or name whatever you want to give so you can give for example name here or surname or ate anything whatever parameter you want to pass and we'll be able to parse that parameter and then according to this we can give the response so for example we want to just pass this ID one which is passed using the URL route okay so in the response for example I am going to write that you have quested to see the student ID and then I am going to just give the ID now in order to pass this ID we need to take this request and then dot param and then the name of the ID for example ID itself okay and let's say the code or my node is running using the node one so I don't need to rerun it and I'm going to just go to the browser and Here I am going to just give student and then the student ID for example 12 right and you can see I think it's too dense not student so I must give here students route and you can see it gives me the response you have requested to see the student ID 12 because I have passed 12 here right I can pass any number here and it will give me that number right so once again any number and I can see this number here right in the same way I can pass the name also so instead of ID I can use name and here also name and here also name right so name name and must write name here and must save my code and then refresh my page using some name so for example mark and then refresh and now it says you are requested to see student named mark now if you will be using some kind of a database then you can you know take this name which is passed using the URL and then you can query the database on the basis of this name and then you can give your response so we will take a little example for example we have a Jason you know data so I'm going to just write for you improve our students and then this is adjacent so we have a student data Jason and then I am going to just write one and one is so roll number one or ID one so ID one is Mark for example then I D 2 is Tom and then ID 3 is for example John ok and then I'm going to just replace here name with ID and here also ID and here also ID right but we want to you know reply on the basis of the ID requested we want to gave the name right so here I will write name and the way you can do this is you can just take the students because it's it's a kind of an associative array you can take the student and then using square bracket you can you know get the value on the basis of key passed here right so I'm going to save it and then I'm going to refresh it and I'm going to just give the ID 1 for exam right it's going to give me mark right because in our Jason we have the name mark as ID 1 right for example 2 it gives me Tom and then for example right 3 it gives me John right so in this way you can pass parameters as a URL routing in Express and that's it for this video in the next video and to give you some more insights about Express so hey guys welcome to the next video on node.js troll for beginners and in this video we will talk about templating engines so so far what we have learned is how we can pass these kind of parameters to the client using express chairs so before starting templating engines I wanted to show you how we can you know transfer or show the HTML file on the browser using express chair so let's get started with that and then we will start with the templating engines so I have these two files about dot HTML and HTML or index dot HTML right so these two HTML files I have so what I am going to do is in the root flout what I want to do is I want to send the index dot HTML file right so the way you do it is you take this reply argument and then call a method called send file ok so just call a method called send file and then the name of the file which you want to send so because we are in the current directory so I am going to take the their name plus the file name so the file name I want to send is index dot HTML right in the same way you can just send the contact dot HTML or above dot HTML which we have here right so here I want to send about dot HTML and I'm going to save my code and my Norman is already running so I don't need to rerun it once again and I'm going to open my browser and I am going to refresh this and it says this doesn't exist yeah I forgot to give the four / here so I just need to give forward slash and once again I will save and I will refresh the page once again and now it says home page and let's call the about page also so just write about essays about page so this is how you can send any file to the browser using the send file method right now this is how you can send the static files but for example you want to send some parameters with the HTML file or you want to inject some parameter in your HTML file then what will you do so for that we use the templating engines and there are many engines which you can use with Express gf for example Jade or Chaz or some other engines like underscore or toffee but what we are going to use is the templating engine called ejs or embedded Jas so let's get started with ejs so what I am going to do is first of all I am going to open the website on which we can find more documentation on ejs or embedded jf so just open this website which is called embedded JS comm whose short form is ejs right and then you will scroll down you will see how you can use this EGS with your HTML and how you can embed the parameters in your HTML text or file right so for that first of all we need to add a package EGS in our project so ejs is a node package so i am going to first of all install egx package using NPM so let me clear the terminal and I will just write NPM install and I will just give the flag save also so it will be added to our package dot JSON file also and then just by the ejs ok and then press enter which is going to add this package to our project and once it's done you will be able to see this EGS is added to your package dot jason and you will also see EGF is added to your node modules also right so I'm going to just close this and close the HTML files and now the way you you know add this EGS or to use this EGF we need to add the view engine property of you need to set the view engine property to your express app so you take this app variable and then call a method call set and then we will set a property which is called view engine so just give single code and just write view engine and the next property is the name of the engine so in this case we are using ejs right so the property name is new engine and the value is ejs okay now we can use EGF in our project now by default when Express sees that the engine view engine is EDF it looks in the directory called the view ok by default it is going to look in a directory called view for the ejs files so we are going to make a directory called view so just create a directory and name it as view and inside this directory all our you know EGS files will go right so what we want is for example in the last video we have created this route for students and whenever some ID is you know passed for the student then his name is return to the for example client or to the browser right so we are going to take the same route but this time what we are going to do is we are going to you know transfer this data to the HTML file and inject in this parameter to the HTML file and then present it to the client for example okay so what I am going to do is I am going to just create a new file inside my view folder so this is my view folder and I'm going to create a student file because there is a student route so I am going to create a students dot ejs while okay so it's not going to be a HTML file but it is going to be a ejs file right but the content which you will give inside this EGS file will be the same as your normal HTML file have so for example I am going to just copy this code oh my is index dot HTML which doesn't have much it just have the body of HTML page and the main h1 tag right so I'm just going to copy and then in the student or ejs file I am going to just paste this code right now the way EGS work is we need to go to index ought GF and instead of saw using this kind of code reply or re P dot sin instead of this what we are going to do is we are going to just write re p dot render okay so here we are going to use re P dot render and then it takes two parameters so the first parameter here will be the name of your view file so in this case or view file name is students rights you can see here students dot ejs so we can just pass the you file name which is student and the extension you don't need to give it here okay just the name of the file and the second parameter it takes is the object now this object is at evil you pair so the first is the key for example we want to send the student name so I'm going to just name the key as name itself because it's a student name right and the value for it is the value which we have here so in the last video we had at this kind of you know small object and this has the key value pair so for example we requested student 1 then it's going to give us the result by returning its name student's name right so this is how you can get the student name by ID so I'm going to pass it here okay and then we don't need this thing here because you are already sending our you know parameter using this render method and to the student file now the way you add this name of parameter to your ejs file is so I'm going to go to h1 tag here and if you have seen inside in the embedded J Escom you do it something like this so you take this angle bracket start your angle bracket then this mod sine then equals and then the parameter name and then end with mod and then closing angle bracket so I can just copy this from here and I will do the same here so in your h1 tag or any tag for example it's a paragraph tag or it's any other h2 tag or other tags you can do the same so just use a tag and inside your tag just start angle bracket mod equals and then the parameter names Permenter name is name itself right so we want to pass in our Aegis fide this parameter name right so that's why I have written name here okay and then I'm going to just say everything and I'm going to rerun my app so I'm going to just use node Mon dot index dot jf and then I'm going to go to my browser and in here I am going to ask for the students file because here we have the students dot ejs right and we will give the student route here and then the ID of the students so ID of the student for example I want to give one here right and then press enter and it gives me some errors which I am going to see what the error is so the error which I can see here is it says fail to look up view students in views directory and I named my directly as view not views so this is the error you will see if you do anything wrong and by the message it looks like my directory name view is wrong we need to name it as views okay so my directory name views must be I am going to rename it as muse instead of view okay and then I'm going to refresh my page once again and hopefully this time I can see this message mark because student ID one is for mark right so we can just edit our student or EJ's file for example you have requested the student name name and then you give the student name and for for example I want to add the ID also I want to show the ID on my student a HTML file also so I will just add the parameter tag here and I will say ID and then the colon and then I will use the same method like this here and here I will just rename it as ID and I need to pass this ID parameter from here right so let's go to the index dot JS file and then here in the second element in the JSON you can just add ID and then just pass this ID there so the ID will be request dot parents dot ID right so just give colon here and then pass your ID here okay so first element of the JSON or object is name and second element of the JSON object is ID right in the same way you can add multiple object in your second parameters right so just save your code and then rerun it once again so I am going to just ask for the student one once again now it says you have a requested the student named mark and the ID is one for example I will just add two here and press Enter this time I have Tom and then the ID is two and once again for example for three then the song name and ID is three here okay so this is just the starting for the templating engine in the future videos we will see some more concepts on ejf alright welcome to the next video on node.js tutorial for beginners in the last video we have seen how we can use ejs with Express and node chest now in this video I'm going to give you some more information about EGF and I'm going to show you how we can use some control flows with your EGF templating engine and let's see how we can use it for example you want to use a for loop which we normally use on the client site using for loop we can literally any re or something like that how you can use with the help of EGS let's see so for that I'm going to modify this data structure which we have so we have the students Jason and earlier I have created something like that that it's like a key value pair but in a more complex application a student can have a name surname age or many other things right if you are querying with in the database it can have many you know data data columns and then I will you know try to emulate that thing with this Jason so what I'm going to do now is I'm going to just modify this array like this and for the student ID one I'm going to first of all add the students name here and then I'm going to add the students name so for example mark and then for example let's say what subject he has taken so I'm going to just write subjects here and then this was going to be an array okay so re you can do with square brackets and let's say this student is of some computer class or programming class so he has taken C++ Java for example and let's say he has taken see also and same we are going to do with other two students so instead of this I'm just going to copy and paste this code here and here also okay and then the student name was Tom here and the student name for the third ID is for example John Wright and the penguin language let's change the programming language so for example second student like csharp Python and let's say he likes some database MySQL and called for example he likes a Java Script and he likes so for example let's you light database and he likes itself ok so we have this kind of four data structure now for the students right now this we want to show on our client how we can do it so for that in the last video we have created this kind of you know render method and we have injected this kind of JSON there right now because we have modified our JSON data structure so here we will take the student Jason and then we will first of all find its ID so this will be this one and then dot mome is going to give you the name of the student okay and then ID will be same and let's say we want to add one more field which is subjects okay so I'm just going to copy here this it here and then subjects how we can extract the subjects let's see so I'm just going to just give the line break here and subjects will be the same as the name but instead of subjects instead of name we will just replace the name with the subject so you can do something like this now this is going to be sent as an array to the client so the client EGS file has to you know pass it or iterate over this array and then you know show the output right so here what I'm going to do is I'm going to just add a h1 tag and then I'm going to just right here for example subjects and then I'm going to add unordered list or ordered list whatever you want so for example I am going to add a unordered left here so let's add an unordered list so ul for unordered list and then we can inject a for example some JavaScript code for parsing this subjects array right so what we are going to do is we are going to write the name of the array so this time the element name is subject we want to pass this element right so we will take this element subjects and then we will iterate over it so there are many ways of iterating over array in JavaScript we are going to just use for each for example okay so just write for each and then we will just write a callback function so just write the function and then just write for example item and then just we will iterate over all the subjects and we will print it okay and don't forget to give the ending bracket and the semicolon here now the way you you know show this using ejf is the same way you used in the last video so you use this starting angle bracket and then mod symbol but for the JavaScript it won't use this kind of equals for the code right so you just need to use the for example this starting and go back at a mod and in the end the mod and then closing angle bracket right and then you need to do the same here also with the next line like this okay so you don't need to use equals here whenever you are using for example a JavaScript function and then you can normally you know add our HTML tag once again so for example this is a list item for us so I'm going to just write a list item and then we are going to just print that item so however you can now print it we just need to print the item because this item contains our you know data for example subject right so the way you do it using EGF you just need to do this angle bracket percentage equals as we have done in the last video like this right and then this would be the item right so all the items will be iterated so let's save our code and let's run it and let's see what's the result so I'm going to ask for the student one so student and then one and then refresh the page so we got the error and let's see what the error is so it says syntax unexpected token than this Colly bracket so we need to search for this kind of bracket and let's see where it is so in our function yeah so I have closed this anonymous function here become need this extra bracket here because we are closing this bracket for this function here right and this curly break is this is with this one and this is the item right there was a extra bracket here so that's why Tanner was coming let's refresh the page once again and now we see the output right let's see the output for student 2 and now he has different subjects right and let's see it output first student 3 and he has the different subjects right so in this way you can use arrays and JavaScript code with ejs so I hope you have enjoyed this video please recommend subscribe and bye for now