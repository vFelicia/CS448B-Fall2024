hey guys welcome to the next video on nest js tutorial for beginners in the previous videos we have seen how we can create our nest js project and how we can add the end points uh to our nest js framework now in this video we are going to discuss about how we can add the mongodb support to our nest js api so we are going to start with the installation of the required packages so i'm going to just write npm i hyphen hyphen save and then you need to add these two packages which is nest js forward slash mongoose and the mongoose package itself so mongoose okay and then press enter now once you are done with the installation of the packages we are going to go to the main app.module.ps so this is the app.module.ts and here we are going to first of all import some packages from the nest mongoose package and which module we want here we want to uh import the mongoose module from the nest js mongoose package okay and once you have this you can use this mongoose module in order to connect to your mongodb database so here you can see under modules we have imported already our car module which we have created previously and now we can also add the support for the mongoose module so just copy this mongoose module dot in mongoose module you have a few methods so we are going to use this method which is called for root which is going to take your mongodb uri as an argument so if you are familiar with mongoose or mongodb we can connect to our database using this uris so here as the uri i'm going to just write mongodb and then colon forward forward slash localhost because i will be using my uh mongodb which is running on my uh local host and then the name of your database so let's name our database as a car manager okay also you can add some of the options which mongoose takes at the time of the connection but we are going to add these later if we require them okay now what i uh i'm using is i'm using the docker instance of mongodb you can install mongodb locally or if you are running a mongodb on a server you can provide the uri of that server also right so for now i will be using the docker to use on my mac machine and the command for this is docker run hyphen p this is the port mapping of on which we are going to listen using the local host and this will be the location where we are going to save our data in our local machine using the docker right so let's run this you can also write the hyphen d here to run this mongodb container in the detached mode but i will run it as a separate instance so you can see it's running and now i'm going to open a new terminal and i will just write docker ps here and you can see this mongodb instance is already running so i'm going to just write docker exact hyphen i t and the name of the container or container id also you can give and then space bash so using this command we are just opening the bash terminal inside the container right now i can just give the command in order to connect to my mongodb and here i can just say show dbs and it's going to show me the list of all the databases so right now it has these three databases which are created by default and when we are going to run our app it's going to create this uh database also okay so now we have our database connection now we are going to create the schema for our mongodb so for that i can create a separate file inside this car directory or i will create a folder let's say and i will name it as schemas and inside the schemas folder i will add all my schemas so the first schema will be car schema dot ts for example and here i will first of all import the mongoose package so import asterix as mongoose from mongoose right so because we want to create the db uh schema using mongoose we will import this package and then we are going to just create the schema so i'm going to just write export then const and then the name of my schema will be let's say car schema and we are going to create a new schema so i'm going to just write new mongoose dot uh schema and then we are going to uh add our schema inside these parenthesis so i'm going to just add these curly brackets and then we can add our schema here so what we have in our schema so in our schema we have we can see the dto so we are going to use the same attributes inside our schema so we can just copy and paste them here and for now i'm going to remove this read only attribute from here and because it's a json object we need to replace this semicolon by the commas right we can also fix all the auto fixable problems and this will be capital number because we are creating the db schema using mongoose right so you will use these data types now i can also add the car interface which i will use for the mongodb model or mongoose model so let's uh create the interfaces folder inside our car uh directory so i'm going to just write interfaces and then press enter which is going to just create this interfaces uh folder and inside the interfaces folder i'm going to just write car dot interface dot ts here i'm going to import the documents from the mongoose package so let's add a mongoose package and then we will add this document from mongoose and then i'm going to create an interface called icar for example so let's name it as i car which will extend so extends from document and here we can add the interface types which are id brand color and model same as our dto okay so once we have our uh interface and schema we can go to our services card.services.ts file and we are not going to uh use this logic anymore we will add the mongodb logic but first of all we need to add our schema and our interface right so let's add those things so i'm going to just import so first of all i'm going to import the model from the mongoose package and then i'm going to import the nest js mongoose package right so let me just add this next js mongoose package and from here i'm going to import the inject model okay and the next thing we want to import is the interface which we have created so i'm going to just import that interface and this will be the car interface and what we need to uh import icar and also let's import the dto because we are going to use that dto so let's import that which is called car dto and we need to import the car dto from there now in the constructor of our service so let's first of all delete all this logic which we have created in the previous video when we have seen how we can add the logic for all these uh method which are put car by id delete car by id post and then get cards right so let's remove all the logic from here and also we don't need this cars mock data so we can just remove that also so first of all we are going to add the constructor here and in the constructor in order to import the mongodb model which we have created using the schema we need to just add this decorator which is inject model and then inside these brackets we need to give the schema name which is car in our case i think so we are going to just write car here and then we are going to just write private read only the name of our model will be car model for example and the type of this uh model will be the model which we have imported from the mongoose and then we can just write the i car here okay and also we need to add these curly brackets so this is how you can inject this car model inside your service and then we can implement car get cars method logic using this model so i'm going to just write const curves for example and then we can just write this dot car model which we have just injected and then we can use different methods so we want to find out all the cars so we can just write find and then we can just write exact and it's going to give us uh the list of all the cars and then we can just return this card so let's return this now of course you can again add the error handling here so here if the car is not found so if there is no cars and then also we can check if the first element is there inside our cars array otherwise it's not an array right so we can just check that and if we don't find this then we need to throw an error so we can just write through new uh http exception right and we can just uh give the first argument which is uh not uh found and the second argument will be 404 which is the status code right so this is how you can also add the error handling for your get cars now in the post car method what we want to do we want to post the or save our car object so here we are going to just write const car is equal to await because we are using mongoose using async await so we need to add a sink here and then a weight here and then this dot car model dot whatever object we want to pass here so we want to pass the car so we have created the new car object and now we just need to save this data so i can just write return car dot save and this is going to save this data and here as an argument we can just write a new car because the name here is conflicting right so i'm going to just write new car here and then pass this parameter here so this conflict can be solved also i forgot to add a sink away here in the get cars so i'm going to just add that and then it's going to work now for the get car by id also we're going to use this kind of code so let's uh copy this code from here and also add a sink here and instead of using find we will just use a finder one method we just need to change uh find to find one because we want to find on the basis of the id so using this curly bracket i will just use id here and it's going to find the data based on this id because we are just searching for only one data so it will not be an array so we can use other logic for that which is like this if there is no car found then we can throw an error otherwise we will return the result you can use the same code for delete car by id we just need to add a sync here and instead of find one we use delete one delete one right how do we know that the car is deleted we know this by using car dot delete count so car dot delete count if this delete count is equal to 0 that means our data is not deleted then we can throw the not found error otherwise we can return the car right and the last method will be once again put carbide so a sink here once again we can use the same logic we just need to change this method here so let's use this logic instead of using find one we will just use find one and update method so just right find one and update and we want to find the result by id which is ok and the second argument here will be what we want to update so we want to update a single property inside that object right so based upon the property name we will be able to change it so i'm going to just add this curly bracket and then i'm going to add the square bracket and based upon the property name i want to change the value from here let me fix all the eslint errors and now we have all the methods also if you want to add the type to your car parameter here to the postcard argument you can add the type to your car right also we can add the promise type here also so i'm going to just write promise and the type here will be car dto but it will be an array of card dto right and in the get cards by id we are returning only the car d2 which is the same single uh result right so in car get cars we are returning the array of car dto type and in the get car by id we are returning a car same you can do for a delete car by id and you can do the same for the put car by id now there is one last step which is remaining which we want to do in the car.module.ts file so go to the car.module.ts file and here we are going to import some nest packages and we are going to first of all import the nest js mongoose and from the nesgus mongoose we want to import a module called mongoose module and also we need to import our schema right so we will just go to our schemas and import our mongodb schema from there so car schema and then we can just import this and and now we can import our mongodb schema inside our car module so you can just add imports and using this square bracket you can add the mongoose module and mongoose module and then inside mongoose module you need to use the for feature method and then as the parameter for this for feature we need to add the parameters as an array so the first element here will be the name say name is a car in our case and the second argument here will be the schema so schema is the schema which we have imported which is card schema and also add the comma here and we can just resolve all eslint problems hopefully it's going to work so let's run our code and let's see if everything works or not so i'm going to just write npm start and let's see if it works or not right now our app is started we can go to our client also and see if there is any database created or not so right now till now until the start of the app there is nothing created here so let's uh use our uh postman to post something so i'm going to just post one other car with the id 2 and brand color and model let's send this request and you can see that now we have added this into our database and we also get the result with the id and hyphen hyphen v also so now this data is added to our database we can check it so once again i will just write show dbs now i can see that this database is created so i can use use car managers and then we can just write show collections to see all the collections we only have one collection which is cars which is okay and then we can write db dot our collection name which is cars dot find which is going to show you all the elements of your collection right so you can see there is one data which is added to our database which is the brand vw color red and model polo which we have added using this post request let's add one more element with id1 let's say brand will be bmw and the color will be something and the model will be bmw x and now i'm going to just send this request and you can see it's also added and now i can just use this find and now we can see there are two documents inside our mongodb collection so the put method is working let's see if get cars method is going to work so it's going to give us a list of all the cars and it works you can see we are getting the list of all the cars now we want to use the get car by id so i want to send this request which is for the car with the id one and it's going to give me the result that's working let's uh query for the car with the id2 it also works now i want to do some put method so let's say i want to change the property name color in the car id 2 with the blue color right now the car id to have the color red right so let's send this request and you can see it's working or not working so still the color is red and we can also query here and here the color is changed to blue okay so this edit is working but somehow the result here is red because we are just sending let's go to the service because we are just sending our car which is found right so you can see our method name here is find one so it's going to find the uh document by id so it has found the document by id and return us the document which will be changed and then it will update the property okay so this is also working as expected right so inside our database its uh color is blue which is okay and let's use the delete method to delete this document so i want to delete the document with the id 2. let's send this request and you can see deleted count is equal to 1 that means it's deleted and that means when we go and query our database you can see we have only one document here okay so delete is also working this one little annoying thing which is you can see when we query for our data the default id which is created is also coming and this hyphen hyphen v is also coming so let's say we want to filter out these two things because for us these four elements are important and this is the unwanted data which is coming from the mongodb right so for this we can create the projections so in the car service go at the top and then we are going to just write const car projection and then is equal to curly bracket and here we can just add whatever projection we want so we want to filter out hyphen hyphen v so we can just write hyphen knife and v false also we want to filter out the id so underscore id and then it will be also false okay so this is our projection and this projection we can add to the get cards methods here as the second argument so we are going to just add a blank curly bracket here and as the second argument of the find we can add this projection also in the get cards by id we can add as the second argument the scars projection or this projection is going to filter out the underscore underscore v and underscore id from your result so let's run our app once again i'm going to stop and rerun it and once it's going to run we will see if our projection is working or not so it's running now let's get all the data so previously as you can see we were getting underscore underscore id and underscore hyphen v let's send this again now we have only the data which we want because we have added the filter for that using projections right so i think that's it for this video i hope you enjoyed this video and i will see you in the next video