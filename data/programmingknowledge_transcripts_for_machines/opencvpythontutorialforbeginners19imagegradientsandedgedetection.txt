hey guys welcome to the next video on open CV tutorial for beginners using Python in this video we will talk about image gradients in open CV so first of all what is an image gradient so an image gradient is a directional change in the intensity or the teller inside the image now the image gradient of an image is one of the fundamental building blocks in image processing for example we use image gradients inside the image to find the edges inside an image now there are several image gradient methods available in open CV and we are going to see three of them first is the laplacian derivatives second is the Sobel X method and third one will be the Sobel Y methods and all these methods which I mentioned are different gradient functions which uses different mathematical operations to produce the required image so the laplacian calculates the laplacian derivatives where as Sobel method is joint Gaussian and differentiation operations but don't be overwhelmed with the details you just need to keep in mind that these are just the functions which we use for finding out the gradients of an image to analyze the image so let's use the first method which is called the laplacian gradient now to start with I have this initial code and you might already know what this code is doing so first of all I'm just reading this image messy five dot jpg in the grayscale mode using the I am read method and then I'm just loading this image using the matplotlib window so let's first see how the result looks like so this is going to look like this this is just a normal image of Messi and let's see how we can apply the laplacian method to find out the laplacian gradient of an image so for that we are going to declare a variable called lap and then there is a function available inside your cb2 library which is called laplacian and this laplacian method takes few argument first argument is the image the second argument here will be the data type which we are going to use which is called CV to dot C V underscore 64 F so CV to dot C V underscores 64 F is just a data type and we are using a 64 bit float due to the negative slope induced by transforming the image from white to black so you just need to keep in mind that this is just a data type which is 64 bit float and it supports the negative numbers which we will be dealing with when that laplacian method is run on our image now in the next line what we are going to do is we are going to take the absolute value of our laplacian image transformation and we are going to convert this value back to the unsigned 8bit integer which is suitable for our output so I'm going to just write lap and then using the numpy you int methods and P dot you int 8 and as an argument we are going to pass an P dot absolute and then inside the absolute method we are going to just pass our image which is going to give us the absolute value of our laplacian image transformation which is going to convert this into the unsigned 8bit integer now let's see the result of this laplacian gradient so I'm going to just add a new title to my title array which is called laplacian and also inside the images list I'm going to add this lap variable which contains this image right after the laplacian gradient is applied here and here the range will be two and we are going to see it in one by two format on the mat plot lib window so here you can see the original image which is this one and after the laplacian gradient method is applied on this image you can see all the edges which are detected by this method when we applied this method on this messy five dot jpg image and an image gradient as I said is the directional change in the intensity or the color in an image so let's close this window and there is one more argument you can provide here which is the kernel size so you can just say K size is equal to five this is the kernel size and I'm going to just run this program once again and you can see the kernel size is increased but our result is deteriorated right so let's reduce it to three and then once again run this program and the result could looks fine and if you apply K size is equal to one let's see the result and you can see you get the better result I think so for now I'm going to just use K size is equal to three and now let's use the other two image gradient methods which are Sobel X and Sobel so these methods which are called Sobel X and Sobel why are also called a Sobel gradient representation so let's just use them and then we will discuss how they are useful so first of all I'm going to declare a variable called Sobel X and then I'm going to use the method inside this cb2 library we just called so bell so this is the method which takes again few arguments first is the image second is again this data type which is CV to dot CV underscore a 64 and the third argument here will be the DX so when you write one here this value can be 1 or 0 so when you write 1 here that means we want to use the Sobel X method okay and then the fourth argument here is the D Y value okay so this is DX which is for the X direction and this is for the dy which is for the Y direction and DX stands for the order of derivative X and the dy stands for order of derivative Y now once again we are going to declare the Sobel Y variable so let's declare the Sobel Y and then C we to dot so bail and this also takes a few arguments here the difference will be only the third and fourth argument so I'm going to just use the second argument same the third argument will be 0 for Sobel Y and the fourth argument will be 1 right so this is the order of derivative X if it's 1 is called the order of derivative which is in the X direction and in the second case it is in the Y direction and the fifth argument here can be the case eyes as we have seen in the laplacian method so if you want you can provide the kernel size also here as the fifth argument but we are going to skip it for now now again we are going to convert these values into the unsigned int as we have done in the case of laplacian so what we are going to do is we are going to once again overwrite this variable Sobel X and then we are going to use NP dot you in eighth and in that parentheses we are going to just write n P dot absolute and then we are going to just pass the value inside the Sobel X variable same way we are going to do with the Sobel Y variable and now let's see the result how the result looks like so I'm going to just add these elements inside the title and the image list so let's add the Sobel X and Sobel Y here and here also so Sobel why and now let's increase the range to four and let's see it in the form of two by two matrix on the matplotlib window so I'm going to just run this code and you can see the result here so original image laplacian gradient and then Sobel X and so blue Y so you can see when you apply the Sobel X gradient method the direction or the change in direction in the intensity is in the X direction and when you apply the Sobel Y method the change in direction in the intensity is in the Y direction so this is like horizontal and this is in the vertical direction I have one more image which will illustrate this sobolik sensible Y gradient method in a better way I think and this is called Sudoku so I'm going to just write so Doku dot PNG file file and hopefully I didn't do any mistake in the naming yes it works so you can see the laplacian result here and then so blue X and so blue Y result here so in the Sobel X you can see more vertical lines so because so blue Y is good for the directional change in the vertical direction so you can see more change in intensity in the vertical direction and using the Sobel Y you can see the directional change in the intensity in the horizontal direction or the y axis you can also combine the result of Sobel X and Sobel Y images and how we can do this let's see so to combine these two result I'm going to just create one more method which is called Sobel combined is equal to CB dot we are going to use the bitwise or operator in order to merge these two images so we are going to just write bitwise or and then we are going to provide the two sources one is Sobel X and the other is the Sobel Y image so this is going to give us the bitwise or result of these two images and then we are going to just add this into the tidal list so let's say Sobel combined and also in the image list so like this and let's just increase the range to five and let's see it in the form of two by three on Matt plot so I'm going to just run this once again and you can see the result now so this here is the combination of Sobel extensible Y method and you can see now you can see the directional change in the vertical as well as in the horizontal direction because this is the combination of Sobel Y and Sobel X images so this is how you can use the image gradients inside OpenCV in the next video we are going to see how we can use canny edge detection method to find out the edges in an image so stay tuned and please rate comment and subscribe and I will see you in the next video you