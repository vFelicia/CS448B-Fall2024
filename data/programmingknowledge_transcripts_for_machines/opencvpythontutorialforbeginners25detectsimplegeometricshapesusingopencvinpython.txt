hey guys welcome to the next video on open CV tutorial for beginners using Python in this video we are going to see how we can detect simple geometrical shapes using open C being so to start with I have the simple chords which reads an image and then show it into I am show window so let's run this simple code first of all and let's see what it does so you can see I have this image which I'm loading into open CV window using imshow method and here we have some shapes so we have a Pentagon circle rectangle square triangle and this star shape right and let's say we want to detect using open CV which shape it is based upon the geometrical shape and we want to write the name on top of this shape so how we can achieve this let's see using open CV so as you can see if the first step is to read an image and then in the second line I am just converting this image into grayscale mode image so using this code I am just converting this image into a grayscale mode and in the next step we are going to find out the threshold so I'm going to just say underscore comma trash is equal to CB 2 dot threshold so CV 2 dot threshold and we are going to pass our image which is a grayscale image which we have converted as a source and then the next two values are the threshold values and the maximum value of the threshold so for now I am giving the threshold value 240 because I know this will work but if you want to be more flexible you can always use the track bar to find out which threshold will work with your image the second value is the maximum value of the threshold and the next value will be the types or the type here will be C v2 dot fresh binary so we are going to just say CB 2 dot Thresh binary now in the next step we are going to find out the contours so contours we have already seen in the last videos how to find out the contours and what our contours so for that I'm going to define two variables one is contours variable other is the underscore variable because we don't need the second result and then I'm going to just say CB 2 dot find contours the first argument here will be the thresholded image and then the second argument here will be the mode and third will be the method so let's give these two values so CB 2 dot r ET r 3 and the method will be c v2 dot chain aprox nun ok so let's give this method so this is the simple procedure to find out the contours inside an image now in the next step I'm going to iterate over all the contours so I'm going to just say for contour in contours so we are going to iterate over all the contours and then we are going to first of all use a method called CB 2 dot aprox poly DP so I'm going to just declare a variable first of all I'm going to just say aprox is equal to CB 2 dot this method which I have mentioned which is called aprox poly DP so this method approximates a polygon and curves with a specific precision and the first argument which it takes is the curve so our curves here will be the contour which we have found on the shape the second argument here will be epsilon so epsilon is the parameter specifying the approximation accuracy so here what we are going to do is we are going to define epsilon is equal to 0.01 and then we are going to multiply this number by CB 2 dot arc length so there is this method called arc length and what does this arc length method do it calculates a contours parameter or a curve length so here in this arc length parameter we are going to pass once again our contour variable and the second argument here will be if it's closed or the open contour so in our case we know that all the shapes which we want to detect are closed so we are going to just pass through here and the next argument in the aprox poly dpe method will be once again if it's a closed shape or the open shape so once again we are going to pass through here because all the shapes which we have are closed shapes now once we have this approximation we are just going to draw all the contours first of all so we are going to just say C v2 dot draw contours on which image on our original image so we are going to draw these contours on the original image and then we are going to pass the second argument and this will be our approximation so we can in the square bracket this is one other notation of just giving the number of contours as an argument to the draw contours method so in the square brackets you can just pass the aprox the next parameter here will be the contour index so because we are iterating over all the contours that's why the index will always be zero because there will be only one contour which we are working at a time so this index will be zero the next argument here will be the color so you can give any color here I am going to give zero comma zero comma zero let's say and then the next will be the thickness so thickness I'm going to give here is five now the next step is to print out the shape so which shape it is we want to print on the shape which shape it is in simple English let us say so for that we need to find out the coordinates on which we want to print this text on the shape so we need to find out the x and y coordinates so we can find this x and y coordinates using this aprox variable and we can just say a procs dot revell so this is a method called Ravel and then the first index here will be the xcoordinate and c in a same way we are going to just say aprox dot Ravel's and on this method the second argument or the second index at index 1 will be the ycoordinate so on these x and y coordinates we are going to print our text now in the next step what we are going to do is so because this aprox fall it is going to approximate the number of polygonal curves so based upon the number of polygonal curves we can just approximate which shape it can be so if this aprox so let's just find out the length of this aprox and if the length of this aprox variable is equal to 3 then we are going to say that it's a triangle because triangle can be made with 3 points so this length of aprox variable if it's equal to 3 then we are going to say that it's a triangle because if the number of curves here are 3 then most probably it's going to be a triangle so if we know that this is a triangle then we can easily just print or put text on that image so we are going to just say put text and the first variable here will be the image so we are going to put text on the image the second variable will be the text and we know that this will be our triangle so we are going to just say triangle here and then the next argument here will be the coordinates on which you want to print this text so we already found out the coordinates at which we want to put this text the next argument here will be the font so we are going to just see v2 dot font hershey complex and the next argument here will be the font scale so let's say font scale will be 0.5 and the next argument here will be the color so you can give any color let's say we just want to print this text in the black color itself so we are going to just say 0 comma 0 comma 0 then using this logic we can also say that if the length of this aprox is equal to 4 then it can either be a square or a rectangle so here if the aprox length is 4 then it can be a square or a rectangle but we don't know if it's us we're or a rectangle so for now we can just write that it's a rectangle and we are going to decide if it's a rectangle or a square in the next step but let's define the other ifelse conditions also so this was L if similarly if number of aprox points are five then we are going to say that it's a Pentagon so we are going to print out the Pentagon text on the x and y coordinates and if the number of points are 10 then we are going to just say that it's a star shape so you're going to just say star because in the star the number of points are 10 and then we are going to say that in any other conditions so we are going to just say else and we are going to just remove this condition from here else in any other condition it's going to be a circle okay so if a procs length is 3 it's a triangle if aprox length is 4 it's a rectangle or a square if 5 Pentagon if it's 10 its star if it's nothing out of all these options then it's a circle you can also find out for example octagon or hexagon here if it's 6 it's a hexagon if it's 8 it's a octagon and so on right now let's once again come to this step and in this step we just know that if the number of points are 4 then it's a rectangle or a square but how can we find if it's a rectangle or a square so let's decide that now so what we are going to do for that is we are going to just say X comma Y and then we going to just say W comma H for width and height and there is a method called CB to dot bounding rekt which is going to give us the x and ycoordinates and the width and height of the rectangle right so we are going to apply that method so CB 2 dot bounding rekt on our approximate variable or aprox variable this is going to give us the X&Y coordinate and width and height now based upon the width and height we can find out the aspect ratio so we are going to just say s back the ratio is equal to float first of all we need to typecast the width into a float so we are going to just say float W divided by height and this will be the aspect ratio of the rectangle now if this aspect ratio let's print out the aspect ratio also so we know what aspect ratio we are getting using the rectangle or the square and we are going to just say if this aspect ratio is between 0.95 and 1.05 then is going to be a square right because the width and height are almost same okay so we just give some room for some noises that's why we are providing here ideally it should be a 1 aspect ratio should be 1 in order to have a square but let's say we are just approximating so we can just say if it's zero point nine five if it's greater than zero point nine five and if it's less than so aspect ratio is less than or equal to one point zero five then it's a square okay in ideal situation you might want to give here one but in images it can be a little bit different so we are just giving this limit so if the spectra show halls in this limit then it's going to be square otherwise it's going to be a rectangle right and I'm going to just say that if this is the case then it's going to be square otherwise so in the else condition so let's give this else condition here else it's going to be us rectangle so let's print rectangle in the put text okay so this is the code which we have written and now finally what we are going to do we are going to just show the shapes image including all the contours and the text which we have put on these shapes so let's run this code and let's see if it works or not so you can see now it's going to work like this so all the contours are drawn across these shapes and you can see the text on top of these shapes so circle rectangle Pentagon star triangle and squares what you can also do here is you can just change this text position using the x and y coordinates so let's say I just want to change this Y position to just a little bit top of the shape so I just added the minus five offset here in the y axis and now you can see it goes little bit up this text right so now it's much visible this text and you can see a rectangle and square a text is not going up because we have declared the local x and y here also so we can just say X 1 and a y 1 here and then run this code once again and you can see this rectangle and square text is also moved a little bit up so I think the offset of 5 is okay to show these text on top of these shapes so this is how you can detect simple geometric shapes using open CB so I hope you've enjoyed this video and I will see you in the next video you