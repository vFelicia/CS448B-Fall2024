hi in this video we are going to learn about Mumbai TV so before getting started with MongoDB we have to know what is wrong Gordini well momo DB is a generalpurpose document based distributed database built for modern application developers and for the cloud era and the data that is being here stored is stored as a JSON like documents and it's called as a non sequel database there is no schemas there is no structure here so it's very flexible compared to as a sequel database so let's start with signing up here or registering here so we are going to click on the Trifield button and here you can get started free after signing up you will go to the Atlas Base Cloud Atlas base server because we are going to use as a life as a production deployment basis so when you start free you have already sign up and after signing up after sign Emma signing up you will go to this space where you have to create a new project so let's say our project name is TV demo after that you will be redirected to the this space which called to give your member that's just not necessary we can create your create project after that you will be on this space where you have to select build a cluster here we are going to use create a cluster it is a free and we are going to use this cloud provider AWS and wherever you are select the nearest server after that in the cluster tier we are going to use free forever and there is no need you can change the name of your cluster if you want to now we are going to create a cluster it will take some time to create the cluster so now we are here and now we are going to see how can we get started with the Mumba Devi in our app well for app we have to use the Modi with driver that is very built and that he is being used here so in here we are going to use MongoDB driver so let's open our project now we are going to create a new project let's say let's say MongoDB demo now we are going to go to this MongoDB demo folder one sec yeah MongoDB demo now we are going to initialize the NPM using NPM any test one and now we are going to open our editor the Visual Studio code so for using the mumbo DB here we are going to install two things first one is MongoDB Express here you can see that the MongoDB and Express has been installed here so for starting this starting the project we are going to use in M node node app the file data I have not created right now and for their part we are going to create we are going to use Northmen Nordmann app so for Nordmann we are going to install it in the day of dependency part using NPM install test as safe tester safe test they're not moon now here we can see that in this page the connection has been made so for connecting it into the our app we are going to click on the connect and here you will see that there are some connection requirements are needed so first of all we are going to go to the database access here we are going to create a new user let's say instrument and let also generate a secure password and we are going to select read and write to any database now we are going to select the network access here we are going to add the IP address which is either add current IP address which is help to give the secure authentication now if we go to the our cluster section now we are going to connect now we are going to connect to the cluster for connection we are going to use the connector application here we are going to use this connection string so let's copy it let's copy it after copying it we are going to now into our app we are going to create a new file let's say app torches in here we are create the Express module or take the Express module from the Express and we are going to use the app and requiring the Express as a function and it will listen to the port 3000 for restarting the server so it's complete the server can be started but here we are going to use how to get started with the MongoDB so we are going to let's say we are going to create a new folder let's say utils in here we are going to create a new file let's say DB torches in here we have installed the MongoDB driver into our process so we are going to require it from the MongoDB and say MongoDB this is equal to require MongoDB in here there is some called client this we are going to require from it which is which is of property of it which is a file of it here which is a field of it so in here we are going to connect to it as a client for connecting we are going to use manga climb dot connect in here we are going to pass the URL so for passing it here we have used a password but as I have forgotten the password we only have to again require the passport for requiring it here we are going to edit it and edit the password here we are going to autogenerate it from here and we are going to require it from here let's update the user now in here there will be a URL so let's say here is the password and we are going to get a savvy string from the connection so here we are going to again copying it and let's say here Const URL is equal to this one so here we are going to cut from here and paste into it here the password after doing this we are going to use the URL as a parameter here and that's it we are going to connect from here it will take a callback function and it will take two arguments first one is error if there is and second one is the client and now if we say if there is error then return if there is no order let's consult our client base point now that's it if we start here from NPM run dev so if we run it it will say nothing what gives nothing that's because we have started that add file but we haven't connected with the dot DV dot J's file so for connecting it we have to like say all the code is here so before cutting or pasting it from here to here we can do this like we are going to require it from tor teutuls and get a DB file so if we run this now we can see that it will give the client back so here it returns the manga client all the things all the fields that are here now here we are going to see how can we deploy operation that is create read update and delete so for doing the crud operation we are going to use we are going to use the client and by client means we are going to create a new Const TV which take a client and TB and let's say our database name is the test so test is a database for the collection means for a table in the sequel eyes database we are here we are going to use the collection as a table so let's say the name is user users in here we are going to first use the insert means Korea how can we create a document and not let some so let's see if we are clear going to create a one document we are going to use the insert one method in this we are going to give an object let's say name and simile is 21 after that these returns are promised so for handling the promised we are going to use a 10 which takes a result which gives a result and we are going to console dot log the object it we have sent using result raised dot ops and if there is an error you can see it from here like e console dot log error now if we save it and see that there is one document that we have inserted it is this one and if we see in to our more atlas we are going to see in the collection and here we are going to see that there is a database it is called test and the document for a collection that is called users when talks huntsmen in between and the is so we can also use how can we insert more than one document you can do that by using another matter let's say do this by using a DB dot collection users users start insert many here we are going to use the array because we are sending more than one document so by doing this you can send more than one document let's say here we name is 21 or let's say twenty seven and another user let's say uncle is 25 so it will be a number so here also will be number so we have inserted two documents here now it's a promise so we have to use the promise sequence we are going to use 10 and console.log the result that we have sent we will be using response dot ops and also we can catch data by using catch matter and let's say if there isn't any other you can console it now if we send it back we will see that we have sent two documents Renee and uncle now if we refresh it we will see that there is two documents winnie and uncle now we are going to see how can we find our wait any data so for reading a document we can do so by using another metric that is used it is T V dot collection users dot point if we are going to find one means we are going to find only one document we have to use find one matter and let's say we are going to find we are going to filter out the document that you are going to use let's say s will be the 27 that means we are going to find the document that is win a No let's take a call back so we can use the dollar 10 response and it will load out result by using response and if also if there is an error we can catch it using console dot log error now if we save it and use it you can see that we have we have been returned with the name Binet and there is 27 now we can also find all the documents by using another method that's that's called T V dot collection users dot find well fine is being is we're different from other Demeter's well it's not it gives a pointer so it gives a concept pack so we are going to use to air a yes it will return the file as an array and now we can use the response and response back and if there is an error we can error it with by using console dot log error now if we save it we will see it returns all the documents because we have same nothing so it returns all the linesman Vinayaka now if i send like something called is is equal to 25 or 24 here we see there is no documents like this now if we save this it will not give an error it will just send back an error yes it's another so it's not an error if we send the send out a filter value that is not being there now collections so the our operation is completed now we are going to see how can we use the you are plus and it is update so for updating our document we are going to use update 1 and update many update is being duplicated from the newer version so we are going to use update 1 and update many for updating only one document we are going to use update 1 by sending one parameter that is the s21 and updating it with some value and it also is a different from how can we set it so for setting it we are going to use the other set and we are going to send back the updation value is 59 no it's complete now it's a promise so we are going to send dot ten response and if we see if we console it in our command prompt we will see that it returns a very big heavy object and let's save it and we will see that it keeps a heavy object now if we see you that we have updated the value of the s21 that is that is unsummon so if we see here and if we refresh it here we will see that the SE is different as is 59 so that's how update is done and here gives the response gives a very big heavy load and we only want do main fields like matched count and modified count so for updating more than one file we can use like we are going to use another method that's called that is David odde collection users start update many and if we send it here like nothing so it will be updated all in all documents so let's say we are going to implement all the A's by one so if for it we are going to use one that means we are going to increment by plus one or if we are going to decrease we can use minus one so we are going to use plus one so it's some response its sensor it's as promised so we are going to also again using you ten method and it's going to send the response and we are going to use one need one thing that is called modified count and if there is an error we can use catch matter and we are going to console it here now if we see it and if we say everything's and we will see that all the documents are being modified and the modified count is three now I feel a flare sitting on to all the cloud service space MongoDB we will see that I'm saman AZ 16 Rene's age is 28 and huncle's is is 26 no you have or we have done the new operation that is update operation now we are going to see how can we use the last operation D that is delete so for deleting any document we can use T V dot collection dot delete one or many so if we use the lift one it will take out the filter that we are going to use let's say we are going to delete the document and zoomin and so we can use the edge method or we can use in a matter let's see here is on cement now for deleting here that's it now if we it's a promise and if we responses back it will give that document that we have deleted know if we responds back and if there is an error we can see it in here and sorry it will be e and if we stay with you we will see that oh it will give a holder document because I haven't used it response start the late count about it way if we see here in our MongoDB database we will see that huntsmen document has been triggered now if we are going to delete whole file this whole document we can use the method that's called that is called till it many and it's very easy to delete many we are going to send the empty air an empty object now if we dot 10 and response back and we are going to see how many how many documents have been written so willing to use deleted count and if there is an error we can use catch matter and it will give the error if there isn't now we have saved it now if we see in here it will give two only one tells me oh sorry man because we have used only delete one if we use drift many you can see in here no it will not keep the quiet thing that we want but it will it will be so yeah that's it so in this video we have seen how can we use the MongoDB library or at native travel how can we select or edit or update or delete or insert into our database thank you