hello guys welcome once again in this video I'm going to show you what is Method overloading and how we can overload a method in C so for example I have this uh program here and I already told you how to create a method in cop so I have this method which is adding to integers here but suppose uh tomorrow somebody wants the addition of two Floats or two double values also how you can use the same function to add two double values or for instance you want to add two string because you know that this plus symbol conc concatenates two uh strings right so you can add two strings also and somebody wants that by the same function name you want to add two strings so how you can do that with with the same function name you can use function of method overloading for this so what is Method overloading so I have this function for adding two integer so suppose I want to add to double numbers or double values then I can just copy this uh method and I will just go down and I will paste it here and instead of uh adding two numbers now I will use use two doubles so I will write double and here every place where I have used integer I will just replace it with double and this method and this method you can use uh to add two integers and two double values and this will not give you any error because whenever you use this sum in the main method your initialization will decide whether you are using this sum or this sum method so let's uh take an example so suppose I want to add two integers and two uh double values and I want to print them what I can do is I can just write this kind of code that console read or right line sum of two inss and in the placeholder you can call this method called sum and depending upon the initialization you can give you see here you have two options the double it's returning double and it's taking two double values which is one of two and the second is it's taking two integer and a returning integer for example we are using or we are initializing it with two integers for example 45 and 64 okay so this method now automatically detects by the initialization that you are going to use this method similarly for example I want to add to uh double values what I can do is 45.45 64. 64 for example and these are two double values so for your initial from your initialization C recognizes that this is the method which is adding two double values you when you hover over this you can see here this is showing double values and returning double and when you hover over here it's showing it can take two ins and it will return integer and so whenever you run this program it will work fine first is adding two integers and second is adding two double values right so by using function overloading you can use the same method name sorry I use I'm using function and Method interchangeably because uh these function and Method are same in some languages method are called function and in some languages yeah method are called method so when whenever I say method it's function and when I say function it's a method so don't confuse on that so method overloading allows you to use same same function name but on the basis of initialization your C code will decide that whether you are using uh this integer addition or you are adding two double values okay suppose you want to add two string you can do it in the same manner I will just copy this function paste it here and instead of double I can say string and I will replace this double by string every at every place and this function will add two strings let's see how I will just copy this and paste it here and I will just just give two strings here for example hello YouTube so this from this initialization your code will recognize that this is string initialization so this will go to this function and add two strings once again when you run the program it will run fine first will add two integers second will add two double values and third will add two string values so in this way you can use function overloading in cop to perform a same logic on different kind of values with a same name okay so I hope you have understood the basic concept and I hope you have enjoyed this video please rate comment and subscribe and bye for now