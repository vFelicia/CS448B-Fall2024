hey everyone so today we'll be talking about Pi game in Python that is basically used for working with video games creating video games in Python but before that we need some prerequisites that are your knowledge in Python you should already be acquainted with some basic idea of python then you should have in Python installed in your system if not I'll just guide you through some quick steps we'd be working on BS code so we we need vs code we need uh python installed in your systems plus we'd need the pi game module so let's quickly see how we can get all these and we'll find you'll find this download pythonpython.org it's the official website if you need any documentation related help uh from python while python then you can search it over here so you're gonna click on this link okay and you can easily download it like it starts right away and then you have to set the environment variable which is not a big deal and for downloading vs code you write download vs code and there we are we download vs code and it should start right away uh you just have to wait for some time okay so as you launch vs code this is what we get this is the interface that we see this is where you open all the folders this is where you search for your files and this is where you download your extension so since if we are working maybe you're working with python for the first time you have downloaded it for the first time you have to write python and download the extension so that you can work with vs code and python here I am getting this disable and installed uh icons because I've already installed this extension but if you have not you'll get an install button over here so you click on it and then once it is installed you'll get a Reload button so you reload it so that you can work with python on vs code so I need to open a folder and so I open a folder here uh which is named as python it's an empty folder I made on the desktop a very simple one it contains nothing and it'll get opened uh soon as I click on this and then we will add a new file this is how we add a new file name it first stop py you always need to give extensions dot py is the extension for a python file you tell vs code that you're gonna work with python you might you might say that you will only have python extension so why do we need to mention dot py but maybe when you learn a lot of languages you have a lot of extensions then it would be a confusion for vs code what file you're working with so you need to mention the extension you need to mention dot py for HTML V Dot we do dot HTML so yeah uh let's try to print something we'll print hello let's see let's run this let's see if it runs and we have our hello printed cool this is what we needed now we'll install pie game so to install Pi game you need to write on the command prompt on the terminal that okay please open command prompt while you're doing this do not work on Powershell yes you should see something like this and you'll write pip install ID I already have Pi games so I don't need to install it separately but uh just on the just to be on the safer side just run this command and see that you have buy game or install this this is the only command that you need to run there are no extra commands that you need to run for downloading buying game it's really simple now we'll move on to the coding and introduction part of pie game so let's get to it so I have made this little code for you so that you can understand how we work with pie game first of all the introduction of Pi game it is a python module that is for creating video games you can create a new number of video games like mistake game tictactoe you can make any space shooter game you can visualize moving objects you can draw shapes and you can do a lot of stuff with like it has a lot of functions a lot of methods it works really efficiently with the latest version of by python what I have done is that I have divided any by game code into three basic steps that is importing by game initializing Pi game it was one setting up the screen on which we would see the output and running the game Loop okay so you might not get the idea of setting up the screen and the game Loop we'll get to it slowly so first of all importing or importing a module this is how we do it in Python you write import and then you write the name of the module that you want to import then we have this initialization part that is spygen.it don't worry about from pygame.locals it's another method of ID we'll talk about it later then we write Pi game dot edit we always write it because we want to call all the functionalities of Pi game and want to work with it like display is one of them dot display we then service screen the second point uh This is how we do it we call onto Pi game we get into display this is one module in inside Pi game and then rewrite dot set mode to set the screen and this is the size of the screen that we give the xaxis on the y axis okay so okay so then we have the game Loop which is an infinite Loop and inside it we are first writing screen dot fill with a color code I hope you get that this is an RGB color code if you don't uh don't worry I'll refer you to a website and you can read about it there and we talk about the RGB colors more in the next video and this fill is a method that helps you color the background with this color okay then comes the for Loop for the event of the pie game and we talk about this in some time when we'd get some more knowledge about what is happening in this code but for right now just all that you just need to know is there are three basic steps the importing then initializing setting up the screen and having a game Loop okay and please set up yourself with python and vs code if you have if you don't already have them then install pie game and we'll be talking about a lot more uh terminologies and by game and there's a lot to learn Fire game is a very vast module and uh you'll get a really good HandsOn to it if you follow this tutorial uh just uh to get an example let's run this this is very simple code in buy game this is a very simple code and buy game I have done literally nothing in this it's just display of screen just so you do not get like overwhelmed with what is happening I'll just run this and see what we get we get a window that is red in color that we specified 200 comma zero comma zero and that's all let's begin okay we click cross and uh we can change the size of this value let's see let's do this 200 and 200. let's run this now let's see what we get we get a smaller window size you can even see that the maximized icon has been disabled because we cannot maximize this we have already specified the size of this screen and it is 200 by 200. so yes this was a live demo of buy game and we'd be doing a lot lot more advanced stuff than just displaying the screen with the color with the basic color would be seeing different uh the screen changing colors and a lot more making video games and various stuff and biking till then get to your systems ready for working with python hey everyone in today's video we will be discussing some basic terms and methods in pi game module also we'll see some related examples so let's get started first up we have initialization of the module so we write import Pi game and then we initialize it by writing pygame.it we can also initialize a module in pi game separately like here I've written pygame.display.init we have separately called upon display we have separately initialized display module but if we do this you would not be able to work with other sub modules you have to uh initialize them separately then so that would be a little bit tedious rather uh we do this by game dot in it this initializes all the subclasses and sub modules of biking okay now to quit or uninitialize any module we use dot quit method we have already used it in a game Loop uh once we are done with working with pi game we do this by game dot quit and this is how it is uninitialized and we can move out of Pi game okay then I hope you remember in the first video I told you that any python code would be divided into three parts and that is initializing setting up the screen and the game looped in so the second part we have that is setting up the screen so the setting up of screen is done using the display module okay so please listen care carefully display module creates a new Surface object which helps us visualize whatever we have created a text a drawing or an image it can be anything okay um and display method helps us visualize what we have created on the screen we set using the set mode okay so this 600 comma 600 is the size of the screen okay last time also we saw this and uh it is not just confined to setting up the screen giving sizes it has methods like get in it get in it gives us a Boolean response returns a Boolean response which tells us if the display module is initialized or not it has quit of course it has in it to initialize and it has get surface method which gives reference to the current window window okay so if you don't get this right now it's all right because uh we have not seen any example related once we see that you'd be a little bit clear with it we have flip and update there is a difference between flip and update although they are little bit similar what does flip do it updates the entire video a window okay but update updates only portions of the window okay which are specified and uh whereas flip doesn't do it so you can say that a date is an optimized version of flip so we usually use update so that less memory is used okay then we have fill method which fills up the screen with some color okay so we are done with the second step let's move on to the third part that would be um correct like I would discuss a direct module direct class in pi game is used to manipulate rectangular surfaces and store those objects we can make copies of those objects move them across the screen and do a lot of things to manipulate them edit them okay we always you use rect if you want to work with something that requires another surface earlier while writing a text while working with an image for example here we are working with an image okay I have loaded the image okay don't worry this is another subclass image is another subclass in biking and I have loaded it okay uh simple and then what I've done is I've made another variable which is been declared a direct class object okay ball dot catch right this is how I have declared it as a red class object and what it does it is it um loads this image on a rectangular surface okay so that we can view it on the screen fine so this is one functionality of rect uh red class okay we can even copy this object ball object or ball wrecked and use it otherwise we can move it we can move it in place we can change the size by using a plate we can update its positions we can change it's where it is located on the screen we can clip it we can crop it we can resize it and much more rect involves much more functionalities but these are some basic ones so uh which we would require right now okay so yeah let's move on to the very important part of Pi game code that is the gaming Loop okay and the gaming Loop involves events every action and Pi game is named through a queue okay a queue is a list which follows uh first in and first out principle uh I don't know if you know about Q or not it's a data structure and it follows first in and first out principle and um it's it's just a simple list where insertion and deletion are done from different ends okay so this is treated like a list and um all the events are stored into a queue Okay so every time we call if Pi game dot event uh an action or an event from the queue is popped out and been carried out okay it has been handled the instructions have been carried out so that we do not face any loss of event as the queue might get filled over uh over time okay and following this an event can also be an input from the keyboard so to deal with keyboard inputs we have a different subclass that is key okay so whenever we call the spygen.key down and key up whenever a key is pressed these are automatically called okay and this then helps by game dot event to carry out the definite or whatever event is said to be carried out for example I have written down a little bit of code for you which is talking about how key down and key up works so here um I have just written Pi game dot key down because key down and key up are simultaneous processes as you press a key first key down is called and then you release it then key up is called okay so you don't need to write it uh like separately pygame dot key down or key up I have just written key down okay and if the event of key event dot key okay is K a this is the way of the uh telling that the key press is a okay and this is the way of telling that the key press to zero you can have it for all the keys on the keyboard okay so or else if not something else is pressed you output a keywords press so let's run this and let's see how it works run this and yeah uh so now I'd press a so a was pressed it outputs a was pressed I hope you can see it okay then when I when I press 0 it shows zero is first if I press e a key was pressed because I did not mention anything for E okay so yeah let's stop this and let's go back to our initial page this is how we work with keys and keys have a lot of other methods uh like get focus is there if the uh to check if we are receiving keyword inputs properly from the system we have get pressed like to get the state of all the keyboard buttons then we have name each of these Keys have an identifier so uh we get that identifier from this we get the key code we can get the key code from the name this takes an argument and from the name we can get the identifier okay and so and so we have in other methods also we'd see them once we use them in further examples okay uh so coming back to the game code um that was we had initialized the ball uh image and then we have we are working with getting it on the direct class okay we have got it on a red class object and I have mentioned the speed this is one comma one it works as an argument of wrecked class uh method move okay so what I've done is I've given it our experience speed as an argument so it shows that the xaxis with respect to the xaxis the object would be moving one One units and with yaxis it would be also moving one okay so so rectangle would always have on on a plane it would always have four points the Left Right top and bottom I hope you can imagine it and when the left point is less than zero the speed is the zeroth coordinate like this one is changed to minus one because we need to oppose the motion now okay or even when uh this happens when it's to the extreme right like it is more than the size of the screen similarly uh for top and bottom we are changing the yaxis okay motion of the yaxis and we will fill the screen with some color that is white right now and we'll do which is loading the ball object ball variable the image on the ball rect okay and then we are displaying it and updating the complete thing okay complete uh let's see how this works three this is a random motion if we make 0 comma 1 so it should only move along the yaxis let's see if it does so yeah it is moving along the yaxis okay it's not traveling anymore and what if we make this happen it should just move up along the yaxis but with more speed so that's pretty much it so next up we have some more definitions uh are more subclasses the first one is font uh we'll be discussing these in very brief because we'd be working with them further and we'll be discussing them more deeply in the next upcoming videos we have font when we'd be working with text uh printing getting a text on the screen with work with font we can um like see what the default font is what all fonts are there we can create a new object from a file we can uh change the edit the text the style of the text we can style it we can make it bold we can make it italic we can underline it we can see what the size is we can see the ascent and Descent of the text and we can do a lot more then when we'd be working with images we'd be using this image class and image module and we can load and unload and image we can change its format we can save the image we can crop it then we have time we can keep a track of how for how long the program has been running we can change the frame rates then we have music uh module to work with audios and we can rewind we can stop we can play the new audio and we have even the draw module to draw shapes like circles polygons we can even draw a line and curves and so this is pretty much about the very basic uh and startup things and the startup modules that are available in pi game hey everyone in the last video we discussed about some High game modules in brief now it's time we put that to use we would try displaying some text on pie game let's get started I have initialized Pi game as usual set up the screen and then is the new part I have used font module by pie game we have used sys font then which takes in attributes like the font style size of font mentioning about the italics and bowls it is an option here if you are mentioning about italics in bolts but you have to mention the font style and the size of font otherwise you'll get an error from cispond if you do not mention about the telexon bolts they are false by default we have a lot of system fonts let's take a look at them if you run this piece of code pygame.fort dot get fonts you will get a list of all the fonts that are available in the system here it is you can use any of these fonts to design your text firstly I'll just walk you through the basic code after that we'll add some more functionalities so after creating a font object I declared a text variable which would create a new Surface with given text rendered on it I hope you get this it would create a new Surface with given text rendered on it then we call Direct class object to see the text on pycam window last time we discussed direct class in detail I hope you can understand what is happening over here then as the infinite Loop you will fill the screen with some random color use lit from surface class to get the text and text checked on the window that is to short text on text act okay after that we have event in pi game dot events which updates and runs the given command until we quit okay so let's run this and see what we get so on running this code this is what we get we have the text at the extreme left of the screen but what if I need it in the center of the screen so let me change a little bit of it and see if I can bring the text in the center for that we have text direct Dot Center so I brought the rectangle surface to the center by using this method and I have specified the coordinates as the center of the screen I this is the size of the screen is 500 by 500 so I've divided it by 2 and we get to the center let's run this now and see what we get voila we have the text at the center now let's see what else we can do we can set a caption to the buy game window we use spygame.display.set caption we can also underline the text that we have by font dot set underscore underline as true and let's run it and see what we get we have an underlying text and we have the caption by game text cool uh this was one program now let's try and move this text along the different axes on the window for that I have written helpful code first I have initialized pygame then the screen with size 500 comma 500 then I have declared the font object with style Times New Roman and size 30. variable letter is used to render the so created font object then I have declared a variable I that decides the speed of the text how fast the text changes its coordinates please note that right now I am moving the word long x axis only so entering the game Loop now there is a condition if I is greater than 500 that is the length of the screen please see that the length of the screen is 500 when I is greater than 500 I is equal to 0 we make I equal to 0 this means once the text has traversed complete length of the screen we want to see it appearing from left again and the time gap between this action is a 5 milliseconds I have done this using the time module of python so bygame.time.weight 500 gives a gap of 5 milliseconds between these two actions then comes the wind.fill so I have colored the background white with fill now comes the tricky part uh rather not tricky part but you would need to visualize it a little so here in blit we have used the font object unwrecked class object always but this time I have taken no rect class object as you can see but I have given coordinates I comma 0. which shows the origin because I is equal to 0 for right now um so that gives me the origin the extreme left upper corner of the screen once this runs I is increased by 80. so you must infer that larger eye gives more speed as this is what is giving the difference between two consecutive spots of the text okay please try to visualize this and again there is a weight of 5 milliseconds after we run this event Loop um between the appearance of the text at two consecutive positions there is a weight of five milliseconds uh I have given a weight otherwise we won't be able to visualize the text moving it would move in a Flash so let's see this running uh let's see what we get and how this text moves across the screen along xaxis so now let's run this and see how the text moves along the xaxis yes so this is how it moves along the xaxis we can also move it along the yaxis for that I need to Interchange these two coordinates I would make it 0 comma I now so it would move along the left side of the screen so let's run it and see if it moves along the left side so yeah it does run okay cool you can even think about how we can make this text move along the bottom of the screen or along the right side of the screen for that you might need to change the 0 to something else maybe the size of the screen the wire or the xaxis so think about it hey everyone this video is going to be about image handling in pie game we would load an image see it scrolling across the screen rotate it unskill it and also we would talk about the transform module which is readily used with images in biking so let's start with normal image loading I have initialized Pi game declared the screen and in the fourth line I have used the load function from image module by pi game to load the image it takes one argument that is the name of the file or path let's keep it simple for now just use the file name this is the image we would work with then is our normal game loop I have colored the screen white with fill used plit to get the image at the provided coordinates we can also use the rect object we would do that in a minute and then there's our regular events Loop so let's run this code and see if the image is loaded on the screen so yeah it is up and running but what if I needed the image at the center of the screen we would just repeat what we did last time to bring this text at the center there we have the font object here we have the image object we would get it on the rectangle by declaring a erect object and assign its Center the center coordinates of the screen let's run this now see if our images at the center so yeah we have our image at the center of the screen cool what if I want to move this image across the screen for that we would repeat exactly what we did for scrolling the text you can see here I have taken the speed determining I variable for upper conditions given a weight of 5 milliseconds incremented I by 80 it's exactly the same it's just that last time we had text object now we have image object so let's see how it moves here you can see the picture moving across the xaxis you can also try it moving across the extreme left you can try moving it in the bottom along the bottom and along the right side too just like we did for the text now let's try to rotate a still picture for this we would use the transform module as you can see I have loaded the image in the seventh line then I have used rotate function by transform it takes two arguments the object you want to rotate and the angle by which you want to rotate the positive angles rotate anticlockwise and please note the angles are in degrees and after that we have our simple game loop with no new things you will fill a color get the image object on the given position then run the events Loop so without wasting any time let's run it and save the image is rotated yeah we have our image rotated clockwise by 90 degrees since I give an argument of minus 90. cool now let's try to scale the same image for that we would use the scale function by transform scaling is just resizing the surface to a new size the second argument here is of the new size that you want for the image and then it's our normal game Loop so let's run it and see if we have new sized image yes we do have a new sized image the original limit squeezes into the size we have provided that is 200 by 200. in the last two programs we use transform module this module has some more functionalities let's look at them so I have loaded an image it's the same program as of the first one and use the flip function Now by transform so it takes in three arguments the surface you want to flip and the ax is about which you want to flip I have flipped it about x axis as the second argument is true and the third one is false if I run it my picture is flipped about xaxis you can do this for yaxis as well then you can even set both the of the arguments as true then the image would be flipped about both the axis next up we have throttle Zoom which is a combination of rotation and zooming in the image of course the function itself the name of the function itself explains it it takes three arguments as well the surface you want to work with then the angle of rotation and then the zoom in factor which takes a flow data type so you can given arguments like 1.5 2.5 and 2.25 Etc it is not just confined to integers fine let's run it and see what we get so we have our picture zoomed in by 1.5 and it is even rotated by 90 degrees you can even rotate it by 180 degrees not a problem or by 360 then you'd get the same image again now if you want a picture double the original size you can use the scale 2x function if you are using this function you do not need to mention the zoom in factor it's automatically to we get a picture which is double the size of its original size so let's run it and see if we have what we are expecting so yeah the image is double the slides of its original one transform also has this average color function which gives you the average color of the mentioned surface now if I print this for the current image it comes out to be this color there's a color this is an RGB format so yeah this is one color that we get it is the average color of the given image so in this video we worked with the image and transform module next time we would work with the music module in pygame hope this video helped you thank you hey everyone so today we'll be talking about the music and mixer module in pi game they go very hand in hand the mixer module has many modules like music sound channel today we'll be talking about only the music module I could have use the sum module as well but the music module is more versatile they eventually turn out to be similar although the way they work is different so what the mixer module does is it helps to control playback of the streamed music we won't do anything tedious today we would just learn some functions by music module and write a code to understand how they work so the first function we have in music module is load as we hard load in image module just like that here the load function loads the music file and prepares it for playing it doesn't play the music please note it doesn't play the music if music is already playing the load function would stop playing it and restart everything then next we have the unload function to unload the currently loaded music file and free up space and variable then we have the play function which is used to play the music once loaded so it takes in three arguments they are not mandatory but you can give at most three arguments so the first one is how many times you want to repeat the music which is called as Loop it should be an integer then we have start position which should be a float from where the music should start that's what it mentions then we have fade underscore Ms the time for which the music should Fade to volume zero in milliseconds please be careful while giving the arguments in pi game as there are many units of time in biking then we have the rewind function which plays the audio file from the beginning it's very simple if audio is passed it remains paused if unpassed the music starts from the beginning now we have the stop function which stops the music please note that stop and unload are not the same then we have the pause function to temporarily stop the music then we have the unpause function to resume the music after it is paused then we have this Fade Out function it takes time argument for which music should Fade Out in milliseconds cool then we have some methods like the set volume get volume get busy set position get position let's discuss them one by one we have the set volume method which is used to set the volume of the audio we can know the current volume of the audio by checking the get volume we can know if the player is busy or Not by using the get busy method it returns a Boolean which is true when music is playing then we have the set position method to set from to set the point from which playback should start playing then we have get position to get the time for how long the music has been playing then we have this queue function to enqueue a song to the current one once the current song is done playing the Q function would play the next song automatically we can only enqueue one song at a time so I don't want to write pygame dot mixer dot music over and over again so what I did is I wrote from pile game import mixer I initialize the Nixon module loaded the song then I used the played Funk play function to play it now we would see other functions later let's do the basic music streaming first then I have printed the Boolean get busy to check whether the player is busy or playing or playing something or not then I have a loop a loop is not necessary because we don't have the screen displaying something or not here we don't have any events just to make the program more functional like an audio player I have done this I have taken an input like for p pause U to unpause R to rewind as to exit then I have these conditions to pause and pause rewind and exit accordingly according to the input so if I run it now you would hear an audio and it's the song dot MP3 it's right here in the python folder so let's run this code and see if we hear an audio so I press p and I get the answer as false as the player is no more streaming and it's no longer busy as I have passed the audio if I unpause it you'll see that the get busy function returns true so I've stopped the function and it returns false the capacity method returns false as the player is no longer playing the music now let's try using this cat volume method to get the current volume of the audio then I'd be setting the volume to 0.8 by using set volume method and check it again if the volume was set properly now let's run this so we have the volume to 0.9 which is almost 1. and then we have set the volume to 0.8 so the volume comes out to be 0.8 so yeah things are working as we want it to be now let's try getting the position for how long the audio has been playing [Laughter] so the audio has been playing from one milliseconds the output is one millisecond if most functions are being called out the time would increase now let's try doing the Fade Out function so I have written mixer dot music dot Fade Out and written 10 000 in the argument so I have given the argument of 10 seconds that is after 10 seconds the music should fade away and stop since one second has thousand milliseconds so I've multiplied ten by a thousand so let's check if the music Fades away after 10 seconds [Laughter] so yeah the music did fade away after 10 seconds and if I check for unpause now or let me check for rewind if I check rewind now it comes out to be false because the Fade Out function completely stops the audio layer and hence the player is no longer busy now let's try the set position function I have given the argument as 120 seconds so I want the music to start from two minutes from the position two minutes let's see if the music starts Midway let me run this so yeah the music starts Midway taught us from governance now let's use the queue function uh I'd be writing mixer.music.q and I have mentioned this next song.mp3 it's also in the python folder you can see it over here I don't want to wait for like two minutes to listen to the entire song then I'd check if the song is queued and it has been played automatically so I'd set position as 170 seconds so that the song starts from the position 170 seconds so that I can skip this one okay so let me play this and see if the song has been queued so yeah the song gets unqueued and it has been automatically played without any indication this was all about the music module I hope you understood what always explained thank you hey everyone so till now we have talked about the font music and image module in buy game it's time we get a little bit inclined towards the video game creation part of pie game in this video we won't be creating a video game but yeah we would be doing something related we would try to see a snowfall we would try to create our own snowfall on the bike game screen so if I'm talking about snow falling then it should make sense to you that we would do something related to the moving text or moving image but along the yaxis and uh if it makes sense to you if you're able to think about that then yeah you're on the right path and you have actually understood what has happened till now and a little bit prerequisite for this video would be the knowledge of the random module if you don't know about it it's all right I'd be telling you about random module moreover we would just be using a function from random module um I would need random module just think about it why would I need random module because I want snow on random spots of the screen okay so that's why I'd be using the random module so that I can have random coordinates all right so let's get to the code right away it's going to be very easy so first we have the basic three steps I hope you remember the first step is initializing Pi game I have done so then I have imported random module just so I can take random spots random coordinates then I have the Step 2 setting up the screen then I have taken up a list snow so what I do is I had append some coordinates in snow which at at which I would need the snow at which I would draw the circles okay so I have run this for Loop okay for range 50 the length of the list would be 50 and uh then I have picked up a random number this is what Rand range does in random module it picks up a random number from the given range and similarly for Y X Y also y coordinate also and then I'll be appending the list to the snow list so snow becomes a 2d list just like this I hope you get it and uh so we have a list that has some random continents okay then I have set up this clock object from the time module so that I can work with the frame rate later you'd get the purpose of this later I'll tell you later at the end of the program now is our third step the game Loop so then we have our events loop as usual I have fill the screen with white color you can also take black color and white color snow doesn't matter now is the main part for ice in range lengths no now we would be traversing each element of snow and draw a circle at that coordinate okay so for that I have written pygame dot draw I have used the draw module and used the draws and use the circle function from draw so this is the screen the surface on which we want to draw then we have I've mentioned the color I want blue circles um and then the coordinate would be given by snow ice okay and the radius would be 2 pixels since I want the snow to fall along yaxis I'd be increasing the y axis you can see like the yaxis would be given by the ice elements first element okay this might be a little jumbling how do you access a Turi list you go to the first number like I go to the ice element ice element and then go to the first element inside that list so this becomes the y coordinate of the random y coordinate of the random Point Okay cool so I'd be increasing that by one each time okay because I want the next part to be just below it I do not change the x axis but I change the y axis because I want the snow to fall down now there is this corner case that if the snow if the coordinate now becomes greater than the screen size which is 400 right now then what I do is I pick any random number again I had completely changed the coordinate I'd pick any random number from minus 50 to minus 10 because I want the drop I want the snow to fall from the top and not from any random point and not from in between so that's why I've taken this negative range and I would reassign the value of the x coordinate also since it's I is and zero in square brackets then I update the display you can also use flip here not problem then I have used this clock object and use the tick function so that I can set up the frame rate by default it's 0 if it's if you do not mention this the snow would fall in a Flash like it's it would look like it's running the snow is running it won't make any sense so the larger the frame rate is the slower is the snowfall okay so let's check it out how this works so we have our snow falling very properly just randomly from anywhere as snowfall is you can also take up different colors like let me change the color here let me do Black and make this circle of white color so let's run this this also looks nice you can try either one you can even have any combination of colors so that's pretty much it about this video hope you understood the program we'll do more in the next videos in the upcoming videos thank you hey everyone in the last video we made our own snowfall and tried to use the basic concepts to make something better this sign we would again move an object around but the movement would be user controlled last time if you remember it was preprogrammed so if I say user control that means we would take the keyboard inputs and move our figure around the screen according to those inputs I hope you remember the key module we talked about in the second video now it's time we put that to use let's get to the code right away we would go step by initializing Pi games setting up a screen the screen size I have taken it to be 500 by 500 you can take any screen size not a problem I have also set up a caption which is moving the given object then we have declared the initial position of the object as X comma y it is 100 comma 100 it is the position on screen we would find our object right after we run the code cool then we have to set up the speed the speed by which the object would move the speed by which we want the object to move so it is set up to 3 which means the object should be displayed by three units along the given axis on pressing the respective key once then we have the size of the object I have tried to make a man figure with a circle and rectangle it's my object that's what I want to move around so this width and height is for that rectangle if you didn't understand you would get it when I draw the figure okay so then we have our game Loop the regular one I have given a time delay of 10 milliseconds so that object doesn't run and we can observe the defined speed properly delay is used to pause the program and so we have a refreshed screen after that then we have our events Loop used for handling events and quit the program if asked to do so then I have taken a key variable that would contain a list or sequence of the status of all the keys on the keyboard K is a list of booleans that can be accessed like this we just access it like a normal list but the indexing is done using the key constants so this is done with the help of unders get underscore pressed method the one key that is pressed its state is true other Keys have a false state so I have these four conditions my object can move around in only four directions left right up and down so accordingly I have these four conditions when I press the left Arrow key I will reduce the speed units from current x coordinate when the right arrow key is pressed I will increment the x coordinate by speed units and similarly for going up and down I decrease or increase the y coordinate respectively I would print what Arrow key I have pressed or so that it is it is easy for you to understand and there is no confusion this x greater than 0 and x less than 500 minus width then y greater than 0 y less than 500 minus height these all conditions are used to keep the object within the screen so that the object doesn't run out of the screen so that should be easy to understand now this is the code for making my man flicker so it's just a circle on a rectangle so you use the rect function in draw to draw a rectangle here x comma y are the coordinates or position of the rectangle and width and height are for the size then there is a circle now to place the circle right on top middle of the rectangle I found the mid of the width and also reduced Y axis by 5 so that there is just an overlap of two units between rectangle and the circle I hope you understand the height of the rectangle with 7 and if I reduce the y axis this 7 by 5 there is an overlap of only two units hope you can visualize it then we update the program and let's run it okay so this is what we get when we run this code we find our object at the initialized position it's 100 comma hundred it's that coordinates 100 comma hundred now if I press the right arrow key I should see right arrow key printed and the object should also move right cool let's do it once the object move right and right arrow key was also printed let me press the down arrow key so it should move down it moved down the object moved down now let's try for left Arrow key we have left our rookie printed and it also moved left let me press left Arrow key again so yeah it's going left again I'm gonna press left Arrow key yeah so let me take it to the origin cool in the next video we would try to make the snake game we would try to create that on our own a video game a live working video game for that this moving object program would be very important if you understood this moving object program then the Snake Game program would be very easy for you and from the next video onwards we would put to use all that we have learned till now all the basics that we have learned in now and things are going to be very interesting so from now on we would look at the real application of Pi game module which is video game creation things are going to be very fun and easy I hope you're understanding what all I have explained till now everything that I have taught you thank you hey everyone in this video we will make our first video game the snake game if you haven't heard of it then it's a game where there's a snake you move it around the screen in order to eat the food you should not bite yourself while going in several directions and also you should not collide with the boundaries simple let us think through how we would carry out all this and try to write an algorithm so I have this list of steps that we would need to carry out to make the sneaking okay cool our snake must have an initial position you get that right it should it should have a start position so let's define that it should also have a body it can be done using a list basically it would be a few rectangles at consecutive coordinates I hope you can imagine that the body of the snake would be nothing but a few rectangles arranged in line one after the other we will also refine the food position which would be randomly picked every time the snake eats the poop cool so for random picking of the spot we would also read the random module then we will also keep track of the score and increase the size of the snake whenever it eats the food fine we would Define a game over function whenever the snake touches the boundaries or bytes itself we would show game over on the screen also we would need to handle the movements of the snake by key inputs we would use the key module here cool so these are the seven parts we would need to build and then we would put them together to make the Snake Game work so first we will initialize the snake's start position initial position also let me Define the rate at which the snake moves the refresh rate fine then this is the clock object that we would use for the frame rate now according to the second point of the algorithm let the snake have a body we would need a body for the snake basically the snake's body would be consecutively arranged rectangles on the same line as I said before I have initially taken two rectangles you can take more a smaller initial size would help you notice the increase in size of the snake after it eats the food for the food we have this random coordinates taken then they are multiplied by 10 because we want no overlapping with the edges so that the snake doesn't go very close to the edges as we're gonna set a condition of the game over if the snake touches the edges I have taken this food booleans so that I can decide when to increase the size of the snake you will understand this when we make use of it and then this core variable is set to zero now I have this find a function for displaying the score on screen it's a slight bit of split text on screen created a font rendered it used red to get the text on Surface then used to it this was just getting the text but the main part is in the game Loop that is incrementing the score every time the snake eats the food after this I have the game over function I have defined the game over function this 2 is just for getting the text in the mid screen once the game is over once again over conditions are mapped they are also defined in the game Loop called this time dot sleep is used to pause the program for two seconds and quit automatically once the game is over according to the next step in the algo we need to handle movements of the snake for that I have taken two variables the IR which decides what direction to move in presently let it have an initial Direction and dir underscore next which keeps the track of the input now we have the game Loop the events Loop we saw the little program of the key module in the second video for example that event slope is pretty similar to this one I have set the variable next underscore dir as the press Arrow key so when I press up the next dir becomes up and similarly for left it becomes left and now I have two sets of conditions now this set of condition updates the current direction if the current one isn't a complementary Arrow key please understand this means if the arrow key press is down while the snake is going up no changes will occur as right now while traveling along the yaxis the only next possible move can be in the X directions same with the rest of the directions like if you are traveling in the extra Direction okay in the xaxis you cannot reverse your direction cool and this condition now is for moving the snake just as we move the object in the last video depending upon the key pressed the coordinate of the snake's position is changed then we would try to increase the length of the snake every time it eats the food so I would insert every coordinate the snake travels through and pop all except the time when the food and snakes coordinates overlap okay I hope you got that this time I would change food to false so that I can pick a new spot for drawing the once I have done that then again I set food to true also when snake and food coordinates overlap the snake eats the food I will increase the score great we are almost done here all I am left with is the drawing my is drawing my figures and setting up the game over conditions let me draw the snake it is quite obvious we would repeatedly draw the rectangles using a for Loop and this is to draw the food now there are three game over conditions touching boundaries along xaxis that is going Beyond zero to 600 minus 10. I have written 600 minus 10 so that you can understand that it is the size of the screen minus the size of one block of the snake's body okay similarly for the yaxis it's the second condition and the third condition is when snake bites its own body okay it's same like overlapping with the food coordinates here it's just that we have taken a for Loop and the game over function will be called if the snake's first block overlaps with any of its rest of the body coordinates okay that's why I have started with the I've started with a first position not the zeroth position of of the list okay cool now the show score is called all the time I want to see the score score on the screen all the time uh and then we have updated it use the dot update and use the tick to set the frame rate cool let's run this program and check if everything works fine what all we need to check is if the snake moves freely then if the fruit is respotted once eaten at a random spot also we would check that the game conditions game over conditions are working fine we will also check that the snake's size increases every time it eats the food so let's run this and check out this four or five conditions cool so now if I run this I can see my snake moving in several directions eating the food fuel is getting respotted cool and yeah the score is also getting updated and let me see if it gets bumped into a wall the game should be over before that you can see that the snake is longer in size than it was before cool so let me pump it into one wall the game is over cool and the screen also went away after my game was over so this game can be more enhanced you can print why the game was over or you can put in some music when the game is over using the mixer module make a different function and call it in the game over function this was the very basic snake game made by pie game thank you hey everyone in the last video we made the Snake Game it comprised of various modules by pie game this time we would make the tictactoe it would be a little bit more complex than the snake game but don't worry if you are clear with the basic modules of Fire game you won't have a problem dealing with this let me discuss for all functionalities we need to put in to make this tic tac toe so you need to draw a word right you know the tattoo is played on a three by three grid so for that you need to draw that board you also need to get the images loaded what images I'm talking about I'm talking about X and O symbols we won't be sketching anything manually we would just be rendering the images of X and O symbols at the place we want to we would also need to print the results on the screen we would also need to check which row or column has similar symbols so that we can strike that out and declare a win okay we would also need to declare a function where we can get the coordinates of our Mouse click and put our picture paste our picture over there so to get all this I have defined five functions and we would put them together to make this tictactoe cool so what the five functions are we would draw the board one we would get the results printed two we would check the winning cases we would check all the rows and columns if there is a win we would also need to get the coordinates of the mouse click we would use the mouse module that's a new thing for you and we would put the pictures of these School in it that would be the measure rendering part cool let's get to the code so I'd be importing Pi game initializing it then I'd be declaring some basic variables okay so don't worry if you don't understand there purpose you would understand it once we start manipulating them in the code further cool so I have this XO it will hold the current value of the symbols whatever symbol we are working on whoever whose ever turn it is okay then we have a winner it would store the winner X or o and declare unprint the message then we have draw it is initialized to none right now but if it is a draw it would be true okay it's a Boolean basically then I have this board it's initialized as a 2d Matrix with no values none values and it's a based Matrix basically of 3 cross 3 of size 3 cross 3 then we have this clock object and then I have the screen then I have set the caption then I have rendered the images I have this in the tictactoe files so accordingly I have okay then I have scaled the images because I want them in a block okay we have this nine these nine blocks and I want it in the same shape okay I want it in the same size basically of the block okay then we have our first function the draw grid we would be drawing the board with lines I'll fill the screen with some color then I have drawn the lines I would need two two vertical and two horizontal lines I hope you can get that because I need to draw three parts okay so I'd be drawing the vertical lines first so I have used the line function by draw module the screen is the surface I would need to make this make this lines on then I have given the color of the line then I have the start and the end positions okay so the start and end positions need to be visualized by you uh just like you would visualize the point on a coordinate axis okay so 400 by 3 comma 0 would be your point on the xaxis right so 400 by 3 by 400 by 3 it's because I am making three parts of the complete board and what is the length of my um screen that is 400 and by 3 gives you the one one third part of it okay similarly 400 by 3 comma 400 gives you the last Point okay on the xaxis but at the bottom cool and 6 is the size of the line similarly for the second line I've multiplied the same thing by two so that is just an interval ahead of the previous line okay hope that makes sense to you then to draw the horizontal lines I have just flipped the coordinates because now I'd be taking coordinates on the yaxis just like I took coordinates on the xaxis draw the vertical line I take points on the yaxis to draw the horizontal lines okay it should not be problematic at all if you can visualize a coordinate plane cool then add B defining the result function just for printing the result of the screen so I have made the draw and winner variables global so that I can work with the same variables throughout now if I have a winner xro a message would be printed like I would have a message that would be a string and that would would be the Winner's name and one okay similarly if draw is true my message will be game Draw now just like we would display a simple text on the screen I have done that I want my message to be rendered on the screen to be displayed on the screen it's the same code that we used in the display text nothing is different then I have the spin cases function to check if all the symbols along a row or column are same okay we would check it nine times right after every image is rendered okay now just as I said we will check along all the rows the columns and the diagonals so to take a longer row we would run a for Loop so that we can change the value of the row 0 1 and 2 and we would check if all the symbols along that row are same that's what the if condition does and the element we are checking should not be none okay if it's not so and all this symbols are same then we would Anna we would assign the winner to be that element okay and we would draw a line across that look how we would do that we will use the line function from the draw module and since we want to draw a horizontal line please know that we would need to take coordinates of the yaxis so we have the start point to be 0 comma group plus 1 into 400 by 3 minus 400 by 6. now rho plus one is because the indexing starts from 0 and we cannot take 0 to be something and I have subtracted it by 400 with 400 by 6 because I want the line to be the half of it okay half of the block and so is the case with the end point okay and then I'd call to the result function because I wanna if there is a winner then I want to call the result function so that the result is printed and no for third grade game has been played okay similarly for the column I would have a loop to Traverse through all the columns and I'll check accordingly if along a column the symbols are same then I had assigned that value that element to the winner variable and then I draw the line along that column since I want a vertical line now I would be taking points on the x coordinate okay x axis side and this start and end point again should make sense to you just as we did above I want the line to be the half of the block again there is a factor of 400 by 6 subtracted from that value cool then again I'd be calling out to the result because I wanted to want the results to be printed if there is a winner and I'd break this Loop then to check along the diagonals I would have two diagonals in a matrix there are two diagonals the principal diagonal and the other diagonal the principal diagonal runs from left to right whereas the other diagonal runs from right to left and it's the conditions are very similar you check along the principal diagonal if the symbols are same if they are assigned winner that value that symbol and draw a line along it and call on to the result function again to print the result similarly for the other diagonal that transform right to left now if there is a draw then how do you check that for all rows if all is true that means all the blocks are filled now and the winner is still none then it's a draw okay the draw Boolean is now true and you'd call on to the result function what the result function would do is it would check the condition for draw and the message will become game Draw and the text displayed on the screen would be true cool now I have this get image function which takes an arguments row and column but you would not understand this until you understand this input to block function so let's get to the input block function what it does is it gives you the position of the coordinates you clicked so basically it is to find out which block is clicked on board there are several blocks and once you have clicked inside that block you would get the row and column as a result of this function cool then to get the coordinates of the mouse click we have this mouse function by pi game we have this mouse module by pie game that has a function get position we get the X and Y coordinates of that Mouse click and if the x coordinate is less than 4 by 400 by 3 the first vertical line the first part then it is column one else if the value of the x coordinate is less than 400 by 3 into 2 that means it's less than the second partition but greater than the first partition the first vertical line then it would be column two please note that I have used the else if condition for doing the same thing and not if because I want to check the second condition only if the first one is not satisfied and then there is another elsif that is the x coordinate is less than 400 which would be the last column the third column cool similarly for assigning the row I have checked the Y coordinates accordingly now if the row and column are assigned some value and that Port position is empty it's none I would call on to the get image function please see to the indexing part row and column are normal numberings when you're using them for indexing you need to decrease them by one cool now let's check out what the get image function does so I'll pass on the row and columns I got from here and use them to get my image rendered at that position but there is a problem to render my image I will use the blit function but the blit function does not identify the row and column positions but it identifies the destination coordinates so we again need to convert this row and column to a position okay to a coordinate these coordinates would be same for all the images for all the positions clicked to have a uniformity I would need to again convert this Row one column to a single position the mouse coordinates would be very random and I don't want my images to be overlapping and that's why I have to do this I have to declare another function to get the coordinates from Row one column okay so if the row is one row number is one I want a margin of 30 so the quarter would be 30 export and it would be 30. and similar if the similarly if the column is one the position y would be 13. I want a margin of 30. if it is Row 2 then I'd be adding 30 the margin of 30 with 400 by 3 because I want the image to be rendered right after the second line with a margin of 30 okay 30 units cool and similarly there are conditions for the third row and the third column now I would assign the current symbol stored by XO to the board position that we got from the input to block function and if XO was X I would change xo2o because the turn should be changed now to O and I and before that I had render the image at the given position the X image and if I have XO as O then there is this vice versa condition I would be pasting O's picture and now XO would be changed to X now after calling the get image function in the input to block function I would call onto the win cases function which which would check if the there is any win in any row or column or along any diagonal so you should get that after pasting or rendering each image we would check if there is any win case okay now we are done with the five basic functions the five parts of the tictactoe game now we can move on to the main part of the program I'd be calling the draw grid function and then I'll have my game Loop cool in the game loop I have that events Loop where one event is to quit and the other event is to check if there has been any click on the mouse for that we have the mouse button down method if there has been a click on the mouse then I'd call onto the input to block function don't worry we will just get to the flow of the program if you don't understand how the program is interconnected and then I would be updating the entire display and I've set up the refresh rate using the clock clock object now let's quickly see how the program flows into each other I have just called on to the draw grid function in the main part so if I call onto the draw grid function what I'll see is I'd say a word getting rendered okay I'd see a board with lines and if I click onto the mouse I would call on to the input to block function which would give me the row and column and call onto the get image function which would help me paste my picture and then I'd call onto the win cases which would check if there is any win along any row or column or diagonal and then I from the win cases function I'd call onto the result function which would print my result if it is a draw or a win if there is no such win if there if no win cases are satisfied my tictactoe game would taken inputs until all the blocks are filled with some image so now if I run this I play it twice just so I can check both the cases for x then or osbin and to check a draw so this game is a draw and if I play it again I have X1 message printed so everything is working fine and if I quit the screen simply goes away cool everything worked as we wanted it to work and this was all about the tictactoe game hope you understood whatever we did in this program in the program thank you hey everyone we have covered two video games in pie game The Snake Game and tictactoe tictactoe included a lot of functions and was a little complex so this time we are gonna do something simple and easy so see this video more like a practice session than a tutorial because it's just the new idea that would be we'd be implementing the modules and code are similar unknown okay making a program in pi game is all about working with various modules together and going about those three basic steps I hope you understand that by now in this video we would be making a color Breeze we would see a shade of color gradually changing to the other and that color too would be randomly picked it is going to be a simple program because after two video games I wanted to give a pause so that things don't get too much to handle okay okay so a color Breeze basically means rendering different colors on screen so we initialize Pi game get the screen declare the clock object we've got C1 c21 C3 we which we would be randomly picking from the rain 0 to 255 you can use the random range function or random int there is just a little difference random end includes both the end points whereas random range just excludes the end point it does not include the end point but right now it would be better if you use run in so that 255 number is also included because there are components of RGB that uses 255 there are colors in RGB that uses the 255 number so basically C1 c21 C3 are the red green and blue components that would set up the screen color then is our while loop and then the events Loop in it now these conditions are to change the color let us get different colors and we would only change value of any one component that is C1 C2 or C3 because we want something like a breeze and not colors just popping out of nowhere the screen's color should change like a shade change very smooth okay so for that if the value of C1 is within 255 I hope you know about RGB colors a component can't can't have a value above to 55. so if the value is within 0 to 255 we add 1 to the existing value else if it's greater than 255 you decrease its value by 255 to make it within the given range and if it goes negative or 0 you can increase value by 3. and then you given these three components as fill functions arguments now if I run this the screen gets various colors great and the color transition is smooth as I wanted but after some time this starts what if I want to see this again or maybe restart the function but I don't want to run this again I want to use the mouse and reset this whole thing this would not set up the pygame window over and over and would let you start from a new color let you see a new color Breeze just by a mouse click we use the mouse module last time so let me Define a function reset what reset would do is it would simply reset the C1 C2 C3 variables so let me declare C1 C2 and C3 to be Global variables and reset them just like this okay and if I want this function to be called on a mouse click I would check for an event called Mouse button down and call this functions so whenever I click on Mouse the program restarts let me print Mouse clicked here whenever I click on Mouse you would see this message printed now if I run this I see the color Breeze and if I now click on the mouse I get this message printed Mouse click and the color breeze it's a new color altogether I can see a new color on the screen whenever I click on the mouse so the reset function is working quite fine you can try to work with some more functionalities just like we introduced reset you can add in some more functionalities like you can try doing this with a text if the text color can be changed like a grease or you can add in some music and Rewind the music as in we as soon as we reset the color breeze so please try to work with some more functionalities think of some more functionalities so that you are comfortable with working with all these piety modules I hope you understood what we did here thank you hey everyone we have covered a lot in pi game by now but there are some modules that are useful and are yet not discussed so in this video first we would see some examples of draw module we haven't used the polygon in Arc function yet and then we will talk about the cursor module we will also discuss a program that will be a based requirement in some of the video games so let's get started with the draw module I have this regular code a very basic one and if I want to draw a polygon the coordinates of the polygons vertices are required these coordinates make a regular pentagon here the screen is the surface you want to draw on and green is the color of the shape you can give as many coordinates as you want and it is not necessary that the shape should be regular then to draw an ellipse you will give in the rectangles Dimension and coordinates around which you want to draw the ellipse in case you specify a Square's dimension in place of a rectangle you will end up getting a circle this is basic maths you can also draw an arc using the draw module for that you have to specify the rectangles Dimension basically an arc is from an ellipse or a circle so to draw an ellipse we specify the base rectangles dimensions and hence to get its Arc we will do the same cool along with this we also need to specify the starting and ending angles these angles are in radians it is 90 degree to 180 degree please be careful while working with the units while rotating an image the arguments of angles were in degrees okay please don't get confused now we have used the line function in tictactoe but this is the lines function it allows you to draw continuous lines deviated or undeviated processing through these mentioned points five here is the thickness of the line This false here is used for not getting a closed figure if I make this true I would have a closed figure if possible now let's run this and see if we get the desired shapes so yeah I have my polygon I have the Pentagon I have this zigzag lines made by the lines function I also have my ellipse and I also have my arc you just need to know that the Arc was taken in an anticlockwise direction from 90 to 180 degrees and yeah that's pretty much it now let's move on to the cursor module so we have three types of cursors the system cursor bitmap cursors and color cursors the system cursors are constants available in the module we can have cursor hand cursor no Arrow Crosshair and a lot more there's a complete list of it and this is how you create a system cursor to create a bitmap cursor you specify pygame.cursor.arrow or dot broken underscore X or Diamond this would be a black and white cursor that uses the bitmask arrays and to create a colored cursor you need a surface so we have a surface of size 10 comma 10 we fill the color of the surface with sky blue or any color you like it's the color of the cursor and then you use the cursor class you may note that this cursor class of cursors module is a good example of object oriented programming this 5 comma 5 is the hot spot of the cursor and needs to be within the surface cool I have initialized the system cursor and this is just a way to see both the cursors if I click on the mouse I would see the bitmap cursor and if I input alphabet C from the keyboard I get to see the colored cursor so this was the courses module it was pretty simple let's run this and see the three cursors so initially I can see my hand cursor if I click on the mouse I see this broken X which is a bitmap cursor and if I input C from the keyboard I see my colored cursor cool so these were the type of cursors and now let's see the program I was talking about in the beginning of the video so this program lets you move a picture along your cursor and it is very useful when you want to move a figure in a video game using Mouse so for that you would need to load the image we have done this many times now it should be easy to understand and then I have my rectangular object for my image I have this moving Boolean to save the cursor state now in the events Loop if my event type is mouse button up like I have released the mouse moving becomes false if it is mouse button down then moving is true and I would check if the events position my cursor is inside the image surface that is the rect object and if the mouse touch is in motion and moving is true I would move my rectangular surface along with my cursor or mouse that is my event so if I run this I should see an image that would go that would move along my cursor let's see if that happens so yeah I see my image moving along with my cursor as I move the cursor the image moves along with it and this is very similar to the moving object program that we did but that time we took inputs from the keyboard This Time It's the mouse we are using and the time we used a figure we made our own figure using the draw module this time we are moving an image and we have loaded an image so this was pretty much about this video thank you hey everyone we have seen several applications of the pi game module by now in this video we'll try to make designs on screen using the keys the arrow keys from now on we would make programs that are simple and quick but will help us get a better idea of the pi game module the more you practice the more you see the applications of the pi K module the more you'll get comfortable with it so let's get started I'll import the pi cam module I'll write import file game and then I'll initialize it then I'll set up the screen I'll write pygame.display.set mode and I'll set up this screen size to be 500 comma 500 it fits perfectly in my window and then I'll also set up a caption the caption would be designed since I'm drawing a design using the arrow keys I'll do set caption and write designs then I'll write the while loop don't worry I'll get to the main code later I really like to set up the basic structure first then get to the main code so while true I'll do the for Loop then for events in pie game dot event dot get I access the queue like this the events queue then I'll set up the condition if event type events DOT type equals Spy game quit then I'll call the pie game quit function and also fit so this was the basic structure the main three basic steps that we write in any PI game program now I'll get to the basic code the main code so if I'm saying I want to use the arrow keys to draw a design while I move an object so it should be it should make sense to you that I'll be using the code I'll be writing something similar to the moving object code okay so if I'm saying I want to move an object that would leave a trail and that would draw the designs so I need to describe my figures so I'll set up the initial position so let me take X by two variables and set up the initial position to be 100 comma hundred you can take any position you can take 50 comma 50 or 10 comma 10 then I'll set up the width and height it's I'll describe the size HGT the width and height can be height can be 10 comma 10. then I'll set up the speed by which the figure should displace each time we press an arrow key so let it be 10. I'll also give in a delay I'll write Pi game Dot time dot delay of 10 milliseconds in the while true Loop so that we can observe our object moving properly and it does not rush I hope you can recall this code as we are writing it and you're on the same page as I am then we'll describe a variable key which would be a list it would be a sequence of booleans that would keep the state of all the keys on the keyboard so how do I do that I write by game dot key dot get pressed and this would be a sequence of all the states of the keys on the keyboard and this is how I know which key is pressed and accordingly I'll use it for the further setup so if now I'll set up my conditions if I press the up Arrow key I'll write key Pi game dot k underscore up so that would give me the state of the up button and I'll also write since I am going up I'll write y should always be greater than zero okay and I'll increment I'll decrement y by the speed value since I'm going up okay similarly for down button I'll write Pi game dot k underscore down and Y should be less than the screen size that is 500 minus the height I'll increment right now since I'm going down I'll increment y by speed units now I'll do the same thing for the right and left key Pi game Dot K underscore left and X now I'll talk about X because I'm pressing the left key X should be greater than 0 always and I'll decrement X by speed units I'll do the same thing for the right key I'll write by game dot k underscore right and X should be less than 500 my screen size minus the width okay then I'll increment X by square units since I'm going right okay I hope you remember how we accessed that key list we use the constants the key constants okay and yeah I hope you remember this I hope you can recall all this then I'll draw my figure I'll do buy game dot draw dot rect I'll take a simple rectangle screen is the surface I'm going to draw on then the color would be white it looks good on black background and then the rect values would be the initial coordinates and it says width and height then I'll update this complete thing fine we are done with the code now you might notice I haven't used the screen fill thing why haven't I used it because I don't want any single color on my screen always as my object moves it should leave a trail now okay if I it is the only difference between the moving object code and the design code okay so I hope you get this I don't want any single color on my screen that's why I'm not using screen fill color it's green fill function cool let's run this and see if it works as you want it to so yeah if I now run this I can see the object and if I press the right button it goes right I press down it goes down but press left it goes left and it's working very fine it gives us various patterns as I'm pressing the arrow keys it goes it moves accordingly and this is very useful when we are making maze kind of video game it helps you track your object I hope you got whatever we did in the program you were I hope you were able to recall the things thank you hey everyone so today we're gonna do something new we're gonna display the text that the user inputs so basically whatever we type in we're gonna see that on the pycon window we won't use any new module it's just the utilization of the available modules whatever we have learned till now as per the programs requirements so let's get started so I'll import file game first I'll write import buy game then Pi game dot init to initialize it then I'll have my screen I'll write pygame.display.set mode and that would be 500 comma 500 then I'll also set up a caption my caption would be user input so I'll write Pi game dot display dot set caption user input okay then I'll do the file true Loop the game loop I told you last time that I'll like to make the basic structure first then do the rest of the code then write the rest of the code then I'll have my events Loop I'll write for events in pi game dot event dot get if events type is equal to Pi game dot quit I'll check the condition then I'll quit I'll call Liquid function of Pi game yeah then I'll update this entire thing I'll write pi game.display.date so yeah that's the basic code that's the basic three steps of any PI game program now since I'm saying I want a user inputs I should of course have an empty string to which I'll concatenate whatever the user inputs so let's let me take this user underscore IP as the variable as the empty string then I'll have my font because of course we need to take a font we are working with text and Pi game so please remember how we display text on screen it would be similar to that so I'll write font equals spycame dot font dot sys font and you can take any font you like you can take Georgia aerial calibery I have taken friend script right now and the font size would be 40. cool then since I want a rectangular box in which I'll input the text I will initialize this text box since I want to manipulate this later in the code I'll do the spiking dot I'll use this rect module I'll write pi game.rect and I'll given the arguments the initial position that would be 75 comma 75 and the size of the Box let it be 100 comma 40 so the width is 100 and height is 40 fine okay let's not keep this 40 let's make it 50 because I want a margin of 10 of 5 each at above and below the text so that things don't overlap and don't seem to be clumsy cool then I'll have this active Boolean that will tell me if I can start writing if I can start typing in the text box and what will indicate me this is this color variable so initially this would be purple but when active is true I'll switch this color to Red so that it I can know that I can now start typing whenever I take my cursor to inside the text box I'll see I'll make this active to be true so how I do this I'll do this in the while true Loop and in the for Loop I'll check if my events type is mouse button down then if I'll I'll check if I have clicked my mouse inside that text box okay so I'll write if text box dot Collide point and event start position is is true so I'll make active equals true cool otherwise I'll make active equals false maybe you have clicked outside the screen or outside the box so then active should remain false otherwise it should be made sure if my cursor is within the text box fine and now if I've started typing so I'll write if events DOT type equals spycam dot key down and if active is true maybe it can be the case that you have clicked inside the box and then clicked outside and then started typing so that would not work then you should not get any text displayed so I'll check if active is true and then I'll have these two other conditions if I press backspace so I'll write if events.key equals 5km dot claib underscore backspace I'll slice this string okay I hope you know about Let's uh list and string slicing in Python so what I'll do is I'll make user the string this user underscore IP string as a sliced string I'll slice the last character out of the string and how do we do that we mention the stop index to be minus one so the last character is removed now else if we do not press backspace we write a week if any keyboard input we concatenate that Unicode Okay so I don't need to make several cases for this that if I press this key I should append this or concatenate this to the string I would just write event start Unicode so it is very convenient then I'll fill my screen with the color you can take any color I'll write screen dot fill I'll take pink and now it's time I set up the color and get my indications that I can start writing or not so I'll say if active is true I'll take the color I'll assign the color variable the color red and if it is not if activist false I'll write else color is equals to Pi game dot Color Purple then I'll draw my rectangle so I need to see a box I need to visualize the box so I'll write filegame Dot draw.rect and I want the screen to be the surface on which I draw and then I'll have this color variable the color of the box then the parameters of this rectangular box are given by text box cool and you of course need to mention the split otherwise you'll see the entire box to be of the purple or red color according to the situation I don't want that I just want the border to be of some color fine then I'll have this surface on which I render my text so you can see I have not rendered it here above but I'll render it in the while loop because every time the user gives an input I want that text on the screen so I've rendered it here and not above outside the while true Loop so I'll write surface uh surf is equals to font dot render and what is my message what do I want to output on the screen it's the user underscore IP variable that string I want antialiasing to be true and the color of my text I'll take it to be orange you can take any color fine now let me get this surface surf variable on to the text box so I'll do screen dot lit and what I want to get on which surface I want to get surf this text on my text box and I'll have a margin of 5 units so that things don't overlap so I'll write text box dot X so I've accessed the initial X position x coordinate and added 5 to it and then I'll write textbox.y so I'll increase the y coordinate by five to have a margin of 5 units and then yeah then I'll also do this thing let me write the code first then you might understand I'll write textbox.w so I've accessed the width and I'll take the maximum of 100 my default width and the search variables bit so surf is my Surface the text surface and I'll use the get with method to get my current width of the text and add 10 to it again to have a margin on so that things don't overlap so what I have done is Maybe whatever the default size of my text box is you outgrow that maybe whatever the text you have input that's longer than your default box size so if my text is smaller than the width the default width fine no problem and if it is greater than the default width it'll take the width of the text cool and then I'll update this I've already written this and then I'll set up the frame rate since I've taken the clock object already I'll write clock dot tick and 50. fine so if I run this now I see a purple outline box and if I click I take my cursor inside the box I see the border to change its color and become red and I can start typing now I can type in anything and you can see after a certain length when the width of my text increases the width of the text box also increases so that's what it does this Max function on the 38 line it lets you decide when to increase the box size a rectangular box size so everything is working as we wanted to we can type in easily and yeah that's pretty much it about this program I hope you understood whatever the code was whatever we wrote hey everyone today we're gonna create a button in pi game let's first think what a button does so that you have the basic idea what we've been doing in the program how would be coding so whenever you click a button click on a button a certain task is performed a function is called so here this function is going to be quit function by pi game to keep it simple and easy whenever I click on that rectangular button on the screen the program should stop and the pi game window should go away also I would like to add in a functionality whenever I hover over that rectangular box over the button there should be a shade change there should be a slight color change so that I can know the user can know that right now the cursor is over the button cool so let's start coding as usual I would Write the basic steps first and then get to the main code so let's import Pi game I'll write import Pi game I'll initialize it right Pi game dot init then I'll set up the screen I'll write I came dot display.set mode 500 comma 500. the screen size then I'll also set up a caption so my caption would be by game button and then I'll have my game Loop I'll write while shoe prevents in pygame.even dot get if events.type equals spygame dot quit I'll call the quit function and then I'll update this entire thing I'll write Pi game dot display dot update so this was the basic code now let's get to the main code since I want a quit button I should have quit written over that rectangular box that would be my button so for that I'll use the font module of course I need to display the text width so for that I'll write font equals spygame dot font dot says font and let me take the phone charger and the font size to be 40 let's keep it pulled and then I'll render this over the surface so I have the surf variable I'll write font dot render and my message and my text would be quit and I want antialias to be true and then the color of this text let it be white fine then I'll have this button that would act as the rectangular box that that would be my button so I'll initialize its initial position and its size so I'll write Pi game dot direct that it's initial Position will be 200 comma 200. kind of in the middle of the screen and its size be 110 comma 60 so its width is 110 and its height is 65. then I'll fill my screen with some color you can take any color I have taken pink then inside this for Loop I'll put in this mouse button function functionality I'll I'll check if my events type is mouse button down if I'm using my mouse and check that my cursor is inside this button this rectangular box okay and how would I do that I'll write if button dot Collide point in brackets they are given would be event start position and then I'll call the quit function I'll write Pi game dot quit fine so this is how I checked if my cursor is within this rectangular box is over the button and if it is so if it has been clicked then I'll call the pi game quit function fine now since I wanted to add that color change functionality that hovering and shading functionality I'll get my mouse position I'll get my mouse coordinates the cursor's coordinates so I'll write a comma b equals spygame dot mouse dot get position so a would be the x coordinate and B would be the y coordinate to avoid confusion I have taken a and b because we'd be already using the X and Y coordinates of my button that rectangular box so let's not have any confusion so my mouse coordinates the x coordinate of my mouse is a and the y coordinate of my mouse is p fine now I'll check if this mouse coordinates if these Mouse coordinates are within my box so for that I'll write if button dot X the x coordinate of my rectangular box is less than equal to a the x coordinate of my cursor is less than equal to button dot X which is the exponent of rectangular box plus 110 that is the size of my rectangular box that button fine and also I want button dot y the y coordinate of my rectangular box to be less than or equal to B the y coordinate of my mouse of my cursor to be less than or equal to button dot y plus 60 so the y coordinate of my rectangular box plus 60 because that's the height okay I hope you can visualize this you understand this and then if it is so I'll draw a rectangle I'll do I'll write python.shaw.rect and screen is the surface I want to draw on I'll given this color this is a lighter shade of gray and the Direct Value is given by button fine and else if it is not so if the cursor is outside this button then I'll given this color a darker shade of gray that's the default color okay and then I'll get my text on the surface button by using blitz so I'll write screen dot BLT surf is the surface of the text and this is for having margins for I've done plus five with the buttons initial coordinates so that I have a margin and things don't overlap the text doesn't overlap with the borders okay then I'll update so I've already written that let's run this and see if my button works so now if I run this I can see my quit button and if I hover over this button I see a shade change it's a lighter shade of gray whenever I hover over this my cursor is over this button and if my cursor is outside somewhere not on this button then it's a darker shade of gray cool so if I click on this button the program should stop let's see if that happens yeah so the window went away and uh the program stopped so I call the quit function using this button you can call any other function you can call in the function to play a song you can call in the function to display a text so this was all of it and I hope you understood how to create a button by a game thank you hey everyone by now we have seen several applications of packing we have practiced a lot we made designs using the arrow keys displayed user inputs on screen we also made buttons in pi game in the last video today we will program an animated Circle so the circle would move around on the piking window let's write the code for it I'll import buy game initialize it then I'll write Pi game dot in it then I'll set up the screen right screen equals buy game dot display dot set mode at the screen size b500 comma 500 then I'll also given a caption I'll write Pi game dot display dot set caption let the caption be animated Circle and then I'll go to my game Loop I'll write while true you should be very comfortable doing all this because by now we have written this a lot of times and then I'll have my for Loop I'll write four events and buy game dot event dot get I'll check if events type equals spygame dot quit then I'll quit we'll call the code function by piking and I'll put it I'll update the screen right by game dot display dot update that's the basic framework let's get to the main code since I want my circle to move around I'll need its initial position let that initial Position will be 5 x comma Y and equal to 200 comma 200 you can take any starting position I have taken 200 comma 200 then I also need to set up the speed along both the directions so along X Direction let it be XP and let xp be equal to 5. and along y direction Let It Be y v and equal to minus 5. so what is this Clause of plus and minus if you're giving the speed along the X direction as positive it should your object should go towards right otherwise it should go to left if the speed is negative similarly for y direction if you're giving the speed to be negative it should go upwards and if it is positive the speed is positive the object will go downwards okay so the speed would tell you how much the displacement would be at a time then I'll have my clock object I'll write clock equals Spy game dot time dot clock to set up the framework frame rate later now I'll have a screen color I'll write screen dot fill so let me fill my screen with color sky blue then I'll also need to draw the circle I need I need to move around so I'll write pygame.shaw dot Circle and screen is the surface I'm gonna draw on then the color will be orange then the center coordinates are given by X and Y X comma y then this radius let it be 10 units okay now after this for Loop outside this I'll increment the X and Y coordinates so that I can see my circle moving on the screen so I'll write X plus equals x v I've incremented x coordinate with X Cube V units by XV units and similarly for y I'll write y plus equals yv and to keep these x coordinates X and Y coordinates within the boundaries within the screen I'll write if x is greater than 490 or X is less than 10 I'll change the direction okay how do I do that I'll change the sign okay I'll change the sign of the speed you can even reallocate the position but that would look like the circle is appearing out of nowhere at a sudden position that won't look nice so I want the motion to be regular and fine so that's why I'll be changing the direction rather than relocating that coordinates okay similarly for y I'll write if Y is greater than 490 I'm keeping a margin of 10 units or Y is less than 10 I'll change the y d cool now after that I'll update and have my clock object I'll write clock.tick let the frame rate be 50. let's run it and see if we get what we really want to see if we can see our Circle moving uniformly let's run this now if I run this I can see my circle moving around in various directions changing its direction as it hits the boundaries and everything works fine if I quit the screen goes away so this motion of the circle is not defined in the next video we will Define this motion of the circle the path along which the circle moves would be some function so this was pretty much it for this video I hope you understood whatever we did thank you hey everyone as I told you in the last video we would animate the circle along the graph of a function that's what we are going to do in this video we will try that our Circle Moves In A Sign pattern the function I've picked a sign if you don't know how a sine wave looks like this is what a sine wave looks like you can see that along the xaxis you have the Angles and along the Y it is the sine value of these angles and it looks like a suicidal wave so you need to given these angles in the sine function and you can easily find the y coordinate for the sine function we will use the mark module and we'll give in these X and Y coordinates as the argument while we draw the circle so that will put our circle at the required position and the output motion would look like a sine pattern fine let's write the program now I'll import Pi game I'll write import Pi game then I'll initialize it I'll write Pi game dot in it then I'll set up the screen redpygame dot display dot set mode and I'll given the screen size to be 1000 comma 500 I've taken such a large width so that I can see a number of waves and I can easily observe that sign pattern formed by the ball then I'll start my while true Loop I'll get to the game Loop I'll write while true for events in parking dot event dot get if events.type equals spygame dot quit so I'll check in the condition I'll call the quit function buy game dot quit and I'll quit and then I'll update this I'll write buy game dot display dot update cool so this was the basic code let's get to the main code now since I said I'd be using the math module I'll write import math I'll import math I'll import the math module now you should think that from where we will given the inputs from where we should find the x coordinate y coordinate we can easily find the y coordinate because that's just the sine function of the x value so where we will get the x value from we will get it from the time okay but you might say that if we get the running time of the program then it will exceed continuously and we won't see our ball once it has passed our screen for that I'll use the modulo operator I'll find the Times modulo by thousand this is how I'll write it so the get text method gets me the amount of time for which the program has been running right after initializing Pi game otherwise this won't work if you haven't initialized by game this won't work okay and I'll also divide it by a number I'll divide it by three so that I can get a slower speed the ball doesn't run away and I can notice that the ball moves in a sign pattern fine then let me put this x equal to T okay and for y I will put it into the sine function so I'll write math DOT sign T by 50 in 200 plus 200 okay so the I've divided it by 50 for the wavelength so I want to keep shorter wavelength so that I can see many waves and I can easily observe the sign pattern now if you increase this you can increase this to 150 then the wavelength would be increased and you will see less number of waves this hundred is for defining the amplitude if you increase this the amplitude would increase and if you decrease this the amplitude will decrease 100 defines the amplitude so 100 is the amplitude of my wave and I've added it with 200 so that I can see my wave in the middle of the screen and not add some Corner otherwise the sine wave will overlap with the boundaries okay then I'll fill my screen with some color and I'll draw my circle let this green fill color be pink and I'll use the draw module to make the circle so screen is the surface I'm going to draw on I've given a color then X and Y are my coordinates and then be the radius of the circle then I'll update I have already written this so let's run this and see if we observe our Circle in a sine pattern so yeah I can see my ball or Circle moving in a sign pattern it's very similar to the graph I showed you before now if you can't observe it what you can do is you can wrap this line screen dot fill just to observe for once the assign pattern of the ball you can rub in this line screen dot fill I hope you remember we did the same thing while we wanted to draw patterns using our object using the arrow keys we wanted to see the trail of our object drawn here too the trail that is the sign pattern to see that you can rub in this line now if I run this you can actually see the sine graph and so yeah our ball moves in a sign pattern now you can use other functions also like a sign or tangent from the math module so this is it for this video thank you hey everyone today we're gonna do something different we would use classes in order to make a pi game program rather a game so I would try to build a collision game I would have this bag and if he hits the bricks falling from above the game is over simple okay so in pi game we have a Sprite module for working with classes Sprites are objects if you don't have much idea about classes and objects in Fire game basically they are a convenient way of dropping data and code into a single entity Sprite module is a very good way of working with classes in biking what I would do is I would first have a man class that would be of this Sprite type and I will also have a brick class now both of them must have the init function where I load these images and get their tangler surfaces then we would have the move function in both the classes we would move the man by giving key inputs from arrow keys and the movement of bricks would be programmed and the initial position of the bricks would be randomly picked by the random module Now using the stripe module I would check in the game Loop if there is a collision between these two image objects if there is I would display the text came over okay now let's start writing the code for it so let me write the basic code quickly I'll import file game then I'll initialize it I'll write Pi game dot init then I'll set up my screen like screen equals Spy game dot display dot set mode and the screen size is 500 comma 500. then I'll set the caption I'll write by game dot display WhatsApp caption and the caption Let It Be Collision game okay now for the while loop I'll write while true for events in pygame.even dot get Dot event.get if events.type equals by a game dot quit I'll call the quit function by pi game I'll fill my screen with some color all right screen dot fill White and I'll update this let me use the flip function I'll write pi game.display.flip and I'll yeah that's a basic code now let's write the main code let's get to the main functions of our game now since I said I'd be working with random modules because I need the bricks to be falling from randomly falling from anywhere so I'll import random module 2 I'll write import random then I'll have my clock object I'll write clock equals Spy game dot time dot clock that's my clock object to set up the frame rate later and I would need to set up the speed variable for the movement of bricks this is just the initialization we'll use this later you'll get an idea why we have initialized it here and I also need to display that text game over so I set up the font I'll write font equals Pi game dot font dot sys font and that will be Georgia and 60 as the font size cool so I have these variables initialized so let's get to the two classes I talked about the brick and the man class so let me Define the brick class first I'll write class brick so that's how you define a class in pi python and since I want to inherit the Sprite class I'll write pygame dot Sprite Which is the module dot Sprite Which is the class okay Sprite is the class in this Sprite module okay so it might be confusing in the beginning but just try to think and understand you'll get a hold of it okay now I'll have this init function I'll Define init I'll write def underscore underscore net underscore underscore on self okay so I'll inherit this Sprite class so I'll write super dot in it for a dot in it it's away in Python how we inherit the classes base classes okay so now I'll load my image I'll write self dot image equals spygame.ms.load you should have a little basic idea of classes in Python otherwise it might be too much for you to handle for now because we are already working with pi game that is new for you and then we are again having a new thing that is classes so you might not get comfortable with it so please try to understand the classes first and then get to the python code fine so I'll write self dot image equals spygame Dot image.load so my image is in Collision folder it's just how we displayed an image in pi game earlier just the difference is that right now we are doing this in a function inside a class okay then I'll Transform I'll scale this image of mine I'll write self dot image equals spygame dot transform dot scale self image what I need to transform what I need to scale is the self image and I need to scale it to size 40 comma 40. okay then I need to get the rectangle so I'll write self.rect these are just variables but of per class so that's how you write it I'll write self.rect equals self dot image dot get react I got the rectangular surface and I need to define the center so my Center would be randomly picked for these bricks falling from above so I've used random.rand end 40 comma 500 minus 40 I have kept margin of 40 either side just so the boundaries and the bricks don't Collide they don't overlap okay and yeah then I'll Define the move function for the movement of the bricks how they have a motion right they are falling from above so I'll do it I'll write self dot track dot move in place and the arguments are zero comma speed so my speed was five and I'm just giving a speed in the y direction because I want it to fall from above and there should not be any movement along the x axis the brick is just falling from above directly towards the ground and move in place what is move in place does is from an object's coordinates it moves it with respect to that position uh what the speed we have mentioned okay so like if the coordinates right now are 400 comma 400 and I've mentioned 0 comma speed as the move in place arguments after this function is called the final coordinates would be 400 comma 405 okay I hope you get what I'm trying to say and I'll put in some conditions that once the brick has traveled the entire screen and not hit the man okay then what should what should happen I'll write if self dot Shrek dot top is greater than 500 now I just quickly wanted to show you what this red top and Dot Center means which coordinate of the entire rectangle I'm talking about you can see it in this picture so I hope you get the idea what is dot top which coordinate I am talking about and what is Dot Center there are two different coordinates of the rectangle okay now if it is so if the rectangle stop coordinate is greater than 500 that is it is out of the screen now now I should reallocate this top coordinate to zero and the center should be randomly picked again okay again I have kept a margin of 30 and 100 over here so that things don't overlap okay cool now I'll have my man class again I'll write class man very similar to the above class and Pi game dot Sprite dot Sprite okay then I'll have my edit function again I'll write itself in the argument with the super keyword I'll inherit the Sprite paste class and again load the images but I'll load that image of scared man now it is in the Collision folder so accordingly I've mentioned the path then I'll scale this right my game.transform DOT scale selfimage 100 comma 150 okay okay I'll write self.rect equals cell dot image dot capture to get the rectangular surface and Define its Center is this the initial coordinates of the image that I've loaded of the scared man let it be 200 comma 420 okay and then I'll Define the move function how my how the man moves okay so since I'll be taking inputs from Keys the arrow keys from the keyboard I'll again write Keys equals to Pi game dot key dot get pressed so I hope you remember this was a sequence this was a Boolean sequence that contained the state of all the keys on the keyboard if it is true then that key is being pressed now I'll check if keys by Cream dot k underscore left then I'll write self.tract dot move in place minus 5 comma zero so I want to move it towards the left okay so I'm subtracting we discussed this earlier in earlier programs that if we want to move left we'll decrease it decrease its coordinates okay so I'll decrease it by five and if keys by game dot k underscore right cell dot Shrek dot move IP 5 comma C okay so if it is if I if I press the right key if the user has pressed the right key the man will move towards right with five by five units okay now I'll declare objects of this man and brick class M1 I'll write M1 equals man and B1 is equals to Brick so this is how we declare objects in Python of a class so these are my two objects okay and now I'll have a variable bricks I'll write equals Spy game dot Sprite dot group so I'll declare this bricks to be a group okay so what a group is it's a Sprite module uh functionality it's a container class to hold and manage multiple Sprite objects okay now to this group I'll add B1 Okay so this is a brick scrub okay and to that I have added P1 that object that brick object okay now I'll have another class in which I'll put everything all the objects that I've declared okay now all Stripes equals spygame.spright.group again this is another container class okay and I'll add M1 and B1 to the script you'll get it in a minute why I have declared these groups okay bricks and all Sprites now let's get to the while true Loop now for entity in all Sprites screen dot bled entity dot image comma entity.rect entity dot move okay what I have done is I'll Traverse all that is there in the all Sprites group that is why I've declared all Sprites variable because I need to put each of those objects on the screen so that is how I've done it I'll write screen dot BLT entity dot image entity.rect so I've got that image on that rectangular position on this screen okay now ndd.move I've called on to that move function in the respective classes and according to the move function my objects would move my images would move and I'll also now is the main part I'll check if that Sprite objects collide with any of the other object okay so I'll write if Pi game dot Sprite because it is a Sprite module um function dot Sprite Collide any it's a simple test if a Sprite in sex anything in a group okay so M1 comma breaks okay M1 is the man we have only one man but we'll have a number of bricks okay and then if it is so if this returns true then I'll render the font that I declared above I'll write text equals font dot render what is my message it is came over I want antialias to be true and the color let it be orange fine then I'll get this on the rectangle so text direct equals text Dot get tracked Center that will be 500 double slots two so I got this text at the center of the screen and I'll use split again to get this text on the rectangle I'll use dot flip function so that I can take this and just so I can visualize this effect I can see this text but the game is over I'll use this time module I'll write time dot sleep for two seconds so that I can see that the game is over and then I'll quit okay otherwise you'll just see the game over text is blinking and going away and the screen goes over okay that wouldn't look good so I'll also need to import time module I'll write input time yeah that's it so I'll also need to set up the frame rates I'll write clock.tick and 40 let the frame rate be 40 okay now let's play this game and let's see if everything works properly as we have defined now when I run this I can actually see the bricks falling from above I can move the man using the left and right arrow keys I guess the speed is a little slow so let me change the frame rate to 60 so that it the game becomes a little fun to play and a little complex so the bricks are now falling faster and when the man and the brick collides the game is over I have this text and the screen goes away automatically after two seconds cool so this was it for this program and you can also think about how you'd gradually increase the speed so you can think of levels for that you might need to declare some user events please think about it please look for what you can do and this was it for the program thank you hey everyone today we're gonna talk about another General function of a character in a video game if you have a player in the video game you might need to add the jump function you might need your player to jump so that's what we're gonna program today let me discuss first what we will do in the program we will have this rectangle made by the draw module then we would use the key module to move the rectangle up down left and right and we will have one more key that we would use to jump space bar so let's code all this I'll import Pi game I'll write and pour it by game I'll initialize it and I'll set up the screen I'll write screen equals spygame dot display dot set mode and the screen size is 500 comma 500. I'll given the caption I'll write Pi game dot display dot set caption and let the caption be jump then I'll do my while loop I'll write while true for events in pygame dot event dot get if events DOT type equals spygame dot quit then I'll call the quit function by pi game and I'll quit I will also set up my screen with some color right screen dot fill this is a lighter shade of green and then I'll update this I'll write 5game.display.update and I'm done with the basic frame structure now I would need to set up the basic variables that I would use in the program so one would be the size height width and the initial position of the rectangle I would move around so you can use the right class or you can initialize the parameters just by taking variables and so I've used the right class I'll write my rect equals Spy game dot Direct let the initial position be 200 comma 200 and the size the width V10 and height B20 you can even take a larger rectangle then I'll do I'll have the speed variable Let It Be 5 the amount of distance the rectangle travels at once and I'll have this jump variable which would be a Boolean I'll set it up to false so that I can know when the object has to jump or not you'll get the use of it later in the code then you have this jump C variable which is equal to 10 I'll put this equal to 10. this is the jump speed amount of distance a travel travels at once when you jump or you will click the space bar so we will use this later in the code now inside this while loop I will Define the movement of the rectangle drawn I'll write keys equals spygame dot key dot get pressed so here's the Boolean sequence as we have discussed a lot of times by now it stores the states of the keys on the keyboard as true or false if the key is pressed its state is true now accordingly I will check in which direction the object should move this is exactly the same thing as we did uh in moving an object so try to write this piece of code yourself it would help you practice I'll check for uh the left Arrow key if the left Arrow key is pressed I'll write if keys in square brackets by game dot k left so this is how we access the state of the left Arrow key and my underscore rec.x so this is the x coordinate of my rectangle the object is greater than zero then I will decrease the x coordinate of the rectangles by speed units so I'll write my right dot X I have access to x coordinate minus equals speed okay I hope you remember if you need to go towards left side then we decrease the exponent now for the right arrow key I'll write if keys pygame dot k write I've accessed the writer okay and my rectangle dot X is less than 500 minus direct dot width DOTA blue would access your width this is just for keeping the rectangle complete rectangle within the boundaries I will increase the x coordinate by speed units so I'll write my erect dot X plus equals split now check for the up key so I'll write F if Keys Pi game Dot okay underscore up and Magic is greater than zero I'll access the y coordinate now since I am talking about vertical motion I'll write my direct dot y minus equals speed okay this is the normal motion of the rectangle okay I also need to talk about the down key if Keys Pi game dot k down and my react dot y the y coordinate is less than 500 minus my red dot h since we are talking about the vertical motion I have accessed the height not the width here my attack dot y plus equal speed since we are moving downwards okay okay fine so this was something we had already done but now we'll move on to the jump function part so I'll write if jump equals false I'll check if jump is equals to false this is the initial condition right now and then I'll check if keys and basically I have pressed the space bar I'll write if Keys Pi Kim dot k underscore space I'll access this state of the space bar if it has been pressed I'll make jump equals to true now okay I'll reassign its value so if you actually analyze what would happen when the rectangle jumps it would cover a lot of distance vertically above more than it normally covers when we press an arrow key so I'll put this in the else condition let me write it first if jump C is greater than equal to minus 10 I'll check if the object is back at its place my rect.y minus equals jump C into absolute jump C into 0.5 jump C minus equals 1. so let me explain now you should get that if the rectangle is jumping we will decrease the y coordinate just like the up Arrow key but by a larger value so that value is product of jump C into absolute jump C and 0.5 and after each decrement of y coordinate I will recommend the jump C by 1. jumpsuit keeps the count how many times the there would be this kind of y coordinate decrement now you can think once the jump C value decreases and reaches zero you need the wreck to come back to its original position but for that he will increment the same that you decremented to the y coordinate so here is the role of this absolute function since jump C is negative if you don't use the absolute function you will end up decrementing more and the rectangle will not come back to its original position so all this will basically run a loop till the jump C becomes minus 10. as we went up 10 times you need to come back the same amount of times okay now else I will write jump C equals 10 I'll reassign jump C and jump equals false so I have reassigned these two variables just in case you click on the space bar again the space bar is pressed again the values are reassigned okay now I'll fill the screen with some color and I'll draw the rectangle now that would be moving around screen and I'll give in some color let it be purple and my rec.x myrec dot y my rect.w and my Vector test okay so these were the parameters x y w and H with the parameters of the rectangle I would draw okay now this is it for this program let's run this and see if the rectangle jumps so here is the rectangle I made and I'll press the space bar first okay so rectangle jumps very well and the forward backward and down and above keys were fine left right up and down Keys work fine now you can even combine the two keys if you press the space bar and the left or right arrow key the there is a combined motion you can see like this it's a kind of a parabolic motion okay so yeah this was it for the program and I hope you understood whatever was done thank you hey everyone today we're gonna again display text on Pi game window but on several lines so that would make use of some basic python but with pi game so that's going to be a little different than what we usually do to display text on screen let's get to the code right away I'll import Pi again I'll initialize it right by game dot init then I'll set up the screen I'll write screen equals Spy game dot display dot set mode and let the screen size be 800 comma 500. then I'll give in the caption I'll write by game dot display dot set caption let the caption be text then I'll get to the while loop I'll write while true for events in polygame dot event dot get if events DOT type equals spygame dot quit then I'll call the quit function by pie game and I'll quit then I'll fill the screen with some color I'll write screen dot fill and let it be pink and then I'll update I'll write Pi again dot display dot update so we're done with the basic structure let's get to the main code now since I want to display some text I need to Define that so let me take this variable text let it be equal to a string I will write hello everyone slash n so I need to indicate that there is a new line beginning we are trying to display text on Pi game window okay so that's my text that's that is what I want to display on the screen since I want to display the text like usual I'll have this font variable I'll write by game dot font dots's font and let the font be ink free you can take any font and the font size b60 you can take any font size now just think what would be different while rendering text in different lines how would it be different from just displaying text on screen so when we display text on screen usually you might have noticed if the sentence is a bit long it runs out of the screen and it is not visible so we need to check after rendering each word on screen if the screen is ending here if not we can print the next word in the same line else we would move to the next line okay so for that I would need to Define this display text function I'll write def display text and I'll given the argument surface on the surface on which I want my text then the text the message I want to see on the screen the position POS the starting position of my text from where I want my text to start the font of the text and the color okay so in this function I would get the word separately in a list and render them one by one while checking the screen's ends okay so for that I'll have this collection variable I'll write collection equals four word in text Dot split lines so what I have done is this text Dot split lines would split this text the message you have passed in to the argument into several lines into several elements of a list so hello everyone would be one element of the list and we are trying to display text on Pi game window would be another element of that list that's what we have and we would be traversing this list so it has two elements right now and then to get each word here what I'll do is word dot split has given the argument as the space and I'll put this entire thing in a in square brackets so that it becomes a list so basically this would be a 2d list as the text split lines would already give you a list and in that list you further use the split method that makes another list of words for each sentence okay now to given space between different words I will have the space variable I'll write space equals font dot size I'll given this space as argument and zero so font dot size and any character in the argument would give you a tuple which has the width and height of that character you get that right for a font two characters would not possibly have the same width and height so 0 would give you the the zeroth element of that Tuple would give you the width and the first element of that Tuple would give you the height right now I am just working with the height because that is the amount of space I want to leave between in between two words while rendering two words okay then I have this x comma y equals position so this X and Y would keep a track of current position and it would be used for checking if the screen has ended and to move to the next line okay now we'll uh Traverse this collection to the list I'll write for lines in collection and forwards and lines now I will render the text I'll write word underscore surface equals font dot render words comma true abundantly asking to be true and the color that I passed in the argument for this function that will be passed here so I have rendered this text the word I am accessing each word now and I have rendered this word on a text on a surface on a rectangular surface now after rendering we use split usually but before that I need to check if there is still space or the word would be rendered in the new line okay so for that I'll get the width and height of the surface I just rendered I'll write word underscore width word underscore height equals word surface get size so this would give me two variables the width and height of the rectangular surface that was just declared and I'll check if there is a need to go on to the next line so I'll write if X Plus word width is greater than equal to 800 so X was my initial position from where I wanted to start the text and adding that to the word width would be like the entire width of the text if it is greater than or equal to 800 now that position that x coordinate if it is greater than equal to 800 the width of my screen okay then what I'll do is I'll reassign X I'll write x equals position 0 the x coordinate of the first word and for y since I want to go to the next line I'll increment y by the word height okay I hope you get it that to move on to the next line there is no such thing while rendering text on Pi came any lines no lines are there so I'll increment y by word height so that will give me a new line okay now after checking the condition I can use the blit function I'll write surface dot delete word surface comma X comma y so X comma y would be the position where I want this rectangular surface this word surface to be there and so I got the rectangular surface on the screen and to update X every time I will increment it by the word bit and space that was the width of this space okay so let me write this down I'll write X plus equals word width Plus space okay now outside this inner for Loop I'll reassign X if the line is finished but there is still space then you need to go to the next line okay that's what a new line means so I'll reassign X I'll write X is equals to position 0. and I'll increment y by word height just what we did when the screen ended okay that was our function display text function so inside this while shoe Loop I'll call on to this function after screen dot fill I'll write display underscore text I'll pass in the arguments screen is the surface I want my text on I have the message I want to print as text variable so text would be that message and I'll start from 20 comma 20 that position then I have also declared the font variable and let the color be purple for the text okay so this was it for this program let's run this and see if we get the text in two different lines so you can see that we have our text in two different lines so after hello everyone there is still space but since I have a new line so the next line was printed onto a different line okay cool so we got the text as we wanted it to now what if you don't have just two lines but a complete paragraph and you are out of lines the screen height is completely filled here we managed to get the text on a new line when we were out of screen width but what if we run out of height you might think of resizing the screen think about this try to write a program to solve this problem I hope you understood whatever we did in this program thank you hey everyone today we're gonna discuss making custom user events sometimes while making a video game with pi game you might need to create a custom event so we're gonna make two easier events one that is initiated by the user and one that works automatically so I'll have a rectangular object that will inflate to a certain size when I hover over it and the other event would be the screen changing its color alternatively let's write the code for it now I'll import Pi again I'll initialize it I'll set up the screen equals spygame dot display dot set mode screen size that if I wanted comma 500 and then I'll also given the caption I'll write by game dot display dot set caption and let the caption be custom events then I'll get to the wild shoe Loop I'll write while true for once then Pi game dot event dot get if events DOT type equals Spy game dot quit I'll call the quit function by parking and I will quit I won't write screen dot fill right now I will do that later there's a clause to it I'll get to that later and then I'll update this I'll write pygame.display.update okay now outside this file true Loop let's get to the main code now let me Define the two user events two custom events so let the color changing event be called color I'll write color equals spygame dot user event in capital and plus one so that is how you define a custom event then I'll have another event the Box crew Event I'll write box underscore grow equals spygame dot user event plus two so that's the second event so I've done plus two okay now I'll set up the background color to white to check the next color of the screen what color needs to be filled next it will be used later in the color user event when we Define it and I'll have this grow variable of Boolean type to know when the cursor is hovering so that accordingly the rectangle can inflate and deflate this also would be used in the Box scroll function since I told you I'll be having a rectangle so let me Define it I'll use the record class again I'll write box equals pygame dot correct let the initial position be 255 comma 255 and the size before T comma 40 now here I'll be filling in the screen color okay so I'll write screen dot fill and let the color be white initially so this is like I have just initialized the screen color because in one of my events that color changing event I would alternatively change colors of screen if I put this in the while loop it would render a single color regularly okay because there is a loop okay then I'll have my clock object to set up the frame rate later I'll write clock equals Spy game dot time dot clock then I'll call on to the color change in function because it would be automatic so I'll make use of the set timer method by the time module I'll write Pi game dot time dot set timer the event would be color and comma 500 milliseconds so that would be the interval okay in what interval I want to call on to this event now in this events Loop I will Define these events that I initialized up above so I'll write I'll check if events dot time equals color if background color this variable this which was initially white if P3 underscore color equals pink then I'll fill in the screen with pink color and I'll make the PG color equals White and else if background color is white I'll fill the screen with white color and I'll reassign background color value I'll make it Pink so that would help me to alternatively change the colors of the screen okay then I'll check in for the Box scroll event I'll write if events.type equals box underscore row I'll check this Boolean grow if it is true I'll inflate the Box in place we discussed the concept of in place earlier so I'll write box dot inflate in place let us inflate it by four comma four the X and Y coordinates with the same amount same units since I said I would grow the rectangle to a certain size I would check the box width if it is less than 80 you can take a larger size if it is not I will let grow to be true else if the box is larger than the size I will make row Falls I won't use the nested if I would simply write grow equals box dot width is less than 80. I'll check if box width is less than 80 and accordingly grow will have that true all false okay now for the else condition if grow is false I'll deflate the box so there's no such function for deflating but we can inflate but with the negative units so what I'll write is I'll write box dot inflate in place minus 4 comma minus 4. so we'll be subtracting this four units from the x coordinate and I'll write Crow equals box dot width is less than 40. now if the Box decreases to a size of 40 or less grow will become true again okay now since the Box scroll event should only be called when I hover over the rectangle I'll write outside this for Loop I'll write if box dot Collide point I can write this for a rectangle class pie game dot mouse dot get position in the arguments this would be checking for the cursor's position so basically I am checking if the cursor is over the rectangle what I'll do is I'll call on to this box grow event I'll write by game dot event dot post by game dot event dot event and I'll call on to box crew okay after that I'll draw my rectangle I'll write Pi game Dot draw.rect and in arguments screen orange let the Box color be orange and box but with my rectangle and after this update function I'll call on to the tech function to set up the frame rate let the frame rate be 40. now let's run this code and see if we could really create some custom events so the screen changes its color or automatically alternatively and when I hover over this rectangle it changes its size as we have defined it inflates under plates accordingly so everything is working fine we could actually make constant events so that was it for defining custom events I hope you understood how we Define custom events thank you