welcome to programming knowledge so in this tutorial series we will learn about flutter so flutter is basically an open source UI development kit created by Google it is used to develop applications for Androids iOS Windows Etc so to get started open your browser and then open flutter.dev then click on get started and then over here the installation process is pretty much same I'll show the installation process for Mac OS and the windows users can ignore the xcode part okay so I will go to Mac OS and over here there is an option to download flutter underscore Mac OS underscore V 1.12.13 dot zip file so first of all we need to download the zip file okay now once downloaded we can unzip it wherever we want so I have unzipped it in my documents section under a folder called development tools over here I have unzipped the flutter SDK and I can see all my datas are over here ok so now for the development purpose one thing that is very important for both Windows and Mac users is Android Studio so first of all go and download Android Studio the process to download Android Studio is also mentioned over here in the Android setup section so while with the Android Studio is downloading let's discuss a little bit about flutter so flutter is one of the emerging development software because if we want to develop an application for both Android and iOS we had to keep two different code bases and double the work in maintaining the app and Bug fixes but with flutter a single code base runs on both the platform however to develop for iOS you will need a Mac OS system so once Android Studio has been installed we will try installing xcode so for that I'll go in the xcode section that is IOS setup and over there I'll just open my terminal and copy and paste both the lines one by one once done we need to export our path to the system so for that I'll copy this from here the export line will be different for Mac OS and windows so the windows users can check accordingly so I'll open my terminal and paste the command and over here I'll change this to users my username then the documents section and over there I have a folder called development tools and inside that I have flutter and Bin so I'll hit enter now I'll create a folder called flutter projects and all the projects that we do in flutter I'll store it over there so I'll I already have one I will just navigate to it now over here I'll write flutter doctor so then the doctor will start running and it will tell that if the everything is installed properly or not if you are running for the first time it might take a few moments so over here you can see we have Android tool chain some Android licenses are not expected not accepted and we have no connected device we can ignore this xcode error over here okay so the system is fine we can start working with flutter so to create a project we write the flutter create and then the project name keep in mind that a flutter project cannot have dashes and capital letters it can only have underscore and small letters then I will hit enter and it will start creating my project so once done open Android studio and then go to open an existing Android Studio project and then I'll simply navigate to flutter projects and the demo app that I have just now created and then I'll hit open so if you first open a flutter project it will ask you to download some extensions so click on download and once done we need to set up an emulator so for setting up an emulator we go to tools and then avd manager and over here I have already created a virtual device called flutter device and if you are new you can go to the create virtual devices and then select any of the preferred sizes you want click on next and then the Android version you want to use then click on next and give the divisor name okay so once done it it should appear something like this and then click on this green arrow button so if you click on the green arrow button you can see that the virtual device has started so once the emulator has been set up correctly you can run your application by clicking on the Run button over here it is not showing in my case because I don't have the sdks installed so the another method to run a flutter project is go to the terminal and then navigate to the project folder in K in this case it is demo and then write flutter run but before writing flutter run we can write flutter doctor to check if the Android device is connected properly so now you can see we have connected devices one available so now we will try running our app I'll write flutter run so once done don't quit the process and go to the emulator so you can see this is a prefabricated screen that comes with flutter and whenever I click the plus button over here the counter gets increased by one OK and now for Mac users you can also open the simulator and run the flutter code so now if we already have a project running and we want to quit it we just need to press Q and then it will say application finished now to open a simulator we write open space Dash a space simulator dot app and this will start a simulator on our screen and then again if we write flutter run then we can see the same application in our iPhone now before moving forward I would like to tell you that the programming language used by flutter is dot so that is a programming language that is developed by Google and it is a CL and it is client optimized okay so you can read more about dot by simply coming to dot dot d e v over here you see the documentations you can read about it and in the website we also have a environment to test our Dart code Okay so this was for the video see you in the next tutorial thank you welcome to programming knowledge so in this tutorial we will start with the basics of dot Dart is the official programming language that the flutter framework uses I will be using dot pad to write all my dots code so Every dart program's basic requirement is a main method main method is the entry point of every DART program we can write the main method like this main followed by a parenthesis set of parenthesis then curly braces and over here we write our code we can also add a void over here if needed void basically specifies that a method or function will not return anything we will study about functions in details later in this tutorial so after main method we let us discuss about print so to print anything on the console we use the keyword print and then the parenthesis then single quotes and then we can write the sentence that we want to be printed on the console so for this case I am writing programming knowledge and Then followed by a semicolon now if I run this program in my console I would be able to see programming knowledge so you can see programming knowledge is visible in my console now if I change the text over here the output in the console will also change suppose I write my own name and then click on run so now the console is showing my name like python we can also use double quotes and triple quotes to print blocks of statements after print let's discuss about data types so there are five to six primitive data types namely int for storing integer values float and double for storing decimal values cap for storing character string for storing group of characters and bull for storing Boolean values that is true and false now in dot there are four types of variable declaration the first type is static declaration in static declaration we write the data type for followed by the variable name let's call it V and then a semicolon we can store values to this variables by writing V is equal to and inside quotes reshuff over here we have written string that means the variable V can only store string values now let's try printing it so to print I'll write print V followed by a semicolon and now let's try running it so it is showing reshuff we can merge these two statements together so to merge we will write now again if I try running the program we will get the same output but over here it has changed from variable declaration to variable definition the basic difference between variable declaration and variable definition is that in variable declaration we tell the compiler that the program will have a variable V of string type but in variable definition we tell the compiler that the program will have a variable V of string type and reshuff will be stored in it after static declaration we have Dynamic declaration over here Dynamic refers to the data types that is a variable can store values of different data types we declare a dynamic variable by writing VAR V and then the values so in the first variable I am storing a string in the second variable I am storing an integer and in the third variable I am storing a decimal okay now I'll try printing them so I'll write print V then print V1 then print V2 now if I click on run I'll get I am getting the output as reshuff 10 69.69 over here where automatically changes to type of data stored in it and memory to the variables are allocated during the compile time and to check if I select V over here in the documentation I get string if I select V1 I get integer and if I select V2 I get double okay so after static declaration and dynamic declaration the third type of Declaration is constant declaration as the name suggests variable declared constants cannot be changed so to so to declare a constant value we write c o n s t const see is equal to 10. now we can print the constant values if I click on run it will give me 10 as the output and now if I try changing the values if I write C is equal to C plus 1 and then if I print it it is giving me an error error this is compilation failed that is because I have tried to change the value of a constant variable over here ok so after this the last type of Declaration is again Dynamic declaration over here Dynamic refers to allocation of memory during runtime for example suppose we want to show the exact time when the program is executed then if we use where or string to store time then the value will be the time at which the program was compiled and not the time when the program was executed so in such cases we use Dynamic variables so to you create a dynamic variable we write Dynamic and then the variable V and then we can add the value as N1 required okay so this was about variables I hope everything was clear thank you welcome to programming knowledge so today we will learn about type conversion so first let us try about converting string to integer but before that I would like to tell you one thing that for writing comments we can use double slashes and write an inline comment and we can also use slash followed by a star and then again star followed by space and then over here we can write blocks of code and then the final one is three slashes and over here we can write the documentation okay so back in the program let's try converting string to integer so to convert string to integer we write we create a variable where one and then I will write int dot parse and inside this will be my string value so suppose I enter 1. now to check if one has an integer value so we will write a sort 1 equals digit 1. assert is a builtin function to verify that the thing is as required or not okay so now let's try adding some value to 1. if it is an integer it will add without any problems over here I have written the wrong spelling it will be assert now if I try to run the program you can see 11 is the output so over here you can see we have good when one as a string input then it has been converted to integer and then I have added 10 to it and then printed so 10 plus 1 is 11. now we will try to convert integer to string integer to string so for that I'll create a variable to store I will write 1 is equal to 1 which is an integer dot to string okay now if I add some values it should be concatenated to the end of the variable so I will write 1 Plus plus equal to Risha and now if I try printing it the output is one reshuff that means this integer 1 is converted to string and then Reserve is added at the end of the string 1. so this is how we convert an integer to string now to convert a decimal to string we have two methods first is the one similar to which we have seen just now where 1 is equal to 3.1234 that is the decimal or double value dot to string and the other method is where 1D is equal to 3.1234 dot two string as fixed 2. so this basically means that the string will have only two decimal places so let's check that and you know to check that we use assert keyword and then we will write 1D is equal to so as we have converted it to string we will keep it inside quotes 3.12 and now then we will try printing so we'll write one D now if I click on run the output should be 3.12 so you can see the output is 3.12 so this is how we convert an integer to string string to integer decimal to string and also how to trim the decimal places after type conversion let's discuss about operators so let's start with unary operators so first I'll create a variable a and store tenant now to add some value to a we can write a is equal to a plus 10 so what this will basically do is add a 10 to a and then again store it inside the variable a let's check it by printing it so the output is 20. similarly we can do for minus the output is 0. and it will be same for multiplication as well as division so we can reduce the length of the code if we want so to reduce we will write a is equal to a plus equal to 10 so this will also do the same purpose that is to add 10 to a and then again store in it so if I run this the output should be 20 similarly for minus for multiplication and for division next type of operators is increment and decrement operator so if I write print a plus plus and then again print a the output will be 10 and 11 that means first this statement got executed then the value of a was incremented by 1 and then s value became 11 and it got printed here but if I give the plus plus before a and then if I click on run the output will be 11 and 11 that means before the execution of the statement a got incremented by 1 as you can see in the console similarly for my decrementing we can use minus minus now if I click on run the output will be 10 and 9. that means first the statement got executed then the value was decremented and now similarly if I put minus minus before a and run it then the value will get decremented first and then the statement will be executed after unary operators we have relational operator so to learn about relational operator I'll create two more variables where B is equal to 5. where C is equal to 15 and one more variable where D is equal to 10 so to check equality between any two variables we write if a is equal to equal to D that means if a equals D then print true so the output is true and now if I change this D to B and then click on run now there is no output because we do not have an else condition so I'll write else print false now if I click on run the output should be false we will learn about if and else in details in the for future tutorials we will learn about if else in details later in this course so after checking equality there is an operator that checks for greater than equal to case so I if I write if a is greater than equal to B then the output should be print true else print false now if I run this the output should be true that is because the B has five Stone stored in it and a has 10 stored in it so as 10 is greater than 5 this condition is true and now if I change to D then again the output will be true because a has 10 stored in it and D has 10 stored in it so a is equal to D so the condition is true and now if I change it to C the output will be false because 15 is neither greater than nor equal to 10. now after this we have less than equal to and if we run this the output will be true that means 10 is less than 15 which is true and now if I change it to C itself then also the output will be true that is because 15 is equal to 15. now after this we also have only less than that means 15 we have to check if 15 is less than 15 so the output should be false as 15 is equal to 15 but not less than 15 and now if I change it to D the output will be true as 10 is less than 15. and if now I change it to greater than then the output will again be false as 10 is not greater than 15. so this is how we use relational operators now another type of operators is logical operators so there are three types of logical operators the first one is logical and and its symbol is and and it checks and it returns true if both the conditions are true otherwise it will return false so let me check if B is D is greater than b so if this is the condition let's see what is the output so the output is false as you can see D is less than C that means 10 is less than C that means this condition is false and this condition is true and as I told you and returns true only when both the conditions are true as one of the condition is false it returns false and the else statement gets executed and now if I change it to greater than that means now both the condition will be true and if I try to run it the output should be true and as you can see the output is true now the next type of logical operator is or operator and the sign is this now our operator returns true if any of the condition is true so suppose and if both the conditions is true it will always give true as the result so now if I run the output will be true and now if even if I make one of the condition false the output will still be true that means if one of the condition is also true the output is true and now if I make both the conditions false then the output will be false and then the final type of operator is not so over here if I write a is not equal to 10 then the output should be false but as you know the a is having 10 stored in it so the output is false because 10 is equal to 10 and not not equal to 10 I hope are you on you are understanding so this was about operators see you in the next tutorial thank you welcome to programming knowledge in this tutorial we will continue with operators so the next type of operators are called null aware operators so for explaining this I'll create a class num and it will have a variable or you can also call data members num and it will have a value of 10. we will learn about class in Gradle detail later in this course now after that over here I'll create a variable and and to initialize a class we just write num that is the class name followed by parenthesis this is also called Constructor then after that we'll create an integer variable no and now we will check if n is not equal to null null stands for empty reference then no is equal to n dot num that means to get the data member num from the object n where n is an object of class num and then we will print n so now you can see when I print n it is showing instance of num and if I print No it should show 10. so you can see 10 is the output now suppose we have not initialized this and then if we try running then it will show null that means that no value is stored in n so now instead of if else we can use the null null aware operator so for that we will write n o is equal to n question mark dot num and try running it the output is again null but we over here we do not have to write the if else what it basically does is it checks that n is null or not if n is not null then it extracts the value from data member num and stores it inside and so now let's try see the difference by initializing n over here I'll write num now if I run this the output should be 10. so you can see the output is 10. now we will see another type of null aware operator so now I'll change it back to null and now along with this I'll add two question marks and give a 0 and now if I try running this the output will be 0 this means that if n is null then this will be the default value and if I again write num that means call The Constructor and try running then the value will be 10. and then the final type of null aware operator is this it is written by two question marks and then an equal to so for that I'll remove this class I don't need it anymore I'll create a integer variable no and not initialize it and now over here I'll write print no double question mark equal to 100 what this basically does is if no is null then it will store 100 in it and now let's try running this so you can see 100 is stored in no now the last type of operators are ternary operator so I'll create a main method and I'll create an integer variable 5 and another integer variable 6. and now for the ternary operator I'll create a Boolean value Bool ANS is equal to no greater than no one so this is the condition and if the condition is true we will set the value to true else the value will be false and now let's try printing the answer okay sorry the T will be small so you can see the output is false that means 5 is not to greater than 6. this type of expression is called ternary operator where three operators are used over here The Operators are A and S no and N 0 1 the functioning is this is a condition and if the condition is true then this part is executed else this part is executed so this was about operators after operators now we will move to conditional statements so in dot there are two types of conditional statements one is if else and the other one is switch case so to study about if else I'll create an integer variable you know and store 100 in it and I want to print even if the number is even otherwise I want to print odd so for that I can use an if else so inside the if I'll try to divide it by 2 and get the remainder and if the remainder is 0 that means it is completely divided by 2 that means it is an even number so I should print even otherwise I should print odd odd should be inside quotes and now if I run the program the answer should be even and now if I change it to 1001 the output will be odd and now if I want to have more than one condition then over here I can write else if so for that I'll write else if n o divided by 3 and the remainder is equal to 0. then I will print divisible by 3. else print odd so now if I change the number to 99 which is divisible by 3 you will see the output is divisible by 3. so if I run it the answer is divisible by 3 so this is how we use if else for checking some conditions you can add as many else if blocks you want but if and else block can only be used once after if else we have switch case so in switch case we use the keyword switch and then we need to pass a number or character that will be checked so I'll be using number in this case and then we will check the case a case 0 that means if n o is equal to 0 then I want to print zero zero should be inside quotes followed by a break break s the control outside of the switch case now after that I'll check for another Case Case 100 that then print 100 and then again a break and then finally we can have default and there we can print not 0 not 100 and we don't need to give a break because we are as it is at the end of the switch case so now let's try running this program as the number is 99 the default case should be executed so if I run this the output is not 0 not 100 and now if I change it to 100 the output should be 100. and if I change it to 0 the output is zero so this is how we use conditional statements in Dot I hope everything was clear thank you welcome to programming knowledge so the next thing that we will study in Dart is loops so basically there are five types of loop the first Loop is for Loop so the syntax of for Loop is very much same as in other programming languages we have the keyword for and then we create a variable where I is equal to 0 that is initializing a variable then setting the range I is less than 10 and then increment or decrement and then inside this we write the code that we want to execute so for right now I will be printing programming knowledge and now if I click on run programming knowledge should be printed 10 times so you can see it has been printed 10 times so this is how we use for Loop another possible way to use for Loop is setting this value to 10 and checking that I is greater than 0 and instead of incrementing decrementing The Operators and now if I run this code the output will be exactly same so these are the two methods in which we can use for Loop the next type of loop is called for in Loop so I'll just remove this so for in Loop is basically used in collections we will study about collections later in this course but for now I'll just create a list and store one two three in it list is a type of collection that stores more than one values under the same name and now to run I'll write for where X where X is a variable that I have created in no that means X will have the have 1 2 3 every time the loop runs so now if I print x 1 2 3 should be printed so you can see the output is one two three now the next type of loop is for each Loop for each Loop is also used on collections so just for example I'll write n o that is the variable that we have created dot for each that is a method and inside that it returns and that is each value inside the no list and then it should perform some tasks so to write which task to perform the first given equal to then a right arrow and then we write the statement print and in this case so now if I click on run 1 2 3 should again be the output now suppose we want to call another function so for that I'll write avoid print num it takes a value num and then prints it to the console so now instead of this print statement I'll replace it with my method name that is print num and it takes a value num which is nothing else then n so now if I try to try to run this I will get the same output now the next type of loop is while loop so for that I don't need this function now I'll create a variable integer type variable Nom and initialize it to 5 and now I want to run a loop while num is greater than 0 so to run a while loop the keyword is while and now over here I will just simply print the number and then decrement the number by one and now if I run the loop I'll get the output 5 4 3 2 1 so this is how we use a while loop now the next type of loop is do while loop so for do while we first try to do and then inside that the code that every time the condition is true should be executed so I will just print the number then num minus minus and then after do we have while num greater than 0. and now if we run the code we will get the same output now the benefit of do while over while is that even if the condition is true even if the condition is false the loop gets executed once suppose the condition is suppose the number is 1 that is already less than 0 so now if I run the loop will get at least executed once so the output is minus 1 but if we use while instead of do while this will not get executed now if I click on run the console will be empty so this is the difference between while and do while now another thing that is important while studying Loops is break and continue we have seen break in switch cases and now we will see that in a more elaborate way the basic concept of break is that wherever break statement is executed the control comes out of the loop so suppose I have number 10 and I want to print only till 5 but my while loop has the condition till check still zero so what I'll basically do is I will check if num is equal to equal to 5 then break and the print statement will also be there and the decrement statement also so now if I click on run it should only print till 6 I guess yes so you can see the output only till 6 is printed because as soon as num value became 5 this condition became true and break was executed so as soon as break was executed it came out of the loop so that was about loops I hope everything was clear thank you welcome to programming knowledge in this tutorial we are going to discuss about collections in Dart there are basically three builtin collections that ships with DOT one of them is list list is very similar to arrays that we have in most of the other programming languages we can define a list by writing the keyword list and then the name that we want to give to the list and a pair of square brackets so in this manner we have created a variable of list which has a name name and it has been initialized and it has no values in it and suppose if I want to initialize with certain values inside it then I can simply write them inside the square brackets and to add more than one value you can just separate them by a comma so over here I have a list name which has two values stored in it reshuff and RAM so list also follows the basic indexing concept that we have in most of the programming languages except Pascal Photon Etc that is the indexing starts at zero that means this rishab is stored at an index 0 and Ramesh is stored at index 1. so to print the values at a certain index we just need to write it inside the print statement and followed with a square brackets and inside square brackets we need to write the index and now if I click on run should be printed and now if I change the index from 0 to 1 Ramesh should be printed and over here I can also change this list to VAR and it should not give us any error this is because that with the help of type inference uh automatically converts this variable name to a type or to a list type which has strings values stored in it now we can have values of more than one data type stored in the stored in the list so to do so if I write 100 which is an integer and if I also try to add a double value then this will work and it will not give us any error so if I click on 100 should be the output now suppose I want to Loop through each of the values then the most easiest way is to use a for each Loop so for that highlight where I in name and then inside this I'll just print I and then I should be able to see all the values that I have inside the list and now if I want I can also change the values at a certain index in the list so if I want to change the value at index 1 in the list name then I can just simply change it to Suresh and this should work and I can and it is not necessary to change a string value to another string value only we can give it a integer value also and now if I click on Run 1 2 3 should be displayed instead of Suresh so it is working fine and now suppose we want to have a list that only stores string then what we can do is we can change this where to list and after that inside angular brackets I'll Define the data type that means only string values should be there so you can see the red line below this integer and float values it is basically there because we have defined the list as as a string values container list and it cannot store integer and double so if I remove this then it will not be a problem now if I click on run rishab and Ramesh should be printed now let me change it back to war and I'll remove this comment and then I want to change the value at index 1 from Ramesh to one to three and then if I click on run then it is changing okay and now suppose I want I don't want to change the value at runtime so what I can basically do is I can put a const over here which makes the values stored inside the variable name as a constant so now you can see over here I am declaring the variable name as a constant and after that I am trying to change a value so if I run this it should give me an error so over here you can see uncut error unsupported operation indexed set and now if I comment this again and try to run this then this should not be an error now after that suppose I want to copy this list to another variable so for that I'll create a new variable end and I'll just simply write name and over here in the loop I'll change this name to n and now if I click on run the output will be same ok but now if I change the value of name means any value of the list name then the values in list n will also change okay so it is giving me an error because I have a const over here so I'll just remove the const for now for the explanation purpose so now if I click on run it is still giving me an error it is because I have missed a semicolon over here so now if I give the semicolon and run this again so over here you can see that if we change the values stored in the variable name then the values stored in variable n is also changing so basically over here it doesn't copy the set of values but both the list variables point at the same location that is the location of the data in the memory So to avoid this we have a special function that is prefabricated in dot known as spread operator JavaScript developers might be familiar with this so over here what we basically do is we surround the variable name with square brackets and before writing the variable name we just simply give three simple dots and now after assigning if we change the value of the previous list or the original list then it will not be reflected in the new list so now if I click on run the output should be reshuff and Ramesh so this is how we get the two different copies of a list so this was for list see you in the next tutorial thank you welcome to programming knowledge in the last tutorial we discussed about lists and in this tutorial we are going to discuss about another collection that is called set so suppose I want to define a set of elements so I'll write elements and to initialize a set we give a pair of curly braces and inside suppose I have two values for instance hydrogen and oxygen okay so now over here I have defined a set elements that has two values hydrogen and oxygen and to iterate through each value we can simply use the for each Loop so for that we write for where X in halogens then simply for now let's print the value okay now if I run this hydrogen and oxygen should be printed in the screen okay my mistake instead of elements I have written halogens over here so now if I run this hydrogen and oxygen should be printed okay so another feature of set is that if we have duplicate values then it gets removed automatically so for instance suppose I add another hydrogen okay and now if I try to run this we'll get a single hydrogen printed on the console okay so this is a feature of set that we use while programming in flutter okay so the next thing about set is that to initialize a set if we write something like this which is correct according to the basic convention okay now if I try printing its runtime type so first of all to print the runtime type we write element Dot runtime type and semicolon over here and now if I run this so it is giving me an error because an S is missing right over here and now if I run this the output is Hash map but our task was or our assumption was that this will initialize a set so this is a common mistake that everyone does okay so the curly curly braces stand for a hash map and if you want to initialize a set then we can just add a data type over here or the data type of the values which we are going to store and now if I run this this should change from hash map to Hash set okay and yet another method is we can write instead of where we write a set over here okay now if I run this the output will be again hash set OK and I can also predefine the data type that will be stored in that set by writing like this and now if I run the set again says hash set but instead of dynamic now it has string over here which means it can only store string values okay so moving on this was about set the next thing that we are going to discuss is map that is yet another collection provided by Dart and it is very much similar to dictionaries in Python and hashmap in Java and for different languages there is also some reference to this type of collection okay so you understand that how much important this map collection is okay so to create a map We rise for suppose say I create a map student okay that has a key value pair okay so the key is name and the value is my name okay then a comma then the another value that is another key that is H and the value is 20 so Mark over here I can store different data types as my key and as my value let's say the third value is email okay and the answer is my email okay so now over here I have a student map that has three key value pair the key is named the value is rishabh key is age the value corresponding to that is 20. the key is email and the value corresponding to it is my email okay and now suppose I want to print a particular value so that can be done using the key okay so suppose if I want to print my name so inside print I'll first write the map name and then inside square brackets I'll write the key name Mark over here I have my key as a string so the key over here is also a string okay and now if I run this reshuffs should be the output okay so this was about map and over here we finished the collections now moving forward the next thing that we are going to discuss is functions or you can also call them methods if they are inside a class so over here this void main is itself a method itself a function the most important function in any DART program this is where the compiler will start executing the code from okay so now suppose I create another function a very basic function called sum okay I am writing Dynamic before that that defines the return type and dynamic stands for the value will be assigned the data type will be assigned during run time okay so the return type will be dependent on the inputs that we give okay so if I write where N1 comma of our N2 okay now simply I just return there sum so I write N1 Plus N2 and now over here I call this method and since it is returning some values so I need to store it in a variable or a shorthand of a shorthand method will be I directly surrounded with a print statement so that the return value directly gets printed and then sum I'll pass two values 1 comma 2 and now if I run this 3 should be the output okay and similarly as I have Dynamic over here it is not confined to integer only I can also pass a decimal value which will be considered as float over here and I get a float output and I can also pass a string over here so suppose I pass two strings Kumar and if I run this rishab Kumar will be the output that means string concatenation has taken place okay now the another feature about functions in Dart is that if we have a single line function then instead of writing it like this we can use the shorthand method that Dart provides that is giving an equal to sign then a right angle sign and then just writing the operation that we want to provide and in this case it is N1 Plus N2 and we don't need to write a return statement over here and now if I run this the output will be the same okay and let's again check it with an integer if I write one comma 2 sorry now let's run this and you can see 3 is the output so this type of function is common in all types of programming language and this type of function is called positional functions that means the first parameter will be stored in the first variable defined inside the parenthesis and the second parameter will be stored in the second variable decided in the parenthesis okay and the next type of arguments are called named arguments where we do not need to worry about the order okay so to make it a named argument I'll just put curly braces in between the parenthesis and the variable names okay and now I can pass any value as per my choice okay so I I want to pass the N1 value so I will just write the key name give a colon and the value comma similarly for the other parameter I'll write N2 that is the key name and a value ok now similarly if I run this the output will be 3 again okay and now the basic flexible flexibility that it provides over here is that I can change the order in which I want my value to pass okay so suppose I want to pass N2 as reshuff and n one as Kumar so now my output will be Kumar rishabh ok but if we would have gone by the positional method then rishabh Kumar should have been printed but because we are using named arguments we are getting this flexibility to change the order of parameters that will give as an input to any method okay so this will be it for DOT deep dive in the next class we will start with exploring flutter and widgets that we have in flood thank you welcome to programming knowledge so in this tutorial we are going to discuss about all the files and folders that ships with a flutter package so as you can see the first folder is dot dot underscore tool so it has some basic tools that we use in our developer console and we will see what is a data developer console in one of the videos okay then the next folder is dot idea and it has the basic Android Studio configurations which are used when we run the project on an Android Studio IDE then after that we have dot vs code folder so this folder is created by vs code which is the IDE I am using right now and this folder will only be created when you change some default settings and we can ignore this for now then the next folder is the Android folder so as the name suggests it has all the files that supports the Android functionality so it is a super important folder it contains all the files which are used by flutter SDK to run our flutter app on Android devices and Android emulators it is a passive folder which is created by flutter itself and we generally don't need to change anything inside the folder except when we want some variation in Android and our IOS app then the next folder is the build folder so it is also an important folder it holds all the output files and the generated resources and it is also a passive folder then the next folder is IOS folder so it is also similar to Android folder except as the name suggests its Target device is iOS if you are using Windows then you may or may not have this folder as it is not allowed by windows but if you are using a Mac OS system you will be able to see this iOS folder and what it basically contains is an xcode project xcode is the official development ID for Apple devices then the next folder is the lib folder as the name suggests it stands for library and 90 percent of interaction that we will have with this or any flutter project is via this folder this is the folder where we add all our DOT files and write codes for our project then the next folder is the test folder and as the name suggests it is used for writing test for the project and that is done when we move from development to testing so it is not our main concern right now after that we have this dot get ignore and it has all the version control settings and if you don't know what is a Version Control then you can do a quick Google and get your answer then after that we have dot metadata and Dot packages so it is system generated and we don't need to worry much about them okay and then next we have this demo dot IML so it is a project it is the file that has the same name as the project we will not work with this file also it is just a file which works with internal dependencies and stuff and the similar goes to pubspec Dot Lock then the next one is pubspec dot tml so it is a file in which we will be working over here we can configure all the third party packages that the project will use similar to the app level build dot Gradle that we have in Android we also configure other things such as fonts location images and stuff then back to pubspec.log so pubspec Dot Lock is generated from pubspec.tml and it basically has a more structured settings than pubspec.tml okay so these were all the files and we also have a redmi DOT MD so over here we can specify something about our project and if we are sharing our project we can add some data over here so that the developer whom we are sharing to can read this and understand okay so these were all the files that we have in our flutter project and now let's open our main dot dot file okay and let's see what is our prefabricated application has okay so to run any flutter project I can simply go to run and then click on run without debugging we can also use this start debugging but it is a slower process okay because in debugging we need to add some break points and all okay and we are not in that complex level of flutter project so I will simply start with run without debugging and then over here you can see the debug console has opened and it is writing launching and the basic requirement is over here you can see I have a flutter device that means an Android device connected to my system OK and if you also want you can use an iOS emulator instead of an Android emulator okay but I'll go for an Android emulator right now and let's wait for the Builder to finish so once the application has started running we can see we got something like this on our emulator now the basic UI designing that we do in flutter is done via widgets that means that everything that we see on the screen is a tree of widgets for example the text that we see on the center is a widget the app bar is a widget and The Floating Action button is also a widget and they all are the branches of the root widget which is the screen which is also referred as scaffold in flutter okay so that means scaffold is the root widget and the center text Floating Action button app bar all are the branch widgets of the scaffold root widget okay and all these widgets have their sub widgets also like the app bar has a text widget that displays the text on the app bar the center widget also has a text widget which displays the text that you see on the center similarly The Floating Action button has an icon widget so as to specify which icon will be displayed on The Floating Action button and similarly we can also have a text widget if we want to display some text below this icon in our Floating Action button okay so now if we go to our main dot dot and if you look for build method over here you can see first of all we have the scaffold widget okay that means our parent Widget the root widget then we have the app bar widget which is a branch of the scaffold widget and then inside this F Bar widget we have another widget that is the text widget and over here we have with Z dot title that basically displays the text that we can see on the app bar then after that we have this body inside scaffold and body refers to the entire screen leaving the app bar ok then inside the body you can see Center that means the our elements will be displayed in the center then we have a child column main axis element we will discuss about these things in later in another tutorials then after that you can see we have our text widget over here and you have a text written you have pushed the button this many times which is similar to the text that we see in our Center widget okay then similarly this text also where we have dollar and underscore counter that stands for string interpolation which we have discussed in one of our Dart Deep dive videos what basically happens that the values stored in this counter variable will be displayed at this place after that we have this Floating Action button OK and it also takes an icon widget and it displays the add icon okay now over here you can see our application also has some functionality that means if I click on this plus button over here the value will keep on increasing okay so how does this happen this happens that inside the floating action button we have a parameter called on pressed okay which calls underscore increment counter which means whenever this on pressed method is called then this increment counter is referred to by the on pressed method so if you look in the file for this increment counter over here we can see that this underscore increment counter is a method and the underscore which we have before the method name or variable name refers to that it is a private member of the class okay so inside this method you can see we have something called set State we will discuss about this later and we are incrementing the value of underscore counter and it is the same counter which we are displaying in our text okay so now just to check I want to increment the value by 2 instead of 1 so I'll just write counter plus 2 okay so now if I'll save this this will be build automatically over here you can see okay this will take a few minutes if you do it for the first time once done if you go back to your application and if you click on this plus then instead of incrementing by one it will increment by 2. okay so this is the basic structure of any flutter application we will start building the application from scratch in our next tutorial thank you welcome to programming knowledge so as I told in my previous video that in this video we are going to start making an application from scratch so for that first I'll select all the code that was free prefabricated by flutter and remove them okay and now in our Dart Deep dive videos we have seen that the maximum code that we were writing worth starting from this main method and which is true which is the most common convention that is followed from the functionality point of view which means for competitive coding or stuff like that but our Target is to show UI elements on the mobile screen and for that we need to follow the convention specified by the flutter team and that is to create a class and inherit certain properties now if you don't know what inheritance is it is basically inheriting features from a predefined class and we can only add features and use the predefined features but we cannot modify them okay so now let's say I create a class and to create a class we need to write the keyword class where C is small and then the class name for instance I give my class name as my app okay and then a set of curly braces and to inherit any other class we use the keyword extends okay and this x extends should be written after the class name and before the curly braces okay and the class that we are going to extend or inherit properties from is a class not created by us but provided by the flutter SDK which which you can see is added in our pubspec dot EML file over here you can see we have this dependencies section and the dependency that we have added is flutter okay so to import any Dart file in our uh main.dot or any other dot file okay so we write import there is a keyword import and then the file that we are going to use is material dot dot okay so as you can see it is inside the flutter package that means it is provided by flutter and what it basically has is a whole bunch of widgets to use and the Base Class widget which allows us to use this widgets is called as stateless widgets so over here I'll write stateless widget now stateless widget is not the only Base Class that allows us to use widgets in our custom defined class there are more which we will learn in other videos so now over here you can see I get a red line below this my app okay that means there is some error in the program and over here it is specifically because we are missing some methods and functions which should be inside this class and namely the build function okay so instead of this the another method that you can use is just write s t Okay and then the flutter will itself tell you to click suggest you to this flutter stateless widget and if you click on them then you can see it automatically creates a class over here you can give the class name okay that extends a stateless widget and inside this it has a class that is called build it takes a parameter that is build context and it returns a widget okay so over here it takes a near positional parameter that is context which is of type build context okay now it is having more red lines okay so the it is because we are not importing the material package over here okay so for that I'll again write material dot dot and once it is done you can see all the red lines are gone okay and now over here it is written return container okay so we will discuss about container a little later okay so now the first thing that we need to return is a material app okay a capital now which whose basic task is to show all the widgets that you write inside this as an UI element in the app now one thing you need to remember is that out of all the other named parameters that it takes one most important parameter is home okay and whatever Widgets or widget tree that we send as a value for this named parameter will be the first thing that will be loaded on the screen as we build the app okay and then later we can toggle to different screens which are in flutter is called rooting or routing for now let's just send a text with jet and to do that we write t e x t as in text and mark the capital T and it takes a string as the parameter which will be displayed on the screen so for now let's okay programming knowledge as the text okay now text widget also has other named parameters which we will use in the later videos okay but as you can see I have no name before this string and that is because it is a positional parameter which means it is compulsory to send okay and along with this we also have some named parameters okay which we will be using later and these are not necessary to send as we have discussed in our Dart deep type video now let's see this in action and for that we need to write a void mean okay and then inside this I'll write run app okay so this run app is also a method provided in material dot dot and then we need to write my app inside this run app method and then I also need to give a set of parentheses because I am passing it as a function so as to tell what it needs to run okay and now as you can see it is a oneliner method okay so we we will use another method to declare the function okay the one liner method okay so I'll just cut it from here and then I'll give an equal to a right angled bracket and then simply paste this okay and now if I run this I will be able to see something on my screen okay so I just need to save and it will hot reload automatically so as the app starts running you can see the text is in red and it has two yellow underlinings okay that means the code is not correct okay and that is because as we discussed in the previous video that the root of every widget Tree in flutter is a scaffold okay and over here you can see I am directly passing the text instead of scaffold okay so what you can do is you can uh pass a scaffold and inside scaffold you can pass a text as the body okay or else we will see this in the next video thank you welcome to programming knowledge so in the previous video we started discussing about stateless widgets material app and the text widget and we passed this text widget as a parameter to this home argument and then when we were running the application we were getting the text in red and it has two yellow lines below it okay and this generally happens when there is some error in the code so the error over here was basically that we were making the text as our home widget which is not correct because the home takes the root widget and as we have discussed in previous videos that the root widget needs to be a scaffold widget okay so instead of passing a text over here I'll pass a scaffold OK and now if I save this you can see that the text is gone and no error is present in the console okay so now let's add some widgets on our screen and the first thing that you will see in maximum mobile applications is an app bar so to add an app bar we write app Mark the small a app bar and it takes an app bar widget over here the A is capital okay now this app bar widget also takes a few parameters and as we want to give an app or a title we will call the title parameter and as we want our text as our title we will again use a text widget over here and as we have discussed in the previous video that text takes a string over here which is compulsory to give okay and that is also verified when you hover over it you can see that the documentation says that it takes a string data which is compulsory and then all the other values are inside curly braces that means they are named parameters and they are not necessary to give okay so now let's give this programming knowledge okay and now if I save this I will be able to see an app bar with the text programming knowledge on it okay and here you go you see you have a text programming knowledge and this blue check section is your app bar okay and now if you are wondering where did this blue color came from as we have not discussed or not specified any color over here so let me tell you that blue is the default color in every flutter application okay but if you want you can also give a custom defined color okay so to give a color you need to come out of the text widget okay but be inside the app bar widget and then call the property background color okay and then the background color takes a parameter called colors okay so now colors is an enum okay that has a collection of colors which is prefabricated with flutter and if you don't know what is an enum then that is not a problem as we will discuss about tenum in great detail in our upcoming videos okay so for now let's just say that colors is a keyword and if we hit dot then you can see all the colors that this colors enum has or that means the colors which are fabricated by flutter okay so let's say I choose red okay so now my background color is red and now if I again save this and go back to my application you can see the app bar color has changed to red okay then the next thing over here is okay before moving to the next thing you can see that all the code we are writing the maximum code is written in a single line okay and it is not very much formatted okay so to format you can give spaces manually here and there give enters press enters here and there but there is also a shortcut we can use a keyboard binding that vs code provides us okay to so to know what is the keyboard binding we need to go to code preferences keyboard shortcuts and then over here if you look for format then you will find a command called format document and then the key binding over here is your shortcut key so for me it is control command and F okay so I'll apply that in my main dot if I write Ctrl command F so you can see everything got formatted on its own okay so now the application looks more structured okay so now after the app bar we can also add a body okay so now this body is the space that is left after the app bar okay so the entire screen space excluding the app bar is our body okay so for now as we have seen in the prefabricated app we have our text and Center okay and so to display anything in Center we have a widget called Center so we will call that widget and then this widget also takes some parameters and over here you can see it takes a child parameter so I will call this child parameter and what all values it takes you can say it takes a widget and that is the child widget okay so for now let's just pass a text and now you all know that the text takes a compulsory parameter that is a string that gets printed and let's give my name okay you can give your name so now our body has a center and it has a text called rishab Kumar now again I'll format it and then save it okay so once saved you can see I have a text called rishabh Kumar in the center okay so over here you can see this is called a widget tree that means I have a scaffold as my root widget it has two branches app bar and center the first Branch app bar has another Branch text okay and it has on one more Branch as colors okay then the second branch that is body it has a child branch called text okay so this is how branches are increased and we design our app we design our application okay and now you can explore about more parameters more functionalities about app bar body and if you want to do so all you need to do is after the comma hit control space okay and then all the values that it takes will be available to you like the center text height Factor key and width Factor and in the app bar if we hit control space you can see it takes an actions actions icon theme automatically imply leading bottom okay so these are some functions that you can if you will hover around then you will ever be able to know what it is about so suppose if we choose bottom and if we over hover around bottom so then you can see this widget appears across the bottom of the app bar ok so for now let's try adding an icon and see where it appears okay so to add an icon we again call the icon widget okay and then this icon widget also takes iron compulsory parameter and that is an icon data okay so icon data is not something that we need to worry about that is present in icons enum okay so this is also an enum and we will study about enum for now enum is uh icons is just a keyword and if you hit enter you will be able to see a lot of icons that it has and for now let's just say add okay which is the plus sign as you can see over here okay and now it is still giving an error and if you Peak on the problem it says the argument type icon can't be assigned to a parameter type preferred size widget okay so this means that we can't give an icon to the bottom okay but that is not the problem over here I just wanted you to know how to explore all the other things that it has okay and so you can do that now okay and then we will add The Floating Action button and some functionality to this application in the next tutorial thank you welcome to programming knowledge so in this video we are going to discuss about two very important widgets okay which are not the UI elements but are very essential while designing the look of the screen okay and the first one is column and the basic use of column is that we can give more than one widgets to column and they all appear in a column that is one after another okay so to use a column first I'll remove this Center that I have over here and instead of that I'll write column okay and it takes a children and which is you can see over here of type widgets okay so inside this we can give a list of widgets that we want to display on the screen okay as the body so the first one is a text okay okay so this is a text now along with text I also want to add a button so first I'll give a comma and the next widget will be a button so to add a button in flutter we write flat button okay and it takes a parameter child as in what will be or written or displayed on that button okay so for now I'll just give a text and the text says press or just simple press okay and now you can see it has a yellow line below where it is written flat button and if you hover around it you can see the parameter on pressed is required that means this flat button requires the on pressed parameters and on pressed basically decides the functionality what will happen when this flat button is pressed okay and it takes a function it takes a function okay so you can define a function over here and then call it from here or what I'll do is I'll create Anonymous function like this and so since I don't want to do a lot of functionality I'll just print it in the console that the button is pressed so for that I'll write print and then inside that pressed ok now when I will first format it and then I'll save it so I would be able to see two things on my screen the first is a text with rishabh Kumar and after that I'll have a flat button which is calling press okay so just wait for a moment for the sink to finish so once finished you can see I have a text called rishabh Kumar and after that uh press so the background color of the button and the screen both are the same so we are not able to differentiate so I can add another property that this flat button provides and that is color okay so for color I told you there is a enum that is provided by flutter called colors and then I'll just simply write red okay again format it and save it so over here you can see I have a text called rishabh Kumar and below that I have a button press which has red background and if I press on it you can see I am getting over here presses presses okay so the text over here was pressed inside instead of pressed so I am getting the same in my console okay now I can also change the text color over here okay so for that I'll just write text color and the color can be again colors dot White okay I'll again save this so once done you can see my text is invite okay so I can keep on adding as many UI elements I want in this column okay so for instance I add another text okay and let's say it says programming foreign okay now if I again save this so below this flat button I'll get another text that says programming knowledge and the order which we in which we write the elements over here that will be the same order that we see on the screen okay that means first this text then this flat button and after that we will have this text programming knowledge okay so now uh this is how we can add more than one elements in a column okay now suppose I don't want this column to be over here but instead I want it to be inside the center okay so then we have a parameter that this column takes and that is called main axis alignment okay and for the column the main axis is the vertical axis and it takes and it also has an enum that is main axis alignment okay and then if you enter dot you can see all the options and as my task is to display on Center I'll just hit Center and then if I save this I will be able to see it in the Center so now you can see it is in the center now if you want you can also try different types of Min access alignment that is in this enum so I'll again hit the dot and let's try end okay so now if I save this let's see what happens so you can see everything is at that Tech at the end that is the bottom okay and then similarly you can also try something called start that will go at the start okay then we have space around that means it will take all the space so you can see the entire height has been covered by three widgets and the basically two text stand up button okay so this is called space around and then we also have space between so you can see the spaces are only between the elements okay that means below this programming knowledge we don't have any space and above this rishabh Kumar we don't have any space but the space is only between the elements okay so this is how we can play with the alignment of the columns for now I'll make it Center okay and then comma so now the text will be in sent okay so now you can see the text is again in center but you can see it is only the vertical Center and not the horizontal Center okay so there are two ways to bring it in the exact center okay so as I told you the column has main axis alignment as vertical axis and the cross axis alignment is the horizontal axis so along with main axis alignment you also have a cross axis alignment and over there you can write cross axis alignment which is also an enum Dot Center so then again it will be in the exact center and the other way to do is to wrap this entire column by a center widget okay so you can do it manually by creating a center and in the place of child we will pass this whole column or easier method is to go to code preferences and keyboard shortcuts and in the shortcuts look for sent uh refractor okay so you will get a certain Q binding for the refractor okay in my case it is Ctrl shift R so if I press Ctrl shift r i get the options wrap with Widget wrap with Center wrap with column okay and similar to that so I'll just wrap with Center okay and you can see it automatically adds a center and the child becomes the column and now if I'll save this I would be able to see the entire column in the center okay so here you go the everything is in the center okay so now similar to column we also have a row okay so for to demonstrate that I'll just copy all the children that I have over here okay and instead of a column okay I'll also need to remove this instead of a column I'll have a row okay so as you can understand by the name row adds one element after another towards the right mean starting from left towards the right okay so in in place of children if I again pass all those things I'll format it and save it so now I will be able to see all these three things one after another so now you can see we have a text over here and after that you have this button and then the programming knowledge text and if I again click on this press so the console is again logging presses means the functionality is fine and similarly over here also inside this row you have a main access alignment and you know how to use it and a cross access alignment okay and you can also wrap it with a center and it is already wrapped with a center so you can see it is already in the center according to the Cross axis alignment because for the row the main axis alignment is the horizontal axis and the cross access alignment is the vertical axis so as it is already inside Center the cross axis alignment is automatically Center okay and if I add main axis alignment main axis alignment as Center then it will be in the exact center of the screen and once reloaded we can see the row is in the center okay and so this is how we add more than one elements in the screen okay so this was for the tutorial thank you welcome to programming knowledge so in this video we are going to add some functionality to our application because till now what we have done is we have just added UI elements and we have seen different ways to add multiple UI elements but our application is not functional okay so to add functionality let's say that instead of print presses I want to display a toast okay so the first thing that toast is not prefabricated in flutter we need to add the extension okay and the place where you can find all the flutter extension is this panel is this website pub.dev and over here if you search for toast then you will find this toast 0.1.5 and there are other extensions also but I prefer to use this one okay so now you can see over here it is written how to use and then the first thing is this toast ah colon and then uh sine then 0.1.5 this is basically the line to install this dependency in our project now in most of the extensions how to download is not written over here so you can also find it in the installing section okay so I'll just copy it from here and as we discussed earlier we need to add all the extensions in our Pub spec dot tml file so over there I'll add this file okay inside this dependencies section and at the same line we have this flutter written okay now if I save this it will automatically start getting the extension in our file in our application okay so after this now we can use that extension in our application so to use that extension again in my readme you can see the first thing that we need to do is we need to import this package so I'll just copy it from here and I'll paste it below this so now this file is inside our application and now to use the now to display a toast we write to toast dot show and then the text that is message then the context and we have the context that is build context okay that we have in our every application okay then after that we have this duration then gravity then text color background color background radius and border okay so now you can see the background color has a default color of this so over here 0x stands for hexadecimal that means the code is in hexadecimal the last six digits stands for the color code and then the first two digits after X stands for opacity okay so now to display a toast we'll use this line so instead of console logging I'll write toast and Dot show and the message is toast demo okay so now let's try running this okay so once the application starts running if you click on this press so instead of showing anything it is giving me a list of Errors over here okay and the main error is unimplemented handling of missing static Target okay so this means that we are trying to add functionality in a stateless widget class okay so that means that is because the basic functionality of stateless widget is to just create a static page okay that means if this page is created like this then we can't change it while the application is running okay and if you want to display a toast then that means the look of the page will change and the page will not be static and that will defy the functionality of stateless widget okay so to solve that problem we have another base class in our material dot dot and that is called State full widget okay so you can see stateless and stateful they both are contrary and so is their features so to create a stateful widget we just write stf or something like that and over here you get flutter stateful widget and then let's give this class a name so let's say my home app okay so now you can see a class my home app is created and it extends stateful widget then inside this we have my home app state that is the App State okay and it calls a method called create State then after that we have another class called my home app State and it extends State okay so this is the basic code that we need to write for every stateful widget and flutter and vs code helps us in writing this okay and if you want to know what uh what are the functionalities of these functions then you can simply go to flutter okay and open the first link and then over here go to Docs okay so now instead of returning a container I want to return this scaffold that I have over here so I'll just cut it from here and paste it over here okay and now over here the home will be my this my home app class so I'll write my home app okay now I'll again format this and try running this okay instead of running I will reload this okay once reloaded you can see everything is still the same and now I'll remove this two texts okay just for now again run this okay so once the application starts running now if we click on press then we are able to see our toast so that means if we are inside a stateful widget we can change the state means the application is not static but it is suggested that when we don't need to change the state we should use stateless widget okay so now let's explore this toast a bit so over here you can see the it also takes more parameters and the duration is toast dot length short that is the default parameter the gravity is toast dot bat bottom that is also default and we can override it okay so for let's override the duration tool length long so I'll write duration toast Dot length long and now if I save this so now the text will be now the toast will be displayed for a longer period of time and you can see that okay similarly I can also override the gravity so I'll write gravity toast not Center first format it then save it and now if we display the toast so it is in the center but as you can see we have kept the button also in center and we are also displaying the toast in Center so that means according to Convention they both should overlap but when the toast is being displayed it is above this flat button so this is because the toast is being displayed at the center of the entire screen and this press button is at the center of this scaffold part means the whole screen except the app bar okay so similarly there are other properties also that is background color and I can give it a different color let's say red so now the toast is in red I can also change it to different color means we can play around now the toast will be in this color ok then we can also change the text color let's say colors dot black and now the text color is in Black okay so this is the difference between stateless and stateful widget like when we don't have any functionality in our application so it is suggested to use a stateless widget but when we need to add some functionality then we should go for stateful widget okay I hope everything was clear thank you welcome to programming knowledge so in this tutorial we are going to discuss about text with jets so text widget is one of the most used widget and we ourselves have been using it in two or three previous videos okay so today we will look deeper in text widget and see a few of the functionalities provided by the text widget okay so for that first I will remove this center from the body okay so I will just simply comment it out and then create another body okay it will be a center the center will have a text okay the center's child parameter will have a text and the text says programming knowledge okay now if I save this I'll get a text programming knowledge in the center okay you can see that okay now after this the next thing that we need to know is that we can constrain the number of lines that our text will be displayed okay like if I only want to display three lines then I have a property called Max lines okay and if you hover around it you can see it takes an integer value so let's say I only want to display three lines okay and now to break the line you can use backslash n okay so what I'm going to do is I am going to display programming knowledge four times in four different lines okay so according to the concept of this Max lines only three lines should be visible so let's check that okay okay so now I'll first format this and then save this okay so now you can see instead of printing five lines it is only showing three lines so this is how you can constrain the number of lines of your text okay then now I'll bring it back to single line okay just programming knowledge and the next thing that we are going to discuss is style that means how to apply styling to our text widget so there's a named parameter called style and it takes a text style widget okay so I'll write a text Style and now it also has some properties so the first property as you can see is background okay so background takes a paint very paint widget and till now we have not discussed about paint so I'll come back to that later then we have background color and you know we have an enum called colors then I can simply give red now if I save this the background of the text will be in red and you can see that okay similarly we have another property called text color no not the text color just simply color and then I can give colors dot white let's say that okay then again format it and save it so now you can see the text is in white color okay now the next property that we have over here is font weight okay font width and that means the size so if I give no sorry the font weight means The Styling like a bold italic and stuff like that so there's another enum called font weight okay and if I write font weight dot bold so now my text will be in bold okay now once I save this so you can see the text has become a bit bold okay now after this you have font size okay and you can give the size of the font of the current text widget okay so I'll give 20 let's say okay so now you can see the text has become a little bit larger okay you can increase the font size a little bit more so that the change is significant and you can observe it okay so now you can see the text has become bigger now the next property that we have is font style okay and it takes font style dot italic okay so suppose if you want to make the text italic and you can see our text has become italic okay so these were the basic about text and there are other properties also like overflow text align and there are many other soft wraps struct style text alignment and these are not important right now because once we know about containers and paddings then these properties will make more sense so once we cover those we will surely come back to this okay so now another type of text that we use and that is used majorly for styling that is called Rich Text Okay so I'll again comment this out I'll have another body ok so first center Center's child will be Rich Text Okay then Rich Text takes a text okay and the text should takes another widget and that is text span okay now text span takes a parameter called text okay which as the name suggests is a text okay and then one another thing that is style then again we have text style we discussed about it just now okay and then I give a color let's say colors Dot black okay now I need to give another closing bracket over here now I'll format it and save it okay so you can see we have our text over here called programming okay now the basic use of Rich text is to provide a different type of styling to different words in a string or in a sentence okay so over here the first word is programming and it is in text color black and if you want you can also change the color you can give it a size let's say 15 okay so this is one word and now if you want to give another styling to the next word then you have another property called children okay and it should also be of type text span so I'll you define it over here then it takes a list okay now as we have defined it to be text span it only takes text spans widget so I'll write text span again inside a text span we have our text okay so text will again take a text okay now we can provide different styling to it okay so for now I'll just simply call copy this paste it over here and change the size to let's say 30. okay now once I save this you will be able to understand what is the difference okay so now you can see we have two different words but a single text okay now if I want I can also change this color okay and I should give a space over here so that it becomes more understandable and now you can see we have programming in this color and which is in a smaller size and knowledge in red color with with a bigger size okay and similarly you can add as many text spans as you want over here so I'll add another text span the text is let's say flutter okay and this should also have a space or whatever you like then again a style so the style will again be text Style color s dot let's say green okay and then we have font size of let's say 20 okay now I'll format all these okay I need to give a comma over here there is some error okay I missed the closing bracket over here now I'll save this and then you can see another text that is flutter and it is in green color and it has a different size okay so you can see we have three different words but they are inside a single widget that is the rich text widget and they act as a single string okay so it's a real life uses in places like this like where you have a single text but a part of it is over here acts as a redirecting link okay like in our flutter application if I would click on this then I would open an another page okay and the rest of the text is just simple text and no changes are there on that okay so in such kind of scenarios Rich Text come to play okay and now another thing that I also want to cover in this video is like how to create uh how to separate widgets in different Dart files and use it in another dot file okay so for that first of all I'll create a new dart file I'll call it my home underscore app Dot Dot okay and now inside this my home app.i want this class to be there okay so I'll just copy everything or cut everything and paste it over here then now it is giving errors because I need to import material pack material dot dot okay now I'll save this and over here you can see this my home app is giving an error because this file doesn't know what is my home app okay so now we need to add this my home app.dot in our main dot dot file okay so for that again I will write import then Dot and slash that means to look in the current directory and then over here you can see as the suggestion says my home app.not okay so now inside my home app dot dot we had this my home app so now over here the error is gone and now if I save and run this no change will be there but now what we can say is our main dot dot is a bit more cleaner okay so you can see the same thing okay so that was for the video thank you welcome to programming knowledge so in this tutorial we are going to discuss about buttons so button is a very basic yet very important UI widget that flutter provides us okay so the first thing I'll comment this body out okay the next I'll add another body okay a center and child okay so now there are different types of buttons okay and we will discuss all of them and the first type of button is flat button okay so capital F A flat button okay and it takes a child okay so child is the widget that will appear on the button okay so you can give any widget okay so let's try with the text okay and the text says press me okay and if I save this I should be able to see a button that says press me okay now it is not restricted to text as I told it takes any widget I can even give an icon okay and then icon has an icons in them okay and then if you give a hitter dot then you can see all the icons that are already available okay for now I'll just give add that is a plus sign okay and now if I save this I would be able to see a flat button that has an icon Plus okay so you can see that ok now you can see this flat flat button has a yellow underlining okay and if you hover around it you can see one thing is missing and that is on pressed okay because over here you can see it is written that the parameter on pressed is required okay so let's provide that so basically on pressed is the takes a function that will be executed when the button is pressed okay so you can see it takes a function that is void that means it doesn't return anything and it and the function is run when the button is pressed okay so for now let's just create an anonymous function a one liner function and I'll simply print button pressed okay so that means whenever I'll press on this button button pressed will be written in my console okay so let's try this so now if I click on this plus over here you can see button pressed is being logged in my console if I go on pressing it will go on adding okay so this is an on pressed method okay so now it is not necessary to have a Anonymous function like this okay you can have a function in over here okay so let's say I call it void button action okay that means the action that button will do and then simply over here I write press print button pressed okay and now over here instead of calling this I can call that function okay so button action okay and we do not need to give a parenthesis because we are not actually calling that function but we are pointing to that function okay so then again hit save and now again we should see the same action okay so now if I hit plus so you can see it is again giving button press but along with that it is also giving some other logs okay so that is not our concern so you can see as many times I press the button that many times uh our console is being logged with button console okay so this you can use this way also okay now the problem occurs when you want to pass a certain parameter that means this function accepts a parameter let's say string name OK and it logs the name also okay that means name is required but over here since you are pointing you don't give a parenthesis okay and hence you can't pass a value okay so then what you need to do is you need to again click like the right like this okay and Anonymous function and then over here you can pass the parameter okay so for now let's say I am passing reshuff okay now if I save this everything should work fine but instead of console logging button pressed it should lock button pressed reshuff okay so let's try that and you can see button pressed rishab as being locked okay so this were the three methods in which you can write the functionality for this on pressed which takes a function okay so I'll bring it back to the original means the first one that we have written okay over here just print button pressed okay now the next thing that we are going to discuss is the color okay so color then as you know colors enum is there present in flutter and it has a certain colors over here you can select any one of them I am going to use red okay so now if I save this my button should be red in color okay and you can see that okay now similarly I have a parameter called colors brightness and it also has an enum brightness and brightness has two values dark and light okay so dark means that the button would be visible even in a dark surrounding okay so now if I run this you should see how the changes happen Okay so you can see the difference that the plus sign has become white instead of black okay and that is understandable when you have a black background white color is significant means you can point it out okay so that is what has happened over here and similarly if you change it to light okay that means the theming of that button will change for a light background okay and then you can see the button color is black that means if you have a bright background then this plus icon is noticeable okay and so is the case over here okay now the next thing that we have is a text color okay now now suppose if we have a text till now we don't have a text but if we have a text we can also provide some colors over here okay and you know how to add a text instead of passing icon as the child we can pass text as the child okay now the next feature that we are going to discuss about is enabling the button okay so like sometimes you might not want the button to be enabled at once but after some time it should be enabled okay so in that cases you need to disable the button okay so earlier we used to have an enabled parameter that used to take true or false means true for the button is enabled false for the button is disabled okay but in the latest flutter update it has been removed okay so the way around is instead of writing anything any function for on pressed if you write null then that means our button has become disabled okay so now if you save and run this you will not see any significant change okay but if we click on this you can see nothing is being logged in my console that means the button is disabled okay so now you can similarly add a disabled color like we had a color that was for when the button was enabled so disabled color is when the button is disabled so colors dot let's say this color okay so now since our button is disabled over here we should see this color and you can see that okay and similarly we have a disabled text color when we have a text as our child okay you can use that and then the last property in flat button is on Long pressed okay so on pressed when you simply click on the button and on long press when you keep on when you click and hold okay so let's see what this this long press takes and it also takes a function that is nonreturn type okay that means it doesn't return anything so again I'll create an anonymous function and simply I'll print button is pressed for long time okay now let's see this in action so now if I press and hold the button this text should be logged in my console okay so now if I press and hold you can see it is showing button is pressed for long time again if I press and hold same is the log in the console and now if I try just clicking it so it is not working and because over here we have made on pressed as null okay so I'll change it back to what it was print button pressed now if we run this you can say if I click on it then the log says button pressed and if I click and hold it says button is pressed for long time so this is how we add functionality to our button if you want you can display our toast over here call some function that does some complex calculations you can do whatever you want means all the functionality part you can add in this on pressed or on Long pressed as ever you want your button to react welcome to programming knowledge so in this video we are going to continue our discussion on buttons okay so the first thing I'll comment this out this is about flat button which we discussed in our previous video okay so the next type of button that we are going to discuss is the raised button okay so first I'll create a center and the child will be a raised button okay so the basic difference between flat button and waste button is that raised button looks a little bit elevated like floating on screen and flat button is infused on screen okay so if you go to stack Overflow you can find a very good example over here you can see this buttons are bulging out over here and these are basically raised buttons okay and then if you scroll down you can see over here the button seems to be infused like there is no difference between the button background and the rest of the body of the alert dialogue so the button seems to be infused in the dialogue and such type of buttons are flat button okay so so back in our project over here we have a rest button okay and rest button also takes an on pressed okay on press test compulsory for every button okay then over here also I'll add a simple Anonymous function that says button pressed okay and then I also need to give an child okay so again you can give any text widget I am giving an icon from the Icon Cinema and the icon will be add okay and you can see there's an error over here and that is because we are missing a parenthesis okay now I'll format it and save it so now you should be able to see a button that has a plus icon on it and you can see that and if you look closely you can see there is a little bit Shadow at the bottom and on the ah left side so that means the button is a little bit elevated from the screen okay so that is the Z axis we have the shadow in the Z axis representing that the button is a little bit elevated okay then we can apply the same properties that we have in our raised button like color Okay so the colors is again red so now the button will be in Red so an elevated button in red will be visible you can see that okay then similarly we have the color brightness okay then again it is let's say brightness dot dark okay and the rest of the features also like a disabled color and on long press okay so now the another property that we have over here is elevation okay elevation so that means how much Shadow will be there that means how much will be the length of the Z axis so let's say if I give 10 so now you can see there's a little bit Shadow now if I run this the shadow would be a little bit thicker OK so let's see that and you can see the shadow has become a little bit thicker and it is more significant now okay so this says that the button is a little bit raised and this actually over here acts as the shadow okay and now over here if I make this null the on pressed function as null so then let's see what is the difference like in flat button if we were making it null so no difference and the button was visible just the functionality was not there okay and that is because we have changed it to null but over here since we are making it null that means we are making the raised button disabled you can see the color automatically changes to our disabled type of thing okay and if you press then the functionality is also not there okay so now you can even try adding some disabled color okay so suppose if the button is disabled then the disabled color is let's say this okay so now if the since the button is disabled our color will be this okay and so now you can see the difference okay so this was about rest button and there are particular scenarios where we need flat button and we need raised button okay so you know where to use what okay now the next type of button that we are going to discuss is outline button okay so first things first I'll create a Body Center okay and the center has a child and the child is outline button so as the name suggests this button doesn't have any background it just have a has an outline okay so first of all on pressed and on pressed I'll create Anonymous function that simply prints in my console button pressed okay and it has a child okay that is again an icons so that all the buttons have the same icon like all the buttons that we have discussed till now icons dot add okay over here it will only be icon and not icons and now if you save this you should be able to see and button that only has an outline and the background will be same as the entire screen and you can see that this is our button when it has a boundary okay so this is the default width and height of every button you can change the width and height by using a container and we have not studied about container but we will okay so if I press you can see button pressed so everything is working fine now the next feature that we have in this outline button is first let's format this okay the next feature is border okay so in an outline button the most significant part is the border so we have a property a parameter called Border Side okay and it takes a border side with check OK and it is used for Designing the Border okay so basically this Border Side is used for all the four sides like in general cases when you give a border to something then you need to give four borders for top bottom right and left but since it is an outline button and in button we want to have the same border throughout so a single Border Side will only be applied to all the four sides ok so Border Side takes a color okay that is the color of the border so let's say I give red okay so now you can see the color is something grayish now if I save this the Border should be in a red color okay and you can see that over here the border is in red color now the next property is width okay that means the Border width and it takes a H I think double yes it takes a double value and the default width is one okay so if I make it to 5 point zero then it should then the Border should be a little bit thick now Okay so and you can see that okay so the border is a little bit thick now the next thing that we have is a style okay so style is basically just if you don't want to show the border so if you click on Border style none the Border will disappear and Border style solid that is the default type means the borders border will be there ok so border is there so I will try border style dot none and now my border should be gone okay so there's some error I am missing a parenthesis over here okay again I'll format it and save it and now you can see the border is gone and to bring the water back I'll simply just remove this or you can give it border solid so that would also be fine and this is our outline button now over here also if you want you can add on Long pressed and all the other functionalities all the other things that we have seen in flat button and the same goes for raised button all the parameters that we have seen in the flat button can be applied in both rest button and Border outline button okay thank you welcome to programming knowledge so in this video we are going to discuss about icon button okay so as the name suggests icon button is a button that has an icon on it okay so for a style comment this Center out ok then we will create another body that is a has a center okay and the child of the center will be a icon button okay so in icon button the two important things are icon and the on pressed method okay so first icon and icon takes an icon widget okay and then inside icon we have an icons in them and if you hit the dot then you could see all the available icons okay so I'll simply go for ADD ok so now if you save this you can see a Plus on the screen okay and now you can see the yellow line persists because I told there is two necessary things that is the icon and the on pressed function okay so for now I it will do simply print my print in the console print button pressed okay I'll format it and save it okay so now if I click on this you can see it is being logged in my console over here okay so now like all the other different types of button it also has a color okay and the color over here is for the icon and not for the background okay so color takes a colors enum color which we can get from color Cinema and for now I'll give it red okay now I should see my icon in red okay and then you can also disable it and give it any another disabled color also okay if you like something like that okay so then the next thing that we have over here is icon size okay and as you can see it takes a double value and if you don't give it then the default value is 24 okay so I'll make it 40.0 and now we should see the icon size has increased okay now the next thing is Splash color okay so Splash color is the color that will be that will appear when we press the button okay so again I'll give colors dot let's say some other color green okay so now let's see the difference now you can see if I hold this green color is there okay green color comes in the background okay so this was one thing then there's a padding okay and if you don't give the padding then also there is a default padding of eight from all sides okay so as you can see over here padding takes and Edge insets type okay so I will write Edge in sets ok now it has a few variations okay dot all for all the four sides then it has symmetric that is horizontal and vertical and then only that is top bottom right and left okay we generally use these three ok so for now I will go with all okay and I'll change the value from 8 to let's say a significance change will be 20.0 ok so now let's see now if we press it the Circle should be larger okay and you can see that okay so now the next thing that we need to know about icon button is tool tip okay so this is this actually takes a string that describes the functionality of this button okay because this button does not have a text so sometimes the end user might not know the use of it okay so this helps to know what that button is used for okay so I'll give a string let's say description of the button okay so now if we save this okay and if the user doesn't know what this icon is for so if we press and hold then you can see this toast type of thing appears okay and it has the tool tip written on it okay so in this way the end user will know what that button is therefore okay so now over here you can see inside this icon button if I try adding some color so it is not there okay some background color I didn't mean color but background color okay so any background color or feature is not there okay so generally uh icon buttons don't support specifying a background color or other background decorations because typically the icon is just displayed on top of parents widget background okay so if you want to add a background or a background color so out of many ways to do so we will only discuss about the method discussed in the flutter docs and that is to use a ink widget ok so I will comment this child out for now okay I am sorry I'll comment this out okay then this Center takes another child and the child is a ink widget okay so ink is basically a convenience which it is generally used for Designing purpose okay so we'll see a little bit about ink also in this video okay so first the child and the child is icon okay I'm sorry an icon button then two important things icon so I'll give an icon of let's say Android I can start Android and the next important thing is on pressed okay for now it simply prints the console button pressed okay now I'll format it and save it and there will be no significant change just the logo changed because I have used icons dot Android over here so the Android icon is appearing okay so now to add the background color this ink widget takes another parameter that is decoration okay and decoration takes a decoration type widget Okay so decoration is the collective widget and it has many sub widgets inside it like boxer decoration image decoration and we will discuss about all of them okay for now the most useful over here would be a shape decoration OK because our main objective is to give a circular shape and add background color to it okay so shape decoration now as it is a shape decoration a shape becomes necessary and we want the button to be circular let's say so I will write Circle border okay and then it takes no parameter and then the main part to add a color and let us say I add color blue okay now I'll format it and save it so now a blue color should be yes you can see that okay so like this you can add a background color to your icon buttons okay so now since you are using an ink you can do many other things also like you can give it a height okay you can also give it a width and you can also give it a color so you can see if I give colors dot blue over here instead of giving it inside the shape decoration so then now it will give me error okay so if I try saving this and you can see the compiler has thrown error over here and that is because in flutter whenever we use that decoration then we can't give color outside the decoration okay that means in this ink if we are using the decoration then this color should be inside this decoration okay if we might not be using this decoration and then we give color then that is not a problem but if we are using decoration then the color should be inside decoration and not outside decoration ok just wait for the build to finish okay and then you can see it is an icon and a square type of box okay so this is the default shape that is the square and now you can apply those height and width and see the changes so this was about icon buttons thank you welcome to programming knowledge so in this video we are going to discuss about the last type of button and that is floating action button okay so to add a floating action button after the body we have another named argument that is floating action button and it takes a floating action button widget okay and it has a child okay and the child also takes a widget and for now I'll just give an icon the I can say icons add and as it is a button it also needs an on pressed method and for now I'll simply print in my console Floating Action button pressed okay this should be inside quotes okay so now for style formatted and then if I run I should be able to see a floating action button on my screen okay and you can see that the floating action button with the plus icon appears at the bottom right of the screen and that is the place where the floating action button is placed in Android and as well as in iOS okay so now this also has all the same functionalities like other buttons that is it takes a child it has an entrest which takes a function that returns void okay then it has a background color okay and if you don't give any color then it will be blue which is the default color of any flutter application okay and you can also change it to any color you like okay like now I am changing it to red and you can see the color has changed to Red now one more thing that I wanted to tell you about colors that we can change the intensity of that color if we want okay so for that all we need to do is inside square brackets if we write 300 then the intensity would be a little bit less okay and you can see that now if I write 100 it will be lesser okay so I am missing a this over here let's run this and you can see the intensity has become more lighter now if I change it to 900 and the intensity will increase and the color will appear much darker okay so the standard if we don't write any number then the standard number that is by default use this 500 okay and you can see that then the next thing in Floating Action button is the tool tip okay and that is similarly uh string that is displayed when we long press on the button okay so let's say tool tip now let's run this now if I press and hold so I'm able to see the tool tip that is the text in my tool tip argument okay so this was also the basic about Floating Action button now the next thing about Floating Action button is that sometimes instead of just an icon we also want a text alongside means next to the icon okay so then we can use the extended feature okay so for that we just need to write extended and extended doesn't take a child but it takes two other two different arguments first is the icon and the second one is text sorry it would be label yes so it takes a label and label takes a widget so we will pass our text widget okay and let's let the text say add so now again I format it and save it so now I should see a plus and then add written next to it and you can see that okay so this is how we can modify our Floating Action button okay now the next thing that I missed while discussing about flat button and rest button was that they also have a extended feature okay so let's discuss about that so coming to Flat button we have uh we simply write flat button and Dot icon okay so now this means that the flat button will first have an icon and then a label okay not just a child that takes a widget but it takes two different things first one is icon and the second one is a label okay so let's give it an icon I can say I can inside an icon widget from the Icon Cinema and let's say Android for now okay and the label is let's see what the label takes and the label takes of widget so we will pass a text widget okay and it says Android okay and on pressed simply a console logging that is button pressed okay now let's format it and save it and let's see okay so now you can see we have the flat button that is for and it has an icon and then the text okay so now it is not as we expected because we are using a ink okay so we don't need an ink right now and just remove it from here now let's run this so now that bluish background should be gone okay so this is our flat button but in a extended form that is by using this icon Constructor okay now if I press this the functionality is same okay and the same goes for raised button okay so if I write rest button then it also has an extended Constructor that is the dot icon constructive and it takes two things icons and label and rest all the features are same so let's see this also and you can see that let's apply some color so that it is more evident I'm sorry colors not red formatted save it and you can see that this is our raised button but it now instead of having a single child widget it has two things first one is icon and the second one is text and the functionality is intact okay so this was all about buttons in the next video we should discuss about some other widgets thank you welcome to programming knowledge so in this video we are going to discuss about a convenience widget which is the container can by convenience with that I mean that it is there for the developer to make his job uh much more easier okay so let's see how we use that okay so over here instead of this button I'll change it to just a simple text okay so that it is easier for you to understand uh text that says programming knowledge okay and now if I save this I should be able to see the text programming knowledge on the screen and you can see as it is wrapped by a center the text is in Center okay so first I'll correct the spelling okay now to wrap in our container I'll use my refractor key binding that is Ctrl shift R and then wrap with a container okay and if you don't have this key binding you can simply create a container and in the child you can place our place the text widget okay so now our container now our text is inside our container but we see no significant change okay so now let's add our color to The Container okay so for that I write color color is colors dot red okay so now the container area will be red in color so let's see that okay and you can see the container is in red color okay now you yes you can also apply the same thing by adding a text Style over here but suppose sometimes you don't have a text widget and some different kind of widget then this container comes into action okay so you can apply a color like this now the next thing that you can do is you can apply margins okay so for margins you need to write margin okay and then margin takes another type of widget which is Edge insets so I write H in sets okay and then it has a few Constructors first one is all okay that means whatever value you give inside this it will be applied to all the four sides okay and then the next important one is only that means we give individual margins for all the four sides and the next one is symmetric which means we give a margin which will be applied to the horizontal sides and another margin which will be applied to the vertical sides okay so basically now we just have a single child so this margin we will not be able to see any kind of significant difference but the thing where we can see significant difference is padding okay so we can also apply padding to a container so we have a padding parameter and it also takes Edge inserts geometry okay so I'll use a named Constructor Edge inserts dot all okay and then this all takes a double value okay so over here instead of value I will make it 10.0 now if I save this I should be able to see padding all over the and all the sides of the text and you can see that the red color has a little bit bulged out okay and that is uniform in all the four sides okay now over here instead of all if I use symmetric so if I use symmetric then I have to mention that which which value is for which symmetric design okay so for let's say that 10 is for horizontal so I need to write horizontal and then 10 okay and similarly we have a vertical and in vertical I apply 20 so now you can see that the spacing in the both the sides right and left should be 10 and the spacing and top and bottom should be 20 so let's see that and you can see the spacing over here and here is lesser as compared to these spacing okay so this is when symmetric comes to play and the last one which is only okay so now only as I said it takes a different parameter for all the four sides so over here we can't use horizontal and vertical but instead of that we need to use Left Right top and bottom okay so I let's see left and I'll apply 10 to left I'm sorry then right okay and write 20. then we have top 30 to top and bottom 42 bottom okay and then I'll close this over here and the comma now I'll format this and save this so you can see now there will be different spacing in all the four different sides okay so this is how you can apply padding and you will see the same behavior when we use for the margin okay when we use this Edge and sets for margin but the difference will be that if we have a color inside the container then that color will be applied only when we use padding and not when we use margin because the basic difference between margin and padding is that in margin we separate different widgets from each other and in padding we add spacing to a widget okay so over here we are adding spacing to that widget that means the size of that widget is increasing and our widget is container and in container we have applied the red color so in the entire spacing we can see the red color but instead if we were using margin then that meant that we are separating this widget from other widgets with uh some value that we have given over here so then the color if we have a color in the container would be confined to the exact area as it was before applying the margin okay so I hope this concept is clear now another small thing about this padding and margin is that you will see generally developers add a const over here okay so const stands for constant and the basic use of adding const over here is that it doesn't get build when we hot reload the program okay which means that if you are running an application and you open a page so if you open a page then this build method gets called okay now suppose if you are using an app and you have navigated to other page and when you are coming back to that page so instead of building all these things if it is a const over here so then this will not be builded again okay and if it is not being builded it will save little bit of time and the navigation will be faster the app interface will will be more smoother okay so you can use constant and you should use constant whenever you use paddings or margins now the next thing that we are going to discuss about is decoration okay so every container has a decoration okay and this decoration takes a box decoration widget okay so Decor is decoration is the root and it has many sub branches okay so over here in container the most suitable one would be box container okay I'm sorry it will be box decoration okay so in box decoration now if we have box decoration and I run try running this then it you can see it is giving me an error over here okay and you can see the error is also in our screen and that is because in flutter whenever we have a decoration then the color should be inside decoration that means this color red should not be over here but it should be inside this box decoration so over here in color I'll write colors dot red okay so now if I run this the error should be gone and I should be able to see the same exact thing as I was seeing before okay so you can see okay so padding is used when we only want to apply a padding okay and if anything other than padding then we need to go for container okay so this was about container and padding thank you welcome to programming knowledge now the next thing about decoration is that you can Define the shape of our container okay so by default the shape is rectangle if you want you can also make it to a circular type okay so for that we have a shape and the shape also takes an enum that is box shape okay and if you click on box shape dot then you can see we have two options one is rectangle and the other one is circle so if I change it to Circle and then save it so then you can see a few changes okay so it has became circular but you can see the text has moved out of the circle okay so that could be fixed by using padding and stuffs like that okay for now I'll make a change it back to rectangle now if I run this I should see the same thing again okay and I'll also remove this padding I'll make it all okay and then all the sides it should be 10.0 I'll format it save it and you can see it is fine now sometimes what we require is to have rounded Corners in our rectangular shapes okay so for that we have another parameter which is inside this box decoration and that is border radius okay so border radius and this border radius takes a border radius geometry widget okay so for that we will use a named Constructor of Border radius so I'll write border radius and then circular okay so circular means the radius will be circular and inside circular as it is a circle we need to give a radius so I will give a radius of 10.0 okay let us say formatted save it and you can see the corners have become a little bit rounded okay so this is how you can design things using the help of container okay so if you want to design any widget we can we simply surround it with a container and then add all the designs to The Container now we can also specify a height and width for a container okay so let's say I want to specify a width okay and I can specify of its net say as 500 okay now you can see the color of the container might have increased okay and you can see that now suppose you don't know what is the length of the screen and you want to take the entire length as the width of the container okay so then what you need to do is you need to write double dot Infinity okay so that means it will take all the space that is available now if I save this it should be same okay you can see that now you can see as we have taken the entire width the text has automatically moved to the start okay but that is not the requirement sometimes okay so now suppose if you want this text to be displayed in the center okay so then I'll come back to the text widget this part I have left when I we were discussing about text so we have a thing called text align okay so now in text align it takes a text align enum okay now if I you can see all the options so if I click on Center so now the text would be in the center and you can see that similarly if I make it end then the text should be in the end and that is the case Okay so this is how we apply width to a container and similarly we have the height okay height and then height Also let's say for not double dot Infinity okay now if I save this the entire body area should be red and you can see the rounded corners at all the four sides okay and now over here this is the perfect time to use a margin suppose I want to leave a margin from all the four sides okay so I'll write margin const and it takes an edge insect for now let's say all and 20.0 so let's see what happens and now you can see from all the four sides margin of 20 has been left okay and as I said while discussing about padding when we add padding the color is also there and when we use margin the color vanishes okay means the entire decoration vanishes not just the color but the entire decoration okay so this was about container now another thing that we have in container is constraints okay and this constraint sticks a box constraints okay and then in box constraints we provide the constraint that like suppose if we have a screen that whose the size we don't know okay but we want to confine the height of the container then we can say the maximum height till which the container will extend is 300.0 okay and now let's save this and see what happens and you can see the maximum height is 300 okay no matter how much height is available in the screen the container will never take height more than 300 okay even though we have allowed the container to take a height of infinity that means all the space available but still it will only take a height of 300 that is the power of constraints okay and similarly we have a Min height okay that means this is the minimum height it will take the container can't take a lesser height than this okay so for now let's say 100 okay and it will give you an error if you give the maximum height less than minimum height okay so I'll format it and save it and now let's see what happens and nothing happens that means everything is same but now if we try removing this height from here so you can see still there will be a 100.0 height okay so this is the 100 height okay 100.0 height okay now if I again add the height as Infinity solid double dot Infinity so then it should again take the max height okay and it is taking the max height because we are providing it a height which exceeds Max height okay so this was the thing about height and similarly we have for width okay so suppose if I say Max width should only be 50. okay that means we can't have a width more than 50. so now let's see what happens and you can see this is the width okay only 50.0 pixels okay and similarly this is the max with those so similarly we have our main width okay and all the properties like if we remove the double dot Infinity then it will take the Min width and if we have the double dot Infinity for width then it will take the max width okay so this is the power of constraints and this is very useful when you want to confine a widget to a particular shape to a particular size okay so this was about uh container this is how we use container with all the widgets to apply size to provide a background color to provide a little bit decoration so this is where container comes into action okay now along with container we also have another convenience widget but that convenience widget is very confined very restricted we means we can use it only for one purpose okay so for now I'll remove all this decoration and thing once I'll remove the entire container okay and I'll format it save it so now again our text will be there in the center now the next widget which I was talking about is padding so as the name suggests it can only have a padding okay and you can see as the padding comes it already has a const and which justifies that it is also it is also recommended by the flutter team okay so now you can see as it is a padding we can only apply the padding and I'll make it let's say 20 and there will be no significant difference but still this is a convenience widget which we may need sometimes okay okay so padding is used when we only want to apply a padding okay and if anything other than padding then we need to go for container okay so this was about container and padding thank you welcome to programming knowledge so in this video we are going to discuss about images and the first type of image that we are going to discuss about is the asset image and as the name suggests the image will be an asset okay and an asset to the project means that the images in the folder where the project is or in the root where the project is so for that first I need to add a image in my root folder okay so for that I'll create a separate folder and I'll call it asset okay and then I'll paste any simple image okay so for now I'll this image seems fine I'll add it to the asset folder okay so the images now in our root directory of the project okay then the next thing that we need to do with every asset image to use it in the code is to add it in our pubspec.tml file okay so to add if you look you will see some commented code and you can see it over here okay so first we write assets and then the location of that image okay so I'll simply comment this out okay and then over here instead of this it will be asset and then the file name which is in this case reshock dot PNG sorry and then we need to save this and then you can see automatically over here the flutter pop get command will start running so once it is done we can start using the image in our code okay so for that in my my home app I'll remove the body okay for now and I'll create another new body okay and the body is a image and Dot asset okay so we are using the named Constructor of image okay and we I will surely post a video on Constructors class and objects in Dart okay so for now image is a class and it has a named Constructor that is dot asset okay so as it is an asset we can say it first takes the string name okay which is the required file which is the required parameter I am sorry okay so I'll pass the name and we simply just can't pass reshuff.png okay we also need to pass the folder because we have kept it in a separate folder and as I told asset refers to the data which is in the root root folder okay so I'll write asset and restart dot PNG okay so now if I save this I should be able to see my image on my mobile screen okay and you can see that okay so this one this is the image that I have added and the first thing that people tend to forget is to not add it in the prospect.tml and then they struggle a lot to fix their okay so that is one important thing that you should never neglect okay so then if we added the file name we added the image name first then the next property that we can add is height okay so our height will be of let's say 20.0 height takes a double value so that's why I have added a DOT zero if I will not add it then also it is fine but adding the point 0 is a better practice okay so I'll save this and now my image size should have shrinked okay and you can see it has shrinked a little bit too much okay because the height is way too less I'll make it 100 and you can see the image has images height has decreased and since the height has decreased the width has also decreased and as we are talking about width we have a property called width okay and we can give any value we want okay so for now suppose I give 50 okay then uh since 50 is the smaller one then the scale right now will be 50. okay and you can see the image has shrinked even more okay so these were a few basic things now the next thing that we are going to discuss is the frame Builder so as the name suggests it builds the frame in which the image widget will be shown so frame builder then it takes uh it returns a method which has four parameters first one is build context okay so our build context will get uh let's call it context then the next thing is widget child and then in frame and Bowl was synchronously loaded okay I'll give a comma over here and then format it okay so now let's discuss what are these parameters over here so the build context Returns the current context okay then the widget child so it contains the default image widget which is guaranteed to be nonnull because if we create an image asset then this is the required field we cannot neglect it we need to give this field and since we give this field there is some image that is played on the screen and therefore this child will never be null okay then the next thing is into frame so it contains the frame index it is of no use right now it basically comes in play when we display a gif or a video because what basically happens in a video or GIF is that the image frame keeps on changing continuously at very minute interval okay so when we want to change the frame in between a video or a gif then this Frame comes to play okay for now the frame value is null and as soon as we build it its value will become zero and for GIF or any other multiframe image it will increase by one every time any new image is shown and when something is not important we change it with a underscore so that means it is just a placeholder it has no significance in the function but still we need it in the function definition okay then the next thing is was synchronously loaded okay so before discussing about this we need to understand what is the synchronous and the difference between a synchronous so for that I have found a Blog which beautifully explains about both and the difference so you can have a look at it later okay for now in simple terms what synchronous means is that the transmission of data was done immediately and as we are using it in images image widget so over here it stands for whether the transmission of asset image to the widget was done immediately or not so it is generally true but if it is not then you can display some other widget until it until the image is being loaded like a progress bar or stuff like that okay so these were about the four parameters now inside this function we need to return a widget that will be the frame of our image okay so for now I'll remove this okay and save this okay so we are getting an error because I have not yet passed anything I'll comment this out for the moment okay and then save it and run it again okay so you can see our images like this and now when we use frame Builder we return our widget that contains the image widget okay that acts as the frame for the image widget so for now let's just give some padding to it okay so return of padding that has a padding and the padding is first const Edge inserts all and from all the sides I want to add 10.0 okay and the child is our widget child which we get over here okay that means the current uh image widget okay then I'll format it and save it so now you can see the image has padding from all the sites okay so to make the change significant I'll change it to 100 okay and you can see the image has automatically left 100 pixels padding from this side from top and even from bottom and right but it is not significant in the screen as we don't have any other widget okay now we can also change it to container and add some color and see if it works fine or not okay so container then the container has a color let's say colors dot red okay I'll save it and you can see the container is red in color and it has 100 pixel padding from all the four sides okay so now you can also try some different things in this if you want so the first is decoration for decoration we have a box decoration we have discussed all this in the previous videos okay and then since we are using our decoration we can't have a color outside okay it is like of a quick recapitulation so I'll paste the color over here and then I will also like to change the shape so the shape is in the box shape you know and I'll make it Circle okay now again formatted save it and let's see what happens and you can see the padding has become circular okay so this is how we use a frame Builder Okay so frame Builder is a very important thing when we deal with images and it is a thing where people generally make mistake so I hope all the concepts were clear till now we'll continue in the next video thank you welcome to programming knowledge so in this video we are going to continue where we left in the previous video we were discussing about images and to be more specific asset images and the last thing that we saw was the frame Builder okay so in this video we will discuss a few more properties of this image asset okay so for now I'll remove this height and the frame Builder okay and I'll surround this image with a container now you might think that if I wanted a container then I could have simply sent it returned it in my frame Builder but why am I surrounding this image asset with a container instead so the reason is when we return something from the frame builder then the entire frame acts as the image widget okay so if I apply any property to the image then that property will be applied to the entire frame which might be the container in our case so to avoid such type of situation we surround the image with a container okay so now for now I'll give the height and width to Infinity okay how it is double dot Infinity and the width is also double dot Infinity okay then I'll format it save it and you can see our images in the center okay so now the property that we are going to discuss about is fit okay so fit decides how to inscribe the image into the space allocated during layout so this is the function of fit okay so there are there is a enum that has all the types of fit and the enum is as the name as you can see in the suggestion it is box fit okay so the default type is contained okay that means the entire image will be in the container and no part will be clipped out okay so let's save this and see and you can see no significant change but you can also see that no part is clipped out we can see the entire circular thing in the screen okay so then the next type is cover okay so that means it will cover the entire container okay so let's save this and see and you can see it has covered the entire container that means the entire height and the entire width okay and if some part is clipped out then it will be clipped out only okay so it doesn't care if the image is being clipped out or not but the entire screen will be filled with the image okay then the next type is fill okay that means it will fill the container so let's see and you can see the image is neither clipped out and nor any space is left it took took the entire height it took the entire width but no part of the image was clipped out so what happened was it got extended and it got stretched in some directions so as to fit the requirements okay now the next thing is fit height okay so as the name suggests it will fit the height and it will not care about its width so let's see and you can see the height has been all the height has been taken up and the width is also taken because the image is big but you can see some part of the image got clipped on both the horizontal sides and that is what the flood flutter will not care about because right now we are using fit height so all it cares about is the height okay and similarly we have fit width okay so now all it will care is about the width and whatever happens to height flutter will not care okay so let's see and you can see the entire width is taken by the image and there is no significant change in the height but if the image was uh horizontally long image then you could see the significant change okay so this was fit width then the next one is none that means no change okay so it is equal to if it equal to null okay so the same image as it was before we had fit then the next part is scale down okay so what this basically does is it will shrink the image if required but it will never stretch the image okay so let's see and this also so shows no significant change but if we had some image that exceeded the length or the width then it would have automatically shrinked okay so to understand better we you can go to the official flutter box with enum and over there you can see with very good examples how these all work okay so the contain it contains the Box okay and it changes the its shrinks or increases the size of the child as required as needed okay and in box fit it covers the entire space in fill it it stretches such that all the spaces are filled and fit height it only cares about the height in fit to its it only cares about the width in none you can see no changes happening irrespective of the shape and size of the container and then is scaled down and you can see as the size changes its height is shrinking okay so this was about this fit thing okay so I'll remove it for now and save it so now we got the image back in the center now the next thing that we are going to discuss about is alignment okay so as we have seen in the text in the text widget over there we had a text align but over here we have a alignment enum okay and over here these are the options that we have so let's try top Center and then the image should be pushed to the top okay and you can see that similarly we have bottom center and the image is pushed at the bottom now if we had a image which had uh the width less than the screen size then we could also try bottom left and bottom right and the image will accordingly be placed at those positions okay so then after alignment the last thing that I want to discuss is repeat okay so sometimes you could see that a single image is being repeated in all the places okay means like in the entire screen of single images is repeated uh in column wise also and in rows wise also so that can be done using this repeat argument okay and it also has a image repeat enum okay and the first one let's say try repeat okay so that means that the image will be repeated in all the place available in the screen which is unused okay so let's see and you can see the images repeated over here because this was the unused space and the same goes for this bottom part because this was the unused space okay so this is what we can do with repeat now the next type is repeat X and it is for the xaxis that means the width so let's see and since we had no free space in the width so no repeat no repetition has taken place okay now let's try for repeat y okay that is for the y axis or the height so now you can see the same repetition took place as we saw in repeat okay so I hope you are able to relate all all these things together okay and then the last I press no repeat okay that means no repeat which is equal to null okay so you can see that okay so this was about image asset in the next video we will discuss about image Network thank you welcome to programming knowledge so in this video we are going to discuss about class and objects in Dart okay so if you don't know what is class and object you can refer to this website it has explained beautifully over here you can see we have a class car okay and then these objects are derived from this class okay so generally till now whatever we have done like whenever we wanted to store some value we created a variable and then that variable generally had some primitive data type like string integer and more like that okay but suppose if I want to have a collection of these primitive data types and refer to them as a single object then we use this class and objects okay so you can read more about this okay so back in our DOT pad to create a class we have a keyword class okay and then we write the class name over here I am writing point that is a very common problem that we see okay it means a common competitive coding question okay so I'll have two variables inside this N Text and end y okay both are primitive data type and any variable that is declared inside a class is called as data members okay so now uh it is recommended that whenever we create a class and have some data members then we should initialize it okay and to initialize we have a special function inside a class called Constructor which is used for initializing all the data members inside a class okay so now this Constructor doesn't have any return type and it has the same name as we have of the class okay so over here the class name is point then the Constructor name will also be point okay then we have created this method now inside this method what I am going to do is I'm gonna initialize my data members okay so for that I'll write X is equal to 0 and Y is equal to 0. okay so this is done Now to create a object of this class over here I will simply write the class name and then p means that is the object name which is very similar to how we created any other variable like int X so that means we have created a variable X of type end okay and over here if we give VAR that means that was also correct and so is the case over here even if we write v a r over here this will also work this is absolutely fine but for the timing I am gonna use Point okay so that it is clearer to understand okay so now to access any data members we simply write print P Dot X okay and let's try printing it so 0 should be printed okay so you can see we got an error over here and the error is because we have just created the object but we have not initialized it okay so to initialize any object we need to write the class name and then parenthesis which is basically calling this Constructor okay that means as soon as this point P will be created then this point method will be called which is nothing but our Constructor so then our values will be initialized and the error will be not there so you can see the error is also null error that means the value is not assigned some proper quantity like this X and Y are null they don't have any value stored in them then we are that's why the compiler is not able to print the values okay so let's try running this now so now you can see the output is 0 for X as we have stored 0 in X okay so now if I change it to 10 then the output should be 10. and you can see that okay so now I'll remove this function for now we don't need function right now okay so this is one type of Constructor now we can have some parameters assigned also like suppose I am giving it a value in a okay and now over here when I call this Constructor now I need to pass this value a okay so let's say I pass 200 okay so now over here what will happen that I am assigning the received value at a to this variable X so now if I print X I should be able to see the value that I have sent from here so let's see and you can see 200 is being printed similarly you can try for print P dot y now if I run this I should be able to see 200 and 0. okay now the next thing that we are going to see is uh like suppose I have the data members as X and Y and the parameters I am taking is also X and Y okay so like for first I need to prepare another parameter because over here I am expecting two parameters so now if I write if I want to assign this x value to this x conventionally I should write X is equal to X and same goes for y I should write Y is equal to Y so now at this point the compiler will be confused as to which X refers to which type of data like is this x the data member or the positional argument that we have over here and the same for this x that whether it is the positioner argument that we get over here or the data members okay so in such scenarios we have a special keyword called this so if I write this dot X and this dot y so that means if it is written this dot X that means I am referring to the data member of this class okay so if I write this inside this point class that means my this is referring to this class and this has a variable y has a data member X which is this one so in this data member this positional argument will be stored okay so now let's try removing this and see what is the error and you can see the it is showing null that means no value is assigned because over here these both are referred as the positional arguments okay so if I add this dot y then the error should be gone okay I should be able to see 200 and 100 okay so you can see that so this is when this keyword comes to play okay so now this is one method to create a Constructor there is a simpler method that dot provides okay I'll remove this and I'll simply write Point okay and then inside this this dot X comma this dot Y and then a semicolon okay so this means that when we call the Constructor the value that we store over here will be stored in the parameter in the named argument that we have over here and which is eventually a data member so the value received over here will be directly saved in this data member okay so now if I run this we will not see any error and the answer will also be the same but you can see the lines of code has reduced and it is a much more simpler way okay so this is it now after that the next thing that we have in a class is a function okay so our class generally comprises of three things uh data members Constructor and some functions and the functions which are inside a class are called member functions and sometimes we also have a Destructor okay so if you don't know about a Destructor then as we have Constructor which is called at a star as soon as the object is initialized Destructor is called as soon as the execution of that object ends okay so we are not gonna discuss about the destructor because that is not used a lot but if you want to learn you can go to the official documentation of Dart okay so now we are going to create a member function okay so I'll first simply create a simple member function that will simply print some data okay and it will have it will not return anything so the return type is void and the method name is print data and since it is a oneliner function I'll write it like this print and then I'll use string interpolation okay and what so now if I run this I should be able to see 100 plus 200 200 plus 100 I'm sorry okay so you can see the output is not as we expected and that is because over here I have not called the method that is my mistake okay so to call any member function we first need to write the object name a DOT and then that member function okay so now let's try running this and then we should be able to get to the output okay and you can see the first to print statements give these two output and the last is this statement which is executing this function and over here we have the Sprint statement X Plus y so we are getting the value of x plus the value of y okay so this were the basics about class and objects in the next video we will discuss little bit more about the class and objects and then continue with our images thank you welcome to programming knowledge so in this tutorial we are going to continue our discussion on class and objects in dot okay so now we are going to discuss about named Constructors okay so sometimes we need to have more than one Constructor such as one which takes two input values and the other one which takes a map okay so that may vary according to your requirement okay so in those places what our what we do in any other programming language was to create another Constructor with the same name and over here the parameter will vary okay so that was the normal case that we had in Java C or Java or C plus plus okay but in that this will give us an error okay so the way to have more than one Constructor in a same class in dot is by using the named Constructor okay that means the Constructor will have an additional name to it okay so to create a cons named Constructor we first write our Constructor class name okay and then the additional name so let's say from map okay and as the name suggests that this will take a map of type string end and I'll call it map and then I'll store the value in this map to my data members okay so for that I'll write this dot X is equal to map and map will have a x value okay this dot y and then map will have a y value okay so this is done now let's try creating a point object using this Constructor okay so for that over here I'll first in the 10 object Point P1 and then to call this named Constructor we write point Dot from Mac okay and then over here as you can see over here we are expecting a map so we need to pass a map okay so for that I'll open curly braces and then the first value is X and let's say 10 and then the next value is y and I'll pass 20. okay then I'll close this bracket over here now over here you can see the type has been mentioned so it would be better if we mention the type over here also this is referred as a good practice okay so string end okay that means in this map the key will always be your string type and the value will always be of integer type any other data type will give us an error okay so now let's try calling this function on this P1 object okay so for that I'll write P1 Dot print data so now let's try running this and we should get 10 plus 20 as the output and you can see that so this is how we have more than one Constructor in the same class by using the named Constructor okay so now over here you can see this is how we create a named Constructor but this is not the best way actually there is another way and that is called initializer list okay so for that I'll remove this from here okay and let's see how we use an initializer list compose my con named Constructor is same Dot from map okay and it takes a map of type string and int and I call it map okay now instead of giving curly braces what I am going to do is I'll give a colon okay and then I'll initialize the value so I'll write X is equal to Map X okay and Y is equal to map y okay and then over here only we can call this print data method okay so let's see what happens print data okay so this means this method will be called after the value is stored okay so let's try running this I'll just remove this print data from here we should get the same output let's see and you can see we get the same output so over here you can see our lines of code are less and the work is also optimized that means uh before the code inside this Constructor starts running our data members are initialized okay so this is where initializer list comes to play okay and we don't use initial initializer list just to initialize but for other cases also like assert assert X greater than zero okay so that means it will check if x value is greater than 0 and if it is not then this Constructor will not run okay so assert is a special keyword that we have in that okay and the code will not pass from here until this condition is true okay if this condition is false then the execution will stop over here okay so this is done yes so now let's try running this I hope there are no errors okay and you can see there is an error okay so let's see what has happened okay so the error over here is that X and Y are not getting initialized okay so instead of writing it over here I'll write it I'll cut it from here remove this okay and over here I'll write the same thing okay now let's try running this and I think the error should be gone by now and there are still exists because we are calling this and this is not valid so now let's run this again okay so now you can see we get the output now the next thing that we are going to discuss in class is Getters and Setters we can use the same type of gutters and Setters that we use in any other object oriented programming language along with that there is another procedure that dot provides okay so to get a value we simply write the return type of the value and then the keyword get and then the name point x okay so suppose if I call point x I want the value of value stored in this data member okay so then simply I'll write this dot X okay so that means over here return keyword is applied implicitly okay so now let's try running this so I'll write print P Dot okay so as I told in the previous video we call all the methods inside of the class using the object of that class okay so now let's try running this and 200 should be printed below this and you can see that okay similarly we can write for y and get point Y okay and then this returns this dot y now similarly over here I'll print this print P dot get all sorry P dot point one let's run this and I should get 100 over here and you can see that now this getter is not only used for getting the data members we can use return customized answers also okay so suppose if I want to return a map of type string and and I'll call it get map okay then this should return a map of type string and then okay and the values will be X and that will have the value stored in the data member X okay and then it will have a value y again that will return the value stored in the data member y okay then I'll close this over here and as I said the return keyword is applied in these both implicitly okay so then again I'll call this method point P dot get map okay now let's try running this okay so it is giving us an error and that is because instead of print over here I have written points so now let's try running this and there we get the result it returns a map where X has value 200 stored in it and Y has a value 100 stored in it that is same as we have passed in our Constructor okay so this is how we use the gutters in dot okay now talking about setters for Setters also there's a different method that is provided by this dot so we simply write set that is a keyword in Dot and then point x okay Point capital x okay so now let's not give it a give the same name I'll write set X okay and then it expects an integer value I'll call it X and then as we know how to differentiate this dot X refers to the data number and this refers to the parameter that we get over here okay so now let's try calling this I'll call p dot set X okay and then it returns expects a value I'll give 500 okay and then simply P Dot print data okay now let's try running this okay so over here you can see we got an error so the error was instead of passing it as a parameter I pass it with an equal to sign okay so now let's try running this and you can see instead of 200 the value has now changed to 500 similarly we can set X set Y for the Y parameter and then similarly we can take a map and then map it to our data members like we did in the named Constructor part okay so this was about gutters and Setters and by this we complete the basics of class and objects in that okay so the next thing that I want to discuss is about enums okay so enum is a special type of class that represents fixed number of constant values okay so to create an enum okay so now suppose we have a payment status okay like the payment status will have three values and those three need to be fixed values okay so in those those cases we use an enum okay so for enum we write the keyword enum and then let's say payment status that is the example scenario that we have taken payment status okay and then this has three values first one is not pay then OTP and then paid okay so this can be the three members I'll give a semicolon over here comma over here I think we don't need a semicolon over here yes we don't need it so we have an enum over here that has three values not paid OTP sent and paid okay so over here we can create a object of this enum okay so for that I'll write final status and to store any value from this enum we first write the inum name that is payment status dot not sent not paid okay so now we have a status which will have a data type of payment status and it has a value you can see in our payment status if I click on this also we will get the same thing that is payment status status okay so the status right now is not paid now to check so this is actually used widely when we use a switch case okay so in switch case I have a status okay and then I'll I'm sorry in switch case we have a status and then over here the first case is case payment status dot not paid and if that is true then we want to to do something and then similarly for the other two statuses okay so now you might be thinking that why do we use uh enum even when we can simply write it use it as a string or as an integer okay so enum is used for standardizing the values okay so now suppose over here if you have the stay San Jose okay so now suppose over here the status is not paid okay and in the switch case we are checking switch and then case and the case is not paid okay so you can see this is a common mistake that we can do like over here we have a capital P over here we have a small p and using enum we can avoid all these types of mistake also so that is another benefit of using enum okay so that was about enum I hope everything was clear thank you welcome to programming knowledge so in this video we are going to discuss about error handling in Dot and you might be thinking why we are using this editor instead of the dart pad and the reason is that in dot pad it automatically handles the exception okay and as we are discussing about error handling so we need to see the errors okay not all the errors but maximum errors in the dot pad is handled by itself okay so the concept of error handling is same as in any other object oriented programming language okay we have a try and then we have a catch okay and then this catch block takes an exception and if you don't know what is an exception so that means that is a technical term used for errors okay so in your program if there is an error then it is referred to an exception okay so and in the catch block we deal with the exception okay so now let's try creating an error okay and without this try and catch block so I'll use the most popular example for errors for creating errors that is division by zero okay so I'll create a variable a 10 sorry it should be 10. and then and then another variable B that is zero and then in variable C I'll store the quotient so a by B okay and then I'll print C so now let's try running this and see what is the answer and you can see we are getting Infinity as the answer okay so that is because whenever we divide by zero in dot it automatically gets converted to a double value okay and in the double data type in dot we have a certain value for Infinity so as this will give an output Infinity so it is automatically converted into double and the infinity value is assigned to this variable C that is why we are getting Infinity as the output okay so to prevent from the changing of data types we need to add a tilde symbol over here so now let's try running this again okay and now since the it is not being converted we should get an error okay and you can see we are getting an error and as I told error is referred as exception so there is an unhandled exception and that is integer division 0 exception okay that means it is very much understanding that we have divided by zero and that is why we are getting this exception okay but now suppose this exception is in an app and the user sees this error message so he might not be able to understand what this means okay so at that places what we do is we surround them with a try and catch block okay so over here a try and every try block needs to be followed by a catch block okay and then it takes an e that is the extra exception and that will be an object of this exception okay and then instead of printing these things I'll simply print division by zero is not possible okay now let's try running this again and you can see that the catch blocker has been executed and it is printing division by zero is not possible okay so this is what happens normally in try and catch block the we keep the code where we expect to find some error inside the dry block okay and if some error is found then the terminal execution is terminated then and there and the catch block is executed instead okay so this is the use of try and catch block and this is how we generally use drawing and catch Block in most of the programming languages okay so now in that there is another thing that it provides us okay and that is for specific exception handling that means if it is a division by zero exception then we will handle it differently otherwise we will handle it differently okay so for that what oh I'll write over here is on okay so on is a keyword in Dot and then the exception name integer division by zero exception okay so if this is the case that means integer division by zero exception is the case then we will then this statement will be printed so let's try running this and you can see division by 0 is not possible that is inside our this on block okay now along with this let's try to let's try and check if we can have another catch block or not okay so now inside this I'll simply print another catch block and let's run this and see what happens okay so you can see only the on block is being printed and not the catch block means if the exception is of this type then only this block will be executed and not the catch block and if the exception is not of this type then only catch block will be executed okay so now let's create another exception I'll comment this out for now and I'll create a list let's say s is equal to 1 comma 2 comma 3 comma 4. and I'll try to print the value out of index okay so that means S4 where the list has index only till three zero one two and three so let's try executing this and see and now you can see it is giving me some different type of Errors which is not actually an error but it is an warning and that is because over here I have forgot to give the data type now let's try running this again and you can see the error has been created over here and since it was not of this type so this block is not executed instead the catch block is executed okay so this is how we handle error specifically means handle error for specific exception in a specific way okay and suppose if we want to get an object over here also so after this what we need to do is simply write catch e okay so that means when this is the exception then the exception will be catched over here and then inside this we can do whatever we want to do with this e block okay so this was about try catch and this is specific error handling now the next thing that we generally discuss in error handling is a finally blocked okay so that means whether the try block is executed completely or if there is some exception and a catch block is executed no matter what is the case after this whole part is over finally block will always be executed okay so let's see print always executed okay and now let's try running this and you can see the catch block has been printed means the statement inside the catch block has been printed and the finally block has also been executed okay so this was the case when there is an error now let's see if there is not an error okay then as I said this drive block should be executed and then the finally block because that is always executed okay so this was about finally block okay so the last thing about exception that we need to discuss is creating a custom exception okay so for that I'll create a custom exception class okay since we are studying an object oriented programming languages most of our working will be done via class okay so I'll create a class age exception okay which will throw an error when the age is below zero which is not technically possible so class age exception implements okay so this is the way of inheriting another class properties okay or a abstract class to be more specific implements exception okay so we have an exception class already inside Dot okay now inside this all we need to do is create uh Define a method string e r r MSG or you can name it as an how you like okay so what it basically does is by implementing this exception we are basically able to throw this type of exception okay and whatever we do inside this doesn't matter with the throwing of exception okay this is our custom Choice what we want to do with it okay so over here this will simply return h cannot be zeros it cannot be less than zero okay so now over here let's see I'll remove this thing from here and now over here I'll create a variable a VRA is equal to minus 10. okay so that means if a stands for H so I'll check if a is less than 0 then I want to call this exception okay so to call this exception there is another keyword throw which creates an exception and throws it to the catch block if it has any or to the user if we don't surround it with a try and catch block so throw and then we write exception okay so now let's see what happens and you can see we got an exception the exception was thrown over here that's why the catch block got executed and the finally always gets executed okay so this was about error handling in dot thank you welcome to programming knowledge so in this video we are going to discuss about asynchronous operations in dot okay so the question that arises is why asynchronous operations so the answer to that would be a synchronous operation select your program keep running while waiting for another operation to finish okay so let's say for example we want to store data in our server so this type of operation doesn't execute instantly but might take some time depending upon the internet speed or size of data Etc so if we don't use asynchronous operation user will have to wait until our program is interacting with the server which will create a bad user experience so to prevent that we use asynchronous operations and for this purpose that provides us three special keywords to use they are future async and a weight so first we are going to discuss about Cronus operation and can have two states only either uncompleted state or completed state so how this works is when we call an asynchronous function it returns a uncompleted future and then future is waiting for the functions asynchronous operation to finish or throw an error and soon as it finishes or throws error the future State changes from uncompleted to completed okay so let's take an example and the keyword future we have capital f in it okay so let's say we have a future method uh future function we call it fetch user data and what it basically does is return future Dot delayed okay so this means that using this delayed method we can delay the process for some times that is equivalent to sleep in multithreading in Java or in any other common programming language I mean object oriented programming language okay so then we have another class called duration and it takes all the time parameters that is seconds minutes hours days okay so for now suppose we assume that our program will take two seconds to interact with the server so I'll give it a seconds and that is to that means uh this will wait for two seconds and then start executing okay and we are doing this because we have assumed two seconds to be the time of our program to be interacting with the server okay so after this we have an unnamed function which contains the code that will be executed after this delay of duration two seconds and simply I want to print data okay so this is our function now we can also specify the return type of the future okay now over here in this fetch user data I have a return keyword but it is not actually returning any data it is simply printing the word data that means I am not returning anything and if I am not returning anything then we all know the keyword which is void which means this function will not return any data now I'll comment this out first now okay now after that I'll call this method search user data and after that I can say have a print statement switching user data okay so now let's try running this okay so now you can see we have fetching user data first and then data but actually according to the convention we have first called Fetch user data which is this method so this should be printed first so that means our delay function is working fine and that is how uh the asynchronous functions work that means over here if there is a delay of 2 seconds it will not wait for two seconds to execute the rest of the code it will directly start executing the rest of the code and as soon as this finishes the future States become completed and it hardly affects the rest of the execution of the program so then this function is called an asynchronous function okay that means our program is still running and not caring about the completion of this function means the completion of execution of this function okay so this is how we use futures okay so the next thing that we are going to discuss is a sink and a weight so these keywords provide a declarative way to define a sync function and use their result okay so let's say this function remains same and instead of printing data now it actually returns something and which is eventually a string okay so means after two seconds data will be returned okay now if it is returning string I need to change this to string okay and now after that over here I'll create another method which is string and I'll call it user message okay anything that we like and then what it basically does is drag data is equal to fetch user data means we are calling this method okay and then I am simply printing this uh simply returning a string because we have a string return type here return data and now in our main method all we do is we remove all these thing and we write print user MSG okay now over here you can see it is giving us an error so all we can do is surround it inside quotes and do string interpolation okay so now uh Dart will infer that it is a string so now let's try running this and see what is the output okay so as according to the convention the output should be data but instead of that we are getting a future of string that means as I earlier said if we execute a future it returns a future and that is in uncompleted State and it is expecting to be completed or thrown error okay so now over here you can see what basically happened was that this function was executed and as this is a asynchronous operation it didn't wait for this function to finish and returned the data and why and since this this was not yet finished it returned the uncomplete state of future and that is why we are getting such type of output okay so this is what we call a uncompleted Future Okay and a completed future has a proper accurate value okay so I hope you are understanding what I am trying to say and now to prevent such type of error what we need to do is we will use the async and await keyword okay so what await keyword basically does is that it will wait for this function to execute or basically it will wait for this functions future to be of completed state okay and then this await function is giving an error over here and that is because a weight function never goes without a sync function okay a sync and of it always go together okay if we write a wait and don't write a sink it will give us an error however vice versa will not give an error and that is because a sink is just allowing that function to use of it and then if we don't use a bit then that is not a problem but if we use a weight and we have not allowed that function to use of it then that thing will give us a problem okay I hope you are understanding these things now as you can see this is now a asynchronous function and over here also you have seen a asynchronous function but the difference between these two asynchronous functions were this asynchronous functions a function returns a future while this asynchronous function is returning a string and that is why we are getting our error over here because asynchronous functions always return a future okay so instead of string this will now be future string so now it is a future string and since it also will now return over here a uncompleted state of future and we want a completed state of future that means we want some actual result we will use a weight over here also and now since this is using await we need to give a sink over here keep in mind async is always after the ending parenthesis and before the opening curly braces okay so now let's try running this program and now instead of getting this instance we should be able to see this data being printed so let's see and you can see as soon as the execution is completed it waits for two second and then data is being printed so it is waiting for two second because over here we have used a weight which is making the program stop for two seconds until this has a completed state of future and the same goes over here so this were all the basics about future async and await okay so I hope everything was clear thank you welcome to programming knowledge so in this video we will come back to flutter from Dot and continue our discussion where we left so in our last flutter video the love we discussed about image dot asset so in this video we are going to discuss about another type of image and that is image dot Network okay so what it basically means is that you can display any image from the internet in your flutter application okay so for that I'll remove this child completely from here add another chain and that is image dot Network okay and then we need to give a SRC which is actually the URL of the image okay so I have a URL copied you can pick any URL from the internet okay now if I save this I should be able to see this image on my screen and you can see this it is a simple image of a burger with a red background okay so now the properties that we discussed in image dot assets are also applicable in image.network and there are a few more things which were there which were present in image asset but I have intentionally left that to discuss in image.network because it makes more sense over here okay so for that first quick recapitulation about frame Builder so as I told as we discussed in our previous video frame builder takes four properties first is build context context then a widget child then uh frame and then Bool is async loaded okay and then it needs to return a widget okay so just to see the difference of this Frame Builder I'll simply add up padding okay and it will have a padding of let's say const its I'm sorry Edge inserts all and let's say 20.0 and the child is our child widget over here okay so now I'll format this and run and let's see the difference okay so now you can see we have a padding of 20 from all the sides okay let's make it 40 so that the change is significant and you can see we have a spacing from all the sides and that is the padding okay so this is about frame Builder we have discussed it in the previous video about image dot asset now the next thing that we are going to discuss is a loading Builder Okay so the reason I have not discussed it in image dot asset because over there we don't actually load something we already have the image in our asset folder but while we are loading some image from Network which means we are re uh downloading stuff from some other servers so that might take some time to load okay so that is when we use the loading Builder okay so then loading Builder also takes uh build context okay I'll call it context then uh reject child and then image chunk I'm sorry image chunk event and that is the loading progress okay so this has all the data about the loading speed bytes already loaded and bytes remaining to load means all the numerical data means are stored in this image chunk event Okay so we can get all the data from this loading process okay anyways we are not going to discuss anything about that right now because that is not actually used that much okay so now over here we want to return our widget and that widget will be displayed until the image is being loaded from the server okay so for that I'll simply return inside our Center inside a center I'll have a child and that will be a text View okay and the text view says loading image okay and why is this texture giving an error okay so it should be a text not a text View I'm sorry now let's run this and see okay so you can see after some time the image is loaded okay now the next thing that I want to discuss is error Builder so that means this widget will be displayed when there is an error the widget that we return in error Builder Okay so error Builder it also takes a build context you will see in flutter whenever we are returning our widget we are generally taking a build context okay then an error object sorry object spelling is now and then a stack Trace about the error okay and then over here I'll return inside our Center the child will be text error occurred okay so now let's return this let's run this and before running I'll remove just one letter from here so that this URL is invalid and this error Builder should be called okay so let's see and you can see error record is written in the center and along with this you can also see in the terminal we are not generating any errors when which would be in the console if we don't have this thing right over here okay so let's see if I remove this error Builder and then if I try loading uh invalid URL we will get a error in over here in our console and you can see that and even on the screen so that means that the error handling has also been done internally when we use a error Builder okay so that was about image Network and all the other things that were discussed in image dot asset is also applicable in image.network these were a few new things okay so now these are not the only types of images that we have in flutter there are two more that is image dot file and image dot memory Okay so we will discuss about those when we cover little bit more about Basics like working with files in flutter and working with base64 and stuff like that okay so this was about image.network and now since we are discussing images there is another way to display an image inside a container okay and that is Insider decoration so Insider decoration we have our simple box decoration okay now this box decoration has a property image and this image takes a decoration image widget over here I'll write a decoration image and then inside the decoration image image is required part okay and then over here we simply can't write the URL for Network image or the path for asset image okay for that over here we have different widgets suppose if I want to display a asset image so I'll write asset image that is the widget name and then over here the first thing should be the path so that is asset and then G sharp dot PNG now let's run this and see and you can see the images over here now what will happen if we will apply padding to this container that will not be applicable for this image because this images are decoration to the container and not a child to The Container okay so there's a difference between decoration and a child okay now similarly for our Network image we have Network image and then over here goes the URL okay so you can add the URL over here and then it will be pretty much the same we we will be able to see the image on the screen okay and now uh we apply all the properties to the image like fit and stuff so that is not inside this asset image that is inside this decoration image okay so over here I'll I can have that fit and then all the other stuff that I had in image.asset and image.network not all but most of them okay so suppose if I write fit height and let's see what happens I'll format it save it and you can see the same properties as we discussed in image.asset okay so this was yet another way how to display a image in flutter okay the method you display an image may vary according to your needs so this was for the video thank you welcome to programming knowledge so in this video we are going to discuss about list views in flutter okay so list view is the scrollable widget the most commonly used scrollable widget that we use in flutter and inside that we show a child one after another okay so for that first thing that I'll do is I'll remove this decoration box decoration thing okay and then I'll not give the height to Infinity but to 300.0 okay so that a smaller size so that in less less child only we can see the scrollable effect okay so now let's give it a child and the child will be list View okay so now this list view takes our children same as we have in columns or rows okay now simply I give a text and that says programming knowledge I'll copy this and paste it a few times format it and now let's see what happens okay so now you can see I have this text printed four times but it we are not actually able to see the scroll level effect I'll reduce it to 50. now let's see what happens and yes you can see now we are having six texts over here but we can actually see only three and the rest are in scroll level so if I scroll I am able to see all the other lists okay so now yes it is not looking very beautiful but for understanding purpose it is adequate okay so this is the scrolling purpose now we can also change the scrolling direction we have a axis okay or let's say scroll Direction yes and it has a axis enum okay and then over here we have two values horizontal and vertical by default it is vertical we can change it to horizontal now let's see what happens and you can see it is scrollable in horizontal Direction okay so now another thing that we have in a list view is a padding okay so we can add a simple padding Go on stage insets all 10.0 let's save and see what happens okay so over here the common confusion is that this padding is for in between each children but that is not the case actually it is for the entire list View okay so now ah generally when we use list view we actually have a list of items and then we want to show widgets according to that okay so now for that what we basically do is let's first consider having a list okay so I have a list of let's say type string and they are called list items okay and they have something like a comma b or maybe it will be better if I just make it comma 2 comma 3 comma 5 6 7 8 9 0. and change the type to int okay so now we have a list okay that has numerics one till zero again we want to display it in a list okay so over here this children over here we can we can't simply write list items okay because that is invalid because this children expects a list of widgets and what we are actually giving here is a list of integers okay so this is a common mistake that developers make okay so there's a way around what we can do is we can use the map function that we have in a list okay so what map basically does is it is like a for each Loop it will give you each item inside the list and then we can perform specific actions related to that okay so map and then over here this e will contain the integer means its integer one by one okay and then over here instead of null I want I will return the widget that I want to show here that I want to show in my list okay so I will simply write return a text widget Maybe okay and the text says count and then string interpolation e okay and then after that over here dot 2 list okay so what we have basically done over here is that we have mapped all the items of list view okay and for every item we have returned our text widget and then we have finally converted all the widgets to our list and then that list is given as a children in this list View okay so now let's see what happens and you can see count one count two count three count four means as we expected it to be okay now suppose I want to give it a little bit spacing so what I'll do is I'll wrap it with a padding and all sides should be 10 and then if I save this so now you can see it is having some problems in spacing and padding I'll remove this for now okay that is just for understanding purposes so now you can see count one count two till from here till count to zero okay so this is how you display a predefined list of dynamic data type as a list of widgets using a list View okay then after that we also have a few things such as key okay so then it also takes a key now the basic use of keys that we can use the same key in any other list and then we can manage both the scrolling of both the lists at the same time okay so that is the basic use of key and then there are other things that we don't need as such but when we will do some projects then we will see all the other features of list view also thank you welcome to programming knowledge so in this video we are going to continue our discussion on list views in flutter so in the previous video we saw one method to use a list View in flutter in this video we are going to see another method and that is by using the Builder named Constructor that we have for list view in flutter okay so for that I'll first of all remove this list view from here and then I'll write list View dot Builder okay so now this builder takes a few parameters some parameters which are necessary to be given first is the length of the list okay so that is referred as item count okay and now we are referring to our this list items so I will give the length of that okay and we know to get the length of any list we have a keyword called length in flutter okay and then we need to give an item Builder okay that means how and how each item will look okay so now it takes a few parameters first is the build context as I said whenever we will be returning a widget or dealing with widgets we will be needing a context and to be more specific of build context okay so this is automatically returned in this item Builder okay and then the index okay means this index item is going to be displayed okay so now first of all I'll simply return our text and that prints count okay and then using string interpolation I'll write list items index okay now let's try running this and you can see we have one two three and then means we have given this much space only that is why it is happening like that now I'll remove this space uh height part from here now let's see and you can see we have this list over here okay now it is obviously not scrollable because we have ample space left okay so now this is an easier way uh to use the list view when we have the same widget for each item okay now since we are discussing about list view there is a special tile widget that is most commonly used in a list view okay and it is basically designed for being used by a list View and that is called a list type Okay so means its ideal purpose is to be the item of a list okay so first of all it takes a title okay and the title can title needs a widget so for now it is text count the same thing string interpolation list items index okay then along with a title it takes a subtitle then it can be anything it means it also needs to be a widget okay it can be any widget so text and anything like programming knowledge then after that it takes a leading okay that means on the in the left side in the at the starting of the screen if you want to display something okay so that is called leading create also takes a widget for now I'll display icon that is what standardly people do and then inside that I'll use the icon see now and then let's say done that will give us a tick mark okay I need to format I need to give a semicolon format this now along with the title subtitle leading we also have a trailing which will be in the opposite side of the leading which means at the end of the screen horizontally so I can also give this an icon widget okay inside that I'll use icons Dot close that will give me a cross sign okay now along with this we also have on press or on tap yes we have on tap and on long press so on tap that is like any other on tap it takes a function simply I'll print pressed list items index okay uh it is giving error because that is a string that is an integer and we are trying to display it inside a print statement and print only takes a string okay so the problem is gone okay so now let's see how it looks and you can see we get a list now as I told in leading we have given this a done which is our tick mark and in trailing we have given a close which is this cross mark then this part is our title this part is our subtitle and if we press on it we are getting pressed one pressed two or and similarly okay so this is a list type okay so now the last thing about list that I want to discuss is that it doesn't always need to be a proper list means suppose I have three different Columns of varied things I can't say that all the things are uniform all the things are coming from a list means there are different things but I want them to be scrollable okay so in those conditions what we can use is we can wrap our body with a widget called as single child scroll View okay so what it basically does is that its child whatever we give inside its child no matter how long it is they all will act as a single scrollable screen okay so this is a way around when you don't actually properly use a list but we can use all the properties of a list okay so this will be about lists thank you welcome to programming knowledge so in this video we are going to discuss about another type of list View and the dismissable feature which is generally associated with list View okay so let's start first of all in my body I'll give it a width of infinity so it says double dot Infinity okay and then the child is list View dot separated okay so this is another type of list view which has a separator Builder like in the list view dot Builder we only had an item Builder okay but over here in list view dot separated we also have a separator Builder which means every item in the list will be separated by the widget returned to this separator Builder okay so first of all let's add the item count and it will be list items dot length okay and then the item Builder is simple it takes a build context okay and it returns sorry wrong spelling returns all list Style okay and then over here in the title we can have text and the text says count then we'll use the string interpolation inside curly braces we will write list items and then the index oh I forgot to give an index over here this method also takes an index okay then I'll return this over here this will go over here now let's format this and now let's also give a separator Builder okay so when you hover around separator Builder you see we get a build context and an integer which is the index so this means that for every item we can specify a different divider okay that is the power of this separator Builder but over here we will simply use a single separator for all the items okay so build context context sorry that will be a comma int index and I'll use the arrow function and it returns a divider okay so we have not yet discussed about divider so divider is actually a widget that will just draw a faint horizontal line divider always draws a horizontal line in flutter so let's save this and see and now you can see we get the values and each value is divided by a divider okay so now you can see this is the standard color of divider but we can do a few changes with the divider like change the color so I can change the color to Colors dot red now let's format this and see what happens and now you can see we have the divider in red now similar to list view dot will direct also has a padding okay so we can give it a padding con sorry the const will be in small C const engine sets dot all and that can be 10.0 so now let's format let's save it and then you can see each divider has a little bit space over here and that is because of the padding okay so this was about the list view separated which is the last type of list view okay so we also have a list view dot custom which takes a flavor delegate but still we have not discussed about sliver delegate so I'll do the list view dot custom part once we discuss the list view sliver delegate okay so moving on the next thing that we are going to discuss is about the dismissible feature okay so by that I mean that if I if I pull from end to start on a list item it should be dismissed or maybe over here it shows a delete icon and then if I pull it from the right to left the item gets dismissed okay so that is a very common feature that we see with list views okay so to do so over here in item Builder instead of returning a list tile I'll return another widget okay and that is dismissible okay so now again this is dismissible Will let's give it the child a card okay so a card is another type of widget it is very much similar to container only difference is that it has an elevation means it also has a height in the zaxis okay so then I'll give the child as a card okay then card will take a margin can the margin let's say Edge inserts symmetric I'm sorry as inserts Dot symmetric okay and then in horizontal we give it uh let's say 15.0 margin and then vertical we can give it a 4.0 margin I am doing so because we are already giving it a margin over here a padding over here that's why that's why I am reducing the margin vertically okay well let's format it now we have the card now inside this card we will add our child okay so the child will be for now a simple list tile okay and the title will be text that says count and then string interpolation list items index let's format this save it and see okay so you can see over here it says that key should not be equal to null okay is not true so that me that error is because this dismissible x are key which is not significant over here but it is necessary so over here I can simply write key and then key takes a key value okay so over here I can simply say value key okay and then over here it takes an idea I'll write one two three okay that means this value key means it will generate a key from this value and it is assigned to this key okay that is just for removing the error now let's save this and now you can see we have this card over here this elevated thing okay so now I think we should remove this separator Builder the purpose is understood over here and this can be changed to Builder okay so now you can see we have this card over here for each item okay now after this the next thing that I need to do is for dismissable I need to add a on dismissed property okay so over here after the key I'll write on dismissed and it takes a function which has the direction means the direction in which the item was dismissed and then for now I we can simply print the direction okay we can change it to according to the functionality needed later so let's save this and now let's try dismissing it so you can see this is dismissable and the value is being printed okay the direction is being printed so over here you can see dismiss Direction dot end to start which means this is the end this is the start and dismiss direction is an e num okay now if I do it from here so now you can see it is like start to end so I think you are understanding what I am trying to do over here this is the feature I was talking about we can simply remove an item from our list with a little bit of animation okay now however if I'll build this again I think all the items should return okay now let's rerun this that was giving us an error yes so you can see we have the list over here back now along with on dismissed we can specify a direction that will be used as the dismissed Direction like right now in the app you can see the item can be dismissed from end to start and can also be dismissed from start to the end but I want only to dismiss it from the end to start so in that case what we can do is inside this dismissible we can add a dismiss Direction okay not a dismissed Direction Just front Direction okay and over there over here we have just now seen we have our dismissed Direction enum like this and then you can see this is the these are all the values down means when we pull the item down and to start means the names explain themselves okay and I want this to only be valid for enter to start means the dismiss feature will only work when we try dismissing from the end to start okay now let's save this and see so now if I try dismissing it from this direction it will not work but however if I write is missing from the end to start it will force your work because we have restricted the direction from end to start only now when we are dismissing you can see we have this background over here now in flutter we can also specify what should be the background of every item when being dismissed okay so the general convention would be to add a delete sign okay so let's do that we have a background named parameter it will it takes a widget and for now it is a container okay now the container should have a color and the color is red okay let's format this first now it takes a child the child is an icon which will obviously be a delete icon so I'll use the icons here and then delete and then the color should be colors dot White okay and then the size can be around 40.0 okay let's format this now after that I want the containers item to be aligned to the right because since we are dismissing it from the end to start where the end represents the right I want the child to be aligned at the right so I'll add the alignment as right so I'll use the alignment you know alignment Dot Center right that means in the center vertically and at the right horizontally okay and maybe let's add a padding from the end that is from the right otherwise the the delete icon will be at the end of the container means it will be sticking to the border of the container so let's add a padding and then again add a const before padding and margins because so it will not be belted again and again so const Edge insets dot only and it is only for right 20.0 now let's save this and see so now when we dismiss this we can see we get this delete icon over here now this doesn't look very good because when we try to dismiss this it is not actually the card which is being dismissed it is a little bit surface beyond the cart which is dismissable okay so to fix that over here we can remove this padding from here and do a little bit design changes which is required but the purpose is fulfilled so I hope you understand how to use a dismissable okay and and one thing that I missed in dismissible was there is a confirmed dismiss option okay that means once the dismiss process has been done and still you want to confirm the user that are you sure you want to you want this to happen so then we can use this confirm dismiss okay so this will be for the video thank you welcome to programming knowledge so in this video we are going to discuss about a inbuilt function in flutter which is set State okay so what set state does is it informs flutter that the internal state of application has changed and probably we should rebuild the current interface means the current screen that the user is seeing which means that whenever we call the set State function this build method is executed once again okay so we will see what happens when we don't use set State and how set State comes to the rescue okay so first of all I'll remove that list I'll remove the entire body we don't need it over here okay and now I'll add our body a simple text in the center the child is a text the text is count okay so let's create the count variable over here that is zero now I'll increase the size so that it is visible so I'll add the style parameter it takes a text style widget okay and then over there we have font size okay so I can make the font size 20. now let's format it save it and you can see we can see a zero in the center okay so now what I am basically trying to do is whenever I click on this button instead of printing Fab pressed the counter should increment okay so this is exactly same as the starting project that we get when we create a flutter app okay so for that the simple process would be uh we can keep this print statement okay so the simple method would be we can write count plus plus now let's save this so now if I click on this button the counter should increment so let's see and you can see uh the print statement is executing but this count statement is not executing and that and I can say that by seeing in the counter over here it is still 0. okay so now uh what happened over here was that we the incrementing operation was done but that was that is happening internally and it is not reflected on the screen okay so this is when we use set State now what happened over here was that the value of count changed internally but the interface has no response to it so to give so to get a a so to get a expected response on the screen we can use the set State method so what I'll basically do is I'll simply use a write a set state over here so now another thing we can use set state only when we use a stateful widget if we try using set state in a stateless widget probably it will not work and give you some errors okay so now over here what will happen that as soon as the value of count will be changed the set State method will be called and that means as I told you just now that the build method will be called and since the build method will be executed again this Center will be executed again and then over here the new value of count can be seen okay so now let's try running this okay so now if I click on plus you can see the value is changing over here okay so that means we are getting the expected response okay so this is this is the place when we use set State okay now if you want you can keep this function inside set State also okay so it hardly cause uh changes anything but the general convention is to keep it inside set State the factors which actually change the state of the application should be kept inside the set State method okay so now let's save this again and then again it should work fine okay so you can see this was about set state it is a very important function and it will help you in a lot of places okay so the next method that we are going to discuss about uh it is not a discussion but rather an overview so the next method that we will see is the init state okay so it is similar to uh like on start that we have in Android if anyone is coming from Android background so what it basically does is it it is generally used for initializing some controllers and parameters some Global keys that we have in flutter okay so you might not be knowing what is a controller what is a global key in flutter but we will come to that later okay so to initialize such things we have a inbuilt function called init State okay and then over here it always have has a statement called super dot init state so now this is super comes from the concept of oops a concept of inheritance so what basically is happening over here is that init status already a method that is existing somewhere inside the flutter code okay and over here if we write super dot init state that means we are overriding that init State method in our init State method and that is the same reason we have a at the rate over right over here okay so now in the Senate State first of all we have a reference to the actual init state which is inside the flutter code that function will be executed and then after that all the initialization that we want to do okay so over here only we deal with the shared preferences checking if a user has logged in previously like we have the remember me feature all those stuffs work with init State okay so then the next method that I am going to discuss about is the dispose method so it is similar to uh on stop method if you are coming from an Android background okay so what it basically does is it it is used for closing all the existing things means uh disposing all the controllers disposing all the global Keys again we will discuss about controllers and Global Keys later but since we are initializing them it is kind of understood that it is necessary to dispose them as well okay so for the same reason we have this dispose method over here and now the trick part is that over here we after this super statement we write all the code button dispose we write all the code before the Super statement and the reason is that when this method is called this page this my home app means like this class will stop completely okay so I hope you understood about the three methods in its state dispose and set State okay and you can always refer to the documentation for a detailed explanation and better understanding thank you welcome to programming knowledge so in this video we are going to discuss about text field okay so text field is basically a widget in flutter which is used to take input from the user and by input I mean only text input okay so let's start so in the body inside our center with jet my child will be a textured sorry not a text with that but a text field okay then let's format it save it and now you can see we have our text field over here in the center okay so if I click on it then it gets selected and it is highlighted in blue color and then if I type anything it is shown in the screen okay so this is a text field now let's discuss about the properties of the text field okay so the first thing that we need to know is autocorrect so autocorrect is a named parameter that takes a Boolean value that is true or false and as the name explains itself it enables auto correction in that specific text field okay so this is one the next thing is auto focus okay so ah generally means at the starting autofocus is false but we can always make it true I mean that the default value of autofocus is false so what autofocus does over here is that if we open the screen and nothing else is selected then this text field will automatically be selected that means this text field will automatically have the focus okay so over here I'll try running this and then you can see this will have the focus automatically okay so let's wait for the Builder to finish and you can see it is automatically selected now if I remove this and then I try to restart this then that text field will not be selected automatically but we will have to do it manually okay so you can see as as we have commented out autofocus the text field is not selected and if we remove this comment then it will be selected so we need to do a hot restart and then you can see this text field is selected automatically okay so this was about autofocus now the next thing and we can say practically the most important thing in the text field is the controller okay so we are gonna discuss about controller so by using this controller we can get the value that we give us an input in the text field we can Define some preset value for the text field okay so let's see how to do those okay so to use a controller the for ideal way is to First Define a controller outside and then use it in the text field okay so let's see first of all I'll declare a variable and that is called text controller okay so now the next thing is to initialize it and as we discussed in our previous video to initialize the ideal ways using init state so inside in its state I will remove this comment and after the Super statement I'll write text controller is equal to text editing controller okay so now if you are thinking why it is a text editing controller so if you will hover over this controller you can see it takes a controller which is of type text editing controller okay so now since we have initialized it we also need to dispose it and for disposing we will again use the inbit function in flutter called dispose so now in this pose as we discussed in the previous video we write the dispose statements before the Super dot dispose so over here I'll write a text controller dot dispose okay so now our text controller is ready to use so I'll give that to this text field so text controller okay so now to trigger the printing function means to print the value inside this text field I'll add a floating action button so over here I'll simply used use an icon button and that sorry it has a icon and like for the icon I'll use the icon which it and inside that the icons enum and then I'll simply use that add icon which is the plus sign okay and then inside this I'll also write on pressed and in on pressed I'll print the value that is inside the text field okay so to print the value which is inside the text field we don't need to do much we simply write a print statement and then the controller name okay text controller dot text okay so this text actually has the text which is inside the text field means the text given as an input from the user and plus I also want to point out that the underscore which we have before text controller makes it a private variable okay so I have already discussed this it was kind of a reminder and it is recommended by flutter that wherever possible we should always use a private variables we should always use private variables so now let's try running this I'll save this now if I click on plus icon this should get printed on my console so let's see and it is giving us an error and the error is because we are initializing the text controller in init State and when we hot reload it basically only executes the build method but this init method and dispose method are not executed okay so this is a common mistake that many people make and the way to fix it that instead of hot reload we can do hot restart okay so once it has restarted now if I enter something let's say my name and press on this icon button over here so you can see the output is being printed on my console so this is how we use our controller to get the text that is given by the user and use it as and what according to your requirement okay so now the another thing that we can do using controller is to set an initial value a setup preset value okay so for that what I can do is in the text controller dot text I will give the preset value so let's say the preset value is programming knowledge so this means that whenever this screen will open that my home app dot dot screen will be the end screen seen by the user then over there in the text field the initial value will always be programming knowledge and then after that the user can change it as and however he likes OK so let's restart and see this okay so once the app has restarted you can see the text field already has a value and that is programming knowledge which was set bias over here okay so this is the use of controller in a text field now moving forward the next thing that we need to know is this enabled okay so enabled basically also takes a Boolean and it means that the text field is enabled or disabled for changing the values okay so by default it is always true but if we make it false then we will not be able to change the value of the text field okay so let's save this and see so now you can see it automatically got unselected and now if I try pressing this to select it or try typing anything nothing is happening because the enabled is false so now if we make it back to true or even remove this both are the same thing okay so let's save this and now if I try selecting this I am able to select and I am also able to edit so this was about enabled now the next thing is enabled interactive selection okay so this means that if the user long presses the text field then the entire text will get automatically selected and we will have an option to cut copy paste like the simple stuff that we do okay so this is by default true but if we want we can make it false okay so let's save this and see so now over here if I press and hold so then I get an option to select all and paste so if I select all then we have the option to cut copy and paste and now if I make it false then I will not be able to do these things so let's make it false I'll restart okay so now if I press and hold nothing is popping up over here like paste and select or stuff like that so those things are prevented like this okay so now the next thing is enable suggestion okay so this is basically a keyboard thing we can't see it on the emulator because the keyboard doesn't pop over here so what it basically means is that when you are typing something then it will show you suggestions just above the keyboard like that you would be seeing in many other apps if you type some something suggested keywords maybe three suggestions or four suggestions are showed just above the keyboard so that is by default true and if you want we can make it false okay so this was one thing now the next thing is keyboard type okay so keyboard type defines what type of keyboard should be used for that text field okay so for that we have a enum that is text input type okay so now this text input type has a few values okay so let's see so the first one is date time so it will automatically pop out a date time selector then we have an email address that means requests are keyboard with ready access to at the rate and Dot keys okay then we have a multiline requests the default platform keyboard but accepts new line with the enter key pressed okay so what this means is that by default if when the keyword keyboard you press the enter key it basically sends the message or means moves to the next text or something like that but if we have a multi line then what will happen that if we click on the enter button it will go to the next line okay so I hope you are understanding then the next one is simple number that will show us a numeric keyboard then a phone then that will also show us a numeric keyboard with a ready access to asterisks and hashes then text that is a simple keyboard URL means it will have the ready access to backslash and Dot keys values and then means it is all possible enum values then visible password means it is generally used for entering password where we have both numbers and letters on the same screen okay so you can put anything according to your choice Let It Be email address for now okay so this was one thing and then the last thing that I want to discuss in this video is of secure text so that means that if we It Is by default always false but if we make it true then it is something like we see while entering passwords okay so if I save this then you can see our text has been obsecured okay so this was about text field now in the next video we will continue with the text field and discuss about decoration of the text field means whether it is a box what should be the hint text how to add a background color how to add a borders and stuff like that okay so this will be for this video I hope everything was clear thank you welcome to programming knowledge so in this video we are going to continue our discussion on text fields okay so in the previous video the last thing that we discussed was of secure text which means if we write something it will show us only dots okay that means if I write rishabh over here then instead of showing rishabh it is simply showing us the dots okay so I'll remove this for now the next thing uh rather important thing which we are going to discuss is decoration so means how we will decorate the text field so this decoration takes a widget called input decoration okay and then we will now discuss about the properties of input decoration okay so the first thing is content padding okay that means the padding which will be inside the text field means for the content inside the text field okay so as it is a padding it will take Edge insets so I'll write const inserts all and so as to Mark a significant change I'll make it 30. let's format and Save and now you can see we have padding 30 pixels padding on top right left and all the sides so this is how content padding works okay now the next important thing is border okay means how to specify the Border so there are three options to specify border I'll use the most common one okay and that is outline input border okay so now this takes a border radius okay so for Border radius we'll use the Border radius dot circular named Constructor and I want to give it a radius of 20 from all the four sides okay and then another compulsory thing is to give a Border Side okay so even if you don't want to specify any thing inside the Border Side we still need to write simply Border Side means call The Constructor at least okay so this is an important step and it is rather a required step okay so now if I save this I should be able to see a border so now we can see we have the border around the text field okay and it has rounded Corners okay so it is not clearly visible let's add a padding over here and the padding is of 10 pixels from all the four sides yes so now it looks better so this is the Border Side now similarly we also have a enabled border okay the this also takes the same value and it is when this text field is selected okay and then similarly we have error border it also takes outline input border and it is when there is an error in that text field okay so these were the three types of border means three places where we use a border now suppose I want to add some color inside this text field okay so for that we have another property called fill color okay and let's decide our color let's say color start green okay and let's say dot with opacity okay so we don't have that feature now over here I'll simply give a 50. okay so now if I save this I should be able to see a greenish tint in my text field uh but it is not there because we mix missed something since we are giving a fill color we also need to tell the text field that it should be filled with the fill color okay so for that we have a failed parameter and it takes a Bool so I'll simply give it a true okay let's save this and now you can see our text field has a greenish tint okay means this fill color has been filled inside the text field okay now I'll remove this text from here okay and now we will add a hint text means as to depict what that text field is for and also the user will have ease in identifying what that text field is used for okay so let's say hint text and the hint text takes a string yes we can see it takes a string so let's give it a string and let's see enter name I'll save this and now we can see we have a hint text enter text and if you start typing anything it vanishes okay now we can also design uh style this text over here and for that we have a hint Style okay so the hand style takes our text style widget foreign red so let's see okay so it is giving us an error somewhere let's save this again and now we can see the hint text station right so we can change the hint text we can style the hint text like this now another thing that we have is a icon means sometimes for a design requirements we want an icon and a text field corresponding to it so for that we already have a icon parameter in our input decoration 300 takes a widget so since it is an icon I'll use an icon widget and then I'll use one of the already present icons okay so let's say icons dot person okay now let's save this and now you can see we have a icon of the person over here okay so this is how we use icons now the next thing that I want to discuss is a label text okay so sometimes the text Fields also have a label okay so simply label text it is very similar to hint text the label text takes a string and it is name okay and it also takes a style and that is a text type so label Style and it takes a text Style and let's give this some another color color dot let's say yellow okay the spelling is wrong over here okay so now we can see we have a label called name over here since my color colors are very contrasting we are not able to see that okay so this was the label text and label style now similar to this hint text hint style label text label style we have a prefix text and a prefix style and a prefix icon okay so the difference between simple icon and prefix icon is that in case of prefix icon this icon will be inside the text field and then before the text field we will have a small space for the text and that is the prefix text and similar to prefix text we also have a suffix text and a suffix Style okay so these are the four types of text that we can add in a text field okay so this was about input decoration and format this now back in the text field there are a few methods that we should know okay so the first method is on changed okay so this will be fired whenever the value of text field is changed okay so it receives a value and then the function okay so this value is the actual value in the text field means the present value in the text field Okay so to check I'll simply print the value okay so I'll save this okay so now let's enter something so you can see as I am typing here it is being printed over here because as soon as I start typing it means it is it has started changing okay so this on changed parameter is called so if I write whichever it will print after every keystroke because after every keystroke some value is being added or removed and that counts as a change okay so this is one method that we have now similar to this we also have another method on editing complete so this method is also very similar to this unchanged method okay so this method is called when we move to the next text field always submit the or we click on the submit button okay so this was on L on editing complete now after that we have on submitted okay so on submitted also when we click on the submit button this function is called okay so these are basically related to forms okay so this on submit function and on editing complete functions are used generally when we are working with forms okay so then after that the next feature is on tap and as the name suggests it will work whenever the text field is tapped okay then after it also takes a function similar to on changed okay and then the next thing that I want to talk is read only okay so this means that whether the we will be able to change the text present in the text field or not it is very much similar to enabled okay then after that we have style okay which takes a text style to design the text to style the text which will be given input from the user okay then after that we have text align okay so to align the text horizontally okay has a text align enum okay and then over here we can see we have these options Center so the text will be aligned in center and so in the end justify so the text will be justified wherever it seems right then left right start and means all the values are understandable now similar to text align we also have text align vertically okay because text align Works horizontally so there is another feature called text align vertical okay so in this we align the text vertically okay then after that we have this text input action okay so this uh depicts what will be what will happen when we click on the next button or the done button or the tick we have in our keyboard that displays on the screen okay so this text input action has a text input action in a enum okay and then continue action means it will go to the next field done action means it will call the submit function means it will automatically submit and then emergency call means these are some features it is not generally used but if you want we can you can give a read over here all the things are pretty descriptive okay so this was about a text input action and the last thing in text field would be text Direction okay so that means if we start typing how the text will start flowing in okay so by default it is left that means if we type the you the texts are flowing from the left if it is Center then the cursor will be in center and whenever we add something it will flow flow in both the sides and the same goes for right if with a text direction is right it will flow in from the right okay so I hope you are understanding all these things so these were the pretty much it about text field I hope everything was clear thank you welcome to programming knowledge so in this video we are going to create a small project by using all the things we have learned till now and we will also discuss about few other widgets in the go okay so the project that we are going to make is very simple we will simply have a text field that will take the input from user and then we will display the table of that input okay so the input over here is can only be a integer okay so let's start first I'll remove this entire body we don't need it then we also don't need this Floating Action button okay so now uh first we will uh write a container okay so this makes the most sense by starting the body with a container okay then con inside container we will have a child and the child will of course be a column okay so now this column takes children's let's format this and then our first child will be a text field to take the input so text field and then we will give this the same controller that we have used earlier while discussing about text field so that was text controller okay so now let's save this and we can see we have a text controller with programming knowledge written in it and that is because in the init State we have initialized the text of this controller with programming knowledge so I'll remove this or maybe I'll change it to 2 so that means that by default our program will show the table of 2. okay so let's save this and see and over here still it is programming knowledge because it is inside init state it is not executed again so we will do a full restart and it will take some time and we have 2 over here now let's add the table below that and so to add the table there are many ways the easiest way would be to use a list view okay so I'll simply write list View dot Builder and then this builder takes a few things first one is item count okay and we want to display the first 10 values of the table then it takes a item Builder okay which takes a function with two values the first one is build context and I'll call it context the second one is index okay so now over here I'll simply return a list tie okay and in the list tile in the title section we will have the value okay so in title the title Takes A text will check okay and then over here we'll use string interpolation to multiply and display the values both at the same time okay so I can get the position by using this index so index now since index starts at 0 and we plan on showing our table from 1 we need to add 1 to the index okay and then we surround it with the brackets as in this gets executed first and then over here in this controller we have the value that is given as the input Okay so what we will do is we'll simply multiply it with text controller dot text okay so now this will not work because this text is in string type and to multiply we need an integer okay so to convert string to integer we have our inbuilt function in Dot and we have had one video on that so that is inter dot pass okay so anything any value inside this parse method gets converted to integer only if possible if it is not possible then it will give us an error okay so now let's try running this and see what is the output okay so you can see as soon as I tried to run this I got a bunch of errors and that is because over here we have tried to put our list view inside a column so column is also type of a list where we show values one after another and in list view the name justifies it shows values one after another so they both do the same thing and since they have been merged they Clash so to solve this what we can do is we can give the list view a specific height so that that means that our list view will only be in a section of 200 pixels okay any value of the list that exceeds that 200 range will be scrollable okay so to give the height the one or one option is to use a container okay and then other option which is also a very important option and that is called a sized box okay so I'll use a sized box so not only over here sized boxes used in all the places where we just need to specify the height and the width so sized box takes three parameters that is height width and child so child is already over here width is not required I'll simply give it a height of let's say 300 pixels okay so any value more than that that will be in the scrollable region okay so let's save this and then we can see we have the table of 2 over here the mathematics is correct means our this calculation is working fine and then you can see this table is only over till here okay all the rest Things Are scroll level that means it is not going beyond the 300. okay so this is the beauty of sized box it is used to specify height and width of almost every widget okay we can use it everywhere to specify a height and width okay so this is one possible way to solve the error the next possible way which makes more sense is to use all the extra space that is left okay means we have the text field till here then after this all this space is unused and we can use that to show the table okay so to get all the unused space we have another widget in flutter and that is called expanded okay so what it basically will do is that it will expand in all the region that is unused okay so since it expands it doesn't need a height it expanded only takes a child okay so now let's save this and you can see it took the or it took all the space that was left okay so now we can see the table is working fine now let's try to change the value and subsequently change the value of this table okay so for that we need to deal with this controller okay so now to confirm that the value has been changed means to tell the program to render the table according to the new value we will again add a floating action button okay so that will be let's say an icon button is inside a icon widget and the icon says icons dot done that is nothing but a tick mark and then after icon we have a on pressed method and then in this on pressed for now let's simply print the value so print text controller dot text okay so let's format this and save this okay so now once this is done I'll change the value from 2 to 3 and then press on this icon button and we get the new value over here so now this means that whenever we press on this that means we are telling the program that we have entered some new value and render the program according to it okay so now over here you can see in the list view it automatically takes the latest value present in the text controller okay so to render the new value all we need to do is call the set State once again and all the other works will be done on its own okay so let's try doing that over here whenever that tick button is pressed first of all we'll print the new value and then simply set state foreign and now you can see since our value was 3 it has automatically rendered the table of three now let's change it to 5 press on this stick and you can see the values are updating automatically can give any vague value and that will also work okay so and this is how we combine few things and may work okay so now if you want you can decorate this text field if we can also decorate this list tile okay so this is how we link uh widgets together with each other and subsequently make a complete app that is ready to be published on Play Stores thank you welcome to programming knowledge so in this video we are going to discuss about grid View and flutter so grid view is nothing but a scrollable 2d array of widgets so let's directly jump into the code so we don't need this text controller in its state and dispose for now we neither need this body or The Floating Action button okay so now let's start creating grid view so the widget name is grid View now there are too many parameters in the grid view we will discuss only which are important and which are mostly used okay and if you want to know about all the other parameters you can of course refer to the documentation okay so the first parameter is a scroll Direction it is very similar to the one we had in list view it takes a value from an axis enum okay and it defines whether the list will be scrollable in horizontal direction or in vertical Direction by default its value is vertical okay then after that the next thing that we should know is reverse so this is a Boolean value if we give it to true if we give the value true then the list from which the grid view is generated will be reversed and if we give it as false then the list will not be reversed by default the value of reverses false so let's try giving it true and we will see what is the output okay now the next thing is controller okay so the the controller in Grid view takes a widget of type scroll controller so let's create a scroll controller now scroll controller is stored as a state variable and it is used when the state rebuilds that means when the set State method is called then flutter internally uses this scroll controller to get the position of user in that list view in that grid view okay so suppose if we are viewing a grid View and we are at the 100th row or the column okay so then that position is stored in scroll controller and now if internally due to some background actions set state is called the build method is rerendered then instead of star instead of going back at the starting of the grid view the user will remain at that 100th column or row of the grid view okay so that is what a scroll controller is mainly used for and it comes with some parameters okay and that is initial offset value initial scroll offset so by this we can Define the offset that will already be on the left side or the top side of the scroll level Grid view okay that means if the grid view would start from 0.00 comma zero axis and if we set the initial scroll offset to 20 then if our scroll direction is vertical then it will start from 0 comma 20. if our scroll direction is Axis dot horizontal then it will start from 20 comma zero so I hope you are understanding what I am trying to say is some part the part that we Define over here in initial scroll offset will be left out will already be considered as scrolled okay so that is what initial scroll offset is used for and another thing is keep scroll offset that means to tell the system to use that scroll offset defined by the programmer or the developer okay so this was about controller now the next thing which is rather a very important thing is physics so physics takes a widget of scroll physics okay so now this scroll physics is not used that much but everyone should know what this scroll physics is for what this for scroll physics is used when is this used okay so it is used to determine how a scrollable widget will behave when the user reaches the maximum scroll extent or when the user stops scrolling okay means the action the reaction to every user action is defined in this scroll physics now the normal fee normal reactions that we see that if we stop scrolling the list stops if we click on it it gets selected so all those are predefined and we don't need to do anything and if we want we can change those okay so the next thing that we have is padding and then as we know padding takes an edge inserts the geometry value so let's give it a padding as inserts geometry dot all as inserts not all I am sorry as inserts.org 10.0 okay so now the next thing is one of the most important thing in Grid View and that is grid delegate okay so uh delegate that controls the layout of the children within the grid view okay so graded delegate now there are many types of delegate the most commonly used delegate type is sliver grid delegate with fixed access count okay so don't get confused this is a single widget name okay so let's start typing sliver great delegate with fixed access count okay so now this means that our cross axis will be fixed so now over here it takes a few things the first one is cross access count so let's say I want a column of a row of three values a row should have three values so I'll write 3 then after that we have a child aspect ratio so over here we Define what will be the aspect ratio of every child by default it is one point zero we can change it let's say or 1.0 seems fine if you want to change something you can okay so I'll remove the child aspect ratio now the next thing that we have is cross axis spacing and my next main axis spacing so this will this is used to define the spacing between each item cross axis spacing for the column wise for column wise and Main axis spacing for row wise okay so I hope all these things are clear and then another important thing or the rather the necessary thing is children means what we will show inside the grid View okay so now to display something first let's create a simple list a list of type integers call this call It Dummy and it has a few values it has eight values okay so now over here we will again use the mapped method so dummy dot map dot to list and now over here I want to return a container okay of I'm sorry container of height 100.0 with 100.0 color should be colors dot red alignment should be alignment Dot Center that means the child should be in the center of this container and the child is nothing but e okay so I'm sorry e should be inside the text and then I'll use a string interpolation which is better than using two string because we have more accessibility we can add more things in the string and all the stuff so let's format this save this see if we have some errors so now since we don't have any error we should be able to see all the values so now since the first thing that I would like to mention is that since we have written reverse as true then the first value 1 is starting in the last row so I hope you get my point it is not the last item but in the last row so this is a very clear confusion please don't get confused okay now let's try adding some spacing main axis spacing can be 20.0 so we have the spacing over there now cross axis spacing can be 20.0 again and that also so we'll get some spacing over here now uh we need to know why is this grid View at the bottom Okay so let's try surrounding it with a column Maybe because column brings everything to the top so that will not work okay maybe if we remove this reverse then it should go at the top because the general practice the general behavior of flutter is to start from top and yes so uh as you saw and I also learned a new thing here if we use reverse then it also reverses the alignment it also reverses the position means instead of starting from Top it starts from bottom instead of being yeah start aligned it is and aligned so these are a few things that we learned today and I hope the concept of grid view is clear thank you welcome to programming knowledge so in this video we are going to discuss about two things which are very important while we develop and flutter so the first thing is Media query now what is media query and where does it comes in play so suppose you have an app okay and then that app has a container and you have given it a static height of 100 and a static width of 100 so now suppose if the tap runs on 10 different mobiles then that there is a very high probability that all those 10 mobiles will have different screen size so now suppose if someone has a big mobile then the 100 height and 100 width container will take a very small amount of space now suppose someone has a mobile with small screen size then that hundred as height and 100 as with 100 pixels will take a very large space okay so now you understand that as the screen size changes the look and feel of your app will also change and that is not a very good ux quality that is not at all a good quality that is a dismerit in your app it should never happen Okay so to avoid such kind of problems we have media query and flutter so by using media query we can get the current height and width of the mobile means the mobile on which the app is running and then we can render accordingly okay so now over here I have only one mobile so I will not I will not be able to show you some demo you can try on your own with a two three different devices okay so let's start I'll remove this grid view we don't need it anymore we also don't need this list okay so now our body will simply be a container can the height of container is 200 the width of container is 200 the color of container is red and let's format this save this so now we have a container like this let's bring this in Center okay sorry this will be small alignment Dot Center Okay so we need to surround it by a center I'm sorry yes we can also remove this so now we have a container of height 200 and of width 200 in the center of the screen now on this screen means the screen of iPhone 11 it looks fine okay but now if I open on some older versions of iPhone like iphone 5 iphone 6 where the screen is only around 50 to 60 percent of what it is right now then this same container will take a very large amount of space in the screen so we don't want that to happen so to fix that we are gonna use media query and to use that we simply write media query dot off context dot size dot width divided by 3. okay so whatever the width is that will be divided by 3 and since we want it to be a square we will give the same to height oh sorry first was height so to get the width of the screen we write this media query dot off dot context dot size dot width okay so now let's save this okay so we still have a tangle I'll make it half okay so now over here the containers width is half of the Mobile screen so now uh suppose if we open in any other mobile then also the container's width will be half of the mobile okay so that means the height and widths are given dynamically so for different mobiles no matter what is the screen size the look and feel of your app will be same so this is how we get the width we can similarly get the height this will this line will return as the height of the current Mobile screen so right now the height of this container is half of the height of the screen so now we use a media query uh very rarely these are the no means we use media query only for getting the height and width so there are other uses of media query which are used very rarely and that is not that much important but if you are curious and you want to learn you can surely refer to the flutter documentation so now the next thing that I'm gonna talk about is navigation like we can practically make no app without navigation okay so let's create another screen so we can create a new class over here I'll simply write a stateless widget and then the name of the class but that is not suggested by flutter flutter says that in each file there should only be one state widget a class that extends straight to that no matter it is a stateful or a stateless widget okay so let's create another file we'll call it screen 2 Dot Dot now over here also I'll import material that is very important and then I'll create a stateless widget and I'll call it screen 2. now this has a scaffold and the body and in body inside a center widget we have a child that is at next and that says screen too okay so this is done now let's try navigating from screen one to screen two from our home app screen to the screen too so we need a button to trigger and the most easy way is to create a floating action button I'll simply create a floating action button okay on press to that is what we are gonna do now we need to specify the child I guess yes we have the child and the child is an icon and the icon is icons dot play that can also refer as a next okay we don't have anything called play so we can give any icon that is just for understanding purposes now now let's talk about navigation so to navigate there are two methods we will see both of them okay so on press means when it is pressed we want to navigate Okay so to navigate we write Navigator dot of context dot push so now consider navigation as a stack we push means we open another screen on top of the first screen then we have pop and push okay pop then we have pop and push okay so that means that the current screen will be popped and a new screen will be pushed so that is used when we don't want to navigate back to the previous screen okay and then we have this pop so that to close the screen and go to its parent screen means from where it was redirected okay so these are three methods that we need to know all the rest are not that necessary so the first one is push so now inside push we write the route name the class name where we want to push okay so for that we again have a material page route widget okay which takes a builder now since it is a builder it will always take a function which has a build context so this is almost a generalized thing in flutter wherever we see a builder it will take a function that has a built context might be there are some more added values but build context is always there Okay so context now I'll not simply call this context as it is not a good practice we write it build context and then over here we write the class name so our class name is screen two so over here we will simply write screen two okay so now this is done now if we click on The Floating Action button we should be redirected to screen two okay so if I click on this I am being redirected to screen 2. now since I said it is it acts like a stack and over here we have push that means this screen is on top of its parent screen that is the screen from which it has originated which is nothing other than Maya so now over here if we come back we can return to the screen from where it started okay so this is one thing now suppose I don't wanna return then I'll simply write pop and push okay now over here we have pop and push name so we'll also see what this named means okay now on screen two let's create another Floating Action button I'll okay uh Floating Action button that takes a child the child is again an icon and inside I can we will use the icons enum and this time let's use some other icon any icon will work and then over here on pressed we can simply write Navigator dot off dot pop okay so pop is used to return to the screen from where it has originated so this is all right I don't know what's the error over here okay there is some error okay this is not required no over here we have Push I am sorry for the glitch so now let's save this restart it so now over here if I click on this I am taken to the next screen and again if I click on the button I am taken back to the screen from where I started that is means we are popping that screen out okay and sorry for the icons they are not at all relatable okay so this is one method of navigation let's see another method of navigation and that is called named navigation okay so for that over here in our material app we need to specify the routes the named routes okay so for that it has a routes parameter that takes a map then the first one is the route name the key value is the route name I'll call it screen 2. okay and then it again takes a build context and then it will simply call screen 2. so now over here it is like this so now instead of writing so much so many things we'll simply write the Navigator dot off context dot push named so now push named and simply will write the route name which is nothing other than screen two okay so I think there is some error okay it will not be like this yes let's save this let's restart and now if I click on this it goes to the next screen and if I click on this then it pops back to the previous screen so the flow is still the same everything is working fine and this is the best way to navigate from one screen to another I personally prefer this way means creating a route giving it a name and then calling that name from all the places where I want to navigate and the more better version that I use is I don't write it over here okay I'll I write the route name for that screen inside that screen okay so over here I'll create a static constant route name okay and then over here I'm sorry and then over here I'll simply paste this okay so now by doing this I can avoid the chances of making a spelling mistake plus am I another classes will not know what is my route name okay so it is kind of protecting your data as well so now over here I'll write screen to dot route name since it is a static variable we can access it from throughout anywhere in our project so I'll save this and over here instead of calling screen 2 I'll simply call screen to dot route name so now let's save this see if everything works fine or not and then if I click on this I am taken to the next screen and then again if I click on this I am popped back to the previous screen okay so now this is how we use push name now if I write pop and push name okay so that means my initial screen will be popped and then that screen will be pushed so ultimately I will not be able to come back okay so now to check if that is working or not so if that is working fine we should get an error that we can't pop because there is no screen okay so I'll call this and then if I press back then it shows a black screen that means it is not showing the home screen but it has blacked out that means the parent which that has already been popped out Okay so I hope you are understanding the concept of push and pop and push named all those things I'll change it back to push nimt now this is this was about basic navigation between screens okay now the next thing and a very important thing is how to pass data from one screen to another okay so passing data from one screen to another is also pretty simple with a push push named pop and push named every all these types of navigation methods take a named parameter called arguments so now over here arguments can be anything you can send a list you can send a map you can send the object of some custom class you can send anything so this argument parameter is very flexible and that is the beauty of flutter it provides you more accessibility so right now I'll simply pass a string that says navigation it's working okay so now in my screen too I am sending this argument so let's see how to retrieve the data in screen too okay so inside our build method please note I am writing this inside my build method I'll create a variable arguments that will be my received arguments now over here we will write modal root so these are some keywords that has a specific meaning which will not be required in general development flow but if you develop something very much related to Native and something related to plugins means you are generating a plugin then we will then you will might have a to look closely to this model route but if you are generating simple hybrid mobile apps then this is not required then knowing the Deep knowledge about modal root is not required we can simply keep this in mind that model route contains all the datas that are transferred from one screen to another now the arguments are not the only thing there are many other things which are transfer internally from one screen to another okay but we will but we will be able to access only the arguments okay so let's see how we access that model route dot off context dot settings dot arguments okay so now by this I got the argument which I sent here navigation is working in screen 2. so now over here instead of displaying screen 2 I will display that argument let's save this restart now over here you can see navigation is working okay because this doesn't had any predefined value that means the value returned in that argument is being received properly and that is being displayed we can now as I told you it is very flexible we can pass anything so let's pass a map that says nothing is working nothing is working five times let's save this now let's see what is the output it should so show something like it is a list or something like that because it will not print the value that is directly inside that okay so it is giving us an error because over here the text takes a string type and that is a list of a string so let's change the value to argument 0 that will return our screen that will return a string now over here arguments is a variable it doesn't know the flutter doesn't know that it is a list so the first method would be to change this to a list okay now another method is writing as a list so this as keyword is used for defining the type now to make it more specific I'll write string over here okay so now the error is gone let's resave that this and now if I click on this the first value of the list is displayed now let's change the first value let's save this now we can come back now if I click on this we can see Test 2 programming knowledge okay so you understood what is navigation and how we pass data through navigation and what are the different types of navigation and we also discussed about media query the most important use of media query that is dynamic rendering of widgets okay and I hope everything was clear thank you programming knowledge so in this video we are going to see how to send an HTTP request and then parse the response and update the UI accordingly so first let's remove all the extra code that we have over here we don't need the floating action button okay we don't need a body for now we'll create a new body and we don't need this screen too so I'll delete the screen too and then I need to remove it from my home app if I have it yes so I need to remove it from here I also need to remove it from here okay I need to remove the import from here also okay so let's save everything do a restart and yes so we have our empty screen so now to send an HTTP request if you don't know what is an HTTP request you can follow this link and read about it they have very excellent documentation now to send an HTTP request from a flutter app we need a third party package and the most popular packages HTTP you can see over here it has 1404 likes one one zero Pub points and hundred percent popularity means this is most preferred by flutter developers another alternative can be do okay so do also has 99 popularity it is made by some flutterchina dot Club Okay so let's install flutter we will go in this installing section and then inside our dependencies we simply need to add this so we find our dependencies in pubspec.yaml over here below this store below that Cupertino icons we can paste anywhere save and then since I am using vs code it will automatically start flutter pup get okay so that means it is importing this dependency to our project so that will take a minute now after that let's see which API we are going to call from our app okay so I'll be using this Kanye dot rest API it is a free rest API for random Kanye West quotes okay so since it is free it is accessible to everyone and everyone can try the same so now over here you can see it says get and get is nothing but a type of an HTTP request okay so what get basically does it fetches data from this server means the link followed by the get request okay so I'll for now copy this link okay and if I paste it in my browser then that is also ultimately a get request only so let's see what is the response of this get request so over here uh doing this get request we get a quote I am the best and now if I refresh this it should change people always tell and then there are stuff okay so let's try implementing this in our app so we now have the http a package in our app so let's try calling this first we need to import http import http okay so it is not showing over here that means it has not installed correctly I need to run Pub get again so I'll do that we have a icon over here in vs code okay so once that is done now over here if I if I type import then HTTP so we can see HTTP slash HTTP dot dot now I am not simply gonna call all the methods I'll use a namespace that means reference to this package as http means everything inside this package will be used under this namespace okay so you'll understand what I am trying to say when I implement this okay so now let's try calling this rest API so for that in our class I'll simply create a future I have a video on what is the future and what is its use in flutter now since over here we are interacting with the internet we don't know how much time it will take so that is so that is the reason we can't immediately send the response we need to wait for the interaction with the internet to finish and then we will send a response and for the same I am using a future okay a future and that future should return a string that string will be nothing but this followed by code okay and then I'll call them name the method and get Kanye okay simple name now it needs to be a sync since we are dealing with future okay now a good practice is that whenever you interact with her Futures we need to surround whenever sorry whenever we interact with the internet uh we need to surround it with a try and catch so that when there is error it will not simply show a red screen on your mobile app but give some customized message which improves the user experience so I'll simply surround it with a try catch and then over here you can print T if you are making a real app most probably you will wanna show our toast so that is done now let's finally call this request so I'll copy this URL that I have over here now to call a get request means after every request we get a response okay so to store a response I'll create a response variable okay and then now let's call the get request this request let's call this get request okay so for that I'll simply write HTTP which is the namespace we used over here dot get so this dot get us uh refers to this get means over here in the documentation it says that we need to use a get request and that is why I am using a get request over here now the URL we copied right now https API dot Kanye dot rest okay so now we are getting a response okay so now if I hover over this get you can see it sends a future of response okay so that means as I said it will take an indefinite amount of time to interact with the internet we can't assume the time so that is why it is a future and we need to wait until we get some response and as we have discussed in our Dart tutorial to wait for the response we use the await keyword and since we are using a weight here we need to have a async keyword over here okay so now once this command is executed that means this command will take some time since we are using await that means the comma that means the controller which runs the code will not proceed until this statement is completely executed so once this is done then that means that this response has the response means this response which we will get from this API okay so this response variable will now have this response so before updating the UI let's try simply printing it to check that everything is working fine now uh if you would be knowing about rest apis you would know that a response doesn't only have this thing this is the body but it also has different things like the headers and other stuffs okay so this part where we have the actual response from the API that is the body okay so now let's get the body so instead of getting let's simply print the body to see if we have something or not so response dot body now I hope everything is clear okay so let's save this now inside the build method I'll simply call get Connie I'll restart and you can see it took a second or two and then after that we have the Response Code you took you can't look at a glass half full or empty if it's overflowing okay now if I'll save it again means that means I will do a refresh since on the refresh the build method is running I is executed again so this get Kanye method will be called again and we get a response okay so now since we have a response let's try updating our UI okay so over here this future needs to return our string so now over here uh my requirement is only this string but right now the body is printing this entire string okay so the body is in string format but if you look closely or you look in the browser it is actually a map a map which has a key and the value the value which we are interested in so to convert a string back to a map we need to use a dot package and so for that we will import that Dart package and that is called convert so this convert package allows you to convert uh uh a string to any other object or a object to a string okay so let's see how that happens I'll simply write where result is equal to Json now this Json is inside this dot dot convert Json dot decode okay so now string is the encoded thing if we convert a map to a string then the string is considered as an encoded as the encoded output of that Json variable Json value okay so since we have the string we need to decode we need to go back and over here I'll write response dot body and then instead of printing this I'll print result and then the key that we have over here that is quote so simply paste it over here format it and do a restart okay so now you see we only get the code part means instead of getting this entire thing as a string we have decoded it to a map and then we are printing the value for this key okay and now we want to return the same thing so I'll simply change this to return and now this get Kanye will return something so let's wait for that to return so then that means this method is called and when it finally returns then we go to this net then method so now the string sent over here is stored in this value okay so let's create another variable string coat and then over here I'll save the value to quote okay we don't need a semicolon over here so now once this get Kanye returns something it is stored in this code thing so now let's simply print the code thing so over here I'll write body the body is in Center and the center has a child which is a text widget and the text displays nothing but the Court so now let's do a hot restart and see what happens and you can see it gives us an error and that is because as I said interacting with internet it takes time but the execution doesn't stop over here and it keeps on running it keeps executing so one solution would be to add an await over here okay and the other solution is because I am not adding a weight over here because that is not a standard practice in if you do a real world project most probably all your con all your uh interactions with the internet will be in a separate file so what I'll do is over here I'll add a conditional statement so if this code is null so in that time I want you to show us circular progress indicator and once this quote is not null then the code should be printed so now what happens is that for the first time it will be null and then the circular progress indicator will keep on working now even after we get the value this will not update and to update the screen as we have discussed earlier we need to call the set State method so over here I'll write set state and then inside this the value means okay so everything is fine let's restart let's do a full restart okay so I think my internet speed is very fast that's why we are not able to see the progress indicator thing okay no no yes so the progress indicator is at the top so instead of conditional rendering over here I'll do it inside the center object so now let's see so you can see the circular progress indicator and as soon as we get the value the value gets updated okay and now you can see it is it will keep on updating it is not stopping and that is because we have a error in our program okay so the reason that it keeps on updating it is not stopping is that we are calling set State inside the build method so this is a very common mistake that people do that is calling set State method inside the build method so what is set State uh does is it rerenders the build method so if the set state is called it will rerender the build method and now while rendering it will again encounter set state so it will again start rerendering so this will go to an infinite Loop okay so the way to fix this is to use an if else okay so I'll write Bool coat controller is equal to false so now this method should run only if the code controller is false okay otherwise this shouldn't run and now let's update the value of code controller to true okay so this means that the first time when the value of code controller is false uh this method will run and as soon as this runs this if condition runs the code controller's value is true so even after even though the set state is called and the build method starts rendering this if condition will become false and all this code will not get executed it will simply render this return statement okay so I hope everything is clear let's do a full restart and you can see it updated only once okay so yes now after this this will not update and it is not updating so I hope you understood what I did over here and you understood how to call a HTTP request how to parse the response over here and then update the UI accordingly update the UI always has set state in it so I hope all the concepts are clear now this is one Kanye dot rest which you can try another one which I also use which is also free is Chuck Norris so over here also you can call this request and you will get you will not only get a quote you will get multiple things you will get an URL for the image okay you will get an ID which you if you have any idea about databases you'll understand that every value has a ID URL which will be URL for this code and then a value which is the actual code so you can also try this if you want to okay so I hope everything was clear thank you welcome to programming knowledge so in this video we are going to discuss about bottom sheets in flutter so basically there are two types of bottom sheets in flutter the first one is persistent bottom sheet and the second one is model bottom sheet the difference between these two types of sheets are that in persistent bottom sheet the sheet remains on the screen even though we are not interacting with it whereas in model bottom sheet the sheet will hide if we are not interacting with it so let's start coding so first I'll remove all this code that we that we wrote while we were discussing about HTTP requests we don't need this anymore I'll also remove the unused Imports now once this is done in the center widget I'll add a the raised button and the child will be text that says show bottom sheet and then it will have an on pressed and that will show the bottom sheet so first let's start with model bottom sheet to display a modal bottom sheet we simply write show model bottom sheet now it takes two parameters that are necessary and the other ones are not necessary the first one is context and the context we have right over here this is the context so I'll simply write context and the next one is Builder so it takes a function which has a parameter of build context and now over here we return the widget that will be displayed as our bottom sheet so I'll simply return a container of height 400 and the color to be red so now let's format this save this and now we have a button in center and if I click on this I am able to see the model bottom sheet so now as I said the sheet will hide if we don't interact with it so this is the bottom sheet let's not interact with this but interact with the remaining part so as soon as I click over here the bottom sheet hides so you understood what I was trying to say that the bottom sheet hides when we are not interacting with it and if that happens then that sheet is a modal bottom sheet okay now the next type of sheet is the persistent bottom sheet so for that we simply write show bottom sheet now format this save this now if I click on this okay so it is giving me an error so uh let's try another method to show a bottom sheet and the method is by using a global key so I'll write VAR scaffold key and that will be a global that will be a global key okay and the global key will be of type fold state okay and then I'll add this key to our scaffold so the key over here is scaffold key so now what this basically does is that right now this is our scaffold scaffold is the area in which the contents are displaced displayed like the app bar body the widgets inside the app bar widgets inside the body all those are displayed on the scaffold scaffold is like a canvas we can say it to be a canvas so by adding a key to the scaffold now we can access the state the context of this scaffold anywhere else by simply using this key okay and that is what we are gonna do over here to show the bottom sheet okay so I'll simply comment this now to show our bottom sheet first we write the global key name that is in our case scaffold key then we take the current state okay so now over here you can see with the scaffold key we can get three things first one is the context that is the current context the current state and the current widget that is being displayed so over here we need the current state and then on that we call show bottom sheet so now over here I'll return this same container let's see now I'll remove I'll remove the comment from here and then give a semicolon so now let's see now if I save and then if I click on this I am able to see see my bottom sheet so this bottom sheet is a persistent bottom sheet okay and by that if I don't interact with this part of the sheet even then this will not disappear so if I click anywhere over here the sheet Still Remains if you wanna close it uh programmatically we can do it by writing Navigator dot of context dot pop and over here in app we can simply slide it down like this so these are the two types of sheet that we have in flutter that is the persistent bottom sheet and the model bottom sheet so I hope the concept was clear thank you welcome to programming knowledge we are going to develop a daily task manager application and that is a rather a very simple application and that will Mark the end of this series so let's start first of all I'll delete all the extra things I had let's get this project back as it was when we first created it so I'll remove all these things okay save it in main also I'll remove all the code let's code it from scratch and I also need to remove the assets folder and along with that I would also need to comment this out and so I did okay so now over here you can see we are getting an error and this error generally happens because when we delete some file while the project is running so I'll comment this out first and then restart the app so run without debugging a test now let's start I'll first create a folder that will be screens and then in the screens will first have a home screen dot dot now let's first of all import material that is the most important thing then we'll first start with a stateless widget and we'll convert it to a stateful widget if needed so here is the home screen okay now it will have a root name that is like in the Boiler code so static const ant root name and that is home screen and now in my main dot dot I'll import it that is like writing the code that I have just commented and that I have just removed so we'll always use refer relative referencing while importing any package screens and then home screen now over here the home will be home screen okay so over here first we need to save this and then save this as well so now over here it will be a scaffold and then the let's add a simple app bar the app bar has our title that takes a text widget and the text wizard says task manager neat now in body I don't think like right now we need to add anybody first we need to add the feature to create tasks and then only we will be able to show tasks and showing tasks go in the home screen so Center simply a child with a text with gender that says no tasks added yet cool now let's add the root the button uh clicking on which we will be able to create a task so the best option would be to create a floating action button that will take a floating action button widget I am sorry so this will take a floating action and then over here the child will be an icon icon widget and then over here we'll use the icons in them and then the add button that is the plus sign okay now I'll give this icon a color of white let's format this then after that we have the background color so the color is let's decide a theme I am thinking we can go with yellow you can try anything else of your choice so this is yellow and then this will this is showing uh yellow underline because the on pressed parameter is required so let's add that on pressed and for now simply print Fab pressed let's format this hot restart this cool and it is giving us an error now check operator used null value in Main Line it well this seems fine to me I don't know whether actually is well that was not an error that was just some kind of a last lapse that happened in the okay so right now I'll remove the debug Banner debug so check the banner that is false let's save this now my app bars or let's make the entire theme blue that will be easier because the default theme of flutter is blue so colors blue let's save this and now if I click on this the on pressed method is working fine now what we want to do here is that whenever we click on that button it opens a new screen and over there we add the task or what would be better is that instead of opening a new screen we can open a bottom sheet okay since the last video was on bottom sheets it makes complete sense that we use bottom sheet instead of a new screen but if you want you can use a new screen also that is there is no such kind of uh design technique or rule that restricts from using a new screen okay so I'll simply write show model bottom sheet now it needs a context the context is context and then it has a builder the every Builder always has a build context and for now I'm sorry I was coding in JavaScript last night and for now let's simply return a container okay a container of a height let's say 500 and the color let's say colors Dot blue cool let's save this and now if I click on this I am able to see a bottom sheet so let's not decide its height let's create the child and child will of course be a column because we are gonna add things one after another then it has a children the first one will be text that says add a task and task now it is looking very weird I'll maybe reduce the background color a little bit let's see maybe little bit more foreign better than what it was earlier we'll all will of course be changing designs later okay so let's add some Style now I was thinking let's add a custom font so for that I'll go to fonts google.com and decide a font and in the meantime I'll search for Google fonts flutter this is a package using which we can use all the fonts that are available on Google fonts so oh either you can go in the installing section copy and paste or there is a shortcut you simply click on this and then in your pubs pack.yml you have to paste it below Cupertino icons I paste it and I saved it to move this for now so now let's uh fix on a font and maybe we can go with I think we should go with montessor at okay so let's start adding the text all the text in this app will be in montessor at font okay so let's wait for this flutter Pub get to complete okay so it is now I'll add the import import Google fonts now the first text we can see over here the spelling is wrong as well task now in style we simply write to Google fonts Dot Mont select so now since we don't have any configuration to add inside we'll leave it like this formatted now over here also I'll add Style Google fonts dot Mount select and then over here I'll change the color I want the color to be white and the size to be 20 let's see now let's save this now after that over here we can see the font has changed to lato okay and over here also the this font is also Lotto now we also have our text in Center we'll change that later okay so the first first text is add task now after that I believe that this add task should be over here and a cross button over here which when we click on this model sheet should close however it will close if you click anywhere else then the model sheet okay so let's do that I'll wrap this text inside a row okay and then I'll give the main access alignment as space between knit now after that I'll have a icon the icon will be from the Icon Cinema and the name is icons close that is the cross sign Okay so now this is done now I'll add a gesture detector upon it wrap it I will check and that is gesture detector so now this gesture detector with jet it gives you the triggers for all the gestures that we do on a screen that is a single tap or double tap a triple tap a long tap a double long tap and all those things okay so for now I'll use on tap now over here it should simply close the model sheet and we for that we simply write navigator.pop Navigator dot I'm sorry Navigator dot off context what's happened and Dot pop cool now you might be thinking why didn't I use an icon button over here so that is because icon button comes with a uh inbuilt padding that we explicitly have to remove and that will that will be actually four lines of codeine over here it is only two lines of code so this is the better choice less number of less lines of code means a better code so now we have it here and this but we definitely need some padding over here so this container over here the main container the parent container will have a padding and then we should always write const before padding or margin I have already discussed about it you can look to the previous videos Edge in sets dot all sorry not 100.0 but 10.0 let's save this now first I need to close this open again and then it has a padding a decent padding and that is it now after row we can add our divider now let's save this and we should be able to see our divider and we have our divider if you look very closely I'll I'll change that so the width or we have something like that to see all the available parameters you can simply click on control space and then over here yes we have height so I'll make it 1.2 just for testing let's see how it looks and this has become we'll have make it 10 let's see and damn it's not changing okay so that is not height we need to change the thickness I am sorry this kind of stops stops generally happen when you develop something there are plenty of widgets and you often get confused so there is no this is not such that bad a thing okay so now it is a bit thicker and this looks fine I will be after subsequently upgrading the uis And discussing it with you for now this will do now I don't need a comma here since we only have one parameter inside that so that is the basic that is a good practice actually that if you have a single parameter you don't give a comma if you have any if you have any number of parameters which are more than one you do give a comma okay so this is done after that I'll leave some space sized box okay and the space will be off let's say 20 now after that I'll have a text field okay let's see so we have our text field over here but it looks very very weird okay so let's Design This so it also takes a decoration that decoration takes the input decoration now first for the Border I'll use an outline input border okay now this outline input border has a few things border radius that is the curve around the corners so for that we have another widget border radius dot circular and simply 5.0 would do now after that we have a Border Side means that over here in outline input border we give one border size and that is copied for all the four borders of a input field so simply Border Side and the borders color will be colors dot blue cool let's see so we have the Border over here now let's add a white color in between okay so that is the fill color and the color needs to be white and filled should be true for the fill color to show I think it's failed yes true it was going to become two let's save this and after that so it is white in between now let's add a hint so the hint text is in text takes a string or a text widget and it takes a string enter task and then again we have a hint style and the hint style will go with Google fonts dot Mont select now let this red line go actually it in real time connects with the internet that is what I am guessing for such kind of behavior I am not sure about it let's save this anyhow okay I don't know why it is acting weird let's give it a minute oh sorry the spelling is wrong Google fonts I'm extremely sorry the spelling was wrong and I thought it is some kind of a weird issue so this is also not that bad a thing okay so hint style and that is simple lato now I can add some tasks I can write the task over here now we need to have a complete button so so I'll instead of having a single complete button I'll have two buttons one is a reset button and the other one is the add button means that means add this task today for today okay so below this text field I'll have a row okay the rows children the children there are two children that is sorry we don't have simple button we have raised button now the child is text reset with a style of Google fonts dot montessor rack so only we need to give parentheses after that and we have a on pressed and this one pressed for now will simply print the set pressed now let's format this now I'll have another button like this so instead of copying I'll click shift option and arrow key down so then it Go gets copied save now over here instead of reset it will be add and over here also it will be add let's save this C and it looks completely atrocious so we need to fix that sized box a height of 20 would do now let's fix this so how how do we fix this well there are two methods I'll say first I'll wrap this with a sized box foreign box will have a width that is the entire width media query dot off context dot size dot width and height of let's say for now 200. we'll definitely reduce it to as much as it is required okay so now this raised button goes inside a container okay the container has a width of media query dot off context dot size dot width divided by 2 means half the screen size and then this entire thing minus 10 that will be added for the padding the padding will be 5. because 10 divided by 2 from for both the sides minus 10. okay so this is fine now same I'll do foreign container the container has a width of this cool now in this raised button let's add a background color or we simply call it color s dot blue and here it should be color is colors dot White now let's see what is left instead of sized box we'll have a container and then this container will have a padding from all the sides padding off sorry not science padding of const as inserts dot symmetric horizontal and that is 10.0 let's see if it gives us some overflow errors or what and yes it does so the size of this buttons are apparently big and they are big by 20 pixels as I guessed in my calculation was a bit a little bit wrong this should be five okay and now let's see so still the error is there but it has reduced so better we add make it 20 make it 20. for both save and then this is fine now you open the mobile on any screen and now you open sorry not the mobile you open the app on any screen size this will look same because we are using Dynamic width over here okay so now I don't think this 20 needs to be there it should be a mere 8 foreign because the height is 200 which is not at all required I don't think we need a height at all let's save and see yes so this looks fine when I click on reset reset is pressed when I click on ADD add Express now I don't need this height also over here so where we started the model sheet the high this is okay so the height was commented that means this is the default height now I am gonna uh Force some height to it that is gonna be 300 let's see and 300 is also more than required I'll make it 250. now let's see so this looks good now apparently there is a better color for the background than the color it is right now we will discuss that later for now our adding a task UI is complete so until the previous video we have created the basic structure and we have created the UI of the bottom sheet so let's continue now the first thing that we need to do is add a text controller to this text field and add functionalities to this button so for that I'll need to initialize the text editing controller inside in its state and then dispose it in the dispose method and all those methods are available only in stateful widget so I'll change this stateless widget to a stateful widget now I'll declare the controller so let's call it task controller now over here let's override the init state foreign task controller is equal to text editing controller and now we also need to override the dispose method and in the dispose method everything goes before this super statement as we have discussed in one of the previous videos so over here we will simply write a task controller Dot dispose now once this is done let's attach this text editing controller to our text field okay so for that we need to look for the text field over here we'll add the named parameter controller and that is our task controller okay so now this controller is added now let's add functionality to this reset button so over here it simply says print reset now instead of this I'll write task controller dotted text and then overwrite it to an empty string okay so now this should reset the text field text field yes so let's save this or do it a full restart so that the init State also gets executed so now once it has restarted if I click on this plus button I am able to see the bottom sheet now if I write something any scramble text and click on reset the text is getting overrided with an empty string as we have done over here okay so this buttons functionality is done now let's talk about adding the task so to add the task we first need to store the task now generally there are two methods to store the task first one is using database and we have SQL Lite as the database and the second method is using shared preferences so now in this app the data will change every day means the task for one day is written and then at the by the end of the day the task gets over okay so for that we don't need to go in that in the complex SQL systems we can simply use the shared preferences the memory of shared preference in the shared preference is stored inside the app so ultimately the size of app will become large if we use a shared preference to store everything when the data to be stored is too big and in those cases we use SQL light but over here since the data will only retain remain for a day and the next day it will be cleared or some other data will be added so it is completely safe to use shared preferences over here so for that we have a plugin shared preferences it is given by a flutter so let's import it and then use it in our project so in our Pub spec dot tml below Google font so I'll paste it save it and then wait for the pub get to finish so once the pub gut has finished we can start using this shared preferences inside our project so for that first we need to import the shared preferences so simply over here I'll write import I'm sorry shared preferences and you can see it is not showing in the option so that means there was some error in this Pub get we should call it again most probably then the error will not be there this sometimes happens with vs code uh once done let's see if it comes now or not import shared preferences so we can see shared preferences dot dot now let's see how to use this so for that first thing you can see is we need to initialize the shared preference so over here they have initialized using a sink of it if you don't wanna use a sync a bit we can always use then method okay so let's see now whenever this ad is pressed I'll call method that is save data okay now let's create this save data okay so in all the override statements are together all the override methods are together I'll create this method which is not overriding any method above them so over here avoid save data and then first we need to initialize the shared preferences so shared preferences I'll call it prefs now since we use await we need to use a sync over here await shared preferences sorry not this over here also it will be shared preferences and over here also shared preferences and Dot get instance so now once this statement is executed we have our instance of shared preferences in this variable so now let's save the data so for saving Let's uh the most probable or the most standard practice would be to create a model class and then save the object as Json as Json in this shared preferences and then retrieve it from as Json and then parse it to the model and then display so we'll follow the same thing let's create a new folder model and then inside this folder we'll have task Dot dot so let's create class task so now this will have the task I'm sorry and we'll have the date so there is a variable in dot called date time that deals with the date and time so simply call the time so this is done now let's create its Constructor so task this dot task and this Dot time so now let's create another Constructor so there are two methods one that I have discussed in one of my videos that is called named Constructor that is Task Dot from Json or something like that so that is one method there is another method that is using the factory keyword Factory task Dot from map and now over here we'll take a map or we don't take a map we don't actually need a map we just need a task so let's call it from string and then over here we take a parameter string task and now like before when we were using named parameter task Dot from string without this Factory then we would have simply written this dot task is equal to this task and this dot time is equal to date time dot now but since we are using the factory one we'll return we need to have a return statement and then ultimately we'll be returning this Constructor so I'll write a return task and then over here I need to call the named parameters and that is a task and task is nothing but the task parameter that we get over here and then we have the time time is nothing but a date time dot now okay so this is done now by this by calling this method we can create a object of this class task now to store it in shared preferences we directly can't store a model class as it is not serializable so instead we will store it as a Json object or most probably a map that is also a Json type of thing just there are extra just there is a flexibility to add commas at the end if we want which we don't have in Json so that is only the difference between Json and a map in that so let's uh see now I want to return a map of string and dynamic of string and dynamic and that is return no sorry not return that this method can be called get map okay and then over here you return a map that has a name as task and the task is this dot task and then we need the time now there are we simply can't send this a date time object as that is again another object that can't be serialized so we have another parameter that is called milliseconds since Epoch so Epoch is a constant time and the difference from that till this variable the till the time that is stored in this variable is measured and sent and so this is twoway thing if we have the difference we can get the date time variable from now and if we have the date time variable we can get the milliseconds since Epoch from that there are milliseconds there are micro seconds you can use whatever we want so I'll simply use this dot time dot mili seconds since epoch so now by this I'll return this thing and now I also need another method so that it will take this map and then pass it to a task object over here we are parsing it from a string now we need to parse it from a map so task Dot from map and we need a map of type string and not Dynamic and let's call this map so over here I'll get the map from map task and the time will be date time Dot from milliseconds from milliseconds since Epoch and then the time is map time so as I told earlier this is a twoway process we can get the millisecond since Epoch from the time and we can get the date time from the value of milliseconds in support so milliseconds in support this variable is independent of the time zone you can read more about it if you want if you like so now I think the model class is ready now let's get back over here first let's import this model class import now whenever we are importing some project file we leave our line Gap and we use referential indexing so double dots backslash I can see model and inside that I can see task dot dot so this is the standard practice for importing all the flutter Imports or the external packaging ports are together one after leaving one line we use all we write all the project level Imports and if you have Dart level Imports we leave yet another line over here and that goes at the top so this is the standard practice that is followed and we will follow the same so now the save data uh let's let's create an object so I'll call it task is equal to task Dot from ma from sorry from string and then the string is task controller dot text okay so this dot text returns whatever value is in this text editing controller so now we have our task over here let's save it in the shared preferences so for that over here I'll write prefs dot put string okay I don't know it is put string or set string foreign task I guess okay and then we need to give the value so this we have a set string so we need to convert the value to string so for that I'll use a DOT package and as I told it will go at the top import convert so now we have Json this is Json Json keyword is inside this convert package json.10 code so over here you can see it takes a object of type Dynamic and encodes it to a string so Json dot encode and then over here we will give the map so T dot get map cool so now we have saved the data now once this is saved we can close the bottom sheet if we want so let's see let's see if it is saved or not also we can't possibly say it is saved or not we can see if there is some errors or not we will see if this is saved or not after this most probably in the next video so let's see enter some task demo task one and click on ADD unhandled exception missing plugin exception so you can see so this means that this shared preference is not found in the project and that is because we have added this shared preference while the project was debugging so the shared preference is added to the project but it has not been transferred to our mobile or the emulator that we use so let's close this and start it again run run without debugging select Dot and flutter now over here we can do one more thing that as soon as this task is created we empty the text controller so I'll write task controller oh I'm sorry the spelling is wrong task controller dot text and force it to an empty string so now if you would remember this underscore uh uh before any variable name makes the variable private okay and if we don't give an underscore then by default it is public so that was another thing that we have discussed in the starting of this series now let's wait for the build to finish and then let's see so now the build is finished let's just save this change that we made over here now let's add a task demo task one and if I click on add that text is getting removed and we you can see there is no change in the console but along with that there is no error as well so in the previous video we had we have we were saving the task okay so now there was an error that I made so over here while we are saving you can see that in the preferences I have given it a key of task so every time I add a new task this same task key is given to that task and hence the value which was stored prior to execution of this statement gets removed so ultimately what will happen that in our shared preferences we will only have the task that we saved the last so that would be an error so let's fix that so instead of right now instead of adding task let's first try to get to the task then we will convert the task into a list of tasks and then we will store it and then after that every time we add something we will retrieve the list we will add the item to the list and then we'll again save it to the shared preferences so let's get to the top first let's clear everything prefs dot remove and the keys task so now for now nothing much will happen but uh in the but during the last video we have executed this code so right now in our system we actually have a preferences with the key named as task and it has some value so let's first remove that before we start coding Okay so I'll save this and then over here I'll write any something gibberish then click on ADD now I'll click a few times just to confirm you know so now we don't have anything in our shared preferences so let's start coding the process in which we are planning to save the task so first we will get all the tasks so perhaps not get I don't know it was get or yes it was get string I'm sorry get string and the string is task okay and then when we get this okay sorry this is not uh future this returns a simple string so we'll get a string over here string tasks and that is this prep start get string now after that this task is in string format we need to decode it back to Json format and from there we can again get it into a list of objects which we don't need right now we will probably do that later Okay so Json and daughter decode and we have to decode tasks okay now this also returns a dynamic value so for now I'll store it in a list list and that is list and I'll be storing everything in this list okay so now since we have this list let's try printing something or maybe let's print this list so right now it should be empty or something like that so now once we have this list we will add the new task in that so list dot push foreign in JavaScript we have Push okay so now over here I'll simply add and Json and code T dot get map okay and then again I'll encode it and save it so prefs and Dot set string and the string is stored in task and the task is Json dot encode I'm sorry Json dot encode lists sorry it is list okay so I hope everything is clear we first retrieved all the tasks we converted it into a list okay and then in that list we uh added the last value and then we stored it so let's try running this and see so I think it will crash for the first time we'll have some bugs let's we'll fix that on our so I click on ADD and yes it has an error the gutter length was called on okay so if the so we want to execute this only if tasks is not empty so I'll use the null value operator and then I'll initialize this so now let's restart this although this error should occur only for the first time since then we didn't have anything here Okay so let's add some task some task click on ADD and again this error happened on line number 26 foreign okay so this instead of this entire thing so we can't do it like this because this entire thing if this entire thing is null then only this will work but right now the situation over here is that this string is only empty so for that we'll use our ternary operator tasks equal to null if the task is null then we'll simply initialize it like this as this we have a semicolon over here okay now let's format this save this do a full restart so we start is done now let's add some task some task and then I click on ADD and then for now we are getting this and now if I click on this again so now I am so now the task was stored in the first time and in the second time it is retrieved and then so this line so this print statement executes executes and then this is printed on the console and then after that again we get this task added in the list and then we again store it in the shared preferences so I hope this five lines are clear to you now if I click on this again so some task will print and then once again some task will be added so two times it will print and three times it will be in the shared preferences so let's add some things new so if I click on ADD so now over here you can see some task is at once it is added and twice it is added and some task 2.0 will also be added but it is not being displayed over here so now if I make it three so now this means that uh some task 3.0 will be added to our preferences and everything prior to that will be displayed so let's see and if I click on ADD so I get some tasks some tasks some task 2.0 and then this 3.0 is also added but since the print statement is before the adding thing there so that is what is not printed now I can make it in both ways so now once before adding once after adding we can see everything so now let's see print add so now let's see the last one we have some tasks some okay sorry I didn't save it I'm extremely sorry so I'll have to make it five so now yes so let's see the last one so now in the last time we added some task 5.0 so that is also printed and prior to that we did 4.0 3.0 2.0 and 2 times some task so everything is being stored in the shared preferences and decoded easily okay so by this we complete the storing process and the storing process works fine now so I'll remove this and once it is restored I also want to clear the text field and hide this bottom sheet so for that I'll add another two lines task controller dot text is this and then Navigator dot off context dot pot so now this is done let's format this and save this so now if I add some tasks 6.0 so that will be saved and then this uh bottom sheet should close so let's click on that and you can see the bottom sheet is closed some task 6.0 is added and the text field is also empty that means it is ready to store another task so by this we complete the storing process let me add to the Version Control foreign saving is done we need to display the tasks over here okay so for that as soon as this screen opens we need to retrieve all the tasks and then convert it into the task object that we have in this model package a model package sorry not model model package and then we will create a widget and that will display all the tasks so let's start in the init State method I'll create a method get tasks okay so now I need to create this method so now again I'll call this shared preferences make it a sink okay then I'll get all the tasks over here now let's convert it into a list of type task so for that I'll create a global variable over here and that is tasks now I'll initialize it inside our init state or in get to tasks would also do because that method is being called inside in its state so tasks I have initialized now let's add value to this task so for I'll say Dynamic d in list and then over here I'll add that Dynamic D so tasks dot add and then over here it will be task Dot from map and then d so now all the tasks will be added let's simply print print so now actually over here we have one two three four five six seven in total seven tasks so this should print seven items so let's save this and once saved we should we need to do a full hot restart so that in its state will be executed again and once we'll do we get a error over here unhandled exception type string home screen 39 so so I think there is some mirror over here I'll initialize it as list of task okay now if I do a full restart I don't think the error should be here so again it is showing some error okay so over here it is a type string is not a subtype of map string Dynamic so over here I am guessing uh this from map takes a value of map string Dynamic and D is dynamic so I don't know let's convert it to type map dynamic if I save this full restart and again it is still giving us an error let's go in the task so in from map we take a map of type string Dynamic so I don't understand what is there over here will have to check the type okay so let's convert it back to a dynamic and over here I'll add a print statement print D dot runtime type we have a method like that which will print the data type during the runtime Okay so let's save this let's do a full restart and so the error is that Dynamic d is of type string okay okay so I think what is happening is that there are two levels of encoding first the map is encoded to string and then that string is added to a list and then that list is encoded to a another string so over here only one decoding is happening so let's decode it once again so like when we decoded the list we got strings of of the map that we were encoding over here right Json encode list Json and code T dot get map okay so this encoding is uh decoded over here now let's decode this encoding okay so for that over here I'll write Json daughter decode d and we don't need this anymore so let's save this and do a full restart and I hope there is no error this time and yes there is no error so the error was because we were encoding two times and decoding only one time so now the error is fixed and we get all the instances one two three four five six seven so we have seven tasks so now the retrieving is also kind of done now we just need to display it on the screen and then uh add a ticker that will complete the task and then as soon as the date changes the previous task should get deleted automatically so that is what we are going to do so up until the previous video we have created task stored them and also retrieved them now let's display them on the screen okay so for that I'll remove this text that we have over here okay so or better that instead of removing I do conditional rendering that means if this tasks is empty then the center widget will be there otherwise we will display some other widget Okay so if tasks is equal to null that means we don't have any task then this Center widget seems appropriate and if we have something then let's display it so for that I'll use a column you can use a list view also I feel more comfortable with columns so in column we have children the children is task dot map dot to list so we have already discussed this method in one of the video where we were discussing about columns so for now let's return a container okay now the container will have a height of let's say 70 and the width will be the entire bits of the screen media query dot off context dot size dot width okay don't know why it is yes so the error is gone now along with this inside it will have a child and the child will be a row or for now just let it simply be the text and the text is e dot task okay so the task now let's format this save the sense see how it appears so we can see all the tasks and it looks pretty ugly let's add some decoration to it so we'll call the decoration parameter will have boxer decoration okay now inside this we will first add the Border radius so border radius dot circular and then from all sides I wanted to be circular by five degrees or okay and then let's add border decoration style so border and the Border will use the widget border.all means that refers to all the sides now let's add color to this border the color color of Border will be black colors not black and it can be of width 0.5 let's see now let's format it save it and see how it looks I hope it looks better okay so it is looking better but still it needs a lot more refining let's add margin margin we always use const because we don't want this to rerender every time we called every time the set is state every time the set State method is called okay because it is not necessary so let's add a margin from all the sides to be 10 pixel okay so it looks better maybe I can change this to symmetric and horizontally we have 10 pixel of margin but vertically I think only five will do so let's see yes this looks better now the text should be in Center so for that we have another widget that is alignment and then it also has any num alignment Dot Center Center left okay let's format this save this okay now let's add some padding over here so for that I'll simply copy this in vs code we have a shortcut shift option and down button then the all selected things are copied just below it and I'll change this to padding and instead of symmetric it will be only um and this will be left I'm sorry and now since we have only one parameter we don't need a comma it can be a one liner widget and let's save this and some padding is there okay now I think we were using the font Mont serat over here I think yes so we are using monster red so I need to add that over here as well Style Google fonts dot Mount Sarat okay let's format this now let's save this and the text is in the font of montessor act okay so now the basic UI is done now all we need to do is add a radio button over here and as soon as it is ticked Mark instead of radio button we can use a check box as soon as it is checked we will remove this task item from here okay and also from the shared preferences so for that I need to wrap this text around the row okay so like this let's save this now yes so there is no change in UI that's good now I'll add a check box okay now this checkbox needs some parameter for now I'll just give the required parameter because UI is my major concern the parameter value is required so let's add some value for now all will be false that means unchecked okay let's see what else is required I'll have to check it like this only might need to give it a key uh let's say the key key takes a value of any type so let's say a global key and over here we can leave it like this so let's format this save this it will show what is required or what not okay so we have the check box over here now we want this to go over here so for that we can either leave a add a sized box in between that is the inefficient method the efficient method would be to change the alignment main access alignment then the main axis alignment would be space between so it will leave all the space possible in between the two items okay so now you can see all our perfectly aligned to the right and all the tasks are perfectly aligned to the left so with this we complete the UI now we'll add functionality in the coming parts so let me add it to Version Control foreign so without further delay let's get into it so up until the last video we were able to save the tasks and also displayed now let's proceed so now while I was starting this project I saw error that when we first start this project the tasks don't appear okay so they they tend to be disappeared so we are retrieving the task over here but we are not able to see it on the screen however if I save the screen that means set status internally called and the build method is executed again I am able to see all the tasks that were saved so the problem over here is that we are retrieving the task but after that we need to do a set state so that all the tasks are visible on the screen so let's do that right away where we are getting all the tasks over here we can simply say set state so this is done now let's format this save this and now if I do a restart I should be able to see all the tasks so as soon as the tasks are retrieved it is displayed over here so now let's actually try completing the task means if this task is completed I check I click on this checkbox and the check box and this task gets removed from my task list okay so for that first we need to create a list list of Boolean okay that is tasks return now let's initialize it the same place where we get the tasks so over here I'll call that method call that variable sorry and then we have a special method in that that is called list dot generate so what it basically does is it generates a list based on two parameters first is the size of the list and second all the values that will be in that list so the list of this task done should be equal to the task list so I'll simply copy and paste dot length and then over here we get index and for each index I wanna return false means this task done will be a list of length this where each value is false so now we have the list let's save this and now let's come to our checkbox so this check box needs another variable that another required parameter that is on changed now this gives us a value means that is the current value of this checkbox true if it is ticked and false if it is not okay so let's do this so the value over here will be tasks done and inside that the index will be the same index of e in this tasks list so for that we have we'll simply use the index of method in the tasks I wanna get the index of e simple so now I get the index of V and at that value what is the corresponding value in tasks done list and when this is changed I'll change this value so inside a set State a set state is important because if we check this then internally the value will change but it will not reflect on the screen so that's why I'll put it inside a set state and over here this will be equal to VL now let's format this now once done I'll save this also and now since this method right now is null because this is called in get task and get task is called and instead we need to do a full restart so let's do that and once it is done okay so they are little bit lagging so once this is done if I click on this I should be able to see the tick mark cool so now let's do the save thing like that means that if I have done some task this is some task is completed so I check mark it some task 2.0 is also completed so I check this also now I want to save this changes that means when I open the task manager next time so I don't wanna see these two tasks as I have already completed them so for that we need a way to save the save this thing save the existing state of the application so for that I am gonna add a save button over here so let's do that so for that inside the app bar we have another parameter that is called actions can that it takes a list of widget means it will list of widgets that will be displayed here starting from right to left so we just need one and that is an icon button okay now this icon button takes an icon and the icon takes a icon Widget icon widget we use an icons enum and then we have an icon called save we can use that yes so this will be the icon and then we have a on pressed or on clicked here so we have one pressed over here so for now simply print save is clicked so once this is done let's format this save this now I should I am able to see the save button if I click on this save click this printed okay so now let's actually save the remaining tasks and remove the ones which are checked okay so for that I am gonna create a separate method this update pending tasks list and I'm gonna create a method over here with the same name and now first we need this shared preferences thing because we need to handle the preferences now a better method to handle shared preferences would be that we initialize it inside init State and make this preps variable Global so that the same variable we can use in update pending task list method get task method and save data method okay so that is a better approach now since we are using a weight we need to add a sync over here now let's create a list of task that is the pending list now let's Loop through all the tasks thank you so I'll write for VR I is equal to 0 I is less than tasks dot length I plus plus now okay I don't need a parenthesis this is a one liner so we don't need a parenthesis if not tasks done is I then we inside the pending list we add the task so that is tasks I so this is done and now after executing execution of this statement we get the pending list that means all the tasks which are not checked so then we finally save that in the shared preferences so for that pending we need to create a pending list encoded and over here we again use the list dot generate and the length will be pending list dot to length okay and then every time we return let's make this I every time we return Json dot encode uh pending list I dot get map so this is done now we need to save this encoded list because when we are getting the task we are decoding it twice so the first level of encoding is done over here now we'll do the second level of encoding prefer dot set string and the string name should be exactly the same as we have over here that is task task and the value is Json dot encode pending list encoded so now with this we remove the tasks which are marked check and also save the remaining one so after this we just need to call this method to get the fresh list of tasks and also display them so with this let's see if this works I'm gonna do a full restart okay so it has not restarted actually yes so now it is done now if I check some task and some task 4.0 means that means that I have completed these two tasks and then I save the state so those two disappear and then we have the remaining task so with this we conclude the 99 part of the application that we and at the morning of the day we list all the tasks that we want to do and but during the course of the day as soon as we complete the task we check them save them and then those tasks are gone so this is what a basic daily task manager application should be now the next thing that we can do is to add a to add a button at the bottom to clear all the tasks because suppose if you have some tasks and you are not able to kind of complete it in the same day or you completed them all and forgot to check mark them so and then the next day comes so over here we have will have a button that will simply remove all the tasks and then you will get a fresh screen to start the other tasks or start your other day so up until the last video we were able to create tasks mark them as completed and also save them so now as we discussed in the previous video that suppose if a person forgets to check all the things and the next day he wants to start fresh means add new tasks for that day so it would be a better user experience if we have a button by which we can clear all the existing tasks at once so let's do that so for that in the home screen in the app bar I'll add another icon button so in vs code we have a shortcut shift command and arrow down the exact thing gets copied below and now instead of save I'll add a delete icon okay and then on pressed simply prints put us now let's save this and we can see the delete button oh by this I remember that in the previous video I said that it goes from right to left which is wrong I am sorry it goes from left to right and over here you could see that as soon as the list extended the task manager which was in Center is now at the left corner so this is this happens automatically and that is good so let's proceed now if I click on this delete button press is being pressed uh printed and but actually I want to delete all these things over here so simply uh so simply over here only I'll create the shared preferences let's see if this can be a sync yes so this can be a sync so let's get my shared preferences variable over there okay or in other ways uh words create a preference and then to this I wanna set string and that is task and the value is Json dot encode and empty list that means all the things are removed nothing is inside this list and after that simply I'll call get task method okay I think it is good tasks so yeah so let us get tasks so now let's uh format this and save this and let's see if this works or not so I get four tasks now if I click on this delete button everything should be gone and yep it is working means I can clear all the tasks at one at once or marked them done as once you can call it whatever you like now let's try adding something so foreign that when we save it it is being saved in the shared preferences but it is not being displayed on the screen so again we need to call this get tasks after saving each task so save task and then I'll simply call this let's save let's do a full restart foreign once the restart is done we have some new tasks over here we have done other new task Okay so it another change to smoother no issues so if now I click on ADD I am able to see the new task okay so now I can do it like this or I can simply click delete both ways work and by this way complete our simple daily task manager application thank you