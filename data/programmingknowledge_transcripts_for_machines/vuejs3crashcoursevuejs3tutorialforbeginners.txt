hello everyone welcome to new view js3 tutorial in today's tutorial we are going to get start with the view js3 so vue.js 3 is an upgradation version to view js2 so it is a little bit different but if you have followed my previous tutorial on view gs2 then it would be very easy for you to migrate yourself into vue.js3 so let's carry on with viewjs3 so let's start with the starting template today we will uh surely cover all the basic things which are different from vue.js too and how it made a difference to us and we would all adapt us to those changes so let's get started with the tutorial so today is the title is starting with view js3 and the description is like in this tutorial we will add view js3 inside an html page that means installation and render the component on front end we will make a counter app to understand the same plus we will understand all the basic differences and we will be able to differentiate ourselves with all those things using view jsp so first this is a vs code editor it has an index1.html file and it i'll rename this file as index1.js so it has two files one is index1.html and index1.js now what we can do we can add a bootstrap the starter template to our html page for an easy start so it would be a quick start for us so you can simply move to this link bootstrap 5 then start inside the starter template you can directly click on copy and click on paste here okay so then we will be able to run this page and uh like we what we can do we can like this we can reveal in file explorer and when we move to file explorer we can copy this path and we can move to our browser and we can uh paste it here and inside that we have a folder tutorial one or you can click on index1.html and this will open the page and let's okay bye i'm really sorry i had copied this incident index 1.js so let me remove this now i'll save this yeah so index one dot html has been and i'll refresh this page so here you can see the template has started now i will remove the title to learn view three three and index one so this would be the title and i can move this comments and what we'll do then simply i'll move this heading and now this looks perfectly fine what i'll do i'll add view js3 to this script has been added so i can copy this script and add it here and then i refresh the page and i click on inspect so this would give me inspect and console here you can see you are running a development build of view so make sure to run production this would ensure that view has been installed perfectly fine now what we can do we can create a simple app and first we would also add the index one.jscript also script is equal to source is equal to index one dot gs and then i can close this tag sorry sorry for the mistake yeah now i can close this tag and inside this i can do console.log script started so this would be perfectly fine when i refresh this page so here you can see the console.log statement has started script started so perfectly fine now what we can do now we can add a view gs3 component so for that what we need to define we need to find a component and then we would render that component on the front end so let's start how we can define so it would have two things one is the data and another is the methods so this is uh like this is very much same and how we did in the or like how we used to do that in the view too also but this time we are going to mount the component okay so okay i'll just show you how you do that so what you can do you can make constant okay before that what you can do you create a div here inside a body div id is equal to my app okay now you let this div be as it is okay now what you can do you can do constant my app component component is equal to this is the json object okay now what you can do you can do a constant my app is equal to view dot create view dot create app okay and inside this you can put my app component dot mount so this time we are going to mount and we would give the id of my app so let's move to the page and then refresh it and you have successfully mounted this component so when i click here my app so here you can see a component has been seen okay so this is an empty component we have not ensured anything inside that but just an empty component so i will show you how we like in view two we should define the element inside the el tag that element we are referring so we need to define the id or a class but here now we mount the component using this syntax that is u dot create app my amp dot component and mount the component and we stored inside inside the variable my app and by default my app component this is my app component and the id my app is as the same name is as my app so that we so the view component so that it doesn't create any confusion to you now the second difference here we come is a data this time a data is a constructor so so that we render the data as on on on construction that is on initialization so it is like a pre data construction for us and then we return an object for the data and this this time we return a count is equal to zero and inside this what we do we make a button okay or we simply print the value of count so this would be an easy task for us and let's refresh the page and see so here we can see the count is zero and we have a zero also so perfectly fine okay and now what we can do we can make this count inside a button you called me you called this button count times so we call this button zero times when we click on it nothing happens okay and we create another button okay before we do that let's call some method so methods we call again methods so methods is a json object good and we call a method increment and this time what we call this dot count plus equal to 1 perfectly fine okay now on this click click functionality this should be at the rate click is equal to increment increment okay now we refresh the page okay now we refresh the page and what we observe that when we click you click this button one times four times five times eight times and nine times ten times eleven times now for the same what we can do we can create a reset button at the right click is equal to reset and you can type reset for the same we need to define a reset method and this time it says this dot count is equal to zero so perfectly fine and when we refresh the page you call me one time two times three times and when i click on reset it turns out to be zero again back to zero then i click on it and reset then it turns reset now what i can do here i'll show you one thing i'll click on this like i've clicked this on 15 times now i refer to my app dollar data please look at the console on the right side data dot count it turns out to give out to be the value of 15 and when i call my app dot increment okay so okay sorry for the mistake my app.increment so it says function increment okay now what you can do uh you can call my app this is a function reset okay so here you can tell you can also look at the functions and the count from here so this is a very good way a nice way to call the functions and this is how we call we can have a look at them okay and today we are going to build a date picker and a time picker and view js so let's get start with today's tutorial so air f3 files this is the official website of vue.js you can copy the cdn from here then you have bootstrap page then this is our app directory so these are the two files app.html and app.js so we will be linking app.html to app.js and then we would build our time picker then again and then after that we would see the date picker so very two important components and these are very useful when we are opting for a slot scheduling or scheduling or something using a time or a date so they are very helpful so we can get start with that here now so before that we can move to the bootstrap page inside the starter template we can click on right side copy we can copy this html and paste it here you can remove this option too since this is not needed and then we can also remove this comments as well and we can uh save this and when we click on app.html we can see this page is perfectly working fine and we have a h1 heading then after this what we can do we need to add the cdn okay we will copy the cdn and we can paste it here and this is perfectly and when we refresh this page or ctrl shift i we can take inspect element and we can see on console that you are running a development build of view and this is what we needed as per our uh as per our desiration that we needed view to run a development mode uh development mode is a little bit different from the production mode that it gives us the warnings and console logs so that is helpful for us while building an application but if you want something very very much optimized then you should use production after the development that should be after the development now we can move to our page and we can change the title we can change this to view date date picker and time picker so this is perfectly fine and we can add a script below that script source is equal to have dot js perfectly fine and we can close the script tag and inside tab.js okay i'll remove this for a time me and i can simply type console.log so i uh i'll type console.log script started okay so when we refresh this page yeah so here you can see the script has started and plus we have built the page now what we can do you can first create our app component so this this constant my app so this is my component component here perfectly fine this organ json object and what i'll do constant my app is equal to view dot create app my component dot mount so i'll use dot mount for this and what i'll do i use dot mount and i'll use hash my app and this would here you can see that okay fail to mount an app target selector hash my app well this would be failure or because uh i have not defined i'll move this heading and i'll not define a div here right now so there id is equal to my app and i would close this close this div and i would refresh this page now here you can see and i'll type my app dot data okay i'll put a dollar sign so so till now uh what i want to show you that since that we don't have any data that would be an empty object but this recognized as my app okay so it has all the view components like uh attributes and methods so what we defined here at the line number seven so this is perfectly fine now what we can do we can define a data or methods is given by a json object so that would be empty we are not defining any methods and data would be an a data constructor and we need to return return a json object and then what we do return a json object and we'll define my time we can define this on a null component and my date as a null component too so this is perfectly fine and let me refresh the page i got this at error line number though syntax error okay so app.js client number five column number fifteen okay okay i had a semicolon before the return statement so that would one issue so let me close this and refresh the page so i have something good so why my app dollar data so now you can see that this is our data and it has two target values that is my time and my date which are initially null so let's bind them using time picker so now i have input type is equal to time and then perfectly fine and then i'll type my time value but this won't work because i have to combine this using v model is equal to my time so let's close this page and okay i'll put this inside the h1 tag okay sorry people mistake h1 tag and uh yes my time now i'll refresh this page perfectly fine now using the arrow keys since this i'm using firefox you can change the time and then you can change the minutes now when i choose am this is a good this is am and i choose pm it automatically changes to 14 when i make this as a change dynamically updated and i'll use am now so this works perfectly fine so this is how the time picker works uh this is how time picker works and i'll comment this out now since we don't uh we'll move to the date picker for date picker what you can do input type is equal to date and we model i'll model this with my date and i close this tag and inside the h1 tag h1 i'll give my date and close this okay now when i refresh the page i'll just choose a date so here i see when i choose a date perfectly fine i can choose the year and month so this changes and as the date also changes so month changes perfectly dynamically updating so everything is updated dynamically and this is how we build a date picker and time picker so today we are going to learn about props and components so components are like custom html elements which we can make in vue.js and we can register those components so so that would increase our reusability in our application so this is a good concept which will you find in other frontend frameworks as well so this is a custom http like for easiness the components are custom html templates and we can use them so like not html templates we can call them as custom html tags which we can use them for reusability in our application and the props is by passing data from parent component to child component so we would make our own props and component and i will show you the same so first we can create a new file that is index three dot html okay so you can create this file or i can name this as p p and c dot html so pnc stands for props and components and we can create a new file that is p okay i'll name this as props dot js props and components dot js okay and you can you can also like you can rename this as well and you can type props and components dot html okay now what you can do you can console.log script added so this would be like a confirmation for you script added and you can create your html page here and inside this html page you can put a like this is your html page and you can use this and like what i'll do i'll remove this like yeah this is perfectly fine i'll remove this css this script as well and i'll give this as tight as props and components props and components okay now what you can do you can at the bottom of your body you can add a script tag and add a source is equal to props and components procs and components dot js component.js and then you can close this tag profs and companies.js and then you can close this tag and refresh the page and you have props and companies.html and then you can right click inspect element and console you will see the script has been added so the script is added now what you can do now you can like the script is added now it works perfectly fine now we can create our own component for that what we can do we can move to props and complex.js and you can type first you can type constant app okay view dot create app and we can close this an empty json object okay then we can app dot mount okay and we can give this a id app so we need to define an id app here so we'll give a div id is equal to app and then we can close this tag so then we can refresh this so view is not defined because we have not added the cdn yet so we can copy the cdn and paste it here so let's refresh the page okay sorry let's refresh this page and here you can see the script added and a component has been mounted but now we are going to create our own component a component and for our creating our own component what you need to do you need to type app.component because we are registering a new component and you need to type this as my card so this is your card and what it defines it will have two things so it will pass a json object and here you will have two things one is the props props is equal to title and props and is equal to title and then you will have a template for the same and you will type a tick symbol the tick symbol is below the escape key and you will return div okay dave dip and then you can return a h4 tag or h1 tag and you can render the title here title okay so the prop you will be getting from the parent company you can render the title at here using template now let's move to the html page and like everything is working till now perfectly fine no error so so what we can do we can add our own prop so let this be our prob be my card so this is a custom html template tag we are using and this is and inside this we are going to pass the title hello world okay let's close this and refresh the page here you can see i have a hello world and when i right click here inspect element so here you can see okay i'll show you so here you can see that what we rendered there like what we rendered like here you can see that i have my card html tag but this on conversion turns out to be this the div id h1 title h1 and div and the title is the props to title the data we are passing from the parent component to the child so here we are passing the data title hello world and my card so we can also find uh pass some more data that is likes is equal to 25 okay and uh let the date uh like likes is equal to 25 and let's get category is equal to let this be like programming okay so what you can do so this is the data we are passing uh but so far we don't have like we don't have we have not mentioned the data we are getting so we need to define likes okay this likes so we have defined likes which we'll be getting and the category also category so we are also getting the category and now inside our html what we can do we can use this so h1 is the title then we can have a p tag saying liked by this much likes like by this much likes and people and we can close this p tag okay and then what we can do we can also give a category a category and then we can say okay we can give category and type so when we refresh the page so here you can see hello world programming liked by 25 people so this is a good concept but how we increase the usability yes we can increase the reusability we can create own my card okay and then close the tag and then title is equal to uh software okay and the let the likes be 50 and the category you can add category is equal to tech so let's refresh the page and now you can see we have another card saying software tech and lagged by 50 people so this is how we use props and components to increase the reusability in an application so this is an ex advanced concept in today's tutorial we are going to design a calculator app using vue.js using the eval statement so let's take uh this one this time i'm using sublime text editor so this is a very basic component i have created and this is my app galaxy component and like this is my this is a view gs component and i have mounted this on the id that is my app calc and this is the calculator.html and this is the id given below so this is like a very basic component i have rendered on the front end and it is very much common to my previous uh like tutorials how i rendered them on the front end so it is very common and easy and it's very basic so i've already made this so that it saves our time and we can already get started we should we could have a quick start to a tutorial so you can move to the project directory click on this html page right click inspect and this would return you the on console that you are running a development builder view so make sure to use production bit so that's perfectly fine so no issue so what you can do you can make a form and inside this form you can add so i'm using some line like for this time like it's like i've already have a huge font size so it's to give you a better visibility so now in this you can give input input and the type is going to be text and name is equal to query and id is equal to query and we are going to remodel this we model this is equal to query so you can and you can remove this to avoid any confusion like it's not needed as of now so you can remove this and what you can do calci.js so now what you can do oh you can build query and give empty parenthesis okay now you can refresh the page and fail desired direct model okay i made a spelling mistake so this was v model and you can you can refresh this page so it works perfectly fine and now what you can do that i have a data query which is an empty string i have already mounted this on the front end and what i can do i can type for you using the paragraph tag you searched your query is this query inside the parenthesis which would give us the value so now let's refresh the page and your query is 2 plus 3 into 5 so this works perfectly fine okay now okay i forgot to put an r your query is this now for the same what you can do you can put input type is equal to submit and the value you can give is to calculate okay and you can give a hr tag below so this was just for demonstration purpose like to give an overview and here it knows works perfectly fine your query is two plus three star five now if i want to like if i want to evaluate this query so i should use an eval statement so i should use an eval statement and how can i use this is first i need to define a form and direct submit dot prevent is equal to my my method so this should call my method there in uh like my method or you can define this my eval function okay my eval you need to define this my eval here my eval and this is a function which is going to be called and what you need to do okay so you need to define my eval function and what you need to do console dot log this dot query okay so first we will just console.log this dot query so let's type this are we getting at the back at the mounted part or not two thrust and here we see we have already got the query that is 2 plus 3 into 5 so we've already got this so it's working perfectly fine so what we can do we can evaluate this using the eval and let what we can do console.talk uh let's we should take an another parameter that result and we can also keep this as an empty string and what we can do we can assign this result this dot result is equal to eval this dot query okay and then we can your query is this and what you can do simply you can put this this is equal to result i hope this is perfectly fine so let's refresh the page i can call already copy this and refresh the page so 2 plus 3 star 5 is equal to 17 so this is how we can use this so we can now remove this console.log statement it was just for the debugging part now we can store these results and for storing this result we can use an added data structure that is calculations and this is the calculations part and we can push this result after query this dot calculations dot push we are going to define a push function and what we are going to do define a query a query so we are defining a json object so that's that this dot query and we are going to define a result and this is going to be this dot result and what we can do uh we can also push one thing uh like time okay and this is date to string so i hope this works perfectly fine yes so let's refresh this page and what we can do we can render this on our front end calculations okay so let's refresh this page 2 plus 3 star 5 so we are storing this and this is already showing us the time then let me change the query always rolling this so we are already storing this calculations and yes so this works perfectly fine and we can use a v for loop on the front end so for that we can use unordered list and we can use li v for item in calculations calc calculations okay so we can define we can close this and we can define item dot query is equal to item dot result and we can define item so this is calcium.js and we can have item dot time okay so let's refresh the page we can create two plus 3 okay 2 plus 3 is equal to 5 calculations book i made a spelling mistake this is calculations yeah now perfectly fine 2 plus three yeah so here we maintain the history plus the result we make another calculations yes we make some another calculation so this is how we make calculation and storing them in history so this is how we design a calculator app and we can also use the last result and we by indexing so we can modify them when we click on the last result so last could also become available so this is how we manipulate data in view js and this is a simple design how we can design a calculator app using the power and maintain the history as well so you could integrate this with the backend and store these history in a database as well we are going to learn about form validation in this tutorial so form validation is very important part and we would process the form validation like this is a very important part using view js and it is like one of the core topics in ugs so let's get started this tutorial so this is our project directory we have two files form.html and form.js i've already mounted the component so this is very similar you can refer to my previous tutorial and it is the very same thing which i always work with the same kind of components like component has been made data methods and i have mounted this on the id it just showing small error you can ignore this error but if you want to like get rid of this so inside the head tag you can put meta this better attack casted is equal to utf8 so this is this would remove this error so you know it works perfectly fine and at the same time you can observe that i have no i have you just installed so let me put view js and installation i will click on version three point x and then i would click on cdn installation then cdn and then i can copy this link of the cdn i can get start with the vue.js perfectly fine so i can put this at the bottom of my tag and i can put script type is equal to text comma javascript is perfectly fine and i need to define a source this is form dot form dot js form.js so perfectly fine now i can refresh the page and i can get start with the tutorial so i'm going to define form validation so let's make a small form and we we need to define form and then submit dot prevent is equal to check form okay and this is a form and i've already defined a check form function i'll define a check form check form and i'll define three things one is the name which is null okay which is null another is the age which is also null okay and another is the gender okay which is also null okay so you can for your simplicity you can define the v name b name and v8 vgender so that you can refer to this using vue.js okay and the first condition what we are going to define first we will define if this dot rename and this dot v age and this dot v gender then you can simply return true and simply return true and at the same time i'll have an errors which is uh which will store the errors and this dot errors so if this is true so what we need to define if this is true then what we can do this dot errors this is going to empty adding okay and then if uh what i mean like what i mean to say you can like okay i just got a little bit confused if dot this dot b name if it exists if this also exists and this also exists then you simply return true else you can restart this dot errors is equal to empty array and if not this dot rename okay then you need to define this dot errors dot push name name required okay and in the same way we'll have three conditions if this dot b h then i'll put age required and this dot v gender and i'll put gender required gender required okay so i have put three conditions for the form validation okay and this i hope this is perfectly fine so you must be confusing why i did this because you don't want to accumulate errors again and again that for every condition you need to check if this thing of all the three exists then you return true then you put this dot errors is equal to you make an empty array and you try making checking for each condition in this okay so this is how we work and i have put three conditions so this look a pretty clean code and let's move forward with this so next in form.html you can define input type is equal to text and you need to just remodel this is equal to we name and in the same way you can define input type is equal to h oh input type is your number because age is a number and you need to define this with v model with h v model is equal to this and you need to define two radio buttons input type it is equal to radio name is equal to gender okay and v model that's why i told you to give them a name with v v model is equal to v gender okay and value is equal to male 1 in the same way you can give input type is going to radio names you don't do we need models will be gender and value is equal to female so let's refresh our form so i hope we are getting all the things yes so we are getting the things and we need to define labels okay okay and for that what we can do input type is go to radio uh oh we need to define a radio button so for that first for the above two we can define a placeholder and for the last one we need to define a radio uh we need to define a radio button okay so for this what we can give placeholder enter your name and for this let's refresh so here you have a placeholder enter your name and for the next one i can give place holder is going to enter your age okay now for now for the other two uh sorry for the interruption now for other two we can give an id is equal to mail and id you can give this a value as female and id is equal to female and you need to define two labels one is the you can put a break statement here break statement here okay and you can put a label label made and you can put label for mail and label for female so that's uh how we define the form and when we refresh so we have got our form okay now that's a like id is equal to female label for male is perfectly fine and when we refresh so this is working perfectly fine but i'm assuming that i'm missing with the female label so let me check to define a female tag inside this label that was i was missing so let me refresh page so i have works perfectly fine so what you need to define uh just for the simplicity i'll define a paragraph and i'll say you selected your details so this is just for the your details is your details are we name vh and be gender okay so let me refresh the page and i'll show you this is uh my name this is my age and this is my gender so this works perfectly fine but what we if we forget to fill anyone so for that you need to define a input type of to submit input type is always submit and you need to define a value a value which says submit okay now what i will show you you uh i have to define errors so for that i'll do i i give a v if condition if errors dot length is greater than 0 because i need to show the condition on the front end so how i'll show you i'll show you so for that what you need to define you need to define div v if errors dot length is greater than zero this means there are some errors and i close this div and i'll use the ul tag and i'll close this ul and li tag and the style is equal to i'll give style is equal to color red okay and i'll give a v for loop v for v for is equal to item in errors you can give item okay or simply you can change this to error and if you want to change this to error then you have to change this to as error as well okay your error in error so let me refresh the page okay there's another property errors for tested but not defined on instance error because i defined to do this this this was error that was a spelling mistake so let me refresh the page so now i hope the spelling has been corrected so let's go to this part yeah so your name is python and if i forget to sum age required gender required so age is 45 then gender required so this was i was doing the same part this was initialized and if so when something i remove the name i have the age and gender so name required so this is how we handle form handling in view js we are going to learn about how to fetch an api using vue.js so what you can do you can move to the bootstrap website and click on get starter template and you can copy this template and you can paste this uh in advice i'm html and what you can do you can paste on this website and you can refer to this so to fetch an api we are going to first i'll give this a title advice app advice app and what i'm going to do i'm going to use another dependency that is axios axos is very similar to fetch uh you can use access or fetch it's up to you uh i'll show you how to do this using fetch so this is the api we are going to use advice like json api this is a free api which returns an api and it would you can fetch and advise the idea and you can search and advise so this is how we do it and we will uh first we will try to initialize make a simple one then we can get back to the like how we fetch an api so what you can do uh you can move to this uh get a website uh that is axios uh you can use axial so exercise is basically used to fetch apis so what you can do uh you can move to this link and and you can you click here and what you can do you can simply add this script this is uh so this is accessment.js so you can simply copy this script and you can use this in your project so at the below you can use this so axle is there now what you can do you can also put vue.js in your project and you can install vue.js you can click on view 3.x so then you can click on get started and you can click on three point x and you can click on installation so this is how we're going to get cdn for the vue.js and you can copy this script tag and you can paste this in your html page then we can add our own script tag that is script script and we can give a typo to text from javascript javascript is perfectly fine we can give a source that is advise advice app dot js so we have used both the things that is axios and the script a script tag using advice app.js we have used both the things so this would particularly help us so axos is used to catch an api i'll show you how you fetch one so let's make a form uh then we can fetch the api using access okay so let's move with the code then first you need to like i'll show you one thing what you can do in this advice app.js you can do constant my app component and you can give a data app component and you can give a data and you can return a json object okay now you can return a json object plus you will have some methods uh methods is going to be one that will say fetch api okay so effect api is going to be with the method and what you can do you can uh create some data that is you can create some null data that is response response is equal to an mg json object okay and this is how you you will do it and like you can do response data is equal to empty json object okay now what we can do we will first fetch an api using axios and you we can mount this hours as well constant my app is equal to view dot create app my app component dot mount so you can use the mount functionality and you can give my app as the id so in this you can give an div div id is equal to my app okay so this is how we do it and we right now for just the sake that we want when we open our application so let me move to this page so what you can do you can right click and you can right click and uh open containing copy file path and you can paste this path here so this is your js file okay i meant to open the html file you can click on copy file path and you can open this html page so this is how we open the page and you can right click and inspect element so here you can see everything looks perfectly fine we are good to go with our code so axos has installed and now what i want to do that when i open my application so i already want this dot this fetch api function to be called automatically so for that what you can do you can use the inbuilt functionality there is one more thing mounted so mounted means that you call this method you call this method automatically when your page gets loaded or when the component gets loaded so we want our response to be displayed automatically as we open the website so we don't want something to be clicked so we can call this dot patch api so this dot fetch api will be automatically called when we open the page so for that what i can do console dot log com we can do mounted okay so this would be automatically called let's refresh the page and here you can see it says mounted so this is automatically called this function method has been automatically called as soon as we load the component so the next what we can do we can uh we can use some response so let's see how we get a response from the api so this is the api we can open this api and here you can see that this api returns a json object which says slip id is equal to one one six and advises you to one of the top five requests people have is that they this is just an advice and with that we have an id so let's see how we we fetch the api so let's copy this https request and let's put this so we if our this api is constant so we can put this above our code api is equal to this so this is our constant api so it will remain forever for this code and we could just modify it as well so what we can do what we can do we can we can do uh so we want this function we want the we want we want to wait for an api response so what we will do we will make this function asynchronous that is we would wait for this function to load and complete if we make this function asynchronous then we can use an await keyword that is await a wait for the response we need to wait for the response and for that we would do axios dot get api so we are calling dot get api and if we get an api then we will have two things that is then the next thing we will do and plus catch error so if we have an error so we can make a function to call the error error is equal to console dot console dot log error okay so this would automatically confirm the error if if there is no error then we will proceed with the then functionality then we would get the response response okay and we want to do this dot response data is equal to response dot data okay so this is how we do it and we can what we can do we can just simply do this response data okay so let's refresh the page move to our app and this is our app now here you can see just for a automatic automatically we load this page and we get the response data okay so what we can do uh we can we can create a front end so this is how we fetch an api and we can render this using bootstrap so i'll show you quickly how we do it you can move to the bootstrap and you can look for cards okay and in this you can copy this and you can first give an h1 tag and you can say advice i have and you can give a style is equal to text a line is equal to center okay and let's refresh this okay sorry let's refresh this and we get advice app and now we can create a card we can paste the card here and we can we can remove this image because we don't need it and we can so we can advise for the day day is something we can call this advice for the day is and what we can do uh we have two things so this is we can remove this and we can give 2p class so one is the id and another is the like we are do so what we can do uh what we can do like we have a response data this is perfectly fine and we can create two things one is id so let this be null and another is the text so this should be also null and what we can do this dot response data is able to respond to data and we can do this dot id okay so let me show you one thing so we have a slip and id so we can do response just one.data.slip okay and you can you can do this as well response or data dot id uh okay i'll show you one thing i'll not make this complicated this dot id is this good too i just wanted to show you so i kept an empty json object response.data.slip dot id okay and this dot text is equal to the same thing and i'll copy this and paste it here advice and i'll put a comma here and here i'll put id and text okay so let me i think i have done enough for this and let me refresh so here you can see you get a card advice for the day is a advice number you get 150 you try using an old idea so this is how you fetch an api and you i have a responses to any card and you can just make it more simple number advice advice id and advice text and you can just simply so you can simply you can simply put a bolt back around it so if you want you can make it bold so you can also make this bold as well and you can just remove this response data because we don't need it and you can style is equal to margin zero auto margin zero auto so let me refresh the page so here you can see so advice text okay let me inspect element and i have given than zero okay so i've given uh i have given uh like i've given this to the okay let me remove this and let me remove this yes perfectly fine so this is how we fetch an api advice for the day is advice id is 198 saying is the shower so we already get the response on the back end and displayed on the front end so this is how we do it today we are going to take the help of this api that at api.deviceslip.com and we are going to make a search we feature so basically we are going to search advice using this simple api so we will put put an input query from the user and we will be searching the advice using the same so let's do let's see how we can do that so we are going to do we are going to create a search searching a device feature and we are going to take a dynamic input and we are going to then render the data using the list group of the bootstrap and we will see how we can do that and we are going to fetch a very dynamic data so we don't know how much data we are going to get and we are going to render the same so for that i have already made the boilerplate index.html and index.js so for this what we can do we can create a div class is equal to call md6 just for responsiveness just for the responsive part i'm doing this and then inside this what you can put you can put style is equal to margin one ram auto okay you can give a padding of one ram and for the same uh you can this is perfectly fine and what you can do you can give a class text center okay you can remove this as no and then you can give a feature h1 and h1 you can give a search advice okay so this looks perfectly fine and for this you can give style is equal to text align center and you can give a margin 0 auto okay so you can also give a one name order for that okay and when we refresh this page on our so we get a search advice at the center and there is already a container which you can we can see okay if you want to see the container you can give a border you can give a border one ramp solid okay and black i hope this is this is a shorthand property and if this would make you show the like this is very too much the one ram is too much you can give like one pixel is perfectly fine instead of ram okay now let's refresh this page so here you see the search advice okay in the same way what we are going to do we are going to give input type is equal to search okay so input type is equal to search and we are going to give a class is equal to form form control and in another way we are going to another input that is input type is equal to submit and for this we are going to give a class of button button primary we are going to clear class is equal to button button primary and what we are going to do style we are going to give a style of display block and then we are going to give a margin of 1 ram on auto okay so this is perfectly fine and we had to put all this input type inside a form okay so now we have already put this inside the form so this is perfectly fine we have to put this inside the form and what we need to do we have to put this inside a form and then we have to make a tab and then we have to do that submit submit dot prevent is equal to get data okay and when we make uh we'll make a method which says inside our methods we are going to build a get data which is going to be asynchronous is async because we will wait for the api response async get data and for that what we can do okay uh console console dot log this dot query okay but we haven't made the query and for this query is going to be null perfectly fine we are going in the right direction and in this we need to define we need to remodel this v model you do the query at the component so i hope you all are getting this because you would be pretty much efficient so let's we make thing and let me type hello okay we have error at line number seven okay let me see index.js line number seven okay so so this is methods okay yeah so we are doing perfectly fine async so let me refresh this page so let me i have error let me check okay the error was that that i had basically missed a curly brace tag here so i had missed that i'll show you i highlight where i had missed i had made a miss because this was the early track for the json object for the return statement and this was the curly braces for the data now let me save and refresh so it's perfectly fine and i'll type live so here you see i have the response live at the back end so like not uh so as the component has the data so now what i want to do i'll make empty json array using data okay and this is a mt json array so now what i'll do i'll do a weight axios dot get okay so when i get this okay i'll get this i'll make two things one is the dot then part okay and another is the dot catch part so inside the catch part i'll simply do error error and i'll do and i'll do console console dot log error okay and in this then part i'll do response i'll get the response okay response and i'll do this dot data is equal to response dot data and one thing i need to mention here when i move to this and i'll get so the slips is the json array we are getting so we'll do response dot data dot slips okay and then what i can do i do console.log this dot data okay so let me refresh and oh i forgot to hit the api so for how to hit the api you can do copy this and you can or you can copy this this you can copy this and you can put it here but i'll show you one thing how you put it so for this you need to okay so here you can see the query has to be this so what i need to do i need to define a curly symbol here and should be this dot query and very simple okay so let me refresh and let me put life so here you can see i have a json array okay so it says data so this is how we get the data inside the json array okay so what i can do in a inside my html page what i can do i can simply print this data okay uh let's try one more thing once again how we get the data but it's going to be very unformatted let's refresh rdt here you can see the empty json array i hope it's perfectly fine okay i'll do one thing okay uh then let me put live and here you can see we get a very unformatted data this data is very much same we are getting here okay but this data unformatted data is of or no use if we don't format it so what we can do we i'll use list group of bootstrap so i'll copy this url class is good list group and inside my html i'll put it here and i'll have only list item and we i'll do a v4 loop okay and for that i'm going to do item in i'll do item comma index index in data so data what we are getting and i'll do i'll print two things index starts from zero so i'll do index plus one okay i'll put a dot then item okay and i'll do item and what i did to do one thing i should make sure because we had do item dot id or slips so what do you want so we want advice so we'll do item dot advice okay so this is perfectly fine let me close the page and refresh this live perfectly fine we don't need we don't need this uh unformatted data so what we can do this is perfectly fine let's refresh and do once again let's refresh and we say live we get the data in a formatted way so this is how we do it and this is how we get the dynamic data and this is how we render in the view chair so thank you everyone for watching this tutorial i hope uh this has this is very clear uh then you can move this console.log statement it's not needed and this is how we did render the data on the front end so thank you everyone for watching this tutorial uh so so thank you everyone