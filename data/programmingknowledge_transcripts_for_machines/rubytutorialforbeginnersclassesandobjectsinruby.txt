so today we are going to start with some objectoriented programming in ruby so let's create a most basic example let's create a class in ruby class person and we can like a notation use with a capital p and let's close this class by using an end tag now we can create a constructor in this class with def initialize so basically we initialize with id name and age so then we do we do close this constructor uh it's a good habit you keep closing them because then it would be like difficult for you to like know where which method or attribute or constructor is left or of being close and it will throw an error so now we can do add grade id so basically we are declaring variables uh and assigning them values and id great like these are like some uh now this works uh as a property of the class what do we call them attributes and another methods and functions so basically now we start setting the properties and attributes at the right name is equal to name and at the rate age is equal to age now you can make a intro method define intro and which would particularly give you the intro put s and you can start putting my name is put this in a hash symbol at the rate name okay and my age is put this in a like a simple hash at the edge okay so this is like your intro works so it looks perfectly fine now let's create a person so let's create a person and we can try our code p1 is equal to person dot new we give it an as id a weak capacity parameters id 1 joe and 25 is the age and p2 is equal to person dot new let's create an id of 2 james and let's give an age of 30 okay yeah now we can do p1 dot intro let's call this p1 intro now let's run this ruby classes.rv so my name is joe and my age is 25 perfectly fine now we can do p2.intro and this would run the another one so my name is james and my age is 30. so everything looks perfectly fine now a very small concept here is we want to see how many persons were created okay like to keep a track of how many persons were created you can create a class variable so basically these belong to the class okay so these belong to the class and we can initialize persons is equal to zero this doesn't belong to the objectives belong to the class so these are like class variables uh in like that belong to the class now we can make a something a method which says deaf self dot get person count because and we can do get self dot to get person count and so this is like a like a method which is as excels access to the self class and it will basically return address persons okay now what you can do you can do so now we are using the class so put as person dot get person count so you can comment this comment this yeah now good to go let's clear this and run so did you mean initialized class would ever in person so look see there might be some error yeah so yeah this nationalized as zero so this like now it will work let's run this so now initial initially zero persons have been counted because i ran the program again now let's not do one thing let's create a one person now let's run this and it still gives okay yeah now because uh i'll tell you why it was throwing 0 because when you initialize a person you need to increment this by one as well i hope you get it so what you can do now it looks perfectly good so i'll give before you initialize the class variable with zero in increment by one whenever the constructor is called now you create a method to get its value okay now when a one person has been created so it should give me one when two person has been created it should return me two okay now let's create another person p3 is equal to person dot new like third three third like third person we are creating so we can give them any name let's give them a jack and let's give an age of 40 40 now let's run this now it you will see now it gives three so this is how we do it now let's make a small inheritance part so let's do class human and let's end this and define a percentage wall and let's end this and say put test put s human humans evolve okay now let's do inheritance so this is how we do we initialize person and inherit with human class now let's call let's comment this out yeah so let's comment this we don't need like this part so let's comment this and now we let us do put test p1 dot evolve okay so p1 dot evolve so this is evolv yeah now let's run this so humans evolved because okay now let's do though basically now i'm trying to show you runtime inheritance what if it had its own method evolve def evolved and like we end this and we do put test uh like person evolved persons involved or you can say people reward so basically this is like a just a dummy thing to show you and now you see people evolve because it had its own evolved method then it called it if it doesn't then call the human but make sure you make inheritance okay so this is how we do it and let's move to some like uh a very simple one uh so so i'll just make comment i'll comment everything yeah now let's take an another class class box now you can initialize with this and now basically uh you can create initialize height comma w and say at the red height is equal to h and at the rate width is equal to w and this is end okay now you can now make some getters and setters so basically get height okay and define get height define get width okay now you can close this now define set height okay so basically now you you pass a parameter and define set width now you pass a parameter parameter uh now you pass a parameter and now here you see so now you can do add direct width is equal to w at the right height is equal to h now return at the rate height so basically these are the getters and these are the setter and return at the rate width now you can also make access specifiers to this by using this private okay let's do private get height get width set height set width okay so basically you can make them private and make a public one is like get area so how you would work with get area define get area and basically you would end this and now you can simply return return at the red height star at the rate width okay so basically let's create a b1 b1 is go to box dot new 0 0 and put as b1 dot get area so ruby class dot rb okay expecting end so like there isn't some issue let me check with this everyone uh so i got it was like a small error like uh you need to define the colon like put the colon before the methods so initially what i did i had this put a private colon here here and i did didn't put these so this was like wrong notation so that is why it drew an error now it's like good to go uh so what i'll do i'll put a undo this yeah so basically you can make them private so but uh now i'll comment this so now what you see that i created a box with zero values and i set a height and width then i did like get height and get to it and put get area so let's run this so it says yeah the height is 20 width is 10 which we had set at them using the setter and the get area is 200 so this is how you can implement things and then like so this is like some getter and setter which were like encapsulation so so thank you for watching this tutorial you can explore some like creating some your own classes and moving out some inheritance so this shouldn't really help you so thank you for watching tutorials so i'll catch you in the next video thank you bye