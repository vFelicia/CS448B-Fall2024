hello everyone welcome to new tutorial series on ujs so vue.js is a progressive javascript framework so why we just get started github link you can move to the github repository of the ujs and before we start this tutorial uh what view js provides us like vue.js is used at frontend or you can say is also say at clientside development so you just use that frontend or clientside development and it is approachable since you already know html and css for vanilla javascript you can read the guide and start building apps within things in no time once it does it like you can use a view js between a library or a fully featured framework so it's up to your choice that what how do you want to use the new js uh it is you you can use it as a library or a fully featured web framework uh it is performant it has a 20 kb minimum size uh blazing fast virtual dom that is a document object model and minimal operation of minimum of optimization efforts so like it's easy to use quick learning uh view js is incompatible in competition with angular and react and the quality view gs has it that it has fast learning curve that you can very fastly learn view just start building apps in no time and it is comparatively easy to learn uh than other frameworks so that was that is the quality view js has so it's up to you you can use any frontend framework like angular react view but view js has like it's up to you but uh view js has a better learning curve that you can learn view in a very fast way and start building apps and this would give you the architecture about how client side development of content development is done so next before we start this tutorial so you can refer to this github link this is the repository where you can refer all the codes for this tutorial for this series the title would be getting started with vujs and description will will be like we will learn how to install view js and render a simple view comp component at front end so you can create a folder in your vs code and start with the html file that is index1.html so before that what you can do uh you can start html page like uh you can simply start with html tag an html tag will have a header and this header is like learn view perfectly fine learn view inside this you can put this inside title okay so i'll cut this paste it yes and you can right click here and what you can do you can click on format document for the better orientation and then you can have a body type perfectly fine and inside like you can type paragraph is equal to hello world i like hello vue.js a simple paragraph and you can come to this page and refresh this page so you will see hello vue.js uh so this is just foreign this is very static so we can render this the same component via view js and for that we would render a view component on our front end so what we can do you can start on get start page and you will find the view function so just make sure this you are browsing for documentation to point x uh because we will start learning with view js to point x and then we will uh like when we advance a level then we can see how the implementation three three point x is done but basically for your learning you can refer the view change to point x so what you can do you can uh here on the left hand side you can see the installation part and you can click on installation so the simplest way to install vue.js is to just copy the cdn so cdn is works as like a javascript uh script source but like there are two types of seed in here the one is like for prototyping or learning purposes you can use the latest version and for the production we recommend this uh like just what's the difference between the prototyping and learning purpose is like this will show the uh errors at your side like if you are using uh the what we like if you're using for the development so here you can see with full warnings and debug mode okay so like development version has with full warnings and debug mode the debug mode and in the production version we have warning script plus it is performed wise optimal but uh just in different mode when you are in like development mode or development version you can use one with the full warnings and debug mode it will help your code it will help you to debug your code very faster so you can copy this this one you can copy this and put this inside your body tag but make sure you put this at the end of the body okay now for like i'll show you uh just for the like view appearance you said zoom yes so here you can see you i've put this at the end of my body now i'll zoom this for the better view of see okay now you can see uh yeah now you can see uh i have put this at the end of my body okay and now i'll put a another script tag script and i'll type uh i'll start with this console dot log script just for my learning purpose script started and when i move to my browser i'll refresh this play page and i'll press ctrl shift i either you can do inspect or ctrl shift i when i see here it says script started and you can see download the view depth tools extension of that experience and like it's it is now the view js is opening in development mode so that's particularly particularly fine so just for the confirmation you can see that the view js has been installed and now it's running now how a particular now before we get uh before we get to this so first i create a div inside my body and what i'll give div id is able to my app and what i'll do i close this day so i have a div with id my app now i'll i'll for this now id is very important with respect to vue.js i'll render a view component referring to this id so just for the demonstration my view js component will point towards the id okay so it will point towards the id in the html page okay so here you can see my view js component will will point towards the id in the html page and will render the component for the same okay so this is you can make a note of this thing that ugs component will point towards the id in the html page and will render a component for that only okay now so that's perfectly fine so let's move to the code now what you can do you'll create a component view js component so how will how we will we will do that so i'll show you how now what you can do uh just for this tutorial i'm creating a script inside the html page so this would give you a better view okay now what you can do constant my view component constant my view component okay so this is work as a uh like it will have a new view it will have a view constructor and it will take a json object so inside a json object i will have three things like one is going to the element which would refer to the id okay this would refer to the id then i would have a data data so data would be like uh have a json object so it will have all the data and then third thing i would have a method so this is how a particular view component looks like so my view component is a new view okay it calls a view constructor and it will take a json object and it will have an element would you refer to the id it will have a data and it will have methods okay so what you can do uh my element would refer to the id so the id is my app so i would copy this i have simply pasted here my app now i will have a title title is equal to learn view learn view js okay you done ugs and you can also have a like paragraph graph okay inside vs code okay or you can say learn ugs using vs code okay now let the methods will remain empty before this time and inside my app what i can do when i have my view component refers to the id so this is my id my app now i can render this data inside of that id that i can render this view component inside that id so i will put title here and i'll use h1 tag title perfectly sorry so this is the title and for this i'll use paragraph and i'll use para graph okay graph is like this so now this should work perfectly fine i'll refresh this page okay cannot find the element my app okay i did a mistake since this was an id i had used to i used to like what i told you that this production version sorry this uh really sorry for this this development version is left with full warnings and demo mode so since this is in development mode so it will provide all the warnings and in the all the warnings and it will be in double debug mode so you can click on this line so this would like you can refer to this so where it has shown error and cannot find the element my app so let's put a sense it was an id you had to put a hash symbol okay let's refresh this page so here you can see learning view js using vs code so this is perfectly fine i've got my result and the script had started and to make sure what you can do you can also copy this and say script like script ended okay so let's refresh this bit it says script started as script ended and you can refer to this client it will show you console.block script ended and this is like how our view component looked so you can also click on my view component and when i type this here you can see you get whole lot of things and inside here you can see that element is given my app so here it refers to this id and this is how you can have a look at this and myviewcomponent dot dollar sign you can put data and here you can see that i have a data and it says a paragraph and title so you can refer to this my view component dot data dot title and see you guys learn new js now i'll show you one thing you can put put the upper key arrow key and i'll put a new title new title and you will see that as soon as i press enter this title would change without refreshing the page so it will only prepare the day see i'll put it yes yes as soon as i click my view component.data.title is a new title and changes to new title once again in the same way you can change the paragraph also so you can refer to this github link that is github.com pro software development learn view you will get all the codes related to this series video series on this repository the title this video is working with the view component and we will learn how to bind id data and methods inside a view component so let's get started with this tutorial before i start i'll give you a quick reminder how view js works so basically vue.js has a has a component component uh which is a view component okay i'll say a view js has a view component which refers to the id of the html html page to render it uh why we refer to id because its id is a unique thing so we don't have any conflict that which we don't have any ambiguity to avoid ambiguity we have an id that is unique for the html element so it helps the view component to render on the html part using an id so that's pretty simple now what you can do you will create a new html page that index.html in the previous tutorial i had created index1.html and you can add the vue.js script inside your it inside your body tag but make sure that it should be at the end of the body tag not before it so this makes like it will perfectly render everything so the title is learn youtube and we will give a create a view component constant view component to okay i'll say constant view component 2 is equal to new view it will call the view constructor and the view constructor has a json object perfectly fine so now you can see it has a json object now and what i'll do i'll press enter it has three things that element which will have the id and then it will have a data which will be in in itself a json object and then it will have methods uh methods will be also a json object so if i remember all those three all these three things to put you are perfectly fine with the uh your view component so inside this i'll put a counter is equal to zero and inside this i'll call the method uh i'll call it increment counter okay and what i'll do uh i'll call them at a method increment counter and assuming just for example in the case that forget this as a view component uh treat it as a treat this as a class so if this is a class if this is a class so what you can that if this is a class and if you want to access the data of this class you can you access this wire this pointer so this dot counter plus plus so every time i click on it i'll increase the counter so to show this on the front end what i'll do i'll make a div div id is equal to my app too and then i'll close this day perfectly fine and what i'll do i'll i'll create a counter variable using the handles and i'll give this as h1 tag so i hope this is fine now what i'll do uh i'll what i'll do now what i'll do uh i have to refer this element to this id that is hash my app 2 now i'll go to the page and i'll refresh this it says 0 as a counter perfectly fine but uh what does does something happen on the click nothing happens because for this i have to define a click function which can be defined as an add digit click is equal to increment counter so when i click on this it will increment the count i'll refresh this page and when i click this here you can see the count gets increased one by one by one so this is how you increment the counter now by this function that is at the click and the red click function you can achieve the same using v on click functionality as well okay now i'll show you a small example uh let me add another thing that is text is equal to hello world that is hello world and what you can do also you can add a flag is equal to false but you can click on flag is equal to true so what you can do you can call a method hide hide method and you what you can do a hide method can will change this flag okay this if the if condition here it will change that if this dot flag visible is equal to true then this dot flag is equal to false now this would change our flag if this dot flag is equal is equal to true then this dot flag is equal to false and how do you want to click that you can change this to okay first i'll show you one thing i'll change this to text okay perfectly fine now what i'll do i'll comment this out so the this code remains as well and okay actually there's no need to comment so let me remind this as it is so when i refresh this page uh okay this is the previous code working so as soon as i click the counter gets increased incremented so this is the previous code working when i refresh this page the new code gets our display so we get a text hello world but what i want to do i want to hide this on click so what i'll do i click hide method if this dot flag is equal to equal to true then this dot flag is equal to false and what i'll do here that at the on and the right click function i will call hide method perfectly fine but i'll put another condition that v if is equal to flat if this is true can i show this heading else if this is true then i show okay if it's false then i don't show and when this will turn into a chain turn to false when i click the hide method okay let me refresh this page i click here you go it's it's been hidden and how you can get back to this you can right click here and click on inspect so this would open the chrome inspector tools and inside this what you can do you can refer to this view component what do you look view okay you can refer this view component to dollar data dot flat which will return your the existing value okay so what you can do in just a second sorry i'll click on console new component to dollar data dollar flag which is false and i'll change this to true and i'll get the value back when i change this to false it gets hidden again so the true false stock value was done by this high method functionality so let's get started with today's tutorial so you can move to your vs code and like in the previous two tutorials we created this uh like index1.html and index2.html what you can do you can copy this content and paste it here and what we will do we would change this to learn view three and we will remove this body tag okay what i'll do i'll click on view appearance and reset zone so this would reset my zoom and so that i can show you what's the best possible view so we have a template index three index three dot html so we will continue with the third tutorial today so that is the index three dot html and learn view three like this is the tutorial number three so you can refer to your browser and refresh the page and you will get the page as desired result and you can right click here inspect element and you will see the development version of the vue.js is running in the console so let's get started with this so what you can do you can create a div with an id dave id okay i'll zoom this yes dave id is equal to oh you can define a div for the ids such as my app three and you can now close the div and now you can create a view component referring to this id it's a constant view component so what i'll give a short notation bc3 so this is view component three is all the new view okay you can give this on any name so i'll give a decent name view component okay so this is view component so yeah perfectly fine now i have three things element which refers to hash my app3 then i have a data refers to uh you can have a data plus the methods plus the methods okay so let's uh we can keep a simple data that is we should keep a simple data that is uh text is equal to hello world hello and we will render this data inside this date so when we refresh this page we would see the data here that is hello perfectly fine now what we are going to do what we are going to do we are learning the form binding so what we can insist on that we can create a form element the most simple being is input type is equal to text so let's do thing this this we will create an input input type is equal to text okay and what i'm going to do i'm going to remove this for the confusion to avoid any confusion and let this placeholder says uh like place orders enter enter something this is this and i can close this input perfectly fine okay when i refresh this page i'll see i have a input which says enter something and i have my console running at the right hand side now what you can do you can create something a variable known as message okay or my message which is empty okay and you can we model this message v model is equal to my message so when you give model this my message so it now binds this data to this input type is equal to text so what you can do uh what you can do you can do one thing you can move to the next line and what you can say yeah and what you can do you can click on my message so i hope what you i'm getting my point that uh in this input type text we i have binded this data to be modular to my message and i'm usually performing that my message is equal to this okay so what you can do also just for the sake i'll comment this out first i'll comment this out so that i give you a better idea of this okay now i'll change this my message to hello hello view js hello view gs and it says yeah okay i'm having some issue on this let me yes yeah now it's perfect comment yeah so now it was hello vue.js perfectly fine but what if i want to keep this dynamic how do i keep this dynamic let this be an empty string okay just to just i'll change this to hello js so this would refresh to hello gs perfectly fine now i'll keep this as dynamic i'll come uncomment out this and this also now i'll put this under the heading tag to give good view h1 now as soon as that tends uh and also i'll do one thing as soon as i type something you will see this in the heading hello world it looks pretty good on the typing now i'll do type some text here java js programming and javascript programming and yeah here you can see that as soon as i type something and as soon as i type backspace you will remove something so this is one thing now another you can do is for check box so what you need to do you need to define input type here to check box placeholder doesn't exist in checkbox and in this now the data types becomes a boolean value so you type my flag is equal to false and you will remodel this with my flag and i'll say the value of my flag this is by default false now becomes true false true false true false true so this is just how you can check box uh you can be model with the checkbox so this is like basic for the uh this is like the basic part of the binding so we will carry on with some more binding in the next tutorial so thank you everyone for watching this tutorial you can try this out on one as well that is text area so i'll quickly show you text area so for that you can do v model is equal to text area message so text area message needs to be defined here inside the heading plus i need to define this here also yeah so here you can see hello java programming when i move to new line hello world so it gives the space so you can configure these things in depth also with working with the text area so this is how it works so this is like the what you can do so this is like pretty good for us like you can define all so hello world js programming so you can edit this thing plus you can increase the size of the text box like this so working with multiple check boxes in view this is the title of a video and the description is like we will how we will learn how to bind form having multiple check boxes component using view so today we will complete this in this tutorial and we will see how we can achieve this so what you can do uh you can what you can do so like we had made a few html files in the previous tutorials so we would we are going to continue with that and let's move with the tutorial so what you can do you can create an html uh heading and inside this you can give a head attack so from today we will try to we'll try to implement from scratch using in this in this era so this would help you help us to get back with the things so this is the title you can give and you can give this as learn view 4 so this could be anything you can i'll give this a learn view for a view tutorial tutorial uh like all this blonde view tutorial tutorial number four so this is perfect so now inside the heading after the head we can have the body tag so body tag is this sorry so here comes the body tag and inside the body tag we'll put a script tag which would be this so yeah now we can run this page uh in our browser so let's uh move ahead and run this page in the browser so what we can do we can right click here and uh degree in file explorer so this would open the file in the explorer and then we can double click on this and we can open the uh our html file using the browser so here you can see that we can see the view tools uh the view you are running the view in development mode so this is perfectly fine what you can do now so we have a view just running so let's create a form and then we will have multiple check boxes in that form so let's do this so what you can i can do i can hide this yeah so perfectly fine so let's create a form first we'll create it there id is equal to fruits so this would have all the fruits in that so the option of the fruits so div id is equal to fruits and let's create a form so form uh so uh even what you can do we can for the timing you can ignore this form so okay if you want to uh like you can give it a form or like so let's uh so first what we can do let's let's do this without a form so first we'll give an input type is equal to check box so input type is able to check box id you can give this id is equal to apple and value value is equal to value is equal to you will get this apple okay and what you can do uh yeah perfectly fine and then you can give this a label so label is with respect to the id so label for apple and you can give this a label as apple so perfectly fine all right let's do let us give it a smaller so when you refresh this page so here you can see that we have got the apple check box that is here so perfectly fine so let's create a another check box for the other another foods that is input type is able to check box id is equal to mango and value will give a value value is equal to mango so perfectly fine and we will give a label label for mango and let's give this a value with a small mango and let's add another fruit uh we can add another fruit that is pineapple so that would be easy so let's add this yeah so input type again check box id is equal to pineapple and value is equal to find apple so though we can add a label for that and let's continue with the pineapple so perfectly fine so let's refresh this page here you can see we have three check boxes that is apple mango and pineapple so what we need to do so we need to render a view component with respect to this so let's do one thing so let's add a script tag so this is the script we have now what we can do constant view component component is what new view so we call the view constructor inside this view constructor we have a json object and that json object will have three elements okay so uh that is the element so we will define the id okay and that will have a data a data will have a json object perfectly fine and then we will have methods methods so so let's uh okay so let's give this id here we will do hash roots and then we refresh this page let us see okay so we can also do one thing we can do console dot log this view component so let's yeah now here you can see that i have console.log and it will have a dollar data uh yeah here you can see dollar data here this so this is perfectly fine so so this is perfectly fine what we can do we can have a data is equal to checked roots and this is going to be an empty array okay now we can again refresh this page and inside the dollar data we can see yeah this is this so yeah so we have an option check through statism of type array and the length here it is zero so what we can do we can we model this so what we need to do we need to add a line we because form winding is done using the v model command we can add v model is equal to checked roots so we can add this in the other three as well okay now what we can do we can add a heading h1 and what we can do and add a break statement here and i'll render this and i'll put the value here checked fruits so let's refresh this page yeah so as i click on apple i get apple mango pineapple i remove pineapple i remove mango and remove apple so here you can bind the form uh sorry here you can like using check boxes you can achieve this and apple mango pineapple so i removed mango perfectly fine apple removed yeah pineapple removed pineapple added mango added apple so you can achieve this and what if i could give this replace this with the form so so let's try this out yeah so it works perfectly fine with the form as well okay so this is very much helpful in the form as well apple discrete mango pineapple yeah in this tutorial we are going to learn with working with radio button and select in view so we will learn how to bind a form having radio button and select component using view so we will let's start with the tutorial so you can create click on the button new file in your directory and you can name this as index 5 dot html so since this is a since we have like created a this is our fifth tutorial so we have we have worked on this so yeah so sorry for the interruption yeah so let's carry on with the tutorial so what we can do we can uh from the previous template we can control copy this select all using ctrl a and we can paste it here and what we'll do we'll do to change this to learn view tutorial number five and when we and we will remove all this script tag okay so we remove this script tag and we also remove the this body tag so yeah so let me close this file explorer yeah so we have a like a simple rock and raw html page with uh this view script added so what we can do so we can click on this open and reveal in file explorer and you can double click on this and close this so this will open the page in your yeah browser so like perfectly fine so what you can do you can click on right click and inspect to check whether view js is running or not on the console yeah it's perfectly running so what we need to do today we will learn about the radio buttons so what you can do yeah so you can add a radio button so let's create a div we'll create a form so form id is equal to so let this be my form and you can also do this without a form just for it will also work div id is equal to my form we can close this div yeah so what you can do what you can do uh you can create a uh like what you can do you can do input type is equal to radio and id easier to uh you can give it any id depending on your value so let's took this as male and because we are corresponding to the gender and the value is equal to male okay now what you can do we can create for mail and you can perfectly fine so this is mail and you in the same way uh you can do input type is equal to female oh sorry input type is go to radio and id would be female and what you can do id is about female and value is equal to female and you can do label for and this label could depend on the id so female would be the id and you can give the value email so this looks perfectly fine so when i move to the page i would refresh this and here you can see i have two options but you can right now you have you can see the this option isn't working with like the radio button out of the radio button it is like multiple choice question so you can select only one out of the choices now the choices could be any number of choices but you can choose only one so this isn't working right now the reason being that we have not used like what you can do one thing i'll tell you uh one thing you can do you can put a name tag and name is go to gender and you can put this name is called gender here also so okay just a minute i'll show you one thing okay let it just be this form so i'll close the editor yeah so right now i'll refresh this page so i can click uh all the choices that's and that isn't that is not that is not the use case of a radio button in the radio button you can choose select only one choice of the multiple only you can select only one choice of the multiple choices given to you so it is like a mcq multiple if you have an mcp question that is multiple choices you can choose and only one option so but this time we are you you're choosing to so this is invalid to remove that what you can do you can add a name you could just enter and name zero gender and you can refresh this page and now you can select only one out of the two but we are going to implement the same functionality using vue.js what we can do first we will create a view component constant view okay but before that we are going to create a script tag okay yeah perfectly fine so we'll look at the script tag yes so here is our script type and we'll do constant view component is equal to new so like spelling is wrong component so constant view component is go to new view and it will have a json object we all know it will have an element e02 and we will give the id as my form and the data is going to be there and in the same way the method it's going to be there so let's refresh this page so the page works perfectly fine and we can do console block also console.log new component so dash refresh space so perfectly fine now what i'm going to do we i'll make a data uh my choice okay so what you can do we can pick a data my choice and uh you can create this my choice uh okay you can choose this to be null okay so my choice in the beginning is null and what you can do instead of this gender or you can choose this to be gender let this be gender and we can we model this we model equal to gender so this is perfectly fine and now we can refresh this page and what you can do you can print this value or render this value on the component so let's refresh this when i click on female it's female when i click on male it is male female or male and female male okay so first we did that did using the name but now we did using the v model so that's perfectly fine so so that is a component having select and multiple select component using view so we will render this component using ugs on our html file so let's get started with the tutorial so very easy we can create an index six dot html5 and in this index six dot html we can copy the content of index five dot html and let's change this learn view tutorial number six and then we can remove this script tag perfectly fine and if we can remove this body and we can refresh this page and you will see that we are running a view in development mode so perfectly fine our development mode gives you uh like it gives you all the warnings and the like uh notifications uh in the sense that uh like this would give you all the warnings and notifications if you are doing something wrong in development so this profits perfectly fine for using in in development one so let's continue that tutorial so let's create a view component okay before creating a view company let's create a form so you can insert a form you can use a div but it works perfectly i'll show you in the end dev id is equal to games and you can select a game here and what you can do you can do select and inside the select you will have an option so this is football football uh you can have an option it's good to click it and we will keep it simple cricket and you can do this as or you can choose any game that is tennis okay i'm running out of battery sorry for the disturbance just a second yeah so what you can do you can create 10 s and what you can do we can give a value so we can give the value here as well and here so what you can do you have to give the value and you will give this as football cricket and tennis okay so now what you can do you can add the value and you can render the form on the front let's refresh this page the football click it and tennis perfectly fine so now what we can do we model okay we will v model is equal to my choice so let's perfectly find wheel constant i will add a script yes so script is already added constant view component so is equal to new view a view constructor with the json object that has element is equal to hash games uh already have will have a methods and a data so the method says the data is this perfectly fine so we'll give this data is equal to my choice is equal to none and we can put this output here my choice so this is perfectly fine we can refresh the page and when you click on football we have a choices cricket and tennis okay perfectly fine now we can work with multiple select so for multiple select what can you can do what you can do you can add a multiple component here in the select multiple is equal to so this would have the multiple component but now let me refresh this page here you can see here you can see okay okay this now it says and expects an array value for its binding but got null okay so this should be an array because now we are expecting a multiple so see how smartly this ugs works football click it tennis uh so to choose multiple i'll show you what you can do when you click on a single option so this would give you football cricket tennis but choose multiple two okay type this to select multiple hold ctrl key key on your keyboard so now this forms make sense to select multiple hold ctrl key on your keyboard so when i ctrl key press the ctrl key on your keyboard that is football cricket and tennis here you can see i have the arrow value so this is how you render select and multiple select on using view js so this is a very good option to explore so very good learning part of the process so this is works perfectly fine okay one more thing we can learn also we can use okay so what you can do okay we can add a new uh we can also learn one more thing that is let's make option clear data clear data okay so now when we call this function clear data okay i'll show you one thing but if we have an array a let a is equal to array of values one two three okay uh let me type a i'll get this and a dot uh you will have a dot beer okay sorry let me uh just a second okay when you type uh okay okay what you can do okay just a second what you can do add a dot length root three and array is equal to this so this would clear the array so we i'm trying to create an event so this dot my choice this dot my choice sorry this dot my choice is equal to null okay so i'm trying to invoke a clear data event on this dot microsoft null but for that i'll create a button button and what i'll do clear data and i'm going to call this function okay so like in the previous like i must have shown you how you can click the using this at the right click is equal to you can call the method so we're going to copy this and we are going to call at the rate click is equal to clear data so when this clear data is called so first we will do console dot log to make sure that this event is called clear data perfectly fine so let's refresh this page so when i click clear data score operating line now i'd select football cricket tennis and click on clear data is empty tennis cricket football clear data add is empty so this is how we can also call the functionality a very good example to learn in this tutorial we are starting with a todo app using vue.js and we will learn how to create an app to do app using the create read and delete functionality and we will also add a mark as done functionality in this app so let's get started with this tutorial so here we can see that we are going to start with the todo app using view js so we have all uh learn the basic components of you now we will apply them to make an application so you can move to this github link that is github.com style and view and this would help you to get a more of the code and working uh files which are maintained in in this video series so let's get started tutorial uh this is the official website of you from here you can get the uh like documentation plus you can also get the like installation part how you can install it on your on your machine so you can click on this button get started and you will get a production version plus a development version uh developing versions will always give you console warnings which are helpful in development phase uh this is bootstrap 5 page where you can get all the components of bootstrap 5 it has like a beta version and which is an upgradation to the bootstrap 4 and here you can click on the get started template like getting started and what you can do click on here start a template and you can copy this and uh paste it on your machine uh sorry on your html page so here you can see and when we refresh the page so here you can see you get the like you get the thing started so let's uh what we can do so let's uh let's start with our application so what we can do we can first change the title of this we can try view js what we can type like view view js to do app so perfectly fine and we can like give the heading h1 is equal to hello world instead of this we can give this the same heading view js2 to app and we can like we can paste this and we can put style okay we'll put the styling later on and so i'll okay i'll i'll actually close explorer yeah now this looks perfectly fine so these are the optional with how you want to use the bootstrap but this one is perfectly fine you can move this option to remove this option too this will create a bit of confusion and this is option one we are using i'll clean the code so it's for the betterment and this is like required meta text and bootstrap css so what we can do uh like we can refresh this page and you can see vue.js to do app and what we can do we can use a now we can create first create a div and inside the div we can first create a form so let's create a form first and then we will proceed with our or like we will proceed with the logic part so the first we can create a div id is equal to app so this is our this is going to be our main div and inside this div what we can do we can create a form okay and we can create a form okay and inside this form you will try to create the like we will try to build the like text field and then we will click you'll create a submit button so okay let me change the like okay i'll change the color scheme i hope this is fine yeah so this is perfectly fine so okay uh we i can uh also like i change the color scheme for the better visualization so now inside this form what we can add we can add a like input type is equal to a text so let's add this and before that i'll give div class is equal to uh i'll add a input input type and i'll give this as as a text and i'll close this input type perfectly fine now uh i'll refresh this page i'll go back to the page yeah so here you can see i have an input type is equal to text so we'll do all the styling later so what we can do uh plus i'll give the name as is equal to name is equal to to do to do text and i'll give this as the id also and this is going to be the same to do text and for this i'll give a label okay i'll give this as a label label for to do text and what you can add add your todo error okay so so this is the label i've given and i hope this is fine then i can refresh this page and you can i have added to do here to mix more responsive what you can do you can move to the form like form controls and you can go to this page and you can add this class is equal to form control here class is equal to form control and you can add this classes to form label here so you can add this i hope this is fine yeah so you can refresh this page and here you can see now you can press ctrl shift i or inspect okay and what i'll do i'll move this to the right yes so here i have the like responsive design and i'll write move talk to the right yeah that's perfectly fine so it's more responsive we'll try to make it more responsive so this is perfectly fine and this is the console so this is we can create a form now the very first thing what we can do is create a script so let's create a script here script and source is equal to index dot js and yeah perfectly fine but before this script we need to add a view js and with that is going to be in the development version so let's yeah so let's i'll add this i'll copy this and i'll paste it here before this script so when i refresh this page uh you will see that uh like this is saying that you are running a view in development mode this is all we have wanted now what we can do uh we can create a new file uh like instance html we can create a new file in this folder and let's name this as to do app dot js so perfectly fine okay and what we can do i'll what i can do uh i'll try to maintain them inside a folder so and now i have uh like i've used the cut command and i'll make a new folder to do app perfectly fine now inside this to do app i'll paste them so now now you can see that i am inside a folder to do app and now they have two files due to app.html and to do app.js so uh so i am inside a folder so that should give you a better idea when you view the repository that the tool app would be inside the app.html and to do app.js so i can change this to i can change this to to app.js so this is perfectly fine sorry to do app george yes perfectly fine okay now what we can do uh so let me refresh this page okay file not found yeah i'm i know why why the file will not be found because i made a new folder now when i go to the directory so here you can see i have a todo app and inside the tool i have to do app.html so it works perfectly fine so one thing what we can do next is so we can add console dot dot inside this i can type script started so when i refresh this i right click here inspect element and i can refresh i can see script started and this is from to app.js so the title is adding add a task or a todo functionality in view to do app so we are creating a ugs to do app and now today we are going to add a functionality to add a task or a to do which is the like the backbone of our app so creating add a test task functionality so this is going to be a method and also submitting the data for the same through form okay so let's refresh this page so okay unexpected token let me say okay so just for a second you can i can i will remove this and i will refresh the page so here you can see the script started now our our first thing we need to do we need to render the component view component and for that what we'll do first we'll create the uh we'll create the a view constructor so constant app is equal to new view so i told you the the view uh view component has three things first is the like element so this is the json object inside the constructor and inside this it will have the element uh data this is the data and the next we are going to have is methods so methods is this yeah perfectly fine so we need to define all the three things uh one by one so this would help us to render the component okay let's see how we render them so this is the id is going to have and we need to define them and id is signified using the hash symbol so hash app perfectly fine so we'll put a comma yeah so data is an empty json object uh for the time being we'll remove yeah and method is an empty json object for the timing and we look yeah so let's refresh this page and we think yeah script started and what we can do just for our like so the we can now we know the since the script has started and the crypt script is working perfectly fine so we can for the timing we can keep this and when we are done so we can uh remove this okay so first very simple thing what we are going to render is the heading heading is to do app using view js okay so this is our this is the like heading and i'll copy this now okay okay okay what i'll do and now i'll render this so what we'll do uh i can remove this h1 okay now what i'll do i'll put h1 tag here and i i'll use the like the template i'll use the how we render the value using this double curly braces heading and now i'll put the double curly bits again now what i'm trying to say that this heading should be rendered in here and we would get the value and plus we will get to know that our app has now binded successfully with the component okay then we can just put the starting let me define style is equal to text align is able to center okay so now let's refresh this page yeah perfectly fine to do app using vgs and we have got the value okay now we will try to make this app a responsive yeah so yeah yeah so what we can do so dev id is a google app and we can get this app as a class is equal to call md6 so that we get it here in the center and we are going to define as a style is equal to margin zero auto yeah so this would align themselves to the center okay now now now you can see that it has a width of all md6 and everything is aligned to the center and we can do one thing we can add a padding here padding is equal to one rim yeah now i refresh this page i use the while view yeah now here you can see it's perfectly fine and now i have a like i have a padding so it's like perfectly fine so let me do one check on this yeah so yeah so so like this is perfectly fine okay now i'll do one thing okay yeah so this is fine so this is all we wanted so this one is perfectly fine and it looks good to get carrying with this okay now i'll close this yeah so you can add this label add your todo here and you can this is perfectly fine okay now what you can do you can also put this inside a style tag side due to text align is equal to center so this would also align themselves to center as well okay indeed align them to center okay label for text and i'm going to center and i'll put this as a margin 0 auto so margin 0 auto okay let me inspect this element yeah so what you can we can do is we can move the styling from here and if you want you can add a style is equal to text align is equal to center here so this would work perfectly fine yeah so now it's in the center we are good to go now we need to add a button so we need to add a button and for this we are going to simply copy this and we are going to paste it here okay i'll show how you you can type this so input type is equal to submit perfectly fine and class is equal to button button primary and i will close this let me refresh this page yeah so here i have a button and i can style this as a display block if you want or i can do i can do display block or i can do style is due to margin 0 auto so this would align the button to the center margin 0 auto okay and the value is add a todo okay add my tool so this is perfectly fine and we can give instead of zero let's make it as one oh sorry okay let's make this as one ram and this would give a margin top so perfectly fine we are good to go with the form as well so this is a very simple form and we are good carry on good with this and now what we can do okay now we can do one thing so uh like like we need to store them inside an array so heading is perfectly fine so we need to initialize id is equal to one so because our first tool starts with the id one so this is like we are initializing the values and now we are doing title this is good to nothing let this remain this i you can empty string because we don't want something new any title to be given already and done is going to be false because for when we added to do so we make sure that it's already it is marked as done as also we'll make it as true when we complete it and we store all this in an array named doodles so we'll store all this inside a json object so basically what i meant to say that we're going to make the json object of id title and done so this is a json object and this json object is going to be stored in this doodles array so perfectly fine okay so so let me put a comma here so i hope everything is perfect and when i refresh this page ctrl shift i console is perfectly fine so this is how we initialize the value so and we can add to create a method add to do so we'll look how to do complete this function so title is the video is completing our todo method and rendering them on end we will submit the data to the form and solve them inside the json array so let's get start to this tutorial so like this is a continuation to the previous tutorial and we will complete the active do method so let's get started with this okay i told we had created the method method add to do and this was a title so we need to bind this title with the to do text for your simplicity what we can do we can copy this and let this instead of to do title let this be as a todo text so i hope this this is a pretty much good idea so this would keep the things same now to bind them we need to use a functionality that is v model so v model is going to bind them and i have discussed earlier what is the model and i will give you the idea of the same right now also so like we need to bind them using v model that is v model is is equal to to do text okay and just for the simplicity what we can do we can type okay first i'll okay first i'll refresh the page so i'll show you that this has been binded so let me refresh the page okay yeah so let's get to this video the refresh page this is script started now what we can do we can bind this and for the simplicity i can do one thing i can add a paragraph and i can now you typed typing this this is dot and we can add a typing to do text so what i'm going to show is this to do text has been binded with a js file that is this thing due to text which is empty so type into text and this will be model so let's refresh this and i'll as soon as i type something you can see here live changes come here okay so i've got so this is how when i have i have binded this and typing to do text and uh i'll type to do text help me something like this and you can see that this has been binded now to submit the form we would create a submit action and before that what we can do is like i'll show you one thing this the method uh the like since this is uh what you can do you can do autocomplete is go to off and we need to define a add direct submit i did it submit dot prevent so this is like to prevent is to use to like uh prevent the default action so this added submit dot prevent is able to add to do okay i hope this is fine and i'll add add to do option here add to do okay now before i do something else first i'll i'll do console dot log and i'll type submit okay submit it okay and this is to ensure that this has been submitted so let's refresh this page i'm inside my console and it's taking a oh yeah so typing is working perfectly fine so this is this let me type submitted again deleted submitted twice i hope you can see this number two and this is this three four five six so it's being submitted so this is perfectly fine so this is i wanted to show you that the submit method has been called and now what we can do the first thing we need to do is we need to uh build a good logic so how we ensure the functionality and for the for the same what we can do uh so here you can see as we hit the submit button the counter keeps on keeps on going so we need to ensure the same in the act add to do method okay so uh so let's do one thing and let's so we can do method so let to do is equal to json object this dot id okay so this dot id and what i can do one thing i'll do one thing get id is equal to this dot id perfectly fine and title okay since we remove title so two root text was the name for that to root text is called this dot this dot to do text perfectly fine now done is equal to this dot done and we can add console okay so let's first add something okay learn view so this is my first to do so this object has been created object done is usually false id is good one due to text is good to learn view let's do one thing another ad learn react so this is object with the id one done false to do text learn react so let me do another learn angular so here you can see object id is one done is false and to do texas learn angular so one thing we observe now for that as soon as we add a to do the id id is not increased okay so we need to ensure that something uh like we need to ensure that this id makes a the id is uh like the id gets a new thing and then we can make sure that we are perfectly working fine with that okay so let's okay yeah so let's create a reset method so which will make ensure that we our method works perfectly fine so let's create a method reset okay and let's yeah so we need to add the comma tag so this would do this dot id plus plus this dot title okay this dot to do text is equal to null another string and this dot done is equal to false so because we need to just i'm just going to this like this is the mandatory part these two are optional but just for the simplicity and the like we don't keep a bug so i i mean to like after like i'll now explain this console. to do this now added to do this dot to do's dot push to do okay so i wanted to show you one thing now i'll call this dot reset okay so okay if this looks something confusing so i'll do i'll change this to increment id increment id okay and okay let this be reset okay this looks perfectly fine again now what i do let together is equal to ids with this dot id to do text is desktop to root text and download this dot done i have print this to do i add this to do in the array i store it in an array then i call the reset function and what does this reset function do let's increment the id and changes the todo text to default state and this dot done is known as fault so i'll show you one thing now i refresh the page now i'll add something add my todo and you see as soon as i added to do the this text box becomes empty which was not happening earlier the text box didn't become empty after adding a to do and i did increment so learn react this id2 text box will contain empty learn learn angular and i either to do text box becomes and text box becomes empty and the id becomes free so i'll do learn python id becomes four unknown python and learn learn js so this id becomes file and launch here so we will use the disk group and this group item to render the same so let's continue with the tutorial so we can move to our directory and this is our app and we can like uh i can open like you can reveal in file explorer you can click here here and you can copy this path and you can paste this path in your browser and you will have two files that is to do dot app.html and youtube.js so first we are going to carry on with the todo app.html so we had completed the part i'll show you first we can type in something learn view add my todo here you can see the object has been added a json object has been added and then i can add another to do learn react and at the same time as soon as we added to the text at the text box gets disappeared and then learn angular so i have added three to do's and you can you can access them and i have object that is i have like youtube.js and that is constant app so one thing i can show you also app this is an app object and here you can see that it will have this function add to do function reset and what i can show you that it also has a data so data is this id heading to do then to do text so inside inside this array this is an json array which has three json objects that is one is with this second and third so this was i was telling you that we all are adding this json object inside this array so we use this dot to lose dot push to to do to because we create a todo object here so you can also rename this as a todo object for your simplicity and then we push this uh like this works as a todo object this is a todo json object and when and so we push this to json object inside this twodoor's array so then we get a json array then i have called a reset method which removes the to do text and mark cells are done as a false which was already default as a false and then this dot id is incremented by one to make sure that every uh to do object has a different id so let's continue with our tutorial so i'll create a new method that is i'll show you one we can create a new method uh like one is mark as done functionality and remove to do so before we do that let us create uh first we like first i'll render the tools on the front end so what i can do simply i'll collapse this file explorer yeah and this also is perfectly fine so now like what i can do that i'm inside my app and when i move out to the form i get to do's so this will print the json array on the front end let me show you yeah so now the arrow is empty so let me do learn view yeah so this is the json object i've got then learn react yes second json object has been added and learn angular but this is not the correct way to show them on the front end so we will use a functionality that is a for loop that will traverse to each json object and then we will add them then we will render them sequentially so for that what we can do you will we will use the unordered list your class is going to list group list group and this is the default bootstrap class we are giving and then we will use a for loop but for that for loop what are we going to we are going to use a list so li so for that we are going to use li class is go to list group item and this is a particular item and for that what we do we can add a key okay and we have to use a for loop so we use v4 to do in todo's so this is our i mutation to do first singular into two rules was an array so for every to do in two do's we need to define uh we will render them plus we need to define a key so that a for loop has a unique id and for that we are given to do dot id because it is always unique and then what we can do we can print we can print to do dot to do text okay so when i refresh this page i get empty array then learn view so you here you can see that i have got a list group item then learn react yeah so this is now looks perfectly fine and learn angular so this all we get in in our list view so this looks perfectly fine so i'll remove all the render part and console.log statement when we uh when we are fully done with the development so that the it's it's like optimized so now what we can do we can add two things one is a checks box so we will add this inside this and before that what we can do we can style this a little bit style is good text align is equal to center and and font weight would be bold won't wait would be bold so when we refresh this and add something we get bold and in the center now we can to add two things one is a button so this button will add a button and this would be for the delete functionality uh this is for the delete functionality sorry for the spinning mistake delete functionality and we'll have input input type is able to check box or mark as done functionality so when i refresh this page what i see yeah so i'll add it to do something random text here so this is a delete button and input type due to checks check this is a check box to make it mark as done or delete so what i can do i can add a label for this input type is equal to check box or i can i can add a text here click on check box to mark as done or click on delete to remove i hope this is fine click on delete to remove so when i click this so yeah i get uh so click on check box to mark as done or click on delete to remove so this is a temporary text and you can align this to the center as well style is equal to we need to add this style style is equal to text align center yeah so perfectly fine so let me add something yeah so we have two buttons in checkbox to complete or delete so we can uh like we will continue this in the next tutorial so for that what we are going to do we are going to create a function that is delete to do and this would be like did to do we have to complete this function and i'll put a comma sign here so delete sorry for the mistake yeah so we will complete this delete to do function and input type is equal to check box and what we are planning to add that as soon as we make it mark has done the background changes it to the green so in this tutorial we are going to complete remove to do and mark has done functionality and we will complete the remove to do method and also delete also or bind a class which changes the color background to green on completion so this is the part of the marker stun functionality and this is the remove to do method which we had created earlier by the name delete to do so that this means the same thing we will complete that method and then we will make sure that we that our app works perfectly fine so let's carry on with the code first we can add input type is google checkbox which we have already added so we can add a class to here that is form check input so i'll add this class form check input and let me refresh the page and add a random to do and here you can see it's not count looks pretty decent as compared to the earlier one and for this what we can do class is equal to button button danger so this would mark the button as red and let me add it to do yeah so here you can see now both of them have been marked this is my red and this looks pretty decent so what we can do we can style them both of them style is equal to margin 0 auto and we would style the same as text align is equal to center and the display would be the block let me check with this this works perfectly fine or not so yeah this is now in center and now we would apply the same styling to the button as well and this would be text display block would be to center and now when i refresh the page and add a simple to do so here you can see the both of them are in the center and to avoid a spacing between them but between the two you can change either this to one ram or auto or other to the same let me add another to do yeah now we are done with the style perfectly fine now what i plan to do is first i would call the uh like i'll do one thing first i would bind the check box to this i'll show you to do app.js so this dot uh this is the down functionality and download functionality is either false or true so this represents our check box because we are making sure that the check box is binded with this done functionality which is true or false so now what we can do we can bind this to our check box and we can this would add the functionality okay so i'll show you one thing first what i'll do i'll print to do dot done here okay this is just for the debug portion because this would help you so this is false when i clicked on checkbook this should turn out to be true so what i can do i would add done functionality using the bind method what i can do first i'll add this a name name is equal to done and i'll add id id is same as done so this is option uh this is like i'm hiding name and id this is html part but now comes the view part i'll add v model v model v model is equal to dot done okay now i have binded successfully now i'll refresh the page added to do when i click on this it will turn out to be true this pause button will be true true perfectly fine even there you can see it refreshes itself so this is a true when i click pause to false true false true false okay now what i want to do i want to add a class which turns the background to the green okay so what i can do i can add a style component here and okay so i'll complete this so a style component has been added there so first we remove the complete the tool uh done uh the remove functionality that is using the delete button so so what we can do we should call at the right at the right click function click delete click functionality using android click functionality so we will add at the right click in the button so this should be in the middle something yeah so this is fine okay okay i'll add here in just a second sorry i'll cut this v model done since this is an important part it should be visible clearly yes so this is perfectly fine and i'll add the little click add that click is equal to so what was the name of our method that is was delete to do right so this was the name delete to do and we are passing i told you that we use a for loop for every list component that is to do into do's right so this was our v for to do introduce which key is your two dot id now we are passing a to do we are passing a to do here to delete so that it could pass to the delete functionality and it could delete it okay right so for that what we are going to do we are using going to use the splice method of js so remove to do so like delete to do and this is first we get the index constant index is equal to this dot to do's dot index of to do so first we get the particular index using this method and then what we do this dot to do's dot slice okay dot supplies index comma one uh this one represents how many delete strong number so that is one we need to only remove the one okay now we refresh the page let us start with the console i had to do delete perfectly fine add to loop i had to do i had to do now we delete all delete delete and delete so we delete everything one by one so this is i'll explain you again once again so this was the index so this was this dot to loose dot index off to do first we got the index and then we remove using this price method that at this particular index we want to pop that item out so this was the removal now we need to add a class that would change the background to the green and for that what we are going to use we are going to use v bind method so this is very simple so we wind method is like like we bind a class like if this is true okay so by we which we mean that if this is true then binder class we bind class is equal to okay so now we add a class done done class on the functionality to do dot done because i told you that if this is true then this class should be active okay then we will make a done class here done class okay and i'll add first font size uh okay one size is equal to 100 pixel just for the just for the sake i'm just trying out if this is working or not i do done class is this okay true is this right okay i'll get to know i'll click on inspect so when i click true okay so we can add background wait a second i'll do color is equal to green and refresh this page so here you can see when i click on true so the color is green so that functionality was not working but now it works perfectly fine color is equal to green and the background color should be also green background color should be green let me mark this background also as green and this should become uh this should become white i hope this is fine okay and yeah okay so added to do okay mark is done so here you can see the background changes out to be green and the text becomes white when i do false the default color is back so this is now we have completed our todo app you can add to those and delete them as well delete add mark is done green so this one is white marker then it also becomes green okay added to do this one is white so you can delete it delete this one and perfectly fine so app works perfectly fine so thank you for watching this tutorial uh we will learn a new concept in the next video thank you everyone