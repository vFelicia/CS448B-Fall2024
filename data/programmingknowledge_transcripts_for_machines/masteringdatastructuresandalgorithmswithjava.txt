are learning the data structures and algorithms in Java so in today's topic we are learning arrays in Java so let's get started so normally arrays is a collection of the similar types of element which has a contagious memory locations so what do you mean by contagious memory locations so it's nothing but all the elements are located next to each other in the same memory space that is the consecutive blocks of the memory as allocated to the user for the processes so there are many types of memory location memory storage types such as hip memories are also there so array uses the contagious memory location so next point is array uses array uses the zero based indexing means at the element that is that stores at the first in the array is is stored at the zeroth index and the next element will store at the one then second and this series will go I go on till n n is the number of number of elements that you declare that the array will store okay so unlike C C plus plus we can get the length of the array using the length member so in C plus plus we use the size of operator which which gives our returns us then length of the array means then how many number of the integers store in that array like that in similar way there is a length member in Java which Returns the same the length of the array which we are using so typically there are two types of arrays in Java so first one is user defined and second one is using building class so in this video typically we are going to see the user defined one and the builtin building class we can see in in the next upcoming videos wherein there is not too much work that we we are going to do we just uh import the class from the Lang like a Java package Lang package which is uh predefined in the Java Java and we just make an object of that class and we can use the predefined methods of that class okay moving ahead uh Java provides the feature of anonymous array which is not available there in C plus plus so we will see what is an anonymous arrays so Java supports the feature of anonymous arrays so so as you you don't need to declare the array while passing an array to the method so think of a situation where where you have created one method and the method method requires an array as a parameter so where where when you when you are calling that method in the main method so instead of calling instead of declaring the new array and passing the value to that array you can just create create a new int and just pass the values that you want to pass through the array that is known as the anonymous array which c plus c c plus plus language is like that don't provide these features okay so moving on next we have the types of array where so there are technical two types of arrays single dimensional and multidimensional okay so let's see uh each of them one one by one so single dimensional array the syntax is very similar to our other other programming languages so wherein we have first declare data type like integer and then two square brackets and array or we can declare it this in three different ways as you can see here so first of all let's write some basic code of that single dimensional array so I'm here and let's declare one public class Main okay and I will write the main method that is public static void Main string Alex okay so first of all let's declare and initiate initialize one array so for that we have we can we can do this int that is that that means the direct array is going to hold the integer types of values let's name our array as a okay equals to new integer and this is the five so this 5 is nothing but the size of the uh how many integer types of values that added is going to hold okay so here I return 5 that means the array is going to hold the five values in it okay so let me just go and quickly okay array at index one it's gonna hold twenty like this array at index 2 and hold 30 and then index three is going to hold for t likewise array at index for is going to hold what sorry 50. okay so here you can see uh my array length is 5 and I have declared the five elements in it so let me just print it on the console so for the printing of an a print of an array on the console we just use a for Loop wherein our for Loop will start from int I is equal to 0 and it will go until I less than a DOT length a DOT length and each time I am incrementing the value of the I so this dot length function you can see here I have told you the there's one method named as length of the length member which will return the length of the array so here we are using that same method so quickly just I will system dot out Dot print Ln is Okay so quickly just revise it we have declared one array and initialize and we are given the all the values that the oregano store at that index and then we have used the for Loop where we are traversing the array and printing the elements that are stored at the 0 to fifth fourth element fourth index of that array okay so I'm gonna run this let's see so here you can see 10 20 30 40 and 50s got printed on the console because at the first at first is value is 0 and array at eyes I store 10 so that's got printed here and each time the for Loops runs in welder the I got incremented I write one added two error three I added four code printed so this is the basics basic program of array so this so moving next we have multidimensional array so here you can see the multidimensional array how we can declare that array okay so without wasting the time let's code it out Okay so I'm gonna come here and I will comment it out this code at next I will again declare one array but this time I am declaring the multidimensional array that means I have to use two pair of square brackets equals to let me just pass those value okay so here I have declared one array which is multidimensional array and I pass values to that okay so let us check how we can print the multidimension array like we have printed here the single Dimension array okay so for that we require two uh for Loops first one is run from I is equals to 0 to I less than three and each time it will it rate I plus plus okay so inside this we have we are going to use another for Loop which is going to learn from i j is equal to 0 J is less than three and each time we are incrementing the value of the J okay so in this we are going to print system dot out dot print Ln array add index I and index J plus one space after each number got printed on the console and after this I will just write system dot out Dot print and then okay so if I run this now we'll see what happens so here you can see one two three two four five four five four four five is got printed so let's check how it got me how is it's printing actually so when we come for the first for Loop the value of the I is 0 and it when it Center for the second for Loop the value of J is 0 and here when we enter and we pass the uh array array as array of zero comma zero zero so what is present at array 0 0 this is the element which is present so this this got printed and when when we go uh again here in in inner for Loop where JJs value is now 1 okay and eyes value is zero so again we are passing wherein G is value is zero and but this time J is value is one so what it becomes array of 0 1 so at position error of 0 1 2 is present so 2 is got printed similarly this for Loop will run uh one time again when J is 3 this formula gets terminated in a for Loop and it go outside for Loop where I plus plus is done and is value is now 1 again it enters the for Loop whereas in change value is 0 and this time we are going to get those values as I array of 1 0 wherein we get this values similarly we are printing all those values so this is the this is how we can implement the multidimensional arrays in Java so there are many uh ways many practical uses of this using arrays in Java let's suppose think think about a scenario where you have 100 students in class and you have to store all the data of the student uh let's suppose marks the students got obtained the marks in mathematics so you can't just declare a one one variable one variable for each student so in this scenario we we can use an array wherein we we just declared one array of mathematics marks and we will just pass those values according to the student's role number and which got printed and stored and whenever we want we can retrieve those information or the values let's suppose I want to know the marks or marks obtained by the students whose role number is 8 in mathematics so I can pass the array name and pass the parameter as eight a seven sorry because the array index in short form 0 and I will get the marks which is of 10 by the student whose role number is 8. so these are some real life scenarios where wherein we are using arrays in Java so you can go to the websites like Geeks for gigs where they have the practice portal wherein you can just sort those uh field you can apply the filter of arrays and you can set the difficulty level and do the do the practice for the coding I will be sharing on all the required resources and the references you will require to learn arrays in Java in the description box of the video so thank you so much guys I will see you in the next week next lecture hello and welcome back to the new video of java tutorial series uh so till now we have covered arrays in Java and for this video we will be covering some practice questions in arrays okay so what is first question uh write a Java program to sum the values of an array so input to this program is an array so you are giving you are given an array of the input you have to print the sum of the elements of elements which are present inside the array okay so let me open my IDE and I will create one new Java class name as arrays practice questions let me increase the font size I'll write my main method okay and now I have to declare one array which will be given as input to the program int array equals to and I will assign values to the array here itself let's suppose one comma 2 comma 3 comma 4 comma 5 comma six comma seven comma eight comma okay so this is this is our array and now uh I again I will require one variable to store the sum sums value okay now I will use announce for loop I I hope you guys and know what is enhance for Loop for it's like a for each loop I will write int I in ARR what uh what we have done here is for every inte integer value inside array will run this Loop okay and what we are going to do inside this Loop sum plus is equals to I means we'll update the sums value with the value which we are getting uh from inside the array okay now at the last I will just simply print the sum is and I will concat it with the value of sum okay so now if I run this should print the value of summation of one two nine okay the sum is 45 now it's working properly so moving forward to the next question uh write a Java program to print the following grid so this is the grid that you are supposed to print on the console uh it has a zero sorry one two three four five six seven eight nine ten uh ten columns and one two three four five six seven eight nine ten ten by ten grid is this and you are supposed to print this okay and so let me get into my ID I will comment this out this is the solution for the question number one I will comment and I will write one one more comment as solution to question number one now from here onwards I will write solution to question two and inside this we required multidimensional array because Matrix is there and so I will declare one multidimensional array over here integer this and this and I will name my array as a which is equals to new integer of 10 by 10 because our grid is 10 by 10 Matrix after this I require one for Loop a for Loop integer I is equals to 0 and I is less than 10 less than 10 means the loop will run from 0 to 9 which is 10 times and each time I will increment the value of i as I plus plus and inside this Loop uh again I require one more for Loop to track the columns first first row will track the rows and second for Loop will track The Columns and inside this I will write intj is equals to 0. whenever my J is less than 10 I will do J plus plus okay and inside this inner for loop I will be doing system.println person 2D and I will I will pass it a value as any at ith index and red jet sorry jet index Okay so after this I will do this okay now it's okay wait I will again simply print the value which is inside the array at I I comma J index and after printing the inner for loop I need to move to the next row and for that for that I will simply write one print statement so that I do so that the program execution will get to the next line okay now if I run this class foreign on the console uh one mistake is there I have written print Ln instead of I should write print so that every time a new line should not get printed on the console now it's working fine yes you can see 10 by 10 uh grid is printed Matrix so this is this is the expected output that we have we want to print on the console okay so next question is write a Java program to calculate the average value of the array elements okay so you have given one array you just have to print the average of the elements which are present inside the array okay assuming that the there are integer values which are present inside the array okay so now again I will comment this solution of the question number two and I will write and one more comment which is solution to question number three okay so first of all we require one array okay so I will declare one array um of type in of type integers and I will name it as numbers which whose value is equals to new integer array and I will pass those values here itself let's suppose I will pass 20 comma 30 comma 35 comma minus 15 okay comma minus 60 comma minus 100 okay so these are the value just random numbers I have passed to the array and I have to calculate to calculate the average we have to calculate uh sum of the elements which are present inside the array first okay so for that I will require one variable known as sum I will assign it value as 0 initially and after that I will require one for Loop to calculate the sum of the elements which are present inside the array int I is equals to 0 now I it's less than numbers Dot numbers dot length numbers dot length methods will return the length of the array okay and now each time I will be doing I plus plus okay why am I getting error yeah yes I've written this okay now it's okay uh what we are supposed to do inside this is update the sums value okay so previous Value Plus the value of of the current element present inside the array okay now it's okay we have got the sum of the elements which are better inside the array now we just have to calculate uh average so to calculate the average and again declare would have double average variable of type double and I will simply divide this sum by the numbers dot length okay and now I can simply print the AV average of the area elements are and now I will concat it with average and now if I run this I should get the average averages 4. okay now it's okay and working fine if you calculate the summation of 20 plus 30 plus 30 35 plus minus 16 plus 60 minus 100 and it when you divide it with the number of elements that is one two three four five six then you should get 4 as a output that is the average of the array array elements okay so these are some questions again I suggest you that you go to the Geeks for gigs or any of the practice portal like hacker rank or hacker you just go there and apply the filter of arrays and set the difficulty level to easy and try to attempt those questions try to solve this question it will help you to improve your logic building in problem solving okay so thank you guys for watching this video hello and welcome back to the new video of the Java tutorial Series so so till now we have covered the theoretical part of the array and we have also done uh some uh easy level questions of the array and in this video we'll be talking some uh medium level of medium level question of the array which requires some searching and sorting techniques uh so till now I have not discussed you the not discussed the searching and sorting algorithms which are there in uh foreign videos we will cover that don't worry uh there are a number of the Sorting techniques and searching tests there are two two searching techniques are there which is linear search and variance binary search we will cover that in our upcoming videos so what will the agenda for this video is I will be covering this uh three uh medium level questions which are arrays address questions uh so I again these these these many questions are not enough for you to practice you just have to get your hand dirty on the programming uh so what what I suggest you you just go to the any any of the portal or Geeks for geeks hacker Rank and hacker hacker Earth Register there uh try solving questions on the arrays set the difficulty levels as easy medium then hard okay so practice more and more so that you can improve your logic building okay so let's get started uh what is the question write a Java program to test if an array contains a specific value so what this program uh what this in this question what we have to do is we have to search for an element uh which is given by the first of all we require an array and inside that array you will be getting one uh element which is what uh arrays arrays of type into arrays holding the integer values itself and you you have to search that element inside that array whether that element is present inside that array or not if that if that present inside an array you just simply return true Boolean value and if that elements doesn't uh present in inside that L array you just simply return false okay on the console okay so let me get into my IDE and I will just simply comment this out uh this is a previous video Solutions okay and I will simply comment and here I will again comment and I will right medium question one okay medium level questions one okay uh now I will be creating one method uh inside this and since then since this method is probably I will declare it as public and I will declare it as static because I have to call this inside my main method and which is test static method okay static uh and this is this will return a Boolean value either true or false it will return true if that element is present inside that array and it will return false if that element is not present inside that array okay and I will write uh My Method name as contains contains means whether that element is inside that array or not you can write anything whatever you want and I will pass my array and item means the value that we we have to search inside that array okay and I will simply write one for Loop and so I will write integer I in array what we have to do uh we have to check if the array at ith index is equals to equals to um is equals to equals to item equals index uh not just uh sorry uh I have followed the traditional for Loop over here I just have to write I is equals to equals to item oh sorry about that and I will write inside this return true okay I'll return true I guess this cannot return a value from a method with white word result type uh why am I getting oh wait I forgot that this is the separate method uh let me just remove this my main method so that program can understand this is as a separate method okay uh now it's okay I will import my main method over here why am I not getting wait a minute let me check this whether oh yeah sorry I have not ended the method now it's working fine I will get my main method okay now it's working right okay and after this for Loop uh when the program execution will get at line number 36 when we doesn't uh find any element which matches to the item that we have passed to the method okay so in that case we simply written false okay now it's okay and now we will call that method inside this main method uh for that before that uh I will declare one array int array which is equals to uh I will simply assign the values over here itself or 10 comma 20 comma 23 comma 30 comma 45 you can give any value whatever you want and after that I will require one variable item means the I value that we want to search inside that array and let's suppose we have to search 23 inside that array okay and now I will just print the call the contents method and I will pass array and item as my parameters to it okay now if I run this since the 23 is present inside this array the expected output should be true yes it is returning two and now if I give a item value as number which which is not present inside that array then in that case I should get false yes it is getting showing false okay now it's working fine so this is the solution to the question number one and what is the question number two second question that is fifth question write a Java program to find the index of an array element so we have to find the index of an array element okay so in this case we want we have to get one array from the user and we want one item like here we have declared over here one item should be there and we have to match whether that item is present inside that error or not if that matches we just have to return the index at which the item is better inside that array okay this is the idea behind this question I will comment this out and this statement also and now here I will write one more comment uh medium question two and for this I will create I will create one in method by the name of find index because we have to find the index of the element that it is present inside the diary and I will write public static the return type should be in because we are returning the index that is the integer value method name is find index and this method is uh receiving one array as an input and as an input and integer uh t let me give it SD okay okay so what we are going to do inside this we will check one base condition if my if the array is equals to equals to null then return 1 this is a this is called as base condition in programming you have to check the corner cases whether these are the cases uh that you need you need to handle or this will improve your space and time complexity of the your algorithm because if the array is original means array is empty there is no point checking doing all this uh running those Loops doing all those processing tasks then it it you can simply return 1 because if the array is null you are not getting going to get that element inside that array okay so this is the base condition that we have to check and now here I will write integer length equals to array Dot oops sorry error.length and I will require one more variable I is equals to 0 and I will declare one while loop and inside this I will write I is less than my length okay I'm doing this task I'm running this while loop whenever my I is less than left so initially my S value is 0 and length value is uh is the number of the elements which are better inside that array okay it can be anything 5 10 whatever the number of number of elements you pass inside the array and inside this for loop I will check one if condition if my array at ith index is equals to equals to okay T is nothing but the value either item that we want to find inside that array in that case we will simply return the value of the I uh return the i i wins the well in this highest value I represents the current index at which the loop is running so if that elements matches the elements that we want to pass that we have passed to the method then in that case return the value of the I that means return the value of the index at which the element is present inside the diary and if it is not present inside the diary if it not matches with the elements inside that array simply do I plus plus means increment the value of the I and again go further checking whether the I is less than equals to length and whenever my while loop is executed successfully and I till not found the element which is which I want to find inside that array in that case that means there that element is not present inside that array in that case we will simply return 1 okay and now uh I hope this is the thing that we have to do inside this method and now if I go inside my main method I have I will be using the same array and here I will give 23 as an input the item which we have we are searching for in inside this array and add indexing start from 0 so 0 1 2 the expected output should be 2 okay and I will simply print I will call the method find index and I will pass array and the item to this method okay now if I run this I should get 0 1 2 yeah we are getting 2 on the console because 0 1 2 the element is found at the index 23 and let me give the items value as 2 which is not there inside that array in that case I should get the output as 1 yeah we are receiving it as minus 1 and if I give the array as an empty array base condition we also check in that case also we will receive minus one yeah we are receiving the minus one uh now it's okay now the one more question was there write a Java program to copy an array by iterating the array now uh we in this questions in this question we have given one array we just have to copy the elements which are present inside one array and take those elements and copy those all elements inside the new array okay so there are several ways by which you can write this code in optimized manner uh okay so for now till now I'm assuming that you know have you don't have any advanced knowledge about the arrays and problem solving so we'll go the basic approach itself okay uh so now I will comment it out and I will write one more comment over here taking medium question three and now I will comment this also okay so I will write one more method over here okay so what we'll be doing we just we just have to copy the elements okay so in that case the method should not return anything okay so the written type should be wired okay so I will public static void um late wait wait wait wait wait do I need to create one separate method first I think no need is there to create one separate method where we can do this kind of stuff inside the main method itself okay so one array was declared already over here I will use the same array uh these items value was not required for me to in this question and I will declare one more here array I will call this as new array new integer of I mean I will give the same one two three four five capacity of five elements inside this area okay and now um to do this I one inbuilt method was there I will use it as okay I will write original array and to print this array inside one go we have one method arrays Dot to string and we have to pass the array name to it okay now it's so errors.to string I receive the class which is uh provided by the Java in the util package here you can see if I hover over here you can see Java dot util dot arrays and I guess yeah IntelliJ IDEA has also imported the following the package okay what it will do it will get array as an input and it will convert that array in into the string okay so it will here you can see it it is accepting the arrayism parameter and it will convert those array elements into the string and it will print all those in a sequence of that we have stored over here okay now I just have to copy all those elements so for the copying purpose I required one for Loop which will start from I is equals to zero and which will go till whether till my array dot length and each time I will be doing I plus plus and inside this array I will simply write new array wait wait wait a new array at it index means the first India that is zeroth index I will copy the element which are which is present at any at ithe index means we are just simply taking the first element of the original array and we are assigning it to the value of the value at the similarly when we go for the again checking for the for loop at that time is value is 1 we will simply get the first element of the original array and copy it with the first position of the new array okay and after that once the for Loop is ended uh the same thing we are going to do we are going to print the copied array copied array and we'll pass new array as an input to this okay now if I run this the same array should get printed okay originally array is uh 10 20 23 30 45 and copied array is 10 20 30 to 23 30 and 45. so this is the solution to the question number sixth so I hope you got some idea how these searching and sorting techniques are done in Java there are some algorithms like I said uh linear search binary search and for the Sorting bubble sort heaps or Radix or merge merge sort is there there are so many uh sorting techniques we will also cover that all these algorithms in our upcoming video for before that you should go to gigs for gigs or hacker rank to try solving some questions so that your logic building will get improved in the programming okay strength thank you guys for watching this video and I will see you in the next one hello and welcome back to the new video of the Java tutorial Series so till now we have covered arrays data structure uh so what I'll be doing is uh we'll be covering some hot hot topics uh hot interview questions which are covered or frequently asked during the interview processes of the many companies okay uh for these are very basic one uh that that the interviewer may ask you to test your problem solving skills okay so if today in this video uh let me just open uh create one Java class and I will name it ads let's suppose remove elements okay so let me what I'll be doing is let me just increase the font size okay wait I will increase the font size okay now it's okay uh okay so I'll just comment out the question so what we have to do is we have to remove the email numbers from an array so what we have to do is we have to write one function where we have to pass one array to that function and that function will return you the new array where all the elements are odd ones okay so what it does it will remove the all the even numbers from the array that you have you have passing to that function okay so enough talking so I will give you an example let's suppose okay wait let me just comment it out and this is an example array we have this array and let's suppose we have elements random elements three comma 2 comma 4 comma seven comma eight okay so uh this is uh the array that you have passed through the function and now uh the array which will be returned by our function is 3 2 is removed because that is your even number 4 is also got removed because that is also even number seven and 8 is also removed so this is the expected output from your function function okay uh so first of all let's break down our question so we have to remove the even numbers from an array right so first of all we have we need one uh way where we can count the total number of uh even integers that are present inside that array right so we need uh one way to count uh step let me just call it as steps steps that we need to solve count the number of uh not even let let us count odd numbers so that okay after Counting step number two is we have to create one new array of that size of the size equals to the odd numbers present inside that array right so create a new array of sides equals number of odd numbers right now after creating the array we just need to iterate through this through the array and check whether that number is or if that number is odd we just simply take that number and put it inside the new array okay so I will write if number is odd take it and put it inside new cell okay so these are the steps that we have to follow okay so let's go and create our main function first I will like my main function and inside this main function I'll create one array I'll be taking the hard coded hardcoded values uh you can also take the uh use input from the user by taking the creating this object of the scanner class as you know till now I hope array of size let's suppose five and wait and I will pass the values uh let's let's Let me give the above values itself three two four seven eight okay now I'm editing the error let it now it's okay okay uh now we have created one array and now I will write and one function function call before that I have to create our function over here I will create one function yeah okay so my function uh doesn't return anything it just creates a or else I can return I can return one array I don't know okay for now I will not return anything I will just simply write void my function name or else I will write I will return that new array itself okay you can also write while but one extra thing that you have to do is you have to print that a new array inside that uh that function okay that's what we have to do extra over here I'm not doing that thing I will write remove even and I will just pass the array to it okay now inside this function first thing we have to do we have to count the odd number okay so for counting part I need one uh counter variable uh let me just call Quality as or count is equals to zero initial zero and we need one for Loop and so this for Loop related from I is equal to 0 to I till next I less than array Dot length and each time we'll do 5 plus plus and inside this array now we'll check for if condition if current I index is more to is not equals to zero okay so what this line will do is it will check that number and it will check if it is divisible by 2 mod 2 means if it will be divisible by 2. if it is divisible by 2 that means that number is even number and we will not count that number as odd odd number and we will not increment the value of the odd count okay and inside this we will simply increment the uh or count by one account plus plus okay so first step is done now we have to create one news array of size the number of the odd numbers designing cited array okay so I will write int array this is the result array so I'll name it as a result new in of size or count again okay now inside this I will again need one uh variable to get to take the track of the indexes of the new uh what we can say new array now inside our for Loop I will just write inti is equals to 0 and this for Loop will again run from int I plus then array Dot and this time we'll do I plus plus and here we are checking one condition if array at ith index mod 2. okay if that number is not equal to 0 what that means that number is an odd number and we have to push that number inside our new result array and I will pass as index because indexing of this resultant error will be different uh as that of the our array that we have passed to the function okay and we'll write array at I okay after passing that we have to increment the index index variable also so that next time the I index will be switched to the next uh part okay or suppose uh for the first Value First Time index value is idx value is 0 so it will push that variable and sorry number to the zeroth index and next time uh idx plus plus we will do the 0 to 1 and next time when we are pushing that number to the nearest it will become one okay at last I will just simply return our result dot array okay and over here I will call that so remove I will call that function over here means just call it wait wait why am I not able to call this wait a minute guys hint remove even more and I'll pass Direct okay what I am getting here nonstitting method oh wait now I will have to switch it as static because as we know uh nonstating methods cannot be called inside the static method so our main method is starting one that that's why we have to create our new method as a static on it also okay and now this whole thing I have I write inside a print statement print remove even and I will pass or add it to it okay so that is pretty much I think we have to do let's hope okay so this is getting then the build is going on will this complete okay this is returning I guess object wait wait wait this thing we have to do I think wait let me just commit it out and I will just simply you can do is create phonetic everything and you will assign it as a and I will just simply write sort of AR to I hope now this will work wait wait wait wait wait guys this is printing the objects I don't know why I will click make check once okay guys I think uh by this we are storing that array inside our uh this array arr2 but one thing it is doing that it is printing the object so I guess instead of printing this we need to iterate over that array okay so we have to run run for Loop over here I is equal to zero I is less than ARR 2 dot length and each time we'll be doing I have 5 plus plus okay and inside this uh we'll just simply write only print because it will print all the bearing inside the vertical manner okay now uh I have to just print there to add index yes okay so now it will print the new array which way which is written by our function so expected output should be 3 and 7 inside the new array let's see yeah three and seven is getting printed only thing is that I just have to print one extra line over here I will just simply write over here itself okay now it's okay fire and again three one space and seven should be painted on the console yeah it is printed on the console so quick summarize uh what we have done in this question uh we have removed the even numbers from an array uh so let's suppose this is the array it will remove the even numbers from an array so one thing uh let me clear uh the way I do in is not the only way you can do it you can also try in the new ways right right now here we have created one new array and we are storing that number inside this array uh we can solve this here by using one eye one array itself but only thing is optimization should be there okay so that part comes under the time and space complexity uh so we will also cover those lectures in our upcoming videos how to reduce your space and time complexity of your code which will improve The Code by a much way okay so here that's all for this question uh I will see in the next one hello and welcome back to the news new video of the driver tutorial Series so today in this video we will be covering another question uh which is frequently asked in our interview for interview process of any companies so the question is how to reverse an array in Java okay so let me just create a Java class and name it as first array okay so let me just increase the font size yeah now it's okay I guess okay so let me just give my one comment which is question viewers and edit uh for example uh the original array that we have given is let me just write original array origin arrays so let's suppose one comma two comma three comma 4 comma 5. all right and the array one that we have to return is the output let me show it 5 comma 4 comma 3 comma 2 comma 1. okay so this is the area that we have to return okay so let's go and write this math function okay so we have to write this function so we just have to reverse an error so I don't think we have to return anything so let me just write as method name as public static void as return time because we do not return anything to after this function and I have to pass the array okay so adding click the quality as numbers because it's integer array and we have to pass start index and we have to pass the end index of the diary okay so this is a question this is the method declaration why we have written static because we are calling this method inside a main method and the method is a static one that's we have written static as the method type okay and we need one while loop okay so inside this file look one thing we can do is uh we can achieve this using single array itself means what what is the meaning we just modify the array which will be passed to this function or the method this method is accepting one array right so we will do such things we will modify this array and reverse the elements and store those elements inside this area itself okay and another way in doing is doing this is you can create a new array and you can create a new array and you can Traverse this original array but in the backward Manner and you can just take go on taking those elements and adding those elements inside the new array what uh but one thing is the drawback of this approach is you have to create one new array right it will increase the space and time complexity of your code itself right there so what we'll be doing is we will modify things in such a manner that we will be requiring one array and we will do all those modification inside this array itself okay so why I will write one while loop while our start is less than 8. okay so this Loop will run until our start in the start integer value is less than end integer value okay so what we will be doing is we will write 1 10 variable and I will assign the value to it as integer of start integer of start okay and over here numbers start is equals to numbers set okay and over here I will write numbers of and is equals to temp and after that start plus plus n minus minus okay so let me explain what we have done here we are just swapping those numbers okay so what swapping means we are taking one element from that array itself and we are swapping that element with the element other element inside that array okay so uh initially modulus starts well it initially the start value is 0 because the error indexing starts from zero okay and what is the end value n value is the length of that array minus 1 because since the array is indexing start from 0 that's why we have to minus one number from the address left okay and over here we have assigned the numbers of start means numbers of zeroth element that is 1 to the ten so initially 10th value is 1 and numbers of start we have assigned to the numbers of end numbers of start is this this position first position of the array and we are assigning or changing the value of this position as numbers of n numbers of n is 5 so after the first uh after running the nine number the number which is stored at the first index of the array is 5 and numbers of n is equal to 10 numbers and numbers of 10 10 payments and Position will be stored the 10th value to what is the tenth value times value is the first element of the array okay so after this after line number 10 the first and last number got successfully strapped okay and I will just simply increment the value of start now the for the next iteration the start value will be at over here and the end value will be will be at over here so the these numbers will also get slapped and will be at 4 comma 2 okay and when we are at 3 the start value is also 3 and ends and uh pointer is also pointing at three okay so at that time uh this three will not get swipe big since this is the middle point of that array and after this iteration uh will will break this condition because start value will be uh over here and and we will go well end value will be over here and this start value is no more less than the end value which is exceeds and this while loop will break and after that our whole array will get reversed at this point okay so I will write main function and I will create one array now which is equals to the let me give that example array itself over here one comma two comma three comma four comma five and I will just call that method okay reverse and I will pass our array comma start index should be zero As We Know and end index is the length of the array that means ARR dot length and since the array indexing start from the 0 we have to minus one because added dot length this will return the arrays in length as 0 1 2 3 4 5 but the indexing should uh there for the PIN code number and now after this okay so we have to paint that array again for that we will do uh iterate so and for Loop I will write I is less than here Dot length I plus plus and inside this for Loop we will just simply print area index plus okay so this this is the thing that we have to do insert this question I guess so so let me just run this okay so you can you can see five four three two one is getting printed which is exactly the reverse manner of this one to three four five okay so you can you can give as much value you want over here with an array and you rerun this code you'll get the exactly the opposite in the reverse way of the diary and you can also take the input from the user from here you can you just simply need to create disk object of the scanner class and take the input from the user and pass that array to this function of over here okay so try doing some giving some more reports for the add to this function and I hope you got this question thank you for watching this video hello and welcome back to the new version of the travel tutorial Series so so till now we have covered two questions which are regardless in the interview processes and now today we will be covering another question which is to find the minimum or the maximum value inside an array so what they have done over here is you will be giving giving an array and you just find you just have to find minimum organization when you found the array array will consist of the integer numbers and you have to find the minimum number from that okay so let me stripe question over here find maximum for all man Eddie and let me give you an example 5 comma 6 comma 9 comma ten comma 25 so let's suppose this is an uh example so after giving this array to our function that we have we are going to write the expected answer should be 5 because among those five integers five is the minimum number or else if you finding the maximum numbers the result should be 25. you can do anything so you can find minimum as well as the next one okay so in this question we will be finding the minimum you can try for the maximum one if you get some error you can do comment out I will be giving you the reply okay so I guess we have to find the minimum value for that we have to return that minimum value inside in the integer format okay so the return value of the return type of the our method should be integer okay and our method should be static because we are calling it from the main method of type in I will name it name this method as find mini mode okay so to this we will be writing array because we need to pass that array to that function okay uh so inside here I will be uh need one Min integer variable which will store the value of the minimum welfare minimum number from that array so initially I will be doing array at 0 as the minimum number initially I just assigning the zeroth index integer value to the minimum variable over here okay and now we need one for Loop which will iterate through the entire array that we have passed I with less than error.length and each time we'll be doing I plus plus okay so we need one if condition over here array at I is less than a minute okay so if if that's the case we just need to update the value of the mini variable okay so what we are doing uh doing over is array at I so let me give an example if if it is the case that uh address trading for the first time so let's suppose this is the it's array and added index that is zeroth index is 5 so this is the element we are assigned it to the means value yes so let's suppose means the mean value is 5 and if condition we are checking added I that is 5 is less than 5 so this will be evaluatory as false so Loop breaks and will come out of the loop and uh for the second time I is value is 1. so array at I means array at one edit one is six is six less than five no this is not this is not the case we will again if condition is evaluated as false again we increment the value of I and again we will check uh whether array at 2 error to smile nine is less than Min equality is 5. again it will evaluated as false so in in our case it it will never evaluate it as two until an unless there is no number inside an array Which is less than five if that number is less than five it will just simply update the value of the mean to the minimum value that means that that iteration value okay uh and after this successful running of the for Loop we will just simply return the mean value you can also find the maximum value in the same manner you just try once finding I will just write in Array and again you can provide your own uh input also nope no issues five comma 6 comma 9 comma 10 comma 25 comma 4. okay and I will just call find minimum I will write our array voice and I will just do this entire thing inside this print statement so that the value that the function is returning that is the minimum number should get printed on the console over itself okay so if I run this uh 4 should get printed yeah four is getting printed on the console let me just uh modify one condition now 5 should get printed yeah so let me just try with the negative number let's suppose negative 9 so what do you think what will be related yeah you guys right now minus 9 is getting printed on the console so this is pretty much about finding the minimum number inside an array you can do this some modification inside this code to get the maximum number logic because by watching these kind of videos uh just watching the problem solving videos will not help you improving your problem solving skills you have to practice a lot uh transform the the focus portals uh problems or hacker rank hacker Earth there are so many portals are there try solving those questions and so that you can build a pop of solving logic okay so thank you for watching this video and I'll see you in the next one hello and welcome back to the new video of the Java tutorial Series so today in this video this is for me another problem of array so that it that is the finding the second maximum value inside an array so in our last video we have covered uh finding the minimum or maximum value inside an array so in this video we'll be covering another question which is asked many times uh during the interperson that is finding the second maximum value inside array array okay so let me just create one call a class called second X and I will let the question so what we have to do is find second Max value in Array okay so I will give you one example let's suppose hello comma 2 comma 5 comma 9 comma seven this is very so what is the expected output should be so the highest value is 9 and now after 9 is value is 7 so the output of this area should be 7 so this is the thing that we have to do so for this we will write one function and that function will be returning the second maximum number inside an array so the return type should be of type int so so let me just create one public math static method of type return type end and I will name it as find second Max you can also try finding the second minimum number of from this array so try solving it you just have to say simply change some conditions so that you can get this minimum number which is second minimum number from then array okay so here I need one variable to take the track of the largest element inside that Arrow okay so integer Dot mean value okay so don't worry uh you will be asking what is that this mean when you represent okay so here you can see if you hover over here uh Java has some predefined values inside the language and these are these are nothing but the constant okay so which are defined by the Java itself if you write a teacher dot mean value some value is assigned to it that is minus two one four seven four eight three six four four eight so this is the values assigned by the Java you can use it inside your code uh you can also write Max will do because other constants are also defined inside the Java so if you want some overview of this you can just go over here and write so Java constants and if you go over here you can find this article which gives gives you pretty much idea about the Java constants okay and now moving to our question uh I need again one one more counter variable which takes not the counter variable a variable which clear tracks the value of the second largest element so inside the array so integer Dot mean value and now one I will require one for Loop which will it trade through entire array again though lensity ARR dot net spend will be doing I plus plus inside this I will write one if condition that is array of I if it has Max then I will just simply write second Max assign the second max value as Max value okay and I will just simply update the maxed value as air out of I don't worry we'll do don't try and test to check what is going on inside this code Okay so don't worry be with me uh RFI is less than second Max and will require one more and so I hope you remember this for this ad and what is all and means both the condition should be evaluated as true until an endless both conditions are evaluated as true Loop uh the program controls will not enter inside this LC flow one once when all these both the conditions are evaluated as to the then and then only the program control the execution flow of that code should enter the inside this way else if Loop okay so edit hi is not equals to the Max so what if that's the case inside this we will be doing second Max is equals to ARR of okay so this is the thing that we have to do inside this for Loop and after after execution of the followup we will just click it up the variable second Max okay and now inside our main main method we will just create one new array and we will pass those values as we have taken inside the example like comma 9 comma seven okay and now I will call that method that is fine second lesson pass our array okay so first let me run this and check whether we are getting the correct or yeah seven is getting minted on the console which is the second maximum number inside the direct and let me once check by changing some values as eight now this time it should be print on console yeah it is getting better on the console so wait let me just put one debug pointer over here and try to debug this code so that you guys can understand this easily okay okay so let's now when the program with execution at line number 23 uh this array so here you can see one two five nine seven eight is passed to this fine method okay the exam of the program execution flow comes to this method called okay and now uh so here you can see uh Max has the value assigned as this value we have see the predefined window which is assigned by the Java to this mean value constant okay so second mind second Max is also assigned that value so for the first iteration is value is 0 here you can see and if when that if condition is checked the max value is this and is value is uh zero here you can see and let's go ahead okay so if for the first time so array of I is all obviously greater than Max because this is the value that we have assigned minimum value okay so next a second Max has assigned the value this okay now again we'll check where I is equals to 1 here you can see I becomes 1. and now this time uh we'll check array at 1 errat 1 is 2 whether 2 is greater than a max value that is one yeah obviously we will get inside this Loop we'll update the second max value as 1 which is the previous version we'll update the max values as 2 here you can see Max value is updated as to Instagram X will be updated as what okay we'll come here we will check this uh and again we will check we will come here we will assign the second max value as 2 and I will update the second uh max value as 5 because till now the maximum value is 5 inside the error here you can see we have updated the max value S5 and second Max will do X2 and again we will run this Loop for I is equal to 3 so what is the element as I is equal to 3 0 1 2 3 0 1 2 3 9 whether the nine is and greater than 5 because it is will come inside this Loop we will assign the value of second Max as 5 and we'll update the max value as 9 so after a successful completion of the I value is three uh our max value is 9 and second max value is five okay so for now I is equal to 4 I is equal to 4 is 0 1 2 3 4 7 7 is uh greater than nine no we'll break that is condition will come inside the lcf condition and now inside this Asif condition uh once we check uh this is condition will be evaluated as 2 and next value is 9 and now we'll update the second max value as seven okay seven itself okay now again we will run this Loop we will do these steps and and at last we will get 8 as the second largest number infected array which is true here you can see one two five nine seven eight eight is the second largest element inside the diary uh okay so which is return to this return statement over here and after that return statement we will come here at line number 23 where we have left to that program is called and here we can print that number on the console and exam x uh exams process successfully and it is completed on the console okay so this is how it this program works I hope you got this question try solving and finding the second minimum number inside that uh array okay so for this for this video this is pretty much thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so today again we will be solving uh one another question uh which is frequently Asked instead of Internet processes and the question is how to move zeros to the end of the array okay uh so let me just create one new Java class with Java class and I will call it as move zeros okay so let me just comment it out our question move zeros today end of the array so this is our question so it's suppose we are given arrays six comma 5 comma 0 comma eight so I think result should result an added should look like it's six comma 5 comma eight comma 0 so this is the horizontal we have shifted all the zeros which are there inside this uh array version array to the end of the array okay so this is pretty much we have to do and so since we are doing positive operation inside that array itself I don't think so we have to return any things uh after that function call so I will for timing I will call it as static wired but sorry void I will name this method as move zeros and I will pass array and one integer okay so inside this I will assign it as intj is equal to 0 and I will go call it a forward run run for Loop so our for Loop will run a form I is equal to 0 to I tell n n is a side of that which is possible from the method call okay and now inside this I will check forward if condition if my added height is not equals to zero and and condition should be there which states that both the condition should be evaluated as two and then and then only we will get inside this if condition okay and add it J equal to equal zero and inside this if condition we will simply write one temp variable which has value OS and verify and what we are doing here is just swapping those two numbers okay if we find 0 at that in particular index we will strap that value with the value which is at the end of that array okay so we'll assign area is value to area of Json that's the last value and after that we will just simply assign energy is going to the test value okay so here we are doing swapping and again we will check on if condition if array at J is not equal to 0. if that is the case we'll just simply increment the value of J over here okay so I think this is a pretty much true that we have to insert this method uh let me just call my main method and I will write in array and we'll pass this same array that we have taken example six comma 5 comma zero comma eight okay and now from here we will write the note since our method is returning nothing what we can do is we can call that method and after calling that method we will just simply print that array okay because we are doing modification inside the same array that's why we can print the direct after the method call okay okay well I'm getting the error oh okay so I have to write the N value also n value is 4. okay and now if I just wait wait not like this I have to write down for Loop to it right over that array why is there I is less than error lock length and each time will be doing I plus plus okay and inside this for Loop just simply paint arrayad um space and not Ln because we want the array should be printed in the one line itself okay and now if I run this code the expected output should be six five eight zero yeah six five eight zero is getting printed on the console uh let me just modify and trying to give some more zeros inside this code okay uh zero six comma 0 comma five okay so let me run this so all those three zero should print uh shifted on the on the right hand side of this okay now again let me try to give some more input to this code okay and now if I run this zero should be shifted K so we guys we have one issue our zeros are not getting shifted okay so let me just try to figure out what I have done mistake over here and just develop this code and try to solve that error let that error okay wait wait wait wait let me just check I'll check with this code okay so I think this might be the error instead of hard code values I will just write array dot length I don't think so that is the error but little check if it is yeah that's the error inside our code error.net that we have to pass now you can see all the zeros are shifted at the end of the array and all the integer are first first comes integer and all those zeros integers have come after that okay so this is a pretty much about this question you can try by your own try solving it and this will improve your logic building skills also okay so I will see you in the next one thank you hello and welcome back to the new video of the Java tutorial Series so till now we have covered a lot of questions using uh arrays okay and now is this is the last question that we are doing uh on array so after this we will be starting our New Concept that is strings in Java so string is has some watched Concept in Java we'll see that in our next videos or for this video uh we are covering one question which is frequently Asked in Java how to resize and edit okay so we want to resize an array for this I will just create a new Java class resize array and inside this Java class uh first of all write a question that we want to go home that is how to resize the edit now let's suppose we have added one to two three four five and we want to and now till now the RSI is of one two three four five contain five elements elements and now we want to resize this array as 10 uh array array which is holding uh 10 elements okay so we want to decide the array size as 10 elements okay okay so this is our goal uh that we have to achieve elements yeah it's okay so uh first of all I will write one function so achieve this thing okay and I guess we have to just resize the array so we are not returning anything so for time being I will just write public static word exit and temperature because function doesn't return anything I guess for now and resize is the function name and it will accept one uh two parameters that is one array that we want to resize and the new capacity of that array capacity of that array okay uh so okay and now uh what I will do is I will create one new uh where array name them new int of capacity so what is capacity capacity is the uh capacity of the new array that we want to create okay and now I will create one oh wait do it and now I will create one for Loop and in this for Loop we will run till I is equal to 0 and I is less than our error Dot length and each time we will increment the value of I by 1 I plus plus all right and inside this I will just simply assign uh 10 pad height index value to array at index right so we are just assigning the values of let's suppose for the first time where the is value is 0 we are simply assigning the array at zeros position value to the 10.0 position all right right so this fall group will run until the size home at ARR array and after that it will break the for Loop and after that we just simply assign the value of ARR to 10. yeah now instead of pointing that original array ARR now it is pointing to the new array temp all right and now if we write the main function and here I will just simply create one new array named ARR and I will assign those values uh let me give the values foreign gives five and into 2 is 10. so that's the thing that we want to achieve I'll write and after that I will just simply print my entire array I I is equal to 0 I left length each time I'll be doing I plus plus I will simply print array at I plus one space all right so what we have done quick recap where you have created one function name as resize and which is accepted to parameters one is array and one is capacity uh which is a new capacity of the new array that we are going to make okay and so here we are making a new array of capacity that is given by the user as the function and after that we have created one for Loop where we are simply assigning the values of our original array to the new array and after that we will just simply assigning the value of the uh value of the array to the depth that is the new newly created array okay and here we have just calling that function and after that using this for Loop we are just printing the entire new array okay so let me run this okay it means yeah so here you can see uh one two three four five is also printing over here and one thing we can do is we're just simply print the ARR dot net this will also give us one idea what inside living happen whether the array science is increased or not okay between all right here you can see the area side is the five you can see over here all right this is how uh you can resize the array in Java so thank you guys for watching this video and I'll see you in the next one hello and welcome back to the new video of the Java tutorial Series so till now we have covered arrays we have done a lot of questions on arrays we have practiced some of the questions which are frequently asked during the interview process and I guess this is pretty much uh idea or the foundation you have you want to learn arrays and what you can do is uh just pause at this moment uh just pause this series uh for some one to two days and go and practice on a practice or more and more questions on hacker rank or Geeks for weeks or whatever code platform you prefer lead code is also there and try solving those uh questions using the array tag and you can also set the difficulties as easy medium high or difficult whatever you want but at least try this will improve your logic building skills okay so if you have done that part so you can continue this way and in this video we will be covering uh strings in Java okay so let me just create one new Java class image string string let me just call it as string Java string so okay and uh we'll just simply like the main method okay now it's okay so what is string in Java in Java string is basically an object that represents a sequence of character values and array of characters Works same as its JavaScript you just keep attention over here let me just give you an example if I create one uh array of type characters and let me name it as CH and I will just write over here and I will assign the values to that array as random a comma B C comma D wait mistake C comma D now it's okay so if I create this array and instead of this I will just type its string s is equals to new string and I will pass it as ch uh so here what I have done is I have created an array of type characters and uh and I've stored those characters a b c d inside that array and I have passed this array to the string s okay so at line number four what it that what it does as it will get that a b c d character as a one single string and it will treat it as a b c now this is get stored inside the Library okay so it is it is as same as uh this is another approach I am telling you simply go and write string s is equal to and simply assign a string a b c d so instead of writing these two lines you can you can still achieve the same output ABCD as here so I'm getting here yeah you can achieve this is also okay and now a Java string class so string one thing you remember for other programming languages like C plus plus we write string as a s s small or in Java you write the string with starting s with capitalize and you as as of now you should know that everything in Java you write with capital letter starts with capital letter is a class in Java so Java provides so string is a class in Java here you can see the implementation path if you hover over this icon and public final class string which is implementing this this many classes now okay so you can go through this official documentation of java to see how the strings Works in Java so Java stream class forwards also a lot of methods to perform operation on the string such as compare concat equals plate length replace compared to in in turn substring we will be covering some of the uh frequently used functions in string you know upcoming videos so for still till now you just remember string is a class in Java which is which has some different methods which has different methods to implement it okay and now we just go through this concept of string okay now here what is how to create a string object so so now you have understood what is string so how to create a string object let's see so there are two ways uh first one way is by string literal literal and one more ways by using by new keyword okay so we'll discuss now this this these two points okay how to create object Orchestra okay so by string material is created by using double quotes for example for example let me just write string S2 S2 is equals to anything string welcome welcome to the series so this is the one way by which you can create a string which this is the way of buying string literal okay and now by using the new keyword you can also create this string so how we can create let me just create Give an example string on this time SC is equals to we just you just have to write new string and you just pass the same uh string here that you have written or anything that you want to assign uh value to that string variable over there okay so this is this is the way two way by which you can create the strings in Java okay so One More Concept is there now one thing one thing you tell me what you can interpret just pause the video and think about it string S4 and I will write it as welcome okay and I will create one more stream by the name of S5 and I will write the same string exactly the stream string where the W is capitalized and all the letters are small small case okay so what do you think here the Java memory memory memory allocation will allocate the S4 and S5 the Sim different memory instances or not so in this case in Java whenever we create S4 and S5 which has the same exactly value of strings it doesn't create a new instance what in what exactly the Java do is you can understand by this example okay so here you can see S1 and S2 has the same value of welcome so Java has a string constant pool where inside the hip memory uh this pull is there where Java stores all these values of the strings and whenever you create a new string it it will check through entire string constant pool if there is a string present which has the same value that you have assigned previously it will just point to that variable to this uh string in the string pull which is inside the hip memory okay so this is one thing that I want to tell you and there are several methods are also there which is there inside the string class let me just give you one example okay let me just give you an example what I can do is okay so look at it oh I will just come here and I will create I will just use this S4 and S5 itself okay let me just write one more thing with ADD B you can add D okay and now uh if I simply system dot outdoor println and I will write string S4 length is and I will concat this string with the method S4 dot length so this will return the number of characters inside this string that means the string length how many characters are present inside that string okay and now if I run this you can see the string F4 length is seven y seven You Can Count Your count here okay one two three four five six and seven okay seven characters are there that's why 7 is a string so similarly you can perform this same method or operation on this S5 also I'll just have to write S5 dot length oh wait one mistake you just Rectify over here S5 it should be there because we are printing the length of the S5 okay and now if you come here string S5 is 14 y so because you can count one two three four five six seven eight nine ten eleven twelve thirteen fourteen this method will also come the blank spaces which I've given over here after welcome and after at this was also treated as a character in Java okay foreign so these are some methods and one more method is there which is let me just put it over here and yes one more method is there two lower case so this is the method and similarly there is one more method is there to uppercase which also converts all those letters inside that string to the lower case and if you use the two uppercase it will also convert that all the characters of that string to the upper case okay so to achieve this you just simply write S4 dot to lower case and now if I run this let me just convert it out so that you can see only one output on the console yeah you can see welcome is printed but additionally we have given W as a capital and whenever we apply that two lower case method on the S4 string if it was it was giving the output as W small because two lower case will convert all those character inside that string to the lower case and similarly you can achieve one more uh to uppercase you can see two uppercase now 4010 thing yeah all the characters inside that string are converted to the upper case format okay so these are some uh methods which are there inside the string uh what we can do is you can simply come here and come here and write string in Java and one first page Java string which is of java teapot website you just come here we go through it whatever I told you is there itself you can come here and read it and here you can see there are string class methods you got these huge list of 28 methods which is implemented inside the string plus you can come here you can also check the official documentation of the JavaScript this Java string intern method so you can come here and also see some example of this try those examples look at those methods and that's all for this Java string and in our upcoming videos we'll be covering some again after again what we do after creating this Theory clearing this theory part we will move on to the coding questions we'll try solving some coding question inside using the JavaScript okay so thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so till now we have covered uh array sense string in Java so from this video onwards we are starting a link list in Java linked list is a easy and more uh my my favorite data structures uh okay and I also love you implementing any language in Java and you can you also love it hash I am sure and so let's go uh so single English is a data structure used for storing the collection of nodes which has the following properties okay so till now we have we have seen arrays okay so let me show you one thing uh here you can see uh so this is this is one I hope you guys can understand by this so till now uh you have seen one array like this okay array so this is the array which has a elements one one two three four three in three six six elements which it is storing and now what linked list does is linked list does exactly the same way it stores the data but in the format of node nodes okay so these nodes have some properties okay so let me just uh give you an example of the node itself over here okay so here you can see so in Java linked list this is the No One node okay so let me just write one note over here this is one okay so this is one node which has uh two parts one is data part and one is next part so these this is simply represents one node in Java okay and which is pointing okay so this is n and which is pointing to none okay so this this entire thing in its one node in Java it has some character six okay one properties it contains sequence of the nodes okay in the single linked list you can see these men these multiple nodes are connected in an in a chain okay and these are connected with one one on one another okay and your node has data and a reference to the next node in a list okay so it has two or two section one is data section and the next section data section will hold the actual data or the value with that node going to hold and next in the next part it it contains the address of the next node that is it is pointing okay so let's suppose uh like this we have multiple nodes okay let me just give you an example uh let me just get it over here and for example uh these are the two things okay it's derive the two nodes in a two chain two nodes okay one node and here in the next part it is has the address of these nodes this node okay so this node and this node is connected using the next part here the address which is stored here okay now the first node is the head node uh always remember the first node of the linked list is called as head let me just write it over head and the last node it's of the of the link list it's always pointing to the null so if if you consider these type of nodes let's suppose they are uh five and the elements in the five nodes in the link list and after the fifth node fifth nodes next should point to the null which represents that this will inclusion ends here and in some of the reference books you will also find as the last element the last element or the last node of the linked list is called as tail okay so the first node is called as head last node is called as state link list okay so in Java or in general there are three types of Link list okay one is simply link list second one is W linked list and third one is circular link list in detail so starting with the single English in this video or in this video I will just give you one overview of the single in English what exactly it is so so you understand the in linked list the data is stored in the format of node and node contains the two part that is data and next part data Parts holds the actual value and next box next part holds the address of the next node to which it is pointing so that it just goes in in the chain format and always remember first node of the linked list called as head and the last node of the link is called as tail and the last nodes next should point to the null which is represent representing that this in English ends there okay so this is the idea of the Sinclair link list I hope you got some overview of the link list how English Works in Java and from next video onwards we'll be starting all those operation like insert insert operation or how to print the linked list uh how to delete element and how to get the element or fetch the element how to check the whether the element is present inside links all these queries so we will solve using the linked list in our upcoming videos so stay tuned and thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so in our previous video we have seen the theoretical concept of the sync readings list okay so now from this video onwards we have started starting implementing all those uh functionalities of the single English that that we want to know in order to understand the single English so first of all in this video we'll be covering how to make the list in this using a singly linked list okay so let me just uh come here and create a new Java class and I will just name it as simply linked list yes now oh you know it's okay so before that uh I hope you have watched our previous video where we have discussed the theoretical parts of the single in English and in that video I was told you that if we need one node to make a single linkage okay and that node contains the two parts one is a data part and one is next which representing which holding the address of the next node in the list okay so for that uh let me just come here come here and I will create one another class uh which is our node of the linked list I will name it as node s which is node of sync singly range list okay notice and here we will create that structure I hope you guys remember that structure let me just recall if you don't know what I'm telling so these uh this this uh this structure I am talking about the structure this structure we are trying to create inside this class Okay so this class okay so let me just come here and we know we have we want two parts one is data part I will animate as data and another one is next which is holding the address so since it's it it is holding the address for the next node the so the type of these uh variables should be known as and I will just write this variable name as next okay and now uh one thing whenever these node node is getting created we want these uh that values that the user want user is given should assign to these two variables okay so for that we need one Constructor over here and I will write one Constructor after node s and this Constructor will accept one uh parameter that is data which is given as input by the user uh like what what's the data that the node is going to hold okay so and we will assign these Broad data which is equal to data and these represent to the current distance of the variable and then our next should point to the no that is that is the simplest idea of the node we have taken those two variables and we have assigned that value and according to the node this is the idea that is the data part is over here and next part is over and this next is pointing to the null we can change that now uh when the if there are more number of nodes inside the English Okay so for now I guess this is a bit image that we have to do inside the node and now if I go inside my main class which is over here and I will just create one function to make a list okay so to create a single English okay and now uh since we are accepting your input from the user we need our scanner class to be imported uh so I will write import Java Dot util Dot scanner so we have imported this kind of class and now since we are going to make multiple functions I guess it is go to declare the scanner object uh globally inside the classroom okay so I will write public static scanner SC is equals to new scanner system.in okay so now we have created this and now I have to do one more thing the first node of the list is called a head and the last mode is called as tail okay so we need those two variables also also we like all right public static so these are no type right so we write public static of type node S one is head and one more is ding all right now I think we are good to go to write the function so I will just comment it out as function to make the singly linked list okay so inside this I will write my function public static and node as and I will name my engine is make list okay okay so here you can see uh public static uh you know node s is the return type because since this is this this function is making our list we want we have to return the head of the list because uh to access one single linked list or whatever the Ws circular English we need the head head of the list that is the first node of the list without knowing the first node of the list we cannot Traverse the whole list or we just lost here if in case if you if you if you not assign head uh as the first node of the list and you assign the T this second node as ahead of the list then we will never have the track of the first node of the list so that's why it's important to you to assign the head of the list and return the head while you're making the list whatever it is it if it is single in W or circular in English Okay so that's why we have written the return type as known as and we have uh name our function name as make list and we are not passing anything to this function because it's just creating on list okay now uh since okay so assume on conditions we are making one list so initially what do you think head and tail are null right because list is empty till now okay deal should also point to no so with that part we have done and you will just simply write one print statement that is enter the data in the list okay so here we are asking the data from the user okay so in data is equal to SC Dot next int so it's not the case that this function call will uh just once okay so we are calling that function we are making the list and we are making uh multiple nodes inside the list okay so for that purpose we will need one Loop which is iterating over each time whenever uh whenever and how much you denotes you want exactly you know in your list all right so for that we will need one while loop and this right Loop will run until and unless the data value is 1 that means whenever you give the data value as minus 1 this root will break which indicates that you are done with inserting the nodes inside the list and you want to close the list and get out of this okay now if and now here after coming inside this Loop for the first time we just have to create the node the actual node of this linkage okay so we'll create the object object of the node as and I will just name it as new node s which is equals to the new node and according to that Constructor we have to pass one data okay so that data we have taken from the user over here that we can simply pass it over here now at this point line number 14 we have our list is our first node is got created now we have to check if one if condition should be there if our head equals to equals to null sorry guys wait a minute yeah so if our head is equal to equal signal that represents that there is nothing inside the list no node is there inside the list and this is the first node that we are trying to insert our list okay head is equals to null so in that case we will just update the head value to the new node mu node s and we update our Tails valued also to the new node s okay so this if condition will executed when there is no node inside the linked list that is the first node that we are trying to insert the list okay and now in the else part we will simply write tail dot next equals to new node s and after that we will write tail is equal to new node s okay so in this else part so now in this else part whenever when this else part get run where if if condition is not executed and if condition is not con executed when there is a no present inside the list and then in that case we just have to update our tail because head is not going to update head is also already assigned as the first node of the list over here you can see head is assigned to the first node we just have to uh point the tail to the next node okay so if so that is achieved in that else block tail dot next is equal to new node dot next that means tail is currently pointing over a over here that is the first node of the list and this next part 10's next part means this part this part we are trying to assign the next value to this this node value okay so in over here we have simply assigned that value to this and they are simply as uh assigning the Tails value to the new node value okay so our now our tail should point to this new node that is inserted inside the English and how we are connecting to do those nodes that is in next part in the next part we are showing the address of this new node over here and we are simply assigning the Tails value to the new node value okay so this is the part that you have to do and after this okay so whenever these are done with the making the list user will enter the minus one in in the console as the data value and loop will terminated and after that we will simply write return head okay so we'll simply return head of the linked list okay and now if I write my main function and to call that make list functions and I need to keep the track of the head okay so ahead I will add s is equal to head is equal to Middle East so it says this function is a function is returning the head we will store that head inside this local header variable and after this line our function called got called and our list is completed and our list is make okay build okay now I hope you guys understand how to make a single English in our upcoming videos we will see some more functionalities of the link list so thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so till now uh we have covered uh how to make a linked list that is a single English and so for this video we'll be seeing how to print a linked list and how to find a length of the link list okay so for the printing purpose let me just go into my page and let me explain you the theoretical part of this link list okay how to print the nucleation okay so for the printing purposes uh first of all we need the head of the link list so from here you you will get to know what is the importance of uh getting the head if you get the right head of the linked list you you can find or even perform all the operation on the English okay so I'm assuming you have watched the previous video where we have make the link list and where we have discussed about the head part and head is basically contains the and which denotes the start of an English Okay so for the printing purpose we need that head so that we can start printing the elements from that position itself okay so for the head printing purpose we need head and we are go go on printing the head and head head until we reach at one position where head is head the node the node of the head which is currently there with which next is pointing to them that that means uh here you can see uh assume there are two nodes in this linkage this this one is head and this one is tail and how you can find the end of the link list they have to find the end end of the link list the it is simply nothing but the the net that modes next should point to the null whenever the node is there whose next is pointing to the null that denotes that that is the end of the linkage that means we have traversed all the link list in right starting from the head to the tail that is the last Road of the necklace okay so this so this is the idea behind the printing of the link list and to find the length of the linked list let me just first get clear this print list then again we'll come inside the paint and try to discuss the length in English so for that purpose we will write one one more function so this is a public static point I will name it as print list and since we to print the linked list we need the head so that's why we will accept one head of the linked list to this function and after that we'll just simply print that elements elements of the list are after that we'll run one while loop and this while loop will get executed until and unless the head is pointing to now okay when the head is pointed to null that means that is the end of the linkage no more nodes are present after that node okay we are pronouncing then till we find null okay so South head.data head dot data and we'll just printing space I will just write only print because we don't want our dish to be printed in the vertical manner okay here if you write head dot data that means head dot data means this is head entirely dot determine this part we are just simply printing the head dot data means the data part of that node okay so okay data part of the node and once we print that we will we just reassign the value of the head to the Head dot next that means we are moving next forward okay that means after after printing this data bar we will just assign the head value to the Head dot ahead dot next to it hold the next next node address okay so we'll reassign this head to this node and now the head is pointing to this one okay now likewise we will go on traversing the whole list and we will go on printing the data part of that node and after they at the end we caught all our node to get to be printed on the console okay so this is the print list function that we want to perform and uh in our previous video we have made the list and now we want to print the list okay so we'll just simply Grant column method print relation we will pass the head to this okay and now uh let's try to understand the length function of the linked list I like how to find the length of the nucleus that is how many nodes are present inside the link list okay so for that purpose to find the length again we need the header each each time we need head if you if you get the head you just we have performed all the operation okay so uh a length function is there we need one head okay so we will just simply write over here let me just write it over here we need one head that is a starting point of that click list and after that to count the number of the nodes in the link list that is between uh similar to The Grid list we'll just simply uh perform one while loop while loop which will iterate through all these nodes and it will iterate until the head dot next is pointing to the null that is the end of the link list and we will take one counter variable counter variable which will count uh the number of the nodes inside the linked list and each time we will increment increment the head 2 here dot next so this is the rough idea behind the how length how to find the length of the link list so let's go and implement this function also inside our code base so I will write public static so this function doesn't return anything find length okay and this is also accepting one head of the linked list parameter and again I as I told you we need one counter variable which initially assigned to 0 and well you need one while loop which you will iterate through the all the nodes of the list and we will iterate until the head is not a bus terminal and once the height is equal to null that denotes the end of the linked list and if it is not a personal we just simply uh increment the counter variable uh by one and we'll just simply reassign the value of the head with the head.next so this is the thing that you have to do and after uh successful running or the while loop we just have the length of the nodes which are how many nodes are present inside the nucleus that will simply print out over the concept length of the this stage light Plus counter okay and after this we just simply come over here and call that length method and we'll pass that head to this function also okay and now uh if I run this score okay so it is ready to run first of all uh make list function will get called here here you can see enter the data in the list uh program execution comes over here at line number 11 so let's suppose I'm creating one list okay so let me just write one comment over here so that you guys can understand easily I will write one comment so we are trying to make the list like this one two three four five so we want to make this list okay so let's go and uh make this list okay so I've got one two three four five so at this point uh list is uh all the elements that I want to insert inside the list are inserted and now I want to get out of this Loop which is this Loop and how to get out this get out of this look we just have to give the data as minus one so if I write minus one it will get out of this Loop you can see we've got one plug inside our code okay let's try to debug this according to my code this should get out of this Loop this is not getting out of this blue why is it so which is true go through the code and check what is the problem inside this code okay wait uh let me just write one run it one more time stop and return I guess there are some issues okay is it running let me just read like this wait guys it is running okay so we want to enter the data that's one comma two comma three comma four comma five and after that I want to add one so so wait guys I will uh just check if I want this error okay so guys I after debugging this code I got there one thing we have done a mistake over here while creating the link list that is we are accepting the data from the user and we are according to that we are running this file book okay so once this file Loop Got Run we are we we just we have to sub we supposed to rename this Loop and recheck the data value but we are not uh getting again the input from the user for that purpose we have to add one extra line over here AC Dot an exchange that that means we are getting again the input from the user and that input is again used as a check to this while loop again we are running this link group and now if I run this Main I hope this will work this time and I will try to create one two three four five uh so link is an English slower I will write minus one so here you can see the elements of this list are one two three four five uh which is printed printed by this paint list method and the length of the list is five they change the five elements inside the list is there one two three four five so the little length is five so all working fine uh till now we have covered how to make the list how to print the list and how to retrace the length of the list okay so thank you guys for watching this video and I'll see you in the next one hello and welcome back to the new video of the Java tutorial Series so today uh we are trying to learn the how to find the or how to search the element inside this in English Okay so till now a quick recap uh we have done how to make the list how to print the list how to find the length of the list and now today we want we have we want to learn the how to search an element inside a simply linked list for that uh we'll quickly go through the one paint and how to how to check how to find the or how to search the element inside as in plain English sing mean English okay so now so things which are required to search an element so first of all we need the head of the list head that is that is clear we need the head of the list and we need variables to check and to store the place at which we found that uh node or found the data inside the list that is variables variables of type integer and then we need one while loop where we can travel through to our whole list and check whether that nodes data is equals to the data which is entered by the user or this that that is the data that is user wants to search okay so these are the things that which which are required to search and particular element inside the linked list and so let's go inside our IDE and try to record this okay so I will write one method public static and we are trying to search an element so there is no modification inside our list and there we are not returning anything so return type should be void and I will write this search element as our function name and this method should accept the head of the list that is the starting point of the list so at the first we will just simply print the enter the data that you want to search okay so we are assuming one input from the user that is the data that the user want to search inside this list and we will just simply write int element element SC dot extent okay and place which is equals to currently it is assigned to one Okay so okay and we will create one new node of temp which has the value equals to the header which will assign the value of head to the 10 and we will perform all this operation using that temp variable okay and now we have our 10 we will just simply write one Loop and we'll write until our temp is equals to null we will perform these outputs okay so what kind of operation that we have to perform you are we are checking one if condition if our element that we want to find is equals to equals to the current temp dot data if it if it is a condition that means we have we have found our searching element and which is simply write print element found element found at and we will concat it with Place variable Plus th place in the list okay uh so full stop and after this if if you find the element we just simply return we don't want to perform uh more operation and if that is not the case we didn't find our Loop sorry the element we'll just simply reassign the template due to the temp dot data or not 10. data time dot next because you have to move to the next element of the list and we will just simply increase the count uh count of the place by one okay and after performing this while loop if it doesn't if it doesn't return this return statement doesn't get executed that means that element it doesn't element is not present inside the inside the list and then in that case we will just simply print a limit is not presented inside the list element is not present inside the list okay so I guess this is the thing that we have to perform and okay so I hope you guys are watching the previous videos do watch them and then come then and then only come here because you don't understand anything what's going on and please like and share to the series and do comment out what is your favorite part and what is if you find any difficulties also comment I will be looking after it okay so now we want to search the element right so we have make the list we have print the list we have length of the list and now we want to search the element uh okay so I will simply call the search element function I will simply pass the head of the list to that function okay and now if I run this uh we'll take the previous example itself we will make the list as one two three four five oh you know what let me just give you some more examples one notes okay so we have the elements in the list of one two three four five six seven and the length of the list is seven and we want to search let's suppose 5 whether plus 5 is present inside the list or not okay so you can see element found at fifth place it's a list okay so first fifth place one two three four five fifth place is five which is present inside the list that is correct uh so again I will run this and this time I will give the data which is not present inside the list one two three four five six okay so I eliminated the star one two three four five six and now if I want to find 10 in the list so you can see element is not written inside the list okay so everything is fine working so this is the idea of how to search the element inside a link list I hope you bought this concept thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so till now we have covered how to search the element how to in the length how to print and how to make the list so today in this video we will be talking about the how to reverse LD single linked list and how to find the middle node of the single link list okay so let's get started so to reverse a single request we what are what are all things that we have required and what is the logic how to reverse a string uh sorry string not string it's a single in English my bad how to reverse a single in English first of all we want head that uh which is indicating to the start of the link list and again we need one while loop which is iterating over all the elements of that list and one more two more variables of type node will be required which is one is previous which will hold hold the previous uh node of the list and one is next which will hold the next node of the list and of using these three variables of type node we will just perform this inverse operation of the string uh not answering what I'm saying either it's a single list my bad okay so now we will go and write the code for this reverse of the signal list okay I will come over here and I will write one more function that is public static of this is this uh we want to reverse a list after reversing a list we want to we want to give the new head of the list through which we can uh Traverse the new list that is the reverse list okay so we we need to return the head which is of type node so here we have written this and we have write the function name as reverse list then this list will accept one parameter which is head of the list and as I have told you we need three variables of type node s uh so let me just write those node s I will write notice of current so we need we need the track of current previous and next row current will will be equal to the head of the list that is the current uh starting point of the list and again we require is node as that is previous which is currently pointed with the null and one word is there that is next which is again pointed to the null okay so now we require one while look while loop while our current is not equals to null so whenever our parenting article signal until that we will perform this operation what are the what are our operation we will assign the next to the current dot next that is equal that means the current where node that is pointing it is the next node if it will point away so next we'll hold the next variable next not variable next node of the list and current Dot next is assigned to the previous that is previous will shift one one step ahead okay and previous is equals to correct and after that we will just simply write current is equal to next we will move forward to the list and after performing all these operation we will just simply return the previous because that is the new head of the list which is the reverse list okay and after this now we will just simply need to call this method inside our main main method and to call this purpose I guess we want to make the list we have to print the list I don't think so we need length of the list that will just commit it out and I will also come into the search part also and I will just write reverse list sorry guys will be worse list and I will pass head to it and after this now we again want to print the list but with the updated head right that is returned by this reverse list okay so I will just again call the these prints list method the only thing is that here the print list will print the list in the way manner that we have given input and here then a print list function will print the same list but in the reverse manner okay so let's just paste it whether it is running good okay so we are entering the data one two three four and five uh so the expected output should be 54321 okay let's see if it is there so elements in the list are one two three four five elements of the list are one wait wait wait wait we are doing something error in this code we have to use the list all right uh elements in the list are we are painting the list we are reversing the list and after that we are again printing tools elements of the list are we are we are getting only one over here why so we think we have one done one mistake inside our code let me see we have next will be equal to next question dot next equals to previous and previous is equals to current and current is equal to next and we are simply returning the previous in case say this wait guys I will just debug it and let you know okay guys I guess I have rectified the error I found the error that is uh look at here we are creating one head and we are making the list and the head which is written by this make list we are assigning the two heads okay till the next time we are printing the list we are again sending that headquarters this method so that head is not going to get modified over over inside the print method print list method okay but inside the reverse list method uh our head is getting modified here you can see our head is getting modified and our head new head is our head is at one okay so our list is uh let me just give you a clear idea over here you can see one two three four five so our head is at one okay so to the print list we are giving our head okay our head is not not going to change inside our reverse list method also okay but the reverse list is has its own new head here you can see it was returning one node okay so we have to retrieve that node inside our main method we are not doing that we are just simply again passing that head so that head is pointing to one all right so if you reverse the list after work one should be pointing to the null that is that is going to happen by this reverse list that's why uh this this error was there where uh reverse list is or printing only one inside this we just have to introduce one new node to catch the new node of the list okay so reload a new nudes let me write as news Okay so this node is old by this news and we'll just simply pass next to it uh now I guess this will work fine in our reversely should paint it on the console and okay now I will write one two three four and five and after that I will get minus one so here you can see one two three four five is getting winter which is the original list and after performing the reverse reverse list method on this same list we are getting five four three two one which is correct so I hope you guys have found this helpful so do like share and subscribe to the channel and I will see you in the next one thank you hello and welcome back to the new video of the Java tutorial Series so in our previous video we have talked about the how to reverse the list and now in this video we will be covering about how to find the middle node inside a list okay so let me just going go into my paint window and I will show you how we can find the middle load of the list okay so to find the middle note of the list uh since this is it is a link list we can we cannot uh perform the operation that we are performing inside our array to find the linkage that is a total elements but then inside the array you divided by two that that stuff we can do inside the array but but in the English uh we cannot do that that thing so we have to find another way to find the middle node of the list okay so to find this we will uh try to find the middle node of the middle node of the link list using the slow and fast pointer approach okay so what it does is exactly so we need to two variables of type node s and uh which which will call it as let let me call it as slow pointer and fast pointer we initially assign those uh as the heads value okay that is the starting starting of the list and we need one counter variable which is initially uh count as a initially assigned as one okay so we need one while loop what that means exactly is uh the first node is not uh need should not be null and the node which is pointing to it the first node is pointing to the node uh that node should be present and that should note should not be null okay so these two conditions that we are going to check inside the while is that two conditions won't satisfies this condition will enter inside the loop and we will simply change the value of the slope pointer to the next that means slow pointer will be assigned as new new value the slow pointer will be this next next next mode of the list okay and we will assign the first pointer value to the first pointer next dot next that is fast pointers value will go to the Third po pointer means we are moving slowly we are iterating the list slowly at the first pointer means we are iterating the list by one one node I had always one node ahead of the slow pointer okay and after this uh running of this while loop each time we will increment the count variable so that we can have the number exactly the position where the middle node of the list is present okay and after running up this while loop we will just simply print the slope pointer data because the slope pointer is a node which is uh exactly at the middle of the list and we will also print the count of a count variables value which will give us the exact position of the element exact position where the node is present inside the list okay so that is the idea behind the finding the middle node of the list so let's go inside into our ID and try to Port this out so to make this function I will write public static and I don't think so we are returning anything okay so I will write white for time being and I will write this name as middle node and this method will also accept the head of the list add and I will simply come here so we are approaching this way in the slope pointer first pointer approach I will just comment it out I will write slow pointed is equals to one star and our fast pointer is equals to touch down that that means always the first pointer will be ahead of the slow pointer by the one node and this will gives us the exact beta of the list and we need uh two this slowing for first pointer we need this flow pointer initially both the both are assigned to the head head of the list that is the starting point of the list and again we need one more notice first pointer which is also assigned to the head of the HDD changes okay so again we need one count variable to find the position of the position of the node that is present exactly at the middle of the list and inside the while loop we will write first pointer is not equal to none that is function should not be null and and we will write and condition and I hope you guys remember and condition both the both the expansion expression should be evaluated as true fast pointer dot next a should not equals to null if that is the case we will enter inside this Loop and we will simply assign the slow pointer value to the slope pointer next we will increment the slope pointer nodes to the next node of the list okay so slow pointer is equal to slow pointer dot next and we will also increment the value of the first pointer to the first pointer is equals to fast pointer dot next dot next that means the one node ahead of the slow pointer and we will just count plus plus because we want also want to point the position where the while loop we will we have now the middle node of the list and in the name of slow pointer which is flow pointer is exactly pointing to the middle middle node of the list and the count having count the value of the count is equals to their position of the node that is Building inside then make list is the middle okay now here we can simply write middle Road there list is flow pointer Dot data that is the data part of the list which is which is at count is the position of that number position in the list so we'll stop and this will give me the middle load data and the exact position of that node inside the list okay so let me call this to call purpose will come inside of the method and we will call this function uh middle node not make list middle node and will pass the head to it okay uh so uh I don't think so we want to reverse this I will just comment it out we'll need this also you just make the list we just print the list and we just find the middle node of the list okay now if I run this sorry one two three four five so what do you think one two three four five is there and according to this list uh three should be the middle middle node of this list let's see if it is the case yeah elements of the list list r12345 middle load of the list is three yes this is right middle node is three which is at third position of the list that is one two three third position for the list so everything is working fine uh let me just run it again and give it give the even number of the nodes inside the list three four five and six and hit minus one and now you can see the middle node of the list is 4 which is right four and which is at the first fourth position one two three four four which which is also correct so this is the idea behind how to find the middle node of the list so I hope you are enjoying this video enjoying this series uh do like share comment and subscribe to the channel and I will see you in the next one with the new concept of the sync little English thank you guys for watching this video hello and welcome back to the new video of the Java tutorial Series so till now we have covered uh pretty much concept of the link list so we have seen uh we Define in the middle node how to reversing the list how to search and element how to find the length of the list out of print the list and how to make the list so till now we have covered all those Concepts all those operations which are performing on the link list which doesn't modifies the linked list right uh we have not done anything over here we are just simply retriving or uh checking the list we are processing the list till now but from this video onwards we will start performing on the operation and to modify the list okay so we will be starting with the insertion operation first and then then we will move to the deletion operations okay so basically there are three types of uh insertion which are done at the on the link list okay so let me just clear this first let me just clear this oh let me just clear okay now it's fine I guess okay uh now let me just create one list for you so that you guys can understand clearly okay so we are making this list and I will write a I will make this three notes in the list okay and each these nodes are pointing to this and this node is pointing to this and this node is pointing to the null okay I will write Bell over here so that you can understand null uh so this is our 10 I hope you remember what is still uh this is head uh this is the data path and this is the next part okay and this next contents address of this node and this is the first node see the second node and this is the third node in the list okay so this is our list and we want to perform the insertion operation of this list so basically there are three type of operations okay that we can perform on a list let me just increase the font size we have to perform this operation on the list okay so first operation is insertion at beginning and second one is insertion app and and third one is insertionate user specified location okay so these three operations we are we have to perform okay and now now you can see these three operation we have to perform okay yeah right so in this video we'll be covering insertion at the beginning so what do you think uh to insert a new node at the beginning of the list what will be operation that you have to perform okay so let's write down those operation that we need to perform uh so okay and we need first of all and we need the current head of the list head of the list okay and then uh we need a third we need to make a new node inside a list before that we need data which is important we need data for the new node data for new node new node and we will make the new node make the new node and after that we will assign that or insert that node inside this list insert the node in list and after that we will return the new head of the list because head is going to change it is going to change because after performing this operation head is head of this space is going to change I will just copy all this operation that we need to perform to insert at the beginning and I will come over here and I will just comment and paste it off okay so these are the operations that we need to perform I will just tab it over here okay now it's fine so these are the operation that we need to perform okay so we will write one function which is public static and it will return When you know new head of this list so we it didn't didn't type should be node and the name of the method is insert add the insert at beginning insert at beginning node s uh will first will take the head of the list okay for all this operation so T again okay so we have received the head of the list okay we have taken this uh we now we need to take the data for the new node okay so we have to receive the data right so before that I will print on the console write the enter the data to insert 3 node in beginning okay so we are asking for the data from the user to insert which is going to going to insert it at the beginning of the list and now here I will store that data into the data variable SC dot next state and after storing the data now the second part is done now we have to make the node okay so make the making the node is pretty simple I hope you guys now no we just have to create a new object of the new node s okay wait all we have to do we just have to create a new node okay with node s let's suppose and we will assign new new node and we'll pass that data to the node okay now it's okay and now wait guys no okay now once we created the node we have to insert that node into the list so for the insertion point of view uh what do you think I will just come come to my paint okay so this is the head which is pointing to the second node of the list so if if you want to perform a insertion operation at the beginning uh let me just create one new node so that you can understand clearly here is the data part and here is the next part okay now if you want to insert this node in inside this list at the beginning what all things that you have to do uh you have you do you think you have to perform Okay so first of all you need to link this node with the correct first or the current head of the list okay so by linking means we have you have to give the address of this s next and assign it to the current head this okay so this is the first step that you have to perform I will just write it as first step first step you know what okay so this is this linking should be done and again now if this linking is done and we are inserting this uh node at the first uh we need to update the head also Okay so at second second operation we need to reassign the value of the head to this new node okay and after that we need to return the head now the head is pointing to this oh okay now the our current new current or the new node a new head is this head of the list so these are the operation that we need to perform uh okay so first of all we need to connect our new node with the current head Okay so foreign foreign guys uh my laptop battery was dead that's fine okay so now uh we have created a new node uh we have now we have also understood what we have to do exactly to insert this mode at the beginning okay so let's let's do this okay we now uh create a new node and that's next we'll assign it as head now we at this point we have connected that new node to the Head current head of the way that means the current first node inside the list and now we have to just have we we just have to update the head which is headed equals to your node this will uh head now head will Point into the new node of the list that is the current first node of the list and now we just simply return head against okay now simply return the head of the list uh I hope this is the thing that we have to perform inside bearing okay uh now we don't have to find the middle of the list I will simply comment it out we just need to print the list and now uh if you notice uh our new head is going to return by going to return by this uh inserted by getting method so we have to store that new head over here okay so we'll just simply write head is equals to insert at beginning and will pass our head to this method okay and after that we will just simply print list again with the new head okay and now if I run this okay so one two three four five six minus one okay so let me see the list of one two three four five six and enter the data to insert in node in the beginning uh that is a typo you don't forget it enter the data okay so now if I want to enter 0 at the beginning let's see if it enters here you can see after uh giving 0 to enter enter at the beginning the new list is zero one two three four five six so zero is getting inserted at the list okay so this what this is working fine I hope you guys understood how to insert a node at the beginning of the link list I hope about this concept thank you for watching this video hello and welcome back to the new video of the Java tutorial Series so till now we have covered the insertion operation at the beginning and so now in this video we will be covering uh insertion operation at the end of the link list okay so in our previous video I will talk about this uh instruction at the beginning and in this video we will be covering insertion at the end okay so let me just clear this okay wait let me just clear this thing okay okay uh now uh we want to insert the same node at the end of the link list okay uh let me just erase this foreign at the end okay so things that we are we we require okay first understand that so to insert at the end we need a first of all head of the list again that is much we need the head of the list okay uh now we need the data that with that data for new node data of new node okay that is going to get inserted now we have data we have the head now we create a new mode creator node okay now we created a node now we insert at the end insert add and and at the end we will return the head of the list return head okay so these are the operation that we want to perform uh to insert a new node at the end of the list okay so I will write it over here I will just comment it out and paste it enable give one tab and after that we will just simply click on here okay so now this is the thing that we have to achieve okay so now I will write my function which is public static and it is returning the head that way it is of type node s and the name of the function it's insert at it let me call it as insert at end will simply pass notice head available simply pass the head of the list first of all we will get the data from the user enter the data that you want to insert at the beginning and I'll just simply copy this line so that I can not write the new line okay and over here I will just simply paste this and load in the end okay and and we have to insert that node and now we will receive the data platform the user data is equal to SC Dot an extent after receiving the data we need to create a new node uh we create the new node as new node s which is equals to new node and we'll pass that data to this function okay and now we need to insert at the end we need to perform insertion at the end so what do you think we will like we will go into the paint and we'll try to figure it out how to insert the set end so two things should be there one is if our head is equal to equals to none what if the list itself doesn't have any element that's list is empty that is head is also point to null and tail is also pointing to the null and then in that case we will simply assign the new node to the head that means if there is no no node in the list and we are trying to insert a new node which is the first node as well as the last node of the list then in that case we'll just simply insert this node inside the list and we will assign it the value as head in case there are some elements there are some node present inside that list we'll just simply uh we have to assign that value to the we just have to assign the current tail tail represents the last node of the list we'll just simply write tail dot next equals to new node that means we are linking this node with this node I will just show you we are linking this node to this node by writing 10 dot next is equals to you know and we will simply assign change the value of the tail to new node that means then now the list becomes 1 2 3 and this node is added at the end of the list and this nodes next is pointing to the null now this is our list after insertion at the end okay so this thing we have to achieve over here we will write an if condition to check whether the head is equals to equals to null if that is the case that means there is no element present inside the list and we will just simply write head is equals to you know this and now if it is not the condition uh there are some element inside the list we'll just simply write okay we will just simply write tail dot next is equal to new node and I will assign the Tails value to the I will update the value of the tail to the new node node so that our list is like uh it is expanded okay and now at the end after performing this operation we'll just simply return the header new head of the list uh not new head is the this we will just return the head of the list okay and now uh to run this insert at the end we are returning something ahead so I we need that head to be updated over here uh we'll let head is equals to insert at end and will pass that head over here and we'll just simply print the list again okay now if I run this and I will first I will give the empty list no I'm not not empty first I will give some inputs one two three four okay and after this I will write minus one and uh now I have to insert 5 at the end of the list that is the data and after inserting the here you can see the new list is up printing which is one two three four five and uh before list is one two three four five was not there right now after performing the insert at end operation 5 is inserted at the at the end of the list okay so now if I again run this and this time I will not give any uh prior node in the list I will just write 1 elements in the list are empty because which is not getting element list is first empty and now if I am trying to enter insert two in the list the element of the list are two okay so if condition is also getting executed or working fine so this is the way by which you can insert at the insert a node at the end of the list so till now we have covered insertion at the beginning and insertion at the end and in upcoming video we will see how to insert a node at the user specified location in the sinkly language so thank you guys for watching this video and I will see you in the next one tutorial Series so till now uh we have covered the core Java concept uh we have we have started with the data structures and algorithms we have covered array VR uh discuss some problems on arrays okay I hope you guys are enjoying the series so now uh till our previous videos we have started singly linked list okay and in that uh we have seen how to make a list how to print a list uh how to find the length of the list which means how many nodes are there inside the list we have find how to search an element inside the list and then we have started the basic operations like inserting deleting or finding like that okay and in inserting we have uh seen uh how to insert a node inside a singly linked list at the beginning and we have seen how to insert a node inside a single in English at the end and now again we have seen uh this much these many methods reverse list means how you can reverse a single link list and middle node like how you can find the middle node of the link singly linked list so these are some methods that we have seen till now and so now for today's video I I will be taking a concept of how to insert a node in single English at a user specified positions right so for that let's just get into our paint and see the logic how we can implement or how we can add a node inside a Sinclair link list at a user specified position okay so this is our previous previous paint previous video paint so let me just erase the things that we don't want okay just we can delete this you can delete this okay fine uh so let's assume that wait this is our link list okay this is our first node this is our second node this is our third node okay and now if I want to insert a node inside this simply linked list at a user specified positions right so if I say this is the single in English and you have two insert this node this one right here and this node inside this singular English at second position okay so what is your logic how you can uh think how we can insert this new node inside this English at user specified position okay so let me just write a write down here so we are trying to insert this new node at position is equals to 2. so right so we are trying to insert this node inside the single linguisher position number two okay so after inserting the whole list should look like this this is our try to form a cursor okay so this is our first node I am talking about the after insert method insert operation ticket oh sorry after that the link should be here and after that this uh next should point to this and after that this next should point to this okay so this is the list our list new list updated list after inserting a new node at the second position so what will happen uh this existing node which is at position 2 will get shifted at position 3 and new node which is which we'll be going to insert inside our list will be take the position position uh two okay so this is the logic that we have to build uh so first of all uh let's get in our ID get into ID and try to code this okay so let me just get into my IDE okay and I will write this similar method over here okay this is inside at beginning this is insert at end and now I will write it over here so that you can I will and also I will share I will be sharing this code don't worry you can follow this code and try to build your own single linkage and try try to play around this code Okay so let me just okay fine so we'll be uh let me write out write down one comment so we are performing insert operation at user specified location or to be more precise in programming language it is index okay now so since this is a method I will write this public method should be static because we are calling it inside the main method which is static one and think it uh think it guys uh when we are updating we are inserting a new node inside the list so our method should also return one node that is the head of the node uh that like here you can see uh for suppose user has inserted this node at First Position then in that case our head should also point to this right so so our method should expect expected to return a new head or the if it is uh in inserting the node at the first version or any case we are returning a new node okay so our notice of type node s so I hope you guys are watching our previous videos also so that you can understand what is known as why we have written that over there so please watch all the video and then come over here so I will name it as insert at the method name okay and this method will also first required one head so we are passing one link list to this method and in return this method will insert a new uh node in that list that I use a specified location right so we are passing the head to the list okay so first of all I will be requiring one uh variable name as position and count and I will assign value to both as one okay so both are one and I will just simply write system.out.print align enter the data to third in the list okay so at this point we are asking we are printing on the console like uh asking the user to enter the data that you have to insert inside the list all right all right and after that we will declare one data variable and we will just write simply since SC Dot nextint and you will accept the data value of that new node data part of the new node okay and well after that we will simply write print on this console like enter the position all right so this method will uh what will be do what it will be doing it will be taking the data part and it will take the position right all right so here you can see it will ask for the position at which position you want to insert this node inside the single link list that we are going to pass to this method okay so now I will write position is equal to SC Dot next next it okay so now we have covered position we have taken the data okay so now we are good to go to create a new node okay so we are creating a new node new node s that is a new notice and we are passing the data to that Constructor of the nodes class so now at this line number one one is one one or four we have created a one node and we have passed the data that is inside by the user and we have also taken the position from the user okay now we are checking if the position is equals to equals to 1. all right what that means if position equals to equals to 1 here you can see if entry user enters the position that is of new node should be one then in that case user user is trying to insert that new node is at the very beginning of the link list all right so in that case uh we we have to perform the some different tasks otherwise there are some okay so otherwise we will go inside the else part we will all support that one okay so if the position equals to equals to 1 that that means we are trying to insert the node at the very beginning of the league list so in that case we will just simply write new node s dot next is equals to head and we will simply reassign the value of head to node s sorry for the type of mistake okay so what we are doing doing over here is uh this is our new node we will just simply assign first this next to the Head currently the head will be pointing to the first in first node of the link is right so we are making this connection first to the first node and we are simply changing the heads value to this uh new node okay so for after that uh how it gonna look like let me just clear this mess all right so after that it will look like this the head will be uh you know the head is our new node head is disk and our second node inside the link list will be this and first node will be this okay so now this we have covered for the position equal to equals to 1 what if the position is uh not one okay or else something then in that case you will come inside the else part and here we will create a new node and we'll assign it name it as previous is equals to head okay and in after that you run one while loop okay and then the condition we are going over here is while the count is less than position minus 1. okay don't worry I will be explaining this code in the using the paint window all right and we are writing previous is equals to previous Dot next okay and after that you just simply write count plus plus all right and after running this while loop we will simply create one more uh one more node and name it and name it as current and this current will point to the previous dot next and after that uh we'll write new node sorry for that stick we'll write new node as dot next should be equals to the current and now the previous dot next should point to new node all right and after that after this else part we will just simply return the head of the list all right so let me explain what we have done inside this else part all right so uh we know if the position is not equals to 1 that means we are not trying to inserting the new node at the very first beginning of the list okay so in that case what are what are all the operation that we have to perform like we have seen over here if you want to if the user gives the position as two so in that case uh we will first we have to Simply look at over here okay so we'll create one uh node by the name of previous and we will assign it the value of head all right so at the very first the previous will come over here previous all right and then which is equals to the head like it is pointing to the first node and after that we'll we'll run our while loop all right so while we are repeating this iteration until our count is less than position minus one so what is our position uh let's suppose I have to insert the insert a new node this new node at the position is equal to 3. okay so look at here map if my position is wait my position is three now wait okay so what is the count value initially the count value is one it will check whether one is less than position minus one that is 1 is less than 2. if it is if it is correct yes then it will it will perform this this two line of code okay so previous is equal to previous dot next that means our previous uh previous will jump over here now the previous is pointing the second node and count plus plus now the count value will be 2 and now uh when we again check for the condition now this time counts value is 2 and and what we are going to check we are going to check whether the position minus one okay so my position is 3 3 minus 1 is 2 either my 2 is less than 2. so this time this condition will will be evaluated as false all right so if this condition is false then in that case uh this while loop breaks and will come over here okay so now our previous switch is pointing towards this second node of the list okay and now we will create one more node which is current and which will be pointed in the previous dot next all right so what is what is our previous previous is this in this next part we will assign it to the uh what we have created another node name as current all right so this here our current will point over here current is here and previous is here all right now new node dot next is equal to current new node that is our test new node.next so we are uh taking this next and we will assigning it by assigning it to the current value all right so new node.next is equal to current so now our new node will be pointing towards this node and previous dot next is equal to new node previous dot next is equal to new node so if you can see these are the two uh nodes that we have created previous and current are for taking the keeping the track of the nodes which is previous to the position that we have entered to be uh to enter the new node inside the list and the current is the actual position at which we are we have want to insert that node inside the list okay so after performing this operation you can see the flow of the list would be 1 2 and this will become the third node and this will become the fourth node so we are successfully inserting the new node at the position is equal to three that is equal to here you can see yes so this is logic behind this I hope you got this if you're not uh go back in the video and try to understand what what do I have covered okay so let's run this let's see if we are not getting any error after before that I will just comment it out we don't require this we will make one list we are print the list and we'll call our method insert at and we will simply pass the head tool to it okay so if you notice one thing uh this method we it accepting one head we that mean that we are passing or passing it over here and but in return this is giving us a new a node a new head of the list right then new it is returning the new head of the list so that's why we have to get that new head of the list otherwise uh we are not printing the new list okay so we are printing the old list that we have make over here okay so this way this will not work so here let me just create one new node uh let me call it as head new so we are taking that noon head and we'll again call the print list but this time we will pass the new head to this Method All right so so that we can print the new list after inserting the in node add the user specified index all right so this is we have to do Let's test it out okay so it is asking me to enter the data so let me enter five nodes in the list one two three four four five and uh you know if you want to get out of this uh make list function you have to write 1 so it is printing that elements of the list are one two three four five by why so because we are called over here printless method which will gonna take head of the list and print all the list okay so here it is asking the enter authorator to insert in the list so I want to insert let's suppose 0 so that you guys can understand okay so I want to insert 0 at what position let me insert it at position number three over here okay let me insulate that question number three now here you can see a element of the list are we are again calling the print list but this time we are let me show you we are again calling this function but this time we are giving the new new head of the list that is the new list that method our method is going to return us that is 1 2 then at position number three uh I have tell the program that to insert 0 at the position number three it is also it is inserting the zero and after that uh rest of the list will uh will be printed as it is Okay so this is the idea of inserting a new node in the single English at the users use a specified location I hope you got the concept please uh we rewatch the video if you are not getting the concept but try to understand and will I will share one trick so that you can uh solve this kind of linkage problems easily you know once we have uh covered all the topics of the single in English Okay so thank you guys for watching this video and I'll see you in the next one so hello and welcome back to the new video of the Java tutorial Series so till now we have covered how to insert side node inside a single link list and that too with the three all three types uh like in the beginning in the end and at the user specified location okay that is the user specified index okay so one more challenge for you so if you can try to solve it so what is the challenge so you have seen how to insert at end uh how to insert ad uh beginning how to insert a few userspective user specified location right so now you have to insert a node in at the middle node of the link all right so what I am telling is Let me Give an example so if the length of the list is 10 okay or suppose let me take X5 okay so and the elements of the list is one two three four and five so at first you have you have to identify which is the middle node of the list okay so in that case a middle node is three I will color it up or middle node is three and you have to insert a new node at the position or the index three so how you can solve this I will give you one hint okay so for this operation to perform you need to find first the middle of the link list okay so how to find that we have covered one video go and check that if you watch then then it's good here you can see uh we had written one method to find the middle middle node of the list so we have to somehow managed to get first the middle node of the list you have to store that middle node some somewhere and then then you can perform the similar kind of operation that we have performed at over here where we are inserting the new node at the user specified location right so these are this is the operation that you can perform so go and give it a try and try to solve this problem enough talking so in this video we will be starting with the deletion operation which we are going to perform on a linked list all right so I will just make one line over here and I will write one comment we are performing delete delete operations okay so for this video uh we'll be looking at how we can delete a node of linked list which is simply linked list obviously uh at the beginning of the link list all right so we are trying to delete the first node of the link list okay so let me just go here this is our previous code I'm going to check that video If you have a checked all right so I will just write one comment all right why it is not okay all right so I will write one comment so we are trying to delete first node of the linked list so okay so we are trying to achieve this so first thing first let's get into our paint and try to build the logic for this okay so here all right no more requiring this new node so I can delete that okay wait let me select all right wait wait let me select this area so that I can delete it okay fine so this is our list all right so we are trying to delete this node which is head is also pointing to this node that is the first node of the list okay so we are trying to delete this so when you are trying to delete a node inside a list the only thing if you remember you have to do is you have to break the link between those two nodes all right so this is the link that joins this node this is the link due to which our list is going to get completed in the in this direction okay so when we are calling our print list method so we are passing that head if you remember okay and that head is going to get incremented at each time and how this incrementing part is done due to this uh just because of this next part okay so if that if this next is connected to this node then and then only we are going to move and this is forming a chain and this is forming a list of nodes okay so we have just need to break this link so that next time whenever we pass our head we are starting our list from this location and don't forget to upgrade update your head otherwise for the print list method you are passing this head and this after this head uh if you break this link and then the list will be only this this part only and your code will not work so in that case you have to bake this link and you have to update the heads value to the next value because in that case then and then only if you are trying to pass this head to the printlish method then only this this is our new new list that we are going to build okay and this node will be discarded uh not discarded we will not have any access to this node inside this list okay so this is the logic that we have to build let me just clear this out I need this for the upcoming videos also okay so let's go into our IDE and try to build this we'll write public static so think about it what will be the return type so here we are changing the head we are updating the head that means we are doing something a modification part inside our list so whenever the modification part comes inside the list there is one the method should return the new head of the list so that we can print it later onwards which is required for the printing the list okay so now I will write node s so this method will return one node that is a new head of the list delete at BK so this is our method name and this method will also accept one head of the list so we are passing one list to this method and in that return this method will delete the first node of the list and give us the updated head so that we can print that list later on all right so first thing first we will cover the corner cases okay so what if my head is equals to equals to null okay so if my list doesn't contain any element then in that case I don't need to perform any operation deletion operation all right so head is already empty then how can I perform the deletion operation all right so we will simply return then I'll sorry no in that case all right so if this is not the case then we are assuming that not assuming there are sure Surety that's there are some nodes which are present inside that list and we have to delete the first node of that list okay so we will create one temporary uh variable of type node and we'll assign it to the value of the header all right so head and temp will both pointing to the first node of the list and we'll write head equals to head dot next and in next part we will write temp Dot next is equals to now okay and now after that you will just write return head so what I have done over here is so two three line of code I will tell you so we are first creating a new variable of type nodes name temp so here you can see we are creating one more variable all right so let me just decrease the font size why it is not getting decreased all right temp and head are both pointing to this first these both are pointing to the first node of the list till this time okay so the next line is head is equal to head dot next so now we are changing the heads value to the Head dot next what the next part of this head is going to hold link to the next node of the list all right so we are changing the heads value to this so now our head is point head is pointing towards this node our new head is this oh so head is no more have the access to this node but the temp variable to have access so we'll write temp dot next is equal to no so temp dot next which is pointing to this node we will just simply write temp dot next now it will point to the so here you can see and after that we will simply return head that that means we are returning this and this causes our this this is the new list after that operation will perform okay so we have what we are doing we are just first of all assigning the temp uh creating one new variable uh temp of type node and we will assigning the value to the head that means the first node of the list and we are changing the heads value to the next node in the list okay by using the using what using next head dot next all right after that I as I have told you you have to break this link link if you want to break this link you have to modify this next part so for that we have written attempt dot next is equals to none so we are assigning the temp dot next to the null so that this temp node will no more have this access to this node and it will point to the null and our new list will be this and this all right so this is the idea behind this method all right so let's get an into our main function and I will call that method all right so we are making the list we are printing the list and over here we are calling delayed deleted at the beginning and we will pass that head okay and after that after passing the head one thing you can remember uh let me go there one thing you can remember this method is returning the new head of the list so we have to create an variable which will be holding our new head of the list which will be of type nodes let me call it as you head all right and we will again call the print list method and we will pass a new head of the new head of the list to this next all right so let me run this I hope this will work let me create one list uh as usual one two three four and five and this is the elements let me get out of this and you can see elements of the list are one two three four five uh this method is printing we are using the previous head so these are the element that we have entered and these are the element that is going to printed on the pencil okay so after that we have written this method call delete at the beginning so what it will do it will delete the first element of the list that is one and after that we are again called The Print list method okay so here you can see here called the printlash method and this print list method is printing the new list as two three four five why so because we have deleted this first node we are no more I have the access to this node and new elements are the new list think real English is two three four five so this is the idea behind the deletion of the node inside single link placed at the beginning okay so I hope you got this so in upcoming video we will be saving uh seeing how to delete a node at the end and how to delete the node at the user specified index uh like we have did in the insert operations right so thank you guys for watching this video and I'll see you in the next one so Helen welcome back to the new new video of the Java tutorial Series so till now we have look at the deletion operation we have again with the deletion operation and we have seen deletion delete at beginning okay so in this video we will be looking at the delete at end so now what I am talking is we have to delete the node which is at the end of the link list all right so before going to the code part as we discussed through paint let's discuss so to perform the delete operation at the end of the link list what do you guys think what will be required Okay so first thing we will require the access to the previous node right like that is the second last node of the list so as I'm assuming uh this this linkage okay so this is our link list and one one thing uh you don't get confused uh some YouTubers have told you to implement this single English without taking the tail and they are there just uh taking the head of the links list they are not assigning the Tails value and they are not maintaining the track of the tail so and I have taught you uh by taking the tail so I think uh this is the good idea to take till in the link list so that you can have at least the track of the two nodes in in the list that is the first node and the last two so that those are required whenever you perform some complex operation you know on your uh link list we'll see what I mean by the complex operation all right so this is the list one two three three notes are there and this is the Red Data part of the list and this is the next part of addition this is the link list okay so we are trying to delete the last one of the list so if you want to delete this node uh we'll require the track of this one this is that is the previous note to the last node so first thing we have we need the track to this node somehow we we have to get to this Loop uh get to this node sorry not Loop and after that we can perform some basic stuff that is we'll reassign the value of the tail to this so that our new tail will point to the new last node of the list and we will just simply uh that assign this part next value to the null so that our new list should look like this 1 2 and second node is pointing to the null and we don't have any more access to this nodes so this node is getting discarded from the list and this is our new updated list after performing the deletion operation at the end of the list okay so let me get rid of this okay so now we can go into our and right beneath of this deletion at the first node of the link list I will make one comment and I will write it as delete edit the end of the list all right so now since uh this this we are making this method and this method will be a public one and static also and now we are deleting the node from the list so our list is getting modified all right so we we are getting a new list so for that this method will also release or means pass or the returns one head of that list new list okay so that we can use the head later on to print print that list okay and we'll write delete at end and this method will also acquire the head of the list that is X to the list oops sorry wait guys wait wait wait wait delete delete at end and this will require node as head okay so inside this so as we have discussed in our previous video you know we are checking this uh if condition that is a corner case so what do you think uh here here also you have to check on Corner case right we have to check one corner case so what it will be if our head is equals to equals to null that means uh if the head that we are passing to this method that is that head is null or head Dot next is equals to equal state guys what do you think this condition will this is the r operator so I hope you know what is our operator those who don't know I will tell you our operator will evaluated uh this one expression and this one expression and whether any any or operator what it does simply if any one of the condition is getting true this if condition will uh will be executed all right so if the head is equals to equal signal or the head dot next is equal to equal signal if any one of this condition is evaluated as true this if condition will be get perform and we'll just simply return simply return the head okay and what we have doing over here is if the head is equal to equal to null means this is the condition where there is no element inside the list all right and this when head dot next is equal to equals to null that means uh head dot next that is this location is pointing to the null so what what is depicts is there is only one node inside the list and if there is one node inside the list so technically we can't remove the end of the list and end node of the list okay so because there is only one layer one node represent inside the list so we can perform this operation in that case we will simply return the head of the list that means uh this is the condition all right and after checking that corner case if that corner case doesn't evaluated then we'll simply create one node I will name it as previous so because we have discussed in our logic part we need to keep the track of the previous node of the link list that we are going to delete at the end okay so now we have uh declared one uh variable of previous previous of type node okay so we have to take that currently uh this is previous is pointing over here we and now if you want to delete this element we have to get this this previous somehow to this location so that uh what previous will do it will uh hold or keep the track of the node which is just behind the tail that is the second second last element of the list okay so we have we are performing this while loop so that we can keep the track of that previous uh until previous Dot next is not equals to tail and I hope that what is still you know the tail is the last node of the list so whenever this until we reaches to the tail which is the previous node of the tail we are performing this and each time we will be doing previous is equals to previous dot next previous dot next that means we are in implementing the previous value to the and uh once we have reached to the previous uh previous node we will just simply write 10 is equals to DBS and now we will write 10 dot next is equal to another all right and after that we will just simply return the head of the list so here you can see we are declaring one previous variable uh and assigning to the value of head we are looking one while loop and we are taking that previous variable to the second second um second end of this which is the second element from the last of the list and after that we will just simply assign the tail value to the previous that means we are shifting our tail to over here and we will just write tail dot next is equal to null that means this this will point to the null now this will point to the null and this link will got broke and we have no more track of this node which is which is previously at the end of the list and our list will be like this one two and null all right this is the logic behind deletion at the end okay I hope you got that idea and now we will go inside the main method and now here over here we will just call this methods that we have declared above and we'll delete and end we'll pass that head and after that since we are getting the new head from that list so we have to capture that your head work your head equals to and we'll see when you had this okay let me run this okay so we are entering the nodes uh like one two three four five and after that I will write 1 so here you can see uh before performing the deletion operation the linkage would look like this one two three four five and after performing the uh let's delete at end operation uh we are printing again the list and this time we are printing one two three four and we have deleting the element which is at the end of the text okay so this is how the deletion at end works I hope you got this idea how it is works so if you're not get any idea go back and watch this video again so in our upcoming videos we will see how to delete a node inside the single English which is at the user specified location all right so thank you for watching this video so hello and welcome back to the new video of the Java tutorial Series so till now we have covered deletion at the beginning deletion at end and now in this video we'll be looking deletion at user specified location like we have seen in the insert operation at the specified location we are trying to delete a node which is user will tell that like this is the list and this is the position and at the node which is present at this position you just delete it okay and give me the new list all right so let's go before writing the code as we discuss our logic inside the paint then go and discuss it okay so let's suppose this is our list one two three there are three notes inside the list and me as a user gives My Method the input as like this is the no this is the list you just remove the node which is present at the position two like this is the node that we have to delete all right so in that case so I want to perform the deletion operation so now we will check what are the things that we have to do so here if you want to delete this node we have to break this link and this one and if you break these links this node will get discard discarded we have no more access to this node and after that you have to do assign value of these nodes next to this this way this node so this is our so after performing this operation what will be the least this is our list one two and we will be not having this notes access anymore after performing that deletion operation okay so these are the things that we have to do and let's see how we can do this into our foreign okay let me get rid of this so now here uh we have to perform or we have to create that method which will delete our node at the use a specified location all right so I will just create one comment delete at user specified location okay so this method is also public one static and this is also going to return a new uh head of the list so that's why we are writing the return type it as return type as nodes and I will name this method as delete at okay so now uh this method will also require head of the list and it will perform operation on that list okay so first thing first uh like we have discussed in the insert operation I hope you watch that video and like that here also we required one position and count variable and we will assign both value as one K and now uh we'll write system.out.20 line and yeah ask we'll asking the user also position enter the oh session of the node you want to delete okay so we are asking the user to enter the position of the node that you you want to delete okay so after asking that position we have to store that position somewhere so we will be storing that position inside the position variable so you write SC dot accent you'll get that position from the user and here also we will check one corner corner case what is the corner case if position equals to equals to one if that is the case if the position is one that may that means the user is trying to delete the node which is at the beginning that is the first node of the list so we know that how to do it and we have discussed in our previous videos also we will simply assign heads well to the Head dot next that means like here if the user want to read this this node we just have to Simply pass our head to the next node and we will simply return that node from this and from this onwards the list will be that much only and you will no more have the track of this node so this is the corner case that we have to check if the interview and user enters the position as well we will just simply assign the head is equal to head.next now if not if that is not the case will come into the else part and we will create one node notice of name Will name it as previous okay and previous and we will assign it first value to the head and we will run one while loop while my count is less than position minus 1. so uh what is the condition that we are doing well until my count is less than position minus 1 so here you can see uh this is count is 1 and position that we have entered is 2 2 minus two minus one is one so one is less than one which is not getting evaluated as false we are not going inside this while loop so this is the condition where I have a small list right so imagine we have five notes in that list and we are trying to delete the node which has a parent at the third index so we have to uh perform this while loop at once because we have to get that previous node to the uh second index that is the previous index let if you want to delete the third index third index node uh you have to get that previous node to the second index node okay so how we can get that we will write previous is equals to previous dot next and we will simply count plus plus and after that while they're coming out of that while loop we will write current is equal to previous dot next okay current is equal to previous dot next time previous dot next is equal to current dot next what I will do what I have done here is I will tell you don't worry and After exiting out this cell else Loop we'll just simply return the head of the list okay so this is pretty much that we have to do so till while loop I have I have told you what we are doing we are just simply creating one previous node and we will keep that previous upgrading updating updating until an endless will reach the previous node like I'll give you one example so this is the list one two three four five and we are trying to delete the index which is three and this is our head this is our tail and this is the position at which we are you want to delete the node okay so at first our previous is here so we are upgraded previous and come come the previous to the here so that our uh correct this is the current when we are assigning one current and creating one current and current is equal to previous dot next so after performing this step uh so our current will Point pointing to the index at which the node we want to delete and our previous will point to the previous node of the list okay and uh we'll just write say previous dot next is equal to current dot next we will simply create a link between these node and this node and we don't have a link between 2 and 3 and 3 and 4 because the link which is created by this line is one two four and five so we have no more have the track to this third node inside the list because of this line line we have written previous dot X is equal to pattern dot next and after that we will simply return the head of the list okay so this is the idea that's okay so let me call that method delete at we will simply pass the head of the list and this method is also returning one head so we have to store that new head somewhere so I'm storing over here and after that we'll write print list and I will pass that new head so this is the idea behind relation it is a specified quotation Let's test it out one two three four and five this is list and uh you can see one two three four five is the list elements and let's suppose I have to delete the element which is at third index which is a third position so I have to delete this three so I have pass 3 as the position don't get confused three is the position not the value so here you can see the new list is returning after that method call is one two four five that is third position element is getting deleted so if you don't get don't get confused I will just run it run it again and I will write it simply 55 69 96 89 now you can see I I know if I want to delete the 96 I can delete it by its position one two three and four fourth position is 96 so I want to delete the fourth note of the list here you can see 23 54 69 and after that 96 is getting deleted and 89 is uh again come at the end of the list so this is the idea of delete deletion operation at the user specified location so I hope you got the idea thank you for watching this video so hello and welcome back to the new video of the Java tutorial Series so till now we have covered singly linked list all right so let me show you if you are watching series uh so that's no problem but those who are watching just want to learn the links list part those for those I am telling we have covered this singly linked list we have covered all the operation we have covered insert operation deletion operation both three types insert at beginning insert at end inserted use a specified location likewise deletion operations are also performed we have uh covered how to make the list how to print the list how to print the length of the list how to search the element inside the list uh and and how to find the middle node of the list how to reverse list all these operation we have performed on The Single link list and I guess this is the uh pretty much idea that we have we want uh regarding the link list so now today onwards we are looking for the W linked list so let's get started so what is WL English uh in this video I will be telling you the theoretical part regarding the W links list so let's get started so let me create create a create a list over here okay let me create a list we'll try to understand each concept line by line okay so this since the one this is the line okay this line so okay so till now uh what we have covered is sincerely fish we know inside single English this is the node this is node which is which looks like in single English there is one uh link which is coming from here and there is link which is going here that is one node is connected to this node and this node is again connected to the another mode in the in that list and here this node contains data and here this contains next part okay so why this is this list called as single English is simple because this node is connected to the next node via a single link okay this is the single link that is getting connected to the next node so whereas it is doubly increased if you can see the node structure is different okay so this is the one and this is this is pretty much simple and single in English but the node inside a w linked list is represented as like this this this here here again here and one more here forget about my drawing okay just keep focus on the concept okay uh this is a that is the difference here you have only the data and the next part next part contains the address to the next node in the list and data part contain the actual data so here also we have a data part likewise here also we have data part here also we have data part and here also we have data part but nothing changes over here here also we have next part that is an address to the next next Link in in next node inside the list here also next next and here also we have next here also we have next and uh the this part right over here this contains previous okay I will tell you what is previous just bear with me uh previous previous okay so and one more thing is there this is one more linking over here this this which we have not seen in the single a link list all right this is the this becomes the and single in English it's uh one more thing single in English you can see uh is One Direction okay that means uh if you start from left it will go to the right only you cannot come back in that link in English it will go from left to right you you don't have any way like we have you have gone to the next here from this next node this from this next node you cannot come back okay all right so so this is the thing that we have seen in a single English we have node like this you can see they just keep tracking my pointer and each node contain previous previous means previous will hold the address to the previous node inside the list all right so if you if you can consider this one so in this previous part the address of this node this node will be saved over here okay so address of this node will be saved over here and in the next part the address of this node will be saved over here and in the data part as usual the actual data that node is going to hold that will get stored here okay so you will be asking uh what are what if the if it is the first node already if it is a large node then in that case the first node previous will hold the value of 1 minus 1 and the last node of the list next should hold okay so this is the roughly irf idab uh W in English the advantage you get here is you can go from a left to right and you can come also backward from right to left because this this you you can get this idea better better you can check it over here this is the direction of the nodes this is the direction of the notes you can see here here here next node and the previous node the only thing is there are two ways you can go front by using the next and you can come back using the previous so instead of having just only one uh way where you where you are going from left to right in the lovely linked list you have the access to the next node also and the previous node also why so because it at the node part of this double link which contains the three parts that is the previous part data part and the next part previous part will hold the address to the previous node in the list and the next part will hold the address to the next Lane next node in the list and the data data part as usual holds the data whether it should be in uh in integer format character format string format any data type format data can be stored over here okay so this is the doubling fish idea and this is the theoretical part that you need to understand before you get your hands dirty using the totally linked list okay so go one more thing you can go in the web browser and you will just simply type doubly link list let me show you doubling English if you type and then first link in Java D Point comes and if you go here and here you can see oh nice article is there which will explain uh all those stuff regarding the doubling list I hope you got some idea about the public increase on the next next video onwards we will be start implementing the W link list using Code using Java thank you for watching this video so hello and welcome back to the new video of the Java tutorial Series so till now we have covered all the operations on the singly linked list so here you can see uh I hope you either are followed the series along with me and so we have seen how to make this English how to print it how to search an element how to find the middle node all the insert operation and all the delete operation as well so what I'm I will be thinking is from this video onwards we'll be starting for w linked list so we'll uh in our previous video we have saw the theoretical part of the VW link list any for me this video onwards we will be looking for how to perform all the operation on Adobe link list all right so for as we have discussed in single English we require one node which so the single legislation is made up of nodes so we have to make a node of our W link list so we cannot use the node which I which we have made in the single language because in WL English there is one uh previous pointer as well as the next pointer was there so that we can move for bi directly we can go uh left to right at the same time we can come right to a right to left as well okay so for that we have we will be covering uh creating one Java class so I will name it as node D node d means node of uh double in English all right so in this uh first of all we require data part so I will name that variable data and we will require two pointers that is the node d uh I will name it as previous so that it can hold the it will hold the previous address of the previous node in that list and one more is there node of type node D which is next which is as usual as we have seen in a single language part all right so now here let me call one Constructor of this class so that whenever we create an object of this class uh we have to pass the data data to this class so that we can make that nodes using that data okay so this Dot data is equal to data and it's for the first mode we will write as previous is equals to null and next is also equals to now all right so both are pointing to the two Arsenal uh for the single node okay so now what I'll be doing is this is our node part that that is pretty much we have to do and now I will go and create another Java class and I will name it as doubly link list list okay and I will hit enter all right so let me just increase the font size let's check whether I can increase it or not no I guess I can't decrease I hope you guys this font is visible to you all right so since we are taking input from the user so there is one library that we have to import first so I will import that import Java Dot ail dot star I will import every class from the util package and now inside this will create a object of the scanner class since we are looking multiple multiple methods inside this class so I will declare the scanner object of that scanner class uh globally okay public static scanner SC is equals to new scanner system dotting okay so now after creating the object of this class let me create two new variables so those those are will be it's public static off type node T so I will create add entail so as we have seen in our uh single link list lectures so we have here again we require a head and tail so that we can keep track of the first node of the list and the last node of the list all right so now in this video we will be talking about how to create a doubly resist okay so for that I will make one method I will name it as public sorry I will do it in next line public static and since it it is making our new linked list which is of type double link list so it must return the head of the head of the list so that we can get that head and print and perform all of the operation that we want to perform on that list all right so it it will return uh head which is of type node D that is the node of the double linked list okay so make I will name it as make list as we have seen our single English lectures okay and so here uh for the first time whenever you create a whenever we want to create a list the head and tail at initial point though those two will be pointing towards the null and now here also I will write 10 is equal to name and after that we will simply uh print one line and we'll ask the user to enter the data all right enter the data in the list okay so we are asking user to enter enter the data in the list and create one new variable data and SC dot extent will take the data from the user and again we will run one while loop and we will iterate over this while loop uh until an endless our data part is 1 so whenever the user words uh let's suppose user want to enter inside the five five elements tables like one two three four five and after that user can write a data value as minus 1 so that this while loop will get break and our W link list will be make it as one two three four five only okay so here we will uh whenever we get entered inside this while loop we know that enter data part is not 1 so there is a user who wants to insert a new node in that list so we will make that a new node B and we will call it as new node D and we will pass the data part that we so this is the Constructor that we have build it over here so we are passing this data to this data to this Constructor and now after passing the data after building the Constructor we will write one if condition and we'll write if head equals to equals to null so think about think about it whenever head will be null so if it had a heading head is pointed towards Channel if and only if it is the first element that we are going to that we are trying to insert in the W link let's write so in that case we will just simply uh assign the head value to to the a new node a new node D value and we will assign the tail value is it also equals to new node value because ultimately uh this is the first node inside that list so therefore head entail will both want to get element uh so sorry L not element that node itself okay so we will write uh new node d dot next is equals to null and we'll write new note D Dot previous is also is equals to not so both will be pointing pointing towards channel so because there is no uh new node inside uh another node inside that list it since it is the first node else uh so whenever if head is not equal signal that means there is there are some elements there are some nodes which are present inside that double in English so we'll come inside with a else part we will write tail dot next is equals to new node new node d and we will write new node D dot previous is equals to 10 we will write tail is equals to new node d and we will write 10 dot next is equals to okay so these are the tasks that we are we are going to perform is if it is head is not equal head is not a questionable uh so what we will be doing is uh tail dot next uh is equals to new node so we will uh assign uh the whatever the node which is at the last the tail is there all right so we are assigning the Tails next value to the node that means we are making that link for the previous node in the list to the to that next part okay and so here uh new node dot previous is equals to 10 and we are assigning new nodes previous to the tail that means we are making this linkage between the last let me show it let me show you let's suppose uh let me commit it out suppose this is the list one two three and we are trying to insert 4 inside the W link list okay all right so here uh we will as a tail is here ultimately uh this is this is the last element in that list tail is here we'll assign the Tails dot next that means this nodes next part to this new node okay so we are making this uh left to right connection in this wave language and we will write new node dot previous that is this this nodes previous to tail so we are making that right to left connection as well and after making those two connection we will simply uh change the value of the tail we will assign the tail is equal to new node because since this element is getting inserted for in the in the list so uh so this becomes the last element uh for now that's why we have to update the tail since the tail is keeping the track of the last node inside the list all right so and you will write tail dot next is equal soon as so we assign this next to the melts indicating that this is the last element inside the list okay so these are operation that we have to perform after performing this operation either the If part will get executed or the else part will get executed executed after that we will again ask user to give us a new data okay so it will ask again the user to enter the new data and it will again go and check whether the data part is not equals to one or not when it is equal when it is equals to 1 minus 1 it will go out of that Loop and we will just simply return head of the list okay so this is pretty much that we have to perform inside this okay so these are the operation uh I hope you got the idea how to make a doubly links list so let's quickly run this so for running purpose we require one our main method so we will write a main method here and inside this main method we will call our make list function and you so for our make list function since the make list function is returning ahead to us so we will have to store that head this head variable all right and after this let me call this okay so let's go and run this if you are not getting any errors we are successfully trying to end okay so here you can see enter the data in the list let me make a list as one two three four five and uh if I say uh it's done I these many elements that I want to insert this list after that I can write 1 and it will came come out of this for Loop not for Loop sorry white Loop and after that it will return the head list so this is the idea behind how to create a list which is of w type w is in doubling W link list okay so in a upcoming videos we will see all other operation of the W link list so thank you for watching this video so hello and welcome back to the new video of the Java tutorial Series so till now we have covered the doubling list one functionality that is how to make the doubling list how you can make one doubly linked list using Java and uh in our previous video as you as you can see we have created created a node um which is after which is of double type double link list which have which can go bidirectional which can go from this node to this node and it it can also come back from that note to that one that is left to right and right to left okay so in the our previous video we have also talked about uh how to create a w linked list so how to build one so if you you haven't watched that video go and check that video first watch that uh then come back to this video so now in this video we will be covering how to uh print the list all right so in our previous video we have built the list so in this video we will uh talking about how we can print the double linked list okay the logic is uh pretty similar to the that one that we have seen in the single English okay so in this video okay let me just first make this notes so that you guys can understand easily all right so let me just quickly make that make that list for you and I will make it as this one this one this this by the way guys how you how you are enjoying enjoying this series I hope do comment out if you have any doubts I will clear it out all right Okay so don't mind my drawing just focus on what I am trying to tell you and you'll get that what I'm trying to tell you okay so look at here this is our double link Lister so this is the direction that we are first going forget about it let me take my pencil this is the direction and in this direction this will be Direction okay so you can go from uh this this direction also and if you want you can come from this direction also so we are trying to print this list okay so first thing first try to let's try to pseudocode this all right so we will try to think or build one logic okay so what do you think how you can print this list okay so uh there is a concept that uh I have taught you in the previous video like this uh we have keeping the track of the head and tail all right so if you guys can remember head head means the node that comes first in that list okay so for that here is the head and tail means the last last node of the list okay so we are going to use head you can also use Tail as well but in that case you will be printing the list in the backward Direction okay so in this video I will be talking how to print the list in this direction okay so you can take it as homework and you can try to solve uh or build one logic where you can uh where you have the Tails axis Tales means this is the last node of the list and you can you're going to print uh list in a backward backward Direction okay so it's you can take it as a homework so okay uh here we'll use head okay so we will run a while loop to check whether to pre not check to print this list okay so we will we will use the while loop and you will use the head okay so each time we will get get to that head we will trying to paint that data get to head print the data okay after printing the data uh to move to the next node in the list we have the next uh next uh next ad next pointer which is holding the address of the next node so we will write logic so that data uh data uh the head will move to the next node let me increase it to the side of the Box okay so first thing first we will get the head we will print the data inside that node which head is currently pointing to and where uh assign heads value to the current head dot next so we will iterate through this whole list and when we are trying to stop whenever our head is pointing towards another okay so when our head is point to point will Point towards anal when it when head will come here and we will assign the new heads value to this its next node node and it's there is no next node inside the list so head will pointing towards anal and we can stop at that condition okay so quickly we will go in our IDE and try to quote this out okay so we will here I will make one function or method whichever you you call it public static so we are just printing this list so we are not uh doing anything uh any operation we are just printing the notes of the list so there should not be any return type for this method and we will write print list okay and uh since uh we want the head of the list as our input to this method you will get that head and as as I said told you we will just simply print uh elements in the list are and after that uh we will perform one while loop and our while loop will run until our head is not equals to now okay so if the head is not equal to null we'll just simply print the heads data so we will write head.data we are trying to printing the data and after that we will print one one space because for that our elements can differentiate with each other so one space should be there and after printing this we will uh reassign the heads value to the Head dot next add dot next we'll assign this value to the head so that way uh we can it iterate to the next node in the list okay so if our head is equal to equal to null that means we are at the end of the list we are printed all the all the elements so we will just print in print One new line so that whenever we will build another function so function call gets executed to the new line okay okay so here in to run this method we have to call that method we will write print list and we will pass the head that we have stored here while making the list okay so what we are going to do here we will make the list and we will print the list okay I hope there will not any error let's see if we got any error okay so for now it's running okay so now let me give the element as one six eight nine four five six and after that we will write 1 okay so here you can see elements of the list are one six eight nine four five six these are all the elements that we have I have entered over here okay one thing is uh this is printing the new every element in the new line I don't want that because yeah if if there is 100 elements in the list and we are trying to print that list it will take the whole lot of space in the console okay so we'll try to eliminate that uh we can do is print Ln instead of print Ln we'll write print and we can again call this method so that instead of printing the each element in the new line it will print it in a single line itself okay six six five one two four five minus 1 will print a six six five one four five nine these are the elements that I have entered over here you guys you can see so this is the idea how you can print the W linked list so you can try uh to print this same list in a backward for backward Direction you have the Tails uh axis that is the last note you can build one logic and try to print this list in a backward Direction okay so thank you for watching this video and I will see you in the next one so hello and welcome back to the new bit of the Java tutorial CB so till now we have covered or or you can say we have started uh to seeing the W links list so we have uh seen how to make a doubly linked list in our previous video we have seen how to print uh W link list so what we'll be doing in this video is we will try to implement another functionality of w linkage that is how we can find the length of the replication all right so let's go in our print and we'll first as usual we will try to build the logic by using the paint and after that we will go inside our ID and try to cut it out all right so here what you can think of how we can find the length of this link list so here let me to three forget sorry about my drawing four so these are the four elements in that in this W link list so we we have to make one function that that will take the head of the link list uh W linkage that is our WWE in English it's uh and it will print or it will give us or return the length of the list like the how many nodes which are better than inside that list okay so for that uh we can't perform it in two ways like we have did in our uh previous video where we are trying to print the list I I have told you uh we can print the list in two ways also by using the head and by using the tail also if you are going to use the head you are painting the list from left to right and whenever you are you are trying to print the list using the tail we are you are you you are printing the list from right to left that is in the backward Direction okay so here also we can uh use both the approaches of head and tail if you're trying to print the find the length of the list using the head that means you are going from left to right and whenever you are trying to get the elements or how many elements are present inside the node you are just from by using the tail you are simply going from right to left okay so these are the two approaches in this video I will be talking about the approach that uh that is uh for by using the head you can try to solve this similar method by using the tail as well take it as a homework as a challenge you can solve it okay so here for the printing purpose we know we have had we just have to okay so first let's make we have head is given to us all right and now what we will be doing we will create one create one counter variable variable we will create one counter variable which will count the nodes in that list and we will increment we will increment the heads value each time and we will require while loop also to perform this operation okay so idea is simple we will run one while loop over this over this doubly linked list and what we will be doing we are just iterating over this linked list each time we will update the value of the head and each time whenever we are trying to update the value of the head which we will also increment the counter variable by plus one uh we will we will write a counter variable by plus one so that we know we have passed from one node to another node and we have we will count that nodes as a node in in the link list okay so this is the idea let's get it get into our IDE and try to call it out okay so we'll make one functional method whatever you call it public static so this we are simply finding the length Okay so I don't think so we are we have to pass all we have to return anything so we will for now we will type the return type as wide and I will name the function as length length and since we are finding the length we need two axis the head that we will get from the user and after getting the hair as we have till we will need one counter variable so we will need one counter variable I will name it as Z account and I will initially we will assign it as value 0. and we will run one while loop while our head is not equals to now so until our head will not point to null we will perform this operation if our head is not pointing towards General that means there is a node inside the list we have to count it so for that purpose we will write count plus plus so don't get confused uh this is just uh as equals to the this one count plus one this is the plus plus operator that we can use whenever you want to increment the value by one this is as similar as this you can write both of both anyone anyone from this it will work at same okay so we will write head is equal to head dot next okay so we'll uh increment the heads to the next node okay so we will perform in this operation until the head is not equal when that head is equal to null that means we have we have successfully iterated over all the nodes in that list and after that we will just simply write the length of the list is value of the count over here okay so this is the idea behind the length function okay so let me get into our main function main method and we'll call that length method and we have to pass the head all right so we are passing head over here okay so you guys are thinking uh what if the heads there is no element present inside the list so for that we have also covered here we have assigned 0 as a count value if the if there is no element which is present inside the list that means head is our head is pointing towards the null all right so if the head is pointing towards the null this will not evaluated as true and this will not run while loop will not run and we'll just simply print the length of the list to 0 that means there is no element inside that list okay so we will check that once we run let me just run this first so that you can get the idea let me take one two three four and five okay minus one so here you can see element in the list are that is our previous videos output that that is we are just printing the uh notes in the list and the length of the list is five because one two three four five there are five five elements in the list we have sampling the simple bending the length of the list is five okay so we will check one one more condition if there are no notes present inside the list we will write 1 simply we will write minus 1 that means we are not interested to uh create any node inside the list okay so element in the list are there nothing is going to get printed over here because there are no no notes in the list and the length of the list is also zero so it's working fine so I hope you heard the idea how to print the length of the list how to print the list and how to make the uh doubly links list so in our upcoming videos we will uh perform some more operation that is insertion operation and deletion operation which we have performed in the single English also so see you there thank you for watching this video so hello and welcome back to the new video of the Java tutorial Series so till now uh we have covered uh wait we have covered the how to make the list how to print the list how to find the length of the list so in this video onwards we'll be performing the insertion operation on the our link list that is of the typewritten list so in this video we will be seeing how we can insert a node inside a w in English which is at the beginning so we are trying to uh create one method which will insert a new node in the W in English at the very first position of the English Okay so assume I will take the last video output it's a paint itself so here here you can see one two three four four nodes are there and we are trying to insert a new node in the list so okay so let me just create one new node quickly uh so that you can understand so this this here uh hero previous value will be stored here our next value will be stored and here comes our data okay so uh look at here we are trying to insert this node over here okay so initially uh you can see head is over here and tail is over here so in this video we are looking about inserting a node in the beginning so we don't have to take care of the tail tail part we just had to take care of the head part okay so look look here this is the previous so wait let me this is next so if if you are trying to insert this node inside this uh existing W link list so what you what all think you you have to do you can see uh this head next is pointing to this okay and this heads previous is pointing to the towards null so uh this this is that represents our first node because the first nodes uh previous should always point to the null uh that represents this is the first node and that next should point to the next node of that uh list itself okay so what we can do is uh we have two and uh build the connection of here this is our new node new nodes next to the this node okay so we are building that connection by assigning the new nodes next to the Head value heads is representing to the first well first node of the list and after that we have to uh give our assign the value of heads previous to this new node okay so we are assigning uh we are telling that our uh this heads previous should point to this new node okay so by doing this uh we have successfully uh linked our new nodes next to the uh current first node and we are linked heads previous to this new node now we just we just have to Simply get back our head okay so we are assigning the value of head to this new node so that uh this will Point uh this head will point to the new node and this new node will become the first node of the list after an insertion operation so these are all steps that we have to perform uh so that we can insert a node in the very first beginning of the W link list okay so let's go and try to cut it out okay so come I will come here uh I will comment it out and I will write one comment insert at beginning so that you guys can understand I I am sharing this code as well insert at beginning okay short form you can see okay so let me create one method I will come here and I will write public static uh since we are inserting a new node all right so we have to return the new new head of the list so that we whenever and next time we are trying to print that list uh we will print the list from the updated header head okay so we have to return on no a new head of the list so for that return type should be node we are returning a node all right so and we will write insert at beginning okay so we'll write this and uh obviously uh to insert a node in the list we need a existing list as well so we'll ask for user to give us a list first so that we can insert a new node inside that existing list okay so we'll write simply write first of all we will ask the user to enter the data first we are trying to new uh insert a new node so first of all we have to create that new node enter the data to insert okay so after asking this we will simply create one data and we'll ask our user to hey give us one integer to that we can assign the data part of that node okay so after creating this we will just simply create the actual node we'll assign name it as new node of typewalling list and we will write new node D and we will pass that data to the Constructor of the node D class okay so first thing first if you if you are trying to insert that node inside a w links list what if the list doesn't have any elements okay so how to check that case if the double linkage doesn't have any elements simply we will write head is equal to equal signal if head is pointing towards a null that means uh that linked list has no elements no nodes inside this and since this is a it is a double link list so we have to write one more condition we have to check whether the tail is also pointing towards another so in that case uh both of if both are pointing towards null that means the list is empty so we will simply write head Dot sorry head is equals to 10 Dot sorry we'll just write in is equals to note you know my ID sucks man okay head is equal to 10 is equal to U naught okay so we will assign that new nodes value to the head and tail simply okay that means we are trying to insert the first node inside the list which is pretty simple okay so if that is not the case uh that means the list we have passed through this function has already contained some elements uh contains some nodes so in that case we will come inside this else part and as we have discussed in our print paint window here you can see we have to assign the next part to this head and this previous part to the uh new node okay so for that we will go and write like this head dot previous is equals to new node okay so what we have done first we have uh heads previous which is uh currently pointing towards anal we will take that and we will assign the value as new node so that this backward linking should be uh should get connected first and after that we will write new node you know D dot next is equals to head okay so what I mean by writing this is new node dot next is equal to head so we are creating this linking now okay so we are linking our new node to the existing head okay and after creating these both links we just have to create head is equals to new node okay so we will just simply reassign the value of the head to the new new node because our head will change and now because we are inserting the uh node at the very first beginning so our head will change so we have reassigned the heads value and we will just simply write a new node D dot previous should point to the null now our new node uh is our the first node so its previous should point to the null so before that there is no element in the list additional Point set okay so we will just write simply return head we will return the head which is the updated head okay now this is the idea I guess okay so let's test it out we will write okay let me comment it out insert Ops insert operations we are performing from this onwards okay let me call insert at beginning and I will pass the head we are that we are taking from the previous videos itself okay and now after performing this uh method this method is returning one head okay so we have to capture that head somehow in our main method so we will create a new node of type D we'll assign the new head is equal to so I will call it as new head because head is already declared over here so you can't give that same name to the again and again okay and after that we will just again call printless method so that we can see our new element uh is there or not okay now but this time we will give the new head because head is updated because we are trying to inserting the mode in the first okay and we will again call the length method and we've got new head okay so let's go and check it out whether it's working or not okay we are trying one two three four and five and after that I will give minus one so here you can see element in the list are one two three four five these methods are running by the way I will tell you and after that the length of the list is five you can see one two three four five five elements are there and now now it is asking me to enter the data okay so we will let's suppose I want to enter 10 okay so you can see element in the list are ten one two three four five and the new length of the list is six because we have entered a new a new element in the list at the very first beginning okay so this is the idea behind uh insertion operation in the double English at the very first beginning okay so I hope you guys got some idea if not go and go backward and watch the video again you will get it if you have any doubts ask it in the comment section and like share subscribe thank you okay so hello and welcome back to the new video of the Java tutorial Series so till now we have started seeing the doubling list and we have seen some of the operation on the wax as well uh that is the insert at beginning and finding the length and printing the list and making the list so what we will be covering in this video is how to insert a node in a w news list at the end of the link list okay so at the end of the doubling Commission dot get confused okay insert at and okay so this is our Target we have given one list of type double link list and we have we want to insert the new node in that list existing list at the end of the link list okay so this is the task that we want to perform okay so here you can see this is our new node this is our new node try to follow my pointer uh its previous is this and next is this both are pointing towards analogy itself and this is our list one two three four elements are there in the existing double link list and this is our head which is pointed the first element in the list and this is our table which is pointing to the last element in the list so remember in our previous video we have talked about the insertion at beginning where we have we have formed all the operation using the head itself because head is head represents the first element in the list and they represent the last so in this video we will be talking how to insert a node in the last so for that we require a Tails access so that we can perform all the okay so to perform those operations we'll just simply see how we can uh do this okay so now first thing first uh we have to check whether the list is empty or not like we have seen in our previous video if the list is empty then we'll simply assign the heads value uh to the new node and tells value itself to the new node we don't have to take care of the all those things whether it is uh we are inserting at the first whether we are in setting at the end since it is the first uh node in the list there is no first and last out in that list okay so we have to check that Contour case as well we will check that in our KO code and else if that is not the case here you can see this if it is the case that there are some elements there are some nodes which are present inside that list so in that case we have to perform some operations so that we can uh enter this node at the end of the linked list okay so what we will be doing uh we'll assign the tail dot next is equal to new node so this is our tail which is currently the last element and we'll assign the Tails next to the new node we'll make uh since the Tails next is uh pointing towards a null because since this is the last node we this next is pointing towards nulls we will make that next to point to over the new node okay and we will assign new node dot previous is equal to tail we will assign this we will make this connections okay and after making this connection both next and previous connection we will just simply write a new node dot next is equal to another so uh if we are inserting this node inside this W linked list so this will come at the very end of the list okay so it's nulls next should be pointing to the null okay after performing after creating this those two links we'll just simply make this make this uh next to point null okay so it will represent uh yeah this is the end of the niche you can you can't move forward okay so these are operation that we have to perform so let's go and call it out okay let me get into my IDE okay so we'll make one function as usual we'll write public static and we are trying to insert a node in the links list okay so after that we will we have to return uh new list that is updated list to the method okay so for that we will write node the return type should be node D and we will write the function name as insert at end and here we are trying to pass the head of the list so that our method should get the access to the entire list by passing the head of the that is the first node of the list okay here we will just simply print uh enter the data you want to insert quickly I will write enter the data that you want to insert okay and after that we will simply create one new variable of type data and we'll write SC dot an extent and get that data and since we have now the data we want to insert a new node we first we have to create that node we'll create that node like new new note D new naughty and we'll pass the data to the Constructor of the node D class and again I have as I told you we have to check the base case of the corner case that is if the head is equals to equals to null and our tail is also equals to equals to null that means there is no node inside the list the list that we have given over here to this method is empty and there is no node inside that list in in that case we will simply write head is equals to tail is equals to new node that's it and if that is not the case we will get into the latest part and we will write tail Dot next is equals to new node you know D and so by writing this line what I mean is tail dot next is equal to new node D here you can see this is our last element and this is next is pointing towards now so its next is should not point to the null anymore uh we will take that next and make it Point towards uh our new node okay so now the Tails next should point to the new node and after that we will write new node d uh new node D dot previous should point to the tail okay what I mean by writing this sign is uh you know this its previous should point to the tail all right so we are trying to make this connection from the previous previous last node and our new Nash node okay so we are trying to make that connection after making that connection we will simply write new node is equals to next is equal to no after making that connection successfully we were updated A Lash node should last notes Nets next should point to the null we'll make that uh make it to pointing to those signals and we will simply return the head of the list that is our updated list okay so let me go here we are trying to perform insert operations uh we will just simply comment it out we don't want to insert at beginning now and we will write node the new head new head is equal to insert at end and we will pass the head of the list to this method and after that after performing this operation we will we have to check whether the node is getting inserted at the end for that we have written our print list method in our previous video If you haven't watched that go and watch that first so in the comment say title over here and we'll pass the length the length also over here okay so we will just simply run this to check whether all these certain fines one two three four five let me ask you minus one so I limited list is one two three four five and the length of the list is five okay so the here here it is asking the enter the data that you go on to insert okay so let's suppose I want to insert 10. and I will hit enter okay so here you can see element in the list are one two three four five and ten and then length of the list is six because we have added one more uh node at the end of the nucleus successfully okay so this is the this is the operation that we want to perform in this video so thank you for watching this video and I will see you in the next one hello and welcome back to the new video of the Java tutorial Series so till now uh we have started doubling list and we have performed operation uh like insert at beginning insert at end s and all those other stuffs like making the list printing the kind of the length of the list okay so now in this video uh we will cover a how to insert a node in a doubly linked list at a user specified location okay so user will give you the data and you will tell the dislike this is a this is the location at which you have to insert this node excitedly linked list okay so I will just simply write a comment insert at position okay we have to insert at position okay so let me quickly get into my paint so that we can build the logic okay I will just create a three notes just to get you give you an idea how and what we are trying to achieve okay and now here let me create those nodes quickly okay these are the connections since it is a double in English so it has one previous and next as well it is pointing to it okay don't mind my drawing okay this is the oops like this is the node that we want to insert okay and here we go okay so this is the node that we have we want to insert so there are normally uh like starting one uh two and three so there are three elements in the list okay and we want to insert this new node inside this list okay so look at here how we can do this so this is a little bit uh tough to understand if you got this well and good if not go and watch the video okay okay so we are trying to insert this okay so tell me one thing uh one position should be associated with it right uh user will tell that uh okay so this is the note that we are that I have to insert in this list at position number two let's suppose so uh what that means is uh user want this node to be at position number two over here at here this is the node that which is currently uh at picture number two so this will get uh replaced at portion number three and third third will get replaced at position number four okay shifting will be there okay if you insert this at a second position so we that way that we have to check so there are some Corner cases that we have to first check what if the position is one okay this is the first Corner case look at here what is what is the position is one okay if the position is one that means we have to we are trying to insert this node at the very first beginning of the list okay so in that case uh I I think I don't want you to tell uh pretty much how you can do this like this is the same as we have did in our previous video where we are trying to insert the node at the beginning of the list so we are trying to insert this node at the beginning of the list but the thing is that uh we are trying we are first asking the user to enter the position if they enter user enters the position as one that means user want this element to be at the first of the first of the W in the English so you can go and code that uh insert at beginning part over here okay so what if the position is not one that means user actually wants to insert that node in a position where the this what we can say where the element that we want to insert is at the somewhere middle of the list okay somewhere inside the list the other ones so in that case we will code that one also uh okay so let's go and code this okay let me get into my IDE okay so here we will create that method public static so we are inserting a new node right so we should return the new head of the list and we will write insert at okay so this is my name of the method and we will pass the head of the list to this method okay so we are telling that take this list and insert a new node in inside this list at the position that I want okay so to hold that position we will create one new variable name as position where we are dragging the position and we will create one another variable as count and we will assign the value of count as One initial okay I will tell you what count does okay bear with me so I will just simply print enter the data you want to insert It'll ask the user to enter the data okay Enter the data okay so after that we will create one data variable and we'll write a c dot next 10th and ask the user to enter the data okay so after asking the user we will again simply print uh one more statement that is enter the position now asking the user to enter the position at which position the user wants to insert that no in the list okay and we will just simply write position is equals to SC Dot extint okay so yeah we have asking the user okay now after asking the data part after asking the position we just have to create a new node okay new node we'll write new node d is equals to new node and we'll pass the data to the Constructor of that node class okay after creating this node uh like I have said what if the position is one so I will handle that base case first now we'll write position is equals to equals to 1. and after this inside this if the position is equal to equals to 1 that means we are trying to insert that node at the very first of the very first of the list so in that case we will just simply write the same code as we have written in the insert at the beginning all right so we will write head dot previous equals to new node D and we'll write new node D dot next should point to the Head and write head equals to new node new node and we will write new node D dot previous should point to the nerve so this is the same logic that we have implemented in our insert at the beginning if you haven't watched that video go and check that out you will get this uh if the position is not one that means user don't want to insert the new node at the beginning of the list a user as tell any other other location in the list okay so in that case we will we have we need that create the two more variable of type node and we will assign the temp value is equals to head we'll create one temp node and we'll assign that node uh we'll assign that variable not node and we say assign that variables value to the head that means uh this is the scenario what I've written over here is this is the head and we'll make one more variable we will assign that value to the header that means head and temp are currently pointing to the first node of the list okay so we will write node d temp 2 is equals to null we will create another uh variable and we'll assign it value to the net okay so we'll write on while loop while my count is less than my position minus 1. okay whenever my accounts value is less than position minus 1 you will simply write temp is equal to temp is equal to Temp dot next we're literating uh the times value to the next next node of the list and we'll write count plus plus okay so after this while loop we will one more check one more condition inside that else itself we'll check whether the temp Dot next equals x equals to equals to null that means uh when the 10 dot next will be equal to personal if you if yes you correct if it is the last node of the list okay so if it is the last one of the list then in that case 10 10 next to the winner and we'll write uh temp Dot 10 dot next is equals to anode and again we write new node dot previous is equals to 10. okay so this is the if condition if that is not the case we'll come inside the else part else what what we are going to do uh we'll create a node d uh we'll reassign the temp is equals to head again we are taking the temp back to the Head okay uh so not now not temp it's temp two that's why I'm getting error we have covered the time part itself now we will write a temp Dot next we'll assign the temp tools value to the temp uh temp dot next uh oops I'm sorry guys I have assigned it over here I am reassigning that value itself I'm sorry guys okay so we'll write a temp dot next is equals to new node and now we will write a temp 2 Dot previous is equals to new node and after that we will write a new node D dot next should point to the temp to and finally we will write new dot dot previous should point to the temp okay so these are the steps that we want to perform when there is a a position that exists in the in English which is at the some somewhere in between those two nodes okay so this is else part that we are going to add uh perform and after get out of this Loop and this else part we will just simply return the head that is the new list after exerting the at the user specified location okay so uh this is the method that we required if you know doesn't get any didn't get uh any idea go back and watch the video again and try to figure it out okay if you have any doubts come you can comment out I will surely reply back okay so node d uh we are getting the new head okay so we will write a new head is equals to insert at and we will pass the head of this list itself okay and after passing this uh now our list is changed sorry typo print list we'll print the new head new head list and we will also print the length of the new uh text okay so let's go and run this and check whether it's working or not okay so one two three four and five after that I will give minus one element in the list are one two three four five and the length of the list is five that's working fine uh now it's acting for asking for the data I will insert 10 and let me insert this uh 10 at the third index like here okay so new list will be one two ten three four five okay so I will write a new position as three uh here you can see or one two ten three four five and the new length of the list is six because we have added one uh extra node or the new node in the list at this location which I have told to the program okay so this is how you can insert a node in the double linked list at position we want okay so let me run once again and we will try to give the position as one we'll check whether that uh condition is also working or not okay so we'll write minus one I want to insert 10 at the first position oh all right it's all it's all it's working fine it will uh it has inserted the pen at the very first of the list and the new length of the list is also six okay so thank you for watching this video and I will see you in the next one hello and welcome back to the new video of the Java tutorial Series so till now we have covered all the operation insert operation like insert at beginning insert at end and insert at user specified location I know inside user specified location is kinda hard but if you practice more and more you will get how to do that okay fine so in this video onwards we'll be starting for the deletion operations and now in this video we'll be talking about deletion at beginning so we want there is a list of type double in English we are trying to delete the node which is at the first which is which means the first node of the English that we have we are trying to delete okay so let me get into paint before our code we will try to build the logical screen okay so look at here uh this is the list that we have used in the previous video and this is the new node uh not the new node we don't require the new node anymore let me delete it out okay so this is the list one two three these are three elements and we want to perform the delete delete and operation at the first node of the list okay so for that uh to delete this uh we have to somehow disconnect this these uh this part that we have to disconnect this node by the second node okay if we disconnect this node by the second node there if there is no link between these nodes we we have lost over this we have lost control over this node there this node is no more accessible to us and this is how we can perform the deletion operation at the first but before that before breaking this link we have to somehow uh assign we have to change the head because if we want if we if we not change the head to this because after deletion operation our new first node will be this and we have to assign the heads value to this uh so that we have we can keep the track of the remaining list okay so if we not do that and we will first if we make the link uh where remaining list will get uh untracked we can't check keep the track of that list again so what we remain says only ahead of the list okay so this is the logic that we have we want to build okay so let let me erase let me erase this okay so we will go inside our ID and try to call it out okay so we'll write one comment delete at beginning so okay so we'll try to write one function public static so we are trying manipulating the list so we want this list to return our new head of the list okay and we will call this list name ads delete at beginning okay and now inside this we will write node d and okay fine so if you want to delete I have told you we have you have to somehow change the heads value to this new node so for that purpose we will create one more variable of type node D itself and we'll name it S10 and we will assign the head heads value to it it means heads and then both are pointed towards the first note of the list okay so we'll check if head is equals to equals to null it is equals to equals to tail sorry not none a head is equal to positive uh what do you think when the head is equals to equals to tail okay so here you can see if head and Tails are both pointing to this node that means this is the node which comes first and this is the node which comes last that means this is the only node which is present inside the list there are no more nodes that uh exist Beyond this node okay so this is the case in that in that case we will just write simply tail is equal to it is equal to null that means uh tail and head will both Point towards the null we will no more have that access to that node that means that node will get rated and entire list will get empty okay if if not that is not the case if there are some elements that present inside the list then in that case we will just simply write head.next dot previous is equals to now okay head dot next dot previous is equal to null and we'll write head the head is equal to head dot next okay and we'll write temp is equal to not m dot next is equal to yes I'll write this and we will simply return our head what I have done here is head dot next dot previous okay so we are doing what we are doing head dot next that is this there previous that is this we are assigning it to the null okay head dot next dot previous is equals to null so we are breaking this Bond okay we are breaking this previous Bond after the header head is equal to head dot next we are simply reassigning the heads value to this we are moving our head to the next variable uh next node not variable uh temp dot next is equal to null that is temp dot next we are breaking this next Bond also previously we have break the previous Bond okay previous for bond for this node and now we are taking this next Bond for this node and we are successfully uh broke all the bonds okay all the linking and we are simply returning the head of the list so so this is the idea behind the decision at beginning so let's go and test it out okay so let me comment it out delete Ops okay and since we are getting our new head we have to capture that head all right uh not new but we have given the name of the method let me check delete at the beginning till later beginning we will pass the head uh which is we are taking from this these method itself and after that uh we have to print the list but now be careful uh pass the new head and after that we will find the length of the list with passing the new head okay so these are the things that we want to perform just let me just run this and test quickly we'll test okay one two three four and five and minus one and here you can see eliminate the list of one two three four five and uh list is five because we have five elements and elements in the list are two three four one is getting deleted because we are performing the deletion at beginning and after that list size should also get decreased by one which is there and so this is how you can perform the deletion at beginning so quickly we will check that corner case also or the base case where there is if there is one element in the list that is one okay minus one okay so here again null pointer exception we are getting uh why so because if there is one uh one element in the list uh list is this and this and we are trying to delete uh the element which is at uh this so I guess we have some error we'll try to fix it out and I will tell you in the next video thank you for watching this guys and I will see you in the next one so hello and welcome back to the new video of the job tutorial Series so till now we have started a doubly linked list uh we have seen all the insert operation we have started with the deletion operation also in our previous video we have talked about how to delete at the beginning I'm going to delete the first node of the double in English so here you can see this is the code and now in this video we will be talking about how you can delete the node which is present at the last that means we have to delete the last one of the linked list so let me comment it out delete the end node okay so this is the thing that we have to perform in this video so let's go and try to understand first what we are going through and what we are trying to perform okay so here you can see there are three nodes in the list and we are trying to perform a deletion operation at the end okay so we are trying to delete this node so what do you think how we can delete this node uh this is pretty simple uh because we are trying to read it at the end so they are they are not more operation that we want to perform uh first thing the corner case should be checked what if there is a head and tail both are pointing to the same node that means there is only one node in the list that means in that case we will simply Point our head and tail to the null so that we don't have any access to that node itself and the list will become empty okay so if that is not the case uh like here if there are three elements present inside the list and we are trying to delete at the last element so in that case we will simply write uh somehow we will break this next okay so two is next is pointing to the three okay so that's how we are keeping the track of the third node so we will break that link okay so those next should not point to the third node it will now again point to the null okay so it will point to the null will be a code our methods such as such that this next should point to the null so that we have we don't have uh access to this uh node anymore and we again we are thirds previous is pointing to the second snow we also have to break that update that link also so we if we both uh perform this both of the operation the node will get deleted from the list and we don't have that track of that node anymore in our list okay so this is the idea behind this okay so let's get into our IDE and try to go this out okay so as usual we will create one method which is public and static one and now we are trying to delete and we have to pass a new list of the new list to the new list to the main method so in that case our return type should be node D and I will write our function function name as delete at end and this will get our head of the list that means we are prime we are trying to pass the list to this method and this method will in return delete the end and element and we'll pass the head of the list okay so to delete uh let me create one temporary temporary variable which will also point to the head first and again I have as I have talked to you uh if there should be a corner case where head is equals to equals to tail okay so it is equal to equal to Del that means both are pointing the same node that means there is only one element which is present inside the list and in that case we will just simply write head is equals to now okay that means we have successfully deleted we don't have any more the track of that node okay if that that is not the case if else part is we will write previous dot next should point to the null okay and after that we will write tail dot uh not tail dot tail is equals to tail Dot previous so we are switching the Tails well to the previous one so here you can see we are performing this operation we are shifting the tail okay so after Shifting the tail previous is equals to null so we break that one Bond also that I have talked about you so and then simply return the head ok so this is the code that we want to perform so what I have done is uh we have shifted our temp to this node and we will uh we have break it broke this Bond and this Bond also they are no more have access to this last node of the list and we will we have changed the this is our new last node of the test okay so let's go and let me just comment it out it's the previous videos function and okay so we will create one new node d ual mode D which is equals to the delete at end and will pass the head of the list and uh after that we'll print the list by using the new new node D and after that we'll find the length of the list okay so these are the operations let me just run this quickly we'll test it out one two three four five and minus 1. okay so the element of the list are one two three four five and the length of the length of the list is five and the elements in the restart one two three four and we don't have any more track of this file because we have broke those uh next and previous link okay uh and now the length of the list is also decreased by one so this is how you can perform the deletion operation at the end of the W link Niche so I hope you got the idea uh if not go and watch uh go please go backward and watch this video again I hope you're liking this series like share and subscribe thank you hello and welcome back to the new video of the Java tutorial Series so till now uh we have started with the deletion operation we have see uh seen how to delete at end and how to delete at beginning and now one more operation is there uh how to delete app use a specified location that we are going to see in this video okay so let me write a comment delete at position okay okay so let's go in our paint and try to see how we can build the logic how to delete the node inside the double link list which is at the user specified location so there are two things uh two three things that we have to remember uh that is the corner case first of all so what are the corner case uh that we may face okay so first case is what if the position is one okay so it's a user is to tell that delete the element visit present at the position one so that is a bit similar to the function that we have made which is delete at beginning so we are trying to do that same performance we are trying to perform that same task uh but this time user has given the position as one that means user is wanted to delete the element which is at the first so we'll perform that same operation and what if the user has tell the to delete the last node so this is not the actual the corner case this will come under the default uh uh operation uh because we don't we don't know what is the end node what is the last node what is the length of the list so in that case we it will come inside the default case itself Okay so for the deletion uh operation let's suppose I want to delete this this node inside the list so I have to somehow break these and this one but before baking this one I have to link this node with this node first node with the third node uh so that this uh after third node all the nodes will not get a discarded because I have to clean that track as well I just have to delete this this node itself okay so before deleting these links we have to make a link between first and third node and we have to assign thirds thirds previous to the first node add as well okay so these are the operation that we have to perform before bringing those links between this next and previous of this node okay so let's go and code try to code it okay let's go in our IDE okay so we will name it as public static uh we are deleting the node right so we have to pass uh open not pass we have to return the new new head of the list and we'll write the function name as delete at and we will pass the new header the list to this function okay new not new head will pass the head of the linked list that on which we are trying to perform this operation okay so likewise at the insertion at we need one position which is positioned from the user and we will need one count variable which is initially set set to L1 we will need one temporary variable uh name it as stamp and which is pointing towards the head okay and we'll just simply print a enter the position of node U1 to delete okay allows the user to enter the position and we will simply keep that value inside the position variable okay in se.net state after that uh we will check the corner cases if the position is equal to equals to 1 that means the user wants the first element we are deleted in that case we will just simply write the logic that we have written at the in deleted back anyway so if the head is head dot next is equals equals to null at dot next is equals to equal to null then in that case you will just simply write the head is equal to tail is the question number four should point to the null and if not we will go inside the else part we will write head dot next dot previous should point to the null and we'll reassign the heads value the head is equal to head dot next and we'll write temp dot next is equals to nine if this is the Corner case if that is not the case will come inside this else part and we'll do node d we will create one more variable which is also pointing to the Head initially and to keep that track of this back variable we again run the while loop so until my count is less than position minus 1 I will run this one Loop okay and inside this while loop I will write back is equal to back dot next and we will say simply count plus plus okay so what we are trying to do is uh let's suppose uh there are some other notes present inside this list okay so assume that there are five five elements in this double equation okay and we are trying to delete the element uh trying to read the node which is at third third index okay so third position let's say okay so if you want to delete this you have to somehow keep the track of the previous node of the list and the next node of the list okay so that means we have to keep the track of the second node second node which is inside the list and the fourth node which is inside the fourth node which is inside the list okay we will delete the third one and to keep the track of the second node to get to get there the to get there we have run this while loop uh back back is also representing which which means we are trying to get the previous element uh let's like suppose we are trying to delete the third element we will go there to the second element by using this back end we'll try to hold that okay and after that we'll create one more node d let's name it as current which also is equals to back Dot next current will hold the element node which we want to delete actually the node is that we want to delete is hold by current now we will check one if condition if my current dot next is equals to now that means uh it is the last element of the load that we want to delete okay when the current dot next is equal to positional it is the large node of the list that we have to delete okay so in that case it is it is pretty simple to that we have done in the delete at end okay so in that case we will just write simply dot Uh current dot previous is equal to null us dot current is equal to null and I will write back Dot next is also is equal to okay and if if that is not the case there are some nodes which is present after that current also that we will come inside the else part we will write back dot next is equal to current dot next we will current out so what this means is uh we are trying to uh break the next link and we are trying to make the linkage with the third fourth node okay so we are no more I have the track of the from second to third node we have built the connection from the second to Fourth node by writing this line okay and after that we will write simply a current dot next current dot next is equals to current dot next dot previous is equals to back okay so this is the case uh that we want to perform and after that uh we'll just simply come out of this else part and we'll just simply return the head of the list and we are done with the operations okay so this is the deletion operation and this is a specified location uh let me just comment it out and since we are getting the new head of the list from the function we will just simply write the node d um new head d and we will write delete at and will pass the head and we'll just after that after performing this operation we have to check whether the node get deleted you can we have one print list method that we have implemented also and we'll also find the length of the list whether it is decrease by one or not if it is verticate that means our node is circles fully deleted okay so we will run this okay so one two three four and five and give it negative minus one so I limited the list of one two three four five and the length of the list is five and it is asking for the position that you want to delete so let me give a position as three so delete the element which is present at the position number three so here you can see the position number three three is present it has delay don't get confused uh this is not the data part I'm giving the position I am giving the actual uh position at the third position whichever node is there delete it and after deletion operation one two four five is getting returned by the rest and uh this size is also decreased by one so let's go and uh check the corner case also what if we want to delete the first element of the list that is one two three four and five and after that minus one and we will give one here you can see two three four five is also printed one is getting deleted and the length of the list is also decreased so this is how you can perform the deletion operation at the Double link list at the end of the list or at the user's specified location or at the start out the list okay whatever position you want you just give the position if that position exists inside the list this function will delete it okay so thank you for watching this video and I will see you in the next one okay so hello and welcome back to the new word of the Java tutorial Series so till now if you are watching this series uh that's great uh you have we have covered of the core Java concept we have started with the DSA part we have covered arrays uh we solved some problems using arrays now we are at the linked list part and now we have covered a signal English and W links successfully and now for me with this video onwards we'll be covering the circular link list so okay so for this video agenda will be uh I will be talking about how the circular English Works uh what are the things that you why you want to learn about the circular link list that part we will go and learn in this video okay so let me just our adjust my paint window oh yeah that's fine okay so what we have seen till now so we have seen the circular link list we have seen the W link glitch and now we are going to see the circular link list okay so let me just give you the overview so and one thing uh if you have not watched our previous video go and watch then first so that you can get clear idea oh of the what is single language and so that you can clearly understand what is the circular list okay and one more thing if you are watching this series then loving what uh content that we are providing so please like share and subscribe and please share this series to your friends as well so that they can get also benefits of this series okay and if you have any doubt do let comment it out I will definitely get back to you okay so here you can see uh we have I have created one language so as you can see by this if you are watching this series you can clearly guess it what is it it is a simply single in English Okay so there are these nodes these nodes contain the data part and the next part and the next is holding the address to the next door node okay so this is simply the uh simply linked list so now I will do one simple thing and I will change this simply English to a w link list okay so here you can see I will just wait a minute guys okay so by doing adding just one extra line and one extra partition in the node we are creating a doubly liquidation okay so what is double link this uh it is nothing but we can go forward and come backward as well in the single link list you can go only the from left to right okay there is no way you can come from back from there if you want you can come but there is no simultaneous way okay so now here what is the what is the double in English double English does the same we it it holds the value of the next next node and at the same time it holds the value of the previous previous node previous node also okay so you know what is next to it and you know what is back to it okay so it holds the previous address as well and the next address as well and the data part so this is the double in English and now I will do one little modification in this so that it will make it as a circular linked list okay I will do like this I will get this and I will just simply assign it to this okay so what I have done here is simple okay try to understand okay this is our W link list before uh joining this line and I have created one simple simple line and I have joined the tail that means the last note to the first node okay so the Tails dot next before joining the slide a line This is WL English and Tails next is pointing towards null so instead of pointing to the null it will pointing to the Head okay so that it will make a circle okay and this previous is pointing to this and its previous will point to the last node okay so we have make these two lining two changes in the double language and it will make it as circular English okay so what we have done is uh we have link the tail dot next to the head of the list that is the first node of the list and we we have given the value of uh head dot previous that is heads previous to the tail that means we are trying to connect uh head with the tail so by doing this uh we are we are making our Circle you can see if we are trying to iterate from the head and you are going to iterate iterate it right and uh you come again come at head okay so this will make make it as Circle okay this will form a circle okay and if you see it it is forming my circle you are uh heading uh you are studying for the first node you go to the second fourth and third and then fourth and due to we have a link from this to this and it will again come back to the Head okay and end up it is also in the backward backward formation also uh if you if you had the tail uh you go here go here go here and it will also come here okay so this is the idea behind this and one more thing uh that I forgot to tell you uh there is no backward Okay so here you can see we have created doubling list okay so there is no backward you can't come backward there is no previous in the servers what we can say is circular linkage there is only a one way that is only one way you can go from left to right you can't go you can't come backward okay so regular in English in simple terms the color of English is nothing but uh one little modification to the single English that will make the list in English as a makes it circular okay it it go in the loop and all the elements are connected with each other and list is also connected okay so this is uh the theoretical part of the single English uh sorry the circular link list so this is it so there are two types of circular English one is simply uh English circular English and doubly circular English so here you can see I have given you the example of the single single circular English Okay single circular in English is nothing but the sales single circular English but in the circular format okay so we are trying to connect this these these ports and uh if I redo okay so this is the this is also a circular English but it is in a doubly format that means uh it is a double in English that we have connected tail and head so that it will make uh make and work as a circulating circular doubly linked list okay so this is the idea behind the circular increase so thank you for watching this video and for the next video onwards we will try to implement this thank you hello and welcome back to the new video of java tutorial series uh so in our previous video we have started seeing uh circular English and we have seen the theoretical uh part of the circle in English and we have understood what is circled English and how we can uh implement it all right so in this video we will be starting uh start coding uh with a circular link list and in this video we will be creating a circular English and know how how to create a circular English Okay so for that uh let me just create create one visual representation of the circular English uh so that you can understand more clearly okay uh so again uh we can Implement circular link list uh in two ways uh using circular single in English and circular doubling English meaning that you can create a you can convert a single in English into a circular single in English and you can convert a double a link list into a circular double a link list the difference is only between uh the you have to keep the two pointers all right if you are implementing the doubly linked list uh circular link list then you have to keep the track of previous and next and if you are implementing just a single link a single circular linkage then you have to keep a track of only the next pointer okay next address of the node okay inside the this and uh one more thing after that uh this will get connected to the first node uh so as we know we have one head and we have tail all right and the head represent representing to the first node of the linked list and tail representing the last node of the link list so uh it's like an linked list we will be implementing the singly circular link list you can you can try the Dublin as the doubly circular link list for buyer own okay so look at here we have one single link list okay so this is the first node second or third node and fourth node so to make it as a circular link list circular single link list we just have to keep the track uh keep the track of tail dot next uh or we have to assign the value of tail dot next to the head that means it will create one Circle a circular list okay so we are going from first node second node third node to Fourth node again we can come back to the first node so it it's it making a circle circular linked list okay so this is how we can create a circular link list so let me go into my IDE and we create one circular link list over here okay so I here in I was in my IDE and let me just right click here and create a Java class so as you have seen uh you know a single LinkedIn W in English we need a node to create a linked list all right so let me create one node for the circular link list so let me create the class name as node C dot Java ah so this will represent our node uh one node inside a list okay so for the circular link list we are implementing circular single in English so that's why we need we required data part and one uh one next variable of type node C itself which will carry the address of the next node inside the list and we we want the Constructor for this class and this Constructor will take the input as the data from the user and it will just simply assign that data to the data that we have declared over here okay and we'll assign next is equal to all right so this is the node C dot Java file that we are using okay so now after creating the node I want to create one file where I can perform all the operations regarding to the circular linked list all right so let me call it as circular in list Dot okay so here I created it so since we are getting the input from the user so we do require the scanner class also so let me just go ahead and import my scanner class I will write import sorry for typo import Java dot util Dot scanner also after importing this kind of class so I do require my main method to execute this code and we'll implement this main method a letter and just I will do for declaration part first so we are taking inputs in a multiple method so I will declare the object of the scanners class uh globally okay so it's public static scanner SC equals to new scanner system dot in all right so I have declared the object of the scanner class as well and now we have to declare those two variables of type node C representing the head and tail which is the first and last node of the link list respectively okay so we will write public static then those are our type node C and we require the head and tail okay so this is also done uh now we are good to go to write those methods so in this video we will be creating a circular link list so that's why I will write uh create a circular link with CLL is circular necklace okay so this method should be public and static one because we are calling that method inside the server main method which is static as well okay so and since we are making the list and we are we have to return a node that is the head of the list so that's why we are returning a node so the return type should be node C and the method name I will called as make list because we are creating a new list okay and just create the method okay so initially the my head should point to null uh since we are making a new list so the head and tail should point to the null and okay and after that uh I will just print enter the data in the list enter the data in the list all right so I will just write it over like this so and after that I will declare one in data variable and I will take the input from the user and after taking this input from the user I will just write one while loop and while my data is not equals to 1 until that I will run this while loop and after getting inside this while loop I will create a node which I need to insert inside my linked list okay I will call it that node as new node C which is a new node of circular link list and we will equals to new node and so we have to pass the data to the Constructor of that node C Class we'll pass the data that we have taken input from the line user from in line number 212 okay so after creating the node we'll check one if condition if my tail is equals to equals to null if that is the case my 10 is equal to equal to null in that case I will just write head is equals to new node C new node C and we will write our tail is also equals to new node C okay so what I have done is and one more thing we write uh new node C Dot next is equals to red okay uh so when my tail is equal to equational that means the it is the first node that we are trying to insert our list into our list and for the first node we don't have to do anything extra we just assign the head to the new node and tail to the new node both the head and tail will point to the first node of the list because there is only one list one node inside the list at this time only and we will write new node.next is equal to head since we are making this making the circular link list if if this is the node that is there inside the list then it should there this next should point to this node itself then and then only it will make the circular motion uh in the linked list okay so for that we have written over here and if my tail is not equals to equal signal then we'll go inside the else part that means there are some nodes which are already written inside my list and then in that case we will just simply write Del dot next is equals to a new node we will assign will update the Tails value or we we make that connection between the previous node and the new node we are trying to insert and after that we will write the update details value to the new node C because we have to move the tail tail and after moving the tail we will write the tail dot next should now point to the head of the list by the by writing the line number 22 we are again making that circular circular motion inside our link list okay so after doing this we will again take the data from the user uh and we will continue implementing this while look until the user is satisfied and entered minus one uh just to represent that user have done creating the list and user want to exit from this group okay and after creating all this we will just return the head of the list that is our click list okay so now if I go inside my uh main function and uh I will just write a node node C which is the head and I I have to get this method is returning the head that I have to have captured over here I will capture over here and I will write a make list I will call that mixes function over here and if everything goes fine uh this should not give me any errors after running this let's hope it will not throw error and let's run this okay so it is asking for me to enter the data so let me just go ahead and enter the data over here let me write one two three four five six I can enter as many data as I want and after when I once I satisfied from the entering the data I will just simply write 1 so I will get exit exit from the code because after line number 30 there is no line that we are executing okay so this is pretty much either behind the circular link list how to make a circular link list how secular link list works okay so in our upcoming video we will see how we can print this circular link list okay so the printing printing part is tough because there is no null to the Tails dot next because we are always telling that tells dot next should always point to the head so we are making the circular link list so we have to somehow figure out how we can manage to stop at which point and how we can predict the end of the list so okay so we'll see that in our next video where we will be seeing how we can print the circular link list okay so thank you for watching this video and I will see you in the next one so hello and welcome back to the new video of the Java tutorial Series so in our previous video we have talked about how we can create a circular linked list in Java okay so now in this video we will see how we can print that circular linkage that we have created in our previous video okay so let me just go ahead and clear this out uh the previous topic I will delete it and I will our new topic is print the circular link list okay CLL is the shortcut that I have used for circular link list okay and now if you can see imagine this is our circular English uh one two three and four okay so and fourth is connected to the head again that is the first note so if uh if we are using the logic that we have used in our uh previous videos of double linked list or else single in English to be precise uh then you can see we are just iterating over the nodes over the nodes until we get the head dot next as null so that's Logic for that's logic is good for the singly linked list where we have where we are denoting the end of the list as last nodes next should point to the null ok so but now in the uh circular link list when we Traverse to this nodes we can't use that logic because there is no null we are representing that tails.next as the first node so it will if you implement that logic here it it won't work it will go inside the infinite Loop of printing all those node again and again it will print one two three fourth node and it will again print one two three fourth note so you have to somehow figure out how you can stop that while loop from printing the nodes okay so to figure out that logic one one thing you can do is you can increment the head as it is that we have doing in our single and double in English you you just go on incrementing the head and until your head is matches to the null Okay so until your head is at the position where our tail is currently then and until then you can a trade over the list and as a when you come here when your head come here at the position of tail you just print that last node's value and you just get out of this Loop okay so this is one way you can achieve printing of the circular English okay so we'll be implementing this approach in our code okay so let's go in our code and if I do code it okay so this is our circular link list method that we have implemented in our previous video I hope you see that video and uh understood how we can Implement a circular link list okay so for printing purpose I will again create one method a public static and we are just printing the list right so this method should not return anything and I will call this method as print list okay and we are printing the list uh for that purpose we have to access the head okay so we we do require head of the list so that we can start printing our head uh start printing our list from the head onwards okay and now you you can imagine one corner case right so imagine our list doesn't contain any any node okay so there are no nodes inside our list then in that case we have to handle that corner case you can simply write if my head is equals to equals to null in that case you just simply return I don't want to do any uh processing or any printing stuff if my head is equals to equal signal uh otherwise if head is not equals to equal signal if there are some elements which are present inside the list we just print them as it is okay sorry guys elements elements in the list are okay okay here we come and we will Define one while loop and according to our uh approach that we have a scene in inside paint we will write head until my head is ignored equals to tail I will do the stuff okay so what we are doing we just go ahead and print uh I will remove the print Ln so that it it will not print the each and every element in the new line okay and I will write head Dot data reprint that head dot data and we'll print one space it space also so that we can differentiate between all those Elements which are printing in one line itself and after printing that we will again increment the heads value to the Head Dot next enter next okay so uh okay you can see hey we are iterating until our head is not equal to 10 okay so again I go inside my paint uh when I come here it will check head is not equals to tail but increase it is equals to tell then it will uh terminate this while loop and it will not print the last notes data so each time we have to take care of that we have we have to print the last nodes data as well so to print that data we will just uh come below the while loop and we will just print that data that is head dot data our head is currently at tail but we have written the condition like that we have written that head is not equal to tail but this head is equal to l it will not execute this while loop for the last node for that we have to again write that print statement over here and we will just simply uh print One new line just to understand the clearly okay and this is how we can print the list so let's go ahead and check our method is working or not if if we got any errors we will Rectify that as well and we will pass the head of the list that we are getting from the making the list okay and now if I go ahead and click on run okay it is executing okay so let me create my list as one two three four and five six okay and after that I will write minus one so you can see element in the list are one two three four five six and we have implemented the circular English we have the access to this after six it is it is connected to the one that is first node of the list again we are printing that using this condition and we are printing here the last node of the list successfully so this is how you can print the circular links list in Java thank you for watching this video and I will see you in the next one so hello and welcome back to the new video of the Java tutorial Series so today in this video we will be covering uh we'll be seeing one method which is how we can find the length of a circular link list okay so length in the sense that we have to find how many nodes are there inside that Circle link list okay so again uh if you recall our previous videos where we have seen single and WL English or how we can do that is we have one counter variable which will count uh all those nodes present inside this link list until and unless we reaches the end and with which we representing as Del dot next is equal to null okay so we are iterating over that uh linked list until we reaches at null okay so for but now we are seeing the circular link list where null doesn't exist we have Del dot next is which is assigned to the head which makes this as a circular link list okay so how we can do is uh do this in to find the length length of circular English if we again if you follow this uh approach that we have been using in the circular English sorry singular single English or the doubly linkedinish then you will your Loop will go in in finite Loop it will go and count count again and again because you never stop uh by using that approach there is no null okay this will go this will count as one two three four again it will five six seven eight it the loop will never stops okay so what we can do is we can use the logic that we have used in our previous video that is to we have used that logic to printing that list okay so if I go inside my IDE uh I will I will show you uh so in our previous video we'll see how how we can print the list right so for that we have used the logic ads head is not equals to tell so we are iterating over this list until my head reaches to the tail and after once the head will reaches at the tail uh we'll just simply get out of this Loop and we will just print the last notes data so we can use this logic as uh in our finding the length of method okay so we'll see how we can do this let's go and create one method uh but let me first go ahead and create one okay let's wait a minute let me go ahead and create one another comment over here so that you guys can understand what we have done in this method itself now we print the link list okay so in this video we will be creating uh finding the length of the list okay so I will write length of circularly finished okay okay just we'll go and create our method Okay so two minute okay public static so we are finding the length of the wrist all right so I don't think we have to return anything okay so initially we'll keep the return type ads void and after that we will override our method name as length and now to find the length of the list we have to get access of that list so how we can get access of the list is by getting the head of the list all right so we'll receive the head from the user and I will again just initialize one counter variable and I will limit as count and initially I will name it assign it zeros value and now if you imagine when Corner case is there okay so what is that it's if my head is equals to equals to null all right so initially the head which is given by the user at line number 44. is null okay so that means there is no node in the list the list is empty so in that case we just simply return we don't have to do any processing part in in this method so we will just write head uh head equals equal to null we will just simply write return okay and if that is not the case uh that means there are some nodes present inside the list we will just write our while loop and we will write until my head is not equals to tail I will do the processing part okay so what processing part that we have to do is we just have to increment the count value by one so how we can do this we will just simply write count plus plus we can increment the count value by one and again we have to increment the head as well uh add is equal to head dot next okay so just to understand if you guys can understand uh here also in our previous video we have we have left with the one last node that we have printed over here so here also we will be left with one last node that also we have to count so again once we get out of this while loop we will just simply write one count plus plus as well so that we can cover the last node of the list as well okay and after that we will just simply print the accounts value so we will just simply write the length of the list is we'll append this as with count okay and after that we will just simply one print One new line so that execution goes to the next slide and we can understand things more clearly okay so that is the idea behind finding the length of the circular linked list let's check whether our method is working fine or not we will go inside our main method and we'll just write length call that method and we'll just pass the head that we are getting from making the list over here that will pass head over here okay so let me run this code let me call my list as one wait a minute one unlock is okay well again run this wait a minute okay one two three four and five and I'm done with the print in the list and you can see Elementary the list are one two three four five and the length of the list is five because we have five elements inside the list okay so this is the idea behind finding the length of the circular link list okay so in our upcoming videos we'll see how we can perform the insertion operation or deletion operation on a circular link list okay so thank you for watching this video and I will see you in the next one hello and welcome back to the new video of the Java tutorial series uh so in our previous video we have seen how we can find the length of the circular lines list and now in this video we will be starting with the insertion operation on a circular linked list and now in this video we will see how we can insert a node at the beginning of the circular linked list okay so before going to the coding part let me just show you how we can find the how we can insert a node in a circular English which is at the beginning okay so it is uh pretty uh different from the ones that we have done inside or some singly linked list or the double in English because in our circular linked list we have we are we have connected our Tails dot next to the Head okay so and if you are trying to insert a new node or let me let me just create a new node uh wait a minute and now imagine if you are trying to insert this node at the first so at the very beginning of the link list so in that case the you have to perform three operations okay so the first operation is first operation is you have to assign the tail dot next value to the new node uh tail dot next is equal to new node that we are going to create so that it will create that circular motion in uh it will maintain the circular motion inside our list and after that after creating that link we will just assign the new node.next that is our new node dot next is equals to head uh now once we have created this linking tail dot next is equal to new node and then we have to assign the new nodes next value to the head of the list that is the current first node of the list and after that we will just simply write a head is equal to new node we will assign change the value of the heads to the new node and our list becomes like this one and this is our first node this is our second node third fourth fifth and again this tail dot next is pointing to the new node so so as to maintain the circular motion inside our circular link list okay so this is how we can achieve this uh insertion at uh insertion inside a circular English at the beginning position okay uh nice okay so now let me go inside my IDE and we'll try to court this out okay so below my length function I will just write one comment which is insert at the beginning okay we are trying to insert at the beginning okay so let me go ahead and create one function I will this function is public one public static and we are trying to insert a new node inside the list and that's how that's why we are also changing the head of the list so we have to return the new head of the list to the main method so the return type should be a node we are returning a node to the main main method okay and I will call this name method as insert at beginning okay and we are we have to get access of that list so to change the rest okay so going so insert the node at the beginning okay now inside our method one thing we can do is we are we have to insert a node right so we have to get the data for that node first so we'll just simply write session now dot println we'll write enter the data to insert at first okay so we are inserting at the beginning let's write first and after that we will just write in data is equals to SC dot next hint okay and after that uh we are going to go to create the node okay so we'll create the node new nodes new node C let me call it as new node C and which is equals to the new node C and we'll pass the data that we have get from the user okay and again there is one case a where our list doesn't have any elements okay so we have to handle that case as well uh that case we can handle by writing head is equals to equational that means our list doesn't contain any elements and the node which we are trying to insert our list is the first node of the list then in that case we will just simply write head is equals to new node C and tail is equals to new node C and we'll write new node C dot next is equals to head okay so so that we can maintain that circular motion inside our English okay so if that is not the case uh that means we have some element inside our linked list okay and so in that case as we have discussed uh we just have to write tail dot next is equals to a new node C and we will just simply write new node C dot next is equals to head and we will write head is equals to new node C okay fine uh once we have done with that one now we can go ahead and return our head to the main method which is the updated head of the list okay so we come inside our main method and we will create one's blank space and we will write write that line number 82 as we will call that method which is insert at beginning and will pass the head of the list okay so remember one thing this method is uh giving us the new head of the list so we have to capture that new head okay so we capture that new head inside this okay I will name it as new head okay we have to capture this new head over here now it's okay and we can go ahead and again call those methods of print list but now we have to pass the new head so has to print the new uh list that updated list after inserting the node at the beginning and we will again call the length method and we'll pass the new new head to this method as well okay so we'll see uh before and after whether it gets added or not at the beginning of the link list okay so this method first call is given to the 78 number and now we are creating our list three four and five and let me get out of this Loop and now you can see print the list method is executed and one two three four five is getting printed and after that length method called called and now the length of the list is 5 and now we came here at the line number 82 uh and enter the data to insert at the first and now if I trying to insert 10 in the list and if I hit enter now you can see printless method is called the list is now 10 1 2 3 4 5 uh which is before one two three four five and now it is 10 which is added at the beginning and the length of the list is also incremented by one we have because we have six elements inside the list so this is how we can create a method to insert a node at the beginning of the circular link finished so you know upcoming videos we will see how we can insert a node at the end of the circular link list or add the user specified position inside a circular link list so thank you for watching this video and I will see you in the next one so hello and welcome back to the new video of the Java tutorial Series so today in this video we will be seeing how we can insert a node inside a circular English at the end okay so we are trying to insert the node inside the sampling circular link list at the end okay so imagine this is our circular link list which contains four four node okay and now we are trying to insert this fifth node inside the circular linkage which is at the end okay so for circular English you know we have tail dot next As a head so if we are trying to insert this node inside the list what are all modification that we have to do let's talk them first okay so the first thing we have to do is we have to change the tail dot next value So currently it is pointing to the head of the list that is uh the first node of the list so instead of pointing to the head of the list it should point to the new node uh because uh now if you insert this node at the end this will not the a node which will at the end okay so our last node will get updated so we have to assign the tail dot next value to the new node okay so after doing that we can Now update the Tails value so we will make the tail to point towards this new node okay so our tail is also shifted by one position to the end and now we can go ahead and simply write tail dot next is equal to head okay so we are breaking the bond which is created at the tail dot next is equal to head first by assigning the tail dot next well to the new node and after that we will uh changing the Tails value to the new node so the tail should point to the last node of the list which is our new node okay and after that after doing all this we can just simply write new node.next or else tail dot next is equals to head now so to maintain the circular motion inside our circular link list okay so these are the three things that we have to do in in order to insert a node at the end of the circular link list okay so let's go inside our IDE and see how we can implement this okay and I will come here and I will just write our comment so that we can know what's happening inside that method right so we will write insert at the end okay so we are trying to insert the node at the end okay so we'll write public method should be static and we are trying to insert a node so we are updating our list so it should return the new node obviously and after that we'll write insert at end and this method should take the head of the list so that we can modify the list or insert the new node at the end of the list okay so first thing first we will ask the user to enter the data so let me just copy the this line from the previous video where we are trying to insert the node at the first now we are trying to insert the node at the end okay and I will just write int data is equals to SC dot next in okay and after that now I can create my node node which is our type node C I will name it as new node C which is equals to the new node C and we'll pass the data okay after that we again we have to check on Corner case that is if my head is equal to equational that means there is no node inside the list which are present and in that case we will just simply write new node head is equal to new node the new node C and we will write tail is also pointing to the new node see because that will be the first node inside the list okay okay sorry my bad if my head is equals to equals to null then in that case or we will just simply write as equals to new node C okay and if inside my if condition I will write this like this okay it's fine now if my head equals to equals to another okay uh then in that case we will just simply right head is equal to new node C 10 is equal to new naught C and we will write a new node C dot next should point to the Head okay so after doing that uh if that is not the case uh then we come inside this else part where we know we have some nodes present inside our list and we have to now we have to insert the new node at the end of the list so we will write till.next should point to the new node as we have discussed okay and after that we will write tail is equals to new node C and after that we will write tail dot next should point to the head of the list and after that we will just simply return our head of the list okay so this is uh pretty much you have to do inside insert at the end okay so I will just comment out this previous code where we are trying to insert the node at the beginning so I will just come it out and below that we will write a node C since the the method is returning a new node of the list so we have to capture that inside our main method so we will write you know new notes new node instead of writing no no you just write new head okay and I will call that insert at end okay and we will pass the head that we are getting from the line number 95 and below that we will write the print list method and we will pass the new head okay okay and after that we just find the length of the list by giving the new head of the list okay so now if I go ahead and run this code I should first okay so give the list one two three four five I will write 1 uh so here you can see uh for the previous or the previous list we have one two three four five and the length of the list is also five and now it is asking for the data which is to be inserted at the end I will write 10 to be inserted at the end and after that you guys see one two three four five and ten is inserted at the end position and the length of the list is also incremented by one because now the elements there are six elements inside the list present okay so this is how you can implement the code to insert a node inside the circular linkage at the end so in our upcoming video we will see how we can insert a node inside the circular English at the user specified position okay thank you for watching this video and I will see you in the next one