hey what's going on guys welcome back to our YouTube channel and welcome to this video so this is part three of our C programming tutorial series and in the previous video we have discussed the basic structure of our C program so we have discussed the import statement the main function and then of course the lines to be executed by a program inside our main function so the next thing that we want to talk about is the order of execution in every C program so basically if we have like four lines here to print something in our screen like this so as I've said in C program it is executing in order line by line so this will be the first one or the first line to be executed and then the second line to be executed the third line to be executed and the fourth line to be executed so suffering someone will try to make this two and then three or I mean three and then four let's try to build and run this so we have the output as hello world hello hello number three and hello number four so basically all the statements are executed in order line by line so say for example we have or we want to draw something in the screen so like we want to draw a triangle so here and then another one here and then another one just to show you the sequence of execution of this particular C program so right here another / and then here and maybe here and another one another line or vertical line and also here and we need to add the new line or line break for this print statements and we can make this or I'd like the underscore and let's try to build and run this and you can see we have the triangle displayed in our screen and that means that the lines has been printed or has been executed in order line per line so if we try to make changes and instead of placing it here let's face it before printing the first line so the output will be like this funkylooking shape that's because we execute the first statement to have like the /d underscore and then the vertical and that's why we have an output like this so just bear in mind that in every program it is executing line per line okay so now let's try to discuss placeholders okay placeholders for different data types so there are in programming there are types or data types that we want to work with it so for example string we have characters we have integer we have float and other data types so so for example you want to display string you just have to like say hello world and this is this is a string let's just remove this okay save and run and build so we now have like the output of our programming over this is a string but if you want to try it or if you want to print a number so say for example 32 so let's try this run and build and as you can see we have returned negative 10 7 3 4 8 1 or 1 8 + 1 9 so basically what this means is that there's something wrong with our program because as I've said before zero should be the standard or the return if the program runs smoothly or there's no prod there's no problem while running our program so basically here we have negative so it means we have problems right and we can see here that note expected constant char but argument is of type int as you can see here so basically we cannot directly display number by using this so we can use presalt placeholder for that so this will be for our placeholder so instead of using directly 32 here we can say % and then D so d is for integer so if you want to display integer you might want to use the percent D placeholder and then inside this printf statement you need to add the comma and then of course the value that you want to be printed so % D and then comma and then the actual value that you want to be printed so let's try that build and print or build and run and as you can see here processor turn zero and then we have here the value 32 so let's try this one more time backslash n build and run and here we can see we can see clearly what is happening here so hello world this is a string and the value 32 so that's the purpose of percent D is a placeholder for an integer value another one we have for large integers are for example there are like a very large number of very large integer the key word for that or the placeholder for that is LD which stands for large integer okay just a first of all we have like very big integer right here okay so that's the placeholder percent LD and then of course we also have four decimal values or float values so for example you want to say thirty two point five or at @ 32.5 this is for again this is mine or float value okay let's just say float value here so percent f % deep for integer % LD for large integer % F for float number and another one for large float okay so this will be four large float and then another one for so first of all you want to display a character and you want to display like letter a so the placeholder for that is percent C and then the actual value that should be type in inside the single called characters so this will be for a chart or character and then another one is for the string so for example you want to display hello world this is a string and then you want to display that you can also use percent s for the placeholder for that so you can say hello from printf okay so this will be for our string so basically string is just a series of characters meaning string is just composed of several characters so first of all this one hello and F are all from and so on you get the idea but basically all these placeholders can be used to display different values or different types of values the integer large integer float large flow character and string so let's try to display this and maybe add clip backslash n here and here also here here here and here so build and run there you go you can see here the output of our program and we did not specify directly the values of this figures so instead we're using printf and then the placeholder suffer sample % D for integer % D for large integer and so on so I think that's it for this particular tutorial