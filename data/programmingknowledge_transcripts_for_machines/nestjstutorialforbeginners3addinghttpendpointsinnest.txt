hey guys welcome to the next video on nestjs tutorial for beginners so in the last video we have seen how we can create our controller module and service classes using Nest JS CLI and we have uh added our first end point which is the get cars end point into our nestjs restful API in this video we are going to add other endpoints like uh delete car by ID get car by ID and put car by ID and also we are going to create a post method so what I'm going to do is I'm going to go to my car. service.ts file and here I'm going to create some methods so these are the method which I'm going to implement so I'm going to implement post car for the Post method I'm going to uh create a method called get car by ID so if the user have the ID of a particular uh car object then he will be able to get that data related to that ID uh user will be able to delete a single car uh using the ID of the car and also user will be able to uh put some data put means update the data uh if he have the ID of the car element okay so there is no implementation there so I have added all these uh method inside the car. service.ts file now uh I think for now the async is kind of overkill for now because we are not uh returning any uh promises uh here so I'm going to just remove this async uh from here so it's going to look like this and when we will require a sync await uh then we will add those async aate methods right so for the Post uh method what we want to do uh when the user sends some car related data for example he sends the brand uh color and the model and even the ID then we just want to uh add this data to our uh cache which we have here uh which is cars right so in the post method what I want to do is I want to add cars element to my already existing cars array so this is by default our cars array object and I want to uh add some element like this uh into my cars array here right later maybe we will add DB functionality but for now uh I want to keep everything simple so what I'm going to do here is I'm going to just uh push the car uh object which is this one we are also going to define the data type of this car object in a few minutes uh but what here we can do we can just write uh this do cars and if you uh already are familiar with the arrays in JavaScript or typescript you can use a push uh method and using this you can uh add data into your array okay and once uh you have pushed this data you can also return this data now for the get car by ID method what we require is some kind of ID so as you have seen here in this car object I have find the ID brand color and model right so let's say ID is a number instead of uh this kind of string so it will be easier and let's start with uh the default ID 1 and we are going to add uh more uh elements to our array using this ID and we'll be able to get the elements by ID also right so now we know that ID will be a number so I'm going to just uh Define the data type here which will be our number and then we want to get the car by ID so we have to first of all find the car by ID so I'm going to uh just Define const variable which is called car and then what we are going to do is we are going to find the car inside our array which we have here which is cars array so I'm going to just write this dot cars do find and what we want to find we want to find the ID right so I'm going to just write car and then we want to find the ID when we uh call the find method uh over an array we are going to get each and every element using this uh car uh element and then we can call car. ID so I'm going to just write car do ID and and if this car. ID will be equal to the ID which we are going to pass then uh we know that it's our car now here I can see this red squiggly line which says replace car with a parenthesis car so the nest just already have this es lint uh installed and this uh lint is suggesting us to just enclose this car inside the brackets right so now once we get the car by ID we are going to just return this uh car right so we can just uh write return car and then uh it will just return the car object you can see this like this now of course you can add uh different kind of error handling so for example if you don't uh find any car inside this car array you can throw some kind of error but that logic we are going to uh add a little bit later for example or let's add that logic uh right now so let's say if we don't find any car inside our cars array what we want to do we want to throw a new error so I'm going to just write uh throw new and then error so now in nestjs there are different kind of errors which are defined in the nest common uh package so we are going to add one such uh uh error class which is HTTP error error for example or HTTP extension it's called okay so we are going to add this HTTP extension and we are going to throw this HTTP extension and you can see when you hover over uh this HTTP extension you can uh just send the error string and also the status number so because uh we are throwing this error for the not found so we can uh just add not found here and then the status code will be 404 if you are aware with uh the HTTP status codes right now let's move to the delete by ID uh method so here also this logic will be same because we want to just find the car by its ID so this logic we can uh keep it as same and it's going to be a number so we can Define the data type of the ID also and the return value of this delete car by ID first we need to delete this uh car object from our array right so I can just write this dot cars and then we can use the splice method for example so just call this splice method and we want to first of all know the index right so if you want to splice uh uh some uh index from a car uh array what you can do here is instead of uh using this find you can just uh use find index uh method which is going to give you the index if uh this ID is is found inside an array so instead of uh the object you will get an index so I'm going to just write uh index here instead of the car and if there is uh no index so if the index is equal to let's say minus1 then we are going to throw an error in this case right and if the index is present there we're going to splice that index uh from our cars array okay and then we are going to Simply return our uh cards okay so I'm going to just write this dot cars which will be uh the array after the deletion of the uh object if we find the ID uh there now for the put car what I want to do is I want to let's say I want to delete a single element from the object which I found out right so let's say I have this uh object and let's say I just want to update the brand if I find this ID using the ID of uh this object okay I don't want to uh edit the whole object I just want to addit or update the single element from an array right right so how I can do this so as I have shown you uh this kind of uh Swagger documentation as I go inside the put car I will just send the ID of the car and in the uh query parameters I'm going to uh pass the property name and property value right so I want to pass property name and property value so property name will be in our case for example brand color or model and the property value will be for example BMW or gold or the model value here right so we will also learn how to use the properties right so what I want to do here is we want to of course get the ID which will be a number and then I want to uh use the property name and property value so we want to uh pass here property name which will be uh string and also the property value for example and for Simplicity I'm going to make it uh like camel case so property value and property name this will also be the string so for this what we are going to do uh we are going to once again find our element by ID so we we can use this uh this code again for finding the element inside an array by ID so we are going to find the index of the element and if the index is not found then we are going to throw uh the error otherwise we want to edit that uh value so how we can edit that value because we already have cars so what we can do this dot cars and we are going to edit the car for that index so I'm going to just add this square bracket and I'm going to get the value of the element at that index and then I'm going to addit the value so we can use once again this uh square bracket and this will be the property name and we want to just uh replace the value by the value uh which we are providing in the query request right and then once this uh value is addited we can just return the cars uh array once again okay so we have added the business logic inside our service.ts file now we are going to go to the car. controller. TS file and here we are going to add the end points which we want uh to add so I'm going to uh add all these empty uh methods here let me just also remove the async from here and I'm going to just uh make it public method so now let me add all those decorators here first of all for the post car I'm going to add uh post decorator and you can see it's automatically added in my uh Imports right so if you don't uh see this just add it into your import also for get car by ID I will just simply use the get uh decorator for delete I'm going to use the delete uh decorator and for the put request I'm going to use the put decorator right so you can see all these uh uh decorators are automatically imported in my case using visual studio code IDE but if uh they are not automatically added you need to add those Imports right now we also need to add all these parentheses here so let's add all these parentheses and then let's first of all uh implement this post method so inside this post method we don't have any sub route we just want to add the cars in the body so there is a decorator called at the rate body using which we can uh access the body of the post request so just write uh body here and you can see this body is also added in my imports and then this body will be the car right now if you want to add the type for this car you want to add this kind of type which have ID uh brand color and model right so you can either Define simple uh type using typescript or in uh nestjs they have a concept of dto dto stands for data transfer object and dto is an object that defines how data will be sent over the network so we can uh Define uh dto uh file for example so let's define this uh dto uhts file so this file name can be car. dto for example so I'm going to just write car. dto dots and inside this uh car. d. TS what we want to Define we want to define the type of the car so we can uh just write uh export class and class will be the car class or car dto and then inside the car uh class we can Define uh readon ID we can also Define the type of ID which is number then we will Define read only brand and the type will be the string so once we have this kind of uh dto we can import this uh dto class you can also say this will be uh car dto so you know that uh this is the dto and not the normal class and let me fix all the linting uh errors so let's name it car D instead of car right so now let's import this uh c d inside our controller so let's add this import and then we can uh just use this car D2 as the type of our car okay and then we just need to Simply call our service which is our car service and then we have the post car method which takes this uh car as a parameter so we just need to do that and we need to just uh return this value right so just write uh return here and we are good to go now as I can see here this body uh is giving me some kind of error and it say says you need to add these parenthesis so let me add those parenthesis here in order to access uh the body correctly so this method is uh done now we need to move to the get car by ID method so here we are going to add this uh route and we want to access the ID right so it's uh similar to using Express so whenever you want to uh access a parameter you can use colon and then the name of the parameter right so it will be like car colon ID so let me show you this request real quick it will be like this car SL car SL colon ID and you can access the value of ID uh using this controller so let me go back to my implementation and here to access the parameters you can use a decor Ator called uh param and you will see this decorator is also added in my imports and don't forget to add this parenthesis and how you can uh access the parameter so our parameter name will be ID so you can just uh give this uh uh code and then we can access the parameter by its name which is ID in our case and then the name of our variable will be ID and let's say it will be a number right so it will be a number and we just need to Simply return the value from our services so I'm going to just write return this do car service. get car by ID and then we are going to just pass our ID here right so once we have this get car by ID method implemented we can move to the delete car by ID method and we want to uh pass the similar kind of param here because we want to delete the car by ID right so here also we want to access the parameter so once again we can use the same kind of arguments here and then we can just return the value of uh Delete car by ID method from the service right so car service dot delete car by ID and we just need to pass our ID to our method in the inside the service now we will move to the put method so also we will be passing the ID as the parameter in output method if you have seen this request body so we are going to pass the ID and in the query we want to pass as the parameter name or property name and property uh value right so this will be the parameter which is uh the ID and now in order to access the query you need to add a decorator called query so how simple this is so you can just uh add The Decorator query and then you can Define your query parameters so let's let say uh this will be the query uh variable name and now what we are going to do we are going to just uh return the value which is this do service dop putut car by ID where we pass our ID and we want to get the property name and property ID right so I can uh just Define uh const property uh name query dot uh the property name which we want to pass so let's say property name which we want to pass is uh property underscore name from the query params so this will be the property uh value and let's extract this value from our query parameter which will be value right and we are going to pass this so this will be value and we are going to pass this as the second parameter and the third parameter of this method will be property value so now we have implemented all our methods and we just need to test them if they are actually working or not so let's test them one by one so I'm going to just write npm start so our API has started successfully so I'm going to go to my postmen and here first of all I'm going to get the list of all the cars which is going to return us this kind of object which is the mock uh object which we have already defined now let's uh do the post request so let me just add one more request here and this will be uh post request and the route will be car uh in the body what we want to pass we want to pass the uh Json value right so we are going to pass the the Json value and in the body I want to pass this uh kind of object so let's uh pass this kind of uh object from here and let's uh change the values so let's say ID will be two uh the brand will be VW uh the color will be red and uh the model will be let's say Polo okay and let's uh do this request but this is the post request right so we just need to change the uh method here uh not here but uh we need to change the method here in our second tab so the body will be this body and let's uh do this request so send and it says 2011 created that's okay and once uh we have posted our second element we can uh just get all the list of all the cars uh using get cars so I'm going to just send once again cars and we going to see that now we have two elements inside our array first one was already there and this one we have uh added right now we are going to test uh our put method first of all so I'm going to just uh use the similar URL uh but we also want to pass the ID of the car so let's say I want to addit the id2 so you see here it's uh ID 2 or let's say we just want to change the color of uh this VW car okay so I will just give the ID which is two here and in the parameter value let me just change the method to put and we want to uh just uh add the query which will be uh the parameter value or property value so property underscore name will be uh the color and the property value will be so Pro property value will be from Red we want to change it to let's say blue right so right now we we have the VW which is red in color and we want to change this value to uh blue right so this will be the whole query with the query parameters and let's uh do this uh query or let's send this and let's send this request so I'm going to send this request and it says 404 so why uh this is happening we need to check it so I think the problem in our code is because we are not returning our result using promises that's why it's uh giving us uh this problem so I'm going to return the values from get car by ID delete car by ID and put car by ID using the promises so let's uh do that so I'm going to just uh return the promise from the get car by ID and the type to start with we can use any here uh and later you can uh add more specific type here and then what I'm going to do is first of all I will declare uh const here and I want to check whether the ID is a number or not or and if it's not a number then uh I'm going to just convert it so cost car ID is equal to number ID and now we are going to pass this car ID here right and then let's return the promise so return new promise and then we are going to add the resolve value here and then using the arrow function we are going to return the code which we have written here so let's do that and then we can just use resolve to resolve this car object object okay you can also add uh return here and colon here okay so let's do the same for our delete car by ID and put car by ID so let me add these return types here and here and also I'm going to add this code which will be same for both of them and then I'm I'm going to just close this uh bracket here and bracket here and also let's and also let's uh fix all these uh indentation problems and this car ID now will come here and this car ID in delete car by ID will come here and also we need to resolve it right so we need to send the result using the resolve so let's do this here and also inside the put car ID function okay so now because our functions are returning promises inside our controller we can use a sync await also right so I'm going to go to the car. controller. TS file and here I can just write async also I can add this async here and I can add this async here okay uh if you want to be more uh uh specific you can also uh create a constant here and then uh uh write a wait and then return your uh uh value for example I can just write the const result is equal to a wait and then I can return this value from here which will also be fine so I will just leave it like this because I think it's also going to work let's see and check if it works or not so I think uh that's all we want to do here I will just uh restart my uh app once again and I will go to uh my post M request so get cars uh is working let's post uh new car with id2 and now we can see we have two uh cars here and we want to addit this car which have the id2 and we want to change the color to Blue uh till now it's uh red right so let's do this and now you can see it's going to return this result and uh the color of uh this car is changed to the blue color also if you want what you can do because right now it's uh returning this service.ts file we are just returning all the cars so instead of returning all the cars you can simply return the car property which you have changed so like this okay so let's uh run the app once again and let's see uh if it works so I will just go to my Postman again I will just add this car by ID once again and then when I send this this request it's only going to uh return us uh the element or the object which it has changed and we have changed specifically this value okay so this is working uh we also need to check uh if the get car by ID and delete car by ID is working or not so let's let's delete uh this car which have the ID to so I'm going to just write uh Delete and I think we don't need to um add any other uh uh parameters here right let's do the get request first and then we can do the delete so I'm going to just send this request and it's giving us the right response here you can also use one uh id1 we have ID 1 and two right so it's going to give us uh this value by ID also if I want to delete the value so I will just use the same request let's say I want to delete the car by id2 and I will use the method delete here and then I will just send this request and it gives us uh this result which is which means that it has deleted the element with the id2 and now we only have one uh car element inside our array so when you uh give the uh get all cars request it's going to only return us one car because uh the other car we have already deleted you can also change this response to uh something else uh you can uh do something like this that uh when the car is deleted you just send no response and you can also change the status codes uh here also so our basic API code is working now so I think that's it for this video I hope you've enjoyed this video and I will see you in the next video