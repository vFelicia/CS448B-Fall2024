hello guys in this video I'm going to show you how you can create your first maven project in your NetBeans IDE so let's get started first of all open your NetBeans IDE and just click this file option here and then we will just choose the new project option and in here you will be able to find the Mabel category okay so just to the Maven category here and then choose this java application which is the first option here you can choose other type of options here for example JavaFX or web application or other you know other type of maven project but for simplicity we are choosing the first one which is java application right which is a bare bowl project now click Next and in here we are going to give the project name to our maven project and this will be the artifact ID of our project also now artifact ID is a name for your project for example junit has the artifact I will be J unit itself so whatever name you give here it will be the artifact ID of your project so for example maven demo and you can see the artifact ID of my project is also same as the project name now the second option here is the group ID so the group ID is for example you have some company or you are working for some company and its website name is code bind comm so group ID should be the reverse for example of that so in here we have comm dot code bind write or for example you have Java dot org so here you will write Watchi dot Java for example right and it's going to create the package for you according to this rope idea now third option here is this version now version here by default it's 1.0 and after this snapshot keyword is added to your version and this means that your project is in development mode whenever you are developing it's a good practice to add this keyword which is snapshot and this indicates that you are developing your project on your project is in development mode and once the project is you know in the result release mode you can just remove this snapshot keyword from here this last option is optional so you can keep it or you can you know you don't need to keep it it's just optional so let's keep it so my project name was maven demo right so it's creating the package something like this comm dot code binder which comes from group ID and then dot maven dot demo which comes from the project name ok so I'm going to just click finish here and it's going to create me a maven project now in here I can see this source packages and some dependencies but all of them are blank for now and also I can see some Java dependency and the project files so let's open our pom dot XML for now and right now in the pom dot XML we have our group ID which we have given which is comm dot code bind and our artefact ID which we have given which is maven demo and the module which is 1.0 snapshot right and the packaging of it by default it's a jar but you can change the packaging of your maven project inator also you just need to change this chart to for example war or any other option okay so this is the pom dot XML file right palm stands for project object model and it's really important to know about the details of pom dot XML because it's the basic building block I can say of Mabel site right now for example I want to add a source files to my project so I will just go to my source package here and then I will just go to new and in here I'm going to create a new Java class and for the Java class I'm going to give the name as for example app ok and you can see it's inside the maven demo project which is inside our source packages so we are creating a source you know force class so it's inside the source package and for the package you can choose the default package here which is comm dot code bind not may will not demo which is our package name and you can see the created file will be on this path so you have this project so this will be the project and then inside the source directory you will be having the main than the Java folder then comm then code bind then maven then demo and inside them all you will be having this app dot Java class so for now I'm going to copy this path and we are going to you know see the location later for example so just copy this pop and just click finish and after you click finish you can see here this app dot Java is created inside our comm load code by not evil one demo package right so now let's open this location where it's created so open your Windows Explorer and just paste this part up to your project name so inside my NetBeans project I have this maven demo project so I'm going to just copy and paste the path of this here and I'm going to open it so you can see you have this palm dot XML file and you have this source file here right inside so far you have the main and Java then comm code mine maven demo and your app dot Java class here right now for example you want to add the test files how we can do it so for creating the test class you just need to click on your project and then go to new and go to others and in here you will be able to see junit here you can see unit tests and in the unit tests category you can see a unit test right so just do this and then click Next and in here also you just need to give the name of your class so I'm going to just name it as app test because it's a test class right and it's inside the maven demo package and the location will be the test package right and the package name I can also give here right now it says default package but I can just give the package name same as I have given for the for example my source files right so for example here I can give comm dot would bind dot the Mayville dot demo right this was the same package name I have given for my source file right and in here leave everything as default for now and then click finish and you can see in the test packages it has created us the test class inside the same package name right so let's open the folder structure once again and we will go to the Mabel demo once again and inside ours SRC folder now you have main folder which contains our source file and you have the test folder which contains our test files so you can go to test Java comm code by naval demo and you have this class here okay now once you added this test class it uses junit right so when you go to bomb dot axonal you will be able to see this dependency which is automatically added to your bomb dot XML file right so this is due to this class which we have added so if you remove this dependency then it's going to remove this test dependency also so you can see there is one more test dependency folders created for us and in here maven has automatically downloaded these two jar files one is junit 4.12 and second is hamcrest which is the dependency for a.j unit so that's why it has also added this one also right so if you remove this dependency for example I'm going to remove this and I'm going to save my project these tests dependency will also be deleted you see there is no jar file for our junit now and now it's showing the error right so once again when I add in my pom dot XML this dependency for the J unit then it's going to let's see what happens so save it and you can see the dependency is automatically down low loaded and then added to your test dependencies and then you don't have any error now to compile your project what you need to do is we just need to right click on your project and there is a option here which says custom and then choose the bulls now there are different goals possible for your mimin project for example if you want to compile your project you just need to write here compile which is the normal option just write compile write and it's going to compile your project so when I write compile here and click OK in the maven build here you can see it's building your project and you can see this message which says build success this means that your source files are compiled successfully now there is one more goal for example you want to run your test go to the custom goes and here just write tests which will run your tests so just click OK and going to run your test as going to run tests after running the tests is going to show this message which says build success right there is one more command which is for compiling your tests so just go custom goes and this time just write tests compiled so just test hi compile and then click OK and then it's going to you know compile your tests and then it will show you the result which is build success now in order to create a jar file out of your project you just need to right click on your project go to custom goals and in here you just need to write install which is going to create the jar file for your project so just choose install here and click OK so it's going to compile your source file test file it's going to run your tests then is going to create a jar file for your project so just wait for some time and then once it's finished you can see the jar file which will be created for your project so let's go to our project once again which is maven demo and you can see there is a one more folder which is created here which is target and inside a target you will be able to see the jar file created for your project which is maven demo this is the standard format in which this jar file will be created which is a 1 demo which is the artifact ID then the version of your project and then dot the package type of your project which is John in our case right in here you have all the test classes and surefire classes and in here you have maven archiver and other things which can be learned later but in this video I just wanted to show you how you can create your maven project and build it right now if you you know run the clean come on this target will be deleted so see this target for now and then when I run the clean command so good custom goes just right clean here and then run it and once this command is successful we will see here that your target folder will be deleted so it's deletes the target folder once you run the clean come on so in this way you can create a maven project inside your NetBeans IDE I hope you enjoyed this video please rate comment subscribe and bye