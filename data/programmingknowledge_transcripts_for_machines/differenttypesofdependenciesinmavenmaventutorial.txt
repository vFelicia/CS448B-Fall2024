so hello welcome back to the new video of the maven tutorial Series so till now we have covered uh what is Maven uh yes we've seen the softwares that are required we've seen a covered life cycles and basic mapping commands so and now we will see the maven dependencies in this video and on next video onwards we will be creating an actual project and we will see all this theory that we have learned till this video uh how we can Implement in that uh create or the actual project okay so we'll see the map independent dependencies in this video okay so first thing Maven simplifies the creation and the management of the dependency by using a centralized repository that contains a vast collection of Open Source libraries and framework to create and manage dependencies in Maven we have to follow these steps okay so we'll see the step by step how we can create or manage the dependencies in the Maven project Okay so first step is Define the dependencies okay so the first step is to define the dependencies in the projects form.xml file so as I said as I told you in the previous video also com.xml file is very important for the maven projects this is the file where all those uh project related dependencies and are being defined in this file if you if you forgot or if you not Define any dependencies that you have used inside your project and you don't mention over here inside the pump product semen then the project will not work since that dependency will be not implemented in inside your build okay so the this file is important and you have to define the dependencies first inside this file itself okay the com.xml file is an XML file that contains the project configuration information including the dependencies so it also contains the configuration information of the web project also okay so to Define our dependencies you need to specify the group ID the artifact ID and a version of the dependencies okay for example we'll see one example over here you can see one snapshot of the dependency for example to add a spring framework dependency to your project you need to add the following form.xml so imagine one project you are building and you are you are trying to add the spring framework in your project then you have to write this many line of code to tell your project from.xml file or or Maven that you are using the screen framework and add this dependency in my project okay so the root tag will be dependencies inside which a dependency tag is there and inside this dependency tag you create all one dependency itself okay so as you can see we need group ID artifact ID and the version of the dependency so we first Define group ID tag and we'll write all dot spring framework with uh we tell the man that this is the screen framework that we are trying to use you know in my project and the artifact ID and the version of this version of which stream version you are trying to use in your project will specify that version also over here and this is how you you create or Define a dependency in your form.xml file and Maven will understand that hey you are trying to use swing framework audio project okay let me add this dependency in your project okay how to resolve the dependency okay once the dependency is defined now you know how to define the dependency in the palm.xible file Maven will automatically download and resolve dependency from the central repository Maven checks if the dependency is already downloaded in the local repository and if not it it downloads from the central repository so there are two repositories are there one is local repository and one is Central repository okay so local repositories where your all the dependencies resides or downloaded dependency and the central depositories where all those dependencies are there and it first the maven win check okay so maybe we'll check okay so you need fixed spring framework it will check in the local repository whether spring framework is already downloaded over there or not if it is not downloaded in the local repository it will go inside the central repository and download the spring framework and add this depend dependence dependent dependency in your project for the local repository okay so this is how the dependencies are resolved in the Marion okay so dependent is dependency scope okay so dependencies in Maven can be have different Scopes okay so Scopes are different which determine when and where the dependency is being used okay so you define the dependencies you resolve the dependencies now we have to define the scope of the dependence dependency okay the four main scope are compiled provided runtime and test the scope can be specified in the dependency declaration all right so where we declare the dependency inside this dependency tag for example to specify the dependency is only required for the testing you would add the following pump.xml so imagine when testing tool okay so J unit is a testing tool you required for the testing of the Java project so you are trying to add the dependency for the J unit so think about it you when you require the J unit obviously when the testing phase come of your testing phase will come for your project then and then only you require junit right so you can Define that scope of test here inside the dependency tag itself there and by telling the maven that hey use this junit framework only for the testing phase okay so you are defining the scope you are limiting the scope of that framework in the testing phase itself okay so these this is how your dependency scope is being resolved okay so next comes how to manage the dependency okay so Maven project says Maven provides several goals to manage the dependencies including adding and removing or updating the dependencies for example to update a dependency you can use the following command Okay so mavin does this thing of managing the dependencies automatically Okay so it will add it will remove it will update your dependencies automatically okay so to update your dependencies you can use this following command mvn version colon use latest version okay so you are telling the maven that hey uh do one thing update all those dependencies to them to their latest versions okay so if you are using three dependencies Maven will go and update all those three dependencies to the latest version and it will do automatically okay so this will update all the positive dependency to the latest version available in the central repository okay in summary in short defining and managing dependencies in Maven is simple process that is mostly done through the projects form.xml file again I'm saying pong.xml file is very important my Maven provides a centralized repository and several goes to simplify the management of dependencies in Java based projects okay okay so we'll see uh now the types of dependencies now till now we have covered how The dependencies Works what are the different phases of dependencies now we'll see types of dependencies all right so in mavin there are several types of dependencies that can be defined in the projects form.xml file these these dependent dependencies will specify the libraries or the framework that is being used in our projects all right so first is compile dependencies these dependencies are required for the project to compile and build correctly now when download these dependencies and add them to the projects class path this depend this dependencies are also packed packaged with the projects output jar or War file okay so these are the early early dependencies that we require first to compile your project these dependencies which are required are comes inside the compile dependencies within a provided dependency dependent dependencies this dependency is are required for the project to compile but they are expected to provide it by the runtime environment okay so example of such dependencies are servlets API and JSP API these dependencies are not packaged in the projects chart okay so the compiled dependencies are packaged with the jar and but the provider dependencies are not packaged with the jar of War file whatever the file you are creating okay so next is runtime dependencies these dependencies are required for the project to run but not required for the project to compile okay so first uh two dependencies that we have seen those are required for early okay so when your project compiles that that time these dependencies are required but after compilation when the project will run for those we have different dependencies that dependencies come under the runtime dependencies right so these dependencies are added to the class part at runtime but they are not packaged again these are also not packaged with the jar or oil now your project run okay so now come test dependencies so which are required for the testing purposes okay so these dependencies are required for the projects tests but not required for the project to compile or run as I said there is no use of these test dependencies for the compilation part and the Running part okay so these dependencies are added in the class path when running tests but again these are also not packaged with the jar or file okay so next comes system dependencies this dependencies are not available in the central Maven repository and are required to be manually installed on the local machine to include the system dependencies in the project you must specify the path of to the dependency in the jar file okay so these are the dependencies that are not provided in the mail and Central repository you have to do them these tasks manually if you are using any system dependencies you this is the thing that you have to do manually there is no way to do this automated oh automated manual okay so next is import dependencies these dependencies are used to import the dependencies from other Maven projects when importing a dependency Maven will use imported projects form dot XML file to download and manage the dependency okay so if you are trying to use another Maven Project's dependencies so at this time import dependencies will come into the picture Okay so imagine when you have one project and you are trying to you have you want the another Maven projects dependencies so input dependencies will come into the picture they will go inside that projects from.xml files they will see uh what are the what are all dependencies that the other project is depending uh applying it it will get those all dependencies and it will automatically add those dependent dependencies in your project so these are types of the input import depends import dependencies okay so in summary understanding that if different types of dependencies in Maven is essential to properly manage the project dependencies and ensure that the project compiles runs and tests correctly so why I'm taking this theoretical lectures first you have to understand what are you know what is dependencies but you don't know what is compile dependencies for a dependencies you first you have to understand these are types of the dependencies then and then only you can go into go and create a maven project and work on it okay so I guess this is the pretty much theoretical part that you want to understand before you get your hand dirty on the management projects okay so on the next video onwards we'll be creating our new Maven projects using IntelliJ IDEA or Eclipse any ID that I can choose so you you also can choose any ID or those IDs are come with Maven integration in inbuilt just a visualization part will be different okay so thank you for watching this video and I will see you in the next one