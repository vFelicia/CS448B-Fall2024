in this video we'll be making our second programming project which is going to be this the snake game so i'm sure everybody knows how to play this game you have a snake which grows on eating the food and the objective is to grow the snake as long as possible without hurting yourself or hitting one of them so if you do any of those you lose this game well there are different variations of this game some have teleportable walls that is if you go through this wall you end up coming from there and some versions even have obstacles in between them instead of this free space but we're not going to do any of those we are just going to stick to the simple version with four concrete walls and uh empty space in between right so let's get started let's create a new project it's going to be a console application and the language is c plus plus project title let's say snake and these things remain as it is right and now let's first start by defining the board so if you remember from our previous project where we made our detector game we had defined a 2d array or a matrix to hold the board right but here if you see you don't need that why well in the previous game where we made a tictactoe game the board only had nine elements and we were concerned about all the nine elements of the board right so we were concerned about what all the board contained but here you don't have to actually be concerned about all the elements of the board here the board just acts as a background the only things you are concerned about are the position of the snake the position of the fruit and the position of the wall so other than that you don't need to keep track of other things so here we are just going to print the board just like we print something on the console so let's define a function for that let's say void board and here we are going to draw the board so uh let's first define the dimensions of the board the width and height so let's say uh the width is going to be somewhere around 50 characters so since we are working on the console you are going to see everything in terms of characters or this is basically a substitute for pixels if you are familiar with graphics and the height is going to be somewhere around let's say 25 characters now these two things are constant right so the these won't change throughout the project so if you want to make them as constant so you can just say const over here so this keyword will make these things as constant and now i would like to introduce you the concepts of macros so macros let me write it down here macros these are nothing but oneliner code right so let's say you want to define a function to calculate the square so what you do typically is you write something like this right so in skew and this will return x into x right so this is how you define a small function but what you can do is instead of defining it as a function you can define it as a symbol so when i pin symbol what i mean is if i type that particular symbol then this operation should be performed so that is what a macro does so the way you define macro is you put hash define and then you put the symbol so let's say sq over here and inside this whatever parameters you want to pass without any data type so this is basically a symbol and here you want to uh define the operations so here our operation is x into x so that is basically going to return as the square of a number so here you don't have any assignment operators or written operators all this means is whenever i say sq of x it should do this particular operation so if you say something like sq of 5 and here if you run this you should be getting the output as 25 so that's how you use macros and you can do the same with these two variables also so the way you define it as hash defined width is 50 and hash define height 25 so now whenever i save width i mean 50 and whenever i say height i mean 25 so now you can remove this you don't need this anymore so now the board is going to be two loops the first loop or the outer loop is going to control the number of rows so here the number of rows is defined by height right because height is basically how down you go so that is how many rows you have in your board so i is less than the height of the board and i plus plus and inside this you will control the width so enter in let's say j and inside this you are going to print something so here if you observe this board for every row there are two wall pieces right so every row starts with one wall and then ends with one bolt so since that default you can subtract two here and then put those two characters so you have one ball in the beginning of a row and one wall at the end of the row and then you go to the new line and inside this basically if the row number is 1 or the row number is height minus 1 that is if you are printing this row or this row then you need to print all walls so here we are just going to print out these hashes or else you need to print out the empty space which is basically this space right so now if you call your board function that should print a board for us so here we have the bowl now this board looks pretty squished to the left so you can take care of that by adding a couple of tabs and that will center the board so now let's see how to animate things on the console so if you are familiar with graphics or even if you have heard about animation you might know that animation is nothing but just fast moving pictures right so here if you want to animate something on the board let's say you have some object on the board then the video animators you will quickly move the position of that object and it will appear as moving so to move something on the board or to place something on the board you need to know about the coordinate system which the computer uses so let's talk about that quickly so you might have come across this cartesian coordinate system in your math class right so you have a coordinate system where if you go right the x coordinate increases and if you go vertically upwards your y coordinate increases and this will position basically which is the intersection of these two axis this is the origin which is defined by this zero zero coordinate right so this is the coordinate system you all have come across in your math class now what happens in a computer is this origin is shifted to this top left corner so let me just clear this thing so in a computer your access are defined as follows so if this is the top left corner of the screen that is this position where i'm pointing my cursor that position is basically your zero zero position so this is your origin in a computer and as you go right your x coordinate increases and as you go down your y coordinate increases so basically your y is flipped in case of a computer and x remains the same so as you go up your y is decreasing and as you go left your xcoordinate decreases so that's how the coordinate system in a computer is defined you can use this coordinate system to move objects in your screen or even place objects in your screen so every object is defined by x coordinate and y coordinate so if you put some point here so it has some x coordinate that is how much it has moved from the origin in the horizontal direction and some y coordinate that is how much it has moved from the vertical direction right so this is how the coordinate system of the computer is defined and we will be using this system to operate on our board right so let's define an arbitrary object somewhere so let's say our int x which is the x coordinate is going to be somewhere around 10 characters and y is also 10 so that means that this is 10 characters from the left and then 10 characters down so it it will be in some arbitrary position somewhere let let's just see where it is so if i here if i print that particular object that is pretty simple to print so if the coordinates match you are going to print that object so how do you do that well i is controlling the height right so height defines how deep you are on the board so that is basically the y axis so you need to compare i with y and j with x so if you if these two coordinates are equal then you can say that your object is at that particular position and you can print something so let's go with this zero for now so that is going to be our object now if i try to print this board you will be getting your object here so and this is 10 characters from the left and 10 characters towards the bottom but if you see this position is exactly not as square as expected uh that is because in console the next line has some gap if you see over here so this gap is much bigger than this gap that is why it doesn't end up as a square but if you're using some graphics library then this will work so it will exactly be as a square so it will end up somewhere over here so this could be the 10 comma 10 point but here since we are working on the console uh the yaxis is much wider or i should say much deeper than the xaxis so uh even when you animate your snake it's going to move faster on the vertical direction than on the horizontal direction that's actually not a logical error that's because of the property of console you cannot do anything about that right so if you're using any graphics library then that problem won't be there so now let's see how to animate this animating is very easy you just need to move the board right so uh let's say i will create an infinite loop here and inside this we will first call the board and every time this loop runs we will just increment the x coordinate so when you increase the x coordinate from this coordinate system your object is going to move towards the right right so now if you run this program you should be getting some kind of movement so here you can see that this o is moving towards the right but uh you cannot actually see it as a movement this is basically it is just printing the board again and again so if you have some way to update the board then you can see the movement so one way you can update us you can use your console command so if i pull up my console over here this is basically a powershell but in windows or if you're using this code blocks in windows it's going to use the use your cmd as your default console right so in cmd the command for clearing the screen is cls so if i type something over here under type cls that thing is cleared right and if i were linux the command for clearing the cler and the way you pass in such shell commands or such console commands are you include another library called cstdlib which stands for c standard library you might have come across this while making a tictactoe game this is the library which had our random function and we will be using that random function in our code as well right so here to send commands to the console you use system and inside this you write the command so in in my case it is the windows operating system so i write cls and in case you're on linux you need to write clear right so let me just comment distance if you're on linux you need to write clear and i forgot the semicolon and now if i run this i should be getting a movement but if you see here it kind of flickers on my screen right so this board is up getting updated but it is annoying to see so uh this you cannot actually control so more technically if you know about the fps or the refresh rate so you cannot control these things of a console console is not a property of the language or just id right it is a property of the operating system so you cannot control something from an external source which belongs to the operating system so one way you can take care of this flickering is instead of clearing the screen this is happening because it is doing two processes right first it is clearing the screen and then again it is drawing the board so if you just overwrite the board as we used to do with our normal line so if you remember from our escape sequences video we had talked about an escape sequence called slash r right so if you write something over here let's say hello world and um here if i put slash r and i type something else so as is then the first four characters which are these four characters are going to be replaced by the word asas so now if i run this i should be saying iso over so that is because he ll has been replaced by this that is because this slash r will take the cursor from the end of the line and place it in the beginning but we cannot use the slash r over here that is because we are using multiple lines right so you are printing around let's say 25 lines because the height is 25 so you're printing 25 lines and there is no escape sequence to get your cursor back a line so slash n will move your cursor down a line but you cannot go up a line right so for that i'm going to tell you a solution but this is going to work only if you're on windows so let me write it down here this is only for windows and for linux you need to find out a library which tested so basically what we are going to do is we are going to pick up this cursor from the end of the screen and we are going to go all the way up to the origin and place it back so if you do that instead of clearing the screen you are moving the cursor and when you print your data again it's going to be overwritten on the console so it looks like it has been cleared but actually it has been overwritten instead of clearing so this solution what i am going to give you in this particular video will work only if you are on windows so if you are on linux you need to find out some library which will do that for you right so if you are on windows you need to include a library called windows starter which will basically allow you to control the cursor's position on your console and here what you need to do is instead of system clear you can do set console cursor position and here you need to give some handle which is get htd handle inserted std output handle so if you don't understand what this means it's okay it's just you can think of it as it's going to pick up the cursor from the end and it's going to put it back on the origin and to put it back on the origin or any specific coordinate you need to pass in a coordinate data structure well coordinate is basically a simple data structure which is already defined in windows.h and we'll be using this so if you're on linux and you're using some other library to achieve this you need to define this uh structure to follow along with this tutorial which is basically a simple structure it is something like in x and y so this is the structure which is defined in windows so i'm not going to define this again it's there in this windows.h and that's what we are using over here to send the position to our handle which will basically take the cursor from this position and then put it back to the origin so the origins coordinate are basically 0 zero so you need to pass that in and now if you see you won't have any flickering screen you will have a neat animation going on on your screen so as you can see there is no flickering although you can see that cursor update somewhere but this is much better right instead of the flickering screen so again this solution is only for windows users so if you're in linux you have some other libraries like you have n cursors and many other libraries simple google search will get you what you want right now uh let us remove all these things we have now understood how to do animation and here what we are going to do is we are first going to define our snake so go to file new and clash and the name of the class is snake and you can remove all these things right it doesn't really matter you don't need destructor on all these things we'll create if we want to right and here just click ok and in snake dot h we have this template code so again i prefer private to be on the top so if you want that you can follow this or if you if you're okay with the structure it has given before you can follow that it doesn't really matter and here first of all we are going to decide what is going to be private and what is going to be public so what are the features that we need our snake to have first of all it will have a position right the position of the head to be places and next it should have a length to define how long the snake is and you also need a direction and you also need a velocity or you can say speed of the snake so how fast it goes so here in case of velocity or speed we are going to talk in terms of number of characters so let me write it down here that is basically it is going to move two characters at a time three characters at a time and so on so in case you are working with some graphics library that the same thing you do with pixels so you say three pixels at the time or five pixels at a time and since here we are on console we are going to talk everything in terms of number of characters right so uh here let me define the private variables first in this you are having to have a position so it's going to be quad position so again if you are in linux you need to define the structure and uh for using the squad you need to include windows started right so this is because this is a separate file that snake.h is a separate file so even if you are included in main you need to include it again but you can exclude this over here because once we actually include this file you are going to include all these things it doesn't matter even if you keep it twice because of this guard block as i had explained before this guard block what it does is it takes care of multiple initialization so here i have already included windows.h now i when i do hash include snake dot h it will take care of the fact that i have already included windows started so i don't need to include it again but here if you want to use these things you need to definitely specify that you are using windows. or else you cannot use this and will throw you an error right and here you need a length of the snake and you have a velocity so in well and you have a direction so let's say card direction and in the public section we need to define constructor first and this is going to take a position that is the initial position and uh initial velocity for our snake so let's define this constructor and dot cpp and um here we talk and specify those things so called position and velocity and here you don't have to include windows attached that is because again you are including snake dot h which comes with windows started so you don't have to include it again and uh here you need to set the position and velocity so since i'm using the same name for both the variables i need to use this pointer so if you are not using the same name it's okay but if you are using the same name you need to use this pointer and the velocity also goes the same way and initially the length is going to be one that is because you have one head right so without the length cannot be zero because you always have a head for the snake so the length is going to be one initially and the direction so the direction you can say uh something like none right because the snake is not moving now and um we'll have a method to change the direction of the snake so let's say on change dir which will change the direction it will take some direction to change and here let's define that method it's void snake change dir and what you need to do is direction equal to there basically i'm just setting the direction of a snake and um for moving the snake let's create a move method or move snake well move is basically a defined method in c so it's not preferable to overwrite it you can overwrite it you can define something like this but it's preferable not to overwrite any default method so let's say move snake and this is not going to take any parameter because it's just going to perform something so void does make more snake and here what you need to do is you need to switch the direction that is basically you need to move the snake in that particular direction so switch direction and here you need to put different cases so in case it is going up then what you need to do refer to this coordinate system you need to decrease the y coordinate so what we're going to do is cos dot capital y minus equal to the speed so basically if i say that my snake is moving two characters per second or two characters per iteration then i need to subtract those many characters right to move to appear to be moving in that much speed so that is why we are going to subtract the velocity over here or speed you can name it whatever you want and here the break is mandatory and this will be true for all the four directions so let me just copy it down four times and uh it's going to up down left and right right is you need to increase your velocity left test you need to decrease your velocity and um for down you need to increase your velocity on the y coordinate so this will move your snake in your preferred direction and that should be it so now you have a snake you have initialized it with some initial position and velocity and you have a method to change the direction of a snake and now you even have a method to move the snake and here since we need the position of the snake to draw it on the board you also need a method to get the position so let's say uh get pause which will return the position of the snake and uh this is going to be return first and uh i forgot to mention slate here this will be declared as normal function if i forgot to mention this this basically means that uh this get pass function is related only to the snake class right i'm sure everybody knows this and uh here we'll quickly define a prototype for that let's quad uh get pause and done so now you have four methods let's go very quickly one is a constructor which will initialize our variables one is a method to change our direction so change direction of the snake and one is to move the snake in that particular direction and one is to get the position of the snake or i should say get the current position so now let's use this thing in our main file so you here as i told you you can remove this windows storage because it is going to be included with snake dot h and uh here let us first create a snake so snake s and let's sneak and inside this let's see it's going to be initially in the middle of the board so that's basically 50 by 2 and 25 by 2 or you can say bit by 2 and height by 2 that makes more sense right so width over 2 and height over 2 that is basically the center of the board and velocity let's say it's going to be 1 that is one character at a time and here you instead of y and x you need to capture the position of the snake so called the snake boss you can see equal to um snake dot get position and here instead of why you need to say snake pause dot y and instead of j you need to say snake poss dot x so so far so good we have created a snake which is going to be on the middle of the board and which is going to move at a speed of one character at a time and here um let us just clear all these comments and now let's see how to get input so that we can control the snake so you need to move the snake only when you press something right so here how do you capture that keystrokes well you have a library to do that so that is called corneo or i should say console input output and here you can just do the following so if you say if kb hid so kb hit stands for keyboard hit so it will be true if you hit a key on your keyboard not necessarily enter key you can hit any key on your keyboard and this is going to evaluate to true and to capture your key you need to say gets yet so get ch will basically give you the key which you just pressed so uh we will capture this and instead of capturing this we can switch this so that we don't have to write a couple of if statements we can just say switch get ch which will basically give us the key and here you can control it so let's say up so i'm not going to do it for the arrow keys because i don't really remember the ascii values of the arrow keys so if you want arrow keys you need to give the ascii value so let's say 132 is the ascii value of upper key it is not the case i'm just saying but if 132 is the ascii value for the up key then you need to give something like this but uh i'm just going to go with wsd for now so case w then um what you need to do you need to move the snake upwards right so snake dog change their double up sorry u and then break and you need to do this for all the four directions so control c v b w a s d and uh d is basically go to right s is down and this is left for now this will more snake in our preferred direction and to move the snake you just call snake dot move snake which will move a snake and now if you run this you will be getting a snake which can move on your command so now you can see that it is not moving because initially we had set the snake's direction to be n right so we did not have any case which will uh move the position for n so it doesn't move for any iteration and now once i press w you can see that it started moving up a it started moving left yes it started moving down and d it started moving to the right so now i can control this little character and keeps moving right so that is how the snake game is different so once you press a key it will keep moving in that particular direction until you change the direction so this is what we needed and we got a moving character on our board so now let's see how to first uh generate the food and calculate the points and then we will talk about how to increase the snakes length once it eats the food right so now let us just close this and talk about the food so again you need to create another class for generating the food so it's going to be it's a food and again you don't need the getter center or the destructor created yes okay and uh here you have food dot h and again i don't need these things so here in the private section what we're going to do is we are going to have a position of the full right so that is mandatory you you cannot have any object without a position right so for the position you again need to include windows windows.h and uh it's going to be called pause and uh you do need a velocity well you don't need anything else you don't need velocity you don't need any uh direction for that foot it's just going to be a point where if you go over to that point and then eat that fool you're just going to generate another form so basically you don't need anything else and uh in the public section the public section we have a constructor basically well you don't have to pass anything to the constructor it's basically going to initialize this position with some random value but if you see this game always this would start at this possible position if you want something like that then you need to define a initial starting position so as we did for our snakes you need to do something like this but we are going to go with random initialization right from beginning itself so again for random function to work you need to include cstdlib and we are going to define a function called gen this is basically going to generate output and this is going to be void and we also need a function to return a supposition so it's going to be get so this will return our position so let's define these functions uh inside this what we're going to do is just generate food it first time it's just going to generate the food once you create it and uh for generating the food sorry snake sorry food gentle and what this is going to do is it's just going to generate two different random numbers in the in some range so if you remember the formula for generating a random numbers in the ring that is u2l it was basically rand mod u minus l plus 1 u minus l plus 1 plus l so this was the formula for generating a random number in a range so here our upper limit is going to be for the x axis is going to be width and the lower limit is zero right so uh here you just need to say rand mod and then u minus l plus one plus l so for us the u is basically with minus the lower limit now lower limit if you keep zero then the food will have a chance of getting generated on the walls of support so you don't want that to happen so it's going to be one and plus one so these two cancel out so you just need to say random width and then plus l which is one again for uh the y axis the upper limit is going to be height and the lower limit is again going to be one so this will generate a random position for our food which will be on the board and for getting position it's very simple you just need to say for the word get position so we did not define that well we did quad get position and here you need to say return pause so this will return the position of the current flow and that's it for food so you need to include that also over here um now main file so here we need to say hash include food dot h and here we don't need cst database again because we have defined it inside this food dot it so that gets included automatically and here we need to create a food object so below the snake let's create a food so it's going to be good and as a constructor doesn't need anything so you can just put it like this and here we need to check whether the snake has eaten the food or not so for that what you can do is you can have a function inside the snake which will check whether its coordinates have matched the coordinates of food or not so what you can do is you can inside the snake dot h you can define another function called boolean let's say eaton this will basically say whether the food has been eaten by the snake or not so you can just pass in some coordinates inside this that is the coordinates of the food so coordinate food it's a food pass and we'll define it inside snake dot cpp it's basically um snake eaten and this will return true if the coordinates match so if i say uh if put password i did not capture it over here so it's called put pause and if put pause dot x is equal to pause dot x and uh put pause dot y is equal to positive y that is basically if the position of the head and position of the food are equal then it means that the food has been eaten by the snake so then you need to return to else you just return false so this means that uh if you eat the food it will return true and if it didn't eat return false and in main you can use that over here so if you can say snake dot eaten and you can get the foods equations of food dot um get pause and this will give you the position of the food which you can pass into the snake and if the snake has eaten then you need to generate another force so you can say full dot gen food and you also need to increase the length so you you can say snake dot length well length is a private variable so let's say snake dot grow and we will define a function to grow the snake so you can see void grow and we define it as a void bro which is landlessness and this should grow our snake and that should be it so now you have the logic for eating a food and then growing the snake well we are not going to see the snake grow but it is just going to grow in numbers we won't be seeing that visually we will see how to deal with showing that visually right and here we forgot to draw the food so here you need to put that else if our i is equal to food cos dot y and uh j is equal to food pause dot x well i did not capture that so quad foot cos equal to four dot get pass then for for the let's say the star right the star works well now if you run this um we have an error what does it say it says that width and height were not declared in the scope now that is because in food.hedge we did not define the width and height right we had defined it in the main.cpp so you need to copy these two lines here so ctrl c and put it inside food.h that is because we are using those two right we're not uh we did not define it in food dot x that is why it was give me an error and now if you run this you have another it says has no member y that is because this is a capital y and um here you have the snake and the food so here you can see the food so if i eat that food it's going to generate another food in some random position so you can see that generated over there and here we did not write the logic for collision so we'll take care of that afterwards well it's going to be in the same places that is because we did not see the random function so if you uh have seen the previous video where we made the tictactoe game you know what is serious well to see the random function what we are going to do here is we are just going to say the main function so to see the random function what we are going to do is hash include c time and here in the main function we will see is time right so now when you run it you will have a snake and food and uh this food will be generated once you eat it so here i ate that food now you can see that another one has been generated and then another one has been generated so we did not write the collision logic so if you go through the wall you will come you won't come back and that will take care now so to do that what we are going to do is we are going to write another function so its going to save cool collided and it's property of the snake so snake collided and then this is going to just return to our fall so this is going to return true if our position of x is less than let's say one that is because at the zeroth position you have the wall right so if it is less than one you mean it means that you cross the position of one and you cross the wall and uh in case your x is really greater than height then it means the width then it means that you have crossed the other wall also and similarly for the y you need to say it is less than one or position dot y is greater than the height then you need to return true it means that you have collided with the wall or else you return false all here so uh we forgot to define the prototype so here it is going to be bool collided and in main function instead of true we are just going to maintain a variable called game over which will track whether the game is over or not so in the beginning game over is false and while true you will change it to while game over or while not game over you need to run all these things and if the snake collided so if the snare collided then you will just say game over equal to true and this will stop executing the loop right now if you run this we got an error does it say again the width and height are not defined in snake dot h so we need to copy those two things from here and put it over here right now if you run this you don't have any errors hopefully and here you can see that the snake moves and if i go and hit the wall it ended the process so now the game ends successfully once i hit the wall and uh we have taken care of the food also so i think that the video has become long enough it has been an hour so the next video will see how to increase the snake's length and show it visually well we are increasing the snakes length over here but we are not showing the increase in its body right so if we are just moving the head and we are eating and we made quite a progress right so let's see what we have made we have made this board and then we have updated the port without causing any flickering and that's a great improvement and we also animated this character which can eat the food and we also written the logic for the food to appear at different random locations right in this video we will complete this game by adding the body for the snake well you know that the snake is growing by letting the food but it's just growing in numbers right we're not showing it visually so we will be showing that and also before that let's just fix some logical errors so let's see what are those errors so let's just drive one of the other pops up but i'm telling you i'm lucky but just to save the time and just ending this game here and let's first talk about the most obvious logical order so in the definition of food what we have said is once a food is created i want the random location on the board which will be the location where all food is placed right that's what we said when we are calling this generate food function inside the constructor right but what is happening here if you run this program again and again so let's run this once again so here you will be seeing that the first code is over here and if i close that again you will be seeing that the second time also the food is over there but the consequent foods are getting randomized so if you say the second food is somewhere over there and if we start this game again and try to eat that you see that the second food has been generated at some random location right the first one was somewhere over there so to fix this well you can go with it it's not actually an error it is actually not what we wanted right it's basically what i did not want but if you wanted that the first should be generated like that you can go ahead with this and skip this portion but since we wanted to generate the food at a random position right from the beginning what we are doing wrong is here first we are generating the food object and then we are shading the random function right so if we were introduced to the random function and the seeding function or back in the detector video right so if you remember the seeding function is a kind of controller to the random number generator well the random number generator will generate some random number it will do some calculation give you a number when the program is loaded onto the memory right so if you want a different random number what you need to do is you need to close everything and then open it again but we don't want to do that right we want random numbers right when we are in the memory so what we do is we change the seed so seed is like a starting point of the algorithm and what we do is we seed it with some number every time we want to generate a new number so what is the thing which is changing constantly well time is changing constantly so what we do is we just seed it with the time so this one will take the time it will take the time as an integer and then make the random number generated start from that particular term that is why you get different numbers after feeding it but what is happening here is we are calling the random function before seeding it right for the first time from the next time onwards one the food is heated the logic is over here right which is after the seeding function that is why you are getting randomized locations for the consequent foods but not for the first one so to fix that it is very simple what you can do is you can get rid of the constructor well i don't know why i define this constructive basically when we define a constructor what we actually see is we need the constructor to do something which the default constructor with a compiler will construct for this class can't do it but what the default constructor does it will basically create the memory required for this particular class right for loading this class onto the memory you need some amount of memory which is calculated by the constructor well we wanted the constructor to do something extra that is called this function on the creation and it did not work out as we expected that is why we can just get rid of the constructor and then call the function manually well if you want to keep the working of the program just like before then you can skip this step as i told you it's just preference right i prefer that would be generated at a random location right from the starting so you can go there and after seeding the function what we can do is we can now call the generate food method so this is the one line which we wanted to skip by using the constructor which was actually worthless right so creating a constructor was more good and at least for this kind of a game where we want the first element to be randomized so it basically get rid of the constructor and that will solve the issue now if you run this you will be getting the foods at different locations so one has been generated over here close that open that again so the other one has been generated but this is the problem actually which i wanted to show you in the beginning right well uh when i was eating the food i actually knew that at some point this would happen that is we won't see any food on the pool that is a major logical issue with this program which we made in the previous video and we will be fixing that right now so here if you see there is no food on the board but actually it has been generated we will see why that's happening okay so close that and now we fix the most obvious now let's go on to the issue which we just saw that the food is not yet getting generated well what we're doing in the generate food method here we are saying that we want some random number in the range of one to with minus one why uh we told that uh one the first character is basically reserved for the first wall and the last character is reserved for the last one so basically you want numbers from one to with minus one leaving those two characters it sounds reasonable right but if you forgot the math it is going to tell you a totally different story so let's see what the math is let me pull up my paint over here and now let's first talk about one of these width or height both of them are going to go with the same logic so we can talk about only one of them right so here let's say i draw the height so what is the height height was something like 25 right so the whole thing is actually 25 characters right and what we're saying we are saying that the first character and the last character are designed for the calls so from a computer's perspective what are these numbers going to be the computer starts complete from zero right so 25 characters is basically 0 to 24 for the computer and what we are saying is we are saying that this 0 and this 24 is not required in our range so basically we want numbers from 1 to 23 we don't want 0 we don't want the last character which is 24 right so this range becomes 1 to 23 well to get a number in the state what you can do is plug it into the formula so what is the formula for random number generation it is if you want a number from sorry n that is a lower limit to u which is the upper limit and lower limit is included and upper limit is not included right so you will be getting some numbers till u minus 1 so if you want numbers in this range that is l inclusive and u not inclusive you won't get the u then the formula is you need to plug in rand mod it was u minus l plus 1 plus l right so this is a formula you can plug it into this formula you can even see logically basically both of them are going to give you the same result and we'll just use the formula for simplicity purposes over here what we can do is just plug it into this formula so what it becomes let me just write it as r this is basically the random function r 1 and u is over here 24 right because we want 23 to be included and in this formula this particular u is not included in this random number generation so we'll just increase this by one number that is 24 and that will become 24 minus l plus one that is one plus one the lower limit is one which is included that's why we don't have to do anything to it and a plus one so what this becomes is i mod 22 plus one and what is 22 it is basically 25 minus 3 right so this is the number which we wanted to generate actually but what we did is we basically went by our intuition and messed up the logic right so to correct this what we need to do is using this particular formula this becomes minus three and this will become plus three and the same will go with height also we talked about height the same thing will go with the width also so if you draw a similar kind of analogy you will be seeing that the same logic will work for the width also right so let me just clear that and here it is minus three and this is plus one now this will fix the disappearance of the foot and there is another major flaw in our looping right so where are we looking we are looking over here with the board where we are displaying there is a major flaw in that and believe me if you have been able to identify that particular error you are going to be a great programmer right so let's see what the error is it is basically lying within the inner loop what we are doing well for the outer loop it is pretty straightforward we are going which is basically how the computer sees numbers from zero to n minus one and for the fifth we are doing something different right so what are we doing here we are saying that we are going from zero to with minus two and we had a reason that these two characters which are basically the walls are constant for all the rows so instead of including them inside the loop why not just explode them and run the loop only for the width minus two number of characters so that's what we did and that sounded reasonable but here is the problem what happens is let's say my uh generated xaxis which is basically the width is going to be 28 right sorry what is the maximum range is 50 right and what you can do if this is 50 the maximum number you can generate leaving 0 and 49 is 48 right so this is the maximum number you can generate and let's say that that is our x coordinate that is the value of your width now what happens here well if you see here j is running from zero to which minus two what is with minus two it is basically forty eight and it's not reaching forty it's just going till forty eight which means going till forty seven only right now if you see this you don't have a way to actually display this coordinate in this loop at all because it is out of bounds of this particular loop this loop will run only till 47 and you are asking it to show something which is on the 48th coordinate which is not possible by this loop right so how do i fix this well we can draw an analogy over here so if you draw the quantity which is js perspective w is basically the original width of output so say this when w is 0 j is not undefined why is that well let me just create this thing so that we can see this is the leftmost corner of our board and this is 25 right 25 characters or 25 pixels and here what we're doing is we are saying this is our character the width character and we are saying that the inner loop should run from 0 to 47 and we are including another character and that total makes it 50 it's 0 to 47 is 48 characters plus 1 plus 150 and this is the other one now what is happening is let's say my coordinate is 0 right when the x coordinate is 0 it basically means this particular position where the wall is there right but what is happening here our zero is starting from one step to the right because of this particular looping and this particular character before the loop so what is happening our loop which is starting is starting one step towards the right and that is why we are missing out our coordinates so what happens is if j is sorry if w which is our original x axis is zero j is not returned defined it is not there at all and when does j equal to zero start when with equal to one and so on this will continue when 50 equal to 48 j equal to 47 as we just saw and with just 49 it is not present right so this is the reason why we were not getting anything on the board not this is not the complete reason the actual reason was because we were messing up the formula the random number generation i feel to fix this what we can do is by comparing the coordinates we need to add one to this right so if 0 we don't care about the zero or the 49th coordinate right we don't want these two things because we're not going to generate those two they you need to compare only these things right you need to compare only these things and to compare that what we can do is we can add one to the j before comparing it with the x coordinate so to fix this what we are going to do here is when we need to canvas let me just leave this and here uh in place of k it's going to be j plus 1 and that should hopefully fix all the logical errors which you'll need so save that run that again and here we have our first fruit if you eat that the second food is getting generated and hopefully it should not stop generating it should be generating till we play this game and it should stay within the range of board and it should be visible to the player right so when if you say this is visible and trust me it's going to work and there are no kind of mistakes in this program and this is completely fixed now well we'll fix one more thing that is if i go to this particular wall i will crash before actually crashing so if you see this i i have not yet crashed the one but it's in that uh i have crashed this one that means i need to go inside the one so to fix that i mean it's the coordinate issue and also a placement of movement so let's first fix the coordinate if you go greater than with 1 so going by the same logic with minus 1 is going to be 49 because with this 15 so with minus 1 is going to be 49 so what you want you want something greater than 48 not 49 so it's going to be with 2 and that should fix the issue and um for the other one which i just showed you there for the rightmost one what is happening is we are first drawing the board we are moving we are actually changing the direction of this tape we are moving the snake getting updated before the speed so that is why you are not seeing whether the snake has been collided or not so you can just move this thing to the end of this thing to start basically the same thing right before the next loop the starting point is to the end of this one so they mean the same thing so just move this to the end of that now this should fix that issue that you're not seeing the snake colliding and now you should see that the snake actually collides with the wall before playing this game right so it went inside the wall and the game needed and now everything is pretty much fixed and now let's proceed to making this game real sneaky what is that we need to include the snake's body we are just growing the snake which is basically just increasing the length right so here you can see it's just increasing in length so how can we store this neat volume well what is your body it's just a collection of body parts and that collection must have triggered something inside you well they are going to use something like an array which is a collection a vector which is also a collection which was seen in the pointless video and the other thing is list right so these are three options available to us as of now and we'll use one of this now let's unless what we need to use over here so i think when and how do we know the fixed size of this name well if a player like me is going to play he's probably going to get defeated in let's say 5 or ten points right because i have a very bad player and maybe a pro player comes in and he can make a score as big as 1000 or 10 000 right well you cannot restrict the players or you cannot estimate the player's capacity by just uh keeping a fixed number what if the player is better than what you thought he should be right so here what you can do is well in this particular board you can actually fix it to some big number so let's say see that it is 50 and height is 25 right so the maximum number of characters possible is this thing 50 times 25 out of which you're using the borders so that is the only number of characters so if you make the snake as big as that after that there is no possibility of waiting because the snake has to collide right because the maximum free space has been limitations right so that is why you have uh such uh teleportable walls and all to take care of this issue but uh for this particular game uh we won't be talking about the teleportable ones but in the end i'll show you how to create teleportable walls if you want to and here basically the array is a very bad option because you are restricting the player's capacity and if you talk about vectors well it is dynamic but again it is going to take up some more extra space by defining so if you remember how vector work is first define some amount of space and once it gets filled up it will define a bigger space and then copy all the elements to this and get rid of this particular space so this one could be used this could work but again there is some extra space which is getting wasted so basically the best option here is going to be list so if you remember from our video on the pointers where we first discussed when to use vectors versus 20 useless you saw that list can be used whenever you have a data structure where you won't be accessing the middle elements more frequently you are just going to access the first and last image that is the case here also right we are not going to access the middle elements which is basically these body parts we are not going to access it we are just only concerned about the head which is on the front of the data structure and then right so we will talk about how to uh actually manage the head and tie with the short one but for now the head is at the beginning and the tail is at the end and they're only bothered about these two things we're not causing a protective of being able to pick some random element from in between well in a vector we can do that very simply because it is a continuous collection but in a list you if you remember it was something like this right your pointer you have pointed to something and then you have another pointer which points to this and so on if you want to pick this thing you need to power all this way but in a vector or in an array you can just pick that up using the index it is basically the starting position plus the number of steps you need to determine so in this case a list would be the best implement but to keep this tutorial simple i'm using vectors for this particular demonstration so i would totally encourage you to go with list not with vectors as we are going to see in this video and just showing with vectors because it's easier to relate than this right but once you're comfortable by implementing this particular project in a vector please go on to try it with a list list is the most preferred option for such games where you don't have to control the capacity of the user vector is not going to control but basically the extra space and how do we define the body well it's really simple so let's say i have two body parts basically a tail and the head i have this head over here and the snake has to move to the right so what can i do well what if i just remove this tail and then put another head over here and make this as a tail so for the let's just say this x mark over here that dino city now if you see that the snake has pulled one step to the right right and if i do that again so i take out this tail i include the head and i'm doing this head as the tail let's take a smooth again and let's say we are eating the food at some location so let's start with another snake so this is the snake we have and the food it is going to eat this particular food so it has eaten in the next iteration what i will do is i won't take off this table i will keep the stain and this is what happened right so i add the head i want to remove and that basically looks like the snake has grown right from two body parts it has grown into three body parts and that's what we want right so this is the logic we are going to implement and we are going to do that in vectors again list is the most preferred option please try it with the list not with the vector after you're comfortable basically so let's let's go to our sneak.h and quickly create a body definition so we need vector obviously so hash will close vector which is going to do it with the list you know right as include list and well since vector is a standard scope element you need to specify the scope so using name space std like we did in the main function and here you can just say vector body sorry vector and what is the data depth it's going to be coordinates basically so chord and then body and this defines the body of the victim now they have two changes we need to make what is that first of all we need to include the head to the body once we create a new snake so in this snake point constructed what we're going to do we're just going to say body dot push back which is basically pushing back the elements inside a vector and what we need to push back we need to push back the position which is basically the position of the head of the snake right we can just body not push back that particular position and while moving the snake following that logic which we just discussed what we're going to do is first pushing the head of the snake to the end of the list or end of the vector so how we do that we do not push back the new position which has been updated after all these things a new position and now what we'll do is if the body size is greater than the length of the snake what is the length of the snake that is the thing we are growing when the snake is actually eating the food right so that is the thing we are manipulating over here so this length integer if the body is size which basically the number of elements in the vector is greater than the length then what you do you just take out the element from the body so how do you do that you just say body dot and if i actually confused with what function you need to use the best thing i would suggest is not just eliminate the function but just use the resources so uh you can just go to your web and then search something like ctp vectors documentation and you'll get a lot of resources and c plus plus dot com is the best one among them well i think that this is the best one where you can find short descriptions of all the functions and here you should be seeing some function like pop back what does it say it says that removes the last element in the vector effectively reducing the container size by one but we actually don't want this well why is that if you see but technically the tail should be at the end of the body but if you look at the structure what we're doing is we're actually pushing back the head one step to the right right so this is what two step does so basically our head is over here and your tail is over here and what we need to do we need to remove the first element so how can we remove that you can just check out the functions over here but to save the time i'm just going to show you the function which is basically clear or areas right so you will find this one this is basically going to remove from the vector either a single element or a range of elements so here we just need to remove a single element but the position is not an integer it's a pointer so here you can see it says the definitions iterator position and iterate to first unit well you can go with any of this the only difference is that it has a quantity but you don't have to know at this stage right you can you can just go and search what these two things are basically the same thing and how they use that you can see an example over here it says dot is my vector dot begin plus five so plus y is basically going five steps away from the first element which is basically the sixth element and that's uh how you use this areas function has also shown an example to delete a range well we are not quite interested in the regime we just want to erase a single element which is going to be our first element because our first element is the tail and what we can do we can just say my vector and begin plus 0 that is the first implement or we can just omit the zero and just say my vector that is going to erase the first angle so let's implement that what we're going to say i'm going to say body dot it is and what we're going to do is we're going to erase the first element which we can get from body dots again this is the pointer for the first item first position right so this will basically erase the first element from our list and before proceeding let's first see whether this is working or not and we need to create another function let us keep this function alone then create another function just in case something goes wrong so vector and it is going to be coordinated you need a coordinate vector to be written well basically you are going to return this next body so snake and then let's say get body and inside this we can say return body and in the snake dot h you can just create that function definition which is basically the vector sorry what does that get body right so now we have different snakes definition now we'll just update the board and what we need we first need a vector to capture the snake's body so vector quant let's say snake body equal to snake dot get body and inside this what we're going to do we'll just remove this else and we'll place this afterwards what we're going to do is inside the edge we are first going to loop through snake's body and see whether any coordinate matches or not so uh what we can do is we can just say this body part which will stay false in the beginning right we'll change that in the loop and what you can say is for in and k plus plus what we are going to do here is inside this loop we will say if i coordinate which is basically going to control the y coordinate is equal to the snake body of the kth index dot x sorry dot y and j plus one well remember that's the logic we were missing up equal to snake body dot solution body of that particular index dot x if these things match up then what we need to do you need to display a body part so let's just go with the small o for now this is our body part and this body part becomes true equal to true and what else well we don't want to run this thing right because at an instant a particular body part can stay on there at a particular location so if that location is occupied it is pretty obvious that any other body part won't occupy the location so you can safely break out of this loop you can end this loop and in the end what you can say is if it is not body part if not body part then obviously it is going to be just an empty space and here another thing is here we are going to report it on size but remember body includes the head right so what we can do is we can just say body dot size 1 which will basically leave at the last input and now this should work i mean let's try to implement this so f9 and here you can see that the snake has grown so the other fold is over here so well i ate that and the third food is over here well you can see that the snake is growing right so here you have four body parts of the snake and now if i eat that here now you have five right so now we have a working snake game right so now you have working snake game and this works pretty fine right so now the you can see that the animation also works pretty fine the body parts seem to follow the head and so on right so this concludes our game well i will just keep it global so that you can use it on the board function also so here you can just see in score which is going to be zero in the beginning and uh well you can just set this to zero in case you want to uh say play again something like that what you can do is instead of main you can just say game and this is going to avoid game because i'm not going to do that you can do that right so if if i want to play again you can ask a question do you want to play again or not something like that and if i press yes then you can call this function again and then you can set this thing as zero so equal to zero before the beginning of the new game and here what you can do is you can just say score plus plus very simple and if you want to give 10 points or something like that you can just do that score equal to square plus 10 or any short hands if you know scored plus equal to 10 or something like that you can do that over here and here before starting to print out the board what we can do is we can just say c out our score so score is our school current school and just add a couple of new lines so that looks neat and that should equal well now i have one redundant function over here that is this food sorry the snake pause which is actually getting the position of the head and we are also getting the position of the body right and we did not define the collision of the sleeve right so we'll do that those things first of all let's just see whether this thing works or not so now you have this particular snake and i hate that the school is 10 now i hate that school is 20 i ate that school is 30 and so on so it's working pretty fine so you can close that and to take care of the collision where you might have figured it out by now what we need to do well what you need to do here is you need to say else and you need to check whether it collided or not how do i check that well you don't need an electron you can directly is less than the body dot size well it's inside this nature i don't have to call that again just length minus 1 because i don't want the head and it's going to be i plus plus right and what we need to check if our snake's head head is basically positive right so if cos dot x is equal to any of this new body will be the substrate body is just body body of i dot x and the y coordinate is also same positive y is equal to bodies i don't y if these two thing match up just say return true yes you collided if these two things don't satisfy the end just say written false so they should take care of the collision so let's just try that out f9 to build and combine this and here you have this snake and the food and let's first go for our first food we have grown and the score has also increased and the second fruit but it's going to take a while if i go like that it's just going one body particularly so what i can do is i'll just write up equivalent well how can i collect well i'm going left now right so if i just press right i'm just going to pull it with my neck so basically i collected and now you can see that the process has stopped basically all collision algorithm is working so that basically ends this game and if you want to make a teleportable wall it's really simple what you need to do is i i'm sure many of you must have figured it out right now well you just need to play with the coordinates so if here if you see in the snake moves me what you do is if you want to change the location of this wave you will just say here if this particular thing if position dot x is greater than the width minus 2 then what you do you just say position dot x equal to zero so simple and again what you do if you say if position dot y or position dot x is less than one then what you do is just have position dot x equal to the width minus three sorry about that it for random function we need to use with minus three because uh for generating the random numbers in that range it's basically with minus two and this will make the side walls teleportable so if you just save that and now if you run this you should be going through the sidewall and coming from the other one and now if i go through my side wall i should be appearing from the other one so you can see that it has been kind of teleportation now if i eat that our tray will also follow our steps right so if it goes from there you appear from there right so it works good that is how you make data portable walls and uh once you get to know about file handling basically how to write files what you can do is you can even have a high score option so you can write down a particular high score on the file so let's say i open this game right now and i scored about 10 points and you scored about thousand points that's pretty reasonable i'm not a very good player but yeah so uh you scored a thousand points and that is a high score right so here if you run this program again that high school gets lost so instead of just writing it on the memory for that particular kind of run what you can do is you can have a file where you can write down all your high scores and then whenever you load this game you don't get along with the file so inside that file you have all the high school lists and if you want you can just have names also so some games provide that right so you have the name and the high school sometimes you can design everything and we'll come back to this by discussing files right so because uh traditionally what we do is we just write files about students and all the stuff but we'll come back here and then try to work on this game more and trying to create a file and again this is the total working game and if you want to implement this and if you are comfortable with implementing this with this kind of vector well i have made some rejected functions like this is completely solid this one is completely unnecessary because i'm getting the head along with the body so you can take care of that and again i will advise you not to use a vector using this and here if you want to include another teleportable wall inside this one you can do that again with a similar kind of logic for yaxis right so you make basically all four four of them all still reportable so uh when i i had actually implemented this game in python and if you use a graphics library you will be getting results like that so if we go to our python one so here i have my game it is basically written in two files one has the classes and one has the script and it has various images so what i have is the snake in patch so here you can see body horizontal tail up so whenever that snake is going in that particular direction you show that image and now where you can run this thing right over here you can see this game this is what you can make with a graphics library well this is pretty far but this is what you can make with the graphics library and you can see how smooth it is and it doesn't have any uh kind of issues like moving down faster in the vertical direction moving slower in the horizontal direction it has kind of same speed because you can control it you can basically control the number of pixels and all and if you see it is really portable on both sides if i go from the bottom from coming from the top and if i go from the sides i end up coming from there so this is how you can implement your games and this is basically the same project which i've implemented except that i have some additional functions handling the graphics of this game right nothing more than that it is basically the same exact logic which were talked but when you use a graphics library you get results like that so once you're comfortable when programming this particular game on the console i would advise you to look up some graphics library which is available in safe space there are many so see what you're comfortable with and try to implement such games on graphics even the tick factor game can be implemented on the graphics network and that really looks good instead of the concern is the best way or the best platform to actually put down our ideas in a very fast way well if i want to do the same thing in a graphics library it will take a really long time i need to initiate the graphics library i need to do a lot of things before getting all these things right so if you're coming up with an idea i would rather recommend you not to go to a graphics library but first thing and then put up a dirty kind of working prototype on your console and then you can beautify it on the graphics library so that's it for this particular video hope you enjoyed this and you know making it faster on the x and slower on the way or something like that i didn't do that i just went with a very simple approach but i'm sure you can do that and in the next video we'll start with inheritance till then happy coding