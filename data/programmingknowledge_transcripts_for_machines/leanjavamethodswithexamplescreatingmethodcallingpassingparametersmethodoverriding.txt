in this video we will see what is a method and how to use a method in Java methods are also called functions in other languages so if I use function or method they can be used interchangeably okay but in Java this method is preferred or method what keyboard is preferred so first of all what is a method a method is a piece of code which executes some logic and you can wrap this method with a name and you can call this method again and again whenever you want to use it now how to use a method first of all for your information this main is also a method which every Java program has this I have told you in the initial videos right so in this same method this is you know Java is expecting us to provide and our method name should not be mean because there should be only one main method in any Java program okay but other than mean and reserved name in Java you can define any name to a method so first of all let's see what is the basic syntax of a method so we just give first of all the access specifier to our method which is public like this and then static so don't worry about these public and static because we will see these keywords in detail in the later videos when ever we will see how to use classes but then starts this return value which is the part of the method and then comes the name of the method for example my first method okay and then comes these brackets in these brackets we can pass some parameter but for the first time because it's an introduction I just want to leave them empty they can be left empty or you can pass parameters like int a something like this in here but for now for simplicity I will leave them you know blank so this is the simplest kind of method so what are these first of all public static is called the access specifier and public key word tells your class or Java that it's accessible anywhere inside your class okay and then void is the return type right now we are not returning anything that's why we write here void but I will show you in the further videos how to return value using method and in that we will see more options other than void you know with this method and then comes the method name and in these school circular brackets or round brackets comes the argument for now we are not passing any argument and then in these curly braces comes your statement for example we want to execute or we want to print some some message so system dot out dot print line and we just write hello YouTube okay and this is the basic syntax or code which you want to write or which what you want to exist cute using this method now you can call this method in your main method here and you don't need to execute or print anything you can just call this method as it is you just need to copy the name of the method like this and then provide these two round brackets okay and then when you run the program it will print hello YouTube so we are not if you notice we are not directly printing in our main method you tell YouTube but we are calling the function with a function name and then it prints hello YouTube okay and the biggest advantage of using this function or method is it will make your code really readable and really concise and it will make your code look good okay and understandable so for example you want to call this method again and again inside your function you can call it and you don't need to write any further code right it will print hello you do five times so you can call a method again and again in inside your main method and without writing rewriting the same code again and again so the basic rule of thumb is when you decide to write a method whenever you have the code which is you know which you want to write again and again then you may wrap it inside our method and this will help you to reduce the lines of code which will you write okay for example this code contains five lines okay so and we don't want to write these five lines again and again because for example this code can method contains five lines and if we have to do it without the method we have to do it you know just like this and we want to call it if once again these five lines of code again in our main method then we need to write it something like this and this and this will make your codes really lengthy and whenever your code becomes really ran lengthy it will be hard to read your code okay and what this method is doing it's just making your code with you know execute with just single line of code okay so this is the real advantage of method and you should give a really logical name to your method so that it's understandable and then you know any other person if he is reading your code he will be able to understand your code dolls now in this video we will see some more properties we can add to a method one I'm going to show you is called passing parameters to the method and other is called the returning values from a method so this was the simple method I have shown you in the last video now it doesn't solve much of the purpose because every time it's not flexible it's only printing hello YouTube every time now to make it more flexible we can add an argument to this function we have made in the last video so the declaration remains same public static is the access specifier void is the return value why the means we are natural returning no value and the name of our function is this one and in these round brackets we will pass our parameter in just a moment and in here in these curly braces we write our statement so for example we want to greet some persons based upon their names so we can pass an argument to this function like this so we will pass the name in the form of string variable so we just give the datatype first and then we give the value or a variable name which we want to pass so we can say name okay so this kind of declaration inside your round bracket in the function is called the parameter passing okay and this parameter name which is a string you can use inside your function so if you want to say hello or whatever name is passed to the function then it will you know print that name so whenever we call this function say hello to the main method for example we call the name John then it will greet hello John okay so I will run the program and it says hello John and this function can be used to greet more than one function for example John Tom or for example some other name mark for example and look greet all three names hello John hello Tom and hello mark okay so this makes our function a little bit flexible in a way that we can you know use it according to our use okay the other use of this function we can use it to add for example with integer so here you can pass any number of parameter no it's not necessary that you need to pass only one parameter you can pass multiple parameters in here in as an parameter right so how we can do this we will declare one more function for example public this should be public static void because we are not returning anything and now we will make a function call ad which we want to add two values in using this function okay and in here we can pass multiple values whatever number of values you want to add for example in the a comma int B for example we want to add these two values and print the result what we can do is we can just print these values by calling a plus B so just write a plus B okay and what this will do whatever you pass as an argument here and here it will add these two values and print on the terminal right so when I run this program first of all I need to call this ad function I will delete this say hello from the main and I will call this ad function and for example I want to add two integers and this is hundred and two zero one for example I want to add and I will run the program and it prints the result which is three zero one using this code okay and now I want to add some more integers for example I want to add some values and some other values and I can do it with the same function so this makes your job really easy using a same function you can add different values or you can perform different operations on different values right so it makes your code really you know readable and understandable at the same time now you can add more in parameters like in C and you can add this parameter here and in here you can add some more integer values like this okay so it depends upon you how many parameters you want to pass to your function and it will give you the result okay so it's totally dependent upon you the only thing is you just need to give the datatype and the variable which will hold these values so indirectly whenever you pass 100 as a first parameter 100 is equal to 100 becomes a here and it goes here okay so the value of a becomes hundred and value of B becomes two zero one in this here and value of C becomes two one one here so they will be replaced and they will be called and the answer will be printed on the console okay now to make it more flexible this is called parameter passing but you know we can only pass the values and if we want to access the result using these parameter passing we cannot access the results so for example we want to use this result 5 1 2 in our main function to you know do some other arithmetic operation how we can use it okay so it's using this function it's not possible right but there is a way to do this and the way to do this is by returning some value so we will modify this add function a little right now it's a returning void what means it's not returning anything but when we want to use it inside our main function when we want to use the result inside our main function we can reserve return integer value okay and this return value will tell what kind of value you want to return from your function and the same you will return from here so just write return and just write a it should be a plus B plus C okay and in this way what you are basically doing is you are taking all the values with which you pass from or in these in this function and you are adding this and you are returning from this function so let's take an example of this so let's comment this system out for now and right now what we are doing is we will just add the values we are passing these three values and we will return and whenever a function return anything you can store it in other variable but of the same type so the data type of the returning value and the value in which you want to store the return value should be same so this is integer and this is integer or int right and you can call this odd function and paste it here and what this basically do is this will add 100 or this will replace a as hundred B as to 0 1 C as to 1 1 and it will add these two values and it will return at this sum and you can store this sum in some other variable ok and then you can print this value like this so you can call some and this will give you or you can access this value inside your main like this so this is do you do this and if you want to do some other automatic operation on this some you can do it for example end result some x for example 15 you want to do you can do it like this and this should be equal to and you can call your sum like this and you can just run the program it will give you the multiplication of whatever sum you will get from the add function adding these three numbers and then you can do some arithmetic operations on the sum you get as a result and you can multiply it by or whatever a dramatic operation you want to do and you can store this result in another variable and you can use it so in this way the function or methods made it really easy to you know organize your code and make it really concise really readable really understandable and it also makes your code you know prettier so I hope you have understood the basic concept of passing parameters like these and returning values like these okay in a same way you can make any logic using this function for example multiplication you can make a function to make multiplication you can make a function to you know do divisions you can add two numbers to you can subtract two numbers or any complicated you know automatic or logical or anything you want to do you can do it inside a function and you can take arguments or parameters here and you can return the results so that you can use it in your main method so I hope you have understood the basic concept of taking parameters or passing parameters to a method what is recursion and how we can use recursion in Java so it's very common practice to call one method from another for example we create a static method ad and we can call it inside our main method right so it's very common and everybody knows that Java also allows to call a method from itself like for example you can call ad inside your add method itself and this type of programming is called a recursion or this kind of programming when we call method from itself it's called recursion and very basic or we can say hello world program for recursion is factorial for calculating factorial so let's create a method to create a factorial for some number now those who don't know what is factorial what is the meaning of factorial we will I will just give you a small gist of it so a factorial is something like this so whenever you want to create a factorial of some number it's n which is a number multiplied by n minus 1 multiplied by n minus 2 until 1 so for example we want to create or when we want to carry calculate the factorial of 5 this is equal to 5 x 4 x 3 x 2 and x 1 okay so this is how we can calculate factorial now let's create a method to create or to calculate the factorial of a number so we can create this like this public static this should be public static and this is going to return integer value and we named our factorial as vectorial itself and it takes an integer int and for example or capital n as we are showing here and then we will try to find some algorithm which calculates the factorial so if the number is zero if you know if we want to find the factorial of zero it's one right so if n is less than or equal to one then we will say that the answer or we will return the answer as one right so something like this and here we will return one okay otherwise else we will return the value of n which we will take it inside the bracket then the value of n minus one right so we can say indirectly that we want to calculate the factorial of n minus one okay so we will call the method itself and we will pass n minus one here okay and then we will just close this and here we just want to return so I will just add return so this type of calling I'm calling factorial inside my you know factorial method itself and what this basically is doing if the value of n is less than 0 or less than or equal to 1 we will return one because factorial of 1 and 0 is 1 otherwise we will return the multiplication of the N which is why for example if you want to calculate the factorial of 5 we will return 5 x factorial of 4 right so once again it goes here and now we want to calculate the factorial of 4 and then once again it goes for x factorial of 3 it goes once again here 3 and factorial of 2 and it goes once again factorial of 2 multiplied by factorial of 1 and factorial of 1 here when n becomes 1 or 0 we will return 1 okay so indirectly it's calculating something like this ok and whenever we want to print this for example say o and we will print this and we will call factorial of 5 and let's see what's the answer you will run the program and it should be not this should be out okay and we will run the program and the factorial of 5 is 120 which is true right in the same way we can calculate the factorial of 4 and the answer will be 24 because 4 multiplied by 3 is 12 x 2 is 24 x 1 is 24 itself right and 24 x 5 is 120 which is the factorial of 5 so this way of calling method from itself is called recursion and you can do it something like this in this video we will learn about method overloading in the last videos I have shown you how to use a method now method overloading is same as declaring method but the main thing is you can define different method with the same name so two method you can define with the same name which can perform two different you know different logic so for example I want to add two values and I want to declare some method for this so I will declare a function called public static and it will return integer value and I will name it as add okay and what it's going to do is it's going to add two values okay and it will return these two values and then I will pass in a comma int B as the parameters and I will return the sum of these two values write a plus B and I can call it in here right but in realworld programming the situation may occur that you want to add not only two integer values you may want to add two double values or decimal values or you may want to add two strings because plus you can be used as a concatenation operators also so what you can do in Java is you can define the method two different method with the same name but for example different parameters and different values okay so you can define add something like this or you can define add something like this and this is called method overloading whenever you define different method with the same name which performs some different logic but they have I mean the same name they can perform mostly a same logic but you know datatype you want to use them or parameter you want to pass them can be different and whenever you will call these method for example something like this you want to add two values you can just call add to integer 1 comma 36 so it will by default Java knows that whenever you pass two integers here in a method you are calling this method because you are passing two integers in a same way whenever you pass two double values for example 5 point something and 40 point something then your Java program knows that you are calling this video so Java is intelligent enough to deduce your method by your initialization of the method in the same way you can pass whenever you want to pass two names for example hello and second parameter as world then also it you know it can know that you are calling the function because it takes string values and whenever you run the program it will give you different result then so in the first case this ad is calling this function in the second case this ad function is calling this function and in the third case this ad is calling this function so the method overloading or the basic logic of method overloading is you can define different method with the same name to perform different operations okay but logically they will be doing some same kind of work so this is Method overloading in Java I hope you enjoyed this video please rate comment and subscribe and bye for now